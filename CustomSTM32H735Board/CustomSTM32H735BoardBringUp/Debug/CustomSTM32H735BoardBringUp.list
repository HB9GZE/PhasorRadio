
CustomSTM32H735BoardBringUp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002cf7c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000022fc  0802d250  0802d250  0002e250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000001a6  0802f54c  0802f54c  0003054c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  0802f6f4  0802f6f4  000306f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 IntFlashSection 000222e0  0802f70c  0802f70c  0003070c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000010  080519ec  080519ec  000529ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  080519fc  080519fc  00053320  2**0
                  CONTENTS
  8 .ARM          00000008  080519fc  080519fc  000529fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  08051a04  08051a04  00053320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000014  08051a04  08051a04  00052a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  08051a18  08051a18  00052a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         00000110  24000000  08051a20  00053000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 TouchGFX_ScratchbufferA 00000100  24000120  08051b30  00053120  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 14 TouchGFX_ScratchbufferB 00000100  24000220  08051c30  00053220  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 15 .bss          00034c2c  24000320  08051d30  00053320  2**2
                  ALLOC
 16 ._user_heap_stack 00000604  24034f4c  08051d30  00053f4c  2**0
                  ALLOC
 17 .ARM.attributes 0000002e  00000000  00000000  00053320  2**0
                  CONTENTS, READONLY
 18 ExtFlashSection 00000000  90000000  90000000  0005334e  2**0
                  CONTENTS
 19 BufferSection 0011ee00  70000000  70000000  00054000  2**2
                  ALLOC
 20 .debug_info   000761a1  00000000  00000000  0005334e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_abbrev 000100f8  00000000  00000000  000c94ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_aranges 000047a0  00000000  00000000  000d95e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_rnglists 00003618  00000000  00000000  000ddd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_macro  00012eac  00000000  00000000  000e13a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line   00058874  00000000  00000000  000f424c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_str    0019b2bd  00000000  00000000  0014cac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .comment      000000c2  00000000  00000000  002e7d7d  2**0
                  CONTENTS, READONLY
 28 .debug_frame  00013dbc  00000000  00000000  002e7e40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_line_str 0000007a  00000000  00000000  002fbbfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000320 	.word	0x24000320
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0802d234 	.word	0x0802d234

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000324 	.word	0x24000324
 800030c:	0802d234 	.word	0x0802d234

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295
 8000738:	f04f 30ff 	movne.w	r0, #4294967295
 800073c:	f000 b96a 	b.w	8000a14 <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f806 	bl	8000758 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__udivmoddi4>:
 8000758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800075c:	9d08      	ldr	r5, [sp, #32]
 800075e:	460c      	mov	r4, r1
 8000760:	2b00      	cmp	r3, #0
 8000762:	d14e      	bne.n	8000802 <__udivmoddi4+0xaa>
 8000764:	4694      	mov	ip, r2
 8000766:	458c      	cmp	ip, r1
 8000768:	4686      	mov	lr, r0
 800076a:	fab2 f282 	clz	r2, r2
 800076e:	d962      	bls.n	8000836 <__udivmoddi4+0xde>
 8000770:	b14a      	cbz	r2, 8000786 <__udivmoddi4+0x2e>
 8000772:	f1c2 0320 	rsb	r3, r2, #32
 8000776:	4091      	lsls	r1, r2
 8000778:	fa20 f303 	lsr.w	r3, r0, r3
 800077c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000780:	4319      	orrs	r1, r3
 8000782:	fa00 fe02 	lsl.w	lr, r0, r2
 8000786:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800078a:	fa1f f68c 	uxth.w	r6, ip
 800078e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000792:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000796:	fb07 1114 	mls	r1, r7, r4, r1
 800079a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800079e:	fb04 f106 	mul.w	r1, r4, r6
 80007a2:	4299      	cmp	r1, r3
 80007a4:	d90a      	bls.n	80007bc <__udivmoddi4+0x64>
 80007a6:	eb1c 0303 	adds.w	r3, ip, r3
 80007aa:	f104 30ff 	add.w	r0, r4, #4294967295
 80007ae:	f080 8112 	bcs.w	80009d6 <__udivmoddi4+0x27e>
 80007b2:	4299      	cmp	r1, r3
 80007b4:	f240 810f 	bls.w	80009d6 <__udivmoddi4+0x27e>
 80007b8:	3c02      	subs	r4, #2
 80007ba:	4463      	add	r3, ip
 80007bc:	1a59      	subs	r1, r3, r1
 80007be:	fa1f f38e 	uxth.w	r3, lr
 80007c2:	fbb1 f0f7 	udiv	r0, r1, r7
 80007c6:	fb07 1110 	mls	r1, r7, r0, r1
 80007ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ce:	fb00 f606 	mul.w	r6, r0, r6
 80007d2:	429e      	cmp	r6, r3
 80007d4:	d90a      	bls.n	80007ec <__udivmoddi4+0x94>
 80007d6:	eb1c 0303 	adds.w	r3, ip, r3
 80007da:	f100 31ff 	add.w	r1, r0, #4294967295
 80007de:	f080 80fc 	bcs.w	80009da <__udivmoddi4+0x282>
 80007e2:	429e      	cmp	r6, r3
 80007e4:	f240 80f9 	bls.w	80009da <__udivmoddi4+0x282>
 80007e8:	4463      	add	r3, ip
 80007ea:	3802      	subs	r0, #2
 80007ec:	1b9b      	subs	r3, r3, r6
 80007ee:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80007f2:	2100      	movs	r1, #0
 80007f4:	b11d      	cbz	r5, 80007fe <__udivmoddi4+0xa6>
 80007f6:	40d3      	lsrs	r3, r2
 80007f8:	2200      	movs	r2, #0
 80007fa:	e9c5 3200 	strd	r3, r2, [r5]
 80007fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000802:	428b      	cmp	r3, r1
 8000804:	d905      	bls.n	8000812 <__udivmoddi4+0xba>
 8000806:	b10d      	cbz	r5, 800080c <__udivmoddi4+0xb4>
 8000808:	e9c5 0100 	strd	r0, r1, [r5]
 800080c:	2100      	movs	r1, #0
 800080e:	4608      	mov	r0, r1
 8000810:	e7f5      	b.n	80007fe <__udivmoddi4+0xa6>
 8000812:	fab3 f183 	clz	r1, r3
 8000816:	2900      	cmp	r1, #0
 8000818:	d146      	bne.n	80008a8 <__udivmoddi4+0x150>
 800081a:	42a3      	cmp	r3, r4
 800081c:	d302      	bcc.n	8000824 <__udivmoddi4+0xcc>
 800081e:	4290      	cmp	r0, r2
 8000820:	f0c0 80f0 	bcc.w	8000a04 <__udivmoddi4+0x2ac>
 8000824:	1a86      	subs	r6, r0, r2
 8000826:	eb64 0303 	sbc.w	r3, r4, r3
 800082a:	2001      	movs	r0, #1
 800082c:	2d00      	cmp	r5, #0
 800082e:	d0e6      	beq.n	80007fe <__udivmoddi4+0xa6>
 8000830:	e9c5 6300 	strd	r6, r3, [r5]
 8000834:	e7e3      	b.n	80007fe <__udivmoddi4+0xa6>
 8000836:	2a00      	cmp	r2, #0
 8000838:	f040 8090 	bne.w	800095c <__udivmoddi4+0x204>
 800083c:	eba1 040c 	sub.w	r4, r1, ip
 8000840:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000844:	fa1f f78c 	uxth.w	r7, ip
 8000848:	2101      	movs	r1, #1
 800084a:	fbb4 f6f8 	udiv	r6, r4, r8
 800084e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000852:	fb08 4416 	mls	r4, r8, r6, r4
 8000856:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800085a:	fb07 f006 	mul.w	r0, r7, r6
 800085e:	4298      	cmp	r0, r3
 8000860:	d908      	bls.n	8000874 <__udivmoddi4+0x11c>
 8000862:	eb1c 0303 	adds.w	r3, ip, r3
 8000866:	f106 34ff 	add.w	r4, r6, #4294967295
 800086a:	d202      	bcs.n	8000872 <__udivmoddi4+0x11a>
 800086c:	4298      	cmp	r0, r3
 800086e:	f200 80cd 	bhi.w	8000a0c <__udivmoddi4+0x2b4>
 8000872:	4626      	mov	r6, r4
 8000874:	1a1c      	subs	r4, r3, r0
 8000876:	fa1f f38e 	uxth.w	r3, lr
 800087a:	fbb4 f0f8 	udiv	r0, r4, r8
 800087e:	fb08 4410 	mls	r4, r8, r0, r4
 8000882:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000886:	fb00 f707 	mul.w	r7, r0, r7
 800088a:	429f      	cmp	r7, r3
 800088c:	d908      	bls.n	80008a0 <__udivmoddi4+0x148>
 800088e:	eb1c 0303 	adds.w	r3, ip, r3
 8000892:	f100 34ff 	add.w	r4, r0, #4294967295
 8000896:	d202      	bcs.n	800089e <__udivmoddi4+0x146>
 8000898:	429f      	cmp	r7, r3
 800089a:	f200 80b0 	bhi.w	80009fe <__udivmoddi4+0x2a6>
 800089e:	4620      	mov	r0, r4
 80008a0:	1bdb      	subs	r3, r3, r7
 80008a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008a6:	e7a5      	b.n	80007f4 <__udivmoddi4+0x9c>
 80008a8:	f1c1 0620 	rsb	r6, r1, #32
 80008ac:	408b      	lsls	r3, r1
 80008ae:	fa22 f706 	lsr.w	r7, r2, r6
 80008b2:	431f      	orrs	r7, r3
 80008b4:	fa20 fc06 	lsr.w	ip, r0, r6
 80008b8:	fa04 f301 	lsl.w	r3, r4, r1
 80008bc:	ea43 030c 	orr.w	r3, r3, ip
 80008c0:	40f4      	lsrs	r4, r6
 80008c2:	fa00 f801 	lsl.w	r8, r0, r1
 80008c6:	0c38      	lsrs	r0, r7, #16
 80008c8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80008cc:	fbb4 fef0 	udiv	lr, r4, r0
 80008d0:	fa1f fc87 	uxth.w	ip, r7
 80008d4:	fb00 441e 	mls	r4, r0, lr, r4
 80008d8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008dc:	fb0e f90c 	mul.w	r9, lr, ip
 80008e0:	45a1      	cmp	r9, r4
 80008e2:	fa02 f201 	lsl.w	r2, r2, r1
 80008e6:	d90a      	bls.n	80008fe <__udivmoddi4+0x1a6>
 80008e8:	193c      	adds	r4, r7, r4
 80008ea:	f10e 3aff 	add.w	sl, lr, #4294967295
 80008ee:	f080 8084 	bcs.w	80009fa <__udivmoddi4+0x2a2>
 80008f2:	45a1      	cmp	r9, r4
 80008f4:	f240 8081 	bls.w	80009fa <__udivmoddi4+0x2a2>
 80008f8:	f1ae 0e02 	sub.w	lr, lr, #2
 80008fc:	443c      	add	r4, r7
 80008fe:	eba4 0409 	sub.w	r4, r4, r9
 8000902:	fa1f f983 	uxth.w	r9, r3
 8000906:	fbb4 f3f0 	udiv	r3, r4, r0
 800090a:	fb00 4413 	mls	r4, r0, r3, r4
 800090e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000912:	fb03 fc0c 	mul.w	ip, r3, ip
 8000916:	45a4      	cmp	ip, r4
 8000918:	d907      	bls.n	800092a <__udivmoddi4+0x1d2>
 800091a:	193c      	adds	r4, r7, r4
 800091c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000920:	d267      	bcs.n	80009f2 <__udivmoddi4+0x29a>
 8000922:	45a4      	cmp	ip, r4
 8000924:	d965      	bls.n	80009f2 <__udivmoddi4+0x29a>
 8000926:	3b02      	subs	r3, #2
 8000928:	443c      	add	r4, r7
 800092a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800092e:	fba0 9302 	umull	r9, r3, r0, r2
 8000932:	eba4 040c 	sub.w	r4, r4, ip
 8000936:	429c      	cmp	r4, r3
 8000938:	46ce      	mov	lr, r9
 800093a:	469c      	mov	ip, r3
 800093c:	d351      	bcc.n	80009e2 <__udivmoddi4+0x28a>
 800093e:	d04e      	beq.n	80009de <__udivmoddi4+0x286>
 8000940:	b155      	cbz	r5, 8000958 <__udivmoddi4+0x200>
 8000942:	ebb8 030e 	subs.w	r3, r8, lr
 8000946:	eb64 040c 	sbc.w	r4, r4, ip
 800094a:	fa04 f606 	lsl.w	r6, r4, r6
 800094e:	40cb      	lsrs	r3, r1
 8000950:	431e      	orrs	r6, r3
 8000952:	40cc      	lsrs	r4, r1
 8000954:	e9c5 6400 	strd	r6, r4, [r5]
 8000958:	2100      	movs	r1, #0
 800095a:	e750      	b.n	80007fe <__udivmoddi4+0xa6>
 800095c:	f1c2 0320 	rsb	r3, r2, #32
 8000960:	fa20 f103 	lsr.w	r1, r0, r3
 8000964:	fa0c fc02 	lsl.w	ip, ip, r2
 8000968:	fa24 f303 	lsr.w	r3, r4, r3
 800096c:	4094      	lsls	r4, r2
 800096e:	430c      	orrs	r4, r1
 8000970:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000974:	fa00 fe02 	lsl.w	lr, r0, r2
 8000978:	fa1f f78c 	uxth.w	r7, ip
 800097c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000980:	fb08 3110 	mls	r1, r8, r0, r3
 8000984:	0c23      	lsrs	r3, r4, #16
 8000986:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800098a:	fb00 f107 	mul.w	r1, r0, r7
 800098e:	4299      	cmp	r1, r3
 8000990:	d908      	bls.n	80009a4 <__udivmoddi4+0x24c>
 8000992:	eb1c 0303 	adds.w	r3, ip, r3
 8000996:	f100 36ff 	add.w	r6, r0, #4294967295
 800099a:	d22c      	bcs.n	80009f6 <__udivmoddi4+0x29e>
 800099c:	4299      	cmp	r1, r3
 800099e:	d92a      	bls.n	80009f6 <__udivmoddi4+0x29e>
 80009a0:	3802      	subs	r0, #2
 80009a2:	4463      	add	r3, ip
 80009a4:	1a5b      	subs	r3, r3, r1
 80009a6:	b2a4      	uxth	r4, r4
 80009a8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009ac:	fb08 3311 	mls	r3, r8, r1, r3
 80009b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009b4:	fb01 f307 	mul.w	r3, r1, r7
 80009b8:	42a3      	cmp	r3, r4
 80009ba:	d908      	bls.n	80009ce <__udivmoddi4+0x276>
 80009bc:	eb1c 0404 	adds.w	r4, ip, r4
 80009c0:	f101 36ff 	add.w	r6, r1, #4294967295
 80009c4:	d213      	bcs.n	80009ee <__udivmoddi4+0x296>
 80009c6:	42a3      	cmp	r3, r4
 80009c8:	d911      	bls.n	80009ee <__udivmoddi4+0x296>
 80009ca:	3902      	subs	r1, #2
 80009cc:	4464      	add	r4, ip
 80009ce:	1ae4      	subs	r4, r4, r3
 80009d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80009d4:	e739      	b.n	800084a <__udivmoddi4+0xf2>
 80009d6:	4604      	mov	r4, r0
 80009d8:	e6f0      	b.n	80007bc <__udivmoddi4+0x64>
 80009da:	4608      	mov	r0, r1
 80009dc:	e706      	b.n	80007ec <__udivmoddi4+0x94>
 80009de:	45c8      	cmp	r8, r9
 80009e0:	d2ae      	bcs.n	8000940 <__udivmoddi4+0x1e8>
 80009e2:	ebb9 0e02 	subs.w	lr, r9, r2
 80009e6:	eb63 0c07 	sbc.w	ip, r3, r7
 80009ea:	3801      	subs	r0, #1
 80009ec:	e7a8      	b.n	8000940 <__udivmoddi4+0x1e8>
 80009ee:	4631      	mov	r1, r6
 80009f0:	e7ed      	b.n	80009ce <__udivmoddi4+0x276>
 80009f2:	4603      	mov	r3, r0
 80009f4:	e799      	b.n	800092a <__udivmoddi4+0x1d2>
 80009f6:	4630      	mov	r0, r6
 80009f8:	e7d4      	b.n	80009a4 <__udivmoddi4+0x24c>
 80009fa:	46d6      	mov	lr, sl
 80009fc:	e77f      	b.n	80008fe <__udivmoddi4+0x1a6>
 80009fe:	4463      	add	r3, ip
 8000a00:	3802      	subs	r0, #2
 8000a02:	e74d      	b.n	80008a0 <__udivmoddi4+0x148>
 8000a04:	4606      	mov	r6, r0
 8000a06:	4623      	mov	r3, r4
 8000a08:	4608      	mov	r0, r1
 8000a0a:	e70f      	b.n	800082c <__udivmoddi4+0xd4>
 8000a0c:	3e02      	subs	r6, #2
 8000a0e:	4463      	add	r3, ip
 8000a10:	e730      	b.n	8000874 <__udivmoddi4+0x11c>
 8000a12:	bf00      	nop

08000a14 <__aeabi_idiv0>:
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000a1e:	f000 ff6d 	bl	80018fc <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000a22:	4b58      	ldr	r3, [pc, #352]	@ (8000b84 <main+0x16c>)
 8000a24:	695b      	ldr	r3, [r3, #20]
 8000a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d11b      	bne.n	8000a66 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a2e:	f3bf 8f4f 	dsb	sy
}
 8000a32:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a34:	f3bf 8f6f 	isb	sy
}
 8000a38:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000a3a:	4b52      	ldr	r3, [pc, #328]	@ (8000b84 <main+0x16c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000a42:	f3bf 8f4f 	dsb	sy
}
 8000a46:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a48:	f3bf 8f6f 	isb	sy
}
 8000a4c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000a4e:	4b4d      	ldr	r3, [pc, #308]	@ (8000b84 <main+0x16c>)
 8000a50:	695b      	ldr	r3, [r3, #20]
 8000a52:	4a4c      	ldr	r2, [pc, #304]	@ (8000b84 <main+0x16c>)
 8000a54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a58:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a5a:	f3bf 8f4f 	dsb	sy
}
 8000a5e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a60:	f3bf 8f6f 	isb	sy
}
 8000a64:	e000      	b.n	8000a68 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000a66:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000a68:	4b46      	ldr	r3, [pc, #280]	@ (8000b84 <main+0x16c>)
 8000a6a:	695b      	ldr	r3, [r3, #20]
 8000a6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d138      	bne.n	8000ae6 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000a74:	4b43      	ldr	r3, [pc, #268]	@ (8000b84 <main+0x16c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000a7c:	f3bf 8f4f 	dsb	sy
}
 8000a80:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000a82:	4b40      	ldr	r3, [pc, #256]	@ (8000b84 <main+0x16c>)
 8000a84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000a88:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	0b5b      	lsrs	r3, r3, #13
 8000a8e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a92:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	08db      	lsrs	r3, r3, #3
 8000a98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a9c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	015a      	lsls	r2, r3, #5
 8000aa2:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000aa6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000aac:	4935      	ldr	r1, [pc, #212]	@ (8000b84 <main+0x16c>)
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	1e5a      	subs	r2, r3, #1
 8000ab8:	607a      	str	r2, [r7, #4]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d1ef      	bne.n	8000a9e <main+0x86>
    } while(sets-- != 0U);
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	1e5a      	subs	r2, r3, #1
 8000ac2:	60ba      	str	r2, [r7, #8]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d1e5      	bne.n	8000a94 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ac8:	f3bf 8f4f 	dsb	sy
}
 8000acc:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000ace:	4b2d      	ldr	r3, [pc, #180]	@ (8000b84 <main+0x16c>)
 8000ad0:	695b      	ldr	r3, [r3, #20]
 8000ad2:	4a2c      	ldr	r2, [pc, #176]	@ (8000b84 <main+0x16c>)
 8000ad4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ad8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ada:	f3bf 8f4f 	dsb	sy
}
 8000ade:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ae0:	f3bf 8f6f 	isb	sy
}
 8000ae4:	e000      	b.n	8000ae8 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000ae6:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae8:	f004 ff0a 	bl	8005900 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aec:	f000 f85e 	bl	8000bac <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000af0:	f000 f8ce 	bl	8000c90 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000af4:	f000 fdfe 	bl	80016f4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000af8:	f000 f8fa 	bl	8000cf0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000afc:	f000 f974 	bl	8000de8 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000b00:	f000 f9da 	bl	8000eb8 <MX_ADC3_Init>
  MX_CRC_Init();
 8000b04:	f000 fa46 	bl	8000f94 <MX_CRC_Init>
  MX_DAC1_Init();
 8000b08:	f000 fa66 	bl	8000fd8 <MX_DAC1_Init>
  MX_DMA2D_Init();
 8000b0c:	f000 faa0 	bl	8001050 <MX_DMA2D_Init>
  MX_I2C1_Init();
 8000b10:	f000 fabc 	bl	800108c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000b14:	f000 fafa 	bl	800110c <MX_I2C2_Init>
  MX_LTDC_Init();
 8000b18:	f000 fb38 	bl	800118c <MX_LTDC_Init>
  MX_LIBJPEG_Init();
 8000b1c:	f00f fc04 	bl	8010328 <MX_LIBJPEG_Init>
  MX_OCTOSPI1_Init();
 8000b20:	f000 fbb6 	bl	8001290 <MX_OCTOSPI1_Init>
  MX_OCTOSPI2_Init();
 8000b24:	f000 fc36 	bl	8001394 <MX_OCTOSPI2_Init>
  MX_TIM1_Init();
 8000b28:	f000 fcec 	bl	8001504 <MX_TIM1_Init>
  MX_TIM23_Init();
 8000b2c:	f000 fd40 	bl	80015b0 <MX_TIM23_Init>
  MX_UART4_Init();
 8000b30:	f000 fd94 	bl	800165c <MX_UART4_Init>
  MX_TouchGFX_Init();
 8000b34:	f013 f881 	bl	8013c3a <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 8000b38:	f013 f878 	bl	8013c2c <MX_TouchGFX_PreOSInit>

//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);//enable LCD
//	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_15, GPIO_PIN_SET); //turn display backlight on
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET); //reset LCD
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET); //reset LCD
	HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3,SYSCFG_SWITCH_PC3_CLOSE); //connects PC3_C with PC3
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8000b42:	f004 ff5d 	bl	8005a00 <HAL_SYSCFG_AnalogSwitchConfig>
	//FTprobe = FT5336_Probe();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b46:	f00f fc3b 	bl	80103c0 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000b4a:	4a0f      	ldr	r2, [pc, #60]	@ (8000b88 <main+0x170>)
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	480f      	ldr	r0, [pc, #60]	@ (8000b8c <main+0x174>)
 8000b50:	f00f fc80 	bl	8010454 <osThreadNew>
 8000b54:	4603      	mov	r3, r0
 8000b56:	4a0e      	ldr	r2, [pc, #56]	@ (8000b90 <main+0x178>)
 8000b58:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000b5a:	4a0e      	ldr	r2, [pc, #56]	@ (8000b94 <main+0x17c>)
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	480e      	ldr	r0, [pc, #56]	@ (8000b98 <main+0x180>)
 8000b60:	f00f fc78 	bl	8010454 <osThreadNew>
 8000b64:	4603      	mov	r3, r0
 8000b66:	4a0d      	ldr	r2, [pc, #52]	@ (8000b9c <main+0x184>)
 8000b68:	6013      	str	r3, [r2, #0]

  /* creation of TouchGFXTask */
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000b6a:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba0 <main+0x188>)
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	480d      	ldr	r0, [pc, #52]	@ (8000ba4 <main+0x18c>)
 8000b70:	f00f fc70 	bl	8010454 <osThreadNew>
 8000b74:	4603      	mov	r3, r0
 8000b76:	4a0c      	ldr	r2, [pc, #48]	@ (8000ba8 <main+0x190>)
 8000b78:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b7a:	f00f fc45 	bl	8010408 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000b7e:	bf00      	nop
 8000b80:	e7fd      	b.n	8000b7e <main+0x166>
 8000b82:	bf00      	nop
 8000b84:	e000ed00 	.word	0xe000ed00
 8000b88:	0802df40 	.word	0x0802df40
 8000b8c:	080018a1 	.word	0x080018a1
 8000b90:	24000860 	.word	0x24000860
 8000b94:	0802df64 	.word	0x0802df64
 8000b98:	080018b1 	.word	0x080018b1
 8000b9c:	24000864 	.word	0x24000864
 8000ba0:	0802df88 	.word	0x0802df88
 8000ba4:	08013c4b 	.word	0x08013c4b
 8000ba8:	24000868 	.word	0x24000868

08000bac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b09c      	sub	sp, #112	@ 0x70
 8000bb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bb6:	224c      	movs	r2, #76	@ 0x4c
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f02b fd60 	bl	802c680 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	2220      	movs	r2, #32
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f02b fd5a 	bl	802c680 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000bcc:	2004      	movs	r0, #4
 8000bce:	f00a f817 	bl	800ac00 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	4b2d      	ldr	r3, [pc, #180]	@ (8000c8c <SystemClock_Config+0xe0>)
 8000bd8:	699b      	ldr	r3, [r3, #24]
 8000bda:	4a2c      	ldr	r2, [pc, #176]	@ (8000c8c <SystemClock_Config+0xe0>)
 8000bdc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000be0:	6193      	str	r3, [r2, #24]
 8000be2:	4b2a      	ldr	r3, [pc, #168]	@ (8000c8c <SystemClock_Config+0xe0>)
 8000be4:	699b      	ldr	r3, [r3, #24]
 8000be6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bee:	bf00      	nop
 8000bf0:	4b26      	ldr	r3, [pc, #152]	@ (8000c8c <SystemClock_Config+0xe0>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000bf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000bfc:	d1f8      	bne.n	8000bf0 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c02:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c06:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000c0c:	2340      	movs	r3, #64	@ 0x40
 8000c0e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c10:	2302      	movs	r3, #2
 8000c12:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c14:	2302      	movs	r3, #2
 8000c16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000c1c:	232c      	movs	r3, #44	@ 0x2c
 8000c1e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000c20:	2301      	movs	r3, #1
 8000c22:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c24:	2302      	movs	r3, #2
 8000c26:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c2c:	230c      	movs	r3, #12
 8000c2e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c30:	2300      	movs	r3, #0
 8000c32:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f00a f839 	bl	800acb4 <HAL_RCC_OscConfig>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000c48:	f000 fed4 	bl	80019f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c4c:	233f      	movs	r3, #63	@ 0x3f
 8000c4e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c50:	2303      	movs	r3, #3
 8000c52:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c54:	2300      	movs	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c58:	2308      	movs	r3, #8
 8000c5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c5c:	2340      	movs	r3, #64	@ 0x40
 8000c5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c60:	2340      	movs	r3, #64	@ 0x40
 8000c62:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c68:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c6a:	2340      	movs	r3, #64	@ 0x40
 8000c6c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	2103      	movs	r1, #3
 8000c72:	4618      	mov	r0, r3
 8000c74:	f00a fbf8 	bl	800b468 <HAL_RCC_ClockConfig>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000c7e:	f000 feb9 	bl	80019f4 <Error_Handler>
  }
}
 8000c82:	bf00      	nop
 8000c84:	3770      	adds	r7, #112	@ 0x70
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	58024800 	.word	0x58024800

08000c90 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b0ae      	sub	sp, #184	@ 0xb8
 8000c94:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c96:	463b      	mov	r3, r7
 8000c98:	22b8      	movs	r2, #184	@ 0xb8
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f02b fcef 	bl	802c680 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI|RCC_PERIPHCLK_CKPER;
 8000ca2:	f04f 4202 	mov.w	r2, #2181038080	@ 0x82000000
 8000ca6:	f04f 0300 	mov.w	r3, #0
 8000caa:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 8000cae:	2305      	movs	r3, #5
 8000cb0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 8000cb2:	2350      	movs	r3, #80	@ 0x50
 8000cb4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8000cc2:	2380      	movs	r3, #128	@ 0x80
 8000cc4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8000cce:	2320      	movs	r3, #32
 8000cd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f00a ff93 	bl	800bc04 <HAL_RCCEx_PeriphCLKConfig>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000ce4:	f000 fe86 	bl	80019f4 <Error_Handler>
  }
}
 8000ce8:	bf00      	nop
 8000cea:	37b8      	adds	r7, #184	@ 0xb8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08c      	sub	sp, #48	@ 0x30
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d02:	463b      	mov	r3, r7
 8000d04:	2224      	movs	r2, #36	@ 0x24
 8000d06:	2100      	movs	r1, #0
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f02b fcb9 	bl	802c680 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d0e:	4b33      	ldr	r3, [pc, #204]	@ (8000ddc <MX_ADC1_Init+0xec>)
 8000d10:	4a33      	ldr	r2, [pc, #204]	@ (8000de0 <MX_ADC1_Init+0xf0>)
 8000d12:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000d14:	4b31      	ldr	r3, [pc, #196]	@ (8000ddc <MX_ADC1_Init+0xec>)
 8000d16:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000d1a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000d1c:	4b2f      	ldr	r3, [pc, #188]	@ (8000ddc <MX_ADC1_Init+0xec>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d22:	4b2e      	ldr	r3, [pc, #184]	@ (8000ddc <MX_ADC1_Init+0xec>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d28:	4b2c      	ldr	r3, [pc, #176]	@ (8000ddc <MX_ADC1_Init+0xec>)
 8000d2a:	2204      	movs	r2, #4
 8000d2c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d2e:	4b2b      	ldr	r3, [pc, #172]	@ (8000ddc <MX_ADC1_Init+0xec>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d34:	4b29      	ldr	r3, [pc, #164]	@ (8000ddc <MX_ADC1_Init+0xec>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000d3a:	4b28      	ldr	r3, [pc, #160]	@ (8000ddc <MX_ADC1_Init+0xec>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d40:	4b26      	ldr	r3, [pc, #152]	@ (8000ddc <MX_ADC1_Init+0xec>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d48:	4b24      	ldr	r3, [pc, #144]	@ (8000ddc <MX_ADC1_Init+0xec>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d4e:	4b23      	ldr	r3, [pc, #140]	@ (8000ddc <MX_ADC1_Init+0xec>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000d54:	4b21      	ldr	r3, [pc, #132]	@ (8000ddc <MX_ADC1_Init+0xec>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d5a:	4b20      	ldr	r3, [pc, #128]	@ (8000ddc <MX_ADC1_Init+0xec>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d60:	4b1e      	ldr	r3, [pc, #120]	@ (8000ddc <MX_ADC1_Init+0xec>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000d66:	4b1d      	ldr	r3, [pc, #116]	@ (8000ddc <MX_ADC1_Init+0xec>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8000d6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000ddc <MX_ADC1_Init+0xec>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d74:	4819      	ldr	r0, [pc, #100]	@ (8000ddc <MX_ADC1_Init+0xec>)
 8000d76:	f005 f89f 	bl	8005eb8 <HAL_ADC_Init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000d80:	f000 fe38 	bl	80019f4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d84:	2300      	movs	r3, #0
 8000d86:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4813      	ldr	r0, [pc, #76]	@ (8000ddc <MX_ADC1_Init+0xec>)
 8000d90:	f006 f8de 	bl	8006f50 <HAL_ADCEx_MultiModeConfigChannel>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000d9a:	f000 fe2b 	bl	80019f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d9e:	4b11      	ldr	r3, [pc, #68]	@ (8000de4 <MX_ADC1_Init+0xf4>)
 8000da0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000da2:	2306      	movs	r3, #6
 8000da4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000da6:	2300      	movs	r3, #0
 8000da8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000daa:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000dae:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000db0:	2304      	movs	r3, #4
 8000db2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000db8:	2300      	movs	r3, #0
 8000dba:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dbe:	463b      	mov	r3, r7
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4806      	ldr	r0, [pc, #24]	@ (8000ddc <MX_ADC1_Init+0xec>)
 8000dc4:	f005 fa80 	bl	80062c8 <HAL_ADC_ConfigChannel>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000dce:	f000 fe11 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	3730      	adds	r7, #48	@ 0x30
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	2400033c 	.word	0x2400033c
 8000de0:	40022000 	.word	0x40022000
 8000de4:	08600004 	.word	0x08600004

08000de8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	@ 0x28
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	2224      	movs	r2, #36	@ 0x24
 8000df2:	2100      	movs	r1, #0
 8000df4:	4618      	mov	r0, r3
 8000df6:	f02b fc43 	bl	802c680 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000dfa:	4b2c      	ldr	r3, [pc, #176]	@ (8000eac <MX_ADC2_Init+0xc4>)
 8000dfc:	4a2c      	ldr	r2, [pc, #176]	@ (8000eb0 <MX_ADC2_Init+0xc8>)
 8000dfe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000e00:	4b2a      	ldr	r3, [pc, #168]	@ (8000eac <MX_ADC2_Init+0xc4>)
 8000e02:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000e06:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000e08:	4b28      	ldr	r3, [pc, #160]	@ (8000eac <MX_ADC2_Init+0xc4>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e0e:	4b27      	ldr	r3, [pc, #156]	@ (8000eac <MX_ADC2_Init+0xc4>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e14:	4b25      	ldr	r3, [pc, #148]	@ (8000eac <MX_ADC2_Init+0xc4>)
 8000e16:	2204      	movs	r2, #4
 8000e18:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000e1a:	4b24      	ldr	r3, [pc, #144]	@ (8000eac <MX_ADC2_Init+0xc4>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000e20:	4b22      	ldr	r3, [pc, #136]	@ (8000eac <MX_ADC2_Init+0xc4>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000e26:	4b21      	ldr	r3, [pc, #132]	@ (8000eac <MX_ADC2_Init+0xc4>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000eac <MX_ADC2_Init+0xc4>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e34:	4b1d      	ldr	r3, [pc, #116]	@ (8000eac <MX_ADC2_Init+0xc4>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000eac <MX_ADC2_Init+0xc4>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000e40:	4b1a      	ldr	r3, [pc, #104]	@ (8000eac <MX_ADC2_Init+0xc4>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e46:	4b19      	ldr	r3, [pc, #100]	@ (8000eac <MX_ADC2_Init+0xc4>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e4c:	4b17      	ldr	r3, [pc, #92]	@ (8000eac <MX_ADC2_Init+0xc4>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000e52:	4b16      	ldr	r3, [pc, #88]	@ (8000eac <MX_ADC2_Init+0xc4>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8000e5a:	4b14      	ldr	r3, [pc, #80]	@ (8000eac <MX_ADC2_Init+0xc4>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e60:	4812      	ldr	r0, [pc, #72]	@ (8000eac <MX_ADC2_Init+0xc4>)
 8000e62:	f005 f829 	bl	8005eb8 <HAL_ADC_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8000e6c:	f000 fdc2 	bl	80019f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000e70:	4b10      	ldr	r3, [pc, #64]	@ (8000eb4 <MX_ADC2_Init+0xcc>)
 8000e72:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e74:	2306      	movs	r3, #6
 8000e76:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e7c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000e80:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e82:	2304      	movs	r3, #4
 8000e84:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	4619      	mov	r1, r3
 8000e94:	4805      	ldr	r0, [pc, #20]	@ (8000eac <MX_ADC2_Init+0xc4>)
 8000e96:	f005 fa17 	bl	80062c8 <HAL_ADC_ConfigChannel>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_ADC2_Init+0xbc>
  {
    Error_Handler();
 8000ea0:	f000 fda8 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000ea4:	bf00      	nop
 8000ea6:	3728      	adds	r7, #40	@ 0x28
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	240003ac 	.word	0x240003ac
 8000eb0:	40022100 	.word	0x40022100
 8000eb4:	08600004 	.word	0x08600004

08000eb8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08a      	sub	sp, #40	@ 0x28
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	2224      	movs	r2, #36	@ 0x24
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f02b fbdb 	bl	802c680 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000eca:	4b30      	ldr	r3, [pc, #192]	@ (8000f8c <MX_ADC3_Init+0xd4>)
 8000ecc:	4a30      	ldr	r2, [pc, #192]	@ (8000f90 <MX_ADC3_Init+0xd8>)
 8000ece:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ed0:	4b2e      	ldr	r3, [pc, #184]	@ (8000f8c <MX_ADC3_Init+0xd4>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000ed6:	4b2d      	ldr	r3, [pc, #180]	@ (8000f8c <MX_ADC3_Init+0xd4>)
 8000ed8:	2208      	movs	r2, #8
 8000eda:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000edc:	4b2b      	ldr	r3, [pc, #172]	@ (8000f8c <MX_ADC3_Init+0xd4>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ee2:	4b2a      	ldr	r3, [pc, #168]	@ (8000f8c <MX_ADC3_Init+0xd4>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ee8:	4b28      	ldr	r3, [pc, #160]	@ (8000f8c <MX_ADC3_Init+0xd4>)
 8000eea:	2204      	movs	r2, #4
 8000eec:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000eee:	4b27      	ldr	r3, [pc, #156]	@ (8000f8c <MX_ADC3_Init+0xd4>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000ef4:	4b25      	ldr	r3, [pc, #148]	@ (8000f8c <MX_ADC3_Init+0xd4>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000efa:	4b24      	ldr	r3, [pc, #144]	@ (8000f8c <MX_ADC3_Init+0xd4>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000f00:	4b22      	ldr	r3, [pc, #136]	@ (8000f8c <MX_ADC3_Init+0xd4>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f08:	4b20      	ldr	r3, [pc, #128]	@ (8000f8c <MX_ADC3_Init+0xd4>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000f8c <MX_ADC3_Init+0xd4>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000f14:	4b1d      	ldr	r3, [pc, #116]	@ (8000f8c <MX_ADC3_Init+0xd4>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f8c <MX_ADC3_Init+0xd4>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000f22:	4b1a      	ldr	r3, [pc, #104]	@ (8000f8c <MX_ADC3_Init+0xd4>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f28:	4b18      	ldr	r3, [pc, #96]	@ (8000f8c <MX_ADC3_Init+0xd4>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000f2e:	4b17      	ldr	r3, [pc, #92]	@ (8000f8c <MX_ADC3_Init+0xd4>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000f34:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <MX_ADC3_Init+0xd4>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 8000f3c:	4b13      	ldr	r3, [pc, #76]	@ (8000f8c <MX_ADC3_Init+0xd4>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000f42:	4812      	ldr	r0, [pc, #72]	@ (8000f8c <MX_ADC3_Init+0xd4>)
 8000f44:	f004 ffb8 	bl	8005eb8 <HAL_ADC_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 8000f4e:	f000 fd51 	bl	80019f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f52:	2301      	movs	r3, #1
 8000f54:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f56:	2306      	movs	r3, #6
 8000f58:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f5e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000f62:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f64:	2304      	movs	r3, #4
 8000f66:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	4619      	mov	r1, r3
 8000f74:	4805      	ldr	r0, [pc, #20]	@ (8000f8c <MX_ADC3_Init+0xd4>)
 8000f76:	f005 f9a7 	bl	80062c8 <HAL_ADC_ConfigChannel>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 8000f80:	f000 fd38 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000f84:	bf00      	nop
 8000f86:	3728      	adds	r7, #40	@ 0x28
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	2400041c 	.word	0x2400041c
 8000f90:	58026000 	.word	0x58026000

08000f94 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000f98:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd0 <MX_CRC_Init+0x3c>)
 8000f9a:	4a0e      	ldr	r2, [pc, #56]	@ (8000fd4 <MX_CRC_Init+0x40>)
 8000f9c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd0 <MX_CRC_Init+0x3c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <MX_CRC_Init+0x3c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000faa:	4b09      	ldr	r3, [pc, #36]	@ (8000fd0 <MX_CRC_Init+0x3c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000fb0:	4b07      	ldr	r3, [pc, #28]	@ (8000fd0 <MX_CRC_Init+0x3c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000fb6:	4b06      	ldr	r3, [pc, #24]	@ (8000fd0 <MX_CRC_Init+0x3c>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000fbc:	4804      	ldr	r0, [pc, #16]	@ (8000fd0 <MX_CRC_Init+0x3c>)
 8000fbe:	f006 fa01 	bl	80073c4 <HAL_CRC_Init>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000fc8:	f000 fd14 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	2400048c 	.word	0x2400048c
 8000fd4:	58024c00 	.word	0x58024c00

08000fd8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08a      	sub	sp, #40	@ 0x28
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	2224      	movs	r2, #36	@ 0x24
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f02b fb4b 	bl	802c680 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000fea:	4b17      	ldr	r3, [pc, #92]	@ (8001048 <MX_DAC1_Init+0x70>)
 8000fec:	4a17      	ldr	r2, [pc, #92]	@ (800104c <MX_DAC1_Init+0x74>)
 8000fee:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000ff0:	4815      	ldr	r0, [pc, #84]	@ (8001048 <MX_DAC1_Init+0x70>)
 8000ff2:	f006 fad9 	bl	80075a8 <HAL_DAC_Init>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ffc:	f000 fcfa 	bl	80019f4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001000:	2300      	movs	r3, #0
 8001002:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001004:	2300      	movs	r3, #0
 8001006:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800100c:	2301      	movs	r3, #1
 800100e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	2200      	movs	r2, #0
 8001018:	4619      	mov	r1, r3
 800101a:	480b      	ldr	r0, [pc, #44]	@ (8001048 <MX_DAC1_Init+0x70>)
 800101c:	f006 fb46 	bl	80076ac <HAL_DAC_ConfigChannel>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001026:	f000 fce5 	bl	80019f4 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	2210      	movs	r2, #16
 800102e:	4619      	mov	r1, r3
 8001030:	4805      	ldr	r0, [pc, #20]	@ (8001048 <MX_DAC1_Init+0x70>)
 8001032:	f006 fb3b 	bl	80076ac <HAL_DAC_ConfigChannel>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 800103c:	f000 fcda 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001040:	bf00      	nop
 8001042:	3728      	adds	r7, #40	@ 0x28
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	240004b0 	.word	0x240004b0
 800104c:	40007400 	.word	0x40007400

08001050 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001054:	4b0b      	ldr	r3, [pc, #44]	@ (8001084 <MX_DMA2D_Init+0x34>)
 8001056:	4a0c      	ldr	r2, [pc, #48]	@ (8001088 <MX_DMA2D_Init+0x38>)
 8001058:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 800105a:	4b0a      	ldr	r3, [pc, #40]	@ (8001084 <MX_DMA2D_Init+0x34>)
 800105c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001060:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8001062:	4b08      	ldr	r3, [pc, #32]	@ (8001084 <MX_DMA2D_Init+0x34>)
 8001064:	2201      	movs	r2, #1
 8001066:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001068:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <MX_DMA2D_Init+0x34>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800106e:	4805      	ldr	r0, [pc, #20]	@ (8001084 <MX_DMA2D_Init+0x34>)
 8001070:	f006 fc68 	bl	8007944 <HAL_DMA2D_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
 800107a:	f000 fcbb 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	240004c4 	.word	0x240004c4
 8001088:	52001000 	.word	0x52001000

0800108c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001090:	4b1b      	ldr	r3, [pc, #108]	@ (8001100 <MX_I2C1_Init+0x74>)
 8001092:	4a1c      	ldr	r2, [pc, #112]	@ (8001104 <MX_I2C1_Init+0x78>)
 8001094:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60404E72;
 8001096:	4b1a      	ldr	r3, [pc, #104]	@ (8001100 <MX_I2C1_Init+0x74>)
 8001098:	4a1b      	ldr	r2, [pc, #108]	@ (8001108 <MX_I2C1_Init+0x7c>)
 800109a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800109c:	4b18      	ldr	r3, [pc, #96]	@ (8001100 <MX_I2C1_Init+0x74>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010a2:	4b17      	ldr	r3, [pc, #92]	@ (8001100 <MX_I2C1_Init+0x74>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010a8:	4b15      	ldr	r3, [pc, #84]	@ (8001100 <MX_I2C1_Init+0x74>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010ae:	4b14      	ldr	r3, [pc, #80]	@ (8001100 <MX_I2C1_Init+0x74>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010b4:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <MX_I2C1_Init+0x74>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ba:	4b11      	ldr	r3, [pc, #68]	@ (8001100 <MX_I2C1_Init+0x74>)
 80010bc:	2200      	movs	r2, #0
 80010be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001100 <MX_I2C1_Init+0x74>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010c6:	480e      	ldr	r0, [pc, #56]	@ (8001100 <MX_I2C1_Init+0x74>)
 80010c8:	f006 ff64 	bl	8007f94 <HAL_I2C_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010d2:	f000 fc8f 	bl	80019f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010d6:	2100      	movs	r1, #0
 80010d8:	4809      	ldr	r0, [pc, #36]	@ (8001100 <MX_I2C1_Init+0x74>)
 80010da:	f007 fd31 	bl	8008b40 <HAL_I2CEx_ConfigAnalogFilter>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010e4:	f000 fc86 	bl	80019f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010e8:	2100      	movs	r1, #0
 80010ea:	4805      	ldr	r0, [pc, #20]	@ (8001100 <MX_I2C1_Init+0x74>)
 80010ec:	f007 fd73 	bl	8008bd6 <HAL_I2CEx_ConfigDigitalFilter>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010f6:	f000 fc7d 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	2400052c 	.word	0x2400052c
 8001104:	40005400 	.word	0x40005400
 8001108:	60404e72 	.word	0x60404e72

0800110c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001110:	4b1b      	ldr	r3, [pc, #108]	@ (8001180 <MX_I2C2_Init+0x74>)
 8001112:	4a1c      	ldr	r2, [pc, #112]	@ (8001184 <MX_I2C2_Init+0x78>)
 8001114:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x60404E72;
 8001116:	4b1a      	ldr	r3, [pc, #104]	@ (8001180 <MX_I2C2_Init+0x74>)
 8001118:	4a1b      	ldr	r2, [pc, #108]	@ (8001188 <MX_I2C2_Init+0x7c>)
 800111a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800111c:	4b18      	ldr	r3, [pc, #96]	@ (8001180 <MX_I2C2_Init+0x74>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001122:	4b17      	ldr	r3, [pc, #92]	@ (8001180 <MX_I2C2_Init+0x74>)
 8001124:	2201      	movs	r2, #1
 8001126:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001128:	4b15      	ldr	r3, [pc, #84]	@ (8001180 <MX_I2C2_Init+0x74>)
 800112a:	2200      	movs	r2, #0
 800112c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800112e:	4b14      	ldr	r3, [pc, #80]	@ (8001180 <MX_I2C2_Init+0x74>)
 8001130:	2200      	movs	r2, #0
 8001132:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001134:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <MX_I2C2_Init+0x74>)
 8001136:	2200      	movs	r2, #0
 8001138:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800113a:	4b11      	ldr	r3, [pc, #68]	@ (8001180 <MX_I2C2_Init+0x74>)
 800113c:	2200      	movs	r2, #0
 800113e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001140:	4b0f      	ldr	r3, [pc, #60]	@ (8001180 <MX_I2C2_Init+0x74>)
 8001142:	2200      	movs	r2, #0
 8001144:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001146:	480e      	ldr	r0, [pc, #56]	@ (8001180 <MX_I2C2_Init+0x74>)
 8001148:	f006 ff24 	bl	8007f94 <HAL_I2C_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001152:	f000 fc4f 	bl	80019f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001156:	2100      	movs	r1, #0
 8001158:	4809      	ldr	r0, [pc, #36]	@ (8001180 <MX_I2C2_Init+0x74>)
 800115a:	f007 fcf1 	bl	8008b40 <HAL_I2CEx_ConfigAnalogFilter>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001164:	f000 fc46 	bl	80019f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001168:	2100      	movs	r1, #0
 800116a:	4805      	ldr	r0, [pc, #20]	@ (8001180 <MX_I2C2_Init+0x74>)
 800116c:	f007 fd33 	bl	8008bd6 <HAL_I2CEx_ConfigDigitalFilter>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001176:	f000 fc3d 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	24000580 	.word	0x24000580
 8001184:	40005800 	.word	0x40005800
 8001188:	60404e72 	.word	0x60404e72

0800118c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08e      	sub	sp, #56	@ 0x38
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	2234      	movs	r2, #52	@ 0x34
 8001196:	2100      	movs	r1, #0
 8001198:	4618      	mov	r0, r3
 800119a:	f02b fa71 	bl	802c680 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800119e:	4b3a      	ldr	r3, [pc, #232]	@ (8001288 <MX_LTDC_Init+0xfc>)
 80011a0:	4a3a      	ldr	r2, [pc, #232]	@ (800128c <MX_LTDC_Init+0x100>)
 80011a2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80011a4:	4b38      	ldr	r3, [pc, #224]	@ (8001288 <MX_LTDC_Init+0xfc>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80011aa:	4b37      	ldr	r3, [pc, #220]	@ (8001288 <MX_LTDC_Init+0xfc>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80011b0:	4b35      	ldr	r3, [pc, #212]	@ (8001288 <MX_LTDC_Init+0xfc>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80011b6:	4b34      	ldr	r3, [pc, #208]	@ (8001288 <MX_LTDC_Init+0xfc>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80011bc:	4b32      	ldr	r3, [pc, #200]	@ (8001288 <MX_LTDC_Init+0xfc>)
 80011be:	2228      	movs	r2, #40	@ 0x28
 80011c0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80011c2:	4b31      	ldr	r3, [pc, #196]	@ (8001288 <MX_LTDC_Init+0xfc>)
 80011c4:	2209      	movs	r2, #9
 80011c6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80011c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001288 <MX_LTDC_Init+0xfc>)
 80011ca:	2235      	movs	r2, #53	@ 0x35
 80011cc:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80011ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001288 <MX_LTDC_Init+0xfc>)
 80011d0:	220b      	movs	r2, #11
 80011d2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80011d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001288 <MX_LTDC_Init+0xfc>)
 80011d6:	f240 2215 	movw	r2, #533	@ 0x215
 80011da:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80011dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001288 <MX_LTDC_Init+0xfc>)
 80011de:	f240 121b 	movw	r2, #283	@ 0x11b
 80011e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 80011e4:	4b28      	ldr	r3, [pc, #160]	@ (8001288 <MX_LTDC_Init+0xfc>)
 80011e6:	f240 2235 	movw	r2, #565	@ 0x235
 80011ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 80011ec:	4b26      	ldr	r3, [pc, #152]	@ (8001288 <MX_LTDC_Init+0xfc>)
 80011ee:	f240 121d 	movw	r2, #285	@ 0x11d
 80011f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80011f4:	4b24      	ldr	r3, [pc, #144]	@ (8001288 <MX_LTDC_Init+0xfc>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80011fc:	4b22      	ldr	r3, [pc, #136]	@ (8001288 <MX_LTDC_Init+0xfc>)
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001204:	4b20      	ldr	r3, [pc, #128]	@ (8001288 <MX_LTDC_Init+0xfc>)
 8001206:	2200      	movs	r2, #0
 8001208:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800120c:	481e      	ldr	r0, [pc, #120]	@ (8001288 <MX_LTDC_Init+0xfc>)
 800120e:	f007 fd2f 	bl	8008c70 <HAL_LTDC_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001218:	f000 fbec 	bl	80019f4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001220:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001224:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800122a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800122e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8001230:	2301      	movs	r3, #1
 8001232:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001234:	23ff      	movs	r3, #255	@ 0xff
 8001236:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800123c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001240:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001242:	2305      	movs	r3, #5
 8001244:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0x70000000;
 8001246:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800124a:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 800124c:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001250:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8001252:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001256:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	2200      	movs	r2, #0
 800126e:	4619      	mov	r1, r3
 8001270:	4805      	ldr	r0, [pc, #20]	@ (8001288 <MX_LTDC_Init+0xfc>)
 8001272:	f007 fe85 	bl	8008f80 <HAL_LTDC_ConfigLayer>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 800127c:	f000 fbba 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001280:	bf00      	nop
 8001282:	3738      	adds	r7, #56	@ 0x38
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	240005d4 	.word	0x240005d4
 800128c:	50001000 	.word	0x50001000

08001290 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */
	BSP_OSPI_NOR_Init_t ospi_nor_int;
  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
 80012a4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80012a6:	4b38      	ldr	r3, [pc, #224]	@ (8001388 <MX_OCTOSPI1_Init+0xf8>)
 80012a8:	4a38      	ldr	r2, [pc, #224]	@ (800138c <MX_OCTOSPI1_Init+0xfc>)
 80012aa:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 4;
 80012ac:	4b36      	ldr	r3, [pc, #216]	@ (8001388 <MX_OCTOSPI1_Init+0xf8>)
 80012ae:	2204      	movs	r2, #4
 80012b0:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80012b2:	4b35      	ldr	r3, [pc, #212]	@ (8001388 <MX_OCTOSPI1_Init+0xf8>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 80012b8:	4b33      	ldr	r3, [pc, #204]	@ (8001388 <MX_OCTOSPI1_Init+0xf8>)
 80012ba:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80012be:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 80012c0:	4b31      	ldr	r3, [pc, #196]	@ (8001388 <MX_OCTOSPI1_Init+0xf8>)
 80012c2:	2220      	movs	r2, #32
 80012c4:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 80012c6:	4b30      	ldr	r3, [pc, #192]	@ (8001388 <MX_OCTOSPI1_Init+0xf8>)
 80012c8:	2202      	movs	r2, #2
 80012ca:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80012cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001388 <MX_OCTOSPI1_Init+0xf8>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80012d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001388 <MX_OCTOSPI1_Init+0xf8>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 80012d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001388 <MX_OCTOSPI1_Init+0xf8>)
 80012da:	2200      	movs	r2, #0
 80012dc:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 2;
 80012de:	4b2a      	ldr	r3, [pc, #168]	@ (8001388 <MX_OCTOSPI1_Init+0xf8>)
 80012e0:	2202      	movs	r2, #2
 80012e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80012e4:	4b28      	ldr	r3, [pc, #160]	@ (8001388 <MX_OCTOSPI1_Init+0xf8>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80012ea:	4b27      	ldr	r3, [pc, #156]	@ (8001388 <MX_OCTOSPI1_Init+0xf8>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 80012f0:	4b25      	ldr	r3, [pc, #148]	@ (8001388 <MX_OCTOSPI1_Init+0xf8>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80012f6:	4b24      	ldr	r3, [pc, #144]	@ (8001388 <MX_OCTOSPI1_Init+0xf8>)
 80012f8:	2208      	movs	r2, #8
 80012fa:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 80012fc:	4b22      	ldr	r3, [pc, #136]	@ (8001388 <MX_OCTOSPI1_Init+0xf8>)
 80012fe:	2200      	movs	r2, #0
 8001300:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 8001302:	4b21      	ldr	r3, [pc, #132]	@ (8001388 <MX_OCTOSPI1_Init+0xf8>)
 8001304:	2200      	movs	r2, #0
 8001306:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001308:	481f      	ldr	r0, [pc, #124]	@ (8001388 <MX_OCTOSPI1_Init+0xf8>)
 800130a:	f008 f8a5 	bl	8009458 <HAL_OSPI_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_OCTOSPI1_Init+0x88>
  {
    Error_Handler();
 8001314:	f000 fb6e 	bl	80019f4 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8001318:	2301      	movs	r3, #1
 800131a:	607b      	str	r3, [r7, #4]
  sOspiManagerCfg.DQSPort = 1;
 800131c:	2301      	movs	r3, #1
 800131e:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.NCSPort = 1;
 8001320:	2301      	movs	r3, #1
 8001322:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8001324:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001328:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 800132a:	4b19      	ldr	r3, [pc, #100]	@ (8001390 <MX_OCTOSPI1_Init+0x100>)
 800132c:	617b      	str	r3, [r7, #20]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001334:	4619      	mov	r1, r3
 8001336:	4814      	ldr	r0, [pc, #80]	@ (8001388 <MX_OCTOSPI1_Init+0xf8>)
 8001338:	f008 fd0e 	bl	8009d58 <HAL_OSPIM_Config>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_OCTOSPI1_Init+0xb6>
  {
    Error_Handler();
 8001342:	f000 fb57 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */
	HAL_OSPI_DeInit(&hospi1);
 8001346:	4810      	ldr	r0, [pc, #64]	@ (8001388 <MX_OCTOSPI1_Init+0xf8>)
 8001348:	f008 f942 	bl	80095d0 <HAL_OSPI_DeInit>
	ospi_nor_int.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 800134c:	2301      	movs	r3, #1
 800134e:	773b      	strb	r3, [r7, #28]
	ospi_nor_int.TransferRate = BSP_OSPI_NOR_DTR_TRANSFER;
 8001350:	2301      	movs	r3, #1
 8001352:	777b      	strb	r3, [r7, #29]
	BSP_OSPI_NOR_DeInit(0);
 8001354:	2000      	movs	r0, #0
 8001356:	f003 fa23 	bl	80047a0 <BSP_OSPI_NOR_DeInit>
	if (BSP_OSPI_NOR_Init(0, &ospi_nor_int) != BSP_ERROR_NONE)
 800135a:	f107 031c 	add.w	r3, r7, #28
 800135e:	4619      	mov	r1, r3
 8001360:	2000      	movs	r0, #0
 8001362:	f003 f97f 	bl	8004664 <BSP_OSPI_NOR_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_OCTOSPI1_Init+0xe0>
	{
		Error_Handler();
 800136c:	f000 fb42 	bl	80019f4 <Error_Handler>
	}
	if (BSP_OSPI_NOR_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8001370:	2000      	movs	r0, #0
 8001372:	f003 faa9 	bl	80048c8 <BSP_OSPI_NOR_EnableMemoryMappedMode>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_OCTOSPI1_Init+0xf0>
	{
		Error_Handler();
 800137c:	f000 fb3a 	bl	80019f4 <Error_Handler>
	}
  /* USER CODE END OCTOSPI1_Init 2 */

}
 8001380:	bf00      	nop
 8001382:	3720      	adds	r7, #32
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	2400067c 	.word	0x2400067c
 800138c:	52005000 	.word	0x52005000
 8001390:	01000001 	.word	0x01000001

08001394 <MX_OCTOSPI2_Init>:
  * @brief OCTOSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI2_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b092      	sub	sp, #72	@ 0x48
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */
	BSP_OSPI_RAM_Init_t ospi_ram_init;
  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 800139a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]
 80013a8:	611a      	str	r2, [r3, #16]
 80013aa:	615a      	str	r2, [r3, #20]
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 80013ac:	f107 031c 	add.w	r3, r7, #28
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */
	OSPI_HyperbusCmdTypeDef sCommand =
 80013ba:	f107 0308 	add.w	r3, r7, #8
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	611a      	str	r2, [r3, #16]
	{ 0 };
	OSPI_MemoryMappedTypeDef sMemMappedCfg =
 80013ca:	463b      	mov	r3, r7
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
	{ 0 };
  /* USER CODE END OCTOSPI2_Init 1 */
  /* OCTOSPI2 parameter configuration*/
  hospi2.Instance = OCTOSPI2;
 80013d2:	4b48      	ldr	r3, [pc, #288]	@ (80014f4 <MX_OCTOSPI2_Init+0x160>)
 80013d4:	4a48      	ldr	r2, [pc, #288]	@ (80014f8 <MX_OCTOSPI2_Init+0x164>)
 80013d6:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 4;
 80013d8:	4b46      	ldr	r3, [pc, #280]	@ (80014f4 <MX_OCTOSPI2_Init+0x160>)
 80013da:	2204      	movs	r2, #4
 80013dc:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80013de:	4b45      	ldr	r3, [pc, #276]	@ (80014f4 <MX_OCTOSPI2_Init+0x160>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 80013e4:	4b43      	ldr	r3, [pc, #268]	@ (80014f4 <MX_OCTOSPI2_Init+0x160>)
 80013e6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80013ea:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 24;
 80013ec:	4b41      	ldr	r3, [pc, #260]	@ (80014f4 <MX_OCTOSPI2_Init+0x160>)
 80013ee:	2218      	movs	r2, #24
 80013f0:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 4;
 80013f2:	4b40      	ldr	r3, [pc, #256]	@ (80014f4 <MX_OCTOSPI2_Init+0x160>)
 80013f4:	2204      	movs	r2, #4
 80013f6:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80013f8:	4b3e      	ldr	r3, [pc, #248]	@ (80014f4 <MX_OCTOSPI2_Init+0x160>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80013fe:	4b3d      	ldr	r3, [pc, #244]	@ (80014f4 <MX_OCTOSPI2_Init+0x160>)
 8001400:	2200      	movs	r2, #0
 8001402:	61da      	str	r2, [r3, #28]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8001404:	4b3b      	ldr	r3, [pc, #236]	@ (80014f4 <MX_OCTOSPI2_Init+0x160>)
 8001406:	2200      	movs	r2, #0
 8001408:	621a      	str	r2, [r3, #32]
  hospi2.Init.ClockPrescaler = 2;
 800140a:	4b3a      	ldr	r3, [pc, #232]	@ (80014f4 <MX_OCTOSPI2_Init+0x160>)
 800140c:	2202      	movs	r2, #2
 800140e:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001410:	4b38      	ldr	r3, [pc, #224]	@ (80014f4 <MX_OCTOSPI2_Init+0x160>)
 8001412:	2200      	movs	r2, #0
 8001414:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8001416:	4b37      	ldr	r3, [pc, #220]	@ (80014f4 <MX_OCTOSPI2_Init+0x160>)
 8001418:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800141c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi2.Init.ChipSelectBoundary = 23;
 800141e:	4b35      	ldr	r3, [pc, #212]	@ (80014f4 <MX_OCTOSPI2_Init+0x160>)
 8001420:	2217      	movs	r2, #23
 8001422:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 8001424:	4b33      	ldr	r3, [pc, #204]	@ (80014f4 <MX_OCTOSPI2_Init+0x160>)
 8001426:	2200      	movs	r2, #0
 8001428:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi2.Init.MaxTran = 0;
 800142a:	4b32      	ldr	r3, [pc, #200]	@ (80014f4 <MX_OCTOSPI2_Init+0x160>)
 800142c:	2200      	movs	r2, #0
 800142e:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi2.Init.Refresh = 400;
 8001430:	4b30      	ldr	r3, [pc, #192]	@ (80014f4 <MX_OCTOSPI2_Init+0x160>)
 8001432:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001436:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8001438:	482e      	ldr	r0, [pc, #184]	@ (80014f4 <MX_OCTOSPI2_Init+0x160>)
 800143a:	f008 f80d 	bl	8009458 <HAL_OSPI_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_OCTOSPI2_Init+0xb4>
  {
    Error_Handler();
 8001444:	f000 fad6 	bl	80019f4 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 2;
 8001448:	2302      	movs	r3, #2
 800144a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sOspiManagerCfg.DQSPort = 2;
 800144c:	2302      	movs	r3, #2
 800144e:	633b      	str	r3, [r7, #48]	@ 0x30
  sOspiManagerCfg.NCSPort = 2;
 8001450:	2302      	movs	r3, #2
 8001452:	637b      	str	r3, [r7, #52]	@ 0x34
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8001454:	4b29      	ldr	r3, [pc, #164]	@ (80014fc <MX_OCTOSPI2_Init+0x168>)
 8001456:	63bb      	str	r3, [r7, #56]	@ 0x38
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8001458:	4b29      	ldr	r3, [pc, #164]	@ (8001500 <MX_OCTOSPI2_Init+0x16c>)
 800145a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800145c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001460:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001464:	4619      	mov	r1, r3
 8001466:	4823      	ldr	r0, [pc, #140]	@ (80014f4 <MX_OCTOSPI2_Init+0x160>)
 8001468:	f008 fc76 	bl	8009d58 <HAL_OSPIM_Config>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_OCTOSPI2_Init+0xe2>
  {
    Error_Handler();
 8001472:	f000 fabf 	bl	80019f4 <Error_Handler>
  }
  sHyperBusCfg.RWRecoveryTime = 3;
 8001476:	2303      	movs	r3, #3
 8001478:	61fb      	str	r3, [r7, #28]
  sHyperBusCfg.AccessTime = 6;
 800147a:	2306      	movs	r3, #6
 800147c:	623b      	str	r3, [r7, #32]
  sHyperBusCfg.WriteZeroLatency = HAL_OSPI_LATENCY_ON_WRITE;
 800147e:	2300      	movs	r3, #0
 8001480:	627b      	str	r3, [r7, #36]	@ 0x24
  sHyperBusCfg.LatencyMode = HAL_OSPI_FIXED_LATENCY;
 8001482:	2301      	movs	r3, #1
 8001484:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001486:	f107 031c 	add.w	r3, r7, #28
 800148a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800148e:	4619      	mov	r1, r3
 8001490:	4818      	ldr	r0, [pc, #96]	@ (80014f4 <MX_OCTOSPI2_Init+0x160>)
 8001492:	f008 f951 	bl	8009738 <HAL_OSPI_HyperbusCfg>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_OCTOSPI2_Init+0x10c>
  {
    Error_Handler();
 800149c:	f000 faaa 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */
	sCommand.AddressSpace = HAL_OSPI_MEMORY_ADDRESS_SPACE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60bb      	str	r3, [r7, #8]
	sCommand.AddressSize = HAL_OSPI_ADDRESS_32_BITS;
 80014a4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80014a8:	613b      	str	r3, [r7, #16]
	sCommand.DQSMode = HAL_OSPI_DQS_ENABLE;
 80014aa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80014ae:	61bb      	str	r3, [r7, #24]
	sCommand.Address = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60fb      	str	r3, [r7, #12]
	sCommand.NbData = 1;
 80014b4:	2301      	movs	r3, #1
 80014b6:	617b      	str	r3, [r7, #20]

	if (HAL_OSPI_HyperbusCmd(&hospi2, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE)
 80014b8:	f107 0308 	add.w	r3, r7, #8
 80014bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014c0:	4619      	mov	r1, r3
 80014c2:	480c      	ldr	r0, [pc, #48]	@ (80014f4 <MX_OCTOSPI2_Init+0x160>)
 80014c4:	f008 f977 	bl	80097b6 <HAL_OSPI_HyperbusCmd>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_OCTOSPI2_Init+0x13e>
			!= HAL_OK)
	{
		Error_Handler();
 80014ce:	f000 fa91 	bl	80019f4 <Error_Handler>
	}

	sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 80014d2:	2300      	movs	r3, #0
 80014d4:	603b      	str	r3, [r7, #0]

	if (HAL_OSPI_MemoryMapped(&hospi2, &sMemMappedCfg) != HAL_OK)
 80014d6:	463b      	mov	r3, r7
 80014d8:	4619      	mov	r1, r3
 80014da:	4806      	ldr	r0, [pc, #24]	@ (80014f4 <MX_OCTOSPI2_Init+0x160>)
 80014dc:	f008 fb6a 	bl	8009bb4 <HAL_OSPI_MemoryMapped>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_OCTOSPI2_Init+0x156>
	{
		Error_Handler();
 80014e6:	f000 fa85 	bl	80019f4 <Error_Handler>
	}
  /* USER CODE END OCTOSPI2_Init 2 */

}
 80014ea:	bf00      	nop
 80014ec:	3748      	adds	r7, #72	@ 0x48
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	240006d8 	.word	0x240006d8
 80014f8:	5200a000 	.word	0x5200a000
 80014fc:	00010002 	.word	0x00010002
 8001500:	01000002 	.word	0x01000002

08001504 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b088      	sub	sp, #32
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800150a:	f107 030c 	add.w	r3, r7, #12
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
 8001518:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800151a:	463b      	mov	r3, r7
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001524:	4b20      	ldr	r3, [pc, #128]	@ (80015a8 <MX_TIM1_Init+0xa4>)
 8001526:	4a21      	ldr	r2, [pc, #132]	@ (80015ac <MX_TIM1_Init+0xa8>)
 8001528:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800152a:	4b1f      	ldr	r3, [pc, #124]	@ (80015a8 <MX_TIM1_Init+0xa4>)
 800152c:	2200      	movs	r2, #0
 800152e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001530:	4b1d      	ldr	r3, [pc, #116]	@ (80015a8 <MX_TIM1_Init+0xa4>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001536:	4b1c      	ldr	r3, [pc, #112]	@ (80015a8 <MX_TIM1_Init+0xa4>)
 8001538:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800153c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153e:	4b1a      	ldr	r3, [pc, #104]	@ (80015a8 <MX_TIM1_Init+0xa4>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001544:	4b18      	ldr	r3, [pc, #96]	@ (80015a8 <MX_TIM1_Init+0xa4>)
 8001546:	2200      	movs	r2, #0
 8001548:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800154a:	4b17      	ldr	r3, [pc, #92]	@ (80015a8 <MX_TIM1_Init+0xa4>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001550:	4815      	ldr	r0, [pc, #84]	@ (80015a8 <MX_TIM1_Init+0xa4>)
 8001552:	f00c ff3d 	bl	800e3d0 <HAL_TIM_Base_Init>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 800155c:	f000 fa4a 	bl	80019f4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001564:	2300      	movs	r3, #0
 8001566:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	4619      	mov	r1, r3
 800156e:	480e      	ldr	r0, [pc, #56]	@ (80015a8 <MX_TIM1_Init+0xa4>)
 8001570:	f00d f9b9 	bl	800e8e6 <HAL_TIM_SlaveConfigSynchro>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800157a:	f000 fa3b 	bl	80019f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800157e:	2300      	movs	r3, #0
 8001580:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001582:	2300      	movs	r3, #0
 8001584:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001586:	2300      	movs	r3, #0
 8001588:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800158a:	463b      	mov	r3, r7
 800158c:	4619      	mov	r1, r3
 800158e:	4806      	ldr	r0, [pc, #24]	@ (80015a8 <MX_TIM1_Init+0xa4>)
 8001590:	f00d fc30 	bl	800edf4 <HAL_TIMEx_MasterConfigSynchronization>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800159a:	f000 fa2b 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800159e:	bf00      	nop
 80015a0:	3720      	adds	r7, #32
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	24000734 	.word	0x24000734
 80015ac:	40010000 	.word	0x40010000

080015b0 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08c      	sub	sp, #48	@ 0x30
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015b6:	f107 030c 	add.w	r3, r7, #12
 80015ba:	2224      	movs	r2, #36	@ 0x24
 80015bc:	2100      	movs	r1, #0
 80015be:	4618      	mov	r0, r3
 80015c0:	f02b f85e 	bl	802c680 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c4:	463b      	mov	r3, r7
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 80015ce:	4b21      	ldr	r3, [pc, #132]	@ (8001654 <MX_TIM23_Init+0xa4>)
 80015d0:	4a21      	ldr	r2, [pc, #132]	@ (8001658 <MX_TIM23_Init+0xa8>)
 80015d2:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 80015d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001654 <MX_TIM23_Init+0xa4>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015da:	4b1e      	ldr	r3, [pc, #120]	@ (8001654 <MX_TIM23_Init+0xa4>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 80015e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001654 <MX_TIM23_Init+0xa4>)
 80015e2:	f04f 32ff 	mov.w	r2, #4294967295
 80015e6:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001654 <MX_TIM23_Init+0xa4>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ee:	4b19      	ldr	r3, [pc, #100]	@ (8001654 <MX_TIM23_Init+0xa4>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80015f4:	2301      	movs	r3, #1
 80015f6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015f8:	2300      	movs	r3, #0
 80015fa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015fc:	2301      	movs	r3, #1
 80015fe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001600:	2300      	movs	r3, #0
 8001602:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001608:	2300      	movs	r3, #0
 800160a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800160c:	2301      	movs	r3, #1
 800160e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001610:	2300      	movs	r3, #0
 8001612:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 8001618:	f107 030c 	add.w	r3, r7, #12
 800161c:	4619      	mov	r1, r3
 800161e:	480d      	ldr	r0, [pc, #52]	@ (8001654 <MX_TIM23_Init+0xa4>)
 8001620:	f00c ffb4 	bl	800e58c <HAL_TIM_Encoder_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM23_Init+0x7e>
  {
    Error_Handler();
 800162a:	f000 f9e3 	bl	80019f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800162e:	2300      	movs	r3, #0
 8001630:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001632:	2300      	movs	r3, #0
 8001634:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8001636:	463b      	mov	r3, r7
 8001638:	4619      	mov	r1, r3
 800163a:	4806      	ldr	r0, [pc, #24]	@ (8001654 <MX_TIM23_Init+0xa4>)
 800163c:	f00d fbda 	bl	800edf4 <HAL_TIMEx_MasterConfigSynchronization>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM23_Init+0x9a>
  {
    Error_Handler();
 8001646:	f000 f9d5 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	3730      	adds	r7, #48	@ 0x30
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	24000780 	.word	0x24000780
 8001658:	4000e000 	.word	0x4000e000

0800165c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001660:	4b22      	ldr	r3, [pc, #136]	@ (80016ec <MX_UART4_Init+0x90>)
 8001662:	4a23      	ldr	r2, [pc, #140]	@ (80016f0 <MX_UART4_Init+0x94>)
 8001664:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001666:	4b21      	ldr	r3, [pc, #132]	@ (80016ec <MX_UART4_Init+0x90>)
 8001668:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800166c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800166e:	4b1f      	ldr	r3, [pc, #124]	@ (80016ec <MX_UART4_Init+0x90>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001674:	4b1d      	ldr	r3, [pc, #116]	@ (80016ec <MX_UART4_Init+0x90>)
 8001676:	2200      	movs	r2, #0
 8001678:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800167a:	4b1c      	ldr	r3, [pc, #112]	@ (80016ec <MX_UART4_Init+0x90>)
 800167c:	2200      	movs	r2, #0
 800167e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001680:	4b1a      	ldr	r3, [pc, #104]	@ (80016ec <MX_UART4_Init+0x90>)
 8001682:	220c      	movs	r2, #12
 8001684:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001686:	4b19      	ldr	r3, [pc, #100]	@ (80016ec <MX_UART4_Init+0x90>)
 8001688:	2200      	movs	r2, #0
 800168a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800168c:	4b17      	ldr	r3, [pc, #92]	@ (80016ec <MX_UART4_Init+0x90>)
 800168e:	2200      	movs	r2, #0
 8001690:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001692:	4b16      	ldr	r3, [pc, #88]	@ (80016ec <MX_UART4_Init+0x90>)
 8001694:	2200      	movs	r2, #0
 8001696:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001698:	4b14      	ldr	r3, [pc, #80]	@ (80016ec <MX_UART4_Init+0x90>)
 800169a:	2200      	movs	r2, #0
 800169c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800169e:	4b13      	ldr	r3, [pc, #76]	@ (80016ec <MX_UART4_Init+0x90>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80016a4:	4811      	ldr	r0, [pc, #68]	@ (80016ec <MX_UART4_Init+0x90>)
 80016a6:	f00d fc5f 	bl	800ef68 <HAL_UART_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80016b0:	f000 f9a0 	bl	80019f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016b4:	2100      	movs	r1, #0
 80016b6:	480d      	ldr	r0, [pc, #52]	@ (80016ec <MX_UART4_Init+0x90>)
 80016b8:	f00e fd6b 	bl	8010192 <HAL_UARTEx_SetTxFifoThreshold>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80016c2:	f000 f997 	bl	80019f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016c6:	2100      	movs	r1, #0
 80016c8:	4808      	ldr	r0, [pc, #32]	@ (80016ec <MX_UART4_Init+0x90>)
 80016ca:	f00e fda0 	bl	801020e <HAL_UARTEx_SetRxFifoThreshold>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80016d4:	f000 f98e 	bl	80019f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80016d8:	4804      	ldr	r0, [pc, #16]	@ (80016ec <MX_UART4_Init+0x90>)
 80016da:	f00e fd21 	bl	8010120 <HAL_UARTEx_DisableFifoMode>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80016e4:	f000 f986 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	240007cc 	.word	0x240007cc
 80016f0:	40004c00 	.word	0x40004c00

080016f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b090      	sub	sp, #64	@ 0x40
 80016f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]
 8001708:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800170a:	4b62      	ldr	r3, [pc, #392]	@ (8001894 <MX_GPIO_Init+0x1a0>)
 800170c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001710:	4a60      	ldr	r2, [pc, #384]	@ (8001894 <MX_GPIO_Init+0x1a0>)
 8001712:	f043 0310 	orr.w	r3, r3, #16
 8001716:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800171a:	4b5e      	ldr	r3, [pc, #376]	@ (8001894 <MX_GPIO_Init+0x1a0>)
 800171c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001720:	f003 0310 	and.w	r3, r3, #16
 8001724:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001728:	4b5a      	ldr	r3, [pc, #360]	@ (8001894 <MX_GPIO_Init+0x1a0>)
 800172a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800172e:	4a59      	ldr	r2, [pc, #356]	@ (8001894 <MX_GPIO_Init+0x1a0>)
 8001730:	f043 0320 	orr.w	r3, r3, #32
 8001734:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001738:	4b56      	ldr	r3, [pc, #344]	@ (8001894 <MX_GPIO_Init+0x1a0>)
 800173a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800173e:	f003 0320 	and.w	r3, r3, #32
 8001742:	627b      	str	r3, [r7, #36]	@ 0x24
 8001744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001746:	4b53      	ldr	r3, [pc, #332]	@ (8001894 <MX_GPIO_Init+0x1a0>)
 8001748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800174c:	4a51      	ldr	r2, [pc, #324]	@ (8001894 <MX_GPIO_Init+0x1a0>)
 800174e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001752:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001756:	4b4f      	ldr	r3, [pc, #316]	@ (8001894 <MX_GPIO_Init+0x1a0>)
 8001758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800175c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001760:	623b      	str	r3, [r7, #32]
 8001762:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001764:	4b4b      	ldr	r3, [pc, #300]	@ (8001894 <MX_GPIO_Init+0x1a0>)
 8001766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800176a:	4a4a      	ldr	r2, [pc, #296]	@ (8001894 <MX_GPIO_Init+0x1a0>)
 800176c:	f043 0304 	orr.w	r3, r3, #4
 8001770:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001774:	4b47      	ldr	r3, [pc, #284]	@ (8001894 <MX_GPIO_Init+0x1a0>)
 8001776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	61fb      	str	r3, [r7, #28]
 8001780:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001782:	4b44      	ldr	r3, [pc, #272]	@ (8001894 <MX_GPIO_Init+0x1a0>)
 8001784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001788:	4a42      	ldr	r2, [pc, #264]	@ (8001894 <MX_GPIO_Init+0x1a0>)
 800178a:	f043 0301 	orr.w	r3, r3, #1
 800178e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001792:	4b40      	ldr	r3, [pc, #256]	@ (8001894 <MX_GPIO_Init+0x1a0>)
 8001794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	61bb      	str	r3, [r7, #24]
 800179e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a0:	4b3c      	ldr	r3, [pc, #240]	@ (8001894 <MX_GPIO_Init+0x1a0>)
 80017a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017a6:	4a3b      	ldr	r2, [pc, #236]	@ (8001894 <MX_GPIO_Init+0x1a0>)
 80017a8:	f043 0302 	orr.w	r3, r3, #2
 80017ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017b0:	4b38      	ldr	r3, [pc, #224]	@ (8001894 <MX_GPIO_Init+0x1a0>)
 80017b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017be:	4b35      	ldr	r3, [pc, #212]	@ (8001894 <MX_GPIO_Init+0x1a0>)
 80017c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017c4:	4a33      	ldr	r2, [pc, #204]	@ (8001894 <MX_GPIO_Init+0x1a0>)
 80017c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017ce:	4b31      	ldr	r3, [pc, #196]	@ (8001894 <MX_GPIO_Init+0x1a0>)
 80017d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001894 <MX_GPIO_Init+0x1a0>)
 80017de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017e2:	4a2c      	ldr	r2, [pc, #176]	@ (8001894 <MX_GPIO_Init+0x1a0>)
 80017e4:	f043 0308 	orr.w	r3, r3, #8
 80017e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017ec:	4b29      	ldr	r3, [pc, #164]	@ (8001894 <MX_GPIO_Init+0x1a0>)
 80017ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017f2:	f003 0308 	and.w	r3, r3, #8
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80017fa:	4b26      	ldr	r3, [pc, #152]	@ (8001894 <MX_GPIO_Init+0x1a0>)
 80017fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001800:	4a24      	ldr	r2, [pc, #144]	@ (8001894 <MX_GPIO_Init+0x1a0>)
 8001802:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001806:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800180a:	4b22      	ldr	r3, [pc, #136]	@ (8001894 <MX_GPIO_Init+0x1a0>)
 800180c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001810:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001818:	4b1e      	ldr	r3, [pc, #120]	@ (8001894 <MX_GPIO_Init+0x1a0>)
 800181a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800181e:	4a1d      	ldr	r2, [pc, #116]	@ (8001894 <MX_GPIO_Init+0x1a0>)
 8001820:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001824:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001828:	4b1a      	ldr	r3, [pc, #104]	@ (8001894 <MX_GPIO_Init+0x1a0>)
 800182a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800182e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_0, GPIO_PIN_RESET);
 8001836:	2200      	movs	r2, #0
 8001838:	f240 4101 	movw	r1, #1025	@ 0x401
 800183c:	4816      	ldr	r0, [pc, #88]	@ (8001898 <MX_GPIO_Init+0x1a4>)
 800183e:	f006 fb8f 	bl	8007f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_15, GPIO_PIN_RESET);
 8001842:	2200      	movs	r2, #0
 8001844:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001848:	4814      	ldr	r0, [pc, #80]	@ (800189c <MX_GPIO_Init+0x1a8>)
 800184a:	f006 fb89 	bl	8007f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD10 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_0;
 800184e:	f240 4301 	movw	r3, #1025	@ 0x401
 8001852:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001854:	2301      	movs	r3, #1
 8001856:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185c:	2300      	movs	r3, #0
 800185e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001860:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001864:	4619      	mov	r1, r3
 8001866:	480c      	ldr	r0, [pc, #48]	@ (8001898 <MX_GPIO_Init+0x1a4>)
 8001868:	f006 f8d0 	bl	8007a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800186c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001870:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001872:	2301      	movs	r3, #1
 8001874:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187a:	2300      	movs	r3, #0
 800187c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800187e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001882:	4619      	mov	r1, r3
 8001884:	4805      	ldr	r0, [pc, #20]	@ (800189c <MX_GPIO_Init+0x1a8>)
 8001886:	f006 f8c1 	bl	8007a0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800188a:	bf00      	nop
 800188c:	3740      	adds	r7, #64	@ 0x40
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	58024400 	.word	0x58024400
 8001898:	58020c00 	.word	0x58020c00
 800189c:	58021800 	.word	0x58021800

080018a0 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;)
	{
		osDelay(1);
 80018a8:	2001      	movs	r0, #1
 80018aa:	f00e fe65 	bl	8010578 <osDelay>
 80018ae:	e7fb      	b.n	80018a8 <StartDefaultTask+0x8>

080018b0 <StartTask02>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	/* Infinite loop */
	for (;;)
	{

		if (counter < 100)
 80018b8:	4b0e      	ldr	r3, [pc, #56]	@ (80018f4 <StartTask02+0x44>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b63      	cmp	r3, #99	@ 0x63
 80018be:	d80b      	bhi.n	80018d8 <StartTask02+0x28>
		{
			counter++;
 80018c0:	4b0c      	ldr	r3, [pc, #48]	@ (80018f4 <StartTask02+0x44>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	3301      	adds	r3, #1
 80018c6:	4a0b      	ldr	r2, [pc, #44]	@ (80018f4 <StartTask02+0x44>)
 80018c8:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_15,GPIO_PIN_SET);
 80018ca:	2201      	movs	r2, #1
 80018cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018d0:	4809      	ldr	r0, [pc, #36]	@ (80018f8 <StartTask02+0x48>)
 80018d2:	f006 fb45 	bl	8007f60 <HAL_GPIO_WritePin>
 80018d6:	e008      	b.n	80018ea <StartTask02+0x3a>
		}
		else
		{
			counter = 0;
 80018d8:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <StartTask02+0x44>)
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_15,GPIO_PIN_RESET);
 80018de:	2200      	movs	r2, #0
 80018e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018e4:	4804      	ldr	r0, [pc, #16]	@ (80018f8 <StartTask02+0x48>)
 80018e6:	f006 fb3b 	bl	8007f60 <HAL_GPIO_WritePin>
		}

		osDelay(20);
 80018ea:	2014      	movs	r0, #20
 80018ec:	f00e fe44 	bl	8010578 <osDelay>
		if (counter < 100)
 80018f0:	e7e2      	b.n	80018b8 <StartTask02+0x8>
 80018f2:	bf00      	nop
 80018f4:	2400086c 	.word	0x2400086c
 80018f8:	58021800 	.word	0x58021800

080018fc <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001902:	463b      	mov	r3, r7
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800190e:	f005 fce1 	bl	80072d4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001912:	2301      	movs	r3, #1
 8001914:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001916:	2300      	movs	r3, #0
 8001918:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 800191a:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 800191e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8001920:	2312      	movs	r3, #18
 8001922:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001924:	2300      	movs	r3, #0
 8001926:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001928:	2300      	movs	r3, #0
 800192a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800192c:	2303      	movs	r3, #3
 800192e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001930:	2301      	movs	r3, #1
 8001932:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001934:	2300      	movs	r3, #0
 8001936:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001938:	2301      	movs	r3, #1
 800193a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800193c:	2301      	movs	r3, #1
 800193e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001940:	463b      	mov	r3, r7
 8001942:	4618      	mov	r0, r3
 8001944:	f005 fcfe 	bl	8007344 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001948:	2301      	movs	r3, #1
 800194a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x70000000;
 800194c:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8001950:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8001952:	231c      	movs	r3, #28
 8001954:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001956:	2300      	movs	r3, #0
 8001958:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800195a:	2300      	movs	r3, #0
 800195c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800195e:	2300      	movs	r3, #0
 8001960:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001962:	463b      	mov	r3, r7
 8001964:	4618      	mov	r0, r3
 8001966:	f005 fced 	bl	8007344 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800196a:	2302      	movs	r3, #2
 800196c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 800196e:	2316      	movs	r3, #22
 8001970:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001972:	2303      	movs	r3, #3
 8001974:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001976:	2301      	movs	r3, #1
 8001978:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800197a:	2301      	movs	r3, #1
 800197c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800197e:	463b      	mov	r3, r7
 8001980:	4618      	mov	r0, r3
 8001982:	f005 fcdf 	bl	8007344 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8001986:	2303      	movs	r3, #3
 8001988:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 800198a:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 800198e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8001990:	231c      	movs	r3, #28
 8001992:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001994:	2300      	movs	r3, #0
 8001996:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001998:	2300      	movs	r3, #0
 800199a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800199c:	2300      	movs	r3, #0
 800199e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80019a0:	463b      	mov	r3, r7
 80019a2:	4618      	mov	r0, r3
 80019a4:	f005 fcce 	bl	8007344 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 80019a8:	2304      	movs	r3, #4
 80019aa:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 80019ac:	2319      	movs	r3, #25
 80019ae:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80019b0:	2303      	movs	r3, #3
 80019b2:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80019b4:	2301      	movs	r3, #1
 80019b6:	73bb      	strb	r3, [r7, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80019b8:	463b      	mov	r3, r7
 80019ba:	4618      	mov	r0, r3
 80019bc:	f005 fcc2 	bl	8007344 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80019c0:	2004      	movs	r0, #4
 80019c2:	f005 fc9f 	bl	8007304 <HAL_MPU_Enable>

}
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a04      	ldr	r2, [pc, #16]	@ (80019f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d101      	bne.n	80019e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019e2:	f003 ffc9 	bl	8005978 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40001000 	.word	0x40001000

080019f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80019f8:	b672      	cpsid	i
}
 80019fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80019fc:	bf00      	nop
 80019fe:	e7fd      	b.n	80019fc <Error_Handler+0x8>

08001a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a06:	4b0c      	ldr	r3, [pc, #48]	@ (8001a38 <HAL_MspInit+0x38>)
 8001a08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a0c:	4a0a      	ldr	r2, [pc, #40]	@ (8001a38 <HAL_MspInit+0x38>)
 8001a0e:	f043 0302 	orr.w	r3, r3, #2
 8001a12:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001a16:	4b08      	ldr	r3, [pc, #32]	@ (8001a38 <HAL_MspInit+0x38>)
 8001a18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	607b      	str	r3, [r7, #4]
 8001a22:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a24:	2200      	movs	r2, #0
 8001a26:	210f      	movs	r1, #15
 8001a28:	f06f 0001 	mvn.w	r0, #1
 8001a2c:	f005 fc2a 	bl	8007284 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a30:	bf00      	nop
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	58024400 	.word	0x58024400

08001a3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b0bc      	sub	sp, #240	@ 0xf0
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a44:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a54:	f107 0320 	add.w	r3, r7, #32
 8001a58:	22b8      	movs	r2, #184	@ 0xb8
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f02a fe0f 	bl	802c680 <memset>
  if(hadc->Instance==ADC1)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a70      	ldr	r2, [pc, #448]	@ (8001c28 <HAL_ADC_MspInit+0x1ec>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d14b      	bne.n	8001b04 <HAL_ADC_MspInit+0xc8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001a6c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001a70:	f04f 0300 	mov.w	r3, #0
 8001a74:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8001a78:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a80:	f107 0320 	add.w	r3, r7, #32
 8001a84:	4618      	mov	r0, r3
 8001a86:	f00a f8bd 	bl	800bc04 <HAL_RCCEx_PeriphCLKConfig>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8001a90:	f7ff ffb0 	bl	80019f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001a94:	4b65      	ldr	r3, [pc, #404]	@ (8001c2c <HAL_ADC_MspInit+0x1f0>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	4a64      	ldr	r2, [pc, #400]	@ (8001c2c <HAL_ADC_MspInit+0x1f0>)
 8001a9c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001a9e:	4b63      	ldr	r3, [pc, #396]	@ (8001c2c <HAL_ADC_MspInit+0x1f0>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d10e      	bne.n	8001ac4 <HAL_ADC_MspInit+0x88>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001aa6:	4b62      	ldr	r3, [pc, #392]	@ (8001c30 <HAL_ADC_MspInit+0x1f4>)
 8001aa8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001aac:	4a60      	ldr	r2, [pc, #384]	@ (8001c30 <HAL_ADC_MspInit+0x1f4>)
 8001aae:	f043 0320 	orr.w	r3, r3, #32
 8001ab2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001ab6:	4b5e      	ldr	r3, [pc, #376]	@ (8001c30 <HAL_ADC_MspInit+0x1f4>)
 8001ab8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001abc:	f003 0320 	and.w	r3, r3, #32
 8001ac0:	61fb      	str	r3, [r7, #28]
 8001ac2:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ac4:	4b5a      	ldr	r3, [pc, #360]	@ (8001c30 <HAL_ADC_MspInit+0x1f4>)
 8001ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aca:	4a59      	ldr	r2, [pc, #356]	@ (8001c30 <HAL_ADC_MspInit+0x1f4>)
 8001acc:	f043 0320 	orr.w	r3, r3, #32
 8001ad0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ad4:	4b56      	ldr	r3, [pc, #344]	@ (8001c30 <HAL_ADC_MspInit+0x1f4>)
 8001ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ada:	f003 0320 	and.w	r3, r3, #32
 8001ade:	61bb      	str	r3, [r7, #24]
 8001ae0:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ae2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001ae6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aea:	2303      	movs	r3, #3
 8001aec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001af6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001afa:	4619      	mov	r1, r3
 8001afc:	484d      	ldr	r0, [pc, #308]	@ (8001c34 <HAL_ADC_MspInit+0x1f8>)
 8001afe:	f005 ff85 	bl	8007a0c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001b02:	e08d      	b.n	8001c20 <HAL_ADC_MspInit+0x1e4>
  else if(hadc->Instance==ADC2)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a4b      	ldr	r2, [pc, #300]	@ (8001c38 <HAL_ADC_MspInit+0x1fc>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d14b      	bne.n	8001ba6 <HAL_ADC_MspInit+0x16a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b0e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001b12:	f04f 0300 	mov.w	r3, #0
 8001b16:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8001b1a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b1e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b22:	f107 0320 	add.w	r3, r7, #32
 8001b26:	4618      	mov	r0, r3
 8001b28:	f00a f86c 	bl	800bc04 <HAL_RCCEx_PeriphCLKConfig>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_ADC_MspInit+0xfa>
      Error_Handler();
 8001b32:	f7ff ff5f 	bl	80019f4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001b36:	4b3d      	ldr	r3, [pc, #244]	@ (8001c2c <HAL_ADC_MspInit+0x1f0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	4a3b      	ldr	r2, [pc, #236]	@ (8001c2c <HAL_ADC_MspInit+0x1f0>)
 8001b3e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001b40:	4b3a      	ldr	r3, [pc, #232]	@ (8001c2c <HAL_ADC_MspInit+0x1f0>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d10e      	bne.n	8001b66 <HAL_ADC_MspInit+0x12a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001b48:	4b39      	ldr	r3, [pc, #228]	@ (8001c30 <HAL_ADC_MspInit+0x1f4>)
 8001b4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001b4e:	4a38      	ldr	r2, [pc, #224]	@ (8001c30 <HAL_ADC_MspInit+0x1f4>)
 8001b50:	f043 0320 	orr.w	r3, r3, #32
 8001b54:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001b58:	4b35      	ldr	r3, [pc, #212]	@ (8001c30 <HAL_ADC_MspInit+0x1f4>)
 8001b5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001b5e:	f003 0320 	and.w	r3, r3, #32
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b66:	4b32      	ldr	r3, [pc, #200]	@ (8001c30 <HAL_ADC_MspInit+0x1f4>)
 8001b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b6c:	4a30      	ldr	r2, [pc, #192]	@ (8001c30 <HAL_ADC_MspInit+0x1f4>)
 8001b6e:	f043 0320 	orr.w	r3, r3, #32
 8001b72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b76:	4b2e      	ldr	r3, [pc, #184]	@ (8001c30 <HAL_ADC_MspInit+0x1f4>)
 8001b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b7c:	f003 0320 	and.w	r3, r3, #32
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b84:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b88:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b98:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4825      	ldr	r0, [pc, #148]	@ (8001c34 <HAL_ADC_MspInit+0x1f8>)
 8001ba0:	f005 ff34 	bl	8007a0c <HAL_GPIO_Init>
}
 8001ba4:	e03c      	b.n	8001c20 <HAL_ADC_MspInit+0x1e4>
  else if(hadc->Instance==ADC3)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a24      	ldr	r2, [pc, #144]	@ (8001c3c <HAL_ADC_MspInit+0x200>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d137      	bne.n	8001c20 <HAL_ADC_MspInit+0x1e4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001bb0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001bb4:	f04f 0300 	mov.w	r3, #0
 8001bb8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8001bbc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bc0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bc4:	f107 0320 	add.w	r3, r7, #32
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f00a f81b 	bl	800bc04 <HAL_RCCEx_PeriphCLKConfig>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <HAL_ADC_MspInit+0x19c>
      Error_Handler();
 8001bd4:	f7ff ff0e 	bl	80019f4 <Error_Handler>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001bd8:	4b15      	ldr	r3, [pc, #84]	@ (8001c30 <HAL_ADC_MspInit+0x1f4>)
 8001bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bde:	4a14      	ldr	r2, [pc, #80]	@ (8001c30 <HAL_ADC_MspInit+0x1f4>)
 8001be0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001be4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001be8:	4b11      	ldr	r3, [pc, #68]	@ (8001c30 <HAL_ADC_MspInit+0x1f4>)
 8001bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c30 <HAL_ADC_MspInit+0x1f4>)
 8001bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bfc:	4a0c      	ldr	r2, [pc, #48]	@ (8001c30 <HAL_ADC_MspInit+0x1f4>)
 8001bfe:	f043 0304 	orr.w	r3, r3, #4
 8001c02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c06:	4b0a      	ldr	r3, [pc, #40]	@ (8001c30 <HAL_ADC_MspInit+0x1f4>)
 8001c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	68bb      	ldr	r3, [r7, #8]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001c14:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8001c18:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8001c1c:	f003 fef0 	bl	8005a00 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001c20:	bf00      	nop
 8001c22:	37f0      	adds	r7, #240	@ 0xf0
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40022000 	.word	0x40022000
 8001c2c:	24000870 	.word	0x24000870
 8001c30:	58024400 	.word	0x58024400
 8001c34:	58021400 	.word	0x58021400
 8001c38:	40022100 	.word	0x40022100
 8001c3c:	58026000 	.word	0x58026000

08001c40 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a0b      	ldr	r2, [pc, #44]	@ (8001c7c <HAL_CRC_MspInit+0x3c>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d10e      	bne.n	8001c70 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001c52:	4b0b      	ldr	r3, [pc, #44]	@ (8001c80 <HAL_CRC_MspInit+0x40>)
 8001c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c58:	4a09      	ldr	r2, [pc, #36]	@ (8001c80 <HAL_CRC_MspInit+0x40>)
 8001c5a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001c5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c62:	4b07      	ldr	r3, [pc, #28]	@ (8001c80 <HAL_CRC_MspInit+0x40>)
 8001c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8001c70:	bf00      	nop
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	58024c00 	.word	0x58024c00
 8001c80:	58024400 	.word	0x58024400

08001c84 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08a      	sub	sp, #40	@ 0x28
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8c:	f107 0314 	add.w	r3, r7, #20
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a1c      	ldr	r2, [pc, #112]	@ (8001d14 <HAL_DAC_MspInit+0x90>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d131      	bne.n	8001d0a <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001ca6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d18 <HAL_DAC_MspInit+0x94>)
 8001ca8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cac:	4a1a      	ldr	r2, [pc, #104]	@ (8001d18 <HAL_DAC_MspInit+0x94>)
 8001cae:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001cb2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001cb6:	4b18      	ldr	r3, [pc, #96]	@ (8001d18 <HAL_DAC_MspInit+0x94>)
 8001cb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cbc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001cc0:	613b      	str	r3, [r7, #16]
 8001cc2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc4:	4b14      	ldr	r3, [pc, #80]	@ (8001d18 <HAL_DAC_MspInit+0x94>)
 8001cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cca:	4a13      	ldr	r2, [pc, #76]	@ (8001d18 <HAL_DAC_MspInit+0x94>)
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cd4:	4b10      	ldr	r3, [pc, #64]	@ (8001d18 <HAL_DAC_MspInit+0x94>)
 8001cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001ce2:	2330      	movs	r3, #48	@ 0x30
 8001ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cee:	f107 0314 	add.w	r3, r7, #20
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4809      	ldr	r0, [pc, #36]	@ (8001d1c <HAL_DAC_MspInit+0x98>)
 8001cf6:	f005 fe89 	bl	8007a0c <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	210f      	movs	r1, #15
 8001cfe:	2036      	movs	r0, #54	@ 0x36
 8001d00:	f005 fac0 	bl	8007284 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d04:	2036      	movs	r0, #54	@ 0x36
 8001d06:	f005 fad7 	bl	80072b8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001d0a:	bf00      	nop
 8001d0c:	3728      	adds	r7, #40	@ 0x28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40007400 	.word	0x40007400
 8001d18:	58024400 	.word	0x58024400
 8001d1c:	58020000 	.word	0x58020000

08001d20 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a0b      	ldr	r2, [pc, #44]	@ (8001d5c <HAL_DMA2D_MspInit+0x3c>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d10e      	bne.n	8001d50 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001d32:	4b0b      	ldr	r3, [pc, #44]	@ (8001d60 <HAL_DMA2D_MspInit+0x40>)
 8001d34:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001d38:	4a09      	ldr	r2, [pc, #36]	@ (8001d60 <HAL_DMA2D_MspInit+0x40>)
 8001d3a:	f043 0310 	orr.w	r3, r3, #16
 8001d3e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001d42:	4b07      	ldr	r3, [pc, #28]	@ (8001d60 <HAL_DMA2D_MspInit+0x40>)
 8001d44:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001d48:	f003 0310 	and.w	r3, r3, #16
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001d50:	bf00      	nop
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	52001000 	.word	0x52001000
 8001d60:	58024400 	.word	0x58024400

08001d64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b0ba      	sub	sp, #232	@ 0xe8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d7c:	f107 0318 	add.w	r3, r7, #24
 8001d80:	22b8      	movs	r2, #184	@ 0xb8
 8001d82:	2100      	movs	r1, #0
 8001d84:	4618      	mov	r0, r3
 8001d86:	f02a fc7b 	bl	802c680 <memset>
  if(hi2c->Instance==I2C1)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a4d      	ldr	r2, [pc, #308]	@ (8001ec4 <HAL_I2C_MspInit+0x160>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d146      	bne.n	8001e22 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d94:	f04f 0208 	mov.w	r2, #8
 8001d98:	f04f 0300 	mov.w	r3, #0
 8001d9c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001da0:	2300      	movs	r3, #0
 8001da2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001da6:	f107 0318 	add.w	r3, r7, #24
 8001daa:	4618      	mov	r0, r3
 8001dac:	f009 ff2a 	bl	800bc04 <HAL_RCCEx_PeriphCLKConfig>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001db6:	f7ff fe1d 	bl	80019f4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dba:	4b43      	ldr	r3, [pc, #268]	@ (8001ec8 <HAL_I2C_MspInit+0x164>)
 8001dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dc0:	4a41      	ldr	r2, [pc, #260]	@ (8001ec8 <HAL_I2C_MspInit+0x164>)
 8001dc2:	f043 0302 	orr.w	r3, r3, #2
 8001dc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dca:	4b3f      	ldr	r3, [pc, #252]	@ (8001ec8 <HAL_I2C_MspInit+0x164>)
 8001dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dd8:	23c0      	movs	r3, #192	@ 0xc0
 8001dda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dde:	2312      	movs	r3, #18
 8001de0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dea:	2300      	movs	r3, #0
 8001dec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001df0:	2304      	movs	r3, #4
 8001df2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4833      	ldr	r0, [pc, #204]	@ (8001ecc <HAL_I2C_MspInit+0x168>)
 8001dfe:	f005 fe05 	bl	8007a0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e02:	4b31      	ldr	r3, [pc, #196]	@ (8001ec8 <HAL_I2C_MspInit+0x164>)
 8001e04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e08:	4a2f      	ldr	r2, [pc, #188]	@ (8001ec8 <HAL_I2C_MspInit+0x164>)
 8001e0a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e0e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e12:	4b2d      	ldr	r3, [pc, #180]	@ (8001ec8 <HAL_I2C_MspInit+0x164>)
 8001e14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001e20:	e04b      	b.n	8001eba <HAL_I2C_MspInit+0x156>
  else if(hi2c->Instance==I2C2)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a2a      	ldr	r2, [pc, #168]	@ (8001ed0 <HAL_I2C_MspInit+0x16c>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d146      	bne.n	8001eba <HAL_I2C_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001e2c:	f04f 0208 	mov.w	r2, #8
 8001e30:	f04f 0300 	mov.w	r3, #0
 8001e34:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e3e:	f107 0318 	add.w	r3, r7, #24
 8001e42:	4618      	mov	r0, r3
 8001e44:	f009 fede 	bl	800bc04 <HAL_RCCEx_PeriphCLKConfig>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8001e4e:	f7ff fdd1 	bl	80019f4 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e52:	4b1d      	ldr	r3, [pc, #116]	@ (8001ec8 <HAL_I2C_MspInit+0x164>)
 8001e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e58:	4a1b      	ldr	r2, [pc, #108]	@ (8001ec8 <HAL_I2C_MspInit+0x164>)
 8001e5a:	f043 0302 	orr.w	r3, r3, #2
 8001e5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e62:	4b19      	ldr	r3, [pc, #100]	@ (8001ec8 <HAL_I2C_MspInit+0x164>)
 8001e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e70:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001e74:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e78:	2312      	movs	r3, #18
 8001e7a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e84:	2300      	movs	r3, #0
 8001e86:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e8a:	2304      	movs	r3, #4
 8001e8c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e90:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001e94:	4619      	mov	r1, r3
 8001e96:	480d      	ldr	r0, [pc, #52]	@ (8001ecc <HAL_I2C_MspInit+0x168>)
 8001e98:	f005 fdb8 	bl	8007a0c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec8 <HAL_I2C_MspInit+0x164>)
 8001e9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ea2:	4a09      	ldr	r2, [pc, #36]	@ (8001ec8 <HAL_I2C_MspInit+0x164>)
 8001ea4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ea8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001eac:	4b06      	ldr	r3, [pc, #24]	@ (8001ec8 <HAL_I2C_MspInit+0x164>)
 8001eae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001eb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
}
 8001eba:	bf00      	nop
 8001ebc:	37e8      	adds	r7, #232	@ 0xe8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40005400 	.word	0x40005400
 8001ec8:	58024400 	.word	0x58024400
 8001ecc:	58020400 	.word	0x58020400
 8001ed0:	40005800 	.word	0x40005800

08001ed4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a17      	ldr	r2, [pc, #92]	@ (8001f40 <HAL_I2C_MspDeInit+0x6c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d110      	bne.n	8001f08 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001ee6:	4b17      	ldr	r3, [pc, #92]	@ (8001f44 <HAL_I2C_MspDeInit+0x70>)
 8001ee8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001eec:	4a15      	ldr	r2, [pc, #84]	@ (8001f44 <HAL_I2C_MspDeInit+0x70>)
 8001eee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001ef2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8001ef6:	2140      	movs	r1, #64	@ 0x40
 8001ef8:	4813      	ldr	r0, [pc, #76]	@ (8001f48 <HAL_I2C_MspDeInit+0x74>)
 8001efa:	f005 ff2f 	bl	8007d5c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8001efe:	2180      	movs	r1, #128	@ 0x80
 8001f00:	4811      	ldr	r0, [pc, #68]	@ (8001f48 <HAL_I2C_MspDeInit+0x74>)
 8001f02:	f005 ff2b 	bl	8007d5c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001f06:	e016      	b.n	8001f36 <HAL_I2C_MspDeInit+0x62>
  else if(hi2c->Instance==I2C2)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a0f      	ldr	r2, [pc, #60]	@ (8001f4c <HAL_I2C_MspDeInit+0x78>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d111      	bne.n	8001f36 <HAL_I2C_MspDeInit+0x62>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001f12:	4b0c      	ldr	r3, [pc, #48]	@ (8001f44 <HAL_I2C_MspDeInit+0x70>)
 8001f14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f18:	4a0a      	ldr	r2, [pc, #40]	@ (8001f44 <HAL_I2C_MspDeInit+0x70>)
 8001f1a:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001f1e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8001f22:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f26:	4808      	ldr	r0, [pc, #32]	@ (8001f48 <HAL_I2C_MspDeInit+0x74>)
 8001f28:	f005 ff18 	bl	8007d5c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8001f2c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f30:	4805      	ldr	r0, [pc, #20]	@ (8001f48 <HAL_I2C_MspDeInit+0x74>)
 8001f32:	f005 ff13 	bl	8007d5c <HAL_GPIO_DeInit>
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40005400 	.word	0x40005400
 8001f44:	58024400 	.word	0x58024400
 8001f48:	58020400 	.word	0x58020400
 8001f4c:	40005800 	.word	0x40005800

08001f50 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b0c0      	sub	sp, #256	@ 0x100
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f68:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001f6c:	22b8      	movs	r2, #184	@ 0xb8
 8001f6e:	2100      	movs	r1, #0
 8001f70:	4618      	mov	r0, r3
 8001f72:	f02a fb85 	bl	802c680 <memset>
  if(hltdc->Instance==LTDC)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4ad9      	ldr	r2, [pc, #868]	@ (80022e0 <HAL_LTDC_MspInit+0x390>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	f040 81d9 	bne.w	8002334 <HAL_LTDC_MspInit+0x3e4>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001f82:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001f86:	f04f 0300 	mov.w	r3, #0
 8001f8a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 8001f8e:	2319      	movs	r3, #25
 8001f90:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3N = 288;
 8001f92:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001f96:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	667b      	str	r3, [r7, #100]	@ 0x64
    PeriphClkInitStruct.PLL3.PLL3R = 30;
 8001fa0:	231e      	movs	r3, #30
 8001fa2:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001fa8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fac:	673b      	str	r3, [r7, #112]	@ 0x70
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fb2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f009 fe24 	bl	800bc04 <HAL_RCCEx_PeriphCLKConfig>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <HAL_LTDC_MspInit+0x76>
    {
      Error_Handler();
 8001fc2:	f7ff fd17 	bl	80019f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001fc6:	4bc7      	ldr	r3, [pc, #796]	@ (80022e4 <HAL_LTDC_MspInit+0x394>)
 8001fc8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001fcc:	4ac5      	ldr	r2, [pc, #788]	@ (80022e4 <HAL_LTDC_MspInit+0x394>)
 8001fce:	f043 0308 	orr.w	r3, r3, #8
 8001fd2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8001fd6:	4bc3      	ldr	r3, [pc, #780]	@ (80022e4 <HAL_LTDC_MspInit+0x394>)
 8001fd8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001fdc:	f003 0308 	and.w	r3, r3, #8
 8001fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fe4:	4bbf      	ldr	r3, [pc, #764]	@ (80022e4 <HAL_LTDC_MspInit+0x394>)
 8001fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fea:	4abe      	ldr	r2, [pc, #760]	@ (80022e4 <HAL_LTDC_MspInit+0x394>)
 8001fec:	f043 0310 	orr.w	r3, r3, #16
 8001ff0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ff4:	4bbb      	ldr	r3, [pc, #748]	@ (80022e4 <HAL_LTDC_MspInit+0x394>)
 8001ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ffa:	f003 0310 	and.w	r3, r3, #16
 8001ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002002:	4bb8      	ldr	r3, [pc, #736]	@ (80022e4 <HAL_LTDC_MspInit+0x394>)
 8002004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002008:	4ab6      	ldr	r2, [pc, #728]	@ (80022e4 <HAL_LTDC_MspInit+0x394>)
 800200a:	f043 0320 	orr.w	r3, r3, #32
 800200e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002012:	4bb4      	ldr	r3, [pc, #720]	@ (80022e4 <HAL_LTDC_MspInit+0x394>)
 8002014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002018:	f003 0320 	and.w	r3, r3, #32
 800201c:	627b      	str	r3, [r7, #36]	@ 0x24
 800201e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002020:	4bb0      	ldr	r3, [pc, #704]	@ (80022e4 <HAL_LTDC_MspInit+0x394>)
 8002022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002026:	4aaf      	ldr	r2, [pc, #700]	@ (80022e4 <HAL_LTDC_MspInit+0x394>)
 8002028:	f043 0304 	orr.w	r3, r3, #4
 800202c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002030:	4bac      	ldr	r3, [pc, #688]	@ (80022e4 <HAL_LTDC_MspInit+0x394>)
 8002032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002036:	f003 0304 	and.w	r3, r3, #4
 800203a:	623b      	str	r3, [r7, #32]
 800203c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203e:	4ba9      	ldr	r3, [pc, #676]	@ (80022e4 <HAL_LTDC_MspInit+0x394>)
 8002040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002044:	4aa7      	ldr	r2, [pc, #668]	@ (80022e4 <HAL_LTDC_MspInit+0x394>)
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800204e:	4ba5      	ldr	r3, [pc, #660]	@ (80022e4 <HAL_LTDC_MspInit+0x394>)
 8002050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	61fb      	str	r3, [r7, #28]
 800205a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800205c:	4ba1      	ldr	r3, [pc, #644]	@ (80022e4 <HAL_LTDC_MspInit+0x394>)
 800205e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002062:	4aa0      	ldr	r2, [pc, #640]	@ (80022e4 <HAL_LTDC_MspInit+0x394>)
 8002064:	f043 0302 	orr.w	r3, r3, #2
 8002068:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800206c:	4b9d      	ldr	r3, [pc, #628]	@ (80022e4 <HAL_LTDC_MspInit+0x394>)
 800206e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	61bb      	str	r3, [r7, #24]
 8002078:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800207a:	4b9a      	ldr	r3, [pc, #616]	@ (80022e4 <HAL_LTDC_MspInit+0x394>)
 800207c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002080:	4a98      	ldr	r2, [pc, #608]	@ (80022e4 <HAL_LTDC_MspInit+0x394>)
 8002082:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002086:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800208a:	4b96      	ldr	r3, [pc, #600]	@ (80022e4 <HAL_LTDC_MspInit+0x394>)
 800208c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002090:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002094:	617b      	str	r3, [r7, #20]
 8002096:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002098:	4b92      	ldr	r3, [pc, #584]	@ (80022e4 <HAL_LTDC_MspInit+0x394>)
 800209a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800209e:	4a91      	ldr	r2, [pc, #580]	@ (80022e4 <HAL_LTDC_MspInit+0x394>)
 80020a0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020a8:	4b8e      	ldr	r3, [pc, #568]	@ (80022e4 <HAL_LTDC_MspInit+0x394>)
 80020aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020b6:	4b8b      	ldr	r3, [pc, #556]	@ (80022e4 <HAL_LTDC_MspInit+0x394>)
 80020b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020bc:	4a89      	ldr	r2, [pc, #548]	@ (80022e4 <HAL_LTDC_MspInit+0x394>)
 80020be:	f043 0308 	orr.w	r3, r3, #8
 80020c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020c6:	4b87      	ldr	r3, [pc, #540]	@ (80022e4 <HAL_LTDC_MspInit+0x394>)
 80020c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80020d4:	4b83      	ldr	r3, [pc, #524]	@ (80022e4 <HAL_LTDC_MspInit+0x394>)
 80020d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020da:	4a82      	ldr	r2, [pc, #520]	@ (80022e4 <HAL_LTDC_MspInit+0x394>)
 80020dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020e4:	4b7f      	ldr	r3, [pc, #508]	@ (80022e4 <HAL_LTDC_MspInit+0x394>)
 80020e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020ee:	60bb      	str	r3, [r7, #8]
 80020f0:	68bb      	ldr	r3, [r7, #8]
    PA11     ------> LTDC_R4
    PD2     ------> LTDC_B7
    PG13     ------> LTDC_R0
    PB8     ------> LTDC_B6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_11
 80020f2:	f645 0370 	movw	r3, #22640	@ 0x5870
 80020f6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
                          |GPIO_PIN_12|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fa:	2302      	movs	r3, #2
 80020fc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002100:	2300      	movs	r3, #0
 8002102:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002106:	2300      	movs	r3, #0
 8002108:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800210c:	230e      	movs	r3, #14
 800210e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002112:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002116:	4619      	mov	r1, r3
 8002118:	4873      	ldr	r0, [pc, #460]	@ (80022e8 <HAL_LTDC_MspInit+0x398>)
 800211a:	f005 fc77 	bl	8007a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800211e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002122:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002126:	2302      	movs	r3, #2
 8002128:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002132:	2300      	movs	r3, #0
 8002134:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002138:	230e      	movs	r3, #14
 800213a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800213e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002142:	4619      	mov	r1, r3
 8002144:	4869      	ldr	r0, [pc, #420]	@ (80022ec <HAL_LTDC_MspInit+0x39c>)
 8002146:	f005 fc61 	bl	8007a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800214a:	2301      	movs	r3, #1
 800214c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002150:	2302      	movs	r3, #2
 8002152:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215c:	2300      	movs	r3, #0
 800215e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 8002162:	230b      	movs	r3, #11
 8002164:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002168:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800216c:	4619      	mov	r1, r3
 800216e:	4860      	ldr	r0, [pc, #384]	@ (80022f0 <HAL_LTDC_MspInit+0x3a0>)
 8002170:	f005 fc4c 	bl	8007a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_9;
 8002174:	f240 2352 	movw	r3, #594	@ 0x252
 8002178:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217c:	2302      	movs	r3, #2
 800217e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002188:	2300      	movs	r3, #0
 800218a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800218e:	230e      	movs	r3, #14
 8002190:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002194:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002198:	4619      	mov	r1, r3
 800219a:	4855      	ldr	r0, [pc, #340]	@ (80022f0 <HAL_LTDC_MspInit+0x3a0>)
 800219c:	f005 fc36 	bl	8007a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7
 80021a0:	f640 638e 	movw	r3, #3726	@ 0xe8e
 80021a4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a8:	2302      	movs	r3, #2
 80021aa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b4:	2300      	movs	r3, #0
 80021b6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021ba:	230e      	movs	r3, #14
 80021bc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80021c4:	4619      	mov	r1, r3
 80021c6:	484b      	ldr	r0, [pc, #300]	@ (80022f4 <HAL_LTDC_MspInit+0x3a4>)
 80021c8:	f005 fc20 	bl	8007a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021cc:	2303      	movs	r3, #3
 80021ce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d2:	2302      	movs	r3, #2
 80021d4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021de:	2300      	movs	r3, #0
 80021e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80021e4:	2309      	movs	r3, #9
 80021e6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ea:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80021ee:	4619      	mov	r1, r3
 80021f0:	4841      	ldr	r0, [pc, #260]	@ (80022f8 <HAL_LTDC_MspInit+0x3a8>)
 80021f2:	f005 fc0b 	bl	8007a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8;
 80021f6:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 80021fa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fe:	2302      	movs	r3, #2
 8002200:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220a:	2300      	movs	r3, #0
 800220c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002210:	230e      	movs	r3, #14
 8002212:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002216:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800221a:	4619      	mov	r1, r3
 800221c:	4836      	ldr	r0, [pc, #216]	@ (80022f8 <HAL_LTDC_MspInit+0x3a8>)
 800221e:	f005 fbf5 	bl	8007a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002222:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002226:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222a:	2302      	movs	r3, #2
 800222c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002236:	2300      	movs	r3, #0
 8002238:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800223c:	230e      	movs	r3, #14
 800223e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002242:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002246:	4619      	mov	r1, r3
 8002248:	482c      	ldr	r0, [pc, #176]	@ (80022fc <HAL_LTDC_MspInit+0x3ac>)
 800224a:	f005 fbdf 	bl	8007a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800224e:	2302      	movs	r3, #2
 8002250:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002254:	2302      	movs	r3, #2
 8002256:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002260:	2300      	movs	r3, #0
 8002262:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002266:	230e      	movs	r3, #14
 8002268:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800226c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002270:	4619      	mov	r1, r3
 8002272:	4823      	ldr	r0, [pc, #140]	@ (8002300 <HAL_LTDC_MspInit+0x3b0>)
 8002274:	f005 fbca 	bl	8007a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002278:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800227c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002280:	2302      	movs	r3, #2
 8002282:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002286:	2300      	movs	r3, #0
 8002288:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228c:	2300      	movs	r3, #0
 800228e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 8002292:	230d      	movs	r3, #13
 8002294:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002298:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800229c:	4619      	mov	r1, r3
 800229e:	4815      	ldr	r0, [pc, #84]	@ (80022f4 <HAL_LTDC_MspInit+0x3a4>)
 80022a0:	f005 fbb4 	bl	8007a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80022a4:	2304      	movs	r3, #4
 80022a6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022aa:	2302      	movs	r3, #2
 80022ac:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b6:	2300      	movs	r3, #0
 80022b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80022bc:	2309      	movs	r3, #9
 80022be:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022c2:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80022c6:	4619      	mov	r1, r3
 80022c8:	480e      	ldr	r0, [pc, #56]	@ (8002304 <HAL_LTDC_MspInit+0x3b4>)
 80022ca:	f005 fb9f 	bl	8007a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80022ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022d2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d6:	2302      	movs	r3, #2
 80022d8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022dc:	2300      	movs	r3, #0
 80022de:	e013      	b.n	8002308 <HAL_LTDC_MspInit+0x3b8>
 80022e0:	50001000 	.word	0x50001000
 80022e4:	58024400 	.word	0x58024400
 80022e8:	58021000 	.word	0x58021000
 80022ec:	58021400 	.word	0x58021400
 80022f0:	58020800 	.word	0x58020800
 80022f4:	58020000 	.word	0x58020000
 80022f8:	58020400 	.word	0x58020400
 80022fc:	58022400 	.word	0x58022400
 8002300:	58022800 	.word	0x58022800
 8002304:	58020c00 	.word	0x58020c00
 8002308:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230c:	2300      	movs	r3, #0
 800230e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002312:	230e      	movs	r3, #14
 8002314:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002318:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800231c:	4619      	mov	r1, r3
 800231e:	4808      	ldr	r0, [pc, #32]	@ (8002340 <HAL_LTDC_MspInit+0x3f0>)
 8002320:	f005 fb74 	bl	8007a0c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002324:	2200      	movs	r2, #0
 8002326:	2105      	movs	r1, #5
 8002328:	2058      	movs	r0, #88	@ 0x58
 800232a:	f004 ffab 	bl	8007284 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800232e:	2058      	movs	r0, #88	@ 0x58
 8002330:	f004 ffc2 	bl	80072b8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002334:	bf00      	nop
 8002336:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	58021800 	.word	0x58021800

08002344 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b094      	sub	sp, #80	@ 0x50
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800234c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	605a      	str	r2, [r3, #4]
 8002356:	609a      	str	r2, [r3, #8]
 8002358:	60da      	str	r2, [r3, #12]
 800235a:	611a      	str	r2, [r3, #16]
  if(hospi->Instance==OCTOSPI1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a83      	ldr	r2, [pc, #524]	@ (8002570 <HAL_OSPI_MspInit+0x22c>)
 8002362:	4293      	cmp	r3, r2
 8002364:	f040 8116 	bne.w	8002594 <HAL_OSPI_MspInit+0x250>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8002368:	4b82      	ldr	r3, [pc, #520]	@ (8002574 <HAL_OSPI_MspInit+0x230>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	3301      	adds	r3, #1
 800236e:	4a81      	ldr	r2, [pc, #516]	@ (8002574 <HAL_OSPI_MspInit+0x230>)
 8002370:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 8002372:	4b80      	ldr	r3, [pc, #512]	@ (8002574 <HAL_OSPI_MspInit+0x230>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d10e      	bne.n	8002398 <HAL_OSPI_MspInit+0x54>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 800237a:	4b7f      	ldr	r3, [pc, #508]	@ (8002578 <HAL_OSPI_MspInit+0x234>)
 800237c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002380:	4a7d      	ldr	r2, [pc, #500]	@ (8002578 <HAL_OSPI_MspInit+0x234>)
 8002382:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002386:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800238a:	4b7b      	ldr	r3, [pc, #492]	@ (8002578 <HAL_OSPI_MspInit+0x234>)
 800238c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002390:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002394:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8002398:	4b77      	ldr	r3, [pc, #476]	@ (8002578 <HAL_OSPI_MspInit+0x234>)
 800239a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800239e:	4a76      	ldr	r2, [pc, #472]	@ (8002578 <HAL_OSPI_MspInit+0x234>)
 80023a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023a4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80023a8:	4b73      	ldr	r3, [pc, #460]	@ (8002578 <HAL_OSPI_MspInit+0x234>)
 80023aa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80023ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80023b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80023b6:	4b70      	ldr	r3, [pc, #448]	@ (8002578 <HAL_OSPI_MspInit+0x234>)
 80023b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023bc:	4a6e      	ldr	r2, [pc, #440]	@ (8002578 <HAL_OSPI_MspInit+0x234>)
 80023be:	f043 0310 	orr.w	r3, r3, #16
 80023c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023c6:	4b6c      	ldr	r3, [pc, #432]	@ (8002578 <HAL_OSPI_MspInit+0x234>)
 80023c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023cc:	f003 0310 	and.w	r3, r3, #16
 80023d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80023d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80023d4:	4b68      	ldr	r3, [pc, #416]	@ (8002578 <HAL_OSPI_MspInit+0x234>)
 80023d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023da:	4a67      	ldr	r2, [pc, #412]	@ (8002578 <HAL_OSPI_MspInit+0x234>)
 80023dc:	f043 0320 	orr.w	r3, r3, #32
 80023e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023e4:	4b64      	ldr	r3, [pc, #400]	@ (8002578 <HAL_OSPI_MspInit+0x234>)
 80023e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023ea:	f003 0320 	and.w	r3, r3, #32
 80023ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023f2:	4b61      	ldr	r3, [pc, #388]	@ (8002578 <HAL_OSPI_MspInit+0x234>)
 80023f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023f8:	4a5f      	ldr	r2, [pc, #380]	@ (8002578 <HAL_OSPI_MspInit+0x234>)
 80023fa:	f043 0304 	orr.w	r3, r3, #4
 80023fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002402:	4b5d      	ldr	r3, [pc, #372]	@ (8002578 <HAL_OSPI_MspInit+0x234>)
 8002404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800240e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002410:	4b59      	ldr	r3, [pc, #356]	@ (8002578 <HAL_OSPI_MspInit+0x234>)
 8002412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002416:	4a58      	ldr	r2, [pc, #352]	@ (8002578 <HAL_OSPI_MspInit+0x234>)
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002420:	4b55      	ldr	r3, [pc, #340]	@ (8002578 <HAL_OSPI_MspInit+0x234>)
 8002422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	627b      	str	r3, [r7, #36]	@ 0x24
 800242c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800242e:	4b52      	ldr	r3, [pc, #328]	@ (8002578 <HAL_OSPI_MspInit+0x234>)
 8002430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002434:	4a50      	ldr	r2, [pc, #320]	@ (8002578 <HAL_OSPI_MspInit+0x234>)
 8002436:	f043 0302 	orr.w	r3, r3, #2
 800243a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800243e:	4b4e      	ldr	r3, [pc, #312]	@ (8002578 <HAL_OSPI_MspInit+0x234>)
 8002440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	623b      	str	r3, [r7, #32]
 800244a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800244c:	4b4a      	ldr	r3, [pc, #296]	@ (8002578 <HAL_OSPI_MspInit+0x234>)
 800244e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002452:	4a49      	ldr	r2, [pc, #292]	@ (8002578 <HAL_OSPI_MspInit+0x234>)
 8002454:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002458:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800245c:	4b46      	ldr	r3, [pc, #280]	@ (8002578 <HAL_OSPI_MspInit+0x234>)
 800245e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002466:	61fb      	str	r3, [r7, #28]
 8002468:	69fb      	ldr	r3, [r7, #28]
    PE7     ------> OCTOSPIM_P1_IO4
    PE8     ------> OCTOSPIM_P1_IO5
    PE10     ------> OCTOSPIM_P1_IO7
    PG6     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800246a:	2304      	movs	r3, #4
 800246c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246e:	2302      	movs	r3, #2
 8002470:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002472:	2300      	movs	r3, #0
 8002474:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002476:	2303      	movs	r3, #3
 8002478:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800247a:	2309      	movs	r3, #9
 800247c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800247e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002482:	4619      	mov	r1, r3
 8002484:	483d      	ldr	r0, [pc, #244]	@ (800257c <HAL_OSPI_MspInit+0x238>)
 8002486:	f005 fac1 	bl	8007a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800248a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800248e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002490:	2302      	movs	r3, #2
 8002492:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002498:	2303      	movs	r3, #3
 800249a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800249c:	230a      	movs	r3, #10
 800249e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80024a0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80024a4:	4619      	mov	r1, r3
 80024a6:	4836      	ldr	r0, [pc, #216]	@ (8002580 <HAL_OSPI_MspInit+0x23c>)
 80024a8:	f005 fab0 	bl	8007a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80024ac:	2308      	movs	r3, #8
 80024ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b0:	2302      	movs	r3, #2
 80024b2:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b4:	2300      	movs	r3, #0
 80024b6:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b8:	2303      	movs	r3, #3
 80024ba:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF4_OCTOSPIM_P1;
 80024bc:	2304      	movs	r3, #4
 80024be:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024c0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80024c4:	4619      	mov	r1, r3
 80024c6:	482f      	ldr	r0, [pc, #188]	@ (8002584 <HAL_OSPI_MspInit+0x240>)
 80024c8:	f005 faa0 	bl	8007a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80024cc:	2340      	movs	r3, #64	@ 0x40
 80024ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d0:	2302      	movs	r3, #2
 80024d2:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d8:	2303      	movs	r3, #3
 80024da:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF6_OCTOSPIM_P1;
 80024dc:	2306      	movs	r3, #6
 80024de:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80024e4:	4619      	mov	r1, r3
 80024e6:	4828      	ldr	r0, [pc, #160]	@ (8002588 <HAL_OSPI_MspInit+0x244>)
 80024e8:	f005 fa90 	bl	8007a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80024ec:	2320      	movs	r3, #32
 80024ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f0:	2302      	movs	r3, #2
 80024f2:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f8:	2303      	movs	r3, #3
 80024fa:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80024fc:	230a      	movs	r3, #10
 80024fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002500:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002504:	4619      	mov	r1, r3
 8002506:	481f      	ldr	r0, [pc, #124]	@ (8002584 <HAL_OSPI_MspInit+0x240>)
 8002508:	f005 fa80 	bl	8007a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800250c:	2304      	movs	r3, #4
 800250e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002510:	2302      	movs	r3, #2
 8002512:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002514:	2300      	movs	r3, #0
 8002516:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002518:	2303      	movs	r3, #3
 800251a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800251c:	2309      	movs	r3, #9
 800251e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002520:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002524:	4619      	mov	r1, r3
 8002526:	4819      	ldr	r0, [pc, #100]	@ (800258c <HAL_OSPI_MspInit+0x248>)
 8002528:	f005 fa70 	bl	8007a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 800252c:	f44f 63b0 	mov.w	r3, #1408	@ 0x580
 8002530:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002532:	2302      	movs	r3, #2
 8002534:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002536:	2300      	movs	r3, #0
 8002538:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253a:	2303      	movs	r3, #3
 800253c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800253e:	230a      	movs	r3, #10
 8002540:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002542:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002546:	4619      	mov	r1, r3
 8002548:	480c      	ldr	r0, [pc, #48]	@ (800257c <HAL_OSPI_MspInit+0x238>)
 800254a:	f005 fa5f 	bl	8007a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800254e:	2340      	movs	r3, #64	@ 0x40
 8002550:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002552:	2302      	movs	r3, #2
 8002554:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800255a:	2303      	movs	r3, #3
 800255c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800255e:	230a      	movs	r3, #10
 8002560:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002562:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002566:	4619      	mov	r1, r3
 8002568:	4809      	ldr	r0, [pc, #36]	@ (8002590 <HAL_OSPI_MspInit+0x24c>)
 800256a:	f005 fa4f 	bl	8007a0c <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 800256e:	e08e      	b.n	800268e <HAL_OSPI_MspInit+0x34a>
 8002570:	52005000 	.word	0x52005000
 8002574:	24000874 	.word	0x24000874
 8002578:	58024400 	.word	0x58024400
 800257c:	58021000 	.word	0x58021000
 8002580:	58021400 	.word	0x58021400
 8002584:	58020800 	.word	0x58020800
 8002588:	58020000 	.word	0x58020000
 800258c:	58020400 	.word	0x58020400
 8002590:	58021800 	.word	0x58021800
  else if(hospi->Instance==OCTOSPI2)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a3f      	ldr	r2, [pc, #252]	@ (8002698 <HAL_OSPI_MspInit+0x354>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d177      	bne.n	800268e <HAL_OSPI_MspInit+0x34a>
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 800259e:	4b3f      	ldr	r3, [pc, #252]	@ (800269c <HAL_OSPI_MspInit+0x358>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	3301      	adds	r3, #1
 80025a4:	4a3d      	ldr	r2, [pc, #244]	@ (800269c <HAL_OSPI_MspInit+0x358>)
 80025a6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 80025a8:	4b3c      	ldr	r3, [pc, #240]	@ (800269c <HAL_OSPI_MspInit+0x358>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d10e      	bne.n	80025ce <HAL_OSPI_MspInit+0x28a>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 80025b0:	4b3b      	ldr	r3, [pc, #236]	@ (80026a0 <HAL_OSPI_MspInit+0x35c>)
 80025b2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80025b6:	4a3a      	ldr	r2, [pc, #232]	@ (80026a0 <HAL_OSPI_MspInit+0x35c>)
 80025b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80025bc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80025c0:	4b37      	ldr	r3, [pc, #220]	@ (80026a0 <HAL_OSPI_MspInit+0x35c>)
 80025c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80025c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025ca:	61bb      	str	r3, [r7, #24]
 80025cc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 80025ce:	4b34      	ldr	r3, [pc, #208]	@ (80026a0 <HAL_OSPI_MspInit+0x35c>)
 80025d0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80025d4:	4a32      	ldr	r2, [pc, #200]	@ (80026a0 <HAL_OSPI_MspInit+0x35c>)
 80025d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80025da:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80025de:	4b30      	ldr	r3, [pc, #192]	@ (80026a0 <HAL_OSPI_MspInit+0x35c>)
 80025e0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80025e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025e8:	617b      	str	r3, [r7, #20]
 80025ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80025ec:	4b2c      	ldr	r3, [pc, #176]	@ (80026a0 <HAL_OSPI_MspInit+0x35c>)
 80025ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025f2:	4a2b      	ldr	r2, [pc, #172]	@ (80026a0 <HAL_OSPI_MspInit+0x35c>)
 80025f4:	f043 0320 	orr.w	r3, r3, #32
 80025f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025fc:	4b28      	ldr	r3, [pc, #160]	@ (80026a0 <HAL_OSPI_MspInit+0x35c>)
 80025fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002602:	f003 0320 	and.w	r3, r3, #32
 8002606:	613b      	str	r3, [r7, #16]
 8002608:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800260a:	4b25      	ldr	r3, [pc, #148]	@ (80026a0 <HAL_OSPI_MspInit+0x35c>)
 800260c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002610:	4a23      	ldr	r2, [pc, #140]	@ (80026a0 <HAL_OSPI_MspInit+0x35c>)
 8002612:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002616:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800261a:	4b21      	ldr	r3, [pc, #132]	@ (80026a0 <HAL_OSPI_MspInit+0x35c>)
 800261c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002624:	60fb      	str	r3, [r7, #12]
 8002626:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002628:	f241 031f 	movw	r3, #4127	@ 0x101f
 800262c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262e:	2302      	movs	r3, #2
 8002630:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002632:	2300      	movs	r3, #0
 8002634:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002636:	2303      	movs	r3, #3
 8002638:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 800263a:	2309      	movs	r3, #9
 800263c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800263e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002642:	4619      	mov	r1, r3
 8002644:	4817      	ldr	r0, [pc, #92]	@ (80026a4 <HAL_OSPI_MspInit+0x360>)
 8002646:	f005 f9e1 	bl	8007a0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11;
 800264a:	f640 0303 	movw	r3, #2051	@ 0x803
 800264e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002650:	2302      	movs	r3, #2
 8002652:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002654:	2300      	movs	r3, #0
 8002656:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002658:	2303      	movs	r3, #3
 800265a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 800265c:	2309      	movs	r3, #9
 800265e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002660:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002664:	4619      	mov	r1, r3
 8002666:	4810      	ldr	r0, [pc, #64]	@ (80026a8 <HAL_OSPI_MspInit+0x364>)
 8002668:	f005 f9d0 	bl	8007a0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800266c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002670:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002672:	2302      	movs	r3, #2
 8002674:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002676:	2300      	movs	r3, #0
 8002678:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800267a:	2303      	movs	r3, #3
 800267c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P2;
 800267e:	2303      	movs	r3, #3
 8002680:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002682:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002686:	4619      	mov	r1, r3
 8002688:	4807      	ldr	r0, [pc, #28]	@ (80026a8 <HAL_OSPI_MspInit+0x364>)
 800268a:	f005 f9bf 	bl	8007a0c <HAL_GPIO_Init>
}
 800268e:	bf00      	nop
 8002690:	3750      	adds	r7, #80	@ 0x50
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	5200a000 	.word	0x5200a000
 800269c:	24000874 	.word	0x24000874
 80026a0:	58024400 	.word	0x58024400
 80026a4:	58021400 	.word	0x58021400
 80026a8:	58021800 	.word	0x58021800

080026ac <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a31      	ldr	r2, [pc, #196]	@ (8002780 <HAL_OSPI_MspDeInit+0xd4>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d133      	bne.n	8002726 <HAL_OSPI_MspDeInit+0x7a>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    HAL_RCC_OCTOSPIM_CLK_ENABLED--;
 80026be:	4b31      	ldr	r3, [pc, #196]	@ (8002784 <HAL_OSPI_MspDeInit+0xd8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	4a2f      	ldr	r2, [pc, #188]	@ (8002784 <HAL_OSPI_MspDeInit+0xd8>)
 80026c6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==0){
 80026c8:	4b2e      	ldr	r3, [pc, #184]	@ (8002784 <HAL_OSPI_MspDeInit+0xd8>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d107      	bne.n	80026e0 <HAL_OSPI_MspDeInit+0x34>
      __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 80026d0:	4b2d      	ldr	r3, [pc, #180]	@ (8002788 <HAL_OSPI_MspDeInit+0xdc>)
 80026d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80026d6:	4a2c      	ldr	r2, [pc, #176]	@ (8002788 <HAL_OSPI_MspDeInit+0xdc>)
 80026d8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80026dc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    }
    __HAL_RCC_OSPI1_CLK_DISABLE();
 80026e0:	4b29      	ldr	r3, [pc, #164]	@ (8002788 <HAL_OSPI_MspDeInit+0xdc>)
 80026e2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80026e6:	4a28      	ldr	r2, [pc, #160]	@ (8002788 <HAL_OSPI_MspDeInit+0xdc>)
 80026e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80026ec:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    PE7     ------> OCTOSPIM_P1_IO4
    PE8     ------> OCTOSPIM_P1_IO5
    PE10     ------> OCTOSPIM_P1_IO7
    PG6     ------> OCTOSPIM_P1_NCS
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10);
 80026f0:	f240 5184 	movw	r1, #1412	@ 0x584
 80026f4:	4825      	ldr	r0, [pc, #148]	@ (800278c <HAL_OSPI_MspDeInit+0xe0>)
 80026f6:	f005 fb31 	bl	8007d5c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_8|GPIO_PIN_9);
 80026fa:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80026fe:	4824      	ldr	r0, [pc, #144]	@ (8002790 <HAL_OSPI_MspDeInit+0xe4>)
 8002700:	f005 fb2c 	bl	8007d5c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_3|GPIO_PIN_5);
 8002704:	2128      	movs	r1, #40	@ 0x28
 8002706:	4823      	ldr	r0, [pc, #140]	@ (8002794 <HAL_OSPI_MspDeInit+0xe8>)
 8002708:	f005 fb28 	bl	8007d5c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6);
 800270c:	2140      	movs	r1, #64	@ 0x40
 800270e:	4822      	ldr	r0, [pc, #136]	@ (8002798 <HAL_OSPI_MspDeInit+0xec>)
 8002710:	f005 fb24 	bl	8007d5c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 8002714:	2104      	movs	r1, #4
 8002716:	4821      	ldr	r0, [pc, #132]	@ (800279c <HAL_OSPI_MspDeInit+0xf0>)
 8002718:	f005 fb20 	bl	8007d5c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_6);
 800271c:	2140      	movs	r1, #64	@ 0x40
 800271e:	4820      	ldr	r0, [pc, #128]	@ (80027a0 <HAL_OSPI_MspDeInit+0xf4>)
 8002720:	f005 fb1c 	bl	8007d5c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN OCTOSPI2_MspDeInit 1 */

  /* USER CODE END OCTOSPI2_MspDeInit 1 */
  }

}
 8002724:	e027      	b.n	8002776 <HAL_OSPI_MspDeInit+0xca>
  else if(hospi->Instance==OCTOSPI2)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a1e      	ldr	r2, [pc, #120]	@ (80027a4 <HAL_OSPI_MspDeInit+0xf8>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d122      	bne.n	8002776 <HAL_OSPI_MspDeInit+0xca>
    HAL_RCC_OCTOSPIM_CLK_ENABLED--;
 8002730:	4b14      	ldr	r3, [pc, #80]	@ (8002784 <HAL_OSPI_MspDeInit+0xd8>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	3b01      	subs	r3, #1
 8002736:	4a13      	ldr	r2, [pc, #76]	@ (8002784 <HAL_OSPI_MspDeInit+0xd8>)
 8002738:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==0){
 800273a:	4b12      	ldr	r3, [pc, #72]	@ (8002784 <HAL_OSPI_MspDeInit+0xd8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d107      	bne.n	8002752 <HAL_OSPI_MspDeInit+0xa6>
      __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 8002742:	4b11      	ldr	r3, [pc, #68]	@ (8002788 <HAL_OSPI_MspDeInit+0xdc>)
 8002744:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002748:	4a0f      	ldr	r2, [pc, #60]	@ (8002788 <HAL_OSPI_MspDeInit+0xdc>)
 800274a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800274e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    __HAL_RCC_OSPI2_CLK_DISABLE();
 8002752:	4b0d      	ldr	r3, [pc, #52]	@ (8002788 <HAL_OSPI_MspDeInit+0xdc>)
 8002754:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002758:	4a0b      	ldr	r2, [pc, #44]	@ (8002788 <HAL_OSPI_MspDeInit+0xdc>)
 800275a:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800275e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002762:	f241 011f 	movw	r1, #4127	@ 0x101f
 8002766:	480a      	ldr	r0, [pc, #40]	@ (8002790 <HAL_OSPI_MspDeInit+0xe4>)
 8002768:	f005 faf8 	bl	8007d5c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 800276c:	f641 4103 	movw	r1, #7171	@ 0x1c03
 8002770:	480b      	ldr	r0, [pc, #44]	@ (80027a0 <HAL_OSPI_MspDeInit+0xf4>)
 8002772:	f005 faf3 	bl	8007d5c <HAL_GPIO_DeInit>
}
 8002776:	bf00      	nop
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	52005000 	.word	0x52005000
 8002784:	24000874 	.word	0x24000874
 8002788:	58024400 	.word	0x58024400
 800278c:	58021000 	.word	0x58021000
 8002790:	58021400 	.word	0x58021400
 8002794:	58020800 	.word	0x58020800
 8002798:	58020000 	.word	0x58020000
 800279c:	58020400 	.word	0x58020400
 80027a0:	58021800 	.word	0x58021800
 80027a4:	5200a000 	.word	0x5200a000

080027a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a0b      	ldr	r2, [pc, #44]	@ (80027e4 <HAL_TIM_Base_MspInit+0x3c>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d10e      	bne.n	80027d8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027ba:	4b0b      	ldr	r3, [pc, #44]	@ (80027e8 <HAL_TIM_Base_MspInit+0x40>)
 80027bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027c0:	4a09      	ldr	r2, [pc, #36]	@ (80027e8 <HAL_TIM_Base_MspInit+0x40>)
 80027c2:	f043 0301 	orr.w	r3, r3, #1
 80027c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80027ca:	4b07      	ldr	r3, [pc, #28]	@ (80027e8 <HAL_TIM_Base_MspInit+0x40>)
 80027cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80027d8:	bf00      	nop
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	40010000 	.word	0x40010000
 80027e8:	58024400 	.word	0x58024400

080027ec <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08a      	sub	sp, #40	@ 0x28
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f4:	f107 0314 	add.w	r3, r7, #20
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	605a      	str	r2, [r3, #4]
 80027fe:	609a      	str	r2, [r3, #8]
 8002800:	60da      	str	r2, [r3, #12]
 8002802:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM23)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a1a      	ldr	r2, [pc, #104]	@ (8002874 <HAL_TIM_Encoder_MspInit+0x88>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d12d      	bne.n	800286a <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM23_MspInit 0 */

  /* USER CODE END TIM23_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM23_CLK_ENABLE();
 800280e:	4b1a      	ldr	r3, [pc, #104]	@ (8002878 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002810:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002814:	4a18      	ldr	r2, [pc, #96]	@ (8002878 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002816:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800281a:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800281e:	4b16      	ldr	r3, [pc, #88]	@ (8002878 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002820:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002824:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002828:	613b      	str	r3, [r7, #16]
 800282a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800282c:	4b12      	ldr	r3, [pc, #72]	@ (8002878 <HAL_TIM_Encoder_MspInit+0x8c>)
 800282e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002832:	4a11      	ldr	r2, [pc, #68]	@ (8002878 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002834:	f043 0320 	orr.w	r3, r3, #32
 8002838:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800283c:	4b0e      	ldr	r3, [pc, #56]	@ (8002878 <HAL_TIM_Encoder_MspInit+0x8c>)
 800283e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002842:	f003 0320 	and.w	r3, r3, #32
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]
    /**TIM23 GPIO Configuration
    PF6     ------> TIM23_CH1
    PF7     ------> TIM23_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800284a:	23c0      	movs	r3, #192	@ 0xc0
 800284c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284e:	2302      	movs	r3, #2
 8002850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002852:	2300      	movs	r3, #0
 8002854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002856:	2300      	movs	r3, #0
 8002858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 800285a:	230d      	movs	r3, #13
 800285c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800285e:	f107 0314 	add.w	r3, r7, #20
 8002862:	4619      	mov	r1, r3
 8002864:	4805      	ldr	r0, [pc, #20]	@ (800287c <HAL_TIM_Encoder_MspInit+0x90>)
 8002866:	f005 f8d1 	bl	8007a0c <HAL_GPIO_Init>

  /* USER CODE END TIM23_MspInit 1 */

  }

}
 800286a:	bf00      	nop
 800286c:	3728      	adds	r7, #40	@ 0x28
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	4000e000 	.word	0x4000e000
 8002878:	58024400 	.word	0x58024400
 800287c:	58021400 	.word	0x58021400

08002880 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b0ba      	sub	sp, #232	@ 0xe8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002888:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	60da      	str	r2, [r3, #12]
 8002896:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002898:	f107 0318 	add.w	r3, r7, #24
 800289c:	22b8      	movs	r2, #184	@ 0xb8
 800289e:	2100      	movs	r1, #0
 80028a0:	4618      	mov	r0, r3
 80028a2:	f029 feed 	bl	802c680 <memset>
  if(huart->Instance==UART4)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a39      	ldr	r2, [pc, #228]	@ (8002990 <HAL_UART_MspInit+0x110>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d16a      	bne.n	8002986 <HAL_UART_MspInit+0x106>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80028b0:	f04f 0202 	mov.w	r2, #2
 80028b4:	f04f 0300 	mov.w	r3, #0
 80028b8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80028bc:	2300      	movs	r3, #0
 80028be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028c2:	f107 0318 	add.w	r3, r7, #24
 80028c6:	4618      	mov	r0, r3
 80028c8:	f009 f99c 	bl	800bc04 <HAL_RCCEx_PeriphCLKConfig>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80028d2:	f7ff f88f 	bl	80019f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80028d6:	4b2f      	ldr	r3, [pc, #188]	@ (8002994 <HAL_UART_MspInit+0x114>)
 80028d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028dc:	4a2d      	ldr	r2, [pc, #180]	@ (8002994 <HAL_UART_MspInit+0x114>)
 80028de:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80028e2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80028e6:	4b2b      	ldr	r3, [pc, #172]	@ (8002994 <HAL_UART_MspInit+0x114>)
 80028e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028f0:	617b      	str	r3, [r7, #20]
 80028f2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f4:	4b27      	ldr	r3, [pc, #156]	@ (8002994 <HAL_UART_MspInit+0x114>)
 80028f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028fa:	4a26      	ldr	r2, [pc, #152]	@ (8002994 <HAL_UART_MspInit+0x114>)
 80028fc:	f043 0301 	orr.w	r3, r3, #1
 8002900:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002904:	4b23      	ldr	r3, [pc, #140]	@ (8002994 <HAL_UART_MspInit+0x114>)
 8002906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	613b      	str	r3, [r7, #16]
 8002910:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002912:	4b20      	ldr	r3, [pc, #128]	@ (8002994 <HAL_UART_MspInit+0x114>)
 8002914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002918:	4a1e      	ldr	r2, [pc, #120]	@ (8002994 <HAL_UART_MspInit+0x114>)
 800291a:	f043 0304 	orr.w	r3, r3, #4
 800291e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002922:	4b1c      	ldr	r3, [pc, #112]	@ (8002994 <HAL_UART_MspInit+0x114>)
 8002924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002930:	2301      	movs	r3, #1
 8002932:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002936:	2302      	movs	r3, #2
 8002938:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293c:	2300      	movs	r3, #0
 800293e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002942:	2300      	movs	r3, #0
 8002944:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002948:	2308      	movs	r3, #8
 800294a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800294e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002952:	4619      	mov	r1, r3
 8002954:	4810      	ldr	r0, [pc, #64]	@ (8002998 <HAL_UART_MspInit+0x118>)
 8002956:	f005 f859 	bl	8007a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800295a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800295e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002962:	2302      	movs	r3, #2
 8002964:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002968:	2300      	movs	r3, #0
 800296a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296e:	2300      	movs	r3, #0
 8002970:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002974:	2308      	movs	r3, #8
 8002976:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800297a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800297e:	4619      	mov	r1, r3
 8002980:	4806      	ldr	r0, [pc, #24]	@ (800299c <HAL_UART_MspInit+0x11c>)
 8002982:	f005 f843 	bl	8007a0c <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8002986:	bf00      	nop
 8002988:	37e8      	adds	r7, #232	@ 0xe8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40004c00 	.word	0x40004c00
 8002994:	58024400 	.word	0x58024400
 8002998:	58020000 	.word	0x58020000
 800299c:	58020800 	.word	0x58020800

080029a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b090      	sub	sp, #64	@ 0x40
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b0f      	cmp	r3, #15
 80029ac:	d827      	bhi.n	80029fe <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80029ae:	2200      	movs	r2, #0
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	2036      	movs	r0, #54	@ 0x36
 80029b4:	f004 fc66 	bl	8007284 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80029b8:	2036      	movs	r0, #54	@ 0x36
 80029ba:	f004 fc7d 	bl	80072b8 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80029be:	4a29      	ldr	r2, [pc, #164]	@ (8002a64 <HAL_InitTick+0xc4>)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80029c4:	4b28      	ldr	r3, [pc, #160]	@ (8002a68 <HAL_InitTick+0xc8>)
 80029c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029ca:	4a27      	ldr	r2, [pc, #156]	@ (8002a68 <HAL_InitTick+0xc8>)
 80029cc:	f043 0310 	orr.w	r3, r3, #16
 80029d0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80029d4:	4b24      	ldr	r3, [pc, #144]	@ (8002a68 <HAL_InitTick+0xc8>)
 80029d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029da:	f003 0310 	and.w	r3, r3, #16
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80029e2:	f107 0210 	add.w	r2, r7, #16
 80029e6:	f107 0314 	add.w	r3, r7, #20
 80029ea:	4611      	mov	r1, r2
 80029ec:	4618      	mov	r0, r3
 80029ee:	f009 f8c7 	bl	800bb80 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80029f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80029f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d106      	bne.n	8002a0a <HAL_InitTick+0x6a>
 80029fc:	e001      	b.n	8002a02 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e02b      	b.n	8002a5a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002a02:	f009 f891 	bl	800bb28 <HAL_RCC_GetPCLK1Freq>
 8002a06:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8002a08:	e004      	b.n	8002a14 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002a0a:	f009 f88d 	bl	800bb28 <HAL_RCC_GetPCLK1Freq>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a16:	4a15      	ldr	r2, [pc, #84]	@ (8002a6c <HAL_InitTick+0xcc>)
 8002a18:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1c:	0c9b      	lsrs	r3, r3, #18
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002a22:	4b13      	ldr	r3, [pc, #76]	@ (8002a70 <HAL_InitTick+0xd0>)
 8002a24:	4a13      	ldr	r2, [pc, #76]	@ (8002a74 <HAL_InitTick+0xd4>)
 8002a26:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002a28:	4b11      	ldr	r3, [pc, #68]	@ (8002a70 <HAL_InitTick+0xd0>)
 8002a2a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002a2e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002a30:	4a0f      	ldr	r2, [pc, #60]	@ (8002a70 <HAL_InitTick+0xd0>)
 8002a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a34:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002a36:	4b0e      	ldr	r3, [pc, #56]	@ (8002a70 <HAL_InitTick+0xd0>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a70 <HAL_InitTick+0xd0>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002a42:	480b      	ldr	r0, [pc, #44]	@ (8002a70 <HAL_InitTick+0xd0>)
 8002a44:	f00b fcc4 	bl	800e3d0 <HAL_TIM_Base_Init>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d104      	bne.n	8002a58 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002a4e:	4808      	ldr	r0, [pc, #32]	@ (8002a70 <HAL_InitTick+0xd0>)
 8002a50:	f00b fd16 	bl	800e480 <HAL_TIM_Base_Start_IT>
 8002a54:	4603      	mov	r3, r0
 8002a56:	e000      	b.n	8002a5a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3740      	adds	r7, #64	@ 0x40
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	2400003c 	.word	0x2400003c
 8002a68:	58024400 	.word	0x58024400
 8002a6c:	431bde83 	.word	0x431bde83
 8002a70:	24000878 	.word	0x24000878
 8002a74:	40001000 	.word	0x40001000

08002a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a7c:	bf00      	nop
 8002a7e:	e7fd      	b.n	8002a7c <NMI_Handler+0x4>

08002a80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a84:	bf00      	nop
 8002a86:	e7fd      	b.n	8002a84 <HardFault_Handler+0x4>

08002a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a8c:	bf00      	nop
 8002a8e:	e7fd      	b.n	8002a8c <MemManage_Handler+0x4>

08002a90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a94:	bf00      	nop
 8002a96:	e7fd      	b.n	8002a94 <BusFault_Handler+0x4>

08002a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a9c:	bf00      	nop
 8002a9e:	e7fd      	b.n	8002a9c <UsageFault_Handler+0x4>

08002aa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002aa4:	bf00      	nop
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
	...

08002ab0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8002ab4:	4b06      	ldr	r3, [pc, #24]	@ (8002ad0 <TIM6_DAC_IRQHandler+0x20>)
 8002ab6:	791b      	ldrb	r3, [r3, #4]
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d002      	beq.n	8002ac4 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8002abe:	4804      	ldr	r0, [pc, #16]	@ (8002ad0 <TIM6_DAC_IRQHandler+0x20>)
 8002ac0:	f004 fd94 	bl	80075ec <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8002ac4:	4803      	ldr	r0, [pc, #12]	@ (8002ad4 <TIM6_DAC_IRQHandler+0x24>)
 8002ac6:	f00b fe07 	bl	800e6d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002aca:	bf00      	nop
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	240004b0 	.word	0x240004b0
 8002ad4:	24000878 	.word	0x24000878

08002ad8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002adc:	4802      	ldr	r0, [pc, #8]	@ (8002ae8 <LTDC_IRQHandler+0x10>)
 8002ade:	f006 f997 	bl	8008e10 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002ae2:	bf00      	nop
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	240005d4 	.word	0x240005d4

08002aec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  return 1;
 8002af0:	2301      	movs	r3, #1
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <_kill>:

int _kill(int pid, int sig)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b06:	f029 feb3 	bl	802c870 <__errno>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2216      	movs	r2, #22
 8002b0e:	601a      	str	r2, [r3, #0]
  return -1;
 8002b10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <_exit>:

void _exit (int status)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b24:	f04f 31ff 	mov.w	r1, #4294967295
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f7ff ffe7 	bl	8002afc <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b2e:	bf00      	nop
 8002b30:	e7fd      	b.n	8002b2e <_exit+0x12>

08002b32 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b086      	sub	sp, #24
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	60f8      	str	r0, [r7, #12]
 8002b3a:	60b9      	str	r1, [r7, #8]
 8002b3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b3e:	2300      	movs	r3, #0
 8002b40:	617b      	str	r3, [r7, #20]
 8002b42:	e00a      	b.n	8002b5a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b44:	f3af 8000 	nop.w
 8002b48:	4601      	mov	r1, r0
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	1c5a      	adds	r2, r3, #1
 8002b4e:	60ba      	str	r2, [r7, #8]
 8002b50:	b2ca      	uxtb	r2, r1
 8002b52:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	3301      	adds	r3, #1
 8002b58:	617b      	str	r3, [r7, #20]
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	dbf0      	blt.n	8002b44 <_read+0x12>
  }

  return len;
 8002b62:	687b      	ldr	r3, [r7, #4]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3718      	adds	r7, #24
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b78:	2300      	movs	r3, #0
 8002b7a:	617b      	str	r3, [r7, #20]
 8002b7c:	e009      	b.n	8002b92 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	1c5a      	adds	r2, r3, #1
 8002b82:	60ba      	str	r2, [r7, #8]
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	617b      	str	r3, [r7, #20]
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	dbf1      	blt.n	8002b7e <_write+0x12>
  }
  return len;
 8002b9a:	687b      	ldr	r3, [r7, #4]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3718      	adds	r7, #24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <_close>:

int _close(int file)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002bac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002bcc:	605a      	str	r2, [r3, #4]
  return 0;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <_isatty>:

int _isatty(int file)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002be4:	2301      	movs	r3, #1
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b085      	sub	sp, #20
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	60f8      	str	r0, [r7, #12]
 8002bfa:	60b9      	str	r1, [r7, #8]
 8002bfc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3714      	adds	r7, #20
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c14:	4a14      	ldr	r2, [pc, #80]	@ (8002c68 <_sbrk+0x5c>)
 8002c16:	4b15      	ldr	r3, [pc, #84]	@ (8002c6c <_sbrk+0x60>)
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c20:	4b13      	ldr	r3, [pc, #76]	@ (8002c70 <_sbrk+0x64>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d102      	bne.n	8002c2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c28:	4b11      	ldr	r3, [pc, #68]	@ (8002c70 <_sbrk+0x64>)
 8002c2a:	4a12      	ldr	r2, [pc, #72]	@ (8002c74 <_sbrk+0x68>)
 8002c2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c2e:	4b10      	ldr	r3, [pc, #64]	@ (8002c70 <_sbrk+0x64>)
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4413      	add	r3, r2
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d207      	bcs.n	8002c4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c3c:	f029 fe18 	bl	802c870 <__errno>
 8002c40:	4603      	mov	r3, r0
 8002c42:	220c      	movs	r2, #12
 8002c44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c46:	f04f 33ff 	mov.w	r3, #4294967295
 8002c4a:	e009      	b.n	8002c60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c4c:	4b08      	ldr	r3, [pc, #32]	@ (8002c70 <_sbrk+0x64>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c52:	4b07      	ldr	r3, [pc, #28]	@ (8002c70 <_sbrk+0x64>)
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4413      	add	r3, r2
 8002c5a:	4a05      	ldr	r2, [pc, #20]	@ (8002c70 <_sbrk+0x64>)
 8002c5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3718      	adds	r7, #24
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	24050000 	.word	0x24050000
 8002c6c:	00000400 	.word	0x00000400
 8002c70:	240008c4 	.word	0x240008c4
 8002c74:	24034f50 	.word	0x24034f50

08002c78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002c7c:	4b32      	ldr	r3, [pc, #200]	@ (8002d48 <SystemInit+0xd0>)
 8002c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c82:	4a31      	ldr	r2, [pc, #196]	@ (8002d48 <SystemInit+0xd0>)
 8002c84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002c8c:	4b2f      	ldr	r3, [pc, #188]	@ (8002d4c <SystemInit+0xd4>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 030f 	and.w	r3, r3, #15
 8002c94:	2b06      	cmp	r3, #6
 8002c96:	d807      	bhi.n	8002ca8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002c98:	4b2c      	ldr	r3, [pc, #176]	@ (8002d4c <SystemInit+0xd4>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f023 030f 	bic.w	r3, r3, #15
 8002ca0:	4a2a      	ldr	r2, [pc, #168]	@ (8002d4c <SystemInit+0xd4>)
 8002ca2:	f043 0307 	orr.w	r3, r3, #7
 8002ca6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002ca8:	4b29      	ldr	r3, [pc, #164]	@ (8002d50 <SystemInit+0xd8>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a28      	ldr	r2, [pc, #160]	@ (8002d50 <SystemInit+0xd8>)
 8002cae:	f043 0301 	orr.w	r3, r3, #1
 8002cb2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002cb4:	4b26      	ldr	r3, [pc, #152]	@ (8002d50 <SystemInit+0xd8>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002cba:	4b25      	ldr	r3, [pc, #148]	@ (8002d50 <SystemInit+0xd8>)
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	4924      	ldr	r1, [pc, #144]	@ (8002d50 <SystemInit+0xd8>)
 8002cc0:	4b24      	ldr	r3, [pc, #144]	@ (8002d54 <SystemInit+0xdc>)
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002cc6:	4b21      	ldr	r3, [pc, #132]	@ (8002d4c <SystemInit+0xd4>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0308 	and.w	r3, r3, #8
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d007      	beq.n	8002ce2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002cd2:	4b1e      	ldr	r3, [pc, #120]	@ (8002d4c <SystemInit+0xd4>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f023 030f 	bic.w	r3, r3, #15
 8002cda:	4a1c      	ldr	r2, [pc, #112]	@ (8002d4c <SystemInit+0xd4>)
 8002cdc:	f043 0307 	orr.w	r3, r3, #7
 8002ce0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002ce2:	4b1b      	ldr	r3, [pc, #108]	@ (8002d50 <SystemInit+0xd8>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002ce8:	4b19      	ldr	r3, [pc, #100]	@ (8002d50 <SystemInit+0xd8>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002cee:	4b18      	ldr	r3, [pc, #96]	@ (8002d50 <SystemInit+0xd8>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002cf4:	4b16      	ldr	r3, [pc, #88]	@ (8002d50 <SystemInit+0xd8>)
 8002cf6:	4a18      	ldr	r2, [pc, #96]	@ (8002d58 <SystemInit+0xe0>)
 8002cf8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002cfa:	4b15      	ldr	r3, [pc, #84]	@ (8002d50 <SystemInit+0xd8>)
 8002cfc:	4a17      	ldr	r2, [pc, #92]	@ (8002d5c <SystemInit+0xe4>)
 8002cfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002d00:	4b13      	ldr	r3, [pc, #76]	@ (8002d50 <SystemInit+0xd8>)
 8002d02:	4a17      	ldr	r2, [pc, #92]	@ (8002d60 <SystemInit+0xe8>)
 8002d04:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002d06:	4b12      	ldr	r3, [pc, #72]	@ (8002d50 <SystemInit+0xd8>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002d0c:	4b10      	ldr	r3, [pc, #64]	@ (8002d50 <SystemInit+0xd8>)
 8002d0e:	4a14      	ldr	r2, [pc, #80]	@ (8002d60 <SystemInit+0xe8>)
 8002d10:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002d12:	4b0f      	ldr	r3, [pc, #60]	@ (8002d50 <SystemInit+0xd8>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002d18:	4b0d      	ldr	r3, [pc, #52]	@ (8002d50 <SystemInit+0xd8>)
 8002d1a:	4a11      	ldr	r2, [pc, #68]	@ (8002d60 <SystemInit+0xe8>)
 8002d1c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8002d50 <SystemInit+0xd8>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002d24:	4b0a      	ldr	r3, [pc, #40]	@ (8002d50 <SystemInit+0xd8>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a09      	ldr	r2, [pc, #36]	@ (8002d50 <SystemInit+0xd8>)
 8002d2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d2e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002d30:	4b07      	ldr	r3, [pc, #28]	@ (8002d50 <SystemInit+0xd8>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002d36:	4b0b      	ldr	r3, [pc, #44]	@ (8002d64 <SystemInit+0xec>)
 8002d38:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002d3c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002d3e:	bf00      	nop
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	e000ed00 	.word	0xe000ed00
 8002d4c:	52002000 	.word	0x52002000
 8002d50:	58024400 	.word	0x58024400
 8002d54:	eaf6ed7f 	.word	0xeaf6ed7f
 8002d58:	02020200 	.word	0x02020200
 8002d5c:	01ff0000 	.word	0x01ff0000
 8002d60:	01010280 	.word	0x01010280
 8002d64:	52004000 	.word	0x52004000

08002d68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002d68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002da0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d6c:	f7ff ff84 	bl	8002c78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d70:	480c      	ldr	r0, [pc, #48]	@ (8002da4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d72:	490d      	ldr	r1, [pc, #52]	@ (8002da8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d74:	4a0d      	ldr	r2, [pc, #52]	@ (8002dac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d78:	e002      	b.n	8002d80 <LoopCopyDataInit>

08002d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d7e:	3304      	adds	r3, #4

08002d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d84:	d3f9      	bcc.n	8002d7a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d86:	4a0a      	ldr	r2, [pc, #40]	@ (8002db0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d88:	4c0a      	ldr	r4, [pc, #40]	@ (8002db4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d8c:	e001      	b.n	8002d92 <LoopFillZerobss>

08002d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d90:	3204      	adds	r2, #4

08002d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d94:	d3fb      	bcc.n	8002d8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d96:	f029 fd71 	bl	802c87c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d9a:	f7fd fe3d 	bl	8000a18 <main>
  bx  lr
 8002d9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002da0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002da4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002da8:	24000110 	.word	0x24000110
  ldr r2, =_sidata
 8002dac:	08051a20 	.word	0x08051a20
  ldr r2, =_sbss
 8002db0:	24000320 	.word	0x24000320
  ldr r4, =_ebss
 8002db4:	24034f4c 	.word	0x24034f4c

08002db8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002db8:	e7fe      	b.n	8002db8 <ADC3_IRQHandler>
	...

08002dbc <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d103      	bne.n	8002dd4 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 8002dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	e02c      	b.n	8002e2e <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	891a      	ldrh	r2, [r3, #8]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	68da      	ldr	r2, [r3, #12]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	695a      	ldr	r2, [r3, #20]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a0c      	ldr	r2, [pc, #48]	@ (8002e38 <FT5336_RegisterBusIO+0x7c>)
 8002e08:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a0b      	ldr	r2, [pc, #44]	@ (8002e3c <FT5336_RegisterBusIO+0x80>)
 8002e0e:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d004      	beq.n	8002e28 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4798      	blx	r3
 8002e24:	60f8      	str	r0, [r7, #12]
 8002e26:	e002      	b.n	8002e2e <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 8002e28:	f04f 33ff 	mov.w	r3, #4294967295
 8002e2c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	08003235 	.word	0x08003235
 8002e3c:	08003269 	.word	0x08003269

08002e40 <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	2201      	movs	r2, #1
 8002e54:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	2205      	movs	r2, #5
 8002e5a:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002e62:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8002e6a:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b084      	sub	sp, #16
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 8002e82:	2300      	movs	r3, #0
 8002e84:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10d      	bne.n	8002eac <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f987 	bl	80031aa <FT5336_DisableIT>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  if(ret != FT5336_OK)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d002      	beq.n	8002eb8 <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 8002eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8002eb6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b085      	sub	sp, #20
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d103      	bne.n	8002ee0 <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return ret;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b084      	sub	sp, #16
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f103 0218 	add.w	r2, r3, #24
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	4619      	mov	r1, r3
 8002f06:	4610      	mov	r0, r2
 8002f08:	f000 fa25 	bl	8003356 <ft5336_radian_value>
 8002f0c:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f103 0218 	add.w	r2, r3, #24
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4610      	mov	r0, r2
 8002f1e:	f000 fa2b 	bl	8003378 <ft5336_offset_left_right>
 8002f22:	4602      	mov	r2, r0
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	4413      	add	r3, r2
 8002f28:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f103 0218 	add.w	r2, r3, #24
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	4619      	mov	r1, r3
 8002f38:	4610      	mov	r0, r2
 8002f3a:	f000 fa2e 	bl	800339a <ft5336_offset_up_down>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	4413      	add	r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f103 0218 	add.w	r2, r3, #24
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	4619      	mov	r1, r3
 8002f54:	4610      	mov	r0, r2
 8002f56:	f000 fa31 	bl	80033bc <ft5336_disatnce_left_right>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4413      	add	r3, r2
 8002f60:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f103 0218 	add.w	r2, r3, #24
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4610      	mov	r0, r2
 8002f72:	f000 fa34 	bl	80033de <ft5336_distance_up_down>
 8002f76:	4602      	mov	r2, r0
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f103 0218 	add.w	r2, r3, #24
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4610      	mov	r0, r2
 8002f8e:	f000 fa37 	bl	8003400 <ft5336_distance_zoom>
 8002f92:	4602      	mov	r2, r0
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4413      	add	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d002      	beq.n	8002fa6 <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 8002fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	3318      	adds	r3, #24
 8002fbe:	6839      	ldr	r1, [r7, #0]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f000 fa3f 	bl	8003444 <ft5336_chip_id>
 8002fc6:	4603      	mov	r3, r0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f908 	bl	80031f4 <FT5336_DetectTouch>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f103 0018 	add.w	r0, r3, #24
 8002ff2:	f107 0208 	add.w	r2, r7, #8
 8002ff6:	2304      	movs	r3, #4
 8002ff8:	2103      	movs	r1, #3
 8002ffa:	f000 f94f 	bl	800329c <ft5336_read_reg>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 8003004:	f04f 33ff 	mov.w	r3, #4294967295
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	e00f      	b.n	800302c <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 800300c:	7a3b      	ldrb	r3, [r7, #8]
 800300e:	021b      	lsls	r3, r3, #8
 8003010:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003014:	7a7a      	ldrb	r2, [r7, #9]
 8003016:	431a      	orrs	r2, r3
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 800301c:	7abb      	ldrb	r3, [r7, #10]
 800301e:	021b      	lsls	r3, r3, #8
 8003020:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003024:	7afa      	ldrb	r2, [r7, #11]
 8003026:	431a      	orrs	r2, r3
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800302c:	68fb      	ldr	r3, [r7, #12]
}
 800302e:	4618      	mov	r0, r3
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b08c      	sub	sp, #48	@ 0x30
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
 800303e:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 8003040:	2300      	movs	r3, #0
 8003042:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 f8d5 	bl	80031f4 <FT5336_DetectTouch>
 800304a:	4603      	mov	r3, r0
 800304c:	461a      	mov	r2, r3
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f103 0018 	add.w	r0, r3, #24
 8003058:	f107 0208 	add.w	r2, r7, #8
 800305c:	231e      	movs	r3, #30
 800305e:	2103      	movs	r1, #3
 8003060:	f000 f91c 	bl	800329c <ft5336_read_reg>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 800306a:	f04f 33ff 	mov.w	r3, #4294967295
 800306e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003070:	e077      	b.n	8003162 <FT5336_GetMultiTouchState+0x12c>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8003072:	2300      	movs	r3, #0
 8003074:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003076:	e071      	b.n	800315c <FT5336_GetMultiTouchState+0x126>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8003078:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800307a:	4613      	mov	r3, r2
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	4413      	add	r3, r2
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	3330      	adds	r3, #48	@ 0x30
 8003084:	443b      	add	r3, r7
 8003086:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800308a:	021b      	lsls	r3, r3, #8
 800308c:	f403 6170 	and.w	r1, r3, #3840	@ 0xf00
 8003090:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003092:	4613      	mov	r3, r2
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	4413      	add	r3, r2
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	3301      	adds	r3, #1
 800309c:	3330      	adds	r3, #48	@ 0x30
 800309e:	443b      	add	r3, r7
 80030a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80030a4:	ea41 0203 	orr.w	r2, r1, r3
 80030a8:	6839      	ldr	r1, [r7, #0]
 80030aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	440b      	add	r3, r1
 80030b0:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 80030b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030b4:	4613      	mov	r3, r2
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	4413      	add	r3, r2
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	3302      	adds	r3, #2
 80030be:	3330      	adds	r3, #48	@ 0x30
 80030c0:	443b      	add	r3, r7
 80030c2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80030c6:	021b      	lsls	r3, r3, #8
 80030c8:	f403 6170 	and.w	r1, r3, #3840	@ 0xf00
 80030cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030ce:	4613      	mov	r3, r2
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	4413      	add	r3, r2
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	3303      	adds	r3, #3
 80030d8:	3330      	adds	r3, #48	@ 0x30
 80030da:	443b      	add	r3, r7
 80030dc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80030e0:	4319      	orrs	r1, r3
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030e6:	3206      	adds	r2, #6
 80030e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 80030ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030ee:	4613      	mov	r3, r2
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	4413      	add	r3, r2
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	3330      	adds	r3, #48	@ 0x30
 80030f8:	443b      	add	r3, r7
 80030fa:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80030fe:	099b      	lsrs	r3, r3, #6
 8003100:	b2db      	uxtb	r3, r3
 8003102:	4619      	mov	r1, r3
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003108:	3210      	adds	r2, #16
 800310a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 800310e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003110:	4613      	mov	r3, r2
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	4413      	add	r3, r2
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	3304      	adds	r3, #4
 800311a:	3330      	adds	r3, #48	@ 0x30
 800311c:	443b      	add	r3, r7
 800311e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003122:	4619      	mov	r1, r3
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003128:	330a      	adds	r3, #10
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 8003130:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003132:	4613      	mov	r3, r2
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	4413      	add	r3, r2
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	3305      	adds	r3, #5
 800313c:	3330      	adds	r3, #48	@ 0x30
 800313e:	443b      	add	r3, r7
 8003140:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003144:	091b      	lsrs	r3, r3, #4
 8003146:	b2db      	uxtb	r3, r3
 8003148:	4619      	mov	r1, r3
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800314e:	3314      	adds	r3, #20
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8003156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003158:	3301      	adds	r3, #1
 800315a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800315c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800315e:	2b04      	cmp	r3, #4
 8003160:	d98a      	bls.n	8003078 <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 8003162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003164:	4618      	mov	r0, r3
 8003166:	3730      	adds	r7, #48	@ 0x30
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3318      	adds	r3, #24
 800317a:	6839      	ldr	r1, [r7, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f000 f8bb 	bl	80032f8 <ft5336_gest_id>
 8003182:	4603      	mov	r3, r0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3318      	adds	r3, #24
 8003198:	2101      	movs	r1, #1
 800319a:	4618      	mov	r0, r3
 800319c:	f000 f941 	bl	8003422 <ft5336_g_mode>
 80031a0:	4603      	mov	r3, r0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b082      	sub	sp, #8
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	3318      	adds	r3, #24
 80031b6:	2100      	movs	r1, #0
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 f932 	bl	8003422 <ft5336_g_mode>
 80031be:	4603      	mov	r3, r0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3318      	adds	r3, #24
 8003200:	f107 020b 	add.w	r2, r7, #11
 8003204:	4611      	mov	r1, r2
 8003206:	4618      	mov	r0, r3
 8003208:	f000 f886 	bl	8003318 <ft5336_td_status>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 8003212:	f04f 33ff 	mov.w	r3, #4294967295
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	e007      	b.n	800322a <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 800321a:	7afb      	ldrb	r3, [r7, #11]
 800321c:	2b05      	cmp	r3, #5
 800321e:	d902      	bls.n	8003226 <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 8003220:	2300      	movs	r3, #0
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	e001      	b.n	800322a <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 8003226:	7afb      	ldrb	r3, [r7, #11]
 8003228:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 800322a:	68fb      	ldr	r3, [r7, #12]
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8003234:	b590      	push	{r4, r7, lr}
 8003236:	b087      	sub	sp, #28
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	607a      	str	r2, [r7, #4]
 800323e:	461a      	mov	r2, r3
 8003240:	460b      	mov	r3, r1
 8003242:	72fb      	strb	r3, [r7, #11]
 8003244:	4613      	mov	r3, r2
 8003246:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	691c      	ldr	r4, [r3, #16]
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	8918      	ldrh	r0, [r3, #8]
 8003254:	7afb      	ldrb	r3, [r7, #11]
 8003256:	b299      	uxth	r1, r3
 8003258:	893b      	ldrh	r3, [r7, #8]
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	47a0      	blx	r4
 800325e:	4603      	mov	r3, r0
}
 8003260:	4618      	mov	r0, r3
 8003262:	371c      	adds	r7, #28
 8003264:	46bd      	mov	sp, r7
 8003266:	bd90      	pop	{r4, r7, pc}

08003268 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8003268:	b590      	push	{r4, r7, lr}
 800326a:	b087      	sub	sp, #28
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	607a      	str	r2, [r7, #4]
 8003272:	461a      	mov	r2, r3
 8003274:	460b      	mov	r3, r1
 8003276:	72fb      	strb	r3, [r7, #11]
 8003278:	4613      	mov	r3, r2
 800327a:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	68dc      	ldr	r4, [r3, #12]
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	8918      	ldrh	r0, [r3, #8]
 8003288:	7afb      	ldrb	r3, [r7, #11]
 800328a:	b299      	uxth	r1, r3
 800328c:	893b      	ldrh	r3, [r7, #8]
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	47a0      	blx	r4
 8003292:	4603      	mov	r3, r0
}
 8003294:	4618      	mov	r0, r3
 8003296:	371c      	adds	r7, #28
 8003298:	46bd      	mov	sp, r7
 800329a:	bd90      	pop	{r4, r7, pc}

0800329c <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 800329c:	b590      	push	{r4, r7, lr}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	607a      	str	r2, [r7, #4]
 80032a6:	461a      	mov	r2, r3
 80032a8:	460b      	mov	r3, r1
 80032aa:	72fb      	strb	r3, [r7, #11]
 80032ac:	4613      	mov	r3, r2
 80032ae:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	685c      	ldr	r4, [r3, #4]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6898      	ldr	r0, [r3, #8]
 80032b8:	893b      	ldrh	r3, [r7, #8]
 80032ba:	7af9      	ldrb	r1, [r7, #11]
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	47a0      	blx	r4
 80032c0:	4603      	mov	r3, r0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3714      	adds	r7, #20
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd90      	pop	{r4, r7, pc}

080032ca <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 80032ca:	b590      	push	{r4, r7, lr}
 80032cc:	b085      	sub	sp, #20
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	60f8      	str	r0, [r7, #12]
 80032d2:	607a      	str	r2, [r7, #4]
 80032d4:	461a      	mov	r2, r3
 80032d6:	460b      	mov	r3, r1
 80032d8:	72fb      	strb	r3, [r7, #11]
 80032da:	4613      	mov	r3, r2
 80032dc:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681c      	ldr	r4, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6898      	ldr	r0, [r3, #8]
 80032e6:	893b      	ldrh	r3, [r7, #8]
 80032e8:	7af9      	ldrb	r1, [r7, #11]
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	47a0      	blx	r4
 80032ee:	4603      	mov	r3, r0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd90      	pop	{r4, r7, pc}

080032f8 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 8003302:	2301      	movs	r3, #1
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	2101      	movs	r1, #1
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7ff ffc7 	bl	800329c <ft5336_read_reg>
 800330e:	4603      	mov	r3, r0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3708      	adds	r7, #8
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 8003322:	2301      	movs	r3, #1
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	2102      	movs	r1, #2
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f7ff ffb7 	bl	800329c <ft5336_read_reg>
 800332e:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10a      	bne.n	800334c <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	b2da      	uxtb	r2, r3
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	781a      	ldrb	r2, [r3, #0]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800334c:	68fb      	ldr	r3, [r7, #12]
}
 800334e:	4618      	mov	r0, r3
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b082      	sub	sp, #8
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
 800335e:	460b      	mov	r3, r1
 8003360:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8003362:	1cfa      	adds	r2, r7, #3
 8003364:	2301      	movs	r3, #1
 8003366:	2191      	movs	r1, #145	@ 0x91
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f7ff ffae 	bl	80032ca <ft5336_write_reg>
 800336e:	4603      	mov	r3, r0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3708      	adds	r7, #8
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	460b      	mov	r3, r1
 8003382:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8003384:	1cfa      	adds	r2, r7, #3
 8003386:	2301      	movs	r3, #1
 8003388:	2192      	movs	r1, #146	@ 0x92
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7ff ff9d 	bl	80032ca <ft5336_write_reg>
 8003390:	4603      	mov	r3, r0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b082      	sub	sp, #8
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
 80033a2:	460b      	mov	r3, r1
 80033a4:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 80033a6:	1cfa      	adds	r2, r7, #3
 80033a8:	2301      	movs	r3, #1
 80033aa:	2193      	movs	r1, #147	@ 0x93
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7ff ff8c 	bl	80032ca <ft5336_write_reg>
 80033b2:	4603      	mov	r3, r0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	460b      	mov	r3, r1
 80033c6:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 80033c8:	1cfa      	adds	r2, r7, #3
 80033ca:	2301      	movs	r3, #1
 80033cc:	2194      	movs	r1, #148	@ 0x94
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7ff ff7b 	bl	80032ca <ft5336_write_reg>
 80033d4:	4603      	mov	r3, r0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b082      	sub	sp, #8
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
 80033e6:	460b      	mov	r3, r1
 80033e8:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 80033ea:	1cfa      	adds	r2, r7, #3
 80033ec:	2301      	movs	r3, #1
 80033ee:	2195      	movs	r1, #149	@ 0x95
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7ff ff6a 	bl	80032ca <ft5336_write_reg>
 80033f6:	4603      	mov	r3, r0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3708      	adds	r7, #8
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	460b      	mov	r3, r1
 800340a:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 800340c:	1cfa      	adds	r2, r7, #3
 800340e:	2301      	movs	r3, #1
 8003410:	2196      	movs	r1, #150	@ 0x96
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7ff ff59 	bl	80032ca <ft5336_write_reg>
 8003418:	4603      	mov	r3, r0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b082      	sub	sp, #8
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
 800342a:	460b      	mov	r3, r1
 800342c:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 800342e:	1cfa      	adds	r2, r7, #3
 8003430:	2301      	movs	r3, #1
 8003432:	21a4      	movs	r1, #164	@ 0xa4
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f7ff ff48 	bl	80032ca <ft5336_write_reg>
 800343a:	4603      	mov	r3, r0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 800344e:	2301      	movs	r3, #1
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	21a8      	movs	r1, #168	@ 0xa8
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7ff ff21 	bl	800329c <ft5336_read_reg>
 800345a:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d107      	bne.n	8003472 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	781a      	ldrb	r2, [r3, #0]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	781a      	ldrb	r2, [r3, #0]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8003472:	68fb      	ldr	r3, [r7, #12]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <MX25LM51245G_GetFlashInfo>:
  * @brief  Get Flash information
  * @param  pInfo pointer to information structure
  * @retval error status
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800348a:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003492:	605a      	str	r2, [r3, #4]
  pInfo->EraseSectorsNumber     = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SECTOR_64K);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800349a:	609a      	str	r2, [r3, #8]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80034a2:	60da      	str	r2, [r3, #12]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80034aa:	611a      	str	r2, [r3, #16]
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80034b2:	615a      	str	r2, [r3, #20]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80034ba:	619a      	str	r2, [r3, #24]
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80034c2:	61da      	str	r2, [r3, #28]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80034ca:	621a      	str	r2, [r3, #32]

  return MX25LM51245G_OK;
 80034cc:	2300      	movs	r3, #0
};
 80034ce:	4618      	mov	r0, r3
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <MX25LM51245G_AutoPollingMemReady>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b09c      	sub	sp, #112	@ 0x70
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
 80034e2:	460b      	mov	r3, r1
 80034e4:	70fb      	strb	r3, [r7, #3]
 80034e6:	4613      	mov	r3, r2
 80034e8:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef  s_command = {0};
 80034ea:	f107 0320 	add.w	r3, r7, #32
 80034ee:	2250      	movs	r2, #80	@ 0x50
 80034f0:	2100      	movs	r1, #0
 80034f2:	4618      	mov	r0, r3
 80034f4:	f029 f8c4 	bl	802c680 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 80034f8:	f107 030c 	add.w	r3, r7, #12
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	605a      	str	r2, [r3, #4]
 8003502:	609a      	str	r2, [r3, #8]
 8003504:	60da      	str	r2, [r3, #12]
 8003506:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8003508:	78fb      	ldrb	r3, [r7, #3]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d105      	bne.n	800351a <MX25LM51245G_AutoPollingMemReady+0x40>
 800350e:	78bb      	ldrb	r3, [r7, #2]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d102      	bne.n	800351a <MX25LM51245G_AutoPollingMemReady+0x40>
  {
    return MX25LM51245G_ERROR;
 8003514:	f04f 33ff 	mov.w	r3, #4294967295
 8003518:	e088      	b.n	800362c <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800351a:	2300      	movs	r3, #0
 800351c:	623b      	str	r3, [r7, #32]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800351e:	2300      	movs	r3, #0
 8003520:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003522:	78fb      	ldrb	r3, [r7, #3]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <MX25LM51245G_AutoPollingMemReady+0x52>
 8003528:	2301      	movs	r3, #1
 800352a:	e000      	b.n	800352e <MX25LM51245G_AutoPollingMemReady+0x54>
 800352c:	2304      	movs	r3, #4
 800352e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003530:	78bb      	ldrb	r3, [r7, #2]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d101      	bne.n	800353a <MX25LM51245G_AutoPollingMemReady+0x60>
 8003536:	2308      	movs	r3, #8
 8003538:	e000      	b.n	800353c <MX25LM51245G_AutoPollingMemReady+0x62>
 800353a:	2300      	movs	r3, #0
 800353c:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800353e:	78fb      	ldrb	r3, [r7, #3]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <MX25LM51245G_AutoPollingMemReady+0x6e>
 8003544:	2300      	movs	r3, #0
 8003546:	e000      	b.n	800354a <MX25LM51245G_AutoPollingMemReady+0x70>
 8003548:	2310      	movs	r3, #16
 800354a:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 800354c:	78fb      	ldrb	r3, [r7, #3]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <MX25LM51245G_AutoPollingMemReady+0x7c>
 8003552:	2305      	movs	r3, #5
 8003554:	e001      	b.n	800355a <MX25LM51245G_AutoPollingMemReady+0x80>
 8003556:	f240 53fa 	movw	r3, #1530	@ 0x5fa
 800355a:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 800355c:	78fb      	ldrb	r3, [r7, #3]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <MX25LM51245G_AutoPollingMemReady+0x8c>
 8003562:	2300      	movs	r3, #0
 8003564:	e001      	b.n	800356a <MX25LM51245G_AutoPollingMemReady+0x90>
 8003566:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800356a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800356c:	78bb      	ldrb	r3, [r7, #2]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d102      	bne.n	8003578 <MX25LM51245G_AutoPollingMemReady+0x9e>
 8003572:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003576:	e000      	b.n	800357a <MX25LM51245G_AutoPollingMemReady+0xa0>
 8003578:	2300      	movs	r3, #0
 800357a:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800357c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003580:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.Address            = 0U;
 8003582:	2300      	movs	r3, #0
 8003584:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8003586:	2300      	movs	r3, #0
 8003588:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800358a:	78fb      	ldrb	r3, [r7, #3]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d102      	bne.n	8003596 <MX25LM51245G_AutoPollingMemReady+0xbc>
 8003590:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003594:	e001      	b.n	800359a <MX25LM51245G_AutoPollingMemReady+0xc0>
 8003596:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800359a:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800359c:	78bb      	ldrb	r3, [r7, #2]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d102      	bne.n	80035a8 <MX25LM51245G_AutoPollingMemReady+0xce>
 80035a2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80035a6:	e000      	b.n	80035aa <MX25LM51245G_AutoPollingMemReady+0xd0>
 80035a8:	2300      	movs	r3, #0
 80035aa:	663b      	str	r3, [r7, #96]	@ 0x60
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80035ac:	78fb      	ldrb	r3, [r7, #3]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <MX25LM51245G_AutoPollingMemReady+0xdc>
 80035b2:	2300      	movs	r3, #0
 80035b4:	e000      	b.n	80035b8 <MX25LM51245G_AutoPollingMemReady+0xde>
 80035b6:	2305      	movs	r3, #5
 80035b8:	667b      	str	r3, [r7, #100]	@ 0x64
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80035ba:	78bb      	ldrb	r3, [r7, #2]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d101      	bne.n	80035c4 <MX25LM51245G_AutoPollingMemReady+0xea>
 80035c0:	2302      	movs	r3, #2
 80035c2:	e000      	b.n	80035c6 <MX25LM51245G_AutoPollingMemReady+0xec>
 80035c4:	2301      	movs	r3, #1
 80035c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 80035c8:	78bb      	ldrb	r3, [r7, #2]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d102      	bne.n	80035d4 <MX25LM51245G_AutoPollingMemReady+0xfa>
 80035ce:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80035d2:	e000      	b.n	80035d6 <MX25LM51245G_AutoPollingMemReady+0xfc>
 80035d4:	2300      	movs	r3, #0
 80035d6:	66bb      	str	r3, [r7, #104]	@ 0x68
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80035d8:	2300      	movs	r3, #0
 80035da:	66fb      	str	r3, [r7, #108]	@ 0x6c

  s_config.Match         = 0U;
 80035dc:	2300      	movs	r3, #0
 80035de:	60fb      	str	r3, [r7, #12]
  s_config.Mask          = MX25LM51245G_SR_WIP;
 80035e0:	2301      	movs	r3, #1
 80035e2:	613b      	str	r3, [r7, #16]
  s_config.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 80035e4:	2300      	movs	r3, #0
 80035e6:	617b      	str	r3, [r7, #20]
  s_config.Interval      = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 80035e8:	2310      	movs	r3, #16
 80035ea:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80035ec:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80035f0:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80035f2:	f107 0320 	add.w	r3, r7, #32
 80035f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035fa:	4619      	mov	r1, r3
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f006 f80e 	bl	800961e <HAL_OSPI_Command>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d002      	beq.n	800360e <MX25LM51245G_AutoPollingMemReady+0x134>
  {
    return MX25LM51245G_ERROR;
 8003608:	f04f 33ff 	mov.w	r3, #4294967295
 800360c:	e00e      	b.n	800362c <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800360e:	f107 030c 	add.w	r3, r7, #12
 8003612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003616:	4619      	mov	r1, r3
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f006 fa43 	bl	8009aa4 <HAL_OSPI_AutoPolling>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d002      	beq.n	800362a <MX25LM51245G_AutoPollingMemReady+0x150>
  {
    return MX25LM51245G_ERROR;
 8003624:	f04f 33ff 	mov.w	r3, #4294967295
 8003628:	e000      	b.n	800362c <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  return MX25LM51245G_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3770      	adds	r7, #112	@ 0x70
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <MX25LM51245G_EnableSTRMemoryMappedMode>:
  * @param  Mode Interface mode
  * @param  AddressSize Address size
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableSTRMemoryMappedMode(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_AddressSize_t AddressSize)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b098      	sub	sp, #96	@ 0x60
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	460b      	mov	r3, r1
 800363e:	70fb      	strb	r3, [r7, #3]
 8003640:	4613      	mov	r3, r2
 8003642:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef      s_command = {0};
 8003644:	f107 0310 	add.w	r3, r7, #16
 8003648:	2250      	movs	r2, #80	@ 0x50
 800364a:	2100      	movs	r1, #0
 800364c:	4618      	mov	r0, r3
 800364e:	f029 f817 	bl	802c680 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8003652:	f107 0308 	add.w	r3, r7, #8
 8003656:	2200      	movs	r2, #0
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	605a      	str	r2, [r3, #4]

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 800365c:	78fb      	ldrb	r3, [r7, #3]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d105      	bne.n	800366e <MX25LM51245G_EnableSTRMemoryMappedMode+0x3a>
 8003662:	78bb      	ldrb	r3, [r7, #2]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d102      	bne.n	800366e <MX25LM51245G_EnableSTRMemoryMappedMode+0x3a>
  {
    return MX25LM51245G_ERROR;
 8003668:	f04f 33ff 	mov.w	r3, #4294967295
 800366c:	e088      	b.n	8003780 <MX25LM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 800366e:	2301      	movs	r3, #1
 8003670:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8003672:	2300      	movs	r3, #0
 8003674:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003676:	78fb      	ldrb	r3, [r7, #3]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <MX25LM51245G_EnableSTRMemoryMappedMode+0x4c>
 800367c:	2301      	movs	r3, #1
 800367e:	e000      	b.n	8003682 <MX25LM51245G_EnableSTRMemoryMappedMode+0x4e>
 8003680:	2304      	movs	r3, #4
 8003682:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003684:	2300      	movs	r3, #0
 8003686:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003688:	78fb      	ldrb	r3, [r7, #3]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <MX25LM51245G_EnableSTRMemoryMappedMode+0x5e>
 800368e:	2300      	movs	r3, #0
 8003690:	e000      	b.n	8003694 <MX25LM51245G_EnableSTRMemoryMappedMode+0x60>
 8003692:	2310      	movs	r3, #16
 8003694:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8003696:	78fb      	ldrb	r3, [r7, #3]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d106      	bne.n	80036aa <MX25LM51245G_EnableSTRMemoryMappedMode+0x76>
 800369c:	78bb      	ldrb	r3, [r7, #2]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <MX25LM51245G_EnableSTRMemoryMappedMode+0x72>
 80036a2:	230b      	movs	r3, #11
 80036a4:	e003      	b.n	80036ae <MX25LM51245G_EnableSTRMemoryMappedMode+0x7a>
 80036a6:	230c      	movs	r3, #12
 80036a8:	e001      	b.n	80036ae <MX25LM51245G_EnableSTRMemoryMappedMode+0x7a>
 80036aa:	f64e 4313 	movw	r3, #60435	@ 0xec13
 80036ae:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80036b0:	78fb      	ldrb	r3, [r7, #3]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d102      	bne.n	80036bc <MX25LM51245G_EnableSTRMemoryMappedMode+0x88>
 80036b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80036ba:	e001      	b.n	80036c0 <MX25LM51245G_EnableSTRMemoryMappedMode+0x8c>
 80036bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80036c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 80036c2:	2300      	movs	r3, #0
 80036c4:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 80036c6:	78bb      	ldrb	r3, [r7, #2]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d102      	bne.n	80036d2 <MX25LM51245G_EnableSTRMemoryMappedMode+0x9e>
 80036cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80036d0:	e001      	b.n	80036d6 <MX25LM51245G_EnableSTRMemoryMappedMode+0xa2>
 80036d2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80036d6:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80036d8:	2300      	movs	r3, #0
 80036da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80036dc:	78fb      	ldrb	r3, [r7, #3]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d102      	bne.n	80036e8 <MX25LM51245G_EnableSTRMemoryMappedMode+0xb4>
 80036e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036e6:	e001      	b.n	80036ec <MX25LM51245G_EnableSTRMemoryMappedMode+0xb8>
 80036e8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80036ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 80036ee:	2300      	movs	r3, #0
 80036f0:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 80036f2:	78fb      	ldrb	r3, [r7, #3]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <MX25LM51245G_EnableSTRMemoryMappedMode+0xc8>
 80036f8:	2308      	movs	r3, #8
 80036fa:	e000      	b.n	80036fe <MX25LM51245G_EnableSTRMemoryMappedMode+0xca>
 80036fc:	2306      	movs	r3, #6
 80036fe:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8003700:	2300      	movs	r3, #0
 8003702:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8003704:	2300      	movs	r3, #0
 8003706:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* Send the read command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003708:	f107 0310 	add.w	r3, r7, #16
 800370c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003710:	4619      	mov	r1, r3
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f005 ff83 	bl	800961e <HAL_OSPI_Command>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d002      	beq.n	8003724 <MX25LM51245G_EnableSTRMemoryMappedMode+0xf0>
  {
    return MX25LM51245G_ERROR;
 800371e:	f04f 33ff 	mov.w	r3, #4294967295
 8003722:	e02d      	b.n	8003780 <MX25LM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 8003724:	2302      	movs	r3, #2
 8003726:	613b      	str	r3, [r7, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8003728:	78fb      	ldrb	r3, [r7, #3]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d106      	bne.n	800373c <MX25LM51245G_EnableSTRMemoryMappedMode+0x108>
 800372e:	78bb      	ldrb	r3, [r7, #2]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <MX25LM51245G_EnableSTRMemoryMappedMode+0x104>
 8003734:	2302      	movs	r3, #2
 8003736:	e003      	b.n	8003740 <MX25LM51245G_EnableSTRMemoryMappedMode+0x10c>
 8003738:	2312      	movs	r3, #18
 800373a:	e001      	b.n	8003740 <MX25LM51245G_EnableSTRMemoryMappedMode+0x10c>
 800373c:	f241 23ed 	movw	r3, #4845	@ 0x12ed
 8003740:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles        = 0U;
 8003742:	2300      	movs	r3, #0
 8003744:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Send the write command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003746:	f107 0310 	add.w	r3, r7, #16
 800374a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800374e:	4619      	mov	r1, r3
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f005 ff64 	bl	800961e <HAL_OSPI_Command>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d002      	beq.n	8003762 <MX25LM51245G_EnableSTRMemoryMappedMode+0x12e>
  {
    return MX25LM51245G_ERROR;
 800375c:	f04f 33ff 	mov.w	r3, #4294967295
 8003760:	e00e      	b.n	8003780 <MX25LM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8003762:	2300      	movs	r3, #0
 8003764:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8003766:	f107 0308 	add.w	r3, r7, #8
 800376a:	4619      	mov	r1, r3
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f006 fa21 	bl	8009bb4 <HAL_OSPI_MemoryMapped>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d002      	beq.n	800377e <MX25LM51245G_EnableSTRMemoryMappedMode+0x14a>
  {
    return MX25LM51245G_ERROR;
 8003778:	f04f 33ff 	mov.w	r3, #4294967295
 800377c:	e000      	b.n	8003780 <MX25LM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  return MX25LM51245G_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3760      	adds	r7, #96	@ 0x60
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <MX25LM51245G_EnableDTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableDTRMemoryMappedMode(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b098      	sub	sp, #96	@ 0x60
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	460b      	mov	r3, r1
 8003792:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  OSPI_RegularCmdTypeDef      s_command = {0};
 8003794:	f107 0310 	add.w	r3, r7, #16
 8003798:	2250      	movs	r2, #80	@ 0x50
 800379a:	2100      	movs	r1, #0
 800379c:	4618      	mov	r0, r3
 800379e:	f028 ff6f 	bl	802c680 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 80037a2:	f107 0308 	add.w	r3, r7, #8
 80037a6:	2200      	movs	r2, #0
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	605a      	str	r2, [r3, #4]

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 80037ac:	2301      	movs	r3, #1
 80037ae:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80037b0:	2300      	movs	r3, #0
 80037b2:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 80037b4:	2304      	movs	r3, #4
 80037b6:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
 80037b8:	2308      	movs	r3, #8
 80037ba:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 80037bc:	2310      	movs	r3, #16
 80037be:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 80037c0:	f64e 6311 	movw	r3, #60945	@ 0xee11
 80037c4:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 80037c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80037ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 80037cc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80037d0:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80037d2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80037d6:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80037d8:	2300      	movs	r3, #0
 80037da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 80037dc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80037e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 80037e2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80037e6:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 80037e8:	2306      	movs	r3, #6
 80037ea:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 80037ec:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80037f0:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80037f2:	2300      	movs	r3, #0
 80037f4:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80037f6:	f107 0310 	add.w	r3, r7, #16
 80037fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037fe:	4619      	mov	r1, r3
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f005 ff0c 	bl	800961e <HAL_OSPI_Command>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d002      	beq.n	8003812 <MX25LM51245G_EnableDTRMemoryMappedMode+0x8a>
  {
    return MX25LM51245G_ERROR;
 800380c:	f04f 33ff 	mov.w	r3, #4294967295
 8003810:	e025      	b.n	800385e <MX25LM51245G_EnableDTRMemoryMappedMode+0xd6>
  }

  /* Initialize the program command */
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 8003812:	2302      	movs	r3, #2
 8003814:	613b      	str	r3, [r7, #16]
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8003816:	f241 23ed 	movw	r3, #4845	@ 0x12ed
 800381a:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles   = 0U;
 800381c:	2300      	movs	r3, #0
 800381e:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DQSMode       = HAL_OSPI_DQS_DISABLE;
 8003820:	2300      	movs	r3, #0
 8003822:	65bb      	str	r3, [r7, #88]	@ 0x58

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003824:	f107 0310 	add.w	r3, r7, #16
 8003828:	f241 3288 	movw	r2, #5000	@ 0x1388
 800382c:	4619      	mov	r1, r3
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f005 fef5 	bl	800961e <HAL_OSPI_Command>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d002      	beq.n	8003840 <MX25LM51245G_EnableDTRMemoryMappedMode+0xb8>
  {
    return MX25LM51245G_ERROR;
 800383a:	f04f 33ff 	mov.w	r3, #4294967295
 800383e:	e00e      	b.n	800385e <MX25LM51245G_EnableDTRMemoryMappedMode+0xd6>
  }
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8003840:	2300      	movs	r3, #0
 8003842:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8003844:	f107 0308 	add.w	r3, r7, #8
 8003848:	4619      	mov	r1, r3
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f006 f9b2 	bl	8009bb4 <HAL_OSPI_MemoryMapped>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d002      	beq.n	800385c <MX25LM51245G_EnableDTRMemoryMappedMode+0xd4>
  {
    return MX25LM51245G_ERROR;
 8003856:	f04f 33ff 	mov.w	r3, #4294967295
 800385a:	e000      	b.n	800385e <MX25LM51245G_EnableDTRMemoryMappedMode+0xd6>
  }

  return MX25LM51245G_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3760      	adds	r7, #96	@ 0x60
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b09c      	sub	sp, #112	@ 0x70
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
 800386e:	460b      	mov	r3, r1
 8003870:	70fb      	strb	r3, [r7, #3]
 8003872:	4613      	mov	r3, r2
 8003874:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef     s_command = {0};
 8003876:	f107 0320 	add.w	r3, r7, #32
 800387a:	2250      	movs	r2, #80	@ 0x50
 800387c:	2100      	movs	r1, #0
 800387e:	4618      	mov	r0, r3
 8003880:	f028 fefe 	bl	802c680 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8003884:	f107 030c 	add.w	r3, r7, #12
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	605a      	str	r2, [r3, #4]
 800388e:	609a      	str	r2, [r3, #8]
 8003890:	60da      	str	r2, [r3, #12]
 8003892:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8003894:	78fb      	ldrb	r3, [r7, #3]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d105      	bne.n	80038a6 <MX25LM51245G_WriteEnable+0x40>
 800389a:	78bb      	ldrb	r3, [r7, #2]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d102      	bne.n	80038a6 <MX25LM51245G_WriteEnable+0x40>
  {
    return MX25LM51245G_ERROR;
 80038a0:	f04f 33ff 	mov.w	r3, #4294967295
 80038a4:	e0a6      	b.n	80039f4 <MX25LM51245G_WriteEnable+0x18e>
  }

  /* Initialize the write enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80038a6:	2300      	movs	r3, #0
 80038a8:	623b      	str	r3, [r7, #32]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80038aa:	2300      	movs	r3, #0
 80038ac:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80038ae:	78fb      	ldrb	r3, [r7, #3]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <MX25LM51245G_WriteEnable+0x52>
 80038b4:	2301      	movs	r3, #1
 80038b6:	e000      	b.n	80038ba <MX25LM51245G_WriteEnable+0x54>
 80038b8:	2304      	movs	r3, #4
 80038ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80038bc:	78bb      	ldrb	r3, [r7, #2]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d101      	bne.n	80038c6 <MX25LM51245G_WriteEnable+0x60>
 80038c2:	2308      	movs	r3, #8
 80038c4:	e000      	b.n	80038c8 <MX25LM51245G_WriteEnable+0x62>
 80038c6:	2300      	movs	r3, #0
 80038c8:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80038ca:	78fb      	ldrb	r3, [r7, #3]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <MX25LM51245G_WriteEnable+0x6e>
 80038d0:	2300      	movs	r3, #0
 80038d2:	e000      	b.n	80038d6 <MX25LM51245G_WriteEnable+0x70>
 80038d4:	2310      	movs	r3, #16
 80038d6:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 80038d8:	78fb      	ldrb	r3, [r7, #3]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <MX25LM51245G_WriteEnable+0x7c>
 80038de:	2306      	movs	r3, #6
 80038e0:	e001      	b.n	80038e6 <MX25LM51245G_WriteEnable+0x80>
 80038e2:	f240 63f9 	movw	r3, #1785	@ 0x6f9
 80038e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80038e8:	2300      	movs	r3, #0
 80038ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80038ec:	2300      	movs	r3, #0
 80038ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 80038f0:	2300      	movs	r3, #0
 80038f2:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.DummyCycles        = 0U;
 80038f4:	2300      	movs	r3, #0
 80038f6:	667b      	str	r3, [r7, #100]	@ 0x64
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80038f8:	2300      	movs	r3, #0
 80038fa:	66bb      	str	r3, [r7, #104]	@ 0x68
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80038fc:	2300      	movs	r3, #0
 80038fe:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003900:	f107 0320 	add.w	r3, r7, #32
 8003904:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003908:	4619      	mov	r1, r3
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f005 fe87 	bl	800961e <HAL_OSPI_Command>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <MX25LM51245G_WriteEnable+0xb6>
  {
    return MX25LM51245G_ERROR;
 8003916:	f04f 33ff 	mov.w	r3, #4294967295
 800391a:	e06b      	b.n	80039f4 <MX25LM51245G_WriteEnable+0x18e>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 800391c:	78fb      	ldrb	r3, [r7, #3]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <MX25LM51245G_WriteEnable+0xc0>
 8003922:	2305      	movs	r3, #5
 8003924:	e001      	b.n	800392a <MX25LM51245G_WriteEnable+0xc4>
 8003926:	f240 53fa 	movw	r3, #1530	@ 0x5fa
 800392a:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 800392c:	78fb      	ldrb	r3, [r7, #3]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <MX25LM51245G_WriteEnable+0xd0>
 8003932:	2300      	movs	r3, #0
 8003934:	e001      	b.n	800393a <MX25LM51245G_WriteEnable+0xd4>
 8003936:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800393a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800393c:	78bb      	ldrb	r3, [r7, #2]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d102      	bne.n	8003948 <MX25LM51245G_WriteEnable+0xe2>
 8003942:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003946:	e000      	b.n	800394a <MX25LM51245G_WriteEnable+0xe4>
 8003948:	2300      	movs	r3, #0
 800394a:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.AddressSize    = HAL_OSPI_ADDRESS_32_BITS;
 800394c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003950:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.Address        = 0U;
 8003952:	2300      	movs	r3, #0
 8003954:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003956:	78fb      	ldrb	r3, [r7, #3]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d102      	bne.n	8003962 <MX25LM51245G_WriteEnable+0xfc>
 800395c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003960:	e001      	b.n	8003966 <MX25LM51245G_WriteEnable+0x100>
 8003962:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003966:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8003968:	78bb      	ldrb	r3, [r7, #2]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d102      	bne.n	8003974 <MX25LM51245G_WriteEnable+0x10e>
 800396e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003972:	e000      	b.n	8003976 <MX25LM51245G_WriteEnable+0x110>
 8003974:	2300      	movs	r3, #0
 8003976:	663b      	str	r3, [r7, #96]	@ 0x60
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8003978:	78fb      	ldrb	r3, [r7, #3]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <MX25LM51245G_WriteEnable+0x11c>
 800397e:	2300      	movs	r3, #0
 8003980:	e000      	b.n	8003984 <MX25LM51245G_WriteEnable+0x11e>
 8003982:	2305      	movs	r3, #5
 8003984:	667b      	str	r3, [r7, #100]	@ 0x64
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8003986:	78bb      	ldrb	r3, [r7, #2]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d101      	bne.n	8003990 <MX25LM51245G_WriteEnable+0x12a>
 800398c:	2302      	movs	r3, #2
 800398e:	e000      	b.n	8003992 <MX25LM51245G_WriteEnable+0x12c>
 8003990:	2301      	movs	r3, #1
 8003992:	65fb      	str	r3, [r7, #92]	@ 0x5c
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8003994:	78bb      	ldrb	r3, [r7, #2]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d102      	bne.n	80039a0 <MX25LM51245G_WriteEnable+0x13a>
 800399a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800399e:	e000      	b.n	80039a2 <MX25LM51245G_WriteEnable+0x13c>
 80039a0:	2300      	movs	r3, #0
 80039a2:	66bb      	str	r3, [r7, #104]	@ 0x68

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80039a4:	f107 0320 	add.w	r3, r7, #32
 80039a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ac:	4619      	mov	r1, r3
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f005 fe35 	bl	800961e <HAL_OSPI_Command>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d002      	beq.n	80039c0 <MX25LM51245G_WriteEnable+0x15a>
  {
    return MX25LM51245G_ERROR;
 80039ba:	f04f 33ff 	mov.w	r3, #4294967295
 80039be:	e019      	b.n	80039f4 <MX25LM51245G_WriteEnable+0x18e>
  }

  s_config.Match           = 2U;
 80039c0:	2302      	movs	r3, #2
 80039c2:	60fb      	str	r3, [r7, #12]
  s_config.Mask            = 2U;
 80039c4:	2302      	movs	r3, #2
 80039c6:	613b      	str	r3, [r7, #16]
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 80039c8:	2300      	movs	r3, #0
 80039ca:	617b      	str	r3, [r7, #20]
  s_config.Interval        = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 80039cc:	2310      	movs	r3, #16
 80039ce:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80039d0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80039d4:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80039d6:	f107 030c 	add.w	r3, r7, #12
 80039da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039de:	4619      	mov	r1, r3
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f006 f85f 	bl	8009aa4 <HAL_OSPI_AutoPolling>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d002      	beq.n	80039f2 <MX25LM51245G_WriteEnable+0x18c>
  {
    return MX25LM51245G_ERROR;
 80039ec:	f04f 33ff 	mov.w	r3, #4294967295
 80039f0:	e000      	b.n	80039f4 <MX25LM51245G_WriteEnable+0x18e>
  }

  return MX25LM51245G_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3770      	adds	r7, #112	@ 0x70
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <MX25LM51245G_WriteCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b098      	sub	sp, #96	@ 0x60
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	607b      	str	r3, [r7, #4]
 8003a06:	460b      	mov	r3, r1
 8003a08:	72fb      	strb	r3, [r7, #11]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 8003a0e:	f107 0310 	add.w	r3, r7, #16
 8003a12:	2250      	movs	r2, #80	@ 0x50
 8003a14:	2100      	movs	r1, #0
 8003a16:	4618      	mov	r0, r3
 8003a18:	f028 fe32 	bl	802c680 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8003a1c:	7afb      	ldrb	r3, [r7, #11]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d105      	bne.n	8003a2e <MX25LM51245G_WriteCfg2Register+0x32>
 8003a22:	7abb      	ldrb	r3, [r7, #10]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d102      	bne.n	8003a2e <MX25LM51245G_WriteCfg2Register+0x32>
  {
    return MX25LM51245G_ERROR;
 8003a28:	f04f 33ff 	mov.w	r3, #4294967295
 8003a2c:	e077      	b.n	8003b1e <MX25LM51245G_WriteCfg2Register+0x122>
  }

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8003a32:	2300      	movs	r3, #0
 8003a34:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003a36:	7afb      	ldrb	r3, [r7, #11]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d101      	bne.n	8003a40 <MX25LM51245G_WriteCfg2Register+0x44>
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e000      	b.n	8003a42 <MX25LM51245G_WriteCfg2Register+0x46>
 8003a40:	2304      	movs	r3, #4
 8003a42:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003a44:	7abb      	ldrb	r3, [r7, #10]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d101      	bne.n	8003a4e <MX25LM51245G_WriteCfg2Register+0x52>
 8003a4a:	2308      	movs	r3, #8
 8003a4c:	e000      	b.n	8003a50 <MX25LM51245G_WriteCfg2Register+0x54>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003a52:	7afb      	ldrb	r3, [r7, #11]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d101      	bne.n	8003a5c <MX25LM51245G_WriteCfg2Register+0x60>
 8003a58:	2300      	movs	r3, #0
 8003a5a:	e000      	b.n	8003a5e <MX25LM51245G_WriteCfg2Register+0x62>
 8003a5c:	2310      	movs	r3, #16
 8003a5e:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 8003a60:	7afb      	ldrb	r3, [r7, #11]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <MX25LM51245G_WriteCfg2Register+0x6e>
 8003a66:	2372      	movs	r3, #114	@ 0x72
 8003a68:	e001      	b.n	8003a6e <MX25LM51245G_WriteCfg2Register+0x72>
 8003a6a:	f247 238d 	movw	r3, #29325	@ 0x728d
 8003a6e:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8003a70:	7afb      	ldrb	r3, [r7, #11]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d102      	bne.n	8003a7c <MX25LM51245G_WriteCfg2Register+0x80>
 8003a76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a7a:	e001      	b.n	8003a80 <MX25LM51245G_WriteCfg2Register+0x84>
 8003a7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8003a82:	7abb      	ldrb	r3, [r7, #10]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d102      	bne.n	8003a8e <MX25LM51245G_WriteCfg2Register+0x92>
 8003a88:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003a8c:	e000      	b.n	8003a90 <MX25LM51245G_WriteCfg2Register+0x94>
 8003a8e:	2300      	movs	r3, #0
 8003a90:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8003a92:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003a96:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.Address            = WriteAddr;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003aa0:	7afb      	ldrb	r3, [r7, #11]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d102      	bne.n	8003aac <MX25LM51245G_WriteCfg2Register+0xb0>
 8003aa6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003aaa:	e001      	b.n	8003ab0 <MX25LM51245G_WriteCfg2Register+0xb4>
 8003aac:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003ab0:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8003ab2:	7abb      	ldrb	r3, [r7, #10]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d102      	bne.n	8003abe <MX25LM51245G_WriteCfg2Register+0xc2>
 8003ab8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003abc:	e000      	b.n	8003ac0 <MX25LM51245G_WriteCfg2Register+0xc4>
 8003abe:	2300      	movs	r3, #0
 8003ac0:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DummyCycles        = 0U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 8003ac6:	7afb      	ldrb	r3, [r7, #11]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d006      	beq.n	8003ada <MX25LM51245G_WriteCfg2Register+0xde>
 8003acc:	7abb      	ldrb	r3, [r7, #10]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d101      	bne.n	8003ad6 <MX25LM51245G_WriteCfg2Register+0xda>
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	e002      	b.n	8003adc <MX25LM51245G_WriteCfg2Register+0xe0>
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e000      	b.n	8003adc <MX25LM51245G_WriteCfg2Register+0xe0>
 8003ada:	2301      	movs	r3, #1
 8003adc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003ae6:	f107 0310 	add.w	r3, r7, #16
 8003aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aee:	4619      	mov	r1, r3
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f005 fd94 	bl	800961e <HAL_OSPI_Command>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d002      	beq.n	8003b02 <MX25LM51245G_WriteCfg2Register+0x106>
  {
    return MX25LM51245G_ERROR;
 8003afc:	f04f 33ff 	mov.w	r3, #4294967295
 8003b00:	e00d      	b.n	8003b1e <MX25LM51245G_WriteCfg2Register+0x122>
  }

  if (HAL_OSPI_Transmit(Ctx, &Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003b02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b06:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f005 feb4 	bl	8009878 <HAL_OSPI_Transmit>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <MX25LM51245G_WriteCfg2Register+0x120>
  {
    return MX25LM51245G_ERROR;
 8003b16:	f04f 33ff 	mov.w	r3, #4294967295
 8003b1a:	e000      	b.n	8003b1e <MX25LM51245G_WriteCfg2Register+0x122>
  }

  return MX25LM51245G_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3760      	adds	r7, #96	@ 0x60
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <MX25LM51245G_ReadCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b098      	sub	sp, #96	@ 0x60
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	60f8      	str	r0, [r7, #12]
 8003b2e:	607b      	str	r3, [r7, #4]
 8003b30:	460b      	mov	r3, r1
 8003b32:	72fb      	strb	r3, [r7, #11]
 8003b34:	4613      	mov	r3, r2
 8003b36:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 8003b38:	f107 0310 	add.w	r3, r7, #16
 8003b3c:	2250      	movs	r2, #80	@ 0x50
 8003b3e:	2100      	movs	r1, #0
 8003b40:	4618      	mov	r0, r3
 8003b42:	f028 fd9d 	bl	802c680 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8003b46:	7afb      	ldrb	r3, [r7, #11]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d105      	bne.n	8003b58 <MX25LM51245G_ReadCfg2Register+0x32>
 8003b4c:	7abb      	ldrb	r3, [r7, #10]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d102      	bne.n	8003b58 <MX25LM51245G_ReadCfg2Register+0x32>
  {
    return MX25LM51245G_ERROR;
 8003b52:	f04f 33ff 	mov.w	r3, #4294967295
 8003b56:	e07c      	b.n	8003c52 <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003b60:	7afb      	ldrb	r3, [r7, #11]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <MX25LM51245G_ReadCfg2Register+0x44>
 8003b66:	2301      	movs	r3, #1
 8003b68:	e000      	b.n	8003b6c <MX25LM51245G_ReadCfg2Register+0x46>
 8003b6a:	2304      	movs	r3, #4
 8003b6c:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003b6e:	7abb      	ldrb	r3, [r7, #10]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d101      	bne.n	8003b78 <MX25LM51245G_ReadCfg2Register+0x52>
 8003b74:	2308      	movs	r3, #8
 8003b76:	e000      	b.n	8003b7a <MX25LM51245G_ReadCfg2Register+0x54>
 8003b78:	2300      	movs	r3, #0
 8003b7a:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003b7c:	7afb      	ldrb	r3, [r7, #11]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <MX25LM51245G_ReadCfg2Register+0x60>
 8003b82:	2300      	movs	r3, #0
 8003b84:	e000      	b.n	8003b88 <MX25LM51245G_ReadCfg2Register+0x62>
 8003b86:	2310      	movs	r3, #16
 8003b88:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 8003b8a:	7afb      	ldrb	r3, [r7, #11]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <MX25LM51245G_ReadCfg2Register+0x6e>
 8003b90:	2371      	movs	r3, #113	@ 0x71
 8003b92:	e001      	b.n	8003b98 <MX25LM51245G_ReadCfg2Register+0x72>
 8003b94:	f247 138e 	movw	r3, #29070	@ 0x718e
 8003b98:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8003b9a:	7afb      	ldrb	r3, [r7, #11]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d102      	bne.n	8003ba6 <MX25LM51245G_ReadCfg2Register+0x80>
 8003ba0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ba4:	e001      	b.n	8003baa <MX25LM51245G_ReadCfg2Register+0x84>
 8003ba6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8003bac:	7abb      	ldrb	r3, [r7, #10]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d102      	bne.n	8003bb8 <MX25LM51245G_ReadCfg2Register+0x92>
 8003bb2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003bb6:	e000      	b.n	8003bba <MX25LM51245G_ReadCfg2Register+0x94>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8003bbc:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003bc0:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.Address            = ReadAddr;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003bca:	7afb      	ldrb	r3, [r7, #11]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d102      	bne.n	8003bd6 <MX25LM51245G_ReadCfg2Register+0xb0>
 8003bd0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003bd4:	e001      	b.n	8003bda <MX25LM51245G_ReadCfg2Register+0xb4>
 8003bd6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003bda:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8003bdc:	7abb      	ldrb	r3, [r7, #10]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d102      	bne.n	8003be8 <MX25LM51245G_ReadCfg2Register+0xc2>
 8003be2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003be6:	e000      	b.n	8003bea <MX25LM51245G_ReadCfg2Register+0xc4>
 8003be8:	2300      	movs	r3, #0
 8003bea:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8003bec:	7afb      	ldrb	r3, [r7, #11]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <MX25LM51245G_ReadCfg2Register+0xd0>
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	e000      	b.n	8003bf8 <MX25LM51245G_ReadCfg2Register+0xd2>
 8003bf6:	2305      	movs	r3, #5
 8003bf8:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8003bfa:	7abb      	ldrb	r3, [r7, #10]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d101      	bne.n	8003c04 <MX25LM51245G_ReadCfg2Register+0xde>
 8003c00:	2302      	movs	r3, #2
 8003c02:	e000      	b.n	8003c06 <MX25LM51245G_ReadCfg2Register+0xe0>
 8003c04:	2301      	movs	r3, #1
 8003c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8003c08:	7abb      	ldrb	r3, [r7, #10]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d102      	bne.n	8003c14 <MX25LM51245G_ReadCfg2Register+0xee>
 8003c0e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003c12:	e000      	b.n	8003c16 <MX25LM51245G_ReadCfg2Register+0xf0>
 8003c14:	2300      	movs	r3, #0
 8003c16:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c1c:	f107 0310 	add.w	r3, r7, #16
 8003c20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c24:	4619      	mov	r1, r3
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f005 fcf9 	bl	800961e <HAL_OSPI_Command>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d002      	beq.n	8003c38 <MX25LM51245G_ReadCfg2Register+0x112>
  {
    return MX25LM51245G_ERROR;
 8003c32:	f04f 33ff 	mov.w	r3, #4294967295
 8003c36:	e00c      	b.n	8003c52 <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c3c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f005 fe8d 	bl	800995e <HAL_OSPI_Receive>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d002      	beq.n	8003c50 <MX25LM51245G_ReadCfg2Register+0x12a>
  {
    return MX25LM51245G_ERROR;
 8003c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c4e:	e000      	b.n	8003c52 <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  return MX25LM51245G_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3760      	adds	r7, #96	@ 0x60
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b096      	sub	sp, #88	@ 0x58
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
 8003c62:	460b      	mov	r3, r1
 8003c64:	70fb      	strb	r3, [r7, #3]
 8003c66:	4613      	mov	r3, r2
 8003c68:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef s_command = {0};
 8003c6a:	f107 0308 	add.w	r3, r7, #8
 8003c6e:	2250      	movs	r2, #80	@ 0x50
 8003c70:	2100      	movs	r1, #0
 8003c72:	4618      	mov	r0, r3
 8003c74:	f028 fd04 	bl	802c680 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8003c78:	78fb      	ldrb	r3, [r7, #3]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d105      	bne.n	8003c8a <MX25LM51245G_ResetEnable+0x30>
 8003c7e:	78bb      	ldrb	r3, [r7, #2]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d102      	bne.n	8003c8a <MX25LM51245G_ResetEnable+0x30>
  {
    return MX25LM51245G_ERROR;
 8003c84:	f04f 33ff 	mov.w	r3, #4294967295
 8003c88:	e03b      	b.n	8003d02 <MX25LM51245G_ResetEnable+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	60bb      	str	r3, [r7, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003c92:	78fb      	ldrb	r3, [r7, #3]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d101      	bne.n	8003c9c <MX25LM51245G_ResetEnable+0x42>
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e000      	b.n	8003c9e <MX25LM51245G_ResetEnable+0x44>
 8003c9c:	2304      	movs	r3, #4
 8003c9e:	617b      	str	r3, [r7, #20]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003ca0:	78bb      	ldrb	r3, [r7, #2]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d101      	bne.n	8003caa <MX25LM51245G_ResetEnable+0x50>
 8003ca6:	2308      	movs	r3, #8
 8003ca8:	e000      	b.n	8003cac <MX25LM51245G_ResetEnable+0x52>
 8003caa:	2300      	movs	r3, #0
 8003cac:	61fb      	str	r3, [r7, #28]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003cae:	78fb      	ldrb	r3, [r7, #3]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <MX25LM51245G_ResetEnable+0x5e>
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	e000      	b.n	8003cba <MX25LM51245G_ResetEnable+0x60>
 8003cb8:	2310      	movs	r3, #16
 8003cba:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 8003cbc:	78fb      	ldrb	r3, [r7, #3]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <MX25LM51245G_ResetEnable+0x6c>
 8003cc2:	2366      	movs	r3, #102	@ 0x66
 8003cc4:	e001      	b.n	8003cca <MX25LM51245G_ResetEnable+0x70>
 8003cc6:	f246 6399 	movw	r3, #26265	@ 0x6699
 8003cca:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DummyCycles        = 0U;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003ce4:	f107 0308 	add.w	r3, r7, #8
 8003ce8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cec:	4619      	mov	r1, r3
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f005 fc95 	bl	800961e <HAL_OSPI_Command>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d002      	beq.n	8003d00 <MX25LM51245G_ResetEnable+0xa6>
  {
    return MX25LM51245G_ERROR;
 8003cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8003cfe:	e000      	b.n	8003d02 <MX25LM51245G_ResetEnable+0xa8>
  }

  return MX25LM51245G_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3758      	adds	r7, #88	@ 0x58
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b096      	sub	sp, #88	@ 0x58
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
 8003d12:	460b      	mov	r3, r1
 8003d14:	70fb      	strb	r3, [r7, #3]
 8003d16:	4613      	mov	r3, r2
 8003d18:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef s_command = {0};
 8003d1a:	f107 0308 	add.w	r3, r7, #8
 8003d1e:	2250      	movs	r2, #80	@ 0x50
 8003d20:	2100      	movs	r1, #0
 8003d22:	4618      	mov	r0, r3
 8003d24:	f028 fcac 	bl	802c680 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8003d28:	78fb      	ldrb	r3, [r7, #3]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d105      	bne.n	8003d3a <MX25LM51245G_ResetMemory+0x30>
 8003d2e:	78bb      	ldrb	r3, [r7, #2]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d102      	bne.n	8003d3a <MX25LM51245G_ResetMemory+0x30>
  {
    return MX25LM51245G_ERROR;
 8003d34:	f04f 33ff 	mov.w	r3, #4294967295
 8003d38:	e03b      	b.n	8003db2 <MX25LM51245G_ResetMemory+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60bb      	str	r3, [r7, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003d42:	78fb      	ldrb	r3, [r7, #3]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <MX25LM51245G_ResetMemory+0x42>
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e000      	b.n	8003d4e <MX25LM51245G_ResetMemory+0x44>
 8003d4c:	2304      	movs	r3, #4
 8003d4e:	617b      	str	r3, [r7, #20]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003d50:	78bb      	ldrb	r3, [r7, #2]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d101      	bne.n	8003d5a <MX25LM51245G_ResetMemory+0x50>
 8003d56:	2308      	movs	r3, #8
 8003d58:	e000      	b.n	8003d5c <MX25LM51245G_ResetMemory+0x52>
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	61fb      	str	r3, [r7, #28]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003d5e:	78fb      	ldrb	r3, [r7, #3]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d101      	bne.n	8003d68 <MX25LM51245G_ResetMemory+0x5e>
 8003d64:	2300      	movs	r3, #0
 8003d66:	e000      	b.n	8003d6a <MX25LM51245G_ResetMemory+0x60>
 8003d68:	2310      	movs	r3, #16
 8003d6a:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 8003d6c:	78fb      	ldrb	r3, [r7, #3]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <MX25LM51245G_ResetMemory+0x6c>
 8003d72:	2399      	movs	r3, #153	@ 0x99
 8003d74:	e001      	b.n	8003d7a <MX25LM51245G_ResetMemory+0x70>
 8003d76:	f649 1366 	movw	r3, #39270	@ 0x9966
 8003d7a:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8003d80:	2300      	movs	r3, #0
 8003d82:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 8003d84:	2300      	movs	r3, #0
 8003d86:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DummyCycles        = 0U;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8003d90:	2300      	movs	r3, #0
 8003d92:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d94:	f107 0308 	add.w	r3, r7, #8
 8003d98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f005 fc3d 	bl	800961e <HAL_OSPI_Command>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d002      	beq.n	8003db0 <MX25LM51245G_ResetMemory+0xa6>
  {
    return MX25LM51245G_ERROR;
 8003daa:	f04f 33ff 	mov.w	r3, #4294967295
 8003dae:	e000      	b.n	8003db2 <MX25LM51245G_ResetMemory+0xa8>
  }

  return MX25LM51245G_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3758      	adds	r7, #88	@ 0x58
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
	...

08003dbc <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 8003dc6:	4b16      	ldr	r3, [pc, #88]	@ (8003e20 <BSP_I2C4_Init+0x64>)
 8003dc8:	4a16      	ldr	r2, [pc, #88]	@ (8003e24 <BSP_I2C4_Init+0x68>)
 8003dca:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter++ == 0U)
 8003dcc:	4b16      	ldr	r3, [pc, #88]	@ (8003e28 <BSP_I2C4_Init+0x6c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	1c5a      	adds	r2, r3, #1
 8003dd2:	4915      	ldr	r1, [pc, #84]	@ (8003e28 <BSP_I2C4_Init+0x6c>)
 8003dd4:	600a      	str	r2, [r1, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d11d      	bne.n	8003e16 <BSP_I2C4_Init+0x5a>
  {
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8003dda:	4811      	ldr	r0, [pc, #68]	@ (8003e20 <BSP_I2C4_Init+0x64>)
 8003ddc:	f004 fbd4 	bl	8008588 <HAL_I2C_GetState>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d117      	bne.n	8003e16 <BSP_I2C4_Init+0x5a>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 8003de6:	480e      	ldr	r0, [pc, #56]	@ (8003e20 <BSP_I2C4_Init+0x64>)
 8003de8:	f000 fb66 	bl	80044b8 <I2C4_MspInit>
        {
          ret = BSP_ERROR_MSP_FAILURE;
        }
      }
#endif
      if (ret == BSP_ERROR_NONE)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d111      	bne.n	8003e16 <BSP_I2C4_Init+0x5a>
      {
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8003df2:	f007 feaf 	bl	800bb54 <HAL_RCC_GetPCLK2Freq>
 8003df6:	4603      	mov	r3, r0
 8003df8:	490c      	ldr	r1, [pc, #48]	@ (8003e2c <BSP_I2C4_Init+0x70>)
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 f8e6 	bl	8003fcc <I2C_GetTiming>
 8003e00:	4603      	mov	r3, r0
 8003e02:	4619      	mov	r1, r3
 8003e04:	4806      	ldr	r0, [pc, #24]	@ (8003e20 <BSP_I2C4_Init+0x64>)
 8003e06:	f000 f83b 	bl	8003e80 <MX_I2C4_Init>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d002      	beq.n	8003e16 <BSP_I2C4_Init+0x5a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8003e10:	f06f 0307 	mvn.w	r3, #7
 8003e14:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }

  return ret;
 8003e16:	687b      	ldr	r3, [r7, #4]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3708      	adds	r7, #8
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	240008c8 	.word	0x240008c8
 8003e24:	58001c00 	.word	0x58001c00
 8003e28:	2400091c 	.word	0x2400091c
 8003e2c:	00061a80 	.word	0x00061a80

08003e30 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval None
  */
int32_t BSP_I2C4_DeInit(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 8003e36:	2300      	movs	r3, #0
 8003e38:	607b      	str	r3, [r7, #4]

  if (I2c4InitCounter > 0U)
 8003e3a:	4b0f      	ldr	r3, [pc, #60]	@ (8003e78 <BSP_I2C4_DeInit+0x48>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d014      	beq.n	8003e6c <BSP_I2C4_DeInit+0x3c>
  {
    if (--I2c4InitCounter == 0U)
 8003e42:	4b0d      	ldr	r3, [pc, #52]	@ (8003e78 <BSP_I2C4_DeInit+0x48>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	4a0b      	ldr	r2, [pc, #44]	@ (8003e78 <BSP_I2C4_DeInit+0x48>)
 8003e4a:	6013      	str	r3, [r2, #0]
 8003e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003e78 <BSP_I2C4_DeInit+0x48>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10b      	bne.n	8003e6c <BSP_I2C4_DeInit+0x3c>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      I2C4_MspDeInit(&hbus_i2c4);
 8003e54:	4809      	ldr	r0, [pc, #36]	@ (8003e7c <BSP_I2C4_DeInit+0x4c>)
 8003e56:	f000 fb95 	bl	8004584 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

      /* Init the I2C */
      if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8003e5a:	4808      	ldr	r0, [pc, #32]	@ (8003e7c <BSP_I2C4_DeInit+0x4c>)
 8003e5c:	f004 f936 	bl	80080cc <HAL_I2C_DeInit>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d002      	beq.n	8003e6c <BSP_I2C4_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8003e66:	f06f 0307 	mvn.w	r3, #7
 8003e6a:	607b      	str	r3, [r7, #4]
      }
    }
  }

  return ret;
 8003e6c:	687b      	ldr	r3, [r7, #4]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	2400091c 	.word	0x2400091c
 8003e7c:	240008c8 	.word	0x240008c8

08003e80 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f004 f868 	bl	8007f94 <HAL_I2C_Init>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d002      	beq.n	8003ed0 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	73fb      	strb	r3, [r7, #15]
 8003ece:	e014      	b.n	8003efa <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOGFILTER_ENABLE : I2C_ANALOGFILTER_DISABLE;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8003ed4:	68b9      	ldr	r1, [r7, #8]
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f004 fe32 	bl	8008b40 <HAL_I2CEx_ConfigAnalogFilter>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d002      	beq.n	8003ee8 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	73fb      	strb	r3, [r7, #15]
 8003ee6:	e008      	b.n	8003efa <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8003ee8:	2100      	movs	r1, #0
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f004 fe73 	bl	8008bd6 <HAL_I2CEx_ConfigDigitalFilter>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8003efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b088      	sub	sp, #32
 8003f08:	af02      	add	r7, sp, #8
 8003f0a:	60ba      	str	r2, [r7, #8]
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	4603      	mov	r3, r0
 8003f10:	81fb      	strh	r3, [r7, #14]
 8003f12:	460b      	mov	r3, r1
 8003f14:	81bb      	strh	r3, [r7, #12]
 8003f16:	4613      	mov	r3, r2
 8003f18:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8003f1a:	89b9      	ldrh	r1, [r7, #12]
 8003f1c:	89f8      	ldrh	r0, [r7, #14]
 8003f1e:	88fb      	ldrh	r3, [r7, #6]
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f000 fb51 	bl	80045cc <I2C4_WriteReg>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d102      	bne.n	8003f36 <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8003f30:	2300      	movs	r3, #0
 8003f32:	617b      	str	r3, [r7, #20]
 8003f34:	e00c      	b.n	8003f50 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8003f36:	4809      	ldr	r0, [pc, #36]	@ (8003f5c <BSP_I2C4_WriteReg+0x58>)
 8003f38:	f004 fb34 	bl	80085a4 <HAL_I2C_GetError>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	d103      	bne.n	8003f4a <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003f42:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8003f46:	617b      	str	r3, [r7, #20]
 8003f48:	e002      	b.n	8003f50 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003f4a:	f06f 0303 	mvn.w	r3, #3
 8003f4e:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8003f50:	697b      	ldr	r3, [r7, #20]
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3718      	adds	r7, #24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	240008c8 	.word	0x240008c8

08003f60 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b088      	sub	sp, #32
 8003f64:	af02      	add	r7, sp, #8
 8003f66:	60ba      	str	r2, [r7, #8]
 8003f68:	461a      	mov	r2, r3
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	81fb      	strh	r3, [r7, #14]
 8003f6e:	460b      	mov	r3, r1
 8003f70:	81bb      	strh	r3, [r7, #12]
 8003f72:	4613      	mov	r3, r2
 8003f74:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8003f76:	89b9      	ldrh	r1, [r7, #12]
 8003f78:	89f8      	ldrh	r0, [r7, #14]
 8003f7a:	88fb      	ldrh	r3, [r7, #6]
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f000 fb49 	bl	8004618 <I2C4_ReadReg>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d102      	bne.n	8003f92 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	617b      	str	r3, [r7, #20]
 8003f90:	e00c      	b.n	8003fac <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8003f92:	4809      	ldr	r0, [pc, #36]	@ (8003fb8 <BSP_I2C4_ReadReg+0x58>)
 8003f94:	f004 fb06 	bl	80085a4 <HAL_I2C_GetError>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	d103      	bne.n	8003fa6 <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003f9e:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8003fa2:	617b      	str	r3, [r7, #20]
 8003fa4:	e002      	b.n	8003fac <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003fa6:	f06f 0303 	mvn.w	r3, #3
 8003faa:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8003fac:	697b      	ldr	r3, [r7, #20]
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3718      	adds	r7, #24
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	240008c8 	.word	0x240008c8

08003fbc <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8003fc0:	f001 fcee 	bl	80059a0 <HAL_GetTick>
 8003fc4:	4603      	mov	r3, r0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	bd80      	pop	{r7, pc}
	...

08003fcc <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d06b      	beq.n	80040b8 <I2C_GetTiming+0xec>
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d068      	beq.n	80040b8 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	613b      	str	r3, [r7, #16]
 8003fea:	e060      	b.n	80040ae <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8003fec:	4a35      	ldr	r2, [pc, #212]	@ (80040c4 <I2C_GetTiming+0xf8>)
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	212c      	movs	r1, #44	@ 0x2c
 8003ff2:	fb01 f303 	mul.w	r3, r1, r3
 8003ff6:	4413      	add	r3, r2
 8003ff8:	3304      	adds	r3, #4
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d352      	bcc.n	80040a8 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8004002:	4a30      	ldr	r2, [pc, #192]	@ (80040c4 <I2C_GetTiming+0xf8>)
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	212c      	movs	r1, #44	@ 0x2c
 8004008:	fb01 f303 	mul.w	r3, r1, r3
 800400c:	4413      	add	r3, r2
 800400e:	3308      	adds	r3, #8
 8004010:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	429a      	cmp	r2, r3
 8004016:	d847      	bhi.n	80040a8 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8004018:	6939      	ldr	r1, [r7, #16]
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f856 	bl	80040cc <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8004020:	6939      	ldr	r1, [r7, #16]
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f940 	bl	80042a8 <I2C_Compute_SCLL_SCLH>
 8004028:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2b7f      	cmp	r3, #127	@ 0x7f
 800402e:	d842      	bhi.n	80040b6 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8004030:	4925      	ldr	r1, [pc, #148]	@ (80040c8 <I2C_GetTiming+0xfc>)
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	4613      	mov	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4413      	add	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	440b      	add	r3, r1
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8004042:	4821      	ldr	r0, [pc, #132]	@ (80040c8 <I2C_GetTiming+0xfc>)
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	4613      	mov	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4413      	add	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4403      	add	r3, r0
 8004050:	3304      	adds	r3, #4
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	051b      	lsls	r3, r3, #20
 8004056:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800405a:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800405c:	481a      	ldr	r0, [pc, #104]	@ (80040c8 <I2C_GetTiming+0xfc>)
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	4613      	mov	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4403      	add	r3, r0
 800406a:	3308      	adds	r3, #8
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	041b      	lsls	r3, r3, #16
 8004070:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8004074:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8004076:	4814      	ldr	r0, [pc, #80]	@ (80040c8 <I2C_GetTiming+0xfc>)
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	4613      	mov	r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4413      	add	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	4403      	add	r3, r0
 8004084:	330c      	adds	r3, #12
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	021b      	lsls	r3, r3, #8
 800408a:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800408c:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800408e:	480e      	ldr	r0, [pc, #56]	@ (80040c8 <I2C_GetTiming+0xfc>)
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	4613      	mov	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4413      	add	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	4403      	add	r3, r0
 800409c:	3310      	adds	r3, #16
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80040a2:	430b      	orrs	r3, r1
 80040a4:	617b      	str	r3, [r7, #20]
        }
        break;
 80040a6:	e006      	b.n	80040b6 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	3301      	adds	r3, #1
 80040ac:	613b      	str	r3, [r7, #16]
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d99b      	bls.n	8003fec <I2C_GetTiming+0x20>
 80040b4:	e000      	b.n	80040b8 <I2C_GetTiming+0xec>
        break;
 80040b6:	bf00      	nop
      }
    }
  }

  return ret;
 80040b8:	697b      	ldr	r3, [r7, #20]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3718      	adds	r7, #24
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	0802dfbc 	.word	0x0802dfbc
 80040c8:	24000920 	.word	0x24000920

080040cc <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b08f      	sub	sp, #60	@ 0x3c
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 80040d6:	2310      	movs	r3, #16
 80040d8:	637b      	str	r3, [r7, #52]	@ 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	085a      	lsrs	r2, r3, #1
 80040de:	4b6e      	ldr	r3, [pc, #440]	@ (8004298 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 80040e0:	4413      	add	r3, r2
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80040e8:	61fb      	str	r3, [r7, #28]

  tafdel_min = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MIN : 0U;
 80040ea:	2332      	movs	r3, #50	@ 0x32
 80040ec:	61bb      	str	r3, [r7, #24]
  tafdel_max = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MAX : 0U;
 80040ee:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80040f2:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80040f4:	4a69      	ldr	r2, [pc, #420]	@ (800429c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	212c      	movs	r1, #44	@ 0x2c
 80040fa:	fb01 f303 	mul.w	r3, r1, r3
 80040fe:	4413      	add	r3, r2
 8004100:	3324      	adds	r3, #36	@ 0x24
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4618      	mov	r0, r3
 8004106:	4a65      	ldr	r2, [pc, #404]	@ (800429c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	212c      	movs	r1, #44	@ 0x2c
 800410c:	fb01 f303 	mul.w	r3, r1, r3
 8004110:	4413      	add	r3, r2
 8004112:	330c      	adds	r3, #12
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8004118:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800411a:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800411c:	495f      	ldr	r1, [pc, #380]	@ (800429c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	202c      	movs	r0, #44	@ 0x2c
 8004122:	fb00 f303 	mul.w	r3, r0, r3
 8004126:	440b      	add	r3, r1
 8004128:	3328      	adds	r3, #40	@ 0x28
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	3303      	adds	r3, #3
 800412e:	69f9      	ldr	r1, [r7, #28]
 8004130:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8004138:	4a58      	ldr	r2, [pc, #352]	@ (800429c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	212c      	movs	r1, #44	@ 0x2c
 800413e:	fb01 f303 	mul.w	r3, r1, r3
 8004142:	4413      	add	r3, r2
 8004144:	3310      	adds	r3, #16
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4618      	mov	r0, r3
 800414a:	4a54      	ldr	r2, [pc, #336]	@ (800429c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	212c      	movs	r1, #44	@ 0x2c
 8004150:	fb01 f303 	mul.w	r3, r1, r3
 8004154:	4413      	add	r3, r2
 8004156:	3320      	adds	r3, #32
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800415c:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800415e:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8004160:	494e      	ldr	r1, [pc, #312]	@ (800429c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	202c      	movs	r0, #44	@ 0x2c
 8004166:	fb00 f303 	mul.w	r3, r0, r3
 800416a:	440b      	add	r3, r1
 800416c:	3328      	adds	r3, #40	@ 0x28
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3304      	adds	r3, #4
 8004172:	69f9      	ldr	r1, [r7, #28]
 8004174:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 800417c:	4a47      	ldr	r2, [pc, #284]	@ (800429c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	212c      	movs	r1, #44	@ 0x2c
 8004182:	fb01 f303 	mul.w	r3, r1, r3
 8004186:	4413      	add	r3, r2
 8004188:	3320      	adds	r3, #32
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4618      	mov	r0, r3
 800418e:	4a43      	ldr	r2, [pc, #268]	@ (800429c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	212c      	movs	r1, #44	@ 0x2c
 8004194:	fb01 f303 	mul.w	r3, r1, r3
 8004198:	4413      	add	r3, r2
 800419a:	3314      	adds	r3, #20
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4403      	add	r3, r0
 80041a0:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 80041a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	dc01      	bgt.n	80041ac <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 80041a8:	2300      	movs	r3, #0
 80041aa:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
 80041ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	dc01      	bgt.n	80041b6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 80041b2:	2300      	movs	r3, #0
 80041b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80041b6:	2300      	movs	r3, #0
 80041b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041ba:	e062      	b.n	8004282 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80041bc:	2300      	movs	r3, #0
 80041be:	627b      	str	r3, [r7, #36]	@ 0x24
 80041c0:	e059      	b.n	8004276 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80041c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c4:	3301      	adds	r3, #1
 80041c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80041c8:	3201      	adds	r2, #1
 80041ca:	fb03 f202 	mul.w	r2, r3, r2
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	fb02 f303 	mul.w	r3, r2, r3
 80041d4:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d348      	bcc.n	8004270 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80041de:	2300      	movs	r3, #0
 80041e0:	623b      	str	r3, [r7, #32]
 80041e2:	e042      	b.n	800426a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 80041e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041e6:	3301      	adds	r3, #1
 80041e8:	6a3a      	ldr	r2, [r7, #32]
 80041ea:	fb03 f202 	mul.w	r2, r3, r2
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	fb02 f303 	mul.w	r3, r2, r3
 80041f4:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 80041f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f8:	68ba      	ldr	r2, [r7, #8]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d332      	bcc.n	8004264 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 80041fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	429a      	cmp	r2, r3
 8004204:	d82e      	bhi.n	8004264 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 8004206:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800420a:	429a      	cmp	r2, r3
 800420c:	d02a      	beq.n	8004264 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800420e:	4b24      	ldr	r3, [pc, #144]	@ (80042a0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	4924      	ldr	r1, [pc, #144]	@ (80042a4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8004214:	4613      	mov	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4413      	add	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	440b      	add	r3, r1
 800421e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004220:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8004222:	4b1f      	ldr	r3, [pc, #124]	@ (80042a0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	491f      	ldr	r1, [pc, #124]	@ (80042a4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8004228:	4613      	mov	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4413      	add	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	440b      	add	r3, r1
 8004232:	3304      	adds	r3, #4
 8004234:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004236:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8004238:	4b19      	ldr	r3, [pc, #100]	@ (80042a0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	4919      	ldr	r1, [pc, #100]	@ (80042a4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800423e:	4613      	mov	r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	4413      	add	r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	440b      	add	r3, r1
 8004248:	3308      	adds	r3, #8
 800424a:	6a3a      	ldr	r2, [r7, #32]
 800424c:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800424e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004250:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
 8004252:	4b13      	ldr	r3, [pc, #76]	@ (80042a0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	3301      	adds	r3, #1
 8004258:	4a11      	ldr	r2, [pc, #68]	@ (80042a0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800425a:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800425c:	4b10      	ldr	r3, [pc, #64]	@ (80042a0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2b7f      	cmp	r3, #127	@ 0x7f
 8004262:	d812      	bhi.n	800428a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8004264:	6a3b      	ldr	r3, [r7, #32]
 8004266:	3301      	adds	r3, #1
 8004268:	623b      	str	r3, [r7, #32]
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	2b0f      	cmp	r3, #15
 800426e:	d9b9      	bls.n	80041e4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8004270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004272:	3301      	adds	r3, #1
 8004274:	627b      	str	r3, [r7, #36]	@ 0x24
 8004276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004278:	2b0f      	cmp	r3, #15
 800427a:	d9a2      	bls.n	80041c2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800427c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800427e:	3301      	adds	r3, #1
 8004280:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004284:	2b0f      	cmp	r3, #15
 8004286:	d999      	bls.n	80041bc <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8004288:	e000      	b.n	800428c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800428a:	bf00      	nop
          }
        }
      }
    }
  }
}
 800428c:	373c      	adds	r7, #60	@ 0x3c
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	3b9aca00 	.word	0x3b9aca00
 800429c:	0802dfbc 	.word	0x0802dfbc
 80042a0:	24001320 	.word	0x24001320
 80042a4:	24000920 	.word	0x24000920

080042a8 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b093      	sub	sp, #76	@ 0x4c
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 80042b2:	f04f 33ff 	mov.w	r3, #4294967295
 80042b6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	085a      	lsrs	r2, r3, #1
 80042bc:	4b7a      	ldr	r3, [pc, #488]	@ (80044a8 <I2C_Compute_SCLL_SCLH+0x200>)
 80042be:	4413      	add	r3, r2
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80042c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 80042c8:	4a78      	ldr	r2, [pc, #480]	@ (80044ac <I2C_Compute_SCLL_SCLH+0x204>)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	212c      	movs	r1, #44	@ 0x2c
 80042ce:	fb01 f303 	mul.w	r3, r1, r3
 80042d2:	4413      	add	r3, r2
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	085a      	lsrs	r2, r3, #1
 80042d8:	4b73      	ldr	r3, [pc, #460]	@ (80044a8 <I2C_Compute_SCLL_SCLH+0x200>)
 80042da:	4413      	add	r3, r2
 80042dc:	4973      	ldr	r1, [pc, #460]	@ (80044ac <I2C_Compute_SCLL_SCLH+0x204>)
 80042de:	683a      	ldr	r2, [r7, #0]
 80042e0:	202c      	movs	r0, #44	@ 0x2c
 80042e2:	fb00 f202 	mul.w	r2, r0, r2
 80042e6:	440a      	add	r2, r1
 80042e8:	6812      	ldr	r2, [r2, #0]
 80042ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80042ee:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MIN : 0U;
 80042f0:	2332      	movs	r3, #50	@ 0x32
 80042f2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 80042f4:	4a6d      	ldr	r2, [pc, #436]	@ (80044ac <I2C_Compute_SCLL_SCLH+0x204>)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	212c      	movs	r1, #44	@ 0x2c
 80042fa:	fb01 f303 	mul.w	r3, r1, r3
 80042fe:	4413      	add	r3, r2
 8004300:	3328      	adds	r3, #40	@ 0x28
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004306:	fb02 f303 	mul.w	r3, r2, r3
 800430a:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 800430c:	4a67      	ldr	r2, [pc, #412]	@ (80044ac <I2C_Compute_SCLL_SCLH+0x204>)
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	212c      	movs	r1, #44	@ 0x2c
 8004312:	fb01 f303 	mul.w	r3, r1, r3
 8004316:	4413      	add	r3, r2
 8004318:	3304      	adds	r3, #4
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a62      	ldr	r2, [pc, #392]	@ (80044a8 <I2C_Compute_SCLL_SCLH+0x200>)
 800431e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004322:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8004324:	4a61      	ldr	r2, [pc, #388]	@ (80044ac <I2C_Compute_SCLL_SCLH+0x204>)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	212c      	movs	r1, #44	@ 0x2c
 800432a:	fb01 f303 	mul.w	r3, r1, r3
 800432e:	4413      	add	r3, r2
 8004330:	3308      	adds	r3, #8
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a5c      	ldr	r2, [pc, #368]	@ (80044a8 <I2C_Compute_SCLL_SCLH+0x200>)
 8004336:	fbb2 f3f3 	udiv	r3, r2, r3
 800433a:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 800433c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800433e:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8004340:	2300      	movs	r3, #0
 8004342:	637b      	str	r3, [r7, #52]	@ 0x34
 8004344:	e0a3      	b.n	800448e <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8004346:	495a      	ldr	r1, [pc, #360]	@ (80044b0 <I2C_Compute_SCLL_SCLH+0x208>)
 8004348:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800434a:	4613      	mov	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	4413      	add	r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	440b      	add	r3, r1
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	1c5a      	adds	r2, r3, #1
 8004358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800435a:	fb02 f303 	mul.w	r3, r2, r3
 800435e:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8004360:	2300      	movs	r3, #0
 8004362:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004364:	e08c      	b.n	8004480 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8004366:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004368:	6a3b      	ldr	r3, [r7, #32]
 800436a:	441a      	add	r2, r3
 800436c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800436e:	3301      	adds	r3, #1
 8004370:	6979      	ldr	r1, [r7, #20]
 8004372:	fb03 f101 	mul.w	r1, r3, r1
 8004376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	440b      	add	r3, r1
 800437c:	4413      	add	r3, r2
 800437e:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8004380:	4a4a      	ldr	r2, [pc, #296]	@ (80044ac <I2C_Compute_SCLL_SCLH+0x204>)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	212c      	movs	r1, #44	@ 0x2c
 8004386:	fb01 f303 	mul.w	r3, r1, r3
 800438a:	4413      	add	r3, r2
 800438c:	3318      	adds	r3, #24
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	429a      	cmp	r2, r3
 8004394:	d971      	bls.n	800447a <I2C_Compute_SCLL_SCLH+0x1d2>
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439a:	1ad2      	subs	r2, r2, r3
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	089b      	lsrs	r3, r3, #2
 80043a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d268      	bcs.n	800447a <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80043a8:	2300      	movs	r3, #0
 80043aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043ac:	e062      	b.n	8004474 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 80043ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043b0:	6a3b      	ldr	r3, [r7, #32]
 80043b2:	441a      	add	r2, r3
 80043b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043b6:	3301      	adds	r3, #1
 80043b8:	6979      	ldr	r1, [r7, #20]
 80043ba:	fb03 f101 	mul.w	r1, r3, r1
 80043be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	440b      	add	r3, r1
 80043c4:	4413      	add	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	441a      	add	r2, r3
 80043ce:	4937      	ldr	r1, [pc, #220]	@ (80044ac <I2C_Compute_SCLL_SCLH+0x204>)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	202c      	movs	r0, #44	@ 0x2c
 80043d4:	fb00 f303 	mul.w	r3, r0, r3
 80043d8:	440b      	add	r3, r1
 80043da:	3320      	adds	r3, #32
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	441a      	add	r2, r3
 80043e0:	4932      	ldr	r1, [pc, #200]	@ (80044ac <I2C_Compute_SCLL_SCLH+0x204>)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	202c      	movs	r0, #44	@ 0x2c
 80043e6:	fb00 f303 	mul.w	r3, r0, r3
 80043ea:	440b      	add	r3, r1
 80043ec:	3324      	adds	r3, #36	@ 0x24
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4413      	add	r3, r2
 80043f2:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d338      	bcc.n	800446e <I2C_Compute_SCLL_SCLH+0x1c6>
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	429a      	cmp	r2, r3
 8004402:	d834      	bhi.n	800446e <I2C_Compute_SCLL_SCLH+0x1c6>
 8004404:	4a29      	ldr	r2, [pc, #164]	@ (80044ac <I2C_Compute_SCLL_SCLH+0x204>)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	212c      	movs	r1, #44	@ 0x2c
 800440a:	fb01 f303 	mul.w	r3, r1, r3
 800440e:	4413      	add	r3, r2
 8004410:	331c      	adds	r3, #28
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	429a      	cmp	r2, r3
 8004418:	d329      	bcc.n	800446e <I2C_Compute_SCLL_SCLH+0x1c6>
 800441a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	429a      	cmp	r2, r3
 8004420:	d225      	bcs.n	800446e <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
 800442a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800442c:	2b00      	cmp	r3, #0
 800442e:	da02      	bge.n	8004436 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8004430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004432:	425b      	negs	r3, r3
 8004434:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8004436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004438:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800443a:	429a      	cmp	r2, r3
 800443c:	d917      	bls.n	800446e <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 800443e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004440:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
 8004442:	491b      	ldr	r1, [pc, #108]	@ (80044b0 <I2C_Compute_SCLL_SCLH+0x208>)
 8004444:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004446:	4613      	mov	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	4413      	add	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	440b      	add	r3, r1
 8004450:	3310      	adds	r3, #16
 8004452:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004454:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8004456:	4916      	ldr	r1, [pc, #88]	@ (80044b0 <I2C_Compute_SCLL_SCLH+0x208>)
 8004458:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800445a:	4613      	mov	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4413      	add	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	440b      	add	r3, r1
 8004464:	330c      	adds	r3, #12
 8004466:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004468:	601a      	str	r2, [r3, #0]
              ret = count;
 800446a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800446c:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800446e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004470:	3301      	adds	r3, #1
 8004472:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004476:	2bff      	cmp	r3, #255	@ 0xff
 8004478:	d999      	bls.n	80043ae <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800447a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800447c:	3301      	adds	r3, #1
 800447e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004480:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004482:	2bff      	cmp	r3, #255	@ 0xff
 8004484:	f67f af6f 	bls.w	8004366 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8004488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800448a:	3301      	adds	r3, #1
 800448c:	637b      	str	r3, [r7, #52]	@ 0x34
 800448e:	4b09      	ldr	r3, [pc, #36]	@ (80044b4 <I2C_Compute_SCLL_SCLH+0x20c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004494:	429a      	cmp	r2, r3
 8004496:	f4ff af56 	bcc.w	8004346 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800449a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800449c:	4618      	mov	r0, r3
 800449e:	374c      	adds	r7, #76	@ 0x4c
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr
 80044a8:	3b9aca00 	.word	0x3b9aca00
 80044ac:	0802dfbc 	.word	0x0802dfbc
 80044b0:	24000920 	.word	0x24000920
 80044b4:	24001320 	.word	0x24001320

080044b8 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b08a      	sub	sp, #40	@ 0x28
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80044c0:	4b2e      	ldr	r3, [pc, #184]	@ (800457c <I2C4_MspInit+0xc4>)
 80044c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80044c6:	4a2d      	ldr	r2, [pc, #180]	@ (800457c <I2C4_MspInit+0xc4>)
 80044c8:	f043 0320 	orr.w	r3, r3, #32
 80044cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80044d0:	4b2a      	ldr	r3, [pc, #168]	@ (800457c <I2C4_MspInit+0xc4>)
 80044d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80044d6:	f003 0320 	and.w	r3, r3, #32
 80044da:	613b      	str	r3, [r7, #16]
 80044dc:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80044de:	4b27      	ldr	r3, [pc, #156]	@ (800457c <I2C4_MspInit+0xc4>)
 80044e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80044e4:	4a25      	ldr	r2, [pc, #148]	@ (800457c <I2C4_MspInit+0xc4>)
 80044e6:	f043 0320 	orr.w	r3, r3, #32
 80044ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80044ee:	4b23      	ldr	r3, [pc, #140]	@ (800457c <I2C4_MspInit+0xc4>)
 80044f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80044f4:	f003 0320 	and.w	r3, r3, #32
 80044f8:	60fb      	str	r3, [r7, #12]
 80044fa:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 80044fc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004500:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8004502:	2312      	movs	r3, #18
 8004504:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8004506:	2301      	movs	r3, #1
 8004508:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 800450a:	2302      	movs	r3, #2
 800450c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800450e:	2304      	movs	r3, #4
 8004510:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8004512:	f107 0314 	add.w	r3, r7, #20
 8004516:	4619      	mov	r1, r3
 8004518:	4819      	ldr	r0, [pc, #100]	@ (8004580 <I2C4_MspInit+0xc8>)
 800451a:	f003 fa77 	bl	8007a0c <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800451e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004522:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8004524:	2304      	movs	r3, #4
 8004526:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8004528:	f107 0314 	add.w	r3, r7, #20
 800452c:	4619      	mov	r1, r3
 800452e:	4814      	ldr	r0, [pc, #80]	@ (8004580 <I2C4_MspInit+0xc8>)
 8004530:	f003 fa6c 	bl	8007a0c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8004534:	4b11      	ldr	r3, [pc, #68]	@ (800457c <I2C4_MspInit+0xc4>)
 8004536:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800453a:	4a10      	ldr	r2, [pc, #64]	@ (800457c <I2C4_MspInit+0xc4>)
 800453c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004540:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004544:	4b0d      	ldr	r3, [pc, #52]	@ (800457c <I2C4_MspInit+0xc4>)
 8004546:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800454a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800454e:	60bb      	str	r3, [r7, #8]
 8004550:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8004552:	4b0a      	ldr	r3, [pc, #40]	@ (800457c <I2C4_MspInit+0xc4>)
 8004554:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004558:	4a08      	ldr	r2, [pc, #32]	@ (800457c <I2C4_MspInit+0xc4>)
 800455a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800455e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8004562:	4b06      	ldr	r3, [pc, #24]	@ (800457c <I2C4_MspInit+0xc4>)
 8004564:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004568:	4a04      	ldr	r2, [pc, #16]	@ (800457c <I2C4_MspInit+0xc4>)
 800456a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800456e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
}
 8004572:	bf00      	nop
 8004574:	3728      	adds	r7, #40	@ 0x28
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	58024400 	.word	0x58024400
 8004580:	58021400 	.word	0x58021400

08004584 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b088      	sub	sp, #32
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 800458c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004590:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	4619      	mov	r1, r3
 8004596:	480b      	ldr	r0, [pc, #44]	@ (80045c4 <I2C4_MspDeInit+0x40>)
 8004598:	f003 fbe0 	bl	8007d5c <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 800459c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045a0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	4619      	mov	r1, r3
 80045a6:	4807      	ldr	r0, [pc, #28]	@ (80045c4 <I2C4_MspDeInit+0x40>)
 80045a8:	f003 fbd8 	bl	8007d5c <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 80045ac:	4b06      	ldr	r3, [pc, #24]	@ (80045c8 <I2C4_MspDeInit+0x44>)
 80045ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80045b2:	4a05      	ldr	r2, [pc, #20]	@ (80045c8 <I2C4_MspDeInit+0x44>)
 80045b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045b8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
}
 80045bc:	bf00      	nop
 80045be:	3720      	adds	r7, #32
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	58021400 	.word	0x58021400
 80045c8:	58024400 	.word	0x58024400

080045cc <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b088      	sub	sp, #32
 80045d0:	af04      	add	r7, sp, #16
 80045d2:	607b      	str	r3, [r7, #4]
 80045d4:	4603      	mov	r3, r0
 80045d6:	81fb      	strh	r3, [r7, #14]
 80045d8:	460b      	mov	r3, r1
 80045da:	81bb      	strh	r3, [r7, #12]
 80045dc:	4613      	mov	r3, r2
 80045de:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80045e0:	8978      	ldrh	r0, [r7, #10]
 80045e2:	89ba      	ldrh	r2, [r7, #12]
 80045e4:	89f9      	ldrh	r1, [r7, #14]
 80045e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80045ea:	9302      	str	r3, [sp, #8]
 80045ec:	8b3b      	ldrh	r3, [r7, #24]
 80045ee:	9301      	str	r3, [sp, #4]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	4603      	mov	r3, r0
 80045f6:	4807      	ldr	r0, [pc, #28]	@ (8004614 <I2C4_WriteReg+0x48>)
 80045f8:	f003 fd98 	bl	800812c <HAL_I2C_Mem_Write>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8004602:	2300      	movs	r3, #0
 8004604:	e001      	b.n	800460a <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8004606:	f06f 0307 	mvn.w	r3, #7
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	240008c8 	.word	0x240008c8

08004618 <I2C4_ReadReg>:
  * @param  MemAddSize Size of internal memory address
  * @param  Reg        The target register address to read
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b088      	sub	sp, #32
 800461c:	af04      	add	r7, sp, #16
 800461e:	607b      	str	r3, [r7, #4]
 8004620:	4603      	mov	r3, r0
 8004622:	81fb      	strh	r3, [r7, #14]
 8004624:	460b      	mov	r3, r1
 8004626:	81bb      	strh	r3, [r7, #12]
 8004628:	4613      	mov	r3, r2
 800462a:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800462c:	8978      	ldrh	r0, [r7, #10]
 800462e:	89ba      	ldrh	r2, [r7, #12]
 8004630:	89f9      	ldrh	r1, [r7, #14]
 8004632:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004636:	9302      	str	r3, [sp, #8]
 8004638:	8b3b      	ldrh	r3, [r7, #24]
 800463a:	9301      	str	r3, [sp, #4]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	4603      	mov	r3, r0
 8004642:	4807      	ldr	r0, [pc, #28]	@ (8004660 <I2C4_ReadReg+0x48>)
 8004644:	f003 fe86 	bl	8008354 <HAL_I2C_Mem_Read>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800464e:	2300      	movs	r3, #0
 8004650:	e001      	b.n	8004656 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8004652:	f06f 0307 	mvn.w	r3, #7
}
 8004656:	4618      	mov	r0, r3
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	240008c8 	.word	0x240008c8

08004664 <BSP_OSPI_NOR_Init>:
  * @param  Instance   OSPI Instance
  * @param  Init       OSPI Init structure
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_Init(uint32_t Instance, BSP_OSPI_NOR_Init_t *Init)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b094      	sub	sp, #80	@ 0x50
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  BSP_OSPI_NOR_Info_t pInfo;
  MX_OSPI_InitTypeDef ospi_config;

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <BSP_OSPI_NOR_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004674:	f06f 0301 	mvn.w	r3, #1
 8004678:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800467a:	e087      	b.n	800478c <BSP_OSPI_NOR_Init+0x128>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 800467c:	4a46      	ldr	r2, [pc, #280]	@ (8004798 <BSP_OSPI_NOR_Init+0x134>)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d17f      	bne.n	8004788 <BSP_OSPI_NOR_Init+0x124>
          return BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp OSPI initialization */
      OSPI_NOR_MspInit(&hospi_nor[Instance]);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	225c      	movs	r2, #92	@ 0x5c
 800468c:	fb02 f303 	mul.w	r3, r2, r3
 8004690:	4a42      	ldr	r2, [pc, #264]	@ (800479c <BSP_OSPI_NOR_Init+0x138>)
 8004692:	4413      	add	r3, r2
 8004694:	4618      	mov	r0, r3
 8004696:	f000 fa3d 	bl	8004b14 <OSPI_NOR_MspInit>
#endif /* USE_HAL_OSPI_REGISTER_CALLBACKS */

      /* Get Flash informations of one memory */
      (void)MX25LM51245G_GetFlashInfo(&pInfo);
 800469a:	f107 031c 	add.w	r3, r7, #28
 800469e:	4618      	mov	r0, r3
 80046a0:	f7fe feec 	bl	800347c <MX25LM51245G_GetFlashInfo>

      /* Fill config structure */
      ospi_config.ClockPrescaler = 2U;
 80046a4:	2302      	movs	r3, #2
 80046a6:	613b      	str	r3, [r7, #16]
      ospi_config.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046ae:	fa93 f3a3 	rbit	r3, r3
 80046b2:	643b      	str	r3, [r7, #64]	@ 0x40
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80046b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046b6:	64bb      	str	r3, [r7, #72]	@ 0x48
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80046b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <BSP_OSPI_NOR_Init+0x5e>
  {
    return 32U;
 80046be:	2320      	movs	r3, #32
 80046c0:	e003      	b.n	80046ca <BSP_OSPI_NOR_Init+0x66>
  }
  return __builtin_clz(value);
 80046c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046c4:	fab3 f383 	clz	r3, r3
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	60fb      	str	r3, [r7, #12]
      ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80046cc:	2300      	movs	r3, #0
 80046ce:	617b      	str	r3, [r7, #20]
      ospi_config.TransferRate   = Init->TransferRate;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	785b      	ldrb	r3, [r3, #1]
 80046d4:	61bb      	str	r3, [r7, #24]

      /* STM32 OSPI Clock configuration */
      if (MX_OSPI_ClockConfig(&hospi_nor[Instance]) != HAL_OK)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	225c      	movs	r2, #92	@ 0x5c
 80046da:	fb02 f303 	mul.w	r3, r2, r3
 80046de:	4a2f      	ldr	r2, [pc, #188]	@ (800479c <BSP_OSPI_NOR_Init+0x138>)
 80046e0:	4413      	add	r3, r2
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 f9f0 	bl	8004ac8 <MX_OSPI_ClockConfig>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <BSP_OSPI_NOR_Init+0x92>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 80046ee:	f06f 0303 	mvn.w	r3, #3
 80046f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046f4:	e04a      	b.n	800478c <BSP_OSPI_NOR_Init+0x128>
      }
       /* STM32 OSPI interface initialization */
      else if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_config) != HAL_OK)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	225c      	movs	r2, #92	@ 0x5c
 80046fa:	fb02 f303 	mul.w	r3, r2, r3
 80046fe:	4a27      	ldr	r2, [pc, #156]	@ (800479c <BSP_OSPI_NOR_Init+0x138>)
 8004700:	4413      	add	r3, r2
 8004702:	f107 020c 	add.w	r2, r7, #12
 8004706:	4611      	mov	r1, r2
 8004708:	4618      	mov	r0, r3
 800470a:	f000 f897 	bl	800483c <MX_OSPI_NOR_Init>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <BSP_OSPI_NOR_Init+0xb8>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8004714:	f06f 0303 	mvn.w	r3, #3
 8004718:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800471a:	e037      	b.n	800478c <BSP_OSPI_NOR_Init+0x128>
      }
      /* OSPI memory reset */
      else if (OSPI_NOR_ResetMemory(Instance) != BSP_ERROR_NONE)
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 fba5 	bl	8004e6c <OSPI_NOR_ResetMemory>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d003      	beq.n	8004730 <BSP_OSPI_NOR_Init+0xcc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004728:	f06f 0304 	mvn.w	r3, #4
 800472c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800472e:	e02d      	b.n	800478c <BSP_OSPI_NOR_Init+0x128>
      }
      /* Check if memory is ready */
      else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	225c      	movs	r2, #92	@ 0x5c
 8004734:	fb02 f303 	mul.w	r3, r2, r3
 8004738:	4a18      	ldr	r2, [pc, #96]	@ (800479c <BSP_OSPI_NOR_Init+0x138>)
 800473a:	1898      	adds	r0, r3, r2
 800473c:	4a16      	ldr	r2, [pc, #88]	@ (8004798 <BSP_OSPI_NOR_Init+0x134>)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	00db      	lsls	r3, r3, #3
 8004742:	4413      	add	r3, r2
 8004744:	7859      	ldrb	r1, [r3, #1]
 8004746:	4a14      	ldr	r2, [pc, #80]	@ (8004798 <BSP_OSPI_NOR_Init+0x134>)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	4413      	add	r3, r2
 800474e:	789b      	ldrb	r3, [r3, #2]
 8004750:	461a      	mov	r2, r3
 8004752:	f7fe fec2 	bl	80034da <MX25LM51245G_AutoPollingMemReady>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d003      	beq.n	8004764 <BSP_OSPI_NOR_Init+0x100>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800475c:	f06f 0304 	mvn.w	r3, #4
 8004760:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004762:	e013      	b.n	800478c <BSP_OSPI_NOR_Init+0x128>
      }
      /* Configure the memory */
      else if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	7819      	ldrb	r1, [r3, #0]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	785b      	ldrb	r3, [r3, #1]
 800476c:	461a      	mov	r2, r3
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f934 	bl	80049dc <BSP_OSPI_NOR_ConfigFlash>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d003      	beq.n	8004782 <BSP_OSPI_NOR_Init+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800477a:	f06f 0304 	mvn.w	r3, #4
 800477e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004780:	e004      	b.n	800478c <BSP_OSPI_NOR_Init+0x128>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004782:	2300      	movs	r3, #0
 8004784:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004786:	e001      	b.n	800478c <BSP_OSPI_NOR_Init+0x128>
      }
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8004788:	2300      	movs	r3, #0
 800478a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  /* Return BSP status */
  return ret;
 800478c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800478e:	4618      	mov	r0, r3
 8004790:	3750      	adds	r7, #80	@ 0x50
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	24001380 	.word	0x24001380
 800479c:	24001324 	.word	0x24001324

080047a0 <BSP_OSPI_NOR_DeInit>:
  * @brief  De-Initializes the OSPI interface.
  * @param  Instance   OSPI Instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_DeInit(uint32_t Instance)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80047a8:	2300      	movs	r3, #0
 80047aa:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d003      	beq.n	80047ba <BSP_OSPI_NOR_DeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80047b2:	f06f 0301 	mvn.w	r3, #1
 80047b6:	60fb      	str	r3, [r7, #12]
 80047b8:	e037      	b.n	800482a <BSP_OSPI_NOR_DeInit+0x8a>
  }
  else
  {
    /* Disable Memory mapped mode */
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 80047ba:	4a1e      	ldr	r2, [pc, #120]	@ (8004834 <BSP_OSPI_NOR_DeInit+0x94>)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d108      	bne.n	80047d8 <BSP_OSPI_NOR_DeInit+0x38>
    {
      if(BSP_OSPI_NOR_DisableMemoryMappedMode(Instance) != BSP_ERROR_NONE)
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f8d2 	bl	8004970 <BSP_OSPI_NOR_DisableMemoryMappedMode>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d002      	beq.n	80047d8 <BSP_OSPI_NOR_DeInit+0x38>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 80047d2:	f06f 0304 	mvn.w	r3, #4
 80047d6:	e029      	b.n	800482c <BSP_OSPI_NOR_DeInit+0x8c>
      }
    }

    /* Set default Ospi_Nor_Ctx values */
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 80047d8:	4a16      	ldr	r2, [pc, #88]	@ (8004834 <BSP_OSPI_NOR_DeInit+0x94>)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2100      	movs	r1, #0
 80047de:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;
 80047e2:	4a14      	ldr	r2, [pc, #80]	@ (8004834 <BSP_OSPI_NOR_DeInit+0x94>)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	4413      	add	r3, r2
 80047ea:	2200      	movs	r2, #0
 80047ec:	705a      	strb	r2, [r3, #1]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 80047ee:	4a11      	ldr	r2, [pc, #68]	@ (8004834 <BSP_OSPI_NOR_DeInit+0x94>)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	4413      	add	r3, r2
 80047f6:	2200      	movs	r2, #0
 80047f8:	709a      	strb	r2, [r3, #2]

#if (USE_HAL_OSPI_REGISTER_CALLBACKS == 0)
    OSPI_NOR_MspDeInit(&hospi_nor[Instance]);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	225c      	movs	r2, #92	@ 0x5c
 80047fe:	fb02 f303 	mul.w	r3, r2, r3
 8004802:	4a0d      	ldr	r2, [pc, #52]	@ (8004838 <BSP_OSPI_NOR_DeInit+0x98>)
 8004804:	4413      	add	r3, r2
 8004806:	4618      	mov	r0, r3
 8004808:	f000 fad6 	bl	8004db8 <OSPI_NOR_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS == 0) */

    /* Call the DeInit function to reset the driver */
    if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	225c      	movs	r2, #92	@ 0x5c
 8004810:	fb02 f303 	mul.w	r3, r2, r3
 8004814:	4a08      	ldr	r2, [pc, #32]	@ (8004838 <BSP_OSPI_NOR_DeInit+0x98>)
 8004816:	4413      	add	r3, r2
 8004818:	4618      	mov	r0, r3
 800481a:	f004 fed9 	bl	80095d0 <HAL_OSPI_DeInit>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d002      	beq.n	800482a <BSP_OSPI_NOR_DeInit+0x8a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004824:	f06f 0303 	mvn.w	r3, #3
 8004828:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return BSP status */
  return ret;
 800482a:	68fb      	ldr	r3, [r7, #12]
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	24001380 	.word	0x24001380
 8004838:	24001324 	.word	0x24001324

0800483c <MX_OSPI_NOR_Init>:
  * @param  hospi          OSPI handle
  * @param  Config         OSPI config structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_OSPI_NOR_Init(OSPI_HandleTypeDef *hospi, MX_OSPI_InitTypeDef *Config)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
    /* OctoSPI initialization */
  hospi->Instance = OCTOSPI1;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a1e      	ldr	r2, [pc, #120]	@ (80048c4 <MX_OSPI_NOR_Init+0x88>)
 800484a:	601a      	str	r2, [r3, #0]

  hospi->Init.FifoThreshold      = 4;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2204      	movs	r2, #4
 8004850:	605a      	str	r2, [r3, #4]
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	609a      	str	r2, [r3, #8]
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	611a      	str	r2, [r3, #16]
  hospi->Init.ChipSelectHighTime = 2;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2202      	movs	r2, #2
 8004864:	615a      	str	r2, [r3, #20]
  hospi->Init.FreeRunningClock   = HAL_OSPI_FREERUNCLK_DISABLE;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	619a      	str	r2, [r3, #24]
  hospi->Init.ClockMode          = HAL_OSPI_CLOCK_MODE_0;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	61da      	str	r2, [r3, #28]
  hospi->Init.WrapSize           = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	621a      	str	r2, [r3, #32]
  hospi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685a      	ldr	r2, [r3, #4]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi->Init.SampleShifting     = Config->SampleShifting;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	689a      	ldr	r2, [r3, #8]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi->Init.ChipSelectBoundary = 0;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	631a      	str	r2, [r3, #48]	@ 0x30

  if (Config->TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d108      	bne.n	80048a8 <MX_OSPI_NOR_Init+0x6c>
  {
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800489c:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048a4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80048a6:	e005      	b.n	80048b4 <MX_OSPI_NOR_Init+0x78>
  }
  else
  {
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  return HAL_OSPI_Init(hospi);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f004 fdcf 	bl	8009458 <HAL_OSPI_Init>
 80048ba:	4603      	mov	r3, r0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3708      	adds	r7, #8
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	52005000 	.word	0x52005000

080048c8 <BSP_OSPI_NOR_EnableMemoryMappedMode>:
  * @brief  Configure the OSPI in memory-mapped mode
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_EnableMemoryMappedMode(uint32_t Instance)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80048d0:	2300      	movs	r3, #0
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80048da:	f06f 0301 	mvn.w	r3, #1
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	e03d      	b.n	800495e <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
  }
  else
  {
    if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 80048e2:	4a21      	ldr	r2, [pc, #132]	@ (8004968 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	4413      	add	r3, r2
 80048ea:	789b      	ldrb	r3, [r3, #2]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d11b      	bne.n	8004928 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x60>
    {
      if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	225c      	movs	r2, #92	@ 0x5c
 80048f4:	fb02 f303 	mul.w	r3, r2, r3
 80048f8:	4a1c      	ldr	r2, [pc, #112]	@ (800496c <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 80048fa:	1898      	adds	r0, r3, r2
 80048fc:	4a1a      	ldr	r2, [pc, #104]	@ (8004968 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	00db      	lsls	r3, r3, #3
 8004902:	4413      	add	r3, r2
 8004904:	785b      	ldrb	r3, [r3, #1]
 8004906:	2201      	movs	r2, #1
 8004908:	4619      	mov	r1, r3
 800490a:	f7fe fe93 	bl	8003634 <MX25LM51245G_EnableSTRMemoryMappedMode>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d003      	beq.n	800491c <BSP_OSPI_NOR_EnableMemoryMappedMode+0x54>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004914:	f06f 0304 	mvn.w	r3, #4
 8004918:	60fb      	str	r3, [r7, #12]
 800491a:	e020      	b.n	800495e <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
      }
      else /* Update OSPI context if all operations are well done */
      {
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 800491c:	4a12      	ldr	r2, [pc, #72]	@ (8004968 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2102      	movs	r1, #2
 8004922:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
 8004926:	e01a      	b.n	800495e <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
      }
    }
    else
    {
      if(MX25LM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25LM51245G_OK)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	225c      	movs	r2, #92	@ 0x5c
 800492c:	fb02 f303 	mul.w	r3, r2, r3
 8004930:	4a0e      	ldr	r2, [pc, #56]	@ (800496c <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 8004932:	441a      	add	r2, r3
 8004934:	490c      	ldr	r1, [pc, #48]	@ (8004968 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	00db      	lsls	r3, r3, #3
 800493a:	440b      	add	r3, r1
 800493c:	785b      	ldrb	r3, [r3, #1]
 800493e:	4619      	mov	r1, r3
 8004940:	4610      	mov	r0, r2
 8004942:	f7fe ff21 	bl	8003788 <MX25LM51245G_EnableDTRMemoryMappedMode>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x8c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800494c:	f06f 0304 	mvn.w	r3, #4
 8004950:	60fb      	str	r3, [r7, #12]
 8004952:	e004      	b.n	800495e <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
      }
      else /* Update OSPI context if all operations are well done */
      {
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8004954:	4a04      	ldr	r2, [pc, #16]	@ (8004968 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2102      	movs	r1, #2
 800495a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800495e:	68fb      	ldr	r3, [r7, #12]
}
 8004960:	4618      	mov	r0, r3
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	24001380 	.word	0x24001380
 800496c:	24001324 	.word	0x24001324

08004970 <BSP_OSPI_NOR_DisableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_DisableMemoryMappedMode(uint32_t Instance)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8004978:	2300      	movs	r3, #0
 800497a:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <BSP_OSPI_NOR_DisableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004982:	f06f 0301 	mvn.w	r3, #1
 8004986:	60fb      	str	r3, [r7, #12]
 8004988:	e01e      	b.n	80049c8 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
  }
  else
  {
    if(Ospi_Nor_Ctx[Instance].IsInitialized != OSPI_ACCESS_MMP)
 800498a:	4a12      	ldr	r2, [pc, #72]	@ (80049d4 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x64>)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8004992:	2b02      	cmp	r3, #2
 8004994:	d003      	beq.n	800499e <BSP_OSPI_NOR_DisableMemoryMappedMode+0x2e>
    {
      ret = BSP_ERROR_OSPI_MMP_UNLOCK_FAILURE;
 8004996:	f06f 031a 	mvn.w	r3, #26
 800499a:	60fb      	str	r3, [r7, #12]
 800499c:	e014      	b.n	80049c8 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
    }/* Abort MMP back to indirect mode */
    else if(HAL_OSPI_Abort(&hospi_nor[Instance]) != HAL_OK)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	225c      	movs	r2, #92	@ 0x5c
 80049a2:	fb02 f303 	mul.w	r3, r2, r3
 80049a6:	4a0c      	ldr	r2, [pc, #48]	@ (80049d8 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x68>)
 80049a8:	4413      	add	r3, r2
 80049aa:	4618      	mov	r0, r3
 80049ac:	f005 f950 	bl	8009c50 <HAL_OSPI_Abort>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <BSP_OSPI_NOR_DisableMemoryMappedMode+0x4e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80049b6:	f06f 0303 	mvn.w	r3, #3
 80049ba:	60fb      	str	r3, [r7, #12]
 80049bc:	e004      	b.n	80049c8 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
    }
    else /* Update OSPI NOR context if all operations are well done */
    {
      /* Update OSPI context if all operations are well done */
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 80049be:	4a05      	ldr	r2, [pc, #20]	@ (80049d4 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x64>)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2101      	movs	r1, #1
 80049c4:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    }
  }

  /* Return BSP status */
  return ret;
 80049c8:	68fb      	ldr	r3, [r7, #12]
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	24001380 	.word	0x24001380
 80049d8:	24001324 	.word	0x24001324

080049dc <BSP_OSPI_NOR_ConfigFlash>:
  * @param  Mode      OSPI mode
  * @param  Rate      OSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_ConfigFlash(uint32_t Instance, BSP_OSPI_NOR_Interface_t Mode, BSP_OSPI_NOR_Transfer_t Rate)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	460b      	mov	r3, r1
 80049e6:	70fb      	strb	r3, [r7, #3]
 80049e8:	4613      	mov	r3, r2
 80049ea:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 80049ec:	2300      	movs	r3, #0
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <BSP_OSPI_NOR_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80049f6:	f06f 0301 	mvn.w	r3, #1
 80049fa:	60fb      	str	r3, [r7, #12]
 80049fc:	e05d      	b.n	8004aba <BSP_OSPI_NOR_ConfigFlash+0xde>
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 80049fe:	4a31      	ldr	r2, [pc, #196]	@ (8004ac4 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d103      	bne.n	8004a12 <BSP_OSPI_NOR_ConfigFlash+0x36>
    {
      ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 8004a0a:	f06f 0319 	mvn.w	r3, #25
 8004a0e:	60fb      	str	r3, [r7, #12]
 8004a10:	e053      	b.n	8004aba <BSP_OSPI_NOR_ConfigFlash+0xde>
    }
    else
    {
      /* Setup Flash interface ***************************************************/
      switch(Ospi_Nor_Ctx[Instance].InterfaceMode)
 8004a12:	4a2c      	ldr	r2, [pc, #176]	@ (8004ac4 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	4413      	add	r3, r2
 8004a1a:	785b      	ldrb	r3, [r3, #1]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d125      	bne.n	8004a6c <BSP_OSPI_NOR_ConfigFlash+0x90>
      {
      case BSP_OSPI_NOR_OPI_MODE :  /* 8-8-8 commands */
        if((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 8004a20:	78fb      	ldrb	r3, [r7, #3]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d107      	bne.n	8004a36 <BSP_OSPI_NOR_ConfigFlash+0x5a>
 8004a26:	4a27      	ldr	r2, [pc, #156]	@ (8004ac4 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	4413      	add	r3, r2
 8004a2e:	789b      	ldrb	r3, [r3, #2]
 8004a30:	78ba      	ldrb	r2, [r7, #2]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d02a      	beq.n	8004a8c <BSP_OSPI_NOR_ConfigFlash+0xb0>
        {
          /* Exit OPI mode */
          ret = OSPI_NOR_ExitOPIMode(Instance);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 fc3e 	bl	80052b8 <OSPI_NOR_ExitOPIMode>
 8004a3c:	60f8      	str	r0, [r7, #12]

          if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d123      	bne.n	8004a8c <BSP_OSPI_NOR_ConfigFlash+0xb0>
 8004a44:	78fb      	ldrb	r3, [r7, #3]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d120      	bne.n	8004a8c <BSP_OSPI_NOR_ConfigFlash+0xb0>
          {

            if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8004a4a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ac4 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	00db      	lsls	r3, r3, #3
 8004a50:	4413      	add	r3, r2
 8004a52:	789b      	ldrb	r3, [r3, #2]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d104      	bne.n	8004a62 <BSP_OSPI_NOR_ConfigFlash+0x86>
            {
              /* Enter DTR OPI mode */
              ret = OSPI_NOR_EnterDOPIMode(Instance);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 fa9d 	bl	8004f98 <OSPI_NOR_EnterDOPIMode>
 8004a5e:	60f8      	str	r0, [r7, #12]
              /* Enter STR OPI mode */
              ret = OSPI_NOR_EnterSOPIMode(Instance);
            }
          }
        }
        break;
 8004a60:	e014      	b.n	8004a8c <BSP_OSPI_NOR_ConfigFlash+0xb0>
              ret = OSPI_NOR_EnterSOPIMode(Instance);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 fb72 	bl	800514c <OSPI_NOR_EnterSOPIMode>
 8004a68:	60f8      	str	r0, [r7, #12]
        break;
 8004a6a:	e00f      	b.n	8004a8c <BSP_OSPI_NOR_ConfigFlash+0xb0>

      case BSP_OSPI_NOR_SPI_MODE :  /* 1-1-1 commands, Power on H/W default setting */
      default :
        if(Mode == BSP_OSPI_NOR_OPI_MODE)
 8004a6c:	78fb      	ldrb	r3, [r7, #3]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d10e      	bne.n	8004a90 <BSP_OSPI_NOR_ConfigFlash+0xb4>
        {
          if(Rate == BSP_OSPI_NOR_STR_TRANSFER)
 8004a72:	78bb      	ldrb	r3, [r7, #2]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d104      	bne.n	8004a82 <BSP_OSPI_NOR_ConfigFlash+0xa6>
          {
            /* Enter STR OPI mode */
            ret = OSPI_NOR_EnterSOPIMode(Instance);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 fb67 	bl	800514c <OSPI_NOR_EnterSOPIMode>
 8004a7e:	60f8      	str	r0, [r7, #12]
          {
            /* Enter DTR OPI mode */
            ret = OSPI_NOR_EnterDOPIMode(Instance);
          }
        }
        break;
 8004a80:	e006      	b.n	8004a90 <BSP_OSPI_NOR_ConfigFlash+0xb4>
            ret = OSPI_NOR_EnterDOPIMode(Instance);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 fa88 	bl	8004f98 <OSPI_NOR_EnterDOPIMode>
 8004a88:	60f8      	str	r0, [r7, #12]
        break;
 8004a8a:	e001      	b.n	8004a90 <BSP_OSPI_NOR_ConfigFlash+0xb4>
        break;
 8004a8c:	bf00      	nop
 8004a8e:	e000      	b.n	8004a92 <BSP_OSPI_NOR_ConfigFlash+0xb6>
        break;
 8004a90:	bf00      	nop
      }

      /* Update OSPI context if all operations are well done */
      if(ret == BSP_ERROR_NONE)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d110      	bne.n	8004aba <BSP_OSPI_NOR_ConfigFlash+0xde>
      {
        /* Update current status parameter *****************************************/
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8004a98:	4a0a      	ldr	r2, [pc, #40]	@ (8004ac4 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2101      	movs	r1, #1
 8004a9e:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
        Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 8004aa2:	4a08      	ldr	r2, [pc, #32]	@ (8004ac4 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	4413      	add	r3, r2
 8004aaa:	78fa      	ldrb	r2, [r7, #3]
 8004aac:	705a      	strb	r2, [r3, #1]
        Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 8004aae:	4a05      	ldr	r2, [pc, #20]	@ (8004ac4 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	4413      	add	r3, r2
 8004ab6:	78ba      	ldrb	r2, [r7, #2]
 8004ab8:	709a      	strb	r2, [r3, #2]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8004aba:	68fb      	ldr	r3, [r7, #12]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	24001380 	.word	0x24001380

08004ac8 <MX_OSPI_ClockConfig>:
  * @param  hospi  OSPI Handle
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_OSPI_ClockConfig(OSPI_HandleTypeDef *hospi)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b0b0      	sub	sp, #192	@ 0xc0
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* OSPI clock configuration */
  /* PLL2_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL2_VCO Output = PLL2_VCO Input * PLL3N = 400 Mhz */
  /* PLLOSPICLK = PLL2_VCO Output/PLL2R = 400/2 = 200 Mhz */
  /* OSPI clock frequency = PLLOSPICLK = 200 Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI ;
 8004ad0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004ad4:	f04f 0300 	mov.w	r3, #0
 8004ad8:	e9c7 2302 	strd	r2, r3, [r7, #8]
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8004adc:	2320      	movs	r3, #32
 8004ade:	657b      	str	r3, [r7, #84]	@ 0x54
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 8004ae0:	2305      	movs	r3, #5
 8004ae2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 8004ae4:	2350      	movs	r3, #80	@ 0x50
 8004ae6:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8004ae8:	2305      	movs	r3, #5
 8004aea:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8004aec:	2302      	movs	r3, #2
 8004aee:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8004af0:	2302      	movs	r3, #2
 8004af2:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8004af4:	2300      	movs	r3, #0
 8004af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8004af8:	2300      	movs	r3, #0
 8004afa:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8004afc:	2300      	movs	r3, #0
 8004afe:	627b      	str	r3, [r7, #36]	@ 0x24

  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8004b00:	f107 0308 	add.w	r3, r7, #8
 8004b04:	4618      	mov	r0, r3
 8004b06:	f007 f87d 	bl	800bc04 <HAL_RCCEx_PeriphCLKConfig>
 8004b0a:	4603      	mov	r3, r0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	37c0      	adds	r7, #192	@ 0xc0
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <OSPI_NOR_MspInit>:
  * @brief  Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspInit(OSPI_HandleTypeDef *hospi)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b094      	sub	sp, #80	@ 0x50
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]

  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* Enable the OctoSPI memory interface clock */
  OSPI_NOR_CLK_ENABLE();
 8004b1c:	4b9f      	ldr	r3, [pc, #636]	@ (8004d9c <OSPI_NOR_MspInit+0x288>)
 8004b1e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004b22:	4a9e      	ldr	r2, [pc, #632]	@ (8004d9c <OSPI_NOR_MspInit+0x288>)
 8004b24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b28:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8004b2c:	4b9b      	ldr	r3, [pc, #620]	@ (8004d9c <OSPI_NOR_MspInit+0x288>)
 8004b2e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004b32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

  /* Reset the OctoSPI memory interface */
  OSPI_NOR_FORCE_RESET();
 8004b3a:	4b98      	ldr	r3, [pc, #608]	@ (8004d9c <OSPI_NOR_MspInit+0x288>)
 8004b3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b3e:	4a97      	ldr	r2, [pc, #604]	@ (8004d9c <OSPI_NOR_MspInit+0x288>)
 8004b40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b44:	67d3      	str	r3, [r2, #124]	@ 0x7c
  OSPI_NOR_RELEASE_RESET();
 8004b46:	4b95      	ldr	r3, [pc, #596]	@ (8004d9c <OSPI_NOR_MspInit+0x288>)
 8004b48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b4a:	4a94      	ldr	r2, [pc, #592]	@ (8004d9c <OSPI_NOR_MspInit+0x288>)
 8004b4c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b50:	67d3      	str	r3, [r2, #124]	@ 0x7c

  /* Enable GPIO clocks */
  OSPI_NOR_CLK_GPIO_CLK_ENABLE();
 8004b52:	4b92      	ldr	r3, [pc, #584]	@ (8004d9c <OSPI_NOR_MspInit+0x288>)
 8004b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b58:	4a90      	ldr	r2, [pc, #576]	@ (8004d9c <OSPI_NOR_MspInit+0x288>)
 8004b5a:	f043 0320 	orr.w	r3, r3, #32
 8004b5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b62:	4b8e      	ldr	r3, [pc, #568]	@ (8004d9c <OSPI_NOR_MspInit+0x288>)
 8004b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b68:	f003 0320 	and.w	r3, r3, #32
 8004b6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
  OSPI_NOR_DQS_GPIO_CLK_ENABLE();
 8004b70:	4b8a      	ldr	r3, [pc, #552]	@ (8004d9c <OSPI_NOR_MspInit+0x288>)
 8004b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b76:	4a89      	ldr	r2, [pc, #548]	@ (8004d9c <OSPI_NOR_MspInit+0x288>)
 8004b78:	f043 0302 	orr.w	r3, r3, #2
 8004b7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b80:	4b86      	ldr	r3, [pc, #536]	@ (8004d9c <OSPI_NOR_MspInit+0x288>)
 8004b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
  OSPI_NOR_CS_GPIO_CLK_ENABLE();
 8004b8e:	4b83      	ldr	r3, [pc, #524]	@ (8004d9c <OSPI_NOR_MspInit+0x288>)
 8004b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b94:	4a81      	ldr	r2, [pc, #516]	@ (8004d9c <OSPI_NOR_MspInit+0x288>)
 8004b96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b9e:	4b7f      	ldr	r3, [pc, #508]	@ (8004d9c <OSPI_NOR_MspInit+0x288>)
 8004ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  OSPI_NOR_D0_GPIO_CLK_ENABLE();
 8004bac:	4b7b      	ldr	r3, [pc, #492]	@ (8004d9c <OSPI_NOR_MspInit+0x288>)
 8004bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bb2:	4a7a      	ldr	r2, [pc, #488]	@ (8004d9c <OSPI_NOR_MspInit+0x288>)
 8004bb4:	f043 0308 	orr.w	r3, r3, #8
 8004bb8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004bbc:	4b77      	ldr	r3, [pc, #476]	@ (8004d9c <OSPI_NOR_MspInit+0x288>)
 8004bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bc2:	f003 0308 	and.w	r3, r3, #8
 8004bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  OSPI_NOR_D1_GPIO_CLK_ENABLE();
 8004bca:	4b74      	ldr	r3, [pc, #464]	@ (8004d9c <OSPI_NOR_MspInit+0x288>)
 8004bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bd0:	4a72      	ldr	r2, [pc, #456]	@ (8004d9c <OSPI_NOR_MspInit+0x288>)
 8004bd2:	f043 0308 	orr.w	r3, r3, #8
 8004bd6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004bda:	4b70      	ldr	r3, [pc, #448]	@ (8004d9c <OSPI_NOR_MspInit+0x288>)
 8004bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004be0:	f003 0308 	and.w	r3, r3, #8
 8004be4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  OSPI_NOR_D2_GPIO_CLK_ENABLE();
 8004be8:	4b6c      	ldr	r3, [pc, #432]	@ (8004d9c <OSPI_NOR_MspInit+0x288>)
 8004bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bee:	4a6b      	ldr	r2, [pc, #428]	@ (8004d9c <OSPI_NOR_MspInit+0x288>)
 8004bf0:	f043 0310 	orr.w	r3, r3, #16
 8004bf4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004bf8:	4b68      	ldr	r3, [pc, #416]	@ (8004d9c <OSPI_NOR_MspInit+0x288>)
 8004bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bfe:	f003 0310 	and.w	r3, r3, #16
 8004c02:	623b      	str	r3, [r7, #32]
 8004c04:	6a3b      	ldr	r3, [r7, #32]
  OSPI_NOR_D3_GPIO_CLK_ENABLE();
 8004c06:	4b65      	ldr	r3, [pc, #404]	@ (8004d9c <OSPI_NOR_MspInit+0x288>)
 8004c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c0c:	4a63      	ldr	r2, [pc, #396]	@ (8004d9c <OSPI_NOR_MspInit+0x288>)
 8004c0e:	f043 0308 	orr.w	r3, r3, #8
 8004c12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c16:	4b61      	ldr	r3, [pc, #388]	@ (8004d9c <OSPI_NOR_MspInit+0x288>)
 8004c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c1c:	f003 0308 	and.w	r3, r3, #8
 8004c20:	61fb      	str	r3, [r7, #28]
 8004c22:	69fb      	ldr	r3, [r7, #28]
  OSPI_NOR_D4_GPIO_CLK_ENABLE();
 8004c24:	4b5d      	ldr	r3, [pc, #372]	@ (8004d9c <OSPI_NOR_MspInit+0x288>)
 8004c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c2a:	4a5c      	ldr	r2, [pc, #368]	@ (8004d9c <OSPI_NOR_MspInit+0x288>)
 8004c2c:	f043 0308 	orr.w	r3, r3, #8
 8004c30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c34:	4b59      	ldr	r3, [pc, #356]	@ (8004d9c <OSPI_NOR_MspInit+0x288>)
 8004c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c3a:	f003 0308 	and.w	r3, r3, #8
 8004c3e:	61bb      	str	r3, [r7, #24]
 8004c40:	69bb      	ldr	r3, [r7, #24]
  OSPI_NOR_D5_GPIO_CLK_ENABLE();
 8004c42:	4b56      	ldr	r3, [pc, #344]	@ (8004d9c <OSPI_NOR_MspInit+0x288>)
 8004c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c48:	4a54      	ldr	r2, [pc, #336]	@ (8004d9c <OSPI_NOR_MspInit+0x288>)
 8004c4a:	f043 0308 	orr.w	r3, r3, #8
 8004c4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c52:	4b52      	ldr	r3, [pc, #328]	@ (8004d9c <OSPI_NOR_MspInit+0x288>)
 8004c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c58:	f003 0308 	and.w	r3, r3, #8
 8004c5c:	617b      	str	r3, [r7, #20]
 8004c5e:	697b      	ldr	r3, [r7, #20]
  OSPI_NOR_D6_GPIO_CLK_ENABLE();
 8004c60:	4b4e      	ldr	r3, [pc, #312]	@ (8004d9c <OSPI_NOR_MspInit+0x288>)
 8004c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c66:	4a4d      	ldr	r2, [pc, #308]	@ (8004d9c <OSPI_NOR_MspInit+0x288>)
 8004c68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c70:	4b4a      	ldr	r3, [pc, #296]	@ (8004d9c <OSPI_NOR_MspInit+0x288>)
 8004c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c7a:	613b      	str	r3, [r7, #16]
 8004c7c:	693b      	ldr	r3, [r7, #16]
  OSPI_NOR_D7_GPIO_CLK_ENABLE();
 8004c7e:	4b47      	ldr	r3, [pc, #284]	@ (8004d9c <OSPI_NOR_MspInit+0x288>)
 8004c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c84:	4a45      	ldr	r2, [pc, #276]	@ (8004d9c <OSPI_NOR_MspInit+0x288>)
 8004c86:	f043 0308 	orr.w	r3, r3, #8
 8004c8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c8e:	4b43      	ldr	r3, [pc, #268]	@ (8004d9c <OSPI_NOR_MspInit+0x288>)
 8004c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c94:	f003 0308 	and.w	r3, r3, #8
 8004c98:	60fb      	str	r3, [r7, #12]
 8004c9a:	68fb      	ldr	r3, [r7, #12]

  /* OctoSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_CS_PIN;
 8004c9c:	2340      	movs	r3, #64	@ 0x40
 8004c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	643b      	str	r3, [r7, #64]	@ 0x40
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	647b      	str	r3, [r7, #68]	@ 0x44
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	64bb      	str	r3, [r7, #72]	@ 0x48
  GPIO_InitStruct.Alternate = OSPI_NOR_CS_PIN_AF;
 8004cac:	230a      	movs	r3, #10
 8004cae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
 8004cb0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	483a      	ldr	r0, [pc, #232]	@ (8004da0 <OSPI_NOR_MspInit+0x28c>)
 8004cb8:	f002 fea8 	bl	8007a0c <HAL_GPIO_Init>

  /* OctoSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_DQS_PIN;
 8004cbc:	2320      	movs	r3, #32
 8004cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	647b      	str	r3, [r7, #68]	@ 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_DQS_PIN_AF;
 8004cc4:	230a      	movs	r3, #10
 8004cc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_DQS_GPIO_PORT, &GPIO_InitStruct);
 8004cc8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4835      	ldr	r0, [pc, #212]	@ (8004da4 <OSPI_NOR_MspInit+0x290>)
 8004cd0:	f002 fe9c 	bl	8007a0c <HAL_GPIO_Init>

  /* OctoSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_CLK_PIN;
 8004cd4:	2304      	movs	r3, #4
 8004cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	647b      	str	r3, [r7, #68]	@ 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_CLK_PIN_AF;
 8004cdc:	2309      	movs	r3, #9
 8004cde:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_CLK_GPIO_PORT, &GPIO_InitStruct);
 8004ce0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	4830      	ldr	r0, [pc, #192]	@ (8004da8 <OSPI_NOR_MspInit+0x294>)
 8004ce8:	f002 fe90 	bl	8007a0c <HAL_GPIO_Init>

  /* OctoSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D0_PIN;
 8004cec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D0_PIN_AF;
 8004cf2:	230a      	movs	r3, #10
 8004cf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_D0_GPIO_PORT, &GPIO_InitStruct);
 8004cf6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	482b      	ldr	r0, [pc, #172]	@ (8004dac <OSPI_NOR_MspInit+0x298>)
 8004cfe:	f002 fe85 	bl	8007a0c <HAL_GPIO_Init>

  /* OctoSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D1_PIN;
 8004d02:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D1_PIN_AF;
 8004d08:	230a      	movs	r3, #10
 8004d0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_D1_GPIO_PORT, &GPIO_InitStruct);
 8004d0c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004d10:	4619      	mov	r1, r3
 8004d12:	4826      	ldr	r0, [pc, #152]	@ (8004dac <OSPI_NOR_MspInit+0x298>)
 8004d14:	f002 fe7a 	bl	8007a0c <HAL_GPIO_Init>

  /* OctoSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D2_PIN;
 8004d18:	2304      	movs	r3, #4
 8004d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D2_PIN_AF;
 8004d1c:	2309      	movs	r3, #9
 8004d1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_D2_GPIO_PORT, &GPIO_InitStruct);
 8004d20:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004d24:	4619      	mov	r1, r3
 8004d26:	4822      	ldr	r0, [pc, #136]	@ (8004db0 <OSPI_NOR_MspInit+0x29c>)
 8004d28:	f002 fe70 	bl	8007a0c <HAL_GPIO_Init>

  /* OctoSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D3_PIN;
 8004d2c:	2340      	movs	r3, #64	@ 0x40
 8004d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D3_PIN_AF;
 8004d30:	2306      	movs	r3, #6
 8004d32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_D3_GPIO_PORT, &GPIO_InitStruct);
 8004d34:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004d38:	4619      	mov	r1, r3
 8004d3a:	481e      	ldr	r0, [pc, #120]	@ (8004db4 <OSPI_NOR_MspInit+0x2a0>)
 8004d3c:	f002 fe66 	bl	8007a0c <HAL_GPIO_Init>

  /* OctoSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D4_PIN;
 8004d40:	2380      	movs	r3, #128	@ 0x80
 8004d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D4_PIN_AF;
 8004d44:	230a      	movs	r3, #10
 8004d46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_D4_GPIO_PORT, &GPIO_InitStruct);
 8004d48:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	4818      	ldr	r0, [pc, #96]	@ (8004db0 <OSPI_NOR_MspInit+0x29c>)
 8004d50:	f002 fe5c 	bl	8007a0c <HAL_GPIO_Init>

  /* OctoSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D5_PIN;
 8004d54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D5_PIN_AF;
 8004d5a:	230a      	movs	r3, #10
 8004d5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_D5_GPIO_PORT, &GPIO_InitStruct);
 8004d5e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004d62:	4619      	mov	r1, r3
 8004d64:	4812      	ldr	r0, [pc, #72]	@ (8004db0 <OSPI_NOR_MspInit+0x29c>)
 8004d66:	f002 fe51 	bl	8007a0c <HAL_GPIO_Init>

  /* OctoSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D6_PIN;
 8004d6a:	2308      	movs	r3, #8
 8004d6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D6_PIN_AF;
 8004d6e:	2304      	movs	r3, #4
 8004d70:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_D6_GPIO_PORT, &GPIO_InitStruct);
 8004d72:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004d76:	4619      	mov	r1, r3
 8004d78:	480a      	ldr	r0, [pc, #40]	@ (8004da4 <OSPI_NOR_MspInit+0x290>)
 8004d7a:	f002 fe47 	bl	8007a0c <HAL_GPIO_Init>

  /* OctoSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D7_PIN;
 8004d7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D7_PIN_AF;
 8004d84:	230a      	movs	r3, #10
 8004d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_D7_GPIO_PORT, &GPIO_InitStruct);
 8004d88:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	4808      	ldr	r0, [pc, #32]	@ (8004db0 <OSPI_NOR_MspInit+0x29c>)
 8004d90:	f002 fe3c 	bl	8007a0c <HAL_GPIO_Init>
}
 8004d94:	bf00      	nop
 8004d96:	3750      	adds	r7, #80	@ 0x50
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	58024400 	.word	0x58024400
 8004da0:	58021800 	.word	0x58021800
 8004da4:	58020800 	.word	0x58020800
 8004da8:	58020400 	.word	0x58020400
 8004dac:	58021400 	.word	0x58021400
 8004db0:	58021000 	.word	0x58021000
 8004db4:	58020000 	.word	0x58020000

08004db8 <OSPI_NOR_MspDeInit>:
  * @brief  De-Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspDeInit(OSPI_HandleTypeDef *hospi)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* OctoSPI GPIO pins de-configuration  */
  HAL_GPIO_DeInit(OSPI_NOR_CLK_GPIO_PORT, OSPI_NOR_CLK_PIN);
 8004dc0:	2104      	movs	r1, #4
 8004dc2:	4823      	ldr	r0, [pc, #140]	@ (8004e50 <OSPI_NOR_MspDeInit+0x98>)
 8004dc4:	f002 ffca 	bl	8007d5c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_DQS_GPIO_PORT, OSPI_NOR_DQS_PIN);
 8004dc8:	2120      	movs	r1, #32
 8004dca:	4822      	ldr	r0, [pc, #136]	@ (8004e54 <OSPI_NOR_MspDeInit+0x9c>)
 8004dcc:	f002 ffc6 	bl	8007d5c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_CS_GPIO_PORT, OSPI_NOR_CS_PIN);
 8004dd0:	2140      	movs	r1, #64	@ 0x40
 8004dd2:	4821      	ldr	r0, [pc, #132]	@ (8004e58 <OSPI_NOR_MspDeInit+0xa0>)
 8004dd4:	f002 ffc2 	bl	8007d5c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D0_GPIO_PORT, OSPI_NOR_D0_PIN);
 8004dd8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004ddc:	481f      	ldr	r0, [pc, #124]	@ (8004e5c <OSPI_NOR_MspDeInit+0xa4>)
 8004dde:	f002 ffbd 	bl	8007d5c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D1_GPIO_PORT, OSPI_NOR_D1_PIN);
 8004de2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004de6:	481d      	ldr	r0, [pc, #116]	@ (8004e5c <OSPI_NOR_MspDeInit+0xa4>)
 8004de8:	f002 ffb8 	bl	8007d5c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D2_GPIO_PORT, OSPI_NOR_D2_PIN);
 8004dec:	2104      	movs	r1, #4
 8004dee:	481c      	ldr	r0, [pc, #112]	@ (8004e60 <OSPI_NOR_MspDeInit+0xa8>)
 8004df0:	f002 ffb4 	bl	8007d5c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D3_GPIO_PORT, OSPI_NOR_D3_PIN);
 8004df4:	2140      	movs	r1, #64	@ 0x40
 8004df6:	481b      	ldr	r0, [pc, #108]	@ (8004e64 <OSPI_NOR_MspDeInit+0xac>)
 8004df8:	f002 ffb0 	bl	8007d5c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D4_GPIO_PORT, OSPI_NOR_D4_PIN);
 8004dfc:	2180      	movs	r1, #128	@ 0x80
 8004dfe:	4818      	ldr	r0, [pc, #96]	@ (8004e60 <OSPI_NOR_MspDeInit+0xa8>)
 8004e00:	f002 ffac 	bl	8007d5c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D5_GPIO_PORT, OSPI_NOR_D5_PIN);
 8004e04:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004e08:	4815      	ldr	r0, [pc, #84]	@ (8004e60 <OSPI_NOR_MspDeInit+0xa8>)
 8004e0a:	f002 ffa7 	bl	8007d5c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D6_GPIO_PORT, OSPI_NOR_D6_PIN);
 8004e0e:	2108      	movs	r1, #8
 8004e10:	4810      	ldr	r0, [pc, #64]	@ (8004e54 <OSPI_NOR_MspDeInit+0x9c>)
 8004e12:	f002 ffa3 	bl	8007d5c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D7_GPIO_PORT, OSPI_NOR_D7_PIN);
 8004e16:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004e1a:	4811      	ldr	r0, [pc, #68]	@ (8004e60 <OSPI_NOR_MspDeInit+0xa8>)
 8004e1c:	f002 ff9e 	bl	8007d5c <HAL_GPIO_DeInit>

  /* Reset the OctoSPI memory interface */
  OSPI_NOR_FORCE_RESET();
 8004e20:	4b11      	ldr	r3, [pc, #68]	@ (8004e68 <OSPI_NOR_MspDeInit+0xb0>)
 8004e22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e24:	4a10      	ldr	r2, [pc, #64]	@ (8004e68 <OSPI_NOR_MspDeInit+0xb0>)
 8004e26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e2a:	67d3      	str	r3, [r2, #124]	@ 0x7c
  OSPI_NOR_RELEASE_RESET();
 8004e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8004e68 <OSPI_NOR_MspDeInit+0xb0>)
 8004e2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e30:	4a0d      	ldr	r2, [pc, #52]	@ (8004e68 <OSPI_NOR_MspDeInit+0xb0>)
 8004e32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e36:	67d3      	str	r3, [r2, #124]	@ 0x7c

  /* Disable the OctoSPI memory interface clock */
  OSPI_NOR_CLK_DISABLE();
 8004e38:	4b0b      	ldr	r3, [pc, #44]	@ (8004e68 <OSPI_NOR_MspDeInit+0xb0>)
 8004e3a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8004e68 <OSPI_NOR_MspDeInit+0xb0>)
 8004e40:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e44:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
}
 8004e48:	bf00      	nop
 8004e4a:	3708      	adds	r7, #8
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	58020400 	.word	0x58020400
 8004e54:	58020800 	.word	0x58020800
 8004e58:	58021800 	.word	0x58021800
 8004e5c:	58021400 	.word	0x58021400
 8004e60:	58021000 	.word	0x58021000
 8004e64:	58020000 	.word	0x58020000
 8004e68:	58024400 	.word	0x58024400

08004e6c <OSPI_NOR_ResetMemory>:
  * @brief  This function reset the OSPI memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ResetMemory (uint32_t Instance)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8004e74:	2300      	movs	r3, #0
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <OSPI_NOR_ResetMemory+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004e7e:	f06f 0301 	mvn.w	r3, #1
 8004e82:	60fb      	str	r3, [r7, #12]
 8004e84:	e07f      	b.n	8004f86 <OSPI_NOR_ResetMemory+0x11a>
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	225c      	movs	r2, #92	@ 0x5c
 8004e8a:	fb02 f303 	mul.w	r3, r2, r3
 8004e8e:	4a40      	ldr	r2, [pc, #256]	@ (8004f90 <OSPI_NOR_ResetMemory+0x124>)
 8004e90:	4413      	add	r3, r2
 8004e92:	2200      	movs	r2, #0
 8004e94:	2100      	movs	r1, #0
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fe fedf 	bl	8003c5a <MX25LM51245G_ResetEnable>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <OSPI_NOR_ResetMemory+0x3e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004ea2:	f06f 0304 	mvn.w	r3, #4
 8004ea6:	60fb      	str	r3, [r7, #12]
 8004ea8:	e06d      	b.n	8004f86 <OSPI_NOR_ResetMemory+0x11a>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	225c      	movs	r2, #92	@ 0x5c
 8004eae:	fb02 f303 	mul.w	r3, r2, r3
 8004eb2:	4a37      	ldr	r2, [pc, #220]	@ (8004f90 <OSPI_NOR_ResetMemory+0x124>)
 8004eb4:	4413      	add	r3, r2
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	2100      	movs	r1, #0
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7fe ff25 	bl	8003d0a <MX25LM51245G_ResetMemory>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <OSPI_NOR_ResetMemory+0x62>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004ec6:	f06f 0304 	mvn.w	r3, #4
 8004eca:	60fb      	str	r3, [r7, #12]
 8004ecc:	e05b      	b.n	8004f86 <OSPI_NOR_ResetMemory+0x11a>
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	225c      	movs	r2, #92	@ 0x5c
 8004ed2:	fb02 f303 	mul.w	r3, r2, r3
 8004ed6:	4a2e      	ldr	r2, [pc, #184]	@ (8004f90 <OSPI_NOR_ResetMemory+0x124>)
 8004ed8:	4413      	add	r3, r2
 8004eda:	2200      	movs	r2, #0
 8004edc:	2101      	movs	r1, #1
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7fe febb 	bl	8003c5a <MX25LM51245G_ResetEnable>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d003      	beq.n	8004ef2 <OSPI_NOR_ResetMemory+0x86>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004eea:	f06f 0304 	mvn.w	r3, #4
 8004eee:	60fb      	str	r3, [r7, #12]
 8004ef0:	e049      	b.n	8004f86 <OSPI_NOR_ResetMemory+0x11a>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	225c      	movs	r2, #92	@ 0x5c
 8004ef6:	fb02 f303 	mul.w	r3, r2, r3
 8004efa:	4a25      	ldr	r2, [pc, #148]	@ (8004f90 <OSPI_NOR_ResetMemory+0x124>)
 8004efc:	4413      	add	r3, r2
 8004efe:	2200      	movs	r2, #0
 8004f00:	2101      	movs	r1, #1
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7fe ff01 	bl	8003d0a <MX25LM51245G_ResetMemory>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d003      	beq.n	8004f16 <OSPI_NOR_ResetMemory+0xaa>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004f0e:	f06f 0304 	mvn.w	r3, #4
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	e037      	b.n	8004f86 <OSPI_NOR_ResetMemory+0x11a>
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	225c      	movs	r2, #92	@ 0x5c
 8004f1a:	fb02 f303 	mul.w	r3, r2, r3
 8004f1e:	4a1c      	ldr	r2, [pc, #112]	@ (8004f90 <OSPI_NOR_ResetMemory+0x124>)
 8004f20:	4413      	add	r3, r2
 8004f22:	2201      	movs	r2, #1
 8004f24:	2101      	movs	r1, #1
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7fe fe97 	bl	8003c5a <MX25LM51245G_ResetEnable>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <OSPI_NOR_ResetMemory+0xce>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004f32:	f06f 0304 	mvn.w	r3, #4
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	e025      	b.n	8004f86 <OSPI_NOR_ResetMemory+0x11a>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	225c      	movs	r2, #92	@ 0x5c
 8004f3e:	fb02 f303 	mul.w	r3, r2, r3
 8004f42:	4a13      	ldr	r2, [pc, #76]	@ (8004f90 <OSPI_NOR_ResetMemory+0x124>)
 8004f44:	4413      	add	r3, r2
 8004f46:	2201      	movs	r2, #1
 8004f48:	2101      	movs	r1, #1
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7fe fedd 	bl	8003d0a <MX25LM51245G_ResetMemory>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <OSPI_NOR_ResetMemory+0xf2>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004f56:	f06f 0304 	mvn.w	r3, #4
 8004f5a:	60fb      	str	r3, [r7, #12]
 8004f5c:	e013      	b.n	8004f86 <OSPI_NOR_ResetMemory+0x11a>
  }
  else
  {
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 8004f5e:	4a0d      	ldr	r2, [pc, #52]	@ (8004f94 <OSPI_NOR_ResetMemory+0x128>)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2101      	movs	r1, #1
 8004f64:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;         /* After reset H/W back to SPI mode by default  */
 8004f68:	4a0a      	ldr	r2, [pc, #40]	@ (8004f94 <OSPI_NOR_ResetMemory+0x128>)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	00db      	lsls	r3, r3, #3
 8004f6e:	4413      	add	r3, r2
 8004f70:	2200      	movs	r2, #0
 8004f72:	705a      	strb	r2, [r3, #1]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;     /* After reset S/W setting to STR mode          */
 8004f74:	4a07      	ldr	r2, [pc, #28]	@ (8004f94 <OSPI_NOR_ResetMemory+0x128>)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	00db      	lsls	r3, r3, #3
 8004f7a:	4413      	add	r3, r2
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	709a      	strb	r2, [r3, #2]

    /* After SWreset CMD, wait in case SWReset occurred during erase operation */
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 8004f80:	2064      	movs	r0, #100	@ 0x64
 8004f82:	f000 fd19 	bl	80059b8 <HAL_Delay>
  }

  /* Return BSP status */
  return ret;
 8004f86:	68fb      	ldr	r3, [r7, #12]
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	24001324 	.word	0x24001324
 8004f94:	24001380 	.word	0x24001380

08004f98 <OSPI_NOR_EnterDOPIMode>:
  * @brief  This function enables the octal DTR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af02      	add	r7, sp, #8
 8004f9e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <OSPI_NOR_EnterDOPIMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004faa:	f06f 0301 	mvn.w	r3, #1
 8004fae:	60fb      	str	r3, [r7, #12]
 8004fb0:	e0c3      	b.n	800513a <OSPI_NOR_EnterDOPIMode+0x1a2>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	225c      	movs	r2, #92	@ 0x5c
 8004fb6:	fb02 f303 	mul.w	r3, r2, r3
 8004fba:	4a62      	ldr	r2, [pc, #392]	@ (8005144 <OSPI_NOR_EnterDOPIMode+0x1ac>)
 8004fbc:	1898      	adds	r0, r3, r2
 8004fbe:	4a62      	ldr	r2, [pc, #392]	@ (8005148 <OSPI_NOR_EnterDOPIMode+0x1b0>)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	00db      	lsls	r3, r3, #3
 8004fc4:	4413      	add	r3, r2
 8004fc6:	7859      	ldrb	r1, [r3, #1]
 8004fc8:	4a5f      	ldr	r2, [pc, #380]	@ (8005148 <OSPI_NOR_EnterDOPIMode+0x1b0>)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	4413      	add	r3, r2
 8004fd0:	789b      	ldrb	r3, [r3, #2]
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	f7fe fc47 	bl	8003866 <MX25LM51245G_WriteEnable>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d003      	beq.n	8004fe6 <OSPI_NOR_EnterDOPIMode+0x4e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004fde:	f06f 0304 	mvn.w	r3, #4
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	e0a9      	b.n	800513a <OSPI_NOR_EnterDOPIMode+0x1a2>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, CONF_OSPI_DUMMY_CYCLES) != MX25LM51245G_OK)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	225c      	movs	r2, #92	@ 0x5c
 8004fea:	fb02 f303 	mul.w	r3, r2, r3
 8004fee:	4a55      	ldr	r2, [pc, #340]	@ (8005144 <OSPI_NOR_EnterDOPIMode+0x1ac>)
 8004ff0:	1898      	adds	r0, r3, r2
 8004ff2:	4a55      	ldr	r2, [pc, #340]	@ (8005148 <OSPI_NOR_EnterDOPIMode+0x1b0>)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	00db      	lsls	r3, r3, #3
 8004ff8:	4413      	add	r3, r2
 8004ffa:	7859      	ldrb	r1, [r3, #1]
 8004ffc:	4a52      	ldr	r2, [pc, #328]	@ (8005148 <OSPI_NOR_EnterDOPIMode+0x1b0>)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	00db      	lsls	r3, r3, #3
 8005002:	4413      	add	r3, r2
 8005004:	789a      	ldrb	r2, [r3, #2]
 8005006:	2303      	movs	r3, #3
 8005008:	9300      	str	r3, [sp, #0]
 800500a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800500e:	f7fe fcf5 	bl	80039fc <MX25LM51245G_WriteCfg2Register>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d003      	beq.n	8005020 <OSPI_NOR_EnterDOPIMode+0x88>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8005018:	f06f 0304 	mvn.w	r3, #4
 800501c:	60fb      	str	r3, [r7, #12]
 800501e:	e08c      	b.n	800513a <OSPI_NOR_EnterDOPIMode+0x1a2>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	225c      	movs	r2, #92	@ 0x5c
 8005024:	fb02 f303 	mul.w	r3, r2, r3
 8005028:	4a46      	ldr	r2, [pc, #280]	@ (8005144 <OSPI_NOR_EnterDOPIMode+0x1ac>)
 800502a:	1898      	adds	r0, r3, r2
 800502c:	4a46      	ldr	r2, [pc, #280]	@ (8005148 <OSPI_NOR_EnterDOPIMode+0x1b0>)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	00db      	lsls	r3, r3, #3
 8005032:	4413      	add	r3, r2
 8005034:	7859      	ldrb	r1, [r3, #1]
 8005036:	4a44      	ldr	r2, [pc, #272]	@ (8005148 <OSPI_NOR_EnterDOPIMode+0x1b0>)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	4413      	add	r3, r2
 800503e:	789b      	ldrb	r3, [r3, #2]
 8005040:	461a      	mov	r2, r3
 8005042:	f7fe fc10 	bl	8003866 <MX25LM51245G_WriteEnable>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d003      	beq.n	8005054 <OSPI_NOR_EnterDOPIMode+0xbc>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800504c:	f06f 0304 	mvn.w	r3, #4
 8005050:	60fb      	str	r3, [r7, #12]
 8005052:	e072      	b.n	800513a <OSPI_NOR_EnterDOPIMode+0x1a2>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	225c      	movs	r2, #92	@ 0x5c
 8005058:	fb02 f303 	mul.w	r3, r2, r3
 800505c:	4a39      	ldr	r2, [pc, #228]	@ (8005144 <OSPI_NOR_EnterDOPIMode+0x1ac>)
 800505e:	1898      	adds	r0, r3, r2
 8005060:	4a39      	ldr	r2, [pc, #228]	@ (8005148 <OSPI_NOR_EnterDOPIMode+0x1b0>)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	00db      	lsls	r3, r3, #3
 8005066:	4413      	add	r3, r2
 8005068:	7859      	ldrb	r1, [r3, #1]
 800506a:	4a37      	ldr	r2, [pc, #220]	@ (8005148 <OSPI_NOR_EnterDOPIMode+0x1b0>)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	00db      	lsls	r3, r3, #3
 8005070:	4413      	add	r3, r2
 8005072:	789a      	ldrb	r2, [r3, #2]
 8005074:	2302      	movs	r3, #2
 8005076:	9300      	str	r3, [sp, #0]
 8005078:	2300      	movs	r3, #0
 800507a:	f7fe fcbf 	bl	80039fc <MX25LM51245G_WriteCfg2Register>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d003      	beq.n	800508c <OSPI_NOR_EnterDOPIMode+0xf4>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8005084:	f06f 0304 	mvn.w	r3, #4
 8005088:	60fb      	str	r3, [r7, #12]
 800508a:	e056      	b.n	800513a <OSPI_NOR_EnterDOPIMode+0x1a2>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 800508c:	2028      	movs	r0, #40	@ 0x28
 800508e:	f000 fc93 	bl	80059b8 <HAL_Delay>

    /* Reconfigure the memory type of the peripheral */
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8005092:	4a2c      	ldr	r2, [pc, #176]	@ (8005144 <OSPI_NOR_EnterDOPIMode+0x1ac>)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	215c      	movs	r1, #92	@ 0x5c
 8005098:	fb01 f303 	mul.w	r3, r1, r3
 800509c:	4413      	add	r3, r2
 800509e:	330c      	adds	r3, #12
 80050a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80050a4:	601a      	str	r2, [r3, #0]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 80050a6:	4a27      	ldr	r2, [pc, #156]	@ (8005144 <OSPI_NOR_EnterDOPIMode+0x1ac>)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	215c      	movs	r1, #92	@ 0x5c
 80050ac:	fb01 f303 	mul.w	r3, r1, r3
 80050b0:	4413      	add	r3, r2
 80050b2:	332c      	adds	r3, #44	@ 0x2c
 80050b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050b8:	601a      	str	r2, [r3, #0]
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	225c      	movs	r2, #92	@ 0x5c
 80050be:	fb02 f303 	mul.w	r3, r2, r3
 80050c2:	4a20      	ldr	r2, [pc, #128]	@ (8005144 <OSPI_NOR_EnterDOPIMode+0x1ac>)
 80050c4:	4413      	add	r3, r2
 80050c6:	4618      	mov	r0, r3
 80050c8:	f004 f9c6 	bl	8009458 <HAL_OSPI_Init>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d003      	beq.n	80050da <OSPI_NOR_EnterDOPIMode+0x142>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80050d2:	f06f 0303 	mvn.w	r3, #3
 80050d6:	60fb      	str	r3, [r7, #12]
 80050d8:	e02f      	b.n	800513a <OSPI_NOR_EnterDOPIMode+0x1a2>
    }
    /* Check Flash busy ? */
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	225c      	movs	r2, #92	@ 0x5c
 80050de:	fb02 f303 	mul.w	r3, r2, r3
 80050e2:	4a18      	ldr	r2, [pc, #96]	@ (8005144 <OSPI_NOR_EnterDOPIMode+0x1ac>)
 80050e4:	4413      	add	r3, r2
 80050e6:	2201      	movs	r2, #1
 80050e8:	2101      	movs	r1, #1
 80050ea:	4618      	mov	r0, r3
 80050ec:	f7fe f9f5 	bl	80034da <MX25LM51245G_AutoPollingMemReady>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d003      	beq.n	80050fe <OSPI_NOR_EnterDOPIMode+0x166>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80050f6:	f06f 0304 	mvn.w	r3, #4
 80050fa:	60fb      	str	r3, [r7, #12]
 80050fc:	e01d      	b.n	800513a <OSPI_NOR_EnterDOPIMode+0x1a2>
    }
    /* Check the configuration has been correctly done */
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	225c      	movs	r2, #92	@ 0x5c
 8005102:	fb02 f303 	mul.w	r3, r2, r3
 8005106:	4a0f      	ldr	r2, [pc, #60]	@ (8005144 <OSPI_NOR_EnterDOPIMode+0x1ac>)
 8005108:	1898      	adds	r0, r3, r2
 800510a:	f107 0308 	add.w	r3, r7, #8
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	2300      	movs	r3, #0
 8005112:	2201      	movs	r2, #1
 8005114:	2101      	movs	r1, #1
 8005116:	f7fe fd06 	bl	8003b26 <MX25LM51245G_ReadCfg2Register>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d003      	beq.n	8005128 <OSPI_NOR_EnterDOPIMode+0x190>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005120:	f06f 0304 	mvn.w	r3, #4
 8005124:	60fb      	str	r3, [r7, #12]
 8005126:	e008      	b.n	800513a <OSPI_NOR_EnterDOPIMode+0x1a2>
    }
    else if (reg[0] != MX25LM51245G_CR2_DOPI)
 8005128:	7a3b      	ldrb	r3, [r7, #8]
 800512a:	2b02      	cmp	r3, #2
 800512c:	d003      	beq.n	8005136 <OSPI_NOR_EnterDOPIMode+0x19e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800512e:	f06f 0304 	mvn.w	r3, #4
 8005132:	60fb      	str	r3, [r7, #12]
 8005134:	e001      	b.n	800513a <OSPI_NOR_EnterDOPIMode+0x1a2>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8005136:	2300      	movs	r3, #0
 8005138:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return BSP status */
  return ret;
 800513a:	68fb      	ldr	r3, [r7, #12]
}
 800513c:	4618      	mov	r0, r3
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	24001324 	.word	0x24001324
 8005148:	24001380 	.word	0x24001380

0800514c <OSPI_NOR_EnterSOPIMode>:
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b086      	sub	sp, #24
 8005150:	af02      	add	r7, sp, #8
 8005152:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8005154:	2300      	movs	r3, #0
 8005156:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <OSPI_NOR_EnterSOPIMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800515e:	f06f 0301 	mvn.w	r3, #1
 8005162:	60fb      	str	r3, [r7, #12]
 8005164:	e09f      	b.n	80052a6 <OSPI_NOR_EnterSOPIMode+0x15a>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	225c      	movs	r2, #92	@ 0x5c
 800516a:	fb02 f303 	mul.w	r3, r2, r3
 800516e:	4a50      	ldr	r2, [pc, #320]	@ (80052b0 <OSPI_NOR_EnterSOPIMode+0x164>)
 8005170:	1898      	adds	r0, r3, r2
 8005172:	4a50      	ldr	r2, [pc, #320]	@ (80052b4 <OSPI_NOR_EnterSOPIMode+0x168>)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	00db      	lsls	r3, r3, #3
 8005178:	4413      	add	r3, r2
 800517a:	7859      	ldrb	r1, [r3, #1]
 800517c:	4a4d      	ldr	r2, [pc, #308]	@ (80052b4 <OSPI_NOR_EnterSOPIMode+0x168>)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	00db      	lsls	r3, r3, #3
 8005182:	4413      	add	r3, r2
 8005184:	789b      	ldrb	r3, [r3, #2]
 8005186:	461a      	mov	r2, r3
 8005188:	f7fe fb6d 	bl	8003866 <MX25LM51245G_WriteEnable>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d003      	beq.n	800519a <OSPI_NOR_EnterSOPIMode+0x4e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8005192:	f06f 0304 	mvn.w	r3, #4
 8005196:	60fb      	str	r3, [r7, #12]
 8005198:	e085      	b.n	80052a6 <OSPI_NOR_EnterSOPIMode+0x15a>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, CONF_OSPI_DUMMY_CYCLES) != MX25LM51245G_OK)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	225c      	movs	r2, #92	@ 0x5c
 800519e:	fb02 f303 	mul.w	r3, r2, r3
 80051a2:	4a43      	ldr	r2, [pc, #268]	@ (80052b0 <OSPI_NOR_EnterSOPIMode+0x164>)
 80051a4:	1898      	adds	r0, r3, r2
 80051a6:	4a43      	ldr	r2, [pc, #268]	@ (80052b4 <OSPI_NOR_EnterSOPIMode+0x168>)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	00db      	lsls	r3, r3, #3
 80051ac:	4413      	add	r3, r2
 80051ae:	7859      	ldrb	r1, [r3, #1]
 80051b0:	4a40      	ldr	r2, [pc, #256]	@ (80052b4 <OSPI_NOR_EnterSOPIMode+0x168>)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	00db      	lsls	r3, r3, #3
 80051b6:	4413      	add	r3, r2
 80051b8:	789a      	ldrb	r2, [r3, #2]
 80051ba:	2303      	movs	r3, #3
 80051bc:	9300      	str	r3, [sp, #0]
 80051be:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80051c2:	f7fe fc1b 	bl	80039fc <MX25LM51245G_WriteCfg2Register>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d003      	beq.n	80051d4 <OSPI_NOR_EnterSOPIMode+0x88>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80051cc:	f06f 0304 	mvn.w	r3, #4
 80051d0:	60fb      	str	r3, [r7, #12]
 80051d2:	e068      	b.n	80052a6 <OSPI_NOR_EnterSOPIMode+0x15a>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	225c      	movs	r2, #92	@ 0x5c
 80051d8:	fb02 f303 	mul.w	r3, r2, r3
 80051dc:	4a34      	ldr	r2, [pc, #208]	@ (80052b0 <OSPI_NOR_EnterSOPIMode+0x164>)
 80051de:	1898      	adds	r0, r3, r2
 80051e0:	4a34      	ldr	r2, [pc, #208]	@ (80052b4 <OSPI_NOR_EnterSOPIMode+0x168>)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	00db      	lsls	r3, r3, #3
 80051e6:	4413      	add	r3, r2
 80051e8:	7859      	ldrb	r1, [r3, #1]
 80051ea:	4a32      	ldr	r2, [pc, #200]	@ (80052b4 <OSPI_NOR_EnterSOPIMode+0x168>)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	00db      	lsls	r3, r3, #3
 80051f0:	4413      	add	r3, r2
 80051f2:	789b      	ldrb	r3, [r3, #2]
 80051f4:	461a      	mov	r2, r3
 80051f6:	f7fe fb36 	bl	8003866 <MX25LM51245G_WriteEnable>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d003      	beq.n	8005208 <OSPI_NOR_EnterSOPIMode+0xbc>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8005200:	f06f 0304 	mvn.w	r3, #4
 8005204:	60fb      	str	r3, [r7, #12]
 8005206:	e04e      	b.n	80052a6 <OSPI_NOR_EnterSOPIMode+0x15a>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	225c      	movs	r2, #92	@ 0x5c
 800520c:	fb02 f303 	mul.w	r3, r2, r3
 8005210:	4a27      	ldr	r2, [pc, #156]	@ (80052b0 <OSPI_NOR_EnterSOPIMode+0x164>)
 8005212:	1898      	adds	r0, r3, r2
 8005214:	4a27      	ldr	r2, [pc, #156]	@ (80052b4 <OSPI_NOR_EnterSOPIMode+0x168>)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	00db      	lsls	r3, r3, #3
 800521a:	4413      	add	r3, r2
 800521c:	7859      	ldrb	r1, [r3, #1]
 800521e:	4a25      	ldr	r2, [pc, #148]	@ (80052b4 <OSPI_NOR_EnterSOPIMode+0x168>)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	00db      	lsls	r3, r3, #3
 8005224:	4413      	add	r3, r2
 8005226:	789a      	ldrb	r2, [r3, #2]
 8005228:	2301      	movs	r3, #1
 800522a:	9300      	str	r3, [sp, #0]
 800522c:	2300      	movs	r3, #0
 800522e:	f7fe fbe5 	bl	80039fc <MX25LM51245G_WriteCfg2Register>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d003      	beq.n	8005240 <OSPI_NOR_EnterSOPIMode+0xf4>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8005238:	f06f 0304 	mvn.w	r3, #4
 800523c:	60fb      	str	r3, [r7, #12]
 800523e:	e032      	b.n	80052a6 <OSPI_NOR_EnterSOPIMode+0x15a>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8005240:	2028      	movs	r0, #40	@ 0x28
 8005242:	f000 fbb9 	bl	80059b8 <HAL_Delay>

    /* Check Flash busy ? */
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	225c      	movs	r2, #92	@ 0x5c
 800524a:	fb02 f303 	mul.w	r3, r2, r3
 800524e:	4a18      	ldr	r2, [pc, #96]	@ (80052b0 <OSPI_NOR_EnterSOPIMode+0x164>)
 8005250:	4413      	add	r3, r2
 8005252:	2200      	movs	r2, #0
 8005254:	2101      	movs	r1, #1
 8005256:	4618      	mov	r0, r3
 8005258:	f7fe f93f 	bl	80034da <MX25LM51245G_AutoPollingMemReady>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <OSPI_NOR_EnterSOPIMode+0x11e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005262:	f06f 0304 	mvn.w	r3, #4
 8005266:	60fb      	str	r3, [r7, #12]
 8005268:	e01d      	b.n	80052a6 <OSPI_NOR_EnterSOPIMode+0x15a>
    }
    /* Check the configuration has been correctly done */
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	225c      	movs	r2, #92	@ 0x5c
 800526e:	fb02 f303 	mul.w	r3, r2, r3
 8005272:	4a0f      	ldr	r2, [pc, #60]	@ (80052b0 <OSPI_NOR_EnterSOPIMode+0x164>)
 8005274:	1898      	adds	r0, r3, r2
 8005276:	f107 0308 	add.w	r3, r7, #8
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	2300      	movs	r3, #0
 800527e:	2200      	movs	r2, #0
 8005280:	2101      	movs	r1, #1
 8005282:	f7fe fc50 	bl	8003b26 <MX25LM51245G_ReadCfg2Register>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d003      	beq.n	8005294 <OSPI_NOR_EnterSOPIMode+0x148>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800528c:	f06f 0304 	mvn.w	r3, #4
 8005290:	60fb      	str	r3, [r7, #12]
 8005292:	e008      	b.n	80052a6 <OSPI_NOR_EnterSOPIMode+0x15a>
    }
    else if (reg[0] != MX25LM51245G_CR2_SOPI)
 8005294:	7a3b      	ldrb	r3, [r7, #8]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d003      	beq.n	80052a2 <OSPI_NOR_EnterSOPIMode+0x156>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800529a:	f06f 0304 	mvn.w	r3, #4
 800529e:	60fb      	str	r3, [r7, #12]
 80052a0:	e001      	b.n	80052a6 <OSPI_NOR_EnterSOPIMode+0x15a>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 80052a2:	2300      	movs	r3, #0
 80052a4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return BSP status */
  return ret;
 80052a6:	68fb      	ldr	r3, [r7, #12]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3710      	adds	r7, #16
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	24001324 	.word	0x24001324
 80052b4:	24001380 	.word	0x24001380

080052b8 <OSPI_NOR_ExitOPIMode>:
  * @brief  This function disables the octal DTR or STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ExitOPIMode (uint32_t Instance)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b086      	sub	sp, #24
 80052bc:	af02      	add	r7, sp, #8
 80052be:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80052c0:	2300      	movs	r3, #0
 80052c2:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d003      	beq.n	80052d2 <OSPI_NOR_ExitOPIMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80052ca:	f06f 0301 	mvn.w	r3, #1
 80052ce:	60fb      	str	r3, [r7, #12]
 80052d0:	e094      	b.n	80053fc <OSPI_NOR_ExitOPIMode+0x144>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	225c      	movs	r2, #92	@ 0x5c
 80052d6:	fb02 f303 	mul.w	r3, r2, r3
 80052da:	4a4b      	ldr	r2, [pc, #300]	@ (8005408 <OSPI_NOR_ExitOPIMode+0x150>)
 80052dc:	1898      	adds	r0, r3, r2
 80052de:	4a4b      	ldr	r2, [pc, #300]	@ (800540c <OSPI_NOR_ExitOPIMode+0x154>)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	00db      	lsls	r3, r3, #3
 80052e4:	4413      	add	r3, r2
 80052e6:	7859      	ldrb	r1, [r3, #1]
 80052e8:	4a48      	ldr	r2, [pc, #288]	@ (800540c <OSPI_NOR_ExitOPIMode+0x154>)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	00db      	lsls	r3, r3, #3
 80052ee:	4413      	add	r3, r2
 80052f0:	789b      	ldrb	r3, [r3, #2]
 80052f2:	461a      	mov	r2, r3
 80052f4:	f7fe fab7 	bl	8003866 <MX25LM51245G_WriteEnable>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d003      	beq.n	8005306 <OSPI_NOR_ExitOPIMode+0x4e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80052fe:	f06f 0304 	mvn.w	r3, #4
 8005302:	60fb      	str	r3, [r7, #12]
 8005304:	e07a      	b.n	80053fc <OSPI_NOR_ExitOPIMode+0x144>
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 8005306:	2300      	movs	r3, #0
 8005308:	723b      	strb	r3, [r7, #8]
    reg[1] = 0;
 800530a:	2300      	movs	r3, #0
 800530c:	727b      	strb	r3, [r7, #9]
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	225c      	movs	r2, #92	@ 0x5c
 8005312:	fb02 f303 	mul.w	r3, r2, r3
 8005316:	4a3c      	ldr	r2, [pc, #240]	@ (8005408 <OSPI_NOR_ExitOPIMode+0x150>)
 8005318:	1898      	adds	r0, r3, r2
 800531a:	4a3c      	ldr	r2, [pc, #240]	@ (800540c <OSPI_NOR_ExitOPIMode+0x154>)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	00db      	lsls	r3, r3, #3
 8005320:	4413      	add	r3, r2
 8005322:	7859      	ldrb	r1, [r3, #1]
 8005324:	4a39      	ldr	r2, [pc, #228]	@ (800540c <OSPI_NOR_ExitOPIMode+0x154>)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	00db      	lsls	r3, r3, #3
 800532a:	4413      	add	r3, r2
 800532c:	789a      	ldrb	r2, [r3, #2]
 800532e:	7a3b      	ldrb	r3, [r7, #8]
 8005330:	9300      	str	r3, [sp, #0]
 8005332:	2300      	movs	r3, #0
 8005334:	f7fe fb62 	bl	80039fc <MX25LM51245G_WriteCfg2Register>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <OSPI_NOR_ExitOPIMode+0x8e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800533e:	f06f 0304 	mvn.w	r3, #4
 8005342:	60fb      	str	r3, [r7, #12]
 8005344:	e05a      	b.n	80053fc <OSPI_NOR_ExitOPIMode+0x144>
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8005346:	2028      	movs	r0, #40	@ 0x28
 8005348:	f000 fb36 	bl	80059b8 <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 800534c:	4a2f      	ldr	r2, [pc, #188]	@ (800540c <OSPI_NOR_ExitOPIMode+0x154>)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	00db      	lsls	r3, r3, #3
 8005352:	4413      	add	r3, r2
 8005354:	789b      	ldrb	r3, [r3, #2]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d120      	bne.n	800539c <OSPI_NOR_ExitOPIMode+0xe4>
      {
        /* Reconfigure the memory type of the peripheral */
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 800535a:	4a2b      	ldr	r2, [pc, #172]	@ (8005408 <OSPI_NOR_ExitOPIMode+0x150>)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	215c      	movs	r1, #92	@ 0x5c
 8005360:	fb01 f303 	mul.w	r3, r1, r3
 8005364:	4413      	add	r3, r2
 8005366:	330c      	adds	r3, #12
 8005368:	2200      	movs	r2, #0
 800536a:	601a      	str	r2, [r3, #0]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800536c:	4a26      	ldr	r2, [pc, #152]	@ (8005408 <OSPI_NOR_ExitOPIMode+0x150>)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	215c      	movs	r1, #92	@ 0x5c
 8005372:	fb01 f303 	mul.w	r3, r1, r3
 8005376:	4413      	add	r3, r2
 8005378:	332c      	adds	r3, #44	@ 0x2c
 800537a:	2200      	movs	r2, #0
 800537c:	601a      	str	r2, [r3, #0]
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	225c      	movs	r2, #92	@ 0x5c
 8005382:	fb02 f303 	mul.w	r3, r2, r3
 8005386:	4a20      	ldr	r2, [pc, #128]	@ (8005408 <OSPI_NOR_ExitOPIMode+0x150>)
 8005388:	4413      	add	r3, r2
 800538a:	4618      	mov	r0, r3
 800538c:	f004 f864 	bl	8009458 <HAL_OSPI_Init>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d002      	beq.n	800539c <OSPI_NOR_ExitOPIMode+0xe4>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8005396:	f06f 0303 	mvn.w	r3, #3
 800539a:	60fb      	str	r3, [r7, #12]
        }
      }

      /* Check Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	225c      	movs	r2, #92	@ 0x5c
 80053a0:	fb02 f303 	mul.w	r3, r2, r3
 80053a4:	4a18      	ldr	r2, [pc, #96]	@ (8005408 <OSPI_NOR_ExitOPIMode+0x150>)
 80053a6:	4413      	add	r3, r2
 80053a8:	2200      	movs	r2, #0
 80053aa:	2100      	movs	r1, #0
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7fe f894 	bl	80034da <MX25LM51245G_AutoPollingMemReady>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d003      	beq.n	80053c0 <OSPI_NOR_ExitOPIMode+0x108>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80053b8:	f06f 0304 	mvn.w	r3, #4
 80053bc:	60fb      	str	r3, [r7, #12]
 80053be:	e01d      	b.n	80053fc <OSPI_NOR_ExitOPIMode+0x144>
      }
      /* Check the configuration has been correctly done */
      else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	225c      	movs	r2, #92	@ 0x5c
 80053c4:	fb02 f303 	mul.w	r3, r2, r3
 80053c8:	4a0f      	ldr	r2, [pc, #60]	@ (8005408 <OSPI_NOR_ExitOPIMode+0x150>)
 80053ca:	1898      	adds	r0, r3, r2
 80053cc:	f107 0308 	add.w	r3, r7, #8
 80053d0:	9300      	str	r3, [sp, #0]
 80053d2:	2300      	movs	r3, #0
 80053d4:	2200      	movs	r2, #0
 80053d6:	2100      	movs	r1, #0
 80053d8:	f7fe fba5 	bl	8003b26 <MX25LM51245G_ReadCfg2Register>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <OSPI_NOR_ExitOPIMode+0x132>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80053e2:	f06f 0304 	mvn.w	r3, #4
 80053e6:	60fb      	str	r3, [r7, #12]
 80053e8:	e008      	b.n	80053fc <OSPI_NOR_ExitOPIMode+0x144>
      }
      else if (reg[0] != 0)
 80053ea:	7a3b      	ldrb	r3, [r7, #8]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d003      	beq.n	80053f8 <OSPI_NOR_ExitOPIMode+0x140>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80053f0:	f06f 0304 	mvn.w	r3, #4
 80053f4:	60fb      	str	r3, [r7, #12]
 80053f6:	e001      	b.n	80053fc <OSPI_NOR_ExitOPIMode+0x144>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80053f8:	2300      	movs	r3, #0
 80053fa:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 80053fc:	68fb      	ldr	r3, [r7, #12]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	24001324 	.word	0x24001324
 800540c:	24001380 	.word	0x24001380

08005410 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b088      	sub	sp, #32
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800541a:	2300      	movs	r3, #0
 800541c:	61fb      	str	r3, [r7, #28]

  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d11c      	bne.n	800545e <BSP_TS_Init+0x4e>
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d018      	beq.n	800545e <BSP_TS_Init+0x4e>
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8005434:	d813      	bhi.n	800545e <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00f      	beq.n	800545e <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8005446:	d80a      	bhi.n	800545e <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	68da      	ldr	r2, [r3, #12]
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	6819      	ldr	r1, [r3, #0]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	428b      	cmp	r3, r1
 8005456:	bf28      	it	cs
 8005458:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800545a:	429a      	cmp	r2, r3
 800545c:	d903      	bls.n	8005466 <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800545e:	f06f 0301 	mvn.w	r3, #1
 8005462:	61fb      	str	r3, [r7, #28]
 8005464:	e085      	b.n	8005572 <BSP_TS_Init+0x162>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f9e6 	bl	8005838 <FT5336_Probe>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d003      	beq.n	800547a <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 8005472:	f04f 33ff 	mov.w	r3, #4294967295
 8005476:	61fb      	str	r3, [r7, #28]
 8005478:	e07b      	b.n	8005572 <BSP_TS_Init+0x162>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	6819      	ldr	r1, [r3, #0]
 800547e:	483f      	ldr	r0, [pc, #252]	@ (800557c <BSP_TS_Init+0x16c>)
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	4613      	mov	r3, r2
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4413      	add	r3, r2
 8005488:	00db      	lsls	r3, r3, #3
 800548a:	4403      	add	r3, r0
 800548c:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	6859      	ldr	r1, [r3, #4]
 8005492:	483a      	ldr	r0, [pc, #232]	@ (800557c <BSP_TS_Init+0x16c>)
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	4613      	mov	r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	4413      	add	r3, r2
 800549c:	00db      	lsls	r3, r3, #3
 800549e:	4403      	add	r3, r0
 80054a0:	3304      	adds	r3, #4
 80054a2:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	6899      	ldr	r1, [r3, #8]
 80054a8:	4834      	ldr	r0, [pc, #208]	@ (800557c <BSP_TS_Init+0x16c>)
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	4613      	mov	r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4413      	add	r3, r2
 80054b2:	00db      	lsls	r3, r3, #3
 80054b4:	4403      	add	r3, r0
 80054b6:	3308      	adds	r3, #8
 80054b8:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	68d9      	ldr	r1, [r3, #12]
 80054be:	482f      	ldr	r0, [pc, #188]	@ (800557c <BSP_TS_Init+0x16c>)
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	4613      	mov	r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	4413      	add	r3, r2
 80054c8:	00db      	lsls	r3, r3, #3
 80054ca:	4403      	add	r3, r0
 80054cc:	330c      	adds	r3, #12
 80054ce:	6019      	str	r1, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 80054d0:	4b2b      	ldr	r3, [pc, #172]	@ (8005580 <BSP_TS_Init+0x170>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	492b      	ldr	r1, [pc, #172]	@ (8005584 <BSP_TS_Init+0x174>)
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80054de:	f107 010c 	add.w	r1, r7, #12
 80054e2:	4610      	mov	r0, r2
 80054e4:	4798      	blx	r3
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	da03      	bge.n	80054f4 <BSP_TS_Init+0xe4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80054ec:	f06f 0304 	mvn.w	r3, #4
 80054f0:	61fb      	str	r3, [r7, #28]
 80054f2:	e03e      	b.n	8005572 <BSP_TS_Init+0x162>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 80054f4:	6939      	ldr	r1, [r7, #16]
 80054f6:	4821      	ldr	r0, [pc, #132]	@ (800557c <BSP_TS_Init+0x16c>)
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	4613      	mov	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4413      	add	r3, r2
 8005500:	00db      	lsls	r3, r3, #3
 8005502:	4403      	add	r3, r0
 8005504:	3310      	adds	r3, #16
 8005506:	6019      	str	r1, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8005508:	6979      	ldr	r1, [r7, #20]
 800550a:	481c      	ldr	r0, [pc, #112]	@ (800557c <BSP_TS_Init+0x16c>)
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	4613      	mov	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	00db      	lsls	r3, r3, #3
 8005516:	4403      	add	r3, r0
 8005518:	3314      	adds	r3, #20
 800551a:	6019      	str	r1, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800551c:	2300      	movs	r3, #0
 800551e:	61bb      	str	r3, [r7, #24]
 8005520:	e024      	b.n	800556c <BSP_TS_Init+0x15c>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	4413      	add	r3, r2
 800552c:	1c59      	adds	r1, r3, #1
 800552e:	4813      	ldr	r0, [pc, #76]	@ (800557c <BSP_TS_Init+0x16c>)
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	4613      	mov	r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	4413      	add	r3, r2
 8005538:	005b      	lsls	r3, r3, #1
 800553a:	69ba      	ldr	r2, [r7, #24]
 800553c:	4413      	add	r3, r2
 800553e:	3306      	adds	r3, #6
 8005540:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	4413      	add	r3, r2
 800554e:	1c59      	adds	r1, r3, #1
 8005550:	480a      	ldr	r0, [pc, #40]	@ (800557c <BSP_TS_Init+0x16c>)
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	4613      	mov	r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4413      	add	r3, r2
 800555a:	005b      	lsls	r3, r3, #1
 800555c:	69ba      	ldr	r2, [r7, #24]
 800555e:	4413      	add	r3, r2
 8005560:	3308      	adds	r3, #8
 8005562:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	3301      	adds	r3, #1
 800556a:	61bb      	str	r3, [r7, #24]
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d9d7      	bls.n	8005522 <BSP_TS_Init+0x112>
        }
      }
    }
  }

  return ret;
 8005572:	69fb      	ldr	r3, [r7, #28]
}
 8005574:	4618      	mov	r0, r3
 8005576:	3720      	adds	r7, #32
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	24001390 	.word	0x24001390
 8005580:	24001388 	.word	0x24001388
 8005584:	2400138c 	.word	0x2400138c

08005588 <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b08a      	sub	sp, #40	@ 0x28
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005592:	2300      	movs	r3, #0
 8005594:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d003      	beq.n	80055a4 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800559c:	f06f 0301 	mvn.w	r3, #1
 80055a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80055a2:	e13e      	b.n	8005822 <BSP_TS_GetState+0x29a>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 80055a4:	4ba1      	ldr	r3, [pc, #644]	@ (800582c <BSP_TS_GetState+0x2a4>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	49a1      	ldr	r1, [pc, #644]	@ (8005830 <BSP_TS_GetState+0x2a8>)
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80055b2:	f107 0108 	add.w	r1, r7, #8
 80055b6:	4610      	mov	r0, r2
 80055b8:	4798      	blx	r3
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	da03      	bge.n	80055c8 <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80055c0:	f06f 0304 	mvn.w	r3, #4
 80055c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80055c6:	e12c      	b.n	8005822 <BSP_TS_GetState+0x29a>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f000 8110 	beq.w	80057f0 <BSP_TS_GetState+0x268>
    {
      x_oriented = state.TouchX;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 80055d8:	4996      	ldr	r1, [pc, #600]	@ (8005834 <BSP_TS_GetState+0x2ac>)
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	4613      	mov	r3, r2
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	4413      	add	r3, r2
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	440b      	add	r3, r1
 80055e6:	3308      	adds	r3, #8
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0308 	and.w	r3, r3, #8
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d003      	beq.n	80055fa <BSP_TS_GetState+0x72>
      {
        x_oriented = state.TouchY;
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 80055fa:	498e      	ldr	r1, [pc, #568]	@ (8005834 <BSP_TS_GetState+0x2ac>)
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	4613      	mov	r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	4413      	add	r3, r2
 8005604:	00db      	lsls	r3, r3, #3
 8005606:	440b      	add	r3, r1
 8005608:	3308      	adds	r3, #8
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00c      	beq.n	800562e <BSP_TS_GetState+0xa6>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 8005614:	4987      	ldr	r1, [pc, #540]	@ (8005834 <BSP_TS_GetState+0x2ac>)
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	4613      	mov	r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	00db      	lsls	r3, r3, #3
 8005620:	440b      	add	r3, r1
 8005622:	3310      	adds	r3, #16
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	3b01      	subs	r3, #1
 800562c:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 800562e:	4981      	ldr	r1, [pc, #516]	@ (8005834 <BSP_TS_GetState+0x2ac>)
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	4613      	mov	r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	4413      	add	r3, r2
 8005638:	00db      	lsls	r3, r3, #3
 800563a:	440b      	add	r3, r1
 800563c:	3308      	adds	r3, #8
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0304 	and.w	r3, r3, #4
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00b      	beq.n	8005660 <BSP_TS_GetState+0xd8>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 8005648:	497a      	ldr	r1, [pc, #488]	@ (8005834 <BSP_TS_GetState+0x2ac>)
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	4613      	mov	r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	4413      	add	r3, r2
 8005652:	00db      	lsls	r3, r3, #3
 8005654:	440b      	add	r3, r1
 8005656:	3314      	adds	r3, #20
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8005660:	4974      	ldr	r1, [pc, #464]	@ (8005834 <BSP_TS_GetState+0x2ac>)
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	4613      	mov	r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4413      	add	r3, r2
 800566a:	00db      	lsls	r3, r3, #3
 800566c:	440b      	add	r3, r1
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6a3a      	ldr	r2, [r7, #32]
 8005672:	fb02 f103 	mul.w	r1, r2, r3
 8005676:	486f      	ldr	r0, [pc, #444]	@ (8005834 <BSP_TS_GetState+0x2ac>)
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	4613      	mov	r3, r2
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	4413      	add	r3, r2
 8005680:	00db      	lsls	r3, r3, #3
 8005682:	4403      	add	r3, r0
 8005684:	3310      	adds	r3, #16
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	fbb1 f2f3 	udiv	r2, r1, r3
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8005690:	4968      	ldr	r1, [pc, #416]	@ (8005834 <BSP_TS_GetState+0x2ac>)
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	4613      	mov	r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4413      	add	r3, r2
 800569a:	00db      	lsls	r3, r3, #3
 800569c:	440b      	add	r3, r1
 800569e:	3304      	adds	r3, #4
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	69fa      	ldr	r2, [r7, #28]
 80056a4:	fb02 f103 	mul.w	r1, r2, r3
 80056a8:	4862      	ldr	r0, [pc, #392]	@ (8005834 <BSP_TS_GetState+0x2ac>)
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	4613      	mov	r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4413      	add	r3, r2
 80056b2:	00db      	lsls	r3, r3, #3
 80056b4:	4403      	add	r3, r0
 80056b6:	3314      	adds	r3, #20
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	fbb1 f2f3 	udiv	r2, r1, r3
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	6859      	ldr	r1, [r3, #4]
 80056cc:	4859      	ldr	r0, [pc, #356]	@ (8005834 <BSP_TS_GetState+0x2ac>)
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	4613      	mov	r3, r2
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4413      	add	r3, r2
 80056d6:	00db      	lsls	r3, r3, #3
 80056d8:	4403      	add	r3, r0
 80056da:	3318      	adds	r3, #24
 80056dc:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80056de:	4299      	cmp	r1, r3
 80056e0:	d90c      	bls.n	80056fc <BSP_TS_GetState+0x174>
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	6859      	ldr	r1, [r3, #4]
 80056e6:	4853      	ldr	r0, [pc, #332]	@ (8005834 <BSP_TS_GetState+0x2ac>)
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	4613      	mov	r3, r2
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	4413      	add	r3, r2
 80056f0:	00db      	lsls	r3, r3, #3
 80056f2:	4403      	add	r3, r0
 80056f4:	3318      	adds	r3, #24
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	1acb      	subs	r3, r1, r3
 80056fa:	e00b      	b.n	8005714 <BSP_TS_GetState+0x18c>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 80056fc:	494d      	ldr	r1, [pc, #308]	@ (8005834 <BSP_TS_GetState+0x2ac>)
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	4613      	mov	r3, r2
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	4413      	add	r3, r2
 8005706:	00db      	lsls	r3, r3, #3
 8005708:	440b      	add	r3, r1
 800570a:	3318      	adds	r3, #24
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8005712:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8005714:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	6899      	ldr	r1, [r3, #8]
 800571a:	4846      	ldr	r0, [pc, #280]	@ (8005834 <BSP_TS_GetState+0x2ac>)
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	4613      	mov	r3, r2
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	4413      	add	r3, r2
 8005724:	00db      	lsls	r3, r3, #3
 8005726:	4403      	add	r3, r0
 8005728:	3320      	adds	r3, #32
 800572a:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800572c:	4299      	cmp	r1, r3
 800572e:	d90c      	bls.n	800574a <BSP_TS_GetState+0x1c2>
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	6899      	ldr	r1, [r3, #8]
 8005734:	483f      	ldr	r0, [pc, #252]	@ (8005834 <BSP_TS_GetState+0x2ac>)
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	4613      	mov	r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	4413      	add	r3, r2
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	4403      	add	r3, r0
 8005742:	3320      	adds	r3, #32
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	1acb      	subs	r3, r1, r3
 8005748:	e00b      	b.n	8005762 <BSP_TS_GetState+0x1da>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 800574a:	493a      	ldr	r1, [pc, #232]	@ (8005834 <BSP_TS_GetState+0x2ac>)
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	4613      	mov	r3, r2
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	4413      	add	r3, r2
 8005754:	00db      	lsls	r3, r3, #3
 8005756:	440b      	add	r3, r1
 8005758:	3320      	adds	r3, #32
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8005760:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8005762:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8005764:	4933      	ldr	r1, [pc, #204]	@ (8005834 <BSP_TS_GetState+0x2ac>)
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	4613      	mov	r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	4413      	add	r3, r2
 800576e:	00db      	lsls	r3, r3, #3
 8005770:	440b      	add	r3, r1
 8005772:	330c      	adds	r3, #12
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	69ba      	ldr	r2, [r7, #24]
 8005778:	429a      	cmp	r2, r3
 800577a:	d80b      	bhi.n	8005794 <BSP_TS_GetState+0x20c>
 800577c:	492d      	ldr	r1, [pc, #180]	@ (8005834 <BSP_TS_GetState+0x2ac>)
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	4613      	mov	r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	4413      	add	r3, r2
 8005786:	00db      	lsls	r3, r3, #3
 8005788:	440b      	add	r3, r1
 800578a:	330c      	adds	r3, #12
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	429a      	cmp	r2, r3
 8005792:	d916      	bls.n	80057c2 <BSP_TS_GetState+0x23a>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	6859      	ldr	r1, [r3, #4]
 8005798:	4826      	ldr	r0, [pc, #152]	@ (8005834 <BSP_TS_GetState+0x2ac>)
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	4613      	mov	r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4413      	add	r3, r2
 80057a2:	00db      	lsls	r3, r3, #3
 80057a4:	4403      	add	r3, r0
 80057a6:	3318      	adds	r3, #24
 80057a8:	6019      	str	r1, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	6899      	ldr	r1, [r3, #8]
 80057ae:	4821      	ldr	r0, [pc, #132]	@ (8005834 <BSP_TS_GetState+0x2ac>)
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	4613      	mov	r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	4413      	add	r3, r2
 80057b8:	00db      	lsls	r3, r3, #3
 80057ba:	4403      	add	r3, r0
 80057bc:	3320      	adds	r3, #32
 80057be:	6019      	str	r1, [r3, #0]
 80057c0:	e02f      	b.n	8005822 <BSP_TS_GetState+0x29a>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 80057c2:	491c      	ldr	r1, [pc, #112]	@ (8005834 <BSP_TS_GetState+0x2ac>)
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	4613      	mov	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	4413      	add	r3, r2
 80057cc:	00db      	lsls	r3, r3, #3
 80057ce:	440b      	add	r3, r1
 80057d0:	3318      	adds	r3, #24
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 80057d8:	4916      	ldr	r1, [pc, #88]	@ (8005834 <BSP_TS_GetState+0x2ac>)
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	4613      	mov	r3, r2
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	4413      	add	r3, r2
 80057e2:	00db      	lsls	r3, r3, #3
 80057e4:	440b      	add	r3, r1
 80057e6:	3320      	adds	r3, #32
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	609a      	str	r2, [r3, #8]
 80057ee:	e018      	b.n	8005822 <BSP_TS_GetState+0x29a>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	2200      	movs	r2, #0
 80057f4:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 80057f6:	490f      	ldr	r1, [pc, #60]	@ (8005834 <BSP_TS_GetState+0x2ac>)
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	4613      	mov	r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	4413      	add	r3, r2
 8005800:	00db      	lsls	r3, r3, #3
 8005802:	440b      	add	r3, r1
 8005804:	3318      	adds	r3, #24
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800580c:	4909      	ldr	r1, [pc, #36]	@ (8005834 <BSP_TS_GetState+0x2ac>)
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	4613      	mov	r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4413      	add	r3, r2
 8005816:	00db      	lsls	r3, r3, #3
 8005818:	440b      	add	r3, r1
 800581a:	3320      	adds	r3, #32
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	609a      	str	r2, [r3, #8]
    }
  }

  return ret;
 8005822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005824:	4618      	mov	r0, r3
 8005826:	3728      	adds	r7, #40	@ 0x28
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	24001388 	.word	0x24001388
 8005830:	2400138c 	.word	0x2400138c
 8005834:	24001390 	.word	0x24001390

08005838 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b08a      	sub	sp, #40	@ 0x28
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  int32_t ret              = BSP_ERROR_NONE;
 8005840:	2300      	movs	r3, #0
 8005842:	627b      	str	r3, [r7, #36]	@ 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 8005844:	2300      	movs	r3, #0
 8005846:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 8005848:	2370      	movs	r3, #112	@ 0x70
 800584a:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 800584c:	4b23      	ldr	r3, [pc, #140]	@ (80058dc <FT5336_Probe+0xa4>)
 800584e:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8005850:	4b23      	ldr	r3, [pc, #140]	@ (80058e0 <FT5336_Probe+0xa8>)
 8005852:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8005854:	4b23      	ldr	r3, [pc, #140]	@ (80058e4 <FT5336_Probe+0xac>)
 8005856:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8005858:	4b23      	ldr	r3, [pc, #140]	@ (80058e8 <FT5336_Probe+0xb0>)
 800585a:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 800585c:	4b23      	ldr	r3, [pc, #140]	@ (80058ec <FT5336_Probe+0xb4>)
 800585e:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8005860:	f107 030c 	add.w	r3, r7, #12
 8005864:	4619      	mov	r1, r3
 8005866:	4822      	ldr	r0, [pc, #136]	@ (80058f0 <FT5336_Probe+0xb8>)
 8005868:	f7fd faa8 	bl	8002dbc <FT5336_RegisterBusIO>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8005872:	f06f 0307 	mvn.w	r3, #7
 8005876:	627b      	str	r3, [r7, #36]	@ 0x24
 8005878:	e02a      	b.n	80058d0 <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 800587a:	f107 0308 	add.w	r3, r7, #8
 800587e:	4619      	mov	r1, r3
 8005880:	481b      	ldr	r0, [pc, #108]	@ (80058f0 <FT5336_Probe+0xb8>)
 8005882:	f7fd fb95 	bl	8002fb0 <FT5336_ReadID>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d003      	beq.n	8005894 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800588c:	f06f 0304 	mvn.w	r3, #4
 8005890:	627b      	str	r3, [r7, #36]	@ 0x24
 8005892:	e01d      	b.n	80058d0 <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	2b51      	cmp	r3, #81	@ 0x51
 8005898:	d003      	beq.n	80058a2 <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800589a:	f06f 0306 	mvn.w	r3, #6
 800589e:	627b      	str	r3, [r7, #36]	@ 0x24
 80058a0:	e016      	b.n	80058d0 <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 80058a2:	4a14      	ldr	r2, [pc, #80]	@ (80058f4 <FT5336_Probe+0xbc>)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4912      	ldr	r1, [pc, #72]	@ (80058f0 <FT5336_Probe+0xb8>)
 80058a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 80058ac:	4b12      	ldr	r3, [pc, #72]	@ (80058f8 <FT5336_Probe+0xc0>)
 80058ae:	4a13      	ldr	r2, [pc, #76]	@ (80058fc <FT5336_Probe+0xc4>)
 80058b0:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 80058b2:	4b11      	ldr	r3, [pc, #68]	@ (80058f8 <FT5336_Probe+0xc0>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	490e      	ldr	r1, [pc, #56]	@ (80058f4 <FT5336_Probe+0xbc>)
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80058c0:	4610      	mov	r0, r2
 80058c2:	4798      	blx	r3
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d002      	beq.n	80058d0 <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80058ca:	f06f 0304 	mvn.w	r3, #4
 80058ce:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }

  return ret;
 80058d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3728      	adds	r7, #40	@ 0x28
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	08003dbd 	.word	0x08003dbd
 80058e0:	08003e31 	.word	0x08003e31
 80058e4:	08003f61 	.word	0x08003f61
 80058e8:	08003f05 	.word	0x08003f05
 80058ec:	08003fbd 	.word	0x08003fbd
 80058f0:	240013b8 	.word	0x240013b8
 80058f4:	2400138c 	.word	0x2400138c
 80058f8:	24001388 	.word	0x24001388
 80058fc:	2400000c 	.word	0x2400000c

08005900 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005906:	2003      	movs	r0, #3
 8005908:	f001 fcb1 	bl	800726e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800590c:	f005 ff62 	bl	800b7d4 <HAL_RCC_GetSysClockFreq>
 8005910:	4602      	mov	r2, r0
 8005912:	4b15      	ldr	r3, [pc, #84]	@ (8005968 <HAL_Init+0x68>)
 8005914:	699b      	ldr	r3, [r3, #24]
 8005916:	0a1b      	lsrs	r3, r3, #8
 8005918:	f003 030f 	and.w	r3, r3, #15
 800591c:	4913      	ldr	r1, [pc, #76]	@ (800596c <HAL_Init+0x6c>)
 800591e:	5ccb      	ldrb	r3, [r1, r3]
 8005920:	f003 031f 	and.w	r3, r3, #31
 8005924:	fa22 f303 	lsr.w	r3, r2, r3
 8005928:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800592a:	4b0f      	ldr	r3, [pc, #60]	@ (8005968 <HAL_Init+0x68>)
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	f003 030f 	and.w	r3, r3, #15
 8005932:	4a0e      	ldr	r2, [pc, #56]	@ (800596c <HAL_Init+0x6c>)
 8005934:	5cd3      	ldrb	r3, [r2, r3]
 8005936:	f003 031f 	and.w	r3, r3, #31
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	fa22 f303 	lsr.w	r3, r2, r3
 8005940:	4a0b      	ldr	r2, [pc, #44]	@ (8005970 <HAL_Init+0x70>)
 8005942:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005944:	4a0b      	ldr	r2, [pc, #44]	@ (8005974 <HAL_Init+0x74>)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800594a:	200f      	movs	r0, #15
 800594c:	f7fd f828 	bl	80029a0 <HAL_InitTick>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d001      	beq.n	800595a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e002      	b.n	8005960 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800595a:	f7fc f851 	bl	8001a00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3708      	adds	r7, #8
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	58024400 	.word	0x58024400
 800596c:	0802dfac 	.word	0x0802dfac
 8005970:	24000008 	.word	0x24000008
 8005974:	24000004 	.word	0x24000004

08005978 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005978:	b480      	push	{r7}
 800597a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800597c:	4b06      	ldr	r3, [pc, #24]	@ (8005998 <HAL_IncTick+0x20>)
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	461a      	mov	r2, r3
 8005982:	4b06      	ldr	r3, [pc, #24]	@ (800599c <HAL_IncTick+0x24>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4413      	add	r3, r2
 8005988:	4a04      	ldr	r2, [pc, #16]	@ (800599c <HAL_IncTick+0x24>)
 800598a:	6013      	str	r3, [r2, #0]
}
 800598c:	bf00      	nop
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	24000040 	.word	0x24000040
 800599c:	240013e0 	.word	0x240013e0

080059a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80059a0:	b480      	push	{r7}
 80059a2:	af00      	add	r7, sp, #0
  return uwTick;
 80059a4:	4b03      	ldr	r3, [pc, #12]	@ (80059b4 <HAL_GetTick+0x14>)
 80059a6:	681b      	ldr	r3, [r3, #0]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	240013e0 	.word	0x240013e0

080059b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80059c0:	f7ff ffee 	bl	80059a0 <HAL_GetTick>
 80059c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d0:	d005      	beq.n	80059de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80059d2:	4b0a      	ldr	r3, [pc, #40]	@ (80059fc <HAL_Delay+0x44>)
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	461a      	mov	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	4413      	add	r3, r2
 80059dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80059de:	bf00      	nop
 80059e0:	f7ff ffde 	bl	80059a0 <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d8f7      	bhi.n	80059e0 <HAL_Delay+0x28>
  {
  }
}
 80059f0:	bf00      	nop
 80059f2:	bf00      	nop
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	24000040 	.word	0x24000040

08005a00 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8005a0a:	4b07      	ldr	r3, [pc, #28]	@ (8005a28 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8005a0c:	685a      	ldr	r2, [r3, #4]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	43db      	mvns	r3, r3
 8005a12:	401a      	ands	r2, r3
 8005a14:	4904      	ldr	r1, [pc, #16]	@ (8005a28 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	604b      	str	r3, [r1, #4]
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr
 8005a28:	58000400 	.word	0x58000400

08005a2c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	431a      	orrs	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	609a      	str	r2, [r3, #8]
}
 8005a46:	bf00      	nop
 8005a48:	370c      	adds	r7, #12
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr

08005a52 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005a52:	b480      	push	{r7}
 8005a54:	b083      	sub	sp, #12
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
 8005a5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	431a      	orrs	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	609a      	str	r2, [r3, #8]
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b087      	sub	sp, #28
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
 8005aa0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	3360      	adds	r3, #96	@ 0x60
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	4413      	add	r3, r2
 8005aae:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	4a10      	ldr	r2, [pc, #64]	@ (8005af4 <LL_ADC_SetOffset+0x60>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d10b      	bne.n	8005ad0 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8005ace:	e00b      	b.n	8005ae8 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	430b      	orrs	r3, r1
 8005ae2:	431a      	orrs	r2, r3
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	601a      	str	r2, [r3, #0]
}
 8005ae8:	bf00      	nop
 8005aea:	371c      	adds	r7, #28
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	58026000 	.word	0x58026000

08005af8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	3360      	adds	r3, #96	@ 0x60
 8005b06:	461a      	mov	r2, r3
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	4413      	add	r3, r2
 8005b0e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3714      	adds	r7, #20
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	f003 031f 	and.w	r3, r3, #31
 8005b3e:	6879      	ldr	r1, [r7, #4]
 8005b40:	fa01 f303 	lsl.w	r3, r1, r3
 8005b44:	431a      	orrs	r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	611a      	str	r2, [r3, #16]
}
 8005b4a:	bf00      	nop
 8005b4c:	3714      	adds	r7, #20
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
	...

08005b58 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b087      	sub	sp, #28
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	4a0c      	ldr	r2, [pc, #48]	@ (8005b98 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d00e      	beq.n	8005b8a <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	3360      	adds	r3, #96	@ 0x60
 8005b70:	461a      	mov	r2, r3
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	4413      	add	r3, r2
 8005b78:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	431a      	orrs	r2, r3
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	601a      	str	r2, [r3, #0]
  }
}
 8005b8a:	bf00      	nop
 8005b8c:	371c      	adds	r7, #28
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	58026000 	.word	0x58026000

08005b9c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b087      	sub	sp, #28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	4a0c      	ldr	r2, [pc, #48]	@ (8005bdc <LL_ADC_SetOffsetSaturation+0x40>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d10e      	bne.n	8005bce <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	3360      	adds	r3, #96	@ 0x60
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	4413      	add	r3, r2
 8005bbc:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	431a      	orrs	r2, r3
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8005bce:	bf00      	nop
 8005bd0:	371c      	adds	r7, #28
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	58026000 	.word	0x58026000

08005be0 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b087      	sub	sp, #28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	4a0c      	ldr	r2, [pc, #48]	@ (8005c20 <LL_ADC_SetOffsetSign+0x40>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d10e      	bne.n	8005c12 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	3360      	adds	r3, #96	@ 0x60
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	431a      	orrs	r2, r3
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8005c12:	bf00      	nop
 8005c14:	371c      	adds	r7, #28
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	58026000 	.word	0x58026000

08005c24 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b087      	sub	sp, #28
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	3360      	adds	r3, #96	@ 0x60
 8005c34:	461a      	mov	r2, r3
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	4413      	add	r3, r2
 8005c3c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	4a0c      	ldr	r2, [pc, #48]	@ (8005c74 <LL_ADC_SetOffsetState+0x50>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d108      	bne.n	8005c58 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	431a      	orrs	r2, r3
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8005c56:	e007      	b.n	8005c68 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	431a      	orrs	r2, r3
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	601a      	str	r2, [r3, #0]
}
 8005c68:	bf00      	nop
 8005c6a:	371c      	adds	r7, #28
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr
 8005c74:	58026000 	.word	0x58026000

08005c78 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b087      	sub	sp, #28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	3330      	adds	r3, #48	@ 0x30
 8005c88:	461a      	mov	r2, r3
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	0a1b      	lsrs	r3, r3, #8
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	f003 030c 	and.w	r3, r3, #12
 8005c94:	4413      	add	r3, r2
 8005c96:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	f003 031f 	and.w	r3, r3, #31
 8005ca2:	211f      	movs	r1, #31
 8005ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca8:	43db      	mvns	r3, r3
 8005caa:	401a      	ands	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	0e9b      	lsrs	r3, r3, #26
 8005cb0:	f003 011f 	and.w	r1, r3, #31
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	f003 031f 	and.w	r3, r3, #31
 8005cba:	fa01 f303 	lsl.w	r3, r1, r3
 8005cbe:	431a      	orrs	r2, r3
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005cc4:	bf00      	nop
 8005cc6:	371c      	adds	r7, #28
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b087      	sub	sp, #28
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	3314      	adds	r3, #20
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	0e5b      	lsrs	r3, r3, #25
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	f003 0304 	and.w	r3, r3, #4
 8005cec:	4413      	add	r3, r2
 8005cee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	0d1b      	lsrs	r3, r3, #20
 8005cf8:	f003 031f 	and.w	r3, r3, #31
 8005cfc:	2107      	movs	r1, #7
 8005cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8005d02:	43db      	mvns	r3, r3
 8005d04:	401a      	ands	r2, r3
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	0d1b      	lsrs	r3, r3, #20
 8005d0a:	f003 031f 	and.w	r3, r3, #31
 8005d0e:	6879      	ldr	r1, [r7, #4]
 8005d10:	fa01 f303 	lsl.w	r3, r1, r3
 8005d14:	431a      	orrs	r2, r3
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005d1a:	bf00      	nop
 8005d1c:	371c      	adds	r7, #28
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
	...

08005d28 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	4a1a      	ldr	r2, [pc, #104]	@ (8005da0 <LL_ADC_SetChannelSingleDiff+0x78>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d115      	bne.n	8005d68 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d48:	43db      	mvns	r3, r3
 8005d4a:	401a      	ands	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f003 0318 	and.w	r3, r3, #24
 8005d52:	4914      	ldr	r1, [pc, #80]	@ (8005da4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8005d54:	40d9      	lsrs	r1, r3
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	400b      	ands	r3, r1
 8005d5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d5e:	431a      	orrs	r2, r3
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8005d66:	e014      	b.n	8005d92 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d74:	43db      	mvns	r3, r3
 8005d76:	401a      	ands	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f003 0318 	and.w	r3, r3, #24
 8005d7e:	4909      	ldr	r1, [pc, #36]	@ (8005da4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8005d80:	40d9      	lsrs	r1, r3
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	400b      	ands	r3, r1
 8005d86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d8a:	431a      	orrs	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8005d92:	bf00      	nop
 8005d94:	3714      	adds	r7, #20
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	58026000 	.word	0x58026000
 8005da4:	000fffff 	.word	0x000fffff

08005da8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	689a      	ldr	r2, [r3, #8]
 8005db4:	4b04      	ldr	r3, [pc, #16]	@ (8005dc8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8005db6:	4013      	ands	r3, r2
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	6093      	str	r3, [r2, #8]
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr
 8005dc8:	5fffffc0 	.word	0x5fffffc0

08005dcc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ddc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005de0:	d101      	bne.n	8005de6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005de2:	2301      	movs	r3, #1
 8005de4:	e000      	b.n	8005de8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	689a      	ldr	r2, [r3, #8]
 8005e00:	4b05      	ldr	r3, [pc, #20]	@ (8005e18 <LL_ADC_EnableInternalRegulator+0x24>)
 8005e02:	4013      	ands	r3, r2
 8005e04:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr
 8005e18:	6fffffc0 	.word	0x6fffffc0

08005e1c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e30:	d101      	bne.n	8005e36 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005e32:	2301      	movs	r3, #1
 8005e34:	e000      	b.n	8005e38 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	f003 0301 	and.w	r3, r3, #1
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d101      	bne.n	8005e5c <LL_ADC_IsEnabled+0x18>
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e000      	b.n	8005e5e <LL_ADC_IsEnabled+0x1a>
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	370c      	adds	r7, #12
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr

08005e6a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b083      	sub	sp, #12
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	f003 0304 	and.w	r3, r3, #4
 8005e7a:	2b04      	cmp	r3, #4
 8005e7c:	d101      	bne.n	8005e82 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e000      	b.n	8005e84 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f003 0308 	and.w	r3, r3, #8
 8005ea0:	2b08      	cmp	r3, #8
 8005ea2:	d101      	bne.n	8005ea8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e000      	b.n	8005eaa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	370c      	adds	r7, #12
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
	...

08005eb8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005eb8:	b590      	push	{r4, r7, lr}
 8005eba:	b089      	sub	sp, #36	@ 0x24
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d101      	bne.n	8005ed2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e1ee      	b.n	80062b0 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d109      	bne.n	8005ef4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f7fb fdab 	bl	8001a3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f7ff ff67 	bl	8005dcc <LL_ADC_IsDeepPowerDownEnabled>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d004      	beq.n	8005f0e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f7ff ff4d 	bl	8005da8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7ff ff82 	bl	8005e1c <LL_ADC_IsInternalRegulatorEnabled>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d114      	bne.n	8005f48 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7ff ff66 	bl	8005df4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005f28:	4b8e      	ldr	r3, [pc, #568]	@ (8006164 <HAL_ADC_Init+0x2ac>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	099b      	lsrs	r3, r3, #6
 8005f2e:	4a8e      	ldr	r2, [pc, #568]	@ (8006168 <HAL_ADC_Init+0x2b0>)
 8005f30:	fba2 2303 	umull	r2, r3, r2, r3
 8005f34:	099b      	lsrs	r3, r3, #6
 8005f36:	3301      	adds	r3, #1
 8005f38:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005f3a:	e002      	b.n	8005f42 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1f9      	bne.n	8005f3c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7ff ff65 	bl	8005e1c <LL_ADC_IsInternalRegulatorEnabled>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10d      	bne.n	8005f74 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f5c:	f043 0210 	orr.w	r2, r3, #16
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f68:	f043 0201 	orr.w	r2, r3, #1
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7ff ff76 	bl	8005e6a <LL_ADC_REG_IsConversionOngoing>
 8005f7e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f84:	f003 0310 	and.w	r3, r3, #16
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f040 8188 	bne.w	800629e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f040 8184 	bne.w	800629e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f9a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005f9e:	f043 0202 	orr.w	r2, r3, #2
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7ff ff4a 	bl	8005e44 <LL_ADC_IsEnabled>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d136      	bne.n	8006024 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a6c      	ldr	r2, [pc, #432]	@ (800616c <HAL_ADC_Init+0x2b4>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d004      	beq.n	8005fca <HAL_ADC_Init+0x112>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a6a      	ldr	r2, [pc, #424]	@ (8006170 <HAL_ADC_Init+0x2b8>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d10e      	bne.n	8005fe8 <HAL_ADC_Init+0x130>
 8005fca:	4868      	ldr	r0, [pc, #416]	@ (800616c <HAL_ADC_Init+0x2b4>)
 8005fcc:	f7ff ff3a 	bl	8005e44 <LL_ADC_IsEnabled>
 8005fd0:	4604      	mov	r4, r0
 8005fd2:	4867      	ldr	r0, [pc, #412]	@ (8006170 <HAL_ADC_Init+0x2b8>)
 8005fd4:	f7ff ff36 	bl	8005e44 <LL_ADC_IsEnabled>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	4323      	orrs	r3, r4
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	bf0c      	ite	eq
 8005fe0:	2301      	moveq	r3, #1
 8005fe2:	2300      	movne	r3, #0
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	e008      	b.n	8005ffa <HAL_ADC_Init+0x142>
 8005fe8:	4862      	ldr	r0, [pc, #392]	@ (8006174 <HAL_ADC_Init+0x2bc>)
 8005fea:	f7ff ff2b 	bl	8005e44 <LL_ADC_IsEnabled>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	bf0c      	ite	eq
 8005ff4:	2301      	moveq	r3, #1
 8005ff6:	2300      	movne	r3, #0
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d012      	beq.n	8006024 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a5a      	ldr	r2, [pc, #360]	@ (800616c <HAL_ADC_Init+0x2b4>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d004      	beq.n	8006012 <HAL_ADC_Init+0x15a>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a58      	ldr	r2, [pc, #352]	@ (8006170 <HAL_ADC_Init+0x2b8>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d101      	bne.n	8006016 <HAL_ADC_Init+0x15e>
 8006012:	4a59      	ldr	r2, [pc, #356]	@ (8006178 <HAL_ADC_Init+0x2c0>)
 8006014:	e000      	b.n	8006018 <HAL_ADC_Init+0x160>
 8006016:	4a59      	ldr	r2, [pc, #356]	@ (800617c <HAL_ADC_Init+0x2c4>)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	4619      	mov	r1, r3
 800601e:	4610      	mov	r0, r2
 8006020:	f7ff fd04 	bl	8005a2c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a52      	ldr	r2, [pc, #328]	@ (8006174 <HAL_ADC_Init+0x2bc>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d129      	bne.n	8006082 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	7e5b      	ldrb	r3, [r3, #25]
 8006032:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8006038:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800603e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	2b08      	cmp	r3, #8
 8006046:	d013      	beq.n	8006070 <HAL_ADC_Init+0x1b8>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	2b0c      	cmp	r3, #12
 800604e:	d00d      	beq.n	800606c <HAL_ADC_Init+0x1b4>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	2b1c      	cmp	r3, #28
 8006056:	d007      	beq.n	8006068 <HAL_ADC_Init+0x1b0>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	2b18      	cmp	r3, #24
 800605e:	d101      	bne.n	8006064 <HAL_ADC_Init+0x1ac>
 8006060:	2318      	movs	r3, #24
 8006062:	e006      	b.n	8006072 <HAL_ADC_Init+0x1ba>
 8006064:	2300      	movs	r3, #0
 8006066:	e004      	b.n	8006072 <HAL_ADC_Init+0x1ba>
 8006068:	2310      	movs	r3, #16
 800606a:	e002      	b.n	8006072 <HAL_ADC_Init+0x1ba>
 800606c:	2308      	movs	r3, #8
 800606e:	e000      	b.n	8006072 <HAL_ADC_Init+0x1ba>
 8006070:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8006072:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f893 3020 	ldrb.w	r3, [r3, #32]
 800607a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800607c:	4313      	orrs	r3, r2
 800607e:	61bb      	str	r3, [r7, #24]
 8006080:	e00e      	b.n	80060a0 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	7e5b      	ldrb	r3, [r3, #25]
 8006086:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800608c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8006092:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f893 3020 	ldrb.w	r3, [r3, #32]
 800609a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800609c:	4313      	orrs	r3, r2
 800609e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d106      	bne.n	80060b8 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ae:	3b01      	subs	r3, #1
 80060b0:	045b      	lsls	r3, r3, #17
 80060b2:	69ba      	ldr	r2, [r7, #24]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d009      	beq.n	80060d4 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060c4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060cc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80060ce:	69ba      	ldr	r2, [r7, #24]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a26      	ldr	r2, [pc, #152]	@ (8006174 <HAL_ADC_Init+0x2bc>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d115      	bne.n	800610a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68da      	ldr	r2, [r3, #12]
 80060e4:	4b26      	ldr	r3, [pc, #152]	@ (8006180 <HAL_ADC_Init+0x2c8>)
 80060e6:	4013      	ands	r3, r2
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	6812      	ldr	r2, [r2, #0]
 80060ec:	69b9      	ldr	r1, [r7, #24]
 80060ee:	430b      	orrs	r3, r1
 80060f0:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	430a      	orrs	r2, r1
 8006106:	611a      	str	r2, [r3, #16]
 8006108:	e009      	b.n	800611e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68da      	ldr	r2, [r3, #12]
 8006110:	4b1c      	ldr	r3, [pc, #112]	@ (8006184 <HAL_ADC_Init+0x2cc>)
 8006112:	4013      	ands	r3, r2
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	6812      	ldr	r2, [r2, #0]
 8006118:	69b9      	ldr	r1, [r7, #24]
 800611a:	430b      	orrs	r3, r1
 800611c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4618      	mov	r0, r3
 8006124:	f7ff fea1 	bl	8005e6a <LL_ADC_REG_IsConversionOngoing>
 8006128:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4618      	mov	r0, r3
 8006130:	f7ff feae 	bl	8005e90 <LL_ADC_INJ_IsConversionOngoing>
 8006134:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	2b00      	cmp	r3, #0
 800613a:	f040 808e 	bne.w	800625a <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2b00      	cmp	r3, #0
 8006142:	f040 808a 	bne.w	800625a <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a0a      	ldr	r2, [pc, #40]	@ (8006174 <HAL_ADC_Init+0x2bc>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d11b      	bne.n	8006188 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	7e1b      	ldrb	r3, [r3, #24]
 8006154:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800615c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800615e:	4313      	orrs	r3, r2
 8006160:	61bb      	str	r3, [r7, #24]
 8006162:	e018      	b.n	8006196 <HAL_ADC_Init+0x2de>
 8006164:	24000004 	.word	0x24000004
 8006168:	053e2d63 	.word	0x053e2d63
 800616c:	40022000 	.word	0x40022000
 8006170:	40022100 	.word	0x40022100
 8006174:	58026000 	.word	0x58026000
 8006178:	40022300 	.word	0x40022300
 800617c:	58026300 	.word	0x58026300
 8006180:	fff04007 	.word	0xfff04007
 8006184:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	7e1b      	ldrb	r3, [r3, #24]
 800618c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8006192:	4313      	orrs	r3, r2
 8006194:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68da      	ldr	r2, [r3, #12]
 800619c:	4b46      	ldr	r3, [pc, #280]	@ (80062b8 <HAL_ADC_Init+0x400>)
 800619e:	4013      	ands	r3, r2
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	6812      	ldr	r2, [r2, #0]
 80061a4:	69b9      	ldr	r1, [r7, #24]
 80061a6:	430b      	orrs	r3, r1
 80061a8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d137      	bne.n	8006224 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b8:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a3f      	ldr	r2, [pc, #252]	@ (80062bc <HAL_ADC_Init+0x404>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d116      	bne.n	80061f2 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	691a      	ldr	r2, [r3, #16]
 80061ca:	4b3d      	ldr	r3, [pc, #244]	@ (80062c0 <HAL_ADC_Init+0x408>)
 80061cc:	4013      	ands	r3, r2
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80061d6:	4311      	orrs	r1, r2
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80061dc:	4311      	orrs	r1, r2
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80061e2:	430a      	orrs	r2, r1
 80061e4:	431a      	orrs	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f042 0201 	orr.w	r2, r2, #1
 80061ee:	611a      	str	r2, [r3, #16]
 80061f0:	e020      	b.n	8006234 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	691a      	ldr	r2, [r3, #16]
 80061f8:	4b32      	ldr	r3, [pc, #200]	@ (80062c4 <HAL_ADC_Init+0x40c>)
 80061fa:	4013      	ands	r3, r2
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006200:	3a01      	subs	r2, #1
 8006202:	0411      	lsls	r1, r2, #16
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006208:	4311      	orrs	r1, r2
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800620e:	4311      	orrs	r1, r2
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8006214:	430a      	orrs	r2, r1
 8006216:	431a      	orrs	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f042 0201 	orr.w	r2, r2, #1
 8006220:	611a      	str	r2, [r3, #16]
 8006222:	e007      	b.n	8006234 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	691a      	ldr	r2, [r3, #16]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f022 0201 	bic.w	r2, r2, #1
 8006232:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	430a      	orrs	r2, r1
 8006248:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a1b      	ldr	r2, [pc, #108]	@ (80062bc <HAL_ADC_Init+0x404>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d002      	beq.n	800625a <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 fd67 	bl	8006d28 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	2b01      	cmp	r3, #1
 8006260:	d10c      	bne.n	800627c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006268:	f023 010f 	bic.w	r1, r3, #15
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	69db      	ldr	r3, [r3, #28]
 8006270:	1e5a      	subs	r2, r3, #1
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	430a      	orrs	r2, r1
 8006278:	631a      	str	r2, [r3, #48]	@ 0x30
 800627a:	e007      	b.n	800628c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f022 020f 	bic.w	r2, r2, #15
 800628a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006290:	f023 0303 	bic.w	r3, r3, #3
 8006294:	f043 0201 	orr.w	r2, r3, #1
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	661a      	str	r2, [r3, #96]	@ 0x60
 800629c:	e007      	b.n	80062ae <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062a2:	f043 0210 	orr.w	r2, r3, #16
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80062ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3724      	adds	r7, #36	@ 0x24
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd90      	pop	{r4, r7, pc}
 80062b8:	ffffbffc 	.word	0xffffbffc
 80062bc:	58026000 	.word	0x58026000
 80062c0:	fc00f81f 	.word	0xfc00f81f
 80062c4:	fc00f81e 	.word	0xfc00f81e

080062c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80062c8:	b590      	push	{r4, r7, lr}
 80062ca:	b0b9      	sub	sp, #228	@ 0xe4
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80062d2:	2300      	movs	r3, #0
 80062d4:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80062d8:	2300      	movs	r3, #0
 80062da:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80062e2:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	4aab      	ldr	r2, [pc, #684]	@ (8006598 <HAL_ADC_ConfigChannel+0x2d0>)
 80062ea:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d102      	bne.n	80062fc <HAL_ADC_ConfigChannel+0x34>
 80062f6:	2302      	movs	r3, #2
 80062f8:	f000 bcfe 	b.w	8006cf8 <HAL_ADC_ConfigChannel+0xa30>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4618      	mov	r0, r3
 800630a:	f7ff fdae 	bl	8005e6a <LL_ADC_REG_IsConversionOngoing>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	f040 84e2 	bne.w	8006cda <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	db38      	blt.n	8006390 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a9e      	ldr	r2, [pc, #632]	@ (800659c <HAL_ADC_ConfigChannel+0x2d4>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d033      	beq.n	8006390 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006330:	2b00      	cmp	r3, #0
 8006332:	d108      	bne.n	8006346 <HAL_ADC_ConfigChannel+0x7e>
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	0e9b      	lsrs	r3, r3, #26
 800633a:	f003 031f 	and.w	r3, r3, #31
 800633e:	2201      	movs	r2, #1
 8006340:	fa02 f303 	lsl.w	r3, r2, r3
 8006344:	e01d      	b.n	8006382 <HAL_ADC_ConfigChannel+0xba>
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800634e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006352:	fa93 f3a3 	rbit	r3, r3
 8006356:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  return result;
 800635a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800635e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  if (value == 0U)
 8006362:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006366:	2b00      	cmp	r3, #0
 8006368:	d101      	bne.n	800636e <HAL_ADC_ConfigChannel+0xa6>
    return 32U;
 800636a:	2320      	movs	r3, #32
 800636c:	e004      	b.n	8006378 <HAL_ADC_ConfigChannel+0xb0>
  return __builtin_clz(value);
 800636e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006372:	fab3 f383 	clz	r3, r3
 8006376:	b2db      	uxtb	r3, r3
 8006378:	f003 031f 	and.w	r3, r3, #31
 800637c:	2201      	movs	r2, #1
 800637e:	fa02 f303 	lsl.w	r3, r2, r3
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	6812      	ldr	r2, [r2, #0]
 8006386:	69d1      	ldr	r1, [r2, #28]
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	6812      	ldr	r2, [r2, #0]
 800638c:	430b      	orrs	r3, r1
 800638e:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6818      	ldr	r0, [r3, #0]
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	6859      	ldr	r1, [r3, #4]
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	461a      	mov	r2, r3
 800639e:	f7ff fc6b 	bl	8005c78 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7ff fd5f 	bl	8005e6a <LL_ADC_REG_IsConversionOngoing>
 80063ac:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7ff fd6b 	bl	8005e90 <LL_ADC_INJ_IsConversionOngoing>
 80063ba:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80063be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f040 8270 	bne.w	80068a8 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80063c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f040 826b 	bne.w	80068a8 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6818      	ldr	r0, [r3, #0]
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	6819      	ldr	r1, [r3, #0]
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	461a      	mov	r2, r3
 80063e0:	f7ff fc76 	bl	8005cd0 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a6c      	ldr	r2, [pc, #432]	@ (800659c <HAL_ADC_ConfigChannel+0x2d4>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d10d      	bne.n	800640a <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	695a      	ldr	r2, [r3, #20]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	08db      	lsrs	r3, r3, #3
 80063fa:	f003 0303 	and.w	r3, r3, #3
 80063fe:	005b      	lsls	r3, r3, #1
 8006400:	fa02 f303 	lsl.w	r3, r2, r3
 8006404:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006408:	e032      	b.n	8006470 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800640a:	4b65      	ldr	r3, [pc, #404]	@ (80065a0 <HAL_ADC_ConfigChannel+0x2d8>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006412:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006416:	d10b      	bne.n	8006430 <HAL_ADC_ConfigChannel+0x168>
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	695a      	ldr	r2, [r3, #20]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	089b      	lsrs	r3, r3, #2
 8006424:	f003 0307 	and.w	r3, r3, #7
 8006428:	005b      	lsls	r3, r3, #1
 800642a:	fa02 f303 	lsl.w	r3, r2, r3
 800642e:	e01d      	b.n	800646c <HAL_ADC_ConfigChannel+0x1a4>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	f003 0310 	and.w	r3, r3, #16
 800643a:	2b00      	cmp	r3, #0
 800643c:	d10b      	bne.n	8006456 <HAL_ADC_ConfigChannel+0x18e>
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	695a      	ldr	r2, [r3, #20]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	089b      	lsrs	r3, r3, #2
 800644a:	f003 0307 	and.w	r3, r3, #7
 800644e:	005b      	lsls	r3, r3, #1
 8006450:	fa02 f303 	lsl.w	r3, r2, r3
 8006454:	e00a      	b.n	800646c <HAL_ADC_ConfigChannel+0x1a4>
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	695a      	ldr	r2, [r3, #20]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	089b      	lsrs	r3, r3, #2
 8006462:	f003 0304 	and.w	r3, r3, #4
 8006466:	005b      	lsls	r3, r3, #1
 8006468:	fa02 f303 	lsl.w	r3, r2, r3
 800646c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	2b04      	cmp	r3, #4
 8006476:	d048      	beq.n	800650a <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6818      	ldr	r0, [r3, #0]
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	6919      	ldr	r1, [r3, #16]
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006488:	f7ff fb04 	bl	8005a94 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a42      	ldr	r2, [pc, #264]	@ (800659c <HAL_ADC_ConfigChannel+0x2d4>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d119      	bne.n	80064ca <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6818      	ldr	r0, [r3, #0]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	6919      	ldr	r1, [r3, #16]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	69db      	ldr	r3, [r3, #28]
 80064a2:	461a      	mov	r2, r3
 80064a4:	f7ff fb9c 	bl	8005be0 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6818      	ldr	r0, [r3, #0]
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	6919      	ldr	r1, [r3, #16]
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d102      	bne.n	80064c0 <HAL_ADC_ConfigChannel+0x1f8>
 80064ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80064be:	e000      	b.n	80064c2 <HAL_ADC_ConfigChannel+0x1fa>
 80064c0:	2300      	movs	r3, #0
 80064c2:	461a      	mov	r2, r3
 80064c4:	f7ff fb6a 	bl	8005b9c <LL_ADC_SetOffsetSaturation>
 80064c8:	e1ee      	b.n	80068a8 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6818      	ldr	r0, [r3, #0]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	6919      	ldr	r1, [r3, #16]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d102      	bne.n	80064e2 <HAL_ADC_ConfigChannel+0x21a>
 80064dc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80064e0:	e000      	b.n	80064e4 <HAL_ADC_ConfigChannel+0x21c>
 80064e2:	2300      	movs	r3, #0
 80064e4:	461a      	mov	r2, r3
 80064e6:	f7ff fb37 	bl	8005b58 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6818      	ldr	r0, [r3, #0]
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	6919      	ldr	r1, [r3, #16]
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	7e1b      	ldrb	r3, [r3, #24]
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d102      	bne.n	8006500 <HAL_ADC_ConfigChannel+0x238>
 80064fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80064fe:	e000      	b.n	8006502 <HAL_ADC_ConfigChannel+0x23a>
 8006500:	2300      	movs	r3, #0
 8006502:	461a      	mov	r2, r3
 8006504:	f7ff fb0e 	bl	8005b24 <LL_ADC_SetDataRightShift>
 8006508:	e1ce      	b.n	80068a8 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a23      	ldr	r2, [pc, #140]	@ (800659c <HAL_ADC_ConfigChannel+0x2d4>)
 8006510:	4293      	cmp	r3, r2
 8006512:	f040 8181 	bne.w	8006818 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2100      	movs	r1, #0
 800651c:	4618      	mov	r0, r3
 800651e:	f7ff faeb 	bl	8005af8 <LL_ADC_GetOffsetChannel>
 8006522:	4603      	mov	r3, r0
 8006524:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006528:	2b00      	cmp	r3, #0
 800652a:	d10a      	bne.n	8006542 <HAL_ADC_ConfigChannel+0x27a>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2100      	movs	r1, #0
 8006532:	4618      	mov	r0, r3
 8006534:	f7ff fae0 	bl	8005af8 <LL_ADC_GetOffsetChannel>
 8006538:	4603      	mov	r3, r0
 800653a:	0e9b      	lsrs	r3, r3, #26
 800653c:	f003 021f 	and.w	r2, r3, #31
 8006540:	e01e      	b.n	8006580 <HAL_ADC_ConfigChannel+0x2b8>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2100      	movs	r1, #0
 8006548:	4618      	mov	r0, r3
 800654a:	f7ff fad5 	bl	8005af8 <LL_ADC_GetOffsetChannel>
 800654e:	4603      	mov	r3, r0
 8006550:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006554:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006558:	fa93 f3a3 	rbit	r3, r3
 800655c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8006560:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006564:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8006568:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800656c:	2b00      	cmp	r3, #0
 800656e:	d101      	bne.n	8006574 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8006570:	2320      	movs	r3, #32
 8006572:	e004      	b.n	800657e <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8006574:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006578:	fab3 f383 	clz	r3, r3
 800657c:	b2db      	uxtb	r3, r3
 800657e:	461a      	mov	r2, r3
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006588:	2b00      	cmp	r3, #0
 800658a:	d10b      	bne.n	80065a4 <HAL_ADC_ConfigChannel+0x2dc>
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	0e9b      	lsrs	r3, r3, #26
 8006592:	f003 031f 	and.w	r3, r3, #31
 8006596:	e01e      	b.n	80065d6 <HAL_ADC_ConfigChannel+0x30e>
 8006598:	47ff0000 	.word	0x47ff0000
 800659c:	58026000 	.word	0x58026000
 80065a0:	5c001000 	.word	0x5c001000
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80065b0:	fa93 f3a3 	rbit	r3, r3
 80065b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80065b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80065bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80065c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d101      	bne.n	80065cc <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 80065c8:	2320      	movs	r3, #32
 80065ca:	e004      	b.n	80065d6 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 80065cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80065d0:	fab3 f383 	clz	r3, r3
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d106      	bne.n	80065e8 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2200      	movs	r2, #0
 80065e0:	2100      	movs	r1, #0
 80065e2:	4618      	mov	r0, r3
 80065e4:	f7ff fb1e 	bl	8005c24 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2101      	movs	r1, #1
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7ff fa82 	bl	8005af8 <LL_ADC_GetOffsetChannel>
 80065f4:	4603      	mov	r3, r0
 80065f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d10a      	bne.n	8006614 <HAL_ADC_ConfigChannel+0x34c>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2101      	movs	r1, #1
 8006604:	4618      	mov	r0, r3
 8006606:	f7ff fa77 	bl	8005af8 <LL_ADC_GetOffsetChannel>
 800660a:	4603      	mov	r3, r0
 800660c:	0e9b      	lsrs	r3, r3, #26
 800660e:	f003 021f 	and.w	r2, r3, #31
 8006612:	e01e      	b.n	8006652 <HAL_ADC_ConfigChannel+0x38a>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2101      	movs	r1, #1
 800661a:	4618      	mov	r0, r3
 800661c:	f7ff fa6c 	bl	8005af8 <LL_ADC_GetOffsetChannel>
 8006620:	4603      	mov	r3, r0
 8006622:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006626:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800662a:	fa93 f3a3 	rbit	r3, r3
 800662e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8006632:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006636:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800663a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800663e:	2b00      	cmp	r3, #0
 8006640:	d101      	bne.n	8006646 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8006642:	2320      	movs	r3, #32
 8006644:	e004      	b.n	8006650 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8006646:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800664a:	fab3 f383 	clz	r3, r3
 800664e:	b2db      	uxtb	r3, r3
 8006650:	461a      	mov	r2, r3
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800665a:	2b00      	cmp	r3, #0
 800665c:	d105      	bne.n	800666a <HAL_ADC_ConfigChannel+0x3a2>
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	0e9b      	lsrs	r3, r3, #26
 8006664:	f003 031f 	and.w	r3, r3, #31
 8006668:	e018      	b.n	800669c <HAL_ADC_ConfigChannel+0x3d4>
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006672:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006676:	fa93 f3a3 	rbit	r3, r3
 800667a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800667e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006682:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8006686:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800668a:	2b00      	cmp	r3, #0
 800668c:	d101      	bne.n	8006692 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 800668e:	2320      	movs	r3, #32
 8006690:	e004      	b.n	800669c <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8006692:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006696:	fab3 f383 	clz	r3, r3
 800669a:	b2db      	uxtb	r3, r3
 800669c:	429a      	cmp	r2, r3
 800669e:	d106      	bne.n	80066ae <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2200      	movs	r2, #0
 80066a6:	2101      	movs	r1, #1
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7ff fabb 	bl	8005c24 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2102      	movs	r1, #2
 80066b4:	4618      	mov	r0, r3
 80066b6:	f7ff fa1f 	bl	8005af8 <LL_ADC_GetOffsetChannel>
 80066ba:	4603      	mov	r3, r0
 80066bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10a      	bne.n	80066da <HAL_ADC_ConfigChannel+0x412>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2102      	movs	r1, #2
 80066ca:	4618      	mov	r0, r3
 80066cc:	f7ff fa14 	bl	8005af8 <LL_ADC_GetOffsetChannel>
 80066d0:	4603      	mov	r3, r0
 80066d2:	0e9b      	lsrs	r3, r3, #26
 80066d4:	f003 021f 	and.w	r2, r3, #31
 80066d8:	e01e      	b.n	8006718 <HAL_ADC_ConfigChannel+0x450>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2102      	movs	r1, #2
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7ff fa09 	bl	8005af8 <LL_ADC_GetOffsetChannel>
 80066e6:	4603      	mov	r3, r0
 80066e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80066f0:	fa93 f3a3 	rbit	r3, r3
 80066f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80066f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80066fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8006700:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006704:	2b00      	cmp	r3, #0
 8006706:	d101      	bne.n	800670c <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8006708:	2320      	movs	r3, #32
 800670a:	e004      	b.n	8006716 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 800670c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006710:	fab3 f383 	clz	r3, r3
 8006714:	b2db      	uxtb	r3, r3
 8006716:	461a      	mov	r2, r3
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006720:	2b00      	cmp	r3, #0
 8006722:	d105      	bne.n	8006730 <HAL_ADC_ConfigChannel+0x468>
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	0e9b      	lsrs	r3, r3, #26
 800672a:	f003 031f 	and.w	r3, r3, #31
 800672e:	e014      	b.n	800675a <HAL_ADC_ConfigChannel+0x492>
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006736:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006738:	fa93 f3a3 	rbit	r3, r3
 800673c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800673e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006740:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8006744:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006748:	2b00      	cmp	r3, #0
 800674a:	d101      	bne.n	8006750 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800674c:	2320      	movs	r3, #32
 800674e:	e004      	b.n	800675a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8006750:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006754:	fab3 f383 	clz	r3, r3
 8006758:	b2db      	uxtb	r3, r3
 800675a:	429a      	cmp	r2, r3
 800675c:	d106      	bne.n	800676c <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2200      	movs	r2, #0
 8006764:	2102      	movs	r1, #2
 8006766:	4618      	mov	r0, r3
 8006768:	f7ff fa5c 	bl	8005c24 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2103      	movs	r1, #3
 8006772:	4618      	mov	r0, r3
 8006774:	f7ff f9c0 	bl	8005af8 <LL_ADC_GetOffsetChannel>
 8006778:	4603      	mov	r3, r0
 800677a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10a      	bne.n	8006798 <HAL_ADC_ConfigChannel+0x4d0>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2103      	movs	r1, #3
 8006788:	4618      	mov	r0, r3
 800678a:	f7ff f9b5 	bl	8005af8 <LL_ADC_GetOffsetChannel>
 800678e:	4603      	mov	r3, r0
 8006790:	0e9b      	lsrs	r3, r3, #26
 8006792:	f003 021f 	and.w	r2, r3, #31
 8006796:	e017      	b.n	80067c8 <HAL_ADC_ConfigChannel+0x500>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2103      	movs	r1, #3
 800679e:	4618      	mov	r0, r3
 80067a0:	f7ff f9aa 	bl	8005af8 <LL_ADC_GetOffsetChannel>
 80067a4:	4603      	mov	r3, r0
 80067a6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80067aa:	fa93 f3a3 	rbit	r3, r3
 80067ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80067b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067b2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80067b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d101      	bne.n	80067be <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 80067ba:	2320      	movs	r3, #32
 80067bc:	e003      	b.n	80067c6 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 80067be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80067c0:	fab3 f383 	clz	r3, r3
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	461a      	mov	r2, r3
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d105      	bne.n	80067e0 <HAL_ADC_ConfigChannel+0x518>
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	0e9b      	lsrs	r3, r3, #26
 80067da:	f003 031f 	and.w	r3, r3, #31
 80067de:	e011      	b.n	8006804 <HAL_ADC_ConfigChannel+0x53c>
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067e8:	fa93 f3a3 	rbit	r3, r3
 80067ec:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80067ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80067f0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80067f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d101      	bne.n	80067fc <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 80067f8:	2320      	movs	r3, #32
 80067fa:	e003      	b.n	8006804 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 80067fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80067fe:	fab3 f383 	clz	r3, r3
 8006802:	b2db      	uxtb	r3, r3
 8006804:	429a      	cmp	r2, r3
 8006806:	d14f      	bne.n	80068a8 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2200      	movs	r2, #0
 800680e:	2103      	movs	r1, #3
 8006810:	4618      	mov	r0, r3
 8006812:	f7ff fa07 	bl	8005c24 <LL_ADC_SetOffsetState>
 8006816:	e047      	b.n	80068a8 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800681e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	069b      	lsls	r3, r3, #26
 8006828:	429a      	cmp	r2, r3
 800682a:	d107      	bne.n	800683c <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800683a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006842:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	069b      	lsls	r3, r3, #26
 800684c:	429a      	cmp	r2, r3
 800684e:	d107      	bne.n	8006860 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800685e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006866:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	069b      	lsls	r3, r3, #26
 8006870:	429a      	cmp	r2, r3
 8006872:	d107      	bne.n	8006884 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8006882:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800688a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	069b      	lsls	r3, r3, #26
 8006894:	429a      	cmp	r2, r3
 8006896:	d107      	bne.n	80068a8 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80068a6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4618      	mov	r0, r3
 80068ae:	f7ff fac9 	bl	8005e44 <LL_ADC_IsEnabled>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f040 8219 	bne.w	8006cec <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6818      	ldr	r0, [r3, #0]
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	6819      	ldr	r1, [r3, #0]
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	461a      	mov	r2, r3
 80068c8:	f7ff fa2e 	bl	8005d28 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	4aa1      	ldr	r2, [pc, #644]	@ (8006b58 <HAL_ADC_ConfigChannel+0x890>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	f040 812e 	bne.w	8006b34 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10b      	bne.n	8006900 <HAL_ADC_ConfigChannel+0x638>
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	0e9b      	lsrs	r3, r3, #26
 80068ee:	3301      	adds	r3, #1
 80068f0:	f003 031f 	and.w	r3, r3, #31
 80068f4:	2b09      	cmp	r3, #9
 80068f6:	bf94      	ite	ls
 80068f8:	2301      	movls	r3, #1
 80068fa:	2300      	movhi	r3, #0
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	e019      	b.n	8006934 <HAL_ADC_ConfigChannel+0x66c>
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006906:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006908:	fa93 f3a3 	rbit	r3, r3
 800690c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800690e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006910:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8006912:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006914:	2b00      	cmp	r3, #0
 8006916:	d101      	bne.n	800691c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8006918:	2320      	movs	r3, #32
 800691a:	e003      	b.n	8006924 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 800691c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800691e:	fab3 f383 	clz	r3, r3
 8006922:	b2db      	uxtb	r3, r3
 8006924:	3301      	adds	r3, #1
 8006926:	f003 031f 	and.w	r3, r3, #31
 800692a:	2b09      	cmp	r3, #9
 800692c:	bf94      	ite	ls
 800692e:	2301      	movls	r3, #1
 8006930:	2300      	movhi	r3, #0
 8006932:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006934:	2b00      	cmp	r3, #0
 8006936:	d079      	beq.n	8006a2c <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006940:	2b00      	cmp	r3, #0
 8006942:	d107      	bne.n	8006954 <HAL_ADC_ConfigChannel+0x68c>
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	0e9b      	lsrs	r3, r3, #26
 800694a:	3301      	adds	r3, #1
 800694c:	069b      	lsls	r3, r3, #26
 800694e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006952:	e015      	b.n	8006980 <HAL_ADC_ConfigChannel+0x6b8>
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800695a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800695c:	fa93 f3a3 	rbit	r3, r3
 8006960:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8006962:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006964:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8006966:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006968:	2b00      	cmp	r3, #0
 800696a:	d101      	bne.n	8006970 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 800696c:	2320      	movs	r3, #32
 800696e:	e003      	b.n	8006978 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8006970:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006972:	fab3 f383 	clz	r3, r3
 8006976:	b2db      	uxtb	r3, r3
 8006978:	3301      	adds	r3, #1
 800697a:	069b      	lsls	r3, r3, #26
 800697c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006988:	2b00      	cmp	r3, #0
 800698a:	d109      	bne.n	80069a0 <HAL_ADC_ConfigChannel+0x6d8>
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	0e9b      	lsrs	r3, r3, #26
 8006992:	3301      	adds	r3, #1
 8006994:	f003 031f 	and.w	r3, r3, #31
 8006998:	2101      	movs	r1, #1
 800699a:	fa01 f303 	lsl.w	r3, r1, r3
 800699e:	e017      	b.n	80069d0 <HAL_ADC_ConfigChannel+0x708>
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069a8:	fa93 f3a3 	rbit	r3, r3
 80069ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80069ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069b0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80069b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d101      	bne.n	80069bc <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 80069b8:	2320      	movs	r3, #32
 80069ba:	e003      	b.n	80069c4 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 80069bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069be:	fab3 f383 	clz	r3, r3
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	3301      	adds	r3, #1
 80069c6:	f003 031f 	and.w	r3, r3, #31
 80069ca:	2101      	movs	r1, #1
 80069cc:	fa01 f303 	lsl.w	r3, r1, r3
 80069d0:	ea42 0103 	orr.w	r1, r2, r3
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d10a      	bne.n	80069f6 <HAL_ADC_ConfigChannel+0x72e>
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	0e9b      	lsrs	r3, r3, #26
 80069e6:	3301      	adds	r3, #1
 80069e8:	f003 021f 	and.w	r2, r3, #31
 80069ec:	4613      	mov	r3, r2
 80069ee:	005b      	lsls	r3, r3, #1
 80069f0:	4413      	add	r3, r2
 80069f2:	051b      	lsls	r3, r3, #20
 80069f4:	e018      	b.n	8006a28 <HAL_ADC_ConfigChannel+0x760>
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069fe:	fa93 f3a3 	rbit	r3, r3
 8006a02:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8006a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a06:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8006a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d101      	bne.n	8006a12 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8006a0e:	2320      	movs	r3, #32
 8006a10:	e003      	b.n	8006a1a <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8006a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a14:	fab3 f383 	clz	r3, r3
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	f003 021f 	and.w	r2, r3, #31
 8006a20:	4613      	mov	r3, r2
 8006a22:	005b      	lsls	r3, r3, #1
 8006a24:	4413      	add	r3, r2
 8006a26:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006a28:	430b      	orrs	r3, r1
 8006a2a:	e07e      	b.n	8006b2a <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d107      	bne.n	8006a48 <HAL_ADC_ConfigChannel+0x780>
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	0e9b      	lsrs	r3, r3, #26
 8006a3e:	3301      	adds	r3, #1
 8006a40:	069b      	lsls	r3, r3, #26
 8006a42:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006a46:	e015      	b.n	8006a74 <HAL_ADC_ConfigChannel+0x7ac>
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a50:	fa93 f3a3 	rbit	r3, r3
 8006a54:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8006a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8006a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d101      	bne.n	8006a64 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8006a60:	2320      	movs	r3, #32
 8006a62:	e003      	b.n	8006a6c <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8006a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a66:	fab3 f383 	clz	r3, r3
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	069b      	lsls	r3, r3, #26
 8006a70:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d109      	bne.n	8006a94 <HAL_ADC_ConfigChannel+0x7cc>
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	0e9b      	lsrs	r3, r3, #26
 8006a86:	3301      	adds	r3, #1
 8006a88:	f003 031f 	and.w	r3, r3, #31
 8006a8c:	2101      	movs	r1, #1
 8006a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a92:	e017      	b.n	8006ac4 <HAL_ADC_ConfigChannel+0x7fc>
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	fa93 f3a3 	rbit	r3, r3
 8006aa0:	61bb      	str	r3, [r7, #24]
  return result;
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006aa6:	6a3b      	ldr	r3, [r7, #32]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d101      	bne.n	8006ab0 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8006aac:	2320      	movs	r3, #32
 8006aae:	e003      	b.n	8006ab8 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8006ab0:	6a3b      	ldr	r3, [r7, #32]
 8006ab2:	fab3 f383 	clz	r3, r3
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	3301      	adds	r3, #1
 8006aba:	f003 031f 	and.w	r3, r3, #31
 8006abe:	2101      	movs	r1, #1
 8006ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ac4:	ea42 0103 	orr.w	r1, r2, r3
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10d      	bne.n	8006af0 <HAL_ADC_ConfigChannel+0x828>
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	0e9b      	lsrs	r3, r3, #26
 8006ada:	3301      	adds	r3, #1
 8006adc:	f003 021f 	and.w	r2, r3, #31
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	005b      	lsls	r3, r3, #1
 8006ae4:	4413      	add	r3, r2
 8006ae6:	3b1e      	subs	r3, #30
 8006ae8:	051b      	lsls	r3, r3, #20
 8006aea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006aee:	e01b      	b.n	8006b28 <HAL_ADC_ConfigChannel+0x860>
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	fa93 f3a3 	rbit	r3, r3
 8006afc:	60fb      	str	r3, [r7, #12]
  return result;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d101      	bne.n	8006b0c <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8006b08:	2320      	movs	r3, #32
 8006b0a:	e003      	b.n	8006b14 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	fab3 f383 	clz	r3, r3
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	3301      	adds	r3, #1
 8006b16:	f003 021f 	and.w	r2, r3, #31
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	005b      	lsls	r3, r3, #1
 8006b1e:	4413      	add	r3, r2
 8006b20:	3b1e      	subs	r3, #30
 8006b22:	051b      	lsls	r3, r3, #20
 8006b24:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006b28:	430b      	orrs	r3, r1
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	6892      	ldr	r2, [r2, #8]
 8006b2e:	4619      	mov	r1, r3
 8006b30:	f7ff f8ce 	bl	8005cd0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f280 80d7 	bge.w	8006cec <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a06      	ldr	r2, [pc, #24]	@ (8006b5c <HAL_ADC_ConfigChannel+0x894>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d004      	beq.n	8006b52 <HAL_ADC_ConfigChannel+0x88a>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a04      	ldr	r2, [pc, #16]	@ (8006b60 <HAL_ADC_ConfigChannel+0x898>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d10a      	bne.n	8006b68 <HAL_ADC_ConfigChannel+0x8a0>
 8006b52:	4b04      	ldr	r3, [pc, #16]	@ (8006b64 <HAL_ADC_ConfigChannel+0x89c>)
 8006b54:	e009      	b.n	8006b6a <HAL_ADC_ConfigChannel+0x8a2>
 8006b56:	bf00      	nop
 8006b58:	47ff0000 	.word	0x47ff0000
 8006b5c:	40022000 	.word	0x40022000
 8006b60:	40022100 	.word	0x40022100
 8006b64:	40022300 	.word	0x40022300
 8006b68:	4b65      	ldr	r3, [pc, #404]	@ (8006d00 <HAL_ADC_ConfigChannel+0xa38>)
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7fe ff84 	bl	8005a78 <LL_ADC_GetCommonPathInternalCh>
 8006b70:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a62      	ldr	r2, [pc, #392]	@ (8006d04 <HAL_ADC_ConfigChannel+0xa3c>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d004      	beq.n	8006b88 <HAL_ADC_ConfigChannel+0x8c0>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a61      	ldr	r2, [pc, #388]	@ (8006d08 <HAL_ADC_ConfigChannel+0xa40>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d10e      	bne.n	8006ba6 <HAL_ADC_ConfigChannel+0x8de>
 8006b88:	485e      	ldr	r0, [pc, #376]	@ (8006d04 <HAL_ADC_ConfigChannel+0xa3c>)
 8006b8a:	f7ff f95b 	bl	8005e44 <LL_ADC_IsEnabled>
 8006b8e:	4604      	mov	r4, r0
 8006b90:	485d      	ldr	r0, [pc, #372]	@ (8006d08 <HAL_ADC_ConfigChannel+0xa40>)
 8006b92:	f7ff f957 	bl	8005e44 <LL_ADC_IsEnabled>
 8006b96:	4603      	mov	r3, r0
 8006b98:	4323      	orrs	r3, r4
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	bf0c      	ite	eq
 8006b9e:	2301      	moveq	r3, #1
 8006ba0:	2300      	movne	r3, #0
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	e008      	b.n	8006bb8 <HAL_ADC_ConfigChannel+0x8f0>
 8006ba6:	4859      	ldr	r0, [pc, #356]	@ (8006d0c <HAL_ADC_ConfigChannel+0xa44>)
 8006ba8:	f7ff f94c 	bl	8005e44 <LL_ADC_IsEnabled>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	bf0c      	ite	eq
 8006bb2:	2301      	moveq	r3, #1
 8006bb4:	2300      	movne	r3, #0
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f000 8084 	beq.w	8006cc6 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a53      	ldr	r2, [pc, #332]	@ (8006d10 <HAL_ADC_ConfigChannel+0xa48>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d132      	bne.n	8006c2e <HAL_ADC_ConfigChannel+0x966>
 8006bc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006bcc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d12c      	bne.n	8006c2e <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a4c      	ldr	r2, [pc, #304]	@ (8006d0c <HAL_ADC_ConfigChannel+0xa44>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	f040 8086 	bne.w	8006cec <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a47      	ldr	r2, [pc, #284]	@ (8006d04 <HAL_ADC_ConfigChannel+0xa3c>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d004      	beq.n	8006bf4 <HAL_ADC_ConfigChannel+0x92c>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a46      	ldr	r2, [pc, #280]	@ (8006d08 <HAL_ADC_ConfigChannel+0xa40>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d101      	bne.n	8006bf8 <HAL_ADC_ConfigChannel+0x930>
 8006bf4:	4a47      	ldr	r2, [pc, #284]	@ (8006d14 <HAL_ADC_ConfigChannel+0xa4c>)
 8006bf6:	e000      	b.n	8006bfa <HAL_ADC_ConfigChannel+0x932>
 8006bf8:	4a41      	ldr	r2, [pc, #260]	@ (8006d00 <HAL_ADC_ConfigChannel+0xa38>)
 8006bfa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006bfe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006c02:	4619      	mov	r1, r3
 8006c04:	4610      	mov	r0, r2
 8006c06:	f7fe ff24 	bl	8005a52 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006c0a:	4b43      	ldr	r3, [pc, #268]	@ (8006d18 <HAL_ADC_ConfigChannel+0xa50>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	099b      	lsrs	r3, r3, #6
 8006c10:	4a42      	ldr	r2, [pc, #264]	@ (8006d1c <HAL_ADC_ConfigChannel+0xa54>)
 8006c12:	fba2 2303 	umull	r2, r3, r2, r3
 8006c16:	099b      	lsrs	r3, r3, #6
 8006c18:	3301      	adds	r3, #1
 8006c1a:	005b      	lsls	r3, r3, #1
 8006c1c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006c1e:	e002      	b.n	8006c26 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	3b01      	subs	r3, #1
 8006c24:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d1f9      	bne.n	8006c20 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006c2c:	e05e      	b.n	8006cec <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a3b      	ldr	r2, [pc, #236]	@ (8006d20 <HAL_ADC_ConfigChannel+0xa58>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d120      	bne.n	8006c7a <HAL_ADC_ConfigChannel+0x9b2>
 8006c38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006c3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d11a      	bne.n	8006c7a <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a30      	ldr	r2, [pc, #192]	@ (8006d0c <HAL_ADC_ConfigChannel+0xa44>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d14e      	bne.n	8006cec <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a2c      	ldr	r2, [pc, #176]	@ (8006d04 <HAL_ADC_ConfigChannel+0xa3c>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d004      	beq.n	8006c62 <HAL_ADC_ConfigChannel+0x99a>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a2a      	ldr	r2, [pc, #168]	@ (8006d08 <HAL_ADC_ConfigChannel+0xa40>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d101      	bne.n	8006c66 <HAL_ADC_ConfigChannel+0x99e>
 8006c62:	4a2c      	ldr	r2, [pc, #176]	@ (8006d14 <HAL_ADC_ConfigChannel+0xa4c>)
 8006c64:	e000      	b.n	8006c68 <HAL_ADC_ConfigChannel+0x9a0>
 8006c66:	4a26      	ldr	r2, [pc, #152]	@ (8006d00 <HAL_ADC_ConfigChannel+0xa38>)
 8006c68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006c6c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006c70:	4619      	mov	r1, r3
 8006c72:	4610      	mov	r0, r2
 8006c74:	f7fe feed 	bl	8005a52 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006c78:	e038      	b.n	8006cec <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a29      	ldr	r2, [pc, #164]	@ (8006d24 <HAL_ADC_ConfigChannel+0xa5c>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d133      	bne.n	8006cec <HAL_ADC_ConfigChannel+0xa24>
 8006c84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006c88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d12d      	bne.n	8006cec <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a1d      	ldr	r2, [pc, #116]	@ (8006d0c <HAL_ADC_ConfigChannel+0xa44>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d128      	bne.n	8006cec <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a19      	ldr	r2, [pc, #100]	@ (8006d04 <HAL_ADC_ConfigChannel+0xa3c>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d004      	beq.n	8006cae <HAL_ADC_ConfigChannel+0x9e6>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a17      	ldr	r2, [pc, #92]	@ (8006d08 <HAL_ADC_ConfigChannel+0xa40>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d101      	bne.n	8006cb2 <HAL_ADC_ConfigChannel+0x9ea>
 8006cae:	4a19      	ldr	r2, [pc, #100]	@ (8006d14 <HAL_ADC_ConfigChannel+0xa4c>)
 8006cb0:	e000      	b.n	8006cb4 <HAL_ADC_ConfigChannel+0x9ec>
 8006cb2:	4a13      	ldr	r2, [pc, #76]	@ (8006d00 <HAL_ADC_ConfigChannel+0xa38>)
 8006cb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006cb8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	4610      	mov	r0, r2
 8006cc0:	f7fe fec7 	bl	8005a52 <LL_ADC_SetCommonPathInternalCh>
 8006cc4:	e012      	b.n	8006cec <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cca:	f043 0220 	orr.w	r2, r3, #32
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8006cd8:	e008      	b.n	8006cec <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cde:	f043 0220 	orr.w	r2, r3, #32
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8006cf4:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	37e4      	adds	r7, #228	@ 0xe4
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd90      	pop	{r4, r7, pc}
 8006d00:	58026300 	.word	0x58026300
 8006d04:	40022000 	.word	0x40022000
 8006d08:	40022100 	.word	0x40022100
 8006d0c:	58026000 	.word	0x58026000
 8006d10:	c7520000 	.word	0xc7520000
 8006d14:	40022300 	.word	0x40022300
 8006d18:	24000004 	.word	0x24000004
 8006d1c:	053e2d63 	.word	0x053e2d63
 8006d20:	c3210000 	.word	0xc3210000
 8006d24:	cb840000 	.word	0xcb840000

08006d28 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a6c      	ldr	r2, [pc, #432]	@ (8006ee8 <ADC_ConfigureBoostMode+0x1c0>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d004      	beq.n	8006d44 <ADC_ConfigureBoostMode+0x1c>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a6b      	ldr	r2, [pc, #428]	@ (8006eec <ADC_ConfigureBoostMode+0x1c4>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d109      	bne.n	8006d58 <ADC_ConfigureBoostMode+0x30>
 8006d44:	4b6a      	ldr	r3, [pc, #424]	@ (8006ef0 <ADC_ConfigureBoostMode+0x1c8>)
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	bf14      	ite	ne
 8006d50:	2301      	movne	r3, #1
 8006d52:	2300      	moveq	r3, #0
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	e008      	b.n	8006d6a <ADC_ConfigureBoostMode+0x42>
 8006d58:	4b66      	ldr	r3, [pc, #408]	@ (8006ef4 <ADC_ConfigureBoostMode+0x1cc>)
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	bf14      	ite	ne
 8006d64:	2301      	movne	r3, #1
 8006d66:	2300      	moveq	r3, #0
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d01c      	beq.n	8006da8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8006d6e:	f004 feab 	bl	800bac8 <HAL_RCC_GetHCLKFreq>
 8006d72:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006d7c:	d010      	beq.n	8006da0 <ADC_ConfigureBoostMode+0x78>
 8006d7e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006d82:	d873      	bhi.n	8006e6c <ADC_ConfigureBoostMode+0x144>
 8006d84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d88:	d002      	beq.n	8006d90 <ADC_ConfigureBoostMode+0x68>
 8006d8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d8e:	d16d      	bne.n	8006e6c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	0c1b      	lsrs	r3, r3, #16
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d9c:	60fb      	str	r3, [r7, #12]
        break;
 8006d9e:	e068      	b.n	8006e72 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	089b      	lsrs	r3, r3, #2
 8006da4:	60fb      	str	r3, [r7, #12]
        break;
 8006da6:	e064      	b.n	8006e72 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006da8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8006dac:	f04f 0100 	mov.w	r1, #0
 8006db0:	f006 f8c8 	bl	800cf44 <HAL_RCCEx_GetPeriphCLKFreq>
 8006db4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8006dbe:	d051      	beq.n	8006e64 <ADC_ConfigureBoostMode+0x13c>
 8006dc0:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8006dc4:	d854      	bhi.n	8006e70 <ADC_ConfigureBoostMode+0x148>
 8006dc6:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8006dca:	d047      	beq.n	8006e5c <ADC_ConfigureBoostMode+0x134>
 8006dcc:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8006dd0:	d84e      	bhi.n	8006e70 <ADC_ConfigureBoostMode+0x148>
 8006dd2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8006dd6:	d03d      	beq.n	8006e54 <ADC_ConfigureBoostMode+0x12c>
 8006dd8:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8006ddc:	d848      	bhi.n	8006e70 <ADC_ConfigureBoostMode+0x148>
 8006dde:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006de2:	d033      	beq.n	8006e4c <ADC_ConfigureBoostMode+0x124>
 8006de4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006de8:	d842      	bhi.n	8006e70 <ADC_ConfigureBoostMode+0x148>
 8006dea:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8006dee:	d029      	beq.n	8006e44 <ADC_ConfigureBoostMode+0x11c>
 8006df0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8006df4:	d83c      	bhi.n	8006e70 <ADC_ConfigureBoostMode+0x148>
 8006df6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006dfa:	d01a      	beq.n	8006e32 <ADC_ConfigureBoostMode+0x10a>
 8006dfc:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006e00:	d836      	bhi.n	8006e70 <ADC_ConfigureBoostMode+0x148>
 8006e02:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006e06:	d014      	beq.n	8006e32 <ADC_ConfigureBoostMode+0x10a>
 8006e08:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006e0c:	d830      	bhi.n	8006e70 <ADC_ConfigureBoostMode+0x148>
 8006e0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e12:	d00e      	beq.n	8006e32 <ADC_ConfigureBoostMode+0x10a>
 8006e14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e18:	d82a      	bhi.n	8006e70 <ADC_ConfigureBoostMode+0x148>
 8006e1a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006e1e:	d008      	beq.n	8006e32 <ADC_ConfigureBoostMode+0x10a>
 8006e20:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006e24:	d824      	bhi.n	8006e70 <ADC_ConfigureBoostMode+0x148>
 8006e26:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006e2a:	d002      	beq.n	8006e32 <ADC_ConfigureBoostMode+0x10a>
 8006e2c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006e30:	d11e      	bne.n	8006e70 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	0c9b      	lsrs	r3, r3, #18
 8006e38:	005b      	lsls	r3, r3, #1
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e40:	60fb      	str	r3, [r7, #12]
        break;
 8006e42:	e016      	b.n	8006e72 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	091b      	lsrs	r3, r3, #4
 8006e48:	60fb      	str	r3, [r7, #12]
        break;
 8006e4a:	e012      	b.n	8006e72 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	095b      	lsrs	r3, r3, #5
 8006e50:	60fb      	str	r3, [r7, #12]
        break;
 8006e52:	e00e      	b.n	8006e72 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	099b      	lsrs	r3, r3, #6
 8006e58:	60fb      	str	r3, [r7, #12]
        break;
 8006e5a:	e00a      	b.n	8006e72 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	09db      	lsrs	r3, r3, #7
 8006e60:	60fb      	str	r3, [r7, #12]
        break;
 8006e62:	e006      	b.n	8006e72 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	0a1b      	lsrs	r3, r3, #8
 8006e68:	60fb      	str	r3, [r7, #12]
        break;
 8006e6a:	e002      	b.n	8006e72 <ADC_ConfigureBoostMode+0x14a>
        break;
 8006e6c:	bf00      	nop
 8006e6e:	e000      	b.n	8006e72 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8006e70:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	085b      	lsrs	r3, r3, #1
 8006e76:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	4a1f      	ldr	r2, [pc, #124]	@ (8006ef8 <ADC_ConfigureBoostMode+0x1d0>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d808      	bhi.n	8006e92 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	689a      	ldr	r2, [r3, #8]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006e8e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006e90:	e025      	b.n	8006ede <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	4a19      	ldr	r2, [pc, #100]	@ (8006efc <ADC_ConfigureBoostMode+0x1d4>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d80a      	bhi.n	8006eb0 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006eac:	609a      	str	r2, [r3, #8]
}
 8006eae:	e016      	b.n	8006ede <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	4a13      	ldr	r2, [pc, #76]	@ (8006f00 <ADC_ConfigureBoostMode+0x1d8>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d80a      	bhi.n	8006ece <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006eca:	609a      	str	r2, [r3, #8]
}
 8006ecc:	e007      	b.n	8006ede <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	689a      	ldr	r2, [r3, #8]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8006edc:	609a      	str	r2, [r3, #8]
}
 8006ede:	bf00      	nop
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	40022000 	.word	0x40022000
 8006eec:	40022100 	.word	0x40022100
 8006ef0:	40022300 	.word	0x40022300
 8006ef4:	58026300 	.word	0x58026300
 8006ef8:	005f5e10 	.word	0x005f5e10
 8006efc:	00bebc20 	.word	0x00bebc20
 8006f00:	017d7840 	.word	0x017d7840

08006f04 <LL_ADC_IsEnabled>:
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	f003 0301 	and.w	r3, r3, #1
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d101      	bne.n	8006f1c <LL_ADC_IsEnabled+0x18>
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e000      	b.n	8006f1e <LL_ADC_IsEnabled+0x1a>
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	370c      	adds	r7, #12
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr

08006f2a <LL_ADC_REG_IsConversionOngoing>:
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	b083      	sub	sp, #12
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	f003 0304 	and.w	r3, r3, #4
 8006f3a:	2b04      	cmp	r3, #4
 8006f3c:	d101      	bne.n	8006f42 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e000      	b.n	8006f44 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006f50:	b590      	push	{r4, r7, lr}
 8006f52:	b0a3      	sub	sp, #140	@ 0x8c
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d101      	bne.n	8006f6e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006f6a:	2302      	movs	r3, #2
 8006f6c:	e0c1      	b.n	80070f2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2201      	movs	r2, #1
 8006f72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006f76:	2300      	movs	r3, #0
 8006f78:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a5e      	ldr	r2, [pc, #376]	@ (80070fc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d102      	bne.n	8006f8e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006f88:	4b5d      	ldr	r3, [pc, #372]	@ (8007100 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006f8a:	60fb      	str	r3, [r7, #12]
 8006f8c:	e001      	b.n	8006f92 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006f8e:	2300      	movs	r3, #0
 8006f90:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d10b      	bne.n	8006fb0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f9c:	f043 0220 	orr.w	r2, r3, #32
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e0a0      	b.n	80070f2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7ff ffb9 	bl	8006f2a <LL_ADC_REG_IsConversionOngoing>
 8006fb8:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f7ff ffb2 	bl	8006f2a <LL_ADC_REG_IsConversionOngoing>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	f040 8081 	bne.w	80070d0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006fce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d17c      	bne.n	80070d0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a48      	ldr	r2, [pc, #288]	@ (80070fc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d004      	beq.n	8006fea <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a46      	ldr	r2, [pc, #280]	@ (8007100 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d101      	bne.n	8006fee <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8006fea:	4b46      	ldr	r3, [pc, #280]	@ (8007104 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006fec:	e000      	b.n	8006ff0 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8006fee:	4b46      	ldr	r3, [pc, #280]	@ (8007108 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006ff0:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d039      	beq.n	800706e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006ffa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	431a      	orrs	r2, r3
 8007008:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800700a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a3a      	ldr	r2, [pc, #232]	@ (80070fc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d004      	beq.n	8007020 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a39      	ldr	r2, [pc, #228]	@ (8007100 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d10e      	bne.n	800703e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8007020:	4836      	ldr	r0, [pc, #216]	@ (80070fc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007022:	f7ff ff6f 	bl	8006f04 <LL_ADC_IsEnabled>
 8007026:	4604      	mov	r4, r0
 8007028:	4835      	ldr	r0, [pc, #212]	@ (8007100 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800702a:	f7ff ff6b 	bl	8006f04 <LL_ADC_IsEnabled>
 800702e:	4603      	mov	r3, r0
 8007030:	4323      	orrs	r3, r4
 8007032:	2b00      	cmp	r3, #0
 8007034:	bf0c      	ite	eq
 8007036:	2301      	moveq	r3, #1
 8007038:	2300      	movne	r3, #0
 800703a:	b2db      	uxtb	r3, r3
 800703c:	e008      	b.n	8007050 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800703e:	4833      	ldr	r0, [pc, #204]	@ (800710c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8007040:	f7ff ff60 	bl	8006f04 <LL_ADC_IsEnabled>
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	bf0c      	ite	eq
 800704a:	2301      	moveq	r3, #1
 800704c:	2300      	movne	r3, #0
 800704e:	b2db      	uxtb	r3, r3
 8007050:	2b00      	cmp	r3, #0
 8007052:	d047      	beq.n	80070e4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007054:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007056:	689a      	ldr	r2, [r3, #8]
 8007058:	4b2d      	ldr	r3, [pc, #180]	@ (8007110 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800705a:	4013      	ands	r3, r2
 800705c:	683a      	ldr	r2, [r7, #0]
 800705e:	6811      	ldr	r1, [r2, #0]
 8007060:	683a      	ldr	r2, [r7, #0]
 8007062:	6892      	ldr	r2, [r2, #8]
 8007064:	430a      	orrs	r2, r1
 8007066:	431a      	orrs	r2, r3
 8007068:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800706a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800706c:	e03a      	b.n	80070e4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800706e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007076:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007078:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a1f      	ldr	r2, [pc, #124]	@ (80070fc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d004      	beq.n	800708e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a1d      	ldr	r2, [pc, #116]	@ (8007100 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d10e      	bne.n	80070ac <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800708e:	481b      	ldr	r0, [pc, #108]	@ (80070fc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007090:	f7ff ff38 	bl	8006f04 <LL_ADC_IsEnabled>
 8007094:	4604      	mov	r4, r0
 8007096:	481a      	ldr	r0, [pc, #104]	@ (8007100 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007098:	f7ff ff34 	bl	8006f04 <LL_ADC_IsEnabled>
 800709c:	4603      	mov	r3, r0
 800709e:	4323      	orrs	r3, r4
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	bf0c      	ite	eq
 80070a4:	2301      	moveq	r3, #1
 80070a6:	2300      	movne	r3, #0
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	e008      	b.n	80070be <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80070ac:	4817      	ldr	r0, [pc, #92]	@ (800710c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80070ae:	f7ff ff29 	bl	8006f04 <LL_ADC_IsEnabled>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	bf0c      	ite	eq
 80070b8:	2301      	moveq	r3, #1
 80070ba:	2300      	movne	r3, #0
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d010      	beq.n	80070e4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80070c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80070c4:	689a      	ldr	r2, [r3, #8]
 80070c6:	4b12      	ldr	r3, [pc, #72]	@ (8007110 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80070c8:	4013      	ands	r3, r2
 80070ca:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80070cc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80070ce:	e009      	b.n	80070e4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070d4:	f043 0220 	orr.w	r2, r3, #32
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80070e2:	e000      	b.n	80070e6 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80070e4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80070ee:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	378c      	adds	r7, #140	@ 0x8c
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd90      	pop	{r4, r7, pc}
 80070fa:	bf00      	nop
 80070fc:	40022000 	.word	0x40022000
 8007100:	40022100 	.word	0x40022100
 8007104:	40022300 	.word	0x40022300
 8007108:	58026300 	.word	0x58026300
 800710c:	58026000 	.word	0x58026000
 8007110:	fffff0e0 	.word	0xfffff0e0

08007114 <__NVIC_SetPriorityGrouping>:
{
 8007114:	b480      	push	{r7}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f003 0307 	and.w	r3, r3, #7
 8007122:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007124:	4b0b      	ldr	r3, [pc, #44]	@ (8007154 <__NVIC_SetPriorityGrouping+0x40>)
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800712a:	68ba      	ldr	r2, [r7, #8]
 800712c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007130:	4013      	ands	r3, r2
 8007132:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800713c:	4b06      	ldr	r3, [pc, #24]	@ (8007158 <__NVIC_SetPriorityGrouping+0x44>)
 800713e:	4313      	orrs	r3, r2
 8007140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007142:	4a04      	ldr	r2, [pc, #16]	@ (8007154 <__NVIC_SetPriorityGrouping+0x40>)
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	60d3      	str	r3, [r2, #12]
}
 8007148:	bf00      	nop
 800714a:	3714      	adds	r7, #20
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr
 8007154:	e000ed00 	.word	0xe000ed00
 8007158:	05fa0000 	.word	0x05fa0000

0800715c <__NVIC_GetPriorityGrouping>:
{
 800715c:	b480      	push	{r7}
 800715e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007160:	4b04      	ldr	r3, [pc, #16]	@ (8007174 <__NVIC_GetPriorityGrouping+0x18>)
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	0a1b      	lsrs	r3, r3, #8
 8007166:	f003 0307 	and.w	r3, r3, #7
}
 800716a:	4618      	mov	r0, r3
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr
 8007174:	e000ed00 	.word	0xe000ed00

08007178 <__NVIC_EnableIRQ>:
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	4603      	mov	r3, r0
 8007180:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007182:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007186:	2b00      	cmp	r3, #0
 8007188:	db0b      	blt.n	80071a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800718a:	88fb      	ldrh	r3, [r7, #6]
 800718c:	f003 021f 	and.w	r2, r3, #31
 8007190:	4907      	ldr	r1, [pc, #28]	@ (80071b0 <__NVIC_EnableIRQ+0x38>)
 8007192:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007196:	095b      	lsrs	r3, r3, #5
 8007198:	2001      	movs	r0, #1
 800719a:	fa00 f202 	lsl.w	r2, r0, r2
 800719e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80071a2:	bf00      	nop
 80071a4:	370c      	adds	r7, #12
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	e000e100 	.word	0xe000e100

080071b4 <__NVIC_SetPriority>:
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	4603      	mov	r3, r0
 80071bc:	6039      	str	r1, [r7, #0]
 80071be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80071c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	db0a      	blt.n	80071de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	b2da      	uxtb	r2, r3
 80071cc:	490c      	ldr	r1, [pc, #48]	@ (8007200 <__NVIC_SetPriority+0x4c>)
 80071ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071d2:	0112      	lsls	r2, r2, #4
 80071d4:	b2d2      	uxtb	r2, r2
 80071d6:	440b      	add	r3, r1
 80071d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80071dc:	e00a      	b.n	80071f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	b2da      	uxtb	r2, r3
 80071e2:	4908      	ldr	r1, [pc, #32]	@ (8007204 <__NVIC_SetPriority+0x50>)
 80071e4:	88fb      	ldrh	r3, [r7, #6]
 80071e6:	f003 030f 	and.w	r3, r3, #15
 80071ea:	3b04      	subs	r3, #4
 80071ec:	0112      	lsls	r2, r2, #4
 80071ee:	b2d2      	uxtb	r2, r2
 80071f0:	440b      	add	r3, r1
 80071f2:	761a      	strb	r2, [r3, #24]
}
 80071f4:	bf00      	nop
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr
 8007200:	e000e100 	.word	0xe000e100
 8007204:	e000ed00 	.word	0xe000ed00

08007208 <NVIC_EncodePriority>:
{
 8007208:	b480      	push	{r7}
 800720a:	b089      	sub	sp, #36	@ 0x24
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f003 0307 	and.w	r3, r3, #7
 800721a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	f1c3 0307 	rsb	r3, r3, #7
 8007222:	2b04      	cmp	r3, #4
 8007224:	bf28      	it	cs
 8007226:	2304      	movcs	r3, #4
 8007228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	3304      	adds	r3, #4
 800722e:	2b06      	cmp	r3, #6
 8007230:	d902      	bls.n	8007238 <NVIC_EncodePriority+0x30>
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	3b03      	subs	r3, #3
 8007236:	e000      	b.n	800723a <NVIC_EncodePriority+0x32>
 8007238:	2300      	movs	r3, #0
 800723a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800723c:	f04f 32ff 	mov.w	r2, #4294967295
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	fa02 f303 	lsl.w	r3, r2, r3
 8007246:	43da      	mvns	r2, r3
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	401a      	ands	r2, r3
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007250:	f04f 31ff 	mov.w	r1, #4294967295
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	fa01 f303 	lsl.w	r3, r1, r3
 800725a:	43d9      	mvns	r1, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007260:	4313      	orrs	r3, r2
}
 8007262:	4618      	mov	r0, r3
 8007264:	3724      	adds	r7, #36	@ 0x24
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr

0800726e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b082      	sub	sp, #8
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f7ff ff4c 	bl	8007114 <__NVIC_SetPriorityGrouping>
}
 800727c:	bf00      	nop
 800727e:	3708      	adds	r7, #8
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b086      	sub	sp, #24
 8007288:	af00      	add	r7, sp, #0
 800728a:	4603      	mov	r3, r0
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]
 8007290:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007292:	f7ff ff63 	bl	800715c <__NVIC_GetPriorityGrouping>
 8007296:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	68b9      	ldr	r1, [r7, #8]
 800729c:	6978      	ldr	r0, [r7, #20]
 800729e:	f7ff ffb3 	bl	8007208 <NVIC_EncodePriority>
 80072a2:	4602      	mov	r2, r0
 80072a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80072a8:	4611      	mov	r1, r2
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7ff ff82 	bl	80071b4 <__NVIC_SetPriority>
}
 80072b0:	bf00      	nop
 80072b2:	3718      	adds	r7, #24
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	4603      	mov	r3, r0
 80072c0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80072c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7ff ff56 	bl	8007178 <__NVIC_EnableIRQ>
}
 80072cc:	bf00      	nop
 80072ce:	3708      	adds	r7, #8
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80072d4:	b480      	push	{r7}
 80072d6:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80072d8:	f3bf 8f5f 	dmb	sy
}
 80072dc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80072de:	4b07      	ldr	r3, [pc, #28]	@ (80072fc <HAL_MPU_Disable+0x28>)
 80072e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e2:	4a06      	ldr	r2, [pc, #24]	@ (80072fc <HAL_MPU_Disable+0x28>)
 80072e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072e8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80072ea:	4b05      	ldr	r3, [pc, #20]	@ (8007300 <HAL_MPU_Disable+0x2c>)
 80072ec:	2200      	movs	r2, #0
 80072ee:	605a      	str	r2, [r3, #4]
}
 80072f0:	bf00      	nop
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	e000ed00 	.word	0xe000ed00
 8007300:	e000ed90 	.word	0xe000ed90

08007304 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800730c:	4a0b      	ldr	r2, [pc, #44]	@ (800733c <HAL_MPU_Enable+0x38>)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f043 0301 	orr.w	r3, r3, #1
 8007314:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8007316:	4b0a      	ldr	r3, [pc, #40]	@ (8007340 <HAL_MPU_Enable+0x3c>)
 8007318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800731a:	4a09      	ldr	r2, [pc, #36]	@ (8007340 <HAL_MPU_Enable+0x3c>)
 800731c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007320:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8007322:	f3bf 8f4f 	dsb	sy
}
 8007326:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007328:	f3bf 8f6f 	isb	sy
}
 800732c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800732e:	bf00      	nop
 8007330:	370c      	adds	r7, #12
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr
 800733a:	bf00      	nop
 800733c:	e000ed90 	.word	0xe000ed90
 8007340:	e000ed00 	.word	0xe000ed00

08007344 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	785a      	ldrb	r2, [r3, #1]
 8007350:	4b1b      	ldr	r3, [pc, #108]	@ (80073c0 <HAL_MPU_ConfigRegion+0x7c>)
 8007352:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8007354:	4b1a      	ldr	r3, [pc, #104]	@ (80073c0 <HAL_MPU_ConfigRegion+0x7c>)
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	4a19      	ldr	r2, [pc, #100]	@ (80073c0 <HAL_MPU_ConfigRegion+0x7c>)
 800735a:	f023 0301 	bic.w	r3, r3, #1
 800735e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8007360:	4a17      	ldr	r2, [pc, #92]	@ (80073c0 <HAL_MPU_ConfigRegion+0x7c>)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	7b1b      	ldrb	r3, [r3, #12]
 800736c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	7adb      	ldrb	r3, [r3, #11]
 8007372:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007374:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	7a9b      	ldrb	r3, [r3, #10]
 800737a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800737c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	7b5b      	ldrb	r3, [r3, #13]
 8007382:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8007384:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	7b9b      	ldrb	r3, [r3, #14]
 800738a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800738c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	7bdb      	ldrb	r3, [r3, #15]
 8007392:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8007394:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	7a5b      	ldrb	r3, [r3, #9]
 800739a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800739c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	7a1b      	ldrb	r3, [r3, #8]
 80073a2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80073a4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	7812      	ldrb	r2, [r2, #0]
 80073aa:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80073ac:	4a04      	ldr	r2, [pc, #16]	@ (80073c0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80073ae:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80073b0:	6113      	str	r3, [r2, #16]
}
 80073b2:	bf00      	nop
 80073b4:	370c      	adds	r7, #12
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	e000ed90 	.word	0xe000ed90

080073c4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d101      	bne.n	80073d6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e054      	b.n	8007480 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	7f5b      	ldrb	r3, [r3, #29]
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d105      	bne.n	80073ec <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f7fa fc2a 	bl	8001c40 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2202      	movs	r2, #2
 80073f0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	791b      	ldrb	r3, [r3, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d10c      	bne.n	8007414 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a22      	ldr	r2, [pc, #136]	@ (8007488 <HAL_CRC_Init+0xc4>)
 8007400:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	689a      	ldr	r2, [r3, #8]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f022 0218 	bic.w	r2, r2, #24
 8007410:	609a      	str	r2, [r3, #8]
 8007412:	e00c      	b.n	800742e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6899      	ldr	r1, [r3, #8]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	461a      	mov	r2, r3
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 f834 	bl	800748c <HAL_CRCEx_Polynomial_Set>
 8007424:	4603      	mov	r3, r0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d001      	beq.n	800742e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e028      	b.n	8007480 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	795b      	ldrb	r3, [r3, #5]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d105      	bne.n	8007442 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f04f 32ff 	mov.w	r2, #4294967295
 800743e:	611a      	str	r2, [r3, #16]
 8007440:	e004      	b.n	800744c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	6912      	ldr	r2, [r2, #16]
 800744a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	695a      	ldr	r2, [r3, #20]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	430a      	orrs	r2, r1
 8007460:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	699a      	ldr	r2, [r3, #24]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	430a      	orrs	r2, r1
 8007476:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3708      	adds	r7, #8
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	04c11db7 	.word	0x04c11db7

0800748c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800748c:	b480      	push	{r7}
 800748e:	b087      	sub	sp, #28
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007498:	2300      	movs	r3, #0
 800749a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800749c:	231f      	movs	r3, #31
 800749e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	f003 0301 	and.w	r3, r3, #1
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d102      	bne.n	80074b0 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	75fb      	strb	r3, [r7, #23]
 80074ae:	e063      	b.n	8007578 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80074b0:	bf00      	nop
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	1e5a      	subs	r2, r3, #1
 80074b6:	613a      	str	r2, [r7, #16]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d009      	beq.n	80074d0 <HAL_CRCEx_Polynomial_Set+0x44>
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	f003 031f 	and.w	r3, r3, #31
 80074c2:	68ba      	ldr	r2, [r7, #8]
 80074c4:	fa22 f303 	lsr.w	r3, r2, r3
 80074c8:	f003 0301 	and.w	r3, r3, #1
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d0f0      	beq.n	80074b2 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2b18      	cmp	r3, #24
 80074d4:	d846      	bhi.n	8007564 <HAL_CRCEx_Polynomial_Set+0xd8>
 80074d6:	a201      	add	r2, pc, #4	@ (adr r2, 80074dc <HAL_CRCEx_Polynomial_Set+0x50>)
 80074d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074dc:	0800756b 	.word	0x0800756b
 80074e0:	08007565 	.word	0x08007565
 80074e4:	08007565 	.word	0x08007565
 80074e8:	08007565 	.word	0x08007565
 80074ec:	08007565 	.word	0x08007565
 80074f0:	08007565 	.word	0x08007565
 80074f4:	08007565 	.word	0x08007565
 80074f8:	08007565 	.word	0x08007565
 80074fc:	08007559 	.word	0x08007559
 8007500:	08007565 	.word	0x08007565
 8007504:	08007565 	.word	0x08007565
 8007508:	08007565 	.word	0x08007565
 800750c:	08007565 	.word	0x08007565
 8007510:	08007565 	.word	0x08007565
 8007514:	08007565 	.word	0x08007565
 8007518:	08007565 	.word	0x08007565
 800751c:	0800754d 	.word	0x0800754d
 8007520:	08007565 	.word	0x08007565
 8007524:	08007565 	.word	0x08007565
 8007528:	08007565 	.word	0x08007565
 800752c:	08007565 	.word	0x08007565
 8007530:	08007565 	.word	0x08007565
 8007534:	08007565 	.word	0x08007565
 8007538:	08007565 	.word	0x08007565
 800753c:	08007541 	.word	0x08007541
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	2b06      	cmp	r3, #6
 8007544:	d913      	bls.n	800756e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800754a:	e010      	b.n	800756e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	2b07      	cmp	r3, #7
 8007550:	d90f      	bls.n	8007572 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8007556:	e00c      	b.n	8007572 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	2b0f      	cmp	r3, #15
 800755c:	d90b      	bls.n	8007576 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8007562:	e008      	b.n	8007576 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	75fb      	strb	r3, [r7, #23]
        break;
 8007568:	e006      	b.n	8007578 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800756a:	bf00      	nop
 800756c:	e004      	b.n	8007578 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800756e:	bf00      	nop
 8007570:	e002      	b.n	8007578 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8007572:	bf00      	nop
 8007574:	e000      	b.n	8007578 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8007576:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8007578:	7dfb      	ldrb	r3, [r7, #23]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d10d      	bne.n	800759a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	68ba      	ldr	r2, [r7, #8]
 8007584:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	f023 0118 	bic.w	r1, r3, #24
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	430a      	orrs	r2, r1
 8007598:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800759a:	7dfb      	ldrb	r3, [r7, #23]
}
 800759c:	4618      	mov	r0, r3
 800759e:	371c      	adds	r7, #28
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d101      	bne.n	80075ba <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e014      	b.n	80075e4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	791b      	ldrb	r3, [r3, #4]
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d105      	bne.n	80075d0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f7fa fb5a 	bl	8001c84 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2202      	movs	r2, #2
 80075d4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3708      	adds	r7, #8
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007602:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800760a:	2b00      	cmp	r3, #0
 800760c:	d01d      	beq.n	800764a <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007614:	2b00      	cmp	r3, #0
 8007616:	d018      	beq.n	800764a <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2204      	movs	r2, #4
 800761c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	f043 0201 	orr.w	r2, r3, #1
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007632:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007642:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 f827 	bl	8007698 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007650:	2b00      	cmp	r3, #0
 8007652:	d01d      	beq.n	8007690 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800765a:	2b00      	cmp	r3, #0
 800765c:	d018      	beq.n	8007690 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2204      	movs	r2, #4
 8007662:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	691b      	ldr	r3, [r3, #16]
 8007668:	f043 0202 	orr.w	r2, r3, #2
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8007678:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8007688:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 f950 	bl	8007930 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8007690:	bf00      	nop
 8007692:	3710      	adds	r7, #16
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80076a0:	bf00      	nop
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b08a      	sub	sp, #40	@ 0x28
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076b8:	2300      	movs	r3, #0
 80076ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d002      	beq.n	80076ca <HAL_DAC_ConfigChannel+0x1e>
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d101      	bne.n	80076ce <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	e12a      	b.n	8007924 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	795b      	ldrb	r3, [r3, #5]
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d101      	bne.n	80076da <HAL_DAC_ConfigChannel+0x2e>
 80076d6:	2302      	movs	r3, #2
 80076d8:	e124      	b.n	8007924 <HAL_DAC_ConfigChannel+0x278>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2201      	movs	r2, #1
 80076de:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2202      	movs	r2, #2
 80076e4:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	2b04      	cmp	r3, #4
 80076ec:	d17a      	bne.n	80077e4 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80076ee:	f7fe f957 	bl	80059a0 <HAL_GetTick>
 80076f2:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d13d      	bne.n	8007776 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80076fa:	e018      	b.n	800772e <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80076fc:	f7fe f950 	bl	80059a0 <HAL_GetTick>
 8007700:	4602      	mov	r2, r0
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	1ad3      	subs	r3, r2, r3
 8007706:	2b01      	cmp	r3, #1
 8007708:	d911      	bls.n	800772e <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007710:	4b86      	ldr	r3, [pc, #536]	@ (800792c <HAL_DAC_ConfigChannel+0x280>)
 8007712:	4013      	ands	r3, r2
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00a      	beq.n	800772e <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	691b      	ldr	r3, [r3, #16]
 800771c:	f043 0208 	orr.w	r2, r3, #8
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2203      	movs	r2, #3
 8007728:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	e0fa      	b.n	8007924 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007734:	4b7d      	ldr	r3, [pc, #500]	@ (800792c <HAL_DAC_ConfigChannel+0x280>)
 8007736:	4013      	ands	r3, r2
 8007738:	2b00      	cmp	r3, #0
 800773a:	d1df      	bne.n	80076fc <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	68ba      	ldr	r2, [r7, #8]
 8007742:	6992      	ldr	r2, [r2, #24]
 8007744:	641a      	str	r2, [r3, #64]	@ 0x40
 8007746:	e020      	b.n	800778a <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007748:	f7fe f92a 	bl	80059a0 <HAL_GetTick>
 800774c:	4602      	mov	r2, r0
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	2b01      	cmp	r3, #1
 8007754:	d90f      	bls.n	8007776 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800775c:	2b00      	cmp	r3, #0
 800775e:	da0a      	bge.n	8007776 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	691b      	ldr	r3, [r3, #16]
 8007764:	f043 0208 	orr.w	r2, r3, #8
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2203      	movs	r2, #3
 8007770:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e0d6      	b.n	8007924 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800777c:	2b00      	cmp	r3, #0
 800777e:	dbe3      	blt.n	8007748 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68ba      	ldr	r2, [r7, #8]
 8007786:	6992      	ldr	r2, [r2, #24]
 8007788:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f003 0310 	and.w	r3, r3, #16
 8007796:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800779a:	fa01 f303 	lsl.w	r3, r1, r3
 800779e:	43db      	mvns	r3, r3
 80077a0:	ea02 0103 	and.w	r1, r2, r3
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	69da      	ldr	r2, [r3, #28]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f003 0310 	and.w	r3, r3, #16
 80077ae:	409a      	lsls	r2, r3
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	430a      	orrs	r2, r1
 80077b6:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f003 0310 	and.w	r3, r3, #16
 80077c4:	21ff      	movs	r1, #255	@ 0xff
 80077c6:	fa01 f303 	lsl.w	r3, r1, r3
 80077ca:	43db      	mvns	r3, r3
 80077cc:	ea02 0103 	and.w	r1, r2, r3
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	6a1a      	ldr	r2, [r3, #32]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f003 0310 	and.w	r3, r3, #16
 80077da:	409a      	lsls	r2, r3
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	430a      	orrs	r2, r1
 80077e2:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d11d      	bne.n	8007828 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077f2:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f003 0310 	and.w	r3, r3, #16
 80077fa:	221f      	movs	r2, #31
 80077fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007800:	43db      	mvns	r3, r3
 8007802:	69ba      	ldr	r2, [r7, #24]
 8007804:	4013      	ands	r3, r2
 8007806:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	695b      	ldr	r3, [r3, #20]
 800780c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f003 0310 	and.w	r3, r3, #16
 8007814:	697a      	ldr	r2, [r7, #20]
 8007816:	fa02 f303 	lsl.w	r3, r2, r3
 800781a:	69ba      	ldr	r2, [r7, #24]
 800781c:	4313      	orrs	r3, r2
 800781e:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	69ba      	ldr	r2, [r7, #24]
 8007826:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800782e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f003 0310 	and.w	r3, r3, #16
 8007836:	2207      	movs	r2, #7
 8007838:	fa02 f303 	lsl.w	r3, r2, r3
 800783c:	43db      	mvns	r3, r3
 800783e:	69ba      	ldr	r2, [r7, #24]
 8007840:	4013      	ands	r3, r2
 8007842:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	2b01      	cmp	r3, #1
 800784a:	d102      	bne.n	8007852 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 800784c:	2300      	movs	r3, #0
 800784e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007850:	e00f      	b.n	8007872 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	2b02      	cmp	r3, #2
 8007858:	d102      	bne.n	8007860 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800785a:	2301      	movs	r3, #1
 800785c:	627b      	str	r3, [r7, #36]	@ 0x24
 800785e:	e008      	b.n	8007872 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d102      	bne.n	800786e <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8007868:	2301      	movs	r3, #1
 800786a:	627b      	str	r3, [r7, #36]	@ 0x24
 800786c:	e001      	b.n	8007872 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800786e:	2300      	movs	r3, #0
 8007870:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	4313      	orrs	r3, r2
 800787c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800787e:	4313      	orrs	r3, r2
 8007880:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f003 0310 	and.w	r3, r3, #16
 8007888:	697a      	ldr	r2, [r7, #20]
 800788a:	fa02 f303 	lsl.w	r3, r2, r3
 800788e:	69ba      	ldr	r2, [r7, #24]
 8007890:	4313      	orrs	r3, r2
 8007892:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	69ba      	ldr	r2, [r7, #24]
 800789a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	6819      	ldr	r1, [r3, #0]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f003 0310 	and.w	r3, r3, #16
 80078a8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80078ac:	fa02 f303 	lsl.w	r3, r2, r3
 80078b0:	43da      	mvns	r2, r3
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	400a      	ands	r2, r1
 80078b8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f003 0310 	and.w	r3, r3, #16
 80078c8:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80078cc:	fa02 f303 	lsl.w	r3, r2, r3
 80078d0:	43db      	mvns	r3, r3
 80078d2:	69ba      	ldr	r2, [r7, #24]
 80078d4:	4013      	ands	r3, r2
 80078d6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f003 0310 	and.w	r3, r3, #16
 80078e4:	697a      	ldr	r2, [r7, #20]
 80078e6:	fa02 f303 	lsl.w	r3, r2, r3
 80078ea:	69ba      	ldr	r2, [r7, #24]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	69ba      	ldr	r2, [r7, #24]
 80078f6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	6819      	ldr	r1, [r3, #0]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f003 0310 	and.w	r3, r3, #16
 8007904:	22c0      	movs	r2, #192	@ 0xc0
 8007906:	fa02 f303 	lsl.w	r3, r2, r3
 800790a:	43da      	mvns	r2, r3
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	400a      	ands	r2, r1
 8007912:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2201      	movs	r2, #1
 8007918:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2200      	movs	r2, #0
 800791e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8007920:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8007924:	4618      	mov	r0, r3
 8007926:	3728      	adds	r7, #40	@ 0x28
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	20008000 	.word	0x20008000

08007930 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8007938:	bf00      	nop
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d101      	bne.n	8007956 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e04f      	b.n	80079f6 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800795c:	b2db      	uxtb	r3, r3
 800795e:	2b00      	cmp	r3, #0
 8007960:	d106      	bne.n	8007970 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f7fa f9d8 	bl	8001d20 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2202      	movs	r2, #2
 8007974:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	4b20      	ldr	r3, [pc, #128]	@ (8007a00 <HAL_DMA2D_Init+0xbc>)
 8007980:	4013      	ands	r3, r2
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	6851      	ldr	r1, [r2, #4]
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	69d2      	ldr	r2, [r2, #28]
 800798a:	4311      	orrs	r1, r2
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	6812      	ldr	r2, [r2, #0]
 8007990:	430b      	orrs	r3, r1
 8007992:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800799a:	4b1a      	ldr	r3, [pc, #104]	@ (8007a04 <HAL_DMA2D_Init+0xc0>)
 800799c:	4013      	ands	r3, r2
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	6891      	ldr	r1, [r2, #8]
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	6992      	ldr	r2, [r2, #24]
 80079a6:	4311      	orrs	r1, r2
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	6812      	ldr	r2, [r2, #0]
 80079ac:	430b      	orrs	r3, r1
 80079ae:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80079b6:	4b14      	ldr	r3, [pc, #80]	@ (8007a08 <HAL_DMA2D_Init+0xc4>)
 80079b8:	4013      	ands	r3, r2
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	68d1      	ldr	r1, [r2, #12]
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	6812      	ldr	r2, [r2, #0]
 80079c2:	430b      	orrs	r3, r1
 80079c4:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079cc:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	691b      	ldr	r3, [r3, #16]
 80079d4:	051a      	lsls	r2, r3, #20
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	695b      	ldr	r3, [r3, #20]
 80079da:	055b      	lsls	r3, r3, #21
 80079dc:	431a      	orrs	r2, r3
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	430a      	orrs	r2, r1
 80079e4:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3708      	adds	r7, #8
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	fff8ffbf 	.word	0xfff8ffbf
 8007a04:	fffffef8 	.word	0xfffffef8
 8007a08:	ffff0000 	.word	0xffff0000

08007a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b089      	sub	sp, #36	@ 0x24
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007a16:	2300      	movs	r3, #0
 8007a18:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007a1a:	4b86      	ldr	r3, [pc, #536]	@ (8007c34 <HAL_GPIO_Init+0x228>)
 8007a1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007a1e:	e18c      	b.n	8007d3a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	2101      	movs	r1, #1
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	fa01 f303 	lsl.w	r3, r1, r3
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	f000 817e 	beq.w	8007d34 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	f003 0303 	and.w	r3, r3, #3
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d005      	beq.n	8007a50 <HAL_GPIO_Init+0x44>
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	f003 0303 	and.w	r3, r3, #3
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	d130      	bne.n	8007ab2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	005b      	lsls	r3, r3, #1
 8007a5a:	2203      	movs	r2, #3
 8007a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a60:	43db      	mvns	r3, r3
 8007a62:	69ba      	ldr	r2, [r7, #24]
 8007a64:	4013      	ands	r3, r2
 8007a66:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	68da      	ldr	r2, [r3, #12]
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	005b      	lsls	r3, r3, #1
 8007a70:	fa02 f303 	lsl.w	r3, r2, r3
 8007a74:	69ba      	ldr	r2, [r7, #24]
 8007a76:	4313      	orrs	r3, r2
 8007a78:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	69ba      	ldr	r2, [r7, #24]
 8007a7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007a86:	2201      	movs	r2, #1
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a8e:	43db      	mvns	r3, r3
 8007a90:	69ba      	ldr	r2, [r7, #24]
 8007a92:	4013      	ands	r3, r2
 8007a94:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	091b      	lsrs	r3, r3, #4
 8007a9c:	f003 0201 	and.w	r2, r3, #1
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa6:	69ba      	ldr	r2, [r7, #24]
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	69ba      	ldr	r2, [r7, #24]
 8007ab0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	f003 0303 	and.w	r3, r3, #3
 8007aba:	2b03      	cmp	r3, #3
 8007abc:	d017      	beq.n	8007aee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	005b      	lsls	r3, r3, #1
 8007ac8:	2203      	movs	r2, #3
 8007aca:	fa02 f303 	lsl.w	r3, r2, r3
 8007ace:	43db      	mvns	r3, r3
 8007ad0:	69ba      	ldr	r2, [r7, #24]
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	689a      	ldr	r2, [r3, #8]
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	005b      	lsls	r3, r3, #1
 8007ade:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae2:	69ba      	ldr	r2, [r7, #24]
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	69ba      	ldr	r2, [r7, #24]
 8007aec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	f003 0303 	and.w	r3, r3, #3
 8007af6:	2b02      	cmp	r3, #2
 8007af8:	d123      	bne.n	8007b42 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	08da      	lsrs	r2, r3, #3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	3208      	adds	r2, #8
 8007b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	f003 0307 	and.w	r3, r3, #7
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	220f      	movs	r2, #15
 8007b12:	fa02 f303 	lsl.w	r3, r2, r3
 8007b16:	43db      	mvns	r3, r3
 8007b18:	69ba      	ldr	r2, [r7, #24]
 8007b1a:	4013      	ands	r3, r2
 8007b1c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	691a      	ldr	r2, [r3, #16]
 8007b22:	69fb      	ldr	r3, [r7, #28]
 8007b24:	f003 0307 	and.w	r3, r3, #7
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b2e:	69ba      	ldr	r2, [r7, #24]
 8007b30:	4313      	orrs	r3, r2
 8007b32:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	08da      	lsrs	r2, r3, #3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	3208      	adds	r2, #8
 8007b3c:	69b9      	ldr	r1, [r7, #24]
 8007b3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	005b      	lsls	r3, r3, #1
 8007b4c:	2203      	movs	r2, #3
 8007b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b52:	43db      	mvns	r3, r3
 8007b54:	69ba      	ldr	r2, [r7, #24]
 8007b56:	4013      	ands	r3, r2
 8007b58:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	f003 0203 	and.w	r2, r3, #3
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	005b      	lsls	r3, r3, #1
 8007b66:	fa02 f303 	lsl.w	r3, r2, r3
 8007b6a:	69ba      	ldr	r2, [r7, #24]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	69ba      	ldr	r2, [r7, #24]
 8007b74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	f000 80d8 	beq.w	8007d34 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b84:	4b2c      	ldr	r3, [pc, #176]	@ (8007c38 <HAL_GPIO_Init+0x22c>)
 8007b86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007b8a:	4a2b      	ldr	r2, [pc, #172]	@ (8007c38 <HAL_GPIO_Init+0x22c>)
 8007b8c:	f043 0302 	orr.w	r3, r3, #2
 8007b90:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007b94:	4b28      	ldr	r3, [pc, #160]	@ (8007c38 <HAL_GPIO_Init+0x22c>)
 8007b96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007b9a:	f003 0302 	and.w	r3, r3, #2
 8007b9e:	60fb      	str	r3, [r7, #12]
 8007ba0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007ba2:	4a26      	ldr	r2, [pc, #152]	@ (8007c3c <HAL_GPIO_Init+0x230>)
 8007ba4:	69fb      	ldr	r3, [r7, #28]
 8007ba6:	089b      	lsrs	r3, r3, #2
 8007ba8:	3302      	adds	r3, #2
 8007baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	f003 0303 	and.w	r3, r3, #3
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	220f      	movs	r2, #15
 8007bba:	fa02 f303 	lsl.w	r3, r2, r3
 8007bbe:	43db      	mvns	r3, r3
 8007bc0:	69ba      	ldr	r2, [r7, #24]
 8007bc2:	4013      	ands	r3, r2
 8007bc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8007c40 <HAL_GPIO_Init+0x234>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d04a      	beq.n	8007c64 <HAL_GPIO_Init+0x258>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a1c      	ldr	r2, [pc, #112]	@ (8007c44 <HAL_GPIO_Init+0x238>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d02b      	beq.n	8007c2e <HAL_GPIO_Init+0x222>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4a1b      	ldr	r2, [pc, #108]	@ (8007c48 <HAL_GPIO_Init+0x23c>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d025      	beq.n	8007c2a <HAL_GPIO_Init+0x21e>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a1a      	ldr	r2, [pc, #104]	@ (8007c4c <HAL_GPIO_Init+0x240>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d01f      	beq.n	8007c26 <HAL_GPIO_Init+0x21a>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a19      	ldr	r2, [pc, #100]	@ (8007c50 <HAL_GPIO_Init+0x244>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d019      	beq.n	8007c22 <HAL_GPIO_Init+0x216>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a18      	ldr	r2, [pc, #96]	@ (8007c54 <HAL_GPIO_Init+0x248>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d013      	beq.n	8007c1e <HAL_GPIO_Init+0x212>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4a17      	ldr	r2, [pc, #92]	@ (8007c58 <HAL_GPIO_Init+0x24c>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d00d      	beq.n	8007c1a <HAL_GPIO_Init+0x20e>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4a16      	ldr	r2, [pc, #88]	@ (8007c5c <HAL_GPIO_Init+0x250>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d007      	beq.n	8007c16 <HAL_GPIO_Init+0x20a>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a15      	ldr	r2, [pc, #84]	@ (8007c60 <HAL_GPIO_Init+0x254>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d101      	bne.n	8007c12 <HAL_GPIO_Init+0x206>
 8007c0e:	2309      	movs	r3, #9
 8007c10:	e029      	b.n	8007c66 <HAL_GPIO_Init+0x25a>
 8007c12:	230a      	movs	r3, #10
 8007c14:	e027      	b.n	8007c66 <HAL_GPIO_Init+0x25a>
 8007c16:	2307      	movs	r3, #7
 8007c18:	e025      	b.n	8007c66 <HAL_GPIO_Init+0x25a>
 8007c1a:	2306      	movs	r3, #6
 8007c1c:	e023      	b.n	8007c66 <HAL_GPIO_Init+0x25a>
 8007c1e:	2305      	movs	r3, #5
 8007c20:	e021      	b.n	8007c66 <HAL_GPIO_Init+0x25a>
 8007c22:	2304      	movs	r3, #4
 8007c24:	e01f      	b.n	8007c66 <HAL_GPIO_Init+0x25a>
 8007c26:	2303      	movs	r3, #3
 8007c28:	e01d      	b.n	8007c66 <HAL_GPIO_Init+0x25a>
 8007c2a:	2302      	movs	r3, #2
 8007c2c:	e01b      	b.n	8007c66 <HAL_GPIO_Init+0x25a>
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e019      	b.n	8007c66 <HAL_GPIO_Init+0x25a>
 8007c32:	bf00      	nop
 8007c34:	58000080 	.word	0x58000080
 8007c38:	58024400 	.word	0x58024400
 8007c3c:	58000400 	.word	0x58000400
 8007c40:	58020000 	.word	0x58020000
 8007c44:	58020400 	.word	0x58020400
 8007c48:	58020800 	.word	0x58020800
 8007c4c:	58020c00 	.word	0x58020c00
 8007c50:	58021000 	.word	0x58021000
 8007c54:	58021400 	.word	0x58021400
 8007c58:	58021800 	.word	0x58021800
 8007c5c:	58021c00 	.word	0x58021c00
 8007c60:	58022400 	.word	0x58022400
 8007c64:	2300      	movs	r3, #0
 8007c66:	69fa      	ldr	r2, [r7, #28]
 8007c68:	f002 0203 	and.w	r2, r2, #3
 8007c6c:	0092      	lsls	r2, r2, #2
 8007c6e:	4093      	lsls	r3, r2
 8007c70:	69ba      	ldr	r2, [r7, #24]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007c76:	4938      	ldr	r1, [pc, #224]	@ (8007d58 <HAL_GPIO_Init+0x34c>)
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	089b      	lsrs	r3, r3, #2
 8007c7c:	3302      	adds	r3, #2
 8007c7e:	69ba      	ldr	r2, [r7, #24]
 8007c80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007c84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	43db      	mvns	r3, r3
 8007c90:	69ba      	ldr	r2, [r7, #24]
 8007c92:	4013      	ands	r3, r2
 8007c94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d003      	beq.n	8007caa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007ca2:	69ba      	ldr	r2, [r7, #24]
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007caa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007cb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	43db      	mvns	r3, r3
 8007cbe:	69ba      	ldr	r2, [r7, #24]
 8007cc0:	4013      	ands	r3, r2
 8007cc2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d003      	beq.n	8007cd8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007cd0:	69ba      	ldr	r2, [r7, #24]
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007cd8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007cdc:	69bb      	ldr	r3, [r7, #24]
 8007cde:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	43db      	mvns	r3, r3
 8007cea:	69ba      	ldr	r2, [r7, #24]
 8007cec:	4013      	ands	r3, r2
 8007cee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d003      	beq.n	8007d04 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007cfc:	69ba      	ldr	r2, [r7, #24]
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	4313      	orrs	r3, r2
 8007d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	69ba      	ldr	r2, [r7, #24]
 8007d08:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	43db      	mvns	r3, r3
 8007d14:	69ba      	ldr	r2, [r7, #24]
 8007d16:	4013      	ands	r3, r2
 8007d18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d003      	beq.n	8007d2e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007d26:	69ba      	ldr	r2, [r7, #24]
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	69ba      	ldr	r2, [r7, #24]
 8007d32:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	3301      	adds	r3, #1
 8007d38:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	69fb      	ldr	r3, [r7, #28]
 8007d40:	fa22 f303 	lsr.w	r3, r2, r3
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	f47f ae6b 	bne.w	8007a20 <HAL_GPIO_Init+0x14>
  }
}
 8007d4a:	bf00      	nop
 8007d4c:	bf00      	nop
 8007d4e:	3724      	adds	r7, #36	@ 0x24
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr
 8007d58:	58000400 	.word	0x58000400

08007d5c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b087      	sub	sp, #28
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007d66:	2300      	movs	r3, #0
 8007d68:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007d6a:	4b72      	ldr	r3, [pc, #456]	@ (8007f34 <HAL_GPIO_DeInit+0x1d8>)
 8007d6c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8007d6e:	e0d3      	b.n	8007f18 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8007d70:	2201      	movs	r2, #1
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	fa02 f303 	lsl.w	r3, r2, r3
 8007d78:	683a      	ldr	r2, [r7, #0]
 8007d7a:	4013      	ands	r3, r2
 8007d7c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f000 80c6 	beq.w	8007f12 <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007d86:	4a6c      	ldr	r2, [pc, #432]	@ (8007f38 <HAL_GPIO_DeInit+0x1dc>)
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	089b      	lsrs	r3, r3, #2
 8007d8c:	3302      	adds	r3, #2
 8007d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d92:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	f003 0303 	and.w	r3, r3, #3
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	220f      	movs	r2, #15
 8007d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007da2:	68ba      	ldr	r2, [r7, #8]
 8007da4:	4013      	ands	r3, r2
 8007da6:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a64      	ldr	r2, [pc, #400]	@ (8007f3c <HAL_GPIO_DeInit+0x1e0>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d031      	beq.n	8007e14 <HAL_GPIO_DeInit+0xb8>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4a63      	ldr	r2, [pc, #396]	@ (8007f40 <HAL_GPIO_DeInit+0x1e4>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d02b      	beq.n	8007e10 <HAL_GPIO_DeInit+0xb4>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4a62      	ldr	r2, [pc, #392]	@ (8007f44 <HAL_GPIO_DeInit+0x1e8>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d025      	beq.n	8007e0c <HAL_GPIO_DeInit+0xb0>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a61      	ldr	r2, [pc, #388]	@ (8007f48 <HAL_GPIO_DeInit+0x1ec>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d01f      	beq.n	8007e08 <HAL_GPIO_DeInit+0xac>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a60      	ldr	r2, [pc, #384]	@ (8007f4c <HAL_GPIO_DeInit+0x1f0>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d019      	beq.n	8007e04 <HAL_GPIO_DeInit+0xa8>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	4a5f      	ldr	r2, [pc, #380]	@ (8007f50 <HAL_GPIO_DeInit+0x1f4>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d013      	beq.n	8007e00 <HAL_GPIO_DeInit+0xa4>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	4a5e      	ldr	r2, [pc, #376]	@ (8007f54 <HAL_GPIO_DeInit+0x1f8>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d00d      	beq.n	8007dfc <HAL_GPIO_DeInit+0xa0>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	4a5d      	ldr	r2, [pc, #372]	@ (8007f58 <HAL_GPIO_DeInit+0x1fc>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d007      	beq.n	8007df8 <HAL_GPIO_DeInit+0x9c>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4a5c      	ldr	r2, [pc, #368]	@ (8007f5c <HAL_GPIO_DeInit+0x200>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d101      	bne.n	8007df4 <HAL_GPIO_DeInit+0x98>
 8007df0:	2309      	movs	r3, #9
 8007df2:	e010      	b.n	8007e16 <HAL_GPIO_DeInit+0xba>
 8007df4:	230a      	movs	r3, #10
 8007df6:	e00e      	b.n	8007e16 <HAL_GPIO_DeInit+0xba>
 8007df8:	2307      	movs	r3, #7
 8007dfa:	e00c      	b.n	8007e16 <HAL_GPIO_DeInit+0xba>
 8007dfc:	2306      	movs	r3, #6
 8007dfe:	e00a      	b.n	8007e16 <HAL_GPIO_DeInit+0xba>
 8007e00:	2305      	movs	r3, #5
 8007e02:	e008      	b.n	8007e16 <HAL_GPIO_DeInit+0xba>
 8007e04:	2304      	movs	r3, #4
 8007e06:	e006      	b.n	8007e16 <HAL_GPIO_DeInit+0xba>
 8007e08:	2303      	movs	r3, #3
 8007e0a:	e004      	b.n	8007e16 <HAL_GPIO_DeInit+0xba>
 8007e0c:	2302      	movs	r3, #2
 8007e0e:	e002      	b.n	8007e16 <HAL_GPIO_DeInit+0xba>
 8007e10:	2301      	movs	r3, #1
 8007e12:	e000      	b.n	8007e16 <HAL_GPIO_DeInit+0xba>
 8007e14:	2300      	movs	r3, #0
 8007e16:	697a      	ldr	r2, [r7, #20]
 8007e18:	f002 0203 	and.w	r2, r2, #3
 8007e1c:	0092      	lsls	r2, r2, #2
 8007e1e:	4093      	lsls	r3, r2
 8007e20:	68ba      	ldr	r2, [r7, #8]
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d136      	bne.n	8007e94 <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	43db      	mvns	r3, r3
 8007e2e:	401a      	ands	r2, r3
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	685a      	ldr	r2, [r3, #4]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	43db      	mvns	r3, r3
 8007e3c:	401a      	ands	r2, r3
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8007e42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e46:	685a      	ldr	r2, [r3, #4]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	43db      	mvns	r3, r3
 8007e4c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007e50:	4013      	ands	r3, r2
 8007e52:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8007e54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	43db      	mvns	r3, r3
 8007e5e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007e62:	4013      	ands	r3, r2
 8007e64:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	f003 0303 	and.w	r3, r3, #3
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	220f      	movs	r2, #15
 8007e70:	fa02 f303 	lsl.w	r3, r2, r3
 8007e74:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007e76:	4a30      	ldr	r2, [pc, #192]	@ (8007f38 <HAL_GPIO_DeInit+0x1dc>)
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	089b      	lsrs	r3, r3, #2
 8007e7c:	3302      	adds	r3, #2
 8007e7e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	43da      	mvns	r2, r3
 8007e86:	482c      	ldr	r0, [pc, #176]	@ (8007f38 <HAL_GPIO_DeInit+0x1dc>)
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	089b      	lsrs	r3, r3, #2
 8007e8c:	400a      	ands	r2, r1
 8007e8e:	3302      	adds	r3, #2
 8007e90:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	005b      	lsls	r3, r3, #1
 8007e9c:	2103      	movs	r1, #3
 8007e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8007ea2:	431a      	orrs	r2, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	08da      	lsrs	r2, r3, #3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	3208      	adds	r2, #8
 8007eb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	f003 0307 	and.w	r3, r3, #7
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	220f      	movs	r2, #15
 8007ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec2:	43db      	mvns	r3, r3
 8007ec4:	697a      	ldr	r2, [r7, #20]
 8007ec6:	08d2      	lsrs	r2, r2, #3
 8007ec8:	4019      	ands	r1, r3
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	3208      	adds	r2, #8
 8007ece:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	68da      	ldr	r2, [r3, #12]
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	005b      	lsls	r3, r3, #1
 8007eda:	2103      	movs	r1, #3
 8007edc:	fa01 f303 	lsl.w	r3, r1, r3
 8007ee0:	43db      	mvns	r3, r3
 8007ee2:	401a      	ands	r2, r3
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	685a      	ldr	r2, [r3, #4]
 8007eec:	2101      	movs	r1, #1
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ef4:	43db      	mvns	r3, r3
 8007ef6:	401a      	ands	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	689a      	ldr	r2, [r3, #8]
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	005b      	lsls	r3, r3, #1
 8007f04:	2103      	movs	r1, #3
 8007f06:	fa01 f303 	lsl.w	r3, r1, r3
 8007f0a:	43db      	mvns	r3, r3
 8007f0c:	401a      	ands	r2, r3
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	609a      	str	r2, [r3, #8]
    }

    position++;
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	3301      	adds	r3, #1
 8007f16:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8007f18:	683a      	ldr	r2, [r7, #0]
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f47f af25 	bne.w	8007d70 <HAL_GPIO_DeInit+0x14>
  }
}
 8007f26:	bf00      	nop
 8007f28:	bf00      	nop
 8007f2a:	371c      	adds	r7, #28
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr
 8007f34:	58000080 	.word	0x58000080
 8007f38:	58000400 	.word	0x58000400
 8007f3c:	58020000 	.word	0x58020000
 8007f40:	58020400 	.word	0x58020400
 8007f44:	58020800 	.word	0x58020800
 8007f48:	58020c00 	.word	0x58020c00
 8007f4c:	58021000 	.word	0x58021000
 8007f50:	58021400 	.word	0x58021400
 8007f54:	58021800 	.word	0x58021800
 8007f58:	58021c00 	.word	0x58021c00
 8007f5c:	58022400 	.word	0x58022400

08007f60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	460b      	mov	r3, r1
 8007f6a:	807b      	strh	r3, [r7, #2]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007f70:	787b      	ldrb	r3, [r7, #1]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d003      	beq.n	8007f7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007f76:	887a      	ldrh	r2, [r7, #2]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007f7c:	e003      	b.n	8007f86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007f7e:	887b      	ldrh	r3, [r7, #2]
 8007f80:	041a      	lsls	r2, r3, #16
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	619a      	str	r2, [r3, #24]
}
 8007f86:	bf00      	nop
 8007f88:	370c      	adds	r7, #12
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr
	...

08007f94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d101      	bne.n	8007fa6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e08b      	b.n	80080be <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d106      	bne.n	8007fc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f7f9 fed2 	bl	8001d64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2224      	movs	r2, #36	@ 0x24
 8007fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f022 0201 	bic.w	r2, r2, #1
 8007fd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	685a      	ldr	r2, [r3, #4]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007fe4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	689a      	ldr	r2, [r3, #8]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007ff4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d107      	bne.n	800800e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	689a      	ldr	r2, [r3, #8]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800800a:	609a      	str	r2, [r3, #8]
 800800c:	e006      	b.n	800801c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	689a      	ldr	r2, [r3, #8]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800801a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	2b02      	cmp	r3, #2
 8008022:	d108      	bne.n	8008036 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	685a      	ldr	r2, [r3, #4]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008032:	605a      	str	r2, [r3, #4]
 8008034:	e007      	b.n	8008046 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	685a      	ldr	r2, [r3, #4]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008044:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	6859      	ldr	r1, [r3, #4]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	4b1d      	ldr	r3, [pc, #116]	@ (80080c8 <HAL_I2C_Init+0x134>)
 8008052:	430b      	orrs	r3, r1
 8008054:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	68da      	ldr	r2, [r3, #12]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008064:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	691a      	ldr	r2, [r3, #16]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	695b      	ldr	r3, [r3, #20]
 800806e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	699b      	ldr	r3, [r3, #24]
 8008076:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	430a      	orrs	r2, r1
 800807e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	69d9      	ldr	r1, [r3, #28]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a1a      	ldr	r2, [r3, #32]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	430a      	orrs	r2, r1
 800808e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f042 0201 	orr.w	r2, r2, #1
 800809e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2220      	movs	r2, #32
 80080aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80080bc:	2300      	movs	r3, #0
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3708      	adds	r7, #8
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop
 80080c8:	02008000 	.word	0x02008000

080080cc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d101      	bne.n	80080de <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	e021      	b.n	8008122 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2224      	movs	r2, #36	@ 0x24
 80080e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f022 0201 	bic.w	r2, r2, #1
 80080f4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f7f9 feec 	bl	8001ed4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3708      	adds	r7, #8
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
	...

0800812c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b088      	sub	sp, #32
 8008130:	af02      	add	r7, sp, #8
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	4608      	mov	r0, r1
 8008136:	4611      	mov	r1, r2
 8008138:	461a      	mov	r2, r3
 800813a:	4603      	mov	r3, r0
 800813c:	817b      	strh	r3, [r7, #10]
 800813e:	460b      	mov	r3, r1
 8008140:	813b      	strh	r3, [r7, #8]
 8008142:	4613      	mov	r3, r2
 8008144:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800814c:	b2db      	uxtb	r3, r3
 800814e:	2b20      	cmp	r3, #32
 8008150:	f040 80f9 	bne.w	8008346 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008154:	6a3b      	ldr	r3, [r7, #32]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d002      	beq.n	8008160 <HAL_I2C_Mem_Write+0x34>
 800815a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800815c:	2b00      	cmp	r3, #0
 800815e:	d105      	bne.n	800816c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008166:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	e0ed      	b.n	8008348 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008172:	2b01      	cmp	r3, #1
 8008174:	d101      	bne.n	800817a <HAL_I2C_Mem_Write+0x4e>
 8008176:	2302      	movs	r3, #2
 8008178:	e0e6      	b.n	8008348 <HAL_I2C_Mem_Write+0x21c>
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2201      	movs	r2, #1
 800817e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008182:	f7fd fc0d 	bl	80059a0 <HAL_GetTick>
 8008186:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	9300      	str	r3, [sp, #0]
 800818c:	2319      	movs	r3, #25
 800818e:	2201      	movs	r2, #1
 8008190:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008194:	68f8      	ldr	r0, [r7, #12]
 8008196:	f000 fadd 	bl	8008754 <I2C_WaitOnFlagUntilTimeout>
 800819a:	4603      	mov	r3, r0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d001      	beq.n	80081a4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	e0d1      	b.n	8008348 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2221      	movs	r2, #33	@ 0x21
 80081a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2240      	movs	r2, #64	@ 0x40
 80081b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2200      	movs	r2, #0
 80081b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	6a3a      	ldr	r2, [r7, #32]
 80081be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80081c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2200      	movs	r2, #0
 80081ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80081cc:	88f8      	ldrh	r0, [r7, #6]
 80081ce:	893a      	ldrh	r2, [r7, #8]
 80081d0:	8979      	ldrh	r1, [r7, #10]
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	9301      	str	r3, [sp, #4]
 80081d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081d8:	9300      	str	r3, [sp, #0]
 80081da:	4603      	mov	r3, r0
 80081dc:	68f8      	ldr	r0, [r7, #12]
 80081de:	f000 f9ed 	bl	80085bc <I2C_RequestMemoryWrite>
 80081e2:	4603      	mov	r3, r0
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d005      	beq.n	80081f4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2200      	movs	r2, #0
 80081ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	e0a9      	b.n	8008348 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	2bff      	cmp	r3, #255	@ 0xff
 80081fc:	d90e      	bls.n	800821c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	22ff      	movs	r2, #255	@ 0xff
 8008202:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008208:	b2da      	uxtb	r2, r3
 800820a:	8979      	ldrh	r1, [r7, #10]
 800820c:	2300      	movs	r3, #0
 800820e:	9300      	str	r3, [sp, #0]
 8008210:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008214:	68f8      	ldr	r0, [r7, #12]
 8008216:	f000 fc61 	bl	8008adc <I2C_TransferConfig>
 800821a:	e00f      	b.n	800823c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008220:	b29a      	uxth	r2, r3
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800822a:	b2da      	uxtb	r2, r3
 800822c:	8979      	ldrh	r1, [r7, #10]
 800822e:	2300      	movs	r3, #0
 8008230:	9300      	str	r3, [sp, #0]
 8008232:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008236:	68f8      	ldr	r0, [r7, #12]
 8008238:	f000 fc50 	bl	8008adc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800823c:	697a      	ldr	r2, [r7, #20]
 800823e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008240:	68f8      	ldr	r0, [r7, #12]
 8008242:	f000 fae0 	bl	8008806 <I2C_WaitOnTXISFlagUntilTimeout>
 8008246:	4603      	mov	r3, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d001      	beq.n	8008250 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800824c:	2301      	movs	r3, #1
 800824e:	e07b      	b.n	8008348 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008254:	781a      	ldrb	r2, [r3, #0]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008260:	1c5a      	adds	r2, r3, #1
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800826a:	b29b      	uxth	r3, r3
 800826c:	3b01      	subs	r3, #1
 800826e:	b29a      	uxth	r2, r3
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008278:	3b01      	subs	r3, #1
 800827a:	b29a      	uxth	r2, r3
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008284:	b29b      	uxth	r3, r3
 8008286:	2b00      	cmp	r3, #0
 8008288:	d034      	beq.n	80082f4 <HAL_I2C_Mem_Write+0x1c8>
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800828e:	2b00      	cmp	r3, #0
 8008290:	d130      	bne.n	80082f4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	9300      	str	r3, [sp, #0]
 8008296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008298:	2200      	movs	r2, #0
 800829a:	2180      	movs	r1, #128	@ 0x80
 800829c:	68f8      	ldr	r0, [r7, #12]
 800829e:	f000 fa59 	bl	8008754 <I2C_WaitOnFlagUntilTimeout>
 80082a2:	4603      	mov	r3, r0
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d001      	beq.n	80082ac <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80082a8:	2301      	movs	r3, #1
 80082aa:	e04d      	b.n	8008348 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	2bff      	cmp	r3, #255	@ 0xff
 80082b4:	d90e      	bls.n	80082d4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	22ff      	movs	r2, #255	@ 0xff
 80082ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082c0:	b2da      	uxtb	r2, r3
 80082c2:	8979      	ldrh	r1, [r7, #10]
 80082c4:	2300      	movs	r3, #0
 80082c6:	9300      	str	r3, [sp, #0]
 80082c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f000 fc05 	bl	8008adc <I2C_TransferConfig>
 80082d2:	e00f      	b.n	80082f4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082d8:	b29a      	uxth	r2, r3
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082e2:	b2da      	uxtb	r2, r3
 80082e4:	8979      	ldrh	r1, [r7, #10]
 80082e6:	2300      	movs	r3, #0
 80082e8:	9300      	str	r3, [sp, #0]
 80082ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80082ee:	68f8      	ldr	r0, [r7, #12]
 80082f0:	f000 fbf4 	bl	8008adc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d19e      	bne.n	800823c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80082fe:	697a      	ldr	r2, [r7, #20]
 8008300:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	f000 fac6 	bl	8008894 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008308:	4603      	mov	r3, r0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d001      	beq.n	8008312 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	e01a      	b.n	8008348 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	2220      	movs	r2, #32
 8008318:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	6859      	ldr	r1, [r3, #4]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	4b0a      	ldr	r3, [pc, #40]	@ (8008350 <HAL_I2C_Mem_Write+0x224>)
 8008326:	400b      	ands	r3, r1
 8008328:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2220      	movs	r2, #32
 800832e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2200      	movs	r2, #0
 8008336:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2200      	movs	r2, #0
 800833e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008342:	2300      	movs	r3, #0
 8008344:	e000      	b.n	8008348 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008346:	2302      	movs	r3, #2
  }
}
 8008348:	4618      	mov	r0, r3
 800834a:	3718      	adds	r7, #24
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}
 8008350:	fe00e800 	.word	0xfe00e800

08008354 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b088      	sub	sp, #32
 8008358:	af02      	add	r7, sp, #8
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	4608      	mov	r0, r1
 800835e:	4611      	mov	r1, r2
 8008360:	461a      	mov	r2, r3
 8008362:	4603      	mov	r3, r0
 8008364:	817b      	strh	r3, [r7, #10]
 8008366:	460b      	mov	r3, r1
 8008368:	813b      	strh	r3, [r7, #8]
 800836a:	4613      	mov	r3, r2
 800836c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008374:	b2db      	uxtb	r3, r3
 8008376:	2b20      	cmp	r3, #32
 8008378:	f040 80fd 	bne.w	8008576 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800837c:	6a3b      	ldr	r3, [r7, #32]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d002      	beq.n	8008388 <HAL_I2C_Mem_Read+0x34>
 8008382:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008384:	2b00      	cmp	r3, #0
 8008386:	d105      	bne.n	8008394 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800838e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	e0f1      	b.n	8008578 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800839a:	2b01      	cmp	r3, #1
 800839c:	d101      	bne.n	80083a2 <HAL_I2C_Mem_Read+0x4e>
 800839e:	2302      	movs	r3, #2
 80083a0:	e0ea      	b.n	8008578 <HAL_I2C_Mem_Read+0x224>
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2201      	movs	r2, #1
 80083a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80083aa:	f7fd faf9 	bl	80059a0 <HAL_GetTick>
 80083ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	9300      	str	r3, [sp, #0]
 80083b4:	2319      	movs	r3, #25
 80083b6:	2201      	movs	r2, #1
 80083b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f000 f9c9 	bl	8008754 <I2C_WaitOnFlagUntilTimeout>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d001      	beq.n	80083cc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80083c8:	2301      	movs	r3, #1
 80083ca:	e0d5      	b.n	8008578 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2222      	movs	r2, #34	@ 0x22
 80083d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2240      	movs	r2, #64	@ 0x40
 80083d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2200      	movs	r2, #0
 80083e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	6a3a      	ldr	r2, [r7, #32]
 80083e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80083ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2200      	movs	r2, #0
 80083f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80083f4:	88f8      	ldrh	r0, [r7, #6]
 80083f6:	893a      	ldrh	r2, [r7, #8]
 80083f8:	8979      	ldrh	r1, [r7, #10]
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	9301      	str	r3, [sp, #4]
 80083fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008400:	9300      	str	r3, [sp, #0]
 8008402:	4603      	mov	r3, r0
 8008404:	68f8      	ldr	r0, [r7, #12]
 8008406:	f000 f92d 	bl	8008664 <I2C_RequestMemoryRead>
 800840a:	4603      	mov	r3, r0
 800840c:	2b00      	cmp	r3, #0
 800840e:	d005      	beq.n	800841c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2200      	movs	r2, #0
 8008414:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	e0ad      	b.n	8008578 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008420:	b29b      	uxth	r3, r3
 8008422:	2bff      	cmp	r3, #255	@ 0xff
 8008424:	d90e      	bls.n	8008444 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	22ff      	movs	r2, #255	@ 0xff
 800842a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008430:	b2da      	uxtb	r2, r3
 8008432:	8979      	ldrh	r1, [r7, #10]
 8008434:	4b52      	ldr	r3, [pc, #328]	@ (8008580 <HAL_I2C_Mem_Read+0x22c>)
 8008436:	9300      	str	r3, [sp, #0]
 8008438:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800843c:	68f8      	ldr	r0, [r7, #12]
 800843e:	f000 fb4d 	bl	8008adc <I2C_TransferConfig>
 8008442:	e00f      	b.n	8008464 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008448:	b29a      	uxth	r2, r3
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008452:	b2da      	uxtb	r2, r3
 8008454:	8979      	ldrh	r1, [r7, #10]
 8008456:	4b4a      	ldr	r3, [pc, #296]	@ (8008580 <HAL_I2C_Mem_Read+0x22c>)
 8008458:	9300      	str	r3, [sp, #0]
 800845a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800845e:	68f8      	ldr	r0, [r7, #12]
 8008460:	f000 fb3c 	bl	8008adc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	9300      	str	r3, [sp, #0]
 8008468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800846a:	2200      	movs	r2, #0
 800846c:	2104      	movs	r1, #4
 800846e:	68f8      	ldr	r0, [r7, #12]
 8008470:	f000 f970 	bl	8008754 <I2C_WaitOnFlagUntilTimeout>
 8008474:	4603      	mov	r3, r0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d001      	beq.n	800847e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800847a:	2301      	movs	r3, #1
 800847c:	e07c      	b.n	8008578 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008488:	b2d2      	uxtb	r2, r2
 800848a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008490:	1c5a      	adds	r2, r3, #1
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800849a:	3b01      	subs	r3, #1
 800849c:	b29a      	uxth	r2, r3
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	3b01      	subs	r3, #1
 80084aa:	b29a      	uxth	r2, r3
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d034      	beq.n	8008524 <HAL_I2C_Mem_Read+0x1d0>
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d130      	bne.n	8008524 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	9300      	str	r3, [sp, #0]
 80084c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084c8:	2200      	movs	r2, #0
 80084ca:	2180      	movs	r1, #128	@ 0x80
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f000 f941 	bl	8008754 <I2C_WaitOnFlagUntilTimeout>
 80084d2:	4603      	mov	r3, r0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d001      	beq.n	80084dc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80084d8:	2301      	movs	r3, #1
 80084da:	e04d      	b.n	8008578 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	2bff      	cmp	r3, #255	@ 0xff
 80084e4:	d90e      	bls.n	8008504 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	22ff      	movs	r2, #255	@ 0xff
 80084ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084f0:	b2da      	uxtb	r2, r3
 80084f2:	8979      	ldrh	r1, [r7, #10]
 80084f4:	2300      	movs	r3, #0
 80084f6:	9300      	str	r3, [sp, #0]
 80084f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	f000 faed 	bl	8008adc <I2C_TransferConfig>
 8008502:	e00f      	b.n	8008524 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008508:	b29a      	uxth	r2, r3
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008512:	b2da      	uxtb	r2, r3
 8008514:	8979      	ldrh	r1, [r7, #10]
 8008516:	2300      	movs	r3, #0
 8008518:	9300      	str	r3, [sp, #0]
 800851a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800851e:	68f8      	ldr	r0, [r7, #12]
 8008520:	f000 fadc 	bl	8008adc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008528:	b29b      	uxth	r3, r3
 800852a:	2b00      	cmp	r3, #0
 800852c:	d19a      	bne.n	8008464 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800852e:	697a      	ldr	r2, [r7, #20]
 8008530:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008532:	68f8      	ldr	r0, [r7, #12]
 8008534:	f000 f9ae 	bl	8008894 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008538:	4603      	mov	r3, r0
 800853a:	2b00      	cmp	r3, #0
 800853c:	d001      	beq.n	8008542 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800853e:	2301      	movs	r3, #1
 8008540:	e01a      	b.n	8008578 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2220      	movs	r2, #32
 8008548:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	6859      	ldr	r1, [r3, #4]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	4b0b      	ldr	r3, [pc, #44]	@ (8008584 <HAL_I2C_Mem_Read+0x230>)
 8008556:	400b      	ands	r3, r1
 8008558:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2220      	movs	r2, #32
 800855e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2200      	movs	r2, #0
 8008566:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2200      	movs	r2, #0
 800856e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008572:	2300      	movs	r3, #0
 8008574:	e000      	b.n	8008578 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008576:	2302      	movs	r3, #2
  }
}
 8008578:	4618      	mov	r0, r3
 800857a:	3718      	adds	r7, #24
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}
 8008580:	80002400 	.word	0x80002400
 8008584:	fe00e800 	.word	0xfe00e800

08008588 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008596:	b2db      	uxtb	r3, r3
}
 8008598:	4618      	mov	r0, r3
 800859a:	370c      	adds	r7, #12
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr

080085a4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b086      	sub	sp, #24
 80085c0:	af02      	add	r7, sp, #8
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	4608      	mov	r0, r1
 80085c6:	4611      	mov	r1, r2
 80085c8:	461a      	mov	r2, r3
 80085ca:	4603      	mov	r3, r0
 80085cc:	817b      	strh	r3, [r7, #10]
 80085ce:	460b      	mov	r3, r1
 80085d0:	813b      	strh	r3, [r7, #8]
 80085d2:	4613      	mov	r3, r2
 80085d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80085d6:	88fb      	ldrh	r3, [r7, #6]
 80085d8:	b2da      	uxtb	r2, r3
 80085da:	8979      	ldrh	r1, [r7, #10]
 80085dc:	4b20      	ldr	r3, [pc, #128]	@ (8008660 <I2C_RequestMemoryWrite+0xa4>)
 80085de:	9300      	str	r3, [sp, #0]
 80085e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80085e4:	68f8      	ldr	r0, [r7, #12]
 80085e6:	f000 fa79 	bl	8008adc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085ea:	69fa      	ldr	r2, [r7, #28]
 80085ec:	69b9      	ldr	r1, [r7, #24]
 80085ee:	68f8      	ldr	r0, [r7, #12]
 80085f0:	f000 f909 	bl	8008806 <I2C_WaitOnTXISFlagUntilTimeout>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d001      	beq.n	80085fe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	e02c      	b.n	8008658 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80085fe:	88fb      	ldrh	r3, [r7, #6]
 8008600:	2b01      	cmp	r3, #1
 8008602:	d105      	bne.n	8008610 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008604:	893b      	ldrh	r3, [r7, #8]
 8008606:	b2da      	uxtb	r2, r3
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	629a      	str	r2, [r3, #40]	@ 0x28
 800860e:	e015      	b.n	800863c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008610:	893b      	ldrh	r3, [r7, #8]
 8008612:	0a1b      	lsrs	r3, r3, #8
 8008614:	b29b      	uxth	r3, r3
 8008616:	b2da      	uxtb	r2, r3
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800861e:	69fa      	ldr	r2, [r7, #28]
 8008620:	69b9      	ldr	r1, [r7, #24]
 8008622:	68f8      	ldr	r0, [r7, #12]
 8008624:	f000 f8ef 	bl	8008806 <I2C_WaitOnTXISFlagUntilTimeout>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d001      	beq.n	8008632 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800862e:	2301      	movs	r3, #1
 8008630:	e012      	b.n	8008658 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008632:	893b      	ldrh	r3, [r7, #8]
 8008634:	b2da      	uxtb	r2, r3
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	9300      	str	r3, [sp, #0]
 8008640:	69bb      	ldr	r3, [r7, #24]
 8008642:	2200      	movs	r2, #0
 8008644:	2180      	movs	r1, #128	@ 0x80
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	f000 f884 	bl	8008754 <I2C_WaitOnFlagUntilTimeout>
 800864c:	4603      	mov	r3, r0
 800864e:	2b00      	cmp	r3, #0
 8008650:	d001      	beq.n	8008656 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008652:	2301      	movs	r3, #1
 8008654:	e000      	b.n	8008658 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008656:	2300      	movs	r3, #0
}
 8008658:	4618      	mov	r0, r3
 800865a:	3710      	adds	r7, #16
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	80002000 	.word	0x80002000

08008664 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b086      	sub	sp, #24
 8008668:	af02      	add	r7, sp, #8
 800866a:	60f8      	str	r0, [r7, #12]
 800866c:	4608      	mov	r0, r1
 800866e:	4611      	mov	r1, r2
 8008670:	461a      	mov	r2, r3
 8008672:	4603      	mov	r3, r0
 8008674:	817b      	strh	r3, [r7, #10]
 8008676:	460b      	mov	r3, r1
 8008678:	813b      	strh	r3, [r7, #8]
 800867a:	4613      	mov	r3, r2
 800867c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800867e:	88fb      	ldrh	r3, [r7, #6]
 8008680:	b2da      	uxtb	r2, r3
 8008682:	8979      	ldrh	r1, [r7, #10]
 8008684:	4b20      	ldr	r3, [pc, #128]	@ (8008708 <I2C_RequestMemoryRead+0xa4>)
 8008686:	9300      	str	r3, [sp, #0]
 8008688:	2300      	movs	r3, #0
 800868a:	68f8      	ldr	r0, [r7, #12]
 800868c:	f000 fa26 	bl	8008adc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008690:	69fa      	ldr	r2, [r7, #28]
 8008692:	69b9      	ldr	r1, [r7, #24]
 8008694:	68f8      	ldr	r0, [r7, #12]
 8008696:	f000 f8b6 	bl	8008806 <I2C_WaitOnTXISFlagUntilTimeout>
 800869a:	4603      	mov	r3, r0
 800869c:	2b00      	cmp	r3, #0
 800869e:	d001      	beq.n	80086a4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80086a0:	2301      	movs	r3, #1
 80086a2:	e02c      	b.n	80086fe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80086a4:	88fb      	ldrh	r3, [r7, #6]
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d105      	bne.n	80086b6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80086aa:	893b      	ldrh	r3, [r7, #8]
 80086ac:	b2da      	uxtb	r2, r3
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80086b4:	e015      	b.n	80086e2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80086b6:	893b      	ldrh	r3, [r7, #8]
 80086b8:	0a1b      	lsrs	r3, r3, #8
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	b2da      	uxtb	r2, r3
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80086c4:	69fa      	ldr	r2, [r7, #28]
 80086c6:	69b9      	ldr	r1, [r7, #24]
 80086c8:	68f8      	ldr	r0, [r7, #12]
 80086ca:	f000 f89c 	bl	8008806 <I2C_WaitOnTXISFlagUntilTimeout>
 80086ce:	4603      	mov	r3, r0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d001      	beq.n	80086d8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80086d4:	2301      	movs	r3, #1
 80086d6:	e012      	b.n	80086fe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80086d8:	893b      	ldrh	r3, [r7, #8]
 80086da:	b2da      	uxtb	r2, r3
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80086e2:	69fb      	ldr	r3, [r7, #28]
 80086e4:	9300      	str	r3, [sp, #0]
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	2200      	movs	r2, #0
 80086ea:	2140      	movs	r1, #64	@ 0x40
 80086ec:	68f8      	ldr	r0, [r7, #12]
 80086ee:	f000 f831 	bl	8008754 <I2C_WaitOnFlagUntilTimeout>
 80086f2:	4603      	mov	r3, r0
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d001      	beq.n	80086fc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80086f8:	2301      	movs	r3, #1
 80086fa:	e000      	b.n	80086fe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	80002000 	.word	0x80002000

0800870c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	699b      	ldr	r3, [r3, #24]
 800871a:	f003 0302 	and.w	r3, r3, #2
 800871e:	2b02      	cmp	r3, #2
 8008720:	d103      	bne.n	800872a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	2200      	movs	r2, #0
 8008728:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	699b      	ldr	r3, [r3, #24]
 8008730:	f003 0301 	and.w	r3, r3, #1
 8008734:	2b01      	cmp	r3, #1
 8008736:	d007      	beq.n	8008748 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	699a      	ldr	r2, [r3, #24]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f042 0201 	orr.w	r2, r2, #1
 8008746:	619a      	str	r2, [r3, #24]
  }
}
 8008748:	bf00      	nop
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	603b      	str	r3, [r7, #0]
 8008760:	4613      	mov	r3, r2
 8008762:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008764:	e03b      	b.n	80087de <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008766:	69ba      	ldr	r2, [r7, #24]
 8008768:	6839      	ldr	r1, [r7, #0]
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	f000 f8d6 	bl	800891c <I2C_IsErrorOccurred>
 8008770:	4603      	mov	r3, r0
 8008772:	2b00      	cmp	r3, #0
 8008774:	d001      	beq.n	800877a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	e041      	b.n	80087fe <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008780:	d02d      	beq.n	80087de <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008782:	f7fd f90d 	bl	80059a0 <HAL_GetTick>
 8008786:	4602      	mov	r2, r0
 8008788:	69bb      	ldr	r3, [r7, #24]
 800878a:	1ad3      	subs	r3, r2, r3
 800878c:	683a      	ldr	r2, [r7, #0]
 800878e:	429a      	cmp	r2, r3
 8008790:	d302      	bcc.n	8008798 <I2C_WaitOnFlagUntilTimeout+0x44>
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d122      	bne.n	80087de <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	699a      	ldr	r2, [r3, #24]
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	4013      	ands	r3, r2
 80087a2:	68ba      	ldr	r2, [r7, #8]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	bf0c      	ite	eq
 80087a8:	2301      	moveq	r3, #1
 80087aa:	2300      	movne	r3, #0
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	461a      	mov	r2, r3
 80087b0:	79fb      	ldrb	r3, [r7, #7]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d113      	bne.n	80087de <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087ba:	f043 0220 	orr.w	r2, r3, #32
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2220      	movs	r2, #32
 80087c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2200      	movs	r2, #0
 80087ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2200      	movs	r2, #0
 80087d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	e00f      	b.n	80087fe <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	699a      	ldr	r2, [r3, #24]
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	4013      	ands	r3, r2
 80087e8:	68ba      	ldr	r2, [r7, #8]
 80087ea:	429a      	cmp	r2, r3
 80087ec:	bf0c      	ite	eq
 80087ee:	2301      	moveq	r3, #1
 80087f0:	2300      	movne	r3, #0
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	461a      	mov	r2, r3
 80087f6:	79fb      	ldrb	r3, [r7, #7]
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d0b4      	beq.n	8008766 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3710      	adds	r7, #16
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}

08008806 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b084      	sub	sp, #16
 800880a:	af00      	add	r7, sp, #0
 800880c:	60f8      	str	r0, [r7, #12]
 800880e:	60b9      	str	r1, [r7, #8]
 8008810:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008812:	e033      	b.n	800887c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	68b9      	ldr	r1, [r7, #8]
 8008818:	68f8      	ldr	r0, [r7, #12]
 800881a:	f000 f87f 	bl	800891c <I2C_IsErrorOccurred>
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d001      	beq.n	8008828 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008824:	2301      	movs	r3, #1
 8008826:	e031      	b.n	800888c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800882e:	d025      	beq.n	800887c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008830:	f7fd f8b6 	bl	80059a0 <HAL_GetTick>
 8008834:	4602      	mov	r2, r0
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	1ad3      	subs	r3, r2, r3
 800883a:	68ba      	ldr	r2, [r7, #8]
 800883c:	429a      	cmp	r2, r3
 800883e:	d302      	bcc.n	8008846 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d11a      	bne.n	800887c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	699b      	ldr	r3, [r3, #24]
 800884c:	f003 0302 	and.w	r3, r3, #2
 8008850:	2b02      	cmp	r3, #2
 8008852:	d013      	beq.n	800887c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008858:	f043 0220 	orr.w	r2, r3, #32
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2220      	movs	r2, #32
 8008864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2200      	movs	r2, #0
 800886c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2200      	movs	r2, #0
 8008874:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008878:	2301      	movs	r3, #1
 800887a:	e007      	b.n	800888c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	699b      	ldr	r3, [r3, #24]
 8008882:	f003 0302 	and.w	r3, r3, #2
 8008886:	2b02      	cmp	r3, #2
 8008888:	d1c4      	bne.n	8008814 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800888a:	2300      	movs	r3, #0
}
 800888c:	4618      	mov	r0, r3
 800888e:	3710      	adds	r7, #16
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80088a0:	e02f      	b.n	8008902 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	68b9      	ldr	r1, [r7, #8]
 80088a6:	68f8      	ldr	r0, [r7, #12]
 80088a8:	f000 f838 	bl	800891c <I2C_IsErrorOccurred>
 80088ac:	4603      	mov	r3, r0
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d001      	beq.n	80088b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	e02d      	b.n	8008912 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088b6:	f7fd f873 	bl	80059a0 <HAL_GetTick>
 80088ba:	4602      	mov	r2, r0
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	1ad3      	subs	r3, r2, r3
 80088c0:	68ba      	ldr	r2, [r7, #8]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d302      	bcc.n	80088cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d11a      	bne.n	8008902 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	699b      	ldr	r3, [r3, #24]
 80088d2:	f003 0320 	and.w	r3, r3, #32
 80088d6:	2b20      	cmp	r3, #32
 80088d8:	d013      	beq.n	8008902 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088de:	f043 0220 	orr.w	r2, r3, #32
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2220      	movs	r2, #32
 80088ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2200      	movs	r2, #0
 80088f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2200      	movs	r2, #0
 80088fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	e007      	b.n	8008912 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	699b      	ldr	r3, [r3, #24]
 8008908:	f003 0320 	and.w	r3, r3, #32
 800890c:	2b20      	cmp	r3, #32
 800890e:	d1c8      	bne.n	80088a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	3710      	adds	r7, #16
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
	...

0800891c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b08a      	sub	sp, #40	@ 0x28
 8008920:	af00      	add	r7, sp, #0
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008928:	2300      	movs	r3, #0
 800892a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	699b      	ldr	r3, [r3, #24]
 8008934:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008936:	2300      	movs	r3, #0
 8008938:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800893e:	69bb      	ldr	r3, [r7, #24]
 8008940:	f003 0310 	and.w	r3, r3, #16
 8008944:	2b00      	cmp	r3, #0
 8008946:	d068      	beq.n	8008a1a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	2210      	movs	r2, #16
 800894e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008950:	e049      	b.n	80089e6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008958:	d045      	beq.n	80089e6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800895a:	f7fd f821 	bl	80059a0 <HAL_GetTick>
 800895e:	4602      	mov	r2, r0
 8008960:	69fb      	ldr	r3, [r7, #28]
 8008962:	1ad3      	subs	r3, r2, r3
 8008964:	68ba      	ldr	r2, [r7, #8]
 8008966:	429a      	cmp	r2, r3
 8008968:	d302      	bcc.n	8008970 <I2C_IsErrorOccurred+0x54>
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d13a      	bne.n	80089e6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800897a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008982:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	699b      	ldr	r3, [r3, #24]
 800898a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800898e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008992:	d121      	bne.n	80089d8 <I2C_IsErrorOccurred+0xbc>
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800899a:	d01d      	beq.n	80089d8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800899c:	7cfb      	ldrb	r3, [r7, #19]
 800899e:	2b20      	cmp	r3, #32
 80089a0:	d01a      	beq.n	80089d8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	685a      	ldr	r2, [r3, #4]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80089b0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80089b2:	f7fc fff5 	bl	80059a0 <HAL_GetTick>
 80089b6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80089b8:	e00e      	b.n	80089d8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80089ba:	f7fc fff1 	bl	80059a0 <HAL_GetTick>
 80089be:	4602      	mov	r2, r0
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	1ad3      	subs	r3, r2, r3
 80089c4:	2b19      	cmp	r3, #25
 80089c6:	d907      	bls.n	80089d8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80089c8:	6a3b      	ldr	r3, [r7, #32]
 80089ca:	f043 0320 	orr.w	r3, r3, #32
 80089ce:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80089d0:	2301      	movs	r3, #1
 80089d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80089d6:	e006      	b.n	80089e6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	699b      	ldr	r3, [r3, #24]
 80089de:	f003 0320 	and.w	r3, r3, #32
 80089e2:	2b20      	cmp	r3, #32
 80089e4:	d1e9      	bne.n	80089ba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	699b      	ldr	r3, [r3, #24]
 80089ec:	f003 0320 	and.w	r3, r3, #32
 80089f0:	2b20      	cmp	r3, #32
 80089f2:	d003      	beq.n	80089fc <I2C_IsErrorOccurred+0xe0>
 80089f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d0aa      	beq.n	8008952 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80089fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d103      	bne.n	8008a0c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	2220      	movs	r2, #32
 8008a0a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008a0c:	6a3b      	ldr	r3, [r7, #32]
 8008a0e:	f043 0304 	orr.w	r3, r3, #4
 8008a12:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	699b      	ldr	r3, [r3, #24]
 8008a20:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008a22:	69bb      	ldr	r3, [r7, #24]
 8008a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d00b      	beq.n	8008a44 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008a2c:	6a3b      	ldr	r3, [r7, #32]
 8008a2e:	f043 0301 	orr.w	r3, r3, #1
 8008a32:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008a3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008a44:	69bb      	ldr	r3, [r7, #24]
 8008a46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d00b      	beq.n	8008a66 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008a4e:	6a3b      	ldr	r3, [r7, #32]
 8008a50:	f043 0308 	orr.w	r3, r3, #8
 8008a54:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008a5e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008a60:	2301      	movs	r3, #1
 8008a62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008a66:	69bb      	ldr	r3, [r7, #24]
 8008a68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d00b      	beq.n	8008a88 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008a70:	6a3b      	ldr	r3, [r7, #32]
 8008a72:	f043 0302 	orr.w	r3, r3, #2
 8008a76:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008a80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008a88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d01c      	beq.n	8008aca <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008a90:	68f8      	ldr	r0, [r7, #12]
 8008a92:	f7ff fe3b 	bl	800870c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	6859      	ldr	r1, [r3, #4]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	4b0d      	ldr	r3, [pc, #52]	@ (8008ad8 <I2C_IsErrorOccurred+0x1bc>)
 8008aa2:	400b      	ands	r3, r1
 8008aa4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008aaa:	6a3b      	ldr	r3, [r7, #32]
 8008aac:	431a      	orrs	r2, r3
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2220      	movs	r2, #32
 8008ab6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2200      	movs	r2, #0
 8008abe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8008aca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3728      	adds	r7, #40	@ 0x28
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	bf00      	nop
 8008ad8:	fe00e800 	.word	0xfe00e800

08008adc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b087      	sub	sp, #28
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	60f8      	str	r0, [r7, #12]
 8008ae4:	607b      	str	r3, [r7, #4]
 8008ae6:	460b      	mov	r3, r1
 8008ae8:	817b      	strh	r3, [r7, #10]
 8008aea:	4613      	mov	r3, r2
 8008aec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008aee:	897b      	ldrh	r3, [r7, #10]
 8008af0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008af4:	7a7b      	ldrb	r3, [r7, #9]
 8008af6:	041b      	lsls	r3, r3, #16
 8008af8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008afc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008b02:	6a3b      	ldr	r3, [r7, #32]
 8008b04:	4313      	orrs	r3, r2
 8008b06:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008b0a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	685a      	ldr	r2, [r3, #4]
 8008b12:	6a3b      	ldr	r3, [r7, #32]
 8008b14:	0d5b      	lsrs	r3, r3, #21
 8008b16:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008b1a:	4b08      	ldr	r3, [pc, #32]	@ (8008b3c <I2C_TransferConfig+0x60>)
 8008b1c:	430b      	orrs	r3, r1
 8008b1e:	43db      	mvns	r3, r3
 8008b20:	ea02 0103 	and.w	r1, r2, r3
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	697a      	ldr	r2, [r7, #20]
 8008b2a:	430a      	orrs	r2, r1
 8008b2c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008b2e:	bf00      	nop
 8008b30:	371c      	adds	r7, #28
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr
 8008b3a:	bf00      	nop
 8008b3c:	03ff63ff 	.word	0x03ff63ff

08008b40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	2b20      	cmp	r3, #32
 8008b54:	d138      	bne.n	8008bc8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d101      	bne.n	8008b64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008b60:	2302      	movs	r3, #2
 8008b62:	e032      	b.n	8008bca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2224      	movs	r2, #36	@ 0x24
 8008b70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f022 0201 	bic.w	r2, r2, #1
 8008b82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008b92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	6819      	ldr	r1, [r3, #0]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	683a      	ldr	r2, [r7, #0]
 8008ba0:	430a      	orrs	r2, r1
 8008ba2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f042 0201 	orr.w	r2, r2, #1
 8008bb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2220      	movs	r2, #32
 8008bb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	e000      	b.n	8008bca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008bc8:	2302      	movs	r3, #2
  }
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	370c      	adds	r7, #12
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr

08008bd6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008bd6:	b480      	push	{r7}
 8008bd8:	b085      	sub	sp, #20
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
 8008bde:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	2b20      	cmp	r3, #32
 8008bea:	d139      	bne.n	8008c60 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d101      	bne.n	8008bfa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008bf6:	2302      	movs	r3, #2
 8008bf8:	e033      	b.n	8008c62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2224      	movs	r2, #36	@ 0x24
 8008c06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	681a      	ldr	r2, [r3, #0]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f022 0201 	bic.w	r2, r2, #1
 8008c18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008c28:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	021b      	lsls	r3, r3, #8
 8008c2e:	68fa      	ldr	r2, [r7, #12]
 8008c30:	4313      	orrs	r3, r2
 8008c32:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	68fa      	ldr	r2, [r7, #12]
 8008c3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f042 0201 	orr.w	r2, r2, #1
 8008c4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2220      	movs	r2, #32
 8008c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2200      	movs	r2, #0
 8008c58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	e000      	b.n	8008c62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008c60:	2302      	movs	r3, #2
  }
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3714      	adds	r7, #20
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr
	...

08008c70 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d101      	bne.n	8008c82 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e0bf      	b.n	8008e02 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d106      	bne.n	8008c9c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f7f9 f95a 	bl	8001f50 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2202      	movs	r2, #2
 8008ca0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	699a      	ldr	r2, [r3, #24]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8008cb2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	6999      	ldr	r1, [r3, #24]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	685a      	ldr	r2, [r3, #4]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	689b      	ldr	r3, [r3, #8]
 8008cc2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008cc8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	430a      	orrs	r2, r1
 8008cd6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	6899      	ldr	r1, [r3, #8]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	4b4a      	ldr	r3, [pc, #296]	@ (8008e0c <HAL_LTDC_Init+0x19c>)
 8008ce4:	400b      	ands	r3, r1
 8008ce6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	695b      	ldr	r3, [r3, #20]
 8008cec:	041b      	lsls	r3, r3, #16
 8008cee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	6899      	ldr	r1, [r3, #8]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	699a      	ldr	r2, [r3, #24]
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	431a      	orrs	r2, r3
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	430a      	orrs	r2, r1
 8008d04:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	68d9      	ldr	r1, [r3, #12]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	4b3e      	ldr	r3, [pc, #248]	@ (8008e0c <HAL_LTDC_Init+0x19c>)
 8008d12:	400b      	ands	r3, r1
 8008d14:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	69db      	ldr	r3, [r3, #28]
 8008d1a:	041b      	lsls	r3, r3, #16
 8008d1c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	68d9      	ldr	r1, [r3, #12]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6a1a      	ldr	r2, [r3, #32]
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	431a      	orrs	r2, r3
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	430a      	orrs	r2, r1
 8008d32:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	6919      	ldr	r1, [r3, #16]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	4b33      	ldr	r3, [pc, #204]	@ (8008e0c <HAL_LTDC_Init+0x19c>)
 8008d40:	400b      	ands	r3, r1
 8008d42:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d48:	041b      	lsls	r3, r3, #16
 8008d4a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	6919      	ldr	r1, [r3, #16]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	431a      	orrs	r2, r3
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	430a      	orrs	r2, r1
 8008d60:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	6959      	ldr	r1, [r3, #20]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	4b27      	ldr	r3, [pc, #156]	@ (8008e0c <HAL_LTDC_Init+0x19c>)
 8008d6e:	400b      	ands	r3, r1
 8008d70:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d76:	041b      	lsls	r3, r3, #16
 8008d78:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	6959      	ldr	r1, [r3, #20]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	431a      	orrs	r2, r3
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	430a      	orrs	r2, r1
 8008d8e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008d96:	021b      	lsls	r3, r3, #8
 8008d98:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008da0:	041b      	lsls	r3, r3, #16
 8008da2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8008db2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008dba:	68ba      	ldr	r2, [r7, #8]
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8008dc6:	431a      	orrs	r2, r3
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	430a      	orrs	r2, r1
 8008dce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f042 0206 	orr.w	r2, r2, #6
 8008dde:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	699a      	ldr	r2, [r3, #24]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f042 0201 	orr.w	r2, r2, #1
 8008dee:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8008e00:	2300      	movs	r3, #0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3710      	adds	r7, #16
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	f000f800 	.word	0xf000f800

08008e10 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b084      	sub	sp, #16
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e1e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e26:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f003 0304 	and.w	r3, r3, #4
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d023      	beq.n	8008e7a <HAL_LTDC_IRQHandler+0x6a>
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	f003 0304 	and.w	r3, r3, #4
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d01e      	beq.n	8008e7a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f022 0204 	bic.w	r2, r2, #4
 8008e4a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2204      	movs	r2, #4
 8008e52:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008e5a:	f043 0201 	orr.w	r2, r3, #1
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2204      	movs	r2, #4
 8008e68:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 f86f 	bl	8008f58 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f003 0302 	and.w	r3, r3, #2
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d023      	beq.n	8008ecc <HAL_LTDC_IRQHandler+0xbc>
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	f003 0302 	and.w	r3, r3, #2
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d01e      	beq.n	8008ecc <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f022 0202 	bic.w	r2, r2, #2
 8008e9c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	2202      	movs	r2, #2
 8008ea4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008eac:	f043 0202 	orr.w	r2, r3, #2
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2204      	movs	r2, #4
 8008eba:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 f846 	bl	8008f58 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f003 0301 	and.w	r3, r3, #1
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d01b      	beq.n	8008f0e <HAL_LTDC_IRQHandler+0xfe>
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	f003 0301 	and.w	r3, r3, #1
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d016      	beq.n	8008f0e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f022 0201 	bic.w	r2, r2, #1
 8008eee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2201      	movs	r2, #1
 8008efc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2200      	movs	r2, #0
 8008f04:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f010 f98f 	bl	801922c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f003 0308 	and.w	r3, r3, #8
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d01b      	beq.n	8008f50 <HAL_LTDC_IRQHandler+0x140>
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	f003 0308 	and.w	r3, r3, #8
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d016      	beq.n	8008f50 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f022 0208 	bic.w	r2, r2, #8
 8008f30:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	2208      	movs	r2, #8
 8008f38:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 f80e 	bl	8008f6c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8008f50:	bf00      	nop
 8008f52:	3710      	adds	r7, #16
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8008f60:	bf00      	nop
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008f74:	bf00      	nop
 8008f76:	370c      	adds	r7, #12
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr

08008f80 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008f80:	b5b0      	push	{r4, r5, r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	60b9      	str	r1, [r7, #8]
 8008f8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d101      	bne.n	8008f9a <HAL_LTDC_ConfigLayer+0x1a>
 8008f96:	2302      	movs	r3, #2
 8008f98:	e02c      	b.n	8008ff4 <HAL_LTDC_ConfigLayer+0x74>
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2202      	movs	r2, #2
 8008fa6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008faa:	68fa      	ldr	r2, [r7, #12]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2134      	movs	r1, #52	@ 0x34
 8008fb0:	fb01 f303 	mul.w	r3, r1, r3
 8008fb4:	4413      	add	r3, r2
 8008fb6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	4614      	mov	r4, r2
 8008fbe:	461d      	mov	r5, r3
 8008fc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008fc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008fc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008fc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008fc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008fca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008fcc:	682b      	ldr	r3, [r5, #0]
 8008fce:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	68b9      	ldr	r1, [r7, #8]
 8008fd4:	68f8      	ldr	r0, [r7, #12]
 8008fd6:	f000 f849 	bl	800906c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2200      	movs	r2, #0
 8008fee:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8008ff2:	2300      	movs	r3, #0
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3710      	adds	r7, #16
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bdb0      	pop	{r4, r5, r7, pc}

08008ffc <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800900c:	2b01      	cmp	r3, #1
 800900e:	d101      	bne.n	8009014 <HAL_LTDC_ProgramLineEvent+0x18>
 8009010:	2302      	movs	r3, #2
 8009012:	e023      	b.n	800905c <HAL_LTDC_ProgramLineEvent+0x60>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2201      	movs	r2, #1
 8009018:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2202      	movs	r2, #2
 8009020:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f022 0201 	bic.w	r2, r2, #1
 8009032:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8009034:	4a0c      	ldr	r2, [pc, #48]	@ (8009068 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	6413      	str	r3, [r2, #64]	@ 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f042 0201 	orr.w	r2, r2, #1
 8009048:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2201      	movs	r2, #1
 800904e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2200      	movs	r2, #0
 8009056:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800905a:	2300      	movs	r3, #0
}
 800905c:	4618      	mov	r0, r3
 800905e:	370c      	adds	r7, #12
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr
 8009068:	50001000 	.word	0x50001000

0800906c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800906c:	b480      	push	{r7}
 800906e:	b089      	sub	sp, #36	@ 0x24
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	685a      	ldr	r2, [r3, #4]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	0c1b      	lsrs	r3, r3, #16
 8009084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009088:	4413      	add	r3, r2
 800908a:	041b      	lsls	r3, r3, #16
 800908c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	461a      	mov	r2, r3
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	01db      	lsls	r3, r3, #7
 8009098:	4413      	add	r3, r2
 800909a:	3384      	adds	r3, #132	@ 0x84
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	68fa      	ldr	r2, [r7, #12]
 80090a0:	6812      	ldr	r2, [r2, #0]
 80090a2:	4611      	mov	r1, r2
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	01d2      	lsls	r2, r2, #7
 80090a8:	440a      	add	r2, r1
 80090aa:	3284      	adds	r2, #132	@ 0x84
 80090ac:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80090b0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	0c1b      	lsrs	r3, r3, #16
 80090be:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80090c2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80090c4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4619      	mov	r1, r3
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	01db      	lsls	r3, r3, #7
 80090d0:	440b      	add	r3, r1
 80090d2:	3384      	adds	r3, #132	@ 0x84
 80090d4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80090d6:	69fb      	ldr	r3, [r7, #28]
 80090d8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80090da:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	68da      	ldr	r2, [r3, #12]
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80090ea:	4413      	add	r3, r2
 80090ec:	041b      	lsls	r3, r3, #16
 80090ee:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	461a      	mov	r2, r3
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	01db      	lsls	r3, r3, #7
 80090fa:	4413      	add	r3, r2
 80090fc:	3384      	adds	r3, #132	@ 0x84
 80090fe:	689b      	ldr	r3, [r3, #8]
 8009100:	68fa      	ldr	r2, [r7, #12]
 8009102:	6812      	ldr	r2, [r2, #0]
 8009104:	4611      	mov	r1, r2
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	01d2      	lsls	r2, r2, #7
 800910a:	440a      	add	r2, r1
 800910c:	3284      	adds	r2, #132	@ 0x84
 800910e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8009112:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	689a      	ldr	r2, [r3, #8]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	68db      	ldr	r3, [r3, #12]
 800911e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009122:	4413      	add	r3, r2
 8009124:	1c5a      	adds	r2, r3, #1
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4619      	mov	r1, r3
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	01db      	lsls	r3, r3, #7
 8009130:	440b      	add	r3, r1
 8009132:	3384      	adds	r3, #132	@ 0x84
 8009134:	4619      	mov	r1, r3
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	4313      	orrs	r3, r2
 800913a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	461a      	mov	r2, r3
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	01db      	lsls	r3, r3, #7
 8009146:	4413      	add	r3, r2
 8009148:	3384      	adds	r3, #132	@ 0x84
 800914a:	691b      	ldr	r3, [r3, #16]
 800914c:	68fa      	ldr	r2, [r7, #12]
 800914e:	6812      	ldr	r2, [r2, #0]
 8009150:	4611      	mov	r1, r2
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	01d2      	lsls	r2, r2, #7
 8009156:	440a      	add	r2, r1
 8009158:	3284      	adds	r2, #132	@ 0x84
 800915a:	f023 0307 	bic.w	r3, r3, #7
 800915e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	461a      	mov	r2, r3
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	01db      	lsls	r3, r3, #7
 800916a:	4413      	add	r3, r2
 800916c:	3384      	adds	r3, #132	@ 0x84
 800916e:	461a      	mov	r2, r3
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	691b      	ldr	r3, [r3, #16]
 8009174:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800917c:	021b      	lsls	r3, r3, #8
 800917e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009186:	041b      	lsls	r3, r3, #16
 8009188:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	699b      	ldr	r3, [r3, #24]
 800918e:	061b      	lsls	r3, r3, #24
 8009190:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	461a      	mov	r2, r3
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	01db      	lsls	r3, r3, #7
 800919c:	4413      	add	r3, r2
 800919e:	3384      	adds	r3, #132	@ 0x84
 80091a0:	699b      	ldr	r3, [r3, #24]
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	461a      	mov	r2, r3
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	01db      	lsls	r3, r3, #7
 80091ac:	4413      	add	r3, r2
 80091ae:	3384      	adds	r3, #132	@ 0x84
 80091b0:	461a      	mov	r2, r3
 80091b2:	2300      	movs	r3, #0
 80091b4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80091bc:	461a      	mov	r2, r3
 80091be:	69fb      	ldr	r3, [r7, #28]
 80091c0:	431a      	orrs	r2, r3
 80091c2:	69bb      	ldr	r3, [r7, #24]
 80091c4:	431a      	orrs	r2, r3
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4619      	mov	r1, r3
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	01db      	lsls	r3, r3, #7
 80091d0:	440b      	add	r3, r1
 80091d2:	3384      	adds	r3, #132	@ 0x84
 80091d4:	4619      	mov	r1, r3
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	4313      	orrs	r3, r2
 80091da:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	461a      	mov	r2, r3
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	01db      	lsls	r3, r3, #7
 80091e6:	4413      	add	r3, r2
 80091e8:	3384      	adds	r3, #132	@ 0x84
 80091ea:	695b      	ldr	r3, [r3, #20]
 80091ec:	68fa      	ldr	r2, [r7, #12]
 80091ee:	6812      	ldr	r2, [r2, #0]
 80091f0:	4611      	mov	r1, r2
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	01d2      	lsls	r2, r2, #7
 80091f6:	440a      	add	r2, r1
 80091f8:	3284      	adds	r2, #132	@ 0x84
 80091fa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80091fe:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	461a      	mov	r2, r3
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	01db      	lsls	r3, r3, #7
 800920a:	4413      	add	r3, r2
 800920c:	3384      	adds	r3, #132	@ 0x84
 800920e:	461a      	mov	r2, r3
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	695b      	ldr	r3, [r3, #20]
 8009214:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	461a      	mov	r2, r3
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	01db      	lsls	r3, r3, #7
 8009220:	4413      	add	r3, r2
 8009222:	3384      	adds	r3, #132	@ 0x84
 8009224:	69da      	ldr	r2, [r3, #28]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4619      	mov	r1, r3
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	01db      	lsls	r3, r3, #7
 8009230:	440b      	add	r3, r1
 8009232:	3384      	adds	r3, #132	@ 0x84
 8009234:	4619      	mov	r1, r3
 8009236:	4b58      	ldr	r3, [pc, #352]	@ (8009398 <LTDC_SetConfig+0x32c>)
 8009238:	4013      	ands	r3, r2
 800923a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	69da      	ldr	r2, [r3, #28]
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	6a1b      	ldr	r3, [r3, #32]
 8009244:	68f9      	ldr	r1, [r7, #12]
 8009246:	6809      	ldr	r1, [r1, #0]
 8009248:	4608      	mov	r0, r1
 800924a:	6879      	ldr	r1, [r7, #4]
 800924c:	01c9      	lsls	r1, r1, #7
 800924e:	4401      	add	r1, r0
 8009250:	3184      	adds	r1, #132	@ 0x84
 8009252:	4313      	orrs	r3, r2
 8009254:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	461a      	mov	r2, r3
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	01db      	lsls	r3, r3, #7
 8009260:	4413      	add	r3, r2
 8009262:	3384      	adds	r3, #132	@ 0x84
 8009264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	461a      	mov	r2, r3
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	01db      	lsls	r3, r3, #7
 8009270:	4413      	add	r3, r2
 8009272:	3384      	adds	r3, #132	@ 0x84
 8009274:	461a      	mov	r2, r3
 8009276:	2300      	movs	r3, #0
 8009278:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	461a      	mov	r2, r3
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	01db      	lsls	r3, r3, #7
 8009284:	4413      	add	r3, r2
 8009286:	3384      	adds	r3, #132	@ 0x84
 8009288:	461a      	mov	r2, r3
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800928e:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	691b      	ldr	r3, [r3, #16]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d102      	bne.n	800929e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8009298:	2304      	movs	r3, #4
 800929a:	61fb      	str	r3, [r7, #28]
 800929c:	e01b      	b.n	80092d6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	691b      	ldr	r3, [r3, #16]
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d102      	bne.n	80092ac <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80092a6:	2303      	movs	r3, #3
 80092a8:	61fb      	str	r3, [r7, #28]
 80092aa:	e014      	b.n	80092d6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	691b      	ldr	r3, [r3, #16]
 80092b0:	2b04      	cmp	r3, #4
 80092b2:	d00b      	beq.n	80092cc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80092b8:	2b02      	cmp	r3, #2
 80092ba:	d007      	beq.n	80092cc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80092c0:	2b03      	cmp	r3, #3
 80092c2:	d003      	beq.n	80092cc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80092c8:	2b07      	cmp	r3, #7
 80092ca:	d102      	bne.n	80092d2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80092cc:	2302      	movs	r3, #2
 80092ce:	61fb      	str	r3, [r7, #28]
 80092d0:	e001      	b.n	80092d6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80092d2:	2301      	movs	r3, #1
 80092d4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	461a      	mov	r2, r3
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	01db      	lsls	r3, r3, #7
 80092e0:	4413      	add	r3, r2
 80092e2:	3384      	adds	r3, #132	@ 0x84
 80092e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092e6:	68fa      	ldr	r2, [r7, #12]
 80092e8:	6812      	ldr	r2, [r2, #0]
 80092ea:	4611      	mov	r1, r2
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	01d2      	lsls	r2, r2, #7
 80092f0:	440a      	add	r2, r1
 80092f2:	3284      	adds	r2, #132	@ 0x84
 80092f4:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80092f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092fe:	69fa      	ldr	r2, [r7, #28]
 8009300:	fb02 f303 	mul.w	r3, r2, r3
 8009304:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	6859      	ldr	r1, [r3, #4]
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	1acb      	subs	r3, r1, r3
 8009310:	69f9      	ldr	r1, [r7, #28]
 8009312:	fb01 f303 	mul.w	r3, r1, r3
 8009316:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8009318:	68f9      	ldr	r1, [r7, #12]
 800931a:	6809      	ldr	r1, [r1, #0]
 800931c:	4608      	mov	r0, r1
 800931e:	6879      	ldr	r1, [r7, #4]
 8009320:	01c9      	lsls	r1, r1, #7
 8009322:	4401      	add	r1, r0
 8009324:	3184      	adds	r1, #132	@ 0x84
 8009326:	4313      	orrs	r3, r2
 8009328:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	461a      	mov	r2, r3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	01db      	lsls	r3, r3, #7
 8009334:	4413      	add	r3, r2
 8009336:	3384      	adds	r3, #132	@ 0x84
 8009338:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4619      	mov	r1, r3
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	01db      	lsls	r3, r3, #7
 8009344:	440b      	add	r3, r1
 8009346:	3384      	adds	r3, #132	@ 0x84
 8009348:	4619      	mov	r1, r3
 800934a:	4b14      	ldr	r3, [pc, #80]	@ (800939c <LTDC_SetConfig+0x330>)
 800934c:	4013      	ands	r3, r2
 800934e:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	461a      	mov	r2, r3
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	01db      	lsls	r3, r3, #7
 800935a:	4413      	add	r3, r2
 800935c:	3384      	adds	r3, #132	@ 0x84
 800935e:	461a      	mov	r2, r3
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009364:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	461a      	mov	r2, r3
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	01db      	lsls	r3, r3, #7
 8009370:	4413      	add	r3, r2
 8009372:	3384      	adds	r3, #132	@ 0x84
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	68fa      	ldr	r2, [r7, #12]
 8009378:	6812      	ldr	r2, [r2, #0]
 800937a:	4611      	mov	r1, r2
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	01d2      	lsls	r2, r2, #7
 8009380:	440a      	add	r2, r1
 8009382:	3284      	adds	r2, #132	@ 0x84
 8009384:	f043 0301 	orr.w	r3, r3, #1
 8009388:	6013      	str	r3, [r2, #0]
}
 800938a:	bf00      	nop
 800938c:	3724      	adds	r7, #36	@ 0x24
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr
 8009396:	bf00      	nop
 8009398:	fffff8f8 	.word	0xfffff8f8
 800939c:	fffff800 	.word	0xfffff800

080093a0 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart =  HAL_GetTick();
 80093a8:	f7fc fafa 	bl	80059a0 <HAL_GetTick>
 80093ac:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d101      	bne.n	80093b8 <HAL_MDMA_Abort+0x18>
  {
    return HAL_ERROR;
 80093b4:	2301      	movs	r3, #1
 80093b6:	e04a      	b.n	800944e <HAL_MDMA_Abort+0xae>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	2b02      	cmp	r3, #2
 80093c2:	d008      	beq.n	80093d6 <HAL_MDMA_Abort+0x36>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2280      	movs	r2, #128	@ 0x80
 80093c8:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2200      	movs	r2, #0
 80093ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80093d2:	2301      	movs	r3, #1
 80093d4:	e03b      	b.n	800944e <HAL_MDMA_Abort+0xae>
  }
  else
  {
    /* Disable all the transfer interrupts */
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	68da      	ldr	r2, [r3, #12]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 80093e4:	60da      	str	r2, [r3, #12]

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	68da      	ldr	r2, [r3, #12]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f022 0201 	bic.w	r2, r2, #1
 80093f4:	60da      	str	r2, [r3, #12]

    /* Check if the MDMA Channel is effectively disabled */
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80093f6:	e016      	b.n	8009426 <HAL_MDMA_Abort+0x86>
    {
      /* Check for the Timeout */
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80093f8:	f7fc fad2 	bl	80059a0 <HAL_GetTick>
 80093fc:	4602      	mov	r2, r0
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	1ad3      	subs	r3, r2, r3
 8009402:	2b05      	cmp	r3, #5
 8009404:	d90f      	bls.n	8009426 <HAL_MDMA_Abort+0x86>
      {
        /* Update error code */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800940a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the MDMA state */
        hmdma->State = HAL_MDMA_STATE_ERROR;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2203      	movs	r2, #3
 800941e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        return HAL_ERROR;
 8009422:	2301      	movs	r3, #1
 8009424:	e013      	b.n	800944e <HAL_MDMA_Abort+0xae>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	f003 0301 	and.w	r3, r3, #1
 8009430:	2b00      	cmp	r3, #0
 8009432:	d1e1      	bne.n	80093f8 <HAL_MDMA_Abort+0x58>
      }
    }

    /* Clear all interrupt flags */
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	221f      	movs	r2, #31
 800943a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2200      	movs	r2, #0
 8009440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2201      	movs	r2, #1
 8009448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

  return HAL_OK;
 800944c:	2300      	movs	r3, #0
}
 800944e:	4618      	mov	r0, r3
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
	...

08009458 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b086      	sub	sp, #24
 800945c:	af02      	add	r7, sp, #8
 800945e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009460:	2300      	movs	r3, #0
 8009462:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8009464:	f7fc fa9c 	bl	80059a0 <HAL_GetTick>
 8009468:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d102      	bne.n	8009476 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8009470:	2301      	movs	r3, #1
 8009472:	73fb      	strb	r3, [r7, #15]
 8009474:	e0a5      	b.n	80095c2 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009480:	2b00      	cmp	r3, #0
 8009482:	f040 809e 	bne.w	80095c2 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f7f8 ff5c 	bl	8002344 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800948c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 fc52 	bl	8009d3a <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	689a      	ldr	r2, [r3, #8]
 800949c:	4b4b      	ldr	r3, [pc, #300]	@ (80095cc <HAL_OSPI_Init+0x174>)
 800949e:	4013      	ands	r3, r2
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	68d1      	ldr	r1, [r2, #12]
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	6912      	ldr	r2, [r2, #16]
 80094a8:	3a01      	subs	r2, #1
 80094aa:	0412      	lsls	r2, r2, #16
 80094ac:	4311      	orrs	r1, r2
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	6952      	ldr	r2, [r2, #20]
 80094b2:	3a01      	subs	r2, #1
 80094b4:	0212      	lsls	r2, r2, #8
 80094b6:	4311      	orrs	r1, r2
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80094bc:	4311      	orrs	r1, r2
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	69d2      	ldr	r2, [r2, #28]
 80094c2:	4311      	orrs	r1, r2
 80094c4:	687a      	ldr	r2, [r7, #4]
 80094c6:	6812      	ldr	r2, [r2, #0]
 80094c8:	430b      	orrs	r3, r1
 80094ca:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	68db      	ldr	r3, [r3, #12]
 80094d2:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6a1a      	ldr	r2, [r3, #32]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	430a      	orrs	r2, r1
 80094e0:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094e6:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	430a      	orrs	r2, r1
 80094f2:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80094fc:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	3b01      	subs	r3, #1
 800950e:	021a      	lsls	r2, r3, #8
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	430a      	orrs	r2, r1
 8009516:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800951c:	9300      	str	r3, [sp, #0]
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	2200      	movs	r2, #0
 8009522:	2120      	movs	r1, #32
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f001 f8ff 	bl	800a728 <OSPI_WaitFlagStateUntilTimeout>
 800952a:	4603      	mov	r3, r0
 800952c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800952e:	7bfb      	ldrb	r3, [r7, #15]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d146      	bne.n	80095c2 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	68db      	ldr	r3, [r3, #12]
 800953a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009542:	1e5a      	subs	r2, r3, #1
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	430a      	orrs	r2, r1
 800954a:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	689a      	ldr	r2, [r3, #8]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	430a      	orrs	r2, r1
 8009560:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800956a:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009576:	431a      	orrs	r2, r3
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	430a      	orrs	r2, r1
 800957e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	681a      	ldr	r2, [r3, #0]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f042 0201 	orr.w	r2, r2, #1
 8009590:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	699b      	ldr	r3, [r3, #24]
 8009596:	2b02      	cmp	r3, #2
 8009598:	d107      	bne.n	80095aa <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	689a      	ldr	r2, [r3, #8]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f042 0202 	orr.w	r2, r2, #2
 80095a8:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	68db      	ldr	r3, [r3, #12]
 80095ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80095b2:	d103      	bne.n	80095bc <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2201      	movs	r2, #1
 80095b8:	651a      	str	r2, [r3, #80]	@ 0x50
 80095ba:	e002      	b.n	80095c2 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2202      	movs	r2, #2
 80095c0:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 80095c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3710      	adds	r7, #16
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	f8e0f8f4 	.word	0xf8e0f8f4

080095d0 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80095d8:	2300      	movs	r3, #0
 80095da:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d102      	bne.n	80095e8 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 80095e2:	2301      	movs	r3, #1
 80095e4:	73fb      	strb	r3, [r7, #15]
 80095e6:	e015      	b.n	8009614 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
    /* Disable OctoSPI */
    __HAL_OSPI_DISABLE(hospi);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	681a      	ldr	r2, [r3, #0]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f022 0201 	bic.w	r2, r2, #1
 80095f6:	601a      	str	r2, [r3, #0]

    /* Disable free running clock if needed : must be done after OSPI disable */
    CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	689a      	ldr	r2, [r3, #8]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f022 0202 	bic.w	r2, r2, #2
 8009606:	609a      	str	r2, [r3, #8]

    /* DeInit the low level hardware */
    hospi->MspDeInitCallback(hospi);
#else
    /* De-initialize the low-level hardware */
    HAL_OSPI_MspDeInit(hospi);
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f7f9 f84f 	bl	80026ac <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

    /* Reset the driver state */
    hospi->State = HAL_OSPI_STATE_RESET;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2200      	movs	r2, #0
 8009612:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  return status;
 8009614:	7bfb      	ldrb	r3, [r7, #15]
}
 8009616:	4618      	mov	r0, r3
 8009618:	3710      	adds	r7, #16
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}

0800961e <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 800961e:	b580      	push	{r7, lr}
 8009620:	b08a      	sub	sp, #40	@ 0x28
 8009622:	af02      	add	r7, sp, #8
 8009624:	60f8      	str	r0, [r7, #12]
 8009626:	60b9      	str	r1, [r7, #8]
 8009628:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800962a:	f7fc f9b9 	bl	80059a0 <HAL_GetTick>
 800962e:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009634:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800963a:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	2b02      	cmp	r3, #2
 8009640:	d104      	bne.n	800964c <HAL_OSPI_Command+0x2e>
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	68db      	ldr	r3, [r3, #12]
 8009646:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800964a:	d115      	bne.n	8009678 <HAL_OSPI_Command+0x5a>
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	2b14      	cmp	r3, #20
 8009650:	d107      	bne.n	8009662 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	2b02      	cmp	r3, #2
 8009658:	d00e      	beq.n	8009678 <HAL_OSPI_Command+0x5a>
                                                   || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	2b03      	cmp	r3, #3
 8009660:	d00a      	beq.n	8009678 <HAL_OSPI_Command+0x5a>
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	2b24      	cmp	r3, #36	@ 0x24
 8009666:	d15b      	bne.n	8009720 <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	2b01      	cmp	r3, #1
 800966e:	d003      	beq.n	8009678 <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8009674:	2b03      	cmp	r3, #3
 8009676:	d153      	bne.n	8009720 <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	9300      	str	r3, [sp, #0]
 800967c:	69bb      	ldr	r3, [r7, #24]
 800967e:	2200      	movs	r2, #0
 8009680:	2120      	movs	r1, #32
 8009682:	68f8      	ldr	r0, [r7, #12]
 8009684:	f001 f850 	bl	800a728 <OSPI_WaitFlagStateUntilTimeout>
 8009688:	4603      	mov	r3, r0
 800968a:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800968c:	7ffb      	ldrb	r3, [r7, #31]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d14c      	bne.n	800972c <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2200      	movs	r2, #0
 8009696:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8009698:	68b9      	ldr	r1, [r7, #8]
 800969a:	68f8      	ldr	r0, [r7, #12]
 800969c:	f001 f87c 	bl	800a798 <OSPI_ConfigCmd>
 80096a0:	4603      	mov	r3, r0
 80096a2:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 80096a4:	7ffb      	ldrb	r3, [r7, #31]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d140      	bne.n	800972c <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d10e      	bne.n	80096d0 <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	9300      	str	r3, [sp, #0]
 80096b6:	69bb      	ldr	r3, [r7, #24]
 80096b8:	2201      	movs	r2, #1
 80096ba:	2102      	movs	r1, #2
 80096bc:	68f8      	ldr	r0, [r7, #12]
 80096be:	f001 f833 	bl	800a728 <OSPI_WaitFlagStateUntilTimeout>
 80096c2:	4603      	mov	r3, r0
 80096c4:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2202      	movs	r2, #2
 80096cc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 80096ce:	e02d      	b.n	800972c <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d103      	bne.n	80096e0 <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2204      	movs	r2, #4
 80096dc:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80096de:	e025      	b.n	800972c <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d10b      	bne.n	8009700 <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096ec:	2b24      	cmp	r3, #36	@ 0x24
 80096ee:	d103      	bne.n	80096f8 <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2204      	movs	r2, #4
 80096f4:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80096f6:	e019      	b.n	800972c <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2214      	movs	r2, #20
 80096fc:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80096fe:	e015      	b.n	800972c <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	2b02      	cmp	r3, #2
 8009706:	d111      	bne.n	800972c <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800970c:	2b14      	cmp	r3, #20
 800970e:	d103      	bne.n	8009718 <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	2204      	movs	r2, #4
 8009714:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8009716:	e009      	b.n	800972c <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2224      	movs	r2, #36	@ 0x24
 800971c:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800971e:	e005      	b.n	800972c <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8009720:	2301      	movs	r3, #1
 8009722:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2210      	movs	r2, #16
 8009728:	655a      	str	r2, [r3, #84]	@ 0x54
 800972a:	e000      	b.n	800972e <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 800972c:	bf00      	nop
  }

  /* Return function status */
  return status;
 800972e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009730:	4618      	mov	r0, r3
 8009732:	3720      	adds	r7, #32
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <HAL_OSPI_HyperbusCfg>:
  * @param  cfg     : Structure containing the Hyperbus configuration
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_HyperbusCfg(OSPI_HandleTypeDef *hospi, OSPI_HyperbusCfgTypeDef *cfg, uint32_t Timeout)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b08a      	sub	sp, #40	@ 0x28
 800973c:	af02      	add	r7, sp, #8
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	60b9      	str	r1, [r7, #8]
 8009742:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8009744:	f7fc f92c 	bl	80059a0 <HAL_GetTick>
 8009748:	61b8      	str	r0, [r7, #24]
  assert_param(IS_OSPI_ACCESS_TIME(cfg->AccessTime));
  assert_param(IS_OSPI_WRITE_ZERO_LATENCY(cfg->WriteZeroLatency));
  assert_param(IS_OSPI_LATENCY_MODE(cfg->LatencyMode));

  /* Check the state of the driver */
  state = hospi->State;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800974e:	617b      	str	r3, [r7, #20]
  if ((state == HAL_OSPI_STATE_HYPERBUS_INIT) || (state == HAL_OSPI_STATE_READY))
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	2b01      	cmp	r3, #1
 8009754:	d002      	beq.n	800975c <HAL_OSPI_HyperbusCfg+0x24>
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	2b02      	cmp	r3, #2
 800975a:	d122      	bne.n	80097a2 <HAL_OSPI_HyperbusCfg+0x6a>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	9300      	str	r3, [sp, #0]
 8009760:	69bb      	ldr	r3, [r7, #24]
 8009762:	2200      	movs	r2, #0
 8009764:	2120      	movs	r1, #32
 8009766:	68f8      	ldr	r0, [r7, #12]
 8009768:	f000 ffde 	bl	800a728 <OSPI_WaitFlagStateUntilTimeout>
 800976c:	4603      	mov	r3, r0
 800976e:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8009770:	7ffb      	ldrb	r3, [r7, #31]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d11a      	bne.n	80097ac <HAL_OSPI_HyperbusCfg+0x74>
    {
      /* Configure Hyperbus configuration Latency register */
      WRITE_REG(hospi->Instance->HLCR, ((cfg->RWRecoveryTime << OCTOSPI_HLCR_TRWR_Pos) |
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	041a      	lsls	r2, r3, #16
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	021b      	lsls	r3, r3, #8
 8009782:	431a      	orrs	r2, r3
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	689b      	ldr	r3, [r3, #8]
 8009788:	ea42 0103 	orr.w	r1, r2, r3
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	68da      	ldr	r2, [r3, #12]
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	430a      	orrs	r2, r1
 8009796:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
                                        (cfg->AccessTime << OCTOSPI_HLCR_TACC_Pos)     |
                                        cfg->WriteZeroLatency | cfg->LatencyMode));

      /* Update the state */
      hospi->State = HAL_OSPI_STATE_READY;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2202      	movs	r2, #2
 800979e:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80097a0:	e004      	b.n	80097ac <HAL_OSPI_HyperbusCfg+0x74>
    }
  }
  else
  {
    status = HAL_ERROR;
 80097a2:	2301      	movs	r3, #1
 80097a4:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2210      	movs	r2, #16
 80097aa:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Return function status */
  return status;
 80097ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3720      	adds	r7, #32
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}

080097b6 <HAL_OSPI_HyperbusCmd>:
  * @param  cmd     : Structure containing the Hyperbus command
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_HyperbusCmd(OSPI_HandleTypeDef *hospi, OSPI_HyperbusCmdTypeDef *cmd, uint32_t Timeout)
{
 80097b6:	b580      	push	{r7, lr}
 80097b8:	b088      	sub	sp, #32
 80097ba:	af02      	add	r7, sp, #8
 80097bc:	60f8      	str	r0, [r7, #12]
 80097be:	60b9      	str	r1, [r7, #8]
 80097c0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80097c2:	f7fc f8ed 	bl	80059a0 <HAL_GetTick>
 80097c6:	6138      	str	r0, [r7, #16]
  assert_param(IS_OSPI_ADDRESS_SIZE(cmd->AddressSize));
  assert_param(IS_OSPI_NUMBER_DATA(cmd->NbData));
  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));

  /* Check the state of the driver */
  if ((hospi->State == HAL_OSPI_STATE_READY) && (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS))
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097cc:	2b02      	cmp	r3, #2
 80097ce:	d149      	bne.n	8009864 <HAL_OSPI_HyperbusCmd+0xae>
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	68db      	ldr	r3, [r3, #12]
 80097d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80097d8:	d144      	bne.n	8009864 <HAL_OSPI_HyperbusCmd+0xae>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	9300      	str	r3, [sp, #0]
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	2200      	movs	r2, #0
 80097e2:	2120      	movs	r1, #32
 80097e4:	68f8      	ldr	r0, [r7, #12]
 80097e6:	f000 ff9f 	bl	800a728 <OSPI_WaitFlagStateUntilTimeout>
 80097ea:	4603      	mov	r3, r0
 80097ec:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80097ee:	7dfb      	ldrb	r3, [r7, #23]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d13c      	bne.n	800986e <HAL_OSPI_HyperbusCmd+0xb8>
    {
      /* Re-initialize the value of the functional mode */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8009802:	601a      	str	r2, [r3, #0]

      /* Configure the address space in the DCR1 register */
      MODIFY_REG(hospi->Instance->DCR1, OCTOSPI_DCR1_MTYP_0, cmd->AddressSpace);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	689b      	ldr	r3, [r3, #8]
 800980a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	430a      	orrs	r2, r1
 8009818:	609a      	str	r2, [r3, #8]

      /* Configure the CCR and WCCR registers with the address size and the following configuration :
         - DQS signal enabled (used as RWDS)
         - DTR mode enabled on address and data
         - address and data on 8 lines */
      WRITE_REG(hospi->Instance->CCR, (cmd->DQSMode | OCTOSPI_CCR_DDTR | OCTOSPI_CCR_DMODE_2 |
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	691a      	ldr	r2, [r3, #16]
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	689b      	ldr	r3, [r3, #8]
 8009822:	431a      	orrs	r2, r3
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f042 220c 	orr.w	r2, r2, #201329664	@ 0xc000c00
 800982c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
                                       cmd->AddressSize | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADMODE_2));
      WRITE_REG(hospi->Instance->WCCR, (cmd->DQSMode | OCTOSPI_WCCR_DDTR | OCTOSPI_WCCR_DMODE_2 |
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	691a      	ldr	r2, [r3, #16]
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	689b      	ldr	r3, [r3, #8]
 8009838:	431a      	orrs	r2, r3
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f042 220c 	orr.w	r2, r2, #201329664	@ 0xc000c00
 8009842:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
                                        cmd->AddressSize | OCTOSPI_WCCR_ADDTR | OCTOSPI_WCCR_ADMODE_2));

      /* Configure the DLR register with the number of data */
      WRITE_REG(hospi->Instance->DLR, (cmd->NbData - 1U));
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	68da      	ldr	r2, [r3, #12]
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	3a01      	subs	r2, #1
 8009850:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure the AR register with the address value */
      WRITE_REG(hospi->Instance->AR, cmd->Address);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	68ba      	ldr	r2, [r7, #8]
 8009858:	6852      	ldr	r2, [r2, #4]
 800985a:	649a      	str	r2, [r3, #72]	@ 0x48

      /* Update the state */
      hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2204      	movs	r2, #4
 8009860:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8009862:	e004      	b.n	800986e <HAL_OSPI_HyperbusCmd+0xb8>
    }
  }
  else
  {
    status = HAL_ERROR;
 8009864:	2301      	movs	r3, #1
 8009866:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2210      	movs	r2, #16
 800986c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Return function status */
  return status;
 800986e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009870:	4618      	mov	r0, r3
 8009872:	3718      	adds	r7, #24
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b08a      	sub	sp, #40	@ 0x28
 800987c:	af02      	add	r7, sp, #8
 800987e:	60f8      	str	r0, [r7, #12]
 8009880:	60b9      	str	r1, [r7, #8]
 8009882:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8009884:	f7fc f88c 	bl	80059a0 <HAL_GetTick>
 8009888:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	3350      	adds	r3, #80	@ 0x50
 8009890:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d105      	bne.n	80098a4 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8009898:	2301      	movs	r3, #1
 800989a:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2208      	movs	r2, #8
 80098a0:	655a      	str	r2, [r3, #84]	@ 0x54
 80098a2:	e057      	b.n	8009954 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098a8:	2b04      	cmp	r3, #4
 80098aa:	d14e      	bne.n	800994a <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098b2:	1c5a      	adds	r2, r3, #1
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	68ba      	ldr	r2, [r7, #8]
 80098c4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80098d4:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	9300      	str	r3, [sp, #0]
 80098da:	69bb      	ldr	r3, [r7, #24]
 80098dc:	2201      	movs	r2, #1
 80098de:	2104      	movs	r1, #4
 80098e0:	68f8      	ldr	r0, [r7, #12]
 80098e2:	f000 ff21 	bl	800a728 <OSPI_WaitFlagStateUntilTimeout>
 80098e6:	4603      	mov	r3, r0
 80098e8:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80098ea:	7ffb      	ldrb	r3, [r7, #31]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d113      	bne.n	8009918 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098f4:	781a      	ldrb	r2, [r3, #0]
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098fe:	1c5a      	adds	r2, r3, #1
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009908:	1e5a      	subs	r2, r3, #1
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	649a      	str	r2, [r3, #72]	@ 0x48
      } while (hospi->XferCount > 0U);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009912:	2b00      	cmp	r3, #0
 8009914:	d1df      	bne.n	80098d6 <HAL_OSPI_Transmit+0x5e>
 8009916:	e000      	b.n	800991a <HAL_OSPI_Transmit+0xa2>
          break;
 8009918:	bf00      	nop

      if (status == HAL_OK)
 800991a:	7ffb      	ldrb	r3, [r7, #31]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d119      	bne.n	8009954 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	9300      	str	r3, [sp, #0]
 8009924:	69bb      	ldr	r3, [r7, #24]
 8009926:	2201      	movs	r2, #1
 8009928:	2102      	movs	r1, #2
 800992a:	68f8      	ldr	r0, [r7, #12]
 800992c:	f000 fefc 	bl	800a728 <OSPI_WaitFlagStateUntilTimeout>
 8009930:	4603      	mov	r3, r0
 8009932:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8009934:	7ffb      	ldrb	r3, [r7, #31]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d10c      	bne.n	8009954 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	2202      	movs	r2, #2
 8009940:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2202      	movs	r2, #2
 8009946:	651a      	str	r2, [r3, #80]	@ 0x50
 8009948:	e004      	b.n	8009954 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800994a:	2301      	movs	r3, #1
 800994c:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2210      	movs	r2, #16
 8009952:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 8009954:	7ffb      	ldrb	r3, [r7, #31]
}
 8009956:	4618      	mov	r0, r3
 8009958:	3720      	adds	r7, #32
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}

0800995e <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 800995e:	b580      	push	{r7, lr}
 8009960:	b08c      	sub	sp, #48	@ 0x30
 8009962:	af02      	add	r7, sp, #8
 8009964:	60f8      	str	r0, [r7, #12]
 8009966:	60b9      	str	r1, [r7, #8]
 8009968:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800996a:	f7fc f819 	bl	80059a0 <HAL_GetTick>
 800996e:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	3350      	adds	r3, #80	@ 0x50
 8009976:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800997e:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8009988:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d106      	bne.n	800999e <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8009990:	2301      	movs	r3, #1
 8009992:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	2208      	movs	r2, #8
 800999a:	655a      	str	r2, [r3, #84]	@ 0x54
 800999c:	e07c      	b.n	8009a98 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099a2:	2b04      	cmp	r3, #4
 80099a4:	d172      	bne.n	8009a8c <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099ac:	1c5a      	adds	r2, r3, #1
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	68ba      	ldr	r2, [r7, #8]
 80099be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80099d2:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	68db      	ldr	r3, [r3, #12]
 80099d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80099dc:	d104      	bne.n	80099e8 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	69ba      	ldr	r2, [r7, #24]
 80099e4:	649a      	str	r2, [r3, #72]	@ 0x48
 80099e6:	e011      	b.n	8009a0c <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80099f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d004      	beq.n	8009a02 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	69ba      	ldr	r2, [r7, #24]
 80099fe:	649a      	str	r2, [r3, #72]	@ 0x48
 8009a00:	e004      	b.n	8009a0c <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	697a      	ldr	r2, [r7, #20]
 8009a08:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	9300      	str	r3, [sp, #0]
 8009a10:	6a3b      	ldr	r3, [r7, #32]
 8009a12:	2201      	movs	r2, #1
 8009a14:	2106      	movs	r1, #6
 8009a16:	68f8      	ldr	r0, [r7, #12]
 8009a18:	f000 fe86 	bl	800a728 <OSPI_WaitFlagStateUntilTimeout>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
 8009a22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d114      	bne.n	8009a54 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a2e:	69fa      	ldr	r2, [r7, #28]
 8009a30:	7812      	ldrb	r2, [r2, #0]
 8009a32:	b2d2      	uxtb	r2, r2
 8009a34:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a3a:	1c5a      	adds	r2, r3, #1
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a44:	1e5a      	subs	r2, r3, #1
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	649a      	str	r2, [r3, #72]	@ 0x48
      } while (hospi->XferCount > 0U);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d1dc      	bne.n	8009a0c <HAL_OSPI_Receive+0xae>
 8009a52:	e000      	b.n	8009a56 <HAL_OSPI_Receive+0xf8>
          break;
 8009a54:	bf00      	nop

      if (status == HAL_OK)
 8009a56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d11c      	bne.n	8009a98 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	9300      	str	r3, [sp, #0]
 8009a62:	6a3b      	ldr	r3, [r7, #32]
 8009a64:	2201      	movs	r2, #1
 8009a66:	2102      	movs	r1, #2
 8009a68:	68f8      	ldr	r0, [r7, #12]
 8009a6a:	f000 fe5d 	bl	800a728 <OSPI_WaitFlagStateUntilTimeout>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
 8009a74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d10d      	bne.n	8009a98 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	2202      	movs	r2, #2
 8009a82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2202      	movs	r2, #2
 8009a88:	651a      	str	r2, [r3, #80]	@ 0x50
 8009a8a:	e005      	b.n	8009a98 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2210      	movs	r2, #16
 8009a96:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 8009a98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3728      	adds	r7, #40	@ 0x28
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <HAL_OSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b08a      	sub	sp, #40	@ 0x28
 8009aa8:	af02      	add	r7, sp, #8
 8009aaa:	60f8      	str	r0, [r7, #12]
 8009aac:	60b9      	str	r1, [r7, #8]
 8009aae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8009ab0:	f7fb ff76 	bl	80059a0 <HAL_GetTick>
 8009ab4:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009abc:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8009ac6:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP(cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL(cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009acc:	2b04      	cmp	r3, #4
 8009ace:	d164      	bne.n	8009b9a <HAL_OSPI_AutoPolling+0xf6>
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	68db      	ldr	r3, [r3, #12]
 8009ad4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009ad8:	d15f      	bne.n	8009b9a <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	9300      	str	r3, [sp, #0]
 8009ade:	69bb      	ldr	r3, [r7, #24]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	2120      	movs	r1, #32
 8009ae4:	68f8      	ldr	r0, [r7, #12]
 8009ae6:	f000 fe1f 	bl	800a728 <OSPI_WaitFlagStateUntilTimeout>
 8009aea:	4603      	mov	r3, r0
 8009aec:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8009aee:	7ffb      	ldrb	r3, [r7, #31]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d158      	bne.n	8009ba6 <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG(hospi->Instance->PSMAR, cfg->Match);
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	68ba      	ldr	r2, [r7, #8]
 8009afa:	6812      	ldr	r2, [r2, #0]
 8009afc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      WRITE_REG(hospi->Instance->PSMKR, cfg->Mask);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	68ba      	ldr	r2, [r7, #8]
 8009b06:	6852      	ldr	r2, [r2, #4]
 8009b08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      WRITE_REG(hospi->Instance->PIR,   cfg->Interval);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	68ba      	ldr	r2, [r7, #8]
 8009b12:	6912      	ldr	r2, [r2, #16]
 8009b14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f023 5243 	bic.w	r2, r3, #817889280	@ 0x30c00000
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	6899      	ldr	r1, [r3, #8]
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	68db      	ldr	r3, [r3, #12]
 8009b2a:	430b      	orrs	r3, r1
 8009b2c:	431a      	orrs	r2, r3
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8009b36:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009b40:	d104      	bne.n	8009b4c <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	697a      	ldr	r2, [r7, #20]
 8009b48:	649a      	str	r2, [r3, #72]	@ 0x48
 8009b4a:	e011      	b.n	8009b70 <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8009b54:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d004      	beq.n	8009b66 <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	697a      	ldr	r2, [r7, #20]
 8009b62:	649a      	str	r2, [r3, #72]	@ 0x48
 8009b64:	e004      	b.n	8009b70 <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	693a      	ldr	r2, [r7, #16]
 8009b6c:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	9300      	str	r3, [sp, #0]
 8009b74:	69bb      	ldr	r3, [r7, #24]
 8009b76:	2201      	movs	r2, #1
 8009b78:	2108      	movs	r1, #8
 8009b7a:	68f8      	ldr	r0, [r7, #12]
 8009b7c:	f000 fdd4 	bl	800a728 <OSPI_WaitFlagStateUntilTimeout>
 8009b80:	4603      	mov	r3, r0
 8009b82:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8009b84:	7ffb      	ldrb	r3, [r7, #31]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d10d      	bne.n	8009ba6 <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	2208      	movs	r2, #8
 8009b90:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2202      	movs	r2, #2
 8009b96:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8009b98:	e005      	b.n	8009ba6 <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2210      	movs	r2, #16
 8009ba2:	655a      	str	r2, [r3, #84]	@ 0x54
 8009ba4:	e000      	b.n	8009ba8 <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 8009ba6:	bf00      	nop
  }

  /* Return function status */
  return status;
 8009ba8:	7ffb      	ldrb	r3, [r7, #31]
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3720      	adds	r7, #32
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}
	...

08009bb4 <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b086      	sub	sp, #24
 8009bb8:	af02      	add	r7, sp, #8
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8009bbe:	f7fb feef 	bl	80059a0 <HAL_GetTick>
 8009bc2:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bc8:	2b04      	cmp	r3, #4
 8009bca:	d134      	bne.n	8009c36 <HAL_OSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bd0:	9300      	str	r3, [sp, #0]
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	2120      	movs	r1, #32
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 fda5 	bl	800a728 <OSPI_WaitFlagStateUntilTimeout>
 8009bde:	4603      	mov	r3, r0
 8009be0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8009be2:	7bfb      	ldrb	r3, [r7, #15]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d12b      	bne.n	8009c40 <HAL_OSPI_MemoryMapped+0x8c>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2288      	movs	r2, #136	@ 0x88
 8009bec:	651a      	str	r2, [r3, #80]	@ 0x50

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	2b08      	cmp	r3, #8
 8009bf4:	d111      	bne.n	8009c1a <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	683a      	ldr	r2, [r7, #0]
 8009bfc:	6852      	ldr	r2, [r2, #4]
 8009bfe:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	2210      	movs	r2, #16
 8009c08:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	681a      	ldr	r2, [r3, #0]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8009c18:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	681a      	ldr	r2, [r3, #0]
 8009c20:	4b0a      	ldr	r3, [pc, #40]	@ (8009c4c <HAL_OSPI_MemoryMapped+0x98>)
 8009c22:	4013      	ands	r3, r2
 8009c24:	683a      	ldr	r2, [r7, #0]
 8009c26:	6812      	ldr	r2, [r2, #0]
 8009c28:	431a      	orrs	r2, r3
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
 8009c32:	601a      	str	r2, [r3, #0]
 8009c34:	e004      	b.n	8009c40 <HAL_OSPI_MemoryMapped+0x8c>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 8009c36:	2301      	movs	r3, #1
 8009c38:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2210      	movs	r2, #16
 8009c3e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Return function status */
  return status;
 8009c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3710      	adds	r7, #16
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	bf00      	nop
 8009c4c:	cffffff7 	.word	0xcffffff7

08009c50 <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b088      	sub	sp, #32
 8009c54:	af02      	add	r7, sp, #8
 8009c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8009c5c:	f7fb fea0 	bl	80059a0 <HAL_GetTick>
 8009c60:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c66:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f003 0308 	and.w	r3, r3, #8
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d104      	bne.n	8009c7c <HAL_OSPI_Abort+0x2c>
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	f003 0304 	and.w	r3, r3, #4
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d052      	beq.n	8009d22 <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f003 0304 	and.w	r3, r3, #4
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d014      	beq.n	8009cb4 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f022 0204 	bic.w	r2, r2, #4
 8009c98:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_MDMA_Abort(hospi->hmdma);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f7ff fb7e 	bl	80093a0 <HAL_MDMA_Abort>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8009ca8:	7dfb      	ldrb	r3, [r7, #23]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d002      	beq.n	8009cb4 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2204      	movs	r2, #4
 8009cb2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	6a1b      	ldr	r3, [r3, #32]
 8009cba:	f003 0320 	and.w	r3, r3, #32
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d02b      	beq.n	8009d1a <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	681a      	ldr	r2, [r3, #0]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f042 0202 	orr.w	r2, r2, #2
 8009cd0:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cd6:	9300      	str	r3, [sp, #0]
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	2102      	movs	r1, #2
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 fd22 	bl	800a728 <OSPI_WaitFlagStateUntilTimeout>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8009ce8:	7dfb      	ldrb	r3, [r7, #23]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d11f      	bne.n	8009d2e <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	2202      	movs	r2, #2
 8009cf4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cfa:	9300      	str	r3, [sp, #0]
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	2120      	movs	r1, #32
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 fd10 	bl	800a728 <OSPI_WaitFlagStateUntilTimeout>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8009d0c:	7dfb      	ldrb	r3, [r7, #23]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d10d      	bne.n	8009d2e <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2202      	movs	r2, #2
 8009d16:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8009d18:	e009      	b.n	8009d2e <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2202      	movs	r2, #2
 8009d1e:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8009d20:	e005      	b.n	8009d2e <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 8009d22:	2301      	movs	r3, #1
 8009d24:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2210      	movs	r2, #16
 8009d2a:	655a      	str	r2, [r3, #84]	@ 0x54
 8009d2c:	e000      	b.n	8009d30 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8009d2e:	bf00      	nop
  }

  /* Return function status */
  return status;
 8009d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3718      	adds	r7, #24
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}

08009d3a <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8009d3a:	b480      	push	{r7}
 8009d3c:	b083      	sub	sp, #12
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
 8009d42:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	683a      	ldr	r2, [r7, #0]
 8009d48:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 8009d4a:	2300      	movs	r3, #0
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b094      	sub	sp, #80	@ 0x50
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d64:	2300      	movs	r3, #0
 8009d66:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a9d      	ldr	r2, [pc, #628]	@ (8009fec <HAL_OSPIM_Config+0x294>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d105      	bne.n	8009d86 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 8009d7e:	2301      	movs	r3, #1
 8009d80:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8009d84:	e004      	b.n	8009d90 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8009d86:	2301      	movs	r3, #1
 8009d88:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8009d90:	2300      	movs	r3, #0
 8009d92:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009d96:	e01d      	b.n	8009dd4 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8009d98:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009d9c:	3301      	adds	r3, #1
 8009d9e:	b2d8      	uxtb	r0, r3
 8009da0:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8009da4:	f107 0114 	add.w	r1, r7, #20
 8009da8:	4613      	mov	r3, r2
 8009daa:	005b      	lsls	r3, r3, #1
 8009dac:	4413      	add	r3, r2
 8009dae:	00db      	lsls	r3, r3, #3
 8009db0:	440b      	add	r3, r1
 8009db2:	4619      	mov	r1, r3
 8009db4:	f000 fe6a 	bl	800aa8c <OSPIM_GetConfig>
 8009db8:	4603      	mov	r3, r0
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d005      	beq.n	8009dca <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2208      	movs	r2, #8
 8009dc8:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8009dca:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009dce:	3301      	adds	r3, #1
 8009dd0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009dd4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009dd8:	2b01      	cmp	r3, #1
 8009dda:	d9dd      	bls.n	8009d98 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8009ddc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	f040 8495 	bne.w	800a710 <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8009de6:	4b81      	ldr	r3, [pc, #516]	@ (8009fec <HAL_OSPIM_Config+0x294>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f003 0301 	and.w	r3, r3, #1
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d00b      	beq.n	8009e0a <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8009df2:	4b7e      	ldr	r3, [pc, #504]	@ (8009fec <HAL_OSPIM_Config+0x294>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4a7d      	ldr	r2, [pc, #500]	@ (8009fec <HAL_OSPIM_Config+0x294>)
 8009df8:	f023 0301 	bic.w	r3, r3, #1
 8009dfc:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8009dfe:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009e02:	f043 0301 	orr.w	r3, r3, #1
 8009e06:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8009e0a:	4b79      	ldr	r3, [pc, #484]	@ (8009ff0 <HAL_OSPIM_Config+0x298>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f003 0301 	and.w	r3, r3, #1
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d00b      	beq.n	8009e2e <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8009e16:	4b76      	ldr	r3, [pc, #472]	@ (8009ff0 <HAL_OSPIM_Config+0x298>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4a75      	ldr	r2, [pc, #468]	@ (8009ff0 <HAL_OSPIM_Config+0x298>)
 8009e1c:	f023 0301 	bic.w	r3, r3, #1
 8009e20:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8009e22:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009e26:	f043 0302 	orr.w	r3, r3, #2
 8009e2a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8009e2e:	4971      	ldr	r1, [pc, #452]	@ (8009ff4 <HAL_OSPIM_Config+0x29c>)
 8009e30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009e32:	4613      	mov	r3, r2
 8009e34:	005b      	lsls	r3, r3, #1
 8009e36:	4413      	add	r3, r2
 8009e38:	00db      	lsls	r3, r3, #3
 8009e3a:	3350      	adds	r3, #80	@ 0x50
 8009e3c:	443b      	add	r3, r7
 8009e3e:	3b34      	subs	r3, #52	@ 0x34
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	3b01      	subs	r3, #1
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	440b      	add	r3, r1
 8009e48:	6859      	ldr	r1, [r3, #4]
 8009e4a:	486a      	ldr	r0, [pc, #424]	@ (8009ff4 <HAL_OSPIM_Config+0x29c>)
 8009e4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009e4e:	4613      	mov	r3, r2
 8009e50:	005b      	lsls	r3, r3, #1
 8009e52:	4413      	add	r3, r2
 8009e54:	00db      	lsls	r3, r3, #3
 8009e56:	3350      	adds	r3, #80	@ 0x50
 8009e58:	443b      	add	r3, r7
 8009e5a:	3b34      	subs	r3, #52	@ 0x34
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	3b01      	subs	r3, #1
 8009e60:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8009e64:	009b      	lsls	r3, r3, #2
 8009e66:	4403      	add	r3, r0
 8009e68:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8009e6a:	4b62      	ldr	r3, [pc, #392]	@ (8009ff4 <HAL_OSPIM_Config+0x29c>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f003 0301 	and.w	r3, r3, #1
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	f000 80c0 	beq.w	8009ff8 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8009e78:	4b5e      	ldr	r3, [pc, #376]	@ (8009ff4 <HAL_OSPIM_Config+0x29c>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a5d      	ldr	r2, [pc, #372]	@ (8009ff4 <HAL_OSPIM_Config+0x29c>)
 8009e7e:	f023 0301 	bic.w	r3, r3, #1
 8009e82:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8009e84:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	f040 8162 	bne.w	800a152 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8009e8e:	4959      	ldr	r1, [pc, #356]	@ (8009ff4 <HAL_OSPIM_Config+0x29c>)
 8009e90:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8009e94:	4613      	mov	r3, r2
 8009e96:	005b      	lsls	r3, r3, #1
 8009e98:	4413      	add	r3, r2
 8009e9a:	00db      	lsls	r3, r3, #3
 8009e9c:	3350      	adds	r3, #80	@ 0x50
 8009e9e:	443b      	add	r3, r7
 8009ea0:	3b3c      	subs	r3, #60	@ 0x3c
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	3b01      	subs	r3, #1
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	440b      	add	r3, r1
 8009eaa:	6859      	ldr	r1, [r3, #4]
 8009eac:	4851      	ldr	r0, [pc, #324]	@ (8009ff4 <HAL_OSPIM_Config+0x29c>)
 8009eae:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8009eb2:	4613      	mov	r3, r2
 8009eb4:	005b      	lsls	r3, r3, #1
 8009eb6:	4413      	add	r3, r2
 8009eb8:	00db      	lsls	r3, r3, #3
 8009eba:	3350      	adds	r3, #80	@ 0x50
 8009ebc:	443b      	add	r3, r7
 8009ebe:	3b3c      	subs	r3, #60	@ 0x3c
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	3b01      	subs	r3, #1
 8009ec4:	f041 0202 	orr.w	r2, r1, #2
 8009ec8:	009b      	lsls	r3, r3, #2
 8009eca:	4403      	add	r3, r0
 8009ecc:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8009ece:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8009ed2:	4613      	mov	r3, r2
 8009ed4:	005b      	lsls	r3, r3, #1
 8009ed6:	4413      	add	r3, r2
 8009ed8:	00db      	lsls	r3, r3, #3
 8009eda:	3350      	adds	r3, #80	@ 0x50
 8009edc:	443b      	add	r3, r7
 8009ede:	3b38      	subs	r3, #56	@ 0x38
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d01f      	beq.n	8009f26 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8009ee6:	4943      	ldr	r1, [pc, #268]	@ (8009ff4 <HAL_OSPIM_Config+0x29c>)
 8009ee8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8009eec:	4613      	mov	r3, r2
 8009eee:	005b      	lsls	r3, r3, #1
 8009ef0:	4413      	add	r3, r2
 8009ef2:	00db      	lsls	r3, r3, #3
 8009ef4:	3350      	adds	r3, #80	@ 0x50
 8009ef6:	443b      	add	r3, r7
 8009ef8:	3b38      	subs	r3, #56	@ 0x38
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	3b01      	subs	r3, #1
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	440b      	add	r3, r1
 8009f02:	6859      	ldr	r1, [r3, #4]
 8009f04:	483b      	ldr	r0, [pc, #236]	@ (8009ff4 <HAL_OSPIM_Config+0x29c>)
 8009f06:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8009f0a:	4613      	mov	r3, r2
 8009f0c:	005b      	lsls	r3, r3, #1
 8009f0e:	4413      	add	r3, r2
 8009f10:	00db      	lsls	r3, r3, #3
 8009f12:	3350      	adds	r3, #80	@ 0x50
 8009f14:	443b      	add	r3, r7
 8009f16:	3b38      	subs	r3, #56	@ 0x38
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	3b01      	subs	r3, #1
 8009f1c:	f041 0220 	orr.w	r2, r1, #32
 8009f20:	009b      	lsls	r3, r3, #2
 8009f22:	4403      	add	r3, r0
 8009f24:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8009f26:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8009f2a:	4613      	mov	r3, r2
 8009f2c:	005b      	lsls	r3, r3, #1
 8009f2e:	4413      	add	r3, r2
 8009f30:	00db      	lsls	r3, r3, #3
 8009f32:	3350      	adds	r3, #80	@ 0x50
 8009f34:	443b      	add	r3, r7
 8009f36:	3b30      	subs	r3, #48	@ 0x30
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d023      	beq.n	8009f86 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8009f3e:	492d      	ldr	r1, [pc, #180]	@ (8009ff4 <HAL_OSPIM_Config+0x29c>)
 8009f40:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8009f44:	4613      	mov	r3, r2
 8009f46:	005b      	lsls	r3, r3, #1
 8009f48:	4413      	add	r3, r2
 8009f4a:	00db      	lsls	r3, r3, #3
 8009f4c:	3350      	adds	r3, #80	@ 0x50
 8009f4e:	443b      	add	r3, r7
 8009f50:	3b30      	subs	r3, #48	@ 0x30
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	3b01      	subs	r3, #1
 8009f56:	f003 0301 	and.w	r3, r3, #1
 8009f5a:	009b      	lsls	r3, r3, #2
 8009f5c:	440b      	add	r3, r1
 8009f5e:	6859      	ldr	r1, [r3, #4]
 8009f60:	4824      	ldr	r0, [pc, #144]	@ (8009ff4 <HAL_OSPIM_Config+0x29c>)
 8009f62:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8009f66:	4613      	mov	r3, r2
 8009f68:	005b      	lsls	r3, r3, #1
 8009f6a:	4413      	add	r3, r2
 8009f6c:	00db      	lsls	r3, r3, #3
 8009f6e:	3350      	adds	r3, #80	@ 0x50
 8009f70:	443b      	add	r3, r7
 8009f72:	3b30      	subs	r3, #48	@ 0x30
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	3b01      	subs	r3, #1
 8009f78:	f003 0301 	and.w	r3, r3, #1
 8009f7c:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	4403      	add	r3, r0
 8009f84:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8009f86:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8009f8a:	4613      	mov	r3, r2
 8009f8c:	005b      	lsls	r3, r3, #1
 8009f8e:	4413      	add	r3, r2
 8009f90:	00db      	lsls	r3, r3, #3
 8009f92:	3350      	adds	r3, #80	@ 0x50
 8009f94:	443b      	add	r3, r7
 8009f96:	3b2c      	subs	r3, #44	@ 0x2c
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	f000 80d9 	beq.w	800a152 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8009fa0:	4914      	ldr	r1, [pc, #80]	@ (8009ff4 <HAL_OSPIM_Config+0x29c>)
 8009fa2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8009fa6:	4613      	mov	r3, r2
 8009fa8:	005b      	lsls	r3, r3, #1
 8009faa:	4413      	add	r3, r2
 8009fac:	00db      	lsls	r3, r3, #3
 8009fae:	3350      	adds	r3, #80	@ 0x50
 8009fb0:	443b      	add	r3, r7
 8009fb2:	3b2c      	subs	r3, #44	@ 0x2c
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	3b01      	subs	r3, #1
 8009fb8:	f003 0301 	and.w	r3, r3, #1
 8009fbc:	009b      	lsls	r3, r3, #2
 8009fbe:	440b      	add	r3, r1
 8009fc0:	6859      	ldr	r1, [r3, #4]
 8009fc2:	480c      	ldr	r0, [pc, #48]	@ (8009ff4 <HAL_OSPIM_Config+0x29c>)
 8009fc4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8009fc8:	4613      	mov	r3, r2
 8009fca:	005b      	lsls	r3, r3, #1
 8009fcc:	4413      	add	r3, r2
 8009fce:	00db      	lsls	r3, r3, #3
 8009fd0:	3350      	adds	r3, #80	@ 0x50
 8009fd2:	443b      	add	r3, r7
 8009fd4:	3b2c      	subs	r3, #44	@ 0x2c
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	3b01      	subs	r3, #1
 8009fda:	f003 0301 	and.w	r3, r3, #1
 8009fde:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 8009fe2:	009b      	lsls	r3, r3, #2
 8009fe4:	4403      	add	r3, r0
 8009fe6:	605a      	str	r2, [r3, #4]
 8009fe8:	e0b3      	b.n	800a152 <HAL_OSPIM_Config+0x3fa>
 8009fea:	bf00      	nop
 8009fec:	52005000 	.word	0x52005000
 8009ff0:	5200a000 	.word	0x5200a000
 8009ff4:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8009ff8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ffa:	4613      	mov	r3, r2
 8009ffc:	005b      	lsls	r3, r3, #1
 8009ffe:	4413      	add	r3, r2
 800a000:	00db      	lsls	r3, r3, #3
 800a002:	3350      	adds	r3, #80	@ 0x50
 800a004:	443b      	add	r3, r7
 800a006:	3b3c      	subs	r3, #60	@ 0x3c
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	f000 80a1 	beq.w	800a152 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800a010:	4993      	ldr	r1, [pc, #588]	@ (800a260 <HAL_OSPIM_Config+0x508>)
 800a012:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a014:	4613      	mov	r3, r2
 800a016:	005b      	lsls	r3, r3, #1
 800a018:	4413      	add	r3, r2
 800a01a:	00db      	lsls	r3, r3, #3
 800a01c:	3350      	adds	r3, #80	@ 0x50
 800a01e:	443b      	add	r3, r7
 800a020:	3b3c      	subs	r3, #60	@ 0x3c
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	3b01      	subs	r3, #1
 800a026:	009b      	lsls	r3, r3, #2
 800a028:	440b      	add	r3, r1
 800a02a:	6859      	ldr	r1, [r3, #4]
 800a02c:	488c      	ldr	r0, [pc, #560]	@ (800a260 <HAL_OSPIM_Config+0x508>)
 800a02e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a030:	4613      	mov	r3, r2
 800a032:	005b      	lsls	r3, r3, #1
 800a034:	4413      	add	r3, r2
 800a036:	00db      	lsls	r3, r3, #3
 800a038:	3350      	adds	r3, #80	@ 0x50
 800a03a:	443b      	add	r3, r7
 800a03c:	3b3c      	subs	r3, #60	@ 0x3c
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	3b01      	subs	r3, #1
 800a042:	f021 0201 	bic.w	r2, r1, #1
 800a046:	009b      	lsls	r3, r3, #2
 800a048:	4403      	add	r3, r0
 800a04a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800a04c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a04e:	4613      	mov	r3, r2
 800a050:	005b      	lsls	r3, r3, #1
 800a052:	4413      	add	r3, r2
 800a054:	00db      	lsls	r3, r3, #3
 800a056:	3350      	adds	r3, #80	@ 0x50
 800a058:	443b      	add	r3, r7
 800a05a:	3b38      	subs	r3, #56	@ 0x38
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d01d      	beq.n	800a09e <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800a062:	497f      	ldr	r1, [pc, #508]	@ (800a260 <HAL_OSPIM_Config+0x508>)
 800a064:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a066:	4613      	mov	r3, r2
 800a068:	005b      	lsls	r3, r3, #1
 800a06a:	4413      	add	r3, r2
 800a06c:	00db      	lsls	r3, r3, #3
 800a06e:	3350      	adds	r3, #80	@ 0x50
 800a070:	443b      	add	r3, r7
 800a072:	3b38      	subs	r3, #56	@ 0x38
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	3b01      	subs	r3, #1
 800a078:	009b      	lsls	r3, r3, #2
 800a07a:	440b      	add	r3, r1
 800a07c:	6859      	ldr	r1, [r3, #4]
 800a07e:	4878      	ldr	r0, [pc, #480]	@ (800a260 <HAL_OSPIM_Config+0x508>)
 800a080:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a082:	4613      	mov	r3, r2
 800a084:	005b      	lsls	r3, r3, #1
 800a086:	4413      	add	r3, r2
 800a088:	00db      	lsls	r3, r3, #3
 800a08a:	3350      	adds	r3, #80	@ 0x50
 800a08c:	443b      	add	r3, r7
 800a08e:	3b38      	subs	r3, #56	@ 0x38
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	3b01      	subs	r3, #1
 800a094:	f021 0210 	bic.w	r2, r1, #16
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	4403      	add	r3, r0
 800a09c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800a09e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a0a0:	4613      	mov	r3, r2
 800a0a2:	005b      	lsls	r3, r3, #1
 800a0a4:	4413      	add	r3, r2
 800a0a6:	00db      	lsls	r3, r3, #3
 800a0a8:	3350      	adds	r3, #80	@ 0x50
 800a0aa:	443b      	add	r3, r7
 800a0ac:	3b30      	subs	r3, #48	@ 0x30
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d021      	beq.n	800a0f8 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800a0b4:	496a      	ldr	r1, [pc, #424]	@ (800a260 <HAL_OSPIM_Config+0x508>)
 800a0b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a0b8:	4613      	mov	r3, r2
 800a0ba:	005b      	lsls	r3, r3, #1
 800a0bc:	4413      	add	r3, r2
 800a0be:	00db      	lsls	r3, r3, #3
 800a0c0:	3350      	adds	r3, #80	@ 0x50
 800a0c2:	443b      	add	r3, r7
 800a0c4:	3b30      	subs	r3, #48	@ 0x30
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	3b01      	subs	r3, #1
 800a0ca:	f003 0301 	and.w	r3, r3, #1
 800a0ce:	009b      	lsls	r3, r3, #2
 800a0d0:	440b      	add	r3, r1
 800a0d2:	6859      	ldr	r1, [r3, #4]
 800a0d4:	4862      	ldr	r0, [pc, #392]	@ (800a260 <HAL_OSPIM_Config+0x508>)
 800a0d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a0d8:	4613      	mov	r3, r2
 800a0da:	005b      	lsls	r3, r3, #1
 800a0dc:	4413      	add	r3, r2
 800a0de:	00db      	lsls	r3, r3, #3
 800a0e0:	3350      	adds	r3, #80	@ 0x50
 800a0e2:	443b      	add	r3, r7
 800a0e4:	3b30      	subs	r3, #48	@ 0x30
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	3b01      	subs	r3, #1
 800a0ea:	f003 0301 	and.w	r3, r3, #1
 800a0ee:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800a0f2:	009b      	lsls	r3, r3, #2
 800a0f4:	4403      	add	r3, r0
 800a0f6:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800a0f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a0fa:	4613      	mov	r3, r2
 800a0fc:	005b      	lsls	r3, r3, #1
 800a0fe:	4413      	add	r3, r2
 800a100:	00db      	lsls	r3, r3, #3
 800a102:	3350      	adds	r3, #80	@ 0x50
 800a104:	443b      	add	r3, r7
 800a106:	3b2c      	subs	r3, #44	@ 0x2c
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d021      	beq.n	800a152 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800a10e:	4954      	ldr	r1, [pc, #336]	@ (800a260 <HAL_OSPIM_Config+0x508>)
 800a110:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a112:	4613      	mov	r3, r2
 800a114:	005b      	lsls	r3, r3, #1
 800a116:	4413      	add	r3, r2
 800a118:	00db      	lsls	r3, r3, #3
 800a11a:	3350      	adds	r3, #80	@ 0x50
 800a11c:	443b      	add	r3, r7
 800a11e:	3b2c      	subs	r3, #44	@ 0x2c
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	3b01      	subs	r3, #1
 800a124:	f003 0301 	and.w	r3, r3, #1
 800a128:	009b      	lsls	r3, r3, #2
 800a12a:	440b      	add	r3, r1
 800a12c:	6859      	ldr	r1, [r3, #4]
 800a12e:	484c      	ldr	r0, [pc, #304]	@ (800a260 <HAL_OSPIM_Config+0x508>)
 800a130:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a132:	4613      	mov	r3, r2
 800a134:	005b      	lsls	r3, r3, #1
 800a136:	4413      	add	r3, r2
 800a138:	00db      	lsls	r3, r3, #3
 800a13a:	3350      	adds	r3, #80	@ 0x50
 800a13c:	443b      	add	r3, r7
 800a13e:	3b2c      	subs	r3, #44	@ 0x2c
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	3b01      	subs	r3, #1
 800a144:	f003 0301 	and.w	r3, r3, #1
 800a148:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 800a14c:	009b      	lsls	r3, r3, #2
 800a14e:	4403      	add	r3, r0
 800a150:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	6819      	ldr	r1, [r3, #0]
 800a156:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a15a:	4613      	mov	r3, r2
 800a15c:	005b      	lsls	r3, r3, #1
 800a15e:	4413      	add	r3, r2
 800a160:	00db      	lsls	r3, r3, #3
 800a162:	3350      	adds	r3, #80	@ 0x50
 800a164:	443b      	add	r3, r7
 800a166:	3b3c      	subs	r3, #60	@ 0x3c
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4299      	cmp	r1, r3
 800a16c:	d038      	beq.n	800a1e0 <HAL_OSPIM_Config+0x488>
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	6859      	ldr	r1, [r3, #4]
 800a172:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a176:	4613      	mov	r3, r2
 800a178:	005b      	lsls	r3, r3, #1
 800a17a:	4413      	add	r3, r2
 800a17c:	00db      	lsls	r3, r3, #3
 800a17e:	3350      	adds	r3, #80	@ 0x50
 800a180:	443b      	add	r3, r7
 800a182:	3b38      	subs	r3, #56	@ 0x38
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4299      	cmp	r1, r3
 800a188:	d02a      	beq.n	800a1e0 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	6899      	ldr	r1, [r3, #8]
 800a18e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a192:	4613      	mov	r3, r2
 800a194:	005b      	lsls	r3, r3, #1
 800a196:	4413      	add	r3, r2
 800a198:	00db      	lsls	r3, r3, #3
 800a19a:	3350      	adds	r3, #80	@ 0x50
 800a19c:	443b      	add	r3, r7
 800a19e:	3b34      	subs	r3, #52	@ 0x34
 800a1a0:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800a1a2:	4299      	cmp	r1, r3
 800a1a4:	d01c      	beq.n	800a1e0 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	68d9      	ldr	r1, [r3, #12]
 800a1aa:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a1ae:	4613      	mov	r3, r2
 800a1b0:	005b      	lsls	r3, r3, #1
 800a1b2:	4413      	add	r3, r2
 800a1b4:	00db      	lsls	r3, r3, #3
 800a1b6:	3350      	adds	r3, #80	@ 0x50
 800a1b8:	443b      	add	r3, r7
 800a1ba:	3b30      	subs	r3, #48	@ 0x30
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	4299      	cmp	r1, r3
 800a1c0:	d00e      	beq.n	800a1e0 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	6919      	ldr	r1, [r3, #16]
 800a1c6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a1ca:	4613      	mov	r3, r2
 800a1cc:	005b      	lsls	r3, r3, #1
 800a1ce:	4413      	add	r3, r2
 800a1d0:	00db      	lsls	r3, r3, #3
 800a1d2:	3350      	adds	r3, #80	@ 0x50
 800a1d4:	443b      	add	r3, r7
 800a1d6:	3b2c      	subs	r3, #44	@ 0x2c
 800a1d8:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800a1da:	4299      	cmp	r1, r3
 800a1dc:	f040 810e 	bne.w	800a3fc <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	6819      	ldr	r1, [r3, #0]
 800a1e4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a1e8:	4613      	mov	r3, r2
 800a1ea:	005b      	lsls	r3, r3, #1
 800a1ec:	4413      	add	r3, r2
 800a1ee:	00db      	lsls	r3, r3, #3
 800a1f0:	3350      	adds	r3, #80	@ 0x50
 800a1f2:	443b      	add	r3, r7
 800a1f4:	3b3c      	subs	r3, #60	@ 0x3c
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4299      	cmp	r1, r3
 800a1fa:	d133      	bne.n	800a264 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	6859      	ldr	r1, [r3, #4]
 800a200:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a204:	4613      	mov	r3, r2
 800a206:	005b      	lsls	r3, r3, #1
 800a208:	4413      	add	r3, r2
 800a20a:	00db      	lsls	r3, r3, #3
 800a20c:	3350      	adds	r3, #80	@ 0x50
 800a20e:	443b      	add	r3, r7
 800a210:	3b38      	subs	r3, #56	@ 0x38
 800a212:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800a214:	4299      	cmp	r1, r3
 800a216:	d125      	bne.n	800a264 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	68d9      	ldr	r1, [r3, #12]
 800a21c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a220:	4613      	mov	r3, r2
 800a222:	005b      	lsls	r3, r3, #1
 800a224:	4413      	add	r3, r2
 800a226:	00db      	lsls	r3, r3, #3
 800a228:	3350      	adds	r3, #80	@ 0x50
 800a22a:	443b      	add	r3, r7
 800a22c:	3b30      	subs	r3, #48	@ 0x30
 800a22e:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 800a230:	4299      	cmp	r1, r3
 800a232:	d117      	bne.n	800a264 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	6919      	ldr	r1, [r3, #16]
 800a238:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a23c:	4613      	mov	r3, r2
 800a23e:	005b      	lsls	r3, r3, #1
 800a240:	4413      	add	r3, r2
 800a242:	00db      	lsls	r3, r3, #3
 800a244:	3350      	adds	r3, #80	@ 0x50
 800a246:	443b      	add	r3, r7
 800a248:	3b2c      	subs	r3, #44	@ 0x2c
 800a24a:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800a24c:	4299      	cmp	r1, r3
 800a24e:	d109      	bne.n	800a264 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800a250:	4b03      	ldr	r3, [pc, #12]	@ (800a260 <HAL_OSPIM_Config+0x508>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a02      	ldr	r2, [pc, #8]	@ (800a260 <HAL_OSPIM_Config+0x508>)
 800a256:	f043 0301 	orr.w	r3, r3, #1
 800a25a:	6013      	str	r3, [r2, #0]
 800a25c:	e0ce      	b.n	800a3fc <HAL_OSPIM_Config+0x6a4>
 800a25e:	bf00      	nop
 800a260:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800a264:	49bb      	ldr	r1, [pc, #748]	@ (800a554 <HAL_OSPIM_Config+0x7fc>)
 800a266:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a26a:	4613      	mov	r3, r2
 800a26c:	005b      	lsls	r3, r3, #1
 800a26e:	4413      	add	r3, r2
 800a270:	00db      	lsls	r3, r3, #3
 800a272:	3350      	adds	r3, #80	@ 0x50
 800a274:	443b      	add	r3, r7
 800a276:	3b3c      	subs	r3, #60	@ 0x3c
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	3b01      	subs	r3, #1
 800a27c:	009b      	lsls	r3, r3, #2
 800a27e:	440b      	add	r3, r1
 800a280:	6859      	ldr	r1, [r3, #4]
 800a282:	48b4      	ldr	r0, [pc, #720]	@ (800a554 <HAL_OSPIM_Config+0x7fc>)
 800a284:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a288:	4613      	mov	r3, r2
 800a28a:	005b      	lsls	r3, r3, #1
 800a28c:	4413      	add	r3, r2
 800a28e:	00db      	lsls	r3, r3, #3
 800a290:	3350      	adds	r3, #80	@ 0x50
 800a292:	443b      	add	r3, r7
 800a294:	3b3c      	subs	r3, #60	@ 0x3c
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	3b01      	subs	r3, #1
 800a29a:	f021 0201 	bic.w	r2, r1, #1
 800a29e:	009b      	lsls	r3, r3, #2
 800a2a0:	4403      	add	r3, r0
 800a2a2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800a2a4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a2a8:	4613      	mov	r3, r2
 800a2aa:	005b      	lsls	r3, r3, #1
 800a2ac:	4413      	add	r3, r2
 800a2ae:	00db      	lsls	r3, r3, #3
 800a2b0:	3350      	adds	r3, #80	@ 0x50
 800a2b2:	443b      	add	r3, r7
 800a2b4:	3b38      	subs	r3, #56	@ 0x38
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d01f      	beq.n	800a2fc <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800a2bc:	49a5      	ldr	r1, [pc, #660]	@ (800a554 <HAL_OSPIM_Config+0x7fc>)
 800a2be:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a2c2:	4613      	mov	r3, r2
 800a2c4:	005b      	lsls	r3, r3, #1
 800a2c6:	4413      	add	r3, r2
 800a2c8:	00db      	lsls	r3, r3, #3
 800a2ca:	3350      	adds	r3, #80	@ 0x50
 800a2cc:	443b      	add	r3, r7
 800a2ce:	3b38      	subs	r3, #56	@ 0x38
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	3b01      	subs	r3, #1
 800a2d4:	009b      	lsls	r3, r3, #2
 800a2d6:	440b      	add	r3, r1
 800a2d8:	6859      	ldr	r1, [r3, #4]
 800a2da:	489e      	ldr	r0, [pc, #632]	@ (800a554 <HAL_OSPIM_Config+0x7fc>)
 800a2dc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a2e0:	4613      	mov	r3, r2
 800a2e2:	005b      	lsls	r3, r3, #1
 800a2e4:	4413      	add	r3, r2
 800a2e6:	00db      	lsls	r3, r3, #3
 800a2e8:	3350      	adds	r3, #80	@ 0x50
 800a2ea:	443b      	add	r3, r7
 800a2ec:	3b38      	subs	r3, #56	@ 0x38
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	3b01      	subs	r3, #1
 800a2f2:	f021 0210 	bic.w	r2, r1, #16
 800a2f6:	009b      	lsls	r3, r3, #2
 800a2f8:	4403      	add	r3, r0
 800a2fa:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800a2fc:	4995      	ldr	r1, [pc, #596]	@ (800a554 <HAL_OSPIM_Config+0x7fc>)
 800a2fe:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a302:	4613      	mov	r3, r2
 800a304:	005b      	lsls	r3, r3, #1
 800a306:	4413      	add	r3, r2
 800a308:	00db      	lsls	r3, r3, #3
 800a30a:	3350      	adds	r3, #80	@ 0x50
 800a30c:	443b      	add	r3, r7
 800a30e:	3b34      	subs	r3, #52	@ 0x34
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	3b01      	subs	r3, #1
 800a314:	009b      	lsls	r3, r3, #2
 800a316:	440b      	add	r3, r1
 800a318:	6859      	ldr	r1, [r3, #4]
 800a31a:	488e      	ldr	r0, [pc, #568]	@ (800a554 <HAL_OSPIM_Config+0x7fc>)
 800a31c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a320:	4613      	mov	r3, r2
 800a322:	005b      	lsls	r3, r3, #1
 800a324:	4413      	add	r3, r2
 800a326:	00db      	lsls	r3, r3, #3
 800a328:	3350      	adds	r3, #80	@ 0x50
 800a32a:	443b      	add	r3, r7
 800a32c:	3b34      	subs	r3, #52	@ 0x34
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	3b01      	subs	r3, #1
 800a332:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 800a336:	009b      	lsls	r3, r3, #2
 800a338:	4403      	add	r3, r0
 800a33a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800a33c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a340:	4613      	mov	r3, r2
 800a342:	005b      	lsls	r3, r3, #1
 800a344:	4413      	add	r3, r2
 800a346:	00db      	lsls	r3, r3, #3
 800a348:	3350      	adds	r3, #80	@ 0x50
 800a34a:	443b      	add	r3, r7
 800a34c:	3b30      	subs	r3, #48	@ 0x30
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d023      	beq.n	800a39c <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a354:	497f      	ldr	r1, [pc, #508]	@ (800a554 <HAL_OSPIM_Config+0x7fc>)
 800a356:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a35a:	4613      	mov	r3, r2
 800a35c:	005b      	lsls	r3, r3, #1
 800a35e:	4413      	add	r3, r2
 800a360:	00db      	lsls	r3, r3, #3
 800a362:	3350      	adds	r3, #80	@ 0x50
 800a364:	443b      	add	r3, r7
 800a366:	3b30      	subs	r3, #48	@ 0x30
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	3b01      	subs	r3, #1
 800a36c:	f003 0301 	and.w	r3, r3, #1
 800a370:	009b      	lsls	r3, r3, #2
 800a372:	440b      	add	r3, r1
 800a374:	6859      	ldr	r1, [r3, #4]
 800a376:	4877      	ldr	r0, [pc, #476]	@ (800a554 <HAL_OSPIM_Config+0x7fc>)
 800a378:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a37c:	4613      	mov	r3, r2
 800a37e:	005b      	lsls	r3, r3, #1
 800a380:	4413      	add	r3, r2
 800a382:	00db      	lsls	r3, r3, #3
 800a384:	3350      	adds	r3, #80	@ 0x50
 800a386:	443b      	add	r3, r7
 800a388:	3b30      	subs	r3, #48	@ 0x30
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	3b01      	subs	r3, #1
 800a38e:	f003 0301 	and.w	r3, r3, #1
 800a392:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800a396:	009b      	lsls	r3, r3, #2
 800a398:	4403      	add	r3, r0
 800a39a:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800a39c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a3a0:	4613      	mov	r3, r2
 800a3a2:	005b      	lsls	r3, r3, #1
 800a3a4:	4413      	add	r3, r2
 800a3a6:	00db      	lsls	r3, r3, #3
 800a3a8:	3350      	adds	r3, #80	@ 0x50
 800a3aa:	443b      	add	r3, r7
 800a3ac:	3b2c      	subs	r3, #44	@ 0x2c
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d023      	beq.n	800a3fc <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a3b4:	4967      	ldr	r1, [pc, #412]	@ (800a554 <HAL_OSPIM_Config+0x7fc>)
 800a3b6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a3ba:	4613      	mov	r3, r2
 800a3bc:	005b      	lsls	r3, r3, #1
 800a3be:	4413      	add	r3, r2
 800a3c0:	00db      	lsls	r3, r3, #3
 800a3c2:	3350      	adds	r3, #80	@ 0x50
 800a3c4:	443b      	add	r3, r7
 800a3c6:	3b2c      	subs	r3, #44	@ 0x2c
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	3b01      	subs	r3, #1
 800a3cc:	f003 0301 	and.w	r3, r3, #1
 800a3d0:	009b      	lsls	r3, r3, #2
 800a3d2:	440b      	add	r3, r1
 800a3d4:	6859      	ldr	r1, [r3, #4]
 800a3d6:	485f      	ldr	r0, [pc, #380]	@ (800a554 <HAL_OSPIM_Config+0x7fc>)
 800a3d8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a3dc:	4613      	mov	r3, r2
 800a3de:	005b      	lsls	r3, r3, #1
 800a3e0:	4413      	add	r3, r2
 800a3e2:	00db      	lsls	r3, r3, #3
 800a3e4:	3350      	adds	r3, #80	@ 0x50
 800a3e6:	443b      	add	r3, r7
 800a3e8:	3b2c      	subs	r3, #44	@ 0x2c
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	3b01      	subs	r3, #1
 800a3ee:	f003 0301 	and.w	r3, r3, #1
 800a3f2:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 800a3f6:	009b      	lsls	r3, r3, #2
 800a3f8:	4403      	add	r3, r0
 800a3fa:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 800a3fc:	4a55      	ldr	r2, [pc, #340]	@ (800a554 <HAL_OSPIM_Config+0x7fc>)
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	689b      	ldr	r3, [r3, #8]
 800a402:	3b01      	subs	r3, #1
 800a404:	009b      	lsls	r3, r3, #2
 800a406:	4413      	add	r3, r2
 800a408:	685b      	ldr	r3, [r3, #4]
 800a40a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a40e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a410:	025b      	lsls	r3, r3, #9
 800a412:	431a      	orrs	r2, r3
 800a414:	494f      	ldr	r1, [pc, #316]	@ (800a554 <HAL_OSPIM_Config+0x7fc>)
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	689b      	ldr	r3, [r3, #8]
 800a41a:	3b01      	subs	r3, #1
 800a41c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a420:	009b      	lsls	r3, r3, #2
 800a422:	440b      	add	r3, r1
 800a424:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	695b      	ldr	r3, [r3, #20]
 800a42a:	1e5a      	subs	r2, r3, #1
 800a42c:	4b49      	ldr	r3, [pc, #292]	@ (800a554 <HAL_OSPIM_Config+0x7fc>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	0c1b      	lsrs	r3, r3, #16
 800a432:	b2db      	uxtb	r3, r3
 800a434:	429a      	cmp	r2, r3
 800a436:	d90a      	bls.n	800a44e <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 800a438:	4b46      	ldr	r3, [pc, #280]	@ (800a554 <HAL_OSPIM_Config+0x7fc>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	695b      	ldr	r3, [r3, #20]
 800a444:	3b01      	subs	r3, #1
 800a446:	041b      	lsls	r3, r3, #16
 800a448:	4942      	ldr	r1, [pc, #264]	@ (800a554 <HAL_OSPIM_Config+0x7fc>)
 800a44a:	4313      	orrs	r3, r2
 800a44c:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800a44e:	4b41      	ldr	r3, [pc, #260]	@ (800a554 <HAL_OSPIM_Config+0x7fc>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f003 0301 	and.w	r3, r3, #1
 800a456:	2b00      	cmp	r3, #0
 800a458:	f000 809a 	beq.w	800a590 <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 800a45c:	4a3d      	ldr	r2, [pc, #244]	@ (800a554 <HAL_OSPIM_Config+0x7fc>)
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	3b01      	subs	r3, #1
 800a464:	009b      	lsls	r3, r3, #2
 800a466:	4413      	add	r3, r2
 800a468:	685b      	ldr	r3, [r3, #4]
 800a46a:	f023 0203 	bic.w	r2, r3, #3
 800a46e:	4939      	ldr	r1, [pc, #228]	@ (800a554 <HAL_OSPIM_Config+0x7fc>)
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	3b01      	subs	r3, #1
 800a476:	f042 0201 	orr.w	r2, r2, #1
 800a47a:	009b      	lsls	r3, r3, #2
 800a47c:	440b      	add	r3, r1
 800a47e:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	685b      	ldr	r3, [r3, #4]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d011      	beq.n	800a4ac <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 800a488:	4a32      	ldr	r2, [pc, #200]	@ (800a554 <HAL_OSPIM_Config+0x7fc>)
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	3b01      	subs	r3, #1
 800a490:	009b      	lsls	r3, r3, #2
 800a492:	4413      	add	r3, r2
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800a49a:	492e      	ldr	r1, [pc, #184]	@ (800a554 <HAL_OSPIM_Config+0x7fc>)
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	3b01      	subs	r3, #1
 800a4a2:	f042 0210 	orr.w	r2, r2, #16
 800a4a6:	009b      	lsls	r3, r3, #2
 800a4a8:	440b      	add	r3, r1
 800a4aa:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	68db      	ldr	r3, [r3, #12]
 800a4b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d016      	beq.n	800a4e6 <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a4b8:	4a26      	ldr	r2, [pc, #152]	@ (800a554 <HAL_OSPIM_Config+0x7fc>)
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	68db      	ldr	r3, [r3, #12]
 800a4be:	3b01      	subs	r3, #1
 800a4c0:	f003 0301 	and.w	r3, r3, #1
 800a4c4:	009b      	lsls	r3, r3, #2
 800a4c6:	4413      	add	r3, r2
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800a4ce:	4921      	ldr	r1, [pc, #132]	@ (800a554 <HAL_OSPIM_Config+0x7fc>)
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	68db      	ldr	r3, [r3, #12]
 800a4d4:	3b01      	subs	r3, #1
 800a4d6:	f003 0301 	and.w	r3, r3, #1
 800a4da:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800a4de:	009b      	lsls	r3, r3, #2
 800a4e0:	440b      	add	r3, r1
 800a4e2:	605a      	str	r2, [r3, #4]
 800a4e4:	e019      	b.n	800a51a <HAL_OSPIM_Config+0x7c2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	68db      	ldr	r3, [r3, #12]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d015      	beq.n	800a51a <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a4ee:	4a19      	ldr	r2, [pc, #100]	@ (800a554 <HAL_OSPIM_Config+0x7fc>)
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	68db      	ldr	r3, [r3, #12]
 800a4f4:	3b01      	subs	r3, #1
 800a4f6:	f003 0301 	and.w	r3, r3, #1
 800a4fa:	009b      	lsls	r3, r3, #2
 800a4fc:	4413      	add	r3, r2
 800a4fe:	685b      	ldr	r3, [r3, #4]
 800a500:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800a504:	4913      	ldr	r1, [pc, #76]	@ (800a554 <HAL_OSPIM_Config+0x7fc>)
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	68db      	ldr	r3, [r3, #12]
 800a50a:	3b01      	subs	r3, #1
 800a50c:	f003 0301 	and.w	r3, r3, #1
 800a510:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800a514:	009b      	lsls	r3, r3, #2
 800a516:	440b      	add	r3, r1
 800a518:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	691b      	ldr	r3, [r3, #16]
 800a51e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a522:	2b00      	cmp	r3, #0
 800a524:	d018      	beq.n	800a558 <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a526:	4a0b      	ldr	r2, [pc, #44]	@ (800a554 <HAL_OSPIM_Config+0x7fc>)
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	691b      	ldr	r3, [r3, #16]
 800a52c:	3b01      	subs	r3, #1
 800a52e:	f003 0301 	and.w	r3, r3, #1
 800a532:	009b      	lsls	r3, r3, #2
 800a534:	4413      	add	r3, r2
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800a53c:	4905      	ldr	r1, [pc, #20]	@ (800a554 <HAL_OSPIM_Config+0x7fc>)
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	691b      	ldr	r3, [r3, #16]
 800a542:	3b01      	subs	r3, #1
 800a544:	f003 0301 	and.w	r3, r3, #1
 800a548:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 800a54c:	009b      	lsls	r3, r3, #2
 800a54e:	440b      	add	r3, r1
 800a550:	605a      	str	r2, [r3, #4]
 800a552:	e0c5      	b.n	800a6e0 <HAL_OSPIM_Config+0x988>
 800a554:	5200b400 	.word	0x5200b400
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	691b      	ldr	r3, [r3, #16]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	f000 80bf 	beq.w	800a6e0 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a562:	4a6e      	ldr	r2, [pc, #440]	@ (800a71c <HAL_OSPIM_Config+0x9c4>)
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	691b      	ldr	r3, [r3, #16]
 800a568:	3b01      	subs	r3, #1
 800a56a:	f003 0301 	and.w	r3, r3, #1
 800a56e:	009b      	lsls	r3, r3, #2
 800a570:	4413      	add	r3, r2
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800a578:	4968      	ldr	r1, [pc, #416]	@ (800a71c <HAL_OSPIM_Config+0x9c4>)
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	691b      	ldr	r3, [r3, #16]
 800a57e:	3b01      	subs	r3, #1
 800a580:	f003 0301 	and.w	r3, r3, #1
 800a584:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 800a588:	009b      	lsls	r3, r3, #2
 800a58a:	440b      	add	r3, r1
 800a58c:	605a      	str	r2, [r3, #4]
 800a58e:	e0a7      	b.n	800a6e0 <HAL_OSPIM_Config+0x988>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800a590:	4a62      	ldr	r2, [pc, #392]	@ (800a71c <HAL_OSPIM_Config+0x9c4>)
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	3b01      	subs	r3, #1
 800a598:	009b      	lsls	r3, r3, #2
 800a59a:	4413      	add	r3, r2
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	f023 0203 	bic.w	r2, r3, #3
 800a5a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5a4:	005b      	lsls	r3, r3, #1
 800a5a6:	431a      	orrs	r2, r3
 800a5a8:	495c      	ldr	r1, [pc, #368]	@ (800a71c <HAL_OSPIM_Config+0x9c4>)
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	3b01      	subs	r3, #1
 800a5b0:	f042 0201 	orr.w	r2, r2, #1
 800a5b4:	009b      	lsls	r3, r3, #2
 800a5b6:	440b      	add	r3, r1
 800a5b8:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	685b      	ldr	r3, [r3, #4]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d014      	beq.n	800a5ec <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 800a5c2:	4a56      	ldr	r2, [pc, #344]	@ (800a71c <HAL_OSPIM_Config+0x9c4>)
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	685b      	ldr	r3, [r3, #4]
 800a5c8:	3b01      	subs	r3, #1
 800a5ca:	009b      	lsls	r3, r3, #2
 800a5cc:	4413      	add	r3, r2
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800a5d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5d6:	015b      	lsls	r3, r3, #5
 800a5d8:	431a      	orrs	r2, r3
 800a5da:	4950      	ldr	r1, [pc, #320]	@ (800a71c <HAL_OSPIM_Config+0x9c4>)
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	3b01      	subs	r3, #1
 800a5e2:	f042 0210 	orr.w	r2, r2, #16
 800a5e6:	009b      	lsls	r3, r3, #2
 800a5e8:	440b      	add	r3, r1
 800a5ea:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	68db      	ldr	r3, [r3, #12]
 800a5f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d019      	beq.n	800a62c <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a5f8:	4a48      	ldr	r2, [pc, #288]	@ (800a71c <HAL_OSPIM_Config+0x9c4>)
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	68db      	ldr	r3, [r3, #12]
 800a5fe:	3b01      	subs	r3, #1
 800a600:	f003 0301 	and.w	r3, r3, #1
 800a604:	009b      	lsls	r3, r3, #2
 800a606:	4413      	add	r3, r2
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800a60e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a610:	049b      	lsls	r3, r3, #18
 800a612:	431a      	orrs	r2, r3
 800a614:	4941      	ldr	r1, [pc, #260]	@ (800a71c <HAL_OSPIM_Config+0x9c4>)
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	68db      	ldr	r3, [r3, #12]
 800a61a:	3b01      	subs	r3, #1
 800a61c:	f003 0301 	and.w	r3, r3, #1
 800a620:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800a624:	009b      	lsls	r3, r3, #2
 800a626:	440b      	add	r3, r1
 800a628:	605a      	str	r2, [r3, #4]
 800a62a:	e01c      	b.n	800a666 <HAL_OSPIM_Config+0x90e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d018      	beq.n	800a666 <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a634:	4a39      	ldr	r2, [pc, #228]	@ (800a71c <HAL_OSPIM_Config+0x9c4>)
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	68db      	ldr	r3, [r3, #12]
 800a63a:	3b01      	subs	r3, #1
 800a63c:	f003 0301 	and.w	r3, r3, #1
 800a640:	009b      	lsls	r3, r3, #2
 800a642:	4413      	add	r3, r2
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800a64a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a64c:	069b      	lsls	r3, r3, #26
 800a64e:	431a      	orrs	r2, r3
 800a650:	4932      	ldr	r1, [pc, #200]	@ (800a71c <HAL_OSPIM_Config+0x9c4>)
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	68db      	ldr	r3, [r3, #12]
 800a656:	3b01      	subs	r3, #1
 800a658:	f003 0301 	and.w	r3, r3, #1
 800a65c:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800a660:	009b      	lsls	r3, r3, #2
 800a662:	440b      	add	r3, r1
 800a664:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	691b      	ldr	r3, [r3, #16]
 800a66a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d019      	beq.n	800a6a6 <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a672:	4a2a      	ldr	r2, [pc, #168]	@ (800a71c <HAL_OSPIM_Config+0x9c4>)
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	691b      	ldr	r3, [r3, #16]
 800a678:	3b01      	subs	r3, #1
 800a67a:	f003 0301 	and.w	r3, r3, #1
 800a67e:	009b      	lsls	r3, r3, #2
 800a680:	4413      	add	r3, r2
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800a688:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a68a:	049b      	lsls	r3, r3, #18
 800a68c:	431a      	orrs	r2, r3
 800a68e:	4923      	ldr	r1, [pc, #140]	@ (800a71c <HAL_OSPIM_Config+0x9c4>)
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	691b      	ldr	r3, [r3, #16]
 800a694:	3b01      	subs	r3, #1
 800a696:	f003 0301 	and.w	r3, r3, #1
 800a69a:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 800a69e:	009b      	lsls	r3, r3, #2
 800a6a0:	440b      	add	r3, r1
 800a6a2:	605a      	str	r2, [r3, #4]
 800a6a4:	e01c      	b.n	800a6e0 <HAL_OSPIM_Config+0x988>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	691b      	ldr	r3, [r3, #16]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d018      	beq.n	800a6e0 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a6ae:	4a1b      	ldr	r2, [pc, #108]	@ (800a71c <HAL_OSPIM_Config+0x9c4>)
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	691b      	ldr	r3, [r3, #16]
 800a6b4:	3b01      	subs	r3, #1
 800a6b6:	f003 0301 	and.w	r3, r3, #1
 800a6ba:	009b      	lsls	r3, r3, #2
 800a6bc:	4413      	add	r3, r2
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800a6c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6c6:	069b      	lsls	r3, r3, #26
 800a6c8:	431a      	orrs	r2, r3
 800a6ca:	4914      	ldr	r1, [pc, #80]	@ (800a71c <HAL_OSPIM_Config+0x9c4>)
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	691b      	ldr	r3, [r3, #16]
 800a6d0:	3b01      	subs	r3, #1
 800a6d2:	f003 0301 	and.w	r3, r3, #1
 800a6d6:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 800a6da:	009b      	lsls	r3, r3, #2
 800a6dc:	440b      	add	r3, r1
 800a6de:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800a6e0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a6e4:	f003 0301 	and.w	r3, r3, #1
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d005      	beq.n	800a6f8 <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800a6ec:	4b0c      	ldr	r3, [pc, #48]	@ (800a720 <HAL_OSPIM_Config+0x9c8>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a0b      	ldr	r2, [pc, #44]	@ (800a720 <HAL_OSPIM_Config+0x9c8>)
 800a6f2:	f043 0301 	orr.w	r3, r3, #1
 800a6f6:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 800a6f8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a6fc:	f003 0302 	and.w	r3, r3, #2
 800a700:	2b00      	cmp	r3, #0
 800a702:	d005      	beq.n	800a710 <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800a704:	4b07      	ldr	r3, [pc, #28]	@ (800a724 <HAL_OSPIM_Config+0x9cc>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	4a06      	ldr	r2, [pc, #24]	@ (800a724 <HAL_OSPIM_Config+0x9cc>)
 800a70a:	f043 0301 	orr.w	r3, r3, #1
 800a70e:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800a710:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800a714:	4618      	mov	r0, r3
 800a716:	3750      	adds	r7, #80	@ 0x50
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}
 800a71c:	5200b400 	.word	0x5200b400
 800a720:	52005000 	.word	0x52005000
 800a724:	5200a000 	.word	0x5200a000

0800a728 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b084      	sub	sp, #16
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	60f8      	str	r0, [r7, #12]
 800a730:	60b9      	str	r1, [r7, #8]
 800a732:	603b      	str	r3, [r7, #0]
 800a734:	4613      	mov	r3, r2
 800a736:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800a738:	e01a      	b.n	800a770 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a73a:	69bb      	ldr	r3, [r7, #24]
 800a73c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a740:	d016      	beq.n	800a770 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a742:	f7fb f92d 	bl	80059a0 <HAL_GetTick>
 800a746:	4602      	mov	r2, r0
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	1ad3      	subs	r3, r2, r3
 800a74c:	69ba      	ldr	r2, [r7, #24]
 800a74e:	429a      	cmp	r2, r3
 800a750:	d302      	bcc.n	800a758 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800a752:	69bb      	ldr	r3, [r7, #24]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d10b      	bne.n	800a770 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a75e:	651a      	str	r2, [r3, #80]	@ 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a764:	f043 0201 	orr.w	r2, r3, #1
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 800a76c:	2301      	movs	r3, #1
 800a76e:	e00e      	b.n	800a78e <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	6a1a      	ldr	r2, [r3, #32]
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	4013      	ands	r3, r2
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	bf14      	ite	ne
 800a77e:	2301      	movne	r3, #1
 800a780:	2300      	moveq	r3, #0
 800a782:	b2db      	uxtb	r3, r3
 800a784:	461a      	mov	r2, r3
 800a786:	79fb      	ldrb	r3, [r7, #7]
 800a788:	429a      	cmp	r2, r3
 800a78a:	d1d6      	bne.n	800a73a <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a78c:	2300      	movs	r3, #0
}
 800a78e:	4618      	mov	r0, r3
 800a790:	3710      	adds	r7, #16
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
	...

0800a798 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 800a798:	b480      	push	{r7}
 800a79a:	b089      	sub	sp, #36	@ 0x24
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800a7b4:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	689b      	ldr	r3, [r3, #8]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d10a      	bne.n	800a7d4 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	685a      	ldr	r2, [r3, #4]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	430a      	orrs	r2, r1
 800a7d2:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	2b02      	cmp	r3, #2
 800a7da:	d114      	bne.n	800a806 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800a7e4:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800a7ee:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800a7f8:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800a802:	60fb      	str	r3, [r7, #12]
 800a804:	e02c      	b.n	800a860 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	2b03      	cmp	r3, #3
 800a80c:	d114      	bne.n	800a838 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800a816:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800a820:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a82a:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800a834:	60fb      	str	r3, [r7, #12]
 800a836:	e013      	b.n	800a860 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800a840:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800a84a:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800a854:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800a85e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a868:	431a      	orrs	r2, r3
 800a86a:	69bb      	ldr	r3, [r7, #24]
 800a86c:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a872:	2b00      	cmp	r3, #0
 800a874:	d012      	beq.n	800a89c <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800a87e:	69bb      	ldr	r3, [r7, #24]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a88e:	4319      	orrs	r1, r3
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a894:	430b      	orrs	r3, r1
 800a896:	431a      	orrs	r2, r3
 800a898:	69bb      	ldr	r3, [r7, #24]
 800a89a:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f023 021f 	bic.w	r2, r3, #31
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8a8:	431a      	orrs	r2, r3
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d009      	beq.n	800a8ca <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d105      	bne.n	800a8ca <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	3a01      	subs	r2, #1
 800a8c8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	68db      	ldr	r3, [r3, #12]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	f000 8095 	beq.w	800a9fe <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	69db      	ldr	r3, [r3, #28]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d053      	beq.n	800a984 <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d01e      	beq.n	800a922 <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800a8e4:	69bb      	ldr	r3, [r7, #24]
 800a8e6:	681a      	ldr	r2, [r3, #0]
 800a8e8:	4b64      	ldr	r3, [pc, #400]	@ (800aa7c <OSPI_ConfigCmd+0x2e4>)
 800a8ea:	4013      	ands	r3, r2
 800a8ec:	683a      	ldr	r2, [r7, #0]
 800a8ee:	68d1      	ldr	r1, [r2, #12]
 800a8f0:	683a      	ldr	r2, [r7, #0]
 800a8f2:	6952      	ldr	r2, [r2, #20]
 800a8f4:	4311      	orrs	r1, r2
 800a8f6:	683a      	ldr	r2, [r7, #0]
 800a8f8:	6912      	ldr	r2, [r2, #16]
 800a8fa:	4311      	orrs	r1, r2
 800a8fc:	683a      	ldr	r2, [r7, #0]
 800a8fe:	69d2      	ldr	r2, [r2, #28]
 800a900:	4311      	orrs	r1, r2
 800a902:	683a      	ldr	r2, [r7, #0]
 800a904:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a906:	4311      	orrs	r1, r2
 800a908:	683a      	ldr	r2, [r7, #0]
 800a90a:	6a12      	ldr	r2, [r2, #32]
 800a90c:	4311      	orrs	r1, r2
 800a90e:	683a      	ldr	r2, [r7, #0]
 800a910:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800a912:	4311      	orrs	r1, r2
 800a914:	683a      	ldr	r2, [r7, #0]
 800a916:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800a918:	430a      	orrs	r2, r1
 800a91a:	431a      	orrs	r2, r3
 800a91c:	69bb      	ldr	r3, [r7, #24]
 800a91e:	601a      	str	r2, [r3, #0]
 800a920:	e026      	b.n	800a970 <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800a922:	69bb      	ldr	r3, [r7, #24]
 800a924:	681a      	ldr	r2, [r3, #0]
 800a926:	4b56      	ldr	r3, [pc, #344]	@ (800aa80 <OSPI_ConfigCmd+0x2e8>)
 800a928:	4013      	ands	r3, r2
 800a92a:	683a      	ldr	r2, [r7, #0]
 800a92c:	68d1      	ldr	r1, [r2, #12]
 800a92e:	683a      	ldr	r2, [r7, #0]
 800a930:	6952      	ldr	r2, [r2, #20]
 800a932:	4311      	orrs	r1, r2
 800a934:	683a      	ldr	r2, [r7, #0]
 800a936:	6912      	ldr	r2, [r2, #16]
 800a938:	4311      	orrs	r1, r2
 800a93a:	683a      	ldr	r2, [r7, #0]
 800a93c:	69d2      	ldr	r2, [r2, #28]
 800a93e:	4311      	orrs	r1, r2
 800a940:	683a      	ldr	r2, [r7, #0]
 800a942:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a944:	4311      	orrs	r1, r2
 800a946:	683a      	ldr	r2, [r7, #0]
 800a948:	6a12      	ldr	r2, [r2, #32]
 800a94a:	430a      	orrs	r2, r1
 800a94c:	431a      	orrs	r2, r3
 800a94e:	69bb      	ldr	r3, [r7, #24]
 800a950:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a956:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a95a:	d109      	bne.n	800a970 <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800a960:	2b08      	cmp	r3, #8
 800a962:	d105      	bne.n	800a970 <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800a964:	69bb      	ldr	r3, [r7, #24]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a96c:	69bb      	ldr	r3, [r7, #24]
 800a96e:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	689a      	ldr	r2, [r3, #8]
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	683a      	ldr	r2, [r7, #0]
 800a97e:	6992      	ldr	r2, [r2, #24]
 800a980:	649a      	str	r2, [r3, #72]	@ 0x48
 800a982:	e074      	b.n	800aa6e <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d015      	beq.n	800a9b8 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 800a98c:	69bb      	ldr	r3, [r7, #24]
 800a98e:	681a      	ldr	r2, [r3, #0]
 800a990:	4b3c      	ldr	r3, [pc, #240]	@ (800aa84 <OSPI_ConfigCmd+0x2ec>)
 800a992:	4013      	ands	r3, r2
 800a994:	683a      	ldr	r2, [r7, #0]
 800a996:	68d1      	ldr	r1, [r2, #12]
 800a998:	683a      	ldr	r2, [r7, #0]
 800a99a:	6952      	ldr	r2, [r2, #20]
 800a99c:	4311      	orrs	r1, r2
 800a99e:	683a      	ldr	r2, [r7, #0]
 800a9a0:	6912      	ldr	r2, [r2, #16]
 800a9a2:	4311      	orrs	r1, r2
 800a9a4:	683a      	ldr	r2, [r7, #0]
 800a9a6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800a9a8:	4311      	orrs	r1, r2
 800a9aa:	683a      	ldr	r2, [r7, #0]
 800a9ac:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800a9ae:	430a      	orrs	r2, r1
 800a9b0:	431a      	orrs	r2, r3
 800a9b2:	69bb      	ldr	r3, [r7, #24]
 800a9b4:	601a      	str	r2, [r3, #0]
 800a9b6:	e01d      	b.n	800a9f4 <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 800a9b8:	69bb      	ldr	r3, [r7, #24]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	68d9      	ldr	r1, [r3, #12]
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	695b      	ldr	r3, [r3, #20]
 800a9c8:	4319      	orrs	r1, r3
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	691b      	ldr	r3, [r3, #16]
 800a9ce:	430b      	orrs	r3, r1
 800a9d0:	431a      	orrs	r2, r3
 800a9d2:	69bb      	ldr	r3, [r7, #24]
 800a9d4:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a9de:	d109      	bne.n	800a9f4 <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800a9e4:	2b08      	cmp	r3, #8
 800a9e6:	d105      	bne.n	800a9f4 <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800a9e8:	69bb      	ldr	r3, [r7, #24]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a9f0:	69bb      	ldr	r3, [r7, #24]
 800a9f2:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	689a      	ldr	r2, [r3, #8]
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	601a      	str	r2, [r3, #0]
 800a9fc:	e037      	b.n	800aa6e <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	69db      	ldr	r3, [r3, #28]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d02e      	beq.n	800aa64 <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d015      	beq.n	800aa3a <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 800aa0e:	69bb      	ldr	r3, [r7, #24]
 800aa10:	681a      	ldr	r2, [r3, #0]
 800aa12:	4b1d      	ldr	r3, [pc, #116]	@ (800aa88 <OSPI_ConfigCmd+0x2f0>)
 800aa14:	4013      	ands	r3, r2
 800aa16:	683a      	ldr	r2, [r7, #0]
 800aa18:	69d1      	ldr	r1, [r2, #28]
 800aa1a:	683a      	ldr	r2, [r7, #0]
 800aa1c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800aa1e:	4311      	orrs	r1, r2
 800aa20:	683a      	ldr	r2, [r7, #0]
 800aa22:	6a12      	ldr	r2, [r2, #32]
 800aa24:	4311      	orrs	r1, r2
 800aa26:	683a      	ldr	r2, [r7, #0]
 800aa28:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800aa2a:	4311      	orrs	r1, r2
 800aa2c:	683a      	ldr	r2, [r7, #0]
 800aa2e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800aa30:	430a      	orrs	r2, r1
 800aa32:	431a      	orrs	r2, r3
 800aa34:	69bb      	ldr	r3, [r7, #24]
 800aa36:	601a      	str	r2, [r3, #0]
 800aa38:	e00e      	b.n	800aa58 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 800aa3a:	69bb      	ldr	r3, [r7, #24]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	69d9      	ldr	r1, [r3, #28]
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa4a:	4319      	orrs	r1, r3
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	6a1b      	ldr	r3, [r3, #32]
 800aa50:	430b      	orrs	r3, r1
 800aa52:	431a      	orrs	r2, r3
 800aa54:	69bb      	ldr	r3, [r7, #24]
 800aa56:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	683a      	ldr	r2, [r7, #0]
 800aa5e:	6992      	ldr	r2, [r2, #24]
 800aa60:	649a      	str	r2, [r3, #72]	@ 0x48
 800aa62:	e004      	b.n	800aa6e <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 800aa64:	2301      	movs	r3, #1
 800aa66:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2208      	movs	r2, #8
 800aa6c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 800aa6e:	7ffb      	ldrb	r3, [r7, #31]
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3724      	adds	r7, #36	@ 0x24
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr
 800aa7c:	f0ffc0c0 	.word	0xf0ffc0c0
 800aa80:	ffffc0c0 	.word	0xffffc0c0
 800aa84:	f0ffffc0 	.word	0xf0ffffc0
 800aa88:	f0ffc0ff 	.word	0xf0ffc0ff

0800aa8c <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b087      	sub	sp, #28
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	4603      	mov	r3, r0
 800aa94:	6039      	str	r1, [r7, #0]
 800aa96:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 800aaa0:	79fb      	ldrb	r3, [r7, #7]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d005      	beq.n	800aab2 <OSPIM_GetConfig+0x26>
 800aaa6:	79fb      	ldrb	r3, [r7, #7]
 800aaa8:	2b02      	cmp	r3, #2
 800aaaa:	d802      	bhi.n	800aab2 <OSPIM_GetConfig+0x26>
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d102      	bne.n	800aab8 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800aab2:	2301      	movs	r3, #1
 800aab4:	75fb      	strb	r3, [r7, #23]
 800aab6:	e098      	b.n	800abea <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	2200      	movs	r2, #0
 800aabc:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	2200      	movs	r2, #0
 800aac2:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	2200      	movs	r2, #0
 800aac8:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	2200      	movs	r2, #0
 800aace:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	2200      	movs	r2, #0
 800aad4:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800aad6:	79fb      	ldrb	r3, [r7, #7]
 800aad8:	2b02      	cmp	r3, #2
 800aada:	d10b      	bne.n	800aaf4 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 800aadc:	4b46      	ldr	r3, [pc, #280]	@ (800abf8 <OSPIM_GetConfig+0x16c>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f003 0301 	and.w	r3, r3, #1
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d102      	bne.n	800aaee <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 800aae8:	4b44      	ldr	r3, [pc, #272]	@ (800abfc <OSPIM_GetConfig+0x170>)
 800aaea:	613b      	str	r3, [r7, #16]
 800aaec:	e002      	b.n	800aaf4 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 800aaee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aaf2:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	60fb      	str	r3, [r7, #12]
 800aaf8:	e074      	b.n	800abe4 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 800aafa:	4a3f      	ldr	r2, [pc, #252]	@ (800abf8 <OSPIM_GetConfig+0x16c>)
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	009b      	lsls	r3, r3, #2
 800ab00:	4413      	add	r3, r2
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	f003 0301 	and.w	r3, r3, #1
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d00a      	beq.n	800ab26 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 800ab10:	68ba      	ldr	r2, [r7, #8]
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	4053      	eors	r3, r2
 800ab16:	f003 0302 	and.w	r3, r3, #2
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d103      	bne.n	800ab26 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	1c5a      	adds	r2, r3, #1
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	f003 0310 	and.w	r3, r3, #16
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d00a      	beq.n	800ab46 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 800ab30:	68ba      	ldr	r2, [r7, #8]
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	4053      	eors	r3, r2
 800ab36:	f003 0320 	and.w	r3, r3, #32
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d103      	bne.n	800ab46 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	1c5a      	adds	r2, r3, #1
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d00a      	beq.n	800ab66 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 800ab50:	68ba      	ldr	r2, [r7, #8]
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	4053      	eors	r3, r2
 800ab56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d103      	bne.n	800ab66 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	1c5a      	adds	r2, r3, #1
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d018      	beq.n	800aba2 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 800ab70:	68ba      	ldr	r2, [r7, #8]
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	4053      	eors	r3, r2
 800ab76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d111      	bne.n	800aba2 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d106      	bne.n	800ab96 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	60da      	str	r2, [r3, #12]
 800ab94:	e005      	b.n	800aba2 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	3301      	adds	r3, #1
 800ab9a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d018      	beq.n	800abde <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 800abac:	68ba      	ldr	r2, [r7, #8]
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	4053      	eors	r3, r2
 800abb2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d111      	bne.n	800abde <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d106      	bne.n	800abd2 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	3301      	adds	r3, #1
 800abc8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	611a      	str	r2, [r3, #16]
 800abd0:	e005      	b.n	800abde <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	3301      	adds	r3, #1
 800abd6:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	3301      	adds	r3, #1
 800abe2:	60fb      	str	r3, [r7, #12]
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2b01      	cmp	r3, #1
 800abe8:	d987      	bls.n	800aafa <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 800abea:	7dfb      	ldrb	r3, [r7, #23]
}
 800abec:	4618      	mov	r0, r3
 800abee:	371c      	adds	r7, #28
 800abf0:	46bd      	mov	sp, r7
 800abf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf6:	4770      	bx	lr
 800abf8:	5200b400 	.word	0x5200b400
 800abfc:	04040222 	.word	0x04040222

0800ac00 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b084      	sub	sp, #16
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800ac08:	4b29      	ldr	r3, [pc, #164]	@ (800acb0 <HAL_PWREx_ConfigSupply+0xb0>)
 800ac0a:	68db      	ldr	r3, [r3, #12]
 800ac0c:	f003 0307 	and.w	r3, r3, #7
 800ac10:	2b06      	cmp	r3, #6
 800ac12:	d00a      	beq.n	800ac2a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800ac14:	4b26      	ldr	r3, [pc, #152]	@ (800acb0 <HAL_PWREx_ConfigSupply+0xb0>)
 800ac16:	68db      	ldr	r3, [r3, #12]
 800ac18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ac1c:	687a      	ldr	r2, [r7, #4]
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d001      	beq.n	800ac26 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800ac22:	2301      	movs	r3, #1
 800ac24:	e03f      	b.n	800aca6 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800ac26:	2300      	movs	r3, #0
 800ac28:	e03d      	b.n	800aca6 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800ac2a:	4b21      	ldr	r3, [pc, #132]	@ (800acb0 <HAL_PWREx_ConfigSupply+0xb0>)
 800ac2c:	68db      	ldr	r3, [r3, #12]
 800ac2e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800ac32:	491f      	ldr	r1, [pc, #124]	@ (800acb0 <HAL_PWREx_ConfigSupply+0xb0>)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	4313      	orrs	r3, r2
 800ac38:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800ac3a:	f7fa feb1 	bl	80059a0 <HAL_GetTick>
 800ac3e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ac40:	e009      	b.n	800ac56 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800ac42:	f7fa fead 	bl	80059a0 <HAL_GetTick>
 800ac46:	4602      	mov	r2, r0
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	1ad3      	subs	r3, r2, r3
 800ac4c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ac50:	d901      	bls.n	800ac56 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800ac52:	2301      	movs	r3, #1
 800ac54:	e027      	b.n	800aca6 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ac56:	4b16      	ldr	r3, [pc, #88]	@ (800acb0 <HAL_PWREx_ConfigSupply+0xb0>)
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ac5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ac62:	d1ee      	bne.n	800ac42 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2b1e      	cmp	r3, #30
 800ac68:	d008      	beq.n	800ac7c <HAL_PWREx_ConfigSupply+0x7c>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac6e:	d005      	beq.n	800ac7c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2b1d      	cmp	r3, #29
 800ac74:	d002      	beq.n	800ac7c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2b2d      	cmp	r3, #45	@ 0x2d
 800ac7a:	d113      	bne.n	800aca4 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800ac7c:	f7fa fe90 	bl	80059a0 <HAL_GetTick>
 800ac80:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800ac82:	e009      	b.n	800ac98 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800ac84:	f7fa fe8c 	bl	80059a0 <HAL_GetTick>
 800ac88:	4602      	mov	r2, r0
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	1ad3      	subs	r3, r2, r3
 800ac8e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ac92:	d901      	bls.n	800ac98 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800ac94:	2301      	movs	r3, #1
 800ac96:	e006      	b.n	800aca6 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800ac98:	4b05      	ldr	r3, [pc, #20]	@ (800acb0 <HAL_PWREx_ConfigSupply+0xb0>)
 800ac9a:	68db      	ldr	r3, [r3, #12]
 800ac9c:	f003 0311 	and.w	r3, r3, #17
 800aca0:	2b11      	cmp	r3, #17
 800aca2:	d1ef      	bne.n	800ac84 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800aca4:	2300      	movs	r3, #0
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3710      	adds	r7, #16
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}
 800acae:	bf00      	nop
 800acb0:	58024800 	.word	0x58024800

0800acb4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b08c      	sub	sp, #48	@ 0x30
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d101      	bne.n	800acc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800acc2:	2301      	movs	r3, #1
 800acc4:	e3c8      	b.n	800b458 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f003 0301 	and.w	r3, r3, #1
 800acce:	2b00      	cmp	r3, #0
 800acd0:	f000 8087 	beq.w	800ade2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800acd4:	4b88      	ldr	r3, [pc, #544]	@ (800aef8 <HAL_RCC_OscConfig+0x244>)
 800acd6:	691b      	ldr	r3, [r3, #16]
 800acd8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800acdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800acde:	4b86      	ldr	r3, [pc, #536]	@ (800aef8 <HAL_RCC_OscConfig+0x244>)
 800ace0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ace2:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800ace4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ace6:	2b10      	cmp	r3, #16
 800ace8:	d007      	beq.n	800acfa <HAL_RCC_OscConfig+0x46>
 800acea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acec:	2b18      	cmp	r3, #24
 800acee:	d110      	bne.n	800ad12 <HAL_RCC_OscConfig+0x5e>
 800acf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acf2:	f003 0303 	and.w	r3, r3, #3
 800acf6:	2b02      	cmp	r3, #2
 800acf8:	d10b      	bne.n	800ad12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800acfa:	4b7f      	ldr	r3, [pc, #508]	@ (800aef8 <HAL_RCC_OscConfig+0x244>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d06c      	beq.n	800ade0 <HAL_RCC_OscConfig+0x12c>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d168      	bne.n	800ade0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800ad0e:	2301      	movs	r3, #1
 800ad10:	e3a2      	b.n	800b458 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad1a:	d106      	bne.n	800ad2a <HAL_RCC_OscConfig+0x76>
 800ad1c:	4b76      	ldr	r3, [pc, #472]	@ (800aef8 <HAL_RCC_OscConfig+0x244>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4a75      	ldr	r2, [pc, #468]	@ (800aef8 <HAL_RCC_OscConfig+0x244>)
 800ad22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ad26:	6013      	str	r3, [r2, #0]
 800ad28:	e02e      	b.n	800ad88 <HAL_RCC_OscConfig+0xd4>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d10c      	bne.n	800ad4c <HAL_RCC_OscConfig+0x98>
 800ad32:	4b71      	ldr	r3, [pc, #452]	@ (800aef8 <HAL_RCC_OscConfig+0x244>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4a70      	ldr	r2, [pc, #448]	@ (800aef8 <HAL_RCC_OscConfig+0x244>)
 800ad38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ad3c:	6013      	str	r3, [r2, #0]
 800ad3e:	4b6e      	ldr	r3, [pc, #440]	@ (800aef8 <HAL_RCC_OscConfig+0x244>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	4a6d      	ldr	r2, [pc, #436]	@ (800aef8 <HAL_RCC_OscConfig+0x244>)
 800ad44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ad48:	6013      	str	r3, [r2, #0]
 800ad4a:	e01d      	b.n	800ad88 <HAL_RCC_OscConfig+0xd4>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	685b      	ldr	r3, [r3, #4]
 800ad50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ad54:	d10c      	bne.n	800ad70 <HAL_RCC_OscConfig+0xbc>
 800ad56:	4b68      	ldr	r3, [pc, #416]	@ (800aef8 <HAL_RCC_OscConfig+0x244>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4a67      	ldr	r2, [pc, #412]	@ (800aef8 <HAL_RCC_OscConfig+0x244>)
 800ad5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ad60:	6013      	str	r3, [r2, #0]
 800ad62:	4b65      	ldr	r3, [pc, #404]	@ (800aef8 <HAL_RCC_OscConfig+0x244>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	4a64      	ldr	r2, [pc, #400]	@ (800aef8 <HAL_RCC_OscConfig+0x244>)
 800ad68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ad6c:	6013      	str	r3, [r2, #0]
 800ad6e:	e00b      	b.n	800ad88 <HAL_RCC_OscConfig+0xd4>
 800ad70:	4b61      	ldr	r3, [pc, #388]	@ (800aef8 <HAL_RCC_OscConfig+0x244>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4a60      	ldr	r2, [pc, #384]	@ (800aef8 <HAL_RCC_OscConfig+0x244>)
 800ad76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ad7a:	6013      	str	r3, [r2, #0]
 800ad7c:	4b5e      	ldr	r3, [pc, #376]	@ (800aef8 <HAL_RCC_OscConfig+0x244>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	4a5d      	ldr	r2, [pc, #372]	@ (800aef8 <HAL_RCC_OscConfig+0x244>)
 800ad82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ad86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d013      	beq.n	800adb8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad90:	f7fa fe06 	bl	80059a0 <HAL_GetTick>
 800ad94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ad96:	e008      	b.n	800adaa <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ad98:	f7fa fe02 	bl	80059a0 <HAL_GetTick>
 800ad9c:	4602      	mov	r2, r0
 800ad9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ada0:	1ad3      	subs	r3, r2, r3
 800ada2:	2b64      	cmp	r3, #100	@ 0x64
 800ada4:	d901      	bls.n	800adaa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800ada6:	2303      	movs	r3, #3
 800ada8:	e356      	b.n	800b458 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800adaa:	4b53      	ldr	r3, [pc, #332]	@ (800aef8 <HAL_RCC_OscConfig+0x244>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d0f0      	beq.n	800ad98 <HAL_RCC_OscConfig+0xe4>
 800adb6:	e014      	b.n	800ade2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800adb8:	f7fa fdf2 	bl	80059a0 <HAL_GetTick>
 800adbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800adbe:	e008      	b.n	800add2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800adc0:	f7fa fdee 	bl	80059a0 <HAL_GetTick>
 800adc4:	4602      	mov	r2, r0
 800adc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc8:	1ad3      	subs	r3, r2, r3
 800adca:	2b64      	cmp	r3, #100	@ 0x64
 800adcc:	d901      	bls.n	800add2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800adce:	2303      	movs	r3, #3
 800add0:	e342      	b.n	800b458 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800add2:	4b49      	ldr	r3, [pc, #292]	@ (800aef8 <HAL_RCC_OscConfig+0x244>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800adda:	2b00      	cmp	r3, #0
 800addc:	d1f0      	bne.n	800adc0 <HAL_RCC_OscConfig+0x10c>
 800adde:	e000      	b.n	800ade2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ade0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f003 0302 	and.w	r3, r3, #2
 800adea:	2b00      	cmp	r3, #0
 800adec:	f000 808c 	beq.w	800af08 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800adf0:	4b41      	ldr	r3, [pc, #260]	@ (800aef8 <HAL_RCC_OscConfig+0x244>)
 800adf2:	691b      	ldr	r3, [r3, #16]
 800adf4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800adf8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800adfa:	4b3f      	ldr	r3, [pc, #252]	@ (800aef8 <HAL_RCC_OscConfig+0x244>)
 800adfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adfe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800ae00:	6a3b      	ldr	r3, [r7, #32]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d007      	beq.n	800ae16 <HAL_RCC_OscConfig+0x162>
 800ae06:	6a3b      	ldr	r3, [r7, #32]
 800ae08:	2b18      	cmp	r3, #24
 800ae0a:	d137      	bne.n	800ae7c <HAL_RCC_OscConfig+0x1c8>
 800ae0c:	69fb      	ldr	r3, [r7, #28]
 800ae0e:	f003 0303 	and.w	r3, r3, #3
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d132      	bne.n	800ae7c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ae16:	4b38      	ldr	r3, [pc, #224]	@ (800aef8 <HAL_RCC_OscConfig+0x244>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f003 0304 	and.w	r3, r3, #4
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d005      	beq.n	800ae2e <HAL_RCC_OscConfig+0x17a>
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	68db      	ldr	r3, [r3, #12]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d101      	bne.n	800ae2e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	e314      	b.n	800b458 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ae2e:	4b32      	ldr	r3, [pc, #200]	@ (800aef8 <HAL_RCC_OscConfig+0x244>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f023 0219 	bic.w	r2, r3, #25
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	68db      	ldr	r3, [r3, #12]
 800ae3a:	492f      	ldr	r1, [pc, #188]	@ (800aef8 <HAL_RCC_OscConfig+0x244>)
 800ae3c:	4313      	orrs	r3, r2
 800ae3e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae40:	f7fa fdae 	bl	80059a0 <HAL_GetTick>
 800ae44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ae46:	e008      	b.n	800ae5a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ae48:	f7fa fdaa 	bl	80059a0 <HAL_GetTick>
 800ae4c:	4602      	mov	r2, r0
 800ae4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae50:	1ad3      	subs	r3, r2, r3
 800ae52:	2b02      	cmp	r3, #2
 800ae54:	d901      	bls.n	800ae5a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800ae56:	2303      	movs	r3, #3
 800ae58:	e2fe      	b.n	800b458 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ae5a:	4b27      	ldr	r3, [pc, #156]	@ (800aef8 <HAL_RCC_OscConfig+0x244>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f003 0304 	and.w	r3, r3, #4
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d0f0      	beq.n	800ae48 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ae66:	4b24      	ldr	r3, [pc, #144]	@ (800aef8 <HAL_RCC_OscConfig+0x244>)
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	691b      	ldr	r3, [r3, #16]
 800ae72:	061b      	lsls	r3, r3, #24
 800ae74:	4920      	ldr	r1, [pc, #128]	@ (800aef8 <HAL_RCC_OscConfig+0x244>)
 800ae76:	4313      	orrs	r3, r2
 800ae78:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ae7a:	e045      	b.n	800af08 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	68db      	ldr	r3, [r3, #12]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d026      	beq.n	800aed2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ae84:	4b1c      	ldr	r3, [pc, #112]	@ (800aef8 <HAL_RCC_OscConfig+0x244>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f023 0219 	bic.w	r2, r3, #25
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	68db      	ldr	r3, [r3, #12]
 800ae90:	4919      	ldr	r1, [pc, #100]	@ (800aef8 <HAL_RCC_OscConfig+0x244>)
 800ae92:	4313      	orrs	r3, r2
 800ae94:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae96:	f7fa fd83 	bl	80059a0 <HAL_GetTick>
 800ae9a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ae9c:	e008      	b.n	800aeb0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ae9e:	f7fa fd7f 	bl	80059a0 <HAL_GetTick>
 800aea2:	4602      	mov	r2, r0
 800aea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aea6:	1ad3      	subs	r3, r2, r3
 800aea8:	2b02      	cmp	r3, #2
 800aeaa:	d901      	bls.n	800aeb0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800aeac:	2303      	movs	r3, #3
 800aeae:	e2d3      	b.n	800b458 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aeb0:	4b11      	ldr	r3, [pc, #68]	@ (800aef8 <HAL_RCC_OscConfig+0x244>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f003 0304 	and.w	r3, r3, #4
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d0f0      	beq.n	800ae9e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aebc:	4b0e      	ldr	r3, [pc, #56]	@ (800aef8 <HAL_RCC_OscConfig+0x244>)
 800aebe:	685b      	ldr	r3, [r3, #4]
 800aec0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	691b      	ldr	r3, [r3, #16]
 800aec8:	061b      	lsls	r3, r3, #24
 800aeca:	490b      	ldr	r1, [pc, #44]	@ (800aef8 <HAL_RCC_OscConfig+0x244>)
 800aecc:	4313      	orrs	r3, r2
 800aece:	604b      	str	r3, [r1, #4]
 800aed0:	e01a      	b.n	800af08 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aed2:	4b09      	ldr	r3, [pc, #36]	@ (800aef8 <HAL_RCC_OscConfig+0x244>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	4a08      	ldr	r2, [pc, #32]	@ (800aef8 <HAL_RCC_OscConfig+0x244>)
 800aed8:	f023 0301 	bic.w	r3, r3, #1
 800aedc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aede:	f7fa fd5f 	bl	80059a0 <HAL_GetTick>
 800aee2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800aee4:	e00a      	b.n	800aefc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aee6:	f7fa fd5b 	bl	80059a0 <HAL_GetTick>
 800aeea:	4602      	mov	r2, r0
 800aeec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeee:	1ad3      	subs	r3, r2, r3
 800aef0:	2b02      	cmp	r3, #2
 800aef2:	d903      	bls.n	800aefc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800aef4:	2303      	movs	r3, #3
 800aef6:	e2af      	b.n	800b458 <HAL_RCC_OscConfig+0x7a4>
 800aef8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800aefc:	4b96      	ldr	r3, [pc, #600]	@ (800b158 <HAL_RCC_OscConfig+0x4a4>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f003 0304 	and.w	r3, r3, #4
 800af04:	2b00      	cmp	r3, #0
 800af06:	d1ee      	bne.n	800aee6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f003 0310 	and.w	r3, r3, #16
 800af10:	2b00      	cmp	r3, #0
 800af12:	d06a      	beq.n	800afea <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800af14:	4b90      	ldr	r3, [pc, #576]	@ (800b158 <HAL_RCC_OscConfig+0x4a4>)
 800af16:	691b      	ldr	r3, [r3, #16]
 800af18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800af1c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800af1e:	4b8e      	ldr	r3, [pc, #568]	@ (800b158 <HAL_RCC_OscConfig+0x4a4>)
 800af20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af22:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800af24:	69bb      	ldr	r3, [r7, #24]
 800af26:	2b08      	cmp	r3, #8
 800af28:	d007      	beq.n	800af3a <HAL_RCC_OscConfig+0x286>
 800af2a:	69bb      	ldr	r3, [r7, #24]
 800af2c:	2b18      	cmp	r3, #24
 800af2e:	d11b      	bne.n	800af68 <HAL_RCC_OscConfig+0x2b4>
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	f003 0303 	and.w	r3, r3, #3
 800af36:	2b01      	cmp	r3, #1
 800af38:	d116      	bne.n	800af68 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800af3a:	4b87      	ldr	r3, [pc, #540]	@ (800b158 <HAL_RCC_OscConfig+0x4a4>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af42:	2b00      	cmp	r3, #0
 800af44:	d005      	beq.n	800af52 <HAL_RCC_OscConfig+0x29e>
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	69db      	ldr	r3, [r3, #28]
 800af4a:	2b80      	cmp	r3, #128	@ 0x80
 800af4c:	d001      	beq.n	800af52 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800af4e:	2301      	movs	r3, #1
 800af50:	e282      	b.n	800b458 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800af52:	4b81      	ldr	r3, [pc, #516]	@ (800b158 <HAL_RCC_OscConfig+0x4a4>)
 800af54:	68db      	ldr	r3, [r3, #12]
 800af56:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6a1b      	ldr	r3, [r3, #32]
 800af5e:	061b      	lsls	r3, r3, #24
 800af60:	497d      	ldr	r1, [pc, #500]	@ (800b158 <HAL_RCC_OscConfig+0x4a4>)
 800af62:	4313      	orrs	r3, r2
 800af64:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800af66:	e040      	b.n	800afea <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	69db      	ldr	r3, [r3, #28]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d023      	beq.n	800afb8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800af70:	4b79      	ldr	r3, [pc, #484]	@ (800b158 <HAL_RCC_OscConfig+0x4a4>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	4a78      	ldr	r2, [pc, #480]	@ (800b158 <HAL_RCC_OscConfig+0x4a4>)
 800af76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af7c:	f7fa fd10 	bl	80059a0 <HAL_GetTick>
 800af80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800af82:	e008      	b.n	800af96 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800af84:	f7fa fd0c 	bl	80059a0 <HAL_GetTick>
 800af88:	4602      	mov	r2, r0
 800af8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af8c:	1ad3      	subs	r3, r2, r3
 800af8e:	2b02      	cmp	r3, #2
 800af90:	d901      	bls.n	800af96 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800af92:	2303      	movs	r3, #3
 800af94:	e260      	b.n	800b458 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800af96:	4b70      	ldr	r3, [pc, #448]	@ (800b158 <HAL_RCC_OscConfig+0x4a4>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d0f0      	beq.n	800af84 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800afa2:	4b6d      	ldr	r3, [pc, #436]	@ (800b158 <HAL_RCC_OscConfig+0x4a4>)
 800afa4:	68db      	ldr	r3, [r3, #12]
 800afa6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6a1b      	ldr	r3, [r3, #32]
 800afae:	061b      	lsls	r3, r3, #24
 800afb0:	4969      	ldr	r1, [pc, #420]	@ (800b158 <HAL_RCC_OscConfig+0x4a4>)
 800afb2:	4313      	orrs	r3, r2
 800afb4:	60cb      	str	r3, [r1, #12]
 800afb6:	e018      	b.n	800afea <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800afb8:	4b67      	ldr	r3, [pc, #412]	@ (800b158 <HAL_RCC_OscConfig+0x4a4>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	4a66      	ldr	r2, [pc, #408]	@ (800b158 <HAL_RCC_OscConfig+0x4a4>)
 800afbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800afc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afc4:	f7fa fcec 	bl	80059a0 <HAL_GetTick>
 800afc8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800afca:	e008      	b.n	800afde <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800afcc:	f7fa fce8 	bl	80059a0 <HAL_GetTick>
 800afd0:	4602      	mov	r2, r0
 800afd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afd4:	1ad3      	subs	r3, r2, r3
 800afd6:	2b02      	cmp	r3, #2
 800afd8:	d901      	bls.n	800afde <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800afda:	2303      	movs	r3, #3
 800afdc:	e23c      	b.n	800b458 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800afde:	4b5e      	ldr	r3, [pc, #376]	@ (800b158 <HAL_RCC_OscConfig+0x4a4>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d1f0      	bne.n	800afcc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f003 0308 	and.w	r3, r3, #8
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d036      	beq.n	800b064 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	695b      	ldr	r3, [r3, #20]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d019      	beq.n	800b032 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800affe:	4b56      	ldr	r3, [pc, #344]	@ (800b158 <HAL_RCC_OscConfig+0x4a4>)
 800b000:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b002:	4a55      	ldr	r2, [pc, #340]	@ (800b158 <HAL_RCC_OscConfig+0x4a4>)
 800b004:	f043 0301 	orr.w	r3, r3, #1
 800b008:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b00a:	f7fa fcc9 	bl	80059a0 <HAL_GetTick>
 800b00e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b010:	e008      	b.n	800b024 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b012:	f7fa fcc5 	bl	80059a0 <HAL_GetTick>
 800b016:	4602      	mov	r2, r0
 800b018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b01a:	1ad3      	subs	r3, r2, r3
 800b01c:	2b02      	cmp	r3, #2
 800b01e:	d901      	bls.n	800b024 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800b020:	2303      	movs	r3, #3
 800b022:	e219      	b.n	800b458 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b024:	4b4c      	ldr	r3, [pc, #304]	@ (800b158 <HAL_RCC_OscConfig+0x4a4>)
 800b026:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b028:	f003 0302 	and.w	r3, r3, #2
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d0f0      	beq.n	800b012 <HAL_RCC_OscConfig+0x35e>
 800b030:	e018      	b.n	800b064 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b032:	4b49      	ldr	r3, [pc, #292]	@ (800b158 <HAL_RCC_OscConfig+0x4a4>)
 800b034:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b036:	4a48      	ldr	r2, [pc, #288]	@ (800b158 <HAL_RCC_OscConfig+0x4a4>)
 800b038:	f023 0301 	bic.w	r3, r3, #1
 800b03c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b03e:	f7fa fcaf 	bl	80059a0 <HAL_GetTick>
 800b042:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b044:	e008      	b.n	800b058 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b046:	f7fa fcab 	bl	80059a0 <HAL_GetTick>
 800b04a:	4602      	mov	r2, r0
 800b04c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b04e:	1ad3      	subs	r3, r2, r3
 800b050:	2b02      	cmp	r3, #2
 800b052:	d901      	bls.n	800b058 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800b054:	2303      	movs	r3, #3
 800b056:	e1ff      	b.n	800b458 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b058:	4b3f      	ldr	r3, [pc, #252]	@ (800b158 <HAL_RCC_OscConfig+0x4a4>)
 800b05a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b05c:	f003 0302 	and.w	r3, r3, #2
 800b060:	2b00      	cmp	r3, #0
 800b062:	d1f0      	bne.n	800b046 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f003 0320 	and.w	r3, r3, #32
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d036      	beq.n	800b0de <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	699b      	ldr	r3, [r3, #24]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d019      	beq.n	800b0ac <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b078:	4b37      	ldr	r3, [pc, #220]	@ (800b158 <HAL_RCC_OscConfig+0x4a4>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	4a36      	ldr	r2, [pc, #216]	@ (800b158 <HAL_RCC_OscConfig+0x4a4>)
 800b07e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b082:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b084:	f7fa fc8c 	bl	80059a0 <HAL_GetTick>
 800b088:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b08a:	e008      	b.n	800b09e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b08c:	f7fa fc88 	bl	80059a0 <HAL_GetTick>
 800b090:	4602      	mov	r2, r0
 800b092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b094:	1ad3      	subs	r3, r2, r3
 800b096:	2b02      	cmp	r3, #2
 800b098:	d901      	bls.n	800b09e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800b09a:	2303      	movs	r3, #3
 800b09c:	e1dc      	b.n	800b458 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b09e:	4b2e      	ldr	r3, [pc, #184]	@ (800b158 <HAL_RCC_OscConfig+0x4a4>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d0f0      	beq.n	800b08c <HAL_RCC_OscConfig+0x3d8>
 800b0aa:	e018      	b.n	800b0de <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b0ac:	4b2a      	ldr	r3, [pc, #168]	@ (800b158 <HAL_RCC_OscConfig+0x4a4>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	4a29      	ldr	r2, [pc, #164]	@ (800b158 <HAL_RCC_OscConfig+0x4a4>)
 800b0b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b0b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b0b8:	f7fa fc72 	bl	80059a0 <HAL_GetTick>
 800b0bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b0be:	e008      	b.n	800b0d2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b0c0:	f7fa fc6e 	bl	80059a0 <HAL_GetTick>
 800b0c4:	4602      	mov	r2, r0
 800b0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0c8:	1ad3      	subs	r3, r2, r3
 800b0ca:	2b02      	cmp	r3, #2
 800b0cc:	d901      	bls.n	800b0d2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800b0ce:	2303      	movs	r3, #3
 800b0d0:	e1c2      	b.n	800b458 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b0d2:	4b21      	ldr	r3, [pc, #132]	@ (800b158 <HAL_RCC_OscConfig+0x4a4>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d1f0      	bne.n	800b0c0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f003 0304 	and.w	r3, r3, #4
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	f000 8086 	beq.w	800b1f8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b0ec:	4b1b      	ldr	r3, [pc, #108]	@ (800b15c <HAL_RCC_OscConfig+0x4a8>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	4a1a      	ldr	r2, [pc, #104]	@ (800b15c <HAL_RCC_OscConfig+0x4a8>)
 800b0f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b0f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b0f8:	f7fa fc52 	bl	80059a0 <HAL_GetTick>
 800b0fc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b0fe:	e008      	b.n	800b112 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b100:	f7fa fc4e 	bl	80059a0 <HAL_GetTick>
 800b104:	4602      	mov	r2, r0
 800b106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b108:	1ad3      	subs	r3, r2, r3
 800b10a:	2b64      	cmp	r3, #100	@ 0x64
 800b10c:	d901      	bls.n	800b112 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800b10e:	2303      	movs	r3, #3
 800b110:	e1a2      	b.n	800b458 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b112:	4b12      	ldr	r3, [pc, #72]	@ (800b15c <HAL_RCC_OscConfig+0x4a8>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d0f0      	beq.n	800b100 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	689b      	ldr	r3, [r3, #8]
 800b122:	2b01      	cmp	r3, #1
 800b124:	d106      	bne.n	800b134 <HAL_RCC_OscConfig+0x480>
 800b126:	4b0c      	ldr	r3, [pc, #48]	@ (800b158 <HAL_RCC_OscConfig+0x4a4>)
 800b128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b12a:	4a0b      	ldr	r2, [pc, #44]	@ (800b158 <HAL_RCC_OscConfig+0x4a4>)
 800b12c:	f043 0301 	orr.w	r3, r3, #1
 800b130:	6713      	str	r3, [r2, #112]	@ 0x70
 800b132:	e032      	b.n	800b19a <HAL_RCC_OscConfig+0x4e6>
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	689b      	ldr	r3, [r3, #8]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d111      	bne.n	800b160 <HAL_RCC_OscConfig+0x4ac>
 800b13c:	4b06      	ldr	r3, [pc, #24]	@ (800b158 <HAL_RCC_OscConfig+0x4a4>)
 800b13e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b140:	4a05      	ldr	r2, [pc, #20]	@ (800b158 <HAL_RCC_OscConfig+0x4a4>)
 800b142:	f023 0301 	bic.w	r3, r3, #1
 800b146:	6713      	str	r3, [r2, #112]	@ 0x70
 800b148:	4b03      	ldr	r3, [pc, #12]	@ (800b158 <HAL_RCC_OscConfig+0x4a4>)
 800b14a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b14c:	4a02      	ldr	r2, [pc, #8]	@ (800b158 <HAL_RCC_OscConfig+0x4a4>)
 800b14e:	f023 0304 	bic.w	r3, r3, #4
 800b152:	6713      	str	r3, [r2, #112]	@ 0x70
 800b154:	e021      	b.n	800b19a <HAL_RCC_OscConfig+0x4e6>
 800b156:	bf00      	nop
 800b158:	58024400 	.word	0x58024400
 800b15c:	58024800 	.word	0x58024800
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	689b      	ldr	r3, [r3, #8]
 800b164:	2b05      	cmp	r3, #5
 800b166:	d10c      	bne.n	800b182 <HAL_RCC_OscConfig+0x4ce>
 800b168:	4b83      	ldr	r3, [pc, #524]	@ (800b378 <HAL_RCC_OscConfig+0x6c4>)
 800b16a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b16c:	4a82      	ldr	r2, [pc, #520]	@ (800b378 <HAL_RCC_OscConfig+0x6c4>)
 800b16e:	f043 0304 	orr.w	r3, r3, #4
 800b172:	6713      	str	r3, [r2, #112]	@ 0x70
 800b174:	4b80      	ldr	r3, [pc, #512]	@ (800b378 <HAL_RCC_OscConfig+0x6c4>)
 800b176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b178:	4a7f      	ldr	r2, [pc, #508]	@ (800b378 <HAL_RCC_OscConfig+0x6c4>)
 800b17a:	f043 0301 	orr.w	r3, r3, #1
 800b17e:	6713      	str	r3, [r2, #112]	@ 0x70
 800b180:	e00b      	b.n	800b19a <HAL_RCC_OscConfig+0x4e6>
 800b182:	4b7d      	ldr	r3, [pc, #500]	@ (800b378 <HAL_RCC_OscConfig+0x6c4>)
 800b184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b186:	4a7c      	ldr	r2, [pc, #496]	@ (800b378 <HAL_RCC_OscConfig+0x6c4>)
 800b188:	f023 0301 	bic.w	r3, r3, #1
 800b18c:	6713      	str	r3, [r2, #112]	@ 0x70
 800b18e:	4b7a      	ldr	r3, [pc, #488]	@ (800b378 <HAL_RCC_OscConfig+0x6c4>)
 800b190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b192:	4a79      	ldr	r2, [pc, #484]	@ (800b378 <HAL_RCC_OscConfig+0x6c4>)
 800b194:	f023 0304 	bic.w	r3, r3, #4
 800b198:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	689b      	ldr	r3, [r3, #8]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d015      	beq.n	800b1ce <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b1a2:	f7fa fbfd 	bl	80059a0 <HAL_GetTick>
 800b1a6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b1a8:	e00a      	b.n	800b1c0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b1aa:	f7fa fbf9 	bl	80059a0 <HAL_GetTick>
 800b1ae:	4602      	mov	r2, r0
 800b1b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1b2:	1ad3      	subs	r3, r2, r3
 800b1b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d901      	bls.n	800b1c0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800b1bc:	2303      	movs	r3, #3
 800b1be:	e14b      	b.n	800b458 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b1c0:	4b6d      	ldr	r3, [pc, #436]	@ (800b378 <HAL_RCC_OscConfig+0x6c4>)
 800b1c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b1c4:	f003 0302 	and.w	r3, r3, #2
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d0ee      	beq.n	800b1aa <HAL_RCC_OscConfig+0x4f6>
 800b1cc:	e014      	b.n	800b1f8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b1ce:	f7fa fbe7 	bl	80059a0 <HAL_GetTick>
 800b1d2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b1d4:	e00a      	b.n	800b1ec <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b1d6:	f7fa fbe3 	bl	80059a0 <HAL_GetTick>
 800b1da:	4602      	mov	r2, r0
 800b1dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1de:	1ad3      	subs	r3, r2, r3
 800b1e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d901      	bls.n	800b1ec <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800b1e8:	2303      	movs	r3, #3
 800b1ea:	e135      	b.n	800b458 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b1ec:	4b62      	ldr	r3, [pc, #392]	@ (800b378 <HAL_RCC_OscConfig+0x6c4>)
 800b1ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b1f0:	f003 0302 	and.w	r3, r3, #2
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d1ee      	bne.n	800b1d6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	f000 812a 	beq.w	800b456 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b202:	4b5d      	ldr	r3, [pc, #372]	@ (800b378 <HAL_RCC_OscConfig+0x6c4>)
 800b204:	691b      	ldr	r3, [r3, #16]
 800b206:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b20a:	2b18      	cmp	r3, #24
 800b20c:	f000 80ba 	beq.w	800b384 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b214:	2b02      	cmp	r3, #2
 800b216:	f040 8095 	bne.w	800b344 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b21a:	4b57      	ldr	r3, [pc, #348]	@ (800b378 <HAL_RCC_OscConfig+0x6c4>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	4a56      	ldr	r2, [pc, #344]	@ (800b378 <HAL_RCC_OscConfig+0x6c4>)
 800b220:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b224:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b226:	f7fa fbbb 	bl	80059a0 <HAL_GetTick>
 800b22a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b22c:	e008      	b.n	800b240 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b22e:	f7fa fbb7 	bl	80059a0 <HAL_GetTick>
 800b232:	4602      	mov	r2, r0
 800b234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b236:	1ad3      	subs	r3, r2, r3
 800b238:	2b02      	cmp	r3, #2
 800b23a:	d901      	bls.n	800b240 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800b23c:	2303      	movs	r3, #3
 800b23e:	e10b      	b.n	800b458 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b240:	4b4d      	ldr	r3, [pc, #308]	@ (800b378 <HAL_RCC_OscConfig+0x6c4>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d1f0      	bne.n	800b22e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b24c:	4b4a      	ldr	r3, [pc, #296]	@ (800b378 <HAL_RCC_OscConfig+0x6c4>)
 800b24e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b250:	4b4a      	ldr	r3, [pc, #296]	@ (800b37c <HAL_RCC_OscConfig+0x6c8>)
 800b252:	4013      	ands	r3, r2
 800b254:	687a      	ldr	r2, [r7, #4]
 800b256:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800b258:	687a      	ldr	r2, [r7, #4]
 800b25a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800b25c:	0112      	lsls	r2, r2, #4
 800b25e:	430a      	orrs	r2, r1
 800b260:	4945      	ldr	r1, [pc, #276]	@ (800b378 <HAL_RCC_OscConfig+0x6c4>)
 800b262:	4313      	orrs	r3, r2
 800b264:	628b      	str	r3, [r1, #40]	@ 0x28
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b26a:	3b01      	subs	r3, #1
 800b26c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b274:	3b01      	subs	r3, #1
 800b276:	025b      	lsls	r3, r3, #9
 800b278:	b29b      	uxth	r3, r3
 800b27a:	431a      	orrs	r2, r3
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b280:	3b01      	subs	r3, #1
 800b282:	041b      	lsls	r3, r3, #16
 800b284:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b288:	431a      	orrs	r2, r3
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b28e:	3b01      	subs	r3, #1
 800b290:	061b      	lsls	r3, r3, #24
 800b292:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b296:	4938      	ldr	r1, [pc, #224]	@ (800b378 <HAL_RCC_OscConfig+0x6c4>)
 800b298:	4313      	orrs	r3, r2
 800b29a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800b29c:	4b36      	ldr	r3, [pc, #216]	@ (800b378 <HAL_RCC_OscConfig+0x6c4>)
 800b29e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2a0:	4a35      	ldr	r2, [pc, #212]	@ (800b378 <HAL_RCC_OscConfig+0x6c4>)
 800b2a2:	f023 0301 	bic.w	r3, r3, #1
 800b2a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b2a8:	4b33      	ldr	r3, [pc, #204]	@ (800b378 <HAL_RCC_OscConfig+0x6c4>)
 800b2aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b2ac:	4b34      	ldr	r3, [pc, #208]	@ (800b380 <HAL_RCC_OscConfig+0x6cc>)
 800b2ae:	4013      	ands	r3, r2
 800b2b0:	687a      	ldr	r2, [r7, #4]
 800b2b2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b2b4:	00d2      	lsls	r2, r2, #3
 800b2b6:	4930      	ldr	r1, [pc, #192]	@ (800b378 <HAL_RCC_OscConfig+0x6c4>)
 800b2b8:	4313      	orrs	r3, r2
 800b2ba:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b2bc:	4b2e      	ldr	r3, [pc, #184]	@ (800b378 <HAL_RCC_OscConfig+0x6c4>)
 800b2be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2c0:	f023 020c 	bic.w	r2, r3, #12
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2c8:	492b      	ldr	r1, [pc, #172]	@ (800b378 <HAL_RCC_OscConfig+0x6c4>)
 800b2ca:	4313      	orrs	r3, r2
 800b2cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b2ce:	4b2a      	ldr	r3, [pc, #168]	@ (800b378 <HAL_RCC_OscConfig+0x6c4>)
 800b2d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2d2:	f023 0202 	bic.w	r2, r3, #2
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2da:	4927      	ldr	r1, [pc, #156]	@ (800b378 <HAL_RCC_OscConfig+0x6c4>)
 800b2dc:	4313      	orrs	r3, r2
 800b2de:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b2e0:	4b25      	ldr	r3, [pc, #148]	@ (800b378 <HAL_RCC_OscConfig+0x6c4>)
 800b2e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2e4:	4a24      	ldr	r2, [pc, #144]	@ (800b378 <HAL_RCC_OscConfig+0x6c4>)
 800b2e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b2ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2ec:	4b22      	ldr	r3, [pc, #136]	@ (800b378 <HAL_RCC_OscConfig+0x6c4>)
 800b2ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2f0:	4a21      	ldr	r2, [pc, #132]	@ (800b378 <HAL_RCC_OscConfig+0x6c4>)
 800b2f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b2f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b2f8:	4b1f      	ldr	r3, [pc, #124]	@ (800b378 <HAL_RCC_OscConfig+0x6c4>)
 800b2fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2fc:	4a1e      	ldr	r2, [pc, #120]	@ (800b378 <HAL_RCC_OscConfig+0x6c4>)
 800b2fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b302:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800b304:	4b1c      	ldr	r3, [pc, #112]	@ (800b378 <HAL_RCC_OscConfig+0x6c4>)
 800b306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b308:	4a1b      	ldr	r2, [pc, #108]	@ (800b378 <HAL_RCC_OscConfig+0x6c4>)
 800b30a:	f043 0301 	orr.w	r3, r3, #1
 800b30e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b310:	4b19      	ldr	r3, [pc, #100]	@ (800b378 <HAL_RCC_OscConfig+0x6c4>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	4a18      	ldr	r2, [pc, #96]	@ (800b378 <HAL_RCC_OscConfig+0x6c4>)
 800b316:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b31a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b31c:	f7fa fb40 	bl	80059a0 <HAL_GetTick>
 800b320:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b322:	e008      	b.n	800b336 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b324:	f7fa fb3c 	bl	80059a0 <HAL_GetTick>
 800b328:	4602      	mov	r2, r0
 800b32a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b32c:	1ad3      	subs	r3, r2, r3
 800b32e:	2b02      	cmp	r3, #2
 800b330:	d901      	bls.n	800b336 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800b332:	2303      	movs	r3, #3
 800b334:	e090      	b.n	800b458 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b336:	4b10      	ldr	r3, [pc, #64]	@ (800b378 <HAL_RCC_OscConfig+0x6c4>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d0f0      	beq.n	800b324 <HAL_RCC_OscConfig+0x670>
 800b342:	e088      	b.n	800b456 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b344:	4b0c      	ldr	r3, [pc, #48]	@ (800b378 <HAL_RCC_OscConfig+0x6c4>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	4a0b      	ldr	r2, [pc, #44]	@ (800b378 <HAL_RCC_OscConfig+0x6c4>)
 800b34a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b34e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b350:	f7fa fb26 	bl	80059a0 <HAL_GetTick>
 800b354:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b356:	e008      	b.n	800b36a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b358:	f7fa fb22 	bl	80059a0 <HAL_GetTick>
 800b35c:	4602      	mov	r2, r0
 800b35e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b360:	1ad3      	subs	r3, r2, r3
 800b362:	2b02      	cmp	r3, #2
 800b364:	d901      	bls.n	800b36a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800b366:	2303      	movs	r3, #3
 800b368:	e076      	b.n	800b458 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b36a:	4b03      	ldr	r3, [pc, #12]	@ (800b378 <HAL_RCC_OscConfig+0x6c4>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b372:	2b00      	cmp	r3, #0
 800b374:	d1f0      	bne.n	800b358 <HAL_RCC_OscConfig+0x6a4>
 800b376:	e06e      	b.n	800b456 <HAL_RCC_OscConfig+0x7a2>
 800b378:	58024400 	.word	0x58024400
 800b37c:	fffffc0c 	.word	0xfffffc0c
 800b380:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b384:	4b36      	ldr	r3, [pc, #216]	@ (800b460 <HAL_RCC_OscConfig+0x7ac>)
 800b386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b388:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b38a:	4b35      	ldr	r3, [pc, #212]	@ (800b460 <HAL_RCC_OscConfig+0x7ac>)
 800b38c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b38e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b394:	2b01      	cmp	r3, #1
 800b396:	d031      	beq.n	800b3fc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	f003 0203 	and.w	r2, r3, #3
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b3a2:	429a      	cmp	r2, r3
 800b3a4:	d12a      	bne.n	800b3fc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b3a6:	693b      	ldr	r3, [r7, #16]
 800b3a8:	091b      	lsrs	r3, r3, #4
 800b3aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	d122      	bne.n	800b3fc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	d11a      	bne.n	800b3fc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	0a5b      	lsrs	r3, r3, #9
 800b3ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3d2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d111      	bne.n	800b3fc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	0c1b      	lsrs	r3, r3, #16
 800b3dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d108      	bne.n	800b3fc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	0e1b      	lsrs	r3, r3, #24
 800b3ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3f6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d001      	beq.n	800b400 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	e02b      	b.n	800b458 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b400:	4b17      	ldr	r3, [pc, #92]	@ (800b460 <HAL_RCC_OscConfig+0x7ac>)
 800b402:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b404:	08db      	lsrs	r3, r3, #3
 800b406:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b40a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b410:	693a      	ldr	r2, [r7, #16]
 800b412:	429a      	cmp	r2, r3
 800b414:	d01f      	beq.n	800b456 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800b416:	4b12      	ldr	r3, [pc, #72]	@ (800b460 <HAL_RCC_OscConfig+0x7ac>)
 800b418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b41a:	4a11      	ldr	r2, [pc, #68]	@ (800b460 <HAL_RCC_OscConfig+0x7ac>)
 800b41c:	f023 0301 	bic.w	r3, r3, #1
 800b420:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b422:	f7fa fabd 	bl	80059a0 <HAL_GetTick>
 800b426:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800b428:	bf00      	nop
 800b42a:	f7fa fab9 	bl	80059a0 <HAL_GetTick>
 800b42e:	4602      	mov	r2, r0
 800b430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b432:	4293      	cmp	r3, r2
 800b434:	d0f9      	beq.n	800b42a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b436:	4b0a      	ldr	r3, [pc, #40]	@ (800b460 <HAL_RCC_OscConfig+0x7ac>)
 800b438:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b43a:	4b0a      	ldr	r3, [pc, #40]	@ (800b464 <HAL_RCC_OscConfig+0x7b0>)
 800b43c:	4013      	ands	r3, r2
 800b43e:	687a      	ldr	r2, [r7, #4]
 800b440:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b442:	00d2      	lsls	r2, r2, #3
 800b444:	4906      	ldr	r1, [pc, #24]	@ (800b460 <HAL_RCC_OscConfig+0x7ac>)
 800b446:	4313      	orrs	r3, r2
 800b448:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800b44a:	4b05      	ldr	r3, [pc, #20]	@ (800b460 <HAL_RCC_OscConfig+0x7ac>)
 800b44c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b44e:	4a04      	ldr	r2, [pc, #16]	@ (800b460 <HAL_RCC_OscConfig+0x7ac>)
 800b450:	f043 0301 	orr.w	r3, r3, #1
 800b454:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800b456:	2300      	movs	r3, #0
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3730      	adds	r7, #48	@ 0x30
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}
 800b460:	58024400 	.word	0x58024400
 800b464:	ffff0007 	.word	0xffff0007

0800b468 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b086      	sub	sp, #24
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d101      	bne.n	800b47c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b478:	2301      	movs	r3, #1
 800b47a:	e19c      	b.n	800b7b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b47c:	4b8a      	ldr	r3, [pc, #552]	@ (800b6a8 <HAL_RCC_ClockConfig+0x240>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f003 030f 	and.w	r3, r3, #15
 800b484:	683a      	ldr	r2, [r7, #0]
 800b486:	429a      	cmp	r2, r3
 800b488:	d910      	bls.n	800b4ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b48a:	4b87      	ldr	r3, [pc, #540]	@ (800b6a8 <HAL_RCC_ClockConfig+0x240>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f023 020f 	bic.w	r2, r3, #15
 800b492:	4985      	ldr	r1, [pc, #532]	@ (800b6a8 <HAL_RCC_ClockConfig+0x240>)
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	4313      	orrs	r3, r2
 800b498:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b49a:	4b83      	ldr	r3, [pc, #524]	@ (800b6a8 <HAL_RCC_ClockConfig+0x240>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f003 030f 	and.w	r3, r3, #15
 800b4a2:	683a      	ldr	r2, [r7, #0]
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	d001      	beq.n	800b4ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	e184      	b.n	800b7b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f003 0304 	and.w	r3, r3, #4
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d010      	beq.n	800b4da <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	691a      	ldr	r2, [r3, #16]
 800b4bc:	4b7b      	ldr	r3, [pc, #492]	@ (800b6ac <HAL_RCC_ClockConfig+0x244>)
 800b4be:	699b      	ldr	r3, [r3, #24]
 800b4c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b4c4:	429a      	cmp	r2, r3
 800b4c6:	d908      	bls.n	800b4da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b4c8:	4b78      	ldr	r3, [pc, #480]	@ (800b6ac <HAL_RCC_ClockConfig+0x244>)
 800b4ca:	699b      	ldr	r3, [r3, #24]
 800b4cc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	691b      	ldr	r3, [r3, #16]
 800b4d4:	4975      	ldr	r1, [pc, #468]	@ (800b6ac <HAL_RCC_ClockConfig+0x244>)
 800b4d6:	4313      	orrs	r3, r2
 800b4d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f003 0308 	and.w	r3, r3, #8
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d010      	beq.n	800b508 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	695a      	ldr	r2, [r3, #20]
 800b4ea:	4b70      	ldr	r3, [pc, #448]	@ (800b6ac <HAL_RCC_ClockConfig+0x244>)
 800b4ec:	69db      	ldr	r3, [r3, #28]
 800b4ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d908      	bls.n	800b508 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b4f6:	4b6d      	ldr	r3, [pc, #436]	@ (800b6ac <HAL_RCC_ClockConfig+0x244>)
 800b4f8:	69db      	ldr	r3, [r3, #28]
 800b4fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	695b      	ldr	r3, [r3, #20]
 800b502:	496a      	ldr	r1, [pc, #424]	@ (800b6ac <HAL_RCC_ClockConfig+0x244>)
 800b504:	4313      	orrs	r3, r2
 800b506:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f003 0310 	and.w	r3, r3, #16
 800b510:	2b00      	cmp	r3, #0
 800b512:	d010      	beq.n	800b536 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	699a      	ldr	r2, [r3, #24]
 800b518:	4b64      	ldr	r3, [pc, #400]	@ (800b6ac <HAL_RCC_ClockConfig+0x244>)
 800b51a:	69db      	ldr	r3, [r3, #28]
 800b51c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b520:	429a      	cmp	r2, r3
 800b522:	d908      	bls.n	800b536 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b524:	4b61      	ldr	r3, [pc, #388]	@ (800b6ac <HAL_RCC_ClockConfig+0x244>)
 800b526:	69db      	ldr	r3, [r3, #28]
 800b528:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	699b      	ldr	r3, [r3, #24]
 800b530:	495e      	ldr	r1, [pc, #376]	@ (800b6ac <HAL_RCC_ClockConfig+0x244>)
 800b532:	4313      	orrs	r3, r2
 800b534:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f003 0320 	and.w	r3, r3, #32
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d010      	beq.n	800b564 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	69da      	ldr	r2, [r3, #28]
 800b546:	4b59      	ldr	r3, [pc, #356]	@ (800b6ac <HAL_RCC_ClockConfig+0x244>)
 800b548:	6a1b      	ldr	r3, [r3, #32]
 800b54a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b54e:	429a      	cmp	r2, r3
 800b550:	d908      	bls.n	800b564 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b552:	4b56      	ldr	r3, [pc, #344]	@ (800b6ac <HAL_RCC_ClockConfig+0x244>)
 800b554:	6a1b      	ldr	r3, [r3, #32]
 800b556:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	69db      	ldr	r3, [r3, #28]
 800b55e:	4953      	ldr	r1, [pc, #332]	@ (800b6ac <HAL_RCC_ClockConfig+0x244>)
 800b560:	4313      	orrs	r3, r2
 800b562:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f003 0302 	and.w	r3, r3, #2
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d010      	beq.n	800b592 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	68da      	ldr	r2, [r3, #12]
 800b574:	4b4d      	ldr	r3, [pc, #308]	@ (800b6ac <HAL_RCC_ClockConfig+0x244>)
 800b576:	699b      	ldr	r3, [r3, #24]
 800b578:	f003 030f 	and.w	r3, r3, #15
 800b57c:	429a      	cmp	r2, r3
 800b57e:	d908      	bls.n	800b592 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b580:	4b4a      	ldr	r3, [pc, #296]	@ (800b6ac <HAL_RCC_ClockConfig+0x244>)
 800b582:	699b      	ldr	r3, [r3, #24]
 800b584:	f023 020f 	bic.w	r2, r3, #15
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	68db      	ldr	r3, [r3, #12]
 800b58c:	4947      	ldr	r1, [pc, #284]	@ (800b6ac <HAL_RCC_ClockConfig+0x244>)
 800b58e:	4313      	orrs	r3, r2
 800b590:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f003 0301 	and.w	r3, r3, #1
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d055      	beq.n	800b64a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b59e:	4b43      	ldr	r3, [pc, #268]	@ (800b6ac <HAL_RCC_ClockConfig+0x244>)
 800b5a0:	699b      	ldr	r3, [r3, #24]
 800b5a2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	689b      	ldr	r3, [r3, #8]
 800b5aa:	4940      	ldr	r1, [pc, #256]	@ (800b6ac <HAL_RCC_ClockConfig+0x244>)
 800b5ac:	4313      	orrs	r3, r2
 800b5ae:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	685b      	ldr	r3, [r3, #4]
 800b5b4:	2b02      	cmp	r3, #2
 800b5b6:	d107      	bne.n	800b5c8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b5b8:	4b3c      	ldr	r3, [pc, #240]	@ (800b6ac <HAL_RCC_ClockConfig+0x244>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d121      	bne.n	800b608 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	e0f6      	b.n	800b7b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	685b      	ldr	r3, [r3, #4]
 800b5cc:	2b03      	cmp	r3, #3
 800b5ce:	d107      	bne.n	800b5e0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b5d0:	4b36      	ldr	r3, [pc, #216]	@ (800b6ac <HAL_RCC_ClockConfig+0x244>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d115      	bne.n	800b608 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b5dc:	2301      	movs	r3, #1
 800b5de:	e0ea      	b.n	800b7b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	685b      	ldr	r3, [r3, #4]
 800b5e4:	2b01      	cmp	r3, #1
 800b5e6:	d107      	bne.n	800b5f8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b5e8:	4b30      	ldr	r3, [pc, #192]	@ (800b6ac <HAL_RCC_ClockConfig+0x244>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d109      	bne.n	800b608 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	e0de      	b.n	800b7b6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b5f8:	4b2c      	ldr	r3, [pc, #176]	@ (800b6ac <HAL_RCC_ClockConfig+0x244>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f003 0304 	and.w	r3, r3, #4
 800b600:	2b00      	cmp	r3, #0
 800b602:	d101      	bne.n	800b608 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b604:	2301      	movs	r3, #1
 800b606:	e0d6      	b.n	800b7b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b608:	4b28      	ldr	r3, [pc, #160]	@ (800b6ac <HAL_RCC_ClockConfig+0x244>)
 800b60a:	691b      	ldr	r3, [r3, #16]
 800b60c:	f023 0207 	bic.w	r2, r3, #7
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	685b      	ldr	r3, [r3, #4]
 800b614:	4925      	ldr	r1, [pc, #148]	@ (800b6ac <HAL_RCC_ClockConfig+0x244>)
 800b616:	4313      	orrs	r3, r2
 800b618:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b61a:	f7fa f9c1 	bl	80059a0 <HAL_GetTick>
 800b61e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b620:	e00a      	b.n	800b638 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b622:	f7fa f9bd 	bl	80059a0 <HAL_GetTick>
 800b626:	4602      	mov	r2, r0
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	1ad3      	subs	r3, r2, r3
 800b62c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b630:	4293      	cmp	r3, r2
 800b632:	d901      	bls.n	800b638 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b634:	2303      	movs	r3, #3
 800b636:	e0be      	b.n	800b7b6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b638:	4b1c      	ldr	r3, [pc, #112]	@ (800b6ac <HAL_RCC_ClockConfig+0x244>)
 800b63a:	691b      	ldr	r3, [r3, #16]
 800b63c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	685b      	ldr	r3, [r3, #4]
 800b644:	00db      	lsls	r3, r3, #3
 800b646:	429a      	cmp	r2, r3
 800b648:	d1eb      	bne.n	800b622 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f003 0302 	and.w	r3, r3, #2
 800b652:	2b00      	cmp	r3, #0
 800b654:	d010      	beq.n	800b678 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	68da      	ldr	r2, [r3, #12]
 800b65a:	4b14      	ldr	r3, [pc, #80]	@ (800b6ac <HAL_RCC_ClockConfig+0x244>)
 800b65c:	699b      	ldr	r3, [r3, #24]
 800b65e:	f003 030f 	and.w	r3, r3, #15
 800b662:	429a      	cmp	r2, r3
 800b664:	d208      	bcs.n	800b678 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b666:	4b11      	ldr	r3, [pc, #68]	@ (800b6ac <HAL_RCC_ClockConfig+0x244>)
 800b668:	699b      	ldr	r3, [r3, #24]
 800b66a:	f023 020f 	bic.w	r2, r3, #15
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	68db      	ldr	r3, [r3, #12]
 800b672:	490e      	ldr	r1, [pc, #56]	@ (800b6ac <HAL_RCC_ClockConfig+0x244>)
 800b674:	4313      	orrs	r3, r2
 800b676:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b678:	4b0b      	ldr	r3, [pc, #44]	@ (800b6a8 <HAL_RCC_ClockConfig+0x240>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	f003 030f 	and.w	r3, r3, #15
 800b680:	683a      	ldr	r2, [r7, #0]
 800b682:	429a      	cmp	r2, r3
 800b684:	d214      	bcs.n	800b6b0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b686:	4b08      	ldr	r3, [pc, #32]	@ (800b6a8 <HAL_RCC_ClockConfig+0x240>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f023 020f 	bic.w	r2, r3, #15
 800b68e:	4906      	ldr	r1, [pc, #24]	@ (800b6a8 <HAL_RCC_ClockConfig+0x240>)
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	4313      	orrs	r3, r2
 800b694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b696:	4b04      	ldr	r3, [pc, #16]	@ (800b6a8 <HAL_RCC_ClockConfig+0x240>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f003 030f 	and.w	r3, r3, #15
 800b69e:	683a      	ldr	r2, [r7, #0]
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	d005      	beq.n	800b6b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	e086      	b.n	800b7b6 <HAL_RCC_ClockConfig+0x34e>
 800b6a8:	52002000 	.word	0x52002000
 800b6ac:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f003 0304 	and.w	r3, r3, #4
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d010      	beq.n	800b6de <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	691a      	ldr	r2, [r3, #16]
 800b6c0:	4b3f      	ldr	r3, [pc, #252]	@ (800b7c0 <HAL_RCC_ClockConfig+0x358>)
 800b6c2:	699b      	ldr	r3, [r3, #24]
 800b6c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	d208      	bcs.n	800b6de <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b6cc:	4b3c      	ldr	r3, [pc, #240]	@ (800b7c0 <HAL_RCC_ClockConfig+0x358>)
 800b6ce:	699b      	ldr	r3, [r3, #24]
 800b6d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	691b      	ldr	r3, [r3, #16]
 800b6d8:	4939      	ldr	r1, [pc, #228]	@ (800b7c0 <HAL_RCC_ClockConfig+0x358>)
 800b6da:	4313      	orrs	r3, r2
 800b6dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f003 0308 	and.w	r3, r3, #8
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d010      	beq.n	800b70c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	695a      	ldr	r2, [r3, #20]
 800b6ee:	4b34      	ldr	r3, [pc, #208]	@ (800b7c0 <HAL_RCC_ClockConfig+0x358>)
 800b6f0:	69db      	ldr	r3, [r3, #28]
 800b6f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b6f6:	429a      	cmp	r2, r3
 800b6f8:	d208      	bcs.n	800b70c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b6fa:	4b31      	ldr	r3, [pc, #196]	@ (800b7c0 <HAL_RCC_ClockConfig+0x358>)
 800b6fc:	69db      	ldr	r3, [r3, #28]
 800b6fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	695b      	ldr	r3, [r3, #20]
 800b706:	492e      	ldr	r1, [pc, #184]	@ (800b7c0 <HAL_RCC_ClockConfig+0x358>)
 800b708:	4313      	orrs	r3, r2
 800b70a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f003 0310 	and.w	r3, r3, #16
 800b714:	2b00      	cmp	r3, #0
 800b716:	d010      	beq.n	800b73a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	699a      	ldr	r2, [r3, #24]
 800b71c:	4b28      	ldr	r3, [pc, #160]	@ (800b7c0 <HAL_RCC_ClockConfig+0x358>)
 800b71e:	69db      	ldr	r3, [r3, #28]
 800b720:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b724:	429a      	cmp	r2, r3
 800b726:	d208      	bcs.n	800b73a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b728:	4b25      	ldr	r3, [pc, #148]	@ (800b7c0 <HAL_RCC_ClockConfig+0x358>)
 800b72a:	69db      	ldr	r3, [r3, #28]
 800b72c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	699b      	ldr	r3, [r3, #24]
 800b734:	4922      	ldr	r1, [pc, #136]	@ (800b7c0 <HAL_RCC_ClockConfig+0x358>)
 800b736:	4313      	orrs	r3, r2
 800b738:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f003 0320 	and.w	r3, r3, #32
 800b742:	2b00      	cmp	r3, #0
 800b744:	d010      	beq.n	800b768 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	69da      	ldr	r2, [r3, #28]
 800b74a:	4b1d      	ldr	r3, [pc, #116]	@ (800b7c0 <HAL_RCC_ClockConfig+0x358>)
 800b74c:	6a1b      	ldr	r3, [r3, #32]
 800b74e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b752:	429a      	cmp	r2, r3
 800b754:	d208      	bcs.n	800b768 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b756:	4b1a      	ldr	r3, [pc, #104]	@ (800b7c0 <HAL_RCC_ClockConfig+0x358>)
 800b758:	6a1b      	ldr	r3, [r3, #32]
 800b75a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	69db      	ldr	r3, [r3, #28]
 800b762:	4917      	ldr	r1, [pc, #92]	@ (800b7c0 <HAL_RCC_ClockConfig+0x358>)
 800b764:	4313      	orrs	r3, r2
 800b766:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b768:	f000 f834 	bl	800b7d4 <HAL_RCC_GetSysClockFreq>
 800b76c:	4602      	mov	r2, r0
 800b76e:	4b14      	ldr	r3, [pc, #80]	@ (800b7c0 <HAL_RCC_ClockConfig+0x358>)
 800b770:	699b      	ldr	r3, [r3, #24]
 800b772:	0a1b      	lsrs	r3, r3, #8
 800b774:	f003 030f 	and.w	r3, r3, #15
 800b778:	4912      	ldr	r1, [pc, #72]	@ (800b7c4 <HAL_RCC_ClockConfig+0x35c>)
 800b77a:	5ccb      	ldrb	r3, [r1, r3]
 800b77c:	f003 031f 	and.w	r3, r3, #31
 800b780:	fa22 f303 	lsr.w	r3, r2, r3
 800b784:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b786:	4b0e      	ldr	r3, [pc, #56]	@ (800b7c0 <HAL_RCC_ClockConfig+0x358>)
 800b788:	699b      	ldr	r3, [r3, #24]
 800b78a:	f003 030f 	and.w	r3, r3, #15
 800b78e:	4a0d      	ldr	r2, [pc, #52]	@ (800b7c4 <HAL_RCC_ClockConfig+0x35c>)
 800b790:	5cd3      	ldrb	r3, [r2, r3]
 800b792:	f003 031f 	and.w	r3, r3, #31
 800b796:	693a      	ldr	r2, [r7, #16]
 800b798:	fa22 f303 	lsr.w	r3, r2, r3
 800b79c:	4a0a      	ldr	r2, [pc, #40]	@ (800b7c8 <HAL_RCC_ClockConfig+0x360>)
 800b79e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b7a0:	4a0a      	ldr	r2, [pc, #40]	@ (800b7cc <HAL_RCC_ClockConfig+0x364>)
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b7a6:	4b0a      	ldr	r3, [pc, #40]	@ (800b7d0 <HAL_RCC_ClockConfig+0x368>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f7f7 f8f8 	bl	80029a0 <HAL_InitTick>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b7b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3718      	adds	r7, #24
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
 800b7be:	bf00      	nop
 800b7c0:	58024400 	.word	0x58024400
 800b7c4:	0802dfac 	.word	0x0802dfac
 800b7c8:	24000008 	.word	0x24000008
 800b7cc:	24000004 	.word	0x24000004
 800b7d0:	2400003c 	.word	0x2400003c

0800b7d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b089      	sub	sp, #36	@ 0x24
 800b7d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b7da:	4bb3      	ldr	r3, [pc, #716]	@ (800baa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7dc:	691b      	ldr	r3, [r3, #16]
 800b7de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b7e2:	2b18      	cmp	r3, #24
 800b7e4:	f200 8155 	bhi.w	800ba92 <HAL_RCC_GetSysClockFreq+0x2be>
 800b7e8:	a201      	add	r2, pc, #4	@ (adr r2, 800b7f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b7ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7ee:	bf00      	nop
 800b7f0:	0800b855 	.word	0x0800b855
 800b7f4:	0800ba93 	.word	0x0800ba93
 800b7f8:	0800ba93 	.word	0x0800ba93
 800b7fc:	0800ba93 	.word	0x0800ba93
 800b800:	0800ba93 	.word	0x0800ba93
 800b804:	0800ba93 	.word	0x0800ba93
 800b808:	0800ba93 	.word	0x0800ba93
 800b80c:	0800ba93 	.word	0x0800ba93
 800b810:	0800b87b 	.word	0x0800b87b
 800b814:	0800ba93 	.word	0x0800ba93
 800b818:	0800ba93 	.word	0x0800ba93
 800b81c:	0800ba93 	.word	0x0800ba93
 800b820:	0800ba93 	.word	0x0800ba93
 800b824:	0800ba93 	.word	0x0800ba93
 800b828:	0800ba93 	.word	0x0800ba93
 800b82c:	0800ba93 	.word	0x0800ba93
 800b830:	0800b881 	.word	0x0800b881
 800b834:	0800ba93 	.word	0x0800ba93
 800b838:	0800ba93 	.word	0x0800ba93
 800b83c:	0800ba93 	.word	0x0800ba93
 800b840:	0800ba93 	.word	0x0800ba93
 800b844:	0800ba93 	.word	0x0800ba93
 800b848:	0800ba93 	.word	0x0800ba93
 800b84c:	0800ba93 	.word	0x0800ba93
 800b850:	0800b887 	.word	0x0800b887
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b854:	4b94      	ldr	r3, [pc, #592]	@ (800baa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f003 0320 	and.w	r3, r3, #32
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d009      	beq.n	800b874 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b860:	4b91      	ldr	r3, [pc, #580]	@ (800baa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	08db      	lsrs	r3, r3, #3
 800b866:	f003 0303 	and.w	r3, r3, #3
 800b86a:	4a90      	ldr	r2, [pc, #576]	@ (800baac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b86c:	fa22 f303 	lsr.w	r3, r2, r3
 800b870:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b872:	e111      	b.n	800ba98 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b874:	4b8d      	ldr	r3, [pc, #564]	@ (800baac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b876:	61bb      	str	r3, [r7, #24]
      break;
 800b878:	e10e      	b.n	800ba98 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b87a:	4b8d      	ldr	r3, [pc, #564]	@ (800bab0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b87c:	61bb      	str	r3, [r7, #24]
      break;
 800b87e:	e10b      	b.n	800ba98 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b880:	4b8c      	ldr	r3, [pc, #560]	@ (800bab4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b882:	61bb      	str	r3, [r7, #24]
      break;
 800b884:	e108      	b.n	800ba98 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b886:	4b88      	ldr	r3, [pc, #544]	@ (800baa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b88a:	f003 0303 	and.w	r3, r3, #3
 800b88e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b890:	4b85      	ldr	r3, [pc, #532]	@ (800baa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b894:	091b      	lsrs	r3, r3, #4
 800b896:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b89a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b89c:	4b82      	ldr	r3, [pc, #520]	@ (800baa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b89e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8a0:	f003 0301 	and.w	r3, r3, #1
 800b8a4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b8a6:	4b80      	ldr	r3, [pc, #512]	@ (800baa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b8a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8aa:	08db      	lsrs	r3, r3, #3
 800b8ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b8b0:	68fa      	ldr	r2, [r7, #12]
 800b8b2:	fb02 f303 	mul.w	r3, r2, r3
 800b8b6:	ee07 3a90 	vmov	s15, r3
 800b8ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8be:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	f000 80e1 	beq.w	800ba8c <HAL_RCC_GetSysClockFreq+0x2b8>
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	2b02      	cmp	r3, #2
 800b8ce:	f000 8083 	beq.w	800b9d8 <HAL_RCC_GetSysClockFreq+0x204>
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	2b02      	cmp	r3, #2
 800b8d6:	f200 80a1 	bhi.w	800ba1c <HAL_RCC_GetSysClockFreq+0x248>
 800b8da:	697b      	ldr	r3, [r7, #20]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d003      	beq.n	800b8e8 <HAL_RCC_GetSysClockFreq+0x114>
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	2b01      	cmp	r3, #1
 800b8e4:	d056      	beq.n	800b994 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b8e6:	e099      	b.n	800ba1c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b8e8:	4b6f      	ldr	r3, [pc, #444]	@ (800baa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f003 0320 	and.w	r3, r3, #32
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d02d      	beq.n	800b950 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b8f4:	4b6c      	ldr	r3, [pc, #432]	@ (800baa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	08db      	lsrs	r3, r3, #3
 800b8fa:	f003 0303 	and.w	r3, r3, #3
 800b8fe:	4a6b      	ldr	r2, [pc, #428]	@ (800baac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b900:	fa22 f303 	lsr.w	r3, r2, r3
 800b904:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	ee07 3a90 	vmov	s15, r3
 800b90c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	ee07 3a90 	vmov	s15, r3
 800b916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b91a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b91e:	4b62      	ldr	r3, [pc, #392]	@ (800baa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b926:	ee07 3a90 	vmov	s15, r3
 800b92a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b92e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b932:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800bab8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b93a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b93e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b94a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b94e:	e087      	b.n	800ba60 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	ee07 3a90 	vmov	s15, r3
 800b956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b95a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800babc <HAL_RCC_GetSysClockFreq+0x2e8>
 800b95e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b962:	4b51      	ldr	r3, [pc, #324]	@ (800baa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b96a:	ee07 3a90 	vmov	s15, r3
 800b96e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b972:	ed97 6a02 	vldr	s12, [r7, #8]
 800b976:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800bab8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b97a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b97e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b982:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b98a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b98e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b992:	e065      	b.n	800ba60 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b994:	693b      	ldr	r3, [r7, #16]
 800b996:	ee07 3a90 	vmov	s15, r3
 800b99a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b99e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800bac0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b9a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9a6:	4b40      	ldr	r3, [pc, #256]	@ (800baa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b9a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9ae:	ee07 3a90 	vmov	s15, r3
 800b9b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9b6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b9ba:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800bab8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b9be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b9ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b9d6:	e043      	b.n	800ba60 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b9d8:	693b      	ldr	r3, [r7, #16]
 800b9da:	ee07 3a90 	vmov	s15, r3
 800b9de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9e2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800bac4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b9e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9ea:	4b2f      	ldr	r3, [pc, #188]	@ (800baa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b9ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9f2:	ee07 3a90 	vmov	s15, r3
 800b9f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9fa:	ed97 6a02 	vldr	s12, [r7, #8]
 800b9fe:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800bab8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ba02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ba1a:	e021      	b.n	800ba60 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	ee07 3a90 	vmov	s15, r3
 800ba22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba26:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800bac0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ba2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba2e:	4b1e      	ldr	r3, [pc, #120]	@ (800baa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ba30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba36:	ee07 3a90 	vmov	s15, r3
 800ba3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba3e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ba42:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800bab8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ba46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ba5e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ba60:	4b11      	ldr	r3, [pc, #68]	@ (800baa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ba62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba64:	0a5b      	lsrs	r3, r3, #9
 800ba66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba6a:	3301      	adds	r3, #1
 800ba6c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	ee07 3a90 	vmov	s15, r3
 800ba74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ba78:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba84:	ee17 3a90 	vmov	r3, s15
 800ba88:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800ba8a:	e005      	b.n	800ba98 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	61bb      	str	r3, [r7, #24]
      break;
 800ba90:	e002      	b.n	800ba98 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800ba92:	4b07      	ldr	r3, [pc, #28]	@ (800bab0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ba94:	61bb      	str	r3, [r7, #24]
      break;
 800ba96:	bf00      	nop
  }

  return sysclockfreq;
 800ba98:	69bb      	ldr	r3, [r7, #24]
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3724      	adds	r7, #36	@ 0x24
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa4:	4770      	bx	lr
 800baa6:	bf00      	nop
 800baa8:	58024400 	.word	0x58024400
 800baac:	03d09000 	.word	0x03d09000
 800bab0:	003d0900 	.word	0x003d0900
 800bab4:	017d7840 	.word	0x017d7840
 800bab8:	46000000 	.word	0x46000000
 800babc:	4c742400 	.word	0x4c742400
 800bac0:	4a742400 	.word	0x4a742400
 800bac4:	4bbebc20 	.word	0x4bbebc20

0800bac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b082      	sub	sp, #8
 800bacc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800bace:	f7ff fe81 	bl	800b7d4 <HAL_RCC_GetSysClockFreq>
 800bad2:	4602      	mov	r2, r0
 800bad4:	4b10      	ldr	r3, [pc, #64]	@ (800bb18 <HAL_RCC_GetHCLKFreq+0x50>)
 800bad6:	699b      	ldr	r3, [r3, #24]
 800bad8:	0a1b      	lsrs	r3, r3, #8
 800bada:	f003 030f 	and.w	r3, r3, #15
 800bade:	490f      	ldr	r1, [pc, #60]	@ (800bb1c <HAL_RCC_GetHCLKFreq+0x54>)
 800bae0:	5ccb      	ldrb	r3, [r1, r3]
 800bae2:	f003 031f 	and.w	r3, r3, #31
 800bae6:	fa22 f303 	lsr.w	r3, r2, r3
 800baea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800baec:	4b0a      	ldr	r3, [pc, #40]	@ (800bb18 <HAL_RCC_GetHCLKFreq+0x50>)
 800baee:	699b      	ldr	r3, [r3, #24]
 800baf0:	f003 030f 	and.w	r3, r3, #15
 800baf4:	4a09      	ldr	r2, [pc, #36]	@ (800bb1c <HAL_RCC_GetHCLKFreq+0x54>)
 800baf6:	5cd3      	ldrb	r3, [r2, r3]
 800baf8:	f003 031f 	and.w	r3, r3, #31
 800bafc:	687a      	ldr	r2, [r7, #4]
 800bafe:	fa22 f303 	lsr.w	r3, r2, r3
 800bb02:	4a07      	ldr	r2, [pc, #28]	@ (800bb20 <HAL_RCC_GetHCLKFreq+0x58>)
 800bb04:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800bb06:	4a07      	ldr	r2, [pc, #28]	@ (800bb24 <HAL_RCC_GetHCLKFreq+0x5c>)
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800bb0c:	4b04      	ldr	r3, [pc, #16]	@ (800bb20 <HAL_RCC_GetHCLKFreq+0x58>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3708      	adds	r7, #8
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}
 800bb18:	58024400 	.word	0x58024400
 800bb1c:	0802dfac 	.word	0x0802dfac
 800bb20:	24000008 	.word	0x24000008
 800bb24:	24000004 	.word	0x24000004

0800bb28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800bb2c:	f7ff ffcc 	bl	800bac8 <HAL_RCC_GetHCLKFreq>
 800bb30:	4602      	mov	r2, r0
 800bb32:	4b06      	ldr	r3, [pc, #24]	@ (800bb4c <HAL_RCC_GetPCLK1Freq+0x24>)
 800bb34:	69db      	ldr	r3, [r3, #28]
 800bb36:	091b      	lsrs	r3, r3, #4
 800bb38:	f003 0307 	and.w	r3, r3, #7
 800bb3c:	4904      	ldr	r1, [pc, #16]	@ (800bb50 <HAL_RCC_GetPCLK1Freq+0x28>)
 800bb3e:	5ccb      	ldrb	r3, [r1, r3]
 800bb40:	f003 031f 	and.w	r3, r3, #31
 800bb44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	bd80      	pop	{r7, pc}
 800bb4c:	58024400 	.word	0x58024400
 800bb50:	0802dfac 	.word	0x0802dfac

0800bb54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800bb58:	f7ff ffb6 	bl	800bac8 <HAL_RCC_GetHCLKFreq>
 800bb5c:	4602      	mov	r2, r0
 800bb5e:	4b06      	ldr	r3, [pc, #24]	@ (800bb78 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bb60:	69db      	ldr	r3, [r3, #28]
 800bb62:	0a1b      	lsrs	r3, r3, #8
 800bb64:	f003 0307 	and.w	r3, r3, #7
 800bb68:	4904      	ldr	r1, [pc, #16]	@ (800bb7c <HAL_RCC_GetPCLK2Freq+0x28>)
 800bb6a:	5ccb      	ldrb	r3, [r1, r3]
 800bb6c:	f003 031f 	and.w	r3, r3, #31
 800bb70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	bd80      	pop	{r7, pc}
 800bb78:	58024400 	.word	0x58024400
 800bb7c:	0802dfac 	.word	0x0802dfac

0800bb80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800bb80:	b480      	push	{r7}
 800bb82:	b083      	sub	sp, #12
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	223f      	movs	r2, #63	@ 0x3f
 800bb8e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800bb90:	4b1a      	ldr	r3, [pc, #104]	@ (800bbfc <HAL_RCC_GetClockConfig+0x7c>)
 800bb92:	691b      	ldr	r3, [r3, #16]
 800bb94:	f003 0207 	and.w	r2, r3, #7
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800bb9c:	4b17      	ldr	r3, [pc, #92]	@ (800bbfc <HAL_RCC_GetClockConfig+0x7c>)
 800bb9e:	699b      	ldr	r3, [r3, #24]
 800bba0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800bba8:	4b14      	ldr	r3, [pc, #80]	@ (800bbfc <HAL_RCC_GetClockConfig+0x7c>)
 800bbaa:	699b      	ldr	r3, [r3, #24]
 800bbac:	f003 020f 	and.w	r2, r3, #15
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800bbb4:	4b11      	ldr	r3, [pc, #68]	@ (800bbfc <HAL_RCC_GetClockConfig+0x7c>)
 800bbb6:	699b      	ldr	r3, [r3, #24]
 800bbb8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800bbc0:	4b0e      	ldr	r3, [pc, #56]	@ (800bbfc <HAL_RCC_GetClockConfig+0x7c>)
 800bbc2:	69db      	ldr	r3, [r3, #28]
 800bbc4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800bbcc:	4b0b      	ldr	r3, [pc, #44]	@ (800bbfc <HAL_RCC_GetClockConfig+0x7c>)
 800bbce:	69db      	ldr	r3, [r3, #28]
 800bbd0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800bbd8:	4b08      	ldr	r3, [pc, #32]	@ (800bbfc <HAL_RCC_GetClockConfig+0x7c>)
 800bbda:	6a1b      	ldr	r3, [r3, #32]
 800bbdc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800bbe4:	4b06      	ldr	r3, [pc, #24]	@ (800bc00 <HAL_RCC_GetClockConfig+0x80>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f003 020f 	and.w	r2, r3, #15
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	601a      	str	r2, [r3, #0]
}
 800bbf0:	bf00      	nop
 800bbf2:	370c      	adds	r7, #12
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfa:	4770      	bx	lr
 800bbfc:	58024400 	.word	0x58024400
 800bc00:	52002000 	.word	0x52002000

0800bc04 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bc04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bc08:	b0c6      	sub	sp, #280	@ 0x118
 800bc0a:	af00      	add	r7, sp, #0
 800bc0c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bc10:	2300      	movs	r3, #0
 800bc12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bc16:	2300      	movs	r3, #0
 800bc18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bc1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc24:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800bc28:	2500      	movs	r5, #0
 800bc2a:	ea54 0305 	orrs.w	r3, r4, r5
 800bc2e:	d049      	beq.n	800bcc4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800bc30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc36:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800bc3a:	d02f      	beq.n	800bc9c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800bc3c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800bc40:	d828      	bhi.n	800bc94 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800bc42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bc46:	d01a      	beq.n	800bc7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800bc48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bc4c:	d822      	bhi.n	800bc94 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d003      	beq.n	800bc5a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800bc52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bc56:	d007      	beq.n	800bc68 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800bc58:	e01c      	b.n	800bc94 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc5a:	4bab      	ldr	r3, [pc, #684]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bc5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc5e:	4aaa      	ldr	r2, [pc, #680]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bc60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bc64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800bc66:	e01a      	b.n	800bc9e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bc68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc6c:	3308      	adds	r3, #8
 800bc6e:	2102      	movs	r1, #2
 800bc70:	4618      	mov	r0, r3
 800bc72:	f002 fa49 	bl	800e108 <RCCEx_PLL2_Config>
 800bc76:	4603      	mov	r3, r0
 800bc78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800bc7c:	e00f      	b.n	800bc9e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bc7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc82:	3328      	adds	r3, #40	@ 0x28
 800bc84:	2102      	movs	r1, #2
 800bc86:	4618      	mov	r0, r3
 800bc88:	f002 faf0 	bl	800e26c <RCCEx_PLL3_Config>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800bc92:	e004      	b.n	800bc9e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc94:	2301      	movs	r3, #1
 800bc96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bc9a:	e000      	b.n	800bc9e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800bc9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d10a      	bne.n	800bcbc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800bca6:	4b98      	ldr	r3, [pc, #608]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bca8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bcaa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800bcae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bcb4:	4a94      	ldr	r2, [pc, #592]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bcb6:	430b      	orrs	r3, r1
 800bcb8:	6513      	str	r3, [r2, #80]	@ 0x50
 800bcba:	e003      	b.n	800bcc4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bcc0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bcc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bccc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800bcd0:	f04f 0900 	mov.w	r9, #0
 800bcd4:	ea58 0309 	orrs.w	r3, r8, r9
 800bcd8:	d047      	beq.n	800bd6a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800bcda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bce0:	2b04      	cmp	r3, #4
 800bce2:	d82a      	bhi.n	800bd3a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800bce4:	a201      	add	r2, pc, #4	@ (adr r2, 800bcec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800bce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcea:	bf00      	nop
 800bcec:	0800bd01 	.word	0x0800bd01
 800bcf0:	0800bd0f 	.word	0x0800bd0f
 800bcf4:	0800bd25 	.word	0x0800bd25
 800bcf8:	0800bd43 	.word	0x0800bd43
 800bcfc:	0800bd43 	.word	0x0800bd43
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd00:	4b81      	ldr	r3, [pc, #516]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bd02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd04:	4a80      	ldr	r2, [pc, #512]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bd06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bd0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bd0c:	e01a      	b.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd12:	3308      	adds	r3, #8
 800bd14:	2100      	movs	r1, #0
 800bd16:	4618      	mov	r0, r3
 800bd18:	f002 f9f6 	bl	800e108 <RCCEx_PLL2_Config>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bd22:	e00f      	b.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bd24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd28:	3328      	adds	r3, #40	@ 0x28
 800bd2a:	2100      	movs	r1, #0
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f002 fa9d 	bl	800e26c <RCCEx_PLL3_Config>
 800bd32:	4603      	mov	r3, r0
 800bd34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bd38:	e004      	b.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bd40:	e000      	b.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800bd42:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d10a      	bne.n	800bd62 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bd4c:	4b6e      	ldr	r3, [pc, #440]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bd4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd50:	f023 0107 	bic.w	r1, r3, #7
 800bd54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd5a:	4a6b      	ldr	r2, [pc, #428]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bd5c:	430b      	orrs	r3, r1
 800bd5e:	6513      	str	r3, [r2, #80]	@ 0x50
 800bd60:	e003      	b.n	800bd6a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bd66:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800bd6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd72:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800bd76:	f04f 0b00 	mov.w	fp, #0
 800bd7a:	ea5a 030b 	orrs.w	r3, sl, fp
 800bd7e:	d05b      	beq.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800bd80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bd88:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800bd8c:	d03b      	beq.n	800be06 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800bd8e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800bd92:	d834      	bhi.n	800bdfe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bd94:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bd98:	d037      	beq.n	800be0a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800bd9a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bd9e:	d82e      	bhi.n	800bdfe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bda0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800bda4:	d033      	beq.n	800be0e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800bda6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800bdaa:	d828      	bhi.n	800bdfe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bdac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bdb0:	d01a      	beq.n	800bde8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800bdb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bdb6:	d822      	bhi.n	800bdfe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d003      	beq.n	800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800bdbc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bdc0:	d007      	beq.n	800bdd2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800bdc2:	e01c      	b.n	800bdfe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bdc4:	4b50      	ldr	r3, [pc, #320]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bdc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdc8:	4a4f      	ldr	r2, [pc, #316]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bdca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bdce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bdd0:	e01e      	b.n	800be10 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bdd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdd6:	3308      	adds	r3, #8
 800bdd8:	2100      	movs	r1, #0
 800bdda:	4618      	mov	r0, r3
 800bddc:	f002 f994 	bl	800e108 <RCCEx_PLL2_Config>
 800bde0:	4603      	mov	r3, r0
 800bde2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800bde6:	e013      	b.n	800be10 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bde8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdec:	3328      	adds	r3, #40	@ 0x28
 800bdee:	2100      	movs	r1, #0
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	f002 fa3b 	bl	800e26c <RCCEx_PLL3_Config>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bdfc:	e008      	b.n	800be10 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800bdfe:	2301      	movs	r3, #1
 800be00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800be04:	e004      	b.n	800be10 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800be06:	bf00      	nop
 800be08:	e002      	b.n	800be10 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800be0a:	bf00      	nop
 800be0c:	e000      	b.n	800be10 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800be0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be14:	2b00      	cmp	r3, #0
 800be16:	d10b      	bne.n	800be30 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800be18:	4b3b      	ldr	r3, [pc, #236]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800be1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be1c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800be20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be24:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800be28:	4a37      	ldr	r2, [pc, #220]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800be2a:	430b      	orrs	r3, r1
 800be2c:	6593      	str	r3, [r2, #88]	@ 0x58
 800be2e:	e003      	b.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be34:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800be38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be40:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800be44:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800be48:	2300      	movs	r3, #0
 800be4a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800be4e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800be52:	460b      	mov	r3, r1
 800be54:	4313      	orrs	r3, r2
 800be56:	d05d      	beq.n	800bf14 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800be58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be5c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800be60:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800be64:	d03b      	beq.n	800bede <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800be66:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800be6a:	d834      	bhi.n	800bed6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800be6c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800be70:	d037      	beq.n	800bee2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800be72:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800be76:	d82e      	bhi.n	800bed6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800be78:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800be7c:	d033      	beq.n	800bee6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800be7e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800be82:	d828      	bhi.n	800bed6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800be84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800be88:	d01a      	beq.n	800bec0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800be8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800be8e:	d822      	bhi.n	800bed6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800be90:	2b00      	cmp	r3, #0
 800be92:	d003      	beq.n	800be9c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800be94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800be98:	d007      	beq.n	800beaa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800be9a:	e01c      	b.n	800bed6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be9c:	4b1a      	ldr	r3, [pc, #104]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800be9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bea0:	4a19      	ldr	r2, [pc, #100]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bea2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bea6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bea8:	e01e      	b.n	800bee8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800beaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800beae:	3308      	adds	r3, #8
 800beb0:	2100      	movs	r1, #0
 800beb2:	4618      	mov	r0, r3
 800beb4:	f002 f928 	bl	800e108 <RCCEx_PLL2_Config>
 800beb8:	4603      	mov	r3, r0
 800beba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800bebe:	e013      	b.n	800bee8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bec4:	3328      	adds	r3, #40	@ 0x28
 800bec6:	2100      	movs	r1, #0
 800bec8:	4618      	mov	r0, r3
 800beca:	f002 f9cf 	bl	800e26c <RCCEx_PLL3_Config>
 800bece:	4603      	mov	r3, r0
 800bed0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bed4:	e008      	b.n	800bee8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800bed6:	2301      	movs	r3, #1
 800bed8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bedc:	e004      	b.n	800bee8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800bede:	bf00      	nop
 800bee0:	e002      	b.n	800bee8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800bee2:	bf00      	nop
 800bee4:	e000      	b.n	800bee8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800bee6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bee8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800beec:	2b00      	cmp	r3, #0
 800beee:	d10d      	bne.n	800bf0c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800bef0:	4b05      	ldr	r3, [pc, #20]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bef4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800bef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800befc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800bf00:	4a01      	ldr	r2, [pc, #4]	@ (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bf02:	430b      	orrs	r3, r1
 800bf04:	6593      	str	r3, [r2, #88]	@ 0x58
 800bf06:	e005      	b.n	800bf14 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800bf08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf10:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800bf14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf1c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800bf20:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800bf24:	2300      	movs	r3, #0
 800bf26:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800bf2a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800bf2e:	460b      	mov	r3, r1
 800bf30:	4313      	orrs	r3, r2
 800bf32:	d03a      	beq.n	800bfaa <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800bf34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bf3a:	2b30      	cmp	r3, #48	@ 0x30
 800bf3c:	d01f      	beq.n	800bf7e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800bf3e:	2b30      	cmp	r3, #48	@ 0x30
 800bf40:	d819      	bhi.n	800bf76 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800bf42:	2b20      	cmp	r3, #32
 800bf44:	d00c      	beq.n	800bf60 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800bf46:	2b20      	cmp	r3, #32
 800bf48:	d815      	bhi.n	800bf76 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d019      	beq.n	800bf82 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800bf4e:	2b10      	cmp	r3, #16
 800bf50:	d111      	bne.n	800bf76 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf52:	4baa      	ldr	r3, [pc, #680]	@ (800c1fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bf54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf56:	4aa9      	ldr	r2, [pc, #676]	@ (800c1fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bf58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bf5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800bf5e:	e011      	b.n	800bf84 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bf60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf64:	3308      	adds	r3, #8
 800bf66:	2102      	movs	r1, #2
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f002 f8cd 	bl	800e108 <RCCEx_PLL2_Config>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800bf74:	e006      	b.n	800bf84 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bf76:	2301      	movs	r3, #1
 800bf78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bf7c:	e002      	b.n	800bf84 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800bf7e:	bf00      	nop
 800bf80:	e000      	b.n	800bf84 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800bf82:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d10a      	bne.n	800bfa2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800bf8c:	4b9b      	ldr	r3, [pc, #620]	@ (800c1fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bf8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bf90:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800bf94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bf9a:	4a98      	ldr	r2, [pc, #608]	@ (800c1fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bf9c:	430b      	orrs	r3, r1
 800bf9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800bfa0:	e003      	b.n	800bfaa <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfa2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bfa6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bfaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800bfb6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bfba:	2300      	movs	r3, #0
 800bfbc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800bfc0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800bfc4:	460b      	mov	r3, r1
 800bfc6:	4313      	orrs	r3, r2
 800bfc8:	d051      	beq.n	800c06e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800bfca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bfd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bfd4:	d035      	beq.n	800c042 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800bfd6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bfda:	d82e      	bhi.n	800c03a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bfdc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bfe0:	d031      	beq.n	800c046 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800bfe2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bfe6:	d828      	bhi.n	800c03a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bfe8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bfec:	d01a      	beq.n	800c024 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800bfee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bff2:	d822      	bhi.n	800c03a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d003      	beq.n	800c000 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800bff8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bffc:	d007      	beq.n	800c00e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800bffe:	e01c      	b.n	800c03a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c000:	4b7e      	ldr	r3, [pc, #504]	@ (800c1fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c004:	4a7d      	ldr	r2, [pc, #500]	@ (800c1fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c006:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c00a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c00c:	e01c      	b.n	800c048 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c00e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c012:	3308      	adds	r3, #8
 800c014:	2100      	movs	r1, #0
 800c016:	4618      	mov	r0, r3
 800c018:	f002 f876 	bl	800e108 <RCCEx_PLL2_Config>
 800c01c:	4603      	mov	r3, r0
 800c01e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c022:	e011      	b.n	800c048 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c028:	3328      	adds	r3, #40	@ 0x28
 800c02a:	2100      	movs	r1, #0
 800c02c:	4618      	mov	r0, r3
 800c02e:	f002 f91d 	bl	800e26c <RCCEx_PLL3_Config>
 800c032:	4603      	mov	r3, r0
 800c034:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c038:	e006      	b.n	800c048 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c03a:	2301      	movs	r3, #1
 800c03c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c040:	e002      	b.n	800c048 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800c042:	bf00      	nop
 800c044:	e000      	b.n	800c048 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800c046:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c048:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d10a      	bne.n	800c066 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800c050:	4b6a      	ldr	r3, [pc, #424]	@ (800c1fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c052:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c054:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800c058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c05c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c05e:	4a67      	ldr	r2, [pc, #412]	@ (800c1fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c060:	430b      	orrs	r3, r1
 800c062:	6513      	str	r3, [r2, #80]	@ 0x50
 800c064:	e003      	b.n	800c06e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c066:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c06a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c06e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c076:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800c07a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c07e:	2300      	movs	r3, #0
 800c080:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c084:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800c088:	460b      	mov	r3, r1
 800c08a:	4313      	orrs	r3, r2
 800c08c:	d053      	beq.n	800c136 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800c08e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c092:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c094:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c098:	d033      	beq.n	800c102 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800c09a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c09e:	d82c      	bhi.n	800c0fa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c0a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c0a4:	d02f      	beq.n	800c106 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800c0a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c0aa:	d826      	bhi.n	800c0fa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c0ac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c0b0:	d02b      	beq.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0x506>
 800c0b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c0b6:	d820      	bhi.n	800c0fa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c0b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c0bc:	d012      	beq.n	800c0e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800c0be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c0c2:	d81a      	bhi.n	800c0fa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d022      	beq.n	800c10e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800c0c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c0cc:	d115      	bne.n	800c0fa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c0ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0d2:	3308      	adds	r3, #8
 800c0d4:	2101      	movs	r1, #1
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f002 f816 	bl	800e108 <RCCEx_PLL2_Config>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800c0e2:	e015      	b.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c0e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0e8:	3328      	adds	r3, #40	@ 0x28
 800c0ea:	2101      	movs	r1, #1
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f002 f8bd 	bl	800e26c <RCCEx_PLL3_Config>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800c0f8:	e00a      	b.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c100:	e006      	b.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c102:	bf00      	nop
 800c104:	e004      	b.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c106:	bf00      	nop
 800c108:	e002      	b.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c10a:	bf00      	nop
 800c10c:	e000      	b.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c10e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c110:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c114:	2b00      	cmp	r3, #0
 800c116:	d10a      	bne.n	800c12e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c118:	4b38      	ldr	r3, [pc, #224]	@ (800c1fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c11a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c11c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800c120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c124:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c126:	4a35      	ldr	r2, [pc, #212]	@ (800c1fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c128:	430b      	orrs	r3, r1
 800c12a:	6513      	str	r3, [r2, #80]	@ 0x50
 800c12c:	e003      	b.n	800c136 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c12e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c132:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c136:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c13e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800c142:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c146:	2300      	movs	r3, #0
 800c148:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c14c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c150:	460b      	mov	r3, r1
 800c152:	4313      	orrs	r3, r2
 800c154:	d058      	beq.n	800c208 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800c156:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c15a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c15e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c162:	d033      	beq.n	800c1cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800c164:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c168:	d82c      	bhi.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c16a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c16e:	d02f      	beq.n	800c1d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800c170:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c174:	d826      	bhi.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c176:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c17a:	d02b      	beq.n	800c1d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800c17c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c180:	d820      	bhi.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c182:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c186:	d012      	beq.n	800c1ae <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800c188:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c18c:	d81a      	bhi.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d022      	beq.n	800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800c192:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c196:	d115      	bne.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c198:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c19c:	3308      	adds	r3, #8
 800c19e:	2101      	movs	r1, #1
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	f001 ffb1 	bl	800e108 <RCCEx_PLL2_Config>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c1ac:	e015      	b.n	800c1da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c1ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1b2:	3328      	adds	r3, #40	@ 0x28
 800c1b4:	2101      	movs	r1, #1
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f002 f858 	bl	800e26c <RCCEx_PLL3_Config>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c1c2:	e00a      	b.n	800c1da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c1ca:	e006      	b.n	800c1da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c1cc:	bf00      	nop
 800c1ce:	e004      	b.n	800c1da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c1d0:	bf00      	nop
 800c1d2:	e002      	b.n	800c1da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c1d4:	bf00      	nop
 800c1d6:	e000      	b.n	800c1da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c1d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d10e      	bne.n	800c200 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c1e2:	4b06      	ldr	r3, [pc, #24]	@ (800c1fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c1e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c1e6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c1ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c1f2:	4a02      	ldr	r2, [pc, #8]	@ (800c1fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c1f4:	430b      	orrs	r3, r1
 800c1f6:	6593      	str	r3, [r2, #88]	@ 0x58
 800c1f8:	e006      	b.n	800c208 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800c1fa:	bf00      	nop
 800c1fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c200:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c204:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c208:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c210:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800c214:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c218:	2300      	movs	r3, #0
 800c21a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c21e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800c222:	460b      	mov	r3, r1
 800c224:	4313      	orrs	r3, r2
 800c226:	d037      	beq.n	800c298 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800c228:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c22c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c22e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c232:	d00e      	beq.n	800c252 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800c234:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c238:	d816      	bhi.n	800c268 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d018      	beq.n	800c270 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800c23e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c242:	d111      	bne.n	800c268 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c244:	4bc4      	ldr	r3, [pc, #784]	@ (800c558 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c248:	4ac3      	ldr	r2, [pc, #780]	@ (800c558 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c24a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c24e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c250:	e00f      	b.n	800c272 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c252:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c256:	3308      	adds	r3, #8
 800c258:	2101      	movs	r1, #1
 800c25a:	4618      	mov	r0, r3
 800c25c:	f001 ff54 	bl	800e108 <RCCEx_PLL2_Config>
 800c260:	4603      	mov	r3, r0
 800c262:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c266:	e004      	b.n	800c272 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c268:	2301      	movs	r3, #1
 800c26a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c26e:	e000      	b.n	800c272 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800c270:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c272:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c276:	2b00      	cmp	r3, #0
 800c278:	d10a      	bne.n	800c290 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c27a:	4bb7      	ldr	r3, [pc, #732]	@ (800c558 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c27c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c27e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800c282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c286:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c288:	4ab3      	ldr	r2, [pc, #716]	@ (800c558 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c28a:	430b      	orrs	r3, r1
 800c28c:	6513      	str	r3, [r2, #80]	@ 0x50
 800c28e:	e003      	b.n	800c298 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c290:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c294:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c298:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800c2a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c2ae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800c2b2:	460b      	mov	r3, r1
 800c2b4:	4313      	orrs	r3, r2
 800c2b6:	d039      	beq.n	800c32c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800c2b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c2be:	2b03      	cmp	r3, #3
 800c2c0:	d81c      	bhi.n	800c2fc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800c2c2:	a201      	add	r2, pc, #4	@ (adr r2, 800c2c8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800c2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2c8:	0800c305 	.word	0x0800c305
 800c2cc:	0800c2d9 	.word	0x0800c2d9
 800c2d0:	0800c2e7 	.word	0x0800c2e7
 800c2d4:	0800c305 	.word	0x0800c305
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c2d8:	4b9f      	ldr	r3, [pc, #636]	@ (800c558 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c2da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2dc:	4a9e      	ldr	r2, [pc, #632]	@ (800c558 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c2de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c2e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c2e4:	e00f      	b.n	800c306 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c2e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2ea:	3308      	adds	r3, #8
 800c2ec:	2102      	movs	r1, #2
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f001 ff0a 	bl	800e108 <RCCEx_PLL2_Config>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c2fa:	e004      	b.n	800c306 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c302:	e000      	b.n	800c306 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800c304:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c306:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d10a      	bne.n	800c324 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c30e:	4b92      	ldr	r3, [pc, #584]	@ (800c558 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c312:	f023 0103 	bic.w	r1, r3, #3
 800c316:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c31a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c31c:	4a8e      	ldr	r2, [pc, #568]	@ (800c558 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c31e:	430b      	orrs	r3, r1
 800c320:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c322:	e003      	b.n	800c32c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c324:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c328:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c32c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c334:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800c338:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c33c:	2300      	movs	r3, #0
 800c33e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c342:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c346:	460b      	mov	r3, r1
 800c348:	4313      	orrs	r3, r2
 800c34a:	f000 8099 	beq.w	800c480 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c34e:	4b83      	ldr	r3, [pc, #524]	@ (800c55c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	4a82      	ldr	r2, [pc, #520]	@ (800c55c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c354:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c358:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c35a:	f7f9 fb21 	bl	80059a0 <HAL_GetTick>
 800c35e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c362:	e00b      	b.n	800c37c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c364:	f7f9 fb1c 	bl	80059a0 <HAL_GetTick>
 800c368:	4602      	mov	r2, r0
 800c36a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c36e:	1ad3      	subs	r3, r2, r3
 800c370:	2b64      	cmp	r3, #100	@ 0x64
 800c372:	d903      	bls.n	800c37c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800c374:	2303      	movs	r3, #3
 800c376:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c37a:	e005      	b.n	800c388 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c37c:	4b77      	ldr	r3, [pc, #476]	@ (800c55c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c384:	2b00      	cmp	r3, #0
 800c386:	d0ed      	beq.n	800c364 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800c388:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d173      	bne.n	800c478 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c390:	4b71      	ldr	r3, [pc, #452]	@ (800c558 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c392:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c398:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c39c:	4053      	eors	r3, r2
 800c39e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d015      	beq.n	800c3d2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c3a6:	4b6c      	ldr	r3, [pc, #432]	@ (800c558 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c3a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c3aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c3ae:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c3b2:	4b69      	ldr	r3, [pc, #420]	@ (800c558 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c3b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c3b6:	4a68      	ldr	r2, [pc, #416]	@ (800c558 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c3b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c3bc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c3be:	4b66      	ldr	r3, [pc, #408]	@ (800c558 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c3c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c3c2:	4a65      	ldr	r2, [pc, #404]	@ (800c558 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c3c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c3c8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c3ca:	4a63      	ldr	r2, [pc, #396]	@ (800c558 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c3cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3d0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c3d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c3da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c3de:	d118      	bne.n	800c412 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3e0:	f7f9 fade 	bl	80059a0 <HAL_GetTick>
 800c3e4:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c3e8:	e00d      	b.n	800c406 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c3ea:	f7f9 fad9 	bl	80059a0 <HAL_GetTick>
 800c3ee:	4602      	mov	r2, r0
 800c3f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c3f4:	1ad2      	subs	r2, r2, r3
 800c3f6:	f241 3388 	movw	r3, #5000	@ 0x1388
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d903      	bls.n	800c406 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800c3fe:	2303      	movs	r3, #3
 800c400:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800c404:	e005      	b.n	800c412 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c406:	4b54      	ldr	r3, [pc, #336]	@ (800c558 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c40a:	f003 0302 	and.w	r3, r3, #2
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d0eb      	beq.n	800c3ea <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800c412:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c416:	2b00      	cmp	r3, #0
 800c418:	d129      	bne.n	800c46e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c41a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c41e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c422:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c426:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c42a:	d10e      	bne.n	800c44a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800c42c:	4b4a      	ldr	r3, [pc, #296]	@ (800c558 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c42e:	691b      	ldr	r3, [r3, #16]
 800c430:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800c434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c438:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c43c:	091a      	lsrs	r2, r3, #4
 800c43e:	4b48      	ldr	r3, [pc, #288]	@ (800c560 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800c440:	4013      	ands	r3, r2
 800c442:	4a45      	ldr	r2, [pc, #276]	@ (800c558 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c444:	430b      	orrs	r3, r1
 800c446:	6113      	str	r3, [r2, #16]
 800c448:	e005      	b.n	800c456 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800c44a:	4b43      	ldr	r3, [pc, #268]	@ (800c558 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c44c:	691b      	ldr	r3, [r3, #16]
 800c44e:	4a42      	ldr	r2, [pc, #264]	@ (800c558 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c450:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c454:	6113      	str	r3, [r2, #16]
 800c456:	4b40      	ldr	r3, [pc, #256]	@ (800c558 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c458:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800c45a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c45e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c462:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c466:	4a3c      	ldr	r2, [pc, #240]	@ (800c558 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c468:	430b      	orrs	r3, r1
 800c46a:	6713      	str	r3, [r2, #112]	@ 0x70
 800c46c:	e008      	b.n	800c480 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c46e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c472:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800c476:	e003      	b.n	800c480 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c478:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c47c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c480:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c488:	f002 0301 	and.w	r3, r2, #1
 800c48c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c490:	2300      	movs	r3, #0
 800c492:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c496:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800c49a:	460b      	mov	r3, r1
 800c49c:	4313      	orrs	r3, r2
 800c49e:	f000 808f 	beq.w	800c5c0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800c4a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c4a8:	2b28      	cmp	r3, #40	@ 0x28
 800c4aa:	d871      	bhi.n	800c590 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800c4ac:	a201      	add	r2, pc, #4	@ (adr r2, 800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800c4ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4b2:	bf00      	nop
 800c4b4:	0800c599 	.word	0x0800c599
 800c4b8:	0800c591 	.word	0x0800c591
 800c4bc:	0800c591 	.word	0x0800c591
 800c4c0:	0800c591 	.word	0x0800c591
 800c4c4:	0800c591 	.word	0x0800c591
 800c4c8:	0800c591 	.word	0x0800c591
 800c4cc:	0800c591 	.word	0x0800c591
 800c4d0:	0800c591 	.word	0x0800c591
 800c4d4:	0800c565 	.word	0x0800c565
 800c4d8:	0800c591 	.word	0x0800c591
 800c4dc:	0800c591 	.word	0x0800c591
 800c4e0:	0800c591 	.word	0x0800c591
 800c4e4:	0800c591 	.word	0x0800c591
 800c4e8:	0800c591 	.word	0x0800c591
 800c4ec:	0800c591 	.word	0x0800c591
 800c4f0:	0800c591 	.word	0x0800c591
 800c4f4:	0800c57b 	.word	0x0800c57b
 800c4f8:	0800c591 	.word	0x0800c591
 800c4fc:	0800c591 	.word	0x0800c591
 800c500:	0800c591 	.word	0x0800c591
 800c504:	0800c591 	.word	0x0800c591
 800c508:	0800c591 	.word	0x0800c591
 800c50c:	0800c591 	.word	0x0800c591
 800c510:	0800c591 	.word	0x0800c591
 800c514:	0800c599 	.word	0x0800c599
 800c518:	0800c591 	.word	0x0800c591
 800c51c:	0800c591 	.word	0x0800c591
 800c520:	0800c591 	.word	0x0800c591
 800c524:	0800c591 	.word	0x0800c591
 800c528:	0800c591 	.word	0x0800c591
 800c52c:	0800c591 	.word	0x0800c591
 800c530:	0800c591 	.word	0x0800c591
 800c534:	0800c599 	.word	0x0800c599
 800c538:	0800c591 	.word	0x0800c591
 800c53c:	0800c591 	.word	0x0800c591
 800c540:	0800c591 	.word	0x0800c591
 800c544:	0800c591 	.word	0x0800c591
 800c548:	0800c591 	.word	0x0800c591
 800c54c:	0800c591 	.word	0x0800c591
 800c550:	0800c591 	.word	0x0800c591
 800c554:	0800c599 	.word	0x0800c599
 800c558:	58024400 	.word	0x58024400
 800c55c:	58024800 	.word	0x58024800
 800c560:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c568:	3308      	adds	r3, #8
 800c56a:	2101      	movs	r1, #1
 800c56c:	4618      	mov	r0, r3
 800c56e:	f001 fdcb 	bl	800e108 <RCCEx_PLL2_Config>
 800c572:	4603      	mov	r3, r0
 800c574:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c578:	e00f      	b.n	800c59a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c57a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c57e:	3328      	adds	r3, #40	@ 0x28
 800c580:	2101      	movs	r1, #1
 800c582:	4618      	mov	r0, r3
 800c584:	f001 fe72 	bl	800e26c <RCCEx_PLL3_Config>
 800c588:	4603      	mov	r3, r0
 800c58a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c58e:	e004      	b.n	800c59a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c590:	2301      	movs	r3, #1
 800c592:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c596:	e000      	b.n	800c59a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800c598:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c59a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d10a      	bne.n	800c5b8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c5a2:	4bbf      	ldr	r3, [pc, #764]	@ (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c5a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5a6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800c5aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c5b0:	4abb      	ldr	r2, [pc, #748]	@ (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c5b2:	430b      	orrs	r3, r1
 800c5b4:	6553      	str	r3, [r2, #84]	@ 0x54
 800c5b6:	e003      	b.n	800c5c0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c5bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c5c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c8:	f002 0302 	and.w	r3, r2, #2
 800c5cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c5d6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800c5da:	460b      	mov	r3, r1
 800c5dc:	4313      	orrs	r3, r2
 800c5de:	d041      	beq.n	800c664 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c5e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c5e6:	2b05      	cmp	r3, #5
 800c5e8:	d824      	bhi.n	800c634 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800c5ea:	a201      	add	r2, pc, #4	@ (adr r2, 800c5f0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800c5ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5f0:	0800c63d 	.word	0x0800c63d
 800c5f4:	0800c609 	.word	0x0800c609
 800c5f8:	0800c61f 	.word	0x0800c61f
 800c5fc:	0800c63d 	.word	0x0800c63d
 800c600:	0800c63d 	.word	0x0800c63d
 800c604:	0800c63d 	.word	0x0800c63d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c608:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c60c:	3308      	adds	r3, #8
 800c60e:	2101      	movs	r1, #1
 800c610:	4618      	mov	r0, r3
 800c612:	f001 fd79 	bl	800e108 <RCCEx_PLL2_Config>
 800c616:	4603      	mov	r3, r0
 800c618:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c61c:	e00f      	b.n	800c63e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c61e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c622:	3328      	adds	r3, #40	@ 0x28
 800c624:	2101      	movs	r1, #1
 800c626:	4618      	mov	r0, r3
 800c628:	f001 fe20 	bl	800e26c <RCCEx_PLL3_Config>
 800c62c:	4603      	mov	r3, r0
 800c62e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c632:	e004      	b.n	800c63e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c634:	2301      	movs	r3, #1
 800c636:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c63a:	e000      	b.n	800c63e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800c63c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c63e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c642:	2b00      	cmp	r3, #0
 800c644:	d10a      	bne.n	800c65c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c646:	4b96      	ldr	r3, [pc, #600]	@ (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c64a:	f023 0107 	bic.w	r1, r3, #7
 800c64e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c652:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c654:	4a92      	ldr	r2, [pc, #584]	@ (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c656:	430b      	orrs	r3, r1
 800c658:	6553      	str	r3, [r2, #84]	@ 0x54
 800c65a:	e003      	b.n	800c664 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c65c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c660:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c664:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c66c:	f002 0304 	and.w	r3, r2, #4
 800c670:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c674:	2300      	movs	r3, #0
 800c676:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c67a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c67e:	460b      	mov	r3, r1
 800c680:	4313      	orrs	r3, r2
 800c682:	d044      	beq.n	800c70e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c688:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c68c:	2b05      	cmp	r3, #5
 800c68e:	d825      	bhi.n	800c6dc <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800c690:	a201      	add	r2, pc, #4	@ (adr r2, 800c698 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800c692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c696:	bf00      	nop
 800c698:	0800c6e5 	.word	0x0800c6e5
 800c69c:	0800c6b1 	.word	0x0800c6b1
 800c6a0:	0800c6c7 	.word	0x0800c6c7
 800c6a4:	0800c6e5 	.word	0x0800c6e5
 800c6a8:	0800c6e5 	.word	0x0800c6e5
 800c6ac:	0800c6e5 	.word	0x0800c6e5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c6b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6b4:	3308      	adds	r3, #8
 800c6b6:	2101      	movs	r1, #1
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f001 fd25 	bl	800e108 <RCCEx_PLL2_Config>
 800c6be:	4603      	mov	r3, r0
 800c6c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c6c4:	e00f      	b.n	800c6e6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c6c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6ca:	3328      	adds	r3, #40	@ 0x28
 800c6cc:	2101      	movs	r1, #1
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f001 fdcc 	bl	800e26c <RCCEx_PLL3_Config>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c6da:	e004      	b.n	800c6e6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c6dc:	2301      	movs	r3, #1
 800c6de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c6e2:	e000      	b.n	800c6e6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800c6e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c6e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d10b      	bne.n	800c706 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c6ee:	4b6c      	ldr	r3, [pc, #432]	@ (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c6f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c6f2:	f023 0107 	bic.w	r1, r3, #7
 800c6f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c6fe:	4a68      	ldr	r2, [pc, #416]	@ (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c700:	430b      	orrs	r3, r1
 800c702:	6593      	str	r3, [r2, #88]	@ 0x58
 800c704:	e003      	b.n	800c70e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c706:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c70a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c70e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c716:	f002 0320 	and.w	r3, r2, #32
 800c71a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c71e:	2300      	movs	r3, #0
 800c720:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c724:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800c728:	460b      	mov	r3, r1
 800c72a:	4313      	orrs	r3, r2
 800c72c:	d055      	beq.n	800c7da <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c72e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c732:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c736:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c73a:	d033      	beq.n	800c7a4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800c73c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c740:	d82c      	bhi.n	800c79c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c742:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c746:	d02f      	beq.n	800c7a8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c748:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c74c:	d826      	bhi.n	800c79c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c74e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c752:	d02b      	beq.n	800c7ac <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c754:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c758:	d820      	bhi.n	800c79c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c75a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c75e:	d012      	beq.n	800c786 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800c760:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c764:	d81a      	bhi.n	800c79c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c766:	2b00      	cmp	r3, #0
 800c768:	d022      	beq.n	800c7b0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c76a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c76e:	d115      	bne.n	800c79c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c774:	3308      	adds	r3, #8
 800c776:	2100      	movs	r1, #0
 800c778:	4618      	mov	r0, r3
 800c77a:	f001 fcc5 	bl	800e108 <RCCEx_PLL2_Config>
 800c77e:	4603      	mov	r3, r0
 800c780:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c784:	e015      	b.n	800c7b2 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c786:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c78a:	3328      	adds	r3, #40	@ 0x28
 800c78c:	2102      	movs	r1, #2
 800c78e:	4618      	mov	r0, r3
 800c790:	f001 fd6c 	bl	800e26c <RCCEx_PLL3_Config>
 800c794:	4603      	mov	r3, r0
 800c796:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c79a:	e00a      	b.n	800c7b2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c79c:	2301      	movs	r3, #1
 800c79e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c7a2:	e006      	b.n	800c7b2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c7a4:	bf00      	nop
 800c7a6:	e004      	b.n	800c7b2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c7a8:	bf00      	nop
 800c7aa:	e002      	b.n	800c7b2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c7ac:	bf00      	nop
 800c7ae:	e000      	b.n	800c7b2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c7b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c7b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d10b      	bne.n	800c7d2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c7ba:	4b39      	ldr	r3, [pc, #228]	@ (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c7bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c7be:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c7c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c7ca:	4a35      	ldr	r2, [pc, #212]	@ (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c7cc:	430b      	orrs	r3, r1
 800c7ce:	6553      	str	r3, [r2, #84]	@ 0x54
 800c7d0:	e003      	b.n	800c7da <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c7d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c7da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800c7e6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c7f0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800c7f4:	460b      	mov	r3, r1
 800c7f6:	4313      	orrs	r3, r2
 800c7f8:	d058      	beq.n	800c8ac <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c7fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c802:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c806:	d033      	beq.n	800c870 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800c808:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c80c:	d82c      	bhi.n	800c868 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c80e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c812:	d02f      	beq.n	800c874 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c814:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c818:	d826      	bhi.n	800c868 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c81a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c81e:	d02b      	beq.n	800c878 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c820:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c824:	d820      	bhi.n	800c868 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c826:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c82a:	d012      	beq.n	800c852 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800c82c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c830:	d81a      	bhi.n	800c868 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c832:	2b00      	cmp	r3, #0
 800c834:	d022      	beq.n	800c87c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c836:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c83a:	d115      	bne.n	800c868 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c83c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c840:	3308      	adds	r3, #8
 800c842:	2100      	movs	r1, #0
 800c844:	4618      	mov	r0, r3
 800c846:	f001 fc5f 	bl	800e108 <RCCEx_PLL2_Config>
 800c84a:	4603      	mov	r3, r0
 800c84c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c850:	e015      	b.n	800c87e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c852:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c856:	3328      	adds	r3, #40	@ 0x28
 800c858:	2102      	movs	r1, #2
 800c85a:	4618      	mov	r0, r3
 800c85c:	f001 fd06 	bl	800e26c <RCCEx_PLL3_Config>
 800c860:	4603      	mov	r3, r0
 800c862:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c866:	e00a      	b.n	800c87e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c868:	2301      	movs	r3, #1
 800c86a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c86e:	e006      	b.n	800c87e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c870:	bf00      	nop
 800c872:	e004      	b.n	800c87e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c874:	bf00      	nop
 800c876:	e002      	b.n	800c87e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c878:	bf00      	nop
 800c87a:	e000      	b.n	800c87e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c87c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c87e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c882:	2b00      	cmp	r3, #0
 800c884:	d10e      	bne.n	800c8a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c886:	4b06      	ldr	r3, [pc, #24]	@ (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c88a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800c88e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c892:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c896:	4a02      	ldr	r2, [pc, #8]	@ (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c898:	430b      	orrs	r3, r1
 800c89a:	6593      	str	r3, [r2, #88]	@ 0x58
 800c89c:	e006      	b.n	800c8ac <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800c89e:	bf00      	nop
 800c8a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c8a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c8ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800c8b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c8bc:	2300      	movs	r3, #0
 800c8be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c8c2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800c8c6:	460b      	mov	r3, r1
 800c8c8:	4313      	orrs	r3, r2
 800c8ca:	d055      	beq.n	800c978 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c8cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c8d4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c8d8:	d033      	beq.n	800c942 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800c8da:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c8de:	d82c      	bhi.n	800c93a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c8e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c8e4:	d02f      	beq.n	800c946 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c8e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c8ea:	d826      	bhi.n	800c93a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c8ec:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c8f0:	d02b      	beq.n	800c94a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c8f2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c8f6:	d820      	bhi.n	800c93a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c8f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c8fc:	d012      	beq.n	800c924 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800c8fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c902:	d81a      	bhi.n	800c93a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c904:	2b00      	cmp	r3, #0
 800c906:	d022      	beq.n	800c94e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c908:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c90c:	d115      	bne.n	800c93a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c90e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c912:	3308      	adds	r3, #8
 800c914:	2100      	movs	r1, #0
 800c916:	4618      	mov	r0, r3
 800c918:	f001 fbf6 	bl	800e108 <RCCEx_PLL2_Config>
 800c91c:	4603      	mov	r3, r0
 800c91e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c922:	e015      	b.n	800c950 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c924:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c928:	3328      	adds	r3, #40	@ 0x28
 800c92a:	2102      	movs	r1, #2
 800c92c:	4618      	mov	r0, r3
 800c92e:	f001 fc9d 	bl	800e26c <RCCEx_PLL3_Config>
 800c932:	4603      	mov	r3, r0
 800c934:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c938:	e00a      	b.n	800c950 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c93a:	2301      	movs	r3, #1
 800c93c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c940:	e006      	b.n	800c950 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c942:	bf00      	nop
 800c944:	e004      	b.n	800c950 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c946:	bf00      	nop
 800c948:	e002      	b.n	800c950 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c94a:	bf00      	nop
 800c94c:	e000      	b.n	800c950 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c94e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c950:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c954:	2b00      	cmp	r3, #0
 800c956:	d10b      	bne.n	800c970 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c958:	4ba0      	ldr	r3, [pc, #640]	@ (800cbdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c95a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c95c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800c960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c964:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c968:	4a9c      	ldr	r2, [pc, #624]	@ (800cbdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c96a:	430b      	orrs	r3, r1
 800c96c:	6593      	str	r3, [r2, #88]	@ 0x58
 800c96e:	e003      	b.n	800c978 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c970:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c974:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800c978:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c980:	f002 0308 	and.w	r3, r2, #8
 800c984:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c988:	2300      	movs	r3, #0
 800c98a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c98e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800c992:	460b      	mov	r3, r1
 800c994:	4313      	orrs	r3, r2
 800c996:	d01e      	beq.n	800c9d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800c998:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c99c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c9a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c9a4:	d10c      	bne.n	800c9c0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c9a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9aa:	3328      	adds	r3, #40	@ 0x28
 800c9ac:	2102      	movs	r1, #2
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f001 fc5c 	bl	800e26c <RCCEx_PLL3_Config>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d002      	beq.n	800c9c0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800c9c0:	4b86      	ldr	r3, [pc, #536]	@ (800cbdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c9c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c9c4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c9c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c9d0:	4a82      	ldr	r2, [pc, #520]	@ (800cbdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c9d2:	430b      	orrs	r3, r1
 800c9d4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c9d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9de:	f002 0310 	and.w	r3, r2, #16
 800c9e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c9ec:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800c9f0:	460b      	mov	r3, r1
 800c9f2:	4313      	orrs	r3, r2
 800c9f4:	d01e      	beq.n	800ca34 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c9f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c9fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ca02:	d10c      	bne.n	800ca1e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ca04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca08:	3328      	adds	r3, #40	@ 0x28
 800ca0a:	2102      	movs	r1, #2
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	f001 fc2d 	bl	800e26c <RCCEx_PLL3_Config>
 800ca12:	4603      	mov	r3, r0
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d002      	beq.n	800ca1e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800ca18:	2301      	movs	r3, #1
 800ca1a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ca1e:	4b6f      	ldr	r3, [pc, #444]	@ (800cbdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ca20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca22:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ca26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ca2e:	4a6b      	ldr	r2, [pc, #428]	@ (800cbdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ca30:	430b      	orrs	r3, r1
 800ca32:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ca34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca3c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800ca40:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ca42:	2300      	movs	r3, #0
 800ca44:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ca46:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800ca4a:	460b      	mov	r3, r1
 800ca4c:	4313      	orrs	r3, r2
 800ca4e:	d03e      	beq.n	800cace <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800ca50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ca58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ca5c:	d022      	beq.n	800caa4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800ca5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ca62:	d81b      	bhi.n	800ca9c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d003      	beq.n	800ca70 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800ca68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ca6c:	d00b      	beq.n	800ca86 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800ca6e:	e015      	b.n	800ca9c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ca70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca74:	3308      	adds	r3, #8
 800ca76:	2100      	movs	r1, #0
 800ca78:	4618      	mov	r0, r3
 800ca7a:	f001 fb45 	bl	800e108 <RCCEx_PLL2_Config>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ca84:	e00f      	b.n	800caa6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ca86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca8a:	3328      	adds	r3, #40	@ 0x28
 800ca8c:	2102      	movs	r1, #2
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f001 fbec 	bl	800e26c <RCCEx_PLL3_Config>
 800ca94:	4603      	mov	r3, r0
 800ca96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ca9a:	e004      	b.n	800caa6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ca9c:	2301      	movs	r3, #1
 800ca9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800caa2:	e000      	b.n	800caa6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800caa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800caa6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d10b      	bne.n	800cac6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800caae:	4b4b      	ldr	r3, [pc, #300]	@ (800cbdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cab2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800cab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800caba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800cabe:	4a47      	ldr	r2, [pc, #284]	@ (800cbdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cac0:	430b      	orrs	r3, r1
 800cac2:	6593      	str	r3, [r2, #88]	@ 0x58
 800cac4:	e003      	b.n	800cace <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cac6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800caca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800cace:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800cada:	673b      	str	r3, [r7, #112]	@ 0x70
 800cadc:	2300      	movs	r3, #0
 800cade:	677b      	str	r3, [r7, #116]	@ 0x74
 800cae0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800cae4:	460b      	mov	r3, r1
 800cae6:	4313      	orrs	r3, r2
 800cae8:	d03b      	beq.n	800cb62 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800caea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800caee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800caf2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800caf6:	d01f      	beq.n	800cb38 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800caf8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800cafc:	d818      	bhi.n	800cb30 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800cafe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cb02:	d003      	beq.n	800cb0c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800cb04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cb08:	d007      	beq.n	800cb1a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800cb0a:	e011      	b.n	800cb30 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cb0c:	4b33      	ldr	r3, [pc, #204]	@ (800cbdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cb0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb10:	4a32      	ldr	r2, [pc, #200]	@ (800cbdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cb12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cb16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800cb18:	e00f      	b.n	800cb3a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cb1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb1e:	3328      	adds	r3, #40	@ 0x28
 800cb20:	2101      	movs	r1, #1
 800cb22:	4618      	mov	r0, r3
 800cb24:	f001 fba2 	bl	800e26c <RCCEx_PLL3_Config>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800cb2e:	e004      	b.n	800cb3a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cb30:	2301      	movs	r3, #1
 800cb32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cb36:	e000      	b.n	800cb3a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800cb38:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cb3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d10b      	bne.n	800cb5a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800cb42:	4b26      	ldr	r3, [pc, #152]	@ (800cbdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cb44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb46:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800cb4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cb52:	4a22      	ldr	r2, [pc, #136]	@ (800cbdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cb54:	430b      	orrs	r3, r1
 800cb56:	6553      	str	r3, [r2, #84]	@ 0x54
 800cb58:	e003      	b.n	800cb62 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb5e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800cb62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb6a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800cb6e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cb70:	2300      	movs	r3, #0
 800cb72:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cb74:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800cb78:	460b      	mov	r3, r1
 800cb7a:	4313      	orrs	r3, r2
 800cb7c:	d034      	beq.n	800cbe8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800cb7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d003      	beq.n	800cb90 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800cb88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cb8c:	d007      	beq.n	800cb9e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800cb8e:	e011      	b.n	800cbb4 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cb90:	4b12      	ldr	r3, [pc, #72]	@ (800cbdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cb92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb94:	4a11      	ldr	r2, [pc, #68]	@ (800cbdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cb96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cb9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800cb9c:	e00e      	b.n	800cbbc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cb9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cba2:	3308      	adds	r3, #8
 800cba4:	2102      	movs	r1, #2
 800cba6:	4618      	mov	r0, r3
 800cba8:	f001 faae 	bl	800e108 <RCCEx_PLL2_Config>
 800cbac:	4603      	mov	r3, r0
 800cbae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800cbb2:	e003      	b.n	800cbbc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cbba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cbbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d10d      	bne.n	800cbe0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800cbc4:	4b05      	ldr	r3, [pc, #20]	@ (800cbdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cbc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cbc8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cbcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cbd2:	4a02      	ldr	r2, [pc, #8]	@ (800cbdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cbd4:	430b      	orrs	r3, r1
 800cbd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800cbd8:	e006      	b.n	800cbe8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800cbda:	bf00      	nop
 800cbdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cbe0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cbe4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800cbe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800cbf4:	663b      	str	r3, [r7, #96]	@ 0x60
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	667b      	str	r3, [r7, #100]	@ 0x64
 800cbfa:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800cbfe:	460b      	mov	r3, r1
 800cc00:	4313      	orrs	r3, r2
 800cc02:	d00c      	beq.n	800cc1e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800cc04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc08:	3328      	adds	r3, #40	@ 0x28
 800cc0a:	2102      	movs	r1, #2
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	f001 fb2d 	bl	800e26c <RCCEx_PLL3_Config>
 800cc12:	4603      	mov	r3, r0
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d002      	beq.n	800cc1e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800cc18:	2301      	movs	r3, #1
 800cc1a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800cc1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc26:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800cc2a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cc30:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800cc34:	460b      	mov	r3, r1
 800cc36:	4313      	orrs	r3, r2
 800cc38:	d036      	beq.n	800cca8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800cc3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cc40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cc44:	d018      	beq.n	800cc78 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800cc46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cc4a:	d811      	bhi.n	800cc70 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800cc4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc50:	d014      	beq.n	800cc7c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800cc52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc56:	d80b      	bhi.n	800cc70 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d011      	beq.n	800cc80 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800cc5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cc60:	d106      	bne.n	800cc70 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cc62:	4bb7      	ldr	r3, [pc, #732]	@ (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cc64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc66:	4ab6      	ldr	r2, [pc, #728]	@ (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cc68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cc6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800cc6e:	e008      	b.n	800cc82 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cc70:	2301      	movs	r3, #1
 800cc72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cc76:	e004      	b.n	800cc82 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800cc78:	bf00      	nop
 800cc7a:	e002      	b.n	800cc82 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800cc7c:	bf00      	nop
 800cc7e:	e000      	b.n	800cc82 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800cc80:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cc82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d10a      	bne.n	800cca0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cc8a:	4bad      	ldr	r3, [pc, #692]	@ (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cc8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc8e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800cc92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cc98:	4aa9      	ldr	r2, [pc, #676]	@ (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cc9a:	430b      	orrs	r3, r1
 800cc9c:	6553      	str	r3, [r2, #84]	@ 0x54
 800cc9e:	e003      	b.n	800cca8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cca0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cca4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800cca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800ccb4:	653b      	str	r3, [r7, #80]	@ 0x50
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	657b      	str	r3, [r7, #84]	@ 0x54
 800ccba:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800ccbe:	460b      	mov	r3, r1
 800ccc0:	4313      	orrs	r3, r2
 800ccc2:	d009      	beq.n	800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ccc4:	4b9e      	ldr	r3, [pc, #632]	@ (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ccc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ccc8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800cccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ccd2:	4a9b      	ldr	r2, [pc, #620]	@ (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ccd4:	430b      	orrs	r3, r1
 800ccd6:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ccd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800cce4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cce6:	2300      	movs	r3, #0
 800cce8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ccea:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800ccee:	460b      	mov	r3, r1
 800ccf0:	4313      	orrs	r3, r2
 800ccf2:	d009      	beq.n	800cd08 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ccf4:	4b92      	ldr	r3, [pc, #584]	@ (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ccf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ccf8:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800ccfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cd02:	4a8f      	ldr	r2, [pc, #572]	@ (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cd04:	430b      	orrs	r3, r1
 800cd06:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800cd08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd10:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800cd14:	643b      	str	r3, [r7, #64]	@ 0x40
 800cd16:	2300      	movs	r3, #0
 800cd18:	647b      	str	r3, [r7, #68]	@ 0x44
 800cd1a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800cd1e:	460b      	mov	r3, r1
 800cd20:	4313      	orrs	r3, r2
 800cd22:	d00e      	beq.n	800cd42 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cd24:	4b86      	ldr	r3, [pc, #536]	@ (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cd26:	691b      	ldr	r3, [r3, #16]
 800cd28:	4a85      	ldr	r2, [pc, #532]	@ (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cd2a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800cd2e:	6113      	str	r3, [r2, #16]
 800cd30:	4b83      	ldr	r3, [pc, #524]	@ (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cd32:	6919      	ldr	r1, [r3, #16]
 800cd34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800cd3c:	4a80      	ldr	r2, [pc, #512]	@ (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cd3e:	430b      	orrs	r3, r1
 800cd40:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800cd42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd4a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800cd4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cd50:	2300      	movs	r3, #0
 800cd52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cd54:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800cd58:	460b      	mov	r3, r1
 800cd5a:	4313      	orrs	r3, r2
 800cd5c:	d009      	beq.n	800cd72 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800cd5e:	4b78      	ldr	r3, [pc, #480]	@ (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cd60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cd62:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800cd66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd6c:	4a74      	ldr	r2, [pc, #464]	@ (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cd6e:	430b      	orrs	r3, r1
 800cd70:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800cd72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd7a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800cd7e:	633b      	str	r3, [r7, #48]	@ 0x30
 800cd80:	2300      	movs	r3, #0
 800cd82:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd84:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800cd88:	460b      	mov	r3, r1
 800cd8a:	4313      	orrs	r3, r2
 800cd8c:	d00a      	beq.n	800cda4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800cd8e:	4b6c      	ldr	r3, [pc, #432]	@ (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cd90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd92:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800cd96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cd9e:	4a68      	ldr	r2, [pc, #416]	@ (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cda0:	430b      	orrs	r3, r1
 800cda2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800cda4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdac:	2100      	movs	r1, #0
 800cdae:	62b9      	str	r1, [r7, #40]	@ 0x28
 800cdb0:	f003 0301 	and.w	r3, r3, #1
 800cdb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cdb6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800cdba:	460b      	mov	r3, r1
 800cdbc:	4313      	orrs	r3, r2
 800cdbe:	d011      	beq.n	800cde4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cdc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdc4:	3308      	adds	r3, #8
 800cdc6:	2100      	movs	r1, #0
 800cdc8:	4618      	mov	r0, r3
 800cdca:	f001 f99d 	bl	800e108 <RCCEx_PLL2_Config>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cdd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d003      	beq.n	800cde4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cddc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cde0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800cde4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cde8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdec:	2100      	movs	r1, #0
 800cdee:	6239      	str	r1, [r7, #32]
 800cdf0:	f003 0302 	and.w	r3, r3, #2
 800cdf4:	627b      	str	r3, [r7, #36]	@ 0x24
 800cdf6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800cdfa:	460b      	mov	r3, r1
 800cdfc:	4313      	orrs	r3, r2
 800cdfe:	d011      	beq.n	800ce24 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ce00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce04:	3308      	adds	r3, #8
 800ce06:	2101      	movs	r1, #1
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f001 f97d 	bl	800e108 <RCCEx_PLL2_Config>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800ce14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d003      	beq.n	800ce24 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ce20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ce24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce2c:	2100      	movs	r1, #0
 800ce2e:	61b9      	str	r1, [r7, #24]
 800ce30:	f003 0304 	and.w	r3, r3, #4
 800ce34:	61fb      	str	r3, [r7, #28]
 800ce36:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ce3a:	460b      	mov	r3, r1
 800ce3c:	4313      	orrs	r3, r2
 800ce3e:	d011      	beq.n	800ce64 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ce40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce44:	3308      	adds	r3, #8
 800ce46:	2102      	movs	r1, #2
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f001 f95d 	bl	800e108 <RCCEx_PLL2_Config>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800ce54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d003      	beq.n	800ce64 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ce60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ce64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce6c:	2100      	movs	r1, #0
 800ce6e:	6139      	str	r1, [r7, #16]
 800ce70:	f003 0308 	and.w	r3, r3, #8
 800ce74:	617b      	str	r3, [r7, #20]
 800ce76:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ce7a:	460b      	mov	r3, r1
 800ce7c:	4313      	orrs	r3, r2
 800ce7e:	d011      	beq.n	800cea4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ce80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce84:	3328      	adds	r3, #40	@ 0x28
 800ce86:	2100      	movs	r1, #0
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f001 f9ef 	bl	800e26c <RCCEx_PLL3_Config>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800ce94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d003      	beq.n	800cea4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cea0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800cea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceac:	2100      	movs	r1, #0
 800ceae:	60b9      	str	r1, [r7, #8]
 800ceb0:	f003 0310 	and.w	r3, r3, #16
 800ceb4:	60fb      	str	r3, [r7, #12]
 800ceb6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ceba:	460b      	mov	r3, r1
 800cebc:	4313      	orrs	r3, r2
 800cebe:	d011      	beq.n	800cee4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cec4:	3328      	adds	r3, #40	@ 0x28
 800cec6:	2101      	movs	r1, #1
 800cec8:	4618      	mov	r0, r3
 800ceca:	f001 f9cf 	bl	800e26c <RCCEx_PLL3_Config>
 800cece:	4603      	mov	r3, r0
 800ced0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800ced4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d003      	beq.n	800cee4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cedc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cee0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800cee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceec:	2100      	movs	r1, #0
 800ceee:	6039      	str	r1, [r7, #0]
 800cef0:	f003 0320 	and.w	r3, r3, #32
 800cef4:	607b      	str	r3, [r7, #4]
 800cef6:	e9d7 1200 	ldrd	r1, r2, [r7]
 800cefa:	460b      	mov	r3, r1
 800cefc:	4313      	orrs	r3, r2
 800cefe:	d011      	beq.n	800cf24 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cf00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf04:	3328      	adds	r3, #40	@ 0x28
 800cf06:	2102      	movs	r1, #2
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f001 f9af 	bl	800e26c <RCCEx_PLL3_Config>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cf14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d003      	beq.n	800cf24 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cf20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800cf24:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d101      	bne.n	800cf30 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	e000      	b.n	800cf32 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800cf30:	2301      	movs	r3, #1
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cf3e:	bf00      	nop
 800cf40:	58024400 	.word	0x58024400

0800cf44 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b090      	sub	sp, #64	@ 0x40
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800cf4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf52:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800cf56:	430b      	orrs	r3, r1
 800cf58:	f040 8094 	bne.w	800d084 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800cf5c:	4b9b      	ldr	r3, [pc, #620]	@ (800d1cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cf5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf60:	f003 0307 	and.w	r3, r3, #7
 800cf64:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800cf66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf68:	2b04      	cmp	r3, #4
 800cf6a:	f200 8087 	bhi.w	800d07c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800cf6e:	a201      	add	r2, pc, #4	@ (adr r2, 800cf74 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800cf70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf74:	0800cf89 	.word	0x0800cf89
 800cf78:	0800cfb1 	.word	0x0800cfb1
 800cf7c:	0800cfd9 	.word	0x0800cfd9
 800cf80:	0800d075 	.word	0x0800d075
 800cf84:	0800d001 	.word	0x0800d001
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cf88:	4b90      	ldr	r3, [pc, #576]	@ (800d1cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cf90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cf94:	d108      	bne.n	800cfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cf96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f000 ff62 	bl	800de64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cfa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfa4:	f000 bc93 	b.w	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfac:	f000 bc8f 	b.w	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cfb0:	4b86      	ldr	r3, [pc, #536]	@ (800d1cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cfb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cfbc:	d108      	bne.n	800cfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cfbe:	f107 0318 	add.w	r3, r7, #24
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f000 fca6 	bl	800d914 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cfc8:	69bb      	ldr	r3, [r7, #24]
 800cfca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfcc:	f000 bc7f 	b.w	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfd4:	f000 bc7b 	b.w	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cfd8:	4b7c      	ldr	r3, [pc, #496]	@ (800d1cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cfe0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cfe4:	d108      	bne.n	800cff8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cfe6:	f107 030c 	add.w	r3, r7, #12
 800cfea:	4618      	mov	r0, r3
 800cfec:	f000 fde6 	bl	800dbbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cff4:	f000 bc6b 	b.w	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cff8:	2300      	movs	r3, #0
 800cffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cffc:	f000 bc67 	b.w	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d000:	4b72      	ldr	r3, [pc, #456]	@ (800d1cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d002:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d004:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d008:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d00a:	4b70      	ldr	r3, [pc, #448]	@ (800d1cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	f003 0304 	and.w	r3, r3, #4
 800d012:	2b04      	cmp	r3, #4
 800d014:	d10c      	bne.n	800d030 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800d016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d109      	bne.n	800d030 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d01c:	4b6b      	ldr	r3, [pc, #428]	@ (800d1cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	08db      	lsrs	r3, r3, #3
 800d022:	f003 0303 	and.w	r3, r3, #3
 800d026:	4a6a      	ldr	r2, [pc, #424]	@ (800d1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800d028:	fa22 f303 	lsr.w	r3, r2, r3
 800d02c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d02e:	e01f      	b.n	800d070 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d030:	4b66      	ldr	r3, [pc, #408]	@ (800d1cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d038:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d03c:	d106      	bne.n	800d04c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800d03e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d040:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d044:	d102      	bne.n	800d04c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d046:	4b63      	ldr	r3, [pc, #396]	@ (800d1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800d048:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d04a:	e011      	b.n	800d070 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d04c:	4b5f      	ldr	r3, [pc, #380]	@ (800d1cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d054:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d058:	d106      	bne.n	800d068 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800d05a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d05c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d060:	d102      	bne.n	800d068 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d062:	4b5d      	ldr	r3, [pc, #372]	@ (800d1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d064:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d066:	e003      	b.n	800d070 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d068:	2300      	movs	r3, #0
 800d06a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d06c:	f000 bc2f 	b.w	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d070:	f000 bc2d 	b.w	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d074:	4b59      	ldr	r3, [pc, #356]	@ (800d1dc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800d076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d078:	f000 bc29 	b.w	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d07c:	2300      	movs	r3, #0
 800d07e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d080:	f000 bc25 	b.w	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800d084:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d088:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800d08c:	430b      	orrs	r3, r1
 800d08e:	f040 80a7 	bne.w	800d1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800d092:	4b4e      	ldr	r3, [pc, #312]	@ (800d1cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d096:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800d09a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800d09c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d09e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d0a2:	d054      	beq.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800d0a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d0aa:	f200 808b 	bhi.w	800d1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800d0ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0b0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d0b4:	f000 8083 	beq.w	800d1be <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800d0b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ba:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d0be:	f200 8081 	bhi.w	800d1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800d0c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d0c8:	d02f      	beq.n	800d12a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800d0ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d0d0:	d878      	bhi.n	800d1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800d0d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d004      	beq.n	800d0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800d0d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d0de:	d012      	beq.n	800d106 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800d0e0:	e070      	b.n	800d1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d0e2:	4b3a      	ldr	r3, [pc, #232]	@ (800d1cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d0ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d0ee:	d107      	bne.n	800d100 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d0f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	f000 feb5 	bl	800de64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d0fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0fe:	e3e6      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d100:	2300      	movs	r3, #0
 800d102:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d104:	e3e3      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d106:	4b31      	ldr	r3, [pc, #196]	@ (800d1cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d10e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d112:	d107      	bne.n	800d124 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d114:	f107 0318 	add.w	r3, r7, #24
 800d118:	4618      	mov	r0, r3
 800d11a:	f000 fbfb 	bl	800d914 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d11e:	69bb      	ldr	r3, [r7, #24]
 800d120:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d122:	e3d4      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d124:	2300      	movs	r3, #0
 800d126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d128:	e3d1      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d12a:	4b28      	ldr	r3, [pc, #160]	@ (800d1cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d132:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d136:	d107      	bne.n	800d148 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d138:	f107 030c 	add.w	r3, r7, #12
 800d13c:	4618      	mov	r0, r3
 800d13e:	f000 fd3d 	bl	800dbbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d146:	e3c2      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d148:	2300      	movs	r3, #0
 800d14a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d14c:	e3bf      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d14e:	4b1f      	ldr	r3, [pc, #124]	@ (800d1cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d152:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d156:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d158:	4b1c      	ldr	r3, [pc, #112]	@ (800d1cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	f003 0304 	and.w	r3, r3, #4
 800d160:	2b04      	cmp	r3, #4
 800d162:	d10c      	bne.n	800d17e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800d164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d166:	2b00      	cmp	r3, #0
 800d168:	d109      	bne.n	800d17e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d16a:	4b18      	ldr	r3, [pc, #96]	@ (800d1cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	08db      	lsrs	r3, r3, #3
 800d170:	f003 0303 	and.w	r3, r3, #3
 800d174:	4a16      	ldr	r2, [pc, #88]	@ (800d1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800d176:	fa22 f303 	lsr.w	r3, r2, r3
 800d17a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d17c:	e01e      	b.n	800d1bc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d17e:	4b13      	ldr	r3, [pc, #76]	@ (800d1cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d186:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d18a:	d106      	bne.n	800d19a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800d18c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d18e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d192:	d102      	bne.n	800d19a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d194:	4b0f      	ldr	r3, [pc, #60]	@ (800d1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800d196:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d198:	e010      	b.n	800d1bc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d19a:	4b0c      	ldr	r3, [pc, #48]	@ (800d1cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d1a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d1a6:	d106      	bne.n	800d1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800d1a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d1ae:	d102      	bne.n	800d1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d1b0:	4b09      	ldr	r3, [pc, #36]	@ (800d1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d1b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d1b4:	e002      	b.n	800d1bc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d1ba:	e388      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d1bc:	e387      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d1be:	4b07      	ldr	r3, [pc, #28]	@ (800d1dc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800d1c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1c2:	e384      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1c8:	e381      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d1ca:	bf00      	nop
 800d1cc:	58024400 	.word	0x58024400
 800d1d0:	03d09000 	.word	0x03d09000
 800d1d4:	003d0900 	.word	0x003d0900
 800d1d8:	017d7840 	.word	0x017d7840
 800d1dc:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800d1e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d1e4:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800d1e8:	430b      	orrs	r3, r1
 800d1ea:	f040 809c 	bne.w	800d326 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800d1ee:	4b9e      	ldr	r3, [pc, #632]	@ (800d468 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d1f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d1f2:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800d1f6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800d1f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d1fe:	d054      	beq.n	800d2aa <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800d200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d202:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d206:	f200 808b 	bhi.w	800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800d20a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d20c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d210:	f000 8083 	beq.w	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800d214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d216:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d21a:	f200 8081 	bhi.w	800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800d21e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d220:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d224:	d02f      	beq.n	800d286 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800d226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d228:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d22c:	d878      	bhi.n	800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800d22e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d230:	2b00      	cmp	r3, #0
 800d232:	d004      	beq.n	800d23e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800d234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d236:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d23a:	d012      	beq.n	800d262 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800d23c:	e070      	b.n	800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d23e:	4b8a      	ldr	r3, [pc, #552]	@ (800d468 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d246:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d24a:	d107      	bne.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d24c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d250:	4618      	mov	r0, r3
 800d252:	f000 fe07 	bl	800de64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d258:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d25a:	e338      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d25c:	2300      	movs	r3, #0
 800d25e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d260:	e335      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d262:	4b81      	ldr	r3, [pc, #516]	@ (800d468 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d26a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d26e:	d107      	bne.n	800d280 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d270:	f107 0318 	add.w	r3, r7, #24
 800d274:	4618      	mov	r0, r3
 800d276:	f000 fb4d 	bl	800d914 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d27a:	69bb      	ldr	r3, [r7, #24]
 800d27c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d27e:	e326      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d280:	2300      	movs	r3, #0
 800d282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d284:	e323      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d286:	4b78      	ldr	r3, [pc, #480]	@ (800d468 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d28e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d292:	d107      	bne.n	800d2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d294:	f107 030c 	add.w	r3, r7, #12
 800d298:	4618      	mov	r0, r3
 800d29a:	f000 fc8f 	bl	800dbbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d2a2:	e314      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2a8:	e311      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d2aa:	4b6f      	ldr	r3, [pc, #444]	@ (800d468 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d2ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d2ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d2b2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d2b4:	4b6c      	ldr	r3, [pc, #432]	@ (800d468 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	f003 0304 	and.w	r3, r3, #4
 800d2bc:	2b04      	cmp	r3, #4
 800d2be:	d10c      	bne.n	800d2da <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800d2c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d109      	bne.n	800d2da <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d2c6:	4b68      	ldr	r3, [pc, #416]	@ (800d468 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	08db      	lsrs	r3, r3, #3
 800d2cc:	f003 0303 	and.w	r3, r3, #3
 800d2d0:	4a66      	ldr	r2, [pc, #408]	@ (800d46c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800d2d2:	fa22 f303 	lsr.w	r3, r2, r3
 800d2d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d2d8:	e01e      	b.n	800d318 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d2da:	4b63      	ldr	r3, [pc, #396]	@ (800d468 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d2e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d2e6:	d106      	bne.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800d2e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d2ee:	d102      	bne.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d2f0:	4b5f      	ldr	r3, [pc, #380]	@ (800d470 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800d2f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d2f4:	e010      	b.n	800d318 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d2f6:	4b5c      	ldr	r3, [pc, #368]	@ (800d468 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d2fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d302:	d106      	bne.n	800d312 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800d304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d306:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d30a:	d102      	bne.n	800d312 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d30c:	4b59      	ldr	r3, [pc, #356]	@ (800d474 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d30e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d310:	e002      	b.n	800d318 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d312:	2300      	movs	r3, #0
 800d314:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d316:	e2da      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d318:	e2d9      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d31a:	4b57      	ldr	r3, [pc, #348]	@ (800d478 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800d31c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d31e:	e2d6      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d320:	2300      	movs	r3, #0
 800d322:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d324:	e2d3      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800d326:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d32a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800d32e:	430b      	orrs	r3, r1
 800d330:	f040 80a7 	bne.w	800d482 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800d334:	4b4c      	ldr	r3, [pc, #304]	@ (800d468 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d336:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d338:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800d33c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d33e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d340:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d344:	d055      	beq.n	800d3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800d346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d348:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d34c:	f200 8096 	bhi.w	800d47c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d352:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d356:	f000 8084 	beq.w	800d462 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800d35a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d35c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d360:	f200 808c 	bhi.w	800d47c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d366:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d36a:	d030      	beq.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800d36c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d36e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d372:	f200 8083 	bhi.w	800d47c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d004      	beq.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800d37c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d37e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d382:	d012      	beq.n	800d3aa <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800d384:	e07a      	b.n	800d47c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d386:	4b38      	ldr	r3, [pc, #224]	@ (800d468 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d38e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d392:	d107      	bne.n	800d3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d394:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d398:	4618      	mov	r0, r3
 800d39a:	f000 fd63 	bl	800de64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d39e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d3a2:	e294      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d3a8:	e291      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d3aa:	4b2f      	ldr	r3, [pc, #188]	@ (800d468 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d3b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d3b6:	d107      	bne.n	800d3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d3b8:	f107 0318 	add.w	r3, r7, #24
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f000 faa9 	bl	800d914 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d3c2:	69bb      	ldr	r3, [r7, #24]
 800d3c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d3c6:	e282      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d3cc:	e27f      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d3ce:	4b26      	ldr	r3, [pc, #152]	@ (800d468 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d3d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d3da:	d107      	bne.n	800d3ec <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d3dc:	f107 030c 	add.w	r3, r7, #12
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f000 fbeb 	bl	800dbbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d3ea:	e270      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d3f0:	e26d      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d3f2:	4b1d      	ldr	r3, [pc, #116]	@ (800d468 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d3f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d3f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d3fa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d3fc:	4b1a      	ldr	r3, [pc, #104]	@ (800d468 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	f003 0304 	and.w	r3, r3, #4
 800d404:	2b04      	cmp	r3, #4
 800d406:	d10c      	bne.n	800d422 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800d408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d109      	bne.n	800d422 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d40e:	4b16      	ldr	r3, [pc, #88]	@ (800d468 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	08db      	lsrs	r3, r3, #3
 800d414:	f003 0303 	and.w	r3, r3, #3
 800d418:	4a14      	ldr	r2, [pc, #80]	@ (800d46c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800d41a:	fa22 f303 	lsr.w	r3, r2, r3
 800d41e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d420:	e01e      	b.n	800d460 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d422:	4b11      	ldr	r3, [pc, #68]	@ (800d468 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d42a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d42e:	d106      	bne.n	800d43e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800d430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d432:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d436:	d102      	bne.n	800d43e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d438:	4b0d      	ldr	r3, [pc, #52]	@ (800d470 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800d43a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d43c:	e010      	b.n	800d460 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d43e:	4b0a      	ldr	r3, [pc, #40]	@ (800d468 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d446:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d44a:	d106      	bne.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800d44c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d44e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d452:	d102      	bne.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d454:	4b07      	ldr	r3, [pc, #28]	@ (800d474 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d456:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d458:	e002      	b.n	800d460 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d45a:	2300      	movs	r3, #0
 800d45c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d45e:	e236      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d460:	e235      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d462:	4b05      	ldr	r3, [pc, #20]	@ (800d478 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800d464:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d466:	e232      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d468:	58024400 	.word	0x58024400
 800d46c:	03d09000 	.word	0x03d09000
 800d470:	003d0900 	.word	0x003d0900
 800d474:	017d7840 	.word	0x017d7840
 800d478:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800d47c:	2300      	movs	r3, #0
 800d47e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d480:	e225      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800d482:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d486:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800d48a:	430b      	orrs	r3, r1
 800d48c:	f040 8085 	bne.w	800d59a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800d490:	4b9c      	ldr	r3, [pc, #624]	@ (800d704 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d494:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800d498:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800d49a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d49c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d4a0:	d06b      	beq.n	800d57a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800d4a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d4a8:	d874      	bhi.n	800d594 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d4aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d4b0:	d056      	beq.n	800d560 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800d4b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d4b8:	d86c      	bhi.n	800d594 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d4ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4bc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d4c0:	d03b      	beq.n	800d53a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800d4c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4c4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d4c8:	d864      	bhi.n	800d594 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d4ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d4d0:	d021      	beq.n	800d516 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800d4d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d4d8:	d85c      	bhi.n	800d594 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d4da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d004      	beq.n	800d4ea <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800d4e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d4e6:	d004      	beq.n	800d4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800d4e8:	e054      	b.n	800d594 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800d4ea:	f7fe fb1d 	bl	800bb28 <HAL_RCC_GetPCLK1Freq>
 800d4ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d4f0:	e1ed      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d4f2:	4b84      	ldr	r3, [pc, #528]	@ (800d704 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d4fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d4fe:	d107      	bne.n	800d510 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d500:	f107 0318 	add.w	r3, r7, #24
 800d504:	4618      	mov	r0, r3
 800d506:	f000 fa05 	bl	800d914 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d50a:	69fb      	ldr	r3, [r7, #28]
 800d50c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d50e:	e1de      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d510:	2300      	movs	r3, #0
 800d512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d514:	e1db      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d516:	4b7b      	ldr	r3, [pc, #492]	@ (800d704 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d51e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d522:	d107      	bne.n	800d534 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d524:	f107 030c 	add.w	r3, r7, #12
 800d528:	4618      	mov	r0, r3
 800d52a:	f000 fb47 	bl	800dbbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d52e:	693b      	ldr	r3, [r7, #16]
 800d530:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d532:	e1cc      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d534:	2300      	movs	r3, #0
 800d536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d538:	e1c9      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d53a:	4b72      	ldr	r3, [pc, #456]	@ (800d704 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	f003 0304 	and.w	r3, r3, #4
 800d542:	2b04      	cmp	r3, #4
 800d544:	d109      	bne.n	800d55a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d546:	4b6f      	ldr	r3, [pc, #444]	@ (800d704 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	08db      	lsrs	r3, r3, #3
 800d54c:	f003 0303 	and.w	r3, r3, #3
 800d550:	4a6d      	ldr	r2, [pc, #436]	@ (800d708 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800d552:	fa22 f303 	lsr.w	r3, r2, r3
 800d556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d558:	e1b9      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d55a:	2300      	movs	r3, #0
 800d55c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d55e:	e1b6      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d560:	4b68      	ldr	r3, [pc, #416]	@ (800d704 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d568:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d56c:	d102      	bne.n	800d574 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800d56e:	4b67      	ldr	r3, [pc, #412]	@ (800d70c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800d570:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d572:	e1ac      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d574:	2300      	movs	r3, #0
 800d576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d578:	e1a9      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d57a:	4b62      	ldr	r3, [pc, #392]	@ (800d704 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d582:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d586:	d102      	bne.n	800d58e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800d588:	4b61      	ldr	r3, [pc, #388]	@ (800d710 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d58a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d58c:	e19f      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d58e:	2300      	movs	r3, #0
 800d590:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d592:	e19c      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d594:	2300      	movs	r3, #0
 800d596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d598:	e199      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800d59a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d59e:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800d5a2:	430b      	orrs	r3, r1
 800d5a4:	d173      	bne.n	800d68e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800d5a6:	4b57      	ldr	r3, [pc, #348]	@ (800d704 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d5a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d5aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d5ae:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d5b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d5b6:	d02f      	beq.n	800d618 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800d5b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d5be:	d863      	bhi.n	800d688 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800d5c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d004      	beq.n	800d5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800d5c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d5cc:	d012      	beq.n	800d5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800d5ce:	e05b      	b.n	800d688 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d5d0:	4b4c      	ldr	r3, [pc, #304]	@ (800d704 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d5d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d5dc:	d107      	bne.n	800d5ee <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d5de:	f107 0318 	add.w	r3, r7, #24
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f000 f996 	bl	800d914 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d5e8:	69bb      	ldr	r3, [r7, #24]
 800d5ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d5ec:	e16f      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5f2:	e16c      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d5f4:	4b43      	ldr	r3, [pc, #268]	@ (800d704 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d5fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d600:	d107      	bne.n	800d612 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d602:	f107 030c 	add.w	r3, r7, #12
 800d606:	4618      	mov	r0, r3
 800d608:	f000 fad8 	bl	800dbbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800d60c:	697b      	ldr	r3, [r7, #20]
 800d60e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d610:	e15d      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d612:	2300      	movs	r3, #0
 800d614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d616:	e15a      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d618:	4b3a      	ldr	r3, [pc, #232]	@ (800d704 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d61a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d61c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d620:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d622:	4b38      	ldr	r3, [pc, #224]	@ (800d704 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	f003 0304 	and.w	r3, r3, #4
 800d62a:	2b04      	cmp	r3, #4
 800d62c:	d10c      	bne.n	800d648 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800d62e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d630:	2b00      	cmp	r3, #0
 800d632:	d109      	bne.n	800d648 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d634:	4b33      	ldr	r3, [pc, #204]	@ (800d704 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	08db      	lsrs	r3, r3, #3
 800d63a:	f003 0303 	and.w	r3, r3, #3
 800d63e:	4a32      	ldr	r2, [pc, #200]	@ (800d708 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800d640:	fa22 f303 	lsr.w	r3, r2, r3
 800d644:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d646:	e01e      	b.n	800d686 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d648:	4b2e      	ldr	r3, [pc, #184]	@ (800d704 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d650:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d654:	d106      	bne.n	800d664 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800d656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d658:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d65c:	d102      	bne.n	800d664 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d65e:	4b2b      	ldr	r3, [pc, #172]	@ (800d70c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800d660:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d662:	e010      	b.n	800d686 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d664:	4b27      	ldr	r3, [pc, #156]	@ (800d704 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d66c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d670:	d106      	bne.n	800d680 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800d672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d674:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d678:	d102      	bne.n	800d680 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d67a:	4b25      	ldr	r3, [pc, #148]	@ (800d710 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d67c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d67e:	e002      	b.n	800d686 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d680:	2300      	movs	r3, #0
 800d682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d684:	e123      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d686:	e122      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d688:	2300      	movs	r3, #0
 800d68a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d68c:	e11f      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d68e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d692:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800d696:	430b      	orrs	r3, r1
 800d698:	d13c      	bne.n	800d714 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800d69a:	4b1a      	ldr	r3, [pc, #104]	@ (800d704 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d69c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d69e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d6a2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d6a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d004      	beq.n	800d6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800d6aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d6b0:	d012      	beq.n	800d6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800d6b2:	e023      	b.n	800d6fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d6b4:	4b13      	ldr	r3, [pc, #76]	@ (800d704 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d6bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d6c0:	d107      	bne.n	800d6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d6c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f000 fbcc 	bl	800de64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d6cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d6d0:	e0fd      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d6d6:	e0fa      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d6d8:	4b0a      	ldr	r3, [pc, #40]	@ (800d704 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d6e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d6e4:	d107      	bne.n	800d6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d6e6:	f107 0318 	add.w	r3, r7, #24
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f000 f912 	bl	800d914 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d6f0:	6a3b      	ldr	r3, [r7, #32]
 800d6f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d6f4:	e0eb      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d6fa:	e0e8      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d700:	e0e5      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d702:	bf00      	nop
 800d704:	58024400 	.word	0x58024400
 800d708:	03d09000 	.word	0x03d09000
 800d70c:	003d0900 	.word	0x003d0900
 800d710:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d714:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d718:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800d71c:	430b      	orrs	r3, r1
 800d71e:	f040 8085 	bne.w	800d82c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800d722:	4b6d      	ldr	r3, [pc, #436]	@ (800d8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d726:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800d72a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d72c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d72e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d732:	d06b      	beq.n	800d80c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800d734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d736:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d73a:	d874      	bhi.n	800d826 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d73c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d73e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d742:	d056      	beq.n	800d7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800d744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d746:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d74a:	d86c      	bhi.n	800d826 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d74c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d74e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d752:	d03b      	beq.n	800d7cc <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800d754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d756:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d75a:	d864      	bhi.n	800d826 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d75c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d75e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d762:	d021      	beq.n	800d7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800d764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d766:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d76a:	d85c      	bhi.n	800d826 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d76c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d004      	beq.n	800d77c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800d772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d774:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d778:	d004      	beq.n	800d784 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800d77a:	e054      	b.n	800d826 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d77c:	f000 f8b4 	bl	800d8e8 <HAL_RCCEx_GetD3PCLK1Freq>
 800d780:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d782:	e0a4      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d784:	4b54      	ldr	r3, [pc, #336]	@ (800d8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d78c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d790:	d107      	bne.n	800d7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d792:	f107 0318 	add.w	r3, r7, #24
 800d796:	4618      	mov	r0, r3
 800d798:	f000 f8bc 	bl	800d914 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d79c:	69fb      	ldr	r3, [r7, #28]
 800d79e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d7a0:	e095      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7a6:	e092      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d7a8:	4b4b      	ldr	r3, [pc, #300]	@ (800d8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d7b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d7b4:	d107      	bne.n	800d7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d7b6:	f107 030c 	add.w	r3, r7, #12
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	f000 f9fe 	bl	800dbbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d7c0:	693b      	ldr	r3, [r7, #16]
 800d7c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d7c4:	e083      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7ca:	e080      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d7cc:	4b42      	ldr	r3, [pc, #264]	@ (800d8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	f003 0304 	and.w	r3, r3, #4
 800d7d4:	2b04      	cmp	r3, #4
 800d7d6:	d109      	bne.n	800d7ec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d7d8:	4b3f      	ldr	r3, [pc, #252]	@ (800d8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	08db      	lsrs	r3, r3, #3
 800d7de:	f003 0303 	and.w	r3, r3, #3
 800d7e2:	4a3e      	ldr	r2, [pc, #248]	@ (800d8dc <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800d7e4:	fa22 f303 	lsr.w	r3, r2, r3
 800d7e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d7ea:	e070      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7f0:	e06d      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d7f2:	4b39      	ldr	r3, [pc, #228]	@ (800d8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d7fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d7fe:	d102      	bne.n	800d806 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800d800:	4b37      	ldr	r3, [pc, #220]	@ (800d8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d802:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d804:	e063      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d806:	2300      	movs	r3, #0
 800d808:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d80a:	e060      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d80c:	4b32      	ldr	r3, [pc, #200]	@ (800d8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d814:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d818:	d102      	bne.n	800d820 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800d81a:	4b32      	ldr	r3, [pc, #200]	@ (800d8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d81c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d81e:	e056      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d820:	2300      	movs	r3, #0
 800d822:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d824:	e053      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800d826:	2300      	movs	r3, #0
 800d828:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d82a:	e050      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d82c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d830:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800d834:	430b      	orrs	r3, r1
 800d836:	d148      	bne.n	800d8ca <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d838:	4b27      	ldr	r3, [pc, #156]	@ (800d8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d83a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d83c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d840:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d844:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d848:	d02a      	beq.n	800d8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800d84a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d84c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d850:	d838      	bhi.n	800d8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800d852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d854:	2b00      	cmp	r3, #0
 800d856:	d004      	beq.n	800d862 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800d858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d85a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d85e:	d00d      	beq.n	800d87c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800d860:	e030      	b.n	800d8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d862:	4b1d      	ldr	r3, [pc, #116]	@ (800d8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d86a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d86e:	d102      	bne.n	800d876 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800d870:	4b1c      	ldr	r3, [pc, #112]	@ (800d8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d874:	e02b      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d876:	2300      	movs	r3, #0
 800d878:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d87a:	e028      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d87c:	4b16      	ldr	r3, [pc, #88]	@ (800d8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d884:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d888:	d107      	bne.n	800d89a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d88a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d88e:	4618      	mov	r0, r3
 800d890:	f000 fae8 	bl	800de64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d898:	e019      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d89a:	2300      	movs	r3, #0
 800d89c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d89e:	e016      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d8a0:	4b0d      	ldr	r3, [pc, #52]	@ (800d8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d8a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d8ac:	d107      	bne.n	800d8be <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d8ae:	f107 0318 	add.w	r3, r7, #24
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f000 f82e 	bl	800d914 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d8b8:	69fb      	ldr	r3, [r7, #28]
 800d8ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d8bc:	e007      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d8c2:	e004      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d8c8:	e001      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800d8ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	3740      	adds	r7, #64	@ 0x40
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd80      	pop	{r7, pc}
 800d8d8:	58024400 	.word	0x58024400
 800d8dc:	03d09000 	.word	0x03d09000
 800d8e0:	003d0900 	.word	0x003d0900
 800d8e4:	017d7840 	.word	0x017d7840

0800d8e8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d8ec:	f7fe f8ec 	bl	800bac8 <HAL_RCC_GetHCLKFreq>
 800d8f0:	4602      	mov	r2, r0
 800d8f2:	4b06      	ldr	r3, [pc, #24]	@ (800d90c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d8f4:	6a1b      	ldr	r3, [r3, #32]
 800d8f6:	091b      	lsrs	r3, r3, #4
 800d8f8:	f003 0307 	and.w	r3, r3, #7
 800d8fc:	4904      	ldr	r1, [pc, #16]	@ (800d910 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d8fe:	5ccb      	ldrb	r3, [r1, r3]
 800d900:	f003 031f 	and.w	r3, r3, #31
 800d904:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d908:	4618      	mov	r0, r3
 800d90a:	bd80      	pop	{r7, pc}
 800d90c:	58024400 	.word	0x58024400
 800d910:	0802dfac 	.word	0x0802dfac

0800d914 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d914:	b480      	push	{r7}
 800d916:	b089      	sub	sp, #36	@ 0x24
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d91c:	4ba1      	ldr	r3, [pc, #644]	@ (800dba4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d91e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d920:	f003 0303 	and.w	r3, r3, #3
 800d924:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d926:	4b9f      	ldr	r3, [pc, #636]	@ (800dba4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d92a:	0b1b      	lsrs	r3, r3, #12
 800d92c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d930:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d932:	4b9c      	ldr	r3, [pc, #624]	@ (800dba4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d936:	091b      	lsrs	r3, r3, #4
 800d938:	f003 0301 	and.w	r3, r3, #1
 800d93c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d93e:	4b99      	ldr	r3, [pc, #612]	@ (800dba4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d942:	08db      	lsrs	r3, r3, #3
 800d944:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d948:	693a      	ldr	r2, [r7, #16]
 800d94a:	fb02 f303 	mul.w	r3, r2, r3
 800d94e:	ee07 3a90 	vmov	s15, r3
 800d952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d956:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d95a:	697b      	ldr	r3, [r7, #20]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	f000 8111 	beq.w	800db84 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d962:	69bb      	ldr	r3, [r7, #24]
 800d964:	2b02      	cmp	r3, #2
 800d966:	f000 8083 	beq.w	800da70 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d96a:	69bb      	ldr	r3, [r7, #24]
 800d96c:	2b02      	cmp	r3, #2
 800d96e:	f200 80a1 	bhi.w	800dab4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d972:	69bb      	ldr	r3, [r7, #24]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d003      	beq.n	800d980 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d978:	69bb      	ldr	r3, [r7, #24]
 800d97a:	2b01      	cmp	r3, #1
 800d97c:	d056      	beq.n	800da2c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d97e:	e099      	b.n	800dab4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d980:	4b88      	ldr	r3, [pc, #544]	@ (800dba4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	f003 0320 	and.w	r3, r3, #32
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d02d      	beq.n	800d9e8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d98c:	4b85      	ldr	r3, [pc, #532]	@ (800dba4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	08db      	lsrs	r3, r3, #3
 800d992:	f003 0303 	and.w	r3, r3, #3
 800d996:	4a84      	ldr	r2, [pc, #528]	@ (800dba8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d998:	fa22 f303 	lsr.w	r3, r2, r3
 800d99c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	ee07 3a90 	vmov	s15, r3
 800d9a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9a8:	697b      	ldr	r3, [r7, #20]
 800d9aa:	ee07 3a90 	vmov	s15, r3
 800d9ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9b6:	4b7b      	ldr	r3, [pc, #492]	@ (800dba4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d9b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9be:	ee07 3a90 	vmov	s15, r3
 800d9c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d9ca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800dbac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d9ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d9da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d9e6:	e087      	b.n	800daf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d9e8:	697b      	ldr	r3, [r7, #20]
 800d9ea:	ee07 3a90 	vmov	s15, r3
 800d9ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9f2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800dbb0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d9f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9fa:	4b6a      	ldr	r3, [pc, #424]	@ (800dba4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d9fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da02:	ee07 3a90 	vmov	s15, r3
 800da06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800da0e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800dbac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800da12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800da1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da2a:	e065      	b.n	800daf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800da2c:	697b      	ldr	r3, [r7, #20]
 800da2e:	ee07 3a90 	vmov	s15, r3
 800da32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da36:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800dbb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800da3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da3e:	4b59      	ldr	r3, [pc, #356]	@ (800dba4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800da40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da46:	ee07 3a90 	vmov	s15, r3
 800da4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800da52:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800dbac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800da56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800da62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da6e:	e043      	b.n	800daf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800da70:	697b      	ldr	r3, [r7, #20]
 800da72:	ee07 3a90 	vmov	s15, r3
 800da76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da7a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800dbb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800da7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da82:	4b48      	ldr	r3, [pc, #288]	@ (800dba4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800da84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da8a:	ee07 3a90 	vmov	s15, r3
 800da8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da92:	ed97 6a03 	vldr	s12, [r7, #12]
 800da96:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800dbac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800da9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800daa2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800daa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800daaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800daae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dab2:	e021      	b.n	800daf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800dab4:	697b      	ldr	r3, [r7, #20]
 800dab6:	ee07 3a90 	vmov	s15, r3
 800daba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dabe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800dbb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800dac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dac6:	4b37      	ldr	r3, [pc, #220]	@ (800dba4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800daca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dace:	ee07 3a90 	vmov	s15, r3
 800dad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dad6:	ed97 6a03 	vldr	s12, [r7, #12]
 800dada:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800dbac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800dade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dae6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800daea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800daee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800daf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800daf6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800daf8:	4b2a      	ldr	r3, [pc, #168]	@ (800dba4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dafa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dafc:	0a5b      	lsrs	r3, r3, #9
 800dafe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db02:	ee07 3a90 	vmov	s15, r3
 800db06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800db0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800db12:	edd7 6a07 	vldr	s13, [r7, #28]
 800db16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db1e:	ee17 2a90 	vmov	r2, s15
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800db26:	4b1f      	ldr	r3, [pc, #124]	@ (800dba4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800db28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db2a:	0c1b      	lsrs	r3, r3, #16
 800db2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db30:	ee07 3a90 	vmov	s15, r3
 800db34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800db3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800db40:	edd7 6a07 	vldr	s13, [r7, #28]
 800db44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db4c:	ee17 2a90 	vmov	r2, s15
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800db54:	4b13      	ldr	r3, [pc, #76]	@ (800dba4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800db56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db58:	0e1b      	lsrs	r3, r3, #24
 800db5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db5e:	ee07 3a90 	vmov	s15, r3
 800db62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800db6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800db6e:	edd7 6a07 	vldr	s13, [r7, #28]
 800db72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db7a:	ee17 2a90 	vmov	r2, s15
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800db82:	e008      	b.n	800db96 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2200      	movs	r2, #0
 800db88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	2200      	movs	r2, #0
 800db8e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2200      	movs	r2, #0
 800db94:	609a      	str	r2, [r3, #8]
}
 800db96:	bf00      	nop
 800db98:	3724      	adds	r7, #36	@ 0x24
 800db9a:	46bd      	mov	sp, r7
 800db9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba0:	4770      	bx	lr
 800dba2:	bf00      	nop
 800dba4:	58024400 	.word	0x58024400
 800dba8:	03d09000 	.word	0x03d09000
 800dbac:	46000000 	.word	0x46000000
 800dbb0:	4c742400 	.word	0x4c742400
 800dbb4:	4a742400 	.word	0x4a742400
 800dbb8:	4bbebc20 	.word	0x4bbebc20

0800dbbc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800dbbc:	b480      	push	{r7}
 800dbbe:	b089      	sub	sp, #36	@ 0x24
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800dbc4:	4ba1      	ldr	r3, [pc, #644]	@ (800de4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dbc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbc8:	f003 0303 	and.w	r3, r3, #3
 800dbcc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800dbce:	4b9f      	ldr	r3, [pc, #636]	@ (800de4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dbd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbd2:	0d1b      	lsrs	r3, r3, #20
 800dbd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dbd8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800dbda:	4b9c      	ldr	r3, [pc, #624]	@ (800de4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dbdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbde:	0a1b      	lsrs	r3, r3, #8
 800dbe0:	f003 0301 	and.w	r3, r3, #1
 800dbe4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800dbe6:	4b99      	ldr	r3, [pc, #612]	@ (800de4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dbe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dbea:	08db      	lsrs	r3, r3, #3
 800dbec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dbf0:	693a      	ldr	r2, [r7, #16]
 800dbf2:	fb02 f303 	mul.w	r3, r2, r3
 800dbf6:	ee07 3a90 	vmov	s15, r3
 800dbfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbfe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800dc02:	697b      	ldr	r3, [r7, #20]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	f000 8111 	beq.w	800de2c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800dc0a:	69bb      	ldr	r3, [r7, #24]
 800dc0c:	2b02      	cmp	r3, #2
 800dc0e:	f000 8083 	beq.w	800dd18 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800dc12:	69bb      	ldr	r3, [r7, #24]
 800dc14:	2b02      	cmp	r3, #2
 800dc16:	f200 80a1 	bhi.w	800dd5c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800dc1a:	69bb      	ldr	r3, [r7, #24]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d003      	beq.n	800dc28 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800dc20:	69bb      	ldr	r3, [r7, #24]
 800dc22:	2b01      	cmp	r3, #1
 800dc24:	d056      	beq.n	800dcd4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800dc26:	e099      	b.n	800dd5c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dc28:	4b88      	ldr	r3, [pc, #544]	@ (800de4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	f003 0320 	and.w	r3, r3, #32
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d02d      	beq.n	800dc90 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dc34:	4b85      	ldr	r3, [pc, #532]	@ (800de4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	08db      	lsrs	r3, r3, #3
 800dc3a:	f003 0303 	and.w	r3, r3, #3
 800dc3e:	4a84      	ldr	r2, [pc, #528]	@ (800de50 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800dc40:	fa22 f303 	lsr.w	r3, r2, r3
 800dc44:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800dc46:	68bb      	ldr	r3, [r7, #8]
 800dc48:	ee07 3a90 	vmov	s15, r3
 800dc4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc50:	697b      	ldr	r3, [r7, #20]
 800dc52:	ee07 3a90 	vmov	s15, r3
 800dc56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc5e:	4b7b      	ldr	r3, [pc, #492]	@ (800de4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc66:	ee07 3a90 	vmov	s15, r3
 800dc6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800dc72:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800de54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dc76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dc82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc8a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800dc8e:	e087      	b.n	800dda0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800dc90:	697b      	ldr	r3, [r7, #20]
 800dc92:	ee07 3a90 	vmov	s15, r3
 800dc96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc9a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800de58 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800dc9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dca2:	4b6a      	ldr	r3, [pc, #424]	@ (800de4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcaa:	ee07 3a90 	vmov	s15, r3
 800dcae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dcb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800dcb6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800de54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dcba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dcbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dcc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dcc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dcca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dcce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dcd2:	e065      	b.n	800dda0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800dcd4:	697b      	ldr	r3, [r7, #20]
 800dcd6:	ee07 3a90 	vmov	s15, r3
 800dcda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcde:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800de5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800dce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dce6:	4b59      	ldr	r3, [pc, #356]	@ (800de4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcee:	ee07 3a90 	vmov	s15, r3
 800dcf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dcf6:	ed97 6a03 	vldr	s12, [r7, #12]
 800dcfa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800de54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dcfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dd0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dd16:	e043      	b.n	800dda0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	ee07 3a90 	vmov	s15, r3
 800dd1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd22:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800de60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800dd26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd2a:	4b48      	ldr	r3, [pc, #288]	@ (800de4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dd2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd32:	ee07 3a90 	vmov	s15, r3
 800dd36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800dd3e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800de54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dd42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dd4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dd5a:	e021      	b.n	800dda0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800dd5c:	697b      	ldr	r3, [r7, #20]
 800dd5e:	ee07 3a90 	vmov	s15, r3
 800dd62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd66:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800de5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800dd6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd6e:	4b37      	ldr	r3, [pc, #220]	@ (800de4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dd70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd76:	ee07 3a90 	vmov	s15, r3
 800dd7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800dd82:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800de54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dd86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dd92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dd9e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800dda0:	4b2a      	ldr	r3, [pc, #168]	@ (800de4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dda2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dda4:	0a5b      	lsrs	r3, r3, #9
 800dda6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ddaa:	ee07 3a90 	vmov	s15, r3
 800ddae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ddb2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ddb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ddba:	edd7 6a07 	vldr	s13, [r7, #28]
 800ddbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ddc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ddc6:	ee17 2a90 	vmov	r2, s15
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ddce:	4b1f      	ldr	r3, [pc, #124]	@ (800de4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ddd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddd2:	0c1b      	lsrs	r3, r3, #16
 800ddd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ddd8:	ee07 3a90 	vmov	s15, r3
 800dddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dde0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dde4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dde8:	edd7 6a07 	vldr	s13, [r7, #28]
 800ddec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ddf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ddf4:	ee17 2a90 	vmov	r2, s15
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ddfc:	4b13      	ldr	r3, [pc, #76]	@ (800de4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ddfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de00:	0e1b      	lsrs	r3, r3, #24
 800de02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800de06:	ee07 3a90 	vmov	s15, r3
 800de0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800de12:	ee37 7a87 	vadd.f32	s14, s15, s14
 800de16:	edd7 6a07 	vldr	s13, [r7, #28]
 800de1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800de1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800de22:	ee17 2a90 	vmov	r2, s15
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800de2a:	e008      	b.n	800de3e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	2200      	movs	r2, #0
 800de30:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2200      	movs	r2, #0
 800de36:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2200      	movs	r2, #0
 800de3c:	609a      	str	r2, [r3, #8]
}
 800de3e:	bf00      	nop
 800de40:	3724      	adds	r7, #36	@ 0x24
 800de42:	46bd      	mov	sp, r7
 800de44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de48:	4770      	bx	lr
 800de4a:	bf00      	nop
 800de4c:	58024400 	.word	0x58024400
 800de50:	03d09000 	.word	0x03d09000
 800de54:	46000000 	.word	0x46000000
 800de58:	4c742400 	.word	0x4c742400
 800de5c:	4a742400 	.word	0x4a742400
 800de60:	4bbebc20 	.word	0x4bbebc20

0800de64 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800de64:	b480      	push	{r7}
 800de66:	b089      	sub	sp, #36	@ 0x24
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800de6c:	4ba0      	ldr	r3, [pc, #640]	@ (800e0f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800de6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de70:	f003 0303 	and.w	r3, r3, #3
 800de74:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800de76:	4b9e      	ldr	r3, [pc, #632]	@ (800e0f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800de78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de7a:	091b      	lsrs	r3, r3, #4
 800de7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800de80:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800de82:	4b9b      	ldr	r3, [pc, #620]	@ (800e0f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800de84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de86:	f003 0301 	and.w	r3, r3, #1
 800de8a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800de8c:	4b98      	ldr	r3, [pc, #608]	@ (800e0f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800de8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800de90:	08db      	lsrs	r3, r3, #3
 800de92:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800de96:	693a      	ldr	r2, [r7, #16]
 800de98:	fb02 f303 	mul.w	r3, r2, r3
 800de9c:	ee07 3a90 	vmov	s15, r3
 800dea0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dea4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800dea8:	697b      	ldr	r3, [r7, #20]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	f000 8111 	beq.w	800e0d2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800deb0:	69bb      	ldr	r3, [r7, #24]
 800deb2:	2b02      	cmp	r3, #2
 800deb4:	f000 8083 	beq.w	800dfbe <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800deb8:	69bb      	ldr	r3, [r7, #24]
 800deba:	2b02      	cmp	r3, #2
 800debc:	f200 80a1 	bhi.w	800e002 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800dec0:	69bb      	ldr	r3, [r7, #24]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d003      	beq.n	800dece <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800dec6:	69bb      	ldr	r3, [r7, #24]
 800dec8:	2b01      	cmp	r3, #1
 800deca:	d056      	beq.n	800df7a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800decc:	e099      	b.n	800e002 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dece:	4b88      	ldr	r3, [pc, #544]	@ (800e0f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	f003 0320 	and.w	r3, r3, #32
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d02d      	beq.n	800df36 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800deda:	4b85      	ldr	r3, [pc, #532]	@ (800e0f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	08db      	lsrs	r3, r3, #3
 800dee0:	f003 0303 	and.w	r3, r3, #3
 800dee4:	4a83      	ldr	r2, [pc, #524]	@ (800e0f4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800dee6:	fa22 f303 	lsr.w	r3, r2, r3
 800deea:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	ee07 3a90 	vmov	s15, r3
 800def2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800def6:	697b      	ldr	r3, [r7, #20]
 800def8:	ee07 3a90 	vmov	s15, r3
 800defc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df04:	4b7a      	ldr	r3, [pc, #488]	@ (800e0f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800df06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df0c:	ee07 3a90 	vmov	s15, r3
 800df10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df14:	ed97 6a03 	vldr	s12, [r7, #12]
 800df18:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800e0f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800df1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800df28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df30:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800df34:	e087      	b.n	800e046 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800df36:	697b      	ldr	r3, [r7, #20]
 800df38:	ee07 3a90 	vmov	s15, r3
 800df3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df40:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800e0fc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800df44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df48:	4b69      	ldr	r3, [pc, #420]	@ (800e0f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800df4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df50:	ee07 3a90 	vmov	s15, r3
 800df54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df58:	ed97 6a03 	vldr	s12, [r7, #12]
 800df5c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800e0f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800df60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800df6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df70:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800df78:	e065      	b.n	800e046 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800df7a:	697b      	ldr	r3, [r7, #20]
 800df7c:	ee07 3a90 	vmov	s15, r3
 800df80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df84:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800e100 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800df88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df8c:	4b58      	ldr	r3, [pc, #352]	@ (800e0f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800df8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df94:	ee07 3a90 	vmov	s15, r3
 800df98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df9c:	ed97 6a03 	vldr	s12, [r7, #12]
 800dfa0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800e0f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dfa4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dfa8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dfac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dfb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dfb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfb8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dfbc:	e043      	b.n	800e046 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dfbe:	697b      	ldr	r3, [r7, #20]
 800dfc0:	ee07 3a90 	vmov	s15, r3
 800dfc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dfc8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800e104 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800dfcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dfd0:	4b47      	ldr	r3, [pc, #284]	@ (800e0f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dfd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dfd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dfd8:	ee07 3a90 	vmov	s15, r3
 800dfdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dfe0:	ed97 6a03 	vldr	s12, [r7, #12]
 800dfe4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800e0f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dfe8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dfec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dff0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dff4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dffc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e000:	e021      	b.n	800e046 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e002:	697b      	ldr	r3, [r7, #20]
 800e004:	ee07 3a90 	vmov	s15, r3
 800e008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e00c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800e0fc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800e010:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e014:	4b36      	ldr	r3, [pc, #216]	@ (800e0f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e01c:	ee07 3a90 	vmov	s15, r3
 800e020:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e024:	ed97 6a03 	vldr	s12, [r7, #12]
 800e028:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800e0f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e02c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e030:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e034:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e038:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e03c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e040:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e044:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800e046:	4b2a      	ldr	r3, [pc, #168]	@ (800e0f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e04a:	0a5b      	lsrs	r3, r3, #9
 800e04c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e050:	ee07 3a90 	vmov	s15, r3
 800e054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e058:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e05c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e060:	edd7 6a07 	vldr	s13, [r7, #28]
 800e064:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e068:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e06c:	ee17 2a90 	vmov	r2, s15
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800e074:	4b1e      	ldr	r3, [pc, #120]	@ (800e0f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e078:	0c1b      	lsrs	r3, r3, #16
 800e07a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e07e:	ee07 3a90 	vmov	s15, r3
 800e082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e086:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e08a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e08e:	edd7 6a07 	vldr	s13, [r7, #28]
 800e092:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e096:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e09a:	ee17 2a90 	vmov	r2, s15
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800e0a2:	4b13      	ldr	r3, [pc, #76]	@ (800e0f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e0a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e0a6:	0e1b      	lsrs	r3, r3, #24
 800e0a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e0ac:	ee07 3a90 	vmov	s15, r3
 800e0b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e0b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e0b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e0bc:	edd7 6a07 	vldr	s13, [r7, #28]
 800e0c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e0c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e0c8:	ee17 2a90 	vmov	r2, s15
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800e0d0:	e008      	b.n	800e0e4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2200      	movs	r2, #0
 800e0dc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	609a      	str	r2, [r3, #8]
}
 800e0e4:	bf00      	nop
 800e0e6:	3724      	adds	r7, #36	@ 0x24
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ee:	4770      	bx	lr
 800e0f0:	58024400 	.word	0x58024400
 800e0f4:	03d09000 	.word	0x03d09000
 800e0f8:	46000000 	.word	0x46000000
 800e0fc:	4c742400 	.word	0x4c742400
 800e100:	4a742400 	.word	0x4a742400
 800e104:	4bbebc20 	.word	0x4bbebc20

0800e108 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b084      	sub	sp, #16
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
 800e110:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e112:	2300      	movs	r3, #0
 800e114:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e116:	4b53      	ldr	r3, [pc, #332]	@ (800e264 <RCCEx_PLL2_Config+0x15c>)
 800e118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e11a:	f003 0303 	and.w	r3, r3, #3
 800e11e:	2b03      	cmp	r3, #3
 800e120:	d101      	bne.n	800e126 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800e122:	2301      	movs	r3, #1
 800e124:	e099      	b.n	800e25a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800e126:	4b4f      	ldr	r3, [pc, #316]	@ (800e264 <RCCEx_PLL2_Config+0x15c>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	4a4e      	ldr	r2, [pc, #312]	@ (800e264 <RCCEx_PLL2_Config+0x15c>)
 800e12c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e130:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e132:	f7f7 fc35 	bl	80059a0 <HAL_GetTick>
 800e136:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e138:	e008      	b.n	800e14c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e13a:	f7f7 fc31 	bl	80059a0 <HAL_GetTick>
 800e13e:	4602      	mov	r2, r0
 800e140:	68bb      	ldr	r3, [r7, #8]
 800e142:	1ad3      	subs	r3, r2, r3
 800e144:	2b02      	cmp	r3, #2
 800e146:	d901      	bls.n	800e14c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e148:	2303      	movs	r3, #3
 800e14a:	e086      	b.n	800e25a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e14c:	4b45      	ldr	r3, [pc, #276]	@ (800e264 <RCCEx_PLL2_Config+0x15c>)
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e154:	2b00      	cmp	r3, #0
 800e156:	d1f0      	bne.n	800e13a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800e158:	4b42      	ldr	r3, [pc, #264]	@ (800e264 <RCCEx_PLL2_Config+0x15c>)
 800e15a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e15c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	031b      	lsls	r3, r3, #12
 800e166:	493f      	ldr	r1, [pc, #252]	@ (800e264 <RCCEx_PLL2_Config+0x15c>)
 800e168:	4313      	orrs	r3, r2
 800e16a:	628b      	str	r3, [r1, #40]	@ 0x28
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	685b      	ldr	r3, [r3, #4]
 800e170:	3b01      	subs	r3, #1
 800e172:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	689b      	ldr	r3, [r3, #8]
 800e17a:	3b01      	subs	r3, #1
 800e17c:	025b      	lsls	r3, r3, #9
 800e17e:	b29b      	uxth	r3, r3
 800e180:	431a      	orrs	r2, r3
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	68db      	ldr	r3, [r3, #12]
 800e186:	3b01      	subs	r3, #1
 800e188:	041b      	lsls	r3, r3, #16
 800e18a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800e18e:	431a      	orrs	r2, r3
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	691b      	ldr	r3, [r3, #16]
 800e194:	3b01      	subs	r3, #1
 800e196:	061b      	lsls	r3, r3, #24
 800e198:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800e19c:	4931      	ldr	r1, [pc, #196]	@ (800e264 <RCCEx_PLL2_Config+0x15c>)
 800e19e:	4313      	orrs	r3, r2
 800e1a0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800e1a2:	4b30      	ldr	r3, [pc, #192]	@ (800e264 <RCCEx_PLL2_Config+0x15c>)
 800e1a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1a6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	695b      	ldr	r3, [r3, #20]
 800e1ae:	492d      	ldr	r1, [pc, #180]	@ (800e264 <RCCEx_PLL2_Config+0x15c>)
 800e1b0:	4313      	orrs	r3, r2
 800e1b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800e1b4:	4b2b      	ldr	r3, [pc, #172]	@ (800e264 <RCCEx_PLL2_Config+0x15c>)
 800e1b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1b8:	f023 0220 	bic.w	r2, r3, #32
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	699b      	ldr	r3, [r3, #24]
 800e1c0:	4928      	ldr	r1, [pc, #160]	@ (800e264 <RCCEx_PLL2_Config+0x15c>)
 800e1c2:	4313      	orrs	r3, r2
 800e1c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800e1c6:	4b27      	ldr	r3, [pc, #156]	@ (800e264 <RCCEx_PLL2_Config+0x15c>)
 800e1c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1ca:	4a26      	ldr	r2, [pc, #152]	@ (800e264 <RCCEx_PLL2_Config+0x15c>)
 800e1cc:	f023 0310 	bic.w	r3, r3, #16
 800e1d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800e1d2:	4b24      	ldr	r3, [pc, #144]	@ (800e264 <RCCEx_PLL2_Config+0x15c>)
 800e1d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e1d6:	4b24      	ldr	r3, [pc, #144]	@ (800e268 <RCCEx_PLL2_Config+0x160>)
 800e1d8:	4013      	ands	r3, r2
 800e1da:	687a      	ldr	r2, [r7, #4]
 800e1dc:	69d2      	ldr	r2, [r2, #28]
 800e1de:	00d2      	lsls	r2, r2, #3
 800e1e0:	4920      	ldr	r1, [pc, #128]	@ (800e264 <RCCEx_PLL2_Config+0x15c>)
 800e1e2:	4313      	orrs	r3, r2
 800e1e4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800e1e6:	4b1f      	ldr	r3, [pc, #124]	@ (800e264 <RCCEx_PLL2_Config+0x15c>)
 800e1e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1ea:	4a1e      	ldr	r2, [pc, #120]	@ (800e264 <RCCEx_PLL2_Config+0x15c>)
 800e1ec:	f043 0310 	orr.w	r3, r3, #16
 800e1f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e1f2:	683b      	ldr	r3, [r7, #0]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d106      	bne.n	800e206 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800e1f8:	4b1a      	ldr	r3, [pc, #104]	@ (800e264 <RCCEx_PLL2_Config+0x15c>)
 800e1fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1fc:	4a19      	ldr	r2, [pc, #100]	@ (800e264 <RCCEx_PLL2_Config+0x15c>)
 800e1fe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e202:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e204:	e00f      	b.n	800e226 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e206:	683b      	ldr	r3, [r7, #0]
 800e208:	2b01      	cmp	r3, #1
 800e20a:	d106      	bne.n	800e21a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800e20c:	4b15      	ldr	r3, [pc, #84]	@ (800e264 <RCCEx_PLL2_Config+0x15c>)
 800e20e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e210:	4a14      	ldr	r2, [pc, #80]	@ (800e264 <RCCEx_PLL2_Config+0x15c>)
 800e212:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e216:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e218:	e005      	b.n	800e226 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800e21a:	4b12      	ldr	r3, [pc, #72]	@ (800e264 <RCCEx_PLL2_Config+0x15c>)
 800e21c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e21e:	4a11      	ldr	r2, [pc, #68]	@ (800e264 <RCCEx_PLL2_Config+0x15c>)
 800e220:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e224:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800e226:	4b0f      	ldr	r3, [pc, #60]	@ (800e264 <RCCEx_PLL2_Config+0x15c>)
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	4a0e      	ldr	r2, [pc, #56]	@ (800e264 <RCCEx_PLL2_Config+0x15c>)
 800e22c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e230:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e232:	f7f7 fbb5 	bl	80059a0 <HAL_GetTick>
 800e236:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e238:	e008      	b.n	800e24c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e23a:	f7f7 fbb1 	bl	80059a0 <HAL_GetTick>
 800e23e:	4602      	mov	r2, r0
 800e240:	68bb      	ldr	r3, [r7, #8]
 800e242:	1ad3      	subs	r3, r2, r3
 800e244:	2b02      	cmp	r3, #2
 800e246:	d901      	bls.n	800e24c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e248:	2303      	movs	r3, #3
 800e24a:	e006      	b.n	800e25a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e24c:	4b05      	ldr	r3, [pc, #20]	@ (800e264 <RCCEx_PLL2_Config+0x15c>)
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e254:	2b00      	cmp	r3, #0
 800e256:	d0f0      	beq.n	800e23a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800e258:	7bfb      	ldrb	r3, [r7, #15]
}
 800e25a:	4618      	mov	r0, r3
 800e25c:	3710      	adds	r7, #16
 800e25e:	46bd      	mov	sp, r7
 800e260:	bd80      	pop	{r7, pc}
 800e262:	bf00      	nop
 800e264:	58024400 	.word	0x58024400
 800e268:	ffff0007 	.word	0xffff0007

0800e26c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b084      	sub	sp, #16
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
 800e274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e276:	2300      	movs	r3, #0
 800e278:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e27a:	4b53      	ldr	r3, [pc, #332]	@ (800e3c8 <RCCEx_PLL3_Config+0x15c>)
 800e27c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e27e:	f003 0303 	and.w	r3, r3, #3
 800e282:	2b03      	cmp	r3, #3
 800e284:	d101      	bne.n	800e28a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800e286:	2301      	movs	r3, #1
 800e288:	e099      	b.n	800e3be <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800e28a:	4b4f      	ldr	r3, [pc, #316]	@ (800e3c8 <RCCEx_PLL3_Config+0x15c>)
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	4a4e      	ldr	r2, [pc, #312]	@ (800e3c8 <RCCEx_PLL3_Config+0x15c>)
 800e290:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e294:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e296:	f7f7 fb83 	bl	80059a0 <HAL_GetTick>
 800e29a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e29c:	e008      	b.n	800e2b0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e29e:	f7f7 fb7f 	bl	80059a0 <HAL_GetTick>
 800e2a2:	4602      	mov	r2, r0
 800e2a4:	68bb      	ldr	r3, [r7, #8]
 800e2a6:	1ad3      	subs	r3, r2, r3
 800e2a8:	2b02      	cmp	r3, #2
 800e2aa:	d901      	bls.n	800e2b0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e2ac:	2303      	movs	r3, #3
 800e2ae:	e086      	b.n	800e3be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e2b0:	4b45      	ldr	r3, [pc, #276]	@ (800e3c8 <RCCEx_PLL3_Config+0x15c>)
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d1f0      	bne.n	800e29e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800e2bc:	4b42      	ldr	r3, [pc, #264]	@ (800e3c8 <RCCEx_PLL3_Config+0x15c>)
 800e2be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2c0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	051b      	lsls	r3, r3, #20
 800e2ca:	493f      	ldr	r1, [pc, #252]	@ (800e3c8 <RCCEx_PLL3_Config+0x15c>)
 800e2cc:	4313      	orrs	r3, r2
 800e2ce:	628b      	str	r3, [r1, #40]	@ 0x28
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	685b      	ldr	r3, [r3, #4]
 800e2d4:	3b01      	subs	r3, #1
 800e2d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	689b      	ldr	r3, [r3, #8]
 800e2de:	3b01      	subs	r3, #1
 800e2e0:	025b      	lsls	r3, r3, #9
 800e2e2:	b29b      	uxth	r3, r3
 800e2e4:	431a      	orrs	r2, r3
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	68db      	ldr	r3, [r3, #12]
 800e2ea:	3b01      	subs	r3, #1
 800e2ec:	041b      	lsls	r3, r3, #16
 800e2ee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800e2f2:	431a      	orrs	r2, r3
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	691b      	ldr	r3, [r3, #16]
 800e2f8:	3b01      	subs	r3, #1
 800e2fa:	061b      	lsls	r3, r3, #24
 800e2fc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800e300:	4931      	ldr	r1, [pc, #196]	@ (800e3c8 <RCCEx_PLL3_Config+0x15c>)
 800e302:	4313      	orrs	r3, r2
 800e304:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800e306:	4b30      	ldr	r3, [pc, #192]	@ (800e3c8 <RCCEx_PLL3_Config+0x15c>)
 800e308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e30a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	695b      	ldr	r3, [r3, #20]
 800e312:	492d      	ldr	r1, [pc, #180]	@ (800e3c8 <RCCEx_PLL3_Config+0x15c>)
 800e314:	4313      	orrs	r3, r2
 800e316:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800e318:	4b2b      	ldr	r3, [pc, #172]	@ (800e3c8 <RCCEx_PLL3_Config+0x15c>)
 800e31a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e31c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	699b      	ldr	r3, [r3, #24]
 800e324:	4928      	ldr	r1, [pc, #160]	@ (800e3c8 <RCCEx_PLL3_Config+0x15c>)
 800e326:	4313      	orrs	r3, r2
 800e328:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800e32a:	4b27      	ldr	r3, [pc, #156]	@ (800e3c8 <RCCEx_PLL3_Config+0x15c>)
 800e32c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e32e:	4a26      	ldr	r2, [pc, #152]	@ (800e3c8 <RCCEx_PLL3_Config+0x15c>)
 800e330:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e334:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e336:	4b24      	ldr	r3, [pc, #144]	@ (800e3c8 <RCCEx_PLL3_Config+0x15c>)
 800e338:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e33a:	4b24      	ldr	r3, [pc, #144]	@ (800e3cc <RCCEx_PLL3_Config+0x160>)
 800e33c:	4013      	ands	r3, r2
 800e33e:	687a      	ldr	r2, [r7, #4]
 800e340:	69d2      	ldr	r2, [r2, #28]
 800e342:	00d2      	lsls	r2, r2, #3
 800e344:	4920      	ldr	r1, [pc, #128]	@ (800e3c8 <RCCEx_PLL3_Config+0x15c>)
 800e346:	4313      	orrs	r3, r2
 800e348:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800e34a:	4b1f      	ldr	r3, [pc, #124]	@ (800e3c8 <RCCEx_PLL3_Config+0x15c>)
 800e34c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e34e:	4a1e      	ldr	r2, [pc, #120]	@ (800e3c8 <RCCEx_PLL3_Config+0x15c>)
 800e350:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e354:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d106      	bne.n	800e36a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800e35c:	4b1a      	ldr	r3, [pc, #104]	@ (800e3c8 <RCCEx_PLL3_Config+0x15c>)
 800e35e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e360:	4a19      	ldr	r2, [pc, #100]	@ (800e3c8 <RCCEx_PLL3_Config+0x15c>)
 800e362:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800e366:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e368:	e00f      	b.n	800e38a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e36a:	683b      	ldr	r3, [r7, #0]
 800e36c:	2b01      	cmp	r3, #1
 800e36e:	d106      	bne.n	800e37e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800e370:	4b15      	ldr	r3, [pc, #84]	@ (800e3c8 <RCCEx_PLL3_Config+0x15c>)
 800e372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e374:	4a14      	ldr	r2, [pc, #80]	@ (800e3c8 <RCCEx_PLL3_Config+0x15c>)
 800e376:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800e37a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e37c:	e005      	b.n	800e38a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800e37e:	4b12      	ldr	r3, [pc, #72]	@ (800e3c8 <RCCEx_PLL3_Config+0x15c>)
 800e380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e382:	4a11      	ldr	r2, [pc, #68]	@ (800e3c8 <RCCEx_PLL3_Config+0x15c>)
 800e384:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e388:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800e38a:	4b0f      	ldr	r3, [pc, #60]	@ (800e3c8 <RCCEx_PLL3_Config+0x15c>)
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	4a0e      	ldr	r2, [pc, #56]	@ (800e3c8 <RCCEx_PLL3_Config+0x15c>)
 800e390:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e394:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e396:	f7f7 fb03 	bl	80059a0 <HAL_GetTick>
 800e39a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e39c:	e008      	b.n	800e3b0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e39e:	f7f7 faff 	bl	80059a0 <HAL_GetTick>
 800e3a2:	4602      	mov	r2, r0
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	1ad3      	subs	r3, r2, r3
 800e3a8:	2b02      	cmp	r3, #2
 800e3aa:	d901      	bls.n	800e3b0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e3ac:	2303      	movs	r3, #3
 800e3ae:	e006      	b.n	800e3be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e3b0:	4b05      	ldr	r3, [pc, #20]	@ (800e3c8 <RCCEx_PLL3_Config+0x15c>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d0f0      	beq.n	800e39e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800e3bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3be:	4618      	mov	r0, r3
 800e3c0:	3710      	adds	r7, #16
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	bd80      	pop	{r7, pc}
 800e3c6:	bf00      	nop
 800e3c8:	58024400 	.word	0x58024400
 800e3cc:	ffff0007 	.word	0xffff0007

0800e3d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b082      	sub	sp, #8
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d101      	bne.n	800e3e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e3de:	2301      	movs	r3, #1
 800e3e0:	e049      	b.n	800e476 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e3e8:	b2db      	uxtb	r3, r3
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d106      	bne.n	800e3fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e3f6:	6878      	ldr	r0, [r7, #4]
 800e3f8:	f7f4 f9d6 	bl	80027a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	2202      	movs	r2, #2
 800e400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681a      	ldr	r2, [r3, #0]
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	3304      	adds	r3, #4
 800e40c:	4619      	mov	r1, r3
 800e40e:	4610      	mov	r0, r2
 800e410:	f000 fad4 	bl	800e9bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	2201      	movs	r2, #1
 800e418:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2201      	movs	r2, #1
 800e420:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2201      	movs	r2, #1
 800e428:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	2201      	movs	r2, #1
 800e430:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2201      	movs	r2, #1
 800e438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2201      	movs	r2, #1
 800e440:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	2201      	movs	r2, #1
 800e448:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	2201      	movs	r2, #1
 800e450:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	2201      	movs	r2, #1
 800e458:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	2201      	movs	r2, #1
 800e460:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	2201      	movs	r2, #1
 800e468:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2201      	movs	r2, #1
 800e470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e474:	2300      	movs	r3, #0
}
 800e476:	4618      	mov	r0, r3
 800e478:	3708      	adds	r7, #8
 800e47a:	46bd      	mov	sp, r7
 800e47c:	bd80      	pop	{r7, pc}
	...

0800e480 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e480:	b480      	push	{r7}
 800e482:	b085      	sub	sp, #20
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e48e:	b2db      	uxtb	r3, r3
 800e490:	2b01      	cmp	r3, #1
 800e492:	d001      	beq.n	800e498 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e494:	2301      	movs	r3, #1
 800e496:	e05e      	b.n	800e556 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	2202      	movs	r2, #2
 800e49c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	68da      	ldr	r2, [r3, #12]
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	f042 0201 	orr.w	r2, r2, #1
 800e4ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	4a2b      	ldr	r2, [pc, #172]	@ (800e564 <HAL_TIM_Base_Start_IT+0xe4>)
 800e4b6:	4293      	cmp	r3, r2
 800e4b8:	d02c      	beq.n	800e514 <HAL_TIM_Base_Start_IT+0x94>
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e4c2:	d027      	beq.n	800e514 <HAL_TIM_Base_Start_IT+0x94>
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	4a27      	ldr	r2, [pc, #156]	@ (800e568 <HAL_TIM_Base_Start_IT+0xe8>)
 800e4ca:	4293      	cmp	r3, r2
 800e4cc:	d022      	beq.n	800e514 <HAL_TIM_Base_Start_IT+0x94>
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	4a26      	ldr	r2, [pc, #152]	@ (800e56c <HAL_TIM_Base_Start_IT+0xec>)
 800e4d4:	4293      	cmp	r3, r2
 800e4d6:	d01d      	beq.n	800e514 <HAL_TIM_Base_Start_IT+0x94>
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	4a24      	ldr	r2, [pc, #144]	@ (800e570 <HAL_TIM_Base_Start_IT+0xf0>)
 800e4de:	4293      	cmp	r3, r2
 800e4e0:	d018      	beq.n	800e514 <HAL_TIM_Base_Start_IT+0x94>
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	4a23      	ldr	r2, [pc, #140]	@ (800e574 <HAL_TIM_Base_Start_IT+0xf4>)
 800e4e8:	4293      	cmp	r3, r2
 800e4ea:	d013      	beq.n	800e514 <HAL_TIM_Base_Start_IT+0x94>
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	4a21      	ldr	r2, [pc, #132]	@ (800e578 <HAL_TIM_Base_Start_IT+0xf8>)
 800e4f2:	4293      	cmp	r3, r2
 800e4f4:	d00e      	beq.n	800e514 <HAL_TIM_Base_Start_IT+0x94>
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	4a20      	ldr	r2, [pc, #128]	@ (800e57c <HAL_TIM_Base_Start_IT+0xfc>)
 800e4fc:	4293      	cmp	r3, r2
 800e4fe:	d009      	beq.n	800e514 <HAL_TIM_Base_Start_IT+0x94>
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	4a1e      	ldr	r2, [pc, #120]	@ (800e580 <HAL_TIM_Base_Start_IT+0x100>)
 800e506:	4293      	cmp	r3, r2
 800e508:	d004      	beq.n	800e514 <HAL_TIM_Base_Start_IT+0x94>
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	4a1d      	ldr	r2, [pc, #116]	@ (800e584 <HAL_TIM_Base_Start_IT+0x104>)
 800e510:	4293      	cmp	r3, r2
 800e512:	d115      	bne.n	800e540 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	689a      	ldr	r2, [r3, #8]
 800e51a:	4b1b      	ldr	r3, [pc, #108]	@ (800e588 <HAL_TIM_Base_Start_IT+0x108>)
 800e51c:	4013      	ands	r3, r2
 800e51e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	2b06      	cmp	r3, #6
 800e524:	d015      	beq.n	800e552 <HAL_TIM_Base_Start_IT+0xd2>
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e52c:	d011      	beq.n	800e552 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	681a      	ldr	r2, [r3, #0]
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	f042 0201 	orr.w	r2, r2, #1
 800e53c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e53e:	e008      	b.n	800e552 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	681a      	ldr	r2, [r3, #0]
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	f042 0201 	orr.w	r2, r2, #1
 800e54e:	601a      	str	r2, [r3, #0]
 800e550:	e000      	b.n	800e554 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e552:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e554:	2300      	movs	r3, #0
}
 800e556:	4618      	mov	r0, r3
 800e558:	3714      	adds	r7, #20
 800e55a:	46bd      	mov	sp, r7
 800e55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e560:	4770      	bx	lr
 800e562:	bf00      	nop
 800e564:	40010000 	.word	0x40010000
 800e568:	40000400 	.word	0x40000400
 800e56c:	40000800 	.word	0x40000800
 800e570:	40000c00 	.word	0x40000c00
 800e574:	40010400 	.word	0x40010400
 800e578:	40001800 	.word	0x40001800
 800e57c:	40014000 	.word	0x40014000
 800e580:	4000e000 	.word	0x4000e000
 800e584:	4000e400 	.word	0x4000e400
 800e588:	00010007 	.word	0x00010007

0800e58c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b086      	sub	sp, #24
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
 800e594:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d101      	bne.n	800e5a0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800e59c:	2301      	movs	r3, #1
 800e59e:	e08f      	b.n	800e6c0 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e5a6:	b2db      	uxtb	r3, r3
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d106      	bne.n	800e5ba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800e5b4:	6878      	ldr	r0, [r7, #4]
 800e5b6:	f7f4 f919 	bl	80027ec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	2202      	movs	r2, #2
 800e5be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	6899      	ldr	r1, [r3, #8]
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681a      	ldr	r2, [r3, #0]
 800e5cc:	4b3e      	ldr	r3, [pc, #248]	@ (800e6c8 <HAL_TIM_Encoder_Init+0x13c>)
 800e5ce:	400b      	ands	r3, r1
 800e5d0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681a      	ldr	r2, [r3, #0]
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	3304      	adds	r3, #4
 800e5da:	4619      	mov	r1, r3
 800e5dc:	4610      	mov	r0, r2
 800e5de:	f000 f9ed 	bl	800e9bc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	689b      	ldr	r3, [r3, #8]
 800e5e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	699b      	ldr	r3, [r3, #24]
 800e5f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	6a1b      	ldr	r3, [r3, #32]
 800e5f8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800e5fa:	683b      	ldr	r3, [r7, #0]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	697a      	ldr	r2, [r7, #20]
 800e600:	4313      	orrs	r3, r2
 800e602:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800e604:	693a      	ldr	r2, [r7, #16]
 800e606:	4b31      	ldr	r3, [pc, #196]	@ (800e6cc <HAL_TIM_Encoder_Init+0x140>)
 800e608:	4013      	ands	r3, r2
 800e60a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800e60c:	683b      	ldr	r3, [r7, #0]
 800e60e:	689a      	ldr	r2, [r3, #8]
 800e610:	683b      	ldr	r3, [r7, #0]
 800e612:	699b      	ldr	r3, [r3, #24]
 800e614:	021b      	lsls	r3, r3, #8
 800e616:	4313      	orrs	r3, r2
 800e618:	693a      	ldr	r2, [r7, #16]
 800e61a:	4313      	orrs	r3, r2
 800e61c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800e61e:	693a      	ldr	r2, [r7, #16]
 800e620:	4b2b      	ldr	r3, [pc, #172]	@ (800e6d0 <HAL_TIM_Encoder_Init+0x144>)
 800e622:	4013      	ands	r3, r2
 800e624:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800e626:	693a      	ldr	r2, [r7, #16]
 800e628:	4b2a      	ldr	r3, [pc, #168]	@ (800e6d4 <HAL_TIM_Encoder_Init+0x148>)
 800e62a:	4013      	ands	r3, r2
 800e62c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	68da      	ldr	r2, [r3, #12]
 800e632:	683b      	ldr	r3, [r7, #0]
 800e634:	69db      	ldr	r3, [r3, #28]
 800e636:	021b      	lsls	r3, r3, #8
 800e638:	4313      	orrs	r3, r2
 800e63a:	693a      	ldr	r2, [r7, #16]
 800e63c:	4313      	orrs	r3, r2
 800e63e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	691b      	ldr	r3, [r3, #16]
 800e644:	011a      	lsls	r2, r3, #4
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	6a1b      	ldr	r3, [r3, #32]
 800e64a:	031b      	lsls	r3, r3, #12
 800e64c:	4313      	orrs	r3, r2
 800e64e:	693a      	ldr	r2, [r7, #16]
 800e650:	4313      	orrs	r3, r2
 800e652:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800e65a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800e662:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	685a      	ldr	r2, [r3, #4]
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	695b      	ldr	r3, [r3, #20]
 800e66c:	011b      	lsls	r3, r3, #4
 800e66e:	4313      	orrs	r3, r2
 800e670:	68fa      	ldr	r2, [r7, #12]
 800e672:	4313      	orrs	r3, r2
 800e674:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	697a      	ldr	r2, [r7, #20]
 800e67c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	693a      	ldr	r2, [r7, #16]
 800e684:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	68fa      	ldr	r2, [r7, #12]
 800e68c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	2201      	movs	r2, #1
 800e692:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	2201      	movs	r2, #1
 800e69a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2201      	movs	r2, #1
 800e6a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	2201      	movs	r2, #1
 800e6aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	2201      	movs	r2, #1
 800e6b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	2201      	movs	r2, #1
 800e6ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e6be:	2300      	movs	r3, #0
}
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	3718      	adds	r7, #24
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	bd80      	pop	{r7, pc}
 800e6c8:	fffebff8 	.word	0xfffebff8
 800e6cc:	fffffcfc 	.word	0xfffffcfc
 800e6d0:	fffff3f3 	.word	0xfffff3f3
 800e6d4:	ffff0f0f 	.word	0xffff0f0f

0800e6d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b084      	sub	sp, #16
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	68db      	ldr	r3, [r3, #12]
 800e6e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	691b      	ldr	r3, [r3, #16]
 800e6ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e6f0:	68bb      	ldr	r3, [r7, #8]
 800e6f2:	f003 0302 	and.w	r3, r3, #2
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d020      	beq.n	800e73c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	f003 0302 	and.w	r3, r3, #2
 800e700:	2b00      	cmp	r3, #0
 800e702:	d01b      	beq.n	800e73c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	f06f 0202 	mvn.w	r2, #2
 800e70c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	2201      	movs	r2, #1
 800e712:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	699b      	ldr	r3, [r3, #24]
 800e71a:	f003 0303 	and.w	r3, r3, #3
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d003      	beq.n	800e72a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e722:	6878      	ldr	r0, [r7, #4]
 800e724:	f000 f92b 	bl	800e97e <HAL_TIM_IC_CaptureCallback>
 800e728:	e005      	b.n	800e736 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e72a:	6878      	ldr	r0, [r7, #4]
 800e72c:	f000 f91d 	bl	800e96a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e730:	6878      	ldr	r0, [r7, #4]
 800e732:	f000 f92e 	bl	800e992 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	2200      	movs	r2, #0
 800e73a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e73c:	68bb      	ldr	r3, [r7, #8]
 800e73e:	f003 0304 	and.w	r3, r3, #4
 800e742:	2b00      	cmp	r3, #0
 800e744:	d020      	beq.n	800e788 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	f003 0304 	and.w	r3, r3, #4
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d01b      	beq.n	800e788 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	f06f 0204 	mvn.w	r2, #4
 800e758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	2202      	movs	r2, #2
 800e75e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	699b      	ldr	r3, [r3, #24]
 800e766:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d003      	beq.n	800e776 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e76e:	6878      	ldr	r0, [r7, #4]
 800e770:	f000 f905 	bl	800e97e <HAL_TIM_IC_CaptureCallback>
 800e774:	e005      	b.n	800e782 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e776:	6878      	ldr	r0, [r7, #4]
 800e778:	f000 f8f7 	bl	800e96a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e77c:	6878      	ldr	r0, [r7, #4]
 800e77e:	f000 f908 	bl	800e992 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	2200      	movs	r2, #0
 800e786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e788:	68bb      	ldr	r3, [r7, #8]
 800e78a:	f003 0308 	and.w	r3, r3, #8
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d020      	beq.n	800e7d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	f003 0308 	and.w	r3, r3, #8
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d01b      	beq.n	800e7d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	f06f 0208 	mvn.w	r2, #8
 800e7a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	2204      	movs	r2, #4
 800e7aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	69db      	ldr	r3, [r3, #28]
 800e7b2:	f003 0303 	and.w	r3, r3, #3
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d003      	beq.n	800e7c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e7ba:	6878      	ldr	r0, [r7, #4]
 800e7bc:	f000 f8df 	bl	800e97e <HAL_TIM_IC_CaptureCallback>
 800e7c0:	e005      	b.n	800e7ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e7c2:	6878      	ldr	r0, [r7, #4]
 800e7c4:	f000 f8d1 	bl	800e96a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e7c8:	6878      	ldr	r0, [r7, #4]
 800e7ca:	f000 f8e2 	bl	800e992 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e7d4:	68bb      	ldr	r3, [r7, #8]
 800e7d6:	f003 0310 	and.w	r3, r3, #16
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d020      	beq.n	800e820 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	f003 0310 	and.w	r3, r3, #16
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d01b      	beq.n	800e820 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	f06f 0210 	mvn.w	r2, #16
 800e7f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	2208      	movs	r2, #8
 800e7f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	69db      	ldr	r3, [r3, #28]
 800e7fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e802:	2b00      	cmp	r3, #0
 800e804:	d003      	beq.n	800e80e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e806:	6878      	ldr	r0, [r7, #4]
 800e808:	f000 f8b9 	bl	800e97e <HAL_TIM_IC_CaptureCallback>
 800e80c:	e005      	b.n	800e81a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e80e:	6878      	ldr	r0, [r7, #4]
 800e810:	f000 f8ab 	bl	800e96a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e814:	6878      	ldr	r0, [r7, #4]
 800e816:	f000 f8bc 	bl	800e992 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	2200      	movs	r2, #0
 800e81e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e820:	68bb      	ldr	r3, [r7, #8]
 800e822:	f003 0301 	and.w	r3, r3, #1
 800e826:	2b00      	cmp	r3, #0
 800e828:	d00c      	beq.n	800e844 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	f003 0301 	and.w	r3, r3, #1
 800e830:	2b00      	cmp	r3, #0
 800e832:	d007      	beq.n	800e844 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	f06f 0201 	mvn.w	r2, #1
 800e83c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e83e:	6878      	ldr	r0, [r7, #4]
 800e840:	f7f3 f8c6 	bl	80019d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e844:	68bb      	ldr	r3, [r7, #8]
 800e846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d104      	bne.n	800e858 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e84e:	68bb      	ldr	r3, [r7, #8]
 800e850:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e854:	2b00      	cmp	r3, #0
 800e856:	d00c      	beq.n	800e872 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d007      	beq.n	800e872 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e86a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e86c:	6878      	ldr	r0, [r7, #4]
 800e86e:	f000 fb67 	bl	800ef40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e872:	68bb      	ldr	r3, [r7, #8]
 800e874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d00c      	beq.n	800e896 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e882:	2b00      	cmp	r3, #0
 800e884:	d007      	beq.n	800e896 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e88e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e890:	6878      	ldr	r0, [r7, #4]
 800e892:	f000 fb5f 	bl	800ef54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e896:	68bb      	ldr	r3, [r7, #8]
 800e898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d00c      	beq.n	800e8ba <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d007      	beq.n	800e8ba <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e8b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e8b4:	6878      	ldr	r0, [r7, #4]
 800e8b6:	f000 f876 	bl	800e9a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e8ba:	68bb      	ldr	r3, [r7, #8]
 800e8bc:	f003 0320 	and.w	r3, r3, #32
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d00c      	beq.n	800e8de <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	f003 0320 	and.w	r3, r3, #32
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d007      	beq.n	800e8de <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	f06f 0220 	mvn.w	r2, #32
 800e8d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e8d8:	6878      	ldr	r0, [r7, #4]
 800e8da:	f000 fb27 	bl	800ef2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e8de:	bf00      	nop
 800e8e0:	3710      	adds	r7, #16
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	bd80      	pop	{r7, pc}

0800e8e6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800e8e6:	b580      	push	{r7, lr}
 800e8e8:	b082      	sub	sp, #8
 800e8ea:	af00      	add	r7, sp, #0
 800e8ec:	6078      	str	r0, [r7, #4]
 800e8ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e8f6:	2b01      	cmp	r3, #1
 800e8f8:	d101      	bne.n	800e8fe <HAL_TIM_SlaveConfigSynchro+0x18>
 800e8fa:	2302      	movs	r3, #2
 800e8fc:	e031      	b.n	800e962 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	2201      	movs	r2, #1
 800e902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	2202      	movs	r2, #2
 800e90a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800e90e:	6839      	ldr	r1, [r7, #0]
 800e910:	6878      	ldr	r0, [r7, #4]
 800e912:	f000 f905 	bl	800eb20 <TIM_SlaveTimer_SetConfig>
 800e916:	4603      	mov	r3, r0
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d009      	beq.n	800e930 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2201      	movs	r2, #1
 800e920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	2200      	movs	r2, #0
 800e928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800e92c:	2301      	movs	r3, #1
 800e92e:	e018      	b.n	800e962 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	68da      	ldr	r2, [r3, #12]
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e93e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	68da      	ldr	r2, [r3, #12]
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800e94e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2201      	movs	r2, #1
 800e954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	2200      	movs	r2, #0
 800e95c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e960:	2300      	movs	r3, #0
}
 800e962:	4618      	mov	r0, r3
 800e964:	3708      	adds	r7, #8
 800e966:	46bd      	mov	sp, r7
 800e968:	bd80      	pop	{r7, pc}

0800e96a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e96a:	b480      	push	{r7}
 800e96c:	b083      	sub	sp, #12
 800e96e:	af00      	add	r7, sp, #0
 800e970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e972:	bf00      	nop
 800e974:	370c      	adds	r7, #12
 800e976:	46bd      	mov	sp, r7
 800e978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97c:	4770      	bx	lr

0800e97e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e97e:	b480      	push	{r7}
 800e980:	b083      	sub	sp, #12
 800e982:	af00      	add	r7, sp, #0
 800e984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e986:	bf00      	nop
 800e988:	370c      	adds	r7, #12
 800e98a:	46bd      	mov	sp, r7
 800e98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e990:	4770      	bx	lr

0800e992 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e992:	b480      	push	{r7}
 800e994:	b083      	sub	sp, #12
 800e996:	af00      	add	r7, sp, #0
 800e998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e99a:	bf00      	nop
 800e99c:	370c      	adds	r7, #12
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a4:	4770      	bx	lr

0800e9a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e9a6:	b480      	push	{r7}
 800e9a8:	b083      	sub	sp, #12
 800e9aa:	af00      	add	r7, sp, #0
 800e9ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e9ae:	bf00      	nop
 800e9b0:	370c      	adds	r7, #12
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b8:	4770      	bx	lr
	...

0800e9bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e9bc:	b480      	push	{r7}
 800e9be:	b085      	sub	sp, #20
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
 800e9c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	4a4a      	ldr	r2, [pc, #296]	@ (800eaf8 <TIM_Base_SetConfig+0x13c>)
 800e9d0:	4293      	cmp	r3, r2
 800e9d2:	d013      	beq.n	800e9fc <TIM_Base_SetConfig+0x40>
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e9da:	d00f      	beq.n	800e9fc <TIM_Base_SetConfig+0x40>
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	4a47      	ldr	r2, [pc, #284]	@ (800eafc <TIM_Base_SetConfig+0x140>)
 800e9e0:	4293      	cmp	r3, r2
 800e9e2:	d00b      	beq.n	800e9fc <TIM_Base_SetConfig+0x40>
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	4a46      	ldr	r2, [pc, #280]	@ (800eb00 <TIM_Base_SetConfig+0x144>)
 800e9e8:	4293      	cmp	r3, r2
 800e9ea:	d007      	beq.n	800e9fc <TIM_Base_SetConfig+0x40>
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	4a45      	ldr	r2, [pc, #276]	@ (800eb04 <TIM_Base_SetConfig+0x148>)
 800e9f0:	4293      	cmp	r3, r2
 800e9f2:	d003      	beq.n	800e9fc <TIM_Base_SetConfig+0x40>
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	4a44      	ldr	r2, [pc, #272]	@ (800eb08 <TIM_Base_SetConfig+0x14c>)
 800e9f8:	4293      	cmp	r3, r2
 800e9fa:	d108      	bne.n	800ea0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ea02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	685b      	ldr	r3, [r3, #4]
 800ea08:	68fa      	ldr	r2, [r7, #12]
 800ea0a:	4313      	orrs	r3, r2
 800ea0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	4a39      	ldr	r2, [pc, #228]	@ (800eaf8 <TIM_Base_SetConfig+0x13c>)
 800ea12:	4293      	cmp	r3, r2
 800ea14:	d027      	beq.n	800ea66 <TIM_Base_SetConfig+0xaa>
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ea1c:	d023      	beq.n	800ea66 <TIM_Base_SetConfig+0xaa>
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	4a36      	ldr	r2, [pc, #216]	@ (800eafc <TIM_Base_SetConfig+0x140>)
 800ea22:	4293      	cmp	r3, r2
 800ea24:	d01f      	beq.n	800ea66 <TIM_Base_SetConfig+0xaa>
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	4a35      	ldr	r2, [pc, #212]	@ (800eb00 <TIM_Base_SetConfig+0x144>)
 800ea2a:	4293      	cmp	r3, r2
 800ea2c:	d01b      	beq.n	800ea66 <TIM_Base_SetConfig+0xaa>
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	4a34      	ldr	r2, [pc, #208]	@ (800eb04 <TIM_Base_SetConfig+0x148>)
 800ea32:	4293      	cmp	r3, r2
 800ea34:	d017      	beq.n	800ea66 <TIM_Base_SetConfig+0xaa>
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	4a33      	ldr	r2, [pc, #204]	@ (800eb08 <TIM_Base_SetConfig+0x14c>)
 800ea3a:	4293      	cmp	r3, r2
 800ea3c:	d013      	beq.n	800ea66 <TIM_Base_SetConfig+0xaa>
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	4a32      	ldr	r2, [pc, #200]	@ (800eb0c <TIM_Base_SetConfig+0x150>)
 800ea42:	4293      	cmp	r3, r2
 800ea44:	d00f      	beq.n	800ea66 <TIM_Base_SetConfig+0xaa>
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	4a31      	ldr	r2, [pc, #196]	@ (800eb10 <TIM_Base_SetConfig+0x154>)
 800ea4a:	4293      	cmp	r3, r2
 800ea4c:	d00b      	beq.n	800ea66 <TIM_Base_SetConfig+0xaa>
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	4a30      	ldr	r2, [pc, #192]	@ (800eb14 <TIM_Base_SetConfig+0x158>)
 800ea52:	4293      	cmp	r3, r2
 800ea54:	d007      	beq.n	800ea66 <TIM_Base_SetConfig+0xaa>
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	4a2f      	ldr	r2, [pc, #188]	@ (800eb18 <TIM_Base_SetConfig+0x15c>)
 800ea5a:	4293      	cmp	r3, r2
 800ea5c:	d003      	beq.n	800ea66 <TIM_Base_SetConfig+0xaa>
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	4a2e      	ldr	r2, [pc, #184]	@ (800eb1c <TIM_Base_SetConfig+0x160>)
 800ea62:	4293      	cmp	r3, r2
 800ea64:	d108      	bne.n	800ea78 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ea6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ea6e:	683b      	ldr	r3, [r7, #0]
 800ea70:	68db      	ldr	r3, [r3, #12]
 800ea72:	68fa      	ldr	r2, [r7, #12]
 800ea74:	4313      	orrs	r3, r2
 800ea76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	695b      	ldr	r3, [r3, #20]
 800ea82:	4313      	orrs	r3, r2
 800ea84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	68fa      	ldr	r2, [r7, #12]
 800ea8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	689a      	ldr	r2, [r3, #8]
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ea94:	683b      	ldr	r3, [r7, #0]
 800ea96:	681a      	ldr	r2, [r3, #0]
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	4a16      	ldr	r2, [pc, #88]	@ (800eaf8 <TIM_Base_SetConfig+0x13c>)
 800eaa0:	4293      	cmp	r3, r2
 800eaa2:	d00f      	beq.n	800eac4 <TIM_Base_SetConfig+0x108>
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	4a18      	ldr	r2, [pc, #96]	@ (800eb08 <TIM_Base_SetConfig+0x14c>)
 800eaa8:	4293      	cmp	r3, r2
 800eaaa:	d00b      	beq.n	800eac4 <TIM_Base_SetConfig+0x108>
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	4a17      	ldr	r2, [pc, #92]	@ (800eb0c <TIM_Base_SetConfig+0x150>)
 800eab0:	4293      	cmp	r3, r2
 800eab2:	d007      	beq.n	800eac4 <TIM_Base_SetConfig+0x108>
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	4a16      	ldr	r2, [pc, #88]	@ (800eb10 <TIM_Base_SetConfig+0x154>)
 800eab8:	4293      	cmp	r3, r2
 800eaba:	d003      	beq.n	800eac4 <TIM_Base_SetConfig+0x108>
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	4a15      	ldr	r2, [pc, #84]	@ (800eb14 <TIM_Base_SetConfig+0x158>)
 800eac0:	4293      	cmp	r3, r2
 800eac2:	d103      	bne.n	800eacc <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	691a      	ldr	r2, [r3, #16]
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2201      	movs	r2, #1
 800ead0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	691b      	ldr	r3, [r3, #16]
 800ead6:	f003 0301 	and.w	r3, r3, #1
 800eada:	2b01      	cmp	r3, #1
 800eadc:	d105      	bne.n	800eaea <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	691b      	ldr	r3, [r3, #16]
 800eae2:	f023 0201 	bic.w	r2, r3, #1
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	611a      	str	r2, [r3, #16]
  }
}
 800eaea:	bf00      	nop
 800eaec:	3714      	adds	r7, #20
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf4:	4770      	bx	lr
 800eaf6:	bf00      	nop
 800eaf8:	40010000 	.word	0x40010000
 800eafc:	40000400 	.word	0x40000400
 800eb00:	40000800 	.word	0x40000800
 800eb04:	40000c00 	.word	0x40000c00
 800eb08:	40010400 	.word	0x40010400
 800eb0c:	40014000 	.word	0x40014000
 800eb10:	40014400 	.word	0x40014400
 800eb14:	40014800 	.word	0x40014800
 800eb18:	4000e000 	.word	0x4000e000
 800eb1c:	4000e400 	.word	0x4000e400

0800eb20 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b086      	sub	sp, #24
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
 800eb28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	689b      	ldr	r3, [r3, #8]
 800eb34:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800eb36:	693a      	ldr	r2, [r7, #16]
 800eb38:	4b65      	ldr	r3, [pc, #404]	@ (800ecd0 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800eb3a:	4013      	ands	r3, r2
 800eb3c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800eb3e:	683b      	ldr	r3, [r7, #0]
 800eb40:	685b      	ldr	r3, [r3, #4]
 800eb42:	693a      	ldr	r2, [r7, #16]
 800eb44:	4313      	orrs	r3, r2
 800eb46:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800eb48:	693a      	ldr	r2, [r7, #16]
 800eb4a:	4b62      	ldr	r3, [pc, #392]	@ (800ecd4 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800eb4c:	4013      	ands	r3, r2
 800eb4e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	693a      	ldr	r2, [r7, #16]
 800eb56:	4313      	orrs	r3, r2
 800eb58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	693a      	ldr	r2, [r7, #16]
 800eb60:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	685b      	ldr	r3, [r3, #4]
 800eb66:	4a5c      	ldr	r2, [pc, #368]	@ (800ecd8 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800eb68:	4293      	cmp	r3, r2
 800eb6a:	f000 80ab 	beq.w	800ecc4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800eb6e:	4a5a      	ldr	r2, [pc, #360]	@ (800ecd8 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800eb70:	4293      	cmp	r3, r2
 800eb72:	f200 80a4 	bhi.w	800ecbe <TIM_SlaveTimer_SetConfig+0x19e>
 800eb76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800eb7a:	f000 80a3 	beq.w	800ecc4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800eb7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800eb82:	f200 809c 	bhi.w	800ecbe <TIM_SlaveTimer_SetConfig+0x19e>
 800eb86:	4a55      	ldr	r2, [pc, #340]	@ (800ecdc <TIM_SlaveTimer_SetConfig+0x1bc>)
 800eb88:	4293      	cmp	r3, r2
 800eb8a:	f000 809b 	beq.w	800ecc4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800eb8e:	4a53      	ldr	r2, [pc, #332]	@ (800ecdc <TIM_SlaveTimer_SetConfig+0x1bc>)
 800eb90:	4293      	cmp	r3, r2
 800eb92:	f200 8094 	bhi.w	800ecbe <TIM_SlaveTimer_SetConfig+0x19e>
 800eb96:	4a52      	ldr	r2, [pc, #328]	@ (800ece0 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800eb98:	4293      	cmp	r3, r2
 800eb9a:	f000 8093 	beq.w	800ecc4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800eb9e:	4a50      	ldr	r2, [pc, #320]	@ (800ece0 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800eba0:	4293      	cmp	r3, r2
 800eba2:	f200 808c 	bhi.w	800ecbe <TIM_SlaveTimer_SetConfig+0x19e>
 800eba6:	4a4f      	ldr	r2, [pc, #316]	@ (800ece4 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800eba8:	4293      	cmp	r3, r2
 800ebaa:	f000 808b 	beq.w	800ecc4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800ebae:	4a4d      	ldr	r2, [pc, #308]	@ (800ece4 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800ebb0:	4293      	cmp	r3, r2
 800ebb2:	f200 8084 	bhi.w	800ecbe <TIM_SlaveTimer_SetConfig+0x19e>
 800ebb6:	4a4c      	ldr	r2, [pc, #304]	@ (800ece8 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800ebb8:	4293      	cmp	r3, r2
 800ebba:	f000 8083 	beq.w	800ecc4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800ebbe:	4a4a      	ldr	r2, [pc, #296]	@ (800ece8 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800ebc0:	4293      	cmp	r3, r2
 800ebc2:	d87c      	bhi.n	800ecbe <TIM_SlaveTimer_SetConfig+0x19e>
 800ebc4:	4a49      	ldr	r2, [pc, #292]	@ (800ecec <TIM_SlaveTimer_SetConfig+0x1cc>)
 800ebc6:	4293      	cmp	r3, r2
 800ebc8:	d07c      	beq.n	800ecc4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800ebca:	4a48      	ldr	r2, [pc, #288]	@ (800ecec <TIM_SlaveTimer_SetConfig+0x1cc>)
 800ebcc:	4293      	cmp	r3, r2
 800ebce:	d876      	bhi.n	800ecbe <TIM_SlaveTimer_SetConfig+0x19e>
 800ebd0:	4a47      	ldr	r2, [pc, #284]	@ (800ecf0 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800ebd2:	4293      	cmp	r3, r2
 800ebd4:	d076      	beq.n	800ecc4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800ebd6:	4a46      	ldr	r2, [pc, #280]	@ (800ecf0 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800ebd8:	4293      	cmp	r3, r2
 800ebda:	d870      	bhi.n	800ecbe <TIM_SlaveTimer_SetConfig+0x19e>
 800ebdc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ebe0:	d070      	beq.n	800ecc4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800ebe2:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ebe6:	d86a      	bhi.n	800ecbe <TIM_SlaveTimer_SetConfig+0x19e>
 800ebe8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ebec:	d06a      	beq.n	800ecc4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800ebee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ebf2:	d864      	bhi.n	800ecbe <TIM_SlaveTimer_SetConfig+0x19e>
 800ebf4:	2b70      	cmp	r3, #112	@ 0x70
 800ebf6:	d01a      	beq.n	800ec2e <TIM_SlaveTimer_SetConfig+0x10e>
 800ebf8:	2b70      	cmp	r3, #112	@ 0x70
 800ebfa:	d860      	bhi.n	800ecbe <TIM_SlaveTimer_SetConfig+0x19e>
 800ebfc:	2b60      	cmp	r3, #96	@ 0x60
 800ebfe:	d054      	beq.n	800ecaa <TIM_SlaveTimer_SetConfig+0x18a>
 800ec00:	2b60      	cmp	r3, #96	@ 0x60
 800ec02:	d85c      	bhi.n	800ecbe <TIM_SlaveTimer_SetConfig+0x19e>
 800ec04:	2b50      	cmp	r3, #80	@ 0x50
 800ec06:	d046      	beq.n	800ec96 <TIM_SlaveTimer_SetConfig+0x176>
 800ec08:	2b50      	cmp	r3, #80	@ 0x50
 800ec0a:	d858      	bhi.n	800ecbe <TIM_SlaveTimer_SetConfig+0x19e>
 800ec0c:	2b40      	cmp	r3, #64	@ 0x40
 800ec0e:	d019      	beq.n	800ec44 <TIM_SlaveTimer_SetConfig+0x124>
 800ec10:	2b40      	cmp	r3, #64	@ 0x40
 800ec12:	d854      	bhi.n	800ecbe <TIM_SlaveTimer_SetConfig+0x19e>
 800ec14:	2b30      	cmp	r3, #48	@ 0x30
 800ec16:	d055      	beq.n	800ecc4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800ec18:	2b30      	cmp	r3, #48	@ 0x30
 800ec1a:	d850      	bhi.n	800ecbe <TIM_SlaveTimer_SetConfig+0x19e>
 800ec1c:	2b20      	cmp	r3, #32
 800ec1e:	d051      	beq.n	800ecc4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800ec20:	2b20      	cmp	r3, #32
 800ec22:	d84c      	bhi.n	800ecbe <TIM_SlaveTimer_SetConfig+0x19e>
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d04d      	beq.n	800ecc4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800ec28:	2b10      	cmp	r3, #16
 800ec2a:	d04b      	beq.n	800ecc4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800ec2c:	e047      	b.n	800ecbe <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800ec36:	683b      	ldr	r3, [r7, #0]
 800ec38:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800ec3e:	f000 f8b8 	bl	800edb2 <TIM_ETR_SetConfig>
      break;
 800ec42:	e040      	b.n	800ecc6 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800ec44:	683b      	ldr	r3, [r7, #0]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	2b05      	cmp	r3, #5
 800ec4a:	d101      	bne.n	800ec50 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	e03b      	b.n	800ecc8 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	6a1b      	ldr	r3, [r3, #32]
 800ec56:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	6a1a      	ldr	r2, [r3, #32]
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	f022 0201 	bic.w	r2, r2, #1
 800ec66:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	699b      	ldr	r3, [r3, #24]
 800ec6e:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ec70:	68bb      	ldr	r3, [r7, #8]
 800ec72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ec76:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800ec78:	683b      	ldr	r3, [r7, #0]
 800ec7a:	691b      	ldr	r3, [r3, #16]
 800ec7c:	011b      	lsls	r3, r3, #4
 800ec7e:	68ba      	ldr	r2, [r7, #8]
 800ec80:	4313      	orrs	r3, r2
 800ec82:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	68ba      	ldr	r2, [r7, #8]
 800ec8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	68fa      	ldr	r2, [r7, #12]
 800ec92:	621a      	str	r2, [r3, #32]
      break;
 800ec94:	e017      	b.n	800ecc6 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800ec9a:	683b      	ldr	r3, [r7, #0]
 800ec9c:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800ec9e:	683b      	ldr	r3, [r7, #0]
 800eca0:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800eca2:	461a      	mov	r2, r3
 800eca4:	f000 f826 	bl	800ecf4 <TIM_TI1_ConfigInputStage>
      break;
 800eca8:	e00d      	b.n	800ecc6 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800ecae:	683b      	ldr	r3, [r7, #0]
 800ecb0:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ecb6:	461a      	mov	r2, r3
 800ecb8:	f000 f84b 	bl	800ed52 <TIM_TI2_ConfigInputStage>
      break;
 800ecbc:	e003      	b.n	800ecc6 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800ecbe:	2301      	movs	r3, #1
 800ecc0:	75fb      	strb	r3, [r7, #23]
      break;
 800ecc2:	e000      	b.n	800ecc6 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 800ecc4:	bf00      	nop
  }

  return status;
 800ecc6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	3718      	adds	r7, #24
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}
 800ecd0:	ffcfff8f 	.word	0xffcfff8f
 800ecd4:	fffefff8 	.word	0xfffefff8
 800ecd8:	00200010 	.word	0x00200010
 800ecdc:	00100070 	.word	0x00100070
 800ece0:	00100060 	.word	0x00100060
 800ece4:	00100050 	.word	0x00100050
 800ece8:	00100040 	.word	0x00100040
 800ecec:	00100030 	.word	0x00100030
 800ecf0:	00100020 	.word	0x00100020

0800ecf4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ecf4:	b480      	push	{r7}
 800ecf6:	b087      	sub	sp, #28
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	60f8      	str	r0, [r7, #12]
 800ecfc:	60b9      	str	r1, [r7, #8]
 800ecfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	6a1b      	ldr	r3, [r3, #32]
 800ed04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	6a1b      	ldr	r3, [r3, #32]
 800ed0a:	f023 0201 	bic.w	r2, r3, #1
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	699b      	ldr	r3, [r3, #24]
 800ed16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ed18:	693b      	ldr	r3, [r7, #16]
 800ed1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ed1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	011b      	lsls	r3, r3, #4
 800ed24:	693a      	ldr	r2, [r7, #16]
 800ed26:	4313      	orrs	r3, r2
 800ed28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ed2a:	697b      	ldr	r3, [r7, #20]
 800ed2c:	f023 030a 	bic.w	r3, r3, #10
 800ed30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ed32:	697a      	ldr	r2, [r7, #20]
 800ed34:	68bb      	ldr	r3, [r7, #8]
 800ed36:	4313      	orrs	r3, r2
 800ed38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	693a      	ldr	r2, [r7, #16]
 800ed3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	697a      	ldr	r2, [r7, #20]
 800ed44:	621a      	str	r2, [r3, #32]
}
 800ed46:	bf00      	nop
 800ed48:	371c      	adds	r7, #28
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed50:	4770      	bx	lr

0800ed52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ed52:	b480      	push	{r7}
 800ed54:	b087      	sub	sp, #28
 800ed56:	af00      	add	r7, sp, #0
 800ed58:	60f8      	str	r0, [r7, #12]
 800ed5a:	60b9      	str	r1, [r7, #8]
 800ed5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	6a1b      	ldr	r3, [r3, #32]
 800ed62:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	6a1b      	ldr	r3, [r3, #32]
 800ed68:	f023 0210 	bic.w	r2, r3, #16
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	699b      	ldr	r3, [r3, #24]
 800ed74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ed76:	693b      	ldr	r3, [r7, #16]
 800ed78:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ed7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	031b      	lsls	r3, r3, #12
 800ed82:	693a      	ldr	r2, [r7, #16]
 800ed84:	4313      	orrs	r3, r2
 800ed86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ed88:	697b      	ldr	r3, [r7, #20]
 800ed8a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ed8e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ed90:	68bb      	ldr	r3, [r7, #8]
 800ed92:	011b      	lsls	r3, r3, #4
 800ed94:	697a      	ldr	r2, [r7, #20]
 800ed96:	4313      	orrs	r3, r2
 800ed98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	693a      	ldr	r2, [r7, #16]
 800ed9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	697a      	ldr	r2, [r7, #20]
 800eda4:	621a      	str	r2, [r3, #32]
}
 800eda6:	bf00      	nop
 800eda8:	371c      	adds	r7, #28
 800edaa:	46bd      	mov	sp, r7
 800edac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb0:	4770      	bx	lr

0800edb2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800edb2:	b480      	push	{r7}
 800edb4:	b087      	sub	sp, #28
 800edb6:	af00      	add	r7, sp, #0
 800edb8:	60f8      	str	r0, [r7, #12]
 800edba:	60b9      	str	r1, [r7, #8]
 800edbc:	607a      	str	r2, [r7, #4]
 800edbe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	689b      	ldr	r3, [r3, #8]
 800edc4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800edc6:	697b      	ldr	r3, [r7, #20]
 800edc8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800edcc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800edce:	683b      	ldr	r3, [r7, #0]
 800edd0:	021a      	lsls	r2, r3, #8
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	431a      	orrs	r2, r3
 800edd6:	68bb      	ldr	r3, [r7, #8]
 800edd8:	4313      	orrs	r3, r2
 800edda:	697a      	ldr	r2, [r7, #20]
 800eddc:	4313      	orrs	r3, r2
 800edde:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	697a      	ldr	r2, [r7, #20]
 800ede4:	609a      	str	r2, [r3, #8]
}
 800ede6:	bf00      	nop
 800ede8:	371c      	adds	r7, #28
 800edea:	46bd      	mov	sp, r7
 800edec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf0:	4770      	bx	lr
	...

0800edf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800edf4:	b480      	push	{r7}
 800edf6:	b085      	sub	sp, #20
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
 800edfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ee04:	2b01      	cmp	r3, #1
 800ee06:	d101      	bne.n	800ee0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ee08:	2302      	movs	r3, #2
 800ee0a:	e077      	b.n	800eefc <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	2201      	movs	r2, #1
 800ee10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	2202      	movs	r2, #2
 800ee18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	685b      	ldr	r3, [r3, #4]
 800ee22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	689b      	ldr	r3, [r3, #8]
 800ee2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	4a35      	ldr	r2, [pc, #212]	@ (800ef08 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ee32:	4293      	cmp	r3, r2
 800ee34:	d004      	beq.n	800ee40 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	4a34      	ldr	r2, [pc, #208]	@ (800ef0c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ee3c:	4293      	cmp	r3, r2
 800ee3e:	d108      	bne.n	800ee52 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ee46:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	685b      	ldr	r3, [r3, #4]
 800ee4c:	68fa      	ldr	r2, [r7, #12]
 800ee4e:	4313      	orrs	r3, r2
 800ee50:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ee58:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ee5a:	683b      	ldr	r3, [r7, #0]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	68fa      	ldr	r2, [r7, #12]
 800ee60:	4313      	orrs	r3, r2
 800ee62:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	68fa      	ldr	r2, [r7, #12]
 800ee6a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	4a25      	ldr	r2, [pc, #148]	@ (800ef08 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ee72:	4293      	cmp	r3, r2
 800ee74:	d02c      	beq.n	800eed0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ee7e:	d027      	beq.n	800eed0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	4a22      	ldr	r2, [pc, #136]	@ (800ef10 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ee86:	4293      	cmp	r3, r2
 800ee88:	d022      	beq.n	800eed0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	4a21      	ldr	r2, [pc, #132]	@ (800ef14 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ee90:	4293      	cmp	r3, r2
 800ee92:	d01d      	beq.n	800eed0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	4a1f      	ldr	r2, [pc, #124]	@ (800ef18 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ee9a:	4293      	cmp	r3, r2
 800ee9c:	d018      	beq.n	800eed0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	4a1a      	ldr	r2, [pc, #104]	@ (800ef0c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800eea4:	4293      	cmp	r3, r2
 800eea6:	d013      	beq.n	800eed0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	4a1b      	ldr	r2, [pc, #108]	@ (800ef1c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800eeae:	4293      	cmp	r3, r2
 800eeb0:	d00e      	beq.n	800eed0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	4a1a      	ldr	r2, [pc, #104]	@ (800ef20 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800eeb8:	4293      	cmp	r3, r2
 800eeba:	d009      	beq.n	800eed0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	4a18      	ldr	r2, [pc, #96]	@ (800ef24 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800eec2:	4293      	cmp	r3, r2
 800eec4:	d004      	beq.n	800eed0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	4a17      	ldr	r2, [pc, #92]	@ (800ef28 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800eecc:	4293      	cmp	r3, r2
 800eece:	d10c      	bne.n	800eeea <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800eed0:	68bb      	ldr	r3, [r7, #8]
 800eed2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800eed6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800eed8:	683b      	ldr	r3, [r7, #0]
 800eeda:	689b      	ldr	r3, [r3, #8]
 800eedc:	68ba      	ldr	r2, [r7, #8]
 800eede:	4313      	orrs	r3, r2
 800eee0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	68ba      	ldr	r2, [r7, #8]
 800eee8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	2201      	movs	r2, #1
 800eeee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	2200      	movs	r2, #0
 800eef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800eefa:	2300      	movs	r3, #0
}
 800eefc:	4618      	mov	r0, r3
 800eefe:	3714      	adds	r7, #20
 800ef00:	46bd      	mov	sp, r7
 800ef02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef06:	4770      	bx	lr
 800ef08:	40010000 	.word	0x40010000
 800ef0c:	40010400 	.word	0x40010400
 800ef10:	40000400 	.word	0x40000400
 800ef14:	40000800 	.word	0x40000800
 800ef18:	40000c00 	.word	0x40000c00
 800ef1c:	40001800 	.word	0x40001800
 800ef20:	40014000 	.word	0x40014000
 800ef24:	4000e000 	.word	0x4000e000
 800ef28:	4000e400 	.word	0x4000e400

0800ef2c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ef2c:	b480      	push	{r7}
 800ef2e:	b083      	sub	sp, #12
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ef34:	bf00      	nop
 800ef36:	370c      	adds	r7, #12
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3e:	4770      	bx	lr

0800ef40 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ef40:	b480      	push	{r7}
 800ef42:	b083      	sub	sp, #12
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ef48:	bf00      	nop
 800ef4a:	370c      	adds	r7, #12
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef52:	4770      	bx	lr

0800ef54 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ef54:	b480      	push	{r7}
 800ef56:	b083      	sub	sp, #12
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ef5c:	bf00      	nop
 800ef5e:	370c      	adds	r7, #12
 800ef60:	46bd      	mov	sp, r7
 800ef62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef66:	4770      	bx	lr

0800ef68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b082      	sub	sp, #8
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d101      	bne.n	800ef7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ef76:	2301      	movs	r3, #1
 800ef78:	e042      	b.n	800f000 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d106      	bne.n	800ef92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	2200      	movs	r2, #0
 800ef88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ef8c:	6878      	ldr	r0, [r7, #4]
 800ef8e:	f7f3 fc77 	bl	8002880 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	2224      	movs	r2, #36	@ 0x24
 800ef96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	681a      	ldr	r2, [r3, #0]
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	f022 0201 	bic.w	r2, r2, #1
 800efa8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d002      	beq.n	800efb8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800efb2:	6878      	ldr	r0, [r7, #4]
 800efb4:	f000 fe94 	bl	800fce0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800efb8:	6878      	ldr	r0, [r7, #4]
 800efba:	f000 f825 	bl	800f008 <UART_SetConfig>
 800efbe:	4603      	mov	r3, r0
 800efc0:	2b01      	cmp	r3, #1
 800efc2:	d101      	bne.n	800efc8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800efc4:	2301      	movs	r3, #1
 800efc6:	e01b      	b.n	800f000 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	685a      	ldr	r2, [r3, #4]
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800efd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	689a      	ldr	r2, [r3, #8]
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800efe6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	681a      	ldr	r2, [r3, #0]
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	f042 0201 	orr.w	r2, r2, #1
 800eff6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800eff8:	6878      	ldr	r0, [r7, #4]
 800effa:	f000 ff13 	bl	800fe24 <UART_CheckIdleState>
 800effe:	4603      	mov	r3, r0
}
 800f000:	4618      	mov	r0, r3
 800f002:	3708      	adds	r7, #8
 800f004:	46bd      	mov	sp, r7
 800f006:	bd80      	pop	{r7, pc}

0800f008 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f008:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f00c:	b092      	sub	sp, #72	@ 0x48
 800f00e:	af00      	add	r7, sp, #0
 800f010:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f012:	2300      	movs	r3, #0
 800f014:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f018:	697b      	ldr	r3, [r7, #20]
 800f01a:	689a      	ldr	r2, [r3, #8]
 800f01c:	697b      	ldr	r3, [r7, #20]
 800f01e:	691b      	ldr	r3, [r3, #16]
 800f020:	431a      	orrs	r2, r3
 800f022:	697b      	ldr	r3, [r7, #20]
 800f024:	695b      	ldr	r3, [r3, #20]
 800f026:	431a      	orrs	r2, r3
 800f028:	697b      	ldr	r3, [r7, #20]
 800f02a:	69db      	ldr	r3, [r3, #28]
 800f02c:	4313      	orrs	r3, r2
 800f02e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f030:	697b      	ldr	r3, [r7, #20]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	681a      	ldr	r2, [r3, #0]
 800f036:	4bbe      	ldr	r3, [pc, #760]	@ (800f330 <UART_SetConfig+0x328>)
 800f038:	4013      	ands	r3, r2
 800f03a:	697a      	ldr	r2, [r7, #20]
 800f03c:	6812      	ldr	r2, [r2, #0]
 800f03e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f040:	430b      	orrs	r3, r1
 800f042:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f044:	697b      	ldr	r3, [r7, #20]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	685b      	ldr	r3, [r3, #4]
 800f04a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f04e:	697b      	ldr	r3, [r7, #20]
 800f050:	68da      	ldr	r2, [r3, #12]
 800f052:	697b      	ldr	r3, [r7, #20]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	430a      	orrs	r2, r1
 800f058:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f05a:	697b      	ldr	r3, [r7, #20]
 800f05c:	699b      	ldr	r3, [r3, #24]
 800f05e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f060:	697b      	ldr	r3, [r7, #20]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	4ab3      	ldr	r2, [pc, #716]	@ (800f334 <UART_SetConfig+0x32c>)
 800f066:	4293      	cmp	r3, r2
 800f068:	d004      	beq.n	800f074 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f06a:	697b      	ldr	r3, [r7, #20]
 800f06c:	6a1b      	ldr	r3, [r3, #32]
 800f06e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f070:	4313      	orrs	r3, r2
 800f072:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f074:	697b      	ldr	r3, [r7, #20]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	689a      	ldr	r2, [r3, #8]
 800f07a:	4baf      	ldr	r3, [pc, #700]	@ (800f338 <UART_SetConfig+0x330>)
 800f07c:	4013      	ands	r3, r2
 800f07e:	697a      	ldr	r2, [r7, #20]
 800f080:	6812      	ldr	r2, [r2, #0]
 800f082:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f084:	430b      	orrs	r3, r1
 800f086:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f088:	697b      	ldr	r3, [r7, #20]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f08e:	f023 010f 	bic.w	r1, r3, #15
 800f092:	697b      	ldr	r3, [r7, #20]
 800f094:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f096:	697b      	ldr	r3, [r7, #20]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	430a      	orrs	r2, r1
 800f09c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f09e:	697b      	ldr	r3, [r7, #20]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	4aa6      	ldr	r2, [pc, #664]	@ (800f33c <UART_SetConfig+0x334>)
 800f0a4:	4293      	cmp	r3, r2
 800f0a6:	d177      	bne.n	800f198 <UART_SetConfig+0x190>
 800f0a8:	4ba5      	ldr	r3, [pc, #660]	@ (800f340 <UART_SetConfig+0x338>)
 800f0aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f0ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f0b0:	2b28      	cmp	r3, #40	@ 0x28
 800f0b2:	d86d      	bhi.n	800f190 <UART_SetConfig+0x188>
 800f0b4:	a201      	add	r2, pc, #4	@ (adr r2, 800f0bc <UART_SetConfig+0xb4>)
 800f0b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0ba:	bf00      	nop
 800f0bc:	0800f161 	.word	0x0800f161
 800f0c0:	0800f191 	.word	0x0800f191
 800f0c4:	0800f191 	.word	0x0800f191
 800f0c8:	0800f191 	.word	0x0800f191
 800f0cc:	0800f191 	.word	0x0800f191
 800f0d0:	0800f191 	.word	0x0800f191
 800f0d4:	0800f191 	.word	0x0800f191
 800f0d8:	0800f191 	.word	0x0800f191
 800f0dc:	0800f169 	.word	0x0800f169
 800f0e0:	0800f191 	.word	0x0800f191
 800f0e4:	0800f191 	.word	0x0800f191
 800f0e8:	0800f191 	.word	0x0800f191
 800f0ec:	0800f191 	.word	0x0800f191
 800f0f0:	0800f191 	.word	0x0800f191
 800f0f4:	0800f191 	.word	0x0800f191
 800f0f8:	0800f191 	.word	0x0800f191
 800f0fc:	0800f171 	.word	0x0800f171
 800f100:	0800f191 	.word	0x0800f191
 800f104:	0800f191 	.word	0x0800f191
 800f108:	0800f191 	.word	0x0800f191
 800f10c:	0800f191 	.word	0x0800f191
 800f110:	0800f191 	.word	0x0800f191
 800f114:	0800f191 	.word	0x0800f191
 800f118:	0800f191 	.word	0x0800f191
 800f11c:	0800f179 	.word	0x0800f179
 800f120:	0800f191 	.word	0x0800f191
 800f124:	0800f191 	.word	0x0800f191
 800f128:	0800f191 	.word	0x0800f191
 800f12c:	0800f191 	.word	0x0800f191
 800f130:	0800f191 	.word	0x0800f191
 800f134:	0800f191 	.word	0x0800f191
 800f138:	0800f191 	.word	0x0800f191
 800f13c:	0800f181 	.word	0x0800f181
 800f140:	0800f191 	.word	0x0800f191
 800f144:	0800f191 	.word	0x0800f191
 800f148:	0800f191 	.word	0x0800f191
 800f14c:	0800f191 	.word	0x0800f191
 800f150:	0800f191 	.word	0x0800f191
 800f154:	0800f191 	.word	0x0800f191
 800f158:	0800f191 	.word	0x0800f191
 800f15c:	0800f189 	.word	0x0800f189
 800f160:	2301      	movs	r3, #1
 800f162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f166:	e326      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f168:	2304      	movs	r3, #4
 800f16a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f16e:	e322      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f170:	2308      	movs	r3, #8
 800f172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f176:	e31e      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f178:	2310      	movs	r3, #16
 800f17a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f17e:	e31a      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f180:	2320      	movs	r3, #32
 800f182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f186:	e316      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f188:	2340      	movs	r3, #64	@ 0x40
 800f18a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f18e:	e312      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f190:	2380      	movs	r3, #128	@ 0x80
 800f192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f196:	e30e      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f198:	697b      	ldr	r3, [r7, #20]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	4a69      	ldr	r2, [pc, #420]	@ (800f344 <UART_SetConfig+0x33c>)
 800f19e:	4293      	cmp	r3, r2
 800f1a0:	d130      	bne.n	800f204 <UART_SetConfig+0x1fc>
 800f1a2:	4b67      	ldr	r3, [pc, #412]	@ (800f340 <UART_SetConfig+0x338>)
 800f1a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f1a6:	f003 0307 	and.w	r3, r3, #7
 800f1aa:	2b05      	cmp	r3, #5
 800f1ac:	d826      	bhi.n	800f1fc <UART_SetConfig+0x1f4>
 800f1ae:	a201      	add	r2, pc, #4	@ (adr r2, 800f1b4 <UART_SetConfig+0x1ac>)
 800f1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1b4:	0800f1cd 	.word	0x0800f1cd
 800f1b8:	0800f1d5 	.word	0x0800f1d5
 800f1bc:	0800f1dd 	.word	0x0800f1dd
 800f1c0:	0800f1e5 	.word	0x0800f1e5
 800f1c4:	0800f1ed 	.word	0x0800f1ed
 800f1c8:	0800f1f5 	.word	0x0800f1f5
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1d2:	e2f0      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f1d4:	2304      	movs	r3, #4
 800f1d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1da:	e2ec      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f1dc:	2308      	movs	r3, #8
 800f1de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1e2:	e2e8      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f1e4:	2310      	movs	r3, #16
 800f1e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1ea:	e2e4      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f1ec:	2320      	movs	r3, #32
 800f1ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1f2:	e2e0      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f1f4:	2340      	movs	r3, #64	@ 0x40
 800f1f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1fa:	e2dc      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f1fc:	2380      	movs	r3, #128	@ 0x80
 800f1fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f202:	e2d8      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f204:	697b      	ldr	r3, [r7, #20]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	4a4f      	ldr	r2, [pc, #316]	@ (800f348 <UART_SetConfig+0x340>)
 800f20a:	4293      	cmp	r3, r2
 800f20c:	d130      	bne.n	800f270 <UART_SetConfig+0x268>
 800f20e:	4b4c      	ldr	r3, [pc, #304]	@ (800f340 <UART_SetConfig+0x338>)
 800f210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f212:	f003 0307 	and.w	r3, r3, #7
 800f216:	2b05      	cmp	r3, #5
 800f218:	d826      	bhi.n	800f268 <UART_SetConfig+0x260>
 800f21a:	a201      	add	r2, pc, #4	@ (adr r2, 800f220 <UART_SetConfig+0x218>)
 800f21c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f220:	0800f239 	.word	0x0800f239
 800f224:	0800f241 	.word	0x0800f241
 800f228:	0800f249 	.word	0x0800f249
 800f22c:	0800f251 	.word	0x0800f251
 800f230:	0800f259 	.word	0x0800f259
 800f234:	0800f261 	.word	0x0800f261
 800f238:	2300      	movs	r3, #0
 800f23a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f23e:	e2ba      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f240:	2304      	movs	r3, #4
 800f242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f246:	e2b6      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f248:	2308      	movs	r3, #8
 800f24a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f24e:	e2b2      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f250:	2310      	movs	r3, #16
 800f252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f256:	e2ae      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f258:	2320      	movs	r3, #32
 800f25a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f25e:	e2aa      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f260:	2340      	movs	r3, #64	@ 0x40
 800f262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f266:	e2a6      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f268:	2380      	movs	r3, #128	@ 0x80
 800f26a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f26e:	e2a2      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f270:	697b      	ldr	r3, [r7, #20]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	4a35      	ldr	r2, [pc, #212]	@ (800f34c <UART_SetConfig+0x344>)
 800f276:	4293      	cmp	r3, r2
 800f278:	d130      	bne.n	800f2dc <UART_SetConfig+0x2d4>
 800f27a:	4b31      	ldr	r3, [pc, #196]	@ (800f340 <UART_SetConfig+0x338>)
 800f27c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f27e:	f003 0307 	and.w	r3, r3, #7
 800f282:	2b05      	cmp	r3, #5
 800f284:	d826      	bhi.n	800f2d4 <UART_SetConfig+0x2cc>
 800f286:	a201      	add	r2, pc, #4	@ (adr r2, 800f28c <UART_SetConfig+0x284>)
 800f288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f28c:	0800f2a5 	.word	0x0800f2a5
 800f290:	0800f2ad 	.word	0x0800f2ad
 800f294:	0800f2b5 	.word	0x0800f2b5
 800f298:	0800f2bd 	.word	0x0800f2bd
 800f29c:	0800f2c5 	.word	0x0800f2c5
 800f2a0:	0800f2cd 	.word	0x0800f2cd
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2aa:	e284      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f2ac:	2304      	movs	r3, #4
 800f2ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2b2:	e280      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f2b4:	2308      	movs	r3, #8
 800f2b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2ba:	e27c      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f2bc:	2310      	movs	r3, #16
 800f2be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2c2:	e278      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f2c4:	2320      	movs	r3, #32
 800f2c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2ca:	e274      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f2cc:	2340      	movs	r3, #64	@ 0x40
 800f2ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2d2:	e270      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f2d4:	2380      	movs	r3, #128	@ 0x80
 800f2d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2da:	e26c      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f2dc:	697b      	ldr	r3, [r7, #20]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	4a1b      	ldr	r2, [pc, #108]	@ (800f350 <UART_SetConfig+0x348>)
 800f2e2:	4293      	cmp	r3, r2
 800f2e4:	d142      	bne.n	800f36c <UART_SetConfig+0x364>
 800f2e6:	4b16      	ldr	r3, [pc, #88]	@ (800f340 <UART_SetConfig+0x338>)
 800f2e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f2ea:	f003 0307 	and.w	r3, r3, #7
 800f2ee:	2b05      	cmp	r3, #5
 800f2f0:	d838      	bhi.n	800f364 <UART_SetConfig+0x35c>
 800f2f2:	a201      	add	r2, pc, #4	@ (adr r2, 800f2f8 <UART_SetConfig+0x2f0>)
 800f2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2f8:	0800f311 	.word	0x0800f311
 800f2fc:	0800f319 	.word	0x0800f319
 800f300:	0800f321 	.word	0x0800f321
 800f304:	0800f329 	.word	0x0800f329
 800f308:	0800f355 	.word	0x0800f355
 800f30c:	0800f35d 	.word	0x0800f35d
 800f310:	2300      	movs	r3, #0
 800f312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f316:	e24e      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f318:	2304      	movs	r3, #4
 800f31a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f31e:	e24a      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f320:	2308      	movs	r3, #8
 800f322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f326:	e246      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f328:	2310      	movs	r3, #16
 800f32a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f32e:	e242      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f330:	cfff69f3 	.word	0xcfff69f3
 800f334:	58000c00 	.word	0x58000c00
 800f338:	11fff4ff 	.word	0x11fff4ff
 800f33c:	40011000 	.word	0x40011000
 800f340:	58024400 	.word	0x58024400
 800f344:	40004400 	.word	0x40004400
 800f348:	40004800 	.word	0x40004800
 800f34c:	40004c00 	.word	0x40004c00
 800f350:	40005000 	.word	0x40005000
 800f354:	2320      	movs	r3, #32
 800f356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f35a:	e22c      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f35c:	2340      	movs	r3, #64	@ 0x40
 800f35e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f362:	e228      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f364:	2380      	movs	r3, #128	@ 0x80
 800f366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f36a:	e224      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f36c:	697b      	ldr	r3, [r7, #20]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	4ab1      	ldr	r2, [pc, #708]	@ (800f638 <UART_SetConfig+0x630>)
 800f372:	4293      	cmp	r3, r2
 800f374:	d176      	bne.n	800f464 <UART_SetConfig+0x45c>
 800f376:	4bb1      	ldr	r3, [pc, #708]	@ (800f63c <UART_SetConfig+0x634>)
 800f378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f37a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f37e:	2b28      	cmp	r3, #40	@ 0x28
 800f380:	d86c      	bhi.n	800f45c <UART_SetConfig+0x454>
 800f382:	a201      	add	r2, pc, #4	@ (adr r2, 800f388 <UART_SetConfig+0x380>)
 800f384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f388:	0800f42d 	.word	0x0800f42d
 800f38c:	0800f45d 	.word	0x0800f45d
 800f390:	0800f45d 	.word	0x0800f45d
 800f394:	0800f45d 	.word	0x0800f45d
 800f398:	0800f45d 	.word	0x0800f45d
 800f39c:	0800f45d 	.word	0x0800f45d
 800f3a0:	0800f45d 	.word	0x0800f45d
 800f3a4:	0800f45d 	.word	0x0800f45d
 800f3a8:	0800f435 	.word	0x0800f435
 800f3ac:	0800f45d 	.word	0x0800f45d
 800f3b0:	0800f45d 	.word	0x0800f45d
 800f3b4:	0800f45d 	.word	0x0800f45d
 800f3b8:	0800f45d 	.word	0x0800f45d
 800f3bc:	0800f45d 	.word	0x0800f45d
 800f3c0:	0800f45d 	.word	0x0800f45d
 800f3c4:	0800f45d 	.word	0x0800f45d
 800f3c8:	0800f43d 	.word	0x0800f43d
 800f3cc:	0800f45d 	.word	0x0800f45d
 800f3d0:	0800f45d 	.word	0x0800f45d
 800f3d4:	0800f45d 	.word	0x0800f45d
 800f3d8:	0800f45d 	.word	0x0800f45d
 800f3dc:	0800f45d 	.word	0x0800f45d
 800f3e0:	0800f45d 	.word	0x0800f45d
 800f3e4:	0800f45d 	.word	0x0800f45d
 800f3e8:	0800f445 	.word	0x0800f445
 800f3ec:	0800f45d 	.word	0x0800f45d
 800f3f0:	0800f45d 	.word	0x0800f45d
 800f3f4:	0800f45d 	.word	0x0800f45d
 800f3f8:	0800f45d 	.word	0x0800f45d
 800f3fc:	0800f45d 	.word	0x0800f45d
 800f400:	0800f45d 	.word	0x0800f45d
 800f404:	0800f45d 	.word	0x0800f45d
 800f408:	0800f44d 	.word	0x0800f44d
 800f40c:	0800f45d 	.word	0x0800f45d
 800f410:	0800f45d 	.word	0x0800f45d
 800f414:	0800f45d 	.word	0x0800f45d
 800f418:	0800f45d 	.word	0x0800f45d
 800f41c:	0800f45d 	.word	0x0800f45d
 800f420:	0800f45d 	.word	0x0800f45d
 800f424:	0800f45d 	.word	0x0800f45d
 800f428:	0800f455 	.word	0x0800f455
 800f42c:	2301      	movs	r3, #1
 800f42e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f432:	e1c0      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f434:	2304      	movs	r3, #4
 800f436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f43a:	e1bc      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f43c:	2308      	movs	r3, #8
 800f43e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f442:	e1b8      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f444:	2310      	movs	r3, #16
 800f446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f44a:	e1b4      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f44c:	2320      	movs	r3, #32
 800f44e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f452:	e1b0      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f454:	2340      	movs	r3, #64	@ 0x40
 800f456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f45a:	e1ac      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f45c:	2380      	movs	r3, #128	@ 0x80
 800f45e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f462:	e1a8      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f464:	697b      	ldr	r3, [r7, #20]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	4a75      	ldr	r2, [pc, #468]	@ (800f640 <UART_SetConfig+0x638>)
 800f46a:	4293      	cmp	r3, r2
 800f46c:	d130      	bne.n	800f4d0 <UART_SetConfig+0x4c8>
 800f46e:	4b73      	ldr	r3, [pc, #460]	@ (800f63c <UART_SetConfig+0x634>)
 800f470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f472:	f003 0307 	and.w	r3, r3, #7
 800f476:	2b05      	cmp	r3, #5
 800f478:	d826      	bhi.n	800f4c8 <UART_SetConfig+0x4c0>
 800f47a:	a201      	add	r2, pc, #4	@ (adr r2, 800f480 <UART_SetConfig+0x478>)
 800f47c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f480:	0800f499 	.word	0x0800f499
 800f484:	0800f4a1 	.word	0x0800f4a1
 800f488:	0800f4a9 	.word	0x0800f4a9
 800f48c:	0800f4b1 	.word	0x0800f4b1
 800f490:	0800f4b9 	.word	0x0800f4b9
 800f494:	0800f4c1 	.word	0x0800f4c1
 800f498:	2300      	movs	r3, #0
 800f49a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f49e:	e18a      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f4a0:	2304      	movs	r3, #4
 800f4a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4a6:	e186      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f4a8:	2308      	movs	r3, #8
 800f4aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4ae:	e182      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f4b0:	2310      	movs	r3, #16
 800f4b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4b6:	e17e      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f4b8:	2320      	movs	r3, #32
 800f4ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4be:	e17a      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f4c0:	2340      	movs	r3, #64	@ 0x40
 800f4c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4c6:	e176      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f4c8:	2380      	movs	r3, #128	@ 0x80
 800f4ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4ce:	e172      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f4d0:	697b      	ldr	r3, [r7, #20]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	4a5b      	ldr	r2, [pc, #364]	@ (800f644 <UART_SetConfig+0x63c>)
 800f4d6:	4293      	cmp	r3, r2
 800f4d8:	d130      	bne.n	800f53c <UART_SetConfig+0x534>
 800f4da:	4b58      	ldr	r3, [pc, #352]	@ (800f63c <UART_SetConfig+0x634>)
 800f4dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f4de:	f003 0307 	and.w	r3, r3, #7
 800f4e2:	2b05      	cmp	r3, #5
 800f4e4:	d826      	bhi.n	800f534 <UART_SetConfig+0x52c>
 800f4e6:	a201      	add	r2, pc, #4	@ (adr r2, 800f4ec <UART_SetConfig+0x4e4>)
 800f4e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4ec:	0800f505 	.word	0x0800f505
 800f4f0:	0800f50d 	.word	0x0800f50d
 800f4f4:	0800f515 	.word	0x0800f515
 800f4f8:	0800f51d 	.word	0x0800f51d
 800f4fc:	0800f525 	.word	0x0800f525
 800f500:	0800f52d 	.word	0x0800f52d
 800f504:	2300      	movs	r3, #0
 800f506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f50a:	e154      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f50c:	2304      	movs	r3, #4
 800f50e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f512:	e150      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f514:	2308      	movs	r3, #8
 800f516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f51a:	e14c      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f51c:	2310      	movs	r3, #16
 800f51e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f522:	e148      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f524:	2320      	movs	r3, #32
 800f526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f52a:	e144      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f52c:	2340      	movs	r3, #64	@ 0x40
 800f52e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f532:	e140      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f534:	2380      	movs	r3, #128	@ 0x80
 800f536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f53a:	e13c      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f53c:	697b      	ldr	r3, [r7, #20]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	4a41      	ldr	r2, [pc, #260]	@ (800f648 <UART_SetConfig+0x640>)
 800f542:	4293      	cmp	r3, r2
 800f544:	f040 8082 	bne.w	800f64c <UART_SetConfig+0x644>
 800f548:	4b3c      	ldr	r3, [pc, #240]	@ (800f63c <UART_SetConfig+0x634>)
 800f54a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f54c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f550:	2b28      	cmp	r3, #40	@ 0x28
 800f552:	d86d      	bhi.n	800f630 <UART_SetConfig+0x628>
 800f554:	a201      	add	r2, pc, #4	@ (adr r2, 800f55c <UART_SetConfig+0x554>)
 800f556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f55a:	bf00      	nop
 800f55c:	0800f601 	.word	0x0800f601
 800f560:	0800f631 	.word	0x0800f631
 800f564:	0800f631 	.word	0x0800f631
 800f568:	0800f631 	.word	0x0800f631
 800f56c:	0800f631 	.word	0x0800f631
 800f570:	0800f631 	.word	0x0800f631
 800f574:	0800f631 	.word	0x0800f631
 800f578:	0800f631 	.word	0x0800f631
 800f57c:	0800f609 	.word	0x0800f609
 800f580:	0800f631 	.word	0x0800f631
 800f584:	0800f631 	.word	0x0800f631
 800f588:	0800f631 	.word	0x0800f631
 800f58c:	0800f631 	.word	0x0800f631
 800f590:	0800f631 	.word	0x0800f631
 800f594:	0800f631 	.word	0x0800f631
 800f598:	0800f631 	.word	0x0800f631
 800f59c:	0800f611 	.word	0x0800f611
 800f5a0:	0800f631 	.word	0x0800f631
 800f5a4:	0800f631 	.word	0x0800f631
 800f5a8:	0800f631 	.word	0x0800f631
 800f5ac:	0800f631 	.word	0x0800f631
 800f5b0:	0800f631 	.word	0x0800f631
 800f5b4:	0800f631 	.word	0x0800f631
 800f5b8:	0800f631 	.word	0x0800f631
 800f5bc:	0800f619 	.word	0x0800f619
 800f5c0:	0800f631 	.word	0x0800f631
 800f5c4:	0800f631 	.word	0x0800f631
 800f5c8:	0800f631 	.word	0x0800f631
 800f5cc:	0800f631 	.word	0x0800f631
 800f5d0:	0800f631 	.word	0x0800f631
 800f5d4:	0800f631 	.word	0x0800f631
 800f5d8:	0800f631 	.word	0x0800f631
 800f5dc:	0800f621 	.word	0x0800f621
 800f5e0:	0800f631 	.word	0x0800f631
 800f5e4:	0800f631 	.word	0x0800f631
 800f5e8:	0800f631 	.word	0x0800f631
 800f5ec:	0800f631 	.word	0x0800f631
 800f5f0:	0800f631 	.word	0x0800f631
 800f5f4:	0800f631 	.word	0x0800f631
 800f5f8:	0800f631 	.word	0x0800f631
 800f5fc:	0800f629 	.word	0x0800f629
 800f600:	2301      	movs	r3, #1
 800f602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f606:	e0d6      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f608:	2304      	movs	r3, #4
 800f60a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f60e:	e0d2      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f610:	2308      	movs	r3, #8
 800f612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f616:	e0ce      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f618:	2310      	movs	r3, #16
 800f61a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f61e:	e0ca      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f620:	2320      	movs	r3, #32
 800f622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f626:	e0c6      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f628:	2340      	movs	r3, #64	@ 0x40
 800f62a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f62e:	e0c2      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f630:	2380      	movs	r3, #128	@ 0x80
 800f632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f636:	e0be      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f638:	40011400 	.word	0x40011400
 800f63c:	58024400 	.word	0x58024400
 800f640:	40007800 	.word	0x40007800
 800f644:	40007c00 	.word	0x40007c00
 800f648:	40011800 	.word	0x40011800
 800f64c:	697b      	ldr	r3, [r7, #20]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	4aad      	ldr	r2, [pc, #692]	@ (800f908 <UART_SetConfig+0x900>)
 800f652:	4293      	cmp	r3, r2
 800f654:	d176      	bne.n	800f744 <UART_SetConfig+0x73c>
 800f656:	4bad      	ldr	r3, [pc, #692]	@ (800f90c <UART_SetConfig+0x904>)
 800f658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f65a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f65e:	2b28      	cmp	r3, #40	@ 0x28
 800f660:	d86c      	bhi.n	800f73c <UART_SetConfig+0x734>
 800f662:	a201      	add	r2, pc, #4	@ (adr r2, 800f668 <UART_SetConfig+0x660>)
 800f664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f668:	0800f70d 	.word	0x0800f70d
 800f66c:	0800f73d 	.word	0x0800f73d
 800f670:	0800f73d 	.word	0x0800f73d
 800f674:	0800f73d 	.word	0x0800f73d
 800f678:	0800f73d 	.word	0x0800f73d
 800f67c:	0800f73d 	.word	0x0800f73d
 800f680:	0800f73d 	.word	0x0800f73d
 800f684:	0800f73d 	.word	0x0800f73d
 800f688:	0800f715 	.word	0x0800f715
 800f68c:	0800f73d 	.word	0x0800f73d
 800f690:	0800f73d 	.word	0x0800f73d
 800f694:	0800f73d 	.word	0x0800f73d
 800f698:	0800f73d 	.word	0x0800f73d
 800f69c:	0800f73d 	.word	0x0800f73d
 800f6a0:	0800f73d 	.word	0x0800f73d
 800f6a4:	0800f73d 	.word	0x0800f73d
 800f6a8:	0800f71d 	.word	0x0800f71d
 800f6ac:	0800f73d 	.word	0x0800f73d
 800f6b0:	0800f73d 	.word	0x0800f73d
 800f6b4:	0800f73d 	.word	0x0800f73d
 800f6b8:	0800f73d 	.word	0x0800f73d
 800f6bc:	0800f73d 	.word	0x0800f73d
 800f6c0:	0800f73d 	.word	0x0800f73d
 800f6c4:	0800f73d 	.word	0x0800f73d
 800f6c8:	0800f725 	.word	0x0800f725
 800f6cc:	0800f73d 	.word	0x0800f73d
 800f6d0:	0800f73d 	.word	0x0800f73d
 800f6d4:	0800f73d 	.word	0x0800f73d
 800f6d8:	0800f73d 	.word	0x0800f73d
 800f6dc:	0800f73d 	.word	0x0800f73d
 800f6e0:	0800f73d 	.word	0x0800f73d
 800f6e4:	0800f73d 	.word	0x0800f73d
 800f6e8:	0800f72d 	.word	0x0800f72d
 800f6ec:	0800f73d 	.word	0x0800f73d
 800f6f0:	0800f73d 	.word	0x0800f73d
 800f6f4:	0800f73d 	.word	0x0800f73d
 800f6f8:	0800f73d 	.word	0x0800f73d
 800f6fc:	0800f73d 	.word	0x0800f73d
 800f700:	0800f73d 	.word	0x0800f73d
 800f704:	0800f73d 	.word	0x0800f73d
 800f708:	0800f735 	.word	0x0800f735
 800f70c:	2301      	movs	r3, #1
 800f70e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f712:	e050      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f714:	2304      	movs	r3, #4
 800f716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f71a:	e04c      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f71c:	2308      	movs	r3, #8
 800f71e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f722:	e048      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f724:	2310      	movs	r3, #16
 800f726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f72a:	e044      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f72c:	2320      	movs	r3, #32
 800f72e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f732:	e040      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f734:	2340      	movs	r3, #64	@ 0x40
 800f736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f73a:	e03c      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f73c:	2380      	movs	r3, #128	@ 0x80
 800f73e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f742:	e038      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f744:	697b      	ldr	r3, [r7, #20]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	4a71      	ldr	r2, [pc, #452]	@ (800f910 <UART_SetConfig+0x908>)
 800f74a:	4293      	cmp	r3, r2
 800f74c:	d130      	bne.n	800f7b0 <UART_SetConfig+0x7a8>
 800f74e:	4b6f      	ldr	r3, [pc, #444]	@ (800f90c <UART_SetConfig+0x904>)
 800f750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f752:	f003 0307 	and.w	r3, r3, #7
 800f756:	2b05      	cmp	r3, #5
 800f758:	d826      	bhi.n	800f7a8 <UART_SetConfig+0x7a0>
 800f75a:	a201      	add	r2, pc, #4	@ (adr r2, 800f760 <UART_SetConfig+0x758>)
 800f75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f760:	0800f779 	.word	0x0800f779
 800f764:	0800f781 	.word	0x0800f781
 800f768:	0800f789 	.word	0x0800f789
 800f76c:	0800f791 	.word	0x0800f791
 800f770:	0800f799 	.word	0x0800f799
 800f774:	0800f7a1 	.word	0x0800f7a1
 800f778:	2302      	movs	r3, #2
 800f77a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f77e:	e01a      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f780:	2304      	movs	r3, #4
 800f782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f786:	e016      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f788:	2308      	movs	r3, #8
 800f78a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f78e:	e012      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f790:	2310      	movs	r3, #16
 800f792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f796:	e00e      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f798:	2320      	movs	r3, #32
 800f79a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f79e:	e00a      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f7a0:	2340      	movs	r3, #64	@ 0x40
 800f7a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7a6:	e006      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f7a8:	2380      	movs	r3, #128	@ 0x80
 800f7aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7ae:	e002      	b.n	800f7b6 <UART_SetConfig+0x7ae>
 800f7b0:	2380      	movs	r3, #128	@ 0x80
 800f7b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f7b6:	697b      	ldr	r3, [r7, #20]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	4a55      	ldr	r2, [pc, #340]	@ (800f910 <UART_SetConfig+0x908>)
 800f7bc:	4293      	cmp	r3, r2
 800f7be:	f040 80f8 	bne.w	800f9b2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f7c2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f7c6:	2b20      	cmp	r3, #32
 800f7c8:	dc46      	bgt.n	800f858 <UART_SetConfig+0x850>
 800f7ca:	2b02      	cmp	r3, #2
 800f7cc:	db75      	blt.n	800f8ba <UART_SetConfig+0x8b2>
 800f7ce:	3b02      	subs	r3, #2
 800f7d0:	2b1e      	cmp	r3, #30
 800f7d2:	d872      	bhi.n	800f8ba <UART_SetConfig+0x8b2>
 800f7d4:	a201      	add	r2, pc, #4	@ (adr r2, 800f7dc <UART_SetConfig+0x7d4>)
 800f7d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7da:	bf00      	nop
 800f7dc:	0800f85f 	.word	0x0800f85f
 800f7e0:	0800f8bb 	.word	0x0800f8bb
 800f7e4:	0800f867 	.word	0x0800f867
 800f7e8:	0800f8bb 	.word	0x0800f8bb
 800f7ec:	0800f8bb 	.word	0x0800f8bb
 800f7f0:	0800f8bb 	.word	0x0800f8bb
 800f7f4:	0800f877 	.word	0x0800f877
 800f7f8:	0800f8bb 	.word	0x0800f8bb
 800f7fc:	0800f8bb 	.word	0x0800f8bb
 800f800:	0800f8bb 	.word	0x0800f8bb
 800f804:	0800f8bb 	.word	0x0800f8bb
 800f808:	0800f8bb 	.word	0x0800f8bb
 800f80c:	0800f8bb 	.word	0x0800f8bb
 800f810:	0800f8bb 	.word	0x0800f8bb
 800f814:	0800f887 	.word	0x0800f887
 800f818:	0800f8bb 	.word	0x0800f8bb
 800f81c:	0800f8bb 	.word	0x0800f8bb
 800f820:	0800f8bb 	.word	0x0800f8bb
 800f824:	0800f8bb 	.word	0x0800f8bb
 800f828:	0800f8bb 	.word	0x0800f8bb
 800f82c:	0800f8bb 	.word	0x0800f8bb
 800f830:	0800f8bb 	.word	0x0800f8bb
 800f834:	0800f8bb 	.word	0x0800f8bb
 800f838:	0800f8bb 	.word	0x0800f8bb
 800f83c:	0800f8bb 	.word	0x0800f8bb
 800f840:	0800f8bb 	.word	0x0800f8bb
 800f844:	0800f8bb 	.word	0x0800f8bb
 800f848:	0800f8bb 	.word	0x0800f8bb
 800f84c:	0800f8bb 	.word	0x0800f8bb
 800f850:	0800f8bb 	.word	0x0800f8bb
 800f854:	0800f8ad 	.word	0x0800f8ad
 800f858:	2b40      	cmp	r3, #64	@ 0x40
 800f85a:	d02a      	beq.n	800f8b2 <UART_SetConfig+0x8aa>
 800f85c:	e02d      	b.n	800f8ba <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f85e:	f7fe f843 	bl	800d8e8 <HAL_RCCEx_GetD3PCLK1Freq>
 800f862:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f864:	e02f      	b.n	800f8c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f866:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f86a:	4618      	mov	r0, r3
 800f86c:	f7fe f852 	bl	800d914 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f874:	e027      	b.n	800f8c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f876:	f107 0318 	add.w	r3, r7, #24
 800f87a:	4618      	mov	r0, r3
 800f87c:	f7fe f99e 	bl	800dbbc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f880:	69fb      	ldr	r3, [r7, #28]
 800f882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f884:	e01f      	b.n	800f8c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f886:	4b21      	ldr	r3, [pc, #132]	@ (800f90c <UART_SetConfig+0x904>)
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	f003 0320 	and.w	r3, r3, #32
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d009      	beq.n	800f8a6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f892:	4b1e      	ldr	r3, [pc, #120]	@ (800f90c <UART_SetConfig+0x904>)
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	08db      	lsrs	r3, r3, #3
 800f898:	f003 0303 	and.w	r3, r3, #3
 800f89c:	4a1d      	ldr	r2, [pc, #116]	@ (800f914 <UART_SetConfig+0x90c>)
 800f89e:	fa22 f303 	lsr.w	r3, r2, r3
 800f8a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f8a4:	e00f      	b.n	800f8c6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f8a6:	4b1b      	ldr	r3, [pc, #108]	@ (800f914 <UART_SetConfig+0x90c>)
 800f8a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f8aa:	e00c      	b.n	800f8c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f8ac:	4b1a      	ldr	r3, [pc, #104]	@ (800f918 <UART_SetConfig+0x910>)
 800f8ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f8b0:	e009      	b.n	800f8c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f8b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f8b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f8b8:	e005      	b.n	800f8c6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f8be:	2301      	movs	r3, #1
 800f8c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f8c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f8c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	f000 81ee 	beq.w	800fcaa <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f8ce:	697b      	ldr	r3, [r7, #20]
 800f8d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8d2:	4a12      	ldr	r2, [pc, #72]	@ (800f91c <UART_SetConfig+0x914>)
 800f8d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f8d8:	461a      	mov	r2, r3
 800f8da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f8dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800f8e0:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f8e2:	697b      	ldr	r3, [r7, #20]
 800f8e4:	685a      	ldr	r2, [r3, #4]
 800f8e6:	4613      	mov	r3, r2
 800f8e8:	005b      	lsls	r3, r3, #1
 800f8ea:	4413      	add	r3, r2
 800f8ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f8ee:	429a      	cmp	r2, r3
 800f8f0:	d305      	bcc.n	800f8fe <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f8f2:	697b      	ldr	r3, [r7, #20]
 800f8f4:	685b      	ldr	r3, [r3, #4]
 800f8f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f8f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f8fa:	429a      	cmp	r2, r3
 800f8fc:	d910      	bls.n	800f920 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800f8fe:	2301      	movs	r3, #1
 800f900:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f904:	e1d1      	b.n	800fcaa <UART_SetConfig+0xca2>
 800f906:	bf00      	nop
 800f908:	40011c00 	.word	0x40011c00
 800f90c:	58024400 	.word	0x58024400
 800f910:	58000c00 	.word	0x58000c00
 800f914:	03d09000 	.word	0x03d09000
 800f918:	003d0900 	.word	0x003d0900
 800f91c:	0802e040 	.word	0x0802e040
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f920:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f922:	2200      	movs	r2, #0
 800f924:	60bb      	str	r3, [r7, #8]
 800f926:	60fa      	str	r2, [r7, #12]
 800f928:	697b      	ldr	r3, [r7, #20]
 800f92a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f92c:	4ac0      	ldr	r2, [pc, #768]	@ (800fc30 <UART_SetConfig+0xc28>)
 800f92e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f932:	b29b      	uxth	r3, r3
 800f934:	2200      	movs	r2, #0
 800f936:	603b      	str	r3, [r7, #0]
 800f938:	607a      	str	r2, [r7, #4]
 800f93a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f93e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f942:	f7f0 fef1 	bl	8000728 <__aeabi_uldivmod>
 800f946:	4602      	mov	r2, r0
 800f948:	460b      	mov	r3, r1
 800f94a:	4610      	mov	r0, r2
 800f94c:	4619      	mov	r1, r3
 800f94e:	f04f 0200 	mov.w	r2, #0
 800f952:	f04f 0300 	mov.w	r3, #0
 800f956:	020b      	lsls	r3, r1, #8
 800f958:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f95c:	0202      	lsls	r2, r0, #8
 800f95e:	6979      	ldr	r1, [r7, #20]
 800f960:	6849      	ldr	r1, [r1, #4]
 800f962:	0849      	lsrs	r1, r1, #1
 800f964:	2000      	movs	r0, #0
 800f966:	460c      	mov	r4, r1
 800f968:	4605      	mov	r5, r0
 800f96a:	eb12 0804 	adds.w	r8, r2, r4
 800f96e:	eb43 0905 	adc.w	r9, r3, r5
 800f972:	697b      	ldr	r3, [r7, #20]
 800f974:	685b      	ldr	r3, [r3, #4]
 800f976:	2200      	movs	r2, #0
 800f978:	469a      	mov	sl, r3
 800f97a:	4693      	mov	fp, r2
 800f97c:	4652      	mov	r2, sl
 800f97e:	465b      	mov	r3, fp
 800f980:	4640      	mov	r0, r8
 800f982:	4649      	mov	r1, r9
 800f984:	f7f0 fed0 	bl	8000728 <__aeabi_uldivmod>
 800f988:	4602      	mov	r2, r0
 800f98a:	460b      	mov	r3, r1
 800f98c:	4613      	mov	r3, r2
 800f98e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f992:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f996:	d308      	bcc.n	800f9aa <UART_SetConfig+0x9a2>
 800f998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f99a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f99e:	d204      	bcs.n	800f9aa <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800f9a0:	697b      	ldr	r3, [r7, #20]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f9a6:	60da      	str	r2, [r3, #12]
 800f9a8:	e17f      	b.n	800fcaa <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800f9aa:	2301      	movs	r3, #1
 800f9ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f9b0:	e17b      	b.n	800fcaa <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f9b2:	697b      	ldr	r3, [r7, #20]
 800f9b4:	69db      	ldr	r3, [r3, #28]
 800f9b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f9ba:	f040 80bd 	bne.w	800fb38 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800f9be:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f9c2:	2b20      	cmp	r3, #32
 800f9c4:	dc48      	bgt.n	800fa58 <UART_SetConfig+0xa50>
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	db7b      	blt.n	800fac2 <UART_SetConfig+0xaba>
 800f9ca:	2b20      	cmp	r3, #32
 800f9cc:	d879      	bhi.n	800fac2 <UART_SetConfig+0xaba>
 800f9ce:	a201      	add	r2, pc, #4	@ (adr r2, 800f9d4 <UART_SetConfig+0x9cc>)
 800f9d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9d4:	0800fa5f 	.word	0x0800fa5f
 800f9d8:	0800fa67 	.word	0x0800fa67
 800f9dc:	0800fac3 	.word	0x0800fac3
 800f9e0:	0800fac3 	.word	0x0800fac3
 800f9e4:	0800fa6f 	.word	0x0800fa6f
 800f9e8:	0800fac3 	.word	0x0800fac3
 800f9ec:	0800fac3 	.word	0x0800fac3
 800f9f0:	0800fac3 	.word	0x0800fac3
 800f9f4:	0800fa7f 	.word	0x0800fa7f
 800f9f8:	0800fac3 	.word	0x0800fac3
 800f9fc:	0800fac3 	.word	0x0800fac3
 800fa00:	0800fac3 	.word	0x0800fac3
 800fa04:	0800fac3 	.word	0x0800fac3
 800fa08:	0800fac3 	.word	0x0800fac3
 800fa0c:	0800fac3 	.word	0x0800fac3
 800fa10:	0800fac3 	.word	0x0800fac3
 800fa14:	0800fa8f 	.word	0x0800fa8f
 800fa18:	0800fac3 	.word	0x0800fac3
 800fa1c:	0800fac3 	.word	0x0800fac3
 800fa20:	0800fac3 	.word	0x0800fac3
 800fa24:	0800fac3 	.word	0x0800fac3
 800fa28:	0800fac3 	.word	0x0800fac3
 800fa2c:	0800fac3 	.word	0x0800fac3
 800fa30:	0800fac3 	.word	0x0800fac3
 800fa34:	0800fac3 	.word	0x0800fac3
 800fa38:	0800fac3 	.word	0x0800fac3
 800fa3c:	0800fac3 	.word	0x0800fac3
 800fa40:	0800fac3 	.word	0x0800fac3
 800fa44:	0800fac3 	.word	0x0800fac3
 800fa48:	0800fac3 	.word	0x0800fac3
 800fa4c:	0800fac3 	.word	0x0800fac3
 800fa50:	0800fac3 	.word	0x0800fac3
 800fa54:	0800fab5 	.word	0x0800fab5
 800fa58:	2b40      	cmp	r3, #64	@ 0x40
 800fa5a:	d02e      	beq.n	800faba <UART_SetConfig+0xab2>
 800fa5c:	e031      	b.n	800fac2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fa5e:	f7fc f863 	bl	800bb28 <HAL_RCC_GetPCLK1Freq>
 800fa62:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fa64:	e033      	b.n	800face <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fa66:	f7fc f875 	bl	800bb54 <HAL_RCC_GetPCLK2Freq>
 800fa6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fa6c:	e02f      	b.n	800face <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fa6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fa72:	4618      	mov	r0, r3
 800fa74:	f7fd ff4e 	bl	800d914 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fa78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa7c:	e027      	b.n	800face <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fa7e:	f107 0318 	add.w	r3, r7, #24
 800fa82:	4618      	mov	r0, r3
 800fa84:	f7fe f89a 	bl	800dbbc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fa88:	69fb      	ldr	r3, [r7, #28]
 800fa8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa8c:	e01f      	b.n	800face <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fa8e:	4b69      	ldr	r3, [pc, #420]	@ (800fc34 <UART_SetConfig+0xc2c>)
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	f003 0320 	and.w	r3, r3, #32
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d009      	beq.n	800faae <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fa9a:	4b66      	ldr	r3, [pc, #408]	@ (800fc34 <UART_SetConfig+0xc2c>)
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	08db      	lsrs	r3, r3, #3
 800faa0:	f003 0303 	and.w	r3, r3, #3
 800faa4:	4a64      	ldr	r2, [pc, #400]	@ (800fc38 <UART_SetConfig+0xc30>)
 800faa6:	fa22 f303 	lsr.w	r3, r2, r3
 800faaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800faac:	e00f      	b.n	800face <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800faae:	4b62      	ldr	r3, [pc, #392]	@ (800fc38 <UART_SetConfig+0xc30>)
 800fab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fab2:	e00c      	b.n	800face <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fab4:	4b61      	ldr	r3, [pc, #388]	@ (800fc3c <UART_SetConfig+0xc34>)
 800fab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fab8:	e009      	b.n	800face <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800faba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fabe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fac0:	e005      	b.n	800face <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800fac2:	2300      	movs	r3, #0
 800fac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800fac6:	2301      	movs	r3, #1
 800fac8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800facc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800face:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	f000 80ea 	beq.w	800fcaa <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fad6:	697b      	ldr	r3, [r7, #20]
 800fad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fada:	4a55      	ldr	r2, [pc, #340]	@ (800fc30 <UART_SetConfig+0xc28>)
 800fadc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fae0:	461a      	mov	r2, r3
 800fae2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fae4:	fbb3 f3f2 	udiv	r3, r3, r2
 800fae8:	005a      	lsls	r2, r3, #1
 800faea:	697b      	ldr	r3, [r7, #20]
 800faec:	685b      	ldr	r3, [r3, #4]
 800faee:	085b      	lsrs	r3, r3, #1
 800faf0:	441a      	add	r2, r3
 800faf2:	697b      	ldr	r3, [r7, #20]
 800faf4:	685b      	ldr	r3, [r3, #4]
 800faf6:	fbb2 f3f3 	udiv	r3, r2, r3
 800fafa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fafc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fafe:	2b0f      	cmp	r3, #15
 800fb00:	d916      	bls.n	800fb30 <UART_SetConfig+0xb28>
 800fb02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fb08:	d212      	bcs.n	800fb30 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fb0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb0c:	b29b      	uxth	r3, r3
 800fb0e:	f023 030f 	bic.w	r3, r3, #15
 800fb12:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fb14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb16:	085b      	lsrs	r3, r3, #1
 800fb18:	b29b      	uxth	r3, r3
 800fb1a:	f003 0307 	and.w	r3, r3, #7
 800fb1e:	b29a      	uxth	r2, r3
 800fb20:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800fb22:	4313      	orrs	r3, r2
 800fb24:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800fb26:	697b      	ldr	r3, [r7, #20]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800fb2c:	60da      	str	r2, [r3, #12]
 800fb2e:	e0bc      	b.n	800fcaa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800fb30:	2301      	movs	r3, #1
 800fb32:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fb36:	e0b8      	b.n	800fcaa <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fb38:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fb3c:	2b20      	cmp	r3, #32
 800fb3e:	dc4b      	bgt.n	800fbd8 <UART_SetConfig+0xbd0>
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	f2c0 8087 	blt.w	800fc54 <UART_SetConfig+0xc4c>
 800fb46:	2b20      	cmp	r3, #32
 800fb48:	f200 8084 	bhi.w	800fc54 <UART_SetConfig+0xc4c>
 800fb4c:	a201      	add	r2, pc, #4	@ (adr r2, 800fb54 <UART_SetConfig+0xb4c>)
 800fb4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb52:	bf00      	nop
 800fb54:	0800fbdf 	.word	0x0800fbdf
 800fb58:	0800fbe7 	.word	0x0800fbe7
 800fb5c:	0800fc55 	.word	0x0800fc55
 800fb60:	0800fc55 	.word	0x0800fc55
 800fb64:	0800fbef 	.word	0x0800fbef
 800fb68:	0800fc55 	.word	0x0800fc55
 800fb6c:	0800fc55 	.word	0x0800fc55
 800fb70:	0800fc55 	.word	0x0800fc55
 800fb74:	0800fbff 	.word	0x0800fbff
 800fb78:	0800fc55 	.word	0x0800fc55
 800fb7c:	0800fc55 	.word	0x0800fc55
 800fb80:	0800fc55 	.word	0x0800fc55
 800fb84:	0800fc55 	.word	0x0800fc55
 800fb88:	0800fc55 	.word	0x0800fc55
 800fb8c:	0800fc55 	.word	0x0800fc55
 800fb90:	0800fc55 	.word	0x0800fc55
 800fb94:	0800fc0f 	.word	0x0800fc0f
 800fb98:	0800fc55 	.word	0x0800fc55
 800fb9c:	0800fc55 	.word	0x0800fc55
 800fba0:	0800fc55 	.word	0x0800fc55
 800fba4:	0800fc55 	.word	0x0800fc55
 800fba8:	0800fc55 	.word	0x0800fc55
 800fbac:	0800fc55 	.word	0x0800fc55
 800fbb0:	0800fc55 	.word	0x0800fc55
 800fbb4:	0800fc55 	.word	0x0800fc55
 800fbb8:	0800fc55 	.word	0x0800fc55
 800fbbc:	0800fc55 	.word	0x0800fc55
 800fbc0:	0800fc55 	.word	0x0800fc55
 800fbc4:	0800fc55 	.word	0x0800fc55
 800fbc8:	0800fc55 	.word	0x0800fc55
 800fbcc:	0800fc55 	.word	0x0800fc55
 800fbd0:	0800fc55 	.word	0x0800fc55
 800fbd4:	0800fc47 	.word	0x0800fc47
 800fbd8:	2b40      	cmp	r3, #64	@ 0x40
 800fbda:	d037      	beq.n	800fc4c <UART_SetConfig+0xc44>
 800fbdc:	e03a      	b.n	800fc54 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fbde:	f7fb ffa3 	bl	800bb28 <HAL_RCC_GetPCLK1Freq>
 800fbe2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fbe4:	e03c      	b.n	800fc60 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fbe6:	f7fb ffb5 	bl	800bb54 <HAL_RCC_GetPCLK2Freq>
 800fbea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fbec:	e038      	b.n	800fc60 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fbee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	f7fd fe8e 	bl	800d914 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fbf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fbfc:	e030      	b.n	800fc60 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fbfe:	f107 0318 	add.w	r3, r7, #24
 800fc02:	4618      	mov	r0, r3
 800fc04:	f7fd ffda 	bl	800dbbc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fc08:	69fb      	ldr	r3, [r7, #28]
 800fc0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc0c:	e028      	b.n	800fc60 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fc0e:	4b09      	ldr	r3, [pc, #36]	@ (800fc34 <UART_SetConfig+0xc2c>)
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	f003 0320 	and.w	r3, r3, #32
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d012      	beq.n	800fc40 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fc1a:	4b06      	ldr	r3, [pc, #24]	@ (800fc34 <UART_SetConfig+0xc2c>)
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	08db      	lsrs	r3, r3, #3
 800fc20:	f003 0303 	and.w	r3, r3, #3
 800fc24:	4a04      	ldr	r2, [pc, #16]	@ (800fc38 <UART_SetConfig+0xc30>)
 800fc26:	fa22 f303 	lsr.w	r3, r2, r3
 800fc2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fc2c:	e018      	b.n	800fc60 <UART_SetConfig+0xc58>
 800fc2e:	bf00      	nop
 800fc30:	0802e040 	.word	0x0802e040
 800fc34:	58024400 	.word	0x58024400
 800fc38:	03d09000 	.word	0x03d09000
 800fc3c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800fc40:	4b24      	ldr	r3, [pc, #144]	@ (800fcd4 <UART_SetConfig+0xccc>)
 800fc42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc44:	e00c      	b.n	800fc60 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fc46:	4b24      	ldr	r3, [pc, #144]	@ (800fcd8 <UART_SetConfig+0xcd0>)
 800fc48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc4a:	e009      	b.n	800fc60 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fc4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fc50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc52:	e005      	b.n	800fc60 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800fc54:	2300      	movs	r3, #0
 800fc56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800fc58:	2301      	movs	r3, #1
 800fc5a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800fc5e:	bf00      	nop
    }

    if (pclk != 0U)
 800fc60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d021      	beq.n	800fcaa <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fc66:	697b      	ldr	r3, [r7, #20]
 800fc68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc6a:	4a1c      	ldr	r2, [pc, #112]	@ (800fcdc <UART_SetConfig+0xcd4>)
 800fc6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc70:	461a      	mov	r2, r3
 800fc72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc74:	fbb3 f2f2 	udiv	r2, r3, r2
 800fc78:	697b      	ldr	r3, [r7, #20]
 800fc7a:	685b      	ldr	r3, [r3, #4]
 800fc7c:	085b      	lsrs	r3, r3, #1
 800fc7e:	441a      	add	r2, r3
 800fc80:	697b      	ldr	r3, [r7, #20]
 800fc82:	685b      	ldr	r3, [r3, #4]
 800fc84:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc88:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fc8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc8c:	2b0f      	cmp	r3, #15
 800fc8e:	d909      	bls.n	800fca4 <UART_SetConfig+0xc9c>
 800fc90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fc96:	d205      	bcs.n	800fca4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fc98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc9a:	b29a      	uxth	r2, r3
 800fc9c:	697b      	ldr	r3, [r7, #20]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	60da      	str	r2, [r3, #12]
 800fca2:	e002      	b.n	800fcaa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800fca4:	2301      	movs	r3, #1
 800fca6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fcaa:	697b      	ldr	r3, [r7, #20]
 800fcac:	2201      	movs	r2, #1
 800fcae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800fcb2:	697b      	ldr	r3, [r7, #20]
 800fcb4:	2201      	movs	r2, #1
 800fcb6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fcba:	697b      	ldr	r3, [r7, #20]
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800fcc0:	697b      	ldr	r3, [r7, #20]
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800fcc6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800fcca:	4618      	mov	r0, r3
 800fccc:	3748      	adds	r7, #72	@ 0x48
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fcd4:	03d09000 	.word	0x03d09000
 800fcd8:	003d0900 	.word	0x003d0900
 800fcdc:	0802e040 	.word	0x0802e040

0800fce0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fce0:	b480      	push	{r7}
 800fce2:	b083      	sub	sp, #12
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fcec:	f003 0308 	and.w	r3, r3, #8
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d00a      	beq.n	800fd0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	685b      	ldr	r3, [r3, #4]
 800fcfa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	430a      	orrs	r2, r1
 800fd08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd0e:	f003 0301 	and.w	r3, r3, #1
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d00a      	beq.n	800fd2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	685b      	ldr	r3, [r3, #4]
 800fd1c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	430a      	orrs	r2, r1
 800fd2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd30:	f003 0302 	and.w	r3, r3, #2
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d00a      	beq.n	800fd4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	685b      	ldr	r3, [r3, #4]
 800fd3e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	430a      	orrs	r2, r1
 800fd4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd52:	f003 0304 	and.w	r3, r3, #4
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d00a      	beq.n	800fd70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	685b      	ldr	r3, [r3, #4]
 800fd60:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	430a      	orrs	r2, r1
 800fd6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd74:	f003 0310 	and.w	r3, r3, #16
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d00a      	beq.n	800fd92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	689b      	ldr	r3, [r3, #8]
 800fd82:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	430a      	orrs	r2, r1
 800fd90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd96:	f003 0320 	and.w	r3, r3, #32
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d00a      	beq.n	800fdb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	689b      	ldr	r3, [r3, #8]
 800fda4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	430a      	orrs	r2, r1
 800fdb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fdb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d01a      	beq.n	800fdf6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	685b      	ldr	r3, [r3, #4]
 800fdc6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	430a      	orrs	r2, r1
 800fdd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fdda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fdde:	d10a      	bne.n	800fdf6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	685b      	ldr	r3, [r3, #4]
 800fde6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	430a      	orrs	r2, r1
 800fdf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fdfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d00a      	beq.n	800fe18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	685b      	ldr	r3, [r3, #4]
 800fe08:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	430a      	orrs	r2, r1
 800fe16:	605a      	str	r2, [r3, #4]
  }
}
 800fe18:	bf00      	nop
 800fe1a:	370c      	adds	r7, #12
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe22:	4770      	bx	lr

0800fe24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fe24:	b580      	push	{r7, lr}
 800fe26:	b098      	sub	sp, #96	@ 0x60
 800fe28:	af02      	add	r7, sp, #8
 800fe2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	2200      	movs	r2, #0
 800fe30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fe34:	f7f5 fdb4 	bl	80059a0 <HAL_GetTick>
 800fe38:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	f003 0308 	and.w	r3, r3, #8
 800fe44:	2b08      	cmp	r3, #8
 800fe46:	d12f      	bne.n	800fea8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fe48:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fe4c:	9300      	str	r3, [sp, #0]
 800fe4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fe50:	2200      	movs	r2, #0
 800fe52:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800fe56:	6878      	ldr	r0, [r7, #4]
 800fe58:	f000 f88e 	bl	800ff78 <UART_WaitOnFlagUntilTimeout>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d022      	beq.n	800fea8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe6a:	e853 3f00 	ldrex	r3, [r3]
 800fe6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fe70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fe76:	653b      	str	r3, [r7, #80]	@ 0x50
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	461a      	mov	r2, r3
 800fe7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fe80:	647b      	str	r3, [r7, #68]	@ 0x44
 800fe82:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fe86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fe88:	e841 2300 	strex	r3, r2, [r1]
 800fe8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fe8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d1e6      	bne.n	800fe62 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	2220      	movs	r2, #32
 800fe98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	2200      	movs	r2, #0
 800fea0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fea4:	2303      	movs	r3, #3
 800fea6:	e063      	b.n	800ff70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	f003 0304 	and.w	r3, r3, #4
 800feb2:	2b04      	cmp	r3, #4
 800feb4:	d149      	bne.n	800ff4a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800feb6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800feba:	9300      	str	r3, [sp, #0]
 800febc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800febe:	2200      	movs	r2, #0
 800fec0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800fec4:	6878      	ldr	r0, [r7, #4]
 800fec6:	f000 f857 	bl	800ff78 <UART_WaitOnFlagUntilTimeout>
 800feca:	4603      	mov	r3, r0
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d03c      	beq.n	800ff4a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fed8:	e853 3f00 	ldrex	r3, [r3]
 800fedc:	623b      	str	r3, [r7, #32]
   return(result);
 800fede:	6a3b      	ldr	r3, [r7, #32]
 800fee0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fee4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	461a      	mov	r2, r3
 800feec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800feee:	633b      	str	r3, [r7, #48]	@ 0x30
 800fef0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fef2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fef4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fef6:	e841 2300 	strex	r3, r2, [r1]
 800fefa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fefc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d1e6      	bne.n	800fed0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	3308      	adds	r3, #8
 800ff08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff0a:	693b      	ldr	r3, [r7, #16]
 800ff0c:	e853 3f00 	ldrex	r3, [r3]
 800ff10:	60fb      	str	r3, [r7, #12]
   return(result);
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	f023 0301 	bic.w	r3, r3, #1
 800ff18:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	3308      	adds	r3, #8
 800ff20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ff22:	61fa      	str	r2, [r7, #28]
 800ff24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff26:	69b9      	ldr	r1, [r7, #24]
 800ff28:	69fa      	ldr	r2, [r7, #28]
 800ff2a:	e841 2300 	strex	r3, r2, [r1]
 800ff2e:	617b      	str	r3, [r7, #20]
   return(result);
 800ff30:	697b      	ldr	r3, [r7, #20]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d1e5      	bne.n	800ff02 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	2220      	movs	r2, #32
 800ff3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	2200      	movs	r2, #0
 800ff42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ff46:	2303      	movs	r3, #3
 800ff48:	e012      	b.n	800ff70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	2220      	movs	r2, #32
 800ff4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	2220      	movs	r2, #32
 800ff56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	2200      	movs	r2, #0
 800ff64:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	2200      	movs	r2, #0
 800ff6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ff6e:	2300      	movs	r3, #0
}
 800ff70:	4618      	mov	r0, r3
 800ff72:	3758      	adds	r7, #88	@ 0x58
 800ff74:	46bd      	mov	sp, r7
 800ff76:	bd80      	pop	{r7, pc}

0800ff78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b084      	sub	sp, #16
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	60f8      	str	r0, [r7, #12]
 800ff80:	60b9      	str	r1, [r7, #8]
 800ff82:	603b      	str	r3, [r7, #0]
 800ff84:	4613      	mov	r3, r2
 800ff86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ff88:	e04f      	b.n	801002a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ff8a:	69bb      	ldr	r3, [r7, #24]
 800ff8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff90:	d04b      	beq.n	801002a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ff92:	f7f5 fd05 	bl	80059a0 <HAL_GetTick>
 800ff96:	4602      	mov	r2, r0
 800ff98:	683b      	ldr	r3, [r7, #0]
 800ff9a:	1ad3      	subs	r3, r2, r3
 800ff9c:	69ba      	ldr	r2, [r7, #24]
 800ff9e:	429a      	cmp	r2, r3
 800ffa0:	d302      	bcc.n	800ffa8 <UART_WaitOnFlagUntilTimeout+0x30>
 800ffa2:	69bb      	ldr	r3, [r7, #24]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d101      	bne.n	800ffac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ffa8:	2303      	movs	r3, #3
 800ffaa:	e04e      	b.n	801004a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	f003 0304 	and.w	r3, r3, #4
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d037      	beq.n	801002a <UART_WaitOnFlagUntilTimeout+0xb2>
 800ffba:	68bb      	ldr	r3, [r7, #8]
 800ffbc:	2b80      	cmp	r3, #128	@ 0x80
 800ffbe:	d034      	beq.n	801002a <UART_WaitOnFlagUntilTimeout+0xb2>
 800ffc0:	68bb      	ldr	r3, [r7, #8]
 800ffc2:	2b40      	cmp	r3, #64	@ 0x40
 800ffc4:	d031      	beq.n	801002a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	69db      	ldr	r3, [r3, #28]
 800ffcc:	f003 0308 	and.w	r3, r3, #8
 800ffd0:	2b08      	cmp	r3, #8
 800ffd2:	d110      	bne.n	800fff6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	2208      	movs	r2, #8
 800ffda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ffdc:	68f8      	ldr	r0, [r7, #12]
 800ffde:	f000 f839 	bl	8010054 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	2208      	movs	r2, #8
 800ffe6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	2200      	movs	r2, #0
 800ffee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800fff2:	2301      	movs	r3, #1
 800fff4:	e029      	b.n	801004a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	69db      	ldr	r3, [r3, #28]
 800fffc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010000:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010004:	d111      	bne.n	801002a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801000e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010010:	68f8      	ldr	r0, [r7, #12]
 8010012:	f000 f81f 	bl	8010054 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	2220      	movs	r2, #32
 801001a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	2200      	movs	r2, #0
 8010022:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010026:	2303      	movs	r3, #3
 8010028:	e00f      	b.n	801004a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	69da      	ldr	r2, [r3, #28]
 8010030:	68bb      	ldr	r3, [r7, #8]
 8010032:	4013      	ands	r3, r2
 8010034:	68ba      	ldr	r2, [r7, #8]
 8010036:	429a      	cmp	r2, r3
 8010038:	bf0c      	ite	eq
 801003a:	2301      	moveq	r3, #1
 801003c:	2300      	movne	r3, #0
 801003e:	b2db      	uxtb	r3, r3
 8010040:	461a      	mov	r2, r3
 8010042:	79fb      	ldrb	r3, [r7, #7]
 8010044:	429a      	cmp	r2, r3
 8010046:	d0a0      	beq.n	800ff8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010048:	2300      	movs	r3, #0
}
 801004a:	4618      	mov	r0, r3
 801004c:	3710      	adds	r7, #16
 801004e:	46bd      	mov	sp, r7
 8010050:	bd80      	pop	{r7, pc}
	...

08010054 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010054:	b480      	push	{r7}
 8010056:	b095      	sub	sp, #84	@ 0x54
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010064:	e853 3f00 	ldrex	r3, [r3]
 8010068:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801006a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801006c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010070:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	461a      	mov	r2, r3
 8010078:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801007a:	643b      	str	r3, [r7, #64]	@ 0x40
 801007c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801007e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010080:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010082:	e841 2300 	strex	r3, r2, [r1]
 8010086:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801008a:	2b00      	cmp	r3, #0
 801008c:	d1e6      	bne.n	801005c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	3308      	adds	r3, #8
 8010094:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010096:	6a3b      	ldr	r3, [r7, #32]
 8010098:	e853 3f00 	ldrex	r3, [r3]
 801009c:	61fb      	str	r3, [r7, #28]
   return(result);
 801009e:	69fa      	ldr	r2, [r7, #28]
 80100a0:	4b1e      	ldr	r3, [pc, #120]	@ (801011c <UART_EndRxTransfer+0xc8>)
 80100a2:	4013      	ands	r3, r2
 80100a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	3308      	adds	r3, #8
 80100ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80100ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80100b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80100b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80100b6:	e841 2300 	strex	r3, r2, [r1]
 80100ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80100bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d1e5      	bne.n	801008e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80100c6:	2b01      	cmp	r3, #1
 80100c8:	d118      	bne.n	80100fc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	e853 3f00 	ldrex	r3, [r3]
 80100d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80100d8:	68bb      	ldr	r3, [r7, #8]
 80100da:	f023 0310 	bic.w	r3, r3, #16
 80100de:	647b      	str	r3, [r7, #68]	@ 0x44
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	461a      	mov	r2, r3
 80100e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80100e8:	61bb      	str	r3, [r7, #24]
 80100ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100ec:	6979      	ldr	r1, [r7, #20]
 80100ee:	69ba      	ldr	r2, [r7, #24]
 80100f0:	e841 2300 	strex	r3, r2, [r1]
 80100f4:	613b      	str	r3, [r7, #16]
   return(result);
 80100f6:	693b      	ldr	r3, [r7, #16]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d1e6      	bne.n	80100ca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2220      	movs	r2, #32
 8010100:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	2200      	movs	r2, #0
 8010108:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	2200      	movs	r2, #0
 801010e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010110:	bf00      	nop
 8010112:	3754      	adds	r7, #84	@ 0x54
 8010114:	46bd      	mov	sp, r7
 8010116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011a:	4770      	bx	lr
 801011c:	effffffe 	.word	0xeffffffe

08010120 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010120:	b480      	push	{r7}
 8010122:	b085      	sub	sp, #20
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801012e:	2b01      	cmp	r3, #1
 8010130:	d101      	bne.n	8010136 <HAL_UARTEx_DisableFifoMode+0x16>
 8010132:	2302      	movs	r3, #2
 8010134:	e027      	b.n	8010186 <HAL_UARTEx_DisableFifoMode+0x66>
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	2201      	movs	r2, #1
 801013a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	2224      	movs	r2, #36	@ 0x24
 8010142:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	681a      	ldr	r2, [r3, #0]
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	f022 0201 	bic.w	r2, r2, #1
 801015c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010164:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	2200      	movs	r2, #0
 801016a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	68fa      	ldr	r2, [r7, #12]
 8010172:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	2220      	movs	r2, #32
 8010178:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	2200      	movs	r2, #0
 8010180:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010184:	2300      	movs	r3, #0
}
 8010186:	4618      	mov	r0, r3
 8010188:	3714      	adds	r7, #20
 801018a:	46bd      	mov	sp, r7
 801018c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010190:	4770      	bx	lr

08010192 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010192:	b580      	push	{r7, lr}
 8010194:	b084      	sub	sp, #16
 8010196:	af00      	add	r7, sp, #0
 8010198:	6078      	str	r0, [r7, #4]
 801019a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80101a2:	2b01      	cmp	r3, #1
 80101a4:	d101      	bne.n	80101aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80101a6:	2302      	movs	r3, #2
 80101a8:	e02d      	b.n	8010206 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	2201      	movs	r2, #1
 80101ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	2224      	movs	r2, #36	@ 0x24
 80101b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	681a      	ldr	r2, [r3, #0]
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	f022 0201 	bic.w	r2, r2, #1
 80101d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	689b      	ldr	r3, [r3, #8]
 80101d8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	683a      	ldr	r2, [r7, #0]
 80101e2:	430a      	orrs	r2, r1
 80101e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80101e6:	6878      	ldr	r0, [r7, #4]
 80101e8:	f000 f850 	bl	801028c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	68fa      	ldr	r2, [r7, #12]
 80101f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	2220      	movs	r2, #32
 80101f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	2200      	movs	r2, #0
 8010200:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010204:	2300      	movs	r3, #0
}
 8010206:	4618      	mov	r0, r3
 8010208:	3710      	adds	r7, #16
 801020a:	46bd      	mov	sp, r7
 801020c:	bd80      	pop	{r7, pc}

0801020e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801020e:	b580      	push	{r7, lr}
 8010210:	b084      	sub	sp, #16
 8010212:	af00      	add	r7, sp, #0
 8010214:	6078      	str	r0, [r7, #4]
 8010216:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801021e:	2b01      	cmp	r3, #1
 8010220:	d101      	bne.n	8010226 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010222:	2302      	movs	r3, #2
 8010224:	e02d      	b.n	8010282 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	2201      	movs	r2, #1
 801022a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	2224      	movs	r2, #36	@ 0x24
 8010232:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	681a      	ldr	r2, [r3, #0]
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	f022 0201 	bic.w	r2, r2, #1
 801024c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	689b      	ldr	r3, [r3, #8]
 8010254:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	683a      	ldr	r2, [r7, #0]
 801025e:	430a      	orrs	r2, r1
 8010260:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010262:	6878      	ldr	r0, [r7, #4]
 8010264:	f000 f812 	bl	801028c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	68fa      	ldr	r2, [r7, #12]
 801026e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	2220      	movs	r2, #32
 8010274:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	2200      	movs	r2, #0
 801027c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010280:	2300      	movs	r3, #0
}
 8010282:	4618      	mov	r0, r3
 8010284:	3710      	adds	r7, #16
 8010286:	46bd      	mov	sp, r7
 8010288:	bd80      	pop	{r7, pc}
	...

0801028c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801028c:	b480      	push	{r7}
 801028e:	b085      	sub	sp, #20
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010298:	2b00      	cmp	r3, #0
 801029a:	d108      	bne.n	80102ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	2201      	movs	r2, #1
 80102a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	2201      	movs	r2, #1
 80102a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80102ac:	e031      	b.n	8010312 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80102ae:	2310      	movs	r3, #16
 80102b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80102b2:	2310      	movs	r3, #16
 80102b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	689b      	ldr	r3, [r3, #8]
 80102bc:	0e5b      	lsrs	r3, r3, #25
 80102be:	b2db      	uxtb	r3, r3
 80102c0:	f003 0307 	and.w	r3, r3, #7
 80102c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	689b      	ldr	r3, [r3, #8]
 80102cc:	0f5b      	lsrs	r3, r3, #29
 80102ce:	b2db      	uxtb	r3, r3
 80102d0:	f003 0307 	and.w	r3, r3, #7
 80102d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80102d6:	7bbb      	ldrb	r3, [r7, #14]
 80102d8:	7b3a      	ldrb	r2, [r7, #12]
 80102da:	4911      	ldr	r1, [pc, #68]	@ (8010320 <UARTEx_SetNbDataToProcess+0x94>)
 80102dc:	5c8a      	ldrb	r2, [r1, r2]
 80102de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80102e2:	7b3a      	ldrb	r2, [r7, #12]
 80102e4:	490f      	ldr	r1, [pc, #60]	@ (8010324 <UARTEx_SetNbDataToProcess+0x98>)
 80102e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80102e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80102ec:	b29a      	uxth	r2, r3
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80102f4:	7bfb      	ldrb	r3, [r7, #15]
 80102f6:	7b7a      	ldrb	r2, [r7, #13]
 80102f8:	4909      	ldr	r1, [pc, #36]	@ (8010320 <UARTEx_SetNbDataToProcess+0x94>)
 80102fa:	5c8a      	ldrb	r2, [r1, r2]
 80102fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010300:	7b7a      	ldrb	r2, [r7, #13]
 8010302:	4908      	ldr	r1, [pc, #32]	@ (8010324 <UARTEx_SetNbDataToProcess+0x98>)
 8010304:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010306:	fb93 f3f2 	sdiv	r3, r3, r2
 801030a:	b29a      	uxth	r2, r3
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010312:	bf00      	nop
 8010314:	3714      	adds	r7, #20
 8010316:	46bd      	mov	sp, r7
 8010318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031c:	4770      	bx	lr
 801031e:	bf00      	nop
 8010320:	0802e058 	.word	0x0802e058
 8010324:	0802e060 	.word	0x0802e060

08010328 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 8010328:	b480      	push	{r7}
 801032a:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 801032c:	bf00      	nop
 801032e:	46bd      	mov	sp, r7
 8010330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010334:	4770      	bx	lr
	...

08010338 <__NVIC_SetPriority>:
{
 8010338:	b480      	push	{r7}
 801033a:	b083      	sub	sp, #12
 801033c:	af00      	add	r7, sp, #0
 801033e:	4603      	mov	r3, r0
 8010340:	6039      	str	r1, [r7, #0]
 8010342:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8010344:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010348:	2b00      	cmp	r3, #0
 801034a:	db0a      	blt.n	8010362 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801034c:	683b      	ldr	r3, [r7, #0]
 801034e:	b2da      	uxtb	r2, r3
 8010350:	490c      	ldr	r1, [pc, #48]	@ (8010384 <__NVIC_SetPriority+0x4c>)
 8010352:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010356:	0112      	lsls	r2, r2, #4
 8010358:	b2d2      	uxtb	r2, r2
 801035a:	440b      	add	r3, r1
 801035c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8010360:	e00a      	b.n	8010378 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010362:	683b      	ldr	r3, [r7, #0]
 8010364:	b2da      	uxtb	r2, r3
 8010366:	4908      	ldr	r1, [pc, #32]	@ (8010388 <__NVIC_SetPriority+0x50>)
 8010368:	88fb      	ldrh	r3, [r7, #6]
 801036a:	f003 030f 	and.w	r3, r3, #15
 801036e:	3b04      	subs	r3, #4
 8010370:	0112      	lsls	r2, r2, #4
 8010372:	b2d2      	uxtb	r2, r2
 8010374:	440b      	add	r3, r1
 8010376:	761a      	strb	r2, [r3, #24]
}
 8010378:	bf00      	nop
 801037a:	370c      	adds	r7, #12
 801037c:	46bd      	mov	sp, r7
 801037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010382:	4770      	bx	lr
 8010384:	e000e100 	.word	0xe000e100
 8010388:	e000ed00 	.word	0xe000ed00

0801038c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801038c:	b580      	push	{r7, lr}
 801038e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8010390:	4b05      	ldr	r3, [pc, #20]	@ (80103a8 <SysTick_Handler+0x1c>)
 8010392:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8010394:	f002 fac8 	bl	8012928 <xTaskGetSchedulerState>
 8010398:	4603      	mov	r3, r0
 801039a:	2b01      	cmp	r3, #1
 801039c:	d001      	beq.n	80103a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801039e:	f003 f9c3 	bl	8013728 <xPortSysTickHandler>
  }
}
 80103a2:	bf00      	nop
 80103a4:	bd80      	pop	{r7, pc}
 80103a6:	bf00      	nop
 80103a8:	e000e010 	.word	0xe000e010

080103ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80103ac:	b580      	push	{r7, lr}
 80103ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80103b0:	2100      	movs	r1, #0
 80103b2:	f06f 0004 	mvn.w	r0, #4
 80103b6:	f7ff ffbf 	bl	8010338 <__NVIC_SetPriority>
#endif
}
 80103ba:	bf00      	nop
 80103bc:	bd80      	pop	{r7, pc}
	...

080103c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80103c0:	b480      	push	{r7}
 80103c2:	b083      	sub	sp, #12
 80103c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80103c6:	f3ef 8305 	mrs	r3, IPSR
 80103ca:	603b      	str	r3, [r7, #0]
  return(result);
 80103cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d003      	beq.n	80103da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80103d2:	f06f 0305 	mvn.w	r3, #5
 80103d6:	607b      	str	r3, [r7, #4]
 80103d8:	e00c      	b.n	80103f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80103da:	4b0a      	ldr	r3, [pc, #40]	@ (8010404 <osKernelInitialize+0x44>)
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d105      	bne.n	80103ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80103e2:	4b08      	ldr	r3, [pc, #32]	@ (8010404 <osKernelInitialize+0x44>)
 80103e4:	2201      	movs	r2, #1
 80103e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80103e8:	2300      	movs	r3, #0
 80103ea:	607b      	str	r3, [r7, #4]
 80103ec:	e002      	b.n	80103f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80103ee:	f04f 33ff 	mov.w	r3, #4294967295
 80103f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80103f4:	687b      	ldr	r3, [r7, #4]
}
 80103f6:	4618      	mov	r0, r3
 80103f8:	370c      	adds	r7, #12
 80103fa:	46bd      	mov	sp, r7
 80103fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010400:	4770      	bx	lr
 8010402:	bf00      	nop
 8010404:	240013e4 	.word	0x240013e4

08010408 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8010408:	b580      	push	{r7, lr}
 801040a:	b082      	sub	sp, #8
 801040c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801040e:	f3ef 8305 	mrs	r3, IPSR
 8010412:	603b      	str	r3, [r7, #0]
  return(result);
 8010414:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010416:	2b00      	cmp	r3, #0
 8010418:	d003      	beq.n	8010422 <osKernelStart+0x1a>
    stat = osErrorISR;
 801041a:	f06f 0305 	mvn.w	r3, #5
 801041e:	607b      	str	r3, [r7, #4]
 8010420:	e010      	b.n	8010444 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8010422:	4b0b      	ldr	r3, [pc, #44]	@ (8010450 <osKernelStart+0x48>)
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	2b01      	cmp	r3, #1
 8010428:	d109      	bne.n	801043e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801042a:	f7ff ffbf 	bl	80103ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801042e:	4b08      	ldr	r3, [pc, #32]	@ (8010450 <osKernelStart+0x48>)
 8010430:	2202      	movs	r2, #2
 8010432:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8010434:	f001 fe14 	bl	8012060 <vTaskStartScheduler>
      stat = osOK;
 8010438:	2300      	movs	r3, #0
 801043a:	607b      	str	r3, [r7, #4]
 801043c:	e002      	b.n	8010444 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801043e:	f04f 33ff 	mov.w	r3, #4294967295
 8010442:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8010444:	687b      	ldr	r3, [r7, #4]
}
 8010446:	4618      	mov	r0, r3
 8010448:	3708      	adds	r7, #8
 801044a:	46bd      	mov	sp, r7
 801044c:	bd80      	pop	{r7, pc}
 801044e:	bf00      	nop
 8010450:	240013e4 	.word	0x240013e4

08010454 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010454:	b580      	push	{r7, lr}
 8010456:	b08e      	sub	sp, #56	@ 0x38
 8010458:	af04      	add	r7, sp, #16
 801045a:	60f8      	str	r0, [r7, #12]
 801045c:	60b9      	str	r1, [r7, #8]
 801045e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010460:	2300      	movs	r3, #0
 8010462:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010464:	f3ef 8305 	mrs	r3, IPSR
 8010468:	617b      	str	r3, [r7, #20]
  return(result);
 801046a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801046c:	2b00      	cmp	r3, #0
 801046e:	d17e      	bne.n	801056e <osThreadNew+0x11a>
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d07b      	beq.n	801056e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8010476:	2380      	movs	r3, #128	@ 0x80
 8010478:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801047a:	2318      	movs	r3, #24
 801047c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801047e:	2300      	movs	r3, #0
 8010480:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8010482:	f04f 33ff 	mov.w	r3, #4294967295
 8010486:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d045      	beq.n	801051a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d002      	beq.n	801049c <osThreadNew+0x48>
        name = attr->name;
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	699b      	ldr	r3, [r3, #24]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d002      	beq.n	80104aa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	699b      	ldr	r3, [r3, #24]
 80104a8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80104aa:	69fb      	ldr	r3, [r7, #28]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d008      	beq.n	80104c2 <osThreadNew+0x6e>
 80104b0:	69fb      	ldr	r3, [r7, #28]
 80104b2:	2b38      	cmp	r3, #56	@ 0x38
 80104b4:	d805      	bhi.n	80104c2 <osThreadNew+0x6e>
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	685b      	ldr	r3, [r3, #4]
 80104ba:	f003 0301 	and.w	r3, r3, #1
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d001      	beq.n	80104c6 <osThreadNew+0x72>
        return (NULL);
 80104c2:	2300      	movs	r3, #0
 80104c4:	e054      	b.n	8010570 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	695b      	ldr	r3, [r3, #20]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d003      	beq.n	80104d6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	695b      	ldr	r3, [r3, #20]
 80104d2:	089b      	lsrs	r3, r3, #2
 80104d4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	689b      	ldr	r3, [r3, #8]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d00e      	beq.n	80104fc <osThreadNew+0xa8>
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	68db      	ldr	r3, [r3, #12]
 80104e2:	2ba7      	cmp	r3, #167	@ 0xa7
 80104e4:	d90a      	bls.n	80104fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d006      	beq.n	80104fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	695b      	ldr	r3, [r3, #20]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d002      	beq.n	80104fc <osThreadNew+0xa8>
        mem = 1;
 80104f6:	2301      	movs	r3, #1
 80104f8:	61bb      	str	r3, [r7, #24]
 80104fa:	e010      	b.n	801051e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	689b      	ldr	r3, [r3, #8]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d10c      	bne.n	801051e <osThreadNew+0xca>
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	68db      	ldr	r3, [r3, #12]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d108      	bne.n	801051e <osThreadNew+0xca>
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	691b      	ldr	r3, [r3, #16]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d104      	bne.n	801051e <osThreadNew+0xca>
          mem = 0;
 8010514:	2300      	movs	r3, #0
 8010516:	61bb      	str	r3, [r7, #24]
 8010518:	e001      	b.n	801051e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801051a:	2300      	movs	r3, #0
 801051c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801051e:	69bb      	ldr	r3, [r7, #24]
 8010520:	2b01      	cmp	r3, #1
 8010522:	d110      	bne.n	8010546 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8010528:	687a      	ldr	r2, [r7, #4]
 801052a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801052c:	9202      	str	r2, [sp, #8]
 801052e:	9301      	str	r3, [sp, #4]
 8010530:	69fb      	ldr	r3, [r7, #28]
 8010532:	9300      	str	r3, [sp, #0]
 8010534:	68bb      	ldr	r3, [r7, #8]
 8010536:	6a3a      	ldr	r2, [r7, #32]
 8010538:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801053a:	68f8      	ldr	r0, [r7, #12]
 801053c:	f001 fb9c 	bl	8011c78 <xTaskCreateStatic>
 8010540:	4603      	mov	r3, r0
 8010542:	613b      	str	r3, [r7, #16]
 8010544:	e013      	b.n	801056e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8010546:	69bb      	ldr	r3, [r7, #24]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d110      	bne.n	801056e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801054c:	6a3b      	ldr	r3, [r7, #32]
 801054e:	b29a      	uxth	r2, r3
 8010550:	f107 0310 	add.w	r3, r7, #16
 8010554:	9301      	str	r3, [sp, #4]
 8010556:	69fb      	ldr	r3, [r7, #28]
 8010558:	9300      	str	r3, [sp, #0]
 801055a:	68bb      	ldr	r3, [r7, #8]
 801055c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801055e:	68f8      	ldr	r0, [r7, #12]
 8010560:	f001 fbea 	bl	8011d38 <xTaskCreate>
 8010564:	4603      	mov	r3, r0
 8010566:	2b01      	cmp	r3, #1
 8010568:	d001      	beq.n	801056e <osThreadNew+0x11a>
            hTask = NULL;
 801056a:	2300      	movs	r3, #0
 801056c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801056e:	693b      	ldr	r3, [r7, #16]
}
 8010570:	4618      	mov	r0, r3
 8010572:	3728      	adds	r7, #40	@ 0x28
 8010574:	46bd      	mov	sp, r7
 8010576:	bd80      	pop	{r7, pc}

08010578 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8010578:	b580      	push	{r7, lr}
 801057a:	b084      	sub	sp, #16
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010580:	f3ef 8305 	mrs	r3, IPSR
 8010584:	60bb      	str	r3, [r7, #8]
  return(result);
 8010586:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010588:	2b00      	cmp	r3, #0
 801058a:	d003      	beq.n	8010594 <osDelay+0x1c>
    stat = osErrorISR;
 801058c:	f06f 0305 	mvn.w	r3, #5
 8010590:	60fb      	str	r3, [r7, #12]
 8010592:	e007      	b.n	80105a4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8010594:	2300      	movs	r3, #0
 8010596:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	2b00      	cmp	r3, #0
 801059c:	d002      	beq.n	80105a4 <osDelay+0x2c>
      vTaskDelay(ticks);
 801059e:	6878      	ldr	r0, [r7, #4]
 80105a0:	f001 fd28 	bl	8011ff4 <vTaskDelay>
    }
  }

  return (stat);
 80105a4:	68fb      	ldr	r3, [r7, #12]
}
 80105a6:	4618      	mov	r0, r3
 80105a8:	3710      	adds	r7, #16
 80105aa:	46bd      	mov	sp, r7
 80105ac:	bd80      	pop	{r7, pc}

080105ae <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80105ae:	b580      	push	{r7, lr}
 80105b0:	b08a      	sub	sp, #40	@ 0x28
 80105b2:	af02      	add	r7, sp, #8
 80105b4:	60f8      	str	r0, [r7, #12]
 80105b6:	60b9      	str	r1, [r7, #8]
 80105b8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80105ba:	2300      	movs	r3, #0
 80105bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80105be:	f3ef 8305 	mrs	r3, IPSR
 80105c2:	613b      	str	r3, [r7, #16]
  return(result);
 80105c4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d175      	bne.n	80106b6 <osSemaphoreNew+0x108>
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d072      	beq.n	80106b6 <osSemaphoreNew+0x108>
 80105d0:	68ba      	ldr	r2, [r7, #8]
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	429a      	cmp	r2, r3
 80105d6:	d86e      	bhi.n	80106b6 <osSemaphoreNew+0x108>
    mem = -1;
 80105d8:	f04f 33ff 	mov.w	r3, #4294967295
 80105dc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d015      	beq.n	8010610 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	689b      	ldr	r3, [r3, #8]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d006      	beq.n	80105fa <osSemaphoreNew+0x4c>
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	68db      	ldr	r3, [r3, #12]
 80105f0:	2b4f      	cmp	r3, #79	@ 0x4f
 80105f2:	d902      	bls.n	80105fa <osSemaphoreNew+0x4c>
        mem = 1;
 80105f4:	2301      	movs	r3, #1
 80105f6:	61bb      	str	r3, [r7, #24]
 80105f8:	e00c      	b.n	8010614 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	689b      	ldr	r3, [r3, #8]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d108      	bne.n	8010614 <osSemaphoreNew+0x66>
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	68db      	ldr	r3, [r3, #12]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d104      	bne.n	8010614 <osSemaphoreNew+0x66>
          mem = 0;
 801060a:	2300      	movs	r3, #0
 801060c:	61bb      	str	r3, [r7, #24]
 801060e:	e001      	b.n	8010614 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8010610:	2300      	movs	r3, #0
 8010612:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8010614:	69bb      	ldr	r3, [r7, #24]
 8010616:	f1b3 3fff 	cmp.w	r3, #4294967295
 801061a:	d04c      	beq.n	80106b6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	2b01      	cmp	r3, #1
 8010620:	d128      	bne.n	8010674 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8010622:	69bb      	ldr	r3, [r7, #24]
 8010624:	2b01      	cmp	r3, #1
 8010626:	d10a      	bne.n	801063e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	689b      	ldr	r3, [r3, #8]
 801062c:	2203      	movs	r2, #3
 801062e:	9200      	str	r2, [sp, #0]
 8010630:	2200      	movs	r2, #0
 8010632:	2100      	movs	r1, #0
 8010634:	2001      	movs	r0, #1
 8010636:	f000 fb5d 	bl	8010cf4 <xQueueGenericCreateStatic>
 801063a:	61f8      	str	r0, [r7, #28]
 801063c:	e005      	b.n	801064a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 801063e:	2203      	movs	r2, #3
 8010640:	2100      	movs	r1, #0
 8010642:	2001      	movs	r0, #1
 8010644:	f000 fbd3 	bl	8010dee <xQueueGenericCreate>
 8010648:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 801064a:	69fb      	ldr	r3, [r7, #28]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d022      	beq.n	8010696 <osSemaphoreNew+0xe8>
 8010650:	68bb      	ldr	r3, [r7, #8]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d01f      	beq.n	8010696 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010656:	2300      	movs	r3, #0
 8010658:	2200      	movs	r2, #0
 801065a:	2100      	movs	r1, #0
 801065c:	69f8      	ldr	r0, [r7, #28]
 801065e:	f000 fc93 	bl	8010f88 <xQueueGenericSend>
 8010662:	4603      	mov	r3, r0
 8010664:	2b01      	cmp	r3, #1
 8010666:	d016      	beq.n	8010696 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8010668:	69f8      	ldr	r0, [r7, #28]
 801066a:	f001 f931 	bl	80118d0 <vQueueDelete>
            hSemaphore = NULL;
 801066e:	2300      	movs	r3, #0
 8010670:	61fb      	str	r3, [r7, #28]
 8010672:	e010      	b.n	8010696 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8010674:	69bb      	ldr	r3, [r7, #24]
 8010676:	2b01      	cmp	r3, #1
 8010678:	d108      	bne.n	801068c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	689b      	ldr	r3, [r3, #8]
 801067e:	461a      	mov	r2, r3
 8010680:	68b9      	ldr	r1, [r7, #8]
 8010682:	68f8      	ldr	r0, [r7, #12]
 8010684:	f000 fc11 	bl	8010eaa <xQueueCreateCountingSemaphoreStatic>
 8010688:	61f8      	str	r0, [r7, #28]
 801068a:	e004      	b.n	8010696 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 801068c:	68b9      	ldr	r1, [r7, #8]
 801068e:	68f8      	ldr	r0, [r7, #12]
 8010690:	f000 fc44 	bl	8010f1c <xQueueCreateCountingSemaphore>
 8010694:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8010696:	69fb      	ldr	r3, [r7, #28]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d00c      	beq.n	80106b6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d003      	beq.n	80106aa <osSemaphoreNew+0xfc>
          name = attr->name;
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	617b      	str	r3, [r7, #20]
 80106a8:	e001      	b.n	80106ae <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80106aa:	2300      	movs	r3, #0
 80106ac:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80106ae:	6979      	ldr	r1, [r7, #20]
 80106b0:	69f8      	ldr	r0, [r7, #28]
 80106b2:	f001 fa59 	bl	8011b68 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80106b6:	69fb      	ldr	r3, [r7, #28]
}
 80106b8:	4618      	mov	r0, r3
 80106ba:	3720      	adds	r7, #32
 80106bc:	46bd      	mov	sp, r7
 80106be:	bd80      	pop	{r7, pc}

080106c0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b086      	sub	sp, #24
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
 80106c8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80106ce:	2300      	movs	r3, #0
 80106d0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80106d2:	693b      	ldr	r3, [r7, #16]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d103      	bne.n	80106e0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80106d8:	f06f 0303 	mvn.w	r3, #3
 80106dc:	617b      	str	r3, [r7, #20]
 80106de:	e039      	b.n	8010754 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80106e0:	f3ef 8305 	mrs	r3, IPSR
 80106e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80106e6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d022      	beq.n	8010732 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80106ec:	683b      	ldr	r3, [r7, #0]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d003      	beq.n	80106fa <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80106f2:	f06f 0303 	mvn.w	r3, #3
 80106f6:	617b      	str	r3, [r7, #20]
 80106f8:	e02c      	b.n	8010754 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80106fa:	2300      	movs	r3, #0
 80106fc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80106fe:	f107 0308 	add.w	r3, r7, #8
 8010702:	461a      	mov	r2, r3
 8010704:	2100      	movs	r1, #0
 8010706:	6938      	ldr	r0, [r7, #16]
 8010708:	f001 f860 	bl	80117cc <xQueueReceiveFromISR>
 801070c:	4603      	mov	r3, r0
 801070e:	2b01      	cmp	r3, #1
 8010710:	d003      	beq.n	801071a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8010712:	f06f 0302 	mvn.w	r3, #2
 8010716:	617b      	str	r3, [r7, #20]
 8010718:	e01c      	b.n	8010754 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 801071a:	68bb      	ldr	r3, [r7, #8]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d019      	beq.n	8010754 <osSemaphoreAcquire+0x94>
 8010720:	4b0f      	ldr	r3, [pc, #60]	@ (8010760 <osSemaphoreAcquire+0xa0>)
 8010722:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010726:	601a      	str	r2, [r3, #0]
 8010728:	f3bf 8f4f 	dsb	sy
 801072c:	f3bf 8f6f 	isb	sy
 8010730:	e010      	b.n	8010754 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8010732:	6839      	ldr	r1, [r7, #0]
 8010734:	6938      	ldr	r0, [r7, #16]
 8010736:	f000 ff39 	bl	80115ac <xQueueSemaphoreTake>
 801073a:	4603      	mov	r3, r0
 801073c:	2b01      	cmp	r3, #1
 801073e:	d009      	beq.n	8010754 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8010740:	683b      	ldr	r3, [r7, #0]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d003      	beq.n	801074e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8010746:	f06f 0301 	mvn.w	r3, #1
 801074a:	617b      	str	r3, [r7, #20]
 801074c:	e002      	b.n	8010754 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 801074e:	f06f 0302 	mvn.w	r3, #2
 8010752:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8010754:	697b      	ldr	r3, [r7, #20]
}
 8010756:	4618      	mov	r0, r3
 8010758:	3718      	adds	r7, #24
 801075a:	46bd      	mov	sp, r7
 801075c:	bd80      	pop	{r7, pc}
 801075e:	bf00      	nop
 8010760:	e000ed04 	.word	0xe000ed04

08010764 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8010764:	b580      	push	{r7, lr}
 8010766:	b086      	sub	sp, #24
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8010770:	2300      	movs	r3, #0
 8010772:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8010774:	693b      	ldr	r3, [r7, #16]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d103      	bne.n	8010782 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 801077a:	f06f 0303 	mvn.w	r3, #3
 801077e:	617b      	str	r3, [r7, #20]
 8010780:	e02c      	b.n	80107dc <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010782:	f3ef 8305 	mrs	r3, IPSR
 8010786:	60fb      	str	r3, [r7, #12]
  return(result);
 8010788:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801078a:	2b00      	cmp	r3, #0
 801078c:	d01a      	beq.n	80107c4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 801078e:	2300      	movs	r3, #0
 8010790:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010792:	f107 0308 	add.w	r3, r7, #8
 8010796:	4619      	mov	r1, r3
 8010798:	6938      	ldr	r0, [r7, #16]
 801079a:	f000 fd95 	bl	80112c8 <xQueueGiveFromISR>
 801079e:	4603      	mov	r3, r0
 80107a0:	2b01      	cmp	r3, #1
 80107a2:	d003      	beq.n	80107ac <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80107a4:	f06f 0302 	mvn.w	r3, #2
 80107a8:	617b      	str	r3, [r7, #20]
 80107aa:	e017      	b.n	80107dc <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80107ac:	68bb      	ldr	r3, [r7, #8]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d014      	beq.n	80107dc <osSemaphoreRelease+0x78>
 80107b2:	4b0d      	ldr	r3, [pc, #52]	@ (80107e8 <osSemaphoreRelease+0x84>)
 80107b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80107b8:	601a      	str	r2, [r3, #0]
 80107ba:	f3bf 8f4f 	dsb	sy
 80107be:	f3bf 8f6f 	isb	sy
 80107c2:	e00b      	b.n	80107dc <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80107c4:	2300      	movs	r3, #0
 80107c6:	2200      	movs	r2, #0
 80107c8:	2100      	movs	r1, #0
 80107ca:	6938      	ldr	r0, [r7, #16]
 80107cc:	f000 fbdc 	bl	8010f88 <xQueueGenericSend>
 80107d0:	4603      	mov	r3, r0
 80107d2:	2b01      	cmp	r3, #1
 80107d4:	d002      	beq.n	80107dc <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80107d6:	f06f 0302 	mvn.w	r3, #2
 80107da:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80107dc:	697b      	ldr	r3, [r7, #20]
}
 80107de:	4618      	mov	r0, r3
 80107e0:	3718      	adds	r7, #24
 80107e2:	46bd      	mov	sp, r7
 80107e4:	bd80      	pop	{r7, pc}
 80107e6:	bf00      	nop
 80107e8:	e000ed04 	.word	0xe000ed04

080107ec <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b08a      	sub	sp, #40	@ 0x28
 80107f0:	af02      	add	r7, sp, #8
 80107f2:	60f8      	str	r0, [r7, #12]
 80107f4:	60b9      	str	r1, [r7, #8]
 80107f6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80107f8:	2300      	movs	r3, #0
 80107fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80107fc:	f3ef 8305 	mrs	r3, IPSR
 8010800:	613b      	str	r3, [r7, #16]
  return(result);
 8010802:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8010804:	2b00      	cmp	r3, #0
 8010806:	d15f      	bne.n	80108c8 <osMessageQueueNew+0xdc>
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d05c      	beq.n	80108c8 <osMessageQueueNew+0xdc>
 801080e:	68bb      	ldr	r3, [r7, #8]
 8010810:	2b00      	cmp	r3, #0
 8010812:	d059      	beq.n	80108c8 <osMessageQueueNew+0xdc>
    mem = -1;
 8010814:	f04f 33ff 	mov.w	r3, #4294967295
 8010818:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d029      	beq.n	8010874 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	689b      	ldr	r3, [r3, #8]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d012      	beq.n	801084e <osMessageQueueNew+0x62>
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	68db      	ldr	r3, [r3, #12]
 801082c:	2b4f      	cmp	r3, #79	@ 0x4f
 801082e:	d90e      	bls.n	801084e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010834:	2b00      	cmp	r3, #0
 8010836:	d00a      	beq.n	801084e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	695a      	ldr	r2, [r3, #20]
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	68b9      	ldr	r1, [r7, #8]
 8010840:	fb01 f303 	mul.w	r3, r1, r3
 8010844:	429a      	cmp	r2, r3
 8010846:	d302      	bcc.n	801084e <osMessageQueueNew+0x62>
        mem = 1;
 8010848:	2301      	movs	r3, #1
 801084a:	61bb      	str	r3, [r7, #24]
 801084c:	e014      	b.n	8010878 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	689b      	ldr	r3, [r3, #8]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d110      	bne.n	8010878 <osMessageQueueNew+0x8c>
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	68db      	ldr	r3, [r3, #12]
 801085a:	2b00      	cmp	r3, #0
 801085c:	d10c      	bne.n	8010878 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010862:	2b00      	cmp	r3, #0
 8010864:	d108      	bne.n	8010878 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	695b      	ldr	r3, [r3, #20]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d104      	bne.n	8010878 <osMessageQueueNew+0x8c>
          mem = 0;
 801086e:	2300      	movs	r3, #0
 8010870:	61bb      	str	r3, [r7, #24]
 8010872:	e001      	b.n	8010878 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8010874:	2300      	movs	r3, #0
 8010876:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8010878:	69bb      	ldr	r3, [r7, #24]
 801087a:	2b01      	cmp	r3, #1
 801087c:	d10b      	bne.n	8010896 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	691a      	ldr	r2, [r3, #16]
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	689b      	ldr	r3, [r3, #8]
 8010886:	2100      	movs	r1, #0
 8010888:	9100      	str	r1, [sp, #0]
 801088a:	68b9      	ldr	r1, [r7, #8]
 801088c:	68f8      	ldr	r0, [r7, #12]
 801088e:	f000 fa31 	bl	8010cf4 <xQueueGenericCreateStatic>
 8010892:	61f8      	str	r0, [r7, #28]
 8010894:	e008      	b.n	80108a8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8010896:	69bb      	ldr	r3, [r7, #24]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d105      	bne.n	80108a8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 801089c:	2200      	movs	r2, #0
 801089e:	68b9      	ldr	r1, [r7, #8]
 80108a0:	68f8      	ldr	r0, [r7, #12]
 80108a2:	f000 faa4 	bl	8010dee <xQueueGenericCreate>
 80108a6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80108a8:	69fb      	ldr	r3, [r7, #28]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d00c      	beq.n	80108c8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d003      	beq.n	80108bc <osMessageQueueNew+0xd0>
        name = attr->name;
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	617b      	str	r3, [r7, #20]
 80108ba:	e001      	b.n	80108c0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80108bc:	2300      	movs	r3, #0
 80108be:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80108c0:	6979      	ldr	r1, [r7, #20]
 80108c2:	69f8      	ldr	r0, [r7, #28]
 80108c4:	f001 f950 	bl	8011b68 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80108c8:	69fb      	ldr	r3, [r7, #28]
}
 80108ca:	4618      	mov	r0, r3
 80108cc:	3720      	adds	r7, #32
 80108ce:	46bd      	mov	sp, r7
 80108d0:	bd80      	pop	{r7, pc}
	...

080108d4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80108d4:	b580      	push	{r7, lr}
 80108d6:	b088      	sub	sp, #32
 80108d8:	af00      	add	r7, sp, #0
 80108da:	60f8      	str	r0, [r7, #12]
 80108dc:	60b9      	str	r1, [r7, #8]
 80108de:	603b      	str	r3, [r7, #0]
 80108e0:	4613      	mov	r3, r2
 80108e2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80108e8:	2300      	movs	r3, #0
 80108ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80108ec:	f3ef 8305 	mrs	r3, IPSR
 80108f0:	617b      	str	r3, [r7, #20]
  return(result);
 80108f2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d028      	beq.n	801094a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80108f8:	69bb      	ldr	r3, [r7, #24]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d005      	beq.n	801090a <osMessageQueuePut+0x36>
 80108fe:	68bb      	ldr	r3, [r7, #8]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d002      	beq.n	801090a <osMessageQueuePut+0x36>
 8010904:	683b      	ldr	r3, [r7, #0]
 8010906:	2b00      	cmp	r3, #0
 8010908:	d003      	beq.n	8010912 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 801090a:	f06f 0303 	mvn.w	r3, #3
 801090e:	61fb      	str	r3, [r7, #28]
 8010910:	e038      	b.n	8010984 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8010912:	2300      	movs	r3, #0
 8010914:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8010916:	f107 0210 	add.w	r2, r7, #16
 801091a:	2300      	movs	r3, #0
 801091c:	68b9      	ldr	r1, [r7, #8]
 801091e:	69b8      	ldr	r0, [r7, #24]
 8010920:	f000 fc34 	bl	801118c <xQueueGenericSendFromISR>
 8010924:	4603      	mov	r3, r0
 8010926:	2b01      	cmp	r3, #1
 8010928:	d003      	beq.n	8010932 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 801092a:	f06f 0302 	mvn.w	r3, #2
 801092e:	61fb      	str	r3, [r7, #28]
 8010930:	e028      	b.n	8010984 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8010932:	693b      	ldr	r3, [r7, #16]
 8010934:	2b00      	cmp	r3, #0
 8010936:	d025      	beq.n	8010984 <osMessageQueuePut+0xb0>
 8010938:	4b15      	ldr	r3, [pc, #84]	@ (8010990 <osMessageQueuePut+0xbc>)
 801093a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801093e:	601a      	str	r2, [r3, #0]
 8010940:	f3bf 8f4f 	dsb	sy
 8010944:	f3bf 8f6f 	isb	sy
 8010948:	e01c      	b.n	8010984 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801094a:	69bb      	ldr	r3, [r7, #24]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d002      	beq.n	8010956 <osMessageQueuePut+0x82>
 8010950:	68bb      	ldr	r3, [r7, #8]
 8010952:	2b00      	cmp	r3, #0
 8010954:	d103      	bne.n	801095e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8010956:	f06f 0303 	mvn.w	r3, #3
 801095a:	61fb      	str	r3, [r7, #28]
 801095c:	e012      	b.n	8010984 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801095e:	2300      	movs	r3, #0
 8010960:	683a      	ldr	r2, [r7, #0]
 8010962:	68b9      	ldr	r1, [r7, #8]
 8010964:	69b8      	ldr	r0, [r7, #24]
 8010966:	f000 fb0f 	bl	8010f88 <xQueueGenericSend>
 801096a:	4603      	mov	r3, r0
 801096c:	2b01      	cmp	r3, #1
 801096e:	d009      	beq.n	8010984 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8010970:	683b      	ldr	r3, [r7, #0]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d003      	beq.n	801097e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8010976:	f06f 0301 	mvn.w	r3, #1
 801097a:	61fb      	str	r3, [r7, #28]
 801097c:	e002      	b.n	8010984 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 801097e:	f06f 0302 	mvn.w	r3, #2
 8010982:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8010984:	69fb      	ldr	r3, [r7, #28]
}
 8010986:	4618      	mov	r0, r3
 8010988:	3720      	adds	r7, #32
 801098a:	46bd      	mov	sp, r7
 801098c:	bd80      	pop	{r7, pc}
 801098e:	bf00      	nop
 8010990:	e000ed04 	.word	0xe000ed04

08010994 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8010994:	b580      	push	{r7, lr}
 8010996:	b088      	sub	sp, #32
 8010998:	af00      	add	r7, sp, #0
 801099a:	60f8      	str	r0, [r7, #12]
 801099c:	60b9      	str	r1, [r7, #8]
 801099e:	607a      	str	r2, [r7, #4]
 80109a0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80109a6:	2300      	movs	r3, #0
 80109a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80109aa:	f3ef 8305 	mrs	r3, IPSR
 80109ae:	617b      	str	r3, [r7, #20]
  return(result);
 80109b0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d028      	beq.n	8010a08 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80109b6:	69bb      	ldr	r3, [r7, #24]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d005      	beq.n	80109c8 <osMessageQueueGet+0x34>
 80109bc:	68bb      	ldr	r3, [r7, #8]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d002      	beq.n	80109c8 <osMessageQueueGet+0x34>
 80109c2:	683b      	ldr	r3, [r7, #0]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d003      	beq.n	80109d0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80109c8:	f06f 0303 	mvn.w	r3, #3
 80109cc:	61fb      	str	r3, [r7, #28]
 80109ce:	e037      	b.n	8010a40 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80109d0:	2300      	movs	r3, #0
 80109d2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80109d4:	f107 0310 	add.w	r3, r7, #16
 80109d8:	461a      	mov	r2, r3
 80109da:	68b9      	ldr	r1, [r7, #8]
 80109dc:	69b8      	ldr	r0, [r7, #24]
 80109de:	f000 fef5 	bl	80117cc <xQueueReceiveFromISR>
 80109e2:	4603      	mov	r3, r0
 80109e4:	2b01      	cmp	r3, #1
 80109e6:	d003      	beq.n	80109f0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80109e8:	f06f 0302 	mvn.w	r3, #2
 80109ec:	61fb      	str	r3, [r7, #28]
 80109ee:	e027      	b.n	8010a40 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80109f0:	693b      	ldr	r3, [r7, #16]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d024      	beq.n	8010a40 <osMessageQueueGet+0xac>
 80109f6:	4b15      	ldr	r3, [pc, #84]	@ (8010a4c <osMessageQueueGet+0xb8>)
 80109f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80109fc:	601a      	str	r2, [r3, #0]
 80109fe:	f3bf 8f4f 	dsb	sy
 8010a02:	f3bf 8f6f 	isb	sy
 8010a06:	e01b      	b.n	8010a40 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010a08:	69bb      	ldr	r3, [r7, #24]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d002      	beq.n	8010a14 <osMessageQueueGet+0x80>
 8010a0e:	68bb      	ldr	r3, [r7, #8]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d103      	bne.n	8010a1c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8010a14:	f06f 0303 	mvn.w	r3, #3
 8010a18:	61fb      	str	r3, [r7, #28]
 8010a1a:	e011      	b.n	8010a40 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010a1c:	683a      	ldr	r2, [r7, #0]
 8010a1e:	68b9      	ldr	r1, [r7, #8]
 8010a20:	69b8      	ldr	r0, [r7, #24]
 8010a22:	f000 fce1 	bl	80113e8 <xQueueReceive>
 8010a26:	4603      	mov	r3, r0
 8010a28:	2b01      	cmp	r3, #1
 8010a2a:	d009      	beq.n	8010a40 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8010a2c:	683b      	ldr	r3, [r7, #0]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d003      	beq.n	8010a3a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8010a32:	f06f 0301 	mvn.w	r3, #1
 8010a36:	61fb      	str	r3, [r7, #28]
 8010a38:	e002      	b.n	8010a40 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8010a3a:	f06f 0302 	mvn.w	r3, #2
 8010a3e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8010a40:	69fb      	ldr	r3, [r7, #28]
}
 8010a42:	4618      	mov	r0, r3
 8010a44:	3720      	adds	r7, #32
 8010a46:	46bd      	mov	sp, r7
 8010a48:	bd80      	pop	{r7, pc}
 8010a4a:	bf00      	nop
 8010a4c:	e000ed04 	.word	0xe000ed04

08010a50 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010a50:	b480      	push	{r7}
 8010a52:	b085      	sub	sp, #20
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	60f8      	str	r0, [r7, #12]
 8010a58:	60b9      	str	r1, [r7, #8]
 8010a5a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	4a07      	ldr	r2, [pc, #28]	@ (8010a7c <vApplicationGetIdleTaskMemory+0x2c>)
 8010a60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8010a62:	68bb      	ldr	r3, [r7, #8]
 8010a64:	4a06      	ldr	r2, [pc, #24]	@ (8010a80 <vApplicationGetIdleTaskMemory+0x30>)
 8010a66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	2280      	movs	r2, #128	@ 0x80
 8010a6c:	601a      	str	r2, [r3, #0]
}
 8010a6e:	bf00      	nop
 8010a70:	3714      	adds	r7, #20
 8010a72:	46bd      	mov	sp, r7
 8010a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a78:	4770      	bx	lr
 8010a7a:	bf00      	nop
 8010a7c:	240013e8 	.word	0x240013e8
 8010a80:	24001490 	.word	0x24001490

08010a84 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8010a84:	b480      	push	{r7}
 8010a86:	b085      	sub	sp, #20
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	60f8      	str	r0, [r7, #12]
 8010a8c:	60b9      	str	r1, [r7, #8]
 8010a8e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	4a07      	ldr	r2, [pc, #28]	@ (8010ab0 <vApplicationGetTimerTaskMemory+0x2c>)
 8010a94:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8010a96:	68bb      	ldr	r3, [r7, #8]
 8010a98:	4a06      	ldr	r2, [pc, #24]	@ (8010ab4 <vApplicationGetTimerTaskMemory+0x30>)
 8010a9a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010aa2:	601a      	str	r2, [r3, #0]
}
 8010aa4:	bf00      	nop
 8010aa6:	3714      	adds	r7, #20
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aae:	4770      	bx	lr
 8010ab0:	24001690 	.word	0x24001690
 8010ab4:	24001738 	.word	0x24001738

08010ab8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010ab8:	b480      	push	{r7}
 8010aba:	b083      	sub	sp, #12
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	f103 0208 	add.w	r2, r3, #8
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	f04f 32ff 	mov.w	r2, #4294967295
 8010ad0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	f103 0208 	add.w	r2, r3, #8
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	f103 0208 	add.w	r2, r3, #8
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	2200      	movs	r2, #0
 8010aea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010aec:	bf00      	nop
 8010aee:	370c      	adds	r7, #12
 8010af0:	46bd      	mov	sp, r7
 8010af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af6:	4770      	bx	lr

08010af8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010af8:	b480      	push	{r7}
 8010afa:	b083      	sub	sp, #12
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	2200      	movs	r2, #0
 8010b04:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010b06:	bf00      	nop
 8010b08:	370c      	adds	r7, #12
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b10:	4770      	bx	lr

08010b12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010b12:	b480      	push	{r7}
 8010b14:	b085      	sub	sp, #20
 8010b16:	af00      	add	r7, sp, #0
 8010b18:	6078      	str	r0, [r7, #4]
 8010b1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	685b      	ldr	r3, [r3, #4]
 8010b20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010b22:	683b      	ldr	r3, [r7, #0]
 8010b24:	68fa      	ldr	r2, [r7, #12]
 8010b26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	689a      	ldr	r2, [r3, #8]
 8010b2c:	683b      	ldr	r3, [r7, #0]
 8010b2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	689b      	ldr	r3, [r3, #8]
 8010b34:	683a      	ldr	r2, [r7, #0]
 8010b36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	683a      	ldr	r2, [r7, #0]
 8010b3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010b3e:	683b      	ldr	r3, [r7, #0]
 8010b40:	687a      	ldr	r2, [r7, #4]
 8010b42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	1c5a      	adds	r2, r3, #1
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	601a      	str	r2, [r3, #0]
}
 8010b4e:	bf00      	nop
 8010b50:	3714      	adds	r7, #20
 8010b52:	46bd      	mov	sp, r7
 8010b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b58:	4770      	bx	lr

08010b5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010b5a:	b480      	push	{r7}
 8010b5c:	b085      	sub	sp, #20
 8010b5e:	af00      	add	r7, sp, #0
 8010b60:	6078      	str	r0, [r7, #4]
 8010b62:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010b64:	683b      	ldr	r3, [r7, #0]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010b6a:	68bb      	ldr	r3, [r7, #8]
 8010b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b70:	d103      	bne.n	8010b7a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	691b      	ldr	r3, [r3, #16]
 8010b76:	60fb      	str	r3, [r7, #12]
 8010b78:	e00c      	b.n	8010b94 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	3308      	adds	r3, #8
 8010b7e:	60fb      	str	r3, [r7, #12]
 8010b80:	e002      	b.n	8010b88 <vListInsert+0x2e>
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	685b      	ldr	r3, [r3, #4]
 8010b86:	60fb      	str	r3, [r7, #12]
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	685b      	ldr	r3, [r3, #4]
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	68ba      	ldr	r2, [r7, #8]
 8010b90:	429a      	cmp	r2, r3
 8010b92:	d2f6      	bcs.n	8010b82 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	685a      	ldr	r2, [r3, #4]
 8010b98:	683b      	ldr	r3, [r7, #0]
 8010b9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010b9c:	683b      	ldr	r3, [r7, #0]
 8010b9e:	685b      	ldr	r3, [r3, #4]
 8010ba0:	683a      	ldr	r2, [r7, #0]
 8010ba2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010ba4:	683b      	ldr	r3, [r7, #0]
 8010ba6:	68fa      	ldr	r2, [r7, #12]
 8010ba8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	683a      	ldr	r2, [r7, #0]
 8010bae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010bb0:	683b      	ldr	r3, [r7, #0]
 8010bb2:	687a      	ldr	r2, [r7, #4]
 8010bb4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	1c5a      	adds	r2, r3, #1
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	601a      	str	r2, [r3, #0]
}
 8010bc0:	bf00      	nop
 8010bc2:	3714      	adds	r7, #20
 8010bc4:	46bd      	mov	sp, r7
 8010bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bca:	4770      	bx	lr

08010bcc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010bcc:	b480      	push	{r7}
 8010bce:	b085      	sub	sp, #20
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	691b      	ldr	r3, [r3, #16]
 8010bd8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	685b      	ldr	r3, [r3, #4]
 8010bde:	687a      	ldr	r2, [r7, #4]
 8010be0:	6892      	ldr	r2, [r2, #8]
 8010be2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	689b      	ldr	r3, [r3, #8]
 8010be8:	687a      	ldr	r2, [r7, #4]
 8010bea:	6852      	ldr	r2, [r2, #4]
 8010bec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	685b      	ldr	r3, [r3, #4]
 8010bf2:	687a      	ldr	r2, [r7, #4]
 8010bf4:	429a      	cmp	r2, r3
 8010bf6:	d103      	bne.n	8010c00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	689a      	ldr	r2, [r3, #8]
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	2200      	movs	r2, #0
 8010c04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	1e5a      	subs	r2, r3, #1
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	681b      	ldr	r3, [r3, #0]
}
 8010c14:	4618      	mov	r0, r3
 8010c16:	3714      	adds	r7, #20
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c1e:	4770      	bx	lr

08010c20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010c20:	b580      	push	{r7, lr}
 8010c22:	b084      	sub	sp, #16
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	6078      	str	r0, [r7, #4]
 8010c28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d10b      	bne.n	8010c4c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c38:	f383 8811 	msr	BASEPRI, r3
 8010c3c:	f3bf 8f6f 	isb	sy
 8010c40:	f3bf 8f4f 	dsb	sy
 8010c44:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010c46:	bf00      	nop
 8010c48:	bf00      	nop
 8010c4a:	e7fd      	b.n	8010c48 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8010c4c:	f002 fcdc 	bl	8013608 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	681a      	ldr	r2, [r3, #0]
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010c58:	68f9      	ldr	r1, [r7, #12]
 8010c5a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8010c5c:	fb01 f303 	mul.w	r3, r1, r3
 8010c60:	441a      	add	r2, r3
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	2200      	movs	r2, #0
 8010c6a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	681a      	ldr	r2, [r3, #0]
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	681a      	ldr	r2, [r3, #0]
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010c7c:	3b01      	subs	r3, #1
 8010c7e:	68f9      	ldr	r1, [r7, #12]
 8010c80:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8010c82:	fb01 f303 	mul.w	r3, r1, r3
 8010c86:	441a      	add	r2, r3
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	22ff      	movs	r2, #255	@ 0xff
 8010c90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	22ff      	movs	r2, #255	@ 0xff
 8010c98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8010c9c:	683b      	ldr	r3, [r7, #0]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d114      	bne.n	8010ccc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	691b      	ldr	r3, [r3, #16]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d01a      	beq.n	8010ce0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	3310      	adds	r3, #16
 8010cae:	4618      	mov	r0, r3
 8010cb0:	f001 fc74 	bl	801259c <xTaskRemoveFromEventList>
 8010cb4:	4603      	mov	r3, r0
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d012      	beq.n	8010ce0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010cba:	4b0d      	ldr	r3, [pc, #52]	@ (8010cf0 <xQueueGenericReset+0xd0>)
 8010cbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010cc0:	601a      	str	r2, [r3, #0]
 8010cc2:	f3bf 8f4f 	dsb	sy
 8010cc6:	f3bf 8f6f 	isb	sy
 8010cca:	e009      	b.n	8010ce0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	3310      	adds	r3, #16
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	f7ff fef1 	bl	8010ab8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	3324      	adds	r3, #36	@ 0x24
 8010cda:	4618      	mov	r0, r3
 8010cdc:	f7ff feec 	bl	8010ab8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010ce0:	f002 fcc4 	bl	801366c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010ce4:	2301      	movs	r3, #1
}
 8010ce6:	4618      	mov	r0, r3
 8010ce8:	3710      	adds	r7, #16
 8010cea:	46bd      	mov	sp, r7
 8010cec:	bd80      	pop	{r7, pc}
 8010cee:	bf00      	nop
 8010cf0:	e000ed04 	.word	0xe000ed04

08010cf4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010cf4:	b580      	push	{r7, lr}
 8010cf6:	b08e      	sub	sp, #56	@ 0x38
 8010cf8:	af02      	add	r7, sp, #8
 8010cfa:	60f8      	str	r0, [r7, #12]
 8010cfc:	60b9      	str	r1, [r7, #8]
 8010cfe:	607a      	str	r2, [r7, #4]
 8010d00:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d10b      	bne.n	8010d20 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8010d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d0c:	f383 8811 	msr	BASEPRI, r3
 8010d10:	f3bf 8f6f 	isb	sy
 8010d14:	f3bf 8f4f 	dsb	sy
 8010d18:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8010d1a:	bf00      	nop
 8010d1c:	bf00      	nop
 8010d1e:	e7fd      	b.n	8010d1c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010d20:	683b      	ldr	r3, [r7, #0]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d10b      	bne.n	8010d3e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8010d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d2a:	f383 8811 	msr	BASEPRI, r3
 8010d2e:	f3bf 8f6f 	isb	sy
 8010d32:	f3bf 8f4f 	dsb	sy
 8010d36:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010d38:	bf00      	nop
 8010d3a:	bf00      	nop
 8010d3c:	e7fd      	b.n	8010d3a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d002      	beq.n	8010d4a <xQueueGenericCreateStatic+0x56>
 8010d44:	68bb      	ldr	r3, [r7, #8]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d001      	beq.n	8010d4e <xQueueGenericCreateStatic+0x5a>
 8010d4a:	2301      	movs	r3, #1
 8010d4c:	e000      	b.n	8010d50 <xQueueGenericCreateStatic+0x5c>
 8010d4e:	2300      	movs	r3, #0
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d10b      	bne.n	8010d6c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8010d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d58:	f383 8811 	msr	BASEPRI, r3
 8010d5c:	f3bf 8f6f 	isb	sy
 8010d60:	f3bf 8f4f 	dsb	sy
 8010d64:	623b      	str	r3, [r7, #32]
}
 8010d66:	bf00      	nop
 8010d68:	bf00      	nop
 8010d6a:	e7fd      	b.n	8010d68 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d102      	bne.n	8010d78 <xQueueGenericCreateStatic+0x84>
 8010d72:	68bb      	ldr	r3, [r7, #8]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d101      	bne.n	8010d7c <xQueueGenericCreateStatic+0x88>
 8010d78:	2301      	movs	r3, #1
 8010d7a:	e000      	b.n	8010d7e <xQueueGenericCreateStatic+0x8a>
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d10b      	bne.n	8010d9a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8010d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d86:	f383 8811 	msr	BASEPRI, r3
 8010d8a:	f3bf 8f6f 	isb	sy
 8010d8e:	f3bf 8f4f 	dsb	sy
 8010d92:	61fb      	str	r3, [r7, #28]
}
 8010d94:	bf00      	nop
 8010d96:	bf00      	nop
 8010d98:	e7fd      	b.n	8010d96 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010d9a:	2350      	movs	r3, #80	@ 0x50
 8010d9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010d9e:	697b      	ldr	r3, [r7, #20]
 8010da0:	2b50      	cmp	r3, #80	@ 0x50
 8010da2:	d00b      	beq.n	8010dbc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8010da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010da8:	f383 8811 	msr	BASEPRI, r3
 8010dac:	f3bf 8f6f 	isb	sy
 8010db0:	f3bf 8f4f 	dsb	sy
 8010db4:	61bb      	str	r3, [r7, #24]
}
 8010db6:	bf00      	nop
 8010db8:	bf00      	nop
 8010dba:	e7fd      	b.n	8010db8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010dbc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010dbe:	683b      	ldr	r3, [r7, #0]
 8010dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8010dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d00d      	beq.n	8010de4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010dca:	2201      	movs	r2, #1
 8010dcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010dd0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8010dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010dd6:	9300      	str	r3, [sp, #0]
 8010dd8:	4613      	mov	r3, r2
 8010dda:	687a      	ldr	r2, [r7, #4]
 8010ddc:	68b9      	ldr	r1, [r7, #8]
 8010dde:	68f8      	ldr	r0, [r7, #12]
 8010de0:	f000 f840 	bl	8010e64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8010de6:	4618      	mov	r0, r3
 8010de8:	3730      	adds	r7, #48	@ 0x30
 8010dea:	46bd      	mov	sp, r7
 8010dec:	bd80      	pop	{r7, pc}

08010dee <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010dee:	b580      	push	{r7, lr}
 8010df0:	b08a      	sub	sp, #40	@ 0x28
 8010df2:	af02      	add	r7, sp, #8
 8010df4:	60f8      	str	r0, [r7, #12]
 8010df6:	60b9      	str	r1, [r7, #8]
 8010df8:	4613      	mov	r3, r2
 8010dfa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d10b      	bne.n	8010e1a <xQueueGenericCreate+0x2c>
	__asm volatile
 8010e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e06:	f383 8811 	msr	BASEPRI, r3
 8010e0a:	f3bf 8f6f 	isb	sy
 8010e0e:	f3bf 8f4f 	dsb	sy
 8010e12:	613b      	str	r3, [r7, #16]
}
 8010e14:	bf00      	nop
 8010e16:	bf00      	nop
 8010e18:	e7fd      	b.n	8010e16 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	68ba      	ldr	r2, [r7, #8]
 8010e1e:	fb02 f303 	mul.w	r3, r2, r3
 8010e22:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010e24:	69fb      	ldr	r3, [r7, #28]
 8010e26:	3350      	adds	r3, #80	@ 0x50
 8010e28:	4618      	mov	r0, r3
 8010e2a:	f002 fd0f 	bl	801384c <pvPortMalloc>
 8010e2e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010e30:	69bb      	ldr	r3, [r7, #24]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d011      	beq.n	8010e5a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010e36:	69bb      	ldr	r3, [r7, #24]
 8010e38:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010e3a:	697b      	ldr	r3, [r7, #20]
 8010e3c:	3350      	adds	r3, #80	@ 0x50
 8010e3e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010e40:	69bb      	ldr	r3, [r7, #24]
 8010e42:	2200      	movs	r2, #0
 8010e44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010e48:	79fa      	ldrb	r2, [r7, #7]
 8010e4a:	69bb      	ldr	r3, [r7, #24]
 8010e4c:	9300      	str	r3, [sp, #0]
 8010e4e:	4613      	mov	r3, r2
 8010e50:	697a      	ldr	r2, [r7, #20]
 8010e52:	68b9      	ldr	r1, [r7, #8]
 8010e54:	68f8      	ldr	r0, [r7, #12]
 8010e56:	f000 f805 	bl	8010e64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010e5a:	69bb      	ldr	r3, [r7, #24]
	}
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	3720      	adds	r7, #32
 8010e60:	46bd      	mov	sp, r7
 8010e62:	bd80      	pop	{r7, pc}

08010e64 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010e64:	b580      	push	{r7, lr}
 8010e66:	b084      	sub	sp, #16
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	60f8      	str	r0, [r7, #12]
 8010e6c:	60b9      	str	r1, [r7, #8]
 8010e6e:	607a      	str	r2, [r7, #4]
 8010e70:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010e72:	68bb      	ldr	r3, [r7, #8]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d103      	bne.n	8010e80 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010e78:	69bb      	ldr	r3, [r7, #24]
 8010e7a:	69ba      	ldr	r2, [r7, #24]
 8010e7c:	601a      	str	r2, [r3, #0]
 8010e7e:	e002      	b.n	8010e86 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010e80:	69bb      	ldr	r3, [r7, #24]
 8010e82:	687a      	ldr	r2, [r7, #4]
 8010e84:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010e86:	69bb      	ldr	r3, [r7, #24]
 8010e88:	68fa      	ldr	r2, [r7, #12]
 8010e8a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010e8c:	69bb      	ldr	r3, [r7, #24]
 8010e8e:	68ba      	ldr	r2, [r7, #8]
 8010e90:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010e92:	2101      	movs	r1, #1
 8010e94:	69b8      	ldr	r0, [r7, #24]
 8010e96:	f7ff fec3 	bl	8010c20 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8010e9a:	69bb      	ldr	r3, [r7, #24]
 8010e9c:	78fa      	ldrb	r2, [r7, #3]
 8010e9e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010ea2:	bf00      	nop
 8010ea4:	3710      	adds	r7, #16
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	bd80      	pop	{r7, pc}

08010eaa <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8010eaa:	b580      	push	{r7, lr}
 8010eac:	b08a      	sub	sp, #40	@ 0x28
 8010eae:	af02      	add	r7, sp, #8
 8010eb0:	60f8      	str	r0, [r7, #12]
 8010eb2:	60b9      	str	r1, [r7, #8]
 8010eb4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d10b      	bne.n	8010ed4 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8010ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ec0:	f383 8811 	msr	BASEPRI, r3
 8010ec4:	f3bf 8f6f 	isb	sy
 8010ec8:	f3bf 8f4f 	dsb	sy
 8010ecc:	61bb      	str	r3, [r7, #24]
}
 8010ece:	bf00      	nop
 8010ed0:	bf00      	nop
 8010ed2:	e7fd      	b.n	8010ed0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010ed4:	68ba      	ldr	r2, [r7, #8]
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	429a      	cmp	r2, r3
 8010eda:	d90b      	bls.n	8010ef4 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8010edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ee0:	f383 8811 	msr	BASEPRI, r3
 8010ee4:	f3bf 8f6f 	isb	sy
 8010ee8:	f3bf 8f4f 	dsb	sy
 8010eec:	617b      	str	r3, [r7, #20]
}
 8010eee:	bf00      	nop
 8010ef0:	bf00      	nop
 8010ef2:	e7fd      	b.n	8010ef0 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010ef4:	2302      	movs	r3, #2
 8010ef6:	9300      	str	r3, [sp, #0]
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	2200      	movs	r2, #0
 8010efc:	2100      	movs	r1, #0
 8010efe:	68f8      	ldr	r0, [r7, #12]
 8010f00:	f7ff fef8 	bl	8010cf4 <xQueueGenericCreateStatic>
 8010f04:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8010f06:	69fb      	ldr	r3, [r7, #28]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d002      	beq.n	8010f12 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010f0c:	69fb      	ldr	r3, [r7, #28]
 8010f0e:	68ba      	ldr	r2, [r7, #8]
 8010f10:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8010f12:	69fb      	ldr	r3, [r7, #28]
	}
 8010f14:	4618      	mov	r0, r3
 8010f16:	3720      	adds	r7, #32
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	bd80      	pop	{r7, pc}

08010f1c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	b086      	sub	sp, #24
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	6078      	str	r0, [r7, #4]
 8010f24:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d10b      	bne.n	8010f44 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8010f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f30:	f383 8811 	msr	BASEPRI, r3
 8010f34:	f3bf 8f6f 	isb	sy
 8010f38:	f3bf 8f4f 	dsb	sy
 8010f3c:	613b      	str	r3, [r7, #16]
}
 8010f3e:	bf00      	nop
 8010f40:	bf00      	nop
 8010f42:	e7fd      	b.n	8010f40 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010f44:	683a      	ldr	r2, [r7, #0]
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	429a      	cmp	r2, r3
 8010f4a:	d90b      	bls.n	8010f64 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8010f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f50:	f383 8811 	msr	BASEPRI, r3
 8010f54:	f3bf 8f6f 	isb	sy
 8010f58:	f3bf 8f4f 	dsb	sy
 8010f5c:	60fb      	str	r3, [r7, #12]
}
 8010f5e:	bf00      	nop
 8010f60:	bf00      	nop
 8010f62:	e7fd      	b.n	8010f60 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010f64:	2202      	movs	r2, #2
 8010f66:	2100      	movs	r1, #0
 8010f68:	6878      	ldr	r0, [r7, #4]
 8010f6a:	f7ff ff40 	bl	8010dee <xQueueGenericCreate>
 8010f6e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8010f70:	697b      	ldr	r3, [r7, #20]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d002      	beq.n	8010f7c <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010f76:	697b      	ldr	r3, [r7, #20]
 8010f78:	683a      	ldr	r2, [r7, #0]
 8010f7a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8010f7c:	697b      	ldr	r3, [r7, #20]
	}
 8010f7e:	4618      	mov	r0, r3
 8010f80:	3718      	adds	r7, #24
 8010f82:	46bd      	mov	sp, r7
 8010f84:	bd80      	pop	{r7, pc}
	...

08010f88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	b08e      	sub	sp, #56	@ 0x38
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	60f8      	str	r0, [r7, #12]
 8010f90:	60b9      	str	r1, [r7, #8]
 8010f92:	607a      	str	r2, [r7, #4]
 8010f94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010f96:	2300      	movs	r3, #0
 8010f98:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8010f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d10b      	bne.n	8010fbc <xQueueGenericSend+0x34>
	__asm volatile
 8010fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fa8:	f383 8811 	msr	BASEPRI, r3
 8010fac:	f3bf 8f6f 	isb	sy
 8010fb0:	f3bf 8f4f 	dsb	sy
 8010fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8010fb6:	bf00      	nop
 8010fb8:	bf00      	nop
 8010fba:	e7fd      	b.n	8010fb8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010fbc:	68bb      	ldr	r3, [r7, #8]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d103      	bne.n	8010fca <xQueueGenericSend+0x42>
 8010fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d101      	bne.n	8010fce <xQueueGenericSend+0x46>
 8010fca:	2301      	movs	r3, #1
 8010fcc:	e000      	b.n	8010fd0 <xQueueGenericSend+0x48>
 8010fce:	2300      	movs	r3, #0
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d10b      	bne.n	8010fec <xQueueGenericSend+0x64>
	__asm volatile
 8010fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fd8:	f383 8811 	msr	BASEPRI, r3
 8010fdc:	f3bf 8f6f 	isb	sy
 8010fe0:	f3bf 8f4f 	dsb	sy
 8010fe4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010fe6:	bf00      	nop
 8010fe8:	bf00      	nop
 8010fea:	e7fd      	b.n	8010fe8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010fec:	683b      	ldr	r3, [r7, #0]
 8010fee:	2b02      	cmp	r3, #2
 8010ff0:	d103      	bne.n	8010ffa <xQueueGenericSend+0x72>
 8010ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010ff6:	2b01      	cmp	r3, #1
 8010ff8:	d101      	bne.n	8010ffe <xQueueGenericSend+0x76>
 8010ffa:	2301      	movs	r3, #1
 8010ffc:	e000      	b.n	8011000 <xQueueGenericSend+0x78>
 8010ffe:	2300      	movs	r3, #0
 8011000:	2b00      	cmp	r3, #0
 8011002:	d10b      	bne.n	801101c <xQueueGenericSend+0x94>
	__asm volatile
 8011004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011008:	f383 8811 	msr	BASEPRI, r3
 801100c:	f3bf 8f6f 	isb	sy
 8011010:	f3bf 8f4f 	dsb	sy
 8011014:	623b      	str	r3, [r7, #32]
}
 8011016:	bf00      	nop
 8011018:	bf00      	nop
 801101a:	e7fd      	b.n	8011018 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801101c:	f001 fc84 	bl	8012928 <xTaskGetSchedulerState>
 8011020:	4603      	mov	r3, r0
 8011022:	2b00      	cmp	r3, #0
 8011024:	d102      	bne.n	801102c <xQueueGenericSend+0xa4>
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d101      	bne.n	8011030 <xQueueGenericSend+0xa8>
 801102c:	2301      	movs	r3, #1
 801102e:	e000      	b.n	8011032 <xQueueGenericSend+0xaa>
 8011030:	2300      	movs	r3, #0
 8011032:	2b00      	cmp	r3, #0
 8011034:	d10b      	bne.n	801104e <xQueueGenericSend+0xc6>
	__asm volatile
 8011036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801103a:	f383 8811 	msr	BASEPRI, r3
 801103e:	f3bf 8f6f 	isb	sy
 8011042:	f3bf 8f4f 	dsb	sy
 8011046:	61fb      	str	r3, [r7, #28]
}
 8011048:	bf00      	nop
 801104a:	bf00      	nop
 801104c:	e7fd      	b.n	801104a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801104e:	f002 fadb 	bl	8013608 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011054:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011058:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801105a:	429a      	cmp	r2, r3
 801105c:	d302      	bcc.n	8011064 <xQueueGenericSend+0xdc>
 801105e:	683b      	ldr	r3, [r7, #0]
 8011060:	2b02      	cmp	r3, #2
 8011062:	d129      	bne.n	80110b8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011064:	683a      	ldr	r2, [r7, #0]
 8011066:	68b9      	ldr	r1, [r7, #8]
 8011068:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801106a:	f000 fc6d 	bl	8011948 <prvCopyDataToQueue>
 801106e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011074:	2b00      	cmp	r3, #0
 8011076:	d010      	beq.n	801109a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801107a:	3324      	adds	r3, #36	@ 0x24
 801107c:	4618      	mov	r0, r3
 801107e:	f001 fa8d 	bl	801259c <xTaskRemoveFromEventList>
 8011082:	4603      	mov	r3, r0
 8011084:	2b00      	cmp	r3, #0
 8011086:	d013      	beq.n	80110b0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011088:	4b3f      	ldr	r3, [pc, #252]	@ (8011188 <xQueueGenericSend+0x200>)
 801108a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801108e:	601a      	str	r2, [r3, #0]
 8011090:	f3bf 8f4f 	dsb	sy
 8011094:	f3bf 8f6f 	isb	sy
 8011098:	e00a      	b.n	80110b0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801109a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801109c:	2b00      	cmp	r3, #0
 801109e:	d007      	beq.n	80110b0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80110a0:	4b39      	ldr	r3, [pc, #228]	@ (8011188 <xQueueGenericSend+0x200>)
 80110a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80110a6:	601a      	str	r2, [r3, #0]
 80110a8:	f3bf 8f4f 	dsb	sy
 80110ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80110b0:	f002 fadc 	bl	801366c <vPortExitCritical>
				return pdPASS;
 80110b4:	2301      	movs	r3, #1
 80110b6:	e063      	b.n	8011180 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d103      	bne.n	80110c6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80110be:	f002 fad5 	bl	801366c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80110c2:	2300      	movs	r3, #0
 80110c4:	e05c      	b.n	8011180 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80110c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d106      	bne.n	80110da <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80110cc:	f107 0314 	add.w	r3, r7, #20
 80110d0:	4618      	mov	r0, r3
 80110d2:	f001 fac7 	bl	8012664 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80110d6:	2301      	movs	r3, #1
 80110d8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80110da:	f002 fac7 	bl	801366c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80110de:	f001 f82f 	bl	8012140 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80110e2:	f002 fa91 	bl	8013608 <vPortEnterCritical>
 80110e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80110ec:	b25b      	sxtb	r3, r3
 80110ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110f2:	d103      	bne.n	80110fc <xQueueGenericSend+0x174>
 80110f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110f6:	2200      	movs	r2, #0
 80110f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80110fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011102:	b25b      	sxtb	r3, r3
 8011104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011108:	d103      	bne.n	8011112 <xQueueGenericSend+0x18a>
 801110a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801110c:	2200      	movs	r2, #0
 801110e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011112:	f002 faab 	bl	801366c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011116:	1d3a      	adds	r2, r7, #4
 8011118:	f107 0314 	add.w	r3, r7, #20
 801111c:	4611      	mov	r1, r2
 801111e:	4618      	mov	r0, r3
 8011120:	f001 fab6 	bl	8012690 <xTaskCheckForTimeOut>
 8011124:	4603      	mov	r3, r0
 8011126:	2b00      	cmp	r3, #0
 8011128:	d124      	bne.n	8011174 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801112a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801112c:	f000 fd04 	bl	8011b38 <prvIsQueueFull>
 8011130:	4603      	mov	r3, r0
 8011132:	2b00      	cmp	r3, #0
 8011134:	d018      	beq.n	8011168 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011138:	3310      	adds	r3, #16
 801113a:	687a      	ldr	r2, [r7, #4]
 801113c:	4611      	mov	r1, r2
 801113e:	4618      	mov	r0, r3
 8011140:	f001 f9da 	bl	80124f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011144:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011146:	f000 fc8f 	bl	8011a68 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801114a:	f001 f807 	bl	801215c <xTaskResumeAll>
 801114e:	4603      	mov	r3, r0
 8011150:	2b00      	cmp	r3, #0
 8011152:	f47f af7c 	bne.w	801104e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8011156:	4b0c      	ldr	r3, [pc, #48]	@ (8011188 <xQueueGenericSend+0x200>)
 8011158:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801115c:	601a      	str	r2, [r3, #0]
 801115e:	f3bf 8f4f 	dsb	sy
 8011162:	f3bf 8f6f 	isb	sy
 8011166:	e772      	b.n	801104e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011168:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801116a:	f000 fc7d 	bl	8011a68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801116e:	f000 fff5 	bl	801215c <xTaskResumeAll>
 8011172:	e76c      	b.n	801104e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011174:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011176:	f000 fc77 	bl	8011a68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801117a:	f000 ffef 	bl	801215c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801117e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011180:	4618      	mov	r0, r3
 8011182:	3738      	adds	r7, #56	@ 0x38
 8011184:	46bd      	mov	sp, r7
 8011186:	bd80      	pop	{r7, pc}
 8011188:	e000ed04 	.word	0xe000ed04

0801118c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801118c:	b580      	push	{r7, lr}
 801118e:	b090      	sub	sp, #64	@ 0x40
 8011190:	af00      	add	r7, sp, #0
 8011192:	60f8      	str	r0, [r7, #12]
 8011194:	60b9      	str	r1, [r7, #8]
 8011196:	607a      	str	r2, [r7, #4]
 8011198:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 801119e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d10b      	bne.n	80111bc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80111a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111a8:	f383 8811 	msr	BASEPRI, r3
 80111ac:	f3bf 8f6f 	isb	sy
 80111b0:	f3bf 8f4f 	dsb	sy
 80111b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80111b6:	bf00      	nop
 80111b8:	bf00      	nop
 80111ba:	e7fd      	b.n	80111b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80111bc:	68bb      	ldr	r3, [r7, #8]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d103      	bne.n	80111ca <xQueueGenericSendFromISR+0x3e>
 80111c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d101      	bne.n	80111ce <xQueueGenericSendFromISR+0x42>
 80111ca:	2301      	movs	r3, #1
 80111cc:	e000      	b.n	80111d0 <xQueueGenericSendFromISR+0x44>
 80111ce:	2300      	movs	r3, #0
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d10b      	bne.n	80111ec <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80111d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111d8:	f383 8811 	msr	BASEPRI, r3
 80111dc:	f3bf 8f6f 	isb	sy
 80111e0:	f3bf 8f4f 	dsb	sy
 80111e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80111e6:	bf00      	nop
 80111e8:	bf00      	nop
 80111ea:	e7fd      	b.n	80111e8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80111ec:	683b      	ldr	r3, [r7, #0]
 80111ee:	2b02      	cmp	r3, #2
 80111f0:	d103      	bne.n	80111fa <xQueueGenericSendFromISR+0x6e>
 80111f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80111f6:	2b01      	cmp	r3, #1
 80111f8:	d101      	bne.n	80111fe <xQueueGenericSendFromISR+0x72>
 80111fa:	2301      	movs	r3, #1
 80111fc:	e000      	b.n	8011200 <xQueueGenericSendFromISR+0x74>
 80111fe:	2300      	movs	r3, #0
 8011200:	2b00      	cmp	r3, #0
 8011202:	d10b      	bne.n	801121c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8011204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011208:	f383 8811 	msr	BASEPRI, r3
 801120c:	f3bf 8f6f 	isb	sy
 8011210:	f3bf 8f4f 	dsb	sy
 8011214:	623b      	str	r3, [r7, #32]
}
 8011216:	bf00      	nop
 8011218:	bf00      	nop
 801121a:	e7fd      	b.n	8011218 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801121c:	f002 fad4 	bl	80137c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011220:	f3ef 8211 	mrs	r2, BASEPRI
 8011224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011228:	f383 8811 	msr	BASEPRI, r3
 801122c:	f3bf 8f6f 	isb	sy
 8011230:	f3bf 8f4f 	dsb	sy
 8011234:	61fa      	str	r2, [r7, #28]
 8011236:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011238:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801123a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801123c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801123e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011244:	429a      	cmp	r2, r3
 8011246:	d302      	bcc.n	801124e <xQueueGenericSendFromISR+0xc2>
 8011248:	683b      	ldr	r3, [r7, #0]
 801124a:	2b02      	cmp	r3, #2
 801124c:	d12f      	bne.n	80112ae <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801124e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011250:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011254:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801125a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801125c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801125e:	683a      	ldr	r2, [r7, #0]
 8011260:	68b9      	ldr	r1, [r7, #8]
 8011262:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011264:	f000 fb70 	bl	8011948 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011268:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 801126c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011270:	d112      	bne.n	8011298 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011276:	2b00      	cmp	r3, #0
 8011278:	d016      	beq.n	80112a8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801127a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801127c:	3324      	adds	r3, #36	@ 0x24
 801127e:	4618      	mov	r0, r3
 8011280:	f001 f98c 	bl	801259c <xTaskRemoveFromEventList>
 8011284:	4603      	mov	r3, r0
 8011286:	2b00      	cmp	r3, #0
 8011288:	d00e      	beq.n	80112a8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	2b00      	cmp	r3, #0
 801128e:	d00b      	beq.n	80112a8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	2201      	movs	r2, #1
 8011294:	601a      	str	r2, [r3, #0]
 8011296:	e007      	b.n	80112a8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011298:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801129c:	3301      	adds	r3, #1
 801129e:	b2db      	uxtb	r3, r3
 80112a0:	b25a      	sxtb	r2, r3
 80112a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80112a8:	2301      	movs	r3, #1
 80112aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80112ac:	e001      	b.n	80112b2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80112ae:	2300      	movs	r3, #0
 80112b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80112b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112b4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80112b6:	697b      	ldr	r3, [r7, #20]
 80112b8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80112bc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80112be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80112c0:	4618      	mov	r0, r3
 80112c2:	3740      	adds	r7, #64	@ 0x40
 80112c4:	46bd      	mov	sp, r7
 80112c6:	bd80      	pop	{r7, pc}

080112c8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80112c8:	b580      	push	{r7, lr}
 80112ca:	b08e      	sub	sp, #56	@ 0x38
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	6078      	str	r0, [r7, #4]
 80112d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80112d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d10b      	bne.n	80112f4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80112dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112e0:	f383 8811 	msr	BASEPRI, r3
 80112e4:	f3bf 8f6f 	isb	sy
 80112e8:	f3bf 8f4f 	dsb	sy
 80112ec:	623b      	str	r3, [r7, #32]
}
 80112ee:	bf00      	nop
 80112f0:	bf00      	nop
 80112f2:	e7fd      	b.n	80112f0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80112f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d00b      	beq.n	8011314 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80112fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011300:	f383 8811 	msr	BASEPRI, r3
 8011304:	f3bf 8f6f 	isb	sy
 8011308:	f3bf 8f4f 	dsb	sy
 801130c:	61fb      	str	r3, [r7, #28]
}
 801130e:	bf00      	nop
 8011310:	bf00      	nop
 8011312:	e7fd      	b.n	8011310 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8011314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	2b00      	cmp	r3, #0
 801131a:	d103      	bne.n	8011324 <xQueueGiveFromISR+0x5c>
 801131c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801131e:	689b      	ldr	r3, [r3, #8]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d101      	bne.n	8011328 <xQueueGiveFromISR+0x60>
 8011324:	2301      	movs	r3, #1
 8011326:	e000      	b.n	801132a <xQueueGiveFromISR+0x62>
 8011328:	2300      	movs	r3, #0
 801132a:	2b00      	cmp	r3, #0
 801132c:	d10b      	bne.n	8011346 <xQueueGiveFromISR+0x7e>
	__asm volatile
 801132e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011332:	f383 8811 	msr	BASEPRI, r3
 8011336:	f3bf 8f6f 	isb	sy
 801133a:	f3bf 8f4f 	dsb	sy
 801133e:	61bb      	str	r3, [r7, #24]
}
 8011340:	bf00      	nop
 8011342:	bf00      	nop
 8011344:	e7fd      	b.n	8011342 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011346:	f002 fa3f 	bl	80137c8 <vPortValidateInterruptPriority>
	__asm volatile
 801134a:	f3ef 8211 	mrs	r2, BASEPRI
 801134e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011352:	f383 8811 	msr	BASEPRI, r3
 8011356:	f3bf 8f6f 	isb	sy
 801135a:	f3bf 8f4f 	dsb	sy
 801135e:	617a      	str	r2, [r7, #20]
 8011360:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8011362:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011364:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801136a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801136c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801136e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011370:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011372:	429a      	cmp	r2, r3
 8011374:	d22b      	bcs.n	80113ce <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011378:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801137c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011382:	1c5a      	adds	r2, r3, #1
 8011384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011386:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011388:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801138c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011390:	d112      	bne.n	80113b8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011396:	2b00      	cmp	r3, #0
 8011398:	d016      	beq.n	80113c8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801139a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801139c:	3324      	adds	r3, #36	@ 0x24
 801139e:	4618      	mov	r0, r3
 80113a0:	f001 f8fc 	bl	801259c <xTaskRemoveFromEventList>
 80113a4:	4603      	mov	r3, r0
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d00e      	beq.n	80113c8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80113aa:	683b      	ldr	r3, [r7, #0]
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d00b      	beq.n	80113c8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80113b0:	683b      	ldr	r3, [r7, #0]
 80113b2:	2201      	movs	r2, #1
 80113b4:	601a      	str	r2, [r3, #0]
 80113b6:	e007      	b.n	80113c8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80113b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80113bc:	3301      	adds	r3, #1
 80113be:	b2db      	uxtb	r3, r3
 80113c0:	b25a      	sxtb	r2, r3
 80113c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80113c8:	2301      	movs	r3, #1
 80113ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80113cc:	e001      	b.n	80113d2 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80113ce:	2300      	movs	r3, #0
 80113d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80113d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113d4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	f383 8811 	msr	BASEPRI, r3
}
 80113dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80113de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80113e0:	4618      	mov	r0, r3
 80113e2:	3738      	adds	r7, #56	@ 0x38
 80113e4:	46bd      	mov	sp, r7
 80113e6:	bd80      	pop	{r7, pc}

080113e8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b08c      	sub	sp, #48	@ 0x30
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	60f8      	str	r0, [r7, #12]
 80113f0:	60b9      	str	r1, [r7, #8]
 80113f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80113f4:	2300      	movs	r3, #0
 80113f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80113fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d10b      	bne.n	801141a <xQueueReceive+0x32>
	__asm volatile
 8011402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011406:	f383 8811 	msr	BASEPRI, r3
 801140a:	f3bf 8f6f 	isb	sy
 801140e:	f3bf 8f4f 	dsb	sy
 8011412:	623b      	str	r3, [r7, #32]
}
 8011414:	bf00      	nop
 8011416:	bf00      	nop
 8011418:	e7fd      	b.n	8011416 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801141a:	68bb      	ldr	r3, [r7, #8]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d103      	bne.n	8011428 <xQueueReceive+0x40>
 8011420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011424:	2b00      	cmp	r3, #0
 8011426:	d101      	bne.n	801142c <xQueueReceive+0x44>
 8011428:	2301      	movs	r3, #1
 801142a:	e000      	b.n	801142e <xQueueReceive+0x46>
 801142c:	2300      	movs	r3, #0
 801142e:	2b00      	cmp	r3, #0
 8011430:	d10b      	bne.n	801144a <xQueueReceive+0x62>
	__asm volatile
 8011432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011436:	f383 8811 	msr	BASEPRI, r3
 801143a:	f3bf 8f6f 	isb	sy
 801143e:	f3bf 8f4f 	dsb	sy
 8011442:	61fb      	str	r3, [r7, #28]
}
 8011444:	bf00      	nop
 8011446:	bf00      	nop
 8011448:	e7fd      	b.n	8011446 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801144a:	f001 fa6d 	bl	8012928 <xTaskGetSchedulerState>
 801144e:	4603      	mov	r3, r0
 8011450:	2b00      	cmp	r3, #0
 8011452:	d102      	bne.n	801145a <xQueueReceive+0x72>
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	2b00      	cmp	r3, #0
 8011458:	d101      	bne.n	801145e <xQueueReceive+0x76>
 801145a:	2301      	movs	r3, #1
 801145c:	e000      	b.n	8011460 <xQueueReceive+0x78>
 801145e:	2300      	movs	r3, #0
 8011460:	2b00      	cmp	r3, #0
 8011462:	d10b      	bne.n	801147c <xQueueReceive+0x94>
	__asm volatile
 8011464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011468:	f383 8811 	msr	BASEPRI, r3
 801146c:	f3bf 8f6f 	isb	sy
 8011470:	f3bf 8f4f 	dsb	sy
 8011474:	61bb      	str	r3, [r7, #24]
}
 8011476:	bf00      	nop
 8011478:	bf00      	nop
 801147a:	e7fd      	b.n	8011478 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801147c:	f002 f8c4 	bl	8013608 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011484:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011488:	2b00      	cmp	r3, #0
 801148a:	d01f      	beq.n	80114cc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801148c:	68b9      	ldr	r1, [r7, #8]
 801148e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011490:	f000 fac4 	bl	8011a1c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011496:	1e5a      	subs	r2, r3, #1
 8011498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801149a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801149c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801149e:	691b      	ldr	r3, [r3, #16]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d00f      	beq.n	80114c4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80114a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114a6:	3310      	adds	r3, #16
 80114a8:	4618      	mov	r0, r3
 80114aa:	f001 f877 	bl	801259c <xTaskRemoveFromEventList>
 80114ae:	4603      	mov	r3, r0
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d007      	beq.n	80114c4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80114b4:	4b3c      	ldr	r3, [pc, #240]	@ (80115a8 <xQueueReceive+0x1c0>)
 80114b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80114ba:	601a      	str	r2, [r3, #0]
 80114bc:	f3bf 8f4f 	dsb	sy
 80114c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80114c4:	f002 f8d2 	bl	801366c <vPortExitCritical>
				return pdPASS;
 80114c8:	2301      	movs	r3, #1
 80114ca:	e069      	b.n	80115a0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d103      	bne.n	80114da <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80114d2:	f002 f8cb 	bl	801366c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80114d6:	2300      	movs	r3, #0
 80114d8:	e062      	b.n	80115a0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80114da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d106      	bne.n	80114ee <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80114e0:	f107 0310 	add.w	r3, r7, #16
 80114e4:	4618      	mov	r0, r3
 80114e6:	f001 f8bd 	bl	8012664 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80114ea:	2301      	movs	r3, #1
 80114ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80114ee:	f002 f8bd 	bl	801366c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80114f2:	f000 fe25 	bl	8012140 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80114f6:	f002 f887 	bl	8013608 <vPortEnterCritical>
 80114fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011500:	b25b      	sxtb	r3, r3
 8011502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011506:	d103      	bne.n	8011510 <xQueueReceive+0x128>
 8011508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801150a:	2200      	movs	r2, #0
 801150c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011512:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011516:	b25b      	sxtb	r3, r3
 8011518:	f1b3 3fff 	cmp.w	r3, #4294967295
 801151c:	d103      	bne.n	8011526 <xQueueReceive+0x13e>
 801151e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011520:	2200      	movs	r2, #0
 8011522:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011526:	f002 f8a1 	bl	801366c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801152a:	1d3a      	adds	r2, r7, #4
 801152c:	f107 0310 	add.w	r3, r7, #16
 8011530:	4611      	mov	r1, r2
 8011532:	4618      	mov	r0, r3
 8011534:	f001 f8ac 	bl	8012690 <xTaskCheckForTimeOut>
 8011538:	4603      	mov	r3, r0
 801153a:	2b00      	cmp	r3, #0
 801153c:	d123      	bne.n	8011586 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801153e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011540:	f000 fae4 	bl	8011b0c <prvIsQueueEmpty>
 8011544:	4603      	mov	r3, r0
 8011546:	2b00      	cmp	r3, #0
 8011548:	d017      	beq.n	801157a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801154a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801154c:	3324      	adds	r3, #36	@ 0x24
 801154e:	687a      	ldr	r2, [r7, #4]
 8011550:	4611      	mov	r1, r2
 8011552:	4618      	mov	r0, r3
 8011554:	f000 ffd0 	bl	80124f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011558:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801155a:	f000 fa85 	bl	8011a68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801155e:	f000 fdfd 	bl	801215c <xTaskResumeAll>
 8011562:	4603      	mov	r3, r0
 8011564:	2b00      	cmp	r3, #0
 8011566:	d189      	bne.n	801147c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8011568:	4b0f      	ldr	r3, [pc, #60]	@ (80115a8 <xQueueReceive+0x1c0>)
 801156a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801156e:	601a      	str	r2, [r3, #0]
 8011570:	f3bf 8f4f 	dsb	sy
 8011574:	f3bf 8f6f 	isb	sy
 8011578:	e780      	b.n	801147c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801157a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801157c:	f000 fa74 	bl	8011a68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011580:	f000 fdec 	bl	801215c <xTaskResumeAll>
 8011584:	e77a      	b.n	801147c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011586:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011588:	f000 fa6e 	bl	8011a68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801158c:	f000 fde6 	bl	801215c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011590:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011592:	f000 fabb 	bl	8011b0c <prvIsQueueEmpty>
 8011596:	4603      	mov	r3, r0
 8011598:	2b00      	cmp	r3, #0
 801159a:	f43f af6f 	beq.w	801147c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801159e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80115a0:	4618      	mov	r0, r3
 80115a2:	3730      	adds	r7, #48	@ 0x30
 80115a4:	46bd      	mov	sp, r7
 80115a6:	bd80      	pop	{r7, pc}
 80115a8:	e000ed04 	.word	0xe000ed04

080115ac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80115ac:	b580      	push	{r7, lr}
 80115ae:	b08e      	sub	sp, #56	@ 0x38
 80115b0:	af00      	add	r7, sp, #0
 80115b2:	6078      	str	r0, [r7, #4]
 80115b4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80115b6:	2300      	movs	r3, #0
 80115b8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80115be:	2300      	movs	r3, #0
 80115c0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80115c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d10b      	bne.n	80115e0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80115c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115cc:	f383 8811 	msr	BASEPRI, r3
 80115d0:	f3bf 8f6f 	isb	sy
 80115d4:	f3bf 8f4f 	dsb	sy
 80115d8:	623b      	str	r3, [r7, #32]
}
 80115da:	bf00      	nop
 80115dc:	bf00      	nop
 80115de:	e7fd      	b.n	80115dc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80115e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d00b      	beq.n	8011600 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80115e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115ec:	f383 8811 	msr	BASEPRI, r3
 80115f0:	f3bf 8f6f 	isb	sy
 80115f4:	f3bf 8f4f 	dsb	sy
 80115f8:	61fb      	str	r3, [r7, #28]
}
 80115fa:	bf00      	nop
 80115fc:	bf00      	nop
 80115fe:	e7fd      	b.n	80115fc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011600:	f001 f992 	bl	8012928 <xTaskGetSchedulerState>
 8011604:	4603      	mov	r3, r0
 8011606:	2b00      	cmp	r3, #0
 8011608:	d102      	bne.n	8011610 <xQueueSemaphoreTake+0x64>
 801160a:	683b      	ldr	r3, [r7, #0]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d101      	bne.n	8011614 <xQueueSemaphoreTake+0x68>
 8011610:	2301      	movs	r3, #1
 8011612:	e000      	b.n	8011616 <xQueueSemaphoreTake+0x6a>
 8011614:	2300      	movs	r3, #0
 8011616:	2b00      	cmp	r3, #0
 8011618:	d10b      	bne.n	8011632 <xQueueSemaphoreTake+0x86>
	__asm volatile
 801161a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801161e:	f383 8811 	msr	BASEPRI, r3
 8011622:	f3bf 8f6f 	isb	sy
 8011626:	f3bf 8f4f 	dsb	sy
 801162a:	61bb      	str	r3, [r7, #24]
}
 801162c:	bf00      	nop
 801162e:	bf00      	nop
 8011630:	e7fd      	b.n	801162e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011632:	f001 ffe9 	bl	8013608 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801163a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801163c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801163e:	2b00      	cmp	r3, #0
 8011640:	d024      	beq.n	801168c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011644:	1e5a      	subs	r2, r3, #1
 8011646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011648:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801164a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d104      	bne.n	801165c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8011652:	f001 fae3 	bl	8012c1c <pvTaskIncrementMutexHeldCount>
 8011656:	4602      	mov	r2, r0
 8011658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801165a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801165c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801165e:	691b      	ldr	r3, [r3, #16]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d00f      	beq.n	8011684 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011666:	3310      	adds	r3, #16
 8011668:	4618      	mov	r0, r3
 801166a:	f000 ff97 	bl	801259c <xTaskRemoveFromEventList>
 801166e:	4603      	mov	r3, r0
 8011670:	2b00      	cmp	r3, #0
 8011672:	d007      	beq.n	8011684 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011674:	4b54      	ldr	r3, [pc, #336]	@ (80117c8 <xQueueSemaphoreTake+0x21c>)
 8011676:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801167a:	601a      	str	r2, [r3, #0]
 801167c:	f3bf 8f4f 	dsb	sy
 8011680:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011684:	f001 fff2 	bl	801366c <vPortExitCritical>
				return pdPASS;
 8011688:	2301      	movs	r3, #1
 801168a:	e098      	b.n	80117be <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801168c:	683b      	ldr	r3, [r7, #0]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d112      	bne.n	80116b8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011694:	2b00      	cmp	r3, #0
 8011696:	d00b      	beq.n	80116b0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8011698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801169c:	f383 8811 	msr	BASEPRI, r3
 80116a0:	f3bf 8f6f 	isb	sy
 80116a4:	f3bf 8f4f 	dsb	sy
 80116a8:	617b      	str	r3, [r7, #20]
}
 80116aa:	bf00      	nop
 80116ac:	bf00      	nop
 80116ae:	e7fd      	b.n	80116ac <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80116b0:	f001 ffdc 	bl	801366c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80116b4:	2300      	movs	r3, #0
 80116b6:	e082      	b.n	80117be <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80116b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d106      	bne.n	80116cc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80116be:	f107 030c 	add.w	r3, r7, #12
 80116c2:	4618      	mov	r0, r3
 80116c4:	f000 ffce 	bl	8012664 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80116c8:	2301      	movs	r3, #1
 80116ca:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80116cc:	f001 ffce 	bl	801366c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80116d0:	f000 fd36 	bl	8012140 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80116d4:	f001 ff98 	bl	8013608 <vPortEnterCritical>
 80116d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80116de:	b25b      	sxtb	r3, r3
 80116e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116e4:	d103      	bne.n	80116ee <xQueueSemaphoreTake+0x142>
 80116e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116e8:	2200      	movs	r2, #0
 80116ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80116ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80116f4:	b25b      	sxtb	r3, r3
 80116f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116fa:	d103      	bne.n	8011704 <xQueueSemaphoreTake+0x158>
 80116fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116fe:	2200      	movs	r2, #0
 8011700:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011704:	f001 ffb2 	bl	801366c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011708:	463a      	mov	r2, r7
 801170a:	f107 030c 	add.w	r3, r7, #12
 801170e:	4611      	mov	r1, r2
 8011710:	4618      	mov	r0, r3
 8011712:	f000 ffbd 	bl	8012690 <xTaskCheckForTimeOut>
 8011716:	4603      	mov	r3, r0
 8011718:	2b00      	cmp	r3, #0
 801171a:	d132      	bne.n	8011782 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801171c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801171e:	f000 f9f5 	bl	8011b0c <prvIsQueueEmpty>
 8011722:	4603      	mov	r3, r0
 8011724:	2b00      	cmp	r3, #0
 8011726:	d026      	beq.n	8011776 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	2b00      	cmp	r3, #0
 801172e:	d109      	bne.n	8011744 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8011730:	f001 ff6a 	bl	8013608 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011736:	689b      	ldr	r3, [r3, #8]
 8011738:	4618      	mov	r0, r3
 801173a:	f001 f913 	bl	8012964 <xTaskPriorityInherit>
 801173e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8011740:	f001 ff94 	bl	801366c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011746:	3324      	adds	r3, #36	@ 0x24
 8011748:	683a      	ldr	r2, [r7, #0]
 801174a:	4611      	mov	r1, r2
 801174c:	4618      	mov	r0, r3
 801174e:	f000 fed3 	bl	80124f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011752:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011754:	f000 f988 	bl	8011a68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011758:	f000 fd00 	bl	801215c <xTaskResumeAll>
 801175c:	4603      	mov	r3, r0
 801175e:	2b00      	cmp	r3, #0
 8011760:	f47f af67 	bne.w	8011632 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8011764:	4b18      	ldr	r3, [pc, #96]	@ (80117c8 <xQueueSemaphoreTake+0x21c>)
 8011766:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801176a:	601a      	str	r2, [r3, #0]
 801176c:	f3bf 8f4f 	dsb	sy
 8011770:	f3bf 8f6f 	isb	sy
 8011774:	e75d      	b.n	8011632 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011776:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011778:	f000 f976 	bl	8011a68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801177c:	f000 fcee 	bl	801215c <xTaskResumeAll>
 8011780:	e757      	b.n	8011632 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011782:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011784:	f000 f970 	bl	8011a68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011788:	f000 fce8 	bl	801215c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801178c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801178e:	f000 f9bd 	bl	8011b0c <prvIsQueueEmpty>
 8011792:	4603      	mov	r3, r0
 8011794:	2b00      	cmp	r3, #0
 8011796:	f43f af4c 	beq.w	8011632 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801179a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801179c:	2b00      	cmp	r3, #0
 801179e:	d00d      	beq.n	80117bc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80117a0:	f001 ff32 	bl	8013608 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80117a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80117a6:	f000 f8b7 	bl	8011918 <prvGetDisinheritPriorityAfterTimeout>
 80117aa:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80117ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117ae:	689b      	ldr	r3, [r3, #8]
 80117b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80117b2:	4618      	mov	r0, r3
 80117b4:	f001 f9ae 	bl	8012b14 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80117b8:	f001 ff58 	bl	801366c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80117bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80117be:	4618      	mov	r0, r3
 80117c0:	3738      	adds	r7, #56	@ 0x38
 80117c2:	46bd      	mov	sp, r7
 80117c4:	bd80      	pop	{r7, pc}
 80117c6:	bf00      	nop
 80117c8:	e000ed04 	.word	0xe000ed04

080117cc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b08e      	sub	sp, #56	@ 0x38
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	60f8      	str	r0, [r7, #12]
 80117d4:	60b9      	str	r1, [r7, #8]
 80117d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80117dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d10b      	bne.n	80117fa <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80117e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117e6:	f383 8811 	msr	BASEPRI, r3
 80117ea:	f3bf 8f6f 	isb	sy
 80117ee:	f3bf 8f4f 	dsb	sy
 80117f2:	623b      	str	r3, [r7, #32]
}
 80117f4:	bf00      	nop
 80117f6:	bf00      	nop
 80117f8:	e7fd      	b.n	80117f6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80117fa:	68bb      	ldr	r3, [r7, #8]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d103      	bne.n	8011808 <xQueueReceiveFromISR+0x3c>
 8011800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011804:	2b00      	cmp	r3, #0
 8011806:	d101      	bne.n	801180c <xQueueReceiveFromISR+0x40>
 8011808:	2301      	movs	r3, #1
 801180a:	e000      	b.n	801180e <xQueueReceiveFromISR+0x42>
 801180c:	2300      	movs	r3, #0
 801180e:	2b00      	cmp	r3, #0
 8011810:	d10b      	bne.n	801182a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8011812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011816:	f383 8811 	msr	BASEPRI, r3
 801181a:	f3bf 8f6f 	isb	sy
 801181e:	f3bf 8f4f 	dsb	sy
 8011822:	61fb      	str	r3, [r7, #28]
}
 8011824:	bf00      	nop
 8011826:	bf00      	nop
 8011828:	e7fd      	b.n	8011826 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801182a:	f001 ffcd 	bl	80137c8 <vPortValidateInterruptPriority>
	__asm volatile
 801182e:	f3ef 8211 	mrs	r2, BASEPRI
 8011832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011836:	f383 8811 	msr	BASEPRI, r3
 801183a:	f3bf 8f6f 	isb	sy
 801183e:	f3bf 8f4f 	dsb	sy
 8011842:	61ba      	str	r2, [r7, #24]
 8011844:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011846:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011848:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801184a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801184c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801184e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011852:	2b00      	cmp	r3, #0
 8011854:	d02f      	beq.n	80118b6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8011856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011858:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801185c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011860:	68b9      	ldr	r1, [r7, #8]
 8011862:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011864:	f000 f8da 	bl	8011a1c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801186a:	1e5a      	subs	r2, r3, #1
 801186c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801186e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011870:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8011874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011878:	d112      	bne.n	80118a0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801187a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801187c:	691b      	ldr	r3, [r3, #16]
 801187e:	2b00      	cmp	r3, #0
 8011880:	d016      	beq.n	80118b0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011884:	3310      	adds	r3, #16
 8011886:	4618      	mov	r0, r3
 8011888:	f000 fe88 	bl	801259c <xTaskRemoveFromEventList>
 801188c:	4603      	mov	r3, r0
 801188e:	2b00      	cmp	r3, #0
 8011890:	d00e      	beq.n	80118b0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	2b00      	cmp	r3, #0
 8011896:	d00b      	beq.n	80118b0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	2201      	movs	r2, #1
 801189c:	601a      	str	r2, [r3, #0]
 801189e:	e007      	b.n	80118b0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80118a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80118a4:	3301      	adds	r3, #1
 80118a6:	b2db      	uxtb	r3, r3
 80118a8:	b25a      	sxtb	r2, r3
 80118aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80118b0:	2301      	movs	r3, #1
 80118b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80118b4:	e001      	b.n	80118ba <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80118b6:	2300      	movs	r3, #0
 80118b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80118ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80118be:	693b      	ldr	r3, [r7, #16]
 80118c0:	f383 8811 	msr	BASEPRI, r3
}
 80118c4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80118c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80118c8:	4618      	mov	r0, r3
 80118ca:	3738      	adds	r7, #56	@ 0x38
 80118cc:	46bd      	mov	sp, r7
 80118ce:	bd80      	pop	{r7, pc}

080118d0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b084      	sub	sp, #16
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d10b      	bne.n	80118fa <vQueueDelete+0x2a>
	__asm volatile
 80118e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118e6:	f383 8811 	msr	BASEPRI, r3
 80118ea:	f3bf 8f6f 	isb	sy
 80118ee:	f3bf 8f4f 	dsb	sy
 80118f2:	60bb      	str	r3, [r7, #8]
}
 80118f4:	bf00      	nop
 80118f6:	bf00      	nop
 80118f8:	e7fd      	b.n	80118f6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80118fa:	68f8      	ldr	r0, [r7, #12]
 80118fc:	f000 f95e 	bl	8011bbc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8011906:	2b00      	cmp	r3, #0
 8011908:	d102      	bne.n	8011910 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 801190a:	68f8      	ldr	r0, [r7, #12]
 801190c:	f002 f86c 	bl	80139e8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8011910:	bf00      	nop
 8011912:	3710      	adds	r7, #16
 8011914:	46bd      	mov	sp, r7
 8011916:	bd80      	pop	{r7, pc}

08011918 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011918:	b480      	push	{r7}
 801191a:	b085      	sub	sp, #20
 801191c:	af00      	add	r7, sp, #0
 801191e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011924:	2b00      	cmp	r3, #0
 8011926:	d006      	beq.n	8011936 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8011932:	60fb      	str	r3, [r7, #12]
 8011934:	e001      	b.n	801193a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8011936:	2300      	movs	r3, #0
 8011938:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801193a:	68fb      	ldr	r3, [r7, #12]
	}
 801193c:	4618      	mov	r0, r3
 801193e:	3714      	adds	r7, #20
 8011940:	46bd      	mov	sp, r7
 8011942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011946:	4770      	bx	lr

08011948 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011948:	b580      	push	{r7, lr}
 801194a:	b086      	sub	sp, #24
 801194c:	af00      	add	r7, sp, #0
 801194e:	60f8      	str	r0, [r7, #12]
 8011950:	60b9      	str	r1, [r7, #8]
 8011952:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011954:	2300      	movs	r3, #0
 8011956:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801195c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011962:	2b00      	cmp	r3, #0
 8011964:	d10d      	bne.n	8011982 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d14d      	bne.n	8011a0a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	689b      	ldr	r3, [r3, #8]
 8011972:	4618      	mov	r0, r3
 8011974:	f001 f85e 	bl	8012a34 <xTaskPriorityDisinherit>
 8011978:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	2200      	movs	r2, #0
 801197e:	609a      	str	r2, [r3, #8]
 8011980:	e043      	b.n	8011a0a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d119      	bne.n	80119bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	6858      	ldr	r0, [r3, #4]
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011990:	461a      	mov	r2, r3
 8011992:	68b9      	ldr	r1, [r7, #8]
 8011994:	f01a ff99 	bl	802c8ca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	685a      	ldr	r2, [r3, #4]
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80119a0:	441a      	add	r2, r3
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	685a      	ldr	r2, [r3, #4]
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	689b      	ldr	r3, [r3, #8]
 80119ae:	429a      	cmp	r2, r3
 80119b0:	d32b      	bcc.n	8011a0a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	681a      	ldr	r2, [r3, #0]
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	605a      	str	r2, [r3, #4]
 80119ba:	e026      	b.n	8011a0a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	68d8      	ldr	r0, [r3, #12]
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80119c4:	461a      	mov	r2, r3
 80119c6:	68b9      	ldr	r1, [r7, #8]
 80119c8:	f01a ff7f 	bl	802c8ca <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	68da      	ldr	r2, [r3, #12]
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80119d4:	425b      	negs	r3, r3
 80119d6:	441a      	add	r2, r3
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	68da      	ldr	r2, [r3, #12]
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	429a      	cmp	r2, r3
 80119e6:	d207      	bcs.n	80119f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	689a      	ldr	r2, [r3, #8]
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80119f0:	425b      	negs	r3, r3
 80119f2:	441a      	add	r2, r3
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	2b02      	cmp	r3, #2
 80119fc:	d105      	bne.n	8011a0a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80119fe:	693b      	ldr	r3, [r7, #16]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d002      	beq.n	8011a0a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011a04:	693b      	ldr	r3, [r7, #16]
 8011a06:	3b01      	subs	r3, #1
 8011a08:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011a0a:	693b      	ldr	r3, [r7, #16]
 8011a0c:	1c5a      	adds	r2, r3, #1
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8011a12:	697b      	ldr	r3, [r7, #20]
}
 8011a14:	4618      	mov	r0, r3
 8011a16:	3718      	adds	r7, #24
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	bd80      	pop	{r7, pc}

08011a1c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	b082      	sub	sp, #8
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	6078      	str	r0, [r7, #4]
 8011a24:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d018      	beq.n	8011a60 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	68da      	ldr	r2, [r3, #12]
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011a36:	441a      	add	r2, r3
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	68da      	ldr	r2, [r3, #12]
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	689b      	ldr	r3, [r3, #8]
 8011a44:	429a      	cmp	r2, r3
 8011a46:	d303      	bcc.n	8011a50 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	681a      	ldr	r2, [r3, #0]
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	68d9      	ldr	r1, [r3, #12]
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011a58:	461a      	mov	r2, r3
 8011a5a:	6838      	ldr	r0, [r7, #0]
 8011a5c:	f01a ff35 	bl	802c8ca <memcpy>
	}
}
 8011a60:	bf00      	nop
 8011a62:	3708      	adds	r7, #8
 8011a64:	46bd      	mov	sp, r7
 8011a66:	bd80      	pop	{r7, pc}

08011a68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	b084      	sub	sp, #16
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011a70:	f001 fdca 	bl	8013608 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011a7a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011a7c:	e011      	b.n	8011aa2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d012      	beq.n	8011aac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	3324      	adds	r3, #36	@ 0x24
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	f000 fd86 	bl	801259c <xTaskRemoveFromEventList>
 8011a90:	4603      	mov	r3, r0
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d001      	beq.n	8011a9a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011a96:	f000 fe5f 	bl	8012758 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011a9a:	7bfb      	ldrb	r3, [r7, #15]
 8011a9c:	3b01      	subs	r3, #1
 8011a9e:	b2db      	uxtb	r3, r3
 8011aa0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	dce9      	bgt.n	8011a7e <prvUnlockQueue+0x16>
 8011aaa:	e000      	b.n	8011aae <prvUnlockQueue+0x46>
					break;
 8011aac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	22ff      	movs	r2, #255	@ 0xff
 8011ab2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8011ab6:	f001 fdd9 	bl	801366c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011aba:	f001 fda5 	bl	8013608 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011ac4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011ac6:	e011      	b.n	8011aec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	691b      	ldr	r3, [r3, #16]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d012      	beq.n	8011af6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	3310      	adds	r3, #16
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	f000 fd61 	bl	801259c <xTaskRemoveFromEventList>
 8011ada:	4603      	mov	r3, r0
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d001      	beq.n	8011ae4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011ae0:	f000 fe3a 	bl	8012758 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011ae4:	7bbb      	ldrb	r3, [r7, #14]
 8011ae6:	3b01      	subs	r3, #1
 8011ae8:	b2db      	uxtb	r3, r3
 8011aea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011aec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	dce9      	bgt.n	8011ac8 <prvUnlockQueue+0x60>
 8011af4:	e000      	b.n	8011af8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011af6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	22ff      	movs	r2, #255	@ 0xff
 8011afc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8011b00:	f001 fdb4 	bl	801366c <vPortExitCritical>
}
 8011b04:	bf00      	nop
 8011b06:	3710      	adds	r7, #16
 8011b08:	46bd      	mov	sp, r7
 8011b0a:	bd80      	pop	{r7, pc}

08011b0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	b084      	sub	sp, #16
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011b14:	f001 fd78 	bl	8013608 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d102      	bne.n	8011b26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011b20:	2301      	movs	r3, #1
 8011b22:	60fb      	str	r3, [r7, #12]
 8011b24:	e001      	b.n	8011b2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011b26:	2300      	movs	r3, #0
 8011b28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011b2a:	f001 fd9f 	bl	801366c <vPortExitCritical>

	return xReturn;
 8011b2e:	68fb      	ldr	r3, [r7, #12]
}
 8011b30:	4618      	mov	r0, r3
 8011b32:	3710      	adds	r7, #16
 8011b34:	46bd      	mov	sp, r7
 8011b36:	bd80      	pop	{r7, pc}

08011b38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	b084      	sub	sp, #16
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011b40:	f001 fd62 	bl	8013608 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011b4c:	429a      	cmp	r2, r3
 8011b4e:	d102      	bne.n	8011b56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011b50:	2301      	movs	r3, #1
 8011b52:	60fb      	str	r3, [r7, #12]
 8011b54:	e001      	b.n	8011b5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011b56:	2300      	movs	r3, #0
 8011b58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011b5a:	f001 fd87 	bl	801366c <vPortExitCritical>

	return xReturn;
 8011b5e:	68fb      	ldr	r3, [r7, #12]
}
 8011b60:	4618      	mov	r0, r3
 8011b62:	3710      	adds	r7, #16
 8011b64:	46bd      	mov	sp, r7
 8011b66:	bd80      	pop	{r7, pc}

08011b68 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011b68:	b480      	push	{r7}
 8011b6a:	b085      	sub	sp, #20
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	6078      	str	r0, [r7, #4]
 8011b70:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011b72:	2300      	movs	r3, #0
 8011b74:	60fb      	str	r3, [r7, #12]
 8011b76:	e014      	b.n	8011ba2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011b78:	4a0f      	ldr	r2, [pc, #60]	@ (8011bb8 <vQueueAddToRegistry+0x50>)
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d10b      	bne.n	8011b9c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011b84:	490c      	ldr	r1, [pc, #48]	@ (8011bb8 <vQueueAddToRegistry+0x50>)
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	683a      	ldr	r2, [r7, #0]
 8011b8a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011b8e:	4a0a      	ldr	r2, [pc, #40]	@ (8011bb8 <vQueueAddToRegistry+0x50>)
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	00db      	lsls	r3, r3, #3
 8011b94:	4413      	add	r3, r2
 8011b96:	687a      	ldr	r2, [r7, #4]
 8011b98:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8011b9a:	e006      	b.n	8011baa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	3301      	adds	r3, #1
 8011ba0:	60fb      	str	r3, [r7, #12]
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	2b07      	cmp	r3, #7
 8011ba6:	d9e7      	bls.n	8011b78 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011ba8:	bf00      	nop
 8011baa:	bf00      	nop
 8011bac:	3714      	adds	r7, #20
 8011bae:	46bd      	mov	sp, r7
 8011bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb4:	4770      	bx	lr
 8011bb6:	bf00      	nop
 8011bb8:	24001b38 	.word	0x24001b38

08011bbc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8011bbc:	b480      	push	{r7}
 8011bbe:	b085      	sub	sp, #20
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011bc4:	2300      	movs	r3, #0
 8011bc6:	60fb      	str	r3, [r7, #12]
 8011bc8:	e016      	b.n	8011bf8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8011bca:	4a10      	ldr	r2, [pc, #64]	@ (8011c0c <vQueueUnregisterQueue+0x50>)
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	00db      	lsls	r3, r3, #3
 8011bd0:	4413      	add	r3, r2
 8011bd2:	685b      	ldr	r3, [r3, #4]
 8011bd4:	687a      	ldr	r2, [r7, #4]
 8011bd6:	429a      	cmp	r2, r3
 8011bd8:	d10b      	bne.n	8011bf2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8011bda:	4a0c      	ldr	r2, [pc, #48]	@ (8011c0c <vQueueUnregisterQueue+0x50>)
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	2100      	movs	r1, #0
 8011be0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8011be4:	4a09      	ldr	r2, [pc, #36]	@ (8011c0c <vQueueUnregisterQueue+0x50>)
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	00db      	lsls	r3, r3, #3
 8011bea:	4413      	add	r3, r2
 8011bec:	2200      	movs	r2, #0
 8011bee:	605a      	str	r2, [r3, #4]
				break;
 8011bf0:	e006      	b.n	8011c00 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	3301      	adds	r3, #1
 8011bf6:	60fb      	str	r3, [r7, #12]
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	2b07      	cmp	r3, #7
 8011bfc:	d9e5      	bls.n	8011bca <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8011bfe:	bf00      	nop
 8011c00:	bf00      	nop
 8011c02:	3714      	adds	r7, #20
 8011c04:	46bd      	mov	sp, r7
 8011c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c0a:	4770      	bx	lr
 8011c0c:	24001b38 	.word	0x24001b38

08011c10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011c10:	b580      	push	{r7, lr}
 8011c12:	b086      	sub	sp, #24
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	60f8      	str	r0, [r7, #12]
 8011c18:	60b9      	str	r1, [r7, #8]
 8011c1a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011c20:	f001 fcf2 	bl	8013608 <vPortEnterCritical>
 8011c24:	697b      	ldr	r3, [r7, #20]
 8011c26:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011c2a:	b25b      	sxtb	r3, r3
 8011c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c30:	d103      	bne.n	8011c3a <vQueueWaitForMessageRestricted+0x2a>
 8011c32:	697b      	ldr	r3, [r7, #20]
 8011c34:	2200      	movs	r2, #0
 8011c36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011c3a:	697b      	ldr	r3, [r7, #20]
 8011c3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011c40:	b25b      	sxtb	r3, r3
 8011c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c46:	d103      	bne.n	8011c50 <vQueueWaitForMessageRestricted+0x40>
 8011c48:	697b      	ldr	r3, [r7, #20]
 8011c4a:	2200      	movs	r2, #0
 8011c4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011c50:	f001 fd0c 	bl	801366c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011c54:	697b      	ldr	r3, [r7, #20]
 8011c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d106      	bne.n	8011c6a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011c5c:	697b      	ldr	r3, [r7, #20]
 8011c5e:	3324      	adds	r3, #36	@ 0x24
 8011c60:	687a      	ldr	r2, [r7, #4]
 8011c62:	68b9      	ldr	r1, [r7, #8]
 8011c64:	4618      	mov	r0, r3
 8011c66:	f000 fc6d 	bl	8012544 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8011c6a:	6978      	ldr	r0, [r7, #20]
 8011c6c:	f7ff fefc 	bl	8011a68 <prvUnlockQueue>
	}
 8011c70:	bf00      	nop
 8011c72:	3718      	adds	r7, #24
 8011c74:	46bd      	mov	sp, r7
 8011c76:	bd80      	pop	{r7, pc}

08011c78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b08e      	sub	sp, #56	@ 0x38
 8011c7c:	af04      	add	r7, sp, #16
 8011c7e:	60f8      	str	r0, [r7, #12]
 8011c80:	60b9      	str	r1, [r7, #8]
 8011c82:	607a      	str	r2, [r7, #4]
 8011c84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d10b      	bne.n	8011ca4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8011c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c90:	f383 8811 	msr	BASEPRI, r3
 8011c94:	f3bf 8f6f 	isb	sy
 8011c98:	f3bf 8f4f 	dsb	sy
 8011c9c:	623b      	str	r3, [r7, #32]
}
 8011c9e:	bf00      	nop
 8011ca0:	bf00      	nop
 8011ca2:	e7fd      	b.n	8011ca0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8011ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d10b      	bne.n	8011cc2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8011caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011cae:	f383 8811 	msr	BASEPRI, r3
 8011cb2:	f3bf 8f6f 	isb	sy
 8011cb6:	f3bf 8f4f 	dsb	sy
 8011cba:	61fb      	str	r3, [r7, #28]
}
 8011cbc:	bf00      	nop
 8011cbe:	bf00      	nop
 8011cc0:	e7fd      	b.n	8011cbe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011cc2:	23a8      	movs	r3, #168	@ 0xa8
 8011cc4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011cc6:	693b      	ldr	r3, [r7, #16]
 8011cc8:	2ba8      	cmp	r3, #168	@ 0xa8
 8011cca:	d00b      	beq.n	8011ce4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8011ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011cd0:	f383 8811 	msr	BASEPRI, r3
 8011cd4:	f3bf 8f6f 	isb	sy
 8011cd8:	f3bf 8f4f 	dsb	sy
 8011cdc:	61bb      	str	r3, [r7, #24]
}
 8011cde:	bf00      	nop
 8011ce0:	bf00      	nop
 8011ce2:	e7fd      	b.n	8011ce0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011ce4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d01e      	beq.n	8011d2a <xTaskCreateStatic+0xb2>
 8011cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d01b      	beq.n	8011d2a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cf4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cf8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011cfa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cfe:	2202      	movs	r2, #2
 8011d00:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011d04:	2300      	movs	r3, #0
 8011d06:	9303      	str	r3, [sp, #12]
 8011d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d0a:	9302      	str	r3, [sp, #8]
 8011d0c:	f107 0314 	add.w	r3, r7, #20
 8011d10:	9301      	str	r3, [sp, #4]
 8011d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d14:	9300      	str	r3, [sp, #0]
 8011d16:	683b      	ldr	r3, [r7, #0]
 8011d18:	687a      	ldr	r2, [r7, #4]
 8011d1a:	68b9      	ldr	r1, [r7, #8]
 8011d1c:	68f8      	ldr	r0, [r7, #12]
 8011d1e:	f000 f851 	bl	8011dc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011d22:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011d24:	f000 f8f6 	bl	8011f14 <prvAddNewTaskToReadyList>
 8011d28:	e001      	b.n	8011d2e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011d2e:	697b      	ldr	r3, [r7, #20]
	}
 8011d30:	4618      	mov	r0, r3
 8011d32:	3728      	adds	r7, #40	@ 0x28
 8011d34:	46bd      	mov	sp, r7
 8011d36:	bd80      	pop	{r7, pc}

08011d38 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	b08c      	sub	sp, #48	@ 0x30
 8011d3c:	af04      	add	r7, sp, #16
 8011d3e:	60f8      	str	r0, [r7, #12]
 8011d40:	60b9      	str	r1, [r7, #8]
 8011d42:	603b      	str	r3, [r7, #0]
 8011d44:	4613      	mov	r3, r2
 8011d46:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011d48:	88fb      	ldrh	r3, [r7, #6]
 8011d4a:	009b      	lsls	r3, r3, #2
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	f001 fd7d 	bl	801384c <pvPortMalloc>
 8011d52:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011d54:	697b      	ldr	r3, [r7, #20]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d00e      	beq.n	8011d78 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011d5a:	20a8      	movs	r0, #168	@ 0xa8
 8011d5c:	f001 fd76 	bl	801384c <pvPortMalloc>
 8011d60:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011d62:	69fb      	ldr	r3, [r7, #28]
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d003      	beq.n	8011d70 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011d68:	69fb      	ldr	r3, [r7, #28]
 8011d6a:	697a      	ldr	r2, [r7, #20]
 8011d6c:	631a      	str	r2, [r3, #48]	@ 0x30
 8011d6e:	e005      	b.n	8011d7c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011d70:	6978      	ldr	r0, [r7, #20]
 8011d72:	f001 fe39 	bl	80139e8 <vPortFree>
 8011d76:	e001      	b.n	8011d7c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011d78:	2300      	movs	r3, #0
 8011d7a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011d7c:	69fb      	ldr	r3, [r7, #28]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d017      	beq.n	8011db2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011d82:	69fb      	ldr	r3, [r7, #28]
 8011d84:	2200      	movs	r2, #0
 8011d86:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011d8a:	88fa      	ldrh	r2, [r7, #6]
 8011d8c:	2300      	movs	r3, #0
 8011d8e:	9303      	str	r3, [sp, #12]
 8011d90:	69fb      	ldr	r3, [r7, #28]
 8011d92:	9302      	str	r3, [sp, #8]
 8011d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d96:	9301      	str	r3, [sp, #4]
 8011d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d9a:	9300      	str	r3, [sp, #0]
 8011d9c:	683b      	ldr	r3, [r7, #0]
 8011d9e:	68b9      	ldr	r1, [r7, #8]
 8011da0:	68f8      	ldr	r0, [r7, #12]
 8011da2:	f000 f80f 	bl	8011dc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011da6:	69f8      	ldr	r0, [r7, #28]
 8011da8:	f000 f8b4 	bl	8011f14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011dac:	2301      	movs	r3, #1
 8011dae:	61bb      	str	r3, [r7, #24]
 8011db0:	e002      	b.n	8011db8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011db2:	f04f 33ff 	mov.w	r3, #4294967295
 8011db6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011db8:	69bb      	ldr	r3, [r7, #24]
	}
 8011dba:	4618      	mov	r0, r3
 8011dbc:	3720      	adds	r7, #32
 8011dbe:	46bd      	mov	sp, r7
 8011dc0:	bd80      	pop	{r7, pc}
	...

08011dc4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b088      	sub	sp, #32
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	60f8      	str	r0, [r7, #12]
 8011dcc:	60b9      	str	r1, [r7, #8]
 8011dce:	607a      	str	r2, [r7, #4]
 8011dd0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011dd4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	009b      	lsls	r3, r3, #2
 8011dda:	461a      	mov	r2, r3
 8011ddc:	21a5      	movs	r1, #165	@ 0xa5
 8011dde:	f01a fc4f 	bl	802c680 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011de4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011de6:	6879      	ldr	r1, [r7, #4]
 8011de8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8011dec:	440b      	add	r3, r1
 8011dee:	009b      	lsls	r3, r3, #2
 8011df0:	4413      	add	r3, r2
 8011df2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011df4:	69bb      	ldr	r3, [r7, #24]
 8011df6:	f023 0307 	bic.w	r3, r3, #7
 8011dfa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011dfc:	69bb      	ldr	r3, [r7, #24]
 8011dfe:	f003 0307 	and.w	r3, r3, #7
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d00b      	beq.n	8011e1e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8011e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e0a:	f383 8811 	msr	BASEPRI, r3
 8011e0e:	f3bf 8f6f 	isb	sy
 8011e12:	f3bf 8f4f 	dsb	sy
 8011e16:	617b      	str	r3, [r7, #20]
}
 8011e18:	bf00      	nop
 8011e1a:	bf00      	nop
 8011e1c:	e7fd      	b.n	8011e1a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011e1e:	68bb      	ldr	r3, [r7, #8]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d01f      	beq.n	8011e64 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011e24:	2300      	movs	r3, #0
 8011e26:	61fb      	str	r3, [r7, #28]
 8011e28:	e012      	b.n	8011e50 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011e2a:	68ba      	ldr	r2, [r7, #8]
 8011e2c:	69fb      	ldr	r3, [r7, #28]
 8011e2e:	4413      	add	r3, r2
 8011e30:	7819      	ldrb	r1, [r3, #0]
 8011e32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011e34:	69fb      	ldr	r3, [r7, #28]
 8011e36:	4413      	add	r3, r2
 8011e38:	3334      	adds	r3, #52	@ 0x34
 8011e3a:	460a      	mov	r2, r1
 8011e3c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011e3e:	68ba      	ldr	r2, [r7, #8]
 8011e40:	69fb      	ldr	r3, [r7, #28]
 8011e42:	4413      	add	r3, r2
 8011e44:	781b      	ldrb	r3, [r3, #0]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d006      	beq.n	8011e58 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011e4a:	69fb      	ldr	r3, [r7, #28]
 8011e4c:	3301      	adds	r3, #1
 8011e4e:	61fb      	str	r3, [r7, #28]
 8011e50:	69fb      	ldr	r3, [r7, #28]
 8011e52:	2b0f      	cmp	r3, #15
 8011e54:	d9e9      	bls.n	8011e2a <prvInitialiseNewTask+0x66>
 8011e56:	e000      	b.n	8011e5a <prvInitialiseNewTask+0x96>
			{
				break;
 8011e58:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e5c:	2200      	movs	r2, #0
 8011e5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8011e62:	e003      	b.n	8011e6c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e66:	2200      	movs	r2, #0
 8011e68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e6e:	2b37      	cmp	r3, #55	@ 0x37
 8011e70:	d901      	bls.n	8011e76 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011e72:	2337      	movs	r3, #55	@ 0x37
 8011e74:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011e7a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011e80:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8011e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e84:	2200      	movs	r2, #0
 8011e86:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e8a:	3304      	adds	r3, #4
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	f7fe fe33 	bl	8010af8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e94:	3318      	adds	r3, #24
 8011e96:	4618      	mov	r0, r3
 8011e98:	f7fe fe2e 	bl	8010af8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011ea0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ea4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8011ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011eaa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011eae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011eb0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011eb4:	2200      	movs	r2, #0
 8011eb6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8011ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ec4:	3354      	adds	r3, #84	@ 0x54
 8011ec6:	224c      	movs	r2, #76	@ 0x4c
 8011ec8:	2100      	movs	r1, #0
 8011eca:	4618      	mov	r0, r3
 8011ecc:	f01a fbd8 	bl	802c680 <memset>
 8011ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ed2:	4a0d      	ldr	r2, [pc, #52]	@ (8011f08 <prvInitialiseNewTask+0x144>)
 8011ed4:	659a      	str	r2, [r3, #88]	@ 0x58
 8011ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ed8:	4a0c      	ldr	r2, [pc, #48]	@ (8011f0c <prvInitialiseNewTask+0x148>)
 8011eda:	65da      	str	r2, [r3, #92]	@ 0x5c
 8011edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ede:	4a0c      	ldr	r2, [pc, #48]	@ (8011f10 <prvInitialiseNewTask+0x14c>)
 8011ee0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011ee2:	683a      	ldr	r2, [r7, #0]
 8011ee4:	68f9      	ldr	r1, [r7, #12]
 8011ee6:	69b8      	ldr	r0, [r7, #24]
 8011ee8:	f001 fa5a 	bl	80133a0 <pxPortInitialiseStack>
 8011eec:	4602      	mov	r2, r0
 8011eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ef0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d002      	beq.n	8011efe <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011efa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011efc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011efe:	bf00      	nop
 8011f00:	3720      	adds	r7, #32
 8011f02:	46bd      	mov	sp, r7
 8011f04:	bd80      	pop	{r7, pc}
 8011f06:	bf00      	nop
 8011f08:	24034c70 	.word	0x24034c70
 8011f0c:	24034cd8 	.word	0x24034cd8
 8011f10:	24034d40 	.word	0x24034d40

08011f14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011f14:	b580      	push	{r7, lr}
 8011f16:	b082      	sub	sp, #8
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011f1c:	f001 fb74 	bl	8013608 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011f20:	4b2d      	ldr	r3, [pc, #180]	@ (8011fd8 <prvAddNewTaskToReadyList+0xc4>)
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	3301      	adds	r3, #1
 8011f26:	4a2c      	ldr	r2, [pc, #176]	@ (8011fd8 <prvAddNewTaskToReadyList+0xc4>)
 8011f28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011f2a:	4b2c      	ldr	r3, [pc, #176]	@ (8011fdc <prvAddNewTaskToReadyList+0xc8>)
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d109      	bne.n	8011f46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011f32:	4a2a      	ldr	r2, [pc, #168]	@ (8011fdc <prvAddNewTaskToReadyList+0xc8>)
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011f38:	4b27      	ldr	r3, [pc, #156]	@ (8011fd8 <prvAddNewTaskToReadyList+0xc4>)
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	2b01      	cmp	r3, #1
 8011f3e:	d110      	bne.n	8011f62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011f40:	f000 fc2e 	bl	80127a0 <prvInitialiseTaskLists>
 8011f44:	e00d      	b.n	8011f62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011f46:	4b26      	ldr	r3, [pc, #152]	@ (8011fe0 <prvAddNewTaskToReadyList+0xcc>)
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d109      	bne.n	8011f62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011f4e:	4b23      	ldr	r3, [pc, #140]	@ (8011fdc <prvAddNewTaskToReadyList+0xc8>)
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f58:	429a      	cmp	r2, r3
 8011f5a:	d802      	bhi.n	8011f62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011f5c:	4a1f      	ldr	r2, [pc, #124]	@ (8011fdc <prvAddNewTaskToReadyList+0xc8>)
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011f62:	4b20      	ldr	r3, [pc, #128]	@ (8011fe4 <prvAddNewTaskToReadyList+0xd0>)
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	3301      	adds	r3, #1
 8011f68:	4a1e      	ldr	r2, [pc, #120]	@ (8011fe4 <prvAddNewTaskToReadyList+0xd0>)
 8011f6a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011f6c:	4b1d      	ldr	r3, [pc, #116]	@ (8011fe4 <prvAddNewTaskToReadyList+0xd0>)
 8011f6e:	681a      	ldr	r2, [r3, #0]
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011f78:	4b1b      	ldr	r3, [pc, #108]	@ (8011fe8 <prvAddNewTaskToReadyList+0xd4>)
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	429a      	cmp	r2, r3
 8011f7e:	d903      	bls.n	8011f88 <prvAddNewTaskToReadyList+0x74>
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f84:	4a18      	ldr	r2, [pc, #96]	@ (8011fe8 <prvAddNewTaskToReadyList+0xd4>)
 8011f86:	6013      	str	r3, [r2, #0]
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011f8c:	4613      	mov	r3, r2
 8011f8e:	009b      	lsls	r3, r3, #2
 8011f90:	4413      	add	r3, r2
 8011f92:	009b      	lsls	r3, r3, #2
 8011f94:	4a15      	ldr	r2, [pc, #84]	@ (8011fec <prvAddNewTaskToReadyList+0xd8>)
 8011f96:	441a      	add	r2, r3
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	3304      	adds	r3, #4
 8011f9c:	4619      	mov	r1, r3
 8011f9e:	4610      	mov	r0, r2
 8011fa0:	f7fe fdb7 	bl	8010b12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011fa4:	f001 fb62 	bl	801366c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011fa8:	4b0d      	ldr	r3, [pc, #52]	@ (8011fe0 <prvAddNewTaskToReadyList+0xcc>)
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d00e      	beq.n	8011fce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8011fdc <prvAddNewTaskToReadyList+0xc8>)
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011fba:	429a      	cmp	r2, r3
 8011fbc:	d207      	bcs.n	8011fce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8011ff0 <prvAddNewTaskToReadyList+0xdc>)
 8011fc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011fc4:	601a      	str	r2, [r3, #0]
 8011fc6:	f3bf 8f4f 	dsb	sy
 8011fca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011fce:	bf00      	nop
 8011fd0:	3708      	adds	r7, #8
 8011fd2:	46bd      	mov	sp, r7
 8011fd4:	bd80      	pop	{r7, pc}
 8011fd6:	bf00      	nop
 8011fd8:	2400204c 	.word	0x2400204c
 8011fdc:	24001b78 	.word	0x24001b78
 8011fe0:	24002058 	.word	0x24002058
 8011fe4:	24002068 	.word	0x24002068
 8011fe8:	24002054 	.word	0x24002054
 8011fec:	24001b7c 	.word	0x24001b7c
 8011ff0:	e000ed04 	.word	0xe000ed04

08011ff4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011ff4:	b580      	push	{r7, lr}
 8011ff6:	b084      	sub	sp, #16
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	2b00      	cmp	r3, #0
 8012004:	d018      	beq.n	8012038 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012006:	4b14      	ldr	r3, [pc, #80]	@ (8012058 <vTaskDelay+0x64>)
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d00b      	beq.n	8012026 <vTaskDelay+0x32>
	__asm volatile
 801200e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012012:	f383 8811 	msr	BASEPRI, r3
 8012016:	f3bf 8f6f 	isb	sy
 801201a:	f3bf 8f4f 	dsb	sy
 801201e:	60bb      	str	r3, [r7, #8]
}
 8012020:	bf00      	nop
 8012022:	bf00      	nop
 8012024:	e7fd      	b.n	8012022 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8012026:	f000 f88b 	bl	8012140 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801202a:	2100      	movs	r1, #0
 801202c:	6878      	ldr	r0, [r7, #4]
 801202e:	f000 fe09 	bl	8012c44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012032:	f000 f893 	bl	801215c <xTaskResumeAll>
 8012036:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	2b00      	cmp	r3, #0
 801203c:	d107      	bne.n	801204e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801203e:	4b07      	ldr	r3, [pc, #28]	@ (801205c <vTaskDelay+0x68>)
 8012040:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012044:	601a      	str	r2, [r3, #0]
 8012046:	f3bf 8f4f 	dsb	sy
 801204a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801204e:	bf00      	nop
 8012050:	3710      	adds	r7, #16
 8012052:	46bd      	mov	sp, r7
 8012054:	bd80      	pop	{r7, pc}
 8012056:	bf00      	nop
 8012058:	24002074 	.word	0x24002074
 801205c:	e000ed04 	.word	0xe000ed04

08012060 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012060:	b580      	push	{r7, lr}
 8012062:	b08a      	sub	sp, #40	@ 0x28
 8012064:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012066:	2300      	movs	r3, #0
 8012068:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801206a:	2300      	movs	r3, #0
 801206c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801206e:	463a      	mov	r2, r7
 8012070:	1d39      	adds	r1, r7, #4
 8012072:	f107 0308 	add.w	r3, r7, #8
 8012076:	4618      	mov	r0, r3
 8012078:	f7fe fcea 	bl	8010a50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801207c:	6839      	ldr	r1, [r7, #0]
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	68ba      	ldr	r2, [r7, #8]
 8012082:	9202      	str	r2, [sp, #8]
 8012084:	9301      	str	r3, [sp, #4]
 8012086:	2300      	movs	r3, #0
 8012088:	9300      	str	r3, [sp, #0]
 801208a:	2300      	movs	r3, #0
 801208c:	460a      	mov	r2, r1
 801208e:	4924      	ldr	r1, [pc, #144]	@ (8012120 <vTaskStartScheduler+0xc0>)
 8012090:	4824      	ldr	r0, [pc, #144]	@ (8012124 <vTaskStartScheduler+0xc4>)
 8012092:	f7ff fdf1 	bl	8011c78 <xTaskCreateStatic>
 8012096:	4603      	mov	r3, r0
 8012098:	4a23      	ldr	r2, [pc, #140]	@ (8012128 <vTaskStartScheduler+0xc8>)
 801209a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801209c:	4b22      	ldr	r3, [pc, #136]	@ (8012128 <vTaskStartScheduler+0xc8>)
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d002      	beq.n	80120aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80120a4:	2301      	movs	r3, #1
 80120a6:	617b      	str	r3, [r7, #20]
 80120a8:	e001      	b.n	80120ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80120aa:	2300      	movs	r3, #0
 80120ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80120ae:	697b      	ldr	r3, [r7, #20]
 80120b0:	2b01      	cmp	r3, #1
 80120b2:	d102      	bne.n	80120ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80120b4:	f000 fe1a 	bl	8012cec <xTimerCreateTimerTask>
 80120b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80120ba:	697b      	ldr	r3, [r7, #20]
 80120bc:	2b01      	cmp	r3, #1
 80120be:	d11b      	bne.n	80120f8 <vTaskStartScheduler+0x98>
	__asm volatile
 80120c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120c4:	f383 8811 	msr	BASEPRI, r3
 80120c8:	f3bf 8f6f 	isb	sy
 80120cc:	f3bf 8f4f 	dsb	sy
 80120d0:	613b      	str	r3, [r7, #16]
}
 80120d2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80120d4:	4b15      	ldr	r3, [pc, #84]	@ (801212c <vTaskStartScheduler+0xcc>)
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	3354      	adds	r3, #84	@ 0x54
 80120da:	4a15      	ldr	r2, [pc, #84]	@ (8012130 <vTaskStartScheduler+0xd0>)
 80120dc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80120de:	4b15      	ldr	r3, [pc, #84]	@ (8012134 <vTaskStartScheduler+0xd4>)
 80120e0:	f04f 32ff 	mov.w	r2, #4294967295
 80120e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80120e6:	4b14      	ldr	r3, [pc, #80]	@ (8012138 <vTaskStartScheduler+0xd8>)
 80120e8:	2201      	movs	r2, #1
 80120ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80120ec:	4b13      	ldr	r3, [pc, #76]	@ (801213c <vTaskStartScheduler+0xdc>)
 80120ee:	2200      	movs	r2, #0
 80120f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80120f2:	f001 f9e5 	bl	80134c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80120f6:	e00f      	b.n	8012118 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80120f8:	697b      	ldr	r3, [r7, #20]
 80120fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120fe:	d10b      	bne.n	8012118 <vTaskStartScheduler+0xb8>
	__asm volatile
 8012100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012104:	f383 8811 	msr	BASEPRI, r3
 8012108:	f3bf 8f6f 	isb	sy
 801210c:	f3bf 8f4f 	dsb	sy
 8012110:	60fb      	str	r3, [r7, #12]
}
 8012112:	bf00      	nop
 8012114:	bf00      	nop
 8012116:	e7fd      	b.n	8012114 <vTaskStartScheduler+0xb4>
}
 8012118:	bf00      	nop
 801211a:	3718      	adds	r7, #24
 801211c:	46bd      	mov	sp, r7
 801211e:	bd80      	pop	{r7, pc}
 8012120:	0802d278 	.word	0x0802d278
 8012124:	08012771 	.word	0x08012771
 8012128:	24002070 	.word	0x24002070
 801212c:	24001b78 	.word	0x24001b78
 8012130:	240000bc 	.word	0x240000bc
 8012134:	2400206c 	.word	0x2400206c
 8012138:	24002058 	.word	0x24002058
 801213c:	24002050 	.word	0x24002050

08012140 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012140:	b480      	push	{r7}
 8012142:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8012144:	4b04      	ldr	r3, [pc, #16]	@ (8012158 <vTaskSuspendAll+0x18>)
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	3301      	adds	r3, #1
 801214a:	4a03      	ldr	r2, [pc, #12]	@ (8012158 <vTaskSuspendAll+0x18>)
 801214c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801214e:	bf00      	nop
 8012150:	46bd      	mov	sp, r7
 8012152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012156:	4770      	bx	lr
 8012158:	24002074 	.word	0x24002074

0801215c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801215c:	b580      	push	{r7, lr}
 801215e:	b084      	sub	sp, #16
 8012160:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012162:	2300      	movs	r3, #0
 8012164:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012166:	2300      	movs	r3, #0
 8012168:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801216a:	4b42      	ldr	r3, [pc, #264]	@ (8012274 <xTaskResumeAll+0x118>)
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	2b00      	cmp	r3, #0
 8012170:	d10b      	bne.n	801218a <xTaskResumeAll+0x2e>
	__asm volatile
 8012172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012176:	f383 8811 	msr	BASEPRI, r3
 801217a:	f3bf 8f6f 	isb	sy
 801217e:	f3bf 8f4f 	dsb	sy
 8012182:	603b      	str	r3, [r7, #0]
}
 8012184:	bf00      	nop
 8012186:	bf00      	nop
 8012188:	e7fd      	b.n	8012186 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801218a:	f001 fa3d 	bl	8013608 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801218e:	4b39      	ldr	r3, [pc, #228]	@ (8012274 <xTaskResumeAll+0x118>)
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	3b01      	subs	r3, #1
 8012194:	4a37      	ldr	r2, [pc, #220]	@ (8012274 <xTaskResumeAll+0x118>)
 8012196:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012198:	4b36      	ldr	r3, [pc, #216]	@ (8012274 <xTaskResumeAll+0x118>)
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	2b00      	cmp	r3, #0
 801219e:	d162      	bne.n	8012266 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80121a0:	4b35      	ldr	r3, [pc, #212]	@ (8012278 <xTaskResumeAll+0x11c>)
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d05e      	beq.n	8012266 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80121a8:	e02f      	b.n	801220a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80121aa:	4b34      	ldr	r3, [pc, #208]	@ (801227c <xTaskResumeAll+0x120>)
 80121ac:	68db      	ldr	r3, [r3, #12]
 80121ae:	68db      	ldr	r3, [r3, #12]
 80121b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	3318      	adds	r3, #24
 80121b6:	4618      	mov	r0, r3
 80121b8:	f7fe fd08 	bl	8010bcc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	3304      	adds	r3, #4
 80121c0:	4618      	mov	r0, r3
 80121c2:	f7fe fd03 	bl	8010bcc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80121ca:	4b2d      	ldr	r3, [pc, #180]	@ (8012280 <xTaskResumeAll+0x124>)
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	429a      	cmp	r2, r3
 80121d0:	d903      	bls.n	80121da <xTaskResumeAll+0x7e>
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121d6:	4a2a      	ldr	r2, [pc, #168]	@ (8012280 <xTaskResumeAll+0x124>)
 80121d8:	6013      	str	r3, [r2, #0]
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80121de:	4613      	mov	r3, r2
 80121e0:	009b      	lsls	r3, r3, #2
 80121e2:	4413      	add	r3, r2
 80121e4:	009b      	lsls	r3, r3, #2
 80121e6:	4a27      	ldr	r2, [pc, #156]	@ (8012284 <xTaskResumeAll+0x128>)
 80121e8:	441a      	add	r2, r3
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	3304      	adds	r3, #4
 80121ee:	4619      	mov	r1, r3
 80121f0:	4610      	mov	r0, r2
 80121f2:	f7fe fc8e 	bl	8010b12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80121fa:	4b23      	ldr	r3, [pc, #140]	@ (8012288 <xTaskResumeAll+0x12c>)
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012200:	429a      	cmp	r2, r3
 8012202:	d302      	bcc.n	801220a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8012204:	4b21      	ldr	r3, [pc, #132]	@ (801228c <xTaskResumeAll+0x130>)
 8012206:	2201      	movs	r2, #1
 8012208:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801220a:	4b1c      	ldr	r3, [pc, #112]	@ (801227c <xTaskResumeAll+0x120>)
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d1cb      	bne.n	80121aa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	2b00      	cmp	r3, #0
 8012216:	d001      	beq.n	801221c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012218:	f000 fb66 	bl	80128e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801221c:	4b1c      	ldr	r3, [pc, #112]	@ (8012290 <xTaskResumeAll+0x134>)
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	2b00      	cmp	r3, #0
 8012226:	d010      	beq.n	801224a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012228:	f000 f846 	bl	80122b8 <xTaskIncrementTick>
 801222c:	4603      	mov	r3, r0
 801222e:	2b00      	cmp	r3, #0
 8012230:	d002      	beq.n	8012238 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8012232:	4b16      	ldr	r3, [pc, #88]	@ (801228c <xTaskResumeAll+0x130>)
 8012234:	2201      	movs	r2, #1
 8012236:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	3b01      	subs	r3, #1
 801223c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d1f1      	bne.n	8012228 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8012244:	4b12      	ldr	r3, [pc, #72]	@ (8012290 <xTaskResumeAll+0x134>)
 8012246:	2200      	movs	r2, #0
 8012248:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801224a:	4b10      	ldr	r3, [pc, #64]	@ (801228c <xTaskResumeAll+0x130>)
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	2b00      	cmp	r3, #0
 8012250:	d009      	beq.n	8012266 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012252:	2301      	movs	r3, #1
 8012254:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012256:	4b0f      	ldr	r3, [pc, #60]	@ (8012294 <xTaskResumeAll+0x138>)
 8012258:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801225c:	601a      	str	r2, [r3, #0]
 801225e:	f3bf 8f4f 	dsb	sy
 8012262:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012266:	f001 fa01 	bl	801366c <vPortExitCritical>

	return xAlreadyYielded;
 801226a:	68bb      	ldr	r3, [r7, #8]
}
 801226c:	4618      	mov	r0, r3
 801226e:	3710      	adds	r7, #16
 8012270:	46bd      	mov	sp, r7
 8012272:	bd80      	pop	{r7, pc}
 8012274:	24002074 	.word	0x24002074
 8012278:	2400204c 	.word	0x2400204c
 801227c:	2400200c 	.word	0x2400200c
 8012280:	24002054 	.word	0x24002054
 8012284:	24001b7c 	.word	0x24001b7c
 8012288:	24001b78 	.word	0x24001b78
 801228c:	24002060 	.word	0x24002060
 8012290:	2400205c 	.word	0x2400205c
 8012294:	e000ed04 	.word	0xe000ed04

08012298 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012298:	b480      	push	{r7}
 801229a:	b083      	sub	sp, #12
 801229c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801229e:	4b05      	ldr	r3, [pc, #20]	@ (80122b4 <xTaskGetTickCount+0x1c>)
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80122a4:	687b      	ldr	r3, [r7, #4]
}
 80122a6:	4618      	mov	r0, r3
 80122a8:	370c      	adds	r7, #12
 80122aa:	46bd      	mov	sp, r7
 80122ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b0:	4770      	bx	lr
 80122b2:	bf00      	nop
 80122b4:	24002050 	.word	0x24002050

080122b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80122b8:	b580      	push	{r7, lr}
 80122ba:	b086      	sub	sp, #24
 80122bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80122be:	2300      	movs	r3, #0
 80122c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80122c2:	4b4f      	ldr	r3, [pc, #316]	@ (8012400 <xTaskIncrementTick+0x148>)
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	f040 8090 	bne.w	80123ec <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80122cc:	4b4d      	ldr	r3, [pc, #308]	@ (8012404 <xTaskIncrementTick+0x14c>)
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	3301      	adds	r3, #1
 80122d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80122d4:	4a4b      	ldr	r2, [pc, #300]	@ (8012404 <xTaskIncrementTick+0x14c>)
 80122d6:	693b      	ldr	r3, [r7, #16]
 80122d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80122da:	693b      	ldr	r3, [r7, #16]
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d121      	bne.n	8012324 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80122e0:	4b49      	ldr	r3, [pc, #292]	@ (8012408 <xTaskIncrementTick+0x150>)
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d00b      	beq.n	8012302 <xTaskIncrementTick+0x4a>
	__asm volatile
 80122ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122ee:	f383 8811 	msr	BASEPRI, r3
 80122f2:	f3bf 8f6f 	isb	sy
 80122f6:	f3bf 8f4f 	dsb	sy
 80122fa:	603b      	str	r3, [r7, #0]
}
 80122fc:	bf00      	nop
 80122fe:	bf00      	nop
 8012300:	e7fd      	b.n	80122fe <xTaskIncrementTick+0x46>
 8012302:	4b41      	ldr	r3, [pc, #260]	@ (8012408 <xTaskIncrementTick+0x150>)
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	60fb      	str	r3, [r7, #12]
 8012308:	4b40      	ldr	r3, [pc, #256]	@ (801240c <xTaskIncrementTick+0x154>)
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	4a3e      	ldr	r2, [pc, #248]	@ (8012408 <xTaskIncrementTick+0x150>)
 801230e:	6013      	str	r3, [r2, #0]
 8012310:	4a3e      	ldr	r2, [pc, #248]	@ (801240c <xTaskIncrementTick+0x154>)
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	6013      	str	r3, [r2, #0]
 8012316:	4b3e      	ldr	r3, [pc, #248]	@ (8012410 <xTaskIncrementTick+0x158>)
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	3301      	adds	r3, #1
 801231c:	4a3c      	ldr	r2, [pc, #240]	@ (8012410 <xTaskIncrementTick+0x158>)
 801231e:	6013      	str	r3, [r2, #0]
 8012320:	f000 fae2 	bl	80128e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012324:	4b3b      	ldr	r3, [pc, #236]	@ (8012414 <xTaskIncrementTick+0x15c>)
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	693a      	ldr	r2, [r7, #16]
 801232a:	429a      	cmp	r2, r3
 801232c:	d349      	bcc.n	80123c2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801232e:	4b36      	ldr	r3, [pc, #216]	@ (8012408 <xTaskIncrementTick+0x150>)
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	2b00      	cmp	r3, #0
 8012336:	d104      	bne.n	8012342 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012338:	4b36      	ldr	r3, [pc, #216]	@ (8012414 <xTaskIncrementTick+0x15c>)
 801233a:	f04f 32ff 	mov.w	r2, #4294967295
 801233e:	601a      	str	r2, [r3, #0]
					break;
 8012340:	e03f      	b.n	80123c2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012342:	4b31      	ldr	r3, [pc, #196]	@ (8012408 <xTaskIncrementTick+0x150>)
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	68db      	ldr	r3, [r3, #12]
 8012348:	68db      	ldr	r3, [r3, #12]
 801234a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801234c:	68bb      	ldr	r3, [r7, #8]
 801234e:	685b      	ldr	r3, [r3, #4]
 8012350:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012352:	693a      	ldr	r2, [r7, #16]
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	429a      	cmp	r2, r3
 8012358:	d203      	bcs.n	8012362 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801235a:	4a2e      	ldr	r2, [pc, #184]	@ (8012414 <xTaskIncrementTick+0x15c>)
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012360:	e02f      	b.n	80123c2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012362:	68bb      	ldr	r3, [r7, #8]
 8012364:	3304      	adds	r3, #4
 8012366:	4618      	mov	r0, r3
 8012368:	f7fe fc30 	bl	8010bcc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801236c:	68bb      	ldr	r3, [r7, #8]
 801236e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012370:	2b00      	cmp	r3, #0
 8012372:	d004      	beq.n	801237e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012374:	68bb      	ldr	r3, [r7, #8]
 8012376:	3318      	adds	r3, #24
 8012378:	4618      	mov	r0, r3
 801237a:	f7fe fc27 	bl	8010bcc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801237e:	68bb      	ldr	r3, [r7, #8]
 8012380:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012382:	4b25      	ldr	r3, [pc, #148]	@ (8012418 <xTaskIncrementTick+0x160>)
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	429a      	cmp	r2, r3
 8012388:	d903      	bls.n	8012392 <xTaskIncrementTick+0xda>
 801238a:	68bb      	ldr	r3, [r7, #8]
 801238c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801238e:	4a22      	ldr	r2, [pc, #136]	@ (8012418 <xTaskIncrementTick+0x160>)
 8012390:	6013      	str	r3, [r2, #0]
 8012392:	68bb      	ldr	r3, [r7, #8]
 8012394:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012396:	4613      	mov	r3, r2
 8012398:	009b      	lsls	r3, r3, #2
 801239a:	4413      	add	r3, r2
 801239c:	009b      	lsls	r3, r3, #2
 801239e:	4a1f      	ldr	r2, [pc, #124]	@ (801241c <xTaskIncrementTick+0x164>)
 80123a0:	441a      	add	r2, r3
 80123a2:	68bb      	ldr	r3, [r7, #8]
 80123a4:	3304      	adds	r3, #4
 80123a6:	4619      	mov	r1, r3
 80123a8:	4610      	mov	r0, r2
 80123aa:	f7fe fbb2 	bl	8010b12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80123ae:	68bb      	ldr	r3, [r7, #8]
 80123b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80123b2:	4b1b      	ldr	r3, [pc, #108]	@ (8012420 <xTaskIncrementTick+0x168>)
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80123b8:	429a      	cmp	r2, r3
 80123ba:	d3b8      	bcc.n	801232e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80123bc:	2301      	movs	r3, #1
 80123be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80123c0:	e7b5      	b.n	801232e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80123c2:	4b17      	ldr	r3, [pc, #92]	@ (8012420 <xTaskIncrementTick+0x168>)
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80123c8:	4914      	ldr	r1, [pc, #80]	@ (801241c <xTaskIncrementTick+0x164>)
 80123ca:	4613      	mov	r3, r2
 80123cc:	009b      	lsls	r3, r3, #2
 80123ce:	4413      	add	r3, r2
 80123d0:	009b      	lsls	r3, r3, #2
 80123d2:	440b      	add	r3, r1
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	2b01      	cmp	r3, #1
 80123d8:	d901      	bls.n	80123de <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80123da:	2301      	movs	r3, #1
 80123dc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80123de:	4b11      	ldr	r3, [pc, #68]	@ (8012424 <xTaskIncrementTick+0x16c>)
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d007      	beq.n	80123f6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80123e6:	2301      	movs	r3, #1
 80123e8:	617b      	str	r3, [r7, #20]
 80123ea:	e004      	b.n	80123f6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80123ec:	4b0e      	ldr	r3, [pc, #56]	@ (8012428 <xTaskIncrementTick+0x170>)
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	3301      	adds	r3, #1
 80123f2:	4a0d      	ldr	r2, [pc, #52]	@ (8012428 <xTaskIncrementTick+0x170>)
 80123f4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80123f6:	697b      	ldr	r3, [r7, #20]
}
 80123f8:	4618      	mov	r0, r3
 80123fa:	3718      	adds	r7, #24
 80123fc:	46bd      	mov	sp, r7
 80123fe:	bd80      	pop	{r7, pc}
 8012400:	24002074 	.word	0x24002074
 8012404:	24002050 	.word	0x24002050
 8012408:	24002004 	.word	0x24002004
 801240c:	24002008 	.word	0x24002008
 8012410:	24002064 	.word	0x24002064
 8012414:	2400206c 	.word	0x2400206c
 8012418:	24002054 	.word	0x24002054
 801241c:	24001b7c 	.word	0x24001b7c
 8012420:	24001b78 	.word	0x24001b78
 8012424:	24002060 	.word	0x24002060
 8012428:	2400205c 	.word	0x2400205c

0801242c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801242c:	b480      	push	{r7}
 801242e:	b085      	sub	sp, #20
 8012430:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012432:	4b2b      	ldr	r3, [pc, #172]	@ (80124e0 <vTaskSwitchContext+0xb4>)
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d003      	beq.n	8012442 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801243a:	4b2a      	ldr	r3, [pc, #168]	@ (80124e4 <vTaskSwitchContext+0xb8>)
 801243c:	2201      	movs	r2, #1
 801243e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012440:	e047      	b.n	80124d2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8012442:	4b28      	ldr	r3, [pc, #160]	@ (80124e4 <vTaskSwitchContext+0xb8>)
 8012444:	2200      	movs	r2, #0
 8012446:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012448:	4b27      	ldr	r3, [pc, #156]	@ (80124e8 <vTaskSwitchContext+0xbc>)
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	60fb      	str	r3, [r7, #12]
 801244e:	e011      	b.n	8012474 <vTaskSwitchContext+0x48>
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	2b00      	cmp	r3, #0
 8012454:	d10b      	bne.n	801246e <vTaskSwitchContext+0x42>
	__asm volatile
 8012456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801245a:	f383 8811 	msr	BASEPRI, r3
 801245e:	f3bf 8f6f 	isb	sy
 8012462:	f3bf 8f4f 	dsb	sy
 8012466:	607b      	str	r3, [r7, #4]
}
 8012468:	bf00      	nop
 801246a:	bf00      	nop
 801246c:	e7fd      	b.n	801246a <vTaskSwitchContext+0x3e>
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	3b01      	subs	r3, #1
 8012472:	60fb      	str	r3, [r7, #12]
 8012474:	491d      	ldr	r1, [pc, #116]	@ (80124ec <vTaskSwitchContext+0xc0>)
 8012476:	68fa      	ldr	r2, [r7, #12]
 8012478:	4613      	mov	r3, r2
 801247a:	009b      	lsls	r3, r3, #2
 801247c:	4413      	add	r3, r2
 801247e:	009b      	lsls	r3, r3, #2
 8012480:	440b      	add	r3, r1
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d0e3      	beq.n	8012450 <vTaskSwitchContext+0x24>
 8012488:	68fa      	ldr	r2, [r7, #12]
 801248a:	4613      	mov	r3, r2
 801248c:	009b      	lsls	r3, r3, #2
 801248e:	4413      	add	r3, r2
 8012490:	009b      	lsls	r3, r3, #2
 8012492:	4a16      	ldr	r2, [pc, #88]	@ (80124ec <vTaskSwitchContext+0xc0>)
 8012494:	4413      	add	r3, r2
 8012496:	60bb      	str	r3, [r7, #8]
 8012498:	68bb      	ldr	r3, [r7, #8]
 801249a:	685b      	ldr	r3, [r3, #4]
 801249c:	685a      	ldr	r2, [r3, #4]
 801249e:	68bb      	ldr	r3, [r7, #8]
 80124a0:	605a      	str	r2, [r3, #4]
 80124a2:	68bb      	ldr	r3, [r7, #8]
 80124a4:	685a      	ldr	r2, [r3, #4]
 80124a6:	68bb      	ldr	r3, [r7, #8]
 80124a8:	3308      	adds	r3, #8
 80124aa:	429a      	cmp	r2, r3
 80124ac:	d104      	bne.n	80124b8 <vTaskSwitchContext+0x8c>
 80124ae:	68bb      	ldr	r3, [r7, #8]
 80124b0:	685b      	ldr	r3, [r3, #4]
 80124b2:	685a      	ldr	r2, [r3, #4]
 80124b4:	68bb      	ldr	r3, [r7, #8]
 80124b6:	605a      	str	r2, [r3, #4]
 80124b8:	68bb      	ldr	r3, [r7, #8]
 80124ba:	685b      	ldr	r3, [r3, #4]
 80124bc:	68db      	ldr	r3, [r3, #12]
 80124be:	4a0c      	ldr	r2, [pc, #48]	@ (80124f0 <vTaskSwitchContext+0xc4>)
 80124c0:	6013      	str	r3, [r2, #0]
 80124c2:	4a09      	ldr	r2, [pc, #36]	@ (80124e8 <vTaskSwitchContext+0xbc>)
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80124c8:	4b09      	ldr	r3, [pc, #36]	@ (80124f0 <vTaskSwitchContext+0xc4>)
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	3354      	adds	r3, #84	@ 0x54
 80124ce:	4a09      	ldr	r2, [pc, #36]	@ (80124f4 <vTaskSwitchContext+0xc8>)
 80124d0:	6013      	str	r3, [r2, #0]
}
 80124d2:	bf00      	nop
 80124d4:	3714      	adds	r7, #20
 80124d6:	46bd      	mov	sp, r7
 80124d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124dc:	4770      	bx	lr
 80124de:	bf00      	nop
 80124e0:	24002074 	.word	0x24002074
 80124e4:	24002060 	.word	0x24002060
 80124e8:	24002054 	.word	0x24002054
 80124ec:	24001b7c 	.word	0x24001b7c
 80124f0:	24001b78 	.word	0x24001b78
 80124f4:	240000bc 	.word	0x240000bc

080124f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80124f8:	b580      	push	{r7, lr}
 80124fa:	b084      	sub	sp, #16
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	6078      	str	r0, [r7, #4]
 8012500:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	2b00      	cmp	r3, #0
 8012506:	d10b      	bne.n	8012520 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8012508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801250c:	f383 8811 	msr	BASEPRI, r3
 8012510:	f3bf 8f6f 	isb	sy
 8012514:	f3bf 8f4f 	dsb	sy
 8012518:	60fb      	str	r3, [r7, #12]
}
 801251a:	bf00      	nop
 801251c:	bf00      	nop
 801251e:	e7fd      	b.n	801251c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012520:	4b07      	ldr	r3, [pc, #28]	@ (8012540 <vTaskPlaceOnEventList+0x48>)
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	3318      	adds	r3, #24
 8012526:	4619      	mov	r1, r3
 8012528:	6878      	ldr	r0, [r7, #4]
 801252a:	f7fe fb16 	bl	8010b5a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801252e:	2101      	movs	r1, #1
 8012530:	6838      	ldr	r0, [r7, #0]
 8012532:	f000 fb87 	bl	8012c44 <prvAddCurrentTaskToDelayedList>
}
 8012536:	bf00      	nop
 8012538:	3710      	adds	r7, #16
 801253a:	46bd      	mov	sp, r7
 801253c:	bd80      	pop	{r7, pc}
 801253e:	bf00      	nop
 8012540:	24001b78 	.word	0x24001b78

08012544 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012544:	b580      	push	{r7, lr}
 8012546:	b086      	sub	sp, #24
 8012548:	af00      	add	r7, sp, #0
 801254a:	60f8      	str	r0, [r7, #12]
 801254c:	60b9      	str	r1, [r7, #8]
 801254e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d10b      	bne.n	801256e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8012556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801255a:	f383 8811 	msr	BASEPRI, r3
 801255e:	f3bf 8f6f 	isb	sy
 8012562:	f3bf 8f4f 	dsb	sy
 8012566:	617b      	str	r3, [r7, #20]
}
 8012568:	bf00      	nop
 801256a:	bf00      	nop
 801256c:	e7fd      	b.n	801256a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801256e:	4b0a      	ldr	r3, [pc, #40]	@ (8012598 <vTaskPlaceOnEventListRestricted+0x54>)
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	3318      	adds	r3, #24
 8012574:	4619      	mov	r1, r3
 8012576:	68f8      	ldr	r0, [r7, #12]
 8012578:	f7fe facb 	bl	8010b12 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	2b00      	cmp	r3, #0
 8012580:	d002      	beq.n	8012588 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8012582:	f04f 33ff 	mov.w	r3, #4294967295
 8012586:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012588:	6879      	ldr	r1, [r7, #4]
 801258a:	68b8      	ldr	r0, [r7, #8]
 801258c:	f000 fb5a 	bl	8012c44 <prvAddCurrentTaskToDelayedList>
	}
 8012590:	bf00      	nop
 8012592:	3718      	adds	r7, #24
 8012594:	46bd      	mov	sp, r7
 8012596:	bd80      	pop	{r7, pc}
 8012598:	24001b78 	.word	0x24001b78

0801259c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801259c:	b580      	push	{r7, lr}
 801259e:	b086      	sub	sp, #24
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	68db      	ldr	r3, [r3, #12]
 80125a8:	68db      	ldr	r3, [r3, #12]
 80125aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80125ac:	693b      	ldr	r3, [r7, #16]
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d10b      	bne.n	80125ca <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80125b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125b6:	f383 8811 	msr	BASEPRI, r3
 80125ba:	f3bf 8f6f 	isb	sy
 80125be:	f3bf 8f4f 	dsb	sy
 80125c2:	60fb      	str	r3, [r7, #12]
}
 80125c4:	bf00      	nop
 80125c6:	bf00      	nop
 80125c8:	e7fd      	b.n	80125c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80125ca:	693b      	ldr	r3, [r7, #16]
 80125cc:	3318      	adds	r3, #24
 80125ce:	4618      	mov	r0, r3
 80125d0:	f7fe fafc 	bl	8010bcc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80125d4:	4b1d      	ldr	r3, [pc, #116]	@ (801264c <xTaskRemoveFromEventList+0xb0>)
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d11d      	bne.n	8012618 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80125dc:	693b      	ldr	r3, [r7, #16]
 80125de:	3304      	adds	r3, #4
 80125e0:	4618      	mov	r0, r3
 80125e2:	f7fe faf3 	bl	8010bcc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80125e6:	693b      	ldr	r3, [r7, #16]
 80125e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80125ea:	4b19      	ldr	r3, [pc, #100]	@ (8012650 <xTaskRemoveFromEventList+0xb4>)
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	429a      	cmp	r2, r3
 80125f0:	d903      	bls.n	80125fa <xTaskRemoveFromEventList+0x5e>
 80125f2:	693b      	ldr	r3, [r7, #16]
 80125f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80125f6:	4a16      	ldr	r2, [pc, #88]	@ (8012650 <xTaskRemoveFromEventList+0xb4>)
 80125f8:	6013      	str	r3, [r2, #0]
 80125fa:	693b      	ldr	r3, [r7, #16]
 80125fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80125fe:	4613      	mov	r3, r2
 8012600:	009b      	lsls	r3, r3, #2
 8012602:	4413      	add	r3, r2
 8012604:	009b      	lsls	r3, r3, #2
 8012606:	4a13      	ldr	r2, [pc, #76]	@ (8012654 <xTaskRemoveFromEventList+0xb8>)
 8012608:	441a      	add	r2, r3
 801260a:	693b      	ldr	r3, [r7, #16]
 801260c:	3304      	adds	r3, #4
 801260e:	4619      	mov	r1, r3
 8012610:	4610      	mov	r0, r2
 8012612:	f7fe fa7e 	bl	8010b12 <vListInsertEnd>
 8012616:	e005      	b.n	8012624 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012618:	693b      	ldr	r3, [r7, #16]
 801261a:	3318      	adds	r3, #24
 801261c:	4619      	mov	r1, r3
 801261e:	480e      	ldr	r0, [pc, #56]	@ (8012658 <xTaskRemoveFromEventList+0xbc>)
 8012620:	f7fe fa77 	bl	8010b12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012624:	693b      	ldr	r3, [r7, #16]
 8012626:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012628:	4b0c      	ldr	r3, [pc, #48]	@ (801265c <xTaskRemoveFromEventList+0xc0>)
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801262e:	429a      	cmp	r2, r3
 8012630:	d905      	bls.n	801263e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012632:	2301      	movs	r3, #1
 8012634:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012636:	4b0a      	ldr	r3, [pc, #40]	@ (8012660 <xTaskRemoveFromEventList+0xc4>)
 8012638:	2201      	movs	r2, #1
 801263a:	601a      	str	r2, [r3, #0]
 801263c:	e001      	b.n	8012642 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 801263e:	2300      	movs	r3, #0
 8012640:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012642:	697b      	ldr	r3, [r7, #20]
}
 8012644:	4618      	mov	r0, r3
 8012646:	3718      	adds	r7, #24
 8012648:	46bd      	mov	sp, r7
 801264a:	bd80      	pop	{r7, pc}
 801264c:	24002074 	.word	0x24002074
 8012650:	24002054 	.word	0x24002054
 8012654:	24001b7c 	.word	0x24001b7c
 8012658:	2400200c 	.word	0x2400200c
 801265c:	24001b78 	.word	0x24001b78
 8012660:	24002060 	.word	0x24002060

08012664 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012664:	b480      	push	{r7}
 8012666:	b083      	sub	sp, #12
 8012668:	af00      	add	r7, sp, #0
 801266a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801266c:	4b06      	ldr	r3, [pc, #24]	@ (8012688 <vTaskInternalSetTimeOutState+0x24>)
 801266e:	681a      	ldr	r2, [r3, #0]
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012674:	4b05      	ldr	r3, [pc, #20]	@ (801268c <vTaskInternalSetTimeOutState+0x28>)
 8012676:	681a      	ldr	r2, [r3, #0]
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	605a      	str	r2, [r3, #4]
}
 801267c:	bf00      	nop
 801267e:	370c      	adds	r7, #12
 8012680:	46bd      	mov	sp, r7
 8012682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012686:	4770      	bx	lr
 8012688:	24002064 	.word	0x24002064
 801268c:	24002050 	.word	0x24002050

08012690 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012690:	b580      	push	{r7, lr}
 8012692:	b088      	sub	sp, #32
 8012694:	af00      	add	r7, sp, #0
 8012696:	6078      	str	r0, [r7, #4]
 8012698:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	2b00      	cmp	r3, #0
 801269e:	d10b      	bne.n	80126b8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80126a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126a4:	f383 8811 	msr	BASEPRI, r3
 80126a8:	f3bf 8f6f 	isb	sy
 80126ac:	f3bf 8f4f 	dsb	sy
 80126b0:	613b      	str	r3, [r7, #16]
}
 80126b2:	bf00      	nop
 80126b4:	bf00      	nop
 80126b6:	e7fd      	b.n	80126b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80126b8:	683b      	ldr	r3, [r7, #0]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d10b      	bne.n	80126d6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80126be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126c2:	f383 8811 	msr	BASEPRI, r3
 80126c6:	f3bf 8f6f 	isb	sy
 80126ca:	f3bf 8f4f 	dsb	sy
 80126ce:	60fb      	str	r3, [r7, #12]
}
 80126d0:	bf00      	nop
 80126d2:	bf00      	nop
 80126d4:	e7fd      	b.n	80126d2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80126d6:	f000 ff97 	bl	8013608 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80126da:	4b1d      	ldr	r3, [pc, #116]	@ (8012750 <xTaskCheckForTimeOut+0xc0>)
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	685b      	ldr	r3, [r3, #4]
 80126e4:	69ba      	ldr	r2, [r7, #24]
 80126e6:	1ad3      	subs	r3, r2, r3
 80126e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80126ea:	683b      	ldr	r3, [r7, #0]
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126f2:	d102      	bne.n	80126fa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80126f4:	2300      	movs	r3, #0
 80126f6:	61fb      	str	r3, [r7, #28]
 80126f8:	e023      	b.n	8012742 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	681a      	ldr	r2, [r3, #0]
 80126fe:	4b15      	ldr	r3, [pc, #84]	@ (8012754 <xTaskCheckForTimeOut+0xc4>)
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	429a      	cmp	r2, r3
 8012704:	d007      	beq.n	8012716 <xTaskCheckForTimeOut+0x86>
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	685b      	ldr	r3, [r3, #4]
 801270a:	69ba      	ldr	r2, [r7, #24]
 801270c:	429a      	cmp	r2, r3
 801270e:	d302      	bcc.n	8012716 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012710:	2301      	movs	r3, #1
 8012712:	61fb      	str	r3, [r7, #28]
 8012714:	e015      	b.n	8012742 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012716:	683b      	ldr	r3, [r7, #0]
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	697a      	ldr	r2, [r7, #20]
 801271c:	429a      	cmp	r2, r3
 801271e:	d20b      	bcs.n	8012738 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012720:	683b      	ldr	r3, [r7, #0]
 8012722:	681a      	ldr	r2, [r3, #0]
 8012724:	697b      	ldr	r3, [r7, #20]
 8012726:	1ad2      	subs	r2, r2, r3
 8012728:	683b      	ldr	r3, [r7, #0]
 801272a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801272c:	6878      	ldr	r0, [r7, #4]
 801272e:	f7ff ff99 	bl	8012664 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012732:	2300      	movs	r3, #0
 8012734:	61fb      	str	r3, [r7, #28]
 8012736:	e004      	b.n	8012742 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8012738:	683b      	ldr	r3, [r7, #0]
 801273a:	2200      	movs	r2, #0
 801273c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801273e:	2301      	movs	r3, #1
 8012740:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012742:	f000 ff93 	bl	801366c <vPortExitCritical>

	return xReturn;
 8012746:	69fb      	ldr	r3, [r7, #28]
}
 8012748:	4618      	mov	r0, r3
 801274a:	3720      	adds	r7, #32
 801274c:	46bd      	mov	sp, r7
 801274e:	bd80      	pop	{r7, pc}
 8012750:	24002050 	.word	0x24002050
 8012754:	24002064 	.word	0x24002064

08012758 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012758:	b480      	push	{r7}
 801275a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801275c:	4b03      	ldr	r3, [pc, #12]	@ (801276c <vTaskMissedYield+0x14>)
 801275e:	2201      	movs	r2, #1
 8012760:	601a      	str	r2, [r3, #0]
}
 8012762:	bf00      	nop
 8012764:	46bd      	mov	sp, r7
 8012766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801276a:	4770      	bx	lr
 801276c:	24002060 	.word	0x24002060

08012770 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012770:	b580      	push	{r7, lr}
 8012772:	b082      	sub	sp, #8
 8012774:	af00      	add	r7, sp, #0
 8012776:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012778:	f000 f852 	bl	8012820 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801277c:	4b06      	ldr	r3, [pc, #24]	@ (8012798 <prvIdleTask+0x28>)
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	2b01      	cmp	r3, #1
 8012782:	d9f9      	bls.n	8012778 <prvIdleTask+0x8>
			{
				taskYIELD();
 8012784:	4b05      	ldr	r3, [pc, #20]	@ (801279c <prvIdleTask+0x2c>)
 8012786:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801278a:	601a      	str	r2, [r3, #0]
 801278c:	f3bf 8f4f 	dsb	sy
 8012790:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012794:	e7f0      	b.n	8012778 <prvIdleTask+0x8>
 8012796:	bf00      	nop
 8012798:	24001b7c 	.word	0x24001b7c
 801279c:	e000ed04 	.word	0xe000ed04

080127a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80127a0:	b580      	push	{r7, lr}
 80127a2:	b082      	sub	sp, #8
 80127a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80127a6:	2300      	movs	r3, #0
 80127a8:	607b      	str	r3, [r7, #4]
 80127aa:	e00c      	b.n	80127c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80127ac:	687a      	ldr	r2, [r7, #4]
 80127ae:	4613      	mov	r3, r2
 80127b0:	009b      	lsls	r3, r3, #2
 80127b2:	4413      	add	r3, r2
 80127b4:	009b      	lsls	r3, r3, #2
 80127b6:	4a12      	ldr	r2, [pc, #72]	@ (8012800 <prvInitialiseTaskLists+0x60>)
 80127b8:	4413      	add	r3, r2
 80127ba:	4618      	mov	r0, r3
 80127bc:	f7fe f97c 	bl	8010ab8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	3301      	adds	r3, #1
 80127c4:	607b      	str	r3, [r7, #4]
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	2b37      	cmp	r3, #55	@ 0x37
 80127ca:	d9ef      	bls.n	80127ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80127cc:	480d      	ldr	r0, [pc, #52]	@ (8012804 <prvInitialiseTaskLists+0x64>)
 80127ce:	f7fe f973 	bl	8010ab8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80127d2:	480d      	ldr	r0, [pc, #52]	@ (8012808 <prvInitialiseTaskLists+0x68>)
 80127d4:	f7fe f970 	bl	8010ab8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80127d8:	480c      	ldr	r0, [pc, #48]	@ (801280c <prvInitialiseTaskLists+0x6c>)
 80127da:	f7fe f96d 	bl	8010ab8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80127de:	480c      	ldr	r0, [pc, #48]	@ (8012810 <prvInitialiseTaskLists+0x70>)
 80127e0:	f7fe f96a 	bl	8010ab8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80127e4:	480b      	ldr	r0, [pc, #44]	@ (8012814 <prvInitialiseTaskLists+0x74>)
 80127e6:	f7fe f967 	bl	8010ab8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80127ea:	4b0b      	ldr	r3, [pc, #44]	@ (8012818 <prvInitialiseTaskLists+0x78>)
 80127ec:	4a05      	ldr	r2, [pc, #20]	@ (8012804 <prvInitialiseTaskLists+0x64>)
 80127ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80127f0:	4b0a      	ldr	r3, [pc, #40]	@ (801281c <prvInitialiseTaskLists+0x7c>)
 80127f2:	4a05      	ldr	r2, [pc, #20]	@ (8012808 <prvInitialiseTaskLists+0x68>)
 80127f4:	601a      	str	r2, [r3, #0]
}
 80127f6:	bf00      	nop
 80127f8:	3708      	adds	r7, #8
 80127fa:	46bd      	mov	sp, r7
 80127fc:	bd80      	pop	{r7, pc}
 80127fe:	bf00      	nop
 8012800:	24001b7c 	.word	0x24001b7c
 8012804:	24001fdc 	.word	0x24001fdc
 8012808:	24001ff0 	.word	0x24001ff0
 801280c:	2400200c 	.word	0x2400200c
 8012810:	24002020 	.word	0x24002020
 8012814:	24002038 	.word	0x24002038
 8012818:	24002004 	.word	0x24002004
 801281c:	24002008 	.word	0x24002008

08012820 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012820:	b580      	push	{r7, lr}
 8012822:	b082      	sub	sp, #8
 8012824:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012826:	e019      	b.n	801285c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012828:	f000 feee 	bl	8013608 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801282c:	4b10      	ldr	r3, [pc, #64]	@ (8012870 <prvCheckTasksWaitingTermination+0x50>)
 801282e:	68db      	ldr	r3, [r3, #12]
 8012830:	68db      	ldr	r3, [r3, #12]
 8012832:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	3304      	adds	r3, #4
 8012838:	4618      	mov	r0, r3
 801283a:	f7fe f9c7 	bl	8010bcc <uxListRemove>
				--uxCurrentNumberOfTasks;
 801283e:	4b0d      	ldr	r3, [pc, #52]	@ (8012874 <prvCheckTasksWaitingTermination+0x54>)
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	3b01      	subs	r3, #1
 8012844:	4a0b      	ldr	r2, [pc, #44]	@ (8012874 <prvCheckTasksWaitingTermination+0x54>)
 8012846:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012848:	4b0b      	ldr	r3, [pc, #44]	@ (8012878 <prvCheckTasksWaitingTermination+0x58>)
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	3b01      	subs	r3, #1
 801284e:	4a0a      	ldr	r2, [pc, #40]	@ (8012878 <prvCheckTasksWaitingTermination+0x58>)
 8012850:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012852:	f000 ff0b 	bl	801366c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012856:	6878      	ldr	r0, [r7, #4]
 8012858:	f000 f810 	bl	801287c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801285c:	4b06      	ldr	r3, [pc, #24]	@ (8012878 <prvCheckTasksWaitingTermination+0x58>)
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	2b00      	cmp	r3, #0
 8012862:	d1e1      	bne.n	8012828 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012864:	bf00      	nop
 8012866:	bf00      	nop
 8012868:	3708      	adds	r7, #8
 801286a:	46bd      	mov	sp, r7
 801286c:	bd80      	pop	{r7, pc}
 801286e:	bf00      	nop
 8012870:	24002020 	.word	0x24002020
 8012874:	2400204c 	.word	0x2400204c
 8012878:	24002034 	.word	0x24002034

0801287c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801287c:	b580      	push	{r7, lr}
 801287e:	b084      	sub	sp, #16
 8012880:	af00      	add	r7, sp, #0
 8012882:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	3354      	adds	r3, #84	@ 0x54
 8012888:	4618      	mov	r0, r3
 801288a:	f019 ff41 	bl	802c710 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8012894:	2b00      	cmp	r3, #0
 8012896:	d108      	bne.n	80128aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801289c:	4618      	mov	r0, r3
 801289e:	f001 f8a3 	bl	80139e8 <vPortFree>
				vPortFree( pxTCB );
 80128a2:	6878      	ldr	r0, [r7, #4]
 80128a4:	f001 f8a0 	bl	80139e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80128a8:	e019      	b.n	80128de <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80128b0:	2b01      	cmp	r3, #1
 80128b2:	d103      	bne.n	80128bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80128b4:	6878      	ldr	r0, [r7, #4]
 80128b6:	f001 f897 	bl	80139e8 <vPortFree>
	}
 80128ba:	e010      	b.n	80128de <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80128c2:	2b02      	cmp	r3, #2
 80128c4:	d00b      	beq.n	80128de <prvDeleteTCB+0x62>
	__asm volatile
 80128c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128ca:	f383 8811 	msr	BASEPRI, r3
 80128ce:	f3bf 8f6f 	isb	sy
 80128d2:	f3bf 8f4f 	dsb	sy
 80128d6:	60fb      	str	r3, [r7, #12]
}
 80128d8:	bf00      	nop
 80128da:	bf00      	nop
 80128dc:	e7fd      	b.n	80128da <prvDeleteTCB+0x5e>
	}
 80128de:	bf00      	nop
 80128e0:	3710      	adds	r7, #16
 80128e2:	46bd      	mov	sp, r7
 80128e4:	bd80      	pop	{r7, pc}
	...

080128e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80128e8:	b480      	push	{r7}
 80128ea:	b083      	sub	sp, #12
 80128ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80128ee:	4b0c      	ldr	r3, [pc, #48]	@ (8012920 <prvResetNextTaskUnblockTime+0x38>)
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d104      	bne.n	8012902 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80128f8:	4b0a      	ldr	r3, [pc, #40]	@ (8012924 <prvResetNextTaskUnblockTime+0x3c>)
 80128fa:	f04f 32ff 	mov.w	r2, #4294967295
 80128fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012900:	e008      	b.n	8012914 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012902:	4b07      	ldr	r3, [pc, #28]	@ (8012920 <prvResetNextTaskUnblockTime+0x38>)
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	68db      	ldr	r3, [r3, #12]
 8012908:	68db      	ldr	r3, [r3, #12]
 801290a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	685b      	ldr	r3, [r3, #4]
 8012910:	4a04      	ldr	r2, [pc, #16]	@ (8012924 <prvResetNextTaskUnblockTime+0x3c>)
 8012912:	6013      	str	r3, [r2, #0]
}
 8012914:	bf00      	nop
 8012916:	370c      	adds	r7, #12
 8012918:	46bd      	mov	sp, r7
 801291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801291e:	4770      	bx	lr
 8012920:	24002004 	.word	0x24002004
 8012924:	2400206c 	.word	0x2400206c

08012928 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012928:	b480      	push	{r7}
 801292a:	b083      	sub	sp, #12
 801292c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801292e:	4b0b      	ldr	r3, [pc, #44]	@ (801295c <xTaskGetSchedulerState+0x34>)
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d102      	bne.n	801293c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012936:	2301      	movs	r3, #1
 8012938:	607b      	str	r3, [r7, #4]
 801293a:	e008      	b.n	801294e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801293c:	4b08      	ldr	r3, [pc, #32]	@ (8012960 <xTaskGetSchedulerState+0x38>)
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d102      	bne.n	801294a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012944:	2302      	movs	r3, #2
 8012946:	607b      	str	r3, [r7, #4]
 8012948:	e001      	b.n	801294e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801294a:	2300      	movs	r3, #0
 801294c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801294e:	687b      	ldr	r3, [r7, #4]
	}
 8012950:	4618      	mov	r0, r3
 8012952:	370c      	adds	r7, #12
 8012954:	46bd      	mov	sp, r7
 8012956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801295a:	4770      	bx	lr
 801295c:	24002058 	.word	0x24002058
 8012960:	24002074 	.word	0x24002074

08012964 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012964:	b580      	push	{r7, lr}
 8012966:	b084      	sub	sp, #16
 8012968:	af00      	add	r7, sp, #0
 801296a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012970:	2300      	movs	r3, #0
 8012972:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	2b00      	cmp	r3, #0
 8012978:	d051      	beq.n	8012a1e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801297a:	68bb      	ldr	r3, [r7, #8]
 801297c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801297e:	4b2a      	ldr	r3, [pc, #168]	@ (8012a28 <xTaskPriorityInherit+0xc4>)
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012984:	429a      	cmp	r2, r3
 8012986:	d241      	bcs.n	8012a0c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012988:	68bb      	ldr	r3, [r7, #8]
 801298a:	699b      	ldr	r3, [r3, #24]
 801298c:	2b00      	cmp	r3, #0
 801298e:	db06      	blt.n	801299e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012990:	4b25      	ldr	r3, [pc, #148]	@ (8012a28 <xTaskPriorityInherit+0xc4>)
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012996:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801299a:	68bb      	ldr	r3, [r7, #8]
 801299c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801299e:	68bb      	ldr	r3, [r7, #8]
 80129a0:	6959      	ldr	r1, [r3, #20]
 80129a2:	68bb      	ldr	r3, [r7, #8]
 80129a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80129a6:	4613      	mov	r3, r2
 80129a8:	009b      	lsls	r3, r3, #2
 80129aa:	4413      	add	r3, r2
 80129ac:	009b      	lsls	r3, r3, #2
 80129ae:	4a1f      	ldr	r2, [pc, #124]	@ (8012a2c <xTaskPriorityInherit+0xc8>)
 80129b0:	4413      	add	r3, r2
 80129b2:	4299      	cmp	r1, r3
 80129b4:	d122      	bne.n	80129fc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80129b6:	68bb      	ldr	r3, [r7, #8]
 80129b8:	3304      	adds	r3, #4
 80129ba:	4618      	mov	r0, r3
 80129bc:	f7fe f906 	bl	8010bcc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80129c0:	4b19      	ldr	r3, [pc, #100]	@ (8012a28 <xTaskPriorityInherit+0xc4>)
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80129c6:	68bb      	ldr	r3, [r7, #8]
 80129c8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80129ca:	68bb      	ldr	r3, [r7, #8]
 80129cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80129ce:	4b18      	ldr	r3, [pc, #96]	@ (8012a30 <xTaskPriorityInherit+0xcc>)
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	429a      	cmp	r2, r3
 80129d4:	d903      	bls.n	80129de <xTaskPriorityInherit+0x7a>
 80129d6:	68bb      	ldr	r3, [r7, #8]
 80129d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80129da:	4a15      	ldr	r2, [pc, #84]	@ (8012a30 <xTaskPriorityInherit+0xcc>)
 80129dc:	6013      	str	r3, [r2, #0]
 80129de:	68bb      	ldr	r3, [r7, #8]
 80129e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80129e2:	4613      	mov	r3, r2
 80129e4:	009b      	lsls	r3, r3, #2
 80129e6:	4413      	add	r3, r2
 80129e8:	009b      	lsls	r3, r3, #2
 80129ea:	4a10      	ldr	r2, [pc, #64]	@ (8012a2c <xTaskPriorityInherit+0xc8>)
 80129ec:	441a      	add	r2, r3
 80129ee:	68bb      	ldr	r3, [r7, #8]
 80129f0:	3304      	adds	r3, #4
 80129f2:	4619      	mov	r1, r3
 80129f4:	4610      	mov	r0, r2
 80129f6:	f7fe f88c 	bl	8010b12 <vListInsertEnd>
 80129fa:	e004      	b.n	8012a06 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80129fc:	4b0a      	ldr	r3, [pc, #40]	@ (8012a28 <xTaskPriorityInherit+0xc4>)
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012a02:	68bb      	ldr	r3, [r7, #8]
 8012a04:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8012a06:	2301      	movs	r3, #1
 8012a08:	60fb      	str	r3, [r7, #12]
 8012a0a:	e008      	b.n	8012a1e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012a0c:	68bb      	ldr	r3, [r7, #8]
 8012a0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012a10:	4b05      	ldr	r3, [pc, #20]	@ (8012a28 <xTaskPriorityInherit+0xc4>)
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a16:	429a      	cmp	r2, r3
 8012a18:	d201      	bcs.n	8012a1e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012a1a:	2301      	movs	r3, #1
 8012a1c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012a1e:	68fb      	ldr	r3, [r7, #12]
	}
 8012a20:	4618      	mov	r0, r3
 8012a22:	3710      	adds	r7, #16
 8012a24:	46bd      	mov	sp, r7
 8012a26:	bd80      	pop	{r7, pc}
 8012a28:	24001b78 	.word	0x24001b78
 8012a2c:	24001b7c 	.word	0x24001b7c
 8012a30:	24002054 	.word	0x24002054

08012a34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012a34:	b580      	push	{r7, lr}
 8012a36:	b086      	sub	sp, #24
 8012a38:	af00      	add	r7, sp, #0
 8012a3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012a40:	2300      	movs	r3, #0
 8012a42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d058      	beq.n	8012afc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012a4a:	4b2f      	ldr	r3, [pc, #188]	@ (8012b08 <xTaskPriorityDisinherit+0xd4>)
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	693a      	ldr	r2, [r7, #16]
 8012a50:	429a      	cmp	r2, r3
 8012a52:	d00b      	beq.n	8012a6c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8012a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a58:	f383 8811 	msr	BASEPRI, r3
 8012a5c:	f3bf 8f6f 	isb	sy
 8012a60:	f3bf 8f4f 	dsb	sy
 8012a64:	60fb      	str	r3, [r7, #12]
}
 8012a66:	bf00      	nop
 8012a68:	bf00      	nop
 8012a6a:	e7fd      	b.n	8012a68 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8012a6c:	693b      	ldr	r3, [r7, #16]
 8012a6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d10b      	bne.n	8012a8c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8012a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a78:	f383 8811 	msr	BASEPRI, r3
 8012a7c:	f3bf 8f6f 	isb	sy
 8012a80:	f3bf 8f4f 	dsb	sy
 8012a84:	60bb      	str	r3, [r7, #8]
}
 8012a86:	bf00      	nop
 8012a88:	bf00      	nop
 8012a8a:	e7fd      	b.n	8012a88 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8012a8c:	693b      	ldr	r3, [r7, #16]
 8012a8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012a90:	1e5a      	subs	r2, r3, #1
 8012a92:	693b      	ldr	r3, [r7, #16]
 8012a94:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012a96:	693b      	ldr	r3, [r7, #16]
 8012a98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012a9a:	693b      	ldr	r3, [r7, #16]
 8012a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012a9e:	429a      	cmp	r2, r3
 8012aa0:	d02c      	beq.n	8012afc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012aa2:	693b      	ldr	r3, [r7, #16]
 8012aa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d128      	bne.n	8012afc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012aaa:	693b      	ldr	r3, [r7, #16]
 8012aac:	3304      	adds	r3, #4
 8012aae:	4618      	mov	r0, r3
 8012ab0:	f7fe f88c 	bl	8010bcc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012ab4:	693b      	ldr	r3, [r7, #16]
 8012ab6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012ab8:	693b      	ldr	r3, [r7, #16]
 8012aba:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012abc:	693b      	ldr	r3, [r7, #16]
 8012abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012ac0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8012ac4:	693b      	ldr	r3, [r7, #16]
 8012ac6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012ac8:	693b      	ldr	r3, [r7, #16]
 8012aca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012acc:	4b0f      	ldr	r3, [pc, #60]	@ (8012b0c <xTaskPriorityDisinherit+0xd8>)
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	429a      	cmp	r2, r3
 8012ad2:	d903      	bls.n	8012adc <xTaskPriorityDisinherit+0xa8>
 8012ad4:	693b      	ldr	r3, [r7, #16]
 8012ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012ad8:	4a0c      	ldr	r2, [pc, #48]	@ (8012b0c <xTaskPriorityDisinherit+0xd8>)
 8012ada:	6013      	str	r3, [r2, #0]
 8012adc:	693b      	ldr	r3, [r7, #16]
 8012ade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012ae0:	4613      	mov	r3, r2
 8012ae2:	009b      	lsls	r3, r3, #2
 8012ae4:	4413      	add	r3, r2
 8012ae6:	009b      	lsls	r3, r3, #2
 8012ae8:	4a09      	ldr	r2, [pc, #36]	@ (8012b10 <xTaskPriorityDisinherit+0xdc>)
 8012aea:	441a      	add	r2, r3
 8012aec:	693b      	ldr	r3, [r7, #16]
 8012aee:	3304      	adds	r3, #4
 8012af0:	4619      	mov	r1, r3
 8012af2:	4610      	mov	r0, r2
 8012af4:	f7fe f80d 	bl	8010b12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012af8:	2301      	movs	r3, #1
 8012afa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012afc:	697b      	ldr	r3, [r7, #20]
	}
 8012afe:	4618      	mov	r0, r3
 8012b00:	3718      	adds	r7, #24
 8012b02:	46bd      	mov	sp, r7
 8012b04:	bd80      	pop	{r7, pc}
 8012b06:	bf00      	nop
 8012b08:	24001b78 	.word	0x24001b78
 8012b0c:	24002054 	.word	0x24002054
 8012b10:	24001b7c 	.word	0x24001b7c

08012b14 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8012b14:	b580      	push	{r7, lr}
 8012b16:	b088      	sub	sp, #32
 8012b18:	af00      	add	r7, sp, #0
 8012b1a:	6078      	str	r0, [r7, #4]
 8012b1c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8012b22:	2301      	movs	r3, #1
 8012b24:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d06c      	beq.n	8012c06 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012b2c:	69bb      	ldr	r3, [r7, #24]
 8012b2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d10b      	bne.n	8012b4c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8012b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b38:	f383 8811 	msr	BASEPRI, r3
 8012b3c:	f3bf 8f6f 	isb	sy
 8012b40:	f3bf 8f4f 	dsb	sy
 8012b44:	60fb      	str	r3, [r7, #12]
}
 8012b46:	bf00      	nop
 8012b48:	bf00      	nop
 8012b4a:	e7fd      	b.n	8012b48 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012b4c:	69bb      	ldr	r3, [r7, #24]
 8012b4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012b50:	683a      	ldr	r2, [r7, #0]
 8012b52:	429a      	cmp	r2, r3
 8012b54:	d902      	bls.n	8012b5c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012b56:	683b      	ldr	r3, [r7, #0]
 8012b58:	61fb      	str	r3, [r7, #28]
 8012b5a:	e002      	b.n	8012b62 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012b5c:	69bb      	ldr	r3, [r7, #24]
 8012b5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012b60:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012b62:	69bb      	ldr	r3, [r7, #24]
 8012b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b66:	69fa      	ldr	r2, [r7, #28]
 8012b68:	429a      	cmp	r2, r3
 8012b6a:	d04c      	beq.n	8012c06 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012b6c:	69bb      	ldr	r3, [r7, #24]
 8012b6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012b70:	697a      	ldr	r2, [r7, #20]
 8012b72:	429a      	cmp	r2, r3
 8012b74:	d147      	bne.n	8012c06 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012b76:	4b26      	ldr	r3, [pc, #152]	@ (8012c10 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	69ba      	ldr	r2, [r7, #24]
 8012b7c:	429a      	cmp	r2, r3
 8012b7e:	d10b      	bne.n	8012b98 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8012b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b84:	f383 8811 	msr	BASEPRI, r3
 8012b88:	f3bf 8f6f 	isb	sy
 8012b8c:	f3bf 8f4f 	dsb	sy
 8012b90:	60bb      	str	r3, [r7, #8]
}
 8012b92:	bf00      	nop
 8012b94:	bf00      	nop
 8012b96:	e7fd      	b.n	8012b94 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012b98:	69bb      	ldr	r3, [r7, #24]
 8012b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b9c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012b9e:	69bb      	ldr	r3, [r7, #24]
 8012ba0:	69fa      	ldr	r2, [r7, #28]
 8012ba2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012ba4:	69bb      	ldr	r3, [r7, #24]
 8012ba6:	699b      	ldr	r3, [r3, #24]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	db04      	blt.n	8012bb6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012bac:	69fb      	ldr	r3, [r7, #28]
 8012bae:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8012bb2:	69bb      	ldr	r3, [r7, #24]
 8012bb4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012bb6:	69bb      	ldr	r3, [r7, #24]
 8012bb8:	6959      	ldr	r1, [r3, #20]
 8012bba:	693a      	ldr	r2, [r7, #16]
 8012bbc:	4613      	mov	r3, r2
 8012bbe:	009b      	lsls	r3, r3, #2
 8012bc0:	4413      	add	r3, r2
 8012bc2:	009b      	lsls	r3, r3, #2
 8012bc4:	4a13      	ldr	r2, [pc, #76]	@ (8012c14 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8012bc6:	4413      	add	r3, r2
 8012bc8:	4299      	cmp	r1, r3
 8012bca:	d11c      	bne.n	8012c06 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012bcc:	69bb      	ldr	r3, [r7, #24]
 8012bce:	3304      	adds	r3, #4
 8012bd0:	4618      	mov	r0, r3
 8012bd2:	f7fd fffb 	bl	8010bcc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8012bd6:	69bb      	ldr	r3, [r7, #24]
 8012bd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012bda:	4b0f      	ldr	r3, [pc, #60]	@ (8012c18 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	429a      	cmp	r2, r3
 8012be0:	d903      	bls.n	8012bea <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8012be2:	69bb      	ldr	r3, [r7, #24]
 8012be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012be6:	4a0c      	ldr	r2, [pc, #48]	@ (8012c18 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8012be8:	6013      	str	r3, [r2, #0]
 8012bea:	69bb      	ldr	r3, [r7, #24]
 8012bec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012bee:	4613      	mov	r3, r2
 8012bf0:	009b      	lsls	r3, r3, #2
 8012bf2:	4413      	add	r3, r2
 8012bf4:	009b      	lsls	r3, r3, #2
 8012bf6:	4a07      	ldr	r2, [pc, #28]	@ (8012c14 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8012bf8:	441a      	add	r2, r3
 8012bfa:	69bb      	ldr	r3, [r7, #24]
 8012bfc:	3304      	adds	r3, #4
 8012bfe:	4619      	mov	r1, r3
 8012c00:	4610      	mov	r0, r2
 8012c02:	f7fd ff86 	bl	8010b12 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012c06:	bf00      	nop
 8012c08:	3720      	adds	r7, #32
 8012c0a:	46bd      	mov	sp, r7
 8012c0c:	bd80      	pop	{r7, pc}
 8012c0e:	bf00      	nop
 8012c10:	24001b78 	.word	0x24001b78
 8012c14:	24001b7c 	.word	0x24001b7c
 8012c18:	24002054 	.word	0x24002054

08012c1c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8012c1c:	b480      	push	{r7}
 8012c1e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012c20:	4b07      	ldr	r3, [pc, #28]	@ (8012c40 <pvTaskIncrementMutexHeldCount+0x24>)
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d004      	beq.n	8012c32 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012c28:	4b05      	ldr	r3, [pc, #20]	@ (8012c40 <pvTaskIncrementMutexHeldCount+0x24>)
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012c2e:	3201      	adds	r2, #1
 8012c30:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8012c32:	4b03      	ldr	r3, [pc, #12]	@ (8012c40 <pvTaskIncrementMutexHeldCount+0x24>)
 8012c34:	681b      	ldr	r3, [r3, #0]
	}
 8012c36:	4618      	mov	r0, r3
 8012c38:	46bd      	mov	sp, r7
 8012c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c3e:	4770      	bx	lr
 8012c40:	24001b78 	.word	0x24001b78

08012c44 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012c44:	b580      	push	{r7, lr}
 8012c46:	b084      	sub	sp, #16
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	6078      	str	r0, [r7, #4]
 8012c4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012c4e:	4b21      	ldr	r3, [pc, #132]	@ (8012cd4 <prvAddCurrentTaskToDelayedList+0x90>)
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012c54:	4b20      	ldr	r3, [pc, #128]	@ (8012cd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	3304      	adds	r3, #4
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	f7fd ffb6 	bl	8010bcc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c66:	d10a      	bne.n	8012c7e <prvAddCurrentTaskToDelayedList+0x3a>
 8012c68:	683b      	ldr	r3, [r7, #0]
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d007      	beq.n	8012c7e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8012cd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	3304      	adds	r3, #4
 8012c74:	4619      	mov	r1, r3
 8012c76:	4819      	ldr	r0, [pc, #100]	@ (8012cdc <prvAddCurrentTaskToDelayedList+0x98>)
 8012c78:	f7fd ff4b 	bl	8010b12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012c7c:	e026      	b.n	8012ccc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012c7e:	68fa      	ldr	r2, [r7, #12]
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	4413      	add	r3, r2
 8012c84:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012c86:	4b14      	ldr	r3, [pc, #80]	@ (8012cd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	68ba      	ldr	r2, [r7, #8]
 8012c8c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012c8e:	68ba      	ldr	r2, [r7, #8]
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	429a      	cmp	r2, r3
 8012c94:	d209      	bcs.n	8012caa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012c96:	4b12      	ldr	r3, [pc, #72]	@ (8012ce0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8012c98:	681a      	ldr	r2, [r3, #0]
 8012c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8012cd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	3304      	adds	r3, #4
 8012ca0:	4619      	mov	r1, r3
 8012ca2:	4610      	mov	r0, r2
 8012ca4:	f7fd ff59 	bl	8010b5a <vListInsert>
}
 8012ca8:	e010      	b.n	8012ccc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012caa:	4b0e      	ldr	r3, [pc, #56]	@ (8012ce4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8012cac:	681a      	ldr	r2, [r3, #0]
 8012cae:	4b0a      	ldr	r3, [pc, #40]	@ (8012cd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	3304      	adds	r3, #4
 8012cb4:	4619      	mov	r1, r3
 8012cb6:	4610      	mov	r0, r2
 8012cb8:	f7fd ff4f 	bl	8010b5a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8012ce8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	68ba      	ldr	r2, [r7, #8]
 8012cc2:	429a      	cmp	r2, r3
 8012cc4:	d202      	bcs.n	8012ccc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8012cc6:	4a08      	ldr	r2, [pc, #32]	@ (8012ce8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012cc8:	68bb      	ldr	r3, [r7, #8]
 8012cca:	6013      	str	r3, [r2, #0]
}
 8012ccc:	bf00      	nop
 8012cce:	3710      	adds	r7, #16
 8012cd0:	46bd      	mov	sp, r7
 8012cd2:	bd80      	pop	{r7, pc}
 8012cd4:	24002050 	.word	0x24002050
 8012cd8:	24001b78 	.word	0x24001b78
 8012cdc:	24002038 	.word	0x24002038
 8012ce0:	24002008 	.word	0x24002008
 8012ce4:	24002004 	.word	0x24002004
 8012ce8:	2400206c 	.word	0x2400206c

08012cec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012cec:	b580      	push	{r7, lr}
 8012cee:	b08a      	sub	sp, #40	@ 0x28
 8012cf0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8012cf2:	2300      	movs	r3, #0
 8012cf4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8012cf6:	f000 fb13 	bl	8013320 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8012cfa:	4b1d      	ldr	r3, [pc, #116]	@ (8012d70 <xTimerCreateTimerTask+0x84>)
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d021      	beq.n	8012d46 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012d02:	2300      	movs	r3, #0
 8012d04:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8012d06:	2300      	movs	r3, #0
 8012d08:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012d0a:	1d3a      	adds	r2, r7, #4
 8012d0c:	f107 0108 	add.w	r1, r7, #8
 8012d10:	f107 030c 	add.w	r3, r7, #12
 8012d14:	4618      	mov	r0, r3
 8012d16:	f7fd feb5 	bl	8010a84 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8012d1a:	6879      	ldr	r1, [r7, #4]
 8012d1c:	68bb      	ldr	r3, [r7, #8]
 8012d1e:	68fa      	ldr	r2, [r7, #12]
 8012d20:	9202      	str	r2, [sp, #8]
 8012d22:	9301      	str	r3, [sp, #4]
 8012d24:	2302      	movs	r3, #2
 8012d26:	9300      	str	r3, [sp, #0]
 8012d28:	2300      	movs	r3, #0
 8012d2a:	460a      	mov	r2, r1
 8012d2c:	4911      	ldr	r1, [pc, #68]	@ (8012d74 <xTimerCreateTimerTask+0x88>)
 8012d2e:	4812      	ldr	r0, [pc, #72]	@ (8012d78 <xTimerCreateTimerTask+0x8c>)
 8012d30:	f7fe ffa2 	bl	8011c78 <xTaskCreateStatic>
 8012d34:	4603      	mov	r3, r0
 8012d36:	4a11      	ldr	r2, [pc, #68]	@ (8012d7c <xTimerCreateTimerTask+0x90>)
 8012d38:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8012d3a:	4b10      	ldr	r3, [pc, #64]	@ (8012d7c <xTimerCreateTimerTask+0x90>)
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d001      	beq.n	8012d46 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8012d42:	2301      	movs	r3, #1
 8012d44:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8012d46:	697b      	ldr	r3, [r7, #20]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d10b      	bne.n	8012d64 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8012d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d50:	f383 8811 	msr	BASEPRI, r3
 8012d54:	f3bf 8f6f 	isb	sy
 8012d58:	f3bf 8f4f 	dsb	sy
 8012d5c:	613b      	str	r3, [r7, #16]
}
 8012d5e:	bf00      	nop
 8012d60:	bf00      	nop
 8012d62:	e7fd      	b.n	8012d60 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8012d64:	697b      	ldr	r3, [r7, #20]
}
 8012d66:	4618      	mov	r0, r3
 8012d68:	3718      	adds	r7, #24
 8012d6a:	46bd      	mov	sp, r7
 8012d6c:	bd80      	pop	{r7, pc}
 8012d6e:	bf00      	nop
 8012d70:	240020a8 	.word	0x240020a8
 8012d74:	0802d280 	.word	0x0802d280
 8012d78:	08012eb9 	.word	0x08012eb9
 8012d7c:	240020ac 	.word	0x240020ac

08012d80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012d80:	b580      	push	{r7, lr}
 8012d82:	b08a      	sub	sp, #40	@ 0x28
 8012d84:	af00      	add	r7, sp, #0
 8012d86:	60f8      	str	r0, [r7, #12]
 8012d88:	60b9      	str	r1, [r7, #8]
 8012d8a:	607a      	str	r2, [r7, #4]
 8012d8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8012d8e:	2300      	movs	r3, #0
 8012d90:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d10b      	bne.n	8012db0 <xTimerGenericCommand+0x30>
	__asm volatile
 8012d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d9c:	f383 8811 	msr	BASEPRI, r3
 8012da0:	f3bf 8f6f 	isb	sy
 8012da4:	f3bf 8f4f 	dsb	sy
 8012da8:	623b      	str	r3, [r7, #32]
}
 8012daa:	bf00      	nop
 8012dac:	bf00      	nop
 8012dae:	e7fd      	b.n	8012dac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8012db0:	4b19      	ldr	r3, [pc, #100]	@ (8012e18 <xTimerGenericCommand+0x98>)
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d02a      	beq.n	8012e0e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012db8:	68bb      	ldr	r3, [r7, #8]
 8012dba:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012dc4:	68bb      	ldr	r3, [r7, #8]
 8012dc6:	2b05      	cmp	r3, #5
 8012dc8:	dc18      	bgt.n	8012dfc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012dca:	f7ff fdad 	bl	8012928 <xTaskGetSchedulerState>
 8012dce:	4603      	mov	r3, r0
 8012dd0:	2b02      	cmp	r3, #2
 8012dd2:	d109      	bne.n	8012de8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012dd4:	4b10      	ldr	r3, [pc, #64]	@ (8012e18 <xTimerGenericCommand+0x98>)
 8012dd6:	6818      	ldr	r0, [r3, #0]
 8012dd8:	f107 0110 	add.w	r1, r7, #16
 8012ddc:	2300      	movs	r3, #0
 8012dde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012de0:	f7fe f8d2 	bl	8010f88 <xQueueGenericSend>
 8012de4:	6278      	str	r0, [r7, #36]	@ 0x24
 8012de6:	e012      	b.n	8012e0e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012de8:	4b0b      	ldr	r3, [pc, #44]	@ (8012e18 <xTimerGenericCommand+0x98>)
 8012dea:	6818      	ldr	r0, [r3, #0]
 8012dec:	f107 0110 	add.w	r1, r7, #16
 8012df0:	2300      	movs	r3, #0
 8012df2:	2200      	movs	r2, #0
 8012df4:	f7fe f8c8 	bl	8010f88 <xQueueGenericSend>
 8012df8:	6278      	str	r0, [r7, #36]	@ 0x24
 8012dfa:	e008      	b.n	8012e0e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012dfc:	4b06      	ldr	r3, [pc, #24]	@ (8012e18 <xTimerGenericCommand+0x98>)
 8012dfe:	6818      	ldr	r0, [r3, #0]
 8012e00:	f107 0110 	add.w	r1, r7, #16
 8012e04:	2300      	movs	r3, #0
 8012e06:	683a      	ldr	r2, [r7, #0]
 8012e08:	f7fe f9c0 	bl	801118c <xQueueGenericSendFromISR>
 8012e0c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8012e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8012e10:	4618      	mov	r0, r3
 8012e12:	3728      	adds	r7, #40	@ 0x28
 8012e14:	46bd      	mov	sp, r7
 8012e16:	bd80      	pop	{r7, pc}
 8012e18:	240020a8 	.word	0x240020a8

08012e1c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8012e1c:	b580      	push	{r7, lr}
 8012e1e:	b088      	sub	sp, #32
 8012e20:	af02      	add	r7, sp, #8
 8012e22:	6078      	str	r0, [r7, #4]
 8012e24:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012e26:	4b23      	ldr	r3, [pc, #140]	@ (8012eb4 <prvProcessExpiredTimer+0x98>)
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	68db      	ldr	r3, [r3, #12]
 8012e2c:	68db      	ldr	r3, [r3, #12]
 8012e2e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012e30:	697b      	ldr	r3, [r7, #20]
 8012e32:	3304      	adds	r3, #4
 8012e34:	4618      	mov	r0, r3
 8012e36:	f7fd fec9 	bl	8010bcc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012e3a:	697b      	ldr	r3, [r7, #20]
 8012e3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012e40:	f003 0304 	and.w	r3, r3, #4
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d023      	beq.n	8012e90 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012e48:	697b      	ldr	r3, [r7, #20]
 8012e4a:	699a      	ldr	r2, [r3, #24]
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	18d1      	adds	r1, r2, r3
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	683a      	ldr	r2, [r7, #0]
 8012e54:	6978      	ldr	r0, [r7, #20]
 8012e56:	f000 f8d5 	bl	8013004 <prvInsertTimerInActiveList>
 8012e5a:	4603      	mov	r3, r0
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d020      	beq.n	8012ea2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012e60:	2300      	movs	r3, #0
 8012e62:	9300      	str	r3, [sp, #0]
 8012e64:	2300      	movs	r3, #0
 8012e66:	687a      	ldr	r2, [r7, #4]
 8012e68:	2100      	movs	r1, #0
 8012e6a:	6978      	ldr	r0, [r7, #20]
 8012e6c:	f7ff ff88 	bl	8012d80 <xTimerGenericCommand>
 8012e70:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8012e72:	693b      	ldr	r3, [r7, #16]
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d114      	bne.n	8012ea2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8012e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e7c:	f383 8811 	msr	BASEPRI, r3
 8012e80:	f3bf 8f6f 	isb	sy
 8012e84:	f3bf 8f4f 	dsb	sy
 8012e88:	60fb      	str	r3, [r7, #12]
}
 8012e8a:	bf00      	nop
 8012e8c:	bf00      	nop
 8012e8e:	e7fd      	b.n	8012e8c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012e90:	697b      	ldr	r3, [r7, #20]
 8012e92:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012e96:	f023 0301 	bic.w	r3, r3, #1
 8012e9a:	b2da      	uxtb	r2, r3
 8012e9c:	697b      	ldr	r3, [r7, #20]
 8012e9e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012ea2:	697b      	ldr	r3, [r7, #20]
 8012ea4:	6a1b      	ldr	r3, [r3, #32]
 8012ea6:	6978      	ldr	r0, [r7, #20]
 8012ea8:	4798      	blx	r3
}
 8012eaa:	bf00      	nop
 8012eac:	3718      	adds	r7, #24
 8012eae:	46bd      	mov	sp, r7
 8012eb0:	bd80      	pop	{r7, pc}
 8012eb2:	bf00      	nop
 8012eb4:	240020a0 	.word	0x240020a0

08012eb8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012eb8:	b580      	push	{r7, lr}
 8012eba:	b084      	sub	sp, #16
 8012ebc:	af00      	add	r7, sp, #0
 8012ebe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012ec0:	f107 0308 	add.w	r3, r7, #8
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	f000 f859 	bl	8012f7c <prvGetNextExpireTime>
 8012eca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012ecc:	68bb      	ldr	r3, [r7, #8]
 8012ece:	4619      	mov	r1, r3
 8012ed0:	68f8      	ldr	r0, [r7, #12]
 8012ed2:	f000 f805 	bl	8012ee0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8012ed6:	f000 f8d7 	bl	8013088 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012eda:	bf00      	nop
 8012edc:	e7f0      	b.n	8012ec0 <prvTimerTask+0x8>
	...

08012ee0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012ee0:	b580      	push	{r7, lr}
 8012ee2:	b084      	sub	sp, #16
 8012ee4:	af00      	add	r7, sp, #0
 8012ee6:	6078      	str	r0, [r7, #4]
 8012ee8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8012eea:	f7ff f929 	bl	8012140 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012eee:	f107 0308 	add.w	r3, r7, #8
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	f000 f866 	bl	8012fc4 <prvSampleTimeNow>
 8012ef8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8012efa:	68bb      	ldr	r3, [r7, #8]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d130      	bne.n	8012f62 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012f00:	683b      	ldr	r3, [r7, #0]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d10a      	bne.n	8012f1c <prvProcessTimerOrBlockTask+0x3c>
 8012f06:	687a      	ldr	r2, [r7, #4]
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	429a      	cmp	r2, r3
 8012f0c:	d806      	bhi.n	8012f1c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8012f0e:	f7ff f925 	bl	801215c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012f12:	68f9      	ldr	r1, [r7, #12]
 8012f14:	6878      	ldr	r0, [r7, #4]
 8012f16:	f7ff ff81 	bl	8012e1c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8012f1a:	e024      	b.n	8012f66 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012f1c:	683b      	ldr	r3, [r7, #0]
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d008      	beq.n	8012f34 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012f22:	4b13      	ldr	r3, [pc, #76]	@ (8012f70 <prvProcessTimerOrBlockTask+0x90>)
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d101      	bne.n	8012f30 <prvProcessTimerOrBlockTask+0x50>
 8012f2c:	2301      	movs	r3, #1
 8012f2e:	e000      	b.n	8012f32 <prvProcessTimerOrBlockTask+0x52>
 8012f30:	2300      	movs	r3, #0
 8012f32:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012f34:	4b0f      	ldr	r3, [pc, #60]	@ (8012f74 <prvProcessTimerOrBlockTask+0x94>)
 8012f36:	6818      	ldr	r0, [r3, #0]
 8012f38:	687a      	ldr	r2, [r7, #4]
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	1ad3      	subs	r3, r2, r3
 8012f3e:	683a      	ldr	r2, [r7, #0]
 8012f40:	4619      	mov	r1, r3
 8012f42:	f7fe fe65 	bl	8011c10 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8012f46:	f7ff f909 	bl	801215c <xTaskResumeAll>
 8012f4a:	4603      	mov	r3, r0
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d10a      	bne.n	8012f66 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012f50:	4b09      	ldr	r3, [pc, #36]	@ (8012f78 <prvProcessTimerOrBlockTask+0x98>)
 8012f52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012f56:	601a      	str	r2, [r3, #0]
 8012f58:	f3bf 8f4f 	dsb	sy
 8012f5c:	f3bf 8f6f 	isb	sy
}
 8012f60:	e001      	b.n	8012f66 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8012f62:	f7ff f8fb 	bl	801215c <xTaskResumeAll>
}
 8012f66:	bf00      	nop
 8012f68:	3710      	adds	r7, #16
 8012f6a:	46bd      	mov	sp, r7
 8012f6c:	bd80      	pop	{r7, pc}
 8012f6e:	bf00      	nop
 8012f70:	240020a4 	.word	0x240020a4
 8012f74:	240020a8 	.word	0x240020a8
 8012f78:	e000ed04 	.word	0xe000ed04

08012f7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012f7c:	b480      	push	{r7}
 8012f7e:	b085      	sub	sp, #20
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012f84:	4b0e      	ldr	r3, [pc, #56]	@ (8012fc0 <prvGetNextExpireTime+0x44>)
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d101      	bne.n	8012f92 <prvGetNextExpireTime+0x16>
 8012f8e:	2201      	movs	r2, #1
 8012f90:	e000      	b.n	8012f94 <prvGetNextExpireTime+0x18>
 8012f92:	2200      	movs	r2, #0
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d105      	bne.n	8012fac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012fa0:	4b07      	ldr	r3, [pc, #28]	@ (8012fc0 <prvGetNextExpireTime+0x44>)
 8012fa2:	681b      	ldr	r3, [r3, #0]
 8012fa4:	68db      	ldr	r3, [r3, #12]
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	60fb      	str	r3, [r7, #12]
 8012faa:	e001      	b.n	8012fb0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012fac:	2300      	movs	r3, #0
 8012fae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012fb0:	68fb      	ldr	r3, [r7, #12]
}
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	3714      	adds	r7, #20
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fbc:	4770      	bx	lr
 8012fbe:	bf00      	nop
 8012fc0:	240020a0 	.word	0x240020a0

08012fc4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012fc4:	b580      	push	{r7, lr}
 8012fc6:	b084      	sub	sp, #16
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012fcc:	f7ff f964 	bl	8012298 <xTaskGetTickCount>
 8012fd0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8012fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8013000 <prvSampleTimeNow+0x3c>)
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	68fa      	ldr	r2, [r7, #12]
 8012fd8:	429a      	cmp	r2, r3
 8012fda:	d205      	bcs.n	8012fe8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012fdc:	f000 f93a 	bl	8013254 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	2201      	movs	r2, #1
 8012fe4:	601a      	str	r2, [r3, #0]
 8012fe6:	e002      	b.n	8012fee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	2200      	movs	r2, #0
 8012fec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012fee:	4a04      	ldr	r2, [pc, #16]	@ (8013000 <prvSampleTimeNow+0x3c>)
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012ff4:	68fb      	ldr	r3, [r7, #12]
}
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	3710      	adds	r7, #16
 8012ffa:	46bd      	mov	sp, r7
 8012ffc:	bd80      	pop	{r7, pc}
 8012ffe:	bf00      	nop
 8013000:	240020b0 	.word	0x240020b0

08013004 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013004:	b580      	push	{r7, lr}
 8013006:	b086      	sub	sp, #24
 8013008:	af00      	add	r7, sp, #0
 801300a:	60f8      	str	r0, [r7, #12]
 801300c:	60b9      	str	r1, [r7, #8]
 801300e:	607a      	str	r2, [r7, #4]
 8013010:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8013012:	2300      	movs	r3, #0
 8013014:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	68ba      	ldr	r2, [r7, #8]
 801301a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	68fa      	ldr	r2, [r7, #12]
 8013020:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8013022:	68ba      	ldr	r2, [r7, #8]
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	429a      	cmp	r2, r3
 8013028:	d812      	bhi.n	8013050 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801302a:	687a      	ldr	r2, [r7, #4]
 801302c:	683b      	ldr	r3, [r7, #0]
 801302e:	1ad2      	subs	r2, r2, r3
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	699b      	ldr	r3, [r3, #24]
 8013034:	429a      	cmp	r2, r3
 8013036:	d302      	bcc.n	801303e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8013038:	2301      	movs	r3, #1
 801303a:	617b      	str	r3, [r7, #20]
 801303c:	e01b      	b.n	8013076 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801303e:	4b10      	ldr	r3, [pc, #64]	@ (8013080 <prvInsertTimerInActiveList+0x7c>)
 8013040:	681a      	ldr	r2, [r3, #0]
 8013042:	68fb      	ldr	r3, [r7, #12]
 8013044:	3304      	adds	r3, #4
 8013046:	4619      	mov	r1, r3
 8013048:	4610      	mov	r0, r2
 801304a:	f7fd fd86 	bl	8010b5a <vListInsert>
 801304e:	e012      	b.n	8013076 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013050:	687a      	ldr	r2, [r7, #4]
 8013052:	683b      	ldr	r3, [r7, #0]
 8013054:	429a      	cmp	r2, r3
 8013056:	d206      	bcs.n	8013066 <prvInsertTimerInActiveList+0x62>
 8013058:	68ba      	ldr	r2, [r7, #8]
 801305a:	683b      	ldr	r3, [r7, #0]
 801305c:	429a      	cmp	r2, r3
 801305e:	d302      	bcc.n	8013066 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8013060:	2301      	movs	r3, #1
 8013062:	617b      	str	r3, [r7, #20]
 8013064:	e007      	b.n	8013076 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013066:	4b07      	ldr	r3, [pc, #28]	@ (8013084 <prvInsertTimerInActiveList+0x80>)
 8013068:	681a      	ldr	r2, [r3, #0]
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	3304      	adds	r3, #4
 801306e:	4619      	mov	r1, r3
 8013070:	4610      	mov	r0, r2
 8013072:	f7fd fd72 	bl	8010b5a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8013076:	697b      	ldr	r3, [r7, #20]
}
 8013078:	4618      	mov	r0, r3
 801307a:	3718      	adds	r7, #24
 801307c:	46bd      	mov	sp, r7
 801307e:	bd80      	pop	{r7, pc}
 8013080:	240020a4 	.word	0x240020a4
 8013084:	240020a0 	.word	0x240020a0

08013088 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8013088:	b580      	push	{r7, lr}
 801308a:	b08e      	sub	sp, #56	@ 0x38
 801308c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801308e:	e0ce      	b.n	801322e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	2b00      	cmp	r3, #0
 8013094:	da19      	bge.n	80130ca <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8013096:	1d3b      	adds	r3, r7, #4
 8013098:	3304      	adds	r3, #4
 801309a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801309c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d10b      	bne.n	80130ba <prvProcessReceivedCommands+0x32>
	__asm volatile
 80130a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130a6:	f383 8811 	msr	BASEPRI, r3
 80130aa:	f3bf 8f6f 	isb	sy
 80130ae:	f3bf 8f4f 	dsb	sy
 80130b2:	61fb      	str	r3, [r7, #28]
}
 80130b4:	bf00      	nop
 80130b6:	bf00      	nop
 80130b8:	e7fd      	b.n	80130b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80130ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80130c0:	6850      	ldr	r0, [r2, #4]
 80130c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80130c4:	6892      	ldr	r2, [r2, #8]
 80130c6:	4611      	mov	r1, r2
 80130c8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	f2c0 80ae 	blt.w	801322e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80130d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130d8:	695b      	ldr	r3, [r3, #20]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d004      	beq.n	80130e8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80130de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130e0:	3304      	adds	r3, #4
 80130e2:	4618      	mov	r0, r3
 80130e4:	f7fd fd72 	bl	8010bcc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80130e8:	463b      	mov	r3, r7
 80130ea:	4618      	mov	r0, r3
 80130ec:	f7ff ff6a 	bl	8012fc4 <prvSampleTimeNow>
 80130f0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	2b09      	cmp	r3, #9
 80130f6:	f200 8097 	bhi.w	8013228 <prvProcessReceivedCommands+0x1a0>
 80130fa:	a201      	add	r2, pc, #4	@ (adr r2, 8013100 <prvProcessReceivedCommands+0x78>)
 80130fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013100:	08013129 	.word	0x08013129
 8013104:	08013129 	.word	0x08013129
 8013108:	08013129 	.word	0x08013129
 801310c:	0801319f 	.word	0x0801319f
 8013110:	080131b3 	.word	0x080131b3
 8013114:	080131ff 	.word	0x080131ff
 8013118:	08013129 	.word	0x08013129
 801311c:	08013129 	.word	0x08013129
 8013120:	0801319f 	.word	0x0801319f
 8013124:	080131b3 	.word	0x080131b3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801312a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801312e:	f043 0301 	orr.w	r3, r3, #1
 8013132:	b2da      	uxtb	r2, r3
 8013134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013136:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801313a:	68ba      	ldr	r2, [r7, #8]
 801313c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801313e:	699b      	ldr	r3, [r3, #24]
 8013140:	18d1      	adds	r1, r2, r3
 8013142:	68bb      	ldr	r3, [r7, #8]
 8013144:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013146:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013148:	f7ff ff5c 	bl	8013004 <prvInsertTimerInActiveList>
 801314c:	4603      	mov	r3, r0
 801314e:	2b00      	cmp	r3, #0
 8013150:	d06c      	beq.n	801322c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013154:	6a1b      	ldr	r3, [r3, #32]
 8013156:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013158:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801315a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801315c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013160:	f003 0304 	and.w	r3, r3, #4
 8013164:	2b00      	cmp	r3, #0
 8013166:	d061      	beq.n	801322c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013168:	68ba      	ldr	r2, [r7, #8]
 801316a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801316c:	699b      	ldr	r3, [r3, #24]
 801316e:	441a      	add	r2, r3
 8013170:	2300      	movs	r3, #0
 8013172:	9300      	str	r3, [sp, #0]
 8013174:	2300      	movs	r3, #0
 8013176:	2100      	movs	r1, #0
 8013178:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801317a:	f7ff fe01 	bl	8012d80 <xTimerGenericCommand>
 801317e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8013180:	6a3b      	ldr	r3, [r7, #32]
 8013182:	2b00      	cmp	r3, #0
 8013184:	d152      	bne.n	801322c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8013186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801318a:	f383 8811 	msr	BASEPRI, r3
 801318e:	f3bf 8f6f 	isb	sy
 8013192:	f3bf 8f4f 	dsb	sy
 8013196:	61bb      	str	r3, [r7, #24]
}
 8013198:	bf00      	nop
 801319a:	bf00      	nop
 801319c:	e7fd      	b.n	801319a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801319e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80131a4:	f023 0301 	bic.w	r3, r3, #1
 80131a8:	b2da      	uxtb	r2, r3
 80131aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80131b0:	e03d      	b.n	801322e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80131b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80131b8:	f043 0301 	orr.w	r3, r3, #1
 80131bc:	b2da      	uxtb	r2, r3
 80131be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80131c4:	68ba      	ldr	r2, [r7, #8]
 80131c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131c8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80131ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131cc:	699b      	ldr	r3, [r3, #24]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d10b      	bne.n	80131ea <prvProcessReceivedCommands+0x162>
	__asm volatile
 80131d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131d6:	f383 8811 	msr	BASEPRI, r3
 80131da:	f3bf 8f6f 	isb	sy
 80131de:	f3bf 8f4f 	dsb	sy
 80131e2:	617b      	str	r3, [r7, #20]
}
 80131e4:	bf00      	nop
 80131e6:	bf00      	nop
 80131e8:	e7fd      	b.n	80131e6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80131ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131ec:	699a      	ldr	r2, [r3, #24]
 80131ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131f0:	18d1      	adds	r1, r2, r3
 80131f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80131f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80131f8:	f7ff ff04 	bl	8013004 <prvInsertTimerInActiveList>
					break;
 80131fc:	e017      	b.n	801322e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80131fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013200:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013204:	f003 0302 	and.w	r3, r3, #2
 8013208:	2b00      	cmp	r3, #0
 801320a:	d103      	bne.n	8013214 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 801320c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801320e:	f000 fbeb 	bl	80139e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8013212:	e00c      	b.n	801322e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013216:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801321a:	f023 0301 	bic.w	r3, r3, #1
 801321e:	b2da      	uxtb	r2, r3
 8013220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013222:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8013226:	e002      	b.n	801322e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8013228:	bf00      	nop
 801322a:	e000      	b.n	801322e <prvProcessReceivedCommands+0x1a6>
					break;
 801322c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801322e:	4b08      	ldr	r3, [pc, #32]	@ (8013250 <prvProcessReceivedCommands+0x1c8>)
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	1d39      	adds	r1, r7, #4
 8013234:	2200      	movs	r2, #0
 8013236:	4618      	mov	r0, r3
 8013238:	f7fe f8d6 	bl	80113e8 <xQueueReceive>
 801323c:	4603      	mov	r3, r0
 801323e:	2b00      	cmp	r3, #0
 8013240:	f47f af26 	bne.w	8013090 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8013244:	bf00      	nop
 8013246:	bf00      	nop
 8013248:	3730      	adds	r7, #48	@ 0x30
 801324a:	46bd      	mov	sp, r7
 801324c:	bd80      	pop	{r7, pc}
 801324e:	bf00      	nop
 8013250:	240020a8 	.word	0x240020a8

08013254 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013254:	b580      	push	{r7, lr}
 8013256:	b088      	sub	sp, #32
 8013258:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801325a:	e049      	b.n	80132f0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801325c:	4b2e      	ldr	r3, [pc, #184]	@ (8013318 <prvSwitchTimerLists+0xc4>)
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	68db      	ldr	r3, [r3, #12]
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013266:	4b2c      	ldr	r3, [pc, #176]	@ (8013318 <prvSwitchTimerLists+0xc4>)
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	68db      	ldr	r3, [r3, #12]
 801326c:	68db      	ldr	r3, [r3, #12]
 801326e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	3304      	adds	r3, #4
 8013274:	4618      	mov	r0, r3
 8013276:	f7fd fca9 	bl	8010bcc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	6a1b      	ldr	r3, [r3, #32]
 801327e:	68f8      	ldr	r0, [r7, #12]
 8013280:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013288:	f003 0304 	and.w	r3, r3, #4
 801328c:	2b00      	cmp	r3, #0
 801328e:	d02f      	beq.n	80132f0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	699b      	ldr	r3, [r3, #24]
 8013294:	693a      	ldr	r2, [r7, #16]
 8013296:	4413      	add	r3, r2
 8013298:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801329a:	68ba      	ldr	r2, [r7, #8]
 801329c:	693b      	ldr	r3, [r7, #16]
 801329e:	429a      	cmp	r2, r3
 80132a0:	d90e      	bls.n	80132c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	68ba      	ldr	r2, [r7, #8]
 80132a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	68fa      	ldr	r2, [r7, #12]
 80132ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80132ae:	4b1a      	ldr	r3, [pc, #104]	@ (8013318 <prvSwitchTimerLists+0xc4>)
 80132b0:	681a      	ldr	r2, [r3, #0]
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	3304      	adds	r3, #4
 80132b6:	4619      	mov	r1, r3
 80132b8:	4610      	mov	r0, r2
 80132ba:	f7fd fc4e 	bl	8010b5a <vListInsert>
 80132be:	e017      	b.n	80132f0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80132c0:	2300      	movs	r3, #0
 80132c2:	9300      	str	r3, [sp, #0]
 80132c4:	2300      	movs	r3, #0
 80132c6:	693a      	ldr	r2, [r7, #16]
 80132c8:	2100      	movs	r1, #0
 80132ca:	68f8      	ldr	r0, [r7, #12]
 80132cc:	f7ff fd58 	bl	8012d80 <xTimerGenericCommand>
 80132d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d10b      	bne.n	80132f0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80132d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80132dc:	f383 8811 	msr	BASEPRI, r3
 80132e0:	f3bf 8f6f 	isb	sy
 80132e4:	f3bf 8f4f 	dsb	sy
 80132e8:	603b      	str	r3, [r7, #0]
}
 80132ea:	bf00      	nop
 80132ec:	bf00      	nop
 80132ee:	e7fd      	b.n	80132ec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80132f0:	4b09      	ldr	r3, [pc, #36]	@ (8013318 <prvSwitchTimerLists+0xc4>)
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d1b0      	bne.n	801325c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80132fa:	4b07      	ldr	r3, [pc, #28]	@ (8013318 <prvSwitchTimerLists+0xc4>)
 80132fc:	681b      	ldr	r3, [r3, #0]
 80132fe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8013300:	4b06      	ldr	r3, [pc, #24]	@ (801331c <prvSwitchTimerLists+0xc8>)
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	4a04      	ldr	r2, [pc, #16]	@ (8013318 <prvSwitchTimerLists+0xc4>)
 8013306:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8013308:	4a04      	ldr	r2, [pc, #16]	@ (801331c <prvSwitchTimerLists+0xc8>)
 801330a:	697b      	ldr	r3, [r7, #20]
 801330c:	6013      	str	r3, [r2, #0]
}
 801330e:	bf00      	nop
 8013310:	3718      	adds	r7, #24
 8013312:	46bd      	mov	sp, r7
 8013314:	bd80      	pop	{r7, pc}
 8013316:	bf00      	nop
 8013318:	240020a0 	.word	0x240020a0
 801331c:	240020a4 	.word	0x240020a4

08013320 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8013320:	b580      	push	{r7, lr}
 8013322:	b082      	sub	sp, #8
 8013324:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8013326:	f000 f96f 	bl	8013608 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801332a:	4b15      	ldr	r3, [pc, #84]	@ (8013380 <prvCheckForValidListAndQueue+0x60>)
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	2b00      	cmp	r3, #0
 8013330:	d120      	bne.n	8013374 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8013332:	4814      	ldr	r0, [pc, #80]	@ (8013384 <prvCheckForValidListAndQueue+0x64>)
 8013334:	f7fd fbc0 	bl	8010ab8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013338:	4813      	ldr	r0, [pc, #76]	@ (8013388 <prvCheckForValidListAndQueue+0x68>)
 801333a:	f7fd fbbd 	bl	8010ab8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801333e:	4b13      	ldr	r3, [pc, #76]	@ (801338c <prvCheckForValidListAndQueue+0x6c>)
 8013340:	4a10      	ldr	r2, [pc, #64]	@ (8013384 <prvCheckForValidListAndQueue+0x64>)
 8013342:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8013344:	4b12      	ldr	r3, [pc, #72]	@ (8013390 <prvCheckForValidListAndQueue+0x70>)
 8013346:	4a10      	ldr	r2, [pc, #64]	@ (8013388 <prvCheckForValidListAndQueue+0x68>)
 8013348:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801334a:	2300      	movs	r3, #0
 801334c:	9300      	str	r3, [sp, #0]
 801334e:	4b11      	ldr	r3, [pc, #68]	@ (8013394 <prvCheckForValidListAndQueue+0x74>)
 8013350:	4a11      	ldr	r2, [pc, #68]	@ (8013398 <prvCheckForValidListAndQueue+0x78>)
 8013352:	2110      	movs	r1, #16
 8013354:	200a      	movs	r0, #10
 8013356:	f7fd fccd 	bl	8010cf4 <xQueueGenericCreateStatic>
 801335a:	4603      	mov	r3, r0
 801335c:	4a08      	ldr	r2, [pc, #32]	@ (8013380 <prvCheckForValidListAndQueue+0x60>)
 801335e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8013360:	4b07      	ldr	r3, [pc, #28]	@ (8013380 <prvCheckForValidListAndQueue+0x60>)
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	2b00      	cmp	r3, #0
 8013366:	d005      	beq.n	8013374 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013368:	4b05      	ldr	r3, [pc, #20]	@ (8013380 <prvCheckForValidListAndQueue+0x60>)
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	490b      	ldr	r1, [pc, #44]	@ (801339c <prvCheckForValidListAndQueue+0x7c>)
 801336e:	4618      	mov	r0, r3
 8013370:	f7fe fbfa 	bl	8011b68 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013374:	f000 f97a 	bl	801366c <vPortExitCritical>
}
 8013378:	bf00      	nop
 801337a:	46bd      	mov	sp, r7
 801337c:	bd80      	pop	{r7, pc}
 801337e:	bf00      	nop
 8013380:	240020a8 	.word	0x240020a8
 8013384:	24002078 	.word	0x24002078
 8013388:	2400208c 	.word	0x2400208c
 801338c:	240020a0 	.word	0x240020a0
 8013390:	240020a4 	.word	0x240020a4
 8013394:	24002154 	.word	0x24002154
 8013398:	240020b4 	.word	0x240020b4
 801339c:	0802d288 	.word	0x0802d288

080133a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80133a0:	b480      	push	{r7}
 80133a2:	b085      	sub	sp, #20
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	60f8      	str	r0, [r7, #12]
 80133a8:	60b9      	str	r1, [r7, #8]
 80133aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	3b04      	subs	r3, #4
 80133b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80133b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80133ba:	68fb      	ldr	r3, [r7, #12]
 80133bc:	3b04      	subs	r3, #4
 80133be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80133c0:	68bb      	ldr	r3, [r7, #8]
 80133c2:	f023 0201 	bic.w	r2, r3, #1
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	3b04      	subs	r3, #4
 80133ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80133d0:	4a0c      	ldr	r2, [pc, #48]	@ (8013404 <pxPortInitialiseStack+0x64>)
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	3b14      	subs	r3, #20
 80133da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80133dc:	687a      	ldr	r2, [r7, #4]
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	3b04      	subs	r3, #4
 80133e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	f06f 0202 	mvn.w	r2, #2
 80133ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	3b20      	subs	r3, #32
 80133f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80133f6:	68fb      	ldr	r3, [r7, #12]
}
 80133f8:	4618      	mov	r0, r3
 80133fa:	3714      	adds	r7, #20
 80133fc:	46bd      	mov	sp, r7
 80133fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013402:	4770      	bx	lr
 8013404:	08013409 	.word	0x08013409

08013408 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013408:	b480      	push	{r7}
 801340a:	b085      	sub	sp, #20
 801340c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801340e:	2300      	movs	r3, #0
 8013410:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013412:	4b13      	ldr	r3, [pc, #76]	@ (8013460 <prvTaskExitError+0x58>)
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	f1b3 3fff 	cmp.w	r3, #4294967295
 801341a:	d00b      	beq.n	8013434 <prvTaskExitError+0x2c>
	__asm volatile
 801341c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013420:	f383 8811 	msr	BASEPRI, r3
 8013424:	f3bf 8f6f 	isb	sy
 8013428:	f3bf 8f4f 	dsb	sy
 801342c:	60fb      	str	r3, [r7, #12]
}
 801342e:	bf00      	nop
 8013430:	bf00      	nop
 8013432:	e7fd      	b.n	8013430 <prvTaskExitError+0x28>
	__asm volatile
 8013434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013438:	f383 8811 	msr	BASEPRI, r3
 801343c:	f3bf 8f6f 	isb	sy
 8013440:	f3bf 8f4f 	dsb	sy
 8013444:	60bb      	str	r3, [r7, #8]
}
 8013446:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013448:	bf00      	nop
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	2b00      	cmp	r3, #0
 801344e:	d0fc      	beq.n	801344a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013450:	bf00      	nop
 8013452:	bf00      	nop
 8013454:	3714      	adds	r7, #20
 8013456:	46bd      	mov	sp, r7
 8013458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801345c:	4770      	bx	lr
 801345e:	bf00      	nop
 8013460:	24000044 	.word	0x24000044
	...

08013470 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013470:	4b07      	ldr	r3, [pc, #28]	@ (8013490 <pxCurrentTCBConst2>)
 8013472:	6819      	ldr	r1, [r3, #0]
 8013474:	6808      	ldr	r0, [r1, #0]
 8013476:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801347a:	f380 8809 	msr	PSP, r0
 801347e:	f3bf 8f6f 	isb	sy
 8013482:	f04f 0000 	mov.w	r0, #0
 8013486:	f380 8811 	msr	BASEPRI, r0
 801348a:	4770      	bx	lr
 801348c:	f3af 8000 	nop.w

08013490 <pxCurrentTCBConst2>:
 8013490:	24001b78 	.word	0x24001b78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013494:	bf00      	nop
 8013496:	bf00      	nop

08013498 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013498:	4808      	ldr	r0, [pc, #32]	@ (80134bc <prvPortStartFirstTask+0x24>)
 801349a:	6800      	ldr	r0, [r0, #0]
 801349c:	6800      	ldr	r0, [r0, #0]
 801349e:	f380 8808 	msr	MSP, r0
 80134a2:	f04f 0000 	mov.w	r0, #0
 80134a6:	f380 8814 	msr	CONTROL, r0
 80134aa:	b662      	cpsie	i
 80134ac:	b661      	cpsie	f
 80134ae:	f3bf 8f4f 	dsb	sy
 80134b2:	f3bf 8f6f 	isb	sy
 80134b6:	df00      	svc	0
 80134b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80134ba:	bf00      	nop
 80134bc:	e000ed08 	.word	0xe000ed08

080134c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80134c0:	b580      	push	{r7, lr}
 80134c2:	b086      	sub	sp, #24
 80134c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80134c6:	4b47      	ldr	r3, [pc, #284]	@ (80135e4 <xPortStartScheduler+0x124>)
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	4a47      	ldr	r2, [pc, #284]	@ (80135e8 <xPortStartScheduler+0x128>)
 80134cc:	4293      	cmp	r3, r2
 80134ce:	d10b      	bne.n	80134e8 <xPortStartScheduler+0x28>
	__asm volatile
 80134d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134d4:	f383 8811 	msr	BASEPRI, r3
 80134d8:	f3bf 8f6f 	isb	sy
 80134dc:	f3bf 8f4f 	dsb	sy
 80134e0:	613b      	str	r3, [r7, #16]
}
 80134e2:	bf00      	nop
 80134e4:	bf00      	nop
 80134e6:	e7fd      	b.n	80134e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80134e8:	4b3e      	ldr	r3, [pc, #248]	@ (80135e4 <xPortStartScheduler+0x124>)
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	4a3f      	ldr	r2, [pc, #252]	@ (80135ec <xPortStartScheduler+0x12c>)
 80134ee:	4293      	cmp	r3, r2
 80134f0:	d10b      	bne.n	801350a <xPortStartScheduler+0x4a>
	__asm volatile
 80134f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134f6:	f383 8811 	msr	BASEPRI, r3
 80134fa:	f3bf 8f6f 	isb	sy
 80134fe:	f3bf 8f4f 	dsb	sy
 8013502:	60fb      	str	r3, [r7, #12]
}
 8013504:	bf00      	nop
 8013506:	bf00      	nop
 8013508:	e7fd      	b.n	8013506 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801350a:	4b39      	ldr	r3, [pc, #228]	@ (80135f0 <xPortStartScheduler+0x130>)
 801350c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801350e:	697b      	ldr	r3, [r7, #20]
 8013510:	781b      	ldrb	r3, [r3, #0]
 8013512:	b2db      	uxtb	r3, r3
 8013514:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013516:	697b      	ldr	r3, [r7, #20]
 8013518:	22ff      	movs	r2, #255	@ 0xff
 801351a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801351c:	697b      	ldr	r3, [r7, #20]
 801351e:	781b      	ldrb	r3, [r3, #0]
 8013520:	b2db      	uxtb	r3, r3
 8013522:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013524:	78fb      	ldrb	r3, [r7, #3]
 8013526:	b2db      	uxtb	r3, r3
 8013528:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801352c:	b2da      	uxtb	r2, r3
 801352e:	4b31      	ldr	r3, [pc, #196]	@ (80135f4 <xPortStartScheduler+0x134>)
 8013530:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013532:	4b31      	ldr	r3, [pc, #196]	@ (80135f8 <xPortStartScheduler+0x138>)
 8013534:	2207      	movs	r2, #7
 8013536:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013538:	e009      	b.n	801354e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801353a:	4b2f      	ldr	r3, [pc, #188]	@ (80135f8 <xPortStartScheduler+0x138>)
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	3b01      	subs	r3, #1
 8013540:	4a2d      	ldr	r2, [pc, #180]	@ (80135f8 <xPortStartScheduler+0x138>)
 8013542:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013544:	78fb      	ldrb	r3, [r7, #3]
 8013546:	b2db      	uxtb	r3, r3
 8013548:	005b      	lsls	r3, r3, #1
 801354a:	b2db      	uxtb	r3, r3
 801354c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801354e:	78fb      	ldrb	r3, [r7, #3]
 8013550:	b2db      	uxtb	r3, r3
 8013552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013556:	2b80      	cmp	r3, #128	@ 0x80
 8013558:	d0ef      	beq.n	801353a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801355a:	4b27      	ldr	r3, [pc, #156]	@ (80135f8 <xPortStartScheduler+0x138>)
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	f1c3 0307 	rsb	r3, r3, #7
 8013562:	2b04      	cmp	r3, #4
 8013564:	d00b      	beq.n	801357e <xPortStartScheduler+0xbe>
	__asm volatile
 8013566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801356a:	f383 8811 	msr	BASEPRI, r3
 801356e:	f3bf 8f6f 	isb	sy
 8013572:	f3bf 8f4f 	dsb	sy
 8013576:	60bb      	str	r3, [r7, #8]
}
 8013578:	bf00      	nop
 801357a:	bf00      	nop
 801357c:	e7fd      	b.n	801357a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801357e:	4b1e      	ldr	r3, [pc, #120]	@ (80135f8 <xPortStartScheduler+0x138>)
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	021b      	lsls	r3, r3, #8
 8013584:	4a1c      	ldr	r2, [pc, #112]	@ (80135f8 <xPortStartScheduler+0x138>)
 8013586:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013588:	4b1b      	ldr	r3, [pc, #108]	@ (80135f8 <xPortStartScheduler+0x138>)
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8013590:	4a19      	ldr	r2, [pc, #100]	@ (80135f8 <xPortStartScheduler+0x138>)
 8013592:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	b2da      	uxtb	r2, r3
 8013598:	697b      	ldr	r3, [r7, #20]
 801359a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801359c:	4b17      	ldr	r3, [pc, #92]	@ (80135fc <xPortStartScheduler+0x13c>)
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	4a16      	ldr	r2, [pc, #88]	@ (80135fc <xPortStartScheduler+0x13c>)
 80135a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80135a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80135a8:	4b14      	ldr	r3, [pc, #80]	@ (80135fc <xPortStartScheduler+0x13c>)
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	4a13      	ldr	r2, [pc, #76]	@ (80135fc <xPortStartScheduler+0x13c>)
 80135ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80135b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80135b4:	f000 f8da 	bl	801376c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80135b8:	4b11      	ldr	r3, [pc, #68]	@ (8013600 <xPortStartScheduler+0x140>)
 80135ba:	2200      	movs	r2, #0
 80135bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80135be:	f000 f8f9 	bl	80137b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80135c2:	4b10      	ldr	r3, [pc, #64]	@ (8013604 <xPortStartScheduler+0x144>)
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	4a0f      	ldr	r2, [pc, #60]	@ (8013604 <xPortStartScheduler+0x144>)
 80135c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80135cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80135ce:	f7ff ff63 	bl	8013498 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80135d2:	f7fe ff2b 	bl	801242c <vTaskSwitchContext>
	prvTaskExitError();
 80135d6:	f7ff ff17 	bl	8013408 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80135da:	2300      	movs	r3, #0
}
 80135dc:	4618      	mov	r0, r3
 80135de:	3718      	adds	r7, #24
 80135e0:	46bd      	mov	sp, r7
 80135e2:	bd80      	pop	{r7, pc}
 80135e4:	e000ed00 	.word	0xe000ed00
 80135e8:	410fc271 	.word	0x410fc271
 80135ec:	410fc270 	.word	0x410fc270
 80135f0:	e000e400 	.word	0xe000e400
 80135f4:	240021a4 	.word	0x240021a4
 80135f8:	240021a8 	.word	0x240021a8
 80135fc:	e000ed20 	.word	0xe000ed20
 8013600:	24000044 	.word	0x24000044
 8013604:	e000ef34 	.word	0xe000ef34

08013608 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013608:	b480      	push	{r7}
 801360a:	b083      	sub	sp, #12
 801360c:	af00      	add	r7, sp, #0
	__asm volatile
 801360e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013612:	f383 8811 	msr	BASEPRI, r3
 8013616:	f3bf 8f6f 	isb	sy
 801361a:	f3bf 8f4f 	dsb	sy
 801361e:	607b      	str	r3, [r7, #4]
}
 8013620:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013622:	4b10      	ldr	r3, [pc, #64]	@ (8013664 <vPortEnterCritical+0x5c>)
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	3301      	adds	r3, #1
 8013628:	4a0e      	ldr	r2, [pc, #56]	@ (8013664 <vPortEnterCritical+0x5c>)
 801362a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801362c:	4b0d      	ldr	r3, [pc, #52]	@ (8013664 <vPortEnterCritical+0x5c>)
 801362e:	681b      	ldr	r3, [r3, #0]
 8013630:	2b01      	cmp	r3, #1
 8013632:	d110      	bne.n	8013656 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013634:	4b0c      	ldr	r3, [pc, #48]	@ (8013668 <vPortEnterCritical+0x60>)
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	b2db      	uxtb	r3, r3
 801363a:	2b00      	cmp	r3, #0
 801363c:	d00b      	beq.n	8013656 <vPortEnterCritical+0x4e>
	__asm volatile
 801363e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013642:	f383 8811 	msr	BASEPRI, r3
 8013646:	f3bf 8f6f 	isb	sy
 801364a:	f3bf 8f4f 	dsb	sy
 801364e:	603b      	str	r3, [r7, #0]
}
 8013650:	bf00      	nop
 8013652:	bf00      	nop
 8013654:	e7fd      	b.n	8013652 <vPortEnterCritical+0x4a>
	}
}
 8013656:	bf00      	nop
 8013658:	370c      	adds	r7, #12
 801365a:	46bd      	mov	sp, r7
 801365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013660:	4770      	bx	lr
 8013662:	bf00      	nop
 8013664:	24000044 	.word	0x24000044
 8013668:	e000ed04 	.word	0xe000ed04

0801366c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801366c:	b480      	push	{r7}
 801366e:	b083      	sub	sp, #12
 8013670:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013672:	4b12      	ldr	r3, [pc, #72]	@ (80136bc <vPortExitCritical+0x50>)
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	2b00      	cmp	r3, #0
 8013678:	d10b      	bne.n	8013692 <vPortExitCritical+0x26>
	__asm volatile
 801367a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801367e:	f383 8811 	msr	BASEPRI, r3
 8013682:	f3bf 8f6f 	isb	sy
 8013686:	f3bf 8f4f 	dsb	sy
 801368a:	607b      	str	r3, [r7, #4]
}
 801368c:	bf00      	nop
 801368e:	bf00      	nop
 8013690:	e7fd      	b.n	801368e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8013692:	4b0a      	ldr	r3, [pc, #40]	@ (80136bc <vPortExitCritical+0x50>)
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	3b01      	subs	r3, #1
 8013698:	4a08      	ldr	r2, [pc, #32]	@ (80136bc <vPortExitCritical+0x50>)
 801369a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801369c:	4b07      	ldr	r3, [pc, #28]	@ (80136bc <vPortExitCritical+0x50>)
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d105      	bne.n	80136b0 <vPortExitCritical+0x44>
 80136a4:	2300      	movs	r3, #0
 80136a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80136a8:	683b      	ldr	r3, [r7, #0]
 80136aa:	f383 8811 	msr	BASEPRI, r3
}
 80136ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80136b0:	bf00      	nop
 80136b2:	370c      	adds	r7, #12
 80136b4:	46bd      	mov	sp, r7
 80136b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ba:	4770      	bx	lr
 80136bc:	24000044 	.word	0x24000044

080136c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80136c0:	f3ef 8009 	mrs	r0, PSP
 80136c4:	f3bf 8f6f 	isb	sy
 80136c8:	4b15      	ldr	r3, [pc, #84]	@ (8013720 <pxCurrentTCBConst>)
 80136ca:	681a      	ldr	r2, [r3, #0]
 80136cc:	f01e 0f10 	tst.w	lr, #16
 80136d0:	bf08      	it	eq
 80136d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80136d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136da:	6010      	str	r0, [r2, #0]
 80136dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80136e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80136e4:	f380 8811 	msr	BASEPRI, r0
 80136e8:	f3bf 8f4f 	dsb	sy
 80136ec:	f3bf 8f6f 	isb	sy
 80136f0:	f7fe fe9c 	bl	801242c <vTaskSwitchContext>
 80136f4:	f04f 0000 	mov.w	r0, #0
 80136f8:	f380 8811 	msr	BASEPRI, r0
 80136fc:	bc09      	pop	{r0, r3}
 80136fe:	6819      	ldr	r1, [r3, #0]
 8013700:	6808      	ldr	r0, [r1, #0]
 8013702:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013706:	f01e 0f10 	tst.w	lr, #16
 801370a:	bf08      	it	eq
 801370c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013710:	f380 8809 	msr	PSP, r0
 8013714:	f3bf 8f6f 	isb	sy
 8013718:	4770      	bx	lr
 801371a:	bf00      	nop
 801371c:	f3af 8000 	nop.w

08013720 <pxCurrentTCBConst>:
 8013720:	24001b78 	.word	0x24001b78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013724:	bf00      	nop
 8013726:	bf00      	nop

08013728 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013728:	b580      	push	{r7, lr}
 801372a:	b082      	sub	sp, #8
 801372c:	af00      	add	r7, sp, #0
	__asm volatile
 801372e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013732:	f383 8811 	msr	BASEPRI, r3
 8013736:	f3bf 8f6f 	isb	sy
 801373a:	f3bf 8f4f 	dsb	sy
 801373e:	607b      	str	r3, [r7, #4]
}
 8013740:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013742:	f7fe fdb9 	bl	80122b8 <xTaskIncrementTick>
 8013746:	4603      	mov	r3, r0
 8013748:	2b00      	cmp	r3, #0
 801374a:	d003      	beq.n	8013754 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801374c:	4b06      	ldr	r3, [pc, #24]	@ (8013768 <xPortSysTickHandler+0x40>)
 801374e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013752:	601a      	str	r2, [r3, #0]
 8013754:	2300      	movs	r3, #0
 8013756:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013758:	683b      	ldr	r3, [r7, #0]
 801375a:	f383 8811 	msr	BASEPRI, r3
}
 801375e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013760:	bf00      	nop
 8013762:	3708      	adds	r7, #8
 8013764:	46bd      	mov	sp, r7
 8013766:	bd80      	pop	{r7, pc}
 8013768:	e000ed04 	.word	0xe000ed04

0801376c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801376c:	b480      	push	{r7}
 801376e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013770:	4b0b      	ldr	r3, [pc, #44]	@ (80137a0 <vPortSetupTimerInterrupt+0x34>)
 8013772:	2200      	movs	r2, #0
 8013774:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013776:	4b0b      	ldr	r3, [pc, #44]	@ (80137a4 <vPortSetupTimerInterrupt+0x38>)
 8013778:	2200      	movs	r2, #0
 801377a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801377c:	4b0a      	ldr	r3, [pc, #40]	@ (80137a8 <vPortSetupTimerInterrupt+0x3c>)
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	4a0a      	ldr	r2, [pc, #40]	@ (80137ac <vPortSetupTimerInterrupt+0x40>)
 8013782:	fba2 2303 	umull	r2, r3, r2, r3
 8013786:	099b      	lsrs	r3, r3, #6
 8013788:	4a09      	ldr	r2, [pc, #36]	@ (80137b0 <vPortSetupTimerInterrupt+0x44>)
 801378a:	3b01      	subs	r3, #1
 801378c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801378e:	4b04      	ldr	r3, [pc, #16]	@ (80137a0 <vPortSetupTimerInterrupt+0x34>)
 8013790:	2207      	movs	r2, #7
 8013792:	601a      	str	r2, [r3, #0]
}
 8013794:	bf00      	nop
 8013796:	46bd      	mov	sp, r7
 8013798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801379c:	4770      	bx	lr
 801379e:	bf00      	nop
 80137a0:	e000e010 	.word	0xe000e010
 80137a4:	e000e018 	.word	0xe000e018
 80137a8:	24000004 	.word	0x24000004
 80137ac:	10624dd3 	.word	0x10624dd3
 80137b0:	e000e014 	.word	0xe000e014

080137b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80137b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80137c4 <vPortEnableVFP+0x10>
 80137b8:	6801      	ldr	r1, [r0, #0]
 80137ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80137be:	6001      	str	r1, [r0, #0]
 80137c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80137c2:	bf00      	nop
 80137c4:	e000ed88 	.word	0xe000ed88

080137c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80137c8:	b480      	push	{r7}
 80137ca:	b085      	sub	sp, #20
 80137cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80137ce:	f3ef 8305 	mrs	r3, IPSR
 80137d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	2b0f      	cmp	r3, #15
 80137d8:	d915      	bls.n	8013806 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80137da:	4a18      	ldr	r2, [pc, #96]	@ (801383c <vPortValidateInterruptPriority+0x74>)
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	4413      	add	r3, r2
 80137e0:	781b      	ldrb	r3, [r3, #0]
 80137e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80137e4:	4b16      	ldr	r3, [pc, #88]	@ (8013840 <vPortValidateInterruptPriority+0x78>)
 80137e6:	781b      	ldrb	r3, [r3, #0]
 80137e8:	7afa      	ldrb	r2, [r7, #11]
 80137ea:	429a      	cmp	r2, r3
 80137ec:	d20b      	bcs.n	8013806 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80137ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80137f2:	f383 8811 	msr	BASEPRI, r3
 80137f6:	f3bf 8f6f 	isb	sy
 80137fa:	f3bf 8f4f 	dsb	sy
 80137fe:	607b      	str	r3, [r7, #4]
}
 8013800:	bf00      	nop
 8013802:	bf00      	nop
 8013804:	e7fd      	b.n	8013802 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013806:	4b0f      	ldr	r3, [pc, #60]	@ (8013844 <vPortValidateInterruptPriority+0x7c>)
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801380e:	4b0e      	ldr	r3, [pc, #56]	@ (8013848 <vPortValidateInterruptPriority+0x80>)
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	429a      	cmp	r2, r3
 8013814:	d90b      	bls.n	801382e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8013816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801381a:	f383 8811 	msr	BASEPRI, r3
 801381e:	f3bf 8f6f 	isb	sy
 8013822:	f3bf 8f4f 	dsb	sy
 8013826:	603b      	str	r3, [r7, #0]
}
 8013828:	bf00      	nop
 801382a:	bf00      	nop
 801382c:	e7fd      	b.n	801382a <vPortValidateInterruptPriority+0x62>
	}
 801382e:	bf00      	nop
 8013830:	3714      	adds	r7, #20
 8013832:	46bd      	mov	sp, r7
 8013834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013838:	4770      	bx	lr
 801383a:	bf00      	nop
 801383c:	e000e3f0 	.word	0xe000e3f0
 8013840:	240021a4 	.word	0x240021a4
 8013844:	e000ed0c 	.word	0xe000ed0c
 8013848:	240021a8 	.word	0x240021a8

0801384c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801384c:	b580      	push	{r7, lr}
 801384e:	b08a      	sub	sp, #40	@ 0x28
 8013850:	af00      	add	r7, sp, #0
 8013852:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013854:	2300      	movs	r3, #0
 8013856:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013858:	f7fe fc72 	bl	8012140 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801385c:	4b5c      	ldr	r3, [pc, #368]	@ (80139d0 <pvPortMalloc+0x184>)
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	2b00      	cmp	r3, #0
 8013862:	d101      	bne.n	8013868 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013864:	f000 f924 	bl	8013ab0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013868:	4b5a      	ldr	r3, [pc, #360]	@ (80139d4 <pvPortMalloc+0x188>)
 801386a:	681a      	ldr	r2, [r3, #0]
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	4013      	ands	r3, r2
 8013870:	2b00      	cmp	r3, #0
 8013872:	f040 8095 	bne.w	80139a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	2b00      	cmp	r3, #0
 801387a:	d01e      	beq.n	80138ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801387c:	2208      	movs	r2, #8
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	4413      	add	r3, r2
 8013882:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	f003 0307 	and.w	r3, r3, #7
 801388a:	2b00      	cmp	r3, #0
 801388c:	d015      	beq.n	80138ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	f023 0307 	bic.w	r3, r3, #7
 8013894:	3308      	adds	r3, #8
 8013896:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	f003 0307 	and.w	r3, r3, #7
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d00b      	beq.n	80138ba <pvPortMalloc+0x6e>
	__asm volatile
 80138a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80138a6:	f383 8811 	msr	BASEPRI, r3
 80138aa:	f3bf 8f6f 	isb	sy
 80138ae:	f3bf 8f4f 	dsb	sy
 80138b2:	617b      	str	r3, [r7, #20]
}
 80138b4:	bf00      	nop
 80138b6:	bf00      	nop
 80138b8:	e7fd      	b.n	80138b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d06f      	beq.n	80139a0 <pvPortMalloc+0x154>
 80138c0:	4b45      	ldr	r3, [pc, #276]	@ (80139d8 <pvPortMalloc+0x18c>)
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	687a      	ldr	r2, [r7, #4]
 80138c6:	429a      	cmp	r2, r3
 80138c8:	d86a      	bhi.n	80139a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80138ca:	4b44      	ldr	r3, [pc, #272]	@ (80139dc <pvPortMalloc+0x190>)
 80138cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80138ce:	4b43      	ldr	r3, [pc, #268]	@ (80139dc <pvPortMalloc+0x190>)
 80138d0:	681b      	ldr	r3, [r3, #0]
 80138d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80138d4:	e004      	b.n	80138e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80138d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80138da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138dc:	681b      	ldr	r3, [r3, #0]
 80138de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80138e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138e2:	685b      	ldr	r3, [r3, #4]
 80138e4:	687a      	ldr	r2, [r7, #4]
 80138e6:	429a      	cmp	r2, r3
 80138e8:	d903      	bls.n	80138f2 <pvPortMalloc+0xa6>
 80138ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138ec:	681b      	ldr	r3, [r3, #0]
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d1f1      	bne.n	80138d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80138f2:	4b37      	ldr	r3, [pc, #220]	@ (80139d0 <pvPortMalloc+0x184>)
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80138f8:	429a      	cmp	r2, r3
 80138fa:	d051      	beq.n	80139a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80138fc:	6a3b      	ldr	r3, [r7, #32]
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	2208      	movs	r2, #8
 8013902:	4413      	add	r3, r2
 8013904:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013908:	681a      	ldr	r2, [r3, #0]
 801390a:	6a3b      	ldr	r3, [r7, #32]
 801390c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801390e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013910:	685a      	ldr	r2, [r3, #4]
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	1ad2      	subs	r2, r2, r3
 8013916:	2308      	movs	r3, #8
 8013918:	005b      	lsls	r3, r3, #1
 801391a:	429a      	cmp	r2, r3
 801391c:	d920      	bls.n	8013960 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801391e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	4413      	add	r3, r2
 8013924:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013926:	69bb      	ldr	r3, [r7, #24]
 8013928:	f003 0307 	and.w	r3, r3, #7
 801392c:	2b00      	cmp	r3, #0
 801392e:	d00b      	beq.n	8013948 <pvPortMalloc+0xfc>
	__asm volatile
 8013930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013934:	f383 8811 	msr	BASEPRI, r3
 8013938:	f3bf 8f6f 	isb	sy
 801393c:	f3bf 8f4f 	dsb	sy
 8013940:	613b      	str	r3, [r7, #16]
}
 8013942:	bf00      	nop
 8013944:	bf00      	nop
 8013946:	e7fd      	b.n	8013944 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801394a:	685a      	ldr	r2, [r3, #4]
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	1ad2      	subs	r2, r2, r3
 8013950:	69bb      	ldr	r3, [r7, #24]
 8013952:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013956:	687a      	ldr	r2, [r7, #4]
 8013958:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801395a:	69b8      	ldr	r0, [r7, #24]
 801395c:	f000 f90c 	bl	8013b78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013960:	4b1d      	ldr	r3, [pc, #116]	@ (80139d8 <pvPortMalloc+0x18c>)
 8013962:	681a      	ldr	r2, [r3, #0]
 8013964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013966:	685b      	ldr	r3, [r3, #4]
 8013968:	1ad3      	subs	r3, r2, r3
 801396a:	4a1b      	ldr	r2, [pc, #108]	@ (80139d8 <pvPortMalloc+0x18c>)
 801396c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801396e:	4b1a      	ldr	r3, [pc, #104]	@ (80139d8 <pvPortMalloc+0x18c>)
 8013970:	681a      	ldr	r2, [r3, #0]
 8013972:	4b1b      	ldr	r3, [pc, #108]	@ (80139e0 <pvPortMalloc+0x194>)
 8013974:	681b      	ldr	r3, [r3, #0]
 8013976:	429a      	cmp	r2, r3
 8013978:	d203      	bcs.n	8013982 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801397a:	4b17      	ldr	r3, [pc, #92]	@ (80139d8 <pvPortMalloc+0x18c>)
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	4a18      	ldr	r2, [pc, #96]	@ (80139e0 <pvPortMalloc+0x194>)
 8013980:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013984:	685a      	ldr	r2, [r3, #4]
 8013986:	4b13      	ldr	r3, [pc, #76]	@ (80139d4 <pvPortMalloc+0x188>)
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	431a      	orrs	r2, r3
 801398c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801398e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013992:	2200      	movs	r2, #0
 8013994:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8013996:	4b13      	ldr	r3, [pc, #76]	@ (80139e4 <pvPortMalloc+0x198>)
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	3301      	adds	r3, #1
 801399c:	4a11      	ldr	r2, [pc, #68]	@ (80139e4 <pvPortMalloc+0x198>)
 801399e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80139a0:	f7fe fbdc 	bl	801215c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80139a4:	69fb      	ldr	r3, [r7, #28]
 80139a6:	f003 0307 	and.w	r3, r3, #7
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d00b      	beq.n	80139c6 <pvPortMalloc+0x17a>
	__asm volatile
 80139ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139b2:	f383 8811 	msr	BASEPRI, r3
 80139b6:	f3bf 8f6f 	isb	sy
 80139ba:	f3bf 8f4f 	dsb	sy
 80139be:	60fb      	str	r3, [r7, #12]
}
 80139c0:	bf00      	nop
 80139c2:	bf00      	nop
 80139c4:	e7fd      	b.n	80139c2 <pvPortMalloc+0x176>
	return pvReturn;
 80139c6:	69fb      	ldr	r3, [r7, #28]
}
 80139c8:	4618      	mov	r0, r3
 80139ca:	3728      	adds	r7, #40	@ 0x28
 80139cc:	46bd      	mov	sp, r7
 80139ce:	bd80      	pop	{r7, pc}
 80139d0:	24032ef4 	.word	0x24032ef4
 80139d4:	24032f08 	.word	0x24032f08
 80139d8:	24032ef8 	.word	0x24032ef8
 80139dc:	24032eec 	.word	0x24032eec
 80139e0:	24032efc 	.word	0x24032efc
 80139e4:	24032f00 	.word	0x24032f00

080139e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80139e8:	b580      	push	{r7, lr}
 80139ea:	b086      	sub	sp, #24
 80139ec:	af00      	add	r7, sp, #0
 80139ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d04f      	beq.n	8013a9a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80139fa:	2308      	movs	r3, #8
 80139fc:	425b      	negs	r3, r3
 80139fe:	697a      	ldr	r2, [r7, #20]
 8013a00:	4413      	add	r3, r2
 8013a02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013a04:	697b      	ldr	r3, [r7, #20]
 8013a06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013a08:	693b      	ldr	r3, [r7, #16]
 8013a0a:	685a      	ldr	r2, [r3, #4]
 8013a0c:	4b25      	ldr	r3, [pc, #148]	@ (8013aa4 <vPortFree+0xbc>)
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	4013      	ands	r3, r2
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d10b      	bne.n	8013a2e <vPortFree+0x46>
	__asm volatile
 8013a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a1a:	f383 8811 	msr	BASEPRI, r3
 8013a1e:	f3bf 8f6f 	isb	sy
 8013a22:	f3bf 8f4f 	dsb	sy
 8013a26:	60fb      	str	r3, [r7, #12]
}
 8013a28:	bf00      	nop
 8013a2a:	bf00      	nop
 8013a2c:	e7fd      	b.n	8013a2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013a2e:	693b      	ldr	r3, [r7, #16]
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d00b      	beq.n	8013a4e <vPortFree+0x66>
	__asm volatile
 8013a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a3a:	f383 8811 	msr	BASEPRI, r3
 8013a3e:	f3bf 8f6f 	isb	sy
 8013a42:	f3bf 8f4f 	dsb	sy
 8013a46:	60bb      	str	r3, [r7, #8]
}
 8013a48:	bf00      	nop
 8013a4a:	bf00      	nop
 8013a4c:	e7fd      	b.n	8013a4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013a4e:	693b      	ldr	r3, [r7, #16]
 8013a50:	685a      	ldr	r2, [r3, #4]
 8013a52:	4b14      	ldr	r3, [pc, #80]	@ (8013aa4 <vPortFree+0xbc>)
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	4013      	ands	r3, r2
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d01e      	beq.n	8013a9a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013a5c:	693b      	ldr	r3, [r7, #16]
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d11a      	bne.n	8013a9a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013a64:	693b      	ldr	r3, [r7, #16]
 8013a66:	685a      	ldr	r2, [r3, #4]
 8013a68:	4b0e      	ldr	r3, [pc, #56]	@ (8013aa4 <vPortFree+0xbc>)
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	43db      	mvns	r3, r3
 8013a6e:	401a      	ands	r2, r3
 8013a70:	693b      	ldr	r3, [r7, #16]
 8013a72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013a74:	f7fe fb64 	bl	8012140 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013a78:	693b      	ldr	r3, [r7, #16]
 8013a7a:	685a      	ldr	r2, [r3, #4]
 8013a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8013aa8 <vPortFree+0xc0>)
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	4413      	add	r3, r2
 8013a82:	4a09      	ldr	r2, [pc, #36]	@ (8013aa8 <vPortFree+0xc0>)
 8013a84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013a86:	6938      	ldr	r0, [r7, #16]
 8013a88:	f000 f876 	bl	8013b78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8013a8c:	4b07      	ldr	r3, [pc, #28]	@ (8013aac <vPortFree+0xc4>)
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	3301      	adds	r3, #1
 8013a92:	4a06      	ldr	r2, [pc, #24]	@ (8013aac <vPortFree+0xc4>)
 8013a94:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8013a96:	f7fe fb61 	bl	801215c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013a9a:	bf00      	nop
 8013a9c:	3718      	adds	r7, #24
 8013a9e:	46bd      	mov	sp, r7
 8013aa0:	bd80      	pop	{r7, pc}
 8013aa2:	bf00      	nop
 8013aa4:	24032f08 	.word	0x24032f08
 8013aa8:	24032ef8 	.word	0x24032ef8
 8013aac:	24032f04 	.word	0x24032f04

08013ab0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013ab0:	b480      	push	{r7}
 8013ab2:	b085      	sub	sp, #20
 8013ab4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013ab6:	4b29      	ldr	r3, [pc, #164]	@ (8013b5c <prvHeapInit+0xac>)
 8013ab8:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013aba:	4b29      	ldr	r3, [pc, #164]	@ (8013b60 <prvHeapInit+0xb0>)
 8013abc:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	f003 0307 	and.w	r3, r3, #7
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d00c      	beq.n	8013ae2 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	3307      	adds	r3, #7
 8013acc:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	f023 0307 	bic.w	r3, r3, #7
 8013ad4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013ad6:	68ba      	ldr	r2, [r7, #8]
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	1ad3      	subs	r3, r2, r3
 8013adc:	4a20      	ldr	r2, [pc, #128]	@ (8013b60 <prvHeapInit+0xb0>)
 8013ade:	4413      	add	r3, r2
 8013ae0:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013ae6:	4a1f      	ldr	r2, [pc, #124]	@ (8013b64 <prvHeapInit+0xb4>)
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013aec:	4b1d      	ldr	r3, [pc, #116]	@ (8013b64 <prvHeapInit+0xb4>)
 8013aee:	2200      	movs	r2, #0
 8013af0:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	68ba      	ldr	r2, [r7, #8]
 8013af6:	4413      	add	r3, r2
 8013af8:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013afa:	2208      	movs	r2, #8
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	1a9b      	subs	r3, r3, r2
 8013b00:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	f023 0307 	bic.w	r3, r3, #7
 8013b08:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	4a16      	ldr	r2, [pc, #88]	@ (8013b68 <prvHeapInit+0xb8>)
 8013b0e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013b10:	4b15      	ldr	r3, [pc, #84]	@ (8013b68 <prvHeapInit+0xb8>)
 8013b12:	681b      	ldr	r3, [r3, #0]
 8013b14:	2200      	movs	r2, #0
 8013b16:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013b18:	4b13      	ldr	r3, [pc, #76]	@ (8013b68 <prvHeapInit+0xb8>)
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	2200      	movs	r2, #0
 8013b1e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013b24:	683b      	ldr	r3, [r7, #0]
 8013b26:	68fa      	ldr	r2, [r7, #12]
 8013b28:	1ad2      	subs	r2, r2, r3
 8013b2a:	683b      	ldr	r3, [r7, #0]
 8013b2c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8013b68 <prvHeapInit+0xb8>)
 8013b30:	681a      	ldr	r2, [r3, #0]
 8013b32:	683b      	ldr	r3, [r7, #0]
 8013b34:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013b36:	683b      	ldr	r3, [r7, #0]
 8013b38:	685b      	ldr	r3, [r3, #4]
 8013b3a:	4a0c      	ldr	r2, [pc, #48]	@ (8013b6c <prvHeapInit+0xbc>)
 8013b3c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013b3e:	683b      	ldr	r3, [r7, #0]
 8013b40:	685b      	ldr	r3, [r3, #4]
 8013b42:	4a0b      	ldr	r2, [pc, #44]	@ (8013b70 <prvHeapInit+0xc0>)
 8013b44:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013b46:	4b0b      	ldr	r3, [pc, #44]	@ (8013b74 <prvHeapInit+0xc4>)
 8013b48:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8013b4c:	601a      	str	r2, [r3, #0]
}
 8013b4e:	bf00      	nop
 8013b50:	3714      	adds	r7, #20
 8013b52:	46bd      	mov	sp, r7
 8013b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b58:	4770      	bx	lr
 8013b5a:	bf00      	nop
 8013b5c:	00030d40 	.word	0x00030d40
 8013b60:	240021ac 	.word	0x240021ac
 8013b64:	24032eec 	.word	0x24032eec
 8013b68:	24032ef4 	.word	0x24032ef4
 8013b6c:	24032efc 	.word	0x24032efc
 8013b70:	24032ef8 	.word	0x24032ef8
 8013b74:	24032f08 	.word	0x24032f08

08013b78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013b78:	b480      	push	{r7}
 8013b7a:	b085      	sub	sp, #20
 8013b7c:	af00      	add	r7, sp, #0
 8013b7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013b80:	4b28      	ldr	r3, [pc, #160]	@ (8013c24 <prvInsertBlockIntoFreeList+0xac>)
 8013b82:	60fb      	str	r3, [r7, #12]
 8013b84:	e002      	b.n	8013b8c <prvInsertBlockIntoFreeList+0x14>
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	681b      	ldr	r3, [r3, #0]
 8013b8a:	60fb      	str	r3, [r7, #12]
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	687a      	ldr	r2, [r7, #4]
 8013b92:	429a      	cmp	r2, r3
 8013b94:	d8f7      	bhi.n	8013b86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	685b      	ldr	r3, [r3, #4]
 8013b9e:	68ba      	ldr	r2, [r7, #8]
 8013ba0:	4413      	add	r3, r2
 8013ba2:	687a      	ldr	r2, [r7, #4]
 8013ba4:	429a      	cmp	r2, r3
 8013ba6:	d108      	bne.n	8013bba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	685a      	ldr	r2, [r3, #4]
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	685b      	ldr	r3, [r3, #4]
 8013bb0:	441a      	add	r2, r3
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	685b      	ldr	r3, [r3, #4]
 8013bc2:	68ba      	ldr	r2, [r7, #8]
 8013bc4:	441a      	add	r2, r3
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	429a      	cmp	r2, r3
 8013bcc:	d118      	bne.n	8013c00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	681a      	ldr	r2, [r3, #0]
 8013bd2:	4b15      	ldr	r3, [pc, #84]	@ (8013c28 <prvInsertBlockIntoFreeList+0xb0>)
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	429a      	cmp	r2, r3
 8013bd8:	d00d      	beq.n	8013bf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	685a      	ldr	r2, [r3, #4]
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	685b      	ldr	r3, [r3, #4]
 8013be4:	441a      	add	r2, r3
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	681a      	ldr	r2, [r3, #0]
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	601a      	str	r2, [r3, #0]
 8013bf4:	e008      	b.n	8013c08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8013c28 <prvInsertBlockIntoFreeList+0xb0>)
 8013bf8:	681a      	ldr	r2, [r3, #0]
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	601a      	str	r2, [r3, #0]
 8013bfe:	e003      	b.n	8013c08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	681a      	ldr	r2, [r3, #0]
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013c08:	68fa      	ldr	r2, [r7, #12]
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	429a      	cmp	r2, r3
 8013c0e:	d002      	beq.n	8013c16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	687a      	ldr	r2, [r7, #4]
 8013c14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013c16:	bf00      	nop
 8013c18:	3714      	adds	r7, #20
 8013c1a:	46bd      	mov	sp, r7
 8013c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c20:	4770      	bx	lr
 8013c22:	bf00      	nop
 8013c24:	24032eec 	.word	0x24032eec
 8013c28:	24032ef4 	.word	0x24032ef4

08013c2c <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 8013c2c:	b480      	push	{r7}
 8013c2e:	af00      	add	r7, sp, #0
}
 8013c30:	bf00      	nop
 8013c32:	46bd      	mov	sp, r7
 8013c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c38:	4770      	bx	lr

08013c3a <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8013c3a:	b580      	push	{r7, lr}
 8013c3c:	af00      	add	r7, sp, #0
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 8013c3e:	f004 fb2d 	bl	801829c <touchgfx_components_init>
    touchgfx_init();
 8013c42:	f004 faf9 	bl	8018238 <touchgfx_init>
}
 8013c46:	bf00      	nop
 8013c48:	bd80      	pop	{r7, pc}

08013c4a <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void* argument)
{
 8013c4a:	b580      	push	{r7, lr}
 8013c4c:	b082      	sub	sp, #8
 8013c4e:	af00      	add	r7, sp, #0
 8013c50:	6078      	str	r0, [r7, #4]
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 8013c52:	f004 fb2b 	bl	80182ac <touchgfx_taskEntry>
}
 8013c56:	bf00      	nop
 8013c58:	3708      	adds	r7, #8
 8013c5a:	46bd      	mov	sp, r7
 8013c5c:	bd80      	pop	{r7, pc}
	...

08013c60 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8013c60:	b480      	push	{r7}
 8013c62:	b083      	sub	sp, #12
 8013c64:	af00      	add	r7, sp, #0
 8013c66:	6078      	str	r0, [r7, #4]
    {
 8013c68:	4a04      	ldr	r2, [pc, #16]	@ (8013c7c <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	601a      	str	r2, [r3, #0]
    }
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	4618      	mov	r0, r3
 8013c72:	370c      	adds	r7, #12
 8013c74:	46bd      	mov	sp, r7
 8013c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c7a:	4770      	bx	lr
 8013c7c:	0802e084 	.word	0x0802e084

08013c80 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8013c80:	b580      	push	{r7, lr}
 8013c82:	b082      	sub	sp, #8
 8013c84:	af00      	add	r7, sp, #0
 8013c86:	6078      	str	r0, [r7, #4]
    }
 8013c88:	6878      	ldr	r0, [r7, #4]
 8013c8a:	f7ff ffe9 	bl	8013c60 <_ZN8touchgfx12FontProviderD1Ev>
 8013c8e:	2104      	movs	r1, #4
 8013c90:	6878      	ldr	r0, [r7, #4]
 8013c92:	f017 fee2 	bl	802ba5a <_ZdlPvj>
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	4618      	mov	r0, r3
 8013c9a:	3708      	adds	r7, #8
 8013c9c:	46bd      	mov	sp, r7
 8013c9e:	bd80      	pop	{r7, pc}

08013ca0 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8013ca0:	b580      	push	{r7, lr}
 8013ca2:	b082      	sub	sp, #8
 8013ca4:	af00      	add	r7, sp, #0
 8013ca6:	6078      	str	r0, [r7, #4]
 8013ca8:	460b      	mov	r3, r1
 8013caa:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8013cac:	887b      	ldrh	r3, [r7, #2]
 8013cae:	2b02      	cmp	r3, #2
 8013cb0:	d010      	beq.n	8013cd4 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 8013cb2:	2b02      	cmp	r3, #2
 8013cb4:	dc13      	bgt.n	8013cde <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d002      	beq.n	8013cc0 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 8013cba:	2b01      	cmp	r3, #1
 8013cbc:	d005      	beq.n	8013cca <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 8013cbe:	e00e      	b.n	8013cde <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8013cc0:	f002 fbb8 	bl	8016434 <_ZN17TypedTextDatabase8getFontsEv>
 8013cc4:	4603      	mov	r3, r0
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	e00a      	b.n	8013ce0 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8013cca:	f002 fbb3 	bl	8016434 <_ZN17TypedTextDatabase8getFontsEv>
 8013cce:	4603      	mov	r3, r0
 8013cd0:	685b      	ldr	r3, [r3, #4]
 8013cd2:	e005      	b.n	8013ce0 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8013cd4:	f002 fbae 	bl	8016434 <_ZN17TypedTextDatabase8getFontsEv>
 8013cd8:	4603      	mov	r3, r0
 8013cda:	689b      	ldr	r3, [r3, #8]
 8013cdc:	e000      	b.n	8013ce0 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 8013cde:	2300      	movs	r3, #0
    }
}
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	3708      	adds	r7, #8
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	bd80      	pop	{r7, pc}

08013ce8 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8013ce8:	b580      	push	{r7, lr}
 8013cea:	b082      	sub	sp, #8
 8013cec:	af00      	add	r7, sp, #0
 8013cee:	6078      	str	r0, [r7, #4]
 8013cf0:	4a05      	ldr	r2, [pc, #20]	@ (8013d08 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	601a      	str	r2, [r3, #0]
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	f7ff ffb1 	bl	8013c60 <_ZN8touchgfx12FontProviderD1Ev>
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	4618      	mov	r0, r3
 8013d02:	3708      	adds	r7, #8
 8013d04:	46bd      	mov	sp, r7
 8013d06:	bd80      	pop	{r7, pc}
 8013d08:	0802e070 	.word	0x0802e070

08013d0c <_ZN23ApplicationFontProviderD0Ev>:
 8013d0c:	b580      	push	{r7, lr}
 8013d0e:	b082      	sub	sp, #8
 8013d10:	af00      	add	r7, sp, #0
 8013d12:	6078      	str	r0, [r7, #4]
 8013d14:	6878      	ldr	r0, [r7, #4]
 8013d16:	f7ff ffe7 	bl	8013ce8 <_ZN23ApplicationFontProviderD1Ev>
 8013d1a:	2104      	movs	r1, #4
 8013d1c:	6878      	ldr	r0, [r7, #4]
 8013d1e:	f017 fe9c 	bl	802ba5a <_ZdlPvj>
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	4618      	mov	r0, r3
 8013d26:	3708      	adds	r7, #8
 8013d28:	46bd      	mov	sp, r7
 8013d2a:	bd80      	pop	{r7, pc}

08013d2c <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8013d2c:	b480      	push	{r7}
 8013d2e:	b083      	sub	sp, #12
 8013d30:	af00      	add	r7, sp, #0
 8013d32:	6078      	str	r0, [r7, #4]
    {
 8013d34:	4a04      	ldr	r2, [pc, #16]	@ (8013d48 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	601a      	str	r2, [r3, #0]
    }
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	4618      	mov	r0, r3
 8013d3e:	370c      	adds	r7, #12
 8013d40:	46bd      	mov	sp, r7
 8013d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d46:	4770      	bx	lr
 8013d48:	0802e418 	.word	0x0802e418

08013d4c <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8013d4c:	b580      	push	{r7, lr}
 8013d4e:	b082      	sub	sp, #8
 8013d50:	af00      	add	r7, sp, #0
 8013d52:	6078      	str	r0, [r7, #4]
    }
 8013d54:	6878      	ldr	r0, [r7, #4]
 8013d56:	f7ff ffe9 	bl	8013d2c <_ZN8touchgfx4FontD1Ev>
 8013d5a:	2114      	movs	r1, #20
 8013d5c:	6878      	ldr	r0, [r7, #4]
 8013d5e:	f017 fe7c 	bl	802ba5a <_ZdlPvj>
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	4618      	mov	r0, r3
 8013d66:	3708      	adds	r7, #8
 8013d68:	46bd      	mov	sp, r7
 8013d6a:	bd80      	pop	{r7, pc}

08013d6c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8013d6c:	b590      	push	{r4, r7, lr}
 8013d6e:	b087      	sub	sp, #28
 8013d70:	af00      	add	r7, sp, #0
 8013d72:	6078      	str	r0, [r7, #4]
 8013d74:	460b      	mov	r3, r1
 8013d76:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8013d78:	887b      	ldrh	r3, [r7, #2]
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d101      	bne.n	8013d82 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8013d7e:	2300      	movs	r3, #0
 8013d80:	e010      	b.n	8013da4 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8013d82:	2300      	movs	r3, #0
 8013d84:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8013d86:	2300      	movs	r3, #0
 8013d88:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	3308      	adds	r3, #8
 8013d90:	681c      	ldr	r4, [r3, #0]
 8013d92:	f107 030f 	add.w	r3, r7, #15
 8013d96:	f107 0210 	add.w	r2, r7, #16
 8013d9a:	8879      	ldrh	r1, [r7, #2]
 8013d9c:	6878      	ldr	r0, [r7, #4]
 8013d9e:	47a0      	blx	r4
 8013da0:	6178      	str	r0, [r7, #20]
        return glyph;
 8013da2:	697b      	ldr	r3, [r7, #20]
    }
 8013da4:	4618      	mov	r0, r3
 8013da6:	371c      	adds	r7, #28
 8013da8:	46bd      	mov	sp, r7
 8013daa:	bd90      	pop	{r4, r7, pc}

08013dac <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8013dac:	b480      	push	{r7}
 8013dae:	b083      	sub	sp, #12
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	89db      	ldrh	r3, [r3, #14]
    }
 8013db8:	4618      	mov	r0, r3
 8013dba:	370c      	adds	r7, #12
 8013dbc:	46bd      	mov	sp, r7
 8013dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dc2:	4770      	bx	lr

08013dc4 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8013dc4:	b480      	push	{r7}
 8013dc6:	b083      	sub	sp, #12
 8013dc8:	af00      	add	r7, sp, #0
 8013dca:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	8a1b      	ldrh	r3, [r3, #16]
    }
 8013dd0:	4618      	mov	r0, r3
 8013dd2:	370c      	adds	r7, #12
 8013dd4:	46bd      	mov	sp, r7
 8013dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dda:	4770      	bx	lr

08013ddc <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 8013ddc:	b480      	push	{r7}
 8013dde:	b083      	sub	sp, #12
 8013de0:	af00      	add	r7, sp, #0
 8013de2:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	88db      	ldrh	r3, [r3, #6]
    }
 8013de8:	4618      	mov	r0, r3
 8013dea:	370c      	adds	r7, #12
 8013dec:	46bd      	mov	sp, r7
 8013dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013df2:	4770      	bx	lr

08013df4 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 8013df4:	b480      	push	{r7}
 8013df6:	b083      	sub	sp, #12
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	889b      	ldrh	r3, [r3, #4]
    }
 8013e00:	4618      	mov	r0, r3
 8013e02:	370c      	adds	r7, #12
 8013e04:	46bd      	mov	sp, r7
 8013e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e0a:	4770      	bx	lr

08013e0c <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8013e0c:	b480      	push	{r7}
 8013e0e:	b083      	sub	sp, #12
 8013e10:	af00      	add	r7, sp, #0
 8013e12:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	7a9b      	ldrb	r3, [r3, #10]
 8013e18:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8013e1c:	b2db      	uxtb	r3, r3
    }
 8013e1e:	4618      	mov	r0, r3
 8013e20:	370c      	adds	r7, #12
 8013e22:	46bd      	mov	sp, r7
 8013e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e28:	4770      	bx	lr

08013e2a <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8013e2a:	b480      	push	{r7}
 8013e2c:	b083      	sub	sp, #12
 8013e2e:	af00      	add	r7, sp, #0
 8013e30:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	7a9b      	ldrb	r3, [r3, #10]
 8013e36:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8013e3a:	b2db      	uxtb	r3, r3
    }
 8013e3c:	4618      	mov	r0, r3
 8013e3e:	370c      	adds	r7, #12
 8013e40:	46bd      	mov	sp, r7
 8013e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e46:	4770      	bx	lr

08013e48 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
    /**
     * Returns true if this Font is vector based. Default is false.
     *
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
 8013e48:	b480      	push	{r7}
 8013e4a:	b083      	sub	sp, #12
 8013e4c:	af00      	add	r7, sp, #0
 8013e4e:	6078      	str	r0, [r7, #4]
    {
        return false;
 8013e50:	2300      	movs	r3, #0
    }
 8013e52:	4618      	mov	r0, r3
 8013e54:	370c      	adds	r7, #12
 8013e56:	46bd      	mov	sp, r7
 8013e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e5c:	4770      	bx	lr

08013e5e <_ZNK8touchgfx4Font14getScaleFactorEv>:
    /**
     * Returns the scale factor
     *
     * @return The scale factor
     */
    virtual float getScaleFactor() const
 8013e5e:	b480      	push	{r7}
 8013e60:	b083      	sub	sp, #12
 8013e62:	af00      	add	r7, sp, #0
 8013e64:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8013e66:	f04f 0300 	mov.w	r3, #0
 8013e6a:	ee07 3a90 	vmov	s15, r3
    }
 8013e6e:	eeb0 0a67 	vmov.f32	s0, s15
 8013e72:	370c      	adds	r7, #12
 8013e74:	46bd      	mov	sp, r7
 8013e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e7a:	4770      	bx	lr

08013e7c <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8013e7c:	b580      	push	{r7, lr}
 8013e7e:	b082      	sub	sp, #8
 8013e80:	af00      	add	r7, sp, #0
 8013e82:	6078      	str	r0, [r7, #4]
 8013e84:	4a05      	ldr	r2, [pc, #20]	@ (8013e9c <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	601a      	str	r2, [r3, #0]
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	4618      	mov	r0, r3
 8013e8e:	f7ff ff4d 	bl	8013d2c <_ZN8touchgfx4FontD1Ev>
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	4618      	mov	r0, r3
 8013e96:	3708      	adds	r7, #8
 8013e98:	46bd      	mov	sp, r7
 8013e9a:	bd80      	pop	{r7, pc}
 8013e9c:	0802f034 	.word	0x0802f034

08013ea0 <_ZN8touchgfx9ConstFontD0Ev>:
 8013ea0:	b580      	push	{r7, lr}
 8013ea2:	b082      	sub	sp, #8
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	6078      	str	r0, [r7, #4]
 8013ea8:	6878      	ldr	r0, [r7, #4]
 8013eaa:	f7ff ffe7 	bl	8013e7c <_ZN8touchgfx9ConstFontD1Ev>
 8013eae:	211c      	movs	r1, #28
 8013eb0:	6878      	ldr	r0, [r7, #4]
 8013eb2:	f017 fdd2 	bl	802ba5a <_ZdlPvj>
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	4618      	mov	r0, r3
 8013eba:	3708      	adds	r7, #8
 8013ebc:	46bd      	mov	sp, r7
 8013ebe:	bd80      	pop	{r7, pc}

08013ec0 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 8013ec0:	b580      	push	{r7, lr}
 8013ec2:	b082      	sub	sp, #8
 8013ec4:	af00      	add	r7, sp, #0
 8013ec6:	6078      	str	r0, [r7, #4]
 8013ec8:	4a05      	ldr	r2, [pc, #20]	@ (8013ee0 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	601a      	str	r2, [r3, #0]
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	f7ff ffd3 	bl	8013e7c <_ZN8touchgfx9ConstFontD1Ev>
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	4618      	mov	r0, r3
 8013eda:	3708      	adds	r7, #8
 8013edc:	46bd      	mov	sp, r7
 8013ede:	bd80      	pop	{r7, pc}
 8013ee0:	0802e098 	.word	0x0802e098

08013ee4 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8013ee4:	b580      	push	{r7, lr}
 8013ee6:	b082      	sub	sp, #8
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	6078      	str	r0, [r7, #4]
 8013eec:	6878      	ldr	r0, [r7, #4]
 8013eee:	f7ff ffe7 	bl	8013ec0 <_ZN8touchgfx13GeneratedFontD1Ev>
 8013ef2:	212c      	movs	r1, #44	@ 0x2c
 8013ef4:	6878      	ldr	r0, [r7, #4]
 8013ef6:	f017 fdb0 	bl	802ba5a <_ZdlPvj>
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	4618      	mov	r0, r3
 8013efe:	3708      	adds	r7, #8
 8013f00:	46bd      	mov	sp, r7
 8013f02:	bd80      	pop	{r7, pc}

08013f04 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 8013f04:	b480      	push	{r7}
 8013f06:	b083      	sub	sp, #12
 8013f08:	af00      	add	r7, sp, #0
 8013f0a:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 8013f10:	4618      	mov	r0, r3
 8013f12:	370c      	adds	r7, #12
 8013f14:	46bd      	mov	sp, r7
 8013f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f1a:	4770      	bx	lr

08013f1c <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8013f1c:	b480      	push	{r7}
 8013f1e:	b083      	sub	sp, #12
 8013f20:	af00      	add	r7, sp, #0
 8013f22:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    }
 8013f28:	4618      	mov	r0, r3
 8013f2a:	370c      	adds	r7, #12
 8013f2c:	46bd      	mov	sp, r7
 8013f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f32:	4770      	bx	lr

08013f34 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
#include <fonts/GeneratedFont.hpp>
#include <math.h>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8013f34:	b580      	push	{r7, lr}
 8013f36:	b08e      	sub	sp, #56	@ 0x38
 8013f38:	af0a      	add	r7, sp, #40	@ 0x28
 8013f3a:	60f8      	str	r0, [r7, #12]
 8013f3c:	60b9      	str	r1, [r7, #8]
 8013f3e:	4611      	mov	r1, r2
 8013f40:	461a      	mov	r2, r3
 8013f42:	460b      	mov	r3, r1
 8013f44:	80fb      	strh	r3, [r7, #6]
 8013f46:	4613      	mov	r3, r2
 8013f48:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 8013f4a:	68f8      	ldr	r0, [r7, #12]
 8013f4c:	88b9      	ldrh	r1, [r7, #4]
 8013f4e:	88fa      	ldrh	r2, [r7, #6]
 8013f50:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8013f54:	9308      	str	r3, [sp, #32]
 8013f56:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013f58:	9307      	str	r3, [sp, #28]
 8013f5a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8013f5e:	9306      	str	r3, [sp, #24]
 8013f60:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8013f64:	9305      	str	r3, [sp, #20]
 8013f66:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8013f6a:	9304      	str	r3, [sp, #16]
 8013f6c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8013f70:	9303      	str	r3, [sp, #12]
 8013f72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013f76:	9302      	str	r3, [sp, #8]
 8013f78:	7f3b      	ldrb	r3, [r7, #28]
 8013f7a:	9301      	str	r3, [sp, #4]
 8013f7c:	8b3b      	ldrh	r3, [r7, #24]
 8013f7e:	9300      	str	r3, [sp, #0]
 8013f80:	460b      	mov	r3, r1
 8013f82:	68b9      	ldr	r1, [r7, #8]
 8013f84:	f00b fba2 	bl	801f6cc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8013f88:	4a09      	ldr	r2, [pc, #36]	@ (8013fb0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013f92:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 8013f94:	68fb      	ldr	r3, [r7, #12]
 8013f96:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013f98:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 8013f9a:	68fb      	ldr	r3, [r7, #12]
 8013f9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013f9e:	625a      	str	r2, [r3, #36]	@ 0x24
      arabicTable(formsTable)
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013fa4:	629a      	str	r2, [r3, #40]	@ 0x28
{
}
 8013fa6:	68fb      	ldr	r3, [r7, #12]
 8013fa8:	4618      	mov	r0, r3
 8013faa:	3710      	adds	r7, #16
 8013fac:	46bd      	mov	sp, r7
 8013fae:	bd80      	pop	{r7, pc}
 8013fb0:	0802e098 	.word	0x0802e098

08013fb4 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8013fb4:	b480      	push	{r7}
 8013fb6:	b085      	sub	sp, #20
 8013fb8:	af00      	add	r7, sp, #0
 8013fba:	6078      	str	r0, [r7, #4]
 8013fbc:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	69db      	ldr	r3, [r3, #28]
 8013fc2:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8013fc4:	683b      	ldr	r3, [r7, #0]
 8013fc6:	889b      	ldrh	r3, [r3, #4]
 8013fc8:	0adb      	lsrs	r3, r3, #11
 8013fca:	b29b      	uxth	r3, r3
 8013fcc:	009b      	lsls	r3, r3, #2
 8013fce:	68fa      	ldr	r2, [r7, #12]
 8013fd0:	4413      	add	r3, r2
 8013fd2:	681a      	ldr	r2, [r3, #0]
 8013fd4:	683b      	ldr	r3, [r7, #0]
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	4413      	add	r3, r2
}
 8013fda:	4618      	mov	r0, r3
 8013fdc:	3714      	adds	r7, #20
 8013fde:	46bd      	mov	sp, r7
 8013fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fe4:	4770      	bx	lr

08013fe6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8013fe6:	b480      	push	{r7}
 8013fe8:	b089      	sub	sp, #36	@ 0x24
 8013fea:	af00      	add	r7, sp, #0
 8013fec:	60f8      	str	r0, [r7, #12]
 8013fee:	460b      	mov	r3, r1
 8013ff0:	607a      	str	r2, [r7, #4]
 8013ff2:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d003      	beq.n	8014002 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	7b1b      	ldrb	r3, [r3, #12]
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d101      	bne.n	8014006 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8014002:	2300      	movs	r3, #0
 8014004:	e031      	b.n	801406a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	6a1a      	ldr	r2, [r3, #32]
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 801400e:	697b      	ldr	r3, [r7, #20]
 8014010:	7b5b      	ldrb	r3, [r3, #13]
 8014012:	021b      	lsls	r3, r3, #8
 8014014:	b21b      	sxth	r3, r3
 8014016:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801401a:	b219      	sxth	r1, r3
 801401c:	697b      	ldr	r3, [r7, #20]
 801401e:	7adb      	ldrb	r3, [r3, #11]
 8014020:	b21b      	sxth	r3, r3
 8014022:	430b      	orrs	r3, r1
 8014024:	b21b      	sxth	r3, r3
 8014026:	b29b      	uxth	r3, r3
 8014028:	009b      	lsls	r3, r3, #2
 801402a:	4413      	add	r3, r2
 801402c:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	7b1b      	ldrb	r3, [r3, #12]
 8014032:	837b      	strh	r3, [r7, #26]
 8014034:	e013      	b.n	801405e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x78>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8014036:	69fb      	ldr	r3, [r7, #28]
 8014038:	881b      	ldrh	r3, [r3, #0]
 801403a:	897a      	ldrh	r2, [r7, #10]
 801403c:	429a      	cmp	r2, r3
 801403e:	d103      	bne.n	8014048 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x62>
        {
            return kerndata->distance;
 8014040:	69fb      	ldr	r3, [r7, #28]
 8014042:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8014046:	e010      	b.n	801406a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8014048:	69fb      	ldr	r3, [r7, #28]
 801404a:	881b      	ldrh	r3, [r3, #0]
 801404c:	897a      	ldrh	r2, [r7, #10]
 801404e:	429a      	cmp	r2, r3
 8014050:	d309      	bcc.n	8014066 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8014052:	8b7b      	ldrh	r3, [r7, #26]
 8014054:	3b01      	subs	r3, #1
 8014056:	837b      	strh	r3, [r7, #26]
 8014058:	69fb      	ldr	r3, [r7, #28]
 801405a:	3304      	adds	r3, #4
 801405c:	61fb      	str	r3, [r7, #28]
 801405e:	8b7b      	ldrh	r3, [r7, #26]
 8014060:	2b00      	cmp	r3, #0
 8014062:	d1e8      	bne.n	8014036 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x50>
 8014064:	e000      	b.n	8014068 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        {
            break;
 8014066:	bf00      	nop
        }
    }
    return 0;
 8014068:	2300      	movs	r3, #0
}
 801406a:	4618      	mov	r0, r3
 801406c:	3724      	adds	r7, #36	@ 0x24
 801406e:	46bd      	mov	sp, r7
 8014070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014074:	4770      	bx	lr
	...

08014078 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8014078:	b580      	push	{r7, lr}
 801407a:	af00      	add	r7, sp, #0
 801407c:	4801      	ldr	r0, [pc, #4]	@ (8014084 <__tcf_0+0xc>)
 801407e:	f7ff ff1f 	bl	8013ec0 <_ZN8touchgfx13GeneratedFontD1Ev>
 8014082:	bd80      	pop	{r7, pc}
 8014084:	24032f0c 	.word	0x24032f0c

08014088 <_Z23getFont_verdana_10_4bppv>:
{
 8014088:	b580      	push	{r7, lr}
 801408a:	b08e      	sub	sp, #56	@ 0x38
 801408c:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 801408e:	4b21      	ldr	r3, [pc, #132]	@ (8014114 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	f3bf 8f5b 	dmb	ish
 8014096:	f003 0301 	and.w	r3, r3, #1
 801409a:	2b00      	cmp	r3, #0
 801409c:	bf0c      	ite	eq
 801409e:	2301      	moveq	r3, #1
 80140a0:	2300      	movne	r3, #0
 80140a2:	b2db      	uxtb	r3, r3
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d030      	beq.n	801410a <_Z23getFont_verdana_10_4bppv+0x82>
 80140a8:	481a      	ldr	r0, [pc, #104]	@ (8014114 <_Z23getFont_verdana_10_4bppv+0x8c>)
 80140aa:	f017 fcd8 	bl	802ba5e <__cxa_guard_acquire>
 80140ae:	4603      	mov	r3, r0
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	bf14      	ite	ne
 80140b4:	2301      	movne	r3, #1
 80140b6:	2300      	moveq	r3, #0
 80140b8:	b2db      	uxtb	r3, r3
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d025      	beq.n	801410a <_Z23getFont_verdana_10_4bppv+0x82>
 80140be:	2300      	movs	r3, #0
 80140c0:	930c      	str	r3, [sp, #48]	@ 0x30
 80140c2:	2300      	movs	r3, #0
 80140c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80140c6:	2300      	movs	r3, #0
 80140c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80140ca:	233f      	movs	r3, #63	@ 0x3f
 80140cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80140ce:	4b12      	ldr	r3, [pc, #72]	@ (8014118 <_Z23getFont_verdana_10_4bppv+0x90>)
 80140d0:	9308      	str	r3, [sp, #32]
 80140d2:	4b12      	ldr	r3, [pc, #72]	@ (801411c <_Z23getFont_verdana_10_4bppv+0x94>)
 80140d4:	9307      	str	r3, [sp, #28]
 80140d6:	2300      	movs	r3, #0
 80140d8:	9306      	str	r3, [sp, #24]
 80140da:	2300      	movs	r3, #0
 80140dc:	9305      	str	r3, [sp, #20]
 80140de:	2301      	movs	r3, #1
 80140e0:	9304      	str	r3, [sp, #16]
 80140e2:	2304      	movs	r3, #4
 80140e4:	9303      	str	r3, [sp, #12]
 80140e6:	2300      	movs	r3, #0
 80140e8:	9302      	str	r3, [sp, #8]
 80140ea:	2300      	movs	r3, #0
 80140ec:	9301      	str	r3, [sp, #4]
 80140ee:	230a      	movs	r3, #10
 80140f0:	9300      	str	r3, [sp, #0]
 80140f2:	230a      	movs	r3, #10
 80140f4:	2201      	movs	r2, #1
 80140f6:	490a      	ldr	r1, [pc, #40]	@ (8014120 <_Z23getFont_verdana_10_4bppv+0x98>)
 80140f8:	480a      	ldr	r0, [pc, #40]	@ (8014124 <_Z23getFont_verdana_10_4bppv+0x9c>)
 80140fa:	f7ff ff1b 	bl	8013f34 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80140fe:	480a      	ldr	r0, [pc, #40]	@ (8014128 <_Z23getFont_verdana_10_4bppv+0xa0>)
 8014100:	f018 f840 	bl	802c184 <atexit>
 8014104:	4803      	ldr	r0, [pc, #12]	@ (8014114 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8014106:	f017 fcb6 	bl	802ba76 <__cxa_guard_release>
    return verdana_10_4bpp;
 801410a:	4b06      	ldr	r3, [pc, #24]	@ (8014124 <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 801410c:	4618      	mov	r0, r3
 801410e:	46bd      	mov	sp, r7
 8014110:	bd80      	pop	{r7, pc}
 8014112:	bf00      	nop
 8014114:	24032f38 	.word	0x24032f38
 8014118:	0802f6f4 	.word	0x0802f6f4
 801411c:	0802f700 	.word	0x0802f700
 8014120:	0802f6c4 	.word	0x0802f6c4
 8014124:	24032f0c 	.word	0x24032f0c
 8014128:	08014079 	.word	0x08014079

0801412c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 801412c:	b580      	push	{r7, lr}
 801412e:	af00      	add	r7, sp, #0
 8014130:	4801      	ldr	r0, [pc, #4]	@ (8014138 <__tcf_0+0xc>)
 8014132:	f7ff fec5 	bl	8013ec0 <_ZN8touchgfx13GeneratedFontD1Ev>
 8014136:	bd80      	pop	{r7, pc}
 8014138:	24032f3c 	.word	0x24032f3c

0801413c <_Z23getFont_verdana_20_4bppv>:
{
 801413c:	b580      	push	{r7, lr}
 801413e:	b08e      	sub	sp, #56	@ 0x38
 8014140:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8014142:	4b21      	ldr	r3, [pc, #132]	@ (80141c8 <_Z23getFont_verdana_20_4bppv+0x8c>)
 8014144:	681b      	ldr	r3, [r3, #0]
 8014146:	f3bf 8f5b 	dmb	ish
 801414a:	f003 0301 	and.w	r3, r3, #1
 801414e:	2b00      	cmp	r3, #0
 8014150:	bf0c      	ite	eq
 8014152:	2301      	moveq	r3, #1
 8014154:	2300      	movne	r3, #0
 8014156:	b2db      	uxtb	r3, r3
 8014158:	2b00      	cmp	r3, #0
 801415a:	d030      	beq.n	80141be <_Z23getFont_verdana_20_4bppv+0x82>
 801415c:	481a      	ldr	r0, [pc, #104]	@ (80141c8 <_Z23getFont_verdana_20_4bppv+0x8c>)
 801415e:	f017 fc7e 	bl	802ba5e <__cxa_guard_acquire>
 8014162:	4603      	mov	r3, r0
 8014164:	2b00      	cmp	r3, #0
 8014166:	bf14      	ite	ne
 8014168:	2301      	movne	r3, #1
 801416a:	2300      	moveq	r3, #0
 801416c:	b2db      	uxtb	r3, r3
 801416e:	2b00      	cmp	r3, #0
 8014170:	d025      	beq.n	80141be <_Z23getFont_verdana_20_4bppv+0x82>
 8014172:	2300      	movs	r3, #0
 8014174:	930c      	str	r3, [sp, #48]	@ 0x30
 8014176:	2300      	movs	r3, #0
 8014178:	930b      	str	r3, [sp, #44]	@ 0x2c
 801417a:	2300      	movs	r3, #0
 801417c:	930a      	str	r3, [sp, #40]	@ 0x28
 801417e:	233f      	movs	r3, #63	@ 0x3f
 8014180:	9309      	str	r3, [sp, #36]	@ 0x24
 8014182:	4b12      	ldr	r3, [pc, #72]	@ (80141cc <_Z23getFont_verdana_20_4bppv+0x90>)
 8014184:	9308      	str	r3, [sp, #32]
 8014186:	4b12      	ldr	r3, [pc, #72]	@ (80141d0 <_Z23getFont_verdana_20_4bppv+0x94>)
 8014188:	9307      	str	r3, [sp, #28]
 801418a:	2300      	movs	r3, #0
 801418c:	9306      	str	r3, [sp, #24]
 801418e:	2300      	movs	r3, #0
 8014190:	9305      	str	r3, [sp, #20]
 8014192:	2301      	movs	r3, #1
 8014194:	9304      	str	r3, [sp, #16]
 8014196:	2304      	movs	r3, #4
 8014198:	9303      	str	r3, [sp, #12]
 801419a:	2300      	movs	r3, #0
 801419c:	9302      	str	r3, [sp, #8]
 801419e:	2300      	movs	r3, #0
 80141a0:	9301      	str	r3, [sp, #4]
 80141a2:	2314      	movs	r3, #20
 80141a4:	9300      	str	r3, [sp, #0]
 80141a6:	2314      	movs	r3, #20
 80141a8:	2201      	movs	r2, #1
 80141aa:	490a      	ldr	r1, [pc, #40]	@ (80141d4 <_Z23getFont_verdana_20_4bppv+0x98>)
 80141ac:	480a      	ldr	r0, [pc, #40]	@ (80141d8 <_Z23getFont_verdana_20_4bppv+0x9c>)
 80141ae:	f7ff fec1 	bl	8013f34 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80141b2:	480a      	ldr	r0, [pc, #40]	@ (80141dc <_Z23getFont_verdana_20_4bppv+0xa0>)
 80141b4:	f017 ffe6 	bl	802c184 <atexit>
 80141b8:	4803      	ldr	r0, [pc, #12]	@ (80141c8 <_Z23getFont_verdana_20_4bppv+0x8c>)
 80141ba:	f017 fc5c 	bl	802ba76 <__cxa_guard_release>
    return verdana_20_4bpp;
 80141be:	4b06      	ldr	r3, [pc, #24]	@ (80141d8 <_Z23getFont_verdana_20_4bppv+0x9c>)
}
 80141c0:	4618      	mov	r0, r3
 80141c2:	46bd      	mov	sp, r7
 80141c4:	bd80      	pop	{r7, pc}
 80141c6:	bf00      	nop
 80141c8:	24032f68 	.word	0x24032f68
 80141cc:	0802f6f8 	.word	0x0802f6f8
 80141d0:	0802f704 	.word	0x0802f704
 80141d4:	0802f6d4 	.word	0x0802f6d4
 80141d8:	24032f3c 	.word	0x24032f3c
 80141dc:	0801412d 	.word	0x0801412d

080141e0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80141e0:	b580      	push	{r7, lr}
 80141e2:	af00      	add	r7, sp, #0
 80141e4:	4801      	ldr	r0, [pc, #4]	@ (80141ec <__tcf_0+0xc>)
 80141e6:	f7ff fe6b 	bl	8013ec0 <_ZN8touchgfx13GeneratedFontD1Ev>
 80141ea:	bd80      	pop	{r7, pc}
 80141ec:	24032f6c 	.word	0x24032f6c

080141f0 <_Z23getFont_verdana_40_4bppv>:
{
 80141f0:	b580      	push	{r7, lr}
 80141f2:	b08e      	sub	sp, #56	@ 0x38
 80141f4:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80141f6:	4b21      	ldr	r3, [pc, #132]	@ (801427c <_Z23getFont_verdana_40_4bppv+0x8c>)
 80141f8:	681b      	ldr	r3, [r3, #0]
 80141fa:	f3bf 8f5b 	dmb	ish
 80141fe:	f003 0301 	and.w	r3, r3, #1
 8014202:	2b00      	cmp	r3, #0
 8014204:	bf0c      	ite	eq
 8014206:	2301      	moveq	r3, #1
 8014208:	2300      	movne	r3, #0
 801420a:	b2db      	uxtb	r3, r3
 801420c:	2b00      	cmp	r3, #0
 801420e:	d030      	beq.n	8014272 <_Z23getFont_verdana_40_4bppv+0x82>
 8014210:	481a      	ldr	r0, [pc, #104]	@ (801427c <_Z23getFont_verdana_40_4bppv+0x8c>)
 8014212:	f017 fc24 	bl	802ba5e <__cxa_guard_acquire>
 8014216:	4603      	mov	r3, r0
 8014218:	2b00      	cmp	r3, #0
 801421a:	bf14      	ite	ne
 801421c:	2301      	movne	r3, #1
 801421e:	2300      	moveq	r3, #0
 8014220:	b2db      	uxtb	r3, r3
 8014222:	2b00      	cmp	r3, #0
 8014224:	d025      	beq.n	8014272 <_Z23getFont_verdana_40_4bppv+0x82>
 8014226:	2300      	movs	r3, #0
 8014228:	930c      	str	r3, [sp, #48]	@ 0x30
 801422a:	2300      	movs	r3, #0
 801422c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801422e:	2300      	movs	r3, #0
 8014230:	930a      	str	r3, [sp, #40]	@ 0x28
 8014232:	233f      	movs	r3, #63	@ 0x3f
 8014234:	9309      	str	r3, [sp, #36]	@ 0x24
 8014236:	4b12      	ldr	r3, [pc, #72]	@ (8014280 <_Z23getFont_verdana_40_4bppv+0x90>)
 8014238:	9308      	str	r3, [sp, #32]
 801423a:	4b12      	ldr	r3, [pc, #72]	@ (8014284 <_Z23getFont_verdana_40_4bppv+0x94>)
 801423c:	9307      	str	r3, [sp, #28]
 801423e:	2300      	movs	r3, #0
 8014240:	9306      	str	r3, [sp, #24]
 8014242:	2300      	movs	r3, #0
 8014244:	9305      	str	r3, [sp, #20]
 8014246:	2301      	movs	r3, #1
 8014248:	9304      	str	r3, [sp, #16]
 801424a:	2304      	movs	r3, #4
 801424c:	9303      	str	r3, [sp, #12]
 801424e:	2300      	movs	r3, #0
 8014250:	9302      	str	r3, [sp, #8]
 8014252:	2300      	movs	r3, #0
 8014254:	9301      	str	r3, [sp, #4]
 8014256:	2328      	movs	r3, #40	@ 0x28
 8014258:	9300      	str	r3, [sp, #0]
 801425a:	2328      	movs	r3, #40	@ 0x28
 801425c:	2201      	movs	r2, #1
 801425e:	490a      	ldr	r1, [pc, #40]	@ (8014288 <_Z23getFont_verdana_40_4bppv+0x98>)
 8014260:	480a      	ldr	r0, [pc, #40]	@ (801428c <_Z23getFont_verdana_40_4bppv+0x9c>)
 8014262:	f7ff fe67 	bl	8013f34 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8014266:	480a      	ldr	r0, [pc, #40]	@ (8014290 <_Z23getFont_verdana_40_4bppv+0xa0>)
 8014268:	f017 ff8c 	bl	802c184 <atexit>
 801426c:	4803      	ldr	r0, [pc, #12]	@ (801427c <_Z23getFont_verdana_40_4bppv+0x8c>)
 801426e:	f017 fc02 	bl	802ba76 <__cxa_guard_release>
    return verdana_40_4bpp;
 8014272:	4b06      	ldr	r3, [pc, #24]	@ (801428c <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 8014274:	4618      	mov	r0, r3
 8014276:	46bd      	mov	sp, r7
 8014278:	bd80      	pop	{r7, pc}
 801427a:	bf00      	nop
 801427c:	24032f98 	.word	0x24032f98
 8014280:	0802f6fc 	.word	0x0802f6fc
 8014284:	0802f708 	.word	0x0802f708
 8014288:	0802f6e4 	.word	0x0802f6e4
 801428c:	24032f6c 	.word	0x24032f6c
 8014290:	080141e1 	.word	0x080141e1

08014294 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>:
/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */
#include <touchgfx/VectorFontRendererImpl.hpp>

void touchgfx::VectorFontRendererImpl::getVectorFontBuffers(float*& pointArray, int& pointArraySize, uint8_t*& commandArray, int& commandArraySize)
{
 8014294:	b480      	push	{r7}
 8014296:	b085      	sub	sp, #20
 8014298:	af00      	add	r7, sp, #0
 801429a:	60f8      	str	r0, [r7, #12]
 801429c:	60b9      	str	r1, [r7, #8]
 801429e:	607a      	str	r2, [r7, #4]
 80142a0:	603b      	str	r3, [r7, #0]
    pointArray = 0;
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	2200      	movs	r2, #0
 80142a6:	601a      	str	r2, [r3, #0]
    pointArraySize = 0;
 80142a8:	68bb      	ldr	r3, [r7, #8]
 80142aa:	2200      	movs	r2, #0
 80142ac:	601a      	str	r2, [r3, #0]
    commandArray = 0;
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	2200      	movs	r2, #0
 80142b2:	601a      	str	r2, [r3, #0]
    commandArraySize = 0;
 80142b4:	683b      	ldr	r3, [r7, #0]
 80142b6:	2200      	movs	r2, #0
 80142b8:	601a      	str	r2, [r3, #0]
}
 80142ba:	bf00      	nop
 80142bc:	3714      	adds	r7, #20
 80142be:	46bd      	mov	sp, r7
 80142c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142c4:	4770      	bx	lr

080142c6 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80142c6:	b480      	push	{r7}
 80142c8:	b083      	sub	sp, #12
 80142ca:	af00      	add	r7, sp, #0
 80142cc:	6078      	str	r0, [r7, #4]
 80142ce:	6039      	str	r1, [r7, #0]
 80142d0:	683b      	ldr	r3, [r7, #0]
 80142d2:	4618      	mov	r0, r3
 80142d4:	370c      	adds	r7, #12
 80142d6:	46bd      	mov	sp, r7
 80142d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142dc:	4770      	bx	lr

080142de <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80142de:	b480      	push	{r7}
 80142e0:	b083      	sub	sp, #12
 80142e2:	af00      	add	r7, sp, #0
 80142e4:	6078      	str	r0, [r7, #4]
 80142e6:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80142e8:	bf00      	nop
 80142ea:	370c      	adds	r7, #12
 80142ec:	46bd      	mov	sp, r7
 80142ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142f2:	4770      	bx	lr

080142f4 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 80142f4:	b480      	push	{r7}
 80142f6:	b083      	sub	sp, #12
 80142f8:	af00      	add	r7, sp, #0
 80142fa:	6078      	str	r0, [r7, #4]
 80142fc:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80142fe:	bf00      	nop
 8014300:	370c      	adds	r7, #12
 8014302:	46bd      	mov	sp, r7
 8014304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014308:	4770      	bx	lr

0801430a <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 801430a:	b480      	push	{r7}
 801430c:	b083      	sub	sp, #12
 801430e:	af00      	add	r7, sp, #0
 8014310:	6078      	str	r0, [r7, #4]
 8014312:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8014314:	bf00      	nop
 8014316:	370c      	adds	r7, #12
 8014318:	46bd      	mov	sp, r7
 801431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801431e:	4770      	bx	lr

08014320 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8014320:	b480      	push	{r7}
 8014322:	b083      	sub	sp, #12
 8014324:	af00      	add	r7, sp, #0
 8014326:	6078      	str	r0, [r7, #4]
 8014328:	460b      	mov	r3, r1
 801432a:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 801432c:	bf00      	nop
 801432e:	370c      	adds	r7, #12
 8014330:	46bd      	mov	sp, r7
 8014332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014336:	4770      	bx	lr

08014338 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8014338:	b480      	push	{r7}
 801433a:	b083      	sub	sp, #12
 801433c:	af00      	add	r7, sp, #0
 801433e:	6078      	str	r0, [r7, #4]
    {
    }
 8014340:	bf00      	nop
 8014342:	370c      	adds	r7, #12
 8014344:	46bd      	mov	sp, r7
 8014346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801434a:	4770      	bx	lr

0801434c <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 801434c:	b480      	push	{r7}
 801434e:	b083      	sub	sp, #12
 8014350:	af00      	add	r7, sp, #0
 8014352:	6078      	str	r0, [r7, #4]
    {
    }
 8014354:	bf00      	nop
 8014356:	370c      	adds	r7, #12
 8014358:	46bd      	mov	sp, r7
 801435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801435e:	4770      	bx	lr

08014360 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8014360:	b480      	push	{r7}
 8014362:	b083      	sub	sp, #12
 8014364:	af00      	add	r7, sp, #0
 8014366:	6078      	str	r0, [r7, #4]
    {
 8014368:	4a04      	ldr	r2, [pc, #16]	@ (801437c <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	601a      	str	r2, [r3, #0]
    }
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	4618      	mov	r0, r3
 8014372:	370c      	adds	r7, #12
 8014374:	46bd      	mov	sp, r7
 8014376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801437a:	4770      	bx	lr
 801437c:	0802e220 	.word	0x0802e220

08014380 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8014380:	b580      	push	{r7, lr}
 8014382:	b082      	sub	sp, #8
 8014384:	af00      	add	r7, sp, #0
 8014386:	6078      	str	r0, [r7, #4]
    }
 8014388:	6878      	ldr	r0, [r7, #4]
 801438a:	f7ff ffe9 	bl	8014360 <_ZN8touchgfx15UIEventListenerD1Ev>
 801438e:	2104      	movs	r1, #4
 8014390:	6878      	ldr	r0, [r7, #4]
 8014392:	f017 fb62 	bl	802ba5a <_ZdlPvj>
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	4618      	mov	r0, r3
 801439a:	3708      	adds	r7, #8
 801439c:	46bd      	mov	sp, r7
 801439e:	bd80      	pop	{r7, pc}

080143a0 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 80143a0:	b480      	push	{r7}
 80143a2:	b083      	sub	sp, #12
 80143a4:	af00      	add	r7, sp, #0
 80143a6:	6078      	str	r0, [r7, #4]
    {
    }
 80143a8:	bf00      	nop
 80143aa:	370c      	adds	r7, #12
 80143ac:	46bd      	mov	sp, r7
 80143ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143b2:	4770      	bx	lr

080143b4 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 80143b4:	b480      	push	{r7}
 80143b6:	b083      	sub	sp, #12
 80143b8:	af00      	add	r7, sp, #0
 80143ba:	6078      	str	r0, [r7, #4]
 80143bc:	460b      	mov	r3, r1
 80143be:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 80143c0:	bf00      	nop
 80143c2:	370c      	adds	r7, #12
 80143c4:	46bd      	mov	sp, r7
 80143c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ca:	4770      	bx	lr

080143cc <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 80143cc:	b480      	push	{r7}
 80143ce:	b083      	sub	sp, #12
 80143d0:	af00      	add	r7, sp, #0
 80143d2:	6078      	str	r0, [r7, #4]
 80143d4:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	683a      	ldr	r2, [r7, #0]
 80143da:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 80143de:	6810      	ldr	r0, [r2, #0]
 80143e0:	6851      	ldr	r1, [r2, #4]
 80143e2:	c303      	stmia	r3!, {r0, r1}
    }
 80143e4:	bf00      	nop
 80143e6:	370c      	adds	r7, #12
 80143e8:	46bd      	mov	sp, r7
 80143ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ee:	4770      	bx	lr

080143f0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 80143f0:	b580      	push	{r7, lr}
 80143f2:	b082      	sub	sp, #8
 80143f4:	af00      	add	r7, sp, #0
 80143f6:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	3304      	adds	r3, #4
 80143fc:	4618      	mov	r0, r3
 80143fe:	f009 fd48 	bl	801de92 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 8014402:	bf00      	nop
 8014404:	3708      	adds	r7, #8
 8014406:	46bd      	mov	sp, r7
 8014408:	bd80      	pop	{r7, pc}
	...

0801440c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 801440c:	b480      	push	{r7}
 801440e:	b083      	sub	sp, #12
 8014410:	af00      	add	r7, sp, #0
 8014412:	6078      	str	r0, [r7, #4]
    {
 8014414:	4a04      	ldr	r2, [pc, #16]	@ (8014428 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	601a      	str	r2, [r3, #0]
    }
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	4618      	mov	r0, r3
 801441e:	370c      	adds	r7, #12
 8014420:	46bd      	mov	sp, r7
 8014422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014426:	4770      	bx	lr
 8014428:	0802e208 	.word	0x0802e208

0801442c <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 801442c:	b580      	push	{r7, lr}
 801442e:	b082      	sub	sp, #8
 8014430:	af00      	add	r7, sp, #0
 8014432:	6078      	str	r0, [r7, #4]
    }
 8014434:	6878      	ldr	r0, [r7, #4]
 8014436:	f7ff ffe9 	bl	801440c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 801443a:	2104      	movs	r1, #4
 801443c:	6878      	ldr	r0, [r7, #4]
 801443e:	f017 fb0c 	bl	802ba5a <_ZdlPvj>
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	4618      	mov	r0, r3
 8014446:	3708      	adds	r7, #8
 8014448:	46bd      	mov	sp, r7
 801444a:	bd80      	pop	{r7, pc}

0801444c <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 801444c:	b480      	push	{r7}
 801444e:	af00      	add	r7, sp, #0
    {
        return instance;
 8014450:	4b03      	ldr	r3, [pc, #12]	@ (8014460 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8014452:	681b      	ldr	r3, [r3, #0]
    }
 8014454:	4618      	mov	r0, r3
 8014456:	46bd      	mov	sp, r7
 8014458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801445c:	4770      	bx	lr
 801445e:	bf00      	nop
 8014460:	2403422c 	.word	0x2403422c

08014464 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 8014464:	b480      	push	{r7}
 8014466:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8014468:	4b0b      	ldr	r3, [pc, #44]	@ (8014498 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8014470:	2b00      	cmp	r3, #0
 8014472:	d008      	beq.n	8014486 <_ZN8touchgfx3HAL3lcdEv+0x22>
 8014474:	4b08      	ldr	r3, [pc, #32]	@ (8014498 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8014476:	681b      	ldr	r3, [r3, #0]
 8014478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801447a:	2b00      	cmp	r3, #0
 801447c:	d003      	beq.n	8014486 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 801447e:	4b06      	ldr	r3, [pc, #24]	@ (8014498 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8014480:	681b      	ldr	r3, [r3, #0]
 8014482:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014484:	e002      	b.n	801448c <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 8014486:	4b04      	ldr	r3, [pc, #16]	@ (8014498 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	689b      	ldr	r3, [r3, #8]
    }
 801448c:	4618      	mov	r0, r3
 801448e:	46bd      	mov	sp, r7
 8014490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014494:	4770      	bx	lr
 8014496:	bf00      	nop
 8014498:	2403422c 	.word	0x2403422c

0801449c <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 801449c:	b480      	push	{r7}
 801449e:	b083      	sub	sp, #12
 80144a0:	af00      	add	r7, sp, #0
 80144a2:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 80144a4:	4a07      	ldr	r2, [pc, #28]	@ (80144c4 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	601a      	str	r2, [r3, #0]
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	2200      	movs	r2, #0
 80144ae:	605a      	str	r2, [r3, #4]
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	2200      	movs	r2, #0
 80144b4:	721a      	strb	r2, [r3, #8]
    {
    }
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	4618      	mov	r0, r3
 80144ba:	370c      	adds	r7, #12
 80144bc:	46bd      	mov	sp, r7
 80144be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144c2:	4770      	bx	lr
 80144c4:	0802e1e4 	.word	0x0802e1e4

080144c8 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 80144c8:	b480      	push	{r7}
 80144ca:	b083      	sub	sp, #12
 80144cc:	af00      	add	r7, sp, #0
 80144ce:	6078      	str	r0, [r7, #4]
    {
 80144d0:	4a04      	ldr	r2, [pc, #16]	@ (80144e4 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	601a      	str	r2, [r3, #0]
    }
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	4618      	mov	r0, r3
 80144da:	370c      	adds	r7, #12
 80144dc:	46bd      	mov	sp, r7
 80144de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144e2:	4770      	bx	lr
 80144e4:	0802e1e4 	.word	0x0802e1e4

080144e8 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 80144e8:	b580      	push	{r7, lr}
 80144ea:	b082      	sub	sp, #8
 80144ec:	af00      	add	r7, sp, #0
 80144ee:	6078      	str	r0, [r7, #4]
    }
 80144f0:	6878      	ldr	r0, [r7, #4]
 80144f2:	f7ff ffe9 	bl	80144c8 <_ZN8touchgfx10TransitionD1Ev>
 80144f6:	210c      	movs	r1, #12
 80144f8:	6878      	ldr	r0, [r7, #4]
 80144fa:	f017 faae 	bl	802ba5a <_ZdlPvj>
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	4618      	mov	r0, r3
 8014502:	3708      	adds	r7, #8
 8014504:	46bd      	mov	sp, r7
 8014506:	bd80      	pop	{r7, pc}

08014508 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8014508:	b480      	push	{r7}
 801450a:	b083      	sub	sp, #12
 801450c:	af00      	add	r7, sp, #0
 801450e:	6078      	str	r0, [r7, #4]
    {
    }
 8014510:	bf00      	nop
 8014512:	370c      	adds	r7, #12
 8014514:	46bd      	mov	sp, r7
 8014516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801451a:	4770      	bx	lr

0801451c <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 801451c:	b480      	push	{r7}
 801451e:	b083      	sub	sp, #12
 8014520:	af00      	add	r7, sp, #0
 8014522:	6078      	str	r0, [r7, #4]
    {
    }
 8014524:	bf00      	nop
 8014526:	370c      	adds	r7, #12
 8014528:	46bd      	mov	sp, r7
 801452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801452e:	4770      	bx	lr

08014530 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8014530:	b480      	push	{r7}
 8014532:	b083      	sub	sp, #12
 8014534:	af00      	add	r7, sp, #0
 8014536:	6078      	str	r0, [r7, #4]
    {
    }
 8014538:	bf00      	nop
 801453a:	370c      	adds	r7, #12
 801453c:	46bd      	mov	sp, r7
 801453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014542:	4770      	bx	lr

08014544 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8014544:	b580      	push	{r7, lr}
 8014546:	b082      	sub	sp, #8
 8014548:	af00      	add	r7, sp, #0
 801454a:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 801454c:	f009 fc7c 	bl	801de48 <_ZN8touchgfx11Application11getInstanceEv>
 8014550:	4603      	mov	r3, r0
 8014552:	681a      	ldr	r2, [r3, #0]
 8014554:	323c      	adds	r2, #60	@ 0x3c
 8014556:	6812      	ldr	r2, [r2, #0]
 8014558:	4618      	mov	r0, r3
 801455a:	4790      	blx	r2
    }
 801455c:	bf00      	nop
 801455e:	3708      	adds	r7, #8
 8014560:	46bd      	mov	sp, r7
 8014562:	bd80      	pop	{r7, pc}

08014564 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8014564:	b480      	push	{r7}
 8014566:	b083      	sub	sp, #12
 8014568:	af00      	add	r7, sp, #0
 801456a:	6078      	str	r0, [r7, #4]
 801456c:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	683a      	ldr	r2, [r7, #0]
 8014572:	605a      	str	r2, [r3, #4]
    }
 8014574:	bf00      	nop
 8014576:	370c      	adds	r7, #12
 8014578:	46bd      	mov	sp, r7
 801457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801457e:	4770      	bx	lr

08014580 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8014580:	b580      	push	{r7, lr}
 8014582:	b082      	sub	sp, #8
 8014584:	af00      	add	r7, sp, #0
 8014586:	6078      	str	r0, [r7, #4]
 8014588:	4a05      	ldr	r2, [pc, #20]	@ (80145a0 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	601a      	str	r2, [r3, #0]
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	4618      	mov	r0, r3
 8014592:	f7ff fee5 	bl	8014360 <_ZN8touchgfx15UIEventListenerD1Ev>
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	4618      	mov	r0, r3
 801459a:	3708      	adds	r7, #8
 801459c:	46bd      	mov	sp, r7
 801459e:	bd80      	pop	{r7, pc}
 80145a0:	0802ef64 	.word	0x0802ef64

080145a4 <_ZN8touchgfx11ApplicationD0Ev>:
 80145a4:	b580      	push	{r7, lr}
 80145a6:	b082      	sub	sp, #8
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	6078      	str	r0, [r7, #4]
 80145ac:	6878      	ldr	r0, [r7, #4]
 80145ae:	f7ff ffe7 	bl	8014580 <_ZN8touchgfx11ApplicationD1Ev>
 80145b2:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 80145b6:	6878      	ldr	r0, [r7, #4]
 80145b8:	f017 fa4f 	bl	802ba5a <_ZdlPvj>
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	4618      	mov	r0, r3
 80145c0:	3708      	adds	r7, #8
 80145c2:	46bd      	mov	sp, r7
 80145c4:	bd80      	pop	{r7, pc}
	...

080145c8 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 80145c8:	b580      	push	{r7, lr}
 80145ca:	b082      	sub	sp, #8
 80145cc:	af00      	add	r7, sp, #0
 80145ce:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	4618      	mov	r0, r3
 80145d4:	f009 fcfe 	bl	801dfd4 <_ZN8touchgfx11ApplicationC1Ev>
 80145d8:	4a09      	ldr	r2, [pc, #36]	@ (8014600 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	601a      	str	r2, [r3, #0]
        : currentPresenter(0),
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	2200      	movs	r2, #0
 80145e2:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
          pendingScreenTransitionCallback(0)
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	2200      	movs	r2, #0
 80145ea:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    {
        instance = this;
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	4a04      	ldr	r2, [pc, #16]	@ (8014604 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 80145f2:	6013      	str	r3, [r2, #0]
    }
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	4618      	mov	r0, r3
 80145f8:	3708      	adds	r7, #8
 80145fa:	46bd      	mov	sp, r7
 80145fc:	bd80      	pop	{r7, pc}
 80145fe:	bf00      	nop
 8014600:	0802e190 	.word	0x0802e190
 8014604:	24034280 	.word	0x24034280

08014608 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8014608:	b580      	push	{r7, lr}
 801460a:	b082      	sub	sp, #8
 801460c:	af00      	add	r7, sp, #0
 801460e:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8014610:	6878      	ldr	r0, [r7, #4]
 8014612:	f000 f804 	bl	801461e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8014616:	bf00      	nop
 8014618:	3708      	adds	r7, #8
 801461a:	46bd      	mov	sp, r7
 801461c:	bd80      	pop	{r7, pc}

0801461e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 801461e:	b580      	push	{r7, lr}
 8014620:	b082      	sub	sp, #8
 8014622:	af00      	add	r7, sp, #0
 8014624:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 801462c:	2b00      	cmp	r3, #0
 801462e:	d00f      	beq.n	8014650 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	330c      	adds	r3, #12
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	4610      	mov	r0, r2
 8014644:	4798      	blx	r3
 8014646:	4603      	mov	r3, r0
 8014648:	2b00      	cmp	r3, #0
 801464a:	d001      	beq.n	8014650 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 801464c:	2301      	movs	r3, #1
 801464e:	e000      	b.n	8014652 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8014650:	2300      	movs	r3, #0
 8014652:	2b00      	cmp	r3, #0
 8014654:	d00e      	beq.n	8014674 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8014662:	681b      	ldr	r3, [r3, #0]
 8014664:	3308      	adds	r3, #8
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	4610      	mov	r0, r2
 801466a:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	2200      	movs	r2, #0
 8014670:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        }
    }
 8014674:	bf00      	nop
 8014676:	3708      	adds	r7, #8
 8014678:	46bd      	mov	sp, r7
 801467a:	bd80      	pop	{r7, pc}

0801467c <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 801467c:	b480      	push	{r7}
 801467e:	b083      	sub	sp, #12
 8014680:	af00      	add	r7, sp, #0
 8014682:	6078      	str	r0, [r7, #4]
 8014684:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	683a      	ldr	r2, [r7, #0]
 801468a:	601a      	str	r2, [r3, #0]
    }
 801468c:	bf00      	nop
 801468e:	370c      	adds	r7, #12
 8014690:	46bd      	mov	sp, r7
 8014692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014696:	4770      	bx	lr

08014698 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8014698:	b580      	push	{r7, lr}
 801469a:	b082      	sub	sp, #8
 801469c:	af00      	add	r7, sp, #0
 801469e:	6078      	str	r0, [r7, #4]
 80146a0:	4a05      	ldr	r2, [pc, #20]	@ (80146b8 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	601a      	str	r2, [r3, #0]
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	4618      	mov	r0, r3
 80146aa:	f7ff ff69 	bl	8014580 <_ZN8touchgfx11ApplicationD1Ev>
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	4618      	mov	r0, r3
 80146b2:	3708      	adds	r7, #8
 80146b4:	46bd      	mov	sp, r7
 80146b6:	bd80      	pop	{r7, pc}
 80146b8:	0802e190 	.word	0x0802e190

080146bc <_ZN8touchgfx14MVPApplicationD0Ev>:
 80146bc:	b580      	push	{r7, lr}
 80146be:	b082      	sub	sp, #8
 80146c0:	af00      	add	r7, sp, #0
 80146c2:	6078      	str	r0, [r7, #4]
 80146c4:	6878      	ldr	r0, [r7, #4]
 80146c6:	f7ff ffe7 	bl	8014698 <_ZN8touchgfx14MVPApplicationD1Ev>
 80146ca:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 80146ce:	6878      	ldr	r0, [r7, #4]
 80146d0:	f017 f9c3 	bl	802ba5a <_ZdlPvj>
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	4618      	mov	r0, r3
 80146d8:	3708      	adds	r7, #8
 80146da:	46bd      	mov	sp, r7
 80146dc:	bd80      	pop	{r7, pc}
	...

080146e0 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80146e0:	b580      	push	{r7, lr}
 80146e2:	b082      	sub	sp, #8
 80146e4:	af00      	add	r7, sp, #0
 80146e6:	6078      	str	r0, [r7, #4]
 80146e8:	4a08      	ldr	r2, [pc, #32]	@ (801470c <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	601a      	str	r2, [r3, #0]
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80146f4:	4618      	mov	r0, r3
 80146f6:	f000 fc63 	bl	8014fc0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	4618      	mov	r0, r3
 80146fe:	f7ff ffcb 	bl	8014698 <_ZN8touchgfx14MVPApplicationD1Ev>
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	4618      	mov	r0, r3
 8014706:	3708      	adds	r7, #8
 8014708:	46bd      	mov	sp, r7
 801470a:	bd80      	pop	{r7, pc}
 801470c:	0802e124 	.word	0x0802e124

08014710 <_ZN23FrontendApplicationBaseD0Ev>:
 8014710:	b580      	push	{r7, lr}
 8014712:	b082      	sub	sp, #8
 8014714:	af00      	add	r7, sp, #0
 8014716:	6078      	str	r0, [r7, #4]
 8014718:	6878      	ldr	r0, [r7, #4]
 801471a:	f7ff ffe1 	bl	80146e0 <_ZN23FrontendApplicationBaseD1Ev>
 801471e:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8014722:	6878      	ldr	r0, [r7, #4]
 8014724:	f017 f999 	bl	802ba5a <_ZdlPvj>
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	4618      	mov	r0, r3
 801472c:	3708      	adds	r7, #8
 801472e:	46bd      	mov	sp, r7
 8014730:	bd80      	pop	{r7, pc}

08014732 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 8014732:	b580      	push	{r7, lr}
 8014734:	b082      	sub	sp, #8
 8014736:	af00      	add	r7, sp, #0
 8014738:	6078      	str	r0, [r7, #4]
    {
        gotoscreenScreenNoTransition();
 801473a:	6878      	ldr	r0, [r7, #4]
 801473c:	f000 f886 	bl	801484c <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 8014740:	bf00      	nop
 8014742:	3708      	adds	r7, #8
 8014744:	46bd      	mov	sp, r7
 8014746:	bd80      	pop	{r7, pc}

08014748 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8014748:	b480      	push	{r7}
 801474a:	b083      	sub	sp, #12
 801474c:	af00      	add	r7, sp, #0
 801474e:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	2201      	movs	r2, #1
 8014754:	721a      	strb	r2, [r3, #8]
    }
 8014756:	bf00      	nop
 8014758:	370c      	adds	r7, #12
 801475a:	46bd      	mov	sp, r7
 801475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014760:	4770      	bx	lr

08014762 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 8014762:	b480      	push	{r7}
 8014764:	b083      	sub	sp, #12
 8014766:	af00      	add	r7, sp, #0
 8014768:	6078      	str	r0, [r7, #4]
 801476a:	6039      	str	r1, [r7, #0]
    {
        model = m;
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	683a      	ldr	r2, [r7, #0]
 8014770:	605a      	str	r2, [r3, #4]
    }
 8014772:	bf00      	nop
 8014774:	370c      	adds	r7, #12
 8014776:	46bd      	mov	sp, r7
 8014778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801477c:	4770      	bx	lr
	...

08014780 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8014780:	b580      	push	{r7, lr}
 8014782:	b084      	sub	sp, #16
 8014784:	af00      	add	r7, sp, #0
 8014786:	60f8      	str	r0, [r7, #12]
 8014788:	60b9      	str	r1, [r7, #8]
 801478a:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	4618      	mov	r0, r3
 8014790:	f7ff ff1a 	bl	80145c8 <_ZN8touchgfx14MVPApplicationC1Ev>
 8014794:	4a18      	ldr	r2, [pc, #96]	@ (80147f8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x78>)
 8014796:	68fb      	ldr	r3, [r7, #12]
 8014798:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80147a0:	4618      	mov	r0, r3
 80147a2:	f000 f8ef 	bl	8014984 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 80147a6:	68fb      	ldr	r3, [r7, #12]
 80147a8:	687a      	ldr	r2, [r7, #4]
 80147aa:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
      model(m)
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	68ba      	ldr	r2, [r7, #8]
 80147b2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80147b6:	f7ff fe49 	bl	801444c <_ZN8touchgfx3HAL11getInstanceEv>
 80147ba:	4603      	mov	r3, r0
 80147bc:	681a      	ldr	r2, [r3, #0]
 80147be:	3208      	adds	r2, #8
 80147c0:	6812      	ldr	r2, [r2, #0]
 80147c2:	2100      	movs	r1, #0
 80147c4:	4618      	mov	r0, r3
 80147c6:	4790      	blx	r2
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 80147c8:	f7ff fe4c 	bl	8014464 <_ZN8touchgfx3HAL3lcdEv>
 80147cc:	4603      	mov	r3, r0
 80147ce:	4618      	mov	r0, r3
 80147d0:	f011 fad7 	bl	8025d82 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 80147d4:	f7ff fe46 	bl	8014464 <_ZN8touchgfx3HAL3lcdEv>
 80147d8:	4603      	mov	r3, r0
 80147da:	4618      	mov	r0, r3
 80147dc:	f011 fb48 	bl	8025e70 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 80147e0:	f7ff fe40 	bl	8014464 <_ZN8touchgfx3HAL3lcdEv>
 80147e4:	4603      	mov	r3, r0
 80147e6:	4618      	mov	r0, r3
 80147e8:	f011 fb4e 	bl	8025e88 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>
}
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	4618      	mov	r0, r3
 80147f0:	3710      	adds	r7, #16
 80147f2:	46bd      	mov	sp, r7
 80147f4:	bd80      	pop	{r7, pc}
 80147f6:	bf00      	nop
 80147f8:	0802e124 	.word	0x0802e124

080147fc <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 80147fc:	b480      	push	{r7}
 80147fe:	b083      	sub	sp, #12
 8014800:	af00      	add	r7, sp, #0
 8014802:	6078      	str	r0, [r7, #4]
 8014804:	6039      	str	r1, [r7, #0]
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	4618      	mov	r0, r3
 801480a:	370c      	adds	r7, #12
 801480c:	46bd      	mov	sp, r7
 801480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014812:	4770      	bx	lr

08014814 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8014814:	b580      	push	{r7, lr}
 8014816:	b082      	sub	sp, #8
 8014818:	af00      	add	r7, sp, #0
 801481a:	6078      	str	r0, [r7, #4]
 801481c:	6039      	str	r1, [r7, #0]
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	683a      	ldr	r2, [r7, #0]
 8014822:	4611      	mov	r1, r2
 8014824:	4618      	mov	r0, r3
 8014826:	f7ff ffe9 	bl	80147fc <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 801482a:	683b      	ldr	r3, [r7, #0]
 801482c:	685a      	ldr	r2, [r3, #4]
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	605a      	str	r2, [r3, #4]
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	683a      	ldr	r2, [r7, #0]
 8014836:	3308      	adds	r3, #8
 8014838:	3208      	adds	r2, #8
 801483a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801483e:	e883 0003 	stmia.w	r3, {r0, r1}
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	4618      	mov	r0, r3
 8014846:	3708      	adds	r7, #8
 8014848:	46bd      	mov	sp, r7
 801484a:	bd80      	pop	{r7, pc}

0801484c <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>:
 */

// screen

void FrontendApplicationBase::gotoscreenScreenNoTransition()
{
 801484c:	b590      	push	{r4, r7, lr}
 801484e:	b089      	sub	sp, #36	@ 0x24
 8014850:	af00      	add	r7, sp, #0
 8014852:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoscreenScreenNoTransitionImpl);
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	f503 74a2 	add.w	r4, r3, #324	@ 0x144
 801485a:	4b10      	ldr	r3, [pc, #64]	@ (801489c <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv+0x50>)
 801485c:	61bb      	str	r3, [r7, #24]
 801485e:	2300      	movs	r3, #0
 8014860:	61fb      	str	r3, [r7, #28]
 8014862:	f107 0008 	add.w	r0, r7, #8
 8014866:	f107 0318 	add.w	r3, r7, #24
 801486a:	cb0c      	ldmia	r3, {r2, r3}
 801486c:	6879      	ldr	r1, [r7, #4]
 801486e:	f000 f8a5 	bl	80149bc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8014872:	f107 0308 	add.w	r3, r7, #8
 8014876:	4619      	mov	r1, r3
 8014878:	4620      	mov	r0, r4
 801487a:	f7ff ffcb 	bl	8014814 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 801487e:	f107 0308 	add.w	r3, r7, #8
 8014882:	4618      	mov	r0, r3
 8014884:	f000 fb9c 	bl	8014fc0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
}
 8014894:	bf00      	nop
 8014896:	3724      	adds	r7, #36	@ 0x24
 8014898:	46bd      	mov	sp, r7
 801489a:	bd90      	pop	{r4, r7, pc}
 801489c:	080148a1 	.word	0x080148a1

080148a0 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoscreenScreenNoTransitionImpl()
{
 80148a0:	b580      	push	{r7, lr}
 80148a2:	b084      	sub	sp, #16
 80148a4:	af02      	add	r7, sp, #8
 80148a6:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	f503 719e 	add.w	r1, r3, #316	@ 0x13c
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80148b4:	461a      	mov	r2, r3
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 80148bc:	9300      	str	r3, [sp, #0]
 80148be:	4b04      	ldr	r3, [pc, #16]	@ (80148d0 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x30>)
 80148c0:	4804      	ldr	r0, [pc, #16]	@ (80148d4 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x34>)
 80148c2:	f000 f8ad 	bl	8014a20 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80148c6:	bf00      	nop
 80148c8:	3708      	adds	r7, #8
 80148ca:	46bd      	mov	sp, r7
 80148cc:	bd80      	pop	{r7, pc}
 80148ce:	bf00      	nop
 80148d0:	24034274 	.word	0x24034274
 80148d4:	24034270 	.word	0x24034270

080148d8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 80148d8:	b590      	push	{r4, r7, lr}
 80148da:	b089      	sub	sp, #36	@ 0x24
 80148dc:	af00      	add	r7, sp, #0
 80148de:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	f503 74a2 	add.w	r4, r3, #324	@ 0x144
 80148e6:	4b10      	ldr	r3, [pc, #64]	@ (8014928 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 80148e8:	61bb      	str	r3, [r7, #24]
 80148ea:	2300      	movs	r3, #0
 80148ec:	61fb      	str	r3, [r7, #28]
 80148ee:	f107 0008 	add.w	r0, r7, #8
 80148f2:	f107 0318 	add.w	r3, r7, #24
 80148f6:	cb0c      	ldmia	r3, {r2, r3}
 80148f8:	6879      	ldr	r1, [r7, #4]
 80148fa:	f000 f85f 	bl	80149bc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80148fe:	f107 0308 	add.w	r3, r7, #8
 8014902:	4619      	mov	r1, r3
 8014904:	4620      	mov	r0, r4
 8014906:	f7ff ff85 	bl	8014814 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 801490a:	f107 0308 	add.w	r3, r7, #8
 801490e:	4618      	mov	r0, r3
 8014910:	f000 fb56 	bl	8014fc0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
}
 8014920:	bf00      	nop
 8014922:	3724      	adds	r7, #36	@ 0x24
 8014924:	46bd      	mov	sp, r7
 8014926:	bd90      	pop	{r4, r7, pc}
 8014928:	0801492d 	.word	0x0801492d

0801492c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 801492c:	b580      	push	{r7, lr}
 801492e:	b084      	sub	sp, #16
 8014930:	af02      	add	r7, sp, #8
 8014932:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	f503 719e 	add.w	r1, r3, #316	@ 0x13c
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8014940:	461a      	mov	r2, r3
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8014948:	9300      	str	r3, [sp, #0]
 801494a:	4b04      	ldr	r3, [pc, #16]	@ (801495c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 801494c:	4804      	ldr	r0, [pc, #16]	@ (8014960 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 801494e:	f000 f981 	bl	8014c54 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8014952:	bf00      	nop
 8014954:	3708      	adds	r7, #8
 8014956:	46bd      	mov	sp, r7
 8014958:	bd80      	pop	{r7, pc}
 801495a:	bf00      	nop
 801495c:	24034274 	.word	0x24034274
 8014960:	24034270 	.word	0x24034270

08014964 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8014964:	b480      	push	{r7}
 8014966:	b083      	sub	sp, #12
 8014968:	af00      	add	r7, sp, #0
 801496a:	6078      	str	r0, [r7, #4]
 801496c:	4a04      	ldr	r2, [pc, #16]	@ (8014980 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	601a      	str	r2, [r3, #0]
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	4618      	mov	r0, r3
 8014976:	370c      	adds	r7, #12
 8014978:	46bd      	mov	sp, r7
 801497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801497e:	4770      	bx	lr
 8014980:	0802e208 	.word	0x0802e208

08014984 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 8014984:	b580      	push	{r7, lr}
 8014986:	b082      	sub	sp, #8
 8014988:	af00      	add	r7, sp, #0
 801498a:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	4618      	mov	r0, r3
 8014990:	f7ff ffe8 	bl	8014964 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8014994:	4a08      	ldr	r2, [pc, #32]	@ (80149b8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	601a      	str	r2, [r3, #0]
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	2200      	movs	r2, #0
 801499e:	605a      	str	r2, [r3, #4]
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	2200      	movs	r2, #0
 80149a4:	609a      	str	r2, [r3, #8]
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	2200      	movs	r2, #0
 80149aa:	60da      	str	r2, [r3, #12]
    {
    }
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	4618      	mov	r0, r3
 80149b0:	3708      	adds	r7, #8
 80149b2:	46bd      	mov	sp, r7
 80149b4:	bd80      	pop	{r7, pc}
 80149b6:	bf00      	nop
 80149b8:	0802e178 	.word	0x0802e178

080149bc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 80149bc:	b580      	push	{r7, lr}
 80149be:	b084      	sub	sp, #16
 80149c0:	af00      	add	r7, sp, #0
 80149c2:	60f8      	str	r0, [r7, #12]
 80149c4:	60b9      	str	r1, [r7, #8]
 80149c6:	4639      	mov	r1, r7
 80149c8:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 80149cc:	68fb      	ldr	r3, [r7, #12]
 80149ce:	4618      	mov	r0, r3
 80149d0:	f7ff ffc8 	bl	8014964 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 80149d4:	4a08      	ldr	r2, [pc, #32]	@ (80149f8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	601a      	str	r2, [r3, #0]
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	68ba      	ldr	r2, [r7, #8]
 80149de:	605a      	str	r2, [r3, #4]
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	3308      	adds	r3, #8
 80149e4:	463a      	mov	r2, r7
 80149e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80149ea:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 80149ee:	68fb      	ldr	r3, [r7, #12]
 80149f0:	4618      	mov	r0, r3
 80149f2:	3710      	adds	r7, #16
 80149f4:	46bd      	mov	sp, r7
 80149f6:	bd80      	pop	{r7, pc}
 80149f8:	0802e178 	.word	0x0802e178

080149fc <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 80149fc:	b580      	push	{r7, lr}
 80149fe:	b082      	sub	sp, #8
 8014a00:	af00      	add	r7, sp, #0
 8014a02:	6078      	str	r0, [r7, #4]
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	4618      	mov	r0, r3
 8014a08:	f7ff fd48 	bl	801449c <_ZN8touchgfx10TransitionC1Ev>
 8014a0c:	4a03      	ldr	r2, [pc, #12]	@ (8014a1c <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	601a      	str	r2, [r3, #0]
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	4618      	mov	r0, r3
 8014a16:	3708      	adds	r7, #8
 8014a18:	46bd      	mov	sp, r7
 8014a1a:	bd80      	pop	{r7, pc}
 8014a1c:	0802e100 	.word	0x0802e100

08014a20 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8014a20:	b590      	push	{r4, r7, lr}
 8014a22:	b08f      	sub	sp, #60	@ 0x3c
 8014a24:	af00      	add	r7, sp, #0
 8014a26:	60f8      	str	r0, [r7, #12]
 8014a28:	60b9      	str	r1, [r7, #8]
 8014a2a:	607a      	str	r2, [r7, #4]
 8014a2c:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	689a      	ldr	r2, [r3, #8]
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	689b      	ldr	r3, [r3, #8]
 8014a36:	681b      	ldr	r3, [r3, #0]
 8014a38:	3320      	adds	r3, #32
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	4610      	mov	r0, r2
 8014a3e:	4798      	blx	r3
 8014a40:	4603      	mov	r3, r0
 8014a42:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8014a46:	d205      	bcs.n	8014a54 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8014a48:	4b7d      	ldr	r3, [pc, #500]	@ (8014c40 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8014a4a:	4a7e      	ldr	r2, [pc, #504]	@ (8014c44 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8014a4c:	21a3      	movs	r1, #163	@ 0xa3
 8014a4e:	487e      	ldr	r0, [pc, #504]	@ (8014c48 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8014a50:	f017 fb7a 	bl	802c148 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	685a      	ldr	r2, [r3, #4]
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	685b      	ldr	r3, [r3, #4]
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	3320      	adds	r3, #32
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	4610      	mov	r0, r2
 8014a64:	4798      	blx	r3
 8014a66:	4603      	mov	r3, r0
 8014a68:	2b0f      	cmp	r3, #15
 8014a6a:	d805      	bhi.n	8014a78 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 8014a6c:	4b77      	ldr	r3, [pc, #476]	@ (8014c4c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8014a6e:	4a75      	ldr	r2, [pc, #468]	@ (8014c44 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8014a70:	21a4      	movs	r1, #164	@ 0xa4
 8014a72:	4875      	ldr	r0, [pc, #468]	@ (8014c48 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8014a74:	f017 fb68 	bl	802c148 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	68da      	ldr	r2, [r3, #12]
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	68db      	ldr	r3, [r3, #12]
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	3320      	adds	r3, #32
 8014a84:	681b      	ldr	r3, [r3, #0]
 8014a86:	4610      	mov	r0, r2
 8014a88:	4798      	blx	r3
 8014a8a:	4603      	mov	r3, r0
 8014a8c:	2b0b      	cmp	r3, #11
 8014a8e:	d805      	bhi.n	8014a9c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
 8014a90:	4b6f      	ldr	r3, [pc, #444]	@ (8014c50 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8014a92:	4a6c      	ldr	r2, [pc, #432]	@ (8014c44 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8014a94:	21a5      	movs	r1, #165	@ 0xa5
 8014a96:	486c      	ldr	r0, [pc, #432]	@ (8014c48 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8014a98:	f017 fb56 	bl	802c148 <__assert_func>
 8014a9c:	68fb      	ldr	r3, [r7, #12]
 8014a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014aa0:	68bb      	ldr	r3, [r7, #8]
 8014aa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8014aa4:	683b      	ldr	r3, [r7, #0]
 8014aa6:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8014aa8:	f009 f9ce 	bl	801de48 <_ZN8touchgfx11Application11getInstanceEv>
 8014aac:	4603      	mov	r3, r0
 8014aae:	4618      	mov	r0, r3
 8014ab0:	f7ff fc9e 	bl	80143f0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8014ab4:	6a3b      	ldr	r3, [r7, #32]
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d008      	beq.n	8014ace <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xae>
        (*currentTrans)->tearDown();
 8014abc:	6a3b      	ldr	r3, [r7, #32]
 8014abe:	681a      	ldr	r2, [r3, #0]
 8014ac0:	6a3b      	ldr	r3, [r7, #32]
 8014ac2:	681b      	ldr	r3, [r3, #0]
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	330c      	adds	r3, #12
 8014ac8:	681b      	ldr	r3, [r3, #0]
 8014aca:	4610      	mov	r0, r2
 8014acc:	4798      	blx	r3
    if (*currentTrans)
 8014ace:	6a3b      	ldr	r3, [r7, #32]
 8014ad0:	681b      	ldr	r3, [r3, #0]
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d007      	beq.n	8014ae6 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc6>
        (*currentTrans)->~Transition();
 8014ad6:	6a3b      	ldr	r3, [r7, #32]
 8014ad8:	681a      	ldr	r2, [r3, #0]
 8014ada:	6a3b      	ldr	r3, [r7, #32]
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	681b      	ldr	r3, [r3, #0]
 8014ae0:	681b      	ldr	r3, [r3, #0]
 8014ae2:	4610      	mov	r0, r2
 8014ae4:	4798      	blx	r3
    if (*currentScreen)
 8014ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ae8:	681b      	ldr	r3, [r3, #0]
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d008      	beq.n	8014b00 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
        (*currentScreen)->tearDownScreen();
 8014aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014af0:	681a      	ldr	r2, [r3, #0]
 8014af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	681b      	ldr	r3, [r3, #0]
 8014af8:	3314      	adds	r3, #20
 8014afa:	681b      	ldr	r3, [r3, #0]
 8014afc:	4610      	mov	r0, r2
 8014afe:	4798      	blx	r3
    if (*currentPresenter)
 8014b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d008      	beq.n	8014b1a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfa>
        (*currentPresenter)->deactivate();
 8014b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b0a:	681a      	ldr	r2, [r3, #0]
 8014b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	3304      	adds	r3, #4
 8014b14:	681b      	ldr	r3, [r3, #0]
 8014b16:	4610      	mov	r0, r2
 8014b18:	4798      	blx	r3
    if (*currentScreen)
 8014b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b1c:	681b      	ldr	r3, [r3, #0]
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d007      	beq.n	8014b32 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x112>
        (*currentScreen)->~Screen();
 8014b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b24:	681a      	ldr	r2, [r3, #0]
 8014b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	4610      	mov	r0, r2
 8014b30:	4798      	blx	r3
    if (*currentPresenter)
 8014b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b34:	681b      	ldr	r3, [r3, #0]
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d008      	beq.n	8014b4c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
        (*currentPresenter)->~Presenter();
 8014b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b3c:	681a      	ldr	r2, [r3, #0]
 8014b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	3308      	adds	r3, #8
 8014b46:	681b      	ldr	r3, [r3, #0]
 8014b48:	4610      	mov	r0, r2
 8014b4a:	4798      	blx	r3
}
 8014b4c:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	68db      	ldr	r3, [r3, #12]
 8014b52:	2100      	movs	r1, #0
 8014b54:	4618      	mov	r0, r3
 8014b56:	f000 f995 	bl	8014e84 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8014b5a:	4603      	mov	r3, r0
 8014b5c:	4619      	mov	r1, r3
 8014b5e:	200c      	movs	r0, #12
 8014b60:	f7ff fbb1 	bl	80142c6 <_ZnwjPv>
 8014b64:	4604      	mov	r4, r0
 8014b66:	4620      	mov	r0, r4
 8014b68:	f7ff ff48 	bl	80149fc <_ZN8touchgfx12NoTransitionC1Ev>
 8014b6c:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	689b      	ldr	r3, [r3, #8]
 8014b72:	2100      	movs	r1, #0
 8014b74:	4618      	mov	r0, r3
 8014b76:	f000 f998 	bl	8014eaa <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 8014b7a:	4603      	mov	r3, r0
 8014b7c:	4619      	mov	r1, r3
 8014b7e:	f44f 709a 	mov.w	r0, #308	@ 0x134
 8014b82:	f7ff fba0 	bl	80142c6 <_ZnwjPv>
 8014b86:	4604      	mov	r4, r0
 8014b88:	4620      	mov	r0, r4
 8014b8a:	f001 fea3 	bl	80168d4 <_ZN10screenViewC1Ev>
 8014b8e:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	685b      	ldr	r3, [r3, #4]
 8014b94:	2100      	movs	r1, #0
 8014b96:	4618      	mov	r0, r3
 8014b98:	f000 f99a 	bl	8014ed0 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 8014b9c:	4603      	mov	r3, r0
 8014b9e:	4619      	mov	r1, r3
 8014ba0:	2010      	movs	r0, #16
 8014ba2:	f7ff fb90 	bl	80142c6 <_ZnwjPv>
 8014ba6:	4604      	mov	r4, r0
 8014ba8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014baa:	4620      	mov	r0, r4
 8014bac:	f001 fe3a 	bl	8016824 <_ZN15screenPresenterC1ER10screenView>
 8014bb0:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 8014bb2:	683b      	ldr	r3, [r7, #0]
 8014bb4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014bb6:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8014bb8:	68bb      	ldr	r3, [r7, #8]
 8014bba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014bbc:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014bc2:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8014bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d002      	beq.n	8014bd0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 8014bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014bcc:	3304      	adds	r3, #4
 8014bce:	e000      	b.n	8014bd2 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 8014bd0:	2300      	movs	r3, #0
 8014bd2:	4619      	mov	r1, r3
 8014bd4:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8014bd6:	f7ff fd51 	bl	801467c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8014bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014bdc:	3304      	adds	r3, #4
 8014bde:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8014be0:	4618      	mov	r0, r3
 8014be2:	f7ff fdbe 	bl	8014762 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8014be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014be8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014bea:	4618      	mov	r0, r3
 8014bec:	f000 f983 	bl	8014ef6 <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 8014bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bf2:	61fb      	str	r3, [r7, #28]
 8014bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014bf6:	61bb      	str	r3, [r7, #24]
 8014bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014bfa:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8014bfc:	69fb      	ldr	r3, [r7, #28]
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	330c      	adds	r3, #12
 8014c02:	681b      	ldr	r3, [r3, #0]
 8014c04:	69f8      	ldr	r0, [r7, #28]
 8014c06:	4798      	blx	r3
    newPresenter->activate();
 8014c08:	69bb      	ldr	r3, [r7, #24]
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	681b      	ldr	r3, [r3, #0]
 8014c0e:	69b8      	ldr	r0, [r7, #24]
 8014c10:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8014c12:	6979      	ldr	r1, [r7, #20]
 8014c14:	69f8      	ldr	r0, [r7, #28]
 8014c16:	f00b f8f7 	bl	801fe08 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8014c1a:	697b      	ldr	r3, [r7, #20]
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	3310      	adds	r3, #16
 8014c20:	681b      	ldr	r3, [r3, #0]
 8014c22:	6978      	ldr	r0, [r7, #20]
 8014c24:	4798      	blx	r3
    newTransition->invalidate();
 8014c26:	697b      	ldr	r3, [r7, #20]
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	3314      	adds	r3, #20
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	6978      	ldr	r0, [r7, #20]
 8014c30:	4798      	blx	r3
}
 8014c32:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8014c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8014c36:	4618      	mov	r0, r3
 8014c38:	373c      	adds	r7, #60	@ 0x3c
 8014c3a:	46bd      	mov	sp, r7
 8014c3c:	bd90      	pop	{r4, r7, pc}
 8014c3e:	bf00      	nop
 8014c40:	0802d290 	.word	0x0802d290
 8014c44:	0802d320 	.word	0x0802d320
 8014c48:	0802d3f0 	.word	0x0802d3f0
 8014c4c:	0802d434 	.word	0x0802d434
 8014c50:	0802d4d8 	.word	0x0802d4d8

08014c54 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8014c54:	b590      	push	{r4, r7, lr}
 8014c56:	b08f      	sub	sp, #60	@ 0x3c
 8014c58:	af00      	add	r7, sp, #0
 8014c5a:	60f8      	str	r0, [r7, #12]
 8014c5c:	60b9      	str	r1, [r7, #8]
 8014c5e:	607a      	str	r2, [r7, #4]
 8014c60:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	689a      	ldr	r2, [r3, #8]
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	689b      	ldr	r3, [r3, #8]
 8014c6a:	681b      	ldr	r3, [r3, #0]
 8014c6c:	3320      	adds	r3, #32
 8014c6e:	681b      	ldr	r3, [r3, #0]
 8014c70:	4610      	mov	r0, r2
 8014c72:	4798      	blx	r3
 8014c74:	4603      	mov	r3, r0
 8014c76:	2bdb      	cmp	r3, #219	@ 0xdb
 8014c78:	d805      	bhi.n	8014c86 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 8014c7a:	4b7d      	ldr	r3, [pc, #500]	@ (8014e70 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x21c>)
 8014c7c:	4a7d      	ldr	r2, [pc, #500]	@ (8014e74 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8014c7e:	21a3      	movs	r1, #163	@ 0xa3
 8014c80:	487d      	ldr	r0, [pc, #500]	@ (8014e78 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8014c82:	f017 fa61 	bl	802c148 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	685a      	ldr	r2, [r3, #4]
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	685b      	ldr	r3, [r3, #4]
 8014c8e:	681b      	ldr	r3, [r3, #0]
 8014c90:	3320      	adds	r3, #32
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	4610      	mov	r0, r2
 8014c96:	4798      	blx	r3
 8014c98:	4603      	mov	r3, r0
 8014c9a:	2b0f      	cmp	r3, #15
 8014c9c:	d805      	bhi.n	8014caa <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x56>
 8014c9e:	4b77      	ldr	r3, [pc, #476]	@ (8014e7c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8014ca0:	4a74      	ldr	r2, [pc, #464]	@ (8014e74 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8014ca2:	21a4      	movs	r1, #164	@ 0xa4
 8014ca4:	4874      	ldr	r0, [pc, #464]	@ (8014e78 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8014ca6:	f017 fa4f 	bl	802c148 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	68da      	ldr	r2, [r3, #12]
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	68db      	ldr	r3, [r3, #12]
 8014cb2:	681b      	ldr	r3, [r3, #0]
 8014cb4:	3320      	adds	r3, #32
 8014cb6:	681b      	ldr	r3, [r3, #0]
 8014cb8:	4610      	mov	r0, r2
 8014cba:	4798      	blx	r3
 8014cbc:	4603      	mov	r3, r0
 8014cbe:	2b0b      	cmp	r3, #11
 8014cc0:	d805      	bhi.n	8014cce <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7a>
 8014cc2:	4b6f      	ldr	r3, [pc, #444]	@ (8014e80 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8014cc4:	4a6b      	ldr	r2, [pc, #428]	@ (8014e74 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8014cc6:	21a5      	movs	r1, #165	@ 0xa5
 8014cc8:	486b      	ldr	r0, [pc, #428]	@ (8014e78 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8014cca:	f017 fa3d 	bl	802c148 <__assert_func>
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014cd2:	68bb      	ldr	r3, [r7, #8]
 8014cd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8014cd6:	683b      	ldr	r3, [r7, #0]
 8014cd8:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8014cda:	f009 f8b5 	bl	801de48 <_ZN8touchgfx11Application11getInstanceEv>
 8014cde:	4603      	mov	r3, r0
 8014ce0:	4618      	mov	r0, r3
 8014ce2:	f7ff fb85 	bl	80143f0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8014ce6:	6a3b      	ldr	r3, [r7, #32]
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d008      	beq.n	8014d00 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xac>
        (*currentTrans)->tearDown();
 8014cee:	6a3b      	ldr	r3, [r7, #32]
 8014cf0:	681a      	ldr	r2, [r3, #0]
 8014cf2:	6a3b      	ldr	r3, [r7, #32]
 8014cf4:	681b      	ldr	r3, [r3, #0]
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	330c      	adds	r3, #12
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	4610      	mov	r0, r2
 8014cfe:	4798      	blx	r3
    if (*currentTrans)
 8014d00:	6a3b      	ldr	r3, [r7, #32]
 8014d02:	681b      	ldr	r3, [r3, #0]
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d007      	beq.n	8014d18 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc4>
        (*currentTrans)->~Transition();
 8014d08:	6a3b      	ldr	r3, [r7, #32]
 8014d0a:	681a      	ldr	r2, [r3, #0]
 8014d0c:	6a3b      	ldr	r3, [r7, #32]
 8014d0e:	681b      	ldr	r3, [r3, #0]
 8014d10:	681b      	ldr	r3, [r3, #0]
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	4610      	mov	r0, r2
 8014d16:	4798      	blx	r3
    if (*currentScreen)
 8014d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d1a:	681b      	ldr	r3, [r3, #0]
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d008      	beq.n	8014d32 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xde>
        (*currentScreen)->tearDownScreen();
 8014d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d22:	681a      	ldr	r2, [r3, #0]
 8014d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d26:	681b      	ldr	r3, [r3, #0]
 8014d28:	681b      	ldr	r3, [r3, #0]
 8014d2a:	3314      	adds	r3, #20
 8014d2c:	681b      	ldr	r3, [r3, #0]
 8014d2e:	4610      	mov	r0, r2
 8014d30:	4798      	blx	r3
    if (*currentPresenter)
 8014d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d34:	681b      	ldr	r3, [r3, #0]
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d008      	beq.n	8014d4c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xf8>
        (*currentPresenter)->deactivate();
 8014d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d3c:	681a      	ldr	r2, [r3, #0]
 8014d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	3304      	adds	r3, #4
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	4610      	mov	r0, r2
 8014d4a:	4798      	blx	r3
    if (*currentScreen)
 8014d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d4e:	681b      	ldr	r3, [r3, #0]
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d007      	beq.n	8014d64 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x110>
        (*currentScreen)->~Screen();
 8014d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d56:	681a      	ldr	r2, [r3, #0]
 8014d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	681b      	ldr	r3, [r3, #0]
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	4610      	mov	r0, r2
 8014d62:	4798      	blx	r3
    if (*currentPresenter)
 8014d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d008      	beq.n	8014d7e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12a>
        (*currentPresenter)->~Presenter();
 8014d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d6e:	681a      	ldr	r2, [r3, #0]
 8014d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d72:	681b      	ldr	r3, [r3, #0]
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	3308      	adds	r3, #8
 8014d78:	681b      	ldr	r3, [r3, #0]
 8014d7a:	4610      	mov	r0, r2
 8014d7c:	4798      	blx	r3
}
 8014d7e:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	68db      	ldr	r3, [r3, #12]
 8014d84:	2100      	movs	r1, #0
 8014d86:	4618      	mov	r0, r3
 8014d88:	f000 f87c 	bl	8014e84 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8014d8c:	4603      	mov	r3, r0
 8014d8e:	4619      	mov	r1, r3
 8014d90:	200c      	movs	r0, #12
 8014d92:	f7ff fa98 	bl	80142c6 <_ZnwjPv>
 8014d96:	4604      	mov	r4, r0
 8014d98:	4620      	mov	r0, r4
 8014d9a:	f7ff fe2f 	bl	80149fc <_ZN8touchgfx12NoTransitionC1Ev>
 8014d9e:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	689b      	ldr	r3, [r3, #8]
 8014da4:	2100      	movs	r1, #0
 8014da6:	4618      	mov	r0, r3
 8014da8:	f000 f8b3 	bl	8014f12 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 8014dac:	4603      	mov	r3, r0
 8014dae:	4619      	mov	r1, r3
 8014db0:	20dc      	movs	r0, #220	@ 0xdc
 8014db2:	f7ff fa88 	bl	80142c6 <_ZnwjPv>
 8014db6:	4604      	mov	r4, r0
 8014db8:	4620      	mov	r0, r4
 8014dba:	f001 fcd5 	bl	8016768 <_ZN11Screen1ViewC1Ev>
 8014dbe:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	685b      	ldr	r3, [r3, #4]
 8014dc4:	2100      	movs	r1, #0
 8014dc6:	4618      	mov	r0, r3
 8014dc8:	f000 f8b6 	bl	8014f38 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 8014dcc:	4603      	mov	r3, r0
 8014dce:	4619      	mov	r1, r3
 8014dd0:	2010      	movs	r0, #16
 8014dd2:	f7ff fa78 	bl	80142c6 <_ZnwjPv>
 8014dd6:	4604      	mov	r4, r0
 8014dd8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014dda:	4620      	mov	r0, r4
 8014ddc:	f001 fc6e 	bl	80166bc <_ZN16Screen1PresenterC1ER11Screen1View>
 8014de0:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 8014de2:	683b      	ldr	r3, [r7, #0]
 8014de4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014de6:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8014de8:	68bb      	ldr	r3, [r7, #8]
 8014dea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014dec:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014df2:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8014df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d002      	beq.n	8014e00 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ac>
 8014dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014dfc:	3304      	adds	r3, #4
 8014dfe:	e000      	b.n	8014e02 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ae>
 8014e00:	2300      	movs	r3, #0
 8014e02:	4619      	mov	r1, r3
 8014e04:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8014e06:	f7ff fc39 	bl	801467c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8014e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e0c:	3304      	adds	r3, #4
 8014e0e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8014e10:	4618      	mov	r0, r3
 8014e12:	f7ff fca6 	bl	8014762 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8014e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e18:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014e1a:	4618      	mov	r0, r3
 8014e1c:	f000 f89f 	bl	8014f5e <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 8014e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e22:	61fb      	str	r3, [r7, #28]
 8014e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e26:	61bb      	str	r3, [r7, #24]
 8014e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014e2a:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8014e2c:	69fb      	ldr	r3, [r7, #28]
 8014e2e:	681b      	ldr	r3, [r3, #0]
 8014e30:	330c      	adds	r3, #12
 8014e32:	681b      	ldr	r3, [r3, #0]
 8014e34:	69f8      	ldr	r0, [r7, #28]
 8014e36:	4798      	blx	r3
    newPresenter->activate();
 8014e38:	69bb      	ldr	r3, [r7, #24]
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	681b      	ldr	r3, [r3, #0]
 8014e3e:	69b8      	ldr	r0, [r7, #24]
 8014e40:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8014e42:	6979      	ldr	r1, [r7, #20]
 8014e44:	69f8      	ldr	r0, [r7, #28]
 8014e46:	f00a ffdf 	bl	801fe08 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8014e4a:	697b      	ldr	r3, [r7, #20]
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	3310      	adds	r3, #16
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	6978      	ldr	r0, [r7, #20]
 8014e54:	4798      	blx	r3
    newTransition->invalidate();
 8014e56:	697b      	ldr	r3, [r7, #20]
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	3314      	adds	r3, #20
 8014e5c:	681b      	ldr	r3, [r3, #0]
 8014e5e:	6978      	ldr	r0, [r7, #20]
 8014e60:	4798      	blx	r3
}
 8014e62:	bf00      	nop
    return newPresenter;
 8014e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8014e66:	4618      	mov	r0, r3
 8014e68:	373c      	adds	r7, #60	@ 0x3c
 8014e6a:	46bd      	mov	sp, r7
 8014e6c:	bd90      	pop	{r4, r7, pc}
 8014e6e:	bf00      	nop
 8014e70:	0802d290 	.word	0x0802d290
 8014e74:	0802d57c 	.word	0x0802d57c
 8014e78:	0802d3f0 	.word	0x0802d3f0
 8014e7c:	0802d434 	.word	0x0802d434
 8014e80:	0802d4d8 	.word	0x0802d4d8

08014e84 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8014e84:	b580      	push	{r7, lr}
 8014e86:	b082      	sub	sp, #8
 8014e88:	af00      	add	r7, sp, #0
 8014e8a:	6078      	str	r0, [r7, #4]
 8014e8c:	460b      	mov	r3, r1
 8014e8e:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	3324      	adds	r3, #36	@ 0x24
 8014e96:	681b      	ldr	r3, [r3, #0]
 8014e98:	887a      	ldrh	r2, [r7, #2]
 8014e9a:	4611      	mov	r1, r2
 8014e9c:	6878      	ldr	r0, [r7, #4]
 8014e9e:	4798      	blx	r3
 8014ea0:	4603      	mov	r3, r0
    }
 8014ea2:	4618      	mov	r0, r3
 8014ea4:	3708      	adds	r7, #8
 8014ea6:	46bd      	mov	sp, r7
 8014ea8:	bd80      	pop	{r7, pc}

08014eaa <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>:
    T& at(const uint16_t index)
 8014eaa:	b580      	push	{r7, lr}
 8014eac:	b082      	sub	sp, #8
 8014eae:	af00      	add	r7, sp, #0
 8014eb0:	6078      	str	r0, [r7, #4]
 8014eb2:	460b      	mov	r3, r1
 8014eb4:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	681b      	ldr	r3, [r3, #0]
 8014eba:	3324      	adds	r3, #36	@ 0x24
 8014ebc:	681b      	ldr	r3, [r3, #0]
 8014ebe:	887a      	ldrh	r2, [r7, #2]
 8014ec0:	4611      	mov	r1, r2
 8014ec2:	6878      	ldr	r0, [r7, #4]
 8014ec4:	4798      	blx	r3
 8014ec6:	4603      	mov	r3, r0
    }
 8014ec8:	4618      	mov	r0, r3
 8014eca:	3708      	adds	r7, #8
 8014ecc:	46bd      	mov	sp, r7
 8014ece:	bd80      	pop	{r7, pc}

08014ed0 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>:
    T& at(const uint16_t index)
 8014ed0:	b580      	push	{r7, lr}
 8014ed2:	b082      	sub	sp, #8
 8014ed4:	af00      	add	r7, sp, #0
 8014ed6:	6078      	str	r0, [r7, #4]
 8014ed8:	460b      	mov	r3, r1
 8014eda:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	681b      	ldr	r3, [r3, #0]
 8014ee0:	3324      	adds	r3, #36	@ 0x24
 8014ee2:	681b      	ldr	r3, [r3, #0]
 8014ee4:	887a      	ldrh	r2, [r7, #2]
 8014ee6:	4611      	mov	r1, r2
 8014ee8:	6878      	ldr	r0, [r7, #4]
 8014eea:	4798      	blx	r3
 8014eec:	4603      	mov	r3, r0
    }
 8014eee:	4618      	mov	r0, r3
 8014ef0:	3708      	adds	r7, #8
 8014ef2:	46bd      	mov	sp, r7
 8014ef4:	bd80      	pop	{r7, pc}

08014ef6 <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 8014ef6:	b480      	push	{r7}
 8014ef8:	b083      	sub	sp, #12
 8014efa:	af00      	add	r7, sp, #0
 8014efc:	6078      	str	r0, [r7, #4]
 8014efe:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	683a      	ldr	r2, [r7, #0]
 8014f04:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 8014f06:	bf00      	nop
 8014f08:	370c      	adds	r7, #12
 8014f0a:	46bd      	mov	sp, r7
 8014f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f10:	4770      	bx	lr

08014f12 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 8014f12:	b580      	push	{r7, lr}
 8014f14:	b082      	sub	sp, #8
 8014f16:	af00      	add	r7, sp, #0
 8014f18:	6078      	str	r0, [r7, #4]
 8014f1a:	460b      	mov	r3, r1
 8014f1c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	681b      	ldr	r3, [r3, #0]
 8014f22:	3324      	adds	r3, #36	@ 0x24
 8014f24:	681b      	ldr	r3, [r3, #0]
 8014f26:	887a      	ldrh	r2, [r7, #2]
 8014f28:	4611      	mov	r1, r2
 8014f2a:	6878      	ldr	r0, [r7, #4]
 8014f2c:	4798      	blx	r3
 8014f2e:	4603      	mov	r3, r0
    }
 8014f30:	4618      	mov	r0, r3
 8014f32:	3708      	adds	r7, #8
 8014f34:	46bd      	mov	sp, r7
 8014f36:	bd80      	pop	{r7, pc}

08014f38 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 8014f38:	b580      	push	{r7, lr}
 8014f3a:	b082      	sub	sp, #8
 8014f3c:	af00      	add	r7, sp, #0
 8014f3e:	6078      	str	r0, [r7, #4]
 8014f40:	460b      	mov	r3, r1
 8014f42:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	681b      	ldr	r3, [r3, #0]
 8014f48:	3324      	adds	r3, #36	@ 0x24
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	887a      	ldrh	r2, [r7, #2]
 8014f4e:	4611      	mov	r1, r2
 8014f50:	6878      	ldr	r0, [r7, #4]
 8014f52:	4798      	blx	r3
 8014f54:	4603      	mov	r3, r0
    }
 8014f56:	4618      	mov	r0, r3
 8014f58:	3708      	adds	r7, #8
 8014f5a:	46bd      	mov	sp, r7
 8014f5c:	bd80      	pop	{r7, pc}

08014f5e <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
    void bind(T& newPresenter)
 8014f5e:	b480      	push	{r7}
 8014f60:	b083      	sub	sp, #12
 8014f62:	af00      	add	r7, sp, #0
 8014f64:	6078      	str	r0, [r7, #4]
 8014f66:	6039      	str	r1, [r7, #0]
        presenter = &newPresenter;
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	683a      	ldr	r2, [r7, #0]
 8014f6c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 8014f6e:	bf00      	nop
 8014f70:	370c      	adds	r7, #12
 8014f72:	46bd      	mov	sp, r7
 8014f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f78:	4770      	bx	lr
	...

08014f7c <_ZN8touchgfx12NoTransitionD1Ev>:
 8014f7c:	b580      	push	{r7, lr}
 8014f7e:	b082      	sub	sp, #8
 8014f80:	af00      	add	r7, sp, #0
 8014f82:	6078      	str	r0, [r7, #4]
 8014f84:	4a05      	ldr	r2, [pc, #20]	@ (8014f9c <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	601a      	str	r2, [r3, #0]
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	4618      	mov	r0, r3
 8014f8e:	f7ff fa9b 	bl	80144c8 <_ZN8touchgfx10TransitionD1Ev>
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	4618      	mov	r0, r3
 8014f96:	3708      	adds	r7, #8
 8014f98:	46bd      	mov	sp, r7
 8014f9a:	bd80      	pop	{r7, pc}
 8014f9c:	0802e100 	.word	0x0802e100

08014fa0 <_ZN8touchgfx12NoTransitionD0Ev>:
 8014fa0:	b580      	push	{r7, lr}
 8014fa2:	b082      	sub	sp, #8
 8014fa4:	af00      	add	r7, sp, #0
 8014fa6:	6078      	str	r0, [r7, #4]
 8014fa8:	6878      	ldr	r0, [r7, #4]
 8014faa:	f7ff ffe7 	bl	8014f7c <_ZN8touchgfx12NoTransitionD1Ev>
 8014fae:	210c      	movs	r1, #12
 8014fb0:	6878      	ldr	r0, [r7, #4]
 8014fb2:	f016 fd52 	bl	802ba5a <_ZdlPvj>
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	4618      	mov	r0, r3
 8014fba:	3708      	adds	r7, #8
 8014fbc:	46bd      	mov	sp, r7
 8014fbe:	bd80      	pop	{r7, pc}

08014fc0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8014fc0:	b580      	push	{r7, lr}
 8014fc2:	b082      	sub	sp, #8
 8014fc4:	af00      	add	r7, sp, #0
 8014fc6:	6078      	str	r0, [r7, #4]
 8014fc8:	4a05      	ldr	r2, [pc, #20]	@ (8014fe0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	601a      	str	r2, [r3, #0]
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	4618      	mov	r0, r3
 8014fd2:	f7ff fa1b 	bl	801440c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	4618      	mov	r0, r3
 8014fda:	3708      	adds	r7, #8
 8014fdc:	46bd      	mov	sp, r7
 8014fde:	bd80      	pop	{r7, pc}
 8014fe0:	0802e178 	.word	0x0802e178

08014fe4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8014fe4:	b580      	push	{r7, lr}
 8014fe6:	b082      	sub	sp, #8
 8014fe8:	af00      	add	r7, sp, #0
 8014fea:	6078      	str	r0, [r7, #4]
 8014fec:	6878      	ldr	r0, [r7, #4]
 8014fee:	f7ff ffe7 	bl	8014fc0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8014ff2:	2110      	movs	r1, #16
 8014ff4:	6878      	ldr	r0, [r7, #4]
 8014ff6:	f016 fd30 	bl	802ba5a <_ZdlPvj>
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	3708      	adds	r7, #8
 8015000:	46bd      	mov	sp, r7
 8015002:	bd80      	pop	{r7, pc}

08015004 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8015004:	b580      	push	{r7, lr}
 8015006:	b082      	sub	sp, #8
 8015008:	af00      	add	r7, sp, #0
 801500a:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	685b      	ldr	r3, [r3, #4]
 8015010:	687a      	ldr	r2, [r7, #4]
 8015012:	68d2      	ldr	r2, [r2, #12]
 8015014:	1052      	asrs	r2, r2, #1
 8015016:	1899      	adds	r1, r3, r2
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	68db      	ldr	r3, [r3, #12]
 801501c:	f003 0301 	and.w	r3, r3, #1
 8015020:	2b00      	cmp	r3, #0
 8015022:	d102      	bne.n	801502a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	689b      	ldr	r3, [r3, #8]
 8015028:	e00a      	b.n	8015040 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	685b      	ldr	r3, [r3, #4]
 801502e:	687a      	ldr	r2, [r7, #4]
 8015030:	68d2      	ldr	r2, [r2, #12]
 8015032:	1052      	asrs	r2, r2, #1
 8015034:	4413      	add	r3, r2
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	687a      	ldr	r2, [r7, #4]
 801503a:	6892      	ldr	r2, [r2, #8]
 801503c:	4413      	add	r3, r2
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	4608      	mov	r0, r1
 8015042:	4798      	blx	r3
    }
 8015044:	bf00      	nop
 8015046:	3708      	adds	r7, #8
 8015048:	46bd      	mov	sp, r7
 801504a:	bd80      	pop	{r7, pc}

0801504c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 801504c:	b480      	push	{r7}
 801504e:	b083      	sub	sp, #12
 8015050:	af00      	add	r7, sp, #0
 8015052:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	685b      	ldr	r3, [r3, #4]
 8015058:	2b00      	cmp	r3, #0
 801505a:	d010      	beq.n	801507e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	689b      	ldr	r3, [r3, #8]
 8015060:	2b00      	cmp	r3, #0
 8015062:	d107      	bne.n	8015074 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	68db      	ldr	r3, [r3, #12]
 8015068:	f003 0301 	and.w	r3, r3, #1
 801506c:	2b00      	cmp	r3, #0
 801506e:	d101      	bne.n	8015074 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8015070:	2301      	movs	r3, #1
 8015072:	e000      	b.n	8015076 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8015074:	2300      	movs	r3, #0
 8015076:	2b01      	cmp	r3, #1
 8015078:	d001      	beq.n	801507e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 801507a:	2301      	movs	r3, #1
 801507c:	e000      	b.n	8015080 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 801507e:	2300      	movs	r3, #0
    }
 8015080:	4618      	mov	r0, r3
 8015082:	370c      	adds	r7, #12
 8015084:	46bd      	mov	sp, r7
 8015086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801508a:	4770      	bx	lr

0801508c <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFromRGB
     */
    colortype(uint32_t col)
 801508c:	b480      	push	{r7}
 801508e:	b083      	sub	sp, #12
 8015090:	af00      	add	r7, sp, #0
 8015092:	6078      	str	r0, [r7, #4]
 8015094:	6039      	str	r1, [r7, #0]
        : color(col)
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	683a      	ldr	r2, [r7, #0]
 801509a:	601a      	str	r2, [r3, #0]
    {
    }
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	4618      	mov	r0, r3
 80150a0:	370c      	adds	r7, #12
 80150a2:	46bd      	mov	sp, r7
 80150a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150a8:	4770      	bx	lr

080150aa <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 80150aa:	b480      	push	{r7}
 80150ac:	b083      	sub	sp, #12
 80150ae:	af00      	add	r7, sp, #0
 80150b0:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	2200      	movs	r2, #0
 80150b6:	801a      	strh	r2, [r3, #0]
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	2200      	movs	r2, #0
 80150bc:	805a      	strh	r2, [r3, #2]
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	2200      	movs	r2, #0
 80150c2:	809a      	strh	r2, [r3, #4]
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	2200      	movs	r2, #0
 80150c8:	80da      	strh	r2, [r3, #6]
    {
    }
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	4618      	mov	r0, r3
 80150ce:	370c      	adds	r7, #12
 80150d0:	46bd      	mov	sp, r7
 80150d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d6:	4770      	bx	lr

080150d8 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 80150d8:	b480      	push	{r7}
 80150da:	b083      	sub	sp, #12
 80150dc:	af00      	add	r7, sp, #0
 80150de:	6078      	str	r0, [r7, #4]
 80150e0:	460b      	mov	r3, r1
 80150e2:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	887a      	ldrh	r2, [r7, #2]
 80150e8:	801a      	strh	r2, [r3, #0]
    {
    }
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	4618      	mov	r0, r3
 80150ee:	370c      	adds	r7, #12
 80150f0:	46bd      	mov	sp, r7
 80150f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150f6:	4770      	bx	lr

080150f8 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 80150f8:	b580      	push	{r7, lr}
 80150fa:	b082      	sub	sp, #8
 80150fc:	af00      	add	r7, sp, #0
 80150fe:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 8015100:	4a14      	ldr	r2, [pc, #80]	@ (8015154 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	601a      	str	r2, [r3, #0]
        : rect(),
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	3304      	adds	r3, #4
 801510a:	4618      	mov	r0, r3
 801510c:	f7ff ffcd 	bl	80150aa <_ZN8touchgfx4RectC1Ev>
          cachedVisibleRect(),
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	330c      	adds	r3, #12
 8015114:	4618      	mov	r0, r3
 8015116:	f7ff ffc8 	bl	80150aa <_ZN8touchgfx4RectC1Ev>
          parent(0),
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	2200      	movs	r2, #0
 801511e:	615a      	str	r2, [r3, #20]
          nextSibling(0),
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	2200      	movs	r2, #0
 8015124:	619a      	str	r2, [r3, #24]
          nextDrawChainElement(0),
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	2200      	movs	r2, #0
 801512a:	61da      	str	r2, [r3, #28]
          cachedAbsX(0),
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	2200      	movs	r2, #0
 8015130:	841a      	strh	r2, [r3, #32]
          cachedAbsY(0),
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	2200      	movs	r2, #0
 8015136:	845a      	strh	r2, [r3, #34]	@ 0x22
          touchable(false),
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	2200      	movs	r2, #0
 801513c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          visible(true)
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	2201      	movs	r2, #1
 8015144:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    {
    }
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	4618      	mov	r0, r3
 801514c:	3708      	adds	r7, #8
 801514e:	46bd      	mov	sp, r7
 8015150:	bd80      	pop	{r7, pc}
 8015152:	bf00      	nop
 8015154:	0802efb8 	.word	0x0802efb8

08015158 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8015158:	b480      	push	{r7}
 801515a:	b083      	sub	sp, #12
 801515c:	af00      	add	r7, sp, #0
 801515e:	6078      	str	r0, [r7, #4]
    {
 8015160:	4a04      	ldr	r2, [pc, #16]	@ (8015174 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	601a      	str	r2, [r3, #0]
    }
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	4618      	mov	r0, r3
 801516a:	370c      	adds	r7, #12
 801516c:	46bd      	mov	sp, r7
 801516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015172:	4770      	bx	lr
 8015174:	0802efb8 	.word	0x0802efb8

08015178 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8015178:	b580      	push	{r7, lr}
 801517a:	b082      	sub	sp, #8
 801517c:	af00      	add	r7, sp, #0
 801517e:	6078      	str	r0, [r7, #4]
    }
 8015180:	6878      	ldr	r0, [r7, #4]
 8015182:	f7ff ffe9 	bl	8015158 <_ZN8touchgfx8DrawableD1Ev>
 8015186:	2128      	movs	r1, #40	@ 0x28
 8015188:	6878      	ldr	r0, [r7, #4]
 801518a:	f016 fc66 	bl	802ba5a <_ZdlPvj>
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	4618      	mov	r0, r3
 8015192:	3708      	adds	r7, #8
 8015194:	46bd      	mov	sp, r7
 8015196:	bd80      	pop	{r7, pc}

08015198 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 8015198:	b580      	push	{r7, lr}
 801519a:	b082      	sub	sp, #8
 801519c:	af00      	add	r7, sp, #0
 801519e:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d005      	beq.n	80151b6 <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	681b      	ldr	r3, [r3, #0]
 80151ae:	3314      	adds	r3, #20
 80151b0:	681b      	ldr	r3, [r3, #0]
 80151b2:	6878      	ldr	r0, [r7, #4]
 80151b4:	4798      	blx	r3
        }
    }
 80151b6:	bf00      	nop
 80151b8:	3708      	adds	r7, #8
 80151ba:	46bd      	mov	sp, r7
 80151bc:	bd80      	pop	{r7, pc}

080151be <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 80151be:	b480      	push	{r7}
 80151c0:	b083      	sub	sp, #12
 80151c2:	af00      	add	r7, sp, #0
 80151c4:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80151c6:	2300      	movs	r3, #0
    }
 80151c8:	4618      	mov	r0, r3
 80151ca:	370c      	adds	r7, #12
 80151cc:	46bd      	mov	sp, r7
 80151ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151d2:	4770      	bx	lr

080151d4 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80151d4:	b580      	push	{r7, lr}
 80151d6:	b084      	sub	sp, #16
 80151d8:	af00      	add	r7, sp, #0
 80151da:	60f8      	str	r0, [r7, #12]
 80151dc:	4608      	mov	r0, r1
 80151de:	4611      	mov	r1, r2
 80151e0:	461a      	mov	r2, r3
 80151e2:	4603      	mov	r3, r0
 80151e4:	817b      	strh	r3, [r7, #10]
 80151e6:	460b      	mov	r3, r1
 80151e8:	813b      	strh	r3, [r7, #8]
 80151ea:	4613      	mov	r3, r2
 80151ec:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 80151ee:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80151f2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80151f6:	4619      	mov	r1, r3
 80151f8:	68f8      	ldr	r0, [r7, #12]
 80151fa:	f000 f82a 	bl	8015252 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 80151fe:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8015202:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015206:	4619      	mov	r1, r3
 8015208:	68f8      	ldr	r0, [r7, #12]
 801520a:	f000 f87e 	bl	801530a <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 801520e:	bf00      	nop
 8015210:	3710      	adds	r7, #16
 8015212:	46bd      	mov	sp, r7
 8015214:	bd80      	pop	{r7, pc}

08015216 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8015216:	b480      	push	{r7}
 8015218:	b083      	sub	sp, #12
 801521a:	af00      	add	r7, sp, #0
 801521c:	6078      	str	r0, [r7, #4]
 801521e:	460b      	mov	r3, r1
 8015220:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	887a      	ldrh	r2, [r7, #2]
 8015226:	809a      	strh	r2, [r3, #4]
    }
 8015228:	bf00      	nop
 801522a:	370c      	adds	r7, #12
 801522c:	46bd      	mov	sp, r7
 801522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015232:	4770      	bx	lr

08015234 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8015234:	b480      	push	{r7}
 8015236:	b083      	sub	sp, #12
 8015238:	af00      	add	r7, sp, #0
 801523a:	6078      	str	r0, [r7, #4]
 801523c:	460b      	mov	r3, r1
 801523e:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	887a      	ldrh	r2, [r7, #2]
 8015244:	80da      	strh	r2, [r3, #6]
    }
 8015246:	bf00      	nop
 8015248:	370c      	adds	r7, #12
 801524a:	46bd      	mov	sp, r7
 801524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015250:	4770      	bx	lr

08015252 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 8015252:	b580      	push	{r7, lr}
 8015254:	b082      	sub	sp, #8
 8015256:	af00      	add	r7, sp, #0
 8015258:	6078      	str	r0, [r7, #4]
 801525a:	460b      	mov	r3, r1
 801525c:	807b      	strh	r3, [r7, #2]
 801525e:	4613      	mov	r3, r2
 8015260:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	681b      	ldr	r3, [r3, #0]
 8015266:	3330      	adds	r3, #48	@ 0x30
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801526e:	4611      	mov	r1, r2
 8015270:	6878      	ldr	r0, [r7, #4]
 8015272:	4798      	blx	r3
        setY(y);
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	681b      	ldr	r3, [r3, #0]
 8015278:	3334      	adds	r3, #52	@ 0x34
 801527a:	681b      	ldr	r3, [r3, #0]
 801527c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8015280:	4611      	mov	r1, r2
 8015282:	6878      	ldr	r0, [r7, #4]
 8015284:	4798      	blx	r3
    }
 8015286:	bf00      	nop
 8015288:	3708      	adds	r7, #8
 801528a:	46bd      	mov	sp, r7
 801528c:	bd80      	pop	{r7, pc}

0801528e <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 801528e:	b480      	push	{r7}
 8015290:	b083      	sub	sp, #12
 8015292:	af00      	add	r7, sp, #0
 8015294:	6078      	str	r0, [r7, #4]
 8015296:	460b      	mov	r3, r1
 8015298:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	887a      	ldrh	r2, [r7, #2]
 801529e:	811a      	strh	r2, [r3, #8]
    }
 80152a0:	bf00      	nop
 80152a2:	370c      	adds	r7, #12
 80152a4:	46bd      	mov	sp, r7
 80152a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152aa:	4770      	bx	lr

080152ac <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 80152ac:	b480      	push	{r7}
 80152ae:	b083      	sub	sp, #12
 80152b0:	af00      	add	r7, sp, #0
 80152b2:	6078      	str	r0, [r7, #4]
 80152b4:	460b      	mov	r3, r1
 80152b6:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	887a      	ldrh	r2, [r7, #2]
 80152bc:	815a      	strh	r2, [r3, #10]
    }
 80152be:	bf00      	nop
 80152c0:	370c      	adds	r7, #12
 80152c2:	46bd      	mov	sp, r7
 80152c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152c8:	4770      	bx	lr

080152ca <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 80152ca:	b480      	push	{r7}
 80152cc:	b083      	sub	sp, #12
 80152ce:	af00      	add	r7, sp, #0
 80152d0:	6078      	str	r0, [r7, #4]
    {
    }
 80152d2:	bf00      	nop
 80152d4:	370c      	adds	r7, #12
 80152d6:	46bd      	mov	sp, r7
 80152d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152dc:	4770      	bx	lr

080152de <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80152de:	b480      	push	{r7}
 80152e0:	b083      	sub	sp, #12
 80152e2:	af00      	add	r7, sp, #0
 80152e4:	6078      	str	r0, [r7, #4]
 80152e6:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80152e8:	bf00      	nop
 80152ea:	370c      	adds	r7, #12
 80152ec:	46bd      	mov	sp, r7
 80152ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152f2:	4770      	bx	lr

080152f4 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 80152f4:	b480      	push	{r7}
 80152f6:	b083      	sub	sp, #12
 80152f8:	af00      	add	r7, sp, #0
 80152fa:	6078      	str	r0, [r7, #4]
 80152fc:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80152fe:	bf00      	nop
 8015300:	370c      	adds	r7, #12
 8015302:	46bd      	mov	sp, r7
 8015304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015308:	4770      	bx	lr

0801530a <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 801530a:	b580      	push	{r7, lr}
 801530c:	b082      	sub	sp, #8
 801530e:	af00      	add	r7, sp, #0
 8015310:	6078      	str	r0, [r7, #4]
 8015312:	460b      	mov	r3, r1
 8015314:	807b      	strh	r3, [r7, #2]
 8015316:	4613      	mov	r3, r2
 8015318:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	681b      	ldr	r3, [r3, #0]
 801531e:	3338      	adds	r3, #56	@ 0x38
 8015320:	681b      	ldr	r3, [r3, #0]
 8015322:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8015326:	4611      	mov	r1, r2
 8015328:	6878      	ldr	r0, [r7, #4]
 801532a:	4798      	blx	r3
        setHeight(height);
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	681b      	ldr	r3, [r3, #0]
 8015330:	333c      	adds	r3, #60	@ 0x3c
 8015332:	681b      	ldr	r3, [r3, #0]
 8015334:	f9b7 2000 	ldrsh.w	r2, [r7]
 8015338:	4611      	mov	r1, r2
 801533a:	6878      	ldr	r0, [r7, #4]
 801533c:	4798      	blx	r3
    }
 801533e:	bf00      	nop
 8015340:	3708      	adds	r7, #8
 8015342:	46bd      	mov	sp, r7
 8015344:	bd80      	pop	{r7, pc}

08015346 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8015346:	b480      	push	{r7}
 8015348:	b083      	sub	sp, #12
 801534a:	af00      	add	r7, sp, #0
 801534c:	6078      	str	r0, [r7, #4]
 801534e:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8015350:	bf00      	nop
 8015352:	370c      	adds	r7, #12
 8015354:	46bd      	mov	sp, r7
 8015356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801535a:	4770      	bx	lr

0801535c <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 801535c:	b480      	push	{r7}
 801535e:	b083      	sub	sp, #12
 8015360:	af00      	add	r7, sp, #0
 8015362:	6078      	str	r0, [r7, #4]
    {
    }
 8015364:	bf00      	nop
 8015366:	370c      	adds	r7, #12
 8015368:	46bd      	mov	sp, r7
 801536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801536e:	4770      	bx	lr

08015370 <_ZN8touchgfx8Drawable12setTouchableEb>:
    /**
     * Controls whether this Drawable receives touch events or not.
     *
     * @param  touch If true it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 8015370:	b480      	push	{r7}
 8015372:	b083      	sub	sp, #12
 8015374:	af00      	add	r7, sp, #0
 8015376:	6078      	str	r0, [r7, #4]
 8015378:	460b      	mov	r3, r1
 801537a:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	78fa      	ldrb	r2, [r7, #3]
 8015380:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
 8015384:	bf00      	nop
 8015386:	370c      	adds	r7, #12
 8015388:	46bd      	mov	sp, r7
 801538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801538e:	4770      	bx	lr

08015390 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8015390:	b480      	push	{r7}
 8015392:	b083      	sub	sp, #12
 8015394:	af00      	add	r7, sp, #0
 8015396:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
    }
 801539e:	4618      	mov	r0, r3
 80153a0:	370c      	adds	r7, #12
 80153a2:	46bd      	mov	sp, r7
 80153a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153a8:	4770      	bx	lr

080153aa <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 80153aa:	b480      	push	{r7}
 80153ac:	b083      	sub	sp, #12
 80153ae:	af00      	add	r7, sp, #0
 80153b0:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
    }
 80153b8:	4618      	mov	r0, r3
 80153ba:	370c      	adds	r7, #12
 80153bc:	46bd      	mov	sp, r7
 80153be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153c2:	4770      	bx	lr

080153c4 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 80153c4:	b580      	push	{r7, lr}
 80153c6:	b082      	sub	sp, #8
 80153c8:	af00      	add	r7, sp, #0
 80153ca:	6078      	str	r0, [r7, #4]
 80153cc:	460b      	mov	r3, r1
 80153ce:	807b      	strh	r3, [r7, #2]
 80153d0:	4613      	mov	r3, r2
 80153d2:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	3354      	adds	r3, #84	@ 0x54
 80153da:	681b      	ldr	r3, [r3, #0]
 80153dc:	8879      	ldrh	r1, [r7, #2]
 80153de:	687a      	ldr	r2, [r7, #4]
 80153e0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80153e4:	b292      	uxth	r2, r2
 80153e6:	1a8a      	subs	r2, r1, r2
 80153e8:	b292      	uxth	r2, r2
 80153ea:	b210      	sxth	r0, r2
 80153ec:	8839      	ldrh	r1, [r7, #0]
 80153ee:	687a      	ldr	r2, [r7, #4]
 80153f0:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80153f4:	b292      	uxth	r2, r2
 80153f6:	1a8a      	subs	r2, r1, r2
 80153f8:	b292      	uxth	r2, r2
 80153fa:	b212      	sxth	r2, r2
 80153fc:	4601      	mov	r1, r0
 80153fe:	6878      	ldr	r0, [r7, #4]
 8015400:	4798      	blx	r3
    }
 8015402:	bf00      	nop
 8015404:	3708      	adds	r7, #8
 8015406:	46bd      	mov	sp, r7
 8015408:	bd80      	pop	{r7, pc}

0801540a <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 801540a:	b480      	push	{r7}
 801540c:	b083      	sub	sp, #12
 801540e:	af00      	add	r7, sp, #0
 8015410:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015418:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015420:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015428:	845a      	strh	r2, [r3, #34]	@ 0x22
    }
 801542a:	bf00      	nop
 801542c:	370c      	adds	r7, #12
 801542e:	46bd      	mov	sp, r7
 8015430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015434:	4770      	bx	lr

08015436 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8015436:	b580      	push	{r7, lr}
 8015438:	b084      	sub	sp, #16
 801543a:	af00      	add	r7, sp, #0
 801543c:	60f8      	str	r0, [r7, #12]
 801543e:	60b9      	str	r1, [r7, #8]
 8015440:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 8015442:	68f8      	ldr	r0, [r7, #12]
 8015444:	f7ff ffe1 	bl	801540a <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	681a      	ldr	r2, [r3, #0]
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	68fa      	ldr	r2, [r7, #12]
 8015454:	601a      	str	r2, [r3, #0]
    }
 8015456:	bf00      	nop
 8015458:	3710      	adds	r7, #16
 801545a:	46bd      	mov	sp, r7
 801545c:	bd80      	pop	{r7, pc}

0801545e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 801545e:	b580      	push	{r7, lr}
 8015460:	b084      	sub	sp, #16
 8015462:	af00      	add	r7, sp, #0
 8015464:	60f8      	str	r0, [r7, #12]
 8015466:	607b      	str	r3, [r7, #4]
 8015468:	460b      	mov	r3, r1
 801546a:	817b      	strh	r3, [r7, #10]
 801546c:	4613      	mov	r3, r2
 801546e:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	4618      	mov	r0, r3
 8015474:	f7ff ff8c 	bl	8015390 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8015478:	4603      	mov	r3, r0
 801547a:	2b00      	cmp	r3, #0
 801547c:	d008      	beq.n	8015490 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	4618      	mov	r0, r3
 8015482:	f7ff ff92 	bl	80153aa <_ZNK8touchgfx8Drawable11isTouchableEv>
 8015486:	4603      	mov	r3, r0
 8015488:	2b00      	cmp	r3, #0
 801548a:	d001      	beq.n	8015490 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 801548c:	2301      	movs	r3, #1
 801548e:	e000      	b.n	8015492 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8015490:	2300      	movs	r3, #0
 8015492:	2b00      	cmp	r3, #0
 8015494:	d002      	beq.n	801549c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8015496:	68fa      	ldr	r2, [r7, #12]
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	601a      	str	r2, [r3, #0]
        }
    }
 801549c:	bf00      	nop
 801549e:	3710      	adds	r7, #16
 80154a0:	46bd      	mov	sp, r7
 80154a2:	bd80      	pop	{r7, pc}

080154a4 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 80154a4:	b580      	push	{r7, lr}
 80154a6:	b082      	sub	sp, #8
 80154a8:	af00      	add	r7, sp, #0
 80154aa:	6078      	str	r0, [r7, #4]
    {
 80154ac:	4a06      	ldr	r2, [pc, #24]	@ (80154c8 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	601a      	str	r2, [r3, #0]
    }
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	3304      	adds	r3, #4
 80154b6:	4618      	mov	r0, r3
 80154b8:	f000 fb12 	bl	8015ae0 <_ZN8touchgfx9ContainerD1Ev>
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	4618      	mov	r0, r3
 80154c0:	3708      	adds	r7, #8
 80154c2:	46bd      	mov	sp, r7
 80154c4:	bd80      	pop	{r7, pc}
 80154c6:	bf00      	nop
 80154c8:	0802f0d8 	.word	0x0802f0d8

080154cc <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 80154cc:	b580      	push	{r7, lr}
 80154ce:	b082      	sub	sp, #8
 80154d0:	af00      	add	r7, sp, #0
 80154d2:	6078      	str	r0, [r7, #4]
    }
 80154d4:	6878      	ldr	r0, [r7, #4]
 80154d6:	f7ff ffe5 	bl	80154a4 <_ZN8touchgfx6ScreenD1Ev>
 80154da:	213c      	movs	r1, #60	@ 0x3c
 80154dc:	6878      	ldr	r0, [r7, #4]
 80154de:	f016 fabc 	bl	802ba5a <_ZdlPvj>
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	4618      	mov	r0, r3
 80154e6:	3708      	adds	r7, #8
 80154e8:	46bd      	mov	sp, r7
 80154ea:	bd80      	pop	{r7, pc}

080154ec <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 80154ec:	b480      	push	{r7}
 80154ee:	b083      	sub	sp, #12
 80154f0:	af00      	add	r7, sp, #0
 80154f2:	6078      	str	r0, [r7, #4]
    {
    }
 80154f4:	bf00      	nop
 80154f6:	370c      	adds	r7, #12
 80154f8:	46bd      	mov	sp, r7
 80154fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154fe:	4770      	bx	lr

08015500 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8015500:	b480      	push	{r7}
 8015502:	b083      	sub	sp, #12
 8015504:	af00      	add	r7, sp, #0
 8015506:	6078      	str	r0, [r7, #4]
    {
    }
 8015508:	bf00      	nop
 801550a:	370c      	adds	r7, #12
 801550c:	46bd      	mov	sp, r7
 801550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015512:	4770      	bx	lr

08015514 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8015514:	b480      	push	{r7}
 8015516:	b083      	sub	sp, #12
 8015518:	af00      	add	r7, sp, #0
 801551a:	6078      	str	r0, [r7, #4]
    {
    }
 801551c:	bf00      	nop
 801551e:	370c      	adds	r7, #12
 8015520:	46bd      	mov	sp, r7
 8015522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015526:	4770      	bx	lr

08015528 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8015528:	b480      	push	{r7}
 801552a:	b083      	sub	sp, #12
 801552c:	af00      	add	r7, sp, #0
 801552e:	6078      	str	r0, [r7, #4]
    {
    }
 8015530:	bf00      	nop
 8015532:	370c      	adds	r7, #12
 8015534:	46bd      	mov	sp, r7
 8015536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801553a:	4770      	bx	lr

0801553c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 801553c:	b480      	push	{r7}
 801553e:	b083      	sub	sp, #12
 8015540:	af00      	add	r7, sp, #0
 8015542:	6078      	str	r0, [r7, #4]
 8015544:	460b      	mov	r3, r1
 8015546:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 8015548:	bf00      	nop
 801554a:	370c      	adds	r7, #12
 801554c:	46bd      	mov	sp, r7
 801554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015552:	4770      	bx	lr

08015554 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8015554:	b580      	push	{r7, lr}
 8015556:	b082      	sub	sp, #8
 8015558:	af00      	add	r7, sp, #0
 801555a:	6078      	str	r0, [r7, #4]
 801555c:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	3304      	adds	r3, #4
 8015562:	6839      	ldr	r1, [r7, #0]
 8015564:	4618      	mov	r0, r3
 8015566:	f003 ff89 	bl	801947c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 801556a:	bf00      	nop
 801556c:	3708      	adds	r7, #8
 801556e:	46bd      	mov	sp, r7
 8015570:	bd80      	pop	{r7, pc}
	...

08015574 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 8015574:	b580      	push	{r7, lr}
 8015576:	b082      	sub	sp, #8
 8015578:	af00      	add	r7, sp, #0
 801557a:	6078      	str	r0, [r7, #4]
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	4618      	mov	r0, r3
 8015580:	f7ff fdba 	bl	80150f8 <_ZN8touchgfx8DrawableC1Ev>
 8015584:	4a03      	ldr	r2, [pc, #12]	@ (8015594 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	601a      	str	r2, [r3, #0]
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	4618      	mov	r0, r3
 801558e:	3708      	adds	r7, #8
 8015590:	46bd      	mov	sp, r7
 8015592:	bd80      	pop	{r7, pc}
 8015594:	0802e2e0 	.word	0x0802e2e0

08015598 <_ZN8touchgfx6WidgetD1Ev>:
 8015598:	b580      	push	{r7, lr}
 801559a:	b082      	sub	sp, #8
 801559c:	af00      	add	r7, sp, #0
 801559e:	6078      	str	r0, [r7, #4]
 80155a0:	4a05      	ldr	r2, [pc, #20]	@ (80155b8 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	601a      	str	r2, [r3, #0]
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	4618      	mov	r0, r3
 80155aa:	f7ff fdd5 	bl	8015158 <_ZN8touchgfx8DrawableD1Ev>
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	4618      	mov	r0, r3
 80155b2:	3708      	adds	r7, #8
 80155b4:	46bd      	mov	sp, r7
 80155b6:	bd80      	pop	{r7, pc}
 80155b8:	0802e2e0 	.word	0x0802e2e0

080155bc <_ZN8touchgfx6WidgetD0Ev>:
 80155bc:	b580      	push	{r7, lr}
 80155be:	b082      	sub	sp, #8
 80155c0:	af00      	add	r7, sp, #0
 80155c2:	6078      	str	r0, [r7, #4]
 80155c4:	6878      	ldr	r0, [r7, #4]
 80155c6:	f7ff ffe7 	bl	8015598 <_ZN8touchgfx6WidgetD1Ev>
 80155ca:	2128      	movs	r1, #40	@ 0x28
 80155cc:	6878      	ldr	r0, [r7, #4]
 80155ce:	f016 fa44 	bl	802ba5a <_ZdlPvj>
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	4618      	mov	r0, r3
 80155d6:	3708      	adds	r7, #8
 80155d8:	46bd      	mov	sp, r7
 80155da:	bd80      	pop	{r7, pc}

080155dc <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 80155dc:	b580      	push	{r7, lr}
 80155de:	b082      	sub	sp, #8
 80155e0:	af00      	add	r7, sp, #0
 80155e2:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	4618      	mov	r0, r3
 80155e8:	2326      	movs	r3, #38	@ 0x26
 80155ea:	461a      	mov	r2, r3
 80155ec:	2100      	movs	r1, #0
 80155ee:	f017 f847 	bl	802c680 <memset>
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	4618      	mov	r0, r3
 80155f6:	f7ff ffbd 	bl	8015574 <_ZN8touchgfx6WidgetC1Ev>
 80155fa:	4a09      	ldr	r2, [pc, #36]	@ (8015620 <_ZN8touchgfx3BoxC1Ev+0x44>)
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	601a      	str	r2, [r3, #0]
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	22ff      	movs	r2, #255	@ 0xff
 8015604:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	3328      	adds	r3, #40	@ 0x28
 801560c:	2100      	movs	r1, #0
 801560e:	4618      	mov	r0, r3
 8015610:	f7ff fd3c 	bl	801508c <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	4618      	mov	r0, r3
 8015618:	3708      	adds	r7, #8
 801561a:	46bd      	mov	sp, r7
 801561c:	bd80      	pop	{r7, pc}
 801561e:	bf00      	nop
 8015620:	0802ee20 	.word	0x0802ee20

08015624 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 8015624:	b480      	push	{r7}
 8015626:	b083      	sub	sp, #12
 8015628:	af00      	add	r7, sp, #0
 801562a:	6078      	str	r0, [r7, #4]
 801562c:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	683a      	ldr	r2, [r7, #0]
 8015632:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 8015634:	bf00      	nop
 8015636:	370c      	adds	r7, #12
 8015638:	46bd      	mov	sp, r7
 801563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801563e:	4770      	bx	lr

08015640 <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 8015640:	b580      	push	{r7, lr}
 8015642:	b082      	sub	sp, #8
 8015644:	af00      	add	r7, sp, #0
 8015646:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	4618      	mov	r0, r3
 801564c:	2326      	movs	r3, #38	@ 0x26
 801564e:	461a      	mov	r2, r3
 8015650:	2100      	movs	r1, #0
 8015652:	f017 f815 	bl	802c680 <memset>
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	4618      	mov	r0, r3
 801565a:	f7ff ff8b 	bl	8015574 <_ZN8touchgfx6WidgetC1Ev>
 801565e:	4a0a      	ldr	r2, [pc, #40]	@ (8015688 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	601a      	str	r2, [r3, #0]
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	2200      	movs	r2, #0
 8015668:	629a      	str	r2, [r3, #40]	@ 0x28
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	2200      	movs	r2, #0
 801566e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    {
        setTouchable(true);
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	2101      	movs	r1, #1
 8015676:	4618      	mov	r0, r3
 8015678:	f7ff fe7a 	bl	8015370 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	4618      	mov	r0, r3
 8015680:	3708      	adds	r7, #8
 8015682:	46bd      	mov	sp, r7
 8015684:	bd80      	pop	{r7, pc}
 8015686:	bf00      	nop
 8015688:	0802edb0 	.word	0x0802edb0

0801568c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 801568c:	b480      	push	{r7}
 801568e:	b083      	sub	sp, #12
 8015690:	af00      	add	r7, sp, #0
 8015692:	6078      	str	r0, [r7, #4]
 8015694:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	683a      	ldr	r2, [r7, #0]
 801569a:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 801569c:	bf00      	nop
 801569e:	370c      	adds	r7, #12
 80156a0:	46bd      	mov	sp, r7
 80156a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156a6:	4770      	bx	lr

080156a8 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 80156a8:	b580      	push	{r7, lr}
 80156aa:	b082      	sub	sp, #8
 80156ac:	af00      	add	r7, sp, #0
 80156ae:	6078      	str	r0, [r7, #4]
 80156b0:	4a05      	ldr	r2, [pc, #20]	@ (80156c8 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	601a      	str	r2, [r3, #0]
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	4618      	mov	r0, r3
 80156ba:	f7ff ff6d 	bl	8015598 <_ZN8touchgfx6WidgetD1Ev>
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	4618      	mov	r0, r3
 80156c2:	3708      	adds	r7, #8
 80156c4:	46bd      	mov	sp, r7
 80156c6:	bd80      	pop	{r7, pc}
 80156c8:	0802edb0 	.word	0x0802edb0

080156cc <_ZN8touchgfx14AbstractButtonD0Ev>:
 80156cc:	b580      	push	{r7, lr}
 80156ce:	b082      	sub	sp, #8
 80156d0:	af00      	add	r7, sp, #0
 80156d2:	6078      	str	r0, [r7, #4]
 80156d4:	6878      	ldr	r0, [r7, #4]
 80156d6:	f7ff ffe7 	bl	80156a8 <_ZN8touchgfx14AbstractButtonD1Ev>
 80156da:	2130      	movs	r1, #48	@ 0x30
 80156dc:	6878      	ldr	r0, [r7, #4]
 80156de:	f016 f9bc 	bl	802ba5a <_ZdlPvj>
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	4618      	mov	r0, r3
 80156e6:	3708      	adds	r7, #8
 80156e8:	46bd      	mov	sp, r7
 80156ea:	bd80      	pop	{r7, pc}

080156ec <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 80156ec:	b580      	push	{r7, lr}
 80156ee:	b082      	sub	sp, #8
 80156f0:	af00      	add	r7, sp, #0
 80156f2:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	4618      	mov	r0, r3
 80156f8:	f7ff ffa2 	bl	8015640 <_ZN8touchgfx14AbstractButtonC1Ev>
 80156fc:	4a0c      	ldr	r2, [pc, #48]	@ (8015730 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	601a      	str	r2, [r3, #0]
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	332e      	adds	r3, #46	@ 0x2e
 8015706:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801570a:	4618      	mov	r0, r3
 801570c:	f7ff fce4 	bl	80150d8 <_ZN8touchgfx6BitmapC1Et>
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	3330      	adds	r3, #48	@ 0x30
 8015714:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8015718:	4618      	mov	r0, r3
 801571a:	f7ff fcdd 	bl	80150d8 <_ZN8touchgfx6BitmapC1Et>
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	22ff      	movs	r2, #255	@ 0xff
 8015722:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    {
    }
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	4618      	mov	r0, r3
 801572a:	3708      	adds	r7, #8
 801572c:	46bd      	mov	sp, r7
 801572e:	bd80      	pop	{r7, pc}
 8015730:	0802ee88 	.word	0x0802ee88

08015734 <_ZN15Screen1ViewBase11applicationEv>:
    Screen1ViewBase();
    virtual ~Screen1ViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 8015734:	b580      	push	{r7, lr}
 8015736:	b082      	sub	sp, #8
 8015738:	af00      	add	r7, sp, #0
 801573a:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 801573c:	f008 fb84 	bl	801de48 <_ZN8touchgfx11Application11getInstanceEv>
 8015740:	4603      	mov	r3, r0
    }
 8015742:	4618      	mov	r0, r3
 8015744:	3708      	adds	r7, #8
 8015746:	46bd      	mov	sp, r7
 8015748:	bd80      	pop	{r7, pc}
	...

0801574c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 801574c:	b580      	push	{r7, lr}
 801574e:	b082      	sub	sp, #8
 8015750:	af00      	add	r7, sp, #0
 8015752:	6078      	str	r0, [r7, #4]
 8015754:	4a05      	ldr	r2, [pc, #20]	@ (801576c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	601a      	str	r2, [r3, #0]
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	4618      	mov	r0, r3
 801575e:	f7ff fea1 	bl	80154a4 <_ZN8touchgfx6ScreenD1Ev>
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	4618      	mov	r0, r3
 8015766:	3708      	adds	r7, #8
 8015768:	46bd      	mov	sp, r7
 801576a:	bd80      	pop	{r7, pc}
 801576c:	0802e294 	.word	0x0802e294

08015770 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 8015770:	b580      	push	{r7, lr}
 8015772:	b082      	sub	sp, #8
 8015774:	af00      	add	r7, sp, #0
 8015776:	6078      	str	r0, [r7, #4]
 8015778:	6878      	ldr	r0, [r7, #4]
 801577a:	f7ff ffe7 	bl	801574c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 801577e:	2140      	movs	r1, #64	@ 0x40
 8015780:	6878      	ldr	r0, [r7, #4]
 8015782:	f016 f96a 	bl	802ba5a <_ZdlPvj>
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	4618      	mov	r0, r3
 801578a:	3708      	adds	r7, #8
 801578c:	46bd      	mov	sp, r7
 801578e:	bd80      	pop	{r7, pc}

08015790 <_ZN15Screen1ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>

Screen1ViewBase::Screen1ViewBase() :
 8015790:	b590      	push	{r4, r7, lr}
 8015792:	b08d      	sub	sp, #52	@ 0x34
 8015794:	af02      	add	r7, sp, #8
 8015796:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	4618      	mov	r0, r3
 801579c:	f000 f918 	bl	80159d0 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 80157a0:	4a5e      	ldr	r2, [pc, #376]	@ (801591c <_ZN15Screen1ViewBaseC1Ev+0x18c>)
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	601a      	str	r2, [r3, #0]
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	3340      	adds	r3, #64	@ 0x40
 80157aa:	4618      	mov	r0, r3
 80157ac:	f7ff ff16 	bl	80155dc <_ZN8touchgfx3BoxC1Ev>
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	336c      	adds	r3, #108	@ 0x6c
 80157b4:	4618      	mov	r0, r3
 80157b6:	f7ff ff11 	bl	80155dc <_ZN8touchgfx3BoxC1Ev>
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	3398      	adds	r3, #152	@ 0x98
 80157be:	4618      	mov	r0, r3
 80157c0:	f7ff ff94 	bl	80156ec <_ZN8touchgfx6ButtonC1Ev>
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	f103 00cc 	add.w	r0, r3, #204	@ 0xcc
 80157ca:	4b55      	ldr	r3, [pc, #340]	@ (8015920 <_ZN15Screen1ViewBaseC1Ev+0x190>)
 80157cc:	60bb      	str	r3, [r7, #8]
 80157ce:	2300      	movs	r3, #0
 80157d0:	60fb      	str	r3, [r7, #12]
 80157d2:	f107 0308 	add.w	r3, r7, #8
 80157d6:	cb0c      	ldmia	r3, {r2, r3}
 80157d8:	6879      	ldr	r1, [r7, #4]
 80157da:	f000 f91f 	bl	8015a1c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{
    __background.setPosition(0, 0, 480, 272);
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 80157e4:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80157e8:	9300      	str	r3, [sp, #0]
 80157ea:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80157ee:	2200      	movs	r2, #0
 80157f0:	2100      	movs	r1, #0
 80157f2:	f7ff fcef 	bl	80151d4 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 80157fc:	2300      	movs	r3, #0
 80157fe:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8015802:	2300      	movs	r3, #0
 8015804:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015808:	2300      	movs	r3, #0
 801580a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 801580e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015812:	041a      	lsls	r2, r3, #16
 8015814:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015818:	021b      	lsls	r3, r3, #8
 801581a:	431a      	orrs	r2, r3
 801581c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8015820:	4313      	orrs	r3, r2
 8015822:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8015826:	f107 031c 	add.w	r3, r7, #28
 801582a:	4611      	mov	r1, r2
 801582c:	4618      	mov	r0, r3
 801582e:	f7ff fc2d 	bl	801508c <_ZN8touchgfx9colortypeC1Em>
 8015832:	69fb      	ldr	r3, [r7, #28]
 8015834:	4619      	mov	r1, r3
 8015836:	4620      	mov	r0, r4
 8015838:	f7ff fef4 	bl	8015624 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 801583c:	687a      	ldr	r2, [r7, #4]
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	3340      	adds	r3, #64	@ 0x40
 8015842:	4619      	mov	r1, r3
 8015844:	4610      	mov	r0, r2
 8015846:	f7ff fe85 	bl	8015554 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    box1.setPosition(0, 0, 480, 272);
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8015850:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8015854:	9300      	str	r3, [sp, #0]
 8015856:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 801585a:	2200      	movs	r2, #0
 801585c:	2100      	movs	r1, #0
 801585e:	f7ff fcb9 	bl	80151d4 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(230, 14, 14));
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8015868:	23e6      	movs	r3, #230	@ 0xe6
 801586a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801586e:	230e      	movs	r3, #14
 8015870:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8015874:	230e      	movs	r3, #14
 8015876:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 801587a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801587e:	041a      	lsls	r2, r3, #16
 8015880:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015884:	021b      	lsls	r3, r3, #8
 8015886:	431a      	orrs	r2, r3
 8015888:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 801588c:	4313      	orrs	r3, r2
 801588e:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8015892:	f107 0318 	add.w	r3, r7, #24
 8015896:	4611      	mov	r1, r2
 8015898:	4618      	mov	r0, r3
 801589a:	f7ff fbf7 	bl	801508c <_ZN8touchgfx9colortypeC1Em>
 801589e:	69bb      	ldr	r3, [r7, #24]
 80158a0:	4619      	mov	r1, r3
 80158a2:	4620      	mov	r0, r4
 80158a4:	f7ff febe 	bl	8015624 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(box1);
 80158a8:	687a      	ldr	r2, [r7, #4]
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	336c      	adds	r3, #108	@ 0x6c
 80158ae:	4619      	mov	r1, r3
 80158b0:	4610      	mov	r0, r2
 80158b2:	f7ff fe4f 	bl	8015554 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    button1.setXY(185, 111);
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	3398      	adds	r3, #152	@ 0x98
 80158ba:	226f      	movs	r2, #111	@ 0x6f
 80158bc:	21b9      	movs	r1, #185	@ 0xb9
 80158be:	4618      	mov	r0, r3
 80158c0:	f7ff fcc7 	bl	8015252 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUND_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUND_ACTIVE_ID));
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	f103 0498 	add.w	r4, r3, #152	@ 0x98
 80158ca:	f107 0310 	add.w	r3, r7, #16
 80158ce:	2102      	movs	r1, #2
 80158d0:	4618      	mov	r0, r3
 80158d2:	f7ff fc01 	bl	80150d8 <_ZN8touchgfx6BitmapC1Et>
 80158d6:	f107 0314 	add.w	r3, r7, #20
 80158da:	2103      	movs	r1, #3
 80158dc:	4618      	mov	r0, r3
 80158de:	f7ff fbfb 	bl	80150d8 <_ZN8touchgfx6BitmapC1Et>
 80158e2:	f107 0214 	add.w	r2, r7, #20
 80158e6:	f107 0310 	add.w	r3, r7, #16
 80158ea:	4619      	mov	r1, r3
 80158ec:	4620      	mov	r0, r4
 80158ee:	f006 fb3d 	bl	801bf6c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	f103 0298 	add.w	r2, r3, #152	@ 0x98
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	33cc      	adds	r3, #204	@ 0xcc
 80158fc:	4619      	mov	r1, r3
 80158fe:	4610      	mov	r0, r2
 8015900:	f7ff fec4 	bl	801568c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    add(button1);
 8015904:	687a      	ldr	r2, [r7, #4]
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	3398      	adds	r3, #152	@ 0x98
 801590a:	4619      	mov	r1, r3
 801590c:	4610      	mov	r0, r2
 801590e:	f7ff fe21 	bl	8015554 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	4618      	mov	r0, r3
 8015916:	372c      	adds	r7, #44	@ 0x2c
 8015918:	46bd      	mov	sp, r7
 801591a:	bd90      	pop	{r4, r7, pc}
 801591c:	0802e248 	.word	0x0802e248
 8015920:	080159a5 	.word	0x080159a5

08015924 <_ZN15Screen1ViewBaseD1Ev>:

Screen1ViewBase::~Screen1ViewBase()
 8015924:	b580      	push	{r7, lr}
 8015926:	b082      	sub	sp, #8
 8015928:	af00      	add	r7, sp, #0
 801592a:	6078      	str	r0, [r7, #4]
 801592c:	4a0f      	ldr	r2, [pc, #60]	@ (801596c <_ZN15Screen1ViewBaseD1Ev+0x48>)
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	601a      	str	r2, [r3, #0]
{

}
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	33cc      	adds	r3, #204	@ 0xcc
 8015936:	4618      	mov	r0, r3
 8015938:	f000 f8b0 	bl	8015a9c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	3398      	adds	r3, #152	@ 0x98
 8015940:	4618      	mov	r0, r3
 8015942:	f000 f911 	bl	8015b68 <_ZN8touchgfx6ButtonD1Ev>
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	336c      	adds	r3, #108	@ 0x6c
 801594a:	4618      	mov	r0, r3
 801594c:	f000 f8ea 	bl	8015b24 <_ZN8touchgfx3BoxD1Ev>
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	3340      	adds	r3, #64	@ 0x40
 8015954:	4618      	mov	r0, r3
 8015956:	f000 f8e5 	bl	8015b24 <_ZN8touchgfx3BoxD1Ev>
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	4618      	mov	r0, r3
 801595e:	f7ff fef5 	bl	801574c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	4618      	mov	r0, r3
 8015966:	3708      	adds	r7, #8
 8015968:	46bd      	mov	sp, r7
 801596a:	bd80      	pop	{r7, pc}
 801596c:	0802e248 	.word	0x0802e248

08015970 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 8015970:	b580      	push	{r7, lr}
 8015972:	b082      	sub	sp, #8
 8015974:	af00      	add	r7, sp, #0
 8015976:	6078      	str	r0, [r7, #4]
}
 8015978:	6878      	ldr	r0, [r7, #4]
 801597a:	f7ff ffd3 	bl	8015924 <_ZN15Screen1ViewBaseD1Ev>
 801597e:	21dc      	movs	r1, #220	@ 0xdc
 8015980:	6878      	ldr	r0, [r7, #4]
 8015982:	f016 f86a 	bl	802ba5a <_ZdlPvj>
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	4618      	mov	r0, r3
 801598a:	3708      	adds	r7, #8
 801598c:	46bd      	mov	sp, r7
 801598e:	bd80      	pop	{r7, pc}

08015990 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 8015990:	b480      	push	{r7}
 8015992:	b083      	sub	sp, #12
 8015994:	af00      	add	r7, sp, #0
 8015996:	6078      	str	r0, [r7, #4]

}
 8015998:	bf00      	nop
 801599a:	370c      	adds	r7, #12
 801599c:	46bd      	mov	sp, r7
 801599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159a2:	4770      	bx	lr

080159a4 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 80159a4:	b580      	push	{r7, lr}
 80159a6:	b082      	sub	sp, #8
 80159a8:	af00      	add	r7, sp, #0
 80159aa:	6078      	str	r0, [r7, #4]
 80159ac:	6039      	str	r1, [r7, #0]
    if (&src == &button1)
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	3398      	adds	r3, #152	@ 0x98
 80159b2:	683a      	ldr	r2, [r7, #0]
 80159b4:	429a      	cmp	r2, r3
 80159b6:	d106      	bne.n	80159c6 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When button1 clicked change screen to screen
        //Go to screen with no screen transition
        application().gotoscreenScreenNoTransition();
 80159b8:	6878      	ldr	r0, [r7, #4]
 80159ba:	f7ff febb 	bl	8015734 <_ZN15Screen1ViewBase11applicationEv>
 80159be:	4603      	mov	r3, r0
 80159c0:	4618      	mov	r0, r3
 80159c2:	f7fe ff43 	bl	801484c <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
}
 80159c6:	bf00      	nop
 80159c8:	3708      	adds	r7, #8
 80159ca:	46bd      	mov	sp, r7
 80159cc:	bd80      	pop	{r7, pc}
	...

080159d0 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 80159d0:	b580      	push	{r7, lr}
 80159d2:	b082      	sub	sp, #8
 80159d4:	af00      	add	r7, sp, #0
 80159d6:	6078      	str	r0, [r7, #4]
        : presenter(0)
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	4618      	mov	r0, r3
 80159dc:	f00a f868 	bl	801fab0 <_ZN8touchgfx6ScreenC1Ev>
 80159e0:	4a05      	ldr	r2, [pc, #20]	@ (80159f8 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	601a      	str	r2, [r3, #0]
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	2200      	movs	r2, #0
 80159ea:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	4618      	mov	r0, r3
 80159f0:	3708      	adds	r7, #8
 80159f2:	46bd      	mov	sp, r7
 80159f4:	bd80      	pop	{r7, pc}
 80159f6:	bf00      	nop
 80159f8:	0802e294 	.word	0x0802e294

080159fc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 80159fc:	b480      	push	{r7}
 80159fe:	b083      	sub	sp, #12
 8015a00:	af00      	add	r7, sp, #0
 8015a02:	6078      	str	r0, [r7, #4]
 8015a04:	4a04      	ldr	r2, [pc, #16]	@ (8015a18 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	601a      	str	r2, [r3, #0]
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	4618      	mov	r0, r3
 8015a0e:	370c      	adds	r7, #12
 8015a10:	46bd      	mov	sp, r7
 8015a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a16:	4770      	bx	lr
 8015a18:	0802e2c8 	.word	0x0802e2c8

08015a1c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 8015a1c:	b580      	push	{r7, lr}
 8015a1e:	b084      	sub	sp, #16
 8015a20:	af00      	add	r7, sp, #0
 8015a22:	60f8      	str	r0, [r7, #12]
 8015a24:	60b9      	str	r1, [r7, #8]
 8015a26:	4639      	mov	r1, r7
 8015a28:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	4618      	mov	r0, r3
 8015a30:	f7ff ffe4 	bl	80159fc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8015a34:	4a08      	ldr	r2, [pc, #32]	@ (8015a58 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	601a      	str	r2, [r3, #0]
 8015a3a:	68fb      	ldr	r3, [r7, #12]
 8015a3c:	68ba      	ldr	r2, [r7, #8]
 8015a3e:	605a      	str	r2, [r3, #4]
 8015a40:	68fb      	ldr	r3, [r7, #12]
 8015a42:	3308      	adds	r3, #8
 8015a44:	463a      	mov	r2, r7
 8015a46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015a4a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8015a4e:	68fb      	ldr	r3, [r7, #12]
 8015a50:	4618      	mov	r0, r3
 8015a52:	3710      	adds	r7, #16
 8015a54:	46bd      	mov	sp, r7
 8015a56:	bd80      	pop	{r7, pc}
 8015a58:	0802e27c 	.word	0x0802e27c

08015a5c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 8015a5c:	b480      	push	{r7}
 8015a5e:	b083      	sub	sp, #12
 8015a60:	af00      	add	r7, sp, #0
 8015a62:	6078      	str	r0, [r7, #4]
    }
 8015a64:	4a04      	ldr	r2, [pc, #16]	@ (8015a78 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	601a      	str	r2, [r3, #0]
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	370c      	adds	r7, #12
 8015a70:	46bd      	mov	sp, r7
 8015a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a76:	4770      	bx	lr
 8015a78:	0802e2c8 	.word	0x0802e2c8

08015a7c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 8015a7c:	b580      	push	{r7, lr}
 8015a7e:	b082      	sub	sp, #8
 8015a80:	af00      	add	r7, sp, #0
 8015a82:	6078      	str	r0, [r7, #4]
    }
 8015a84:	6878      	ldr	r0, [r7, #4]
 8015a86:	f7ff ffe9 	bl	8015a5c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8015a8a:	2104      	movs	r1, #4
 8015a8c:	6878      	ldr	r0, [r7, #4]
 8015a8e:	f015 ffe4 	bl	802ba5a <_ZdlPvj>
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	4618      	mov	r0, r3
 8015a96:	3708      	adds	r7, #8
 8015a98:	46bd      	mov	sp, r7
 8015a9a:	bd80      	pop	{r7, pc}

08015a9c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8015a9c:	b580      	push	{r7, lr}
 8015a9e:	b082      	sub	sp, #8
 8015aa0:	af00      	add	r7, sp, #0
 8015aa2:	6078      	str	r0, [r7, #4]
 8015aa4:	4a05      	ldr	r2, [pc, #20]	@ (8015abc <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	601a      	str	r2, [r3, #0]
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	4618      	mov	r0, r3
 8015aae:	f7ff ffd5 	bl	8015a5c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	4618      	mov	r0, r3
 8015ab6:	3708      	adds	r7, #8
 8015ab8:	46bd      	mov	sp, r7
 8015aba:	bd80      	pop	{r7, pc}
 8015abc:	0802e27c 	.word	0x0802e27c

08015ac0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8015ac0:	b580      	push	{r7, lr}
 8015ac2:	b082      	sub	sp, #8
 8015ac4:	af00      	add	r7, sp, #0
 8015ac6:	6078      	str	r0, [r7, #4]
 8015ac8:	6878      	ldr	r0, [r7, #4]
 8015aca:	f7ff ffe7 	bl	8015a9c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8015ace:	2110      	movs	r1, #16
 8015ad0:	6878      	ldr	r0, [r7, #4]
 8015ad2:	f015 ffc2 	bl	802ba5a <_ZdlPvj>
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	4618      	mov	r0, r3
 8015ada:	3708      	adds	r7, #8
 8015adc:	46bd      	mov	sp, r7
 8015ade:	bd80      	pop	{r7, pc}

08015ae0 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 8015ae0:	b580      	push	{r7, lr}
 8015ae2:	b082      	sub	sp, #8
 8015ae4:	af00      	add	r7, sp, #0
 8015ae6:	6078      	str	r0, [r7, #4]
 8015ae8:	4a05      	ldr	r2, [pc, #20]	@ (8015b00 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	601a      	str	r2, [r3, #0]
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	4618      	mov	r0, r3
 8015af2:	f7ff fb31 	bl	8015158 <_ZN8touchgfx8DrawableD1Ev>
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	4618      	mov	r0, r3
 8015afa:	3708      	adds	r7, #8
 8015afc:	46bd      	mov	sp, r7
 8015afe:	bd80      	pop	{r7, pc}
 8015b00:	0802ea98 	.word	0x0802ea98

08015b04 <_ZN8touchgfx9ContainerD0Ev>:
 8015b04:	b580      	push	{r7, lr}
 8015b06:	b082      	sub	sp, #8
 8015b08:	af00      	add	r7, sp, #0
 8015b0a:	6078      	str	r0, [r7, #4]
 8015b0c:	6878      	ldr	r0, [r7, #4]
 8015b0e:	f7ff ffe7 	bl	8015ae0 <_ZN8touchgfx9ContainerD1Ev>
 8015b12:	212c      	movs	r1, #44	@ 0x2c
 8015b14:	6878      	ldr	r0, [r7, #4]
 8015b16:	f015 ffa0 	bl	802ba5a <_ZdlPvj>
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	4618      	mov	r0, r3
 8015b1e:	3708      	adds	r7, #8
 8015b20:	46bd      	mov	sp, r7
 8015b22:	bd80      	pop	{r7, pc}

08015b24 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8015b24:	b580      	push	{r7, lr}
 8015b26:	b082      	sub	sp, #8
 8015b28:	af00      	add	r7, sp, #0
 8015b2a:	6078      	str	r0, [r7, #4]
 8015b2c:	4a05      	ldr	r2, [pc, #20]	@ (8015b44 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	601a      	str	r2, [r3, #0]
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	4618      	mov	r0, r3
 8015b36:	f7ff fd2f 	bl	8015598 <_ZN8touchgfx6WidgetD1Ev>
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	4618      	mov	r0, r3
 8015b3e:	3708      	adds	r7, #8
 8015b40:	46bd      	mov	sp, r7
 8015b42:	bd80      	pop	{r7, pc}
 8015b44:	0802ee20 	.word	0x0802ee20

08015b48 <_ZN8touchgfx3BoxD0Ev>:
 8015b48:	b580      	push	{r7, lr}
 8015b4a:	b082      	sub	sp, #8
 8015b4c:	af00      	add	r7, sp, #0
 8015b4e:	6078      	str	r0, [r7, #4]
 8015b50:	6878      	ldr	r0, [r7, #4]
 8015b52:	f7ff ffe7 	bl	8015b24 <_ZN8touchgfx3BoxD1Ev>
 8015b56:	212c      	movs	r1, #44	@ 0x2c
 8015b58:	6878      	ldr	r0, [r7, #4]
 8015b5a:	f015 ff7e 	bl	802ba5a <_ZdlPvj>
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	4618      	mov	r0, r3
 8015b62:	3708      	adds	r7, #8
 8015b64:	46bd      	mov	sp, r7
 8015b66:	bd80      	pop	{r7, pc}

08015b68 <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 8015b68:	b580      	push	{r7, lr}
 8015b6a:	b082      	sub	sp, #8
 8015b6c:	af00      	add	r7, sp, #0
 8015b6e:	6078      	str	r0, [r7, #4]
 8015b70:	4a05      	ldr	r2, [pc, #20]	@ (8015b88 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	601a      	str	r2, [r3, #0]
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	4618      	mov	r0, r3
 8015b7a:	f7ff fd95 	bl	80156a8 <_ZN8touchgfx14AbstractButtonD1Ev>
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	4618      	mov	r0, r3
 8015b82:	3708      	adds	r7, #8
 8015b84:	46bd      	mov	sp, r7
 8015b86:	bd80      	pop	{r7, pc}
 8015b88:	0802ee88 	.word	0x0802ee88

08015b8c <_ZN8touchgfx6ButtonD0Ev>:
 8015b8c:	b580      	push	{r7, lr}
 8015b8e:	b082      	sub	sp, #8
 8015b90:	af00      	add	r7, sp, #0
 8015b92:	6078      	str	r0, [r7, #4]
 8015b94:	6878      	ldr	r0, [r7, #4]
 8015b96:	f7ff ffe7 	bl	8015b68 <_ZN8touchgfx6ButtonD1Ev>
 8015b9a:	2134      	movs	r1, #52	@ 0x34
 8015b9c:	6878      	ldr	r0, [r7, #4]
 8015b9e:	f015 ff5c 	bl	802ba5a <_ZdlPvj>
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	4618      	mov	r0, r3
 8015ba6:	3708      	adds	r7, #8
 8015ba8:	46bd      	mov	sp, r7
 8015baa:	bd80      	pop	{r7, pc}

08015bac <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8015bac:	b580      	push	{r7, lr}
 8015bae:	b082      	sub	sp, #8
 8015bb0:	af00      	add	r7, sp, #0
 8015bb2:	6078      	str	r0, [r7, #4]
 8015bb4:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	685b      	ldr	r3, [r3, #4]
 8015bba:	687a      	ldr	r2, [r7, #4]
 8015bbc:	68d2      	ldr	r2, [r2, #12]
 8015bbe:	1052      	asrs	r2, r2, #1
 8015bc0:	1898      	adds	r0, r3, r2
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	68db      	ldr	r3, [r3, #12]
 8015bc6:	f003 0301 	and.w	r3, r3, #1
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d102      	bne.n	8015bd4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	689b      	ldr	r3, [r3, #8]
 8015bd2:	e00a      	b.n	8015bea <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	685b      	ldr	r3, [r3, #4]
 8015bd8:	687a      	ldr	r2, [r7, #4]
 8015bda:	68d2      	ldr	r2, [r2, #12]
 8015bdc:	1052      	asrs	r2, r2, #1
 8015bde:	4413      	add	r3, r2
 8015be0:	681b      	ldr	r3, [r3, #0]
 8015be2:	687a      	ldr	r2, [r7, #4]
 8015be4:	6892      	ldr	r2, [r2, #8]
 8015be6:	4413      	add	r3, r2
 8015be8:	681b      	ldr	r3, [r3, #0]
 8015bea:	6839      	ldr	r1, [r7, #0]
 8015bec:	4798      	blx	r3
    }
 8015bee:	bf00      	nop
 8015bf0:	3708      	adds	r7, #8
 8015bf2:	46bd      	mov	sp, r7
 8015bf4:	bd80      	pop	{r7, pc}

08015bf6 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8015bf6:	b480      	push	{r7}
 8015bf8:	b083      	sub	sp, #12
 8015bfa:	af00      	add	r7, sp, #0
 8015bfc:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	685b      	ldr	r3, [r3, #4]
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d010      	beq.n	8015c28 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	689b      	ldr	r3, [r3, #8]
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	d107      	bne.n	8015c1e <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	68db      	ldr	r3, [r3, #12]
 8015c12:	f003 0301 	and.w	r3, r3, #1
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d101      	bne.n	8015c1e <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8015c1a:	2301      	movs	r3, #1
 8015c1c:	e000      	b.n	8015c20 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8015c1e:	2300      	movs	r3, #0
 8015c20:	2b01      	cmp	r3, #1
 8015c22:	d001      	beq.n	8015c28 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8015c24:	2301      	movs	r3, #1
 8015c26:	e000      	b.n	8015c2a <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8015c28:	2300      	movs	r3, #0
    }
 8015c2a:	4618      	mov	r0, r3
 8015c2c:	370c      	adds	r7, #12
 8015c2e:	46bd      	mov	sp, r7
 8015c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c34:	4770      	bx	lr

08015c36 <_ZN14screenViewBase11applicationEv>:
    screenViewBase();
    virtual ~screenViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 8015c36:	b580      	push	{r7, lr}
 8015c38:	b082      	sub	sp, #8
 8015c3a:	af00      	add	r7, sp, #0
 8015c3c:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8015c3e:	f008 f903 	bl	801de48 <_ZN8touchgfx11Application11getInstanceEv>
 8015c42:	4603      	mov	r3, r0
    }
 8015c44:	4618      	mov	r0, r3
 8015c46:	3708      	adds	r7, #8
 8015c48:	46bd      	mov	sp, r7
 8015c4a:	bd80      	pop	{r7, pc}

08015c4c <_ZN8touchgfx4ViewI15screenPresenterED1Ev>:
class View : public Screen
 8015c4c:	b580      	push	{r7, lr}
 8015c4e:	b082      	sub	sp, #8
 8015c50:	af00      	add	r7, sp, #0
 8015c52:	6078      	str	r0, [r7, #4]
 8015c54:	4a05      	ldr	r2, [pc, #20]	@ (8015c6c <_ZN8touchgfx4ViewI15screenPresenterED1Ev+0x20>)
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	601a      	str	r2, [r3, #0]
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	4618      	mov	r0, r3
 8015c5e:	f7ff fc21 	bl	80154a4 <_ZN8touchgfx6ScreenD1Ev>
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	4618      	mov	r0, r3
 8015c66:	3708      	adds	r7, #8
 8015c68:	46bd      	mov	sp, r7
 8015c6a:	bd80      	pop	{r7, pc}
 8015c6c:	0802e394 	.word	0x0802e394

08015c70 <_ZN8touchgfx4ViewI15screenPresenterED0Ev>:
 8015c70:	b580      	push	{r7, lr}
 8015c72:	b082      	sub	sp, #8
 8015c74:	af00      	add	r7, sp, #0
 8015c76:	6078      	str	r0, [r7, #4]
 8015c78:	6878      	ldr	r0, [r7, #4]
 8015c7a:	f7ff ffe7 	bl	8015c4c <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 8015c7e:	2140      	movs	r1, #64	@ 0x40
 8015c80:	6878      	ldr	r0, [r7, #4]
 8015c82:	f015 feea 	bl	802ba5a <_ZdlPvj>
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	4618      	mov	r0, r3
 8015c8a:	3708      	adds	r7, #8
 8015c8c:	46bd      	mov	sp, r7
 8015c8e:	bd80      	pop	{r7, pc}

08015c90 <_ZN14screenViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen_screen/screenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>

screenViewBase::screenViewBase() :
 8015c90:	b590      	push	{r4, r7, lr}
 8015c92:	b091      	sub	sp, #68	@ 0x44
 8015c94:	af02      	add	r7, sp, #8
 8015c96:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &screenViewBase::buttonCallbackHandler)
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	4618      	mov	r0, r3
 8015c9c:	f000 f998 	bl	8015fd0 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>
 8015ca0:	4a98      	ldr	r2, [pc, #608]	@ (8015f04 <_ZN14screenViewBaseC1Ev+0x274>)
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	601a      	str	r2, [r3, #0]
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	3340      	adds	r3, #64	@ 0x40
 8015caa:	4618      	mov	r0, r3
 8015cac:	f7ff fc96 	bl	80155dc <_ZN8touchgfx3BoxC1Ev>
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	336c      	adds	r3, #108	@ 0x6c
 8015cb4:	4618      	mov	r0, r3
 8015cb6:	f7ff fc91 	bl	80155dc <_ZN8touchgfx3BoxC1Ev>
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	3398      	adds	r3, #152	@ 0x98
 8015cbe:	4618      	mov	r0, r3
 8015cc0:	f7ff fc8c 	bl	80155dc <_ZN8touchgfx3BoxC1Ev>
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	33c4      	adds	r3, #196	@ 0xc4
 8015cc8:	4618      	mov	r0, r3
 8015cca:	f7ff fc87 	bl	80155dc <_ZN8touchgfx3BoxC1Ev>
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	33f0      	adds	r3, #240	@ 0xf0
 8015cd2:	4618      	mov	r0, r3
 8015cd4:	f7ff fd0a 	bl	80156ec <_ZN8touchgfx6ButtonC1Ev>
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	f503 7092 	add.w	r0, r3, #292	@ 0x124
 8015cde:	4b8a      	ldr	r3, [pc, #552]	@ (8015f08 <_ZN14screenViewBaseC1Ev+0x278>)
 8015ce0:	60fb      	str	r3, [r7, #12]
 8015ce2:	2300      	movs	r3, #0
 8015ce4:	613b      	str	r3, [r7, #16]
 8015ce6:	f107 030c 	add.w	r3, r7, #12
 8015cea:	cb0c      	ldmia	r3, {r2, r3}
 8015cec:	6879      	ldr	r1, [r7, #4]
 8015cee:	f000 f985 	bl	8015ffc <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{
    __background.setPosition(0, 0, 480, 272);
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8015cf8:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8015cfc:	9300      	str	r3, [sp, #0]
 8015cfe:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8015d02:	2200      	movs	r2, #0
 8015d04:	2100      	movs	r1, #0
 8015d06:	f7ff fa65 	bl	80151d4 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8015d10:	2300      	movs	r3, #0
 8015d12:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8015d16:	2300      	movs	r3, #0
 8015d18:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8015d1c:	2300      	movs	r3, #0
 8015d1e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8015d22:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8015d26:	041a      	lsls	r2, r3, #16
 8015d28:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8015d2c:	021b      	lsls	r3, r3, #8
 8015d2e:	431a      	orrs	r2, r3
 8015d30:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8015d34:	4313      	orrs	r3, r2
 8015d36:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8015d3a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8015d3e:	4611      	mov	r1, r2
 8015d40:	4618      	mov	r0, r3
 8015d42:	f7ff f9a3 	bl	801508c <_ZN8touchgfx9colortypeC1Em>
 8015d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d48:	4619      	mov	r1, r3
 8015d4a:	4620      	mov	r0, r4
 8015d4c:	f7ff fc6a 	bl	8015624 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 8015d50:	687a      	ldr	r2, [r7, #4]
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	3340      	adds	r3, #64	@ 0x40
 8015d56:	4619      	mov	r1, r3
 8015d58:	4610      	mov	r0, r2
 8015d5a:	f7ff fbfb 	bl	8015554 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    box1.setPosition(0, 0, 480, 77);
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8015d64:	234d      	movs	r3, #77	@ 0x4d
 8015d66:	9300      	str	r3, [sp, #0]
 8015d68:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8015d6c:	2200      	movs	r2, #0
 8015d6e:	2100      	movs	r1, #0
 8015d70:	f7ff fa30 	bl	80151d4 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(224, 240, 55));
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8015d7a:	23e0      	movs	r3, #224	@ 0xe0
 8015d7c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8015d80:	23f0      	movs	r3, #240	@ 0xf0
 8015d82:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8015d86:	2337      	movs	r3, #55	@ 0x37
 8015d88:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8015d8c:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8015d90:	041a      	lsls	r2, r3, #16
 8015d92:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8015d96:	021b      	lsls	r3, r3, #8
 8015d98:	431a      	orrs	r2, r3
 8015d9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8015d9e:	4313      	orrs	r3, r2
 8015da0:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8015da4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8015da8:	4611      	mov	r1, r2
 8015daa:	4618      	mov	r0, r3
 8015dac:	f7ff f96e 	bl	801508c <_ZN8touchgfx9colortypeC1Em>
 8015db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015db2:	4619      	mov	r1, r3
 8015db4:	4620      	mov	r0, r4
 8015db6:	f7ff fc35 	bl	8015624 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(box1);
 8015dba:	687a      	ldr	r2, [r7, #4]
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	336c      	adds	r3, #108	@ 0x6c
 8015dc0:	4619      	mov	r1, r3
 8015dc2:	4610      	mov	r0, r2
 8015dc4:	f7ff fbc6 	bl	8015554 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    box1_1.setPosition(0, 195, 480, 77);
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	f103 0098 	add.w	r0, r3, #152	@ 0x98
 8015dce:	234d      	movs	r3, #77	@ 0x4d
 8015dd0:	9300      	str	r3, [sp, #0]
 8015dd2:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8015dd6:	22c3      	movs	r2, #195	@ 0xc3
 8015dd8:	2100      	movs	r1, #0
 8015dda:	f7ff f9fb 	bl	80151d4 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1_1.setColor(touchgfx::Color::getColorFromRGB(55, 240, 206));
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	f103 0498 	add.w	r4, r3, #152	@ 0x98
 8015de4:	2337      	movs	r3, #55	@ 0x37
 8015de6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8015dea:	23f0      	movs	r3, #240	@ 0xf0
 8015dec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8015df0:	23ce      	movs	r3, #206	@ 0xce
 8015df2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8015df6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8015dfa:	041a      	lsls	r2, r3, #16
 8015dfc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8015e00:	021b      	lsls	r3, r3, #8
 8015e02:	431a      	orrs	r2, r3
 8015e04:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8015e08:	4313      	orrs	r3, r2
 8015e0a:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8015e0e:	f107 0320 	add.w	r3, r7, #32
 8015e12:	4611      	mov	r1, r2
 8015e14:	4618      	mov	r0, r3
 8015e16:	f7ff f939 	bl	801508c <_ZN8touchgfx9colortypeC1Em>
 8015e1a:	6a3b      	ldr	r3, [r7, #32]
 8015e1c:	4619      	mov	r1, r3
 8015e1e:	4620      	mov	r0, r4
 8015e20:	f7ff fc00 	bl	8015624 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(box1_1);
 8015e24:	687a      	ldr	r2, [r7, #4]
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	3398      	adds	r3, #152	@ 0x98
 8015e2a:	4619      	mov	r1, r3
 8015e2c:	4610      	mov	r0, r2
 8015e2e:	f7ff fb91 	bl	8015554 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    box2.setPosition(0, 77, 480, 118);
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	f103 00c4 	add.w	r0, r3, #196	@ 0xc4
 8015e38:	2376      	movs	r3, #118	@ 0x76
 8015e3a:	9300      	str	r3, [sp, #0]
 8015e3c:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8015e40:	224d      	movs	r2, #77	@ 0x4d
 8015e42:	2100      	movs	r1, #0
 8015e44:	f7ff f9c6 	bl	80151d4 <_ZN8touchgfx8Drawable11setPositionEssss>
    box2.setColor(touchgfx::Color::getColorFromRGB(49, 232, 64));
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	f103 04c4 	add.w	r4, r3, #196	@ 0xc4
 8015e4e:	2331      	movs	r3, #49	@ 0x31
 8015e50:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015e54:	23e8      	movs	r3, #232	@ 0xe8
 8015e56:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8015e5a:	2340      	movs	r3, #64	@ 0x40
 8015e5c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8015e60:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8015e64:	041a      	lsls	r2, r3, #16
 8015e66:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8015e6a:	021b      	lsls	r3, r3, #8
 8015e6c:	431a      	orrs	r2, r3
 8015e6e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8015e72:	4313      	orrs	r3, r2
 8015e74:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8015e78:	f107 031c 	add.w	r3, r7, #28
 8015e7c:	4611      	mov	r1, r2
 8015e7e:	4618      	mov	r0, r3
 8015e80:	f7ff f904 	bl	801508c <_ZN8touchgfx9colortypeC1Em>
 8015e84:	69fb      	ldr	r3, [r7, #28]
 8015e86:	4619      	mov	r1, r3
 8015e88:	4620      	mov	r0, r4
 8015e8a:	f7ff fbcb 	bl	8015624 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(box2);
 8015e8e:	687a      	ldr	r2, [r7, #4]
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	33c4      	adds	r3, #196	@ 0xc4
 8015e94:	4619      	mov	r1, r3
 8015e96:	4610      	mov	r0, r2
 8015e98:	f7ff fb5c 	bl	8015554 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    button1.setXY(120, 111);
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	33f0      	adds	r3, #240	@ 0xf0
 8015ea0:	226f      	movs	r2, #111	@ 0x6f
 8015ea2:	2178      	movs	r1, #120	@ 0x78
 8015ea4:	4618      	mov	r0, r3
 8015ea6:	f7ff f9d4 	bl	8015252 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUND_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUND_ACTIVE_ID));
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	f103 04f0 	add.w	r4, r3, #240	@ 0xf0
 8015eb0:	f107 0314 	add.w	r3, r7, #20
 8015eb4:	2100      	movs	r1, #0
 8015eb6:	4618      	mov	r0, r3
 8015eb8:	f7ff f90e 	bl	80150d8 <_ZN8touchgfx6BitmapC1Et>
 8015ebc:	f107 0318 	add.w	r3, r7, #24
 8015ec0:	2101      	movs	r1, #1
 8015ec2:	4618      	mov	r0, r3
 8015ec4:	f7ff f908 	bl	80150d8 <_ZN8touchgfx6BitmapC1Et>
 8015ec8:	f107 0218 	add.w	r2, r7, #24
 8015ecc:	f107 0314 	add.w	r3, r7, #20
 8015ed0:	4619      	mov	r1, r3
 8015ed2:	4620      	mov	r0, r4
 8015ed4:	f006 f84a 	bl	801bf6c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	f103 02f0 	add.w	r2, r3, #240	@ 0xf0
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8015ee4:	4619      	mov	r1, r3
 8015ee6:	4610      	mov	r0, r2
 8015ee8:	f7ff fbd0 	bl	801568c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    add(button1);
 8015eec:	687a      	ldr	r2, [r7, #4]
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	33f0      	adds	r3, #240	@ 0xf0
 8015ef2:	4619      	mov	r1, r3
 8015ef4:	4610      	mov	r0, r2
 8015ef6:	f7ff fb2d 	bl	8015554 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	4618      	mov	r0, r3
 8015efe:	373c      	adds	r7, #60	@ 0x3c
 8015f00:	46bd      	mov	sp, r7
 8015f02:	bd90      	pop	{r4, r7, pc}
 8015f04:	0802e348 	.word	0x0802e348
 8015f08:	08015fa7 	.word	0x08015fa7

08015f0c <_ZN14screenViewBaseD1Ev>:

screenViewBase::~screenViewBase()
 8015f0c:	b580      	push	{r7, lr}
 8015f0e:	b082      	sub	sp, #8
 8015f10:	af00      	add	r7, sp, #0
 8015f12:	6078      	str	r0, [r7, #4]
 8015f14:	4a15      	ldr	r2, [pc, #84]	@ (8015f6c <_ZN14screenViewBaseD1Ev+0x60>)
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	601a      	str	r2, [r3, #0]
{

}
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8015f20:	4618      	mov	r0, r3
 8015f22:	f000 f88b 	bl	801603c <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	33f0      	adds	r3, #240	@ 0xf0
 8015f2a:	4618      	mov	r0, r3
 8015f2c:	f7ff fe1c 	bl	8015b68 <_ZN8touchgfx6ButtonD1Ev>
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	33c4      	adds	r3, #196	@ 0xc4
 8015f34:	4618      	mov	r0, r3
 8015f36:	f7ff fdf5 	bl	8015b24 <_ZN8touchgfx3BoxD1Ev>
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	3398      	adds	r3, #152	@ 0x98
 8015f3e:	4618      	mov	r0, r3
 8015f40:	f7ff fdf0 	bl	8015b24 <_ZN8touchgfx3BoxD1Ev>
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	336c      	adds	r3, #108	@ 0x6c
 8015f48:	4618      	mov	r0, r3
 8015f4a:	f7ff fdeb 	bl	8015b24 <_ZN8touchgfx3BoxD1Ev>
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	3340      	adds	r3, #64	@ 0x40
 8015f52:	4618      	mov	r0, r3
 8015f54:	f7ff fde6 	bl	8015b24 <_ZN8touchgfx3BoxD1Ev>
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	4618      	mov	r0, r3
 8015f5c:	f7ff fe76 	bl	8015c4c <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	4618      	mov	r0, r3
 8015f64:	3708      	adds	r7, #8
 8015f66:	46bd      	mov	sp, r7
 8015f68:	bd80      	pop	{r7, pc}
 8015f6a:	bf00      	nop
 8015f6c:	0802e348 	.word	0x0802e348

08015f70 <_ZN14screenViewBaseD0Ev>:
screenViewBase::~screenViewBase()
 8015f70:	b580      	push	{r7, lr}
 8015f72:	b082      	sub	sp, #8
 8015f74:	af00      	add	r7, sp, #0
 8015f76:	6078      	str	r0, [r7, #4]
}
 8015f78:	6878      	ldr	r0, [r7, #4]
 8015f7a:	f7ff ffc7 	bl	8015f0c <_ZN14screenViewBaseD1Ev>
 8015f7e:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8015f82:	6878      	ldr	r0, [r7, #4]
 8015f84:	f015 fd69 	bl	802ba5a <_ZdlPvj>
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	4618      	mov	r0, r3
 8015f8c:	3708      	adds	r7, #8
 8015f8e:	46bd      	mov	sp, r7
 8015f90:	bd80      	pop	{r7, pc}

08015f92 <_ZN14screenViewBase11setupScreenEv>:

void screenViewBase::setupScreen()
{
 8015f92:	b480      	push	{r7}
 8015f94:	b083      	sub	sp, #12
 8015f96:	af00      	add	r7, sp, #0
 8015f98:	6078      	str	r0, [r7, #4]

}
 8015f9a:	bf00      	nop
 8015f9c:	370c      	adds	r7, #12
 8015f9e:	46bd      	mov	sp, r7
 8015fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fa4:	4770      	bx	lr

08015fa6 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void screenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8015fa6:	b580      	push	{r7, lr}
 8015fa8:	b082      	sub	sp, #8
 8015faa:	af00      	add	r7, sp, #0
 8015fac:	6078      	str	r0, [r7, #4]
 8015fae:	6039      	str	r1, [r7, #0]
    if (&src == &button1)
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	33f0      	adds	r3, #240	@ 0xf0
 8015fb4:	683a      	ldr	r2, [r7, #0]
 8015fb6:	429a      	cmp	r2, r3
 8015fb8:	d106      	bne.n	8015fc8 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When button1 clicked change screen to Screen1
        //Go to Screen1 with no screen transition
        application().gotoScreen1ScreenNoTransition();
 8015fba:	6878      	ldr	r0, [r7, #4]
 8015fbc:	f7ff fe3b 	bl	8015c36 <_ZN14screenViewBase11applicationEv>
 8015fc0:	4603      	mov	r3, r0
 8015fc2:	4618      	mov	r0, r3
 8015fc4:	f7fe fc88 	bl	80148d8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
}
 8015fc8:	bf00      	nop
 8015fca:	3708      	adds	r7, #8
 8015fcc:	46bd      	mov	sp, r7
 8015fce:	bd80      	pop	{r7, pc}

08015fd0 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>:
    View()
 8015fd0:	b580      	push	{r7, lr}
 8015fd2:	b082      	sub	sp, #8
 8015fd4:	af00      	add	r7, sp, #0
 8015fd6:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	4618      	mov	r0, r3
 8015fdc:	f009 fd68 	bl	801fab0 <_ZN8touchgfx6ScreenC1Ev>
 8015fe0:	4a05      	ldr	r2, [pc, #20]	@ (8015ff8 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev+0x28>)
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	601a      	str	r2, [r3, #0]
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	2200      	movs	r2, #0
 8015fea:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	4618      	mov	r0, r3
 8015ff0:	3708      	adds	r7, #8
 8015ff2:	46bd      	mov	sp, r7
 8015ff4:	bd80      	pop	{r7, pc}
 8015ff6:	bf00      	nop
 8015ff8:	0802e394 	.word	0x0802e394

08015ffc <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 8015ffc:	b580      	push	{r7, lr}
 8015ffe:	b084      	sub	sp, #16
 8016000:	af00      	add	r7, sp, #0
 8016002:	60f8      	str	r0, [r7, #12]
 8016004:	60b9      	str	r1, [r7, #8]
 8016006:	4639      	mov	r1, r7
 8016008:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 801600c:	68fb      	ldr	r3, [r7, #12]
 801600e:	4618      	mov	r0, r3
 8016010:	f7ff fcf4 	bl	80159fc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8016014:	4a08      	ldr	r2, [pc, #32]	@ (8016038 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8016016:	68fb      	ldr	r3, [r7, #12]
 8016018:	601a      	str	r2, [r3, #0]
 801601a:	68fb      	ldr	r3, [r7, #12]
 801601c:	68ba      	ldr	r2, [r7, #8]
 801601e:	605a      	str	r2, [r3, #4]
 8016020:	68fb      	ldr	r3, [r7, #12]
 8016022:	3308      	adds	r3, #8
 8016024:	463a      	mov	r2, r7
 8016026:	e892 0003 	ldmia.w	r2, {r0, r1}
 801602a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801602e:	68fb      	ldr	r3, [r7, #12]
 8016030:	4618      	mov	r0, r3
 8016032:	3710      	adds	r7, #16
 8016034:	46bd      	mov	sp, r7
 8016036:	bd80      	pop	{r7, pc}
 8016038:	0802e37c 	.word	0x0802e37c

0801603c <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 801603c:	b580      	push	{r7, lr}
 801603e:	b082      	sub	sp, #8
 8016040:	af00      	add	r7, sp, #0
 8016042:	6078      	str	r0, [r7, #4]
 8016044:	4a05      	ldr	r2, [pc, #20]	@ (801605c <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	601a      	str	r2, [r3, #0]
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	4618      	mov	r0, r3
 801604e:	f7ff fd05 	bl	8015a5c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	4618      	mov	r0, r3
 8016056:	3708      	adds	r7, #8
 8016058:	46bd      	mov	sp, r7
 801605a:	bd80      	pop	{r7, pc}
 801605c:	0802e37c 	.word	0x0802e37c

08016060 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8016060:	b580      	push	{r7, lr}
 8016062:	b082      	sub	sp, #8
 8016064:	af00      	add	r7, sp, #0
 8016066:	6078      	str	r0, [r7, #4]
 8016068:	6878      	ldr	r0, [r7, #4]
 801606a:	f7ff ffe7 	bl	801603c <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801606e:	2110      	movs	r1, #16
 8016070:	6878      	ldr	r0, [r7, #4]
 8016072:	f015 fcf2 	bl	802ba5a <_ZdlPvj>
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	4618      	mov	r0, r3
 801607a:	3708      	adds	r7, #8
 801607c:	46bd      	mov	sp, r7
 801607e:	bd80      	pop	{r7, pc}

08016080 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8016080:	b580      	push	{r7, lr}
 8016082:	b082      	sub	sp, #8
 8016084:	af00      	add	r7, sp, #0
 8016086:	6078      	str	r0, [r7, #4]
 8016088:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	685b      	ldr	r3, [r3, #4]
 801608e:	687a      	ldr	r2, [r7, #4]
 8016090:	68d2      	ldr	r2, [r2, #12]
 8016092:	1052      	asrs	r2, r2, #1
 8016094:	1898      	adds	r0, r3, r2
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	68db      	ldr	r3, [r3, #12]
 801609a:	f003 0301 	and.w	r3, r3, #1
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d102      	bne.n	80160a8 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	689b      	ldr	r3, [r3, #8]
 80160a6:	e00a      	b.n	80160be <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	685b      	ldr	r3, [r3, #4]
 80160ac:	687a      	ldr	r2, [r7, #4]
 80160ae:	68d2      	ldr	r2, [r2, #12]
 80160b0:	1052      	asrs	r2, r2, #1
 80160b2:	4413      	add	r3, r2
 80160b4:	681b      	ldr	r3, [r3, #0]
 80160b6:	687a      	ldr	r2, [r7, #4]
 80160b8:	6892      	ldr	r2, [r2, #8]
 80160ba:	4413      	add	r3, r2
 80160bc:	681b      	ldr	r3, [r3, #0]
 80160be:	6839      	ldr	r1, [r7, #0]
 80160c0:	4798      	blx	r3
    }
 80160c2:	bf00      	nop
 80160c4:	3708      	adds	r7, #8
 80160c6:	46bd      	mov	sp, r7
 80160c8:	bd80      	pop	{r7, pc}

080160ca <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80160ca:	b480      	push	{r7}
 80160cc:	b083      	sub	sp, #12
 80160ce:	af00      	add	r7, sp, #0
 80160d0:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	685b      	ldr	r3, [r3, #4]
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d010      	beq.n	80160fc <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	689b      	ldr	r3, [r3, #8]
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d107      	bne.n	80160f2 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	68db      	ldr	r3, [r3, #12]
 80160e6:	f003 0301 	and.w	r3, r3, #1
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d101      	bne.n	80160f2 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80160ee:	2301      	movs	r3, #1
 80160f0:	e000      	b.n	80160f4 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 80160f2:	2300      	movs	r3, #0
 80160f4:	2b01      	cmp	r3, #1
 80160f6:	d001      	beq.n	80160fc <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80160f8:	2301      	movs	r3, #1
 80160fa:	e000      	b.n	80160fe <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 80160fc:	2300      	movs	r3, #0
    }
 80160fe:	4618      	mov	r0, r3
 8016100:	370c      	adds	r7, #12
 8016102:	46bd      	mov	sp, r7
 8016104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016108:	4770      	bx	lr
	...

0801610c <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 801610c:	b480      	push	{r7}
 801610e:	af00      	add	r7, sp, #0
    return bitmap_database;
 8016110:	4b02      	ldr	r3, [pc, #8]	@ (801611c <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8016112:	4618      	mov	r0, r3
 8016114:	46bd      	mov	sp, r7
 8016116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801611a:	4770      	bx	lr
 801611c:	0802e3c0 	.word	0x0802e3c0

08016120 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8016120:	b480      	push	{r7}
 8016122:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8016124:	2304      	movs	r3, #4
}
 8016126:	4618      	mov	r0, r3
 8016128:	46bd      	mov	sp, r7
 801612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801612e:	4770      	bx	lr

08016130 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8016130:	b480      	push	{r7}
 8016132:	b085      	sub	sp, #20
 8016134:	af00      	add	r7, sp, #0
 8016136:	60f8      	str	r0, [r7, #12]
 8016138:	460b      	mov	r3, r1
 801613a:	607a      	str	r2, [r7, #4]
 801613c:	817b      	strh	r3, [r7, #10]
        return 0;
 801613e:	2300      	movs	r3, #0
    }
 8016140:	4618      	mov	r0, r3
 8016142:	3714      	adds	r7, #20
 8016144:	46bd      	mov	sp, r7
 8016146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801614a:	4770      	bx	lr

0801614c <_ZNK8touchgfx4Font12getGSUBTableEv>:
    virtual const uint16_t* getGSUBTable() const
 801614c:	b480      	push	{r7}
 801614e:	b083      	sub	sp, #12
 8016150:	af00      	add	r7, sp, #0
 8016152:	6078      	str	r0, [r7, #4]
        return 0;
 8016154:	2300      	movs	r3, #0
    }
 8016156:	4618      	mov	r0, r3
 8016158:	370c      	adds	r7, #12
 801615a:	46bd      	mov	sp, r7
 801615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016160:	4770      	bx	lr

08016162 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8016162:	b480      	push	{r7}
 8016164:	b083      	sub	sp, #12
 8016166:	af00      	add	r7, sp, #0
 8016168:	6078      	str	r0, [r7, #4]
        return 0;
 801616a:	2300      	movs	r3, #0
    }
 801616c:	4618      	mov	r0, r3
 801616e:	370c      	adds	r7, #12
 8016170:	46bd      	mov	sp, r7
 8016172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016176:	4770      	bx	lr

08016178 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8016178:	b480      	push	{r7}
 801617a:	b085      	sub	sp, #20
 801617c:	af00      	add	r7, sp, #0
 801617e:	60f8      	str	r0, [r7, #12]
 8016180:	60b9      	str	r1, [r7, #8]
 8016182:	4613      	mov	r3, r2
 8016184:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 8016186:	4a07      	ldr	r2, [pc, #28]	@ (80161a4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8016188:	68fb      	ldr	r3, [r7, #12]
 801618a:	6013      	str	r3, [r2, #0]
        fonts = f;
 801618c:	4a06      	ldr	r2, [pc, #24]	@ (80161a8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 801618e:	68bb      	ldr	r3, [r7, #8]
 8016190:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8016192:	4a06      	ldr	r2, [pc, #24]	@ (80161ac <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8016194:	88fb      	ldrh	r3, [r7, #6]
 8016196:	8013      	strh	r3, [r2, #0]
    }
 8016198:	bf00      	nop
 801619a:	3714      	adds	r7, #20
 801619c:	46bd      	mov	sp, r7
 801619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161a2:	4770      	bx	lr
 80161a4:	24034284 	.word	0x24034284
 80161a8:	2403428c 	.word	0x2403428c
 80161ac:	24034288 	.word	0x24034288

080161b0 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80161b0:	b40e      	push	{r1, r2, r3}
 80161b2:	b580      	push	{r7, lr}
 80161b4:	b085      	sub	sp, #20
 80161b6:	af00      	add	r7, sp, #0
 80161b8:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 80161ba:	f107 0320 	add.w	r3, r7, #32
 80161be:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80161c0:	68bb      	ldr	r3, [r7, #8]
 80161c2:	69fa      	ldr	r2, [r7, #28]
 80161c4:	2100      	movs	r1, #0
 80161c6:	6878      	ldr	r0, [r7, #4]
 80161c8:	f008 fd8c 	bl	801ece4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80161cc:	4603      	mov	r3, r0
 80161ce:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80161d0:	89fb      	ldrh	r3, [r7, #14]
}
 80161d2:	4618      	mov	r0, r3
 80161d4:	3714      	adds	r7, #20
 80161d6:	46bd      	mov	sp, r7
 80161d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80161dc:	b003      	add	sp, #12
 80161de:	4770      	bx	lr

080161e0 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80161e0:	b40c      	push	{r2, r3}
 80161e2:	b580      	push	{r7, lr}
 80161e4:	b084      	sub	sp, #16
 80161e6:	af00      	add	r7, sp, #0
 80161e8:	6078      	str	r0, [r7, #4]
 80161ea:	460b      	mov	r3, r1
 80161ec:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 80161ee:	f107 031c 	add.w	r3, r7, #28
 80161f2:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80161f4:	78f9      	ldrb	r1, [r7, #3]
 80161f6:	68bb      	ldr	r3, [r7, #8]
 80161f8:	69ba      	ldr	r2, [r7, #24]
 80161fa:	6878      	ldr	r0, [r7, #4]
 80161fc:	f008 fd72 	bl	801ece4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8016200:	4603      	mov	r3, r0
 8016202:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8016204:	89fb      	ldrh	r3, [r7, #14]
}
 8016206:	4618      	mov	r0, r3
 8016208:	3710      	adds	r7, #16
 801620a:	46bd      	mov	sp, r7
 801620c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8016210:	b002      	add	sp, #8
 8016212:	4770      	bx	lr

08016214 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8016214:	b580      	push	{r7, lr}
 8016216:	b08a      	sub	sp, #40	@ 0x28
 8016218:	af00      	add	r7, sp, #0
 801621a:	6078      	str	r0, [r7, #4]
 801621c:	460b      	mov	r3, r1
 801621e:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016224:	2b00      	cmp	r3, #0
 8016226:	d016      	beq.n	8016256 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	3322      	adds	r3, #34	@ 0x22
 801622c:	627b      	str	r3, [r7, #36]	@ 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 801622e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016230:	8adb      	ldrh	r3, [r3, #22]
 8016232:	2b00      	cmp	r3, #0
 8016234:	d105      	bne.n	8016242 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8016236:	4b43      	ldr	r3, [pc, #268]	@ (8016344 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8016238:	4a43      	ldr	r2, [pc, #268]	@ (8016348 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 801623a:	21c5      	movs	r1, #197	@ 0xc5
 801623c:	4843      	ldr	r0, [pc, #268]	@ (801634c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 801623e:	f015 ff83 	bl	802c148 <__assert_func>
            return buffer[pos];
 8016242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016244:	8a9b      	ldrh	r3, [r3, #20]
 8016246:	461a      	mov	r2, r3
 8016248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801624a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801624e:	2b00      	cmp	r3, #0
 8016250:	d001      	beq.n	8016256 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8016252:	2301      	movs	r3, #1
 8016254:	e000      	b.n	8016258 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8016256:	2300      	movs	r3, #0
 8016258:	2b00      	cmp	r3, #0
 801625a:	d06a      	beq.n	8016332 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 801625c:	6878      	ldr	r0, [r7, #4]
 801625e:	f00a fa9f 	bl	80207a0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	3322      	adds	r3, #34	@ 0x22
 8016266:	623b      	str	r3, [r7, #32]
 8016268:	2301      	movs	r3, #1
 801626a:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 801626c:	6a3b      	ldr	r3, [r7, #32]
 801626e:	8adb      	ldrh	r3, [r3, #22]
 8016270:	8bfa      	ldrh	r2, [r7, #30]
 8016272:	429a      	cmp	r2, r3
 8016274:	d305      	bcc.n	8016282 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8016276:	4b36      	ldr	r3, [pc, #216]	@ (8016350 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8016278:	4a36      	ldr	r2, [pc, #216]	@ (8016354 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 801627a:	21cb      	movs	r1, #203	@ 0xcb
 801627c:	4833      	ldr	r0, [pc, #204]	@ (801634c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 801627e:	f015 ff63 	bl	802c148 <__assert_func>
            const uint16_t index = pos + offset;
 8016282:	6a3b      	ldr	r3, [r7, #32]
 8016284:	8a9a      	ldrh	r2, [r3, #20]
 8016286:	8bfb      	ldrh	r3, [r7, #30]
 8016288:	4413      	add	r3, r2
 801628a:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 801628c:	8bbb      	ldrh	r3, [r7, #28]
 801628e:	2b09      	cmp	r3, #9
 8016290:	d801      	bhi.n	8016296 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8016292:	8bbb      	ldrh	r3, [r7, #28]
 8016294:	e001      	b.n	801629a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8016296:	8bbb      	ldrh	r3, [r7, #28]
 8016298:	3b0a      	subs	r3, #10
 801629a:	6a3a      	ldr	r2, [r7, #32]
 801629c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80162a0:	f640 123f 	movw	r2, #2367	@ 0x93f
 80162a4:	4293      	cmp	r3, r2
 80162a6:	bf0c      	ite	eq
 80162a8:	2301      	moveq	r3, #1
 80162aa:	2300      	movne	r3, #0
 80162ac:	b2db      	uxtb	r3, r3
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d03f      	beq.n	8016332 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	3322      	adds	r3, #34	@ 0x22
 80162b6:	687a      	ldr	r2, [r7, #4]
 80162b8:	3222      	adds	r2, #34	@ 0x22
 80162ba:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 80162bc:	68ba      	ldr	r2, [r7, #8]
 80162be:	8ad2      	ldrh	r2, [r2, #22]
 80162c0:	2a00      	cmp	r2, #0
 80162c2:	d105      	bne.n	80162d0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 80162c4:	4b1f      	ldr	r3, [pc, #124]	@ (8016344 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80162c6:	4a20      	ldr	r2, [pc, #128]	@ (8016348 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80162c8:	21c5      	movs	r1, #197	@ 0xc5
 80162ca:	4820      	ldr	r0, [pc, #128]	@ (801634c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80162cc:	f015 ff3c 	bl	802c148 <__assert_func>
            return buffer[pos];
 80162d0:	68ba      	ldr	r2, [r7, #8]
 80162d2:	8a92      	ldrh	r2, [r2, #20]
 80162d4:	4611      	mov	r1, r2
 80162d6:	68ba      	ldr	r2, [r7, #8]
 80162d8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80162dc:	613b      	str	r3, [r7, #16]
 80162de:	4613      	mov	r3, r2
 80162e0:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 80162e2:	693b      	ldr	r3, [r7, #16]
 80162e4:	8adb      	ldrh	r3, [r3, #22]
 80162e6:	2b01      	cmp	r3, #1
 80162e8:	d806      	bhi.n	80162f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 80162ea:	4b1b      	ldr	r3, [pc, #108]	@ (8016358 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 80162ec:	4a1b      	ldr	r2, [pc, #108]	@ (801635c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 80162ee:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 80162f2:	4816      	ldr	r0, [pc, #88]	@ (801634c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80162f4:	f015 ff28 	bl	802c148 <__assert_func>
            const uint16_t index = pos + 1;
 80162f8:	693b      	ldr	r3, [r7, #16]
 80162fa:	8a9b      	ldrh	r3, [r3, #20]
 80162fc:	3301      	adds	r3, #1
 80162fe:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8016300:	89bb      	ldrh	r3, [r7, #12]
 8016302:	2b09      	cmp	r3, #9
 8016304:	d801      	bhi.n	801630a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8016306:	89bb      	ldrh	r3, [r7, #12]
 8016308:	e000      	b.n	801630c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 801630a:	2300      	movs	r3, #0
 801630c:	693a      	ldr	r2, [r7, #16]
 801630e:	89f9      	ldrh	r1, [r7, #14]
 8016310:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8016314:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	3322      	adds	r3, #34	@ 0x22
 801631a:	61bb      	str	r3, [r7, #24]
 801631c:	f640 133f 	movw	r3, #2367	@ 0x93f
 8016320:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8016322:	69bb      	ldr	r3, [r7, #24]
 8016324:	8a9b      	ldrh	r3, [r3, #20]
 8016326:	4619      	mov	r1, r3
 8016328:	69bb      	ldr	r3, [r7, #24]
 801632a:	8afa      	ldrh	r2, [r7, #22]
 801632c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8016330:	bf00      	nop
        }
    }
    return getNextChar();
 8016332:	6878      	ldr	r0, [r7, #4]
 8016334:	f00a f936 	bl	80205a4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8016338:	4603      	mov	r3, r0
}
 801633a:	4618      	mov	r0, r3
 801633c:	3728      	adds	r7, #40	@ 0x28
 801633e:	46bd      	mov	sp, r7
 8016340:	bd80      	pop	{r7, pc}
 8016342:	bf00      	nop
 8016344:	0802d650 	.word	0x0802d650
 8016348:	0802d65c 	.word	0x0802d65c
 801634c:	0802d708 	.word	0x0802d708
 8016350:	0802d750 	.word	0x0802d750
 8016354:	0802d760 	.word	0x0802d760
 8016358:	0802d834 	.word	0x0802d834
 801635c:	0802d840 	.word	0x0802d840

08016360 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8016360:	b580      	push	{r7, lr}
 8016362:	b082      	sub	sp, #8
 8016364:	af00      	add	r7, sp, #0
 8016366:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8016368:	6878      	ldr	r0, [r7, #4]
 801636a:	f00a f8e4 	bl	8020536 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 801636e:	bf00      	nop
 8016370:	3708      	adds	r7, #8
 8016372:	46bd      	mov	sp, r7
 8016374:	bd80      	pop	{r7, pc}
	...

08016378 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8016378:	b590      	push	{r4, r7, lr}
 801637a:	b085      	sub	sp, #20
 801637c:	af00      	add	r7, sp, #0
 801637e:	4603      	mov	r3, r0
 8016380:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8016382:	2300      	movs	r3, #0
 8016384:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8016386:	88fb      	ldrh	r3, [r7, #6]
 8016388:	2b00      	cmp	r3, #0
 801638a:	d127      	bne.n	80163dc <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 801638c:	88fb      	ldrh	r3, [r7, #6]
 801638e:	4a1e      	ldr	r2, [pc, #120]	@ (8016408 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8016390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016394:	2b00      	cmp	r3, #0
 8016396:	d016      	beq.n	80163c6 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8016398:	88fb      	ldrh	r3, [r7, #6]
 801639a:	4a1b      	ldr	r2, [pc, #108]	@ (8016408 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 801639c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80163a0:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80163a2:	68bb      	ldr	r3, [r7, #8]
 80163a4:	681b      	ldr	r3, [r3, #0]
 80163a6:	68ba      	ldr	r2, [r7, #8]
 80163a8:	4413      	add	r3, r2
 80163aa:	4a18      	ldr	r2, [pc, #96]	@ (801640c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80163ac:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80163ae:	68bb      	ldr	r3, [r7, #8]
 80163b0:	685b      	ldr	r3, [r3, #4]
 80163b2:	68ba      	ldr	r2, [r7, #8]
 80163b4:	4413      	add	r3, r2
 80163b6:	4a16      	ldr	r2, [pc, #88]	@ (8016410 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80163b8:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80163ba:	68bb      	ldr	r3, [r7, #8]
 80163bc:	689b      	ldr	r3, [r3, #8]
 80163be:	68ba      	ldr	r2, [r7, #8]
 80163c0:	4413      	add	r3, r2
 80163c2:	60fb      	str	r3, [r7, #12]
 80163c4:	e00a      	b.n	80163dc <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 80163c6:	4b11      	ldr	r3, [pc, #68]	@ (801640c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80163c8:	4a12      	ldr	r2, [pc, #72]	@ (8016414 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 80163ca:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80163cc:	4a12      	ldr	r2, [pc, #72]	@ (8016418 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 80163ce:	4b10      	ldr	r3, [pc, #64]	@ (8016410 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80163d0:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80163d2:	88fb      	ldrh	r3, [r7, #6]
 80163d4:	4a11      	ldr	r2, [pc, #68]	@ (801641c <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 80163d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80163da:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 80163dc:	68fb      	ldr	r3, [r7, #12]
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d00d      	beq.n	80163fe <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 80163e2:	4a0f      	ldr	r2, [pc, #60]	@ (8016420 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 80163e4:	88fb      	ldrh	r3, [r7, #6]
 80163e6:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80163e8:	f000 f824 	bl	8016434 <_ZN17TypedTextDatabase8getFontsEv>
 80163ec:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80163ee:	f000 f819 	bl	8016424 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 80163f2:	4603      	mov	r3, r0
 80163f4:	461a      	mov	r2, r3
 80163f6:	4621      	mov	r1, r4
 80163f8:	68f8      	ldr	r0, [r7, #12]
 80163fa:	f7ff febd 	bl	8016178 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 80163fe:	bf00      	nop
 8016400:	3714      	adds	r7, #20
 8016402:	46bd      	mov	sp, r7
 8016404:	bd90      	pop	{r4, r7, pc}
 8016406:	bf00      	nop
 8016408:	24032f9c 	.word	0x24032f9c
 801640c:	24032fa4 	.word	0x24032fa4
 8016410:	24032fa8 	.word	0x24032fa8
 8016414:	080519f0 	.word	0x080519f0
 8016418:	080519ec 	.word	0x080519ec
 801641c:	080519f8 	.word	0x080519f8
 8016420:	24032fa0 	.word	0x24032fa0

08016424 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8016424:	b480      	push	{r7}
 8016426:	af00      	add	r7, sp, #0
    return 0;
 8016428:	2300      	movs	r3, #0
}
 801642a:	4618      	mov	r0, r3
 801642c:	46bd      	mov	sp, r7
 801642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016432:	4770      	bx	lr

08016434 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8016434:	b480      	push	{r7}
 8016436:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8016438:	4b02      	ldr	r3, [pc, #8]	@ (8016444 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 801643a:	4618      	mov	r0, r3
 801643c:	46bd      	mov	sp, r7
 801643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016442:	4770      	bx	lr
 8016444:	24032fac 	.word	0x24032fac

08016448 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8016448:	b580      	push	{r7, lr}
 801644a:	b082      	sub	sp, #8
 801644c:	af00      	add	r7, sp, #0
 801644e:	6078      	str	r0, [r7, #4]
 8016450:	6039      	str	r1, [r7, #0]
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	2b01      	cmp	r3, #1
 8016456:	d113      	bne.n	8016480 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8016458:	683b      	ldr	r3, [r7, #0]
 801645a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801645e:	4293      	cmp	r3, r2
 8016460:	d10e      	bne.n	8016480 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 8016462:	f7fd fe6b 	bl	801413c <_Z23getFont_verdana_20_4bppv>
 8016466:	4603      	mov	r3, r0
};
 8016468:	4a07      	ldr	r2, [pc, #28]	@ (8016488 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 801646a:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 801646c:	f7fd fec0 	bl	80141f0 <_Z23getFont_verdana_40_4bppv>
 8016470:	4603      	mov	r3, r0
};
 8016472:	4a05      	ldr	r2, [pc, #20]	@ (8016488 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8016474:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 8016476:	f7fd fe07 	bl	8014088 <_Z23getFont_verdana_10_4bppv>
 801647a:	4603      	mov	r3, r0
};
 801647c:	4a02      	ldr	r2, [pc, #8]	@ (8016488 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 801647e:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 8016480:	bf00      	nop
 8016482:	3708      	adds	r7, #8
 8016484:	46bd      	mov	sp, r7
 8016486:	bd80      	pop	{r7, pc}
 8016488:	24032fac 	.word	0x24032fac

0801648c <_GLOBAL__sub_I_touchgfx_fonts>:
 801648c:	b580      	push	{r7, lr}
 801648e:	af00      	add	r7, sp, #0
 8016490:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8016494:	2001      	movs	r0, #1
 8016496:	f7ff ffd7 	bl	8016448 <_Z41__static_initialization_and_destruction_0ii>
 801649a:	bd80      	pop	{r7, pc}

0801649c <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 801649c:	b580      	push	{r7, lr}
 801649e:	b082      	sub	sp, #8
 80164a0:	af00      	add	r7, sp, #0
 80164a2:	6078      	str	r0, [r7, #4]
 80164a4:	4a05      	ldr	r2, [pc, #20]	@ (80164bc <_ZN19FrontendApplicationD1Ev+0x20>)
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	601a      	str	r2, [r3, #0]
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	4618      	mov	r0, r3
 80164ae:	f7fe f917 	bl	80146e0 <_ZN23FrontendApplicationBaseD1Ev>
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	4618      	mov	r0, r3
 80164b6:	3708      	adds	r7, #8
 80164b8:	46bd      	mov	sp, r7
 80164ba:	bd80      	pop	{r7, pc}
 80164bc:	0802e47c 	.word	0x0802e47c

080164c0 <_ZN19FrontendApplicationD0Ev>:
 80164c0:	b580      	push	{r7, lr}
 80164c2:	b082      	sub	sp, #8
 80164c4:	af00      	add	r7, sp, #0
 80164c6:	6078      	str	r0, [r7, #4]
 80164c8:	6878      	ldr	r0, [r7, #4]
 80164ca:	f7ff ffe7 	bl	801649c <_ZN19FrontendApplicationD1Ev>
 80164ce:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 80164d2:	6878      	ldr	r0, [r7, #4]
 80164d4:	f015 fac1 	bl	802ba5a <_ZdlPvj>
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	4618      	mov	r0, r3
 80164dc:	3708      	adds	r7, #8
 80164de:	46bd      	mov	sp, r7
 80164e0:	bd80      	pop	{r7, pc}

080164e2 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80164e2:	b580      	push	{r7, lr}
 80164e4:	b082      	sub	sp, #8
 80164e6:	af00      	add	r7, sp, #0
 80164e8:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 80164f0:	4618      	mov	r0, r3
 80164f2:	f000 f82d 	bl	8016550 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	4618      	mov	r0, r3
 80164fa:	f007 fd27 	bl	801df4c <_ZN8touchgfx11Application15handleTickEventEv>
    }
 80164fe:	bf00      	nop
 8016500:	3708      	adds	r7, #8
 8016502:	46bd      	mov	sp, r7
 8016504:	bd80      	pop	{r7, pc}
	...

08016508 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8016508:	b580      	push	{r7, lr}
 801650a:	b084      	sub	sp, #16
 801650c:	af00      	add	r7, sp, #0
 801650e:	60f8      	str	r0, [r7, #12]
 8016510:	60b9      	str	r1, [r7, #8]
 8016512:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8016514:	68fb      	ldr	r3, [r7, #12]
 8016516:	687a      	ldr	r2, [r7, #4]
 8016518:	68b9      	ldr	r1, [r7, #8]
 801651a:	4618      	mov	r0, r3
 801651c:	f7fe f930 	bl	8014780 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8016520:	4a03      	ldr	r2, [pc, #12]	@ (8016530 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8016522:	68fb      	ldr	r3, [r7, #12]
 8016524:	601a      	str	r2, [r3, #0]
{

}
 8016526:	68fb      	ldr	r3, [r7, #12]
 8016528:	4618      	mov	r0, r3
 801652a:	3710      	adds	r7, #16
 801652c:	46bd      	mov	sp, r7
 801652e:	bd80      	pop	{r7, pc}
 8016530:	0802e47c 	.word	0x0802e47c

08016534 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8016534:	b480      	push	{r7}
 8016536:	b083      	sub	sp, #12
 8016538:	af00      	add	r7, sp, #0
 801653a:	6078      	str	r0, [r7, #4]
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	2200      	movs	r2, #0
 8016540:	601a      	str	r2, [r3, #0]
{

}
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	4618      	mov	r0, r3
 8016546:	370c      	adds	r7, #12
 8016548:	46bd      	mov	sp, r7
 801654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801654e:	4770      	bx	lr

08016550 <_ZN5Model4tickEv>:

void Model::tick()
{
 8016550:	b480      	push	{r7}
 8016552:	b083      	sub	sp, #12
 8016554:	af00      	add	r7, sp, #0
 8016556:	6078      	str	r0, [r7, #4]

}
 8016558:	bf00      	nop
 801655a:	370c      	adds	r7, #12
 801655c:	46bd      	mov	sp, r7
 801655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016562:	4770      	bx	lr

08016564 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8016564:	b480      	push	{r7}
 8016566:	b083      	sub	sp, #12
 8016568:	af00      	add	r7, sp, #0
 801656a:	6078      	str	r0, [r7, #4]
    {
    }
 801656c:	bf00      	nop
 801656e:	370c      	adds	r7, #12
 8016570:	46bd      	mov	sp, r7
 8016572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016576:	4770      	bx	lr

08016578 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8016578:	b480      	push	{r7}
 801657a:	b083      	sub	sp, #12
 801657c:	af00      	add	r7, sp, #0
 801657e:	6078      	str	r0, [r7, #4]
    {
    }
 8016580:	bf00      	nop
 8016582:	370c      	adds	r7, #12
 8016584:	46bd      	mov	sp, r7
 8016586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801658a:	4770      	bx	lr

0801658c <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 801658c:	b480      	push	{r7}
 801658e:	b083      	sub	sp, #12
 8016590:	af00      	add	r7, sp, #0
 8016592:	6078      	str	r0, [r7, #4]
    {
 8016594:	4a04      	ldr	r2, [pc, #16]	@ (80165a8 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	601a      	str	r2, [r3, #0]
    }
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	4618      	mov	r0, r3
 801659e:	370c      	adds	r7, #12
 80165a0:	46bd      	mov	sp, r7
 80165a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165a6:	4770      	bx	lr
 80165a8:	0802e508 	.word	0x0802e508

080165ac <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 80165ac:	b580      	push	{r7, lr}
 80165ae:	b082      	sub	sp, #8
 80165b0:	af00      	add	r7, sp, #0
 80165b2:	6078      	str	r0, [r7, #4]
    }
 80165b4:	6878      	ldr	r0, [r7, #4]
 80165b6:	f7ff ffe9 	bl	801658c <_ZN8touchgfx9PresenterD1Ev>
 80165ba:	2104      	movs	r1, #4
 80165bc:	6878      	ldr	r0, [r7, #4]
 80165be:	f015 fa4c 	bl	802ba5a <_ZdlPvj>
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	4618      	mov	r0, r3
 80165c6:	3708      	adds	r7, #8
 80165c8:	46bd      	mov	sp, r7
 80165ca:	bd80      	pop	{r7, pc}

080165cc <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 80165cc:	b480      	push	{r7}
 80165ce:	b083      	sub	sp, #12
 80165d0:	af00      	add	r7, sp, #0
 80165d2:	6078      	str	r0, [r7, #4]
    {
 80165d4:	4a04      	ldr	r2, [pc, #16]	@ (80165e8 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	601a      	str	r2, [r3, #0]
    }
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	4618      	mov	r0, r3
 80165de:	370c      	adds	r7, #12
 80165e0:	46bd      	mov	sp, r7
 80165e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165e6:	4770      	bx	lr
 80165e8:	0802e508 	.word	0x0802e508

080165ec <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 80165ec:	b480      	push	{r7}
 80165ee:	b083      	sub	sp, #12
 80165f0:	af00      	add	r7, sp, #0
 80165f2:	6078      	str	r0, [r7, #4]
 80165f4:	4a06      	ldr	r2, [pc, #24]	@ (8016610 <_ZN13ModelListenerC1Ev+0x24>)
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	601a      	str	r2, [r3, #0]
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	2200      	movs	r2, #0
 80165fe:	605a      	str	r2, [r3, #4]
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	4618      	mov	r0, r3
 8016604:	370c      	adds	r7, #12
 8016606:	46bd      	mov	sp, r7
 8016608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801660c:	4770      	bx	lr
 801660e:	bf00      	nop
 8016610:	0802e4f8 	.word	0x0802e4f8

08016614 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8016614:	b480      	push	{r7}
 8016616:	b083      	sub	sp, #12
 8016618:	af00      	add	r7, sp, #0
 801661a:	6078      	str	r0, [r7, #4]
 801661c:	4a04      	ldr	r2, [pc, #16]	@ (8016630 <_ZN13ModelListenerD1Ev+0x1c>)
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	601a      	str	r2, [r3, #0]
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	4618      	mov	r0, r3
 8016626:	370c      	adds	r7, #12
 8016628:	46bd      	mov	sp, r7
 801662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801662e:	4770      	bx	lr
 8016630:	0802e4f8 	.word	0x0802e4f8

08016634 <_ZN13ModelListenerD0Ev>:
 8016634:	b580      	push	{r7, lr}
 8016636:	b082      	sub	sp, #8
 8016638:	af00      	add	r7, sp, #0
 801663a:	6078      	str	r0, [r7, #4]
 801663c:	6878      	ldr	r0, [r7, #4]
 801663e:	f7ff ffe9 	bl	8016614 <_ZN13ModelListenerD1Ev>
 8016642:	2108      	movs	r1, #8
 8016644:	6878      	ldr	r0, [r7, #4]
 8016646:	f015 fa08 	bl	802ba5a <_ZdlPvj>
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	4618      	mov	r0, r3
 801664e:	3708      	adds	r7, #8
 8016650:	46bd      	mov	sp, r7
 8016652:	bd80      	pop	{r7, pc}

08016654 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {}
 8016654:	b580      	push	{r7, lr}
 8016656:	b082      	sub	sp, #8
 8016658:	af00      	add	r7, sp, #0
 801665a:	6078      	str	r0, [r7, #4]
 801665c:	4a09      	ldr	r2, [pc, #36]	@ (8016684 <_ZN16Screen1PresenterD1Ev+0x30>)
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	601a      	str	r2, [r3, #0]
 8016662:	4a09      	ldr	r2, [pc, #36]	@ (8016688 <_ZN16Screen1PresenterD1Ev+0x34>)
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	605a      	str	r2, [r3, #4]
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	3304      	adds	r3, #4
 801666c:	4618      	mov	r0, r3
 801666e:	f7ff ffd1 	bl	8016614 <_ZN13ModelListenerD1Ev>
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	4618      	mov	r0, r3
 8016676:	f7ff ff89 	bl	801658c <_ZN8touchgfx9PresenterD1Ev>
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	4618      	mov	r0, r3
 801667e:	3708      	adds	r7, #8
 8016680:	46bd      	mov	sp, r7
 8016682:	bd80      	pop	{r7, pc}
 8016684:	0802e4d0 	.word	0x0802e4d0
 8016688:	0802e4e8 	.word	0x0802e4e8

0801668c <_ZThn4_N16Screen1PresenterD1Ev>:
 801668c:	f1a0 0004 	sub.w	r0, r0, #4
 8016690:	e7e0      	b.n	8016654 <_ZN16Screen1PresenterD1Ev>
 8016692:	bf00      	nop

08016694 <_ZN16Screen1PresenterD0Ev>:
 8016694:	b580      	push	{r7, lr}
 8016696:	b082      	sub	sp, #8
 8016698:	af00      	add	r7, sp, #0
 801669a:	6078      	str	r0, [r7, #4]
 801669c:	6878      	ldr	r0, [r7, #4]
 801669e:	f7ff ffd9 	bl	8016654 <_ZN16Screen1PresenterD1Ev>
 80166a2:	2110      	movs	r1, #16
 80166a4:	6878      	ldr	r0, [r7, #4]
 80166a6:	f015 f9d8 	bl	802ba5a <_ZdlPvj>
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	4618      	mov	r0, r3
 80166ae:	3708      	adds	r7, #8
 80166b0:	46bd      	mov	sp, r7
 80166b2:	bd80      	pop	{r7, pc}

080166b4 <_ZThn4_N16Screen1PresenterD0Ev>:
 80166b4:	f1a0 0004 	sub.w	r0, r0, #4
 80166b8:	e7ec      	b.n	8016694 <_ZN16Screen1PresenterD0Ev>
	...

080166bc <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 80166bc:	b580      	push	{r7, lr}
 80166be:	b082      	sub	sp, #8
 80166c0:	af00      	add	r7, sp, #0
 80166c2:	6078      	str	r0, [r7, #4]
 80166c4:	6039      	str	r1, [r7, #0]
    : view(v)
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	4618      	mov	r0, r3
 80166ca:	f7ff ff7f 	bl	80165cc <_ZN8touchgfx9PresenterC1Ev>
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	3304      	adds	r3, #4
 80166d2:	4618      	mov	r0, r3
 80166d4:	f7ff ff8a 	bl	80165ec <_ZN13ModelListenerC1Ev>
 80166d8:	4a06      	ldr	r2, [pc, #24]	@ (80166f4 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	601a      	str	r2, [r3, #0]
 80166de:	4a06      	ldr	r2, [pc, #24]	@ (80166f8 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	605a      	str	r2, [r3, #4]
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	683a      	ldr	r2, [r7, #0]
 80166e8:	60da      	str	r2, [r3, #12]
{

}
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	4618      	mov	r0, r3
 80166ee:	3708      	adds	r7, #8
 80166f0:	46bd      	mov	sp, r7
 80166f2:	bd80      	pop	{r7, pc}
 80166f4:	0802e4d0 	.word	0x0802e4d0
 80166f8:	0802e4e8 	.word	0x0802e4e8

080166fc <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 80166fc:	b480      	push	{r7}
 80166fe:	b083      	sub	sp, #12
 8016700:	af00      	add	r7, sp, #0
 8016702:	6078      	str	r0, [r7, #4]

}
 8016704:	bf00      	nop
 8016706:	370c      	adds	r7, #12
 8016708:	46bd      	mov	sp, r7
 801670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801670e:	4770      	bx	lr

08016710 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 8016710:	b480      	push	{r7}
 8016712:	b083      	sub	sp, #12
 8016714:	af00      	add	r7, sp, #0
 8016716:	6078      	str	r0, [r7, #4]

}
 8016718:	bf00      	nop
 801671a:	370c      	adds	r7, #12
 801671c:	46bd      	mov	sp, r7
 801671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016722:	4770      	bx	lr

08016724 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8016724:	b580      	push	{r7, lr}
 8016726:	b082      	sub	sp, #8
 8016728:	af00      	add	r7, sp, #0
 801672a:	6078      	str	r0, [r7, #4]
 801672c:	4a05      	ldr	r2, [pc, #20]	@ (8016744 <_ZN11Screen1ViewD1Ev+0x20>)
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	601a      	str	r2, [r3, #0]
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	4618      	mov	r0, r3
 8016736:	f7ff f8f5 	bl	8015924 <_ZN15Screen1ViewBaseD1Ev>
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	4618      	mov	r0, r3
 801673e:	3708      	adds	r7, #8
 8016740:	46bd      	mov	sp, r7
 8016742:	bd80      	pop	{r7, pc}
 8016744:	0802e520 	.word	0x0802e520

08016748 <_ZN11Screen1ViewD0Ev>:
 8016748:	b580      	push	{r7, lr}
 801674a:	b082      	sub	sp, #8
 801674c:	af00      	add	r7, sp, #0
 801674e:	6078      	str	r0, [r7, #4]
 8016750:	6878      	ldr	r0, [r7, #4]
 8016752:	f7ff ffe7 	bl	8016724 <_ZN11Screen1ViewD1Ev>
 8016756:	21dc      	movs	r1, #220	@ 0xdc
 8016758:	6878      	ldr	r0, [r7, #4]
 801675a:	f015 f97e 	bl	802ba5a <_ZdlPvj>
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	4618      	mov	r0, r3
 8016762:	3708      	adds	r7, #8
 8016764:	46bd      	mov	sp, r7
 8016766:	bd80      	pop	{r7, pc}

08016768 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 8016768:	b580      	push	{r7, lr}
 801676a:	b082      	sub	sp, #8
 801676c:	af00      	add	r7, sp, #0
 801676e:	6078      	str	r0, [r7, #4]
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	4618      	mov	r0, r3
 8016774:	f7ff f80c 	bl	8015790 <_ZN15Screen1ViewBaseC1Ev>
 8016778:	4a03      	ldr	r2, [pc, #12]	@ (8016788 <_ZN11Screen1ViewC1Ev+0x20>)
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	601a      	str	r2, [r3, #0]
{

}
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	4618      	mov	r0, r3
 8016782:	3708      	adds	r7, #8
 8016784:	46bd      	mov	sp, r7
 8016786:	bd80      	pop	{r7, pc}
 8016788:	0802e520 	.word	0x0802e520

0801678c <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 801678c:	b580      	push	{r7, lr}
 801678e:	b082      	sub	sp, #8
 8016790:	af00      	add	r7, sp, #0
 8016792:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	4618      	mov	r0, r3
 8016798:	f7ff f8fa 	bl	8015990 <_ZN15Screen1ViewBase11setupScreenEv>
}
 801679c:	bf00      	nop
 801679e:	3708      	adds	r7, #8
 80167a0:	46bd      	mov	sp, r7
 80167a2:	bd80      	pop	{r7, pc}

080167a4 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 80167a4:	b580      	push	{r7, lr}
 80167a6:	b082      	sub	sp, #8
 80167a8:	af00      	add	r7, sp, #0
 80167aa:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	4618      	mov	r0, r3
 80167b0:	f7fe feb0 	bl	8015514 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 80167b4:	bf00      	nop
 80167b6:	3708      	adds	r7, #8
 80167b8:	46bd      	mov	sp, r7
 80167ba:	bd80      	pop	{r7, pc}

080167bc <_ZN15screenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~screenPresenter() {}
 80167bc:	b580      	push	{r7, lr}
 80167be:	b082      	sub	sp, #8
 80167c0:	af00      	add	r7, sp, #0
 80167c2:	6078      	str	r0, [r7, #4]
 80167c4:	4a09      	ldr	r2, [pc, #36]	@ (80167ec <_ZN15screenPresenterD1Ev+0x30>)
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	601a      	str	r2, [r3, #0]
 80167ca:	4a09      	ldr	r2, [pc, #36]	@ (80167f0 <_ZN15screenPresenterD1Ev+0x34>)
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	605a      	str	r2, [r3, #4]
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	3304      	adds	r3, #4
 80167d4:	4618      	mov	r0, r3
 80167d6:	f7ff ff1d 	bl	8016614 <_ZN13ModelListenerD1Ev>
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	4618      	mov	r0, r3
 80167de:	f7ff fed5 	bl	801658c <_ZN8touchgfx9PresenterD1Ev>
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	4618      	mov	r0, r3
 80167e6:	3708      	adds	r7, #8
 80167e8:	46bd      	mov	sp, r7
 80167ea:	bd80      	pop	{r7, pc}
 80167ec:	0802e554 	.word	0x0802e554
 80167f0:	0802e56c 	.word	0x0802e56c

080167f4 <_ZThn4_N15screenPresenterD1Ev>:
 80167f4:	f1a0 0004 	sub.w	r0, r0, #4
 80167f8:	e7e0      	b.n	80167bc <_ZN15screenPresenterD1Ev>
 80167fa:	bf00      	nop

080167fc <_ZN15screenPresenterD0Ev>:
 80167fc:	b580      	push	{r7, lr}
 80167fe:	b082      	sub	sp, #8
 8016800:	af00      	add	r7, sp, #0
 8016802:	6078      	str	r0, [r7, #4]
 8016804:	6878      	ldr	r0, [r7, #4]
 8016806:	f7ff ffd9 	bl	80167bc <_ZN15screenPresenterD1Ev>
 801680a:	2110      	movs	r1, #16
 801680c:	6878      	ldr	r0, [r7, #4]
 801680e:	f015 f924 	bl	802ba5a <_ZdlPvj>
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	4618      	mov	r0, r3
 8016816:	3708      	adds	r7, #8
 8016818:	46bd      	mov	sp, r7
 801681a:	bd80      	pop	{r7, pc}

0801681c <_ZThn4_N15screenPresenterD0Ev>:
 801681c:	f1a0 0004 	sub.w	r0, r0, #4
 8016820:	e7ec      	b.n	80167fc <_ZN15screenPresenterD0Ev>
	...

08016824 <_ZN15screenPresenterC1ER10screenView>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

screenPresenter::screenPresenter(screenView& v)
 8016824:	b580      	push	{r7, lr}
 8016826:	b082      	sub	sp, #8
 8016828:	af00      	add	r7, sp, #0
 801682a:	6078      	str	r0, [r7, #4]
 801682c:	6039      	str	r1, [r7, #0]
    : view(v)
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	4618      	mov	r0, r3
 8016832:	f7ff fecb 	bl	80165cc <_ZN8touchgfx9PresenterC1Ev>
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	3304      	adds	r3, #4
 801683a:	4618      	mov	r0, r3
 801683c:	f7ff fed6 	bl	80165ec <_ZN13ModelListenerC1Ev>
 8016840:	4a06      	ldr	r2, [pc, #24]	@ (801685c <_ZN15screenPresenterC1ER10screenView+0x38>)
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	601a      	str	r2, [r3, #0]
 8016846:	4a06      	ldr	r2, [pc, #24]	@ (8016860 <_ZN15screenPresenterC1ER10screenView+0x3c>)
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	605a      	str	r2, [r3, #4]
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	683a      	ldr	r2, [r7, #0]
 8016850:	60da      	str	r2, [r3, #12]
{

}
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	4618      	mov	r0, r3
 8016856:	3708      	adds	r7, #8
 8016858:	46bd      	mov	sp, r7
 801685a:	bd80      	pop	{r7, pc}
 801685c:	0802e554 	.word	0x0802e554
 8016860:	0802e56c 	.word	0x0802e56c

08016864 <_ZN15screenPresenter8activateEv>:

void screenPresenter::activate()
{
 8016864:	b480      	push	{r7}
 8016866:	b083      	sub	sp, #12
 8016868:	af00      	add	r7, sp, #0
 801686a:	6078      	str	r0, [r7, #4]

}
 801686c:	bf00      	nop
 801686e:	370c      	adds	r7, #12
 8016870:	46bd      	mov	sp, r7
 8016872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016876:	4770      	bx	lr

08016878 <_ZN15screenPresenter10deactivateEv>:

void screenPresenter::deactivate()
{
 8016878:	b480      	push	{r7}
 801687a:	b083      	sub	sp, #12
 801687c:	af00      	add	r7, sp, #0
 801687e:	6078      	str	r0, [r7, #4]

}
 8016880:	bf00      	nop
 8016882:	370c      	adds	r7, #12
 8016884:	46bd      	mov	sp, r7
 8016886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801688a:	4770      	bx	lr

0801688c <_ZN10screenViewD1Ev>:

class screenView : public screenViewBase
{
public:
    screenView();
    virtual ~screenView() {}
 801688c:	b580      	push	{r7, lr}
 801688e:	b082      	sub	sp, #8
 8016890:	af00      	add	r7, sp, #0
 8016892:	6078      	str	r0, [r7, #4]
 8016894:	4a05      	ldr	r2, [pc, #20]	@ (80168ac <_ZN10screenViewD1Ev+0x20>)
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	601a      	str	r2, [r3, #0]
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	4618      	mov	r0, r3
 801689e:	f7ff fb35 	bl	8015f0c <_ZN14screenViewBaseD1Ev>
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	4618      	mov	r0, r3
 80168a6:	3708      	adds	r7, #8
 80168a8:	46bd      	mov	sp, r7
 80168aa:	bd80      	pop	{r7, pc}
 80168ac:	0802e57c 	.word	0x0802e57c

080168b0 <_ZN10screenViewD0Ev>:
 80168b0:	b580      	push	{r7, lr}
 80168b2:	b082      	sub	sp, #8
 80168b4:	af00      	add	r7, sp, #0
 80168b6:	6078      	str	r0, [r7, #4]
 80168b8:	6878      	ldr	r0, [r7, #4]
 80168ba:	f7ff ffe7 	bl	801688c <_ZN10screenViewD1Ev>
 80168be:	f44f 719a 	mov.w	r1, #308	@ 0x134
 80168c2:	6878      	ldr	r0, [r7, #4]
 80168c4:	f015 f8c9 	bl	802ba5a <_ZdlPvj>
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	4618      	mov	r0, r3
 80168cc:	3708      	adds	r7, #8
 80168ce:	46bd      	mov	sp, r7
 80168d0:	bd80      	pop	{r7, pc}
	...

080168d4 <_ZN10screenViewC1Ev>:
#include <gui/screen_screen/screenView.hpp>

screenView::screenView()
 80168d4:	b580      	push	{r7, lr}
 80168d6:	b082      	sub	sp, #8
 80168d8:	af00      	add	r7, sp, #0
 80168da:	6078      	str	r0, [r7, #4]
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	4618      	mov	r0, r3
 80168e0:	f7ff f9d6 	bl	8015c90 <_ZN14screenViewBaseC1Ev>
 80168e4:	4a03      	ldr	r2, [pc, #12]	@ (80168f4 <_ZN10screenViewC1Ev+0x20>)
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	601a      	str	r2, [r3, #0]
{

}
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	4618      	mov	r0, r3
 80168ee:	3708      	adds	r7, #8
 80168f0:	46bd      	mov	sp, r7
 80168f2:	bd80      	pop	{r7, pc}
 80168f4:	0802e57c 	.word	0x0802e57c

080168f8 <_ZN10screenView11setupScreenEv>:

void screenView::setupScreen()
{
 80168f8:	b580      	push	{r7, lr}
 80168fa:	b082      	sub	sp, #8
 80168fc:	af00      	add	r7, sp, #0
 80168fe:	6078      	str	r0, [r7, #4]
    screenViewBase::setupScreen();
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	4618      	mov	r0, r3
 8016904:	f7ff fb45 	bl	8015f92 <_ZN14screenViewBase11setupScreenEv>
}
 8016908:	bf00      	nop
 801690a:	3708      	adds	r7, #8
 801690c:	46bd      	mov	sp, r7
 801690e:	bd80      	pop	{r7, pc}

08016910 <_ZN10screenView14tearDownScreenEv>:

void screenView::tearDownScreen()
{
 8016910:	b580      	push	{r7, lr}
 8016912:	b082      	sub	sp, #8
 8016914:	af00      	add	r7, sp, #0
 8016916:	6078      	str	r0, [r7, #4]
    screenViewBase::tearDownScreen();
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	4618      	mov	r0, r3
 801691c:	f7fe fdfa 	bl	8015514 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8016920:	bf00      	nop
 8016922:	3708      	adds	r7, #8
 8016924:	46bd      	mov	sp, r7
 8016926:	bd80      	pop	{r7, pc}

08016928 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8016928:	b480      	push	{r7}
 801692a:	b083      	sub	sp, #12
 801692c:	af00      	add	r7, sp, #0
 801692e:	6078      	str	r0, [r7, #4]
    {
 8016930:	4a04      	ldr	r2, [pc, #16]	@ (8016944 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	601a      	str	r2, [r3, #0]
    }
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	4618      	mov	r0, r3
 801693a:	370c      	adds	r7, #12
 801693c:	46bd      	mov	sp, r7
 801693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016942:	4770      	bx	lr
 8016944:	0802e5c8 	.word	0x0802e5c8

08016948 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8016948:	b580      	push	{r7, lr}
 801694a:	b082      	sub	sp, #8
 801694c:	af00      	add	r7, sp, #0
 801694e:	6078      	str	r0, [r7, #4]
    }
 8016950:	6878      	ldr	r0, [r7, #4]
 8016952:	f7ff ffe9 	bl	8016928 <_ZN8touchgfx15TouchControllerD1Ev>
 8016956:	2104      	movs	r1, #4
 8016958:	6878      	ldr	r0, [r7, #4]
 801695a:	f015 f87e 	bl	802ba5a <_ZdlPvj>
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	4618      	mov	r0, r3
 8016962:	3708      	adds	r7, #8
 8016964:	46bd      	mov	sp, r7
 8016966:	bd80      	pop	{r7, pc}

08016968 <_ZN20STM32TouchController4initEv>:
#include <stm32h735g_discovery_ts.h>
#include <TouchGFXHAL.hpp>
#include <cmsis_os.h>

void STM32TouchController::init()
{
 8016968:	b580      	push	{r7, lr}
 801696a:	b086      	sub	sp, #24
 801696c:	af00      	add	r7, sp, #0
 801696e:	6078      	str	r0, [r7, #4]
    TS_Init_t hTS;

    hTS.Orientation = TS_SWAP_XY;
 8016970:	2308      	movs	r3, #8
 8016972:	613b      	str	r3, [r7, #16]
    hTS.Accuracy = 0;
 8016974:	2300      	movs	r3, #0
 8016976:	617b      	str	r3, [r7, #20]
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
 8016978:	4b07      	ldr	r3, [pc, #28]	@ (8016998 <_ZN20STM32TouchController4initEv+0x30>)
 801697a:	881b      	ldrh	r3, [r3, #0]
 801697c:	60bb      	str	r3, [r7, #8]
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
 801697e:	4b07      	ldr	r3, [pc, #28]	@ (801699c <_ZN20STM32TouchController4initEv+0x34>)
 8016980:	881b      	ldrh	r3, [r3, #0]
 8016982:	60fb      	str	r3, [r7, #12]
    BSP_TS_Init(0, &hTS);
 8016984:	f107 0308 	add.w	r3, r7, #8
 8016988:	4619      	mov	r1, r3
 801698a:	2000      	movs	r0, #0
 801698c:	f7ee fd40 	bl	8005410 <BSP_TS_Init>
}
 8016990:	bf00      	nop
 8016992:	3718      	adds	r7, #24
 8016994:	46bd      	mov	sp, r7
 8016996:	bd80      	pop	{r7, pc}
 8016998:	24034226 	.word	0x24034226
 801699c:	24034228 	.word	0x24034228

080169a0 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80169a0:	b580      	push	{r7, lr}
 80169a2:	b088      	sub	sp, #32
 80169a4:	af00      	add	r7, sp, #0
 80169a6:	60f8      	str	r0, [r7, #12]
 80169a8:	60b9      	str	r1, [r7, #8]
 80169aa:	607a      	str	r2, [r7, #4]
    TS_State_t TS_State = { 0 };
 80169ac:	f107 0310 	add.w	r3, r7, #16
 80169b0:	2200      	movs	r2, #0
 80169b2:	601a      	str	r2, [r3, #0]
 80169b4:	605a      	str	r2, [r3, #4]
 80169b6:	609a      	str	r2, [r3, #8]

    /* This should never fail !! */
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 80169b8:	f107 0310 	add.w	r3, r7, #16
 80169bc:	4619      	mov	r1, r3
 80169be:	2000      	movs	r0, #0
 80169c0:	f7ee fde2 	bl	8005588 <BSP_TS_GetState>
 80169c4:	4603      	mov	r3, r0
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	bf14      	ite	ne
 80169ca:	2301      	movne	r3, #1
 80169cc:	2300      	moveq	r3, #0
 80169ce:	b2db      	uxtb	r3, r3
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	d00b      	beq.n	80169ec <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>
	__asm volatile
 80169d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80169d8:	f383 8811 	msr	BASEPRI, r3
 80169dc:	f3bf 8f6f 	isb	sy
 80169e0:	f3bf 8f4f 	dsb	sy
 80169e4:	61fb      	str	r3, [r7, #28]
}
 80169e6:	bf00      	nop
    {
        configASSERT(0);
 80169e8:	bf00      	nop
 80169ea:	e7fd      	b.n	80169e8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x48>
    }

    if (TS_State.TouchDetected)
 80169ec:	693b      	ldr	r3, [r7, #16]
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	d009      	beq.n	8016a06 <_ZN20STM32TouchController11sampleTouchERlS0_+0x66>
    {
        x = TS_State.TouchX;
 80169f2:	697b      	ldr	r3, [r7, #20]
 80169f4:	461a      	mov	r2, r3
 80169f6:	68bb      	ldr	r3, [r7, #8]
 80169f8:	601a      	str	r2, [r3, #0]
        y = TS_State.TouchY;
 80169fa:	69bb      	ldr	r3, [r7, #24]
 80169fc:	461a      	mov	r2, r3
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	601a      	str	r2, [r3, #0]
        return true;
 8016a02:	2301      	movs	r3, #1
 8016a04:	e000      	b.n	8016a08 <_ZN20STM32TouchController11sampleTouchERlS0_+0x68>
    }
    return false;
 8016a06:	2300      	movs	r3, #0

}
 8016a08:	4618      	mov	r0, r3
 8016a0a:	3720      	adds	r7, #32
 8016a0c:	46bd      	mov	sp, r7
 8016a0e:	bd80      	pop	{r7, pc}

08016a10 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8016a10:	b580      	push	{r7, lr}
 8016a12:	b082      	sub	sp, #8
 8016a14:	af00      	add	r7, sp, #0
 8016a16:	6078      	str	r0, [r7, #4]
 8016a18:	4a05      	ldr	r2, [pc, #20]	@ (8016a30 <_ZN20STM32TouchControllerD1Ev+0x20>)
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	601a      	str	r2, [r3, #0]
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	4618      	mov	r0, r3
 8016a22:	f7ff ff81 	bl	8016928 <_ZN8touchgfx15TouchControllerD1Ev>
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	4618      	mov	r0, r3
 8016a2a:	3708      	adds	r7, #8
 8016a2c:	46bd      	mov	sp, r7
 8016a2e:	bd80      	pop	{r7, pc}
 8016a30:	0802e5b0 	.word	0x0802e5b0

08016a34 <_ZN20STM32TouchControllerD0Ev>:
 8016a34:	b580      	push	{r7, lr}
 8016a36:	b082      	sub	sp, #8
 8016a38:	af00      	add	r7, sp, #0
 8016a3a:	6078      	str	r0, [r7, #4]
 8016a3c:	6878      	ldr	r0, [r7, #4]
 8016a3e:	f7ff ffe7 	bl	8016a10 <_ZN20STM32TouchControllerD1Ev>
 8016a42:	2104      	movs	r1, #4
 8016a44:	6878      	ldr	r0, [r7, #4]
 8016a46:	f015 f808 	bl	802ba5a <_ZdlPvj>
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	4618      	mov	r0, r3
 8016a4e:	3708      	adds	r7, #8
 8016a50:	46bd      	mov	sp, r7
 8016a52:	bd80      	pop	{r7, pc}

08016a54 <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 8016a54:	b580      	push	{r7, lr}
 8016a56:	b082      	sub	sp, #8
 8016a58:	af00      	add	r7, sp, #0
    for (int id = 0; id <= 4; id++)
 8016a5a:	2300      	movs	r3, #0
 8016a5c:	607b      	str	r3, [r7, #4]
 8016a5e:	e015      	b.n	8016a8c <_ZN8touchgfx4GPIO4initEv+0x38>
    {
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	b2db      	uxtb	r3, r3
 8016a64:	4618      	mov	r0, r3
 8016a66:	f000 f86f 	bl	8016b48 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8016a6a:	4603      	mov	r3, r0
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	d00a      	beq.n	8016a86 <_ZN8touchgfx4GPIO4initEv+0x32>
        {
            if (GPIO_InvertedLevels[id] != 1)
 8016a70:	4a0a      	ldr	r2, [pc, #40]	@ (8016a9c <_ZN8touchgfx4GPIO4initEv+0x48>)
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016a78:	2b01      	cmp	r3, #1
 8016a7a:	d004      	beq.n	8016a86 <_ZN8touchgfx4GPIO4initEv+0x32>
            {
                GPIO_InvertedLevels[id] = 1;
 8016a7c:	4a07      	ldr	r2, [pc, #28]	@ (8016a9c <_ZN8touchgfx4GPIO4initEv+0x48>)
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	2101      	movs	r1, #1
 8016a82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int id = 0; id <= 4; id++)
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	3301      	adds	r3, #1
 8016a8a:	607b      	str	r3, [r7, #4]
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	2b04      	cmp	r3, #4
 8016a90:	dde6      	ble.n	8016a60 <_ZN8touchgfx4GPIO4initEv+0xc>
            }
        }
    }
}
 8016a92:	bf00      	nop
 8016a94:	bf00      	nop
 8016a96:	3708      	adds	r7, #8
 8016a98:	46bd      	mov	sp, r7
 8016a9a:	bd80      	pop	{r7, pc}
 8016a9c:	24032fb8 	.word	0x24032fb8

08016aa0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8016aa0:	b480      	push	{r7}
 8016aa2:	b083      	sub	sp, #12
 8016aa4:	af00      	add	r7, sp, #0
 8016aa6:	4603      	mov	r3, r0
 8016aa8:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8016aaa:	79fb      	ldrb	r3, [r7, #7]
 8016aac:	2b03      	cmp	r3, #3
 8016aae:	d80c      	bhi.n	8016aca <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 8016ab0:	a201      	add	r2, pc, #4	@ (adr r2, 8016ab8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 8016ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ab6:	bf00      	nop
 8016ab8:	08016ac9 	.word	0x08016ac9
 8016abc:	08016ac9 	.word	0x08016ac9
 8016ac0:	08016ac9 	.word	0x08016ac9
 8016ac4:	08016ac9 	.word	0x08016ac9
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
 8016ac8:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    }
}
 8016aca:	bf00      	nop
 8016acc:	370c      	adds	r7, #12
 8016ace:	46bd      	mov	sp, r7
 8016ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ad4:	4770      	bx	lr
 8016ad6:	bf00      	nop

08016ad8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8016ad8:	b480      	push	{r7}
 8016ada:	b083      	sub	sp, #12
 8016adc:	af00      	add	r7, sp, #0
 8016ade:	4603      	mov	r3, r0
 8016ae0:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8016ae2:	79fb      	ldrb	r3, [r7, #7]
 8016ae4:	2b03      	cmp	r3, #3
 8016ae6:	d80c      	bhi.n	8016b02 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 8016ae8:	a201      	add	r2, pc, #4	@ (adr r2, 8016af0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 8016aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016aee:	bf00      	nop
 8016af0:	08016b01 	.word	0x08016b01
 8016af4:	08016b01 	.word	0x08016b01
 8016af8:	08016b01 	.word	0x08016b01
 8016afc:	08016b01 	.word	0x08016b01
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
 8016b00:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    }
}
 8016b02:	bf00      	nop
 8016b04:	370c      	adds	r7, #12
 8016b06:	46bd      	mov	sp, r7
 8016b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b0c:	4770      	bx	lr
 8016b0e:	bf00      	nop

08016b10 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8016b10:	b480      	push	{r7}
 8016b12:	b083      	sub	sp, #12
 8016b14:	af00      	add	r7, sp, #0
 8016b16:	4603      	mov	r3, r0
 8016b18:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8016b1a:	79fb      	ldrb	r3, [r7, #7]
 8016b1c:	2b03      	cmp	r3, #3
 8016b1e:	d80c      	bhi.n	8016b3a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 8016b20:	a201      	add	r2, pc, #4	@ (adr r2, 8016b28 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 8016b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b26:	bf00      	nop
 8016b28:	08016b39 	.word	0x08016b39
 8016b2c:	08016b39 	.word	0x08016b39
 8016b30:	08016b39 	.word	0x08016b39
 8016b34:	08016b39 	.word	0x08016b39
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 8016b38:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 8016b3a:	bf00      	nop
 8016b3c:	370c      	adds	r7, #12
 8016b3e:	46bd      	mov	sp, r7
 8016b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b44:	4770      	bx	lr
 8016b46:	bf00      	nop

08016b48 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8016b48:	b480      	push	{r7}
 8016b4a:	b085      	sub	sp, #20
 8016b4c:	af00      	add	r7, sp, #0
 8016b4e:	4603      	mov	r3, r0
 8016b50:	71fb      	strb	r3, [r7, #7]
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
 8016b52:	2300      	movs	r3, #0
 8016b54:	73fb      	strb	r3, [r7, #15]
    switch (id)
 8016b56:	79fb      	ldrb	r3, [r7, #7]
 8016b58:	2b03      	cmp	r3, #3
 8016b5a:	d80b      	bhi.n	8016b74 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x2c>
 8016b5c:	a201      	add	r2, pc, #4	@ (adr r2, 8016b64 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x1c>)
 8016b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b62:	bf00      	nop
 8016b64:	08016b75 	.word	0x08016b75
 8016b68:	08016b75 	.word	0x08016b75
 8016b6c:	08016b75 	.word	0x08016b75
 8016b70:	08016b75 	.word	0x08016b75
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
 8016b74:	7bfb      	ldrb	r3, [r7, #15]
 8016b76:	2b01      	cmp	r3, #1
 8016b78:	bf0c      	ite	eq
 8016b7a:	2301      	moveq	r3, #1
 8016b7c:	2300      	movne	r3, #0
 8016b7e:	b2db      	uxtb	r3, r3
}
 8016b80:	4618      	mov	r0, r3
 8016b82:	3714      	adds	r7, #20
 8016b84:	46bd      	mov	sp, r7
 8016b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b8a:	4770      	bx	lr

08016b8c <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8016b8c:	b480      	push	{r7}
 8016b8e:	b083      	sub	sp, #12
 8016b90:	af00      	add	r7, sp, #0
 8016b92:	6078      	str	r0, [r7, #4]
    {
 8016b94:	4a04      	ldr	r2, [pc, #16]	@ (8016ba8 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	601a      	str	r2, [r3, #0]
    }
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	4618      	mov	r0, r3
 8016b9e:	370c      	adds	r7, #12
 8016ba0:	46bd      	mov	sp, r7
 8016ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ba6:	4770      	bx	lr
 8016ba8:	0802eb34 	.word	0x0802eb34

08016bac <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8016bac:	b580      	push	{r7, lr}
 8016bae:	b082      	sub	sp, #8
 8016bb0:	af00      	add	r7, sp, #0
 8016bb2:	6078      	str	r0, [r7, #4]
    }
 8016bb4:	6878      	ldr	r0, [r7, #4]
 8016bb6:	f7ff ffe9 	bl	8016b8c <_ZN8touchgfx3HALD1Ev>
 8016bba:	217c      	movs	r1, #124	@ 0x7c
 8016bbc:	6878      	ldr	r0, [r7, #4]
 8016bbe:	f014 ff4c 	bl	802ba5a <_ZdlPvj>
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	4618      	mov	r0, r3
 8016bc6:	3708      	adds	r7, #8
 8016bc8:	46bd      	mov	sp, r7
 8016bca:	bd80      	pop	{r7, pc}

08016bcc <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8016bcc:	b480      	push	{r7}
 8016bce:	b083      	sub	sp, #12
 8016bd0:	af00      	add	r7, sp, #0
 8016bd2:	6078      	str	r0, [r7, #4]
 8016bd4:	460b      	mov	r3, r1
 8016bd6:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	78fa      	ldrb	r2, [r7, #3]
 8016bdc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	2201      	movs	r2, #1
 8016be4:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    }
 8016be8:	bf00      	nop
 8016bea:	370c      	adds	r7, #12
 8016bec:	46bd      	mov	sp, r7
 8016bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bf2:	4770      	bx	lr

08016bf4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8016bf4:	b580      	push	{r7, lr}
 8016bf6:	b082      	sub	sp, #8
 8016bf8:	af00      	add	r7, sp, #0
 8016bfa:	6078      	str	r0, [r7, #4]
 8016bfc:	460b      	mov	r3, r1
 8016bfe:	807b      	strh	r3, [r7, #2]
 8016c00:	4613      	mov	r3, r2
 8016c02:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8016c04:	4b0c      	ldr	r3, [pc, #48]	@ (8016c38 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 8016c06:	881b      	ldrh	r3, [r3, #0]
 8016c08:	887a      	ldrh	r2, [r7, #2]
 8016c0a:	429a      	cmp	r2, r3
 8016c0c:	d304      	bcc.n	8016c18 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 8016c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8016c3c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8016c10:	881b      	ldrh	r3, [r3, #0]
 8016c12:	883a      	ldrh	r2, [r7, #0]
 8016c14:	429a      	cmp	r2, r3
 8016c16:	d205      	bcs.n	8016c24 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8016c18:	4b09      	ldr	r3, [pc, #36]	@ (8016c40 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 8016c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8016c44 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8016c1c:	219e      	movs	r1, #158	@ 0x9e
 8016c1e:	480a      	ldr	r0, [pc, #40]	@ (8016c48 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8016c20:	f015 fa92 	bl	802c148 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8016c24:	4a09      	ldr	r2, [pc, #36]	@ (8016c4c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 8016c26:	887b      	ldrh	r3, [r7, #2]
 8016c28:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8016c2a:	4a09      	ldr	r2, [pc, #36]	@ (8016c50 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8016c2c:	883b      	ldrh	r3, [r7, #0]
 8016c2e:	8013      	strh	r3, [r2, #0]
    }
 8016c30:	bf00      	nop
 8016c32:	3708      	adds	r7, #8
 8016c34:	46bd      	mov	sp, r7
 8016c36:	bd80      	pop	{r7, pc}
 8016c38:	24034220 	.word	0x24034220
 8016c3c:	24034222 	.word	0x24034222
 8016c40:	0802d8f4 	.word	0x0802d8f4
 8016c44:	0802d958 	.word	0x0802d958
 8016c48:	0802d99c 	.word	0x0802d99c
 8016c4c:	24034226 	.word	0x24034226
 8016c50:	24034228 	.word	0x24034228

08016c54 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8016c54:	b580      	push	{r7, lr}
 8016c56:	b082      	sub	sp, #8
 8016c58:	af00      	add	r7, sp, #0
 8016c5a:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	d009      	beq.n	8016c7a <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	685a      	ldr	r2, [r3, #4]
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	685b      	ldr	r3, [r3, #4]
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	681b      	ldr	r3, [r3, #0]
 8016c72:	4610      	mov	r0, r2
 8016c74:	4798      	blx	r3
 8016c76:	4603      	mov	r3, r0
 8016c78:	e000      	b.n	8016c7c <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 8016c7a:	2300      	movs	r3, #0
    }
 8016c7c:	4618      	mov	r0, r3
 8016c7e:	3708      	adds	r7, #8
 8016c80:	46bd      	mov	sp, r7
 8016c82:	bd80      	pop	{r7, pc}

08016c84 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8016c84:	b580      	push	{r7, lr}
 8016c86:	b082      	sub	sp, #8
 8016c88:	af00      	add	r7, sp, #0
 8016c8a:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8016c8c:	6878      	ldr	r0, [r7, #4]
 8016c8e:	f003 fc25 	bl	801a4dc <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	681b      	ldr	r3, [r3, #0]
 8016c96:	33ac      	adds	r3, #172	@ 0xac
 8016c98:	681b      	ldr	r3, [r3, #0]
 8016c9a:	6878      	ldr	r0, [r7, #4]
 8016c9c:	4798      	blx	r3
    }
 8016c9e:	bf00      	nop
 8016ca0:	3708      	adds	r7, #8
 8016ca2:	46bd      	mov	sp, r7
 8016ca4:	bd80      	pop	{r7, pc}

08016ca6 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8016ca6:	b480      	push	{r7}
 8016ca8:	b083      	sub	sp, #12
 8016caa:	af00      	add	r7, sp, #0
 8016cac:	6078      	str	r0, [r7, #4]
 8016cae:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 8016cb0:	2300      	movs	r3, #0
    }
 8016cb2:	4618      	mov	r0, r3
 8016cb4:	370c      	adds	r7, #12
 8016cb6:	46bd      	mov	sp, r7
 8016cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cbc:	4770      	bx	lr
	...

08016cc0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8016cc0:	b580      	push	{r7, lr}
 8016cc2:	b084      	sub	sp, #16
 8016cc4:	af00      	add	r7, sp, #0
 8016cc6:	60f8      	str	r0, [r7, #12]
 8016cc8:	60b9      	str	r1, [r7, #8]
 8016cca:	607a      	str	r2, [r7, #4]
 8016ccc:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8016cce:	68bb      	ldr	r3, [r7, #8]
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	d106      	bne.n	8016ce2 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8016cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8016d14 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 8016cd6:	4a10      	ldr	r2, [pc, #64]	@ (8016d18 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 8016cd8:	f240 21d2 	movw	r1, #722	@ 0x2d2
 8016cdc:	480f      	ldr	r0, [pc, #60]	@ (8016d1c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8016cde:	f015 fa33 	bl	802c148 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8016ce2:	68fb      	ldr	r3, [r7, #12]
 8016ce4:	68ba      	ldr	r2, [r7, #8]
 8016ce6:	63da      	str	r2, [r3, #60]	@ 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8016ce8:	68fb      	ldr	r3, [r7, #12]
 8016cea:	687a      	ldr	r2, [r7, #4]
 8016cec:	641a      	str	r2, [r3, #64]	@ 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	bf14      	ite	ne
 8016cf4:	2301      	movne	r3, #1
 8016cf6:	2300      	moveq	r3, #0
 8016cf8:	b2da      	uxtb	r2, r3
 8016cfa:	4b09      	ldr	r3, [pc, #36]	@ (8016d20 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8016cfc:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8016cfe:	68fb      	ldr	r3, [r7, #12]
 8016d00:	681b      	ldr	r3, [r3, #0]
 8016d02:	338c      	adds	r3, #140	@ 0x8c
 8016d04:	681b      	ldr	r3, [r3, #0]
 8016d06:	6839      	ldr	r1, [r7, #0]
 8016d08:	68f8      	ldr	r0, [r7, #12]
 8016d0a:	4798      	blx	r3
    }
 8016d0c:	bf00      	nop
 8016d0e:	3710      	adds	r7, #16
 8016d10:	46bd      	mov	sp, r7
 8016d12:	bd80      	pop	{r7, pc}
 8016d14:	0802d9e0 	.word	0x0802d9e0
 8016d18:	0802da18 	.word	0x0802da18
 8016d1c:	0802d99c 	.word	0x0802d99c
 8016d20:	2403422a 	.word	0x2403422a

08016d24 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 8016d24:	b480      	push	{r7}
 8016d26:	b083      	sub	sp, #12
 8016d28:	af00      	add	r7, sp, #0
 8016d2a:	6078      	str	r0, [r7, #4]
 8016d2c:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	683a      	ldr	r2, [r7, #0]
 8016d32:	645a      	str	r2, [r3, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8016d34:	683b      	ldr	r3, [r7, #0]
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	bf14      	ite	ne
 8016d3a:	2301      	movne	r3, #1
 8016d3c:	2300      	moveq	r3, #0
 8016d3e:	b2da      	uxtb	r2, r3
 8016d40:	4b03      	ldr	r3, [pc, #12]	@ (8016d50 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 8016d42:	701a      	strb	r2, [r3, #0]
    }
 8016d44:	bf00      	nop
 8016d46:	370c      	adds	r7, #12
 8016d48:	46bd      	mov	sp, r7
 8016d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d4e:	4770      	bx	lr
 8016d50:	2403422b 	.word	0x2403422b

08016d54 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8016d54:	b480      	push	{r7}
 8016d56:	b083      	sub	sp, #12
 8016d58:	af00      	add	r7, sp, #0
 8016d5a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8016d5c:	2300      	movs	r3, #0
    }
 8016d5e:	4618      	mov	r0, r3
 8016d60:	370c      	adds	r7, #12
 8016d62:	46bd      	mov	sp, r7
 8016d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d68:	4770      	bx	lr

08016d6a <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8016d6a:	b580      	push	{r7, lr}
 8016d6c:	b082      	sub	sp, #8
 8016d6e:	af00      	add	r7, sp, #0
 8016d70:	6078      	str	r0, [r7, #4]
 8016d72:	460b      	mov	r3, r1
 8016d74:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d004      	beq.n	8016d88 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016d82:	887a      	ldrh	r2, [r7, #2]
 8016d84:	4610      	mov	r0, r2
 8016d86:	4798      	blx	r3
        }
    }
 8016d88:	bf00      	nop
 8016d8a:	3708      	adds	r7, #8
 8016d8c:	46bd      	mov	sp, r7
 8016d8e:	bd80      	pop	{r7, pc}

08016d90 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 8016d90:	b480      	push	{r7}
 8016d92:	b083      	sub	sp, #12
 8016d94:	af00      	add	r7, sp, #0
 8016d96:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 8016d98:	f64f 73ff 	movw	r3, #65535	@ 0xffff
    }
 8016d9c:	4618      	mov	r0, r3
 8016d9e:	370c      	adds	r7, #12
 8016da0:	46bd      	mov	sp, r7
 8016da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016da6:	4770      	bx	lr

08016da8 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8016da8:	b580      	push	{r7, lr}
 8016daa:	b082      	sub	sp, #8
 8016dac:	af00      	add	r7, sp, #0
 8016dae:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	685a      	ldr	r2, [r3, #4]
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	685b      	ldr	r3, [r3, #4]
 8016db8:	681b      	ldr	r3, [r3, #0]
 8016dba:	3318      	adds	r3, #24
 8016dbc:	681b      	ldr	r3, [r3, #0]
 8016dbe:	4610      	mov	r0, r2
 8016dc0:	4798      	blx	r3
 8016dc2:	4603      	mov	r3, r0
    }
 8016dc4:	4618      	mov	r0, r3
 8016dc6:	3708      	adds	r7, #8
 8016dc8:	46bd      	mov	sp, r7
 8016dca:	bd80      	pop	{r7, pc}

08016dcc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8016dcc:	b480      	push	{r7}
 8016dce:	b085      	sub	sp, #20
 8016dd0:	af00      	add	r7, sp, #0
 8016dd2:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	f893 2078 	ldrb.w	r2, [r3, #120]	@ 0x78
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8016de0:	429a      	cmp	r2, r3
 8016de2:	d011      	beq.n	8016e08 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8016de4:	4b14      	ldr	r3, [pc, #80]	@ (8016e38 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8016de6:	781b      	ldrb	r3, [r3, #0]
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d11e      	bne.n	8016e2a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8016dec:	4b13      	ldr	r3, [pc, #76]	@ (8016e3c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8016dee:	881b      	ldrh	r3, [r3, #0]
 8016df0:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8016df2:	4b13      	ldr	r3, [pc, #76]	@ (8016e40 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8016df4:	881a      	ldrh	r2, [r3, #0]
 8016df6:	4b11      	ldr	r3, [pc, #68]	@ (8016e3c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8016df8:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 8016dfa:	4a11      	ldr	r2, [pc, #68]	@ (8016e40 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8016dfc:	89bb      	ldrh	r3, [r7, #12]
 8016dfe:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8016e00:	4b0d      	ldr	r3, [pc, #52]	@ (8016e38 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8016e02:	2201      	movs	r2, #1
 8016e04:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8016e06:	e010      	b.n	8016e2a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8016e08:	4b0b      	ldr	r3, [pc, #44]	@ (8016e38 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8016e0a:	781b      	ldrb	r3, [r3, #0]
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	d00c      	beq.n	8016e2a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8016e10:	4b0a      	ldr	r3, [pc, #40]	@ (8016e3c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8016e12:	881b      	ldrh	r3, [r3, #0]
 8016e14:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8016e16:	4b0a      	ldr	r3, [pc, #40]	@ (8016e40 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8016e18:	881a      	ldrh	r2, [r3, #0]
 8016e1a:	4b08      	ldr	r3, [pc, #32]	@ (8016e3c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8016e1c:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8016e1e:	4a08      	ldr	r2, [pc, #32]	@ (8016e40 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8016e20:	89fb      	ldrh	r3, [r7, #14]
 8016e22:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8016e24:	4b04      	ldr	r3, [pc, #16]	@ (8016e38 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8016e26:	2200      	movs	r2, #0
 8016e28:	701a      	strb	r2, [r3, #0]
    }
 8016e2a:	bf00      	nop
 8016e2c:	3714      	adds	r7, #20
 8016e2e:	46bd      	mov	sp, r7
 8016e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e34:	4770      	bx	lr
 8016e36:	bf00      	nop
 8016e38:	24034224 	.word	0x24034224
 8016e3c:	24034222 	.word	0x24034222
 8016e40:	24034220 	.word	0x24034220

08016e44 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8016e44:	b580      	push	{r7, lr}
 8016e46:	b082      	sub	sp, #8
 8016e48:	af00      	add	r7, sp, #0
 8016e4a:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	4618      	mov	r0, r3
 8016e50:	f002 fda2 	bl	8019998 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8016e54:	bf00      	nop
 8016e56:	3708      	adds	r7, #8
 8016e58:	46bd      	mov	sp, r7
 8016e5a:	bd80      	pop	{r7, pc}

08016e5c <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8016e5c:	b580      	push	{r7, lr}
 8016e5e:	b082      	sub	sp, #8
 8016e60:	af00      	add	r7, sp, #0
 8016e62:	6078      	str	r0, [r7, #4]
 8016e64:	4a05      	ldr	r2, [pc, #20]	@ (8016e7c <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	601a      	str	r2, [r3, #0]
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	4618      	mov	r0, r3
 8016e6e:	f7ff fe8d 	bl	8016b8c <_ZN8touchgfx3HALD1Ev>
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	4618      	mov	r0, r3
 8016e76:	3708      	adds	r7, #8
 8016e78:	46bd      	mov	sp, r7
 8016e7a:	bd80      	pop	{r7, pc}
 8016e7c:	0802e94c 	.word	0x0802e94c

08016e80 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8016e80:	b580      	push	{r7, lr}
 8016e82:	b082      	sub	sp, #8
 8016e84:	af00      	add	r7, sp, #0
 8016e86:	6078      	str	r0, [r7, #4]
 8016e88:	6878      	ldr	r0, [r7, #4]
 8016e8a:	f7ff ffe7 	bl	8016e5c <_ZN20TouchGFXGeneratedHALD1Ev>
 8016e8e:	217c      	movs	r1, #124	@ 0x7c
 8016e90:	6878      	ldr	r0, [r7, #4]
 8016e92:	f014 fde2 	bl	802ba5a <_ZdlPvj>
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	4618      	mov	r0, r3
 8016e9a:	3708      	adds	r7, #8
 8016e9c:	46bd      	mov	sp, r7
 8016e9e:	bd80      	pop	{r7, pc}

08016ea0 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8016ea0:	b580      	push	{r7, lr}
 8016ea2:	b082      	sub	sp, #8
 8016ea4:	af00      	add	r7, sp, #0
 8016ea6:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	4618      	mov	r0, r3
 8016eac:	f7ff ffca 	bl	8016e44 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8016eb0:	bf00      	nop
 8016eb2:	3708      	adds	r7, #8
 8016eb4:	46bd      	mov	sp, r7
 8016eb6:	bd80      	pop	{r7, pc}

08016eb8 <_ZN11TouchGFXHAL10initializeEv>:
uint32_t animationBuffer[(480 * 272 * 3 + 3) / 4] LOCATION_ATTRIBUTE_NOLOAD("TouchGFX_Framebuffer");
}


void TouchGFXHAL::initialize()
{
 8016eb8:	b580      	push	{r7, lr}
 8016eba:	b082      	sub	sp, #8
 8016ebc:	af00      	add	r7, sp, #0
 8016ebe:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	4618      	mov	r0, r3
 8016ec4:	f002 f832 	bl	8018f2c <_ZN20TouchGFXGeneratedHAL10initializeEv>

    setAnimationStorage((void*)animationBuffer);
 8016ec8:	687a      	ldr	r2, [r7, #4]
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	681b      	ldr	r3, [r3, #0]
 8016ece:	338c      	adds	r3, #140	@ 0x8c
 8016ed0:	681b      	ldr	r3, [r3, #0]
 8016ed2:	4903      	ldr	r1, [pc, #12]	@ (8016ee0 <_ZN11TouchGFXHAL10initializeEv+0x28>)
 8016ed4:	4610      	mov	r0, r2
 8016ed6:	4798      	blx	r3

//    instrumentation.init();
//    setMCUInstrumentation(&instrumentation);
//    enableMCULoadCalculation(true);
}
 8016ed8:	bf00      	nop
 8016eda:	3708      	adds	r7, #8
 8016edc:	46bd      	mov	sp, r7
 8016ede:	bd80      	pop	{r7, pc}
 8016ee0:	70000000 	.word	0x70000000

08016ee4 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 8016ee4:	b580      	push	{r7, lr}
 8016ee6:	b082      	sub	sp, #8
 8016ee8:	af00      	add	r7, sp, #0
 8016eea:	6078      	str	r0, [r7, #4]
    enableLCDControllerInterrupt();
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	681b      	ldr	r3, [r3, #0]
 8016ef0:	3380      	adds	r3, #128	@ 0x80
 8016ef2:	681b      	ldr	r3, [r3, #0]
 8016ef4:	6878      	ldr	r0, [r7, #4]
 8016ef6:	4798      	blx	r3
    enableInterrupts();
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	681b      	ldr	r3, [r3, #0]
 8016efc:	3378      	adds	r3, #120	@ 0x78
 8016efe:	681b      	ldr	r3, [r3, #0]
 8016f00:	6878      	ldr	r0, [r7, #4]
 8016f02:	4798      	blx	r3

    OSWrappers::waitForVSync();
 8016f04:	f000 f952 	bl	80171ac <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8016f08:	687a      	ldr	r2, [r7, #4]
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	681b      	ldr	r3, [r3, #0]
 8016f0e:	3370      	adds	r3, #112	@ 0x70
 8016f10:	681b      	ldr	r3, [r3, #0]
 8016f12:	4610      	mov	r0, r2
 8016f14:	4798      	blx	r3

    /* Assert display enable LCD_DISP_CTRL pin */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET); //DISP
 8016f16:	2201      	movs	r2, #1
 8016f18:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8016f1c:	4809      	ldr	r0, [pc, #36]	@ (8016f44 <_ZN11TouchGFXHAL9taskEntryEv+0x60>)
 8016f1e:	f7f1 f81f 	bl	8007f60 <HAL_GPIO_WritePin>
    /* Assert back light LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_15, GPIO_PIN_SET); //LCD_BK_Light_Ctrl
 8016f22:	2201      	movs	r2, #1
 8016f24:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8016f28:	4807      	ldr	r0, [pc, #28]	@ (8016f48 <_ZN11TouchGFXHAL9taskEntryEv+0x64>)
 8016f2a:	f7f1 f819 	bl	8007f60 <HAL_GPIO_WritePin>

    for (;;)
    {
        OSWrappers::waitForVSync();
 8016f2e:	f000 f93d 	bl	80171ac <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8016f32:	687a      	ldr	r2, [r7, #4]
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	681b      	ldr	r3, [r3, #0]
 8016f38:	3370      	adds	r3, #112	@ 0x70
 8016f3a:	681b      	ldr	r3, [r3, #0]
 8016f3c:	4610      	mov	r0, r2
 8016f3e:	4798      	blx	r3
        OSWrappers::waitForVSync();
 8016f40:	bf00      	nop
 8016f42:	e7f4      	b.n	8016f2e <_ZN11TouchGFXHAL9taskEntryEv+0x4a>
 8016f44:	58020c00 	.word	0x58020c00
 8016f48:	58021800 	.word	0x58021800

08016f4c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8016f4c:	b580      	push	{r7, lr}
 8016f4e:	b082      	sub	sp, #8
 8016f50:	af00      	add	r7, sp, #0
 8016f52:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	4618      	mov	r0, r3
 8016f58:	f002 f880 	bl	801905c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8016f5c:	4603      	mov	r3, r0
}
 8016f5e:	4618      	mov	r0, r3
 8016f60:	3708      	adds	r7, #8
 8016f62:	46bd      	mov	sp, r7
 8016f64:	bd80      	pop	{r7, pc}

08016f66 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8016f66:	b580      	push	{r7, lr}
 8016f68:	b082      	sub	sp, #8
 8016f6a:	af00      	add	r7, sp, #0
 8016f6c:	6078      	str	r0, [r7, #4]
 8016f6e:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	6839      	ldr	r1, [r7, #0]
 8016f74:	4618      	mov	r0, r3
 8016f76:	f002 f87f 	bl	8019078 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8016f7a:	bf00      	nop
 8016f7c:	3708      	adds	r7, #8
 8016f7e:	46bd      	mov	sp, r7
 8016f80:	bd80      	pop	{r7, pc}
	...

08016f84 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8016f84:	b580      	push	{r7, lr}
 8016f86:	b086      	sub	sp, #24
 8016f88:	af00      	add	r7, sp, #0
 8016f8a:	6078      	str	r0, [r7, #4]
 8016f8c:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	6839      	ldr	r1, [r7, #0]
 8016f92:	4618      	mov	r0, r3
 8016f94:	f002 f886 	bl	80190a4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8016f98:	4b1f      	ldr	r3, [pc, #124]	@ (8017018 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x94>)
 8016f9a:	2200      	movs	r2, #0
 8016f9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8016fa0:	f3bf 8f4f 	dsb	sy
}
 8016fa4:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8016fa6:	4b1c      	ldr	r3, [pc, #112]	@ (8017018 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x94>)
 8016fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016fac:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8016fae:	697b      	ldr	r3, [r7, #20]
 8016fb0:	0b5b      	lsrs	r3, r3, #13
 8016fb2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8016fb6:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8016fb8:	697b      	ldr	r3, [r7, #20]
 8016fba:	08db      	lsrs	r3, r3, #3
 8016fbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8016fc0:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8016fc2:	693b      	ldr	r3, [r7, #16]
 8016fc4:	015a      	lsls	r2, r3, #5
 8016fc6:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8016fca:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8016fcc:	68fa      	ldr	r2, [r7, #12]
 8016fce:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8016fd0:	4911      	ldr	r1, [pc, #68]	@ (8017018 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x94>)
 8016fd2:	4313      	orrs	r3, r2
 8016fd4:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8016fd8:	68fb      	ldr	r3, [r7, #12]
 8016fda:	1e5a      	subs	r2, r3, #1
 8016fdc:	60fa      	str	r2, [r7, #12]
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	bf14      	ite	ne
 8016fe2:	2301      	movne	r3, #1
 8016fe4:	2300      	moveq	r3, #0
 8016fe6:	b2db      	uxtb	r3, r3
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	d1ea      	bne.n	8016fc2 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x3e>
    } while(sets-- != 0U);
 8016fec:	693b      	ldr	r3, [r7, #16]
 8016fee:	1e5a      	subs	r2, r3, #1
 8016ff0:	613a      	str	r2, [r7, #16]
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	bf14      	ite	ne
 8016ff6:	2301      	movne	r3, #1
 8016ff8:	2300      	moveq	r3, #0
 8016ffa:	b2db      	uxtb	r3, r3
 8016ffc:	2b00      	cmp	r3, #0
 8016ffe:	d1db      	bne.n	8016fb8 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8017000:	f3bf 8f4f 	dsb	sy
}
 8017004:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8017006:	f3bf 8f6f 	isb	sy
}
 801700a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 801700c:	bf00      	nop
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 801700e:	bf00      	nop
 8017010:	3718      	adds	r7, #24
 8017012:	46bd      	mov	sp, r7
 8017014:	bd80      	pop	{r7, pc}
 8017016:	bf00      	nop
 8017018:	e000ed00 	.word	0xe000ed00

0801701c <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 801701c:	b580      	push	{r7, lr}
 801701e:	b082      	sub	sp, #8
 8017020:	af00      	add	r7, sp, #0
 8017022:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	4618      	mov	r0, r3
 8017028:	f001 ffa4 	bl	8018f74 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 801702c:	bf00      	nop
 801702e:	3708      	adds	r7, #8
 8017030:	46bd      	mov	sp, r7
 8017032:	bd80      	pop	{r7, pc}

08017034 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8017034:	b580      	push	{r7, lr}
 8017036:	b082      	sub	sp, #8
 8017038:	af00      	add	r7, sp, #0
 801703a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	4618      	mov	r0, r3
 8017040:	f001 ffa8 	bl	8018f94 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8017044:	bf00      	nop
 8017046:	3708      	adds	r7, #8
 8017048:	46bd      	mov	sp, r7
 801704a:	bd80      	pop	{r7, pc}

0801704c <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 801704c:	b580      	push	{r7, lr}
 801704e:	b082      	sub	sp, #8
 8017050:	af00      	add	r7, sp, #0
 8017052:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	4618      	mov	r0, r3
 8017058:	f001 ffaa 	bl	8018fb0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 801705c:	bf00      	nop
 801705e:	3708      	adds	r7, #8
 8017060:	46bd      	mov	sp, r7
 8017062:	bd80      	pop	{r7, pc}

08017064 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8017064:	b580      	push	{r7, lr}
 8017066:	b082      	sub	sp, #8
 8017068:	af00      	add	r7, sp, #0
 801706a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	4618      	mov	r0, r3
 8017070:	f001 ffac 	bl	8018fcc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8017074:	bf00      	nop
 8017076:	3708      	adds	r7, #8
 8017078:	46bd      	mov	sp, r7
 801707a:	bd80      	pop	{r7, pc}

0801707c <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 801707c:	b580      	push	{r7, lr}
 801707e:	b082      	sub	sp, #8
 8017080:	af00      	add	r7, sp, #0
 8017082:	6078      	str	r0, [r7, #4]
 8017084:	4a05      	ldr	r2, [pc, #20]	@ (801709c <_ZN11TouchGFXHALD1Ev+0x20>)
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	601a      	str	r2, [r3, #0]
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	4618      	mov	r0, r3
 801708e:	f7ff fee5 	bl	8016e5c <_ZN20TouchGFXGeneratedHALD1Ev>
 8017092:	687b      	ldr	r3, [r7, #4]
 8017094:	4618      	mov	r0, r3
 8017096:	3708      	adds	r7, #8
 8017098:	46bd      	mov	sp, r7
 801709a:	bd80      	pop	{r7, pc}
 801709c:	0802e5e0 	.word	0x0802e5e0

080170a0 <_ZN11TouchGFXHALD0Ev>:
 80170a0:	b580      	push	{r7, lr}
 80170a2:	b082      	sub	sp, #8
 80170a4:	af00      	add	r7, sp, #0
 80170a6:	6078      	str	r0, [r7, #4]
 80170a8:	6878      	ldr	r0, [r7, #4]
 80170aa:	f7ff ffe7 	bl	801707c <_ZN11TouchGFXHALD1Ev>
 80170ae:	217c      	movs	r1, #124	@ 0x7c
 80170b0:	6878      	ldr	r0, [r7, #4]
 80170b2:	f014 fcd2 	bl	802ba5a <_ZdlPvj>
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	4618      	mov	r0, r3
 80170ba:	3708      	adds	r7, #8
 80170bc:	46bd      	mov	sp, r7
 80170be:	bd80      	pop	{r7, pc}

080170c0 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 80170c0:	b580      	push	{r7, lr}
 80170c2:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 80170c4:	2200      	movs	r2, #0
 80170c6:	2101      	movs	r1, #1
 80170c8:	2001      	movs	r0, #1
 80170ca:	f7f9 fa70 	bl	80105ae <osSemaphoreNew>
 80170ce:	4603      	mov	r3, r0
 80170d0:	4a0f      	ldr	r2, [pc, #60]	@ (8017110 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80170d2:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 80170d4:	4b0e      	ldr	r3, [pc, #56]	@ (8017110 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80170d6:	681b      	ldr	r3, [r3, #0]
 80170d8:	2b00      	cmp	r3, #0
 80170da:	d105      	bne.n	80170e8 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 80170dc:	4b0d      	ldr	r3, [pc, #52]	@ (8017114 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 80170de:	4a0e      	ldr	r2, [pc, #56]	@ (8017118 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80170e0:	2128      	movs	r1, #40	@ 0x28
 80170e2:	480e      	ldr	r0, [pc, #56]	@ (801711c <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 80170e4:	f015 f830 	bl	802c148 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 80170e8:	2200      	movs	r2, #0
 80170ea:	2104      	movs	r1, #4
 80170ec:	2001      	movs	r0, #1
 80170ee:	f7f9 fb7d 	bl	80107ec <osMessageQueueNew>
 80170f2:	4603      	mov	r3, r0
 80170f4:	4a0a      	ldr	r2, [pc, #40]	@ (8017120 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 80170f6:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80170f8:	4b09      	ldr	r3, [pc, #36]	@ (8017120 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 80170fa:	681b      	ldr	r3, [r3, #0]
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d105      	bne.n	801710c <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8017100:	4b08      	ldr	r3, [pc, #32]	@ (8017124 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8017102:	4a05      	ldr	r2, [pc, #20]	@ (8017118 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8017104:	212c      	movs	r1, #44	@ 0x2c
 8017106:	4805      	ldr	r0, [pc, #20]	@ (801711c <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8017108:	f015 f81e 	bl	802c148 <__assert_func>
}
 801710c:	bf00      	nop
 801710e:	bd80      	pop	{r7, pc}
 8017110:	24032fc8 	.word	0x24032fc8
 8017114:	0802da68 	.word	0x0802da68
 8017118:	0802dab4 	.word	0x0802dab4
 801711c:	0802dae4 	.word	0x0802dae4
 8017120:	24032fcc 	.word	0x24032fcc
 8017124:	0802db10 	.word	0x0802db10

08017128 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8017128:	b580      	push	{r7, lr}
 801712a:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 801712c:	4b04      	ldr	r3, [pc, #16]	@ (8017140 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 801712e:	681b      	ldr	r3, [r3, #0]
 8017130:	f04f 31ff 	mov.w	r1, #4294967295
 8017134:	4618      	mov	r0, r3
 8017136:	f7f9 fac3 	bl	80106c0 <osSemaphoreAcquire>
}
 801713a:	bf00      	nop
 801713c:	bd80      	pop	{r7, pc}
 801713e:	bf00      	nop
 8017140:	24032fc8 	.word	0x24032fc8

08017144 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8017144:	b580      	push	{r7, lr}
 8017146:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8017148:	4b03      	ldr	r3, [pc, #12]	@ (8017158 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 801714a:	681b      	ldr	r3, [r3, #0]
 801714c:	4618      	mov	r0, r3
 801714e:	f7f9 fb09 	bl	8010764 <osSemaphoreRelease>
}
 8017152:	bf00      	nop
 8017154:	bd80      	pop	{r7, pc}
 8017156:	bf00      	nop
 8017158:	24032fc8 	.word	0x24032fc8

0801715c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 801715c:	b580      	push	{r7, lr}
 801715e:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8017160:	4b03      	ldr	r3, [pc, #12]	@ (8017170 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8017162:	681b      	ldr	r3, [r3, #0]
 8017164:	2100      	movs	r1, #0
 8017166:	4618      	mov	r0, r3
 8017168:	f7f9 faaa 	bl	80106c0 <osSemaphoreAcquire>
}
 801716c:	bf00      	nop
 801716e:	bd80      	pop	{r7, pc}
 8017170:	24032fc8 	.word	0x24032fc8

08017174 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8017174:	b580      	push	{r7, lr}
 8017176:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8017178:	4b03      	ldr	r3, [pc, #12]	@ (8017188 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 801717a:	681b      	ldr	r3, [r3, #0]
 801717c:	4618      	mov	r0, r3
 801717e:	f7f9 faf1 	bl	8010764 <osSemaphoreRelease>
}
 8017182:	bf00      	nop
 8017184:	bd80      	pop	{r7, pc}
 8017186:	bf00      	nop
 8017188:	24032fc8 	.word	0x24032fc8

0801718c <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 801718c:	b580      	push	{r7, lr}
 801718e:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8017190:	4b04      	ldr	r3, [pc, #16]	@ (80171a4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8017192:	6818      	ldr	r0, [r3, #0]
 8017194:	2300      	movs	r3, #0
 8017196:	2200      	movs	r2, #0
 8017198:	4903      	ldr	r1, [pc, #12]	@ (80171a8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 801719a:	f7f9 fb9b 	bl	80108d4 <osMessageQueuePut>
}
 801719e:	bf00      	nop
 80171a0:	bd80      	pop	{r7, pc}
 80171a2:	bf00      	nop
 80171a4:	24032fcc 	.word	0x24032fcc
 80171a8:	24000048 	.word	0x24000048

080171ac <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 80171ac:	b580      	push	{r7, lr}
 80171ae:	b082      	sub	sp, #8
 80171b0:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 80171b2:	4b09      	ldr	r3, [pc, #36]	@ (80171d8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80171b4:	6818      	ldr	r0, [r3, #0]
 80171b6:	1d39      	adds	r1, r7, #4
 80171b8:	2300      	movs	r3, #0
 80171ba:	2200      	movs	r2, #0
 80171bc:	f7f9 fbea 	bl	8010994 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 80171c0:	4b05      	ldr	r3, [pc, #20]	@ (80171d8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80171c2:	6818      	ldr	r0, [r3, #0]
 80171c4:	1d39      	adds	r1, r7, #4
 80171c6:	f04f 33ff 	mov.w	r3, #4294967295
 80171ca:	2200      	movs	r2, #0
 80171cc:	f7f9 fbe2 	bl	8010994 <osMessageQueueGet>
}
 80171d0:	bf00      	nop
 80171d2:	3708      	adds	r7, #8
 80171d4:	46bd      	mov	sp, r7
 80171d6:	bd80      	pop	{r7, pc}
 80171d8:	24032fcc 	.word	0x24032fcc

080171dc <__NVIC_DisableIRQ>:
{
 80171dc:	b480      	push	{r7}
 80171de:	b083      	sub	sp, #12
 80171e0:	af00      	add	r7, sp, #0
 80171e2:	4603      	mov	r3, r0
 80171e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80171e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80171ea:	2b00      	cmp	r3, #0
 80171ec:	db12      	blt.n	8017214 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80171ee:	88fb      	ldrh	r3, [r7, #6]
 80171f0:	f003 021f 	and.w	r2, r3, #31
 80171f4:	490a      	ldr	r1, [pc, #40]	@ (8017220 <__NVIC_DisableIRQ+0x44>)
 80171f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80171fa:	095b      	lsrs	r3, r3, #5
 80171fc:	2001      	movs	r0, #1
 80171fe:	fa00 f202 	lsl.w	r2, r0, r2
 8017202:	3320      	adds	r3, #32
 8017204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8017208:	f3bf 8f4f 	dsb	sy
}
 801720c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801720e:	f3bf 8f6f 	isb	sy
}
 8017212:	bf00      	nop
}
 8017214:	bf00      	nop
 8017216:	370c      	adds	r7, #12
 8017218:	46bd      	mov	sp, r7
 801721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801721e:	4770      	bx	lr
 8017220:	e000e100 	.word	0xe000e100

08017224 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 8017224:	b480      	push	{r7}
 8017226:	b083      	sub	sp, #12
 8017228:	af00      	add	r7, sp, #0
 801722a:	6078      	str	r0, [r7, #4]
        : color(0)
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	2200      	movs	r2, #0
 8017230:	601a      	str	r2, [r3, #0]
    }
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	4618      	mov	r0, r3
 8017236:	370c      	adds	r7, #12
 8017238:	46bd      	mov	sp, r7
 801723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801723e:	4770      	bx	lr

08017240 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 8017240:	b480      	push	{r7}
 8017242:	b083      	sub	sp, #12
 8017244:	af00      	add	r7, sp, #0
 8017246:	6078      	str	r0, [r7, #4]
        return color;
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	681b      	ldr	r3, [r3, #0]
    }
 801724c:	4618      	mov	r0, r3
 801724e:	370c      	adds	r7, #12
 8017250:	46bd      	mov	sp, r7
 8017252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017256:	4770      	bx	lr

08017258 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8017258:	b480      	push	{r7}
 801725a:	b083      	sub	sp, #12
 801725c:	af00      	add	r7, sp, #0
 801725e:	6078      	str	r0, [r7, #4]
    {
 8017260:	4a04      	ldr	r2, [pc, #16]	@ (8017274 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	601a      	str	r2, [r3, #0]
    }
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	4618      	mov	r0, r3
 801726a:	370c      	adds	r7, #12
 801726c:	46bd      	mov	sp, r7
 801726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017272:	4770      	bx	lr
 8017274:	0802e708 	.word	0x0802e708

08017278 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8017278:	b580      	push	{r7, lr}
 801727a:	b082      	sub	sp, #8
 801727c:	af00      	add	r7, sp, #0
 801727e:	6078      	str	r0, [r7, #4]
    }
 8017280:	6878      	ldr	r0, [r7, #4]
 8017282:	f7ff ffe9 	bl	8017258 <_ZN8touchgfx9DMA_QueueD1Ev>
 8017286:	2104      	movs	r1, #4
 8017288:	6878      	ldr	r0, [r7, #4]
 801728a:	f014 fbe6 	bl	802ba5a <_ZdlPvj>
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	4618      	mov	r0, r3
 8017292:	3708      	adds	r7, #8
 8017294:	46bd      	mov	sp, r7
 8017296:	bd80      	pop	{r7, pc}

08017298 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8017298:	b580      	push	{r7, lr}
 801729a:	b082      	sub	sp, #8
 801729c:	af00      	add	r7, sp, #0
 801729e:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	681b      	ldr	r3, [r3, #0]
 80172a4:	3344      	adds	r3, #68	@ 0x44
 80172a6:	681b      	ldr	r3, [r3, #0]
 80172a8:	6878      	ldr	r0, [r7, #4]
 80172aa:	4798      	blx	r3
    }
 80172ac:	bf00      	nop
 80172ae:	3708      	adds	r7, #8
 80172b0:	46bd      	mov	sp, r7
 80172b2:	bd80      	pop	{r7, pc}

080172b4 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 80172b4:	b480      	push	{r7}
 80172b6:	b083      	sub	sp, #12
 80172b8:	af00      	add	r7, sp, #0
 80172ba:	6078      	str	r0, [r7, #4]
    {
 80172bc:	4a04      	ldr	r2, [pc, #16]	@ (80172d0 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	601a      	str	r2, [r3, #0]
    }
 80172c2:	687b      	ldr	r3, [r7, #4]
 80172c4:	4618      	mov	r0, r3
 80172c6:	370c      	adds	r7, #12
 80172c8:	46bd      	mov	sp, r7
 80172ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172ce:	4770      	bx	lr
 80172d0:	0802ec0c 	.word	0x0802ec0c

080172d4 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 80172d4:	b580      	push	{r7, lr}
 80172d6:	b082      	sub	sp, #8
 80172d8:	af00      	add	r7, sp, #0
 80172da:	6078      	str	r0, [r7, #4]
    }
 80172dc:	6878      	ldr	r0, [r7, #4]
 80172de:	f7ff ffe9 	bl	80172b4 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 80172e2:	210c      	movs	r1, #12
 80172e4:	6878      	ldr	r0, [r7, #4]
 80172e6:	f014 fbb8 	bl	802ba5a <_ZdlPvj>
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	4618      	mov	r0, r3
 80172ee:	3708      	adds	r7, #8
 80172f0:	46bd      	mov	sp, r7
 80172f2:	bd80      	pop	{r7, pc}

080172f4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 80172f4:	b480      	push	{r7}
 80172f6:	b083      	sub	sp, #12
 80172f8:	af00      	add	r7, sp, #0
 80172fa:	6078      	str	r0, [r7, #4]
 80172fc:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80172fe:	4a09      	ldr	r2, [pc, #36]	@ (8017324 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	601a      	str	r2, [r3, #0]
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	683a      	ldr	r2, [r7, #0]
 8017308:	605a      	str	r2, [r3, #4]
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	2200      	movs	r2, #0
 801730e:	721a      	strb	r2, [r3, #8]
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	2200      	movs	r2, #0
 8017314:	725a      	strb	r2, [r3, #9]
    {
    }
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	4618      	mov	r0, r3
 801731a:	370c      	adds	r7, #12
 801731c:	46bd      	mov	sp, r7
 801731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017322:	4770      	bx	lr
 8017324:	0802ec0c 	.word	0x0802ec0c

08017328 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8017328:	b480      	push	{r7}
 801732a:	b083      	sub	sp, #12
 801732c:	af00      	add	r7, sp, #0
 801732e:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8017330:	2301      	movs	r3, #1
    }
 8017332:	4618      	mov	r0, r3
 8017334:	370c      	adds	r7, #12
 8017336:	46bd      	mov	sp, r7
 8017338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801733c:	4770      	bx	lr

0801733e <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 801733e:	b580      	push	{r7, lr}
 8017340:	b082      	sub	sp, #8
 8017342:	af00      	add	r7, sp, #0
 8017344:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8017346:	687a      	ldr	r2, [r7, #4]
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	681b      	ldr	r3, [r3, #0]
 801734c:	3328      	adds	r3, #40	@ 0x28
 801734e:	681b      	ldr	r3, [r3, #0]
 8017350:	4610      	mov	r0, r2
 8017352:	4798      	blx	r3
    }
 8017354:	bf00      	nop
 8017356:	3708      	adds	r7, #8
 8017358:	46bd      	mov	sp, r7
 801735a:	bd80      	pop	{r7, pc}

0801735c <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 801735c:	b580      	push	{r7, lr}
 801735e:	b082      	sub	sp, #8
 8017360:	af00      	add	r7, sp, #0
 8017362:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	685a      	ldr	r2, [r3, #4]
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	685b      	ldr	r3, [r3, #4]
 801736c:	681b      	ldr	r3, [r3, #0]
 801736e:	3314      	adds	r3, #20
 8017370:	681b      	ldr	r3, [r3, #0]
 8017372:	4610      	mov	r0, r2
 8017374:	4798      	blx	r3
    }
 8017376:	bf00      	nop
 8017378:	3708      	adds	r7, #8
 801737a:	46bd      	mov	sp, r7
 801737c:	bd80      	pop	{r7, pc}
	...

08017380 <DMA2D_IRQHandler>:
    const uint16_t size;
    const uint32_t* const data;
} clutData_t;

extern "C" void DMA2D_IRQHandler()
{
 8017380:	b580      	push	{r7, lr}
 8017382:	af00      	add	r7, sp, #0
    /* Transfer Complete Interrupt management ************************************/
    if ((READ_REG(DMA2D->ISR) & DMA2D_FLAG_TC) != RESET)
 8017384:	4b13      	ldr	r3, [pc, #76]	@ (80173d4 <DMA2D_IRQHandler+0x54>)
 8017386:	685b      	ldr	r3, [r3, #4]
 8017388:	f003 0302 	and.w	r3, r3, #2
 801738c:	2b00      	cmp	r3, #0
 801738e:	bf14      	ite	ne
 8017390:	2301      	movne	r3, #1
 8017392:	2300      	moveq	r3, #0
 8017394:	b2db      	uxtb	r3, r3
 8017396:	2b00      	cmp	r3, #0
 8017398:	d019      	beq.n	80173ce <DMA2D_IRQHandler+0x4e>
    {
        /* Verify Transfer Complete Interrupt */
        if ((READ_REG(DMA2D->CR) & DMA2D_IT_TC) != RESET)
 801739a:	4b0e      	ldr	r3, [pc, #56]	@ (80173d4 <DMA2D_IRQHandler+0x54>)
 801739c:	681b      	ldr	r3, [r3, #0]
 801739e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80173a2:	2b00      	cmp	r3, #0
 80173a4:	bf14      	ite	ne
 80173a6:	2301      	movne	r3, #1
 80173a8:	2300      	moveq	r3, #0
 80173aa:	b2db      	uxtb	r3, r3
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	d00e      	beq.n	80173ce <DMA2D_IRQHandler+0x4e>
        {
            /* Disable the transfer complete interrupt */
            DMA2D->CR &= ~(DMA2D_IT_TC);
 80173b0:	4b08      	ldr	r3, [pc, #32]	@ (80173d4 <DMA2D_IRQHandler+0x54>)
 80173b2:	681b      	ldr	r3, [r3, #0]
 80173b4:	4a07      	ldr	r2, [pc, #28]	@ (80173d4 <DMA2D_IRQHandler+0x54>)
 80173b6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80173ba:	6013      	str	r3, [r2, #0]

            /* Clear the transfer complete flag */
            DMA2D->IFCR = (DMA2D_FLAG_TC);
 80173bc:	4b05      	ldr	r3, [pc, #20]	@ (80173d4 <DMA2D_IRQHandler+0x54>)
 80173be:	2202      	movs	r2, #2
 80173c0:	609a      	str	r2, [r3, #8]

            /* Signal DMA queue of execution complete */
            touchgfx::HAL::getInstance()->signalDMAInterrupt();
 80173c2:	f7fd f843 	bl	801444c <_ZN8touchgfx3HAL11getInstanceEv>
 80173c6:	4603      	mov	r3, r0
 80173c8:	4618      	mov	r0, r3
 80173ca:	f7ff ffc7 	bl	801735c <_ZN8touchgfx3HAL18signalDMAInterruptEv>
        }
    }
}
 80173ce:	bf00      	nop
 80173d0:	bd80      	pop	{r7, pc}
 80173d2:	bf00      	nop
 80173d4:	52001000 	.word	0x52001000

080173d8 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 80173d8:	b580      	push	{r7, lr}
 80173da:	b082      	sub	sp, #8
 80173dc:	af00      	add	r7, sp, #0
 80173de:	6078      	str	r0, [r7, #4]
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	330c      	adds	r3, #12
 80173e4:	4618      	mov	r0, r3
 80173e6:	f7ff ff1d 	bl	8017224 <_ZN8touchgfx9colortypeC1Ev>
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	4618      	mov	r0, r3
 80173ee:	3708      	adds	r7, #8
 80173f0:	46bd      	mov	sp, r7
 80173f2:	bd80      	pop	{r7, pc}

080173f4 <_ZN8STM32DMAC1Ev>:

STM32DMA::STM32DMA()
 80173f4:	b5b0      	push	{r4, r5, r7, lr}
 80173f6:	b082      	sub	sp, #8
 80173f8:	af00      	add	r7, sp, #0
 80173fa:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80173fc:	687a      	ldr	r2, [r7, #4]
 80173fe:	687b      	ldr	r3, [r7, #4]
 8017400:	330c      	adds	r3, #12
 8017402:	4619      	mov	r1, r3
 8017404:	4610      	mov	r0, r2
 8017406:	f7ff ff75 	bl	80172f4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 801740a:	4a0e      	ldr	r2, [pc, #56]	@ (8017444 <_ZN8STM32DMAC1Ev+0x50>)
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	601a      	str	r2, [r3, #0]
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	f103 000c 	add.w	r0, r3, #12
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	3320      	adds	r3, #32
 801741a:	2260      	movs	r2, #96	@ 0x60
 801741c:	4619      	mov	r1, r3
 801741e:	f003 f9b1 	bl	801a784 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	3320      	adds	r3, #32
 8017426:	245f      	movs	r4, #95	@ 0x5f
 8017428:	461d      	mov	r5, r3
 801742a:	e004      	b.n	8017436 <_ZN8STM32DMAC1Ev+0x42>
 801742c:	4628      	mov	r0, r5
 801742e:	f7ff ffd3 	bl	80173d8 <_ZN8touchgfx6BlitOpC1Ev>
 8017432:	3c01      	subs	r4, #1
 8017434:	3524      	adds	r5, #36	@ 0x24
 8017436:	2c00      	cmp	r4, #0
 8017438:	daf8      	bge.n	801742c <_ZN8STM32DMAC1Ev+0x38>
{
}
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	4618      	mov	r0, r3
 801743e:	3708      	adds	r7, #8
 8017440:	46bd      	mov	sp, r7
 8017442:	bdb0      	pop	{r4, r5, r7, pc}
 8017444:	0802e6b8 	.word	0x0802e6b8

08017448 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 8017448:	b580      	push	{r7, lr}
 801744a:	b082      	sub	sp, #8
 801744c:	af00      	add	r7, sp, #0
 801744e:	6078      	str	r0, [r7, #4]
 8017450:	4a09      	ldr	r2, [pc, #36]	@ (8017478 <_ZN8STM32DMAD1Ev+0x30>)
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 8017456:	205a      	movs	r0, #90	@ 0x5a
 8017458:	f7ff fec0 	bl	80171dc <__NVIC_DisableIRQ>
}
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	330c      	adds	r3, #12
 8017460:	4618      	mov	r0, r3
 8017462:	f000 fbdd 	bl	8017c20 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	4618      	mov	r0, r3
 801746a:	f7ff ff23 	bl	80172b4 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	4618      	mov	r0, r3
 8017472:	3708      	adds	r7, #8
 8017474:	46bd      	mov	sp, r7
 8017476:	bd80      	pop	{r7, pc}
 8017478:	0802e6b8 	.word	0x0802e6b8

0801747c <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 801747c:	b580      	push	{r7, lr}
 801747e:	b082      	sub	sp, #8
 8017480:	af00      	add	r7, sp, #0
 8017482:	6078      	str	r0, [r7, #4]
}
 8017484:	6878      	ldr	r0, [r7, #4]
 8017486:	f7ff ffdf 	bl	8017448 <_ZN8STM32DMAD1Ev>
 801748a:	f44f 615a 	mov.w	r1, #3488	@ 0xda0
 801748e:	6878      	ldr	r0, [r7, #4]
 8017490:	f014 fae3 	bl	802ba5a <_ZdlPvj>
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	4618      	mov	r0, r3
 8017498:	3708      	adds	r7, #8
 801749a:	46bd      	mov	sp, r7
 801749c:	bd80      	pop	{r7, pc}
	...

080174a0 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 80174a0:	b580      	push	{r7, lr}
 80174a2:	b084      	sub	sp, #16
 80174a4:	af00      	add	r7, sp, #0
 80174a6:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80174a8:	4b13      	ldr	r3, [pc, #76]	@ (80174f8 <_ZN8STM32DMA10initializeEv+0x58>)
 80174aa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80174ae:	4a12      	ldr	r2, [pc, #72]	@ (80174f8 <_ZN8STM32DMA10initializeEv+0x58>)
 80174b0:	f043 0310 	orr.w	r3, r3, #16
 80174b4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80174b8:	4b0f      	ldr	r3, [pc, #60]	@ (80174f8 <_ZN8STM32DMA10initializeEv+0x58>)
 80174ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80174be:	f003 0310 	and.w	r3, r3, #16
 80174c2:	60fb      	str	r3, [r7, #12]
 80174c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 80174c6:	4b0c      	ldr	r3, [pc, #48]	@ (80174f8 <_ZN8STM32DMA10initializeEv+0x58>)
 80174c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80174ca:	4a0b      	ldr	r2, [pc, #44]	@ (80174f8 <_ZN8STM32DMA10initializeEv+0x58>)
 80174cc:	f043 0310 	orr.w	r3, r3, #16
 80174d0:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80174d2:	4b09      	ldr	r3, [pc, #36]	@ (80174f8 <_ZN8STM32DMA10initializeEv+0x58>)
 80174d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80174d6:	4a08      	ldr	r2, [pc, #32]	@ (80174f8 <_ZN8STM32DMA10initializeEv+0x58>)
 80174d8:	f023 0310 	bic.w	r3, r3, #16
 80174dc:	67d3      	str	r3, [r2, #124]	@ 0x7c

    /* Enable DMA2D global Interrupt */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80174de:	2200      	movs	r2, #0
 80174e0:	2105      	movs	r1, #5
 80174e2:	205a      	movs	r0, #90	@ 0x5a
 80174e4:	f7ef fece 	bl	8007284 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80174e8:	205a      	movs	r0, #90	@ 0x5a
 80174ea:	f7ef fee5 	bl	80072b8 <HAL_NVIC_EnableIRQ>
}
 80174ee:	bf00      	nop
 80174f0:	3710      	adds	r7, #16
 80174f2:	46bd      	mov	sp, r7
 80174f4:	bd80      	pop	{r7, pc}
 80174f6:	bf00      	nop
 80174f8:	58024400 	.word	0x58024400

080174fc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 80174fc:	b580      	push	{r7, lr}
 80174fe:	b084      	sub	sp, #16
 8017500:	af00      	add	r7, sp, #0
 8017502:	6078      	str	r0, [r7, #4]
 8017504:	460b      	mov	r3, r1
 8017506:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8017508:	2300      	movs	r3, #0
 801750a:	60fb      	str	r3, [r7, #12]

    switch (format)
 801750c:	78fb      	ldrb	r3, [r7, #3]
 801750e:	2b0b      	cmp	r3, #11
 8017510:	d826      	bhi.n	8017560 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 8017512:	a201      	add	r2, pc, #4	@ (adr r2, 8017518 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8017514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017518:	08017555 	.word	0x08017555
 801751c:	0801754f 	.word	0x0801754f
 8017520:	08017549 	.word	0x08017549
 8017524:	08017561 	.word	0x08017561
 8017528:	08017561 	.word	0x08017561
 801752c:	08017561 	.word	0x08017561
 8017530:	08017561 	.word	0x08017561
 8017534:	0801755b 	.word	0x0801755b
 8017538:	0801755b 	.word	0x0801755b
 801753c:	0801755b 	.word	0x0801755b
 8017540:	0801755b 	.word	0x0801755b
 8017544:	0801755b 	.word	0x0801755b
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8017548:	2300      	movs	r3, #0
 801754a:	60fb      	str	r3, [r7, #12]
        break;
 801754c:	e00e      	b.n	801756c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 801754e:	2301      	movs	r3, #1
 8017550:	60fb      	str	r3, [r7, #12]
        break;
 8017552:	e00b      	b.n	801756c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8017554:	2302      	movs	r3, #2
 8017556:	60fb      	str	r3, [r7, #12]
        break;
 8017558:	e008      	b.n	801756c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 801755a:	2305      	movs	r3, #5
 801755c:	60fb      	str	r3, [r7, #12]
        break;
 801755e:	e005      	b.n	801756c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8017560:	4b05      	ldr	r3, [pc, #20]	@ (8017578 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 8017562:	4a06      	ldr	r2, [pc, #24]	@ (801757c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8017564:	216b      	movs	r1, #107	@ 0x6b
 8017566:	4806      	ldr	r0, [pc, #24]	@ (8017580 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8017568:	f014 fdee 	bl	802c148 <__assert_func>
        break;
    }

    return dma2dColorMode;
 801756c:	68fb      	ldr	r3, [r7, #12]
}
 801756e:	4618      	mov	r0, r3
 8017570:	3710      	adds	r7, #16
 8017572:	46bd      	mov	sp, r7
 8017574:	bd80      	pop	{r7, pc}
 8017576:	bf00      	nop
 8017578:	0802db54 	.word	0x0802db54
 801757c:	0802db70 	.word	0x0802db70
 8017580:	0802dbbc 	.word	0x0802dbbc

08017584 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8017584:	b580      	push	{r7, lr}
 8017586:	b084      	sub	sp, #16
 8017588:	af00      	add	r7, sp, #0
 801758a:	6078      	str	r0, [r7, #4]
 801758c:	460b      	mov	r3, r1
 801758e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8017590:	2300      	movs	r3, #0
 8017592:	60fb      	str	r3, [r7, #12]

    switch (format)
 8017594:	78fb      	ldrb	r3, [r7, #3]
 8017596:	2b0a      	cmp	r3, #10
 8017598:	d821      	bhi.n	80175de <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 801759a:	a201      	add	r2, pc, #4	@ (adr r2, 80175a0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 801759c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80175a0:	080175d9 	.word	0x080175d9
 80175a4:	080175d3 	.word	0x080175d3
 80175a8:	080175cd 	.word	0x080175cd
 80175ac:	080175df 	.word	0x080175df
 80175b0:	080175df 	.word	0x080175df
 80175b4:	080175df 	.word	0x080175df
 80175b8:	080175df 	.word	0x080175df
 80175bc:	080175d3 	.word	0x080175d3
 80175c0:	080175d3 	.word	0x080175d3
 80175c4:	080175d3 	.word	0x080175d3
 80175c8:	080175d3 	.word	0x080175d3
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80175cc:	2300      	movs	r3, #0
 80175ce:	60fb      	str	r3, [r7, #12]
        break;
 80175d0:	e00b      	b.n	80175ea <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 80175d2:	2301      	movs	r3, #1
 80175d4:	60fb      	str	r3, [r7, #12]
        break;
 80175d6:	e008      	b.n	80175ea <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 80175d8:	2302      	movs	r3, #2
 80175da:	60fb      	str	r3, [r7, #12]
        break;
 80175dc:	e005      	b.n	80175ea <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 80175de:	4b05      	ldr	r3, [pc, #20]	@ (80175f4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 80175e0:	4a05      	ldr	r2, [pc, #20]	@ (80175f8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 80175e2:	218c      	movs	r1, #140	@ 0x8c
 80175e4:	4805      	ldr	r0, [pc, #20]	@ (80175fc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 80175e6:	f014 fdaf 	bl	802c148 <__assert_func>
        break;
    }

    return dma2dColorMode;
 80175ea:	68fb      	ldr	r3, [r7, #12]
}
 80175ec:	4618      	mov	r0, r3
 80175ee:	3710      	adds	r7, #16
 80175f0:	46bd      	mov	sp, r7
 80175f2:	bd80      	pop	{r7, pc}
 80175f4:	0802db54 	.word	0x0802db54
 80175f8:	0802dbe8 	.word	0x0802dbe8
 80175fc:	0802dbbc 	.word	0x0802dbbc

08017600 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8017600:	b480      	push	{r7}
 8017602:	b083      	sub	sp, #12
 8017604:	af00      	add	r7, sp, #0
 8017606:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8017608:	f240 33ef 	movw	r3, #1007	@ 0x3ef
}
 801760c:	4618      	mov	r0, r3
 801760e:	370c      	adds	r7, #12
 8017610:	46bd      	mov	sp, r7
 8017612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017616:	4770      	bx	lr

08017618 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8017618:	b590      	push	{r4, r7, lr}
 801761a:	b089      	sub	sp, #36	@ 0x24
 801761c:	af00      	add	r7, sp, #0
 801761e:	6078      	str	r0, [r7, #4]
 8017620:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8017622:	683b      	ldr	r3, [r7, #0]
 8017624:	7f5b      	ldrb	r3, [r3, #29]
 8017626:	4619      	mov	r1, r3
 8017628:	6878      	ldr	r0, [r7, #4]
 801762a:	f7ff ff67 	bl	80174fc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 801762e:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8017630:	683b      	ldr	r3, [r7, #0]
 8017632:	7f9b      	ldrb	r3, [r3, #30]
 8017634:	4619      	mov	r1, r3
 8017636:	6878      	ldr	r0, [r7, #4]
 8017638:	f7ff ff60 	bl	80174fc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 801763c:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 801763e:	683b      	ldr	r3, [r7, #0]
 8017640:	7f9b      	ldrb	r3, [r3, #30]
 8017642:	4619      	mov	r1, r3
 8017644:	6878      	ldr	r0, [r7, #4]
 8017646:	f7ff ff9d 	bl	8017584 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 801764a:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 801764c:	683b      	ldr	r3, [r7, #0]
 801764e:	8b5b      	ldrh	r3, [r3, #26]
 8017650:	461a      	mov	r2, r3
 8017652:	683b      	ldr	r3, [r7, #0]
 8017654:	8a9b      	ldrh	r3, [r3, #20]
 8017656:	1ad2      	subs	r2, r2, r3
 8017658:	4b94      	ldr	r3, [pc, #592]	@ (80178ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801765a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 801765c:	683b      	ldr	r3, [r7, #0]
 801765e:	8b5b      	ldrh	r3, [r3, #26]
 8017660:	461a      	mov	r2, r3
 8017662:	683b      	ldr	r3, [r7, #0]
 8017664:	8a9b      	ldrh	r3, [r3, #20]
 8017666:	1ad2      	subs	r2, r2, r3
 8017668:	4b90      	ldr	r3, [pc, #576]	@ (80178ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801766a:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 801766c:	683b      	ldr	r3, [r7, #0]
 801766e:	8b1b      	ldrh	r3, [r3, #24]
 8017670:	461a      	mov	r2, r3
 8017672:	683b      	ldr	r3, [r7, #0]
 8017674:	8a9b      	ldrh	r3, [r3, #20]
 8017676:	1ad2      	subs	r2, r2, r3
 8017678:	4b8c      	ldr	r3, [pc, #560]	@ (80178ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801767a:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 801767c:	4a8b      	ldr	r2, [pc, #556]	@ (80178ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801767e:	693b      	ldr	r3, [r7, #16]
 8017680:	6353      	str	r3, [r2, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8017682:	683b      	ldr	r3, [r7, #0]
 8017684:	8adb      	ldrh	r3, [r3, #22]
 8017686:	461a      	mov	r2, r3
 8017688:	683b      	ldr	r3, [r7, #0]
 801768a:	8a9b      	ldrh	r3, [r3, #20]
 801768c:	041b      	lsls	r3, r3, #16
 801768e:	431a      	orrs	r2, r3
 8017690:	4b86      	ldr	r3, [pc, #536]	@ (80178ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8017692:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8017694:	683b      	ldr	r3, [r7, #0]
 8017696:	691a      	ldr	r2, [r3, #16]
 8017698:	4b84      	ldr	r3, [pc, #528]	@ (80178ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801769a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 801769c:	683b      	ldr	r3, [r7, #0]
 801769e:	685a      	ldr	r2, [r3, #4]
 80176a0:	4b82      	ldr	r3, [pc, #520]	@ (80178ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80176a2:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 80176a4:	683b      	ldr	r3, [r7, #0]
 80176a6:	681b      	ldr	r3, [r3, #0]
 80176a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80176ac:	d036      	beq.n	801771c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x104>
 80176ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80176b2:	f200 80de 	bhi.w	8017872 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x25a>
 80176b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80176ba:	d015      	beq.n	80176e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 80176bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80176c0:	f200 80d7 	bhi.w	8017872 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x25a>
 80176c4:	2b80      	cmp	r3, #128	@ 0x80
 80176c6:	d043      	beq.n	8017750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>
 80176c8:	2b80      	cmp	r3, #128	@ 0x80
 80176ca:	f200 80d2 	bhi.w	8017872 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x25a>
 80176ce:	2b40      	cmp	r3, #64	@ 0x40
 80176d0:	f000 80bb 	beq.w	801784a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
 80176d4:	2b40      	cmp	r3, #64	@ 0x40
 80176d6:	f200 80cc 	bhi.w	8017872 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x25a>
 80176da:	2b04      	cmp	r3, #4
 80176dc:	f000 80a1 	beq.w	8017822 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20a>
 80176e0:	2b20      	cmp	r3, #32
 80176e2:	f000 80b2 	beq.w	801784a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
 80176e6:	e0c4      	b.n	8017872 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x25a>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80176e8:	683b      	ldr	r3, [r7, #0]
 80176ea:	7f1b      	ldrb	r3, [r3, #28]
 80176ec:	061a      	lsls	r2, r3, #24
 80176ee:	496f      	ldr	r1, [pc, #444]	@ (80178ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80176f0:	4b6f      	ldr	r3, [pc, #444]	@ (80178b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80176f2:	4313      	orrs	r3, r2
 80176f4:	61cb      	str	r3, [r1, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80176f6:	683b      	ldr	r3, [r7, #0]
 80176f8:	330c      	adds	r3, #12
 80176fa:	4c6c      	ldr	r4, [pc, #432]	@ (80178ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80176fc:	4618      	mov	r0, r3
 80176fe:	f7ff fd9f 	bl	8017240 <_ZNK8touchgfx9colortypecvmEv>
 8017702:	4603      	mov	r3, r0
 8017704:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8017706:	4a69      	ldr	r2, [pc, #420]	@ (80178ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8017708:	697b      	ldr	r3, [r7, #20]
 801770a:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801770c:	683b      	ldr	r3, [r7, #0]
 801770e:	691a      	ldr	r2, [r3, #16]
 8017710:	4b66      	ldr	r3, [pc, #408]	@ (80178ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8017712:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8017714:	4b65      	ldr	r3, [pc, #404]	@ (80178ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8017716:	4a67      	ldr	r2, [pc, #412]	@ (80178b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8017718:	601a      	str	r2, [r3, #0]
        break;
 801771a:	e0c2      	b.n	80178a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28a>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801771c:	683b      	ldr	r3, [r7, #0]
 801771e:	7f1b      	ldrb	r3, [r3, #28]
 8017720:	061a      	lsls	r2, r3, #24
 8017722:	4962      	ldr	r1, [pc, #392]	@ (80178ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8017724:	4b64      	ldr	r3, [pc, #400]	@ (80178b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8017726:	4313      	orrs	r3, r2
 8017728:	61cb      	str	r3, [r1, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 801772a:	683b      	ldr	r3, [r7, #0]
 801772c:	330c      	adds	r3, #12
 801772e:	4c5f      	ldr	r4, [pc, #380]	@ (80178ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8017730:	4618      	mov	r0, r3
 8017732:	f7ff fd85 	bl	8017240 <_ZNK8touchgfx9colortypecvmEv>
 8017736:	4603      	mov	r3, r0
 8017738:	6223      	str	r3, [r4, #32]
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801773a:	4a5c      	ldr	r2, [pc, #368]	@ (80178ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801773c:	697b      	ldr	r3, [r7, #20]
 801773e:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8017740:	683b      	ldr	r3, [r7, #0]
 8017742:	691a      	ldr	r2, [r3, #16]
 8017744:	4b59      	ldr	r3, [pc, #356]	@ (80178ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8017746:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8017748:	4b58      	ldr	r3, [pc, #352]	@ (80178ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801774a:	4a5a      	ldr	r2, [pc, #360]	@ (80178b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801774c:	601a      	str	r2, [r3, #0]
        break;
 801774e:	e0a8      	b.n	80178a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28a>
    case BLIT_OP_COPY_L8:
        {
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8017750:	683b      	ldr	r3, [r7, #0]
 8017752:	689b      	ldr	r3, [r3, #8]
 8017754:	60fb      	str	r3, [r7, #12]
            bool blend = true;
 8017756:	2301      	movs	r3, #1
 8017758:	77fb      	strb	r3, [r7, #31]

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801775a:	683b      	ldr	r3, [r7, #0]
 801775c:	7f1b      	ldrb	r3, [r3, #28]
 801775e:	061a      	lsls	r2, r3, #24
 8017760:	69bb      	ldr	r3, [r7, #24]
 8017762:	4313      	orrs	r3, r2
 8017764:	4a51      	ldr	r2, [pc, #324]	@ (80178ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8017766:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801776a:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801776c:	4a4f      	ldr	r2, [pc, #316]	@ (80178ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801776e:	697b      	ldr	r3, [r7, #20]
 8017770:	6253      	str	r3, [r2, #36]	@ 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8017772:	683b      	ldr	r3, [r7, #0]
 8017774:	691a      	ldr	r2, [r3, #16]
 8017776:	4b4d      	ldr	r3, [pc, #308]	@ (80178ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8017778:	615a      	str	r2, [r3, #20]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	1d1a      	adds	r2, r3, #4
 801777e:	4b4b      	ldr	r3, [pc, #300]	@ (80178ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8017780:	62da      	str	r2, [r3, #44]	@ 0x2c

            switch ((Bitmap::ClutFormat)palette->format)
 8017782:	68fb      	ldr	r3, [r7, #12]
 8017784:	881b      	ldrh	r3, [r3, #0]
 8017786:	b2db      	uxtb	r3, r3
 8017788:	2b00      	cmp	r3, #0
 801778a:	d002      	beq.n	8017792 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x17a>
 801778c:	2b01      	cmp	r3, #1
 801778e:	d00d      	beq.n	80177ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x194>
 8017790:	e020      	b.n	80177d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8017792:	4b46      	ldr	r3, [pc, #280]	@ (80178ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8017794:	69da      	ldr	r2, [r3, #28]
 8017796:	4b49      	ldr	r3, [pc, #292]	@ (80178bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8017798:	4013      	ands	r3, r2
 801779a:	68fa      	ldr	r2, [r7, #12]
 801779c:	8852      	ldrh	r2, [r2, #2]
 801779e:	3a01      	subs	r2, #1
 80177a0:	0212      	lsls	r2, r2, #8
 80177a2:	4611      	mov	r1, r2
 80177a4:	4a41      	ldr	r2, [pc, #260]	@ (80178ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80177a6:	430b      	orrs	r3, r1
 80177a8:	61d3      	str	r3, [r2, #28]
                break;
 80177aa:	e01a      	b.n	80177e2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if (blitOp.alpha == 255)
 80177ac:	683b      	ldr	r3, [r7, #0]
 80177ae:	7f1b      	ldrb	r3, [r3, #28]
 80177b0:	2bff      	cmp	r3, #255	@ 0xff
 80177b2:	d101      	bne.n	80177b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a0>
                {
                    blend = false;
 80177b4:	2300      	movs	r3, #0
 80177b6:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80177b8:	4b3c      	ldr	r3, [pc, #240]	@ (80178ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80177ba:	69da      	ldr	r2, [r3, #28]
 80177bc:	4b3f      	ldr	r3, [pc, #252]	@ (80178bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80177be:	4013      	ands	r3, r2
 80177c0:	68fa      	ldr	r2, [r7, #12]
 80177c2:	8852      	ldrh	r2, [r2, #2]
 80177c4:	3a01      	subs	r2, #1
 80177c6:	0212      	lsls	r2, r2, #8
 80177c8:	4313      	orrs	r3, r2
 80177ca:	4a38      	ldr	r2, [pc, #224]	@ (80178ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80177cc:	f043 0310 	orr.w	r3, r3, #16
 80177d0:	61d3      	str	r3, [r2, #28]
                break;
 80177d2:	e006      	b.n	80177e2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 80177d4:	4b3a      	ldr	r3, [pc, #232]	@ (80178c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80177d6:	4a3b      	ldr	r2, [pc, #236]	@ (80178c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 80177d8:	f44f 7183 	mov.w	r1, #262	@ 0x106
 80177dc:	483a      	ldr	r0, [pc, #232]	@ (80178c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 80177de:	f014 fcb3 	bl	802c148 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 80177e2:	4b32      	ldr	r3, [pc, #200]	@ (80178ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80177e4:	69db      	ldr	r3, [r3, #28]
 80177e6:	4a31      	ldr	r2, [pc, #196]	@ (80178ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80177e8:	f043 0320 	orr.w	r3, r3, #32
 80177ec:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80177ee:	bf00      	nop
 80177f0:	4b2e      	ldr	r3, [pc, #184]	@ (80178ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80177f2:	69db      	ldr	r3, [r3, #28]
 80177f4:	f003 0320 	and.w	r3, r3, #32
 80177f8:	2b00      	cmp	r3, #0
 80177fa:	bf14      	ite	ne
 80177fc:	2301      	movne	r3, #1
 80177fe:	2300      	moveq	r3, #0
 8017800:	b2db      	uxtb	r3, r3
 8017802:	2b00      	cmp	r3, #0
 8017804:	d1f4      	bne.n	80177f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8017806:	4b29      	ldr	r3, [pc, #164]	@ (80178ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8017808:	2210      	movs	r2, #16
 801780a:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if (blend)
 801780c:	7ffb      	ldrb	r3, [r7, #31]
 801780e:	2b00      	cmp	r3, #0
 8017810:	d003      	beq.n	801781a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x202>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8017812:	4b26      	ldr	r3, [pc, #152]	@ (80178ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8017814:	4a27      	ldr	r2, [pc, #156]	@ (80178b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8017816:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
            }
        }
        break;
 8017818:	e043      	b.n	80178a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28a>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 801781a:	4b24      	ldr	r3, [pc, #144]	@ (80178ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801781c:	4a2b      	ldr	r2, [pc, #172]	@ (80178cc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 801781e:	601a      	str	r2, [r3, #0]
        break;
 8017820:	e03f      	b.n	80178a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28a>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8017822:	683b      	ldr	r3, [r7, #0]
 8017824:	7f1b      	ldrb	r3, [r3, #28]
 8017826:	061a      	lsls	r2, r3, #24
 8017828:	69bb      	ldr	r3, [r7, #24]
 801782a:	4313      	orrs	r3, r2
 801782c:	4a1f      	ldr	r2, [pc, #124]	@ (80178ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801782e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8017832:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8017834:	4a1d      	ldr	r2, [pc, #116]	@ (80178ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8017836:	697b      	ldr	r3, [r7, #20]
 8017838:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801783a:	683b      	ldr	r3, [r7, #0]
 801783c:	691a      	ldr	r2, [r3, #16]
 801783e:	4b1b      	ldr	r3, [pc, #108]	@ (80178ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8017840:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8017842:	4b1a      	ldr	r3, [pc, #104]	@ (80178ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8017844:	4a1b      	ldr	r2, [pc, #108]	@ (80178b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8017846:	601a      	str	r2, [r3, #0]
        break;
 8017848:	e02b      	b.n	80178a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28a>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801784a:	683b      	ldr	r3, [r7, #0]
 801784c:	7f1b      	ldrb	r3, [r3, #28]
 801784e:	061a      	lsls	r2, r3, #24
 8017850:	69bb      	ldr	r3, [r7, #24]
 8017852:	4313      	orrs	r3, r2
 8017854:	4a15      	ldr	r2, [pc, #84]	@ (80178ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8017856:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801785a:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801785c:	4a13      	ldr	r2, [pc, #76]	@ (80178ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801785e:	697b      	ldr	r3, [r7, #20]
 8017860:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8017862:	683b      	ldr	r3, [r7, #0]
 8017864:	691a      	ldr	r2, [r3, #16]
 8017866:	4b11      	ldr	r3, [pc, #68]	@ (80178ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8017868:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 801786a:	4b10      	ldr	r3, [pc, #64]	@ (80178ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801786c:	4a11      	ldr	r2, [pc, #68]	@ (80178b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801786e:	601a      	str	r2, [r3, #0]
        break;
 8017870:	e017      	b.n	80178a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28a>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8017872:	683b      	ldr	r3, [r7, #0]
 8017874:	7f1b      	ldrb	r3, [r3, #28]
 8017876:	061a      	lsls	r2, r3, #24
 8017878:	69bb      	ldr	r3, [r7, #24]
 801787a:	4313      	orrs	r3, r2
 801787c:	4a0b      	ldr	r2, [pc, #44]	@ (80178ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801787e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8017882:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8017884:	683b      	ldr	r3, [r7, #0]
 8017886:	7f5a      	ldrb	r2, [r3, #29]
 8017888:	683b      	ldr	r3, [r7, #0]
 801788a:	7f9b      	ldrb	r3, [r3, #30]
 801788c:	429a      	cmp	r2, r3
 801788e:	d003      	beq.n	8017898 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x280>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8017890:	4b06      	ldr	r3, [pc, #24]	@ (80178ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8017892:	4a0e      	ldr	r2, [pc, #56]	@ (80178cc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 8017894:	601a      	str	r2, [r3, #0]
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
        }

        break;
 8017896:	e003      	b.n	80178a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8017898:	4b04      	ldr	r3, [pc, #16]	@ (80178ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801789a:	f242 3201 	movw	r2, #8961	@ 0x2301
 801789e:	601a      	str	r2, [r3, #0]
        break;
 80178a0:	bf00      	nop
    }
}
 80178a2:	bf00      	nop
 80178a4:	3724      	adds	r7, #36	@ 0x24
 80178a6:	46bd      	mov	sp, r7
 80178a8:	bd90      	pop	{r4, r7, pc}
 80178aa:	bf00      	nop
 80178ac:	52001000 	.word	0x52001000
 80178b0:	0002000a 	.word	0x0002000a
 80178b4:	00022301 	.word	0x00022301
 80178b8:	00020009 	.word	0x00020009
 80178bc:	ffff00ef 	.word	0xffff00ef
 80178c0:	0802dc34 	.word	0x0802dc34
 80178c4:	0802dc50 	.word	0x0802dc50
 80178c8:	0802dbbc 	.word	0x0802dbbc
 80178cc:	00012301 	.word	0x00012301

080178d0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 80178d0:	b590      	push	{r4, r7, lr}
 80178d2:	b085      	sub	sp, #20
 80178d4:	af00      	add	r7, sp, #0
 80178d6:	6078      	str	r0, [r7, #4]
 80178d8:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80178da:	683b      	ldr	r3, [r7, #0]
 80178dc:	7f9b      	ldrb	r3, [r3, #30]
 80178de:	4619      	mov	r1, r3
 80178e0:	6878      	ldr	r0, [r7, #4]
 80178e2:	f7ff fe4f 	bl	8017584 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80178e6:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80178e8:	4a2f      	ldr	r2, [pc, #188]	@ (80179a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80178ea:	68fb      	ldr	r3, [r7, #12]
 80178ec:	6353      	str	r3, [r2, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80178ee:	683b      	ldr	r3, [r7, #0]
 80178f0:	8adb      	ldrh	r3, [r3, #22]
 80178f2:	461a      	mov	r2, r3
 80178f4:	683b      	ldr	r3, [r7, #0]
 80178f6:	8a9b      	ldrh	r3, [r3, #20]
 80178f8:	041b      	lsls	r3, r3, #16
 80178fa:	431a      	orrs	r2, r3
 80178fc:	4b2a      	ldr	r3, [pc, #168]	@ (80179a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80178fe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8017900:	683b      	ldr	r3, [r7, #0]
 8017902:	691a      	ldr	r2, [r3, #16]
 8017904:	4b28      	ldr	r3, [pc, #160]	@ (80179a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8017906:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8017908:	683b      	ldr	r3, [r7, #0]
 801790a:	8b5b      	ldrh	r3, [r3, #26]
 801790c:	461a      	mov	r2, r3
 801790e:	683b      	ldr	r3, [r7, #0]
 8017910:	8a9b      	ldrh	r3, [r3, #20]
 8017912:	1ad2      	subs	r2, r2, r3
 8017914:	4b24      	ldr	r3, [pc, #144]	@ (80179a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8017916:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8017918:	683b      	ldr	r3, [r7, #0]
 801791a:	681b      	ldr	r3, [r3, #0]
 801791c:	2b08      	cmp	r3, #8
 801791e:	d12d      	bne.n	801797c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xac>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8017920:	683b      	ldr	r3, [r7, #0]
 8017922:	8b5b      	ldrh	r3, [r3, #26]
 8017924:	461a      	mov	r2, r3
 8017926:	683b      	ldr	r3, [r7, #0]
 8017928:	8a9b      	ldrh	r3, [r3, #20]
 801792a:	1ad2      	subs	r2, r2, r3
 801792c:	4b1e      	ldr	r3, [pc, #120]	@ (80179a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 801792e:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8017930:	683b      	ldr	r3, [r7, #0]
 8017932:	8b5b      	ldrh	r3, [r3, #26]
 8017934:	461a      	mov	r2, r3
 8017936:	683b      	ldr	r3, [r7, #0]
 8017938:	8a9b      	ldrh	r3, [r3, #20]
 801793a:	1ad2      	subs	r2, r2, r3
 801793c:	4b1a      	ldr	r3, [pc, #104]	@ (80179a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 801793e:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8017940:	4a19      	ldr	r2, [pc, #100]	@ (80179a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8017942:	68fb      	ldr	r3, [r7, #12]
 8017944:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8017946:	683b      	ldr	r3, [r7, #0]
 8017948:	7f1b      	ldrb	r3, [r3, #28]
 801794a:	061a      	lsls	r2, r3, #24
 801794c:	4916      	ldr	r1, [pc, #88]	@ (80179a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 801794e:	4b17      	ldr	r3, [pc, #92]	@ (80179ac <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 8017950:	4313      	orrs	r3, r2
 8017952:	61cb      	str	r3, [r1, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8017954:	683b      	ldr	r3, [r7, #0]
 8017956:	330c      	adds	r3, #12
 8017958:	4c13      	ldr	r4, [pc, #76]	@ (80179a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 801795a:	4618      	mov	r0, r3
 801795c:	f7ff fc70 	bl	8017240 <_ZNK8touchgfx9colortypecvmEv>
 8017960:	4603      	mov	r3, r0
 8017962:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8017964:	683b      	ldr	r3, [r7, #0]
 8017966:	691a      	ldr	r2, [r3, #16]
 8017968:	4b0f      	ldr	r3, [pc, #60]	@ (80179a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 801796a:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801796c:	683b      	ldr	r3, [r7, #0]
 801796e:	691a      	ldr	r2, [r3, #16]
 8017970:	4b0d      	ldr	r3, [pc, #52]	@ (80179a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8017972:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND | DMA2D_IT_CE | DMA2D_IT_TE));
 8017974:	4b0c      	ldr	r3, [pc, #48]	@ (80179a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8017976:	4a0e      	ldr	r2, [pc, #56]	@ (80179b0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe0>)
 8017978:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
    }
}
 801797a:	e010      	b.n	801799e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xce>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 801797c:	4a0a      	ldr	r2, [pc, #40]	@ (80179a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 801797e:	68fb      	ldr	r3, [r7, #12]
 8017980:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8017982:	4b09      	ldr	r3, [pc, #36]	@ (80179a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8017984:	2200      	movs	r2, #0
 8017986:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8017988:	683b      	ldr	r3, [r7, #0]
 801798a:	330c      	adds	r3, #12
 801798c:	4c06      	ldr	r4, [pc, #24]	@ (80179a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 801798e:	4618      	mov	r0, r3
 8017990:	f7ff fc56 	bl	8017240 <_ZNK8touchgfx9colortypecvmEv>
 8017994:	4603      	mov	r3, r0
 8017996:	63a3      	str	r3, [r4, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8017998:	4b03      	ldr	r3, [pc, #12]	@ (80179a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 801799a:	4a06      	ldr	r2, [pc, #24]	@ (80179b4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe4>)
 801799c:	601a      	str	r2, [r3, #0]
}
 801799e:	bf00      	nop
 80179a0:	3714      	adds	r7, #20
 80179a2:	46bd      	mov	sp, r7
 80179a4:	bd90      	pop	{r4, r7, pc}
 80179a6:	bf00      	nop
 80179a8:	52001000 	.word	0x52001000
 80179ac:	00010009 	.word	0x00010009
 80179b0:	00022301 	.word	0x00022301
 80179b4:	00032301 	.word	0x00032301

080179b8 <_ZN8touchgfx5paint8tearDownEv>:
 * @fn void tearDown();
 *
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
 80179b8:	b480      	push	{r7}
 80179ba:	af00      	add	r7, sp, #0
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 80179bc:	bf00      	nop
 80179be:	4b09      	ldr	r3, [pc, #36]	@ (80179e4 <_ZN8touchgfx5paint8tearDownEv+0x2c>)
 80179c0:	681b      	ldr	r3, [r3, #0]
 80179c2:	f003 0301 	and.w	r3, r3, #1
 80179c6:	2b00      	cmp	r3, #0
 80179c8:	bf14      	ite	ne
 80179ca:	2301      	movne	r3, #1
 80179cc:	2300      	moveq	r3, #0
 80179ce:	b2db      	uxtb	r3, r3
 80179d0:	2b00      	cmp	r3, #0
 80179d2:	d1f4      	bne.n	80179be <_ZN8touchgfx5paint8tearDownEv+0x6>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80179d4:	4b03      	ldr	r3, [pc, #12]	@ (80179e4 <_ZN8touchgfx5paint8tearDownEv+0x2c>)
 80179d6:	2223      	movs	r2, #35	@ 0x23
 80179d8:	609a      	str	r2, [r3, #8]
}
 80179da:	bf00      	nop
 80179dc:	46bd      	mov	sp, r7
 80179de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179e2:	4770      	bx	lr
 80179e4:	52001000 	.word	0x52001000

080179e8 <_ZN8touchgfx5paint9flushLineEPmi>:
/** Flushes a line of pixels in the data cache if used.
 *
 * @brief Flushes decoded RGB pixels when rendering compressed images
 */
void flushLine(uint32_t* addr, int sizebytes)
{
 80179e8:	b480      	push	{r7}
 80179ea:	b087      	sub	sp, #28
 80179ec:	af00      	add	r7, sp, #0
 80179ee:	6078      	str	r0, [r7, #4]
 80179f0:	6039      	str	r1, [r7, #0]
    // This funciton is used when decompressing RGB images to flush
    // the currently decoded pixels in the cache to allow the DMA2D
    // to blend the pixels correcly.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80179f2:	4b1b      	ldr	r3, [pc, #108]	@ (8017a60 <_ZN8touchgfx5paint9flushLineEPmi+0x78>)
 80179f4:	695b      	ldr	r3, [r3, #20]
 80179f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	bf14      	ite	ne
 80179fe:	2301      	movne	r3, #1
 8017a00:	2300      	moveq	r3, #0
 8017a02:	b2db      	uxtb	r3, r3
 8017a04:	2b00      	cmp	r3, #0
 8017a06:	d025      	beq.n	8017a54 <_ZN8touchgfx5paint9flushLineEPmi+0x6c>
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	617b      	str	r3, [r7, #20]
 8017a0c:	683b      	ldr	r3, [r7, #0]
 8017a0e:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8017a10:	693b      	ldr	r3, [r7, #16]
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	dd1d      	ble.n	8017a52 <_ZN8touchgfx5paint9flushLineEPmi+0x6a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8017a16:	697b      	ldr	r3, [r7, #20]
 8017a18:	f003 021f 	and.w	r2, r3, #31
 8017a1c:	693b      	ldr	r3, [r7, #16]
 8017a1e:	4413      	add	r3, r2
 8017a20:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8017a22:	697b      	ldr	r3, [r7, #20]
 8017a24:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8017a26:	f3bf 8f4f 	dsb	sy
}
 8017a2a:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8017a2c:	4a0c      	ldr	r2, [pc, #48]	@ (8017a60 <_ZN8touchgfx5paint9flushLineEPmi+0x78>)
 8017a2e:	68bb      	ldr	r3, [r7, #8]
 8017a30:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8017a34:	68bb      	ldr	r3, [r7, #8]
 8017a36:	3320      	adds	r3, #32
 8017a38:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8017a3a:	68fb      	ldr	r3, [r7, #12]
 8017a3c:	3b20      	subs	r3, #32
 8017a3e:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8017a40:	68fb      	ldr	r3, [r7, #12]
 8017a42:	2b00      	cmp	r3, #0
 8017a44:	dcf2      	bgt.n	8017a2c <_ZN8touchgfx5paint9flushLineEPmi+0x44>
  __ASM volatile ("dsb 0xF":::"memory");
 8017a46:	f3bf 8f4f 	dsb	sy
}
 8017a4a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8017a4c:	f3bf 8f6f 	isb	sy
}
 8017a50:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8017a52:	bf00      	nop
    {
        SCB_CleanDCache_by_Addr(addr, sizebytes);
    }
}
 8017a54:	bf00      	nop
 8017a56:	371c      	adds	r7, #28
 8017a58:	46bd      	mov	sp, r7
 8017a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a5e:	4770      	bx	lr
 8017a60:	e000ed00 	.word	0xe000ed00

08017a64 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>:
 *
 * @brief Renders Canvas Widget chunks using DMA.
 * This functions will not generate an interrupt, and will not affect the DMA queue.
 */
void lineFromColor(uint8_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha)
{
 8017a64:	b480      	push	{r7}
 8017a66:	b085      	sub	sp, #20
 8017a68:	af00      	add	r7, sp, #0
 8017a6a:	60f8      	str	r0, [r7, #12]
 8017a6c:	60b9      	str	r1, [r7, #8]
 8017a6e:	607a      	str	r2, [r7, #4]
 8017a70:	70fb      	strb	r3, [r7, #3]
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8017a72:	bf00      	nop
 8017a74:	4b21      	ldr	r3, [pc, #132]	@ (8017afc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x98>)
 8017a76:	681b      	ldr	r3, [r3, #0]
 8017a78:	f003 0301 	and.w	r3, r3, #1
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	bf14      	ite	ne
 8017a80:	2301      	movne	r3, #1
 8017a82:	2300      	moveq	r3, #0
 8017a84:	b2db      	uxtb	r3, r3
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	d1f4      	bne.n	8017a74 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x10>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8017a8a:	4b1c      	ldr	r3, [pc, #112]	@ (8017afc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x98>)
 8017a8c:	2223      	movs	r2, #35	@ 0x23
 8017a8e:	609a      	str	r2, [r3, #8]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8017a90:	4b1a      	ldr	r3, [pc, #104]	@ (8017afc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x98>)
 8017a92:	2201      	movs	r2, #1
 8017a94:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8017a96:	68bb      	ldr	r3, [r7, #8]
 8017a98:	041b      	lsls	r3, r3, #16
 8017a9a:	4a18      	ldr	r2, [pc, #96]	@ (8017afc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x98>)
 8017a9c:	f043 0301 	orr.w	r3, r3, #1
 8017aa0:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8017aa2:	4a16      	ldr	r2, [pc, #88]	@ (8017afc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x98>)
 8017aa4:	68fb      	ldr	r3, [r7, #12]
 8017aa6:	63d3      	str	r3, [r2, #60]	@ 0x3c

    if (alpha < 0xFF)
 8017aa8:	78fb      	ldrb	r3, [r7, #3]
 8017aaa:	2bff      	cmp	r3, #255	@ 0xff
 8017aac:	d017      	beq.n	8017ade <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x7a>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8017aae:	4b13      	ldr	r3, [pc, #76]	@ (8017afc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x98>)
 8017ab0:	2201      	movs	r2, #1
 8017ab2:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8017ab4:	78fb      	ldrb	r3, [r7, #3]
 8017ab6:	061a      	lsls	r2, r3, #24
 8017ab8:	4910      	ldr	r1, [pc, #64]	@ (8017afc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x98>)
 8017aba:	4b11      	ldr	r3, [pc, #68]	@ (8017b00 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x9c>)
 8017abc:	4313      	orrs	r3, r2
 8017abe:	61cb      	str	r3, [r1, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8017ac0:	4a0e      	ldr	r2, [pc, #56]	@ (8017afc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x98>)
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8017ac8:	6213      	str	r3, [r2, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8017aca:	4a0c      	ldr	r2, [pc, #48]	@ (8017afc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x98>)
 8017acc:	68fb      	ldr	r3, [r7, #12]
 8017ace:	6153      	str	r3, [r2, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 8017ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8017afc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x98>)
 8017ad2:	68fb      	ldr	r3, [r7, #12]
 8017ad4:	60d3      	str	r3, [r2, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8017ad6:	4b09      	ldr	r3, [pc, #36]	@ (8017afc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x98>)
 8017ad8:	4a0a      	ldr	r2, [pc, #40]	@ (8017b04 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0xa0>)
 8017ada:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, color);

        /* Start DMA2D */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
    }
}
 8017adc:	e008      	b.n	8017af0 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x8c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8017ade:	4b07      	ldr	r3, [pc, #28]	@ (8017afc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x98>)
 8017ae0:	2201      	movs	r2, #1
 8017ae2:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->OCOLR, color);
 8017ae4:	4a05      	ldr	r2, [pc, #20]	@ (8017afc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x98>)
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	6393      	str	r3, [r2, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8017aea:	4b04      	ldr	r3, [pc, #16]	@ (8017afc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x98>)
 8017aec:	4a06      	ldr	r2, [pc, #24]	@ (8017b08 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0xa4>)
 8017aee:	601a      	str	r2, [r3, #0]
}
 8017af0:	bf00      	nop
 8017af2:	3714      	adds	r7, #20
 8017af4:	46bd      	mov	sp, r7
 8017af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017afa:	4770      	bx	lr
 8017afc:	52001000 	.word	0x52001000
 8017b00:	00010009 	.word	0x00010009
 8017b04:	00020001 	.word	0x00020001
 8017b08:	00030001 	.word	0x00030001

08017b0c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>:

void lineFromRGB888(uint8_t* const ptr, const uint8_t* const data, const unsigned count, const uint8_t alpha)
{
 8017b0c:	b480      	push	{r7}
 8017b0e:	b085      	sub	sp, #20
 8017b10:	af00      	add	r7, sp, #0
 8017b12:	60f8      	str	r0, [r7, #12]
 8017b14:	60b9      	str	r1, [r7, #8]
 8017b16:	607a      	str	r2, [r7, #4]
 8017b18:	70fb      	strb	r3, [r7, #3]
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8017b1a:	bf00      	nop
 8017b1c:	4b1f      	ldr	r3, [pc, #124]	@ (8017b9c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x90>)
 8017b1e:	681b      	ldr	r3, [r3, #0]
 8017b20:	f003 0301 	and.w	r3, r3, #1
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	bf14      	ite	ne
 8017b28:	2301      	movne	r3, #1
 8017b2a:	2300      	moveq	r3, #0
 8017b2c:	b2db      	uxtb	r3, r3
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	d1f4      	bne.n	8017b1c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x10>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8017b32:	4b1a      	ldr	r3, [pc, #104]	@ (8017b9c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x90>)
 8017b34:	2223      	movs	r2, #35	@ 0x23
 8017b36:	609a      	str	r2, [r3, #8]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8017b38:	4b18      	ldr	r3, [pc, #96]	@ (8017b9c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x90>)
 8017b3a:	2201      	movs	r2, #1
 8017b3c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	041b      	lsls	r3, r3, #16
 8017b42:	4a16      	ldr	r2, [pc, #88]	@ (8017b9c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x90>)
 8017b44:	f043 0301 	orr.w	r3, r3, #1
 8017b48:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8017b4a:	4a14      	ldr	r2, [pc, #80]	@ (8017b9c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x90>)
 8017b4c:	68fb      	ldr	r3, [r7, #12]
 8017b4e:	63d3      	str	r3, [r2, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8017b50:	4a12      	ldr	r2, [pc, #72]	@ (8017b9c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x90>)
 8017b52:	68bb      	ldr	r3, [r7, #8]
 8017b54:	60d3      	str	r3, [r2, #12]

    if (alpha < 0xFF)
 8017b56:	78fb      	ldrb	r3, [r7, #3]
 8017b58:	2bff      	cmp	r3, #255	@ 0xff
 8017b5a:	d00f      	beq.n	8017b7c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x70>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8017b5c:	78fb      	ldrb	r3, [r7, #3]
 8017b5e:	061a      	lsls	r2, r3, #24
 8017b60:	490e      	ldr	r1, [pc, #56]	@ (8017b9c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x90>)
 8017b62:	4b0f      	ldr	r3, [pc, #60]	@ (8017ba0 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x94>)
 8017b64:	4313      	orrs	r3, r2
 8017b66:	61cb      	str	r3, [r1, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8017b68:	4b0c      	ldr	r3, [pc, #48]	@ (8017b9c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x90>)
 8017b6a:	2201      	movs	r2, #1
 8017b6c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8017b6e:	4a0b      	ldr	r2, [pc, #44]	@ (8017b9c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x90>)
 8017b70:	68fb      	ldr	r3, [r7, #12]
 8017b72:	6153      	str	r3, [r2, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8017b74:	4b09      	ldr	r3, [pc, #36]	@ (8017b9c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x90>)
 8017b76:	4a0a      	ldr	r2, [pc, #40]	@ (8017ba0 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x94>)
 8017b78:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));

        /* Start DMA2D : M2M Mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
    }
}
 8017b7a:	e008      	b.n	8017b8e <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x82>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8017b7c:	78fb      	ldrb	r3, [r7, #3]
 8017b7e:	061a      	lsls	r2, r3, #24
 8017b80:	4906      	ldr	r1, [pc, #24]	@ (8017b9c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x90>)
 8017b82:	4b07      	ldr	r3, [pc, #28]	@ (8017ba0 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x94>)
 8017b84:	4313      	orrs	r3, r2
 8017b86:	61cb      	str	r3, [r1, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 8017b88:	4b04      	ldr	r3, [pc, #16]	@ (8017b9c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x90>)
 8017b8a:	2201      	movs	r2, #1
 8017b8c:	601a      	str	r2, [r3, #0]
}
 8017b8e:	bf00      	nop
 8017b90:	3714      	adds	r7, #20
 8017b92:	46bd      	mov	sp, r7
 8017b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b98:	4770      	bx	lr
 8017b9a:	bf00      	nop
 8017b9c:	52001000 	.word	0x52001000
 8017ba0:	00020001 	.word	0x00020001

08017ba4 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>:

void lineFromARGB8888(uint8_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 8017ba4:	b480      	push	{r7}
 8017ba6:	b085      	sub	sp, #20
 8017ba8:	af00      	add	r7, sp, #0
 8017baa:	60f8      	str	r0, [r7, #12]
 8017bac:	60b9      	str	r1, [r7, #8]
 8017bae:	607a      	str	r2, [r7, #4]
 8017bb0:	70fb      	strb	r3, [r7, #3]
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8017bb2:	bf00      	nop
 8017bb4:	4b18      	ldr	r3, [pc, #96]	@ (8017c18 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x74>)
 8017bb6:	681b      	ldr	r3, [r3, #0]
 8017bb8:	f003 0301 	and.w	r3, r3, #1
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	bf14      	ite	ne
 8017bc0:	2301      	movne	r3, #1
 8017bc2:	2300      	moveq	r3, #0
 8017bc4:	b2db      	uxtb	r3, r3
 8017bc6:	2b00      	cmp	r3, #0
 8017bc8:	d1f4      	bne.n	8017bb4 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x10>
    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8017bca:	4b13      	ldr	r3, [pc, #76]	@ (8017c18 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x74>)
 8017bcc:	2223      	movs	r2, #35	@ 0x23
 8017bce:	609a      	str	r2, [r3, #8]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8017bd0:	4b11      	ldr	r3, [pc, #68]	@ (8017c18 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x74>)
 8017bd2:	2201      	movs	r2, #1
 8017bd4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	041b      	lsls	r3, r3, #16
 8017bda:	4a0f      	ldr	r2, [pc, #60]	@ (8017c18 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x74>)
 8017bdc:	f043 0301 	orr.w	r3, r3, #1
 8017be0:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8017be2:	4a0d      	ldr	r2, [pc, #52]	@ (8017c18 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x74>)
 8017be4:	68fb      	ldr	r3, [r7, #12]
 8017be6:	63d3      	str	r3, [r2, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8017be8:	4a0b      	ldr	r2, [pc, #44]	@ (8017c18 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x74>)
 8017bea:	68bb      	ldr	r3, [r7, #8]
 8017bec:	60d3      	str	r3, [r2, #12]

    /* Set DMA2D color mode and alpha mode */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8017bee:	78fb      	ldrb	r3, [r7, #3]
 8017bf0:	061b      	lsls	r3, r3, #24
 8017bf2:	4a09      	ldr	r2, [pc, #36]	@ (8017c18 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x74>)
 8017bf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8017bf8:	61d3      	str	r3, [r2, #28]

    /* Write DMA2D BGPFCCR register */
    WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8017bfa:	4b07      	ldr	r3, [pc, #28]	@ (8017c18 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x74>)
 8017bfc:	2201      	movs	r2, #1
 8017bfe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Configure DMA2D Stream source2 address */
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8017c00:	4a05      	ldr	r2, [pc, #20]	@ (8017c18 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x74>)
 8017c02:	68fb      	ldr	r3, [r7, #12]
 8017c04:	6153      	str	r3, [r2, #20]

    /* Set DMA2D mode */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8017c06:	4b04      	ldr	r3, [pc, #16]	@ (8017c18 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x74>)
 8017c08:	4a04      	ldr	r2, [pc, #16]	@ (8017c1c <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x78>)
 8017c0a:	601a      	str	r2, [r3, #0]
}
 8017c0c:	bf00      	nop
 8017c0e:	3714      	adds	r7, #20
 8017c10:	46bd      	mov	sp, r7
 8017c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c16:	4770      	bx	lr
 8017c18:	52001000 	.word	0x52001000
 8017c1c:	00020001 	.word	0x00020001

08017c20 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8017c20:	b580      	push	{r7, lr}
 8017c22:	b082      	sub	sp, #8
 8017c24:	af00      	add	r7, sp, #0
 8017c26:	6078      	str	r0, [r7, #4]
 8017c28:	4a05      	ldr	r2, [pc, #20]	@ (8017c40 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	601a      	str	r2, [r3, #0]
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	4618      	mov	r0, r3
 8017c32:	f7ff fb11 	bl	8017258 <_ZN8touchgfx9DMA_QueueD1Ev>
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	4618      	mov	r0, r3
 8017c3a:	3708      	adds	r7, #8
 8017c3c:	46bd      	mov	sp, r7
 8017c3e:	bd80      	pop	{r7, pc}
 8017c40:	0802ec5c 	.word	0x0802ec5c

08017c44 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8017c44:	b580      	push	{r7, lr}
 8017c46:	b082      	sub	sp, #8
 8017c48:	af00      	add	r7, sp, #0
 8017c4a:	6078      	str	r0, [r7, #4]
 8017c4c:	6878      	ldr	r0, [r7, #4]
 8017c4e:	f7ff ffe7 	bl	8017c20 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8017c52:	2114      	movs	r1, #20
 8017c54:	6878      	ldr	r0, [r7, #4]
 8017c56:	f013 ff00 	bl	802ba5a <_ZdlPvj>
 8017c5a:	687b      	ldr	r3, [r7, #4]
 8017c5c:	4618      	mov	r0, r3
 8017c5e:	3708      	adds	r7, #8
 8017c60:	46bd      	mov	sp, r7
 8017c62:	bd80      	pop	{r7, pc}

08017c64 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8017c64:	b480      	push	{r7}
 8017c66:	b083      	sub	sp, #12
 8017c68:	af00      	add	r7, sp, #0
 8017c6a:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8017c6c:	4a04      	ldr	r2, [pc, #16]	@ (8017c80 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	6013      	str	r3, [r2, #0]
    }
 8017c72:	bf00      	nop
 8017c74:	370c      	adds	r7, #12
 8017c76:	46bd      	mov	sp, r7
 8017c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c7c:	4770      	bx	lr
 8017c7e:	bf00      	nop
 8017c80:	24034290 	.word	0x24034290

08017c84 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8017c84:	b480      	push	{r7}
 8017c86:	b085      	sub	sp, #20
 8017c88:	af00      	add	r7, sp, #0
 8017c8a:	60f8      	str	r0, [r7, #12]
 8017c8c:	60b9      	str	r1, [r7, #8]
 8017c8e:	607a      	str	r2, [r7, #4]
 8017c90:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8017c92:	4a0b      	ldr	r2, [pc, #44]	@ (8017cc0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8017c94:	68fb      	ldr	r3, [r7, #12]
 8017c96:	601a      	str	r2, [r3, #0]
        : presenterStorage(pres),
 8017c98:	68fb      	ldr	r3, [r7, #12]
 8017c9a:	68ba      	ldr	r2, [r7, #8]
 8017c9c:	605a      	str	r2, [r3, #4]
          screenStorage(scr),
 8017c9e:	68fb      	ldr	r3, [r7, #12]
 8017ca0:	687a      	ldr	r2, [r7, #4]
 8017ca2:	609a      	str	r2, [r3, #8]
          transitionStorage(tra),
 8017ca4:	68fb      	ldr	r3, [r7, #12]
 8017ca6:	683a      	ldr	r2, [r7, #0]
 8017ca8:	60da      	str	r2, [r3, #12]
          frontendApplication(app)
 8017caa:	68fb      	ldr	r3, [r7, #12]
 8017cac:	69ba      	ldr	r2, [r7, #24]
 8017cae:	611a      	str	r2, [r3, #16]
    {
    }
 8017cb0:	68fb      	ldr	r3, [r7, #12]
 8017cb2:	4618      	mov	r0, r3
 8017cb4:	3714      	adds	r7, #20
 8017cb6:	46bd      	mov	sp, r7
 8017cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cbc:	4770      	bx	lr
 8017cbe:	bf00      	nop
 8017cc0:	0802e804 	.word	0x0802e804

08017cc4 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8017cc4:	b480      	push	{r7}
 8017cc6:	b083      	sub	sp, #12
 8017cc8:	af00      	add	r7, sp, #0
 8017cca:	6078      	str	r0, [r7, #4]
    {
 8017ccc:	4a04      	ldr	r2, [pc, #16]	@ (8017ce0 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	601a      	str	r2, [r3, #0]
    }
 8017cd2:	687b      	ldr	r3, [r7, #4]
 8017cd4:	4618      	mov	r0, r3
 8017cd6:	370c      	adds	r7, #12
 8017cd8:	46bd      	mov	sp, r7
 8017cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cde:	4770      	bx	lr
 8017ce0:	0802e804 	.word	0x0802e804

08017ce4 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8017ce4:	b580      	push	{r7, lr}
 8017ce6:	b082      	sub	sp, #8
 8017ce8:	af00      	add	r7, sp, #0
 8017cea:	6078      	str	r0, [r7, #4]
    }
 8017cec:	6878      	ldr	r0, [r7, #4]
 8017cee:	f7ff ffe9 	bl	8017cc4 <_ZN8touchgfx7MVPHeapD1Ev>
 8017cf2:	2114      	movs	r1, #20
 8017cf4:	6878      	ldr	r0, [r7, #4]
 8017cf6:	f013 feb0 	bl	802ba5a <_ZdlPvj>
 8017cfa:	687b      	ldr	r3, [r7, #4]
 8017cfc:	4618      	mov	r0, r3
 8017cfe:	3708      	adds	r7, #8
 8017d00:	46bd      	mov	sp, r7
 8017d02:	bd80      	pop	{r7, pc}

08017d04 <_ZN8touchgfx18VectorFontRendererD1Ev>:
 */
class VectorFontRenderer
{
public:
    /** Virtual destructor. */
    virtual ~VectorFontRenderer()
 8017d04:	b480      	push	{r7}
 8017d06:	b083      	sub	sp, #12
 8017d08:	af00      	add	r7, sp, #0
 8017d0a:	6078      	str	r0, [r7, #4]
    {
 8017d0c:	4a04      	ldr	r2, [pc, #16]	@ (8017d20 <_ZN8touchgfx18VectorFontRendererD1Ev+0x1c>)
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	601a      	str	r2, [r3, #0]
    }
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	4618      	mov	r0, r3
 8017d16:	370c      	adds	r7, #12
 8017d18:	46bd      	mov	sp, r7
 8017d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d1e:	4770      	bx	lr
 8017d20:	0802e7f0 	.word	0x0802e7f0

08017d24 <_ZN8touchgfx18VectorFontRendererD0Ev>:
    virtual ~VectorFontRenderer()
 8017d24:	b580      	push	{r7, lr}
 8017d26:	b082      	sub	sp, #8
 8017d28:	af00      	add	r7, sp, #0
 8017d2a:	6078      	str	r0, [r7, #4]
    }
 8017d2c:	6878      	ldr	r0, [r7, #4]
 8017d2e:	f7ff ffe9 	bl	8017d04 <_ZN8touchgfx18VectorFontRendererD1Ev>
 8017d32:	2104      	movs	r1, #4
 8017d34:	6878      	ldr	r0, [r7, #4]
 8017d36:	f013 fe90 	bl	802ba5a <_ZdlPvj>
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	4618      	mov	r0, r3
 8017d3e:	3708      	adds	r7, #8
 8017d40:	46bd      	mov	sp, r7
 8017d42:	bd80      	pop	{r7, pc}

08017d44 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0), vectorFontRenderer(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8017d44:	b480      	push	{r7}
 8017d46:	b083      	sub	sp, #12
 8017d48:	af00      	add	r7, sp, #0
 8017d4a:	6078      	str	r0, [r7, #4]
    {
 8017d4c:	4a04      	ldr	r2, [pc, #16]	@ (8017d60 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	601a      	str	r2, [r3, #0]
    }
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	4618      	mov	r0, r3
 8017d56:	370c      	adds	r7, #12
 8017d58:	46bd      	mov	sp, r7
 8017d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d5e:	4770      	bx	lr
 8017d60:	0802ef0c 	.word	0x0802ef0c

08017d64 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8017d64:	b580      	push	{r7, lr}
 8017d66:	b082      	sub	sp, #8
 8017d68:	af00      	add	r7, sp, #0
 8017d6a:	6078      	str	r0, [r7, #4]
    }
 8017d6c:	6878      	ldr	r0, [r7, #4]
 8017d6e:	f7ff ffe9 	bl	8017d44 <_ZN8touchgfx3LCDD1Ev>
 8017d72:	210c      	movs	r1, #12
 8017d74:	6878      	ldr	r0, [r7, #4]
 8017d76:	f013 fe70 	bl	802ba5a <_ZdlPvj>
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	4618      	mov	r0, r3
 8017d7e:	3708      	adds	r7, #8
 8017d80:	46bd      	mov	sp, r7
 8017d82:	bd80      	pop	{r7, pc}

08017d84 <_ZN8touchgfx3LCD21setVectorFontRendererEPNS_18VectorFontRendererE>:
    /**
     * Set the vector font renderer
     *
     * @param renderer  The renderer to be used by LCD when dealing with vector fonts.
     */
    void setVectorFontRenderer(VectorFontRenderer* renderer)
 8017d84:	b480      	push	{r7}
 8017d86:	b083      	sub	sp, #12
 8017d88:	af00      	add	r7, sp, #0
 8017d8a:	6078      	str	r0, [r7, #4]
 8017d8c:	6039      	str	r1, [r7, #0]
    {
        vectorFontRenderer = renderer;
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	683a      	ldr	r2, [r7, #0]
 8017d92:	609a      	str	r2, [r3, #8]
    }
 8017d94:	bf00      	nop
 8017d96:	370c      	adds	r7, #12
 8017d98:	46bd      	mov	sp, r7
 8017d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d9e:	4770      	bx	lr

08017da0 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8017da0:	b480      	push	{r7}
 8017da2:	b083      	sub	sp, #12
 8017da4:	af00      	add	r7, sp, #0
 8017da6:	6078      	str	r0, [r7, #4]
            : startX(0),
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	2200      	movs	r2, #0
 8017dac:	801a      	strh	r2, [r3, #0]
              startY(0),
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	2200      	movs	r2, #0
 8017db2:	805a      	strh	r2, [r3, #2]
              downX(0),
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	2200      	movs	r2, #0
 8017db8:	809a      	strh	r2, [r3, #4]
              downY(0),
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	2200      	movs	r2, #0
 8017dbe:	80da      	strh	r2, [r3, #6]
              tickCount(0),
 8017dc0:	687b      	ldr	r3, [r7, #4]
 8017dc2:	2200      	movs	r2, #0
 8017dc4:	811a      	strh	r2, [r3, #8]
              velocityX(0),
 8017dc6:	687b      	ldr	r3, [r7, #4]
 8017dc8:	2200      	movs	r2, #0
 8017dca:	815a      	strh	r2, [r3, #10]
              velocityY(0),
 8017dcc:	687b      	ldr	r3, [r7, #4]
 8017dce:	2200      	movs	r2, #0
 8017dd0:	819a      	strh	r2, [r3, #12]
              inProgress(false)
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	2200      	movs	r2, #0
 8017dd6:	739a      	strb	r2, [r3, #14]
        {
        }
 8017dd8:	687b      	ldr	r3, [r7, #4]
 8017dda:	4618      	mov	r0, r3
 8017ddc:	370c      	adds	r7, #12
 8017dde:	46bd      	mov	sp, r7
 8017de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017de4:	4770      	bx	lr

08017de6 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8017de6:	b580      	push	{r7, lr}
 8017de8:	b082      	sub	sp, #8
 8017dea:	af00      	add	r7, sp, #0
 8017dec:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	4618      	mov	r0, r3
 8017df2:	f7ff ffd5 	bl	8017da0 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8017df6:	687b      	ldr	r3, [r7, #4]
 8017df8:	2200      	movs	r2, #0
 8017dfa:	611a      	str	r2, [r3, #16]
 8017dfc:	687b      	ldr	r3, [r7, #4]
 8017dfe:	2200      	movs	r2, #0
 8017e00:	829a      	strh	r2, [r3, #20]
    {
    }
 8017e02:	687b      	ldr	r3, [r7, #4]
 8017e04:	4618      	mov	r0, r3
 8017e06:	3708      	adds	r7, #8
 8017e08:	46bd      	mov	sp, r7
 8017e0a:	bd80      	pop	{r7, pc}

08017e0c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8017e0c:	b580      	push	{r7, lr}
 8017e0e:	b084      	sub	sp, #16
 8017e10:	af00      	add	r7, sp, #0
 8017e12:	60f8      	str	r0, [r7, #12]
 8017e14:	60b9      	str	r1, [r7, #8]
 8017e16:	607a      	str	r2, [r7, #4]
 8017e18:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8017e1a:	4a55      	ldr	r2, [pc, #340]	@ (8017f70 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8017e1c:	68fb      	ldr	r3, [r7, #12]
 8017e1e:	601a      	str	r2, [r3, #0]
        : dma(dmaInterface),
 8017e20:	68fb      	ldr	r3, [r7, #12]
 8017e22:	68ba      	ldr	r2, [r7, #8]
 8017e24:	605a      	str	r2, [r3, #4]
          lcdRef(display),
 8017e26:	68fb      	ldr	r3, [r7, #12]
 8017e28:	687a      	ldr	r2, [r7, #4]
 8017e2a:	609a      	str	r2, [r3, #8]
          touchController(touchCtrl),
 8017e2c:	68fb      	ldr	r3, [r7, #12]
 8017e2e:	683a      	ldr	r2, [r7, #0]
 8017e30:	60da      	str	r2, [r3, #12]
          mcuInstrumentation(0),
 8017e32:	68fb      	ldr	r3, [r7, #12]
 8017e34:	2200      	movs	r2, #0
 8017e36:	611a      	str	r2, [r3, #16]
          buttonController(0),
 8017e38:	68fb      	ldr	r3, [r7, #12]
 8017e3a:	2200      	movs	r2, #0
 8017e3c:	615a      	str	r2, [r3, #20]
          frameBufferAllocator(0),
 8017e3e:	68fb      	ldr	r3, [r7, #12]
 8017e40:	2200      	movs	r2, #0
 8017e42:	619a      	str	r2, [r3, #24]
          gestures(),
 8017e44:	68fb      	ldr	r3, [r7, #12]
 8017e46:	331c      	adds	r3, #28
 8017e48:	4618      	mov	r0, r3
 8017e4a:	f7ff ffcc 	bl	8017de6 <_ZN8touchgfx8GesturesC1Ev>
          nativeDisplayOrientation(ORIENTATION_LANDSCAPE),
 8017e4e:	68fb      	ldr	r3, [r7, #12]
 8017e50:	2200      	movs	r2, #0
 8017e52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          taskDelayFunc(0),
 8017e56:	68fb      	ldr	r3, [r7, #12]
 8017e58:	2200      	movs	r2, #0
 8017e5a:	639a      	str	r2, [r3, #56]	@ 0x38
          frameBuffer0(0),
 8017e5c:	68fb      	ldr	r3, [r7, #12]
 8017e5e:	2200      	movs	r2, #0
 8017e60:	63da      	str	r2, [r3, #60]	@ 0x3c
          frameBuffer1(0),
 8017e62:	68fb      	ldr	r3, [r7, #12]
 8017e64:	2200      	movs	r2, #0
 8017e66:	641a      	str	r2, [r3, #64]	@ 0x40
          frameBuffer2(0),
 8017e68:	68fb      	ldr	r3, [r7, #12]
 8017e6a:	2200      	movs	r2, #0
 8017e6c:	645a      	str	r2, [r3, #68]	@ 0x44
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8017e6e:	68fb      	ldr	r3, [r7, #12]
 8017e70:	2200      	movs	r2, #0
 8017e72:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
          fingerSize(1),
 8017e76:	68fb      	ldr	r3, [r7, #12]
 8017e78:	2201      	movs	r2, #1
 8017e7a:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
          lockDMAToPorch(false),
 8017e7e:	68fb      	ldr	r3, [r7, #12]
 8017e80:	2200      	movs	r2, #0
 8017e82:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
          frameBufferUpdatedThisFrame(false),
 8017e86:	68fb      	ldr	r3, [r7, #12]
 8017e88:	2200      	movs	r2, #0
 8017e8a:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
          auxiliaryLCD(0),
 8017e8e:	68fb      	ldr	r3, [r7, #12]
 8017e90:	2200      	movs	r2, #0
 8017e92:	64da      	str	r2, [r3, #76]	@ 0x4c
          partialFrameBufferRect(),
 8017e94:	68fb      	ldr	r3, [r7, #12]
 8017e96:	3350      	adds	r3, #80	@ 0x50
 8017e98:	4618      	mov	r0, r3
 8017e9a:	f7fd f906 	bl	80150aa <_ZN8touchgfx4RectC1Ev>
          useAuxiliaryLCD(false),
 8017e9e:	68fb      	ldr	r3, [r7, #12]
 8017ea0:	2200      	movs	r2, #0
 8017ea2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
          listener(0),
 8017ea6:	68fb      	ldr	r3, [r7, #12]
 8017ea8:	2200      	movs	r2, #0
 8017eaa:	65da      	str	r2, [r3, #92]	@ 0x5c
          lastX(0),
 8017eac:	68fb      	ldr	r3, [r7, #12]
 8017eae:	2200      	movs	r2, #0
 8017eb0:	661a      	str	r2, [r3, #96]	@ 0x60
          lastY(0),
 8017eb2:	68fb      	ldr	r3, [r7, #12]
 8017eb4:	2200      	movs	r2, #0
 8017eb6:	665a      	str	r2, [r3, #100]	@ 0x64
          touchSampleRate(1),
 8017eb8:	68fb      	ldr	r3, [r7, #12]
 8017eba:	2201      	movs	r2, #1
 8017ebc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
          mcuLoadPct(0),
 8017ec0:	68fb      	ldr	r3, [r7, #12]
 8017ec2:	2200      	movs	r2, #0
 8017ec4:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
          vSyncCnt(0),
 8017ec8:	68fb      	ldr	r3, [r7, #12]
 8017eca:	2200      	movs	r2, #0
 8017ecc:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
          vSyncForFrame(1),
 8017ed0:	68fb      	ldr	r3, [r7, #12]
 8017ed2:	2201      	movs	r2, #1
 8017ed4:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
          vSyncCompensationEnabled(false),
 8017ed8:	68fb      	ldr	r3, [r7, #12]
 8017eda:	2200      	movs	r2, #0
 8017edc:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
          clientDirty(false),
 8017ee0:	68fb      	ldr	r3, [r7, #12]
 8017ee2:	2200      	movs	r2, #0
 8017ee4:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
          swapRequested(false),
 8017ee8:	68fb      	ldr	r3, [r7, #12]
 8017eea:	2200      	movs	r2, #0
 8017eec:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
          lastTouched(false),
 8017ef0:	68fb      	ldr	r3, [r7, #12]
 8017ef2:	2200      	movs	r2, #0
 8017ef4:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
          updateMCULoad(0),
 8017ef8:	68fb      	ldr	r3, [r7, #12]
 8017efa:	2200      	movs	r2, #0
 8017efc:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
          cc_begin(0),
 8017f00:	68fb      	ldr	r3, [r7, #12]
 8017f02:	2200      	movs	r2, #0
 8017f04:	675a      	str	r2, [r3, #116]	@ 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8017f06:	68fb      	ldr	r3, [r7, #12]
 8017f08:	2200      	movs	r2, #0
 8017f0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
          displayOrientationChangeRequested(false),
 8017f0e:	68fb      	ldr	r3, [r7, #12]
 8017f10:	2200      	movs	r2, #0
 8017f12:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
          useDMAAcceleration(true),
 8017f16:	68fb      	ldr	r3, [r7, #12]
 8017f18:	2201      	movs	r2, #1
 8017f1a:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
          lastRenderMethod(HARDWARE)
 8017f1e:	68fb      	ldr	r3, [r7, #12]
 8017f20:	2201      	movs	r2, #1
 8017f22:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
        instance = this;
 8017f26:	4a13      	ldr	r2, [pc, #76]	@ (8017f74 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8017f28:	68fb      	ldr	r3, [r7, #12]
 8017f2a:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8017f2c:	4a12      	ldr	r2, [pc, #72]	@ (8017f78 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8017f2e:	8b3b      	ldrh	r3, [r7, #24]
 8017f30:	8013      	strh	r3, [r2, #0]
 8017f32:	4b11      	ldr	r3, [pc, #68]	@ (8017f78 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8017f34:	881a      	ldrh	r2, [r3, #0]
 8017f36:	4b11      	ldr	r3, [pc, #68]	@ (8017f7c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8017f38:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8017f3a:	4a11      	ldr	r2, [pc, #68]	@ (8017f80 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8017f3c:	8bbb      	ldrh	r3, [r7, #28]
 8017f3e:	8013      	strh	r3, [r2, #0]
 8017f40:	4b0f      	ldr	r3, [pc, #60]	@ (8017f80 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8017f42:	881a      	ldrh	r2, [r3, #0]
 8017f44:	4b0f      	ldr	r3, [pc, #60]	@ (8017f84 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8017f46:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8017f48:	4b0f      	ldr	r3, [pc, #60]	@ (8017f88 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8017f4a:	2200      	movs	r2, #0
 8017f4c:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8017f4e:	8b3a      	ldrh	r2, [r7, #24]
 8017f50:	8bbb      	ldrh	r3, [r7, #28]
 8017f52:	429a      	cmp	r2, r3
 8017f54:	bf34      	ite	cc
 8017f56:	2301      	movcc	r3, #1
 8017f58:	2300      	movcs	r3, #0
 8017f5a:	b2db      	uxtb	r3, r3
 8017f5c:	461a      	mov	r2, r3
 8017f5e:	68fb      	ldr	r3, [r7, #12]
 8017f60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
 8017f64:	68fb      	ldr	r3, [r7, #12]
 8017f66:	4618      	mov	r0, r3
 8017f68:	3710      	adds	r7, #16
 8017f6a:	46bd      	mov	sp, r7
 8017f6c:	bd80      	pop	{r7, pc}
 8017f6e:	bf00      	nop
 8017f70:	0802eb34 	.word	0x0802eb34
 8017f74:	2403422c 	.word	0x2403422c
 8017f78:	24034220 	.word	0x24034220
 8017f7c:	24034226 	.word	0x24034226
 8017f80:	24034222 	.word	0x24034222
 8017f84:	24034228 	.word	0x24034228
 8017f88:	24034224 	.word	0x24034224

08017f8c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8017f8c:	b580      	push	{r7, lr}
 8017f8e:	b082      	sub	sp, #8
 8017f90:	af00      	add	r7, sp, #0
 8017f92:	6078      	str	r0, [r7, #4]
 8017f94:	6039      	str	r1, [r7, #0]
    {
        app.gotoscreenScreenNoTransition();
 8017f96:	683b      	ldr	r3, [r7, #0]
 8017f98:	4618      	mov	r0, r3
 8017f9a:	f7fc fc57 	bl	801484c <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 8017f9e:	bf00      	nop
 8017fa0:	3708      	adds	r7, #8
 8017fa2:	46bd      	mov	sp, r7
 8017fa4:	bd80      	pop	{r7, pc}
	...

08017fa8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8017fa8:	b580      	push	{r7, lr}
 8017faa:	b086      	sub	sp, #24
 8017fac:	af02      	add	r7, sp, #8
 8017fae:	60f8      	str	r0, [r7, #12]
 8017fb0:	60b9      	str	r1, [r7, #8]
 8017fb2:	607a      	str	r2, [r7, #4]
 8017fb4:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8017fb6:	68f8      	ldr	r0, [r7, #12]
 8017fb8:	69bb      	ldr	r3, [r7, #24]
 8017fba:	9300      	str	r3, [sp, #0]
 8017fbc:	683b      	ldr	r3, [r7, #0]
 8017fbe:	687a      	ldr	r2, [r7, #4]
 8017fc0:	68b9      	ldr	r1, [r7, #8]
 8017fc2:	f7ff fe5f 	bl	8017c84 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8017fc6:	4a04      	ldr	r2, [pc, #16]	@ (8017fd8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8017fc8:	68fb      	ldr	r3, [r7, #12]
 8017fca:	601a      	str	r2, [r3, #0]
    {

    }
 8017fcc:	68fb      	ldr	r3, [r7, #12]
 8017fce:	4618      	mov	r0, r3
 8017fd0:	3710      	adds	r7, #16
 8017fd2:	46bd      	mov	sp, r7
 8017fd4:	bd80      	pop	{r7, pc}
 8017fd6:	bf00      	nop
 8017fd8:	0802e7dc 	.word	0x0802e7dc

08017fdc <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8017fdc:	b580      	push	{r7, lr}
 8017fde:	af00      	add	r7, sp, #0
 8017fe0:	4801      	ldr	r0, [pc, #4]	@ (8017fe8 <__tcf_0+0xc>)
 8017fe2:	f000 f96d 	bl	80182c0 <_ZN12FrontendHeapD1Ev>
 8017fe6:	bd80      	pop	{r7, pc}
 8017fe8:	24032fd0 	.word	0x24032fd0

08017fec <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8017fec:	b580      	push	{r7, lr}
 8017fee:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8017ff0:	4b11      	ldr	r3, [pc, #68]	@ (8018038 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8017ff2:	681b      	ldr	r3, [r3, #0]
 8017ff4:	f3bf 8f5b 	dmb	ish
 8017ff8:	f003 0301 	and.w	r3, r3, #1
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	bf0c      	ite	eq
 8018000:	2301      	moveq	r3, #1
 8018002:	2300      	movne	r3, #0
 8018004:	b2db      	uxtb	r3, r3
 8018006:	2b00      	cmp	r3, #0
 8018008:	d013      	beq.n	8018032 <_ZN12FrontendHeap11getInstanceEv+0x46>
 801800a:	480b      	ldr	r0, [pc, #44]	@ (8018038 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 801800c:	f013 fd27 	bl	802ba5e <__cxa_guard_acquire>
 8018010:	4603      	mov	r3, r0
 8018012:	2b00      	cmp	r3, #0
 8018014:	bf14      	ite	ne
 8018016:	2301      	movne	r3, #1
 8018018:	2300      	moveq	r3, #0
 801801a:	b2db      	uxtb	r3, r3
 801801c:	2b00      	cmp	r3, #0
 801801e:	d008      	beq.n	8018032 <_ZN12FrontendHeap11getInstanceEv+0x46>
 8018020:	4806      	ldr	r0, [pc, #24]	@ (801803c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8018022:	f000 f867 	bl	80180f4 <_ZN12FrontendHeapC1Ev>
 8018026:	4806      	ldr	r0, [pc, #24]	@ (8018040 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8018028:	f014 f8ac 	bl	802c184 <atexit>
 801802c:	4802      	ldr	r0, [pc, #8]	@ (8018038 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 801802e:	f013 fd22 	bl	802ba76 <__cxa_guard_release>
        return instance;
 8018032:	4b02      	ldr	r3, [pc, #8]	@ (801803c <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 8018034:	4618      	mov	r0, r3
 8018036:	bd80      	pop	{r7, pc}
 8018038:	240332ac 	.word	0x240332ac
 801803c:	24032fd0 	.word	0x24032fd0
 8018040:	08017fdd 	.word	0x08017fdd

08018044 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8018044:	b580      	push	{r7, lr}
 8018046:	b082      	sub	sp, #8
 8018048:	af00      	add	r7, sp, #0
 801804a:	6078      	str	r0, [r7, #4]
 801804c:	4a05      	ldr	r2, [pc, #20]	@ (8018064 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	601a      	str	r2, [r3, #0]
 8018052:	687b      	ldr	r3, [r7, #4]
 8018054:	4618      	mov	r0, r3
 8018056:	f7ff fe35 	bl	8017cc4 <_ZN8touchgfx7MVPHeapD1Ev>
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	4618      	mov	r0, r3
 801805e:	3708      	adds	r7, #8
 8018060:	46bd      	mov	sp, r7
 8018062:	bd80      	pop	{r7, pc}
 8018064:	0802e7dc 	.word	0x0802e7dc

08018068 <_ZN16FrontendHeapBaseD0Ev>:
 8018068:	b580      	push	{r7, lr}
 801806a:	b082      	sub	sp, #8
 801806c:	af00      	add	r7, sp, #0
 801806e:	6078      	str	r0, [r7, #4]
 8018070:	6878      	ldr	r0, [r7, #4]
 8018072:	f7ff ffe7 	bl	8018044 <_ZN16FrontendHeapBaseD1Ev>
 8018076:	2114      	movs	r1, #20
 8018078:	6878      	ldr	r0, [r7, #4]
 801807a:	f013 fcee 	bl	802ba5a <_ZdlPvj>
 801807e:	687b      	ldr	r3, [r7, #4]
 8018080:	4618      	mov	r0, r3
 8018082:	3708      	adds	r7, #8
 8018084:	46bd      	mov	sp, r7
 8018086:	bd80      	pop	{r7, pc}

08018088 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8018088:	b580      	push	{r7, lr}
 801808a:	b082      	sub	sp, #8
 801808c:	af00      	add	r7, sp, #0
 801808e:	6078      	str	r0, [r7, #4]
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	4618      	mov	r0, r3
 8018094:	f001 f9de 	bl	8019454 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8018098:	4a03      	ldr	r2, [pc, #12]	@ (80180a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	601a      	str	r2, [r3, #0]
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	4618      	mov	r0, r3
 80180a2:	3708      	adds	r7, #8
 80180a4:	46bd      	mov	sp, r7
 80180a6:	bd80      	pop	{r7, pc}
 80180a8:	0802e7a8 	.word	0x0802e7a8

080180ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80180ac:	b580      	push	{r7, lr}
 80180ae:	b082      	sub	sp, #8
 80180b0:	af00      	add	r7, sp, #0
 80180b2:	6078      	str	r0, [r7, #4]
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	4618      	mov	r0, r3
 80180b8:	f001 f9cc 	bl	8019454 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80180bc:	4a03      	ldr	r2, [pc, #12]	@ (80180cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	601a      	str	r2, [r3, #0]
 80180c2:	687b      	ldr	r3, [r7, #4]
 80180c4:	4618      	mov	r0, r3
 80180c6:	3708      	adds	r7, #8
 80180c8:	46bd      	mov	sp, r7
 80180ca:	bd80      	pop	{r7, pc}
 80180cc:	0802e774 	.word	0x0802e774

080180d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80180d0:	b580      	push	{r7, lr}
 80180d2:	b082      	sub	sp, #8
 80180d4:	af00      	add	r7, sp, #0
 80180d6:	6078      	str	r0, [r7, #4]
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	4618      	mov	r0, r3
 80180dc:	f001 f9ba 	bl	8019454 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80180e0:	4a03      	ldr	r2, [pc, #12]	@ (80180f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	601a      	str	r2, [r3, #0]
 80180e6:	687b      	ldr	r3, [r7, #4]
 80180e8:	4618      	mov	r0, r3
 80180ea:	3708      	adds	r7, #8
 80180ec:	46bd      	mov	sp, r7
 80180ee:	bd80      	pop	{r7, pc}
 80180f0:	0802e740 	.word	0x0802e740

080180f4 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80180f4:	b590      	push	{r4, r7, lr}
 80180f6:	b085      	sub	sp, #20
 80180f8:	af02      	add	r7, sp, #8
 80180fa:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 80180fc:	6878      	ldr	r0, [r7, #4]
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	f103 0114 	add.w	r1, r3, #20
 8018104:	687b      	ldr	r3, [r7, #4]
 8018106:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	f503 74b4 	add.w	r4, r3, #360	@ 0x168
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
                     app(model, *this)
 8018116:	9300      	str	r3, [sp, #0]
 8018118:	4623      	mov	r3, r4
 801811a:	f7ff ff45 	bl	8017fa8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 801811e:	4a18      	ldr	r2, [pc, #96]	@ (8018180 <_ZN12FrontendHeapC1Ev+0x8c>)
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	601a      	str	r2, [r3, #0]
 8018124:	687b      	ldr	r3, [r7, #4]
 8018126:	3314      	adds	r3, #20
 8018128:	4618      	mov	r0, r3
 801812a:	f7ff ffad 	bl	8018088 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	332c      	adds	r3, #44	@ 0x2c
 8018132:	4618      	mov	r0, r3
 8018134:	f7ff ffba 	bl	80180ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 801813e:	4618      	mov	r0, r3
 8018140:	f7ff ffc6 	bl	80180d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 801814a:	4618      	mov	r0, r3
 801814c:	f7fe f9f2 	bl	8016534 <_ZN5ModelC1Ev>
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	f503 70c0 	add.w	r0, r3, #384	@ 0x180
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 801815c:	687a      	ldr	r2, [r7, #4]
 801815e:	4619      	mov	r1, r3
 8018160:	f7fe f9d2 	bl	8016508 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8018164:	687a      	ldr	r2, [r7, #4]
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 801816c:	4619      	mov	r1, r3
 801816e:	4610      	mov	r0, r2
 8018170:	f7ff ff0c 	bl	8017f8c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8018174:	687b      	ldr	r3, [r7, #4]
 8018176:	4618      	mov	r0, r3
 8018178:	370c      	adds	r7, #12
 801817a:	46bd      	mov	sp, r7
 801817c:	bd90      	pop	{r4, r7, pc}
 801817e:	bf00      	nop
 8018180:	0802e72c 	.word	0x0802e72c

08018184 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8018184:	b580      	push	{r7, lr}
 8018186:	b086      	sub	sp, #24
 8018188:	af02      	add	r7, sp, #8
 801818a:	60f8      	str	r0, [r7, #12]
 801818c:	60b9      	str	r1, [r7, #8]
 801818e:	607a      	str	r2, [r7, #4]
 8018190:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8018192:	68f8      	ldr	r0, [r7, #12]
 8018194:	8bbb      	ldrh	r3, [r7, #28]
 8018196:	9301      	str	r3, [sp, #4]
 8018198:	8b3b      	ldrh	r3, [r7, #24]
 801819a:	9300      	str	r3, [sp, #0]
 801819c:	683b      	ldr	r3, [r7, #0]
 801819e:	687a      	ldr	r2, [r7, #4]
 80181a0:	68b9      	ldr	r1, [r7, #8]
 80181a2:	f7ff fe33 	bl	8017e0c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80181a6:	4a04      	ldr	r2, [pc, #16]	@ (80181b8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80181a8:	68fb      	ldr	r3, [r7, #12]
 80181aa:	601a      	str	r2, [r3, #0]
    }
 80181ac:	68fb      	ldr	r3, [r7, #12]
 80181ae:	4618      	mov	r0, r3
 80181b0:	3710      	adds	r7, #16
 80181b2:	46bd      	mov	sp, r7
 80181b4:	bd80      	pop	{r7, pc}
 80181b6:	bf00      	nop
 80181b8:	0802e94c 	.word	0x0802e94c

080181bc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80181bc:	b580      	push	{r7, lr}
 80181be:	b086      	sub	sp, #24
 80181c0:	af02      	add	r7, sp, #8
 80181c2:	60f8      	str	r0, [r7, #12]
 80181c4:	60b9      	str	r1, [r7, #8]
 80181c6:	607a      	str	r2, [r7, #4]
 80181c8:	603b      	str	r3, [r7, #0]
 80181ca:	68f8      	ldr	r0, [r7, #12]
 80181cc:	8bbb      	ldrh	r3, [r7, #28]
 80181ce:	9301      	str	r3, [sp, #4]
 80181d0:	8b3b      	ldrh	r3, [r7, #24]
 80181d2:	9300      	str	r3, [sp, #0]
 80181d4:	683b      	ldr	r3, [r7, #0]
 80181d6:	687a      	ldr	r2, [r7, #4]
 80181d8:	68b9      	ldr	r1, [r7, #8]
 80181da:	f7ff ffd3 	bl	8018184 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80181de:	4a04      	ldr	r2, [pc, #16]	@ (80181f0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80181e0:	68fb      	ldr	r3, [r7, #12]
 80181e2:	601a      	str	r2, [r3, #0]
    }
 80181e4:	68fb      	ldr	r3, [r7, #12]
 80181e6:	4618      	mov	r0, r3
 80181e8:	3710      	adds	r7, #16
 80181ea:	46bd      	mov	sp, r7
 80181ec:	bd80      	pop	{r7, pc}
 80181ee:	bf00      	nop
 80181f0:	0802e5e0 	.word	0x0802e5e0

080181f4 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 80181f4:	b480      	push	{r7}
 80181f6:	b083      	sub	sp, #12
 80181f8:	af00      	add	r7, sp, #0
 80181fa:	6078      	str	r0, [r7, #4]
 80181fc:	4a04      	ldr	r2, [pc, #16]	@ (8018210 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 80181fe:	687b      	ldr	r3, [r7, #4]
 8018200:	601a      	str	r2, [r3, #0]
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	4618      	mov	r0, r3
 8018206:	370c      	adds	r7, #12
 8018208:	46bd      	mov	sp, r7
 801820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801820e:	4770      	bx	lr
 8018210:	0802e5c8 	.word	0x0802e5c8

08018214 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8018214:	b580      	push	{r7, lr}
 8018216:	b082      	sub	sp, #8
 8018218:	af00      	add	r7, sp, #0
 801821a:	6078      	str	r0, [r7, #4]
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	4618      	mov	r0, r3
 8018220:	f7ff ffe8 	bl	80181f4 <_ZN8touchgfx15TouchControllerC1Ev>
 8018224:	4a03      	ldr	r2, [pc, #12]	@ (8018234 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	601a      	str	r2, [r3, #0]
 801822a:	687b      	ldr	r3, [r7, #4]
 801822c:	4618      	mov	r0, r3
 801822e:	3708      	adds	r7, #8
 8018230:	46bd      	mov	sp, r7
 8018232:	bd80      	pop	{r7, pc}
 8018234:	0802e5b0 	.word	0x0802e5b0

08018238 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8018238:	b590      	push	{r4, r7, lr}
 801823a:	b085      	sub	sp, #20
 801823c:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 801823e:	f7fd ff65 	bl	801610c <_ZN14BitmapDatabase11getInstanceEv>
 8018242:	4604      	mov	r4, r0
 8018244:	f7fd ff6c 	bl	8016120 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8018248:	4603      	mov	r3, r0
 801824a:	4619      	mov	r1, r3
 801824c:	2300      	movs	r3, #0
 801824e:	9300      	str	r3, [sp, #0]
 8018250:	2300      	movs	r3, #0
 8018252:	2200      	movs	r2, #0
 8018254:	4620      	mov	r0, r4
 8018256:	f008 fe33 	bl	8020ec0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 801825a:	480b      	ldr	r0, [pc, #44]	@ (8018288 <touchgfx_init+0x50>)
 801825c:	f7ff fd02 	bl	8017c64 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8018260:	2000      	movs	r0, #0
 8018262:	f7fe f889 	bl	8016378 <_ZN8touchgfx5Texts11setLanguageEt>

    display.setVectorFontRenderer(&vectorFontRenderer);
 8018266:	4909      	ldr	r1, [pc, #36]	@ (801828c <touchgfx_init+0x54>)
 8018268:	4809      	ldr	r0, [pc, #36]	@ (8018290 <touchgfx_init+0x58>)
 801826a:	f7ff fd8b 	bl	8017d84 <_ZN8touchgfx3LCD21setVectorFontRendererEPNS_18VectorFontRendererE>

    FontManager::setFontProvider(&fontProvider);
 801826e:	4809      	ldr	r0, [pc, #36]	@ (8018294 <touchgfx_init+0x5c>)
 8018270:	f008 fcd2 	bl	8020c18 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8018274:	f7ff feba 	bl	8017fec <_ZN12FrontendHeap11getInstanceEv>
 8018278:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 801827a:	4807      	ldr	r0, [pc, #28]	@ (8018298 <touchgfx_init+0x60>)
 801827c:	f7fe fe1c 	bl	8016eb8 <_ZN11TouchGFXHAL10initializeEv>
}
 8018280:	bf00      	nop
 8018282:	370c      	adds	r7, #12
 8018284:	46bd      	mov	sp, r7
 8018286:	bd90      	pop	{r4, r7, pc}
 8018288:	240340dc 	.word	0x240340dc
 801828c:	240340c0 	.word	0x240340c0
 8018290:	24034054 	.word	0x24034054
 8018294:	2400004c 	.word	0x2400004c
 8018298:	240340e0 	.word	0x240340e0

0801829c <touchgfx_components_init>:

void touchgfx_components_init()
{
 801829c:	b480      	push	{r7}
 801829e:	af00      	add	r7, sp, #0
}
 80182a0:	bf00      	nop
 80182a2:	46bd      	mov	sp, r7
 80182a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182a8:	4770      	bx	lr
	...

080182ac <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 80182ac:	b580      	push	{r7, lr}
 80182ae:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80182b0:	4802      	ldr	r0, [pc, #8]	@ (80182bc <touchgfx_taskEntry+0x10>)
 80182b2:	f7fe fe17 	bl	8016ee4 <_ZN11TouchGFXHAL9taskEntryEv>
}
 80182b6:	bf00      	nop
 80182b8:	bd80      	pop	{r7, pc}
 80182ba:	bf00      	nop
 80182bc:	240340e0 	.word	0x240340e0

080182c0 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 80182c0:	b580      	push	{r7, lr}
 80182c2:	b082      	sub	sp, #8
 80182c4:	af00      	add	r7, sp, #0
 80182c6:	6078      	str	r0, [r7, #4]
 80182c8:	4a10      	ldr	r2, [pc, #64]	@ (801830c <_ZN12FrontendHeapD1Ev+0x4c>)
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	601a      	str	r2, [r3, #0]
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80182d4:	4618      	mov	r0, r3
 80182d6:	f7fe f8e1 	bl	801649c <_ZN19FrontendApplicationD1Ev>
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80182e0:	4618      	mov	r0, r3
 80182e2:	f000 f827 	bl	8018334 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	332c      	adds	r3, #44	@ 0x2c
 80182ea:	4618      	mov	r0, r3
 80182ec:	f000 f844 	bl	8018378 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	3314      	adds	r3, #20
 80182f4:	4618      	mov	r0, r3
 80182f6:	f000 f863 	bl	80183c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80182fa:	687b      	ldr	r3, [r7, #4]
 80182fc:	4618      	mov	r0, r3
 80182fe:	f7ff fea1 	bl	8018044 <_ZN16FrontendHeapBaseD1Ev>
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	4618      	mov	r0, r3
 8018306:	3708      	adds	r7, #8
 8018308:	46bd      	mov	sp, r7
 801830a:	bd80      	pop	{r7, pc}
 801830c:	0802e72c 	.word	0x0802e72c

08018310 <_ZN12FrontendHeapD0Ev>:
 8018310:	b580      	push	{r7, lr}
 8018312:	b082      	sub	sp, #8
 8018314:	af00      	add	r7, sp, #0
 8018316:	6078      	str	r0, [r7, #4]
 8018318:	6878      	ldr	r0, [r7, #4]
 801831a:	f7ff ffd1 	bl	80182c0 <_ZN12FrontendHeapD1Ev>
 801831e:	f44f 7137 	mov.w	r1, #732	@ 0x2dc
 8018322:	6878      	ldr	r0, [r7, #4]
 8018324:	f013 fb99 	bl	802ba5a <_ZdlPvj>
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	4618      	mov	r0, r3
 801832c:	3708      	adds	r7, #8
 801832e:	46bd      	mov	sp, r7
 8018330:	bd80      	pop	{r7, pc}
	...

08018334 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8018334:	b580      	push	{r7, lr}
 8018336:	b082      	sub	sp, #8
 8018338:	af00      	add	r7, sp, #0
 801833a:	6078      	str	r0, [r7, #4]
 801833c:	4a05      	ldr	r2, [pc, #20]	@ (8018354 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	601a      	str	r2, [r3, #0]
 8018342:	687b      	ldr	r3, [r7, #4]
 8018344:	4618      	mov	r0, r3
 8018346:	f001 f884 	bl	8019452 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801834a:	687b      	ldr	r3, [r7, #4]
 801834c:	4618      	mov	r0, r3
 801834e:	3708      	adds	r7, #8
 8018350:	46bd      	mov	sp, r7
 8018352:	bd80      	pop	{r7, pc}
 8018354:	0802e740 	.word	0x0802e740

08018358 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8018358:	b580      	push	{r7, lr}
 801835a:	b082      	sub	sp, #8
 801835c:	af00      	add	r7, sp, #0
 801835e:	6078      	str	r0, [r7, #4]
 8018360:	6878      	ldr	r0, [r7, #4]
 8018362:	f7ff ffe7 	bl	8018334 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8018366:	2114      	movs	r1, #20
 8018368:	6878      	ldr	r0, [r7, #4]
 801836a:	f013 fb76 	bl	802ba5a <_ZdlPvj>
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	4618      	mov	r0, r3
 8018372:	3708      	adds	r7, #8
 8018374:	46bd      	mov	sp, r7
 8018376:	bd80      	pop	{r7, pc}

08018378 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8018378:	b580      	push	{r7, lr}
 801837a:	b082      	sub	sp, #8
 801837c:	af00      	add	r7, sp, #0
 801837e:	6078      	str	r0, [r7, #4]
 8018380:	4a05      	ldr	r2, [pc, #20]	@ (8018398 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8018382:	687b      	ldr	r3, [r7, #4]
 8018384:	601a      	str	r2, [r3, #0]
 8018386:	687b      	ldr	r3, [r7, #4]
 8018388:	4618      	mov	r0, r3
 801838a:	f001 f862 	bl	8019452 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801838e:	687b      	ldr	r3, [r7, #4]
 8018390:	4618      	mov	r0, r3
 8018392:	3708      	adds	r7, #8
 8018394:	46bd      	mov	sp, r7
 8018396:	bd80      	pop	{r7, pc}
 8018398:	0802e774 	.word	0x0802e774

0801839c <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 801839c:	b580      	push	{r7, lr}
 801839e:	b082      	sub	sp, #8
 80183a0:	af00      	add	r7, sp, #0
 80183a2:	6078      	str	r0, [r7, #4]
 80183a4:	6878      	ldr	r0, [r7, #4]
 80183a6:	f7ff ffe7 	bl	8018378 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80183aa:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 80183ae:	6878      	ldr	r0, [r7, #4]
 80183b0:	f013 fb53 	bl	802ba5a <_ZdlPvj>
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	4618      	mov	r0, r3
 80183b8:	3708      	adds	r7, #8
 80183ba:	46bd      	mov	sp, r7
 80183bc:	bd80      	pop	{r7, pc}
	...

080183c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80183c0:	b580      	push	{r7, lr}
 80183c2:	b082      	sub	sp, #8
 80183c4:	af00      	add	r7, sp, #0
 80183c6:	6078      	str	r0, [r7, #4]
 80183c8:	4a05      	ldr	r2, [pc, #20]	@ (80183e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	601a      	str	r2, [r3, #0]
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	4618      	mov	r0, r3
 80183d2:	f001 f83e 	bl	8019452 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80183d6:	687b      	ldr	r3, [r7, #4]
 80183d8:	4618      	mov	r0, r3
 80183da:	3708      	adds	r7, #8
 80183dc:	46bd      	mov	sp, r7
 80183de:	bd80      	pop	{r7, pc}
 80183e0:	0802e7a8 	.word	0x0802e7a8

080183e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80183e4:	b580      	push	{r7, lr}
 80183e6:	b082      	sub	sp, #8
 80183e8:	af00      	add	r7, sp, #0
 80183ea:	6078      	str	r0, [r7, #4]
 80183ec:	6878      	ldr	r0, [r7, #4]
 80183ee:	f7ff ffe7 	bl	80183c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80183f2:	2118      	movs	r1, #24
 80183f4:	6878      	ldr	r0, [r7, #4]
 80183f6:	f013 fb30 	bl	802ba5a <_ZdlPvj>
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	4618      	mov	r0, r3
 80183fe:	3708      	adds	r7, #8
 8018400:	46bd      	mov	sp, r7
 8018402:	bd80      	pop	{r7, pc}

08018404 <_ZN8touchgfx22VectorFontRendererImplD1Ev>:
namespace touchgfx
{
/**
 * Implementation of the VectorFontRenderer interface
 */
class VectorFontRendererImpl : public VectorFontRenderer
 8018404:	b580      	push	{r7, lr}
 8018406:	b082      	sub	sp, #8
 8018408:	af00      	add	r7, sp, #0
 801840a:	6078      	str	r0, [r7, #4]
 801840c:	4a05      	ldr	r2, [pc, #20]	@ (8018424 <_ZN8touchgfx22VectorFontRendererImplD1Ev+0x20>)
 801840e:	687b      	ldr	r3, [r7, #4]
 8018410:	601a      	str	r2, [r3, #0]
 8018412:	687b      	ldr	r3, [r7, #4]
 8018414:	4618      	mov	r0, r3
 8018416:	f7ff fc75 	bl	8017d04 <_ZN8touchgfx18VectorFontRendererD1Ev>
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	4618      	mov	r0, r3
 801841e:	3708      	adds	r7, #8
 8018420:	46bd      	mov	sp, r7
 8018422:	bd80      	pop	{r7, pc}
 8018424:	0802f020 	.word	0x0802f020

08018428 <_ZN8touchgfx22VectorFontRendererImplD0Ev>:
 8018428:	b580      	push	{r7, lr}
 801842a:	b082      	sub	sp, #8
 801842c:	af00      	add	r7, sp, #0
 801842e:	6078      	str	r0, [r7, #4]
 8018430:	6878      	ldr	r0, [r7, #4]
 8018432:	f7ff ffe7 	bl	8018404 <_ZN8touchgfx22VectorFontRendererImplD1Ev>
 8018436:	211c      	movs	r1, #28
 8018438:	6878      	ldr	r0, [r7, #4]
 801843a:	f013 fb0e 	bl	802ba5a <_ZdlPvj>
 801843e:	687b      	ldr	r3, [r7, #4]
 8018440:	4618      	mov	r0, r3
 8018442:	3708      	adds	r7, #8
 8018444:	46bd      	mov	sp, r7
 8018446:	bd80      	pop	{r7, pc}

08018448 <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 8018448:	b580      	push	{r7, lr}
 801844a:	b082      	sub	sp, #8
 801844c:	af00      	add	r7, sp, #0
 801844e:	6078      	str	r0, [r7, #4]
 8018450:	4a05      	ldr	r2, [pc, #20]	@ (8018468 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	601a      	str	r2, [r3, #0]
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	4618      	mov	r0, r3
 801845a:	f7ff fc73 	bl	8017d44 <_ZN8touchgfx3LCDD1Ev>
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	4618      	mov	r0, r3
 8018462:	3708      	adds	r7, #8
 8018464:	46bd      	mov	sp, r7
 8018466:	bd80      	pop	{r7, pc}
 8018468:	0802f2fc 	.word	0x0802f2fc

0801846c <_ZN8touchgfx8LCD24bppD0Ev>:
 801846c:	b580      	push	{r7, lr}
 801846e:	b082      	sub	sp, #8
 8018470:	af00      	add	r7, sp, #0
 8018472:	6078      	str	r0, [r7, #4]
 8018474:	6878      	ldr	r0, [r7, #4]
 8018476:	f7ff ffe7 	bl	8018448 <_ZN8touchgfx8LCD24bppD1Ev>
 801847a:	216c      	movs	r1, #108	@ 0x6c
 801847c:	6878      	ldr	r0, [r7, #4]
 801847e:	f013 faec 	bl	802ba5a <_ZdlPvj>
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	4618      	mov	r0, r3
 8018486:	3708      	adds	r7, #8
 8018488:	46bd      	mov	sp, r7
 801848a:	bd80      	pop	{r7, pc}

0801848c <_Z41__static_initialization_and_destruction_0ii>:
 801848c:	b580      	push	{r7, lr}
 801848e:	b084      	sub	sp, #16
 8018490:	af02      	add	r7, sp, #8
 8018492:	6078      	str	r0, [r7, #4]
 8018494:	6039      	str	r1, [r7, #0]
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	2b01      	cmp	r3, #1
 801849a:	d11c      	bne.n	80184d6 <_Z41__static_initialization_and_destruction_0ii+0x4a>
 801849c:	683b      	ldr	r3, [r7, #0]
 801849e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80184a2:	4293      	cmp	r3, r2
 80184a4:	d117      	bne.n	80184d6 <_Z41__static_initialization_and_destruction_0ii+0x4a>
static STM32TouchController tc;
 80184a6:	481b      	ldr	r0, [pc, #108]	@ (8018514 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80184a8:	f7ff feb4 	bl	8018214 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 80184ac:	481a      	ldr	r0, [pc, #104]	@ (8018518 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80184ae:	f7fe ffa1 	bl	80173f4 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 80184b2:	481a      	ldr	r0, [pc, #104]	@ (801851c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80184b4:	f00c fb64 	bl	8024b80 <_ZN8touchgfx8LCD24bppC1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 80184b8:	4819      	ldr	r0, [pc, #100]	@ (8018520 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80184ba:	f006 fdeb 	bl	801f094 <_ZN8touchgfx22VectorFontRendererImplC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 80184be:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80184c2:	9301      	str	r3, [sp, #4]
 80184c4:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80184c8:	9300      	str	r3, [sp, #0]
 80184ca:	4b12      	ldr	r3, [pc, #72]	@ (8018514 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80184cc:	4a13      	ldr	r2, [pc, #76]	@ (801851c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80184ce:	4912      	ldr	r1, [pc, #72]	@ (8018518 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80184d0:	4814      	ldr	r0, [pc, #80]	@ (8018524 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80184d2:	f7ff fe73 	bl	80181bc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	2b00      	cmp	r3, #0
 80184da:	d116      	bne.n	801850a <_Z41__static_initialization_and_destruction_0ii+0x7e>
 80184dc:	683b      	ldr	r3, [r7, #0]
 80184de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80184e2:	4293      	cmp	r3, r2
 80184e4:	d111      	bne.n	801850a <_Z41__static_initialization_and_destruction_0ii+0x7e>
 80184e6:	480f      	ldr	r0, [pc, #60]	@ (8018524 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80184e8:	f7fe fdc8 	bl	801707c <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 80184ec:	480e      	ldr	r0, [pc, #56]	@ (8018528 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80184ee:	f7fb fbfb 	bl	8013ce8 <_ZN23ApplicationFontProviderD1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 80184f2:	480b      	ldr	r0, [pc, #44]	@ (8018520 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80184f4:	f7ff ff86 	bl	8018404 <_ZN8touchgfx22VectorFontRendererImplD1Ev>
static LCD24bpp display;
 80184f8:	4808      	ldr	r0, [pc, #32]	@ (801851c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80184fa:	f7ff ffa5 	bl	8018448 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32DMA dma;
 80184fe:	4806      	ldr	r0, [pc, #24]	@ (8018518 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8018500:	f7fe ffa2 	bl	8017448 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8018504:	4803      	ldr	r0, [pc, #12]	@ (8018514 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8018506:	f7fe fa83 	bl	8016a10 <_ZN20STM32TouchControllerD1Ev>
}
 801850a:	bf00      	nop
 801850c:	3708      	adds	r7, #8
 801850e:	46bd      	mov	sp, r7
 8018510:	bd80      	pop	{r7, pc}
 8018512:	bf00      	nop
 8018514:	240332b0 	.word	0x240332b0
 8018518:	240332b4 	.word	0x240332b4
 801851c:	24034054 	.word	0x24034054
 8018520:	240340c0 	.word	0x240340c0
 8018524:	240340e0 	.word	0x240340e0
 8018528:	2400004c 	.word	0x2400004c

0801852c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 801852c:	b480      	push	{r7}
 801852e:	b083      	sub	sp, #12
 8018530:	af00      	add	r7, sp, #0
 8018532:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8018534:	2301      	movs	r3, #1
    }
 8018536:	4618      	mov	r0, r3
 8018538:	370c      	adds	r7, #12
 801853a:	46bd      	mov	sp, r7
 801853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018540:	4770      	bx	lr

08018542 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8018542:	b480      	push	{r7}
 8018544:	b083      	sub	sp, #12
 8018546:	af00      	add	r7, sp, #0
 8018548:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 801854a:	230c      	movs	r3, #12
    }
 801854c:	4618      	mov	r0, r3
 801854e:	370c      	adds	r7, #12
 8018550:	46bd      	mov	sp, r7
 8018552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018556:	4770      	bx	lr

08018558 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8018558:	b480      	push	{r7}
 801855a:	b083      	sub	sp, #12
 801855c:	af00      	add	r7, sp, #0
 801855e:	6078      	str	r0, [r7, #4]
 8018560:	460b      	mov	r3, r1
 8018562:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8018564:	887a      	ldrh	r2, [r7, #2]
 8018566:	4613      	mov	r3, r2
 8018568:	005b      	lsls	r3, r3, #1
 801856a:	4413      	add	r3, r2
 801856c:	009b      	lsls	r3, r3, #2
 801856e:	3308      	adds	r3, #8
 8018570:	687a      	ldr	r2, [r7, #4]
 8018572:	4413      	add	r3, r2
    }
 8018574:	4618      	mov	r0, r3
 8018576:	370c      	adds	r7, #12
 8018578:	46bd      	mov	sp, r7
 801857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801857e:	4770      	bx	lr

08018580 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8018580:	b480      	push	{r7}
 8018582:	b083      	sub	sp, #12
 8018584:	af00      	add	r7, sp, #0
 8018586:	6078      	str	r0, [r7, #4]
 8018588:	460b      	mov	r3, r1
 801858a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 801858c:	887a      	ldrh	r2, [r7, #2]
 801858e:	4613      	mov	r3, r2
 8018590:	005b      	lsls	r3, r3, #1
 8018592:	4413      	add	r3, r2
 8018594:	009b      	lsls	r3, r3, #2
 8018596:	3308      	adds	r3, #8
 8018598:	687a      	ldr	r2, [r7, #4]
 801859a:	4413      	add	r3, r2
    }
 801859c:	4618      	mov	r0, r3
 801859e:	370c      	adds	r7, #12
 80185a0:	46bd      	mov	sp, r7
 80185a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185a6:	4770      	bx	lr

080185a8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80185a8:	b480      	push	{r7}
 80185aa:	b083      	sub	sp, #12
 80185ac:	af00      	add	r7, sp, #0
 80185ae:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80185b0:	2301      	movs	r3, #1
    }
 80185b2:	4618      	mov	r0, r3
 80185b4:	370c      	adds	r7, #12
 80185b6:	46bd      	mov	sp, r7
 80185b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185bc:	4770      	bx	lr

080185be <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80185be:	b480      	push	{r7}
 80185c0:	b083      	sub	sp, #12
 80185c2:	af00      	add	r7, sp, #0
 80185c4:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80185c6:	f44f 739a 	mov.w	r3, #308	@ 0x134
    }
 80185ca:	4618      	mov	r0, r3
 80185cc:	370c      	adds	r7, #12
 80185ce:	46bd      	mov	sp, r7
 80185d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185d4:	4770      	bx	lr

080185d6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80185d6:	b480      	push	{r7}
 80185d8:	b083      	sub	sp, #12
 80185da:	af00      	add	r7, sp, #0
 80185dc:	6078      	str	r0, [r7, #4]
 80185de:	460b      	mov	r3, r1
 80185e0:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80185e2:	887b      	ldrh	r3, [r7, #2]
 80185e4:	f44f 729a 	mov.w	r2, #308	@ 0x134
 80185e8:	fb02 f303 	mul.w	r3, r2, r3
 80185ec:	3308      	adds	r3, #8
 80185ee:	687a      	ldr	r2, [r7, #4]
 80185f0:	4413      	add	r3, r2
    }
 80185f2:	4618      	mov	r0, r3
 80185f4:	370c      	adds	r7, #12
 80185f6:	46bd      	mov	sp, r7
 80185f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185fc:	4770      	bx	lr

080185fe <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80185fe:	b480      	push	{r7}
 8018600:	b083      	sub	sp, #12
 8018602:	af00      	add	r7, sp, #0
 8018604:	6078      	str	r0, [r7, #4]
 8018606:	460b      	mov	r3, r1
 8018608:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801860a:	887b      	ldrh	r3, [r7, #2]
 801860c:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8018610:	fb02 f303 	mul.w	r3, r2, r3
 8018614:	3308      	adds	r3, #8
 8018616:	687a      	ldr	r2, [r7, #4]
 8018618:	4413      	add	r3, r2
    }
 801861a:	4618      	mov	r0, r3
 801861c:	370c      	adds	r7, #12
 801861e:	46bd      	mov	sp, r7
 8018620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018624:	4770      	bx	lr

08018626 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8018626:	b480      	push	{r7}
 8018628:	b083      	sub	sp, #12
 801862a:	af00      	add	r7, sp, #0
 801862c:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 801862e:	2301      	movs	r3, #1
    }
 8018630:	4618      	mov	r0, r3
 8018632:	370c      	adds	r7, #12
 8018634:	46bd      	mov	sp, r7
 8018636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801863a:	4770      	bx	lr

0801863c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801863c:	b480      	push	{r7}
 801863e:	b083      	sub	sp, #12
 8018640:	af00      	add	r7, sp, #0
 8018642:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8018644:	2310      	movs	r3, #16
    }
 8018646:	4618      	mov	r0, r3
 8018648:	370c      	adds	r7, #12
 801864a:	46bd      	mov	sp, r7
 801864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018650:	4770      	bx	lr

08018652 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8018652:	b480      	push	{r7}
 8018654:	b083      	sub	sp, #12
 8018656:	af00      	add	r7, sp, #0
 8018658:	6078      	str	r0, [r7, #4]
 801865a:	460b      	mov	r3, r1
 801865c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801865e:	887b      	ldrh	r3, [r7, #2]
 8018660:	011b      	lsls	r3, r3, #4
 8018662:	3308      	adds	r3, #8
 8018664:	687a      	ldr	r2, [r7, #4]
 8018666:	4413      	add	r3, r2
    }
 8018668:	4618      	mov	r0, r3
 801866a:	370c      	adds	r7, #12
 801866c:	46bd      	mov	sp, r7
 801866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018672:	4770      	bx	lr

08018674 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8018674:	b480      	push	{r7}
 8018676:	b083      	sub	sp, #12
 8018678:	af00      	add	r7, sp, #0
 801867a:	6078      	str	r0, [r7, #4]
 801867c:	460b      	mov	r3, r1
 801867e:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8018680:	887b      	ldrh	r3, [r7, #2]
 8018682:	011b      	lsls	r3, r3, #4
 8018684:	3308      	adds	r3, #8
 8018686:	687a      	ldr	r2, [r7, #4]
 8018688:	4413      	add	r3, r2
    }
 801868a:	4618      	mov	r0, r3
 801868c:	370c      	adds	r7, #12
 801868e:	46bd      	mov	sp, r7
 8018690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018694:	4770      	bx	lr

08018696 <_GLOBAL__sub_I_touchgfx_init>:
 8018696:	b580      	push	{r7, lr}
 8018698:	af00      	add	r7, sp, #0
 801869a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801869e:	2001      	movs	r0, #1
 80186a0:	f7ff fef4 	bl	801848c <_Z41__static_initialization_and_destruction_0ii>
 80186a4:	bd80      	pop	{r7, pc}

080186a6 <_GLOBAL__sub_D_touchgfx_init>:
 80186a6:	b580      	push	{r7, lr}
 80186a8:	af00      	add	r7, sp, #0
 80186aa:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80186ae:	2000      	movs	r0, #0
 80186b0:	f7ff feec 	bl	801848c <_Z41__static_initialization_and_destruction_0ii>
 80186b4:	bd80      	pop	{r7, pc}

080186b6 <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 80186b6:	b480      	push	{r7}
 80186b8:	b085      	sub	sp, #20
 80186ba:	af00      	add	r7, sp, #0
 80186bc:	60f8      	str	r0, [r7, #12]
 80186be:	4608      	mov	r0, r1
 80186c0:	4611      	mov	r1, r2
 80186c2:	461a      	mov	r2, r3
 80186c4:	4603      	mov	r3, r0
 80186c6:	817b      	strh	r3, [r7, #10]
 80186c8:	460b      	mov	r3, r1
 80186ca:	813b      	strh	r3, [r7, #8]
 80186cc:	4613      	mov	r3, r2
 80186ce:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80186d0:	68fb      	ldr	r3, [r7, #12]
 80186d2:	897a      	ldrh	r2, [r7, #10]
 80186d4:	801a      	strh	r2, [r3, #0]
 80186d6:	68fb      	ldr	r3, [r7, #12]
 80186d8:	893a      	ldrh	r2, [r7, #8]
 80186da:	805a      	strh	r2, [r3, #2]
 80186dc:	68fb      	ldr	r3, [r7, #12]
 80186de:	88fa      	ldrh	r2, [r7, #6]
 80186e0:	809a      	strh	r2, [r3, #4]
 80186e2:	68fb      	ldr	r3, [r7, #12]
 80186e4:	8b3a      	ldrh	r2, [r7, #24]
 80186e6:	80da      	strh	r2, [r3, #6]
    {
    }
 80186e8:	68fb      	ldr	r3, [r7, #12]
 80186ea:	4618      	mov	r0, r3
 80186ec:	3714      	adds	r7, #20
 80186ee:	46bd      	mov	sp, r7
 80186f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186f4:	4770      	bx	lr

080186f6 <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 80186f6:	b480      	push	{r7}
 80186f8:	b083      	sub	sp, #12
 80186fa:	af00      	add	r7, sp, #0
 80186fc:	6078      	str	r0, [r7, #4]
        return rect.width;
 80186fe:	687b      	ldr	r3, [r7, #4]
 8018700:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 8018704:	4618      	mov	r0, r3
 8018706:	370c      	adds	r7, #12
 8018708:	46bd      	mov	sp, r7
 801870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801870e:	4770      	bx	lr

08018710 <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 8018710:	b480      	push	{r7}
 8018712:	b083      	sub	sp, #12
 8018714:	af00      	add	r7, sp, #0
 8018716:	6078      	str	r0, [r7, #4]
        return rect.height;
 8018718:	687b      	ldr	r3, [r7, #4]
 801871a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 801871e:	4618      	mov	r0, r3
 8018720:	370c      	adds	r7, #12
 8018722:	46bd      	mov	sp, r7
 8018724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018728:	4770      	bx	lr
	...

0801872c <_ZN8touchgfx14VectorRendererD1Ev>:
 */
class VectorRenderer
{
public:
    /** Virtual destructor. */
    virtual ~VectorRenderer()
 801872c:	b480      	push	{r7}
 801872e:	b083      	sub	sp, #12
 8018730:	af00      	add	r7, sp, #0
 8018732:	6078      	str	r0, [r7, #4]
    {
 8018734:	4a04      	ldr	r2, [pc, #16]	@ (8018748 <_ZN8touchgfx14VectorRendererD1Ev+0x1c>)
 8018736:	687b      	ldr	r3, [r7, #4]
 8018738:	601a      	str	r2, [r3, #0]
    }
 801873a:	687b      	ldr	r3, [r7, #4]
 801873c:	4618      	mov	r0, r3
 801873e:	370c      	adds	r7, #12
 8018740:	46bd      	mov	sp, r7
 8018742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018746:	4770      	bx	lr
 8018748:	0802ea24 	.word	0x0802ea24

0801874c <_ZN8touchgfx14VectorRendererD0Ev>:
    virtual ~VectorRenderer()
 801874c:	b580      	push	{r7, lr}
 801874e:	b082      	sub	sp, #8
 8018750:	af00      	add	r7, sp, #0
 8018752:	6078      	str	r0, [r7, #4]
    }
 8018754:	6878      	ldr	r0, [r7, #4]
 8018756:	f7ff ffe9 	bl	801872c <_ZN8touchgfx14VectorRendererD1Ev>
 801875a:	2104      	movs	r1, #4
 801875c:	6878      	ldr	r0, [r7, #4]
 801875e:	f013 f97c 	bl	802ba5a <_ZdlPvj>
 8018762:	687b      	ldr	r3, [r7, #4]
 8018764:	4618      	mov	r0, r3
 8018766:	3708      	adds	r7, #8
 8018768:	46bd      	mov	sp, r7
 801876a:	bd80      	pop	{r7, pc}

0801876c <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 801876c:	b580      	push	{r7, lr}
 801876e:	b082      	sub	sp, #8
 8018770:	af00      	add	r7, sp, #0
 8018772:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	681b      	ldr	r3, [r3, #0]
 8018778:	3320      	adds	r3, #32
 801877a:	681b      	ldr	r3, [r3, #0]
 801877c:	6878      	ldr	r0, [r7, #4]
 801877e:	4798      	blx	r3
    }
 8018780:	bf00      	nop
 8018782:	3708      	adds	r7, #8
 8018784:	46bd      	mov	sp, r7
 8018786:	bd80      	pop	{r7, pc}

08018788 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8018788:	b480      	push	{r7}
 801878a:	b083      	sub	sp, #12
 801878c:	af00      	add	r7, sp, #0
 801878e:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8018790:	687b      	ldr	r3, [r7, #4]
 8018792:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8018796:	3301      	adds	r3, #1
 8018798:	b2da      	uxtb	r2, r3
 801879a:	687b      	ldr	r3, [r7, #4]
 801879c:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
    }
 80187a0:	bf00      	nop
 80187a2:	370c      	adds	r7, #12
 80187a4:	46bd      	mov	sp, r7
 80187a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187aa:	4770      	bx	lr

080187ac <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    LCD* getAuxiliaryLCD()
 80187ac:	b480      	push	{r7}
 80187ae:	b083      	sub	sp, #12
 80187b0:	af00      	add	r7, sp, #0
 80187b2:	6078      	str	r0, [r7, #4]
        return auxiliaryLCD;
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    }
 80187b8:	4618      	mov	r0, r3
 80187ba:	370c      	adds	r7, #12
 80187bc:	46bd      	mov	sp, r7
 80187be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187c2:	4770      	bx	lr

080187c4 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>:
    /**
     * Constructor.
     *
     * @param  color (Optional) The color to use in the painter.
     */
    AbstractPainterColor(colortype color = 0)
 80187c4:	b580      	push	{r7, lr}
 80187c6:	b082      	sub	sp, #8
 80187c8:	af00      	add	r7, sp, #0
 80187ca:	6078      	str	r0, [r7, #4]
 80187cc:	6039      	str	r1, [r7, #0]
    {
 80187ce:	4a08      	ldr	r2, [pc, #32]	@ (80187f0 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE+0x2c>)
 80187d0:	687b      	ldr	r3, [r7, #4]
 80187d2:	601a      	str	r2, [r3, #0]
 80187d4:	687b      	ldr	r3, [r7, #4]
 80187d6:	3304      	adds	r3, #4
 80187d8:	4618      	mov	r0, r3
 80187da:	f7fe fd23 	bl	8017224 <_ZN8touchgfx9colortypeC1Ev>
        setColor(color);
 80187de:	6839      	ldr	r1, [r7, #0]
 80187e0:	6878      	ldr	r0, [r7, #4]
 80187e2:	f000 f827 	bl	8018834 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
    }
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	4618      	mov	r0, r3
 80187ea:	3708      	adds	r7, #8
 80187ec:	46bd      	mov	sp, r7
 80187ee:	bd80      	pop	{r7, pc}
 80187f0:	0802e938 	.word	0x0802e938

080187f4 <_ZN8touchgfx20AbstractPainterColorD1Ev>:

    /** Destructor */
    virtual ~AbstractPainterColor()
 80187f4:	b480      	push	{r7}
 80187f6:	b083      	sub	sp, #12
 80187f8:	af00      	add	r7, sp, #0
 80187fa:	6078      	str	r0, [r7, #4]
    {
 80187fc:	4a04      	ldr	r2, [pc, #16]	@ (8018810 <_ZN8touchgfx20AbstractPainterColorD1Ev+0x1c>)
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	601a      	str	r2, [r3, #0]
    }
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	4618      	mov	r0, r3
 8018806:	370c      	adds	r7, #12
 8018808:	46bd      	mov	sp, r7
 801880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801880e:	4770      	bx	lr
 8018810:	0802e938 	.word	0x0802e938

08018814 <_ZN8touchgfx20AbstractPainterColorD0Ev>:
    virtual ~AbstractPainterColor()
 8018814:	b580      	push	{r7, lr}
 8018816:	b082      	sub	sp, #8
 8018818:	af00      	add	r7, sp, #0
 801881a:	6078      	str	r0, [r7, #4]
    }
 801881c:	6878      	ldr	r0, [r7, #4]
 801881e:	f7ff ffe9 	bl	80187f4 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 8018822:	2108      	movs	r1, #8
 8018824:	6878      	ldr	r0, [r7, #4]
 8018826:	f013 f918 	bl	802ba5a <_ZdlPvj>
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	4618      	mov	r0, r3
 801882e:	3708      	adds	r7, #8
 8018830:	46bd      	mov	sp, r7
 8018832:	bd80      	pop	{r7, pc}

08018834 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>:
    /**
     * Sets color to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
 8018834:	b480      	push	{r7}
 8018836:	b083      	sub	sp, #12
 8018838:	af00      	add	r7, sp, #0
 801883a:	6078      	str	r0, [r7, #4]
 801883c:	6039      	str	r1, [r7, #0]
    {
        painterColor = color;
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	683a      	ldr	r2, [r7, #0]
 8018842:	605a      	str	r2, [r3, #4]
    }
 8018844:	bf00      	nop
 8018846:	370c      	adds	r7, #12
 8018848:	46bd      	mov	sp, r7
 801884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801884e:	4770      	bx	lr

08018850 <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 8018850:	b480      	push	{r7}
 8018852:	b083      	sub	sp, #12
 8018854:	af00      	add	r7, sp, #0
 8018856:	6078      	str	r0, [r7, #4]
        : widgetWidth(0)
 8018858:	4a06      	ldr	r2, [pc, #24]	@ (8018874 <_ZN8touchgfx15AbstractPainterC1Ev+0x24>)
 801885a:	687b      	ldr	r3, [r7, #4]
 801885c:	601a      	str	r2, [r3, #0]
 801885e:	687b      	ldr	r3, [r7, #4]
 8018860:	2200      	movs	r2, #0
 8018862:	809a      	strh	r2, [r3, #4]
    {
    }
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	4618      	mov	r0, r3
 8018868:	370c      	adds	r7, #12
 801886a:	46bd      	mov	sp, r7
 801886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018870:	4770      	bx	lr
 8018872:	bf00      	nop
 8018874:	0802e918 	.word	0x0802e918

08018878 <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 8018878:	b480      	push	{r7}
 801887a:	b083      	sub	sp, #12
 801887c:	af00      	add	r7, sp, #0
 801887e:	6078      	str	r0, [r7, #4]
    {
 8018880:	4a04      	ldr	r2, [pc, #16]	@ (8018894 <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	601a      	str	r2, [r3, #0]
    }
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	4618      	mov	r0, r3
 801888a:	370c      	adds	r7, #12
 801888c:	46bd      	mov	sp, r7
 801888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018892:	4770      	bx	lr
 8018894:	0802e918 	.word	0x0802e918

08018898 <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 8018898:	b580      	push	{r7, lr}
 801889a:	b082      	sub	sp, #8
 801889c:	af00      	add	r7, sp, #0
 801889e:	6078      	str	r0, [r7, #4]
    }
 80188a0:	6878      	ldr	r0, [r7, #4]
 80188a2:	f7ff ffe9 	bl	8018878 <_ZN8touchgfx15AbstractPainterD1Ev>
 80188a6:	2108      	movs	r1, #8
 80188a8:	6878      	ldr	r0, [r7, #4]
 80188aa:	f013 f8d6 	bl	802ba5a <_ZdlPvj>
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	4618      	mov	r0, r3
 80188b2:	3708      	adds	r7, #8
 80188b4:	46bd      	mov	sp, r7
 80188b6:	bd80      	pop	{r7, pc}

080188b8 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * HARDWARE if the painter uses hardware based drawing,
     * SOFTWARE otherwise. Relevant on platforms using DCACHE.
     *
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
 80188b8:	b480      	push	{r7}
 80188ba:	b083      	sub	sp, #12
 80188bc:	af00      	add	r7, sp, #0
 80188be:	6078      	str	r0, [r7, #4]
    {
        return HAL::SOFTWARE;
 80188c0:	2300      	movs	r3, #0
    }
 80188c2:	4618      	mov	r0, r3
 80188c4:	370c      	adds	r7, #12
 80188c6:	46bd      	mov	sp, r7
 80188c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188cc:	4770      	bx	lr

080188ce <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @return True if the painter is ready to paint, false otherwise.
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
 80188ce:	b480      	push	{r7}
 80188d0:	b083      	sub	sp, #12
 80188d2:	af00      	add	r7, sp, #0
 80188d4:	6078      	str	r0, [r7, #4]
 80188d6:	6039      	str	r1, [r7, #0]
    {
        widgetWidth = widgetRect.width;
 80188d8:	683b      	ldr	r3, [r7, #0]
 80188da:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	809a      	strh	r2, [r3, #4]
        return true;
 80188e2:	2301      	movs	r3, #1
    }
 80188e4:	4618      	mov	r0, r3
 80188e6:	370c      	adds	r7, #12
 80188e8:	46bd      	mov	sp, r7
 80188ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188ee:	4770      	bx	lr

080188f0 <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * This function is called after all paint operation have finished. This allows the painter to
     * close down dma queues etc. This happens after the last scan line segment has been drawn.
     *
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
 80188f0:	b480      	push	{r7}
 80188f2:	b083      	sub	sp, #12
 80188f4:	af00      	add	r7, sp, #0
 80188f6:	6078      	str	r0, [r7, #4]
    {
        return;
 80188f8:	bf00      	nop
    }
 80188fa:	370c      	adds	r7, #12
 80188fc:	46bd      	mov	sp, r7
 80188fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018902:	4770      	bx	lr

08018904 <_ZN8touchgfx29AbstractPainterLinearGradientC1Ev>:
 */
class AbstractPainterLinearGradient : public AbstractPainter
{
public:
    /** Constructor. */
    AbstractPainterLinearGradient()
 8018904:	b580      	push	{r7, lr}
 8018906:	b082      	sub	sp, #8
 8018908:	af00      	add	r7, sp, #0
 801890a:	6078      	str	r0, [r7, #4]
        : AbstractPainter(),
          coord0(0), coord1(100), texture(0), isSolid(false), isVertical(false), isHorizontal(false), clSlope(0.0f), clOffset(0.0f), horizontalDistance(0.0f), deltaColor(0.0f)
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	4618      	mov	r0, r3
 8018910:	f7ff ff9e 	bl	8018850 <_ZN8touchgfx15AbstractPainterC1Ev>
 8018914:	4a14      	ldr	r2, [pc, #80]	@ (8018968 <_ZN8touchgfx29AbstractPainterLinearGradientC1Ev+0x64>)
 8018916:	687b      	ldr	r3, [r7, #4]
 8018918:	601a      	str	r2, [r3, #0]
 801891a:	687b      	ldr	r3, [r7, #4]
 801891c:	2200      	movs	r2, #0
 801891e:	80da      	strh	r2, [r3, #6]
 8018920:	687b      	ldr	r3, [r7, #4]
 8018922:	2264      	movs	r2, #100	@ 0x64
 8018924:	811a      	strh	r2, [r3, #8]
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	2200      	movs	r2, #0
 801892a:	60da      	str	r2, [r3, #12]
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	2200      	movs	r2, #0
 8018930:	741a      	strb	r2, [r3, #16]
 8018932:	687b      	ldr	r3, [r7, #4]
 8018934:	2200      	movs	r2, #0
 8018936:	745a      	strb	r2, [r3, #17]
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	2200      	movs	r2, #0
 801893c:	749a      	strb	r2, [r3, #18]
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	f04f 0200 	mov.w	r2, #0
 8018944:	615a      	str	r2, [r3, #20]
 8018946:	687b      	ldr	r3, [r7, #4]
 8018948:	f04f 0200 	mov.w	r2, #0
 801894c:	619a      	str	r2, [r3, #24]
 801894e:	687b      	ldr	r3, [r7, #4]
 8018950:	f04f 0200 	mov.w	r2, #0
 8018954:	61da      	str	r2, [r3, #28]
 8018956:	687b      	ldr	r3, [r7, #4]
 8018958:	f04f 0200 	mov.w	r2, #0
 801895c:	621a      	str	r2, [r3, #32]
    {
    }
 801895e:	687b      	ldr	r3, [r7, #4]
 8018960:	4618      	mov	r0, r3
 8018962:	3708      	adds	r7, #8
 8018964:	46bd      	mov	sp, r7
 8018966:	bd80      	pop	{r7, pc}
 8018968:	0802e8f8 	.word	0x0802e8f8

0801896c <_ZN8touchgfx29AbstractPainterLinearGradientD1Ev>:

    /** Destructor */
    virtual ~AbstractPainterLinearGradient()
 801896c:	b580      	push	{r7, lr}
 801896e:	b082      	sub	sp, #8
 8018970:	af00      	add	r7, sp, #0
 8018972:	6078      	str	r0, [r7, #4]
    {
 8018974:	4a05      	ldr	r2, [pc, #20]	@ (801898c <_ZN8touchgfx29AbstractPainterLinearGradientD1Ev+0x20>)
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	601a      	str	r2, [r3, #0]
    }
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	4618      	mov	r0, r3
 801897e:	f7ff ff7b 	bl	8018878 <_ZN8touchgfx15AbstractPainterD1Ev>
 8018982:	687b      	ldr	r3, [r7, #4]
 8018984:	4618      	mov	r0, r3
 8018986:	3708      	adds	r7, #8
 8018988:	46bd      	mov	sp, r7
 801898a:	bd80      	pop	{r7, pc}
 801898c:	0802e8f8 	.word	0x0802e8f8

08018990 <_ZN8touchgfx29AbstractPainterLinearGradientD0Ev>:
    virtual ~AbstractPainterLinearGradient()
 8018990:	b580      	push	{r7, lr}
 8018992:	b082      	sub	sp, #8
 8018994:	af00      	add	r7, sp, #0
 8018996:	6078      	str	r0, [r7, #4]
    }
 8018998:	6878      	ldr	r0, [r7, #4]
 801899a:	f7ff ffe7 	bl	801896c <_ZN8touchgfx29AbstractPainterLinearGradientD1Ev>
 801899e:	2124      	movs	r1, #36	@ 0x24
 80189a0:	6878      	ldr	r0, [r7, #4]
 80189a2:	f013 f85a 	bl	802ba5a <_ZdlPvj>
 80189a6:	687b      	ldr	r3, [r7, #4]
 80189a8:	4618      	mov	r0, r3
 80189aa:	3708      	adds	r7, #8
 80189ac:	46bd      	mov	sp, r7
 80189ae:	bd80      	pop	{r7, pc}

080189b0 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    {
        return canvasPainter;
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
 80189b0:	b480      	push	{r7}
 80189b2:	b083      	sub	sp, #12
 80189b4:	af00      	add	r7, sp, #0
 80189b6:	6078      	str	r0, [r7, #4]
 80189b8:	460b      	mov	r3, r1
 80189ba:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	78fa      	ldrb	r2, [r7, #3]
 80189c0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    }
 80189c4:	bf00      	nop
 80189c6:	370c      	adds	r7, #12
 80189c8:	46bd      	mov	sp, r7
 80189ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189ce:	4770      	bx	lr

080189d0 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
 80189d0:	b480      	push	{r7}
 80189d2:	b083      	sub	sp, #12
 80189d4:	af00      	add	r7, sp, #0
 80189d6:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
    }
 80189de:	4618      	mov	r0, r3
 80189e0:	370c      	adds	r7, #12
 80189e2:	46bd      	mov	sp, r7
 80189e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189e8:	4770      	bx	lr

080189ea <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 80189ea:	b590      	push	{r4, r7, lr}
 80189ec:	b085      	sub	sp, #20
 80189ee:	af02      	add	r7, sp, #8
 80189f0:	6078      	str	r0, [r7, #4]
 80189f2:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, getWidth(), getHeight());
 80189f4:	683b      	ldr	r3, [r7, #0]
 80189f6:	4618      	mov	r0, r3
 80189f8:	f7ff fe7d 	bl	80186f6 <_ZNK8touchgfx8Drawable8getWidthEv>
 80189fc:	4603      	mov	r3, r0
 80189fe:	461c      	mov	r4, r3
 8018a00:	683b      	ldr	r3, [r7, #0]
 8018a02:	4618      	mov	r0, r3
 8018a04:	f7ff fe84 	bl	8018710 <_ZNK8touchgfx8Drawable9getHeightEv>
 8018a08:	4603      	mov	r3, r0
 8018a0a:	9300      	str	r3, [sp, #0]
 8018a0c:	4623      	mov	r3, r4
 8018a0e:	2200      	movs	r2, #0
 8018a10:	2100      	movs	r1, #0
 8018a12:	6878      	ldr	r0, [r7, #4]
 8018a14:	f7ff fe4f 	bl	80186b6 <_ZN8touchgfx4RectC1Essss>
    }
 8018a18:	6878      	ldr	r0, [r7, #4]
 8018a1a:	370c      	adds	r7, #12
 8018a1c:	46bd      	mov	sp, r7
 8018a1e:	bd90      	pop	{r4, r7, pc}

08018a20 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
     * @see draw
     *
     * @note Function draw() might fail for some horizontal lines due to memory constraints. These
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
 8018a20:	b580      	push	{r7, lr}
 8018a22:	b082      	sub	sp, #8
 8018a24:	af00      	add	r7, sp, #0
 8018a26:	6078      	str	r0, [r7, #4]
 8018a28:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 8018a2a:	6878      	ldr	r0, [r7, #4]
 8018a2c:	f7fc fb3d 	bl	80150aa <_ZN8touchgfx4RectC1Ev>
    }
 8018a30:	6878      	ldr	r0, [r7, #4]
 8018a32:	3708      	adds	r7, #8
 8018a34:	46bd      	mov	sp, r7
 8018a36:	bd80      	pop	{r7, pc}

08018a38 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 8018a38:	b580      	push	{r7, lr}
 8018a3a:	b084      	sub	sp, #16
 8018a3c:	af00      	add	r7, sp, #0
 8018a3e:	6078      	str	r0, [r7, #4]
        : AbstractPainter()
 8018a40:	687b      	ldr	r3, [r7, #4]
 8018a42:	4618      	mov	r0, r3
 8018a44:	f7ff ff04 	bl	8018850 <_ZN8touchgfx15AbstractPainterC1Ev>
 8018a48:	4a26      	ldr	r2, [pc, #152]	@ (8018ae4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xac>)
 8018a4a:	687b      	ldr	r3, [r7, #4]
 8018a4c:	601a      	str	r2, [r3, #0]
 8018a4e:	2301      	movs	r3, #1
 8018a50:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8018a52:	f7fb fd07 	bl	8014464 <_ZN8touchgfx3HAL3lcdEv>
 8018a56:	4603      	mov	r3, r0
 8018a58:	681a      	ldr	r2, [r3, #0]
 8018a5a:	322c      	adds	r2, #44	@ 0x2c
 8018a5c:	6812      	ldr	r2, [r2, #0]
 8018a5e:	4618      	mov	r0, r3
 8018a60:	4790      	blx	r2
 8018a62:	4603      	mov	r3, r0
 8018a64:	461a      	mov	r2, r3
 8018a66:	7bfb      	ldrb	r3, [r7, #15]
 8018a68:	4293      	cmp	r3, r2
 8018a6a:	bf0c      	ite	eq
 8018a6c:	2301      	moveq	r3, #1
 8018a6e:	2300      	movne	r3, #0
 8018a70:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 8018a72:	f7fb fceb 	bl	801444c <_ZN8touchgfx3HAL11getInstanceEv>
 8018a76:	4603      	mov	r3, r0
 8018a78:	4618      	mov	r0, r3
 8018a7a:	f7ff fe97 	bl	80187ac <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 8018a7e:	4603      	mov	r3, r0
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	bf14      	ite	ne
 8018a84:	2301      	movne	r3, #1
 8018a86:	2300      	moveq	r3, #0
 8018a88:	b2db      	uxtb	r3, r3
 8018a8a:	2b00      	cmp	r3, #0
 8018a8c:	d01b      	beq.n	8018ac6 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x8e>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 8018a8e:	f7fb fcdd 	bl	801444c <_ZN8touchgfx3HAL11getInstanceEv>
 8018a92:	4603      	mov	r3, r0
 8018a94:	4618      	mov	r0, r3
 8018a96:	f7ff fe89 	bl	80187ac <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 8018a9a:	4603      	mov	r3, r0
 8018a9c:	681a      	ldr	r2, [r3, #0]
 8018a9e:	322c      	adds	r2, #44	@ 0x2c
 8018aa0:	6812      	ldr	r2, [r2, #0]
 8018aa2:	4618      	mov	r0, r3
 8018aa4:	4790      	blx	r2
 8018aa6:	4603      	mov	r3, r0
 8018aa8:	461a      	mov	r2, r3
 8018aaa:	7bfb      	ldrb	r3, [r7, #15]
 8018aac:	4293      	cmp	r3, r2
 8018aae:	bf0c      	ite	eq
 8018ab0:	2301      	moveq	r3, #1
 8018ab2:	2300      	movne	r3, #0
 8018ab4:	b2da      	uxtb	r2, r3
 8018ab6:	7bbb      	ldrb	r3, [r7, #14]
 8018ab8:	4313      	orrs	r3, r2
 8018aba:	b2db      	uxtb	r3, r3
 8018abc:	2b00      	cmp	r3, #0
 8018abe:	bf14      	ite	ne
 8018ac0:	2301      	movne	r3, #1
 8018ac2:	2300      	moveq	r3, #0
 8018ac4:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 8018ac6:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 8018ac8:	2b00      	cmp	r3, #0
 8018aca:	d105      	bne.n	8018ad8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xa0>
 8018acc:	4b06      	ldr	r3, [pc, #24]	@ (8018ae8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb0>)
 8018ace:	4a07      	ldr	r2, [pc, #28]	@ (8018aec <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb4>)
 8018ad0:	2127      	movs	r1, #39	@ 0x27
 8018ad2:	4807      	ldr	r0, [pc, #28]	@ (8018af0 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb8>)
 8018ad4:	f013 fb38 	bl	802c148 <__assert_func>
    }
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	4618      	mov	r0, r3
 8018adc:	3710      	adds	r7, #16
 8018ade:	46bd      	mov	sp, r7
 8018ae0:	bd80      	pop	{r7, pc}
 8018ae2:	bf00      	nop
 8018ae4:	0802e8d8 	.word	0x0802e8d8
 8018ae8:	0802de04 	.word	0x0802de04
 8018aec:	0802de64 	.word	0x0802de64
 8018af0:	0802dea0 	.word	0x0802dea0

08018af4 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
class AbstractPainterRGB888 : public AbstractPainter
 8018af4:	b580      	push	{r7, lr}
 8018af6:	b082      	sub	sp, #8
 8018af8:	af00      	add	r7, sp, #0
 8018afa:	6078      	str	r0, [r7, #4]
 8018afc:	4a05      	ldr	r2, [pc, #20]	@ (8018b14 <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	601a      	str	r2, [r3, #0]
 8018b02:	687b      	ldr	r3, [r7, #4]
 8018b04:	4618      	mov	r0, r3
 8018b06:	f7ff feb7 	bl	8018878 <_ZN8touchgfx15AbstractPainterD1Ev>
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	4618      	mov	r0, r3
 8018b0e:	3708      	adds	r7, #8
 8018b10:	46bd      	mov	sp, r7
 8018b12:	bd80      	pop	{r7, pc}
 8018b14:	0802e8d8 	.word	0x0802e8d8

08018b18 <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 8018b18:	b580      	push	{r7, lr}
 8018b1a:	b082      	sub	sp, #8
 8018b1c:	af00      	add	r7, sp, #0
 8018b1e:	6078      	str	r0, [r7, #4]
 8018b20:	6878      	ldr	r0, [r7, #4]
 8018b22:	f7ff ffe7 	bl	8018af4 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8018b26:	2108      	movs	r1, #8
 8018b28:	6878      	ldr	r0, [r7, #4]
 8018b2a:	f012 ff96 	bl	802ba5a <_ZdlPvj>
 8018b2e:	687b      	ldr	r3, [r7, #4]
 8018b30:	4618      	mov	r0, r3
 8018b32:	3708      	adds	r7, #8
 8018b34:	46bd      	mov	sp, r7
 8018b36:	bd80      	pop	{r7, pc}

08018b38 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>:
    /**
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
 8018b38:	b580      	push	{r7, lr}
 8018b3a:	b082      	sub	sp, #8
 8018b3c:	af00      	add	r7, sp, #0
 8018b3e:	6078      	str	r0, [r7, #4]
 8018b40:	6039      	str	r1, [r7, #0]
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 8018b42:	687b      	ldr	r3, [r7, #4]
 8018b44:	4618      	mov	r0, r3
 8018b46:	f7ff ff77 	bl	8018a38 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 8018b4a:	687b      	ldr	r3, [r7, #4]
 8018b4c:	3308      	adds	r3, #8
 8018b4e:	6839      	ldr	r1, [r7, #0]
 8018b50:	4618      	mov	r0, r3
 8018b52:	f7ff fe37 	bl	80187c4 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>
 8018b56:	4a05      	ldr	r2, [pc, #20]	@ (8018b6c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE+0x34>)
 8018b58:	687b      	ldr	r3, [r7, #4]
 8018b5a:	601a      	str	r2, [r3, #0]
 8018b5c:	4a04      	ldr	r2, [pc, #16]	@ (8018b70 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE+0x38>)
 8018b5e:	687b      	ldr	r3, [r7, #4]
 8018b60:	609a      	str	r2, [r3, #8]
    {
    }
 8018b62:	687b      	ldr	r3, [r7, #4]
 8018b64:	4618      	mov	r0, r3
 8018b66:	3708      	adds	r7, #8
 8018b68:	46bd      	mov	sp, r7
 8018b6a:	bd80      	pop	{r7, pc}
 8018b6c:	0802ece0 	.word	0x0802ece0
 8018b70:	0802ed04 	.word	0x0802ed04

08018b74 <_ZN8touchgfx17CWRVectorRenderer7setModeENS_14VectorRenderer8DrawModeE>:
     *
     * The default mode is non-zero filling.
     *
     * @param mode The filling mode.
     */
    virtual void setMode(DrawMode mode)
 8018b74:	b480      	push	{r7}
 8018b76:	b083      	sub	sp, #12
 8018b78:	af00      	add	r7, sp, #0
 8018b7a:	6078      	str	r0, [r7, #4]
 8018b7c:	460b      	mov	r3, r1
 8018b7e:	70fb      	strb	r3, [r7, #3]
    {
        drawMode = mode;
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	78fa      	ldrb	r2, [r7, #3]
 8018b84:	771a      	strb	r2, [r3, #28]
    }
 8018b86:	bf00      	nop
 8018b88:	370c      	adds	r7, #12
 8018b8a:	46bd      	mov	sp, r7
 8018b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b90:	4770      	bx	lr

08018b92 <_ZN8touchgfx17CWRVectorRenderer19setStrokeMiterLimitEf>:

    virtual void setStrokeMiterLimit(float miterLimit)
 8018b92:	b480      	push	{r7}
 8018b94:	b083      	sub	sp, #12
 8018b96:	af00      	add	r7, sp, #0
 8018b98:	6078      	str	r0, [r7, #4]
 8018b9a:	ed87 0a00 	vstr	s0, [r7]
    {
        strokeMiterLimit = miterLimit;
 8018b9e:	687b      	ldr	r3, [r7, #4]
 8018ba0:	683a      	ldr	r2, [r7, #0]
 8018ba2:	621a      	str	r2, [r3, #32]
    }
 8018ba4:	bf00      	nop
 8018ba6:	370c      	adds	r7, #12
 8018ba8:	46bd      	mov	sp, r7
 8018baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bae:	4770      	bx	lr

08018bb0 <_ZN8touchgfx17CWRVectorRenderer17setStrokeLineJoinENS_16VGStrokeLineJoinE>:

    virtual void setStrokeLineJoin(VGStrokeLineJoin lineJoin)
 8018bb0:	b480      	push	{r7}
 8018bb2:	b083      	sub	sp, #12
 8018bb4:	af00      	add	r7, sp, #0
 8018bb6:	6078      	str	r0, [r7, #4]
 8018bb8:	460b      	mov	r3, r1
 8018bba:	70fb      	strb	r3, [r7, #3]
    {
        strokeLineJoin = lineJoin;
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	78fa      	ldrb	r2, [r7, #3]
 8018bc0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
 8018bc4:	bf00      	nop
 8018bc6:	370c      	adds	r7, #12
 8018bc8:	46bd      	mov	sp, r7
 8018bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bce:	4770      	bx	lr

08018bd0 <_ZN8touchgfx17CWRVectorRenderer16setStrokeLineCapENS_15VGStrokeLineCapE>:

    virtual void setStrokeLineCap(VGStrokeLineCap lineCap)
 8018bd0:	b480      	push	{r7}
 8018bd2:	b083      	sub	sp, #12
 8018bd4:	af00      	add	r7, sp, #0
 8018bd6:	6078      	str	r0, [r7, #4]
 8018bd8:	460b      	mov	r3, r1
 8018bda:	70fb      	strb	r3, [r7, #3]
    {
        strokeLineCap = lineCap;
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	78fa      	ldrb	r2, [r7, #3]
 8018be0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
 8018be4:	bf00      	nop
 8018be6:	370c      	adds	r7, #12
 8018be8:	46bd      	mov	sp, r7
 8018bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bee:	4770      	bx	lr

08018bf0 <_ZNK8touchgfx17CWRVectorRenderer17CanvasWidgetProxy16drawCanvasWidgetERKNS_4RectE>:
    void drawStrokeBackwards(uint32_t cmdInxPathStart, uint32_t cmdInx, uint32_t pointInx, const uint8_t* cmds, const float* points, bool drawLineCaps, StrokeCanvas& canvas) const;
    void getPreviousDestination(float& positionX, float& positionY, uint32_t cmdInx, uint32_t pointInx, const uint8_t* cmds, const float* points) const;

    class CanvasWidgetProxy : public CanvasWidget
    {
        virtual bool drawCanvasWidget(const Rect& invalidatedArea) const
 8018bf0:	b480      	push	{r7}
 8018bf2:	b083      	sub	sp, #12
 8018bf4:	af00      	add	r7, sp, #0
 8018bf6:	6078      	str	r0, [r7, #4]
 8018bf8:	6039      	str	r1, [r7, #0]
        {
            return true;
 8018bfa:	2301      	movs	r3, #1
        }
 8018bfc:	4618      	mov	r0, r3
 8018bfe:	370c      	adds	r7, #12
 8018c00:	46bd      	mov	sp, r7
 8018c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c06:	4770      	bx	lr

08018c08 <_ZN8touchgfx23CWRVectorRendererRGB88816getLinearPainterEv>:
 * Implementation of the CWRVectorRendererInterface
 * for the RGB888 framebuffer format.
 */
class CWRVectorRendererRGB888 : public CWRVectorRenderer
{
    virtual AbstractPainterLinearGradient& getLinearPainter()
 8018c08:	b480      	push	{r7}
 8018c0a:	b083      	sub	sp, #12
 8018c0c:	af00      	add	r7, sp, #0
 8018c0e:	6078      	str	r0, [r7, #4]
    {
        return linearPainter;
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	3398      	adds	r3, #152	@ 0x98
    }
 8018c14:	4618      	mov	r0, r3
 8018c16:	370c      	adds	r7, #12
 8018c18:	46bd      	mov	sp, r7
 8018c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c1e:	4770      	bx	lr

08018c20 <_ZN8touchgfx23CWRVectorRendererRGB88820getColorPainterColorEv>:

    virtual AbstractPainterColor& getColorPainterColor()
 8018c20:	b480      	push	{r7}
 8018c22:	b083      	sub	sp, #12
 8018c24:	af00      	add	r7, sp, #0
 8018c26:	6078      	str	r0, [r7, #4]
    {
        return colorPainter;
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	338c      	adds	r3, #140	@ 0x8c
    }
 8018c2c:	4618      	mov	r0, r3
 8018c2e:	370c      	adds	r7, #12
 8018c30:	46bd      	mov	sp, r7
 8018c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c36:	4770      	bx	lr

08018c38 <_ZN8touchgfx23CWRVectorRendererRGB88815getColorPainterEv>:

    virtual AbstractPainter& getColorPainter()
 8018c38:	b480      	push	{r7}
 8018c3a:	b083      	sub	sp, #12
 8018c3c:	af00      	add	r7, sp, #0
 8018c3e:	6078      	str	r0, [r7, #4]
    {
        return colorPainter;
 8018c40:	687b      	ldr	r3, [r7, #4]
 8018c42:	3384      	adds	r3, #132	@ 0x84
    }
 8018c44:	4618      	mov	r0, r3
 8018c46:	370c      	adds	r7, #12
 8018c48:	46bd      	mov	sp, r7
 8018c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c4e:	4770      	bx	lr

08018c50 <_ZN8touchgfx14VectorRendererC1Ev>:
class VectorRenderer
 8018c50:	b480      	push	{r7}
 8018c52:	b083      	sub	sp, #12
 8018c54:	af00      	add	r7, sp, #0
 8018c56:	6078      	str	r0, [r7, #4]
 8018c58:	4a04      	ldr	r2, [pc, #16]	@ (8018c6c <_ZN8touchgfx14VectorRendererC1Ev+0x1c>)
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	601a      	str	r2, [r3, #0]
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	4618      	mov	r0, r3
 8018c62:	370c      	adds	r7, #12
 8018c64:	46bd      	mov	sp, r7
 8018c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c6a:	4770      	bx	lr
 8018c6c:	0802ea24 	.word	0x0802ea24

08018c70 <_ZN8touchgfx12CanvasWidgetD1Ev>:
class CanvasWidget : public Widget
 8018c70:	b580      	push	{r7, lr}
 8018c72:	b082      	sub	sp, #8
 8018c74:	af00      	add	r7, sp, #0
 8018c76:	6078      	str	r0, [r7, #4]
 8018c78:	4a05      	ldr	r2, [pc, #20]	@ (8018c90 <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 8018c7a:	687b      	ldr	r3, [r7, #4]
 8018c7c:	601a      	str	r2, [r3, #0]
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	4618      	mov	r0, r3
 8018c82:	f7fc fc89 	bl	8015598 <_ZN8touchgfx6WidgetD1Ev>
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	4618      	mov	r0, r3
 8018c8a:	3708      	adds	r7, #8
 8018c8c:	46bd      	mov	sp, r7
 8018c8e:	bd80      	pop	{r7, pc}
 8018c90:	0802ed38 	.word	0x0802ed38

08018c94 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 8018c94:	b580      	push	{r7, lr}
 8018c96:	b082      	sub	sp, #8
 8018c98:	af00      	add	r7, sp, #0
 8018c9a:	6078      	str	r0, [r7, #4]
 8018c9c:	6878      	ldr	r0, [r7, #4]
 8018c9e:	f7ff ffe7 	bl	8018c70 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8018ca2:	212c      	movs	r1, #44	@ 0x2c
 8018ca4:	6878      	ldr	r0, [r7, #4]
 8018ca6:	f012 fed8 	bl	802ba5a <_ZdlPvj>
 8018caa:	687b      	ldr	r3, [r7, #4]
 8018cac:	4618      	mov	r0, r3
 8018cae:	3708      	adds	r7, #8
 8018cb0:	46bd      	mov	sp, r7
 8018cb2:	bd80      	pop	{r7, pc}

08018cb4 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyC1Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 8018cb4:	b580      	push	{r7, lr}
 8018cb6:	b082      	sub	sp, #8
 8018cb8:	af00      	add	r7, sp, #0
 8018cba:	6078      	str	r0, [r7, #4]
 8018cbc:	687b      	ldr	r3, [r7, #4]
 8018cbe:	4618      	mov	r0, r3
 8018cc0:	f003 f8d0 	bl	801be64 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8018cc4:	4a03      	ldr	r2, [pc, #12]	@ (8018cd4 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyC1Ev+0x20>)
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	601a      	str	r2, [r3, #0]
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	4618      	mov	r0, r3
 8018cce:	3708      	adds	r7, #8
 8018cd0:	46bd      	mov	sp, r7
 8018cd2:	bd80      	pop	{r7, pc}
 8018cd4:	0802e860 	.word	0x0802e860

08018cd8 <_ZN8touchgfx17CWRVectorRendererC1Ev>:
class CWRVectorRenderer : public VectorRenderer
 8018cd8:	b580      	push	{r7, lr}
 8018cda:	b082      	sub	sp, #8
 8018cdc:	af00      	add	r7, sp, #0
 8018cde:	6078      	str	r0, [r7, #4]
 8018ce0:	687b      	ldr	r3, [r7, #4]
 8018ce2:	4618      	mov	r0, r3
 8018ce4:	f7ff ffb4 	bl	8018c50 <_ZN8touchgfx14VectorRendererC1Ev>
 8018ce8:	4a10      	ldr	r2, [pc, #64]	@ (8018d2c <_ZN8touchgfx17CWRVectorRendererC1Ev+0x54>)
 8018cea:	687b      	ldr	r3, [r7, #4]
 8018cec:	601a      	str	r2, [r3, #0]
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	3304      	adds	r3, #4
 8018cf2:	4618      	mov	r0, r3
 8018cf4:	f7fc f9d9 	bl	80150aa <_ZN8touchgfx4RectC1Ev>
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	330c      	adds	r3, #12
 8018cfc:	4618      	mov	r0, r3
 8018cfe:	f7fc f9d4 	bl	80150aa <_ZN8touchgfx4RectC1Ev>
 8018d02:	687b      	ldr	r3, [r7, #4]
 8018d04:	3326      	adds	r3, #38	@ 0x26
 8018d06:	4618      	mov	r0, r3
 8018d08:	f7fc f9cf 	bl	80150aa <_ZN8touchgfx4RectC1Ev>
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	3334      	adds	r3, #52	@ 0x34
 8018d10:	4618      	mov	r0, r3
 8018d12:	f006 fc1e 	bl	801f552 <_ZN8touchgfx9Matrix3x3C1Ev>
 8018d16:	687b      	ldr	r3, [r7, #4]
 8018d18:	3358      	adds	r3, #88	@ 0x58
 8018d1a:	4618      	mov	r0, r3
 8018d1c:	f7ff ffca 	bl	8018cb4 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyC1Ev>
 8018d20:	687b      	ldr	r3, [r7, #4]
 8018d22:	4618      	mov	r0, r3
 8018d24:	3708      	adds	r7, #8
 8018d26:	46bd      	mov	sp, r7
 8018d28:	bd80      	pop	{r7, pc}
 8018d2a:	bf00      	nop
 8018d2c:	0802ec94 	.word	0x0802ec94

08018d30 <_ZN8touchgfx17CWRVectorRendererD1Ev>:
 8018d30:	b580      	push	{r7, lr}
 8018d32:	b082      	sub	sp, #8
 8018d34:	af00      	add	r7, sp, #0
 8018d36:	6078      	str	r0, [r7, #4]
 8018d38:	4a08      	ldr	r2, [pc, #32]	@ (8018d5c <_ZN8touchgfx17CWRVectorRendererD1Ev+0x2c>)
 8018d3a:	687b      	ldr	r3, [r7, #4]
 8018d3c:	601a      	str	r2, [r3, #0]
 8018d3e:	687b      	ldr	r3, [r7, #4]
 8018d40:	3358      	adds	r3, #88	@ 0x58
 8018d42:	4618      	mov	r0, r3
 8018d44:	f000 faea 	bl	801931c <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	4618      	mov	r0, r3
 8018d4c:	f7ff fcee 	bl	801872c <_ZN8touchgfx14VectorRendererD1Ev>
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	4618      	mov	r0, r3
 8018d54:	3708      	adds	r7, #8
 8018d56:	46bd      	mov	sp, r7
 8018d58:	bd80      	pop	{r7, pc}
 8018d5a:	bf00      	nop
 8018d5c:	0802ec94 	.word	0x0802ec94

08018d60 <_ZN8touchgfx17CWRVectorRendererD0Ev>:
 8018d60:	b580      	push	{r7, lr}
 8018d62:	b082      	sub	sp, #8
 8018d64:	af00      	add	r7, sp, #0
 8018d66:	6078      	str	r0, [r7, #4]
 8018d68:	6878      	ldr	r0, [r7, #4]
 8018d6a:	f7ff ffe1 	bl	8018d30 <_ZN8touchgfx17CWRVectorRendererD1Ev>
 8018d6e:	2184      	movs	r1, #132	@ 0x84
 8018d70:	6878      	ldr	r0, [r7, #4]
 8018d72:	f012 fe72 	bl	802ba5a <_ZdlPvj>
 8018d76:	687b      	ldr	r3, [r7, #4]
 8018d78:	4618      	mov	r0, r3
 8018d7a:	3708      	adds	r7, #8
 8018d7c:	46bd      	mov	sp, r7
 8018d7e:	bd80      	pop	{r7, pc}

08018d80 <_ZN8touchgfx27PainterRGB888LinearGradientC1Ev>:
 * An abstract class for creating painter classes for drawing canvas widgets. All canvas widgets
 * need a painter to fill the shape drawn with a CanvasWidgetRenderer. The painter must provide
 * the color of a pixel on a given coordinate, which will the be blended into the framebuffer
 * depending on the position of the canvas widget and the transparency of the given pixel.
 */
class PainterRGB888LinearGradient : public AbstractPainterLinearGradient
 8018d80:	b580      	push	{r7, lr}
 8018d82:	b082      	sub	sp, #8
 8018d84:	af00      	add	r7, sp, #0
 8018d86:	6078      	str	r0, [r7, #4]
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	4618      	mov	r0, r3
 8018d8c:	f7ff fdba 	bl	8018904 <_ZN8touchgfx29AbstractPainterLinearGradientC1Ev>
 8018d90:	4a03      	ldr	r2, [pc, #12]	@ (8018da0 <_ZN8touchgfx27PainterRGB888LinearGradientC1Ev+0x20>)
 8018d92:	687b      	ldr	r3, [r7, #4]
 8018d94:	601a      	str	r2, [r3, #0]
 8018d96:	687b      	ldr	r3, [r7, #4]
 8018d98:	4618      	mov	r0, r3
 8018d9a:	3708      	adds	r7, #8
 8018d9c:	46bd      	mov	sp, r7
 8018d9e:	bd80      	pop	{r7, pc}
 8018da0:	0802ed18 	.word	0x0802ed18

08018da4 <_ZN8touchgfx23CWRVectorRendererRGB888C1Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8018da4:	b590      	push	{r4, r7, lr}
 8018da6:	b085      	sub	sp, #20
 8018da8:	af00      	add	r7, sp, #0
 8018daa:	6078      	str	r0, [r7, #4]
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	4618      	mov	r0, r3
 8018db0:	f7ff ff92 	bl	8018cd8 <_ZN8touchgfx17CWRVectorRendererC1Ev>
 8018db4:	4a0c      	ldr	r2, [pc, #48]	@ (8018de8 <_ZN8touchgfx23CWRVectorRendererRGB888C1Ev+0x44>)
 8018db6:	687b      	ldr	r3, [r7, #4]
 8018db8:	601a      	str	r2, [r3, #0]
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	f103 0484 	add.w	r4, r3, #132	@ 0x84
 8018dc0:	f107 030c 	add.w	r3, r7, #12
 8018dc4:	2100      	movs	r1, #0
 8018dc6:	4618      	mov	r0, r3
 8018dc8:	f7fc f960 	bl	801508c <_ZN8touchgfx9colortypeC1Em>
 8018dcc:	68f9      	ldr	r1, [r7, #12]
 8018dce:	4620      	mov	r0, r4
 8018dd0:	f7ff feb2 	bl	8018b38 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	3398      	adds	r3, #152	@ 0x98
 8018dd8:	4618      	mov	r0, r3
 8018dda:	f7ff ffd1 	bl	8018d80 <_ZN8touchgfx27PainterRGB888LinearGradientC1Ev>
 8018dde:	687b      	ldr	r3, [r7, #4]
 8018de0:	4618      	mov	r0, r3
 8018de2:	3714      	adds	r7, #20
 8018de4:	46bd      	mov	sp, r7
 8018de6:	bd90      	pop	{r4, r7, pc}
 8018de8:	0802e814 	.word	0x0802e814

08018dec <__tcf_1>:

namespace touchgfx
{
VectorRenderer* VectorRenderer::getInstance()
{
    static CWRVectorRendererRGB888 renderer;
 8018dec:	b580      	push	{r7, lr}
 8018dee:	af00      	add	r7, sp, #0
 8018df0:	4801      	ldr	r0, [pc, #4]	@ (8018df8 <__tcf_1+0xc>)
 8018df2:	f000 fa67 	bl	80192c4 <_ZN8touchgfx23CWRVectorRendererRGB888D1Ev>
 8018df6:	bd80      	pop	{r7, pc}
 8018df8:	2403415c 	.word	0x2403415c

08018dfc <_ZN8touchgfx14VectorRenderer11getInstanceEv>:
{
 8018dfc:	b580      	push	{r7, lr}
 8018dfe:	af00      	add	r7, sp, #0
    static CWRVectorRendererRGB888 renderer;
 8018e00:	4b11      	ldr	r3, [pc, #68]	@ (8018e48 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x4c>)
 8018e02:	681b      	ldr	r3, [r3, #0]
 8018e04:	f3bf 8f5b 	dmb	ish
 8018e08:	f003 0301 	and.w	r3, r3, #1
 8018e0c:	2b00      	cmp	r3, #0
 8018e0e:	bf0c      	ite	eq
 8018e10:	2301      	moveq	r3, #1
 8018e12:	2300      	movne	r3, #0
 8018e14:	b2db      	uxtb	r3, r3
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	d013      	beq.n	8018e42 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x46>
 8018e1a:	480b      	ldr	r0, [pc, #44]	@ (8018e48 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x4c>)
 8018e1c:	f012 fe1f 	bl	802ba5e <__cxa_guard_acquire>
 8018e20:	4603      	mov	r3, r0
 8018e22:	2b00      	cmp	r3, #0
 8018e24:	bf14      	ite	ne
 8018e26:	2301      	movne	r3, #1
 8018e28:	2300      	moveq	r3, #0
 8018e2a:	b2db      	uxtb	r3, r3
 8018e2c:	2b00      	cmp	r3, #0
 8018e2e:	d008      	beq.n	8018e42 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x46>
 8018e30:	4806      	ldr	r0, [pc, #24]	@ (8018e4c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x50>)
 8018e32:	f7ff ffb7 	bl	8018da4 <_ZN8touchgfx23CWRVectorRendererRGB888C1Ev>
 8018e36:	4806      	ldr	r0, [pc, #24]	@ (8018e50 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x54>)
 8018e38:	f013 f9a4 	bl	802c184 <atexit>
 8018e3c:	4802      	ldr	r0, [pc, #8]	@ (8018e48 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x4c>)
 8018e3e:	f012 fe1a 	bl	802ba76 <__cxa_guard_release>

    return &renderer;
 8018e42:	4b02      	ldr	r3, [pc, #8]	@ (8018e4c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x50>)
}
 8018e44:	4618      	mov	r0, r3
 8018e46:	bd80      	pop	{r7, pc}
 8018e48:	24034218 	.word	0x24034218
 8018e4c:	2403415c 	.word	0x2403415c
 8018e50:	08018ded 	.word	0x08018ded

08018e54 <__NVIC_EnableIRQ>:
{
 8018e54:	b480      	push	{r7}
 8018e56:	b083      	sub	sp, #12
 8018e58:	af00      	add	r7, sp, #0
 8018e5a:	4603      	mov	r3, r0
 8018e5c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8018e5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018e62:	2b00      	cmp	r3, #0
 8018e64:	db0b      	blt.n	8018e7e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8018e66:	88fb      	ldrh	r3, [r7, #6]
 8018e68:	f003 021f 	and.w	r2, r3, #31
 8018e6c:	4907      	ldr	r1, [pc, #28]	@ (8018e8c <__NVIC_EnableIRQ+0x38>)
 8018e6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018e72:	095b      	lsrs	r3, r3, #5
 8018e74:	2001      	movs	r0, #1
 8018e76:	fa00 f202 	lsl.w	r2, r0, r2
 8018e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8018e7e:	bf00      	nop
 8018e80:	370c      	adds	r7, #12
 8018e82:	46bd      	mov	sp, r7
 8018e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e88:	4770      	bx	lr
 8018e8a:	bf00      	nop
 8018e8c:	e000e100 	.word	0xe000e100

08018e90 <__NVIC_DisableIRQ>:
{
 8018e90:	b480      	push	{r7}
 8018e92:	b083      	sub	sp, #12
 8018e94:	af00      	add	r7, sp, #0
 8018e96:	4603      	mov	r3, r0
 8018e98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8018e9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018e9e:	2b00      	cmp	r3, #0
 8018ea0:	db12      	blt.n	8018ec8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8018ea2:	88fb      	ldrh	r3, [r7, #6]
 8018ea4:	f003 021f 	and.w	r2, r3, #31
 8018ea8:	490a      	ldr	r1, [pc, #40]	@ (8018ed4 <__NVIC_DisableIRQ+0x44>)
 8018eaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018eae:	095b      	lsrs	r3, r3, #5
 8018eb0:	2001      	movs	r0, #1
 8018eb2:	fa00 f202 	lsl.w	r2, r0, r2
 8018eb6:	3320      	adds	r3, #32
 8018eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8018ebc:	f3bf 8f4f 	dsb	sy
}
 8018ec0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8018ec2:	f3bf 8f6f 	isb	sy
}
 8018ec6:	bf00      	nop
}
 8018ec8:	bf00      	nop
 8018eca:	370c      	adds	r7, #12
 8018ecc:	46bd      	mov	sp, r7
 8018ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ed2:	4770      	bx	lr
 8018ed4:	e000e100 	.word	0xe000e100

08018ed8 <__NVIC_SetPriority>:
{
 8018ed8:	b480      	push	{r7}
 8018eda:	b083      	sub	sp, #12
 8018edc:	af00      	add	r7, sp, #0
 8018ede:	4603      	mov	r3, r0
 8018ee0:	6039      	str	r1, [r7, #0]
 8018ee2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8018ee4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018ee8:	2b00      	cmp	r3, #0
 8018eea:	db0a      	blt.n	8018f02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8018eec:	683b      	ldr	r3, [r7, #0]
 8018eee:	b2da      	uxtb	r2, r3
 8018ef0:	490c      	ldr	r1, [pc, #48]	@ (8018f24 <__NVIC_SetPriority+0x4c>)
 8018ef2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018ef6:	0112      	lsls	r2, r2, #4
 8018ef8:	b2d2      	uxtb	r2, r2
 8018efa:	440b      	add	r3, r1
 8018efc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8018f00:	e00a      	b.n	8018f18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8018f02:	683b      	ldr	r3, [r7, #0]
 8018f04:	b2da      	uxtb	r2, r3
 8018f06:	4908      	ldr	r1, [pc, #32]	@ (8018f28 <__NVIC_SetPriority+0x50>)
 8018f08:	88fb      	ldrh	r3, [r7, #6]
 8018f0a:	f003 030f 	and.w	r3, r3, #15
 8018f0e:	3b04      	subs	r3, #4
 8018f10:	0112      	lsls	r2, r2, #4
 8018f12:	b2d2      	uxtb	r2, r2
 8018f14:	440b      	add	r3, r1
 8018f16:	761a      	strb	r2, [r3, #24]
}
 8018f18:	bf00      	nop
 8018f1a:	370c      	adds	r7, #12
 8018f1c:	46bd      	mov	sp, r7
 8018f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f22:	4770      	bx	lr
 8018f24:	e000e100 	.word	0xe000e100
 8018f28:	e000ed00 	.word	0xe000ed00

08018f2c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8018f2c:	b5b0      	push	{r4, r5, r7, lr}
 8018f2e:	b082      	sub	sp, #8
 8018f30:	af00      	add	r7, sp, #0
 8018f32:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	4618      	mov	r0, r3
 8018f38:	f000 fd83 	bl	8019a42 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8018f3c:	687d      	ldr	r5, [r7, #4]
 8018f3e:	687b      	ldr	r3, [r7, #4]
 8018f40:	681b      	ldr	r3, [r3, #0]
 8018f42:	3364      	adds	r3, #100	@ 0x64
 8018f44:	681c      	ldr	r4, [r3, #0]
 8018f46:	f004 ff7f 	bl	801de48 <_ZN8touchgfx11Application11getInstanceEv>
 8018f4a:	4603      	mov	r3, r0
 8018f4c:	4619      	mov	r1, r3
 8018f4e:	4628      	mov	r0, r5
 8018f50:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8018f52:	6878      	ldr	r0, [r7, #4]
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	681b      	ldr	r3, [r3, #0]
 8018f58:	3388      	adds	r3, #136	@ 0x88
 8018f5a:	681c      	ldr	r4, [r3, #0]
 8018f5c:	4a03      	ldr	r2, [pc, #12]	@ (8018f6c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 8018f5e:	2300      	movs	r3, #0
 8018f60:	4903      	ldr	r1, [pc, #12]	@ (8018f70 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8018f62:	47a0      	blx	r4
}
 8018f64:	bf00      	nop
 8018f66:	3708      	adds	r7, #8
 8018f68:	46bd      	mov	sp, r7
 8018f6a:	bdb0      	pop	{r4, r5, r7, pc}
 8018f6c:	700bf400 	.word	0x700bf400
 8018f70:	7005fa00 	.word	0x7005fa00

08018f74 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8018f74:	b580      	push	{r7, lr}
 8018f76:	b082      	sub	sp, #8
 8018f78:	af00      	add	r7, sp, #0
 8018f7a:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8018f7c:	2109      	movs	r1, #9
 8018f7e:	205a      	movs	r0, #90	@ 0x5a
 8018f80:	f7ff ffaa 	bl	8018ed8 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8018f84:	2109      	movs	r1, #9
 8018f86:	2058      	movs	r0, #88	@ 0x58
 8018f88:	f7ff ffa6 	bl	8018ed8 <__NVIC_SetPriority>
}
 8018f8c:	bf00      	nop
 8018f8e:	3708      	adds	r7, #8
 8018f90:	46bd      	mov	sp, r7
 8018f92:	bd80      	pop	{r7, pc}

08018f94 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8018f94:	b580      	push	{r7, lr}
 8018f96:	b082      	sub	sp, #8
 8018f98:	af00      	add	r7, sp, #0
 8018f9a:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8018f9c:	205a      	movs	r0, #90	@ 0x5a
 8018f9e:	f7ff ff59 	bl	8018e54 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8018fa2:	2058      	movs	r0, #88	@ 0x58
 8018fa4:	f7ff ff56 	bl	8018e54 <__NVIC_EnableIRQ>
}
 8018fa8:	bf00      	nop
 8018faa:	3708      	adds	r7, #8
 8018fac:	46bd      	mov	sp, r7
 8018fae:	bd80      	pop	{r7, pc}

08018fb0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8018fb0:	b580      	push	{r7, lr}
 8018fb2:	b082      	sub	sp, #8
 8018fb4:	af00      	add	r7, sp, #0
 8018fb6:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8018fb8:	205a      	movs	r0, #90	@ 0x5a
 8018fba:	f7ff ff69 	bl	8018e90 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8018fbe:	2058      	movs	r0, #88	@ 0x58
 8018fc0:	f7ff ff66 	bl	8018e90 <__NVIC_DisableIRQ>
}
 8018fc4:	bf00      	nop
 8018fc6:	3708      	adds	r7, #8
 8018fc8:	46bd      	mov	sp, r7
 8018fca:	bd80      	pop	{r7, pc}

08018fcc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8018fcc:	b480      	push	{r7}
 8018fce:	b083      	sub	sp, #12
 8018fd0:	af00      	add	r7, sp, #0
 8018fd2:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8018fd4:	4b11      	ldr	r3, [pc, #68]	@ (801901c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8018fd6:	68db      	ldr	r3, [r3, #12]
 8018fd8:	b29b      	uxth	r3, r3
 8018fda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8018fde:	b29b      	uxth	r3, r3
 8018fe0:	3b01      	subs	r3, #1
 8018fe2:	b29a      	uxth	r2, r3
 8018fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8019020 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8018fe6:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8018fe8:	4b0c      	ldr	r3, [pc, #48]	@ (801901c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8018fea:	691b      	ldr	r3, [r3, #16]
 8018fec:	b29b      	uxth	r3, r3
 8018fee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8018ff2:	b29b      	uxth	r3, r3
 8018ff4:	3b01      	subs	r3, #1
 8018ff6:	b29a      	uxth	r2, r3
 8018ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8019024 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8018ffa:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8018ffc:	4b08      	ldr	r3, [pc, #32]	@ (8019020 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8018ffe:	881a      	ldrh	r2, [r3, #0]
 8019000:	4b06      	ldr	r3, [pc, #24]	@ (801901c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8019002:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8019004:	4b05      	ldr	r3, [pc, #20]	@ (801901c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8019006:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019008:	4a04      	ldr	r2, [pc, #16]	@ (801901c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801900a:	f043 0301 	orr.w	r3, r3, #1
 801900e:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8019010:	bf00      	nop
 8019012:	370c      	adds	r7, #12
 8019014:	46bd      	mov	sp, r7
 8019016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801901a:	4770      	bx	lr
 801901c:	50001000 	.word	0x50001000
 8019020:	2403421c 	.word	0x2403421c
 8019024:	2403421e 	.word	0x2403421e

08019028 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8019028:	b580      	push	{r7, lr}
 801902a:	b082      	sub	sp, #8
 801902c:	af00      	add	r7, sp, #0
 801902e:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	4618      	mov	r0, r3
 8019034:	f000 fcec 	bl	8019a10 <_ZN8touchgfx3HAL10beginFrameEv>
 8019038:	4603      	mov	r3, r0
}
 801903a:	4618      	mov	r0, r3
 801903c:	3708      	adds	r7, #8
 801903e:	46bd      	mov	sp, r7
 8019040:	bd80      	pop	{r7, pc}

08019042 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8019042:	b580      	push	{r7, lr}
 8019044:	b082      	sub	sp, #8
 8019046:	af00      	add	r7, sp, #0
 8019048:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 801904a:	687b      	ldr	r3, [r7, #4]
 801904c:	4618      	mov	r0, r3
 801904e:	f000 fceb 	bl	8019a28 <_ZN8touchgfx3HAL8endFrameEv>
}
 8019052:	bf00      	nop
 8019054:	3708      	adds	r7, #8
 8019056:	46bd      	mov	sp, r7
 8019058:	bd80      	pop	{r7, pc}
	...

0801905c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 801905c:	b480      	push	{r7}
 801905e:	b083      	sub	sp, #12
 8019060:	af00      	add	r7, sp, #0
 8019062:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8019064:	4b03      	ldr	r3, [pc, #12]	@ (8019074 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8019066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8019068:	4618      	mov	r0, r3
 801906a:	370c      	adds	r7, #12
 801906c:	46bd      	mov	sp, r7
 801906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019072:	4770      	bx	lr
 8019074:	50001084 	.word	0x50001084

08019078 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8019078:	b480      	push	{r7}
 801907a:	b083      	sub	sp, #12
 801907c:	af00      	add	r7, sp, #0
 801907e:	6078      	str	r0, [r7, #4]
 8019080:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8019082:	4a06      	ldr	r2, [pc, #24]	@ (801909c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8019084:	683b      	ldr	r3, [r7, #0]
 8019086:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8019088:	4b05      	ldr	r3, [pc, #20]	@ (80190a0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 801908a:	2201      	movs	r2, #1
 801908c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 801908e:	bf00      	nop
 8019090:	370c      	adds	r7, #12
 8019092:	46bd      	mov	sp, r7
 8019094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019098:	4770      	bx	lr
 801909a:	bf00      	nop
 801909c:	50001084 	.word	0x50001084
 80190a0:	50001000 	.word	0x50001000

080190a4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80190a4:	b580      	push	{r7, lr}
 80190a6:	b082      	sub	sp, #8
 80190a8:	af00      	add	r7, sp, #0
 80190aa:	6078      	str	r0, [r7, #4]
 80190ac:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 80190ae:	687b      	ldr	r3, [r7, #4]
 80190b0:	6839      	ldr	r1, [r7, #0]
 80190b2:	4618      	mov	r0, r3
 80190b4:	f000 fc76 	bl	80199a4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 80190b8:	bf00      	nop
 80190ba:	3708      	adds	r7, #8
 80190bc:	46bd      	mov	sp, r7
 80190be:	bd80      	pop	{r7, pc}

080190c0 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 80190c0:	b580      	push	{r7, lr}
 80190c2:	b084      	sub	sp, #16
 80190c4:	af00      	add	r7, sp, #0
 80190c6:	60f8      	str	r0, [r7, #12]
 80190c8:	60b9      	str	r1, [r7, #8]
 80190ca:	607a      	str	r2, [r7, #4]
 80190cc:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 80190ce:	68f8      	ldr	r0, [r7, #12]
 80190d0:	683b      	ldr	r3, [r7, #0]
 80190d2:	687a      	ldr	r2, [r7, #4]
 80190d4:	68b9      	ldr	r1, [r7, #8]
 80190d6:	f000 fdd6 	bl	8019c86 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 80190da:	4603      	mov	r3, r0
}
 80190dc:	4618      	mov	r0, r3
 80190de:	3710      	adds	r7, #16
 80190e0:	46bd      	mov	sp, r7
 80190e2:	bd80      	pop	{r7, pc}

080190e4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 80190e4:	b480      	push	{r7}
 80190e6:	b087      	sub	sp, #28
 80190e8:	af00      	add	r7, sp, #0
 80190ea:	6078      	str	r0, [r7, #4]
    // Because DMA2D access main memory directly, the DCache must be invalidated
    // becuase it could hold a wrong image of the framebuffer. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX
    // in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80190ec:	4b25      	ldr	r3, [pc, #148]	@ (8019184 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 80190ee:	695b      	ldr	r3, [r3, #20]
 80190f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80190f4:	2b00      	cmp	r3, #0
 80190f6:	bf14      	ite	ne
 80190f8:	2301      	movne	r3, #1
 80190fa:	2300      	moveq	r3, #0
 80190fc:	b2db      	uxtb	r3, r3
 80190fe:	2b00      	cmp	r3, #0
 8019100:	d03a      	beq.n	8019178 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x94>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8019102:	4b20      	ldr	r3, [pc, #128]	@ (8019184 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8019104:	2200      	movs	r2, #0
 8019106:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 801910a:	f3bf 8f4f 	dsb	sy
}
 801910e:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8019110:	4b1c      	ldr	r3, [pc, #112]	@ (8019184 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8019112:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019116:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8019118:	697b      	ldr	r3, [r7, #20]
 801911a:	0b5b      	lsrs	r3, r3, #13
 801911c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8019120:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8019122:	697b      	ldr	r3, [r7, #20]
 8019124:	08db      	lsrs	r3, r3, #3
 8019126:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801912a:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 801912c:	693b      	ldr	r3, [r7, #16]
 801912e:	015a      	lsls	r2, r3, #5
 8019130:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8019134:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8019136:	68fa      	ldr	r2, [r7, #12]
 8019138:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 801913a:	4912      	ldr	r1, [pc, #72]	@ (8019184 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 801913c:	4313      	orrs	r3, r2
 801913e:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
      } while (ways-- != 0U);
 8019142:	68fb      	ldr	r3, [r7, #12]
 8019144:	1e5a      	subs	r2, r3, #1
 8019146:	60fa      	str	r2, [r7, #12]
 8019148:	2b00      	cmp	r3, #0
 801914a:	bf14      	ite	ne
 801914c:	2301      	movne	r3, #1
 801914e:	2300      	moveq	r3, #0
 8019150:	b2db      	uxtb	r3, r3
 8019152:	2b00      	cmp	r3, #0
 8019154:	d1ea      	bne.n	801912c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 8019156:	693b      	ldr	r3, [r7, #16]
 8019158:	1e5a      	subs	r2, r3, #1
 801915a:	613a      	str	r2, [r7, #16]
 801915c:	2b00      	cmp	r3, #0
 801915e:	bf14      	ite	ne
 8019160:	2301      	movne	r3, #1
 8019162:	2300      	moveq	r3, #0
 8019164:	b2db      	uxtb	r3, r3
 8019166:	2b00      	cmp	r3, #0
 8019168:	d1db      	bne.n	8019122 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 801916a:	f3bf 8f4f 	dsb	sy
}
 801916e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8019170:	f3bf 8f6f 	isb	sy
}
 8019174:	bf00      	nop
}
 8019176:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8019178:	bf00      	nop
 801917a:	371c      	adds	r7, #28
 801917c:	46bd      	mov	sp, r7
 801917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019182:	4770      	bx	lr
 8019184:	e000ed00 	.word	0xe000ed00

08019188 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8019188:	b480      	push	{r7}
 801918a:	b087      	sub	sp, #28
 801918c:	af00      	add	r7, sp, #0
 801918e:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write-Back cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX in
    // order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8019190:	4b25      	ldr	r3, [pc, #148]	@ (8019228 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8019192:	695b      	ldr	r3, [r3, #20]
 8019194:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8019198:	2b00      	cmp	r3, #0
 801919a:	bf14      	ite	ne
 801919c:	2301      	movne	r3, #1
 801919e:	2300      	moveq	r3, #0
 80191a0:	b2db      	uxtb	r3, r3
 80191a2:	2b00      	cmp	r3, #0
 80191a4:	d03a      	beq.n	801921c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x94>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80191a6:	4b20      	ldr	r3, [pc, #128]	@ (8019228 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 80191a8:	2200      	movs	r2, #0
 80191aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80191ae:	f3bf 8f4f 	dsb	sy
}
 80191b2:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 80191b4:	4b1c      	ldr	r3, [pc, #112]	@ (8019228 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 80191b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80191ba:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80191bc:	697b      	ldr	r3, [r7, #20]
 80191be:	0b5b      	lsrs	r3, r3, #13
 80191c0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80191c4:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80191c6:	697b      	ldr	r3, [r7, #20]
 80191c8:	08db      	lsrs	r3, r3, #3
 80191ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80191ce:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80191d0:	693b      	ldr	r3, [r7, #16]
 80191d2:	015a      	lsls	r2, r3, #5
 80191d4:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80191d8:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80191da:	68fa      	ldr	r2, [r7, #12]
 80191dc:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80191de:	4912      	ldr	r1, [pc, #72]	@ (8019228 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 80191e0:	4313      	orrs	r3, r2
 80191e2:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
      } while (ways-- != 0U);
 80191e6:	68fb      	ldr	r3, [r7, #12]
 80191e8:	1e5a      	subs	r2, r3, #1
 80191ea:	60fa      	str	r2, [r7, #12]
 80191ec:	2b00      	cmp	r3, #0
 80191ee:	bf14      	ite	ne
 80191f0:	2301      	movne	r3, #1
 80191f2:	2300      	moveq	r3, #0
 80191f4:	b2db      	uxtb	r3, r3
 80191f6:	2b00      	cmp	r3, #0
 80191f8:	d1ea      	bne.n	80191d0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 80191fa:	693b      	ldr	r3, [r7, #16]
 80191fc:	1e5a      	subs	r2, r3, #1
 80191fe:	613a      	str	r2, [r7, #16]
 8019200:	2b00      	cmp	r3, #0
 8019202:	bf14      	ite	ne
 8019204:	2301      	movne	r3, #1
 8019206:	2300      	moveq	r3, #0
 8019208:	b2db      	uxtb	r3, r3
 801920a:	2b00      	cmp	r3, #0
 801920c:	d1db      	bne.n	80191c6 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 801920e:	f3bf 8f4f 	dsb	sy
}
 8019212:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8019214:	f3bf 8f6f 	isb	sy
}
 8019218:	bf00      	nop
}
 801921a:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 801921c:	bf00      	nop
 801921e:	371c      	adds	r7, #28
 8019220:	46bd      	mov	sp, r7
 8019222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019226:	4770      	bx	lr
 8019228:	e000ed00 	.word	0xe000ed00

0801922c <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 801922c:	b580      	push	{r7, lr}
 801922e:	b082      	sub	sp, #8
 8019230:	af00      	add	r7, sp, #0
 8019232:	6078      	str	r0, [r7, #4]
        if (!HAL::getInstance())
 8019234:	f7fb f90a 	bl	801444c <_ZN8touchgfx3HAL11getInstanceEv>
 8019238:	4603      	mov	r3, r0
 801923a:	2b00      	cmp	r3, #0
 801923c:	bf0c      	ite	eq
 801923e:	2301      	moveq	r3, #1
 8019240:	2300      	movne	r3, #0
 8019242:	b2db      	uxtb	r3, r3
 8019244:	2b00      	cmp	r3, #0
 8019246:	d132      	bne.n	80192ae <HAL_LTDC_LineEventCallback+0x82>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8019248:	4b1b      	ldr	r3, [pc, #108]	@ (80192b8 <HAL_LTDC_LineEventCallback+0x8c>)
 801924a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801924c:	4a1b      	ldr	r2, [pc, #108]	@ (80192bc <HAL_LTDC_LineEventCallback+0x90>)
 801924e:	8812      	ldrh	r2, [r2, #0]
 8019250:	4293      	cmp	r3, r2
 8019252:	bf0c      	ite	eq
 8019254:	2301      	moveq	r3, #1
 8019256:	2300      	movne	r3, #0
 8019258:	b2db      	uxtb	r3, r3
 801925a:	2b00      	cmp	r3, #0
 801925c:	d017      	beq.n	801928e <HAL_LTDC_LineEventCallback+0x62>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 801925e:	4b18      	ldr	r3, [pc, #96]	@ (80192c0 <HAL_LTDC_LineEventCallback+0x94>)
 8019260:	881b      	ldrh	r3, [r3, #0]
 8019262:	4619      	mov	r1, r3
 8019264:	6878      	ldr	r0, [r7, #4]
 8019266:	f7ef fec9 	bl	8008ffc <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 801926a:	f7fb f8ef 	bl	801444c <_ZN8touchgfx3HAL11getInstanceEv>
 801926e:	4603      	mov	r3, r0
 8019270:	4618      	mov	r0, r3
 8019272:	f7ff fa89 	bl	8018788 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8019276:	f7fd ff89 	bl	801718c <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 801927a:	f7fb f8e7 	bl	801444c <_ZN8touchgfx3HAL11getInstanceEv>
 801927e:	4603      	mov	r3, r0
 8019280:	4618      	mov	r0, r3
 8019282:	f001 f92b 	bl	801a4dc <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8019286:	2000      	movs	r0, #0
 8019288:	f7fd fc0a 	bl	8016aa0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801928c:	e010      	b.n	80192b0 <HAL_LTDC_LineEventCallback+0x84>
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 801928e:	4b0b      	ldr	r3, [pc, #44]	@ (80192bc <HAL_LTDC_LineEventCallback+0x90>)
 8019290:	881b      	ldrh	r3, [r3, #0]
 8019292:	4619      	mov	r1, r3
 8019294:	6878      	ldr	r0, [r7, #4]
 8019296:	f7ef feb1 	bl	8008ffc <HAL_LTDC_ProgramLineEvent>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
 801929a:	f7fb f8d7 	bl	801444c <_ZN8touchgfx3HAL11getInstanceEv>
 801929e:	4603      	mov	r3, r0
 80192a0:	4618      	mov	r0, r3
 80192a2:	f7ff fa63 	bl	801876c <_ZN8touchgfx3HAL17frontPorchEnteredEv>
            GPIO::clear(GPIO::VSYNC_FREQ);
 80192a6:	2000      	movs	r0, #0
 80192a8:	f7fd fc16 	bl	8016ad8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80192ac:	e000      	b.n	80192b0 <HAL_LTDC_LineEventCallback+0x84>
            return;
 80192ae:	bf00      	nop
        }
    }
 80192b0:	3708      	adds	r7, #8
 80192b2:	46bd      	mov	sp, r7
 80192b4:	bd80      	pop	{r7, pc}
 80192b6:	bf00      	nop
 80192b8:	50001000 	.word	0x50001000
 80192bc:	2403421c 	.word	0x2403421c
 80192c0:	2403421e 	.word	0x2403421e

080192c4 <_ZN8touchgfx23CWRVectorRendererRGB888D1Ev>:
 80192c4:	b580      	push	{r7, lr}
 80192c6:	b082      	sub	sp, #8
 80192c8:	af00      	add	r7, sp, #0
 80192ca:	6078      	str	r0, [r7, #4]
 80192cc:	4a0a      	ldr	r2, [pc, #40]	@ (80192f8 <_ZN8touchgfx23CWRVectorRendererRGB888D1Ev+0x34>)
 80192ce:	687b      	ldr	r3, [r7, #4]
 80192d0:	601a      	str	r2, [r3, #0]
 80192d2:	687b      	ldr	r3, [r7, #4]
 80192d4:	3398      	adds	r3, #152	@ 0x98
 80192d6:	4618      	mov	r0, r3
 80192d8:	f000 f876 	bl	80193c8 <_ZN8touchgfx27PainterRGB888LinearGradientD1Ev>
 80192dc:	687b      	ldr	r3, [r7, #4]
 80192de:	3384      	adds	r3, #132	@ 0x84
 80192e0:	4618      	mov	r0, r3
 80192e2:	f000 f83d 	bl	8019360 <_ZN8touchgfx13PainterRGB888D1Ev>
 80192e6:	687b      	ldr	r3, [r7, #4]
 80192e8:	4618      	mov	r0, r3
 80192ea:	f7ff fd21 	bl	8018d30 <_ZN8touchgfx17CWRVectorRendererD1Ev>
 80192ee:	687b      	ldr	r3, [r7, #4]
 80192f0:	4618      	mov	r0, r3
 80192f2:	3708      	adds	r7, #8
 80192f4:	46bd      	mov	sp, r7
 80192f6:	bd80      	pop	{r7, pc}
 80192f8:	0802e814 	.word	0x0802e814

080192fc <_ZN8touchgfx23CWRVectorRendererRGB888D0Ev>:
 80192fc:	b580      	push	{r7, lr}
 80192fe:	b082      	sub	sp, #8
 8019300:	af00      	add	r7, sp, #0
 8019302:	6078      	str	r0, [r7, #4]
 8019304:	6878      	ldr	r0, [r7, #4]
 8019306:	f7ff ffdd 	bl	80192c4 <_ZN8touchgfx23CWRVectorRendererRGB888D1Ev>
 801930a:	21bc      	movs	r1, #188	@ 0xbc
 801930c:	6878      	ldr	r0, [r7, #4]
 801930e:	f012 fba4 	bl	802ba5a <_ZdlPvj>
 8019312:	687b      	ldr	r3, [r7, #4]
 8019314:	4618      	mov	r0, r3
 8019316:	3708      	adds	r7, #8
 8019318:	46bd      	mov	sp, r7
 801931a:	bd80      	pop	{r7, pc}

0801931c <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 801931c:	b580      	push	{r7, lr}
 801931e:	b082      	sub	sp, #8
 8019320:	af00      	add	r7, sp, #0
 8019322:	6078      	str	r0, [r7, #4]
 8019324:	4a05      	ldr	r2, [pc, #20]	@ (801933c <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev+0x20>)
 8019326:	687b      	ldr	r3, [r7, #4]
 8019328:	601a      	str	r2, [r3, #0]
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	4618      	mov	r0, r3
 801932e:	f7ff fc9f 	bl	8018c70 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8019332:	687b      	ldr	r3, [r7, #4]
 8019334:	4618      	mov	r0, r3
 8019336:	3708      	adds	r7, #8
 8019338:	46bd      	mov	sp, r7
 801933a:	bd80      	pop	{r7, pc}
 801933c:	0802e860 	.word	0x0802e860

08019340 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD0Ev>:
 8019340:	b580      	push	{r7, lr}
 8019342:	b082      	sub	sp, #8
 8019344:	af00      	add	r7, sp, #0
 8019346:	6078      	str	r0, [r7, #4]
 8019348:	6878      	ldr	r0, [r7, #4]
 801934a:	f7ff ffe7 	bl	801931c <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>
 801934e:	212c      	movs	r1, #44	@ 0x2c
 8019350:	6878      	ldr	r0, [r7, #4]
 8019352:	f012 fb82 	bl	802ba5a <_ZdlPvj>
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	4618      	mov	r0, r3
 801935a:	3708      	adds	r7, #8
 801935c:	46bd      	mov	sp, r7
 801935e:	bd80      	pop	{r7, pc}

08019360 <_ZN8touchgfx13PainterRGB888D1Ev>:
class PainterRGB888 : public AbstractPainterRGB888, public AbstractPainterColor
 8019360:	b580      	push	{r7, lr}
 8019362:	b082      	sub	sp, #8
 8019364:	af00      	add	r7, sp, #0
 8019366:	6078      	str	r0, [r7, #4]
 8019368:	4a09      	ldr	r2, [pc, #36]	@ (8019390 <_ZN8touchgfx13PainterRGB888D1Ev+0x30>)
 801936a:	687b      	ldr	r3, [r7, #4]
 801936c:	601a      	str	r2, [r3, #0]
 801936e:	4a09      	ldr	r2, [pc, #36]	@ (8019394 <_ZN8touchgfx13PainterRGB888D1Ev+0x34>)
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	609a      	str	r2, [r3, #8]
 8019374:	687b      	ldr	r3, [r7, #4]
 8019376:	3308      	adds	r3, #8
 8019378:	4618      	mov	r0, r3
 801937a:	f7ff fa3b 	bl	80187f4 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 801937e:	687b      	ldr	r3, [r7, #4]
 8019380:	4618      	mov	r0, r3
 8019382:	f7ff fbb7 	bl	8018af4 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8019386:	687b      	ldr	r3, [r7, #4]
 8019388:	4618      	mov	r0, r3
 801938a:	3708      	adds	r7, #8
 801938c:	46bd      	mov	sp, r7
 801938e:	bd80      	pop	{r7, pc}
 8019390:	0802ece0 	.word	0x0802ece0
 8019394:	0802ed04 	.word	0x0802ed04

08019398 <_ZThn8_N8touchgfx13PainterRGB888D1Ev>:
 8019398:	f1a0 0008 	sub.w	r0, r0, #8
 801939c:	e7e0      	b.n	8019360 <_ZN8touchgfx13PainterRGB888D1Ev>
 801939e:	bf00      	nop

080193a0 <_ZN8touchgfx13PainterRGB888D0Ev>:
 80193a0:	b580      	push	{r7, lr}
 80193a2:	b082      	sub	sp, #8
 80193a4:	af00      	add	r7, sp, #0
 80193a6:	6078      	str	r0, [r7, #4]
 80193a8:	6878      	ldr	r0, [r7, #4]
 80193aa:	f7ff ffd9 	bl	8019360 <_ZN8touchgfx13PainterRGB888D1Ev>
 80193ae:	2114      	movs	r1, #20
 80193b0:	6878      	ldr	r0, [r7, #4]
 80193b2:	f012 fb52 	bl	802ba5a <_ZdlPvj>
 80193b6:	687b      	ldr	r3, [r7, #4]
 80193b8:	4618      	mov	r0, r3
 80193ba:	3708      	adds	r7, #8
 80193bc:	46bd      	mov	sp, r7
 80193be:	bd80      	pop	{r7, pc}

080193c0 <_ZThn8_N8touchgfx13PainterRGB888D0Ev>:
 80193c0:	f1a0 0008 	sub.w	r0, r0, #8
 80193c4:	e7ec      	b.n	80193a0 <_ZN8touchgfx13PainterRGB888D0Ev>
	...

080193c8 <_ZN8touchgfx27PainterRGB888LinearGradientD1Ev>:
 80193c8:	b580      	push	{r7, lr}
 80193ca:	b082      	sub	sp, #8
 80193cc:	af00      	add	r7, sp, #0
 80193ce:	6078      	str	r0, [r7, #4]
 80193d0:	4a05      	ldr	r2, [pc, #20]	@ (80193e8 <_ZN8touchgfx27PainterRGB888LinearGradientD1Ev+0x20>)
 80193d2:	687b      	ldr	r3, [r7, #4]
 80193d4:	601a      	str	r2, [r3, #0]
 80193d6:	687b      	ldr	r3, [r7, #4]
 80193d8:	4618      	mov	r0, r3
 80193da:	f7ff fac7 	bl	801896c <_ZN8touchgfx29AbstractPainterLinearGradientD1Ev>
 80193de:	687b      	ldr	r3, [r7, #4]
 80193e0:	4618      	mov	r0, r3
 80193e2:	3708      	adds	r7, #8
 80193e4:	46bd      	mov	sp, r7
 80193e6:	bd80      	pop	{r7, pc}
 80193e8:	0802ed18 	.word	0x0802ed18

080193ec <_ZN8touchgfx27PainterRGB888LinearGradientD0Ev>:
 80193ec:	b580      	push	{r7, lr}
 80193ee:	b082      	sub	sp, #8
 80193f0:	af00      	add	r7, sp, #0
 80193f2:	6078      	str	r0, [r7, #4]
 80193f4:	6878      	ldr	r0, [r7, #4]
 80193f6:	f7ff ffe7 	bl	80193c8 <_ZN8touchgfx27PainterRGB888LinearGradientD1Ev>
 80193fa:	2124      	movs	r1, #36	@ 0x24
 80193fc:	6878      	ldr	r0, [r7, #4]
 80193fe:	f012 fb2c 	bl	802ba5a <_ZdlPvj>
 8019402:	687b      	ldr	r3, [r7, #4]
 8019404:	4618      	mov	r0, r3
 8019406:	3708      	adds	r7, #8
 8019408:	46bd      	mov	sp, r7
 801940a:	bd80      	pop	{r7, pc}

0801940c <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 801940c:	8880      	ldrh	r0, [r0, #4]
 801940e:	4770      	bx	lr

08019410 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8019410:	b570      	push	{r4, r5, r6, lr}
 8019412:	6803      	ldr	r3, [r0, #0]
 8019414:	460c      	mov	r4, r1
 8019416:	2100      	movs	r1, #0
 8019418:	4605      	mov	r5, r0
 801941a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801941c:	4798      	blx	r3
 801941e:	4606      	mov	r6, r0
 8019420:	682b      	ldr	r3, [r5, #0]
 8019422:	4628      	mov	r0, r5
 8019424:	1ba4      	subs	r4, r4, r6
 8019426:	6a1b      	ldr	r3, [r3, #32]
 8019428:	b2a4      	uxth	r4, r4
 801942a:	4798      	blx	r3
 801942c:	fbb4 f0f0 	udiv	r0, r4, r0
 8019430:	bd70      	pop	{r4, r5, r6, pc}

08019432 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8019432:	2300      	movs	r3, #0
 8019434:	8083      	strh	r3, [r0, #4]
 8019436:	4770      	bx	lr

08019438 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8019438:	b510      	push	{r4, lr}
 801943a:	6803      	ldr	r3, [r0, #0]
 801943c:	4604      	mov	r4, r0
 801943e:	8881      	ldrh	r1, [r0, #4]
 8019440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019442:	4798      	blx	r3
 8019444:	88a3      	ldrh	r3, [r4, #4]
 8019446:	3301      	adds	r3, #1
 8019448:	80a3      	strh	r3, [r4, #4]
 801944a:	bd10      	pop	{r4, pc}

0801944c <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 801944c:	6803      	ldr	r3, [r0, #0]
 801944e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019450:	4718      	bx	r3

08019452 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8019452:	4770      	bx	lr

08019454 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8019454:	4a02      	ldr	r2, [pc, #8]	@ (8019460 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8019456:	6002      	str	r2, [r0, #0]
 8019458:	2200      	movs	r2, #0
 801945a:	8082      	strh	r2, [r0, #4]
 801945c:	4770      	bx	lr
 801945e:	bf00      	nop
 8019460:	0802ea64 	.word	0x0802ea64

08019464 <_ZN8touchgfx9Container13getFirstChildEv>:
 8019464:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8019466:	4770      	bx	lr

08019468 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8019468:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801946a:	2000      	movs	r0, #0
 801946c:	b12b      	cbz	r3, 801947a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801946e:	b920      	cbnz	r0, 801947a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8019470:	1a5a      	subs	r2, r3, r1
 8019472:	699b      	ldr	r3, [r3, #24]
 8019474:	4250      	negs	r0, r2
 8019476:	4150      	adcs	r0, r2
 8019478:	e7f8      	b.n	801946c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 801947a:	4770      	bx	lr

0801947c <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 801947c:	2300      	movs	r3, #0
 801947e:	6148      	str	r0, [r1, #20]
 8019480:	618b      	str	r3, [r1, #24]
 8019482:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8019484:	b913      	cbnz	r3, 801948c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8019486:	6281      	str	r1, [r0, #40]	@ 0x28
 8019488:	4770      	bx	lr
 801948a:	4613      	mov	r3, r2
 801948c:	699a      	ldr	r2, [r3, #24]
 801948e:	2a00      	cmp	r2, #0
 8019490:	d1fb      	bne.n	801948a <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8019492:	6199      	str	r1, [r3, #24]
 8019494:	4770      	bx	lr

08019496 <_ZN8touchgfx9Container9removeAllEv>:
 8019496:	2200      	movs	r2, #0
 8019498:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801949a:	b123      	cbz	r3, 80194a6 <_ZN8touchgfx9Container9removeAllEv+0x10>
 801949c:	6999      	ldr	r1, [r3, #24]
 801949e:	6281      	str	r1, [r0, #40]	@ 0x28
 80194a0:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80194a4:	e7f8      	b.n	8019498 <_ZN8touchgfx9Container9removeAllEv+0x2>
 80194a6:	4770      	bx	lr

080194a8 <_ZN8touchgfx9Container6unlinkEv>:
 80194a8:	2300      	movs	r3, #0
 80194aa:	6283      	str	r3, [r0, #40]	@ 0x28
 80194ac:	4770      	bx	lr

080194ae <_ZNK8touchgfx9Container12getSolidRectEv>:
 80194ae:	2200      	movs	r2, #0
 80194b0:	8002      	strh	r2, [r0, #0]
 80194b2:	8042      	strh	r2, [r0, #2]
 80194b4:	8082      	strh	r2, [r0, #4]
 80194b6:	80c2      	strh	r2, [r0, #6]
 80194b8:	4770      	bx	lr

080194ba <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 80194ba:	b570      	push	{r4, r5, r6, lr}
 80194bc:	460d      	mov	r5, r1
 80194be:	4616      	mov	r6, r2
 80194c0:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80194c2:	b13c      	cbz	r4, 80194d4 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 80194c4:	6823      	ldr	r3, [r4, #0]
 80194c6:	4620      	mov	r0, r4
 80194c8:	4632      	mov	r2, r6
 80194ca:	4629      	mov	r1, r5
 80194cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80194ce:	4798      	blx	r3
 80194d0:	69a4      	ldr	r4, [r4, #24]
 80194d2:	e7f6      	b.n	80194c2 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 80194d4:	bd70      	pop	{r4, r5, r6, pc}

080194d6 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 80194d6:	b538      	push	{r3, r4, r5, lr}
 80194d8:	460d      	mov	r5, r1
 80194da:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80194dc:	b134      	cbz	r4, 80194ec <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 80194de:	682b      	ldr	r3, [r5, #0]
 80194e0:	4621      	mov	r1, r4
 80194e2:	4628      	mov	r0, r5
 80194e4:	689b      	ldr	r3, [r3, #8]
 80194e6:	4798      	blx	r3
 80194e8:	69a4      	ldr	r4, [r4, #24]
 80194ea:	e7f7      	b.n	80194dc <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 80194ec:	bd38      	pop	{r3, r4, r5, pc}

080194ee <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 80194ee:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80194f0:	b19b      	cbz	r3, 801951a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80194f2:	428b      	cmp	r3, r1
 80194f4:	d109      	bne.n	801950a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 80194f6:	699a      	ldr	r2, [r3, #24]
 80194f8:	2100      	movs	r1, #0
 80194fa:	6159      	str	r1, [r3, #20]
 80194fc:	6282      	str	r2, [r0, #40]	@ 0x28
 80194fe:	b902      	cbnz	r2, 8019502 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8019500:	4770      	bx	lr
 8019502:	6199      	str	r1, [r3, #24]
 8019504:	4770      	bx	lr
 8019506:	4613      	mov	r3, r2
 8019508:	b13a      	cbz	r2, 801951a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801950a:	699a      	ldr	r2, [r3, #24]
 801950c:	428a      	cmp	r2, r1
 801950e:	d1fa      	bne.n	8019506 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8019510:	698a      	ldr	r2, [r1, #24]
 8019512:	619a      	str	r2, [r3, #24]
 8019514:	2300      	movs	r3, #0
 8019516:	e9c1 3305 	strd	r3, r3, [r1, #20]
 801951a:	4770      	bx	lr

0801951c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 801951c:	b410      	push	{r4}
 801951e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8019520:	4604      	mov	r4, r0
 8019522:	b92b      	cbnz	r3, 8019530 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8019524:	6803      	ldr	r3, [r0, #0]
 8019526:	4611      	mov	r1, r2
 8019528:	f85d 4b04 	ldr.w	r4, [sp], #4
 801952c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801952e:	4718      	bx	r3
 8019530:	b941      	cbnz	r1, 8019544 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8019532:	6193      	str	r3, [r2, #24]
 8019534:	6282      	str	r2, [r0, #40]	@ 0x28
 8019536:	6154      	str	r4, [r2, #20]
 8019538:	f85d 4b04 	ldr.w	r4, [sp], #4
 801953c:	4770      	bx	lr
 801953e:	4603      	mov	r3, r0
 8019540:	2800      	cmp	r0, #0
 8019542:	d0f9      	beq.n	8019538 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8019544:	4299      	cmp	r1, r3
 8019546:	6998      	ldr	r0, [r3, #24]
 8019548:	d1f9      	bne.n	801953e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 801954a:	6190      	str	r0, [r2, #24]
 801954c:	618a      	str	r2, [r1, #24]
 801954e:	e7f2      	b.n	8019536 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08019550 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8019550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019554:	461f      	mov	r7, r3
 8019556:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 801955a:	460d      	mov	r5, r1
 801955c:	4616      	mov	r6, r2
 801955e:	b103      	cbz	r3, 8019562 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8019560:	6038      	str	r0, [r7, #0]
 8019562:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8019564:	b314      	cbz	r4, 80195ac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8019566:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 801956a:	b1eb      	cbz	r3, 80195a8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801956c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8019570:	428d      	cmp	r5, r1
 8019572:	db19      	blt.n	80195a8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8019574:	b289      	uxth	r1, r1
 8019576:	8923      	ldrh	r3, [r4, #8]
 8019578:	440b      	add	r3, r1
 801957a:	b21b      	sxth	r3, r3
 801957c:	429d      	cmp	r5, r3
 801957e:	da13      	bge.n	80195a8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8019580:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8019584:	4296      	cmp	r6, r2
 8019586:	db0f      	blt.n	80195a8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8019588:	b292      	uxth	r2, r2
 801958a:	8963      	ldrh	r3, [r4, #10]
 801958c:	4413      	add	r3, r2
 801958e:	b21b      	sxth	r3, r3
 8019590:	429e      	cmp	r6, r3
 8019592:	da09      	bge.n	80195a8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8019594:	6823      	ldr	r3, [r4, #0]
 8019596:	1ab2      	subs	r2, r6, r2
 8019598:	1a69      	subs	r1, r5, r1
 801959a:	4620      	mov	r0, r4
 801959c:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 80195a0:	b212      	sxth	r2, r2
 80195a2:	463b      	mov	r3, r7
 80195a4:	b209      	sxth	r1, r1
 80195a6:	47c0      	blx	r8
 80195a8:	69a4      	ldr	r4, [r4, #24]
 80195aa:	e7db      	b.n	8019564 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 80195ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080195b0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 80195b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195b4:	4c6d      	ldr	r4, [pc, #436]	@ (801976c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 80195b6:	b0a1      	sub	sp, #132	@ 0x84
 80195b8:	4606      	mov	r6, r0
 80195ba:	6824      	ldr	r4, [r4, #0]
 80195bc:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 80195be:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 80195c2:	2400      	movs	r4, #0
 80195c4:	9303      	str	r3, [sp, #12]
 80195c6:	802c      	strh	r4, [r5, #0]
 80195c8:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 80195ca:	802c      	strh	r4, [r5, #0]
 80195cc:	601c      	str	r4, [r3, #0]
 80195ce:	e9cd 1201 	strd	r1, r2, [sp, #4]
 80195d2:	f7ff ffbd 	bl	8019550 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80195d6:	f1b9 0f03 	cmp.w	r9, #3
 80195da:	f340 80c1 	ble.w	8019760 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 80195de:	4631      	mov	r1, r6
 80195e0:	a80c      	add	r0, sp, #48	@ 0x30
 80195e2:	f005 fd45 	bl	801f070 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80195e6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 80195ea:	9306      	str	r3, [sp, #24]
 80195ec:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80195f0:	9307      	str	r3, [sp, #28]
 80195f2:	9b03      	ldr	r3, [sp, #12]
 80195f4:	f8d3 a000 	ldr.w	sl, [r3]
 80195f8:	f1ba 0f00 	cmp.w	sl, #0
 80195fc:	f000 80b3 	beq.w	8019766 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8019600:	4651      	mov	r1, sl
 8019602:	a810      	add	r0, sp, #64	@ 0x40
 8019604:	f005 fd34 	bl	801f070 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019608:	2002      	movs	r0, #2
 801960a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 801960e:	9b01      	ldr	r3, [sp, #4]
 8019610:	9a06      	ldr	r2, [sp, #24]
 8019612:	fb91 f1f0 	sdiv	r1, r1, r0
 8019616:	189d      	adds	r5, r3, r2
 8019618:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 801961c:	9a07      	ldr	r2, [sp, #28]
 801961e:	4419      	add	r1, r3
 8019620:	9b02      	ldr	r3, [sp, #8]
 8019622:	4413      	add	r3, r2
 8019624:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 8019628:	1a6d      	subs	r5, r5, r1
 801962a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 801962e:	fb92 f2f0 	sdiv	r2, r2, r0
 8019632:	440a      	add	r2, r1
 8019634:	1a9b      	subs	r3, r3, r2
 8019636:	435b      	muls	r3, r3
 8019638:	fb05 3505 	mla	r5, r5, r5, r3
 801963c:	4f4c      	ldr	r7, [pc, #304]	@ (8019770 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 801963e:	ac10      	add	r4, sp, #64	@ 0x40
 8019640:	f1b9 0f0c 	cmp.w	r9, #12
 8019644:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8019646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019648:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801964a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801964c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801964e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019650:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8019654:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8019658:	f04f 0303 	mov.w	r3, #3
 801965c:	bfd8      	it	le
 801965e:	f109 32ff 	addle.w	r2, r9, #4294967295
 8019662:	f04f 0400 	mov.w	r4, #0
 8019666:	f8cd 9000 	str.w	r9, [sp]
 801966a:	bfcc      	ite	gt
 801966c:	4698      	movgt	r8, r3
 801966e:	fb92 f8f3 	sdivle	r8, r2, r3
 8019672:	1c63      	adds	r3, r4, #1
 8019674:	aa10      	add	r2, sp, #64	@ 0x40
 8019676:	f004 0401 	and.w	r4, r4, #1
 801967a:	f04f 0b00 	mov.w	fp, #0
 801967e:	9308      	str	r3, [sp, #32]
 8019680:	9b00      	ldr	r3, [sp, #0]
 8019682:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8019686:	fb93 f3f8 	sdiv	r3, r3, r8
 801968a:	3404      	adds	r4, #4
 801968c:	b29b      	uxth	r3, r3
 801968e:	9304      	str	r3, [sp, #16]
 8019690:	9a04      	ldr	r2, [sp, #16]
 8019692:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8019696:	fb13 f302 	smulbb	r3, r3, r2
 801969a:	9a01      	ldr	r2, [sp, #4]
 801969c:	b29b      	uxth	r3, r3
 801969e:	1899      	adds	r1, r3, r2
 80196a0:	9305      	str	r3, [sp, #20]
 80196a2:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80196a6:	b209      	sxth	r1, r1
 80196a8:	4299      	cmp	r1, r3
 80196aa:	db4d      	blt.n	8019748 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80196ac:	8932      	ldrh	r2, [r6, #8]
 80196ae:	4413      	add	r3, r2
 80196b0:	b21b      	sxth	r3, r3
 80196b2:	4299      	cmp	r1, r3
 80196b4:	da48      	bge.n	8019748 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80196b6:	9b04      	ldr	r3, [sp, #16]
 80196b8:	6827      	ldr	r7, [r4, #0]
 80196ba:	fb17 f703 	smulbb	r7, r7, r3
 80196be:	9b02      	ldr	r3, [sp, #8]
 80196c0:	b2bf      	uxth	r7, r7
 80196c2:	18fa      	adds	r2, r7, r3
 80196c4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80196c8:	b212      	sxth	r2, r2
 80196ca:	429a      	cmp	r2, r3
 80196cc:	db3c      	blt.n	8019748 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80196ce:	8970      	ldrh	r0, [r6, #10]
 80196d0:	4403      	add	r3, r0
 80196d2:	b21b      	sxth	r3, r3
 80196d4:	429a      	cmp	r2, r3
 80196d6:	da37      	bge.n	8019748 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80196d8:	2300      	movs	r3, #0
 80196da:	4630      	mov	r0, r6
 80196dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80196de:	ab0b      	add	r3, sp, #44	@ 0x2c
 80196e0:	f7ff ff36 	bl	8019550 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80196e4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80196e6:	b37a      	cbz	r2, 8019748 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80196e8:	4552      	cmp	r2, sl
 80196ea:	d02d      	beq.n	8019748 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80196ec:	4611      	mov	r1, r2
 80196ee:	a80e      	add	r0, sp, #56	@ 0x38
 80196f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80196f2:	f005 fcbd 	bl	801f070 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80196f6:	f04f 0e02 	mov.w	lr, #2
 80196fa:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 80196fe:	9a06      	ldr	r2, [sp, #24]
 8019700:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 8019704:	9b01      	ldr	r3, [sp, #4]
 8019706:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 801970a:	4413      	add	r3, r2
 801970c:	9a07      	ldr	r2, [sp, #28]
 801970e:	fb91 f1fe 	sdiv	r1, r1, lr
 8019712:	fb9c fcfe 	sdiv	ip, ip, lr
 8019716:	4401      	add	r1, r0
 8019718:	1a58      	subs	r0, r3, r1
 801971a:	9b02      	ldr	r3, [sp, #8]
 801971c:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 8019720:	4413      	add	r3, r2
 8019722:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019724:	448c      	add	ip, r1
 8019726:	eba3 030c 	sub.w	r3, r3, ip
 801972a:	435b      	muls	r3, r3
 801972c:	fb00 3300 	mla	r3, r0, r0, r3
 8019730:	42ab      	cmp	r3, r5
 8019732:	d208      	bcs.n	8019746 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8019734:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8019736:	461d      	mov	r5, r3
 8019738:	9803      	ldr	r0, [sp, #12]
 801973a:	6001      	str	r1, [r0, #0]
 801973c:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 801973e:	9805      	ldr	r0, [sp, #20]
 8019740:	8008      	strh	r0, [r1, #0]
 8019742:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8019744:	800f      	strh	r7, [r1, #0]
 8019746:	4692      	mov	sl, r2
 8019748:	f10b 0b01 	add.w	fp, fp, #1
 801974c:	3408      	adds	r4, #8
 801974e:	f1bb 0f04 	cmp.w	fp, #4
 8019752:	d19d      	bne.n	8019690 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8019754:	9b00      	ldr	r3, [sp, #0]
 8019756:	9c08      	ldr	r4, [sp, #32]
 8019758:	444b      	add	r3, r9
 801975a:	4544      	cmp	r4, r8
 801975c:	9300      	str	r3, [sp, #0]
 801975e:	d188      	bne.n	8019672 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8019760:	b021      	add	sp, #132	@ 0x84
 8019762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019766:	f04f 35ff 	mov.w	r5, #4294967295
 801976a:	e767      	b.n	801963c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 801976c:	2403422c 	.word	0x2403422c
 8019770:	0802df00 	.word	0x0802df00

08019774 <_ZN8touchgfx4RectaNERKS0_>:
 8019774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019778:	f9b1 7000 	ldrsh.w	r7, [r1]
 801977c:	888c      	ldrh	r4, [r1, #4]
 801977e:	f9b0 9000 	ldrsh.w	r9, [r0]
 8019782:	443c      	add	r4, r7
 8019784:	b2a4      	uxth	r4, r4
 8019786:	fa0f f884 	sxth.w	r8, r4
 801978a:	45c1      	cmp	r9, r8
 801978c:	da2f      	bge.n	80197ee <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801978e:	8882      	ldrh	r2, [r0, #4]
 8019790:	444a      	add	r2, r9
 8019792:	b292      	uxth	r2, r2
 8019794:	fa0f fe82 	sxth.w	lr, r2
 8019798:	4577      	cmp	r7, lr
 801979a:	da28      	bge.n	80197ee <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801979c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80197a0:	88cb      	ldrh	r3, [r1, #6]
 80197a2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80197a6:	442b      	add	r3, r5
 80197a8:	b21b      	sxth	r3, r3
 80197aa:	429e      	cmp	r6, r3
 80197ac:	da1f      	bge.n	80197ee <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80197ae:	88c3      	ldrh	r3, [r0, #6]
 80197b0:	4433      	add	r3, r6
 80197b2:	b29b      	uxth	r3, r3
 80197b4:	fa0f fc83 	sxth.w	ip, r3
 80197b8:	4565      	cmp	r5, ip
 80197ba:	da18      	bge.n	80197ee <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80197bc:	454f      	cmp	r7, r9
 80197be:	bfb8      	it	lt
 80197c0:	464f      	movlt	r7, r9
 80197c2:	42b5      	cmp	r5, r6
 80197c4:	bfb8      	it	lt
 80197c6:	4635      	movlt	r5, r6
 80197c8:	45f0      	cmp	r8, lr
 80197ca:	bfd8      	it	le
 80197cc:	4622      	movle	r2, r4
 80197ce:	1bd2      	subs	r2, r2, r7
 80197d0:	8082      	strh	r2, [r0, #4]
 80197d2:	884a      	ldrh	r2, [r1, #2]
 80197d4:	88c9      	ldrh	r1, [r1, #6]
 80197d6:	8007      	strh	r7, [r0, #0]
 80197d8:	440a      	add	r2, r1
 80197da:	8045      	strh	r5, [r0, #2]
 80197dc:	b292      	uxth	r2, r2
 80197de:	b211      	sxth	r1, r2
 80197e0:	458c      	cmp	ip, r1
 80197e2:	bfa8      	it	ge
 80197e4:	4613      	movge	r3, r2
 80197e6:	1b5b      	subs	r3, r3, r5
 80197e8:	80c3      	strh	r3, [r0, #6]
 80197ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80197ee:	2300      	movs	r3, #0
 80197f0:	8003      	strh	r3, [r0, #0]
 80197f2:	8043      	strh	r3, [r0, #2]
 80197f4:	8083      	strh	r3, [r0, #4]
 80197f6:	80c3      	strh	r3, [r0, #6]
 80197f8:	e7f7      	b.n	80197ea <_ZN8touchgfx4RectaNERKS0_+0x76>

080197fa <_ZNK8touchgfx4Rect7isEmptyEv>:
 80197fa:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80197fe:	2b00      	cmp	r3, #0
 8019800:	dd06      	ble.n	8019810 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8019802:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8019806:	2800      	cmp	r0, #0
 8019808:	bfcc      	ite	gt
 801980a:	2000      	movgt	r0, #0
 801980c:	2001      	movle	r0, #1
 801980e:	4770      	bx	lr
 8019810:	2001      	movs	r0, #1
 8019812:	4770      	bx	lr

08019814 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8019814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019818:	2300      	movs	r3, #0
 801981a:	4604      	mov	r4, r0
 801981c:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 801981e:	8003      	strh	r3, [r0, #0]
 8019820:	8043      	strh	r3, [r0, #2]
 8019822:	8083      	strh	r3, [r0, #4]
 8019824:	80c3      	strh	r3, [r0, #6]
 8019826:	2d00      	cmp	r5, #0
 8019828:	d040      	beq.n	80198ac <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801982a:	1d28      	adds	r0, r5, #4
 801982c:	f7ff ffe5 	bl	80197fa <_ZNK8touchgfx4Rect7isEmptyEv>
 8019830:	b988      	cbnz	r0, 8019856 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8019832:	4620      	mov	r0, r4
 8019834:	f7ff ffe1 	bl	80197fa <_ZNK8touchgfx4Rect7isEmptyEv>
 8019838:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801983c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8019840:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8019844:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8019848:	b138      	cbz	r0, 801985a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801984a:	8022      	strh	r2, [r4, #0]
 801984c:	8063      	strh	r3, [r4, #2]
 801984e:	f8a4 e004 	strh.w	lr, [r4, #4]
 8019852:	f8a4 c006 	strh.w	ip, [r4, #6]
 8019856:	69ad      	ldr	r5, [r5, #24]
 8019858:	e7e5      	b.n	8019826 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801985a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801985e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8019862:	4290      	cmp	r0, r2
 8019864:	4607      	mov	r7, r0
 8019866:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801986a:	460e      	mov	r6, r1
 801986c:	bfa8      	it	ge
 801986e:	4617      	movge	r7, r2
 8019870:	4299      	cmp	r1, r3
 8019872:	4472      	add	r2, lr
 8019874:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8019878:	bfa8      	it	ge
 801987a:	461e      	movge	r6, r3
 801987c:	4440      	add	r0, r8
 801987e:	4471      	add	r1, lr
 8019880:	4463      	add	r3, ip
 8019882:	b200      	sxth	r0, r0
 8019884:	8027      	strh	r7, [r4, #0]
 8019886:	b212      	sxth	r2, r2
 8019888:	8066      	strh	r6, [r4, #2]
 801988a:	b209      	sxth	r1, r1
 801988c:	b21b      	sxth	r3, r3
 801988e:	4290      	cmp	r0, r2
 8019890:	bfac      	ite	ge
 8019892:	ebc7 0200 	rsbge	r2, r7, r0
 8019896:	ebc7 0202 	rsblt	r2, r7, r2
 801989a:	4299      	cmp	r1, r3
 801989c:	bfac      	ite	ge
 801989e:	ebc6 0301 	rsbge	r3, r6, r1
 80198a2:	ebc6 0303 	rsblt	r3, r6, r3
 80198a6:	80a2      	strh	r2, [r4, #4]
 80198a8:	80e3      	strh	r3, [r4, #6]
 80198aa:	e7d4      	b.n	8019856 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80198ac:	4620      	mov	r0, r4
 80198ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080198b2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80198b2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80198b6:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 80198ba:	b383      	cbz	r3, 801991e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80198bc:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80198be:	b374      	cbz	r4, 801991e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80198c0:	f9b1 5000 	ldrsh.w	r5, [r1]
 80198c4:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80198c8:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80198cc:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80198d0:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80198d4:	b303      	cbz	r3, 8019918 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80198d6:	4668      	mov	r0, sp
 80198d8:	1d21      	adds	r1, r4, #4
 80198da:	f8ad 5000 	strh.w	r5, [sp]
 80198de:	f8ad 6002 	strh.w	r6, [sp, #2]
 80198e2:	f8ad 7004 	strh.w	r7, [sp, #4]
 80198e6:	f8ad 8006 	strh.w	r8, [sp, #6]
 80198ea:	f7ff ff43 	bl	8019774 <_ZN8touchgfx4RectaNERKS0_>
 80198ee:	4668      	mov	r0, sp
 80198f0:	f7ff ff83 	bl	80197fa <_ZNK8touchgfx4Rect7isEmptyEv>
 80198f4:	b980      	cbnz	r0, 8019918 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80198f6:	f8bd 3000 	ldrh.w	r3, [sp]
 80198fa:	4669      	mov	r1, sp
 80198fc:	88a2      	ldrh	r2, [r4, #4]
 80198fe:	4620      	mov	r0, r4
 8019900:	1a9b      	subs	r3, r3, r2
 8019902:	88e2      	ldrh	r2, [r4, #6]
 8019904:	f8ad 3000 	strh.w	r3, [sp]
 8019908:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801990c:	1a9b      	subs	r3, r3, r2
 801990e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8019912:	6823      	ldr	r3, [r4, #0]
 8019914:	689b      	ldr	r3, [r3, #8]
 8019916:	4798      	blx	r3
 8019918:	69a4      	ldr	r4, [r4, #24]
 801991a:	2c00      	cmp	r4, #0
 801991c:	d1d8      	bne.n	80198d0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801991e:	b002      	add	sp, #8
 8019920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019924 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8019924:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019926:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 801992a:	460d      	mov	r5, r1
 801992c:	4616      	mov	r6, r2
 801992e:	b323      	cbz	r3, 801997a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8019930:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8019932:	b314      	cbz	r4, 801997a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8019934:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8019938:	b1eb      	cbz	r3, 8019976 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801993a:	6828      	ldr	r0, [r5, #0]
 801993c:	466b      	mov	r3, sp
 801993e:	6869      	ldr	r1, [r5, #4]
 8019940:	c303      	stmia	r3!, {r0, r1}
 8019942:	4668      	mov	r0, sp
 8019944:	1d21      	adds	r1, r4, #4
 8019946:	f7ff ff15 	bl	8019774 <_ZN8touchgfx4RectaNERKS0_>
 801994a:	4668      	mov	r0, sp
 801994c:	f7ff ff55 	bl	80197fa <_ZNK8touchgfx4Rect7isEmptyEv>
 8019950:	b988      	cbnz	r0, 8019976 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8019952:	f8bd 3000 	ldrh.w	r3, [sp]
 8019956:	4669      	mov	r1, sp
 8019958:	88a2      	ldrh	r2, [r4, #4]
 801995a:	4620      	mov	r0, r4
 801995c:	1a9b      	subs	r3, r3, r2
 801995e:	88e2      	ldrh	r2, [r4, #6]
 8019960:	f8ad 3000 	strh.w	r3, [sp]
 8019964:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019968:	1a9b      	subs	r3, r3, r2
 801996a:	4632      	mov	r2, r6
 801996c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8019970:	6823      	ldr	r3, [r4, #0]
 8019972:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8019974:	4798      	blx	r3
 8019976:	69a4      	ldr	r4, [r4, #24]
 8019978:	e7db      	b.n	8019932 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801997a:	b002      	add	sp, #8
 801997c:	bd70      	pop	{r4, r5, r6, pc}

0801997e <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 801997e:	4770      	bx	lr

08019980 <_ZN8touchgfx3HAL10FlushCacheEv>:
 8019980:	4770      	bx	lr

08019982 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8019982:	6803      	ldr	r3, [r0, #0]
 8019984:	b513      	push	{r0, r1, r4, lr}
 8019986:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 801998a:	2300      	movs	r3, #0
 801998c:	e9cd 3300 	strd	r3, r3, [sp]
 8019990:	466b      	mov	r3, sp
 8019992:	47a0      	blx	r4
 8019994:	b002      	add	sp, #8
 8019996:	bd10      	pop	{r4, pc}

08019998 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8019998:	2301      	movs	r3, #1
 801999a:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 801999e:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 80199a2:	4770      	bx	lr

080199a4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80199a4:	2301      	movs	r3, #1
 80199a6:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 80199aa:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 80199ae:	4770      	bx	lr

080199b0 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80199b0:	6843      	ldr	r3, [r0, #4]
 80199b2:	2201      	movs	r2, #1
 80199b4:	725a      	strb	r2, [r3, #9]
 80199b6:	6840      	ldr	r0, [r0, #4]
 80199b8:	6803      	ldr	r3, [r0, #0]
 80199ba:	691b      	ldr	r3, [r3, #16]
 80199bc:	4718      	bx	r3

080199be <_ZN8touchgfx3HAL8flushDMAEv>:
 80199be:	6840      	ldr	r0, [r0, #4]
 80199c0:	6803      	ldr	r3, [r0, #0]
 80199c2:	689b      	ldr	r3, [r3, #8]
 80199c4:	4718      	bx	r3

080199c6 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 80199c6:	b530      	push	{r4, r5, lr}
 80199c8:	b08b      	sub	sp, #44	@ 0x2c
 80199ca:	6804      	ldr	r4, [r0, #0]
 80199cc:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 80199d0:	9509      	str	r5, [sp, #36]	@ 0x24
 80199d2:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 80199d6:	9508      	str	r5, [sp, #32]
 80199d8:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 80199dc:	9507      	str	r5, [sp, #28]
 80199de:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 80199e2:	9506      	str	r5, [sp, #24]
 80199e4:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 80199e8:	9505      	str	r5, [sp, #20]
 80199ea:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 80199ee:	9504      	str	r5, [sp, #16]
 80199f0:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 80199f4:	9503      	str	r5, [sp, #12]
 80199f6:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 80199fa:	9502      	str	r5, [sp, #8]
 80199fc:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8019a00:	e9cd 3500 	strd	r3, r5, [sp]
 8019a04:	4613      	mov	r3, r2
 8019a06:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 8019a08:	2200      	movs	r2, #0
 8019a0a:	47a0      	blx	r4
 8019a0c:	b00b      	add	sp, #44	@ 0x2c
 8019a0e:	bd30      	pop	{r4, r5, pc}

08019a10 <_ZN8touchgfx3HAL10beginFrameEv>:
 8019a10:	4b04      	ldr	r3, [pc, #16]	@ (8019a24 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8019a12:	781b      	ldrb	r3, [r3, #0]
 8019a14:	b123      	cbz	r3, 8019a20 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8019a16:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 8019a1a:	f080 0001 	eor.w	r0, r0, #1
 8019a1e:	4770      	bx	lr
 8019a20:	2001      	movs	r0, #1
 8019a22:	4770      	bx	lr
 8019a24:	2403422a 	.word	0x2403422a

08019a28 <_ZN8touchgfx3HAL8endFrameEv>:
 8019a28:	b510      	push	{r4, lr}
 8019a2a:	4604      	mov	r4, r0
 8019a2c:	6840      	ldr	r0, [r0, #4]
 8019a2e:	6803      	ldr	r3, [r0, #0]
 8019a30:	689b      	ldr	r3, [r3, #8]
 8019a32:	4798      	blx	r3
 8019a34:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 8019a38:	b113      	cbz	r3, 8019a40 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8019a3a:	2301      	movs	r3, #1
 8019a3c:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8019a40:	bd10      	pop	{r4, pc}

08019a42 <_ZN8touchgfx3HAL10initializeEv>:
 8019a42:	b510      	push	{r4, lr}
 8019a44:	4604      	mov	r4, r0
 8019a46:	f7fd fb3b 	bl	80170c0 <_ZN8touchgfx10OSWrappers10initializeEv>
 8019a4a:	f7fd f803 	bl	8016a54 <_ZN8touchgfx4GPIO4initEv>
 8019a4e:	6860      	ldr	r0, [r4, #4]
 8019a50:	6803      	ldr	r3, [r0, #0]
 8019a52:	68db      	ldr	r3, [r3, #12]
 8019a54:	4798      	blx	r3
 8019a56:	68e0      	ldr	r0, [r4, #12]
 8019a58:	6803      	ldr	r3, [r0, #0]
 8019a5a:	689b      	ldr	r3, [r3, #8]
 8019a5c:	4798      	blx	r3
 8019a5e:	6823      	ldr	r3, [r4, #0]
 8019a60:	4620      	mov	r0, r4
 8019a62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019a68:	4718      	bx	r3

08019a6a <_ZN8touchgfx3HAL9taskEntryEv>:
 8019a6a:	b508      	push	{r3, lr}
 8019a6c:	6803      	ldr	r3, [r0, #0]
 8019a6e:	4604      	mov	r4, r0
 8019a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019a74:	4798      	blx	r3
 8019a76:	6823      	ldr	r3, [r4, #0]
 8019a78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8019a7a:	4620      	mov	r0, r4
 8019a7c:	4798      	blx	r3
 8019a7e:	f7fd fb95 	bl	80171ac <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8019a82:	6823      	ldr	r3, [r4, #0]
 8019a84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019a86:	e7f8      	b.n	8019a7a <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08019a88 <_ZN8touchgfx3HAL4tickEv>:
 8019a88:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8019a8a:	6803      	ldr	r3, [r0, #0]
 8019a8c:	4604      	mov	r4, r0
 8019a8e:	4d5b      	ldr	r5, [pc, #364]	@ (8019bfc <_ZN8touchgfx3HAL4tickEv+0x174>)
 8019a90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8019a94:	4798      	blx	r3
 8019a96:	2800      	cmp	r0, #0
 8019a98:	f000 8095 	beq.w	8019bc6 <_ZN8touchgfx3HAL4tickEv+0x13e>
 8019a9c:	2001      	movs	r0, #1
 8019a9e:	2600      	movs	r6, #0
 8019aa0:	f7fc fffe 	bl	8016aa0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8019aa4:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 8019aa8:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 8019aac:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8019ab0:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 8019ab4:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 8019ab8:	b133      	cbz	r3, 8019ac8 <_ZN8touchgfx3HAL4tickEv+0x40>
 8019aba:	6823      	ldr	r3, [r4, #0]
 8019abc:	4620      	mov	r0, r4
 8019abe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8019ac2:	4798      	blx	r3
 8019ac4:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8019ac8:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8019acc:	2601      	movs	r6, #1
 8019ace:	6862      	ldr	r2, [r4, #4]
 8019ad0:	f083 0301 	eor.w	r3, r3, #1
 8019ad4:	702e      	strb	r6, [r5, #0]
 8019ad6:	7253      	strb	r3, [r2, #9]
 8019ad8:	f004 f9b6 	bl	801de48 <_ZN8touchgfx11Application11getInstanceEv>
 8019adc:	6803      	ldr	r3, [r0, #0]
 8019ade:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019ae0:	4798      	blx	r3
 8019ae2:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8019ae6:	b90b      	cbnz	r3, 8019aec <_ZN8touchgfx3HAL4tickEv+0x64>
 8019ae8:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 8019aec:	f004 f9ac 	bl	801de48 <_ZN8touchgfx11Application11getInstanceEv>
 8019af0:	6803      	ldr	r3, [r0, #0]
 8019af2:	695b      	ldr	r3, [r3, #20]
 8019af4:	4798      	blx	r3
 8019af6:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8019af8:	6803      	ldr	r3, [r0, #0]
 8019afa:	691b      	ldr	r3, [r3, #16]
 8019afc:	4798      	blx	r3
 8019afe:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8019b02:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 8019b06:	3b01      	subs	r3, #1
 8019b08:	b2db      	uxtb	r3, r3
 8019b0a:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8019b0e:	b10a      	cbz	r2, 8019b14 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8019b10:	2b00      	cmp	r3, #0
 8019b12:	d1eb      	bne.n	8019aec <_ZN8touchgfx3HAL4tickEv+0x64>
 8019b14:	4a3a      	ldr	r2, [pc, #232]	@ (8019c00 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8019b16:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 8019b1a:	7813      	ldrb	r3, [r2, #0]
 8019b1c:	3301      	adds	r3, #1
 8019b1e:	b25b      	sxtb	r3, r3
 8019b20:	4299      	cmp	r1, r3
 8019b22:	7013      	strb	r3, [r2, #0]
 8019b24:	dc10      	bgt.n	8019b48 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8019b26:	2300      	movs	r3, #0
 8019b28:	68e0      	ldr	r0, [r4, #12]
 8019b2a:	a902      	add	r1, sp, #8
 8019b2c:	7013      	strb	r3, [r2, #0]
 8019b2e:	aa03      	add	r2, sp, #12
 8019b30:	6803      	ldr	r3, [r0, #0]
 8019b32:	68db      	ldr	r3, [r3, #12]
 8019b34:	4798      	blx	r3
 8019b36:	6823      	ldr	r3, [r4, #0]
 8019b38:	2800      	cmp	r0, #0
 8019b3a:	d050      	beq.n	8019bde <_ZN8touchgfx3HAL4tickEv+0x156>
 8019b3c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8019b40:	4620      	mov	r0, r4
 8019b42:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8019b46:	4798      	blx	r3
 8019b48:	2300      	movs	r3, #0
 8019b4a:	6960      	ldr	r0, [r4, #20]
 8019b4c:	f88d 3007 	strb.w	r3, [sp, #7]
 8019b50:	b158      	cbz	r0, 8019b6a <_ZN8touchgfx3HAL4tickEv+0xe2>
 8019b52:	6803      	ldr	r3, [r0, #0]
 8019b54:	f10d 0107 	add.w	r1, sp, #7
 8019b58:	68db      	ldr	r3, [r3, #12]
 8019b5a:	4798      	blx	r3
 8019b5c:	b128      	cbz	r0, 8019b6a <_ZN8touchgfx3HAL4tickEv+0xe2>
 8019b5e:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8019b60:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8019b64:	6803      	ldr	r3, [r0, #0]
 8019b66:	68db      	ldr	r3, [r3, #12]
 8019b68:	4798      	blx	r3
 8019b6a:	f104 001c 	add.w	r0, r4, #28
 8019b6e:	f011 f977 	bl	802ae60 <_ZN8touchgfx8Gestures4tickEv>
 8019b72:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8019b76:	b30b      	cbz	r3, 8019bbc <_ZN8touchgfx3HAL4tickEv+0x134>
 8019b78:	6920      	ldr	r0, [r4, #16]
 8019b7a:	6803      	ldr	r3, [r0, #0]
 8019b7c:	691b      	ldr	r3, [r3, #16]
 8019b7e:	4798      	blx	r3
 8019b80:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8019b82:	4606      	mov	r6, r0
 8019b84:	b903      	cbnz	r3, 8019b88 <_ZN8touchgfx3HAL4tickEv+0x100>
 8019b86:	6760      	str	r0, [r4, #116]	@ 0x74
 8019b88:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8019b8a:	4a1e      	ldr	r2, [pc, #120]	@ (8019c04 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8019b8c:	1af3      	subs	r3, r6, r3
 8019b8e:	4293      	cmp	r3, r2
 8019b90:	d914      	bls.n	8019bbc <_ZN8touchgfx3HAL4tickEv+0x134>
 8019b92:	6920      	ldr	r0, [r4, #16]
 8019b94:	6803      	ldr	r3, [r0, #0]
 8019b96:	699b      	ldr	r3, [r3, #24]
 8019b98:	4798      	blx	r3
 8019b9a:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8019b9c:	2264      	movs	r2, #100	@ 0x64
 8019b9e:	1af3      	subs	r3, r6, r3
 8019ba0:	fbb3 f3f2 	udiv	r3, r3, r2
 8019ba4:	fbb0 f0f3 	udiv	r0, r0, r3
 8019ba8:	2800      	cmp	r0, #0
 8019baa:	dc1d      	bgt.n	8019be8 <_ZN8touchgfx3HAL4tickEv+0x160>
 8019bac:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 8019bb0:	6920      	ldr	r0, [r4, #16]
 8019bb2:	2100      	movs	r1, #0
 8019bb4:	6803      	ldr	r3, [r0, #0]
 8019bb6:	69db      	ldr	r3, [r3, #28]
 8019bb8:	4798      	blx	r3
 8019bba:	6766      	str	r6, [r4, #116]	@ 0x74
 8019bbc:	f004 f944 	bl	801de48 <_ZN8touchgfx11Application11getInstanceEv>
 8019bc0:	6803      	ldr	r3, [r0, #0]
 8019bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019bc4:	4798      	blx	r3
 8019bc6:	6823      	ldr	r3, [r4, #0]
 8019bc8:	4620      	mov	r0, r4
 8019bca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019bce:	4798      	blx	r3
 8019bd0:	2001      	movs	r0, #1
 8019bd2:	f7fc ff81 	bl	8016ad8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8019bd6:	2300      	movs	r3, #0
 8019bd8:	702b      	strb	r3, [r5, #0]
 8019bda:	b004      	add	sp, #16
 8019bdc:	bd70      	pop	{r4, r5, r6, pc}
 8019bde:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8019be2:	4620      	mov	r0, r4
 8019be4:	4798      	blx	r3
 8019be6:	e7af      	b.n	8019b48 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8019be8:	2863      	cmp	r0, #99	@ 0x63
 8019bea:	bfcb      	itete	gt
 8019bec:	2300      	movgt	r3, #0
 8019bee:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 8019bf2:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 8019bf6:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 8019bfa:	e7d9      	b.n	8019bb0 <_ZN8touchgfx3HAL4tickEv+0x128>
 8019bfc:	24034230 	.word	0x24034230
 8019c00:	24034231 	.word	0x24034231
 8019c04:	05f5e100 	.word	0x05f5e100

08019c08 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8019c08:	b510      	push	{r4, lr}
 8019c0a:	4604      	mov	r4, r0
 8019c0c:	f7fd fa9a 	bl	8017144 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8019c10:	2200      	movs	r2, #0
 8019c12:	6863      	ldr	r3, [r4, #4]
 8019c14:	729a      	strb	r2, [r3, #10]
 8019c16:	bd10      	pop	{r4, pc}

08019c18 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8019c18:	65c1      	str	r1, [r0, #92]	@ 0x5c
 8019c1a:	301c      	adds	r0, #28
 8019c1c:	f011 b91e 	b.w	802ae5c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08019c20 <_ZN8touchgfx3HAL5touchEll>:
 8019c20:	b530      	push	{r4, r5, lr}
 8019c22:	b087      	sub	sp, #28
 8019c24:	4604      	mov	r4, r0
 8019c26:	a804      	add	r0, sp, #16
 8019c28:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8019c2c:	f003 fefe 	bl	801da2c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8019c30:	9b04      	ldr	r3, [sp, #16]
 8019c32:	a906      	add	r1, sp, #24
 8019c34:	a803      	add	r0, sp, #12
 8019c36:	f8ad 300c 	strh.w	r3, [sp, #12]
 8019c3a:	9b05      	ldr	r3, [sp, #20]
 8019c3c:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8019c40:	f003 ff46 	bl	801dad0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8019c44:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 8019c48:	f104 001c 	add.w	r0, r4, #28
 8019c4c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8019c50:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8019c54:	b189      	cbz	r1, 8019c7a <_ZN8touchgfx3HAL5touchEll+0x5a>
 8019c56:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 8019c5a:	9300      	str	r3, [sp, #0]
 8019c5c:	4613      	mov	r3, r2
 8019c5e:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 8019c62:	462a      	mov	r2, r5
 8019c64:	f011 f90a 	bl	802ae7c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8019c68:	b128      	cbz	r0, 8019c76 <_ZN8touchgfx3HAL5touchEll+0x56>
 8019c6a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8019c6e:	6623      	str	r3, [r4, #96]	@ 0x60
 8019c70:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8019c74:	6663      	str	r3, [r4, #100]	@ 0x64
 8019c76:	b007      	add	sp, #28
 8019c78:	bd30      	pop	{r4, r5, pc}
 8019c7a:	f011 f93f 	bl	802aefc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8019c7e:	2301      	movs	r3, #1
 8019c80:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8019c84:	e7f1      	b.n	8019c6a <_ZN8touchgfx3HAL5touchEll+0x4a>

08019c86 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8019c86:	b510      	push	{r4, lr}
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	d046      	beq.n	8019d1a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8019c8c:	ea81 0002 	eor.w	r0, r1, r2
 8019c90:	07c4      	lsls	r4, r0, #31
 8019c92:	d508      	bpl.n	8019ca6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8019c94:	440b      	add	r3, r1
 8019c96:	3a01      	subs	r2, #1
 8019c98:	428b      	cmp	r3, r1
 8019c9a:	d93e      	bls.n	8019d1a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8019c9c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8019ca0:	f801 0b01 	strb.w	r0, [r1], #1
 8019ca4:	e7f8      	b.n	8019c98 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8019ca6:	07d0      	lsls	r0, r2, #31
 8019ca8:	bf42      	ittt	mi
 8019caa:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8019cae:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8019cb2:	f801 0b01 	strbmi.w	r0, [r1], #1
 8019cb6:	2b01      	cmp	r3, #1
 8019cb8:	d911      	bls.n	8019cde <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8019cba:	ea81 0402 	eor.w	r4, r1, r2
 8019cbe:	4610      	mov	r0, r2
 8019cc0:	07a4      	lsls	r4, r4, #30
 8019cc2:	d022      	beq.n	8019d0a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8019cc4:	f023 0401 	bic.w	r4, r3, #1
 8019cc8:	440c      	add	r4, r1
 8019cca:	428c      	cmp	r4, r1
 8019ccc:	4602      	mov	r2, r0
 8019cce:	d904      	bls.n	8019cda <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8019cd0:	8812      	ldrh	r2, [r2, #0]
 8019cd2:	3002      	adds	r0, #2
 8019cd4:	f821 2b02 	strh.w	r2, [r1], #2
 8019cd8:	e7f7      	b.n	8019cca <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8019cda:	f003 0301 	and.w	r3, r3, #1
 8019cde:	f023 0003 	bic.w	r0, r3, #3
 8019ce2:	4408      	add	r0, r1
 8019ce4:	4288      	cmp	r0, r1
 8019ce6:	4614      	mov	r4, r2
 8019ce8:	d904      	bls.n	8019cf4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8019cea:	6824      	ldr	r4, [r4, #0]
 8019cec:	3204      	adds	r2, #4
 8019cee:	f841 4b04 	str.w	r4, [r1], #4
 8019cf2:	e7f7      	b.n	8019ce4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8019cf4:	f003 0303 	and.w	r3, r3, #3
 8019cf8:	3a01      	subs	r2, #1
 8019cfa:	440b      	add	r3, r1
 8019cfc:	428b      	cmp	r3, r1
 8019cfe:	d90c      	bls.n	8019d1a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8019d00:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8019d04:	f801 0b01 	strb.w	r0, [r1], #1
 8019d08:	e7f8      	b.n	8019cfc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8019d0a:	0790      	lsls	r0, r2, #30
 8019d0c:	d0e7      	beq.n	8019cde <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8019d0e:	f832 0b02 	ldrh.w	r0, [r2], #2
 8019d12:	3b02      	subs	r3, #2
 8019d14:	f821 0b02 	strh.w	r0, [r1], #2
 8019d18:	e7e1      	b.n	8019cde <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8019d1a:	2001      	movs	r0, #1
 8019d1c:	bd10      	pop	{r4, pc}

08019d1e <_ZN8touchgfx3HAL7noTouchEv>:
 8019d1e:	b510      	push	{r4, lr}
 8019d20:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 8019d24:	4604      	mov	r4, r0
 8019d26:	b153      	cbz	r3, 8019d3e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8019d28:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 8019d2c:	2101      	movs	r1, #1
 8019d2e:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 8019d32:	301c      	adds	r0, #28
 8019d34:	f011 f8e2 	bl	802aefc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8019d38:	2300      	movs	r3, #0
 8019d3a:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8019d3e:	bd10      	pop	{r4, pc}

08019d40 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8019d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019d44:	b085      	sub	sp, #20
 8019d46:	4604      	mov	r4, r0
 8019d48:	2000      	movs	r0, #0
 8019d4a:	4699      	mov	r9, r3
 8019d4c:	ad04      	add	r5, sp, #16
 8019d4e:	460f      	mov	r7, r1
 8019d50:	4690      	mov	r8, r2
 8019d52:	f845 0d04 	str.w	r0, [r5, #-4]!
 8019d56:	69a0      	ldr	r0, [r4, #24]
 8019d58:	6806      	ldr	r6, [r0, #0]
 8019d5a:	9501      	str	r5, [sp, #4]
 8019d5c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8019d60:	9500      	str	r5, [sp, #0]
 8019d62:	6835      	ldr	r5, [r6, #0]
 8019d64:	47a8      	blx	r5
 8019d66:	4d10      	ldr	r5, [pc, #64]	@ (8019da8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8019d68:	4606      	mov	r6, r0
 8019d6a:	f8a5 9000 	strh.w	r9, [r5]
 8019d6e:	f7fa fb79 	bl	8014464 <_ZN8touchgfx3HAL3lcdEv>
 8019d72:	6803      	ldr	r3, [r0, #0]
 8019d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019d76:	4798      	blx	r3
 8019d78:	b128      	cbz	r0, 8019d86 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8019d7a:	2801      	cmp	r0, #1
 8019d7c:	d00b      	beq.n	8019d96 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8019d7e:	4630      	mov	r0, r6
 8019d80:	b005      	add	sp, #20
 8019d82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019d86:	882b      	ldrh	r3, [r5, #0]
 8019d88:	fb08 7203 	mla	r2, r8, r3, r7
 8019d8c:	9b03      	ldr	r3, [sp, #12]
 8019d8e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8019d92:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8019d94:	e7f3      	b.n	8019d7e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8019d96:	882a      	ldrh	r2, [r5, #0]
 8019d98:	9b03      	ldr	r3, [sp, #12]
 8019d9a:	fb08 7202 	mla	r2, r8, r2, r7
 8019d9e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019da2:	1a9a      	subs	r2, r3, r2
 8019da4:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8019da6:	e7ea      	b.n	8019d7e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8019da8:	24034226 	.word	0x24034226

08019dac <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8019dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019dae:	b08b      	sub	sp, #44	@ 0x2c
 8019db0:	4617      	mov	r7, r2
 8019db2:	4604      	mov	r4, r0
 8019db4:	460e      	mov	r6, r1
 8019db6:	461d      	mov	r5, r3
 8019db8:	f7fa fb54 	bl	8014464 <_ZN8touchgfx3HAL3lcdEv>
 8019dbc:	6803      	ldr	r3, [r0, #0]
 8019dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019dc0:	4798      	blx	r3
 8019dc2:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8019dc6:	9007      	str	r0, [sp, #28]
 8019dc8:	4631      	mov	r1, r6
 8019dca:	6822      	ldr	r2, [r4, #0]
 8019dcc:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8019dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8019e04 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8019dd2:	4620      	mov	r0, r4
 8019dd4:	881b      	ldrh	r3, [r3, #0]
 8019dd6:	9306      	str	r3, [sp, #24]
 8019dd8:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8019ddc:	9305      	str	r3, [sp, #20]
 8019dde:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 8019de2:	9304      	str	r3, [sp, #16]
 8019de4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8019de8:	9303      	str	r3, [sp, #12]
 8019dea:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8019dee:	9302      	str	r3, [sp, #8]
 8019df0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8019df4:	e9cd 5300 	strd	r5, r3, [sp]
 8019df8:	463b      	mov	r3, r7
 8019dfa:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 8019dfc:	2200      	movs	r2, #0
 8019dfe:	47a8      	blx	r5
 8019e00:	b00b      	add	sp, #44	@ 0x2c
 8019e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019e04:	24034226 	.word	0x24034226

08019e08 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8019e08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019e0c:	4698      	mov	r8, r3
 8019e0e:	6803      	ldr	r3, [r0, #0]
 8019e10:	b08b      	sub	sp, #44	@ 0x2c
 8019e12:	4617      	mov	r7, r2
 8019e14:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 8019e16:	460e      	mov	r6, r1
 8019e18:	4b13      	ldr	r3, [pc, #76]	@ (8019e68 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8019e1a:	4604      	mov	r4, r0
 8019e1c:	f8b3 9000 	ldrh.w	r9, [r3]
 8019e20:	f7fa fb20 	bl	8014464 <_ZN8touchgfx3HAL3lcdEv>
 8019e24:	6803      	ldr	r3, [r0, #0]
 8019e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019e28:	4798      	blx	r3
 8019e2a:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8019e2e:	2200      	movs	r2, #0
 8019e30:	4631      	mov	r1, r6
 8019e32:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8019e36:	2302      	movs	r3, #2
 8019e38:	4620      	mov	r0, r4
 8019e3a:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8019e3e:	2301      	movs	r3, #1
 8019e40:	9305      	str	r3, [sp, #20]
 8019e42:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8019e46:	9304      	str	r3, [sp, #16]
 8019e48:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8019e4c:	9303      	str	r3, [sp, #12]
 8019e4e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8019e52:	9302      	str	r3, [sp, #8]
 8019e54:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8019e58:	e9cd 8300 	strd	r8, r3, [sp]
 8019e5c:	463b      	mov	r3, r7
 8019e5e:	47a8      	blx	r5
 8019e60:	b00b      	add	sp, #44	@ 0x2c
 8019e62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019e66:	bf00      	nop
 8019e68:	24034226 	.word	0x24034226

08019e6c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8019e6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019e70:	4698      	mov	r8, r3
 8019e72:	6803      	ldr	r3, [r0, #0]
 8019e74:	b087      	sub	sp, #28
 8019e76:	460e      	mov	r6, r1
 8019e78:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 8019e7a:	4617      	mov	r7, r2
 8019e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8019ebc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8019e7e:	4604      	mov	r4, r0
 8019e80:	f8b3 9000 	ldrh.w	r9, [r3]
 8019e84:	f7fa faee 	bl	8014464 <_ZN8touchgfx3HAL3lcdEv>
 8019e88:	6803      	ldr	r3, [r0, #0]
 8019e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019e8c:	4798      	blx	r3
 8019e8e:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 8019e92:	463a      	mov	r2, r7
 8019e94:	4631      	mov	r1, r6
 8019e96:	f8cd 900c 	str.w	r9, [sp, #12]
 8019e9a:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8019e9e:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 8019ea2:	4620      	mov	r0, r4
 8019ea4:	9302      	str	r3, [sp, #8]
 8019ea6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8019eaa:	9301      	str	r3, [sp, #4]
 8019eac:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8019eb0:	9300      	str	r3, [sp, #0]
 8019eb2:	4643      	mov	r3, r8
 8019eb4:	47a8      	blx	r5
 8019eb6:	b007      	add	sp, #28
 8019eb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019ebc:	24034226 	.word	0x24034226

08019ec0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8019ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ec4:	4604      	mov	r4, r0
 8019ec6:	b08f      	sub	sp, #60	@ 0x3c
 8019ec8:	4610      	mov	r0, r2
 8019eca:	460d      	mov	r5, r1
 8019ecc:	4691      	mov	r9, r2
 8019ece:	461e      	mov	r6, r3
 8019ed0:	f006 feba 	bl	8020c48 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8019ed4:	2800      	cmp	r0, #0
 8019ed6:	f000 809d 	beq.w	801a014 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8019eda:	6823      	ldr	r3, [r4, #0]
 8019edc:	4620      	mov	r0, r4
 8019ede:	f8df b198 	ldr.w	fp, [pc, #408]	@ 801a078 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8019ee2:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8019ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019ee8:	4798      	blx	r3
 8019eea:	6823      	ldr	r3, [r4, #0]
 8019eec:	4620      	mov	r0, r4
 8019eee:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 801a07c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8019ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019ef4:	4798      	blx	r3
 8019ef6:	f8bb 3000 	ldrh.w	r3, [fp]
 8019efa:	4f5c      	ldr	r7, [pc, #368]	@ (801a06c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8019efc:	9301      	str	r3, [sp, #4]
 8019efe:	f8ba 3000 	ldrh.w	r3, [sl]
 8019f02:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8019f06:	4640      	mov	r0, r8
 8019f08:	9302      	str	r3, [sp, #8]
 8019f0a:	883b      	ldrh	r3, [r7, #0]
 8019f0c:	9303      	str	r3, [sp, #12]
 8019f0e:	4b58      	ldr	r3, [pc, #352]	@ (801a070 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8019f10:	881a      	ldrh	r2, [r3, #0]
 8019f12:	9305      	str	r3, [sp, #20]
 8019f14:	9204      	str	r2, [sp, #16]
 8019f16:	f006 ffe7 	bl	8020ee8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019f1a:	8038      	strh	r0, [r7, #0]
 8019f1c:	4640      	mov	r0, r8
 8019f1e:	f007 f817 	bl	8020f50 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019f22:	9b05      	ldr	r3, [sp, #20]
 8019f24:	b280      	uxth	r0, r0
 8019f26:	8018      	strh	r0, [r3, #0]
 8019f28:	4b52      	ldr	r3, [pc, #328]	@ (801a074 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8019f2a:	781b      	ldrb	r3, [r3, #0]
 8019f2c:	2b00      	cmp	r3, #0
 8019f2e:	d174      	bne.n	801a01a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8019f30:	883b      	ldrh	r3, [r7, #0]
 8019f32:	f8aa 0000 	strh.w	r0, [sl]
 8019f36:	f8ab 3000 	strh.w	r3, [fp]
 8019f3a:	4648      	mov	r0, r9
 8019f3c:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 8019f40:	f006 fe82 	bl	8020c48 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8019f44:	2200      	movs	r2, #0
 8019f46:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8019f4a:	4611      	mov	r1, r2
 8019f4c:	4628      	mov	r0, r5
 8019f4e:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8019f52:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8019f56:	f7fb f97c 	bl	8015252 <_ZN8touchgfx8Drawable5setXYEss>
 8019f5a:	2301      	movs	r3, #1
 8019f5c:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 8019f60:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8019f64:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8019f68:	2b00      	cmp	r3, #0
 8019f6a:	dd5c      	ble.n	801a026 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8019f6c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8019f70:	2b00      	cmp	r3, #0
 8019f72:	dd58      	ble.n	801a026 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8019f74:	462a      	mov	r2, r5
 8019f76:	ab0a      	add	r3, sp, #40	@ 0x28
 8019f78:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8019f7c:	6851      	ldr	r1, [r2, #4]
 8019f7e:	c303      	stmia	r3!, {r0, r1}
 8019f80:	4631      	mov	r1, r6
 8019f82:	a80a      	add	r0, sp, #40	@ 0x28
 8019f84:	f7ff fbf6 	bl	8019774 <_ZN8touchgfx4RectaNERKS0_>
 8019f88:	4b38      	ldr	r3, [pc, #224]	@ (801a06c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8019f8a:	2100      	movs	r1, #0
 8019f8c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019f90:	4b37      	ldr	r3, [pc, #220]	@ (801a070 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8019f92:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8019f96:	aa0a      	add	r2, sp, #40	@ 0x28
 8019f98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019f9c:	910c      	str	r1, [sp, #48]	@ 0x30
 8019f9e:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8019fa2:	ab08      	add	r3, sp, #32
 8019fa4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019fa8:	e883 0003 	stmia.w	r3, {r0, r1}
 8019fac:	4618      	mov	r0, r3
 8019fae:	a90c      	add	r1, sp, #48	@ 0x30
 8019fb0:	f7ff fbe0 	bl	8019774 <_ZN8touchgfx4RectaNERKS0_>
 8019fb4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8019fb6:	2b00      	cmp	r3, #0
 8019fb8:	d13c      	bne.n	801a034 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8019fba:	2000      	movs	r0, #0
 8019fbc:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 8019fc0:	2600      	movs	r6, #0
 8019fc2:	696b      	ldr	r3, [r5, #20]
 8019fc4:	a908      	add	r1, sp, #32
 8019fc6:	682a      	ldr	r2, [r5, #0]
 8019fc8:	4628      	mov	r0, r5
 8019fca:	9305      	str	r3, [sp, #20]
 8019fcc:	616e      	str	r6, [r5, #20]
 8019fce:	6892      	ldr	r2, [r2, #8]
 8019fd0:	4790      	blx	r2
 8019fd2:	9b05      	ldr	r3, [sp, #20]
 8019fd4:	4652      	mov	r2, sl
 8019fd6:	4649      	mov	r1, r9
 8019fd8:	616b      	str	r3, [r5, #20]
 8019fda:	4628      	mov	r0, r5
 8019fdc:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 8019fe0:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 8019fe4:	f7fb f935 	bl	8015252 <_ZN8touchgfx8Drawable5setXYEss>
 8019fe8:	9a01      	ldr	r2, [sp, #4]
 8019fea:	4b23      	ldr	r3, [pc, #140]	@ (801a078 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8019fec:	4620      	mov	r0, r4
 8019fee:	801a      	strh	r2, [r3, #0]
 8019ff0:	9a02      	ldr	r2, [sp, #8]
 8019ff2:	4b22      	ldr	r3, [pc, #136]	@ (801a07c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8019ff4:	801a      	strh	r2, [r3, #0]
 8019ff6:	9a03      	ldr	r2, [sp, #12]
 8019ff8:	4b1c      	ldr	r3, [pc, #112]	@ (801a06c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8019ffa:	801a      	strh	r2, [r3, #0]
 8019ffc:	4b1c      	ldr	r3, [pc, #112]	@ (801a070 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8019ffe:	9a04      	ldr	r2, [sp, #16]
 801a000:	801a      	strh	r2, [r3, #0]
 801a002:	6823      	ldr	r3, [r4, #0]
 801a004:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 801a008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a00a:	4798      	blx	r3
 801a00c:	6823      	ldr	r3, [r4, #0]
 801a00e:	4620      	mov	r0, r4
 801a010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a012:	4798      	blx	r3
 801a014:	b00f      	add	sp, #60	@ 0x3c
 801a016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a01a:	883b      	ldrh	r3, [r7, #0]
 801a01c:	f8ab 0000 	strh.w	r0, [fp]
 801a020:	f8aa 3000 	strh.w	r3, [sl]
 801a024:	e789      	b.n	8019f3a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 801a026:	462a      	mov	r2, r5
 801a028:	ab0a      	add	r3, sp, #40	@ 0x28
 801a02a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801a02e:	6851      	ldr	r1, [r2, #4]
 801a030:	c303      	stmia	r3!, {r0, r1}
 801a032:	e7a9      	b.n	8019f88 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 801a034:	a807      	add	r0, sp, #28
 801a036:	f007 f895 	bl	8021164 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801a03a:	4606      	mov	r6, r0
 801a03c:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 801a03e:	6803      	ldr	r3, [r0, #0]
 801a040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a042:	4798      	blx	r3
 801a044:	4286      	cmp	r6, r0
 801a046:	d1b8      	bne.n	8019fba <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 801a048:	f7fa fa0c 	bl	8014464 <_ZN8touchgfx3HAL3lcdEv>
 801a04c:	6803      	ldr	r3, [r0, #0]
 801a04e:	4606      	mov	r6, r0
 801a050:	a807      	add	r0, sp, #28
 801a052:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a054:	9305      	str	r3, [sp, #20]
 801a056:	f007 f885 	bl	8021164 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801a05a:	9b05      	ldr	r3, [sp, #20]
 801a05c:	4601      	mov	r1, r0
 801a05e:	4630      	mov	r0, r6
 801a060:	4798      	blx	r3
 801a062:	f080 0001 	eor.w	r0, r0, #1
 801a066:	b2c0      	uxtb	r0, r0
 801a068:	e7a8      	b.n	8019fbc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 801a06a:	bf00      	nop
 801a06c:	24034220 	.word	0x24034220
 801a070:	24034222 	.word	0x24034222
 801a074:	24034224 	.word	0x24034224
 801a078:	24034226 	.word	0x24034226
 801a07c:	24034228 	.word	0x24034228

0801a080 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 801a080:	4b07      	ldr	r3, [pc, #28]	@ (801a0a0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801a082:	b510      	push	{r4, lr}
 801a084:	781b      	ldrb	r3, [r3, #0]
 801a086:	4604      	mov	r4, r0
 801a088:	b13b      	cbz	r3, 801a09a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801a08a:	6803      	ldr	r3, [r0, #0]
 801a08c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a08e:	4798      	blx	r3
 801a090:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801a092:	4283      	cmp	r3, r0
 801a094:	d101      	bne.n	801a09a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801a096:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 801a098:	bd10      	pop	{r4, pc}
 801a09a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 801a09c:	e7fc      	b.n	801a098 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801a09e:	bf00      	nop
 801a0a0:	2403422a 	.word	0x2403422a

0801a0a4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 801a0a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0a8:	461d      	mov	r5, r3
 801a0aa:	b08a      	sub	sp, #40	@ 0x28
 801a0ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801a0b0:	4690      	mov	r8, r2
 801a0b2:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 801a0b6:	2400      	movs	r4, #0
 801a0b8:	4607      	mov	r7, r0
 801a0ba:	fb06 8505 	mla	r5, r6, r5, r8
 801a0be:	9404      	str	r4, [sp, #16]
 801a0c0:	f88d 4020 	strb.w	r4, [sp, #32]
 801a0c4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801a0c8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 801a0cc:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a0d0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801a0d4:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a0d8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 801a0dc:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a0e0:	f7ff ffce 	bl	801a080 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a0e4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801a0e8:	6878      	ldr	r0, [r7, #4]
 801a0ea:	f8ad 601e 	strh.w	r6, [sp, #30]
 801a0ee:	a901      	add	r1, sp, #4
 801a0f0:	9505      	str	r5, [sp, #20]
 801a0f2:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 801a0f6:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 801a0fa:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 801a0fe:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 801a102:	6803      	ldr	r3, [r0, #0]
 801a104:	685b      	ldr	r3, [r3, #4]
 801a106:	4798      	blx	r3
 801a108:	b00a      	add	sp, #40	@ 0x28
 801a10a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a10e <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 801a10e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a112:	b08b      	sub	sp, #44	@ 0x2c
 801a114:	2400      	movs	r4, #0
 801a116:	4691      	mov	r9, r2
 801a118:	461d      	mov	r5, r3
 801a11a:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 801a11e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801a122:	4688      	mov	r8, r1
 801a124:	4607      	mov	r7, r0
 801a126:	9404      	str	r4, [sp, #16]
 801a128:	fb06 9505 	mla	r5, r6, r5, r9
 801a12c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a130:	f7ff ffa6 	bl	801a080 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a134:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 801a138:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801a13c:	6878      	ldr	r0, [r7, #4]
 801a13e:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a142:	a901      	add	r1, sp, #4
 801a144:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 801a148:	9505      	str	r5, [sp, #20]
 801a14a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a14e:	f8ad 401c 	strh.w	r4, [sp, #28]
 801a152:	f8ad 601e 	strh.w	r6, [sp, #30]
 801a156:	f8cd 8010 	str.w	r8, [sp, #16]
 801a15a:	f8ad 4020 	strh.w	r4, [sp, #32]
 801a15e:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 801a162:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 801a166:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 801a16a:	6803      	ldr	r3, [r0, #0]
 801a16c:	685b      	ldr	r3, [r3, #4]
 801a16e:	4798      	blx	r3
 801a170:	b00b      	add	sp, #44	@ 0x2c
 801a172:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0801a178 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 801a178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a17c:	b08a      	sub	sp, #40	@ 0x28
 801a17e:	4698      	mov	r8, r3
 801a180:	2300      	movs	r3, #0
 801a182:	4606      	mov	r6, r0
 801a184:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 801a188:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 801a18c:	2d0b      	cmp	r5, #11
 801a18e:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 801a192:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 801a196:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 801a19a:	9304      	str	r3, [sp, #16]
 801a19c:	d137      	bne.n	801a20e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 801a19e:	2380      	movs	r3, #128	@ 0x80
 801a1a0:	f88d 0020 	strb.w	r0, [sp, #32]
 801a1a4:	4630      	mov	r0, r6
 801a1a6:	9203      	str	r2, [sp, #12]
 801a1a8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801a1ac:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801a1b0:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a1b4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 801a1b8:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a1bc:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 801a1c0:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a1c4:	f7ff ff5c 	bl	801a080 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a1c8:	2c0b      	cmp	r4, #11
 801a1ca:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 801a1ce:	f8ad 701e 	strh.w	r7, [sp, #30]
 801a1d2:	bf94      	ite	ls
 801a1d4:	4b19      	ldrls	r3, [pc, #100]	@ (801a23c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 801a1d6:	2100      	movhi	r1, #0
 801a1d8:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 801a1dc:	bf98      	it	ls
 801a1de:	5d19      	ldrbls	r1, [r3, r4]
 801a1e0:	fb02 8307 	mla	r3, r2, r7, r8
 801a1e4:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 801a1e8:	10c9      	asrs	r1, r1, #3
 801a1ea:	fb01 0003 	mla	r0, r1, r3, r0
 801a1ee:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 801a1f2:	a901      	add	r1, sp, #4
 801a1f4:	9005      	str	r0, [sp, #20]
 801a1f6:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 801a1fa:	2300      	movs	r3, #0
 801a1fc:	6870      	ldr	r0, [r6, #4]
 801a1fe:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801a202:	6803      	ldr	r3, [r0, #0]
 801a204:	685b      	ldr	r3, [r3, #4]
 801a206:	4798      	blx	r3
 801a208:	b00a      	add	sp, #40	@ 0x28
 801a20a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a20e:	2d02      	cmp	r5, #2
 801a210:	d109      	bne.n	801a226 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 801a212:	28ff      	cmp	r0, #255	@ 0xff
 801a214:	d105      	bne.n	801a222 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 801a216:	f1bc 0f00 	cmp.w	ip, #0
 801a21a:	bf14      	ite	ne
 801a21c:	2340      	movne	r3, #64	@ 0x40
 801a21e:	2320      	moveq	r3, #32
 801a220:	e7be      	b.n	801a1a0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801a222:	2340      	movs	r3, #64	@ 0x40
 801a224:	e7bc      	b.n	801a1a0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801a226:	28ff      	cmp	r0, #255	@ 0xff
 801a228:	d105      	bne.n	801a236 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 801a22a:	f1bc 0f00 	cmp.w	ip, #0
 801a22e:	bf14      	ite	ne
 801a230:	2304      	movne	r3, #4
 801a232:	2301      	moveq	r3, #1
 801a234:	e7b4      	b.n	801a1a0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801a236:	2304      	movs	r3, #4
 801a238:	e7b2      	b.n	801a1a0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801a23a:	bf00      	nop
 801a23c:	0802eb20 	.word	0x0802eb20

0801a240 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 801a240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a244:	b08b      	sub	sp, #44	@ 0x2c
 801a246:	461d      	mov	r5, r3
 801a248:	2400      	movs	r4, #0
 801a24a:	4688      	mov	r8, r1
 801a24c:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 801a250:	4693      	mov	fp, r2
 801a252:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 801a256:	4607      	mov	r7, r0
 801a258:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801a25c:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 801a260:	9404      	str	r4, [sp, #16]
 801a262:	bf14      	ite	ne
 801a264:	2308      	movne	r3, #8
 801a266:	2302      	moveq	r3, #2
 801a268:	fb05 b50a 	mla	r5, r5, sl, fp
 801a26c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a270:	f7ff ff06 	bl	801a080 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a274:	2e0b      	cmp	r6, #11
 801a276:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801a27a:	a901      	add	r1, sp, #4
 801a27c:	bf98      	it	ls
 801a27e:	4b13      	ldrls	r3, [pc, #76]	@ (801a2cc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 801a280:	f8ad a01e 	strh.w	sl, [sp, #30]
 801a284:	bf98      	it	ls
 801a286:	5d9c      	ldrbls	r4, [r3, r6]
 801a288:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 801a28c:	10e4      	asrs	r4, r4, #3
 801a28e:	f8cd 8010 	str.w	r8, [sp, #16]
 801a292:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a296:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 801a29a:	fb04 0405 	mla	r4, r4, r5, r0
 801a29e:	6878      	ldr	r0, [r7, #4]
 801a2a0:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a2a4:	2300      	movs	r3, #0
 801a2a6:	9405      	str	r4, [sp, #20]
 801a2a8:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a2ac:	f88d 9020 	strb.w	r9, [sp, #32]
 801a2b0:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 801a2b4:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801a2b8:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 801a2bc:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 801a2c0:	6803      	ldr	r3, [r0, #0]
 801a2c2:	685b      	ldr	r3, [r3, #4]
 801a2c4:	4798      	blx	r3
 801a2c6:	b00b      	add	sp, #44	@ 0x2c
 801a2c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2cc:	0802eb20 	.word	0x0802eb20

0801a2d0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 801a2d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2d4:	461e      	mov	r6, r3
 801a2d6:	4b0a      	ldr	r3, [pc, #40]	@ (801a300 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 801a2d8:	460f      	mov	r7, r1
 801a2da:	4690      	mov	r8, r2
 801a2dc:	881d      	ldrh	r5, [r3, #0]
 801a2de:	f7fa f8c1 	bl	8014464 <_ZN8touchgfx3HAL3lcdEv>
 801a2e2:	6803      	ldr	r3, [r0, #0]
 801a2e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a2e6:	4798      	blx	r3
 801a2e8:	280b      	cmp	r0, #11
 801a2ea:	bf96      	itet	ls
 801a2ec:	4b05      	ldrls	r3, [pc, #20]	@ (801a304 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801a2ee:	2400      	movhi	r4, #0
 801a2f0:	5c1c      	ldrbls	r4, [r3, r0]
 801a2f2:	fb08 7005 	mla	r0, r8, r5, r7
 801a2f6:	10e4      	asrs	r4, r4, #3
 801a2f8:	fb04 6000 	mla	r0, r4, r0, r6
 801a2fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a300:	24034226 	.word	0x24034226
 801a304:	0802eb20 	.word	0x0802eb20

0801a308 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 801a308:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a30a:	b08b      	sub	sp, #44	@ 0x2c
 801a30c:	461f      	mov	r7, r3
 801a30e:	4604      	mov	r4, r0
 801a310:	4616      	mov	r6, r2
 801a312:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 801a316:	2500      	movs	r5, #0
 801a318:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801a31c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 801a320:	9504      	str	r5, [sp, #16]
 801a322:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a326:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801a32a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a32e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 801a332:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a336:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 801a33a:	f88d 3020 	strb.w	r3, [sp, #32]
 801a33e:	f7ff fe9f 	bl	801a080 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a342:	463a      	mov	r2, r7
 801a344:	4631      	mov	r1, r6
 801a346:	4603      	mov	r3, r0
 801a348:	4620      	mov	r0, r4
 801a34a:	f7ff ffc1 	bl	801a2d0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801a34e:	4b0e      	ldr	r3, [pc, #56]	@ (801a388 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 801a350:	9005      	str	r0, [sp, #20]
 801a352:	881b      	ldrh	r3, [r3, #0]
 801a354:	f8ad 301e 	strh.w	r3, [sp, #30]
 801a358:	f7fa f884 	bl	8014464 <_ZN8touchgfx3HAL3lcdEv>
 801a35c:	6803      	ldr	r3, [r0, #0]
 801a35e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a360:	4798      	blx	r3
 801a362:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a364:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 801a368:	a901      	add	r1, sp, #4
 801a36a:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 801a36e:	9304      	str	r3, [sp, #16]
 801a370:	6860      	ldr	r0, [r4, #4]
 801a372:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 801a376:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 801a37a:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 801a37e:	6803      	ldr	r3, [r0, #0]
 801a380:	685b      	ldr	r3, [r3, #4]
 801a382:	4798      	blx	r3
 801a384:	b00b      	add	sp, #44	@ 0x2c
 801a386:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a388:	24034226 	.word	0x24034226

0801a38c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 801a38c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a38e:	b08d      	sub	sp, #52	@ 0x34
 801a390:	2501      	movs	r5, #1
 801a392:	4604      	mov	r4, r0
 801a394:	466b      	mov	r3, sp
 801a396:	9503      	str	r5, [sp, #12]
 801a398:	e883 0006 	stmia.w	r3, {r1, r2}
 801a39c:	2300      	movs	r3, #0
 801a39e:	f8bd 6000 	ldrh.w	r6, [sp]
 801a3a2:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801a3a6:	9306      	str	r3, [sp, #24]
 801a3a8:	6803      	ldr	r3, [r0, #0]
 801a3aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a3ac:	4798      	blx	r3
 801a3ae:	463a      	mov	r2, r7
 801a3b0:	4631      	mov	r1, r6
 801a3b2:	4603      	mov	r3, r0
 801a3b4:	4620      	mov	r0, r4
 801a3b6:	f7ff ff8b 	bl	801a2d0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801a3ba:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 801a3bc:	9004      	str	r0, [sp, #16]
 801a3be:	9307      	str	r3, [sp, #28]
 801a3c0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801a3c4:	f8ad 3020 	strh.w	r3, [sp, #32]
 801a3c8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801a3cc:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801a3d0:	4b0e      	ldr	r3, [pc, #56]	@ (801a40c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 801a3d2:	881b      	ldrh	r3, [r3, #0]
 801a3d4:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 801a3d8:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 801a3dc:	f7fa f842 	bl	8014464 <_ZN8touchgfx3HAL3lcdEv>
 801a3e0:	6803      	ldr	r3, [r0, #0]
 801a3e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a3e4:	4798      	blx	r3
 801a3e6:	23ff      	movs	r3, #255	@ 0xff
 801a3e8:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 801a3ec:	a903      	add	r1, sp, #12
 801a3ee:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 801a3f2:	6860      	ldr	r0, [r4, #4]
 801a3f4:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 801a3f8:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 801a3fc:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 801a400:	6803      	ldr	r3, [r0, #0]
 801a402:	685b      	ldr	r3, [r3, #4]
 801a404:	4798      	blx	r3
 801a406:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 801a408:	b00d      	add	sp, #52	@ 0x34
 801a40a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a40c:	24034226 	.word	0x24034226

0801a410 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 801a410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a414:	b08c      	sub	sp, #48	@ 0x30
 801a416:	461e      	mov	r6, r3
 801a418:	2300      	movs	r3, #0
 801a41a:	4604      	mov	r4, r0
 801a41c:	466d      	mov	r5, sp
 801a41e:	9306      	str	r3, [sp, #24]
 801a420:	6803      	ldr	r3, [r0, #0]
 801a422:	e885 0006 	stmia.w	r5, {r1, r2}
 801a426:	2501      	movs	r5, #1
 801a428:	f8bd 7000 	ldrh.w	r7, [sp]
 801a42c:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 801a430:	9503      	str	r5, [sp, #12]
 801a432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a434:	4798      	blx	r3
 801a436:	4642      	mov	r2, r8
 801a438:	4639      	mov	r1, r7
 801a43a:	4603      	mov	r3, r0
 801a43c:	4620      	mov	r0, r4
 801a43e:	f7ff ff47 	bl	801a2d0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801a442:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801a446:	9004      	str	r0, [sp, #16]
 801a448:	f8ad 3020 	strh.w	r3, [sp, #32]
 801a44c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801a450:	9607      	str	r6, [sp, #28]
 801a452:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801a456:	4b10      	ldr	r3, [pc, #64]	@ (801a498 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 801a458:	881b      	ldrh	r3, [r3, #0]
 801a45a:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 801a45e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801a460:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 801a464:	f7f9 fffe 	bl	8014464 <_ZN8touchgfx3HAL3lcdEv>
 801a468:	6803      	ldr	r3, [r0, #0]
 801a46a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a46c:	4798      	blx	r3
 801a46e:	23ff      	movs	r3, #255	@ 0xff
 801a470:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 801a474:	a903      	add	r1, sp, #12
 801a476:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 801a47a:	6860      	ldr	r0, [r4, #4]
 801a47c:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 801a480:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 801a484:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 801a488:	6803      	ldr	r3, [r0, #0]
 801a48a:	685b      	ldr	r3, [r3, #4]
 801a48c:	4798      	blx	r3
 801a48e:	4630      	mov	r0, r6
 801a490:	b00c      	add	sp, #48	@ 0x30
 801a492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a496:	bf00      	nop
 801a498:	24034226 	.word	0x24034226

0801a49c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 801a49c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a49e:	b085      	sub	sp, #20
 801a4a0:	4605      	mov	r5, r0
 801a4a2:	ac02      	add	r4, sp, #8
 801a4a4:	e884 0006 	stmia.w	r4, {r1, r2}
 801a4a8:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 801a4ac:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 801a4b0:	f7ff fde6 	bl	801a080 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a4b4:	4631      	mov	r1, r6
 801a4b6:	4603      	mov	r3, r0
 801a4b8:	463a      	mov	r2, r7
 801a4ba:	4628      	mov	r0, r5
 801a4bc:	f7ff ff08 	bl	801a2d0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801a4c0:	4a05      	ldr	r2, [pc, #20]	@ (801a4d8 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 801a4c2:	682b      	ldr	r3, [r5, #0]
 801a4c4:	8812      	ldrh	r2, [r2, #0]
 801a4c6:	9200      	str	r2, [sp, #0]
 801a4c8:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 801a4ca:	4603      	mov	r3, r0
 801a4cc:	4628      	mov	r0, r5
 801a4ce:	e894 0006 	ldmia.w	r4, {r1, r2}
 801a4d2:	47b0      	blx	r6
 801a4d4:	b005      	add	sp, #20
 801a4d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a4d8:	24034226 	.word	0x24034226

0801a4dc <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801a4dc:	b570      	push	{r4, r5, r6, lr}
 801a4de:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 801a4e2:	4604      	mov	r4, r0
 801a4e4:	b19b      	cbz	r3, 801a50e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801a4e6:	2002      	movs	r0, #2
 801a4e8:	f7fc fb12 	bl	8016b10 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801a4ec:	2300      	movs	r3, #0
 801a4ee:	4620      	mov	r0, r4
 801a4f0:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 801a4f4:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 801a4f8:	6823      	ldr	r3, [r4, #0]
 801a4fa:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 801a4fe:	f7ff fdbf 	bl	801a080 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a502:	4601      	mov	r1, r0
 801a504:	4620      	mov	r0, r4
 801a506:	462b      	mov	r3, r5
 801a508:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a50c:	4718      	bx	r3
 801a50e:	bd70      	pop	{r4, r5, r6, pc}

0801a510 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 801a510:	b538      	push	{r3, r4, r5, lr}
 801a512:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 801a516:	4604      	mov	r4, r0
 801a518:	460d      	mov	r5, r1
 801a51a:	428b      	cmp	r3, r1
 801a51c:	d006      	beq.n	801a52c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 801a51e:	6803      	ldr	r3, [r0, #0]
 801a520:	b929      	cbnz	r1, 801a52e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 801a522:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 801a526:	4798      	blx	r3
 801a528:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 801a52c:	bd38      	pop	{r3, r4, r5, pc}
 801a52e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 801a532:	e7f8      	b.n	801a526 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0801a534 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801a534:	4b0d      	ldr	r3, [pc, #52]	@ (801a56c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 801a536:	b510      	push	{r4, lr}
 801a538:	781b      	ldrb	r3, [r3, #0]
 801a53a:	4604      	mov	r4, r0
 801a53c:	b95b      	cbnz	r3, 801a556 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801a53e:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 801a542:	2b02      	cmp	r3, #2
 801a544:	d007      	beq.n	801a556 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801a546:	6840      	ldr	r0, [r0, #4]
 801a548:	f000 f928 	bl	801a79c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801a54c:	b118      	cbz	r0, 801a556 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801a54e:	6862      	ldr	r2, [r4, #4]
 801a550:	7a53      	ldrb	r3, [r2, #9]
 801a552:	2b00      	cmp	r3, #0
 801a554:	d0fc      	beq.n	801a550 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801a556:	f7fc fde7 	bl	8017128 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801a55a:	4620      	mov	r0, r4
 801a55c:	2100      	movs	r1, #0
 801a55e:	f7ff ffd7 	bl	801a510 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801a562:	4620      	mov	r0, r4
 801a564:	f7ff fd8c 	bl	801a080 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a568:	bd10      	pop	{r4, pc}
 801a56a:	bf00      	nop
 801a56c:	2403422a 	.word	0x2403422a

0801a570 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 801a570:	b570      	push	{r4, r5, r6, lr}
 801a572:	4604      	mov	r4, r0
 801a574:	6803      	ldr	r3, [r0, #0]
 801a576:	b919      	cbnz	r1, 801a580 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 801a578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a57a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a57e:	4718      	bx	r3
 801a580:	2200      	movs	r2, #0
 801a582:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 801a586:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 801a58a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a58c:	4798      	blx	r3
 801a58e:	6863      	ldr	r3, [r4, #4]
 801a590:	2101      	movs	r1, #1
 801a592:	4605      	mov	r5, r0
 801a594:	4620      	mov	r0, r4
 801a596:	7299      	strb	r1, [r3, #10]
 801a598:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 801a59c:	f7ff ffb8 	bl	801a510 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801a5a0:	4628      	mov	r0, r5
 801a5a2:	bd70      	pop	{r4, r5, r6, pc}

0801a5a4 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 801a5a4:	4770      	bx	lr

0801a5a6 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 801a5a6:	2000      	movs	r0, #0
 801a5a8:	4770      	bx	lr

0801a5aa <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801a5aa:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801a5ae:	1a13      	subs	r3, r2, r0
 801a5b0:	4258      	negs	r0, r3
 801a5b2:	4158      	adcs	r0, r3
 801a5b4:	4770      	bx	lr

0801a5b6 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801a5b6:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801a5ba:	1a9b      	subs	r3, r3, r2
 801a5bc:	2b00      	cmp	r3, #0
 801a5be:	bfdc      	itt	le
 801a5c0:	6882      	ldrle	r2, [r0, #8]
 801a5c2:	189b      	addle	r3, r3, r2
 801a5c4:	2b01      	cmp	r3, #1
 801a5c6:	bfcc      	ite	gt
 801a5c8:	2000      	movgt	r0, #0
 801a5ca:	2001      	movle	r0, #1
 801a5cc:	4770      	bx	lr

0801a5ce <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801a5ce:	6902      	ldr	r2, [r0, #16]
 801a5d0:	6843      	ldr	r3, [r0, #4]
 801a5d2:	2024      	movs	r0, #36	@ 0x24
 801a5d4:	fb00 3002 	mla	r0, r0, r2, r3
 801a5d8:	4770      	bx	lr

0801a5da <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801a5da:	6803      	ldr	r3, [r0, #0]
 801a5dc:	691b      	ldr	r3, [r3, #16]
 801a5de:	4718      	bx	r3

0801a5e0 <_ZN8touchgfx13DMA_Interface7executeEv>:
 801a5e0:	2301      	movs	r3, #1
 801a5e2:	b570      	push	{r4, r5, r6, lr}
 801a5e4:	7203      	strb	r3, [r0, #8]
 801a5e6:	4604      	mov	r4, r0
 801a5e8:	6840      	ldr	r0, [r0, #4]
 801a5ea:	6803      	ldr	r3, [r0, #0]
 801a5ec:	699b      	ldr	r3, [r3, #24]
 801a5ee:	4798      	blx	r3
 801a5f0:	6803      	ldr	r3, [r0, #0]
 801a5f2:	4605      	mov	r5, r0
 801a5f4:	2b40      	cmp	r3, #64	@ 0x40
 801a5f6:	d00c      	beq.n	801a612 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801a5f8:	d810      	bhi.n	801a61c <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 801a5fa:	2b04      	cmp	r3, #4
 801a5fc:	d01d      	beq.n	801a63a <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 801a5fe:	d804      	bhi.n	801a60a <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 801a600:	2b01      	cmp	r3, #1
 801a602:	d006      	beq.n	801a612 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801a604:	2b02      	cmp	r3, #2
 801a606:	d02c      	beq.n	801a662 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 801a608:	bd70      	pop	{r4, r5, r6, pc}
 801a60a:	2b08      	cmp	r3, #8
 801a60c:	d01d      	beq.n	801a64a <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 801a60e:	2b20      	cmp	r3, #32
 801a610:	d1fa      	bne.n	801a608 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 801a612:	6823      	ldr	r3, [r4, #0]
 801a614:	4620      	mov	r0, r4
 801a616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a618:	4798      	blx	r3
 801a61a:	e013      	b.n	801a644 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801a61c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a620:	d0f7      	beq.n	801a612 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801a622:	d804      	bhi.n	801a62e <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 801a624:	2b80      	cmp	r3, #128	@ 0x80
 801a626:	d0f4      	beq.n	801a612 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801a628:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a62c:	e7f0      	b.n	801a610 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 801a62e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801a632:	d0ee      	beq.n	801a612 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801a634:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801a638:	e7e5      	b.n	801a606 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 801a63a:	6823      	ldr	r3, [r4, #0]
 801a63c:	7f01      	ldrb	r1, [r0, #28]
 801a63e:	4620      	mov	r0, r4
 801a640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a642:	4798      	blx	r3
 801a644:	6823      	ldr	r3, [r4, #0]
 801a646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a648:	e006      	b.n	801a658 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801a64a:	6823      	ldr	r3, [r4, #0]
 801a64c:	7f01      	ldrb	r1, [r0, #28]
 801a64e:	4620      	mov	r0, r4
 801a650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a652:	4798      	blx	r3
 801a654:	6823      	ldr	r3, [r4, #0]
 801a656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a658:	4629      	mov	r1, r5
 801a65a:	4620      	mov	r0, r4
 801a65c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a660:	4718      	bx	r3
 801a662:	6823      	ldr	r3, [r4, #0]
 801a664:	4620      	mov	r0, r4
 801a666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a668:	4798      	blx	r3
 801a66a:	e7f3      	b.n	801a654 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0801a66c <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801a66c:	4770      	bx	lr

0801a66e <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801a66e:	4770      	bx	lr

0801a670 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801a670:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 801a674:	b510      	push	{r4, lr}
 801a676:	1ad2      	subs	r2, r2, r3
 801a678:	2a00      	cmp	r2, #0
 801a67a:	bfdc      	itt	le
 801a67c:	6884      	ldrle	r4, [r0, #8]
 801a67e:	1912      	addle	r2, r2, r4
 801a680:	2a01      	cmp	r2, #1
 801a682:	dd16      	ble.n	801a6b2 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 801a684:	6842      	ldr	r2, [r0, #4]
 801a686:	2424      	movs	r4, #36	@ 0x24
 801a688:	fb04 2303 	mla	r3, r4, r3, r2
 801a68c:	f101 0220 	add.w	r2, r1, #32
 801a690:	f851 4b04 	ldr.w	r4, [r1], #4
 801a694:	4291      	cmp	r1, r2
 801a696:	f843 4b04 	str.w	r4, [r3], #4
 801a69a:	d1f9      	bne.n	801a690 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 801a69c:	780a      	ldrb	r2, [r1, #0]
 801a69e:	701a      	strb	r2, [r3, #0]
 801a6a0:	68c3      	ldr	r3, [r0, #12]
 801a6a2:	6882      	ldr	r2, [r0, #8]
 801a6a4:	f3bf 8f5b 	dmb	ish
 801a6a8:	3301      	adds	r3, #1
 801a6aa:	429a      	cmp	r2, r3
 801a6ac:	bfd8      	it	le
 801a6ae:	1a9b      	suble	r3, r3, r2
 801a6b0:	60c3      	str	r3, [r0, #12]
 801a6b2:	bd10      	pop	{r4, pc}

0801a6b4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801a6b4:	6903      	ldr	r3, [r0, #16]
 801a6b6:	6882      	ldr	r2, [r0, #8]
 801a6b8:	f3bf 8f5b 	dmb	ish
 801a6bc:	3301      	adds	r3, #1
 801a6be:	429a      	cmp	r2, r3
 801a6c0:	bfd8      	it	le
 801a6c2:	1a9b      	suble	r3, r3, r2
 801a6c4:	6103      	str	r3, [r0, #16]
 801a6c6:	4770      	bx	lr

0801a6c8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801a6c8:	b570      	push	{r4, r5, r6, lr}
 801a6ca:	4604      	mov	r4, r0
 801a6cc:	460e      	mov	r6, r1
 801a6ce:	6860      	ldr	r0, [r4, #4]
 801a6d0:	6803      	ldr	r3, [r0, #0]
 801a6d2:	685b      	ldr	r3, [r3, #4]
 801a6d4:	4798      	blx	r3
 801a6d6:	2800      	cmp	r0, #0
 801a6d8:	d1f9      	bne.n	801a6ce <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801a6da:	4d0d      	ldr	r5, [pc, #52]	@ (801a710 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 801a6dc:	6828      	ldr	r0, [r5, #0]
 801a6de:	6803      	ldr	r3, [r0, #0]
 801a6e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801a6e2:	4798      	blx	r3
 801a6e4:	f7fc fd3a 	bl	801715c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801a6e8:	6828      	ldr	r0, [r5, #0]
 801a6ea:	2101      	movs	r1, #1
 801a6ec:	f7ff ff10 	bl	801a510 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801a6f0:	6860      	ldr	r0, [r4, #4]
 801a6f2:	4631      	mov	r1, r6
 801a6f4:	6803      	ldr	r3, [r0, #0]
 801a6f6:	689b      	ldr	r3, [r3, #8]
 801a6f8:	4798      	blx	r3
 801a6fa:	6823      	ldr	r3, [r4, #0]
 801a6fc:	4620      	mov	r0, r4
 801a6fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a700:	4798      	blx	r3
 801a702:	6828      	ldr	r0, [r5, #0]
 801a704:	6803      	ldr	r3, [r0, #0]
 801a706:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a70a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801a70c:	4718      	bx	r3
 801a70e:	bf00      	nop
 801a710:	2403422c 	.word	0x2403422c

0801a714 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801a714:	b508      	push	{r3, lr}
 801a716:	f7fc fd07 	bl	8017128 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801a71a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801a71e:	f7fc bd11 	b.w	8017144 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801a722 <_ZN8touchgfx13DMA_Interface5startEv>:
 801a722:	b510      	push	{r4, lr}
 801a724:	4604      	mov	r4, r0
 801a726:	6840      	ldr	r0, [r0, #4]
 801a728:	6803      	ldr	r3, [r0, #0]
 801a72a:	681b      	ldr	r3, [r3, #0]
 801a72c:	4798      	blx	r3
 801a72e:	b948      	cbnz	r0, 801a744 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801a730:	7a63      	ldrb	r3, [r4, #9]
 801a732:	b13b      	cbz	r3, 801a744 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801a734:	7a23      	ldrb	r3, [r4, #8]
 801a736:	b92b      	cbnz	r3, 801a744 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801a738:	6823      	ldr	r3, [r4, #0]
 801a73a:	4620      	mov	r0, r4
 801a73c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a73e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a742:	4718      	bx	r3
 801a744:	bd10      	pop	{r4, pc}

0801a746 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801a746:	b570      	push	{r4, r5, r6, lr}
 801a748:	4604      	mov	r4, r0
 801a74a:	6840      	ldr	r0, [r0, #4]
 801a74c:	6803      	ldr	r3, [r0, #0]
 801a74e:	681b      	ldr	r3, [r3, #0]
 801a750:	4798      	blx	r3
 801a752:	4605      	mov	r5, r0
 801a754:	b930      	cbnz	r0, 801a764 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801a756:	7a23      	ldrb	r3, [r4, #8]
 801a758:	b123      	cbz	r3, 801a764 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801a75a:	6860      	ldr	r0, [r4, #4]
 801a75c:	6803      	ldr	r3, [r0, #0]
 801a75e:	695b      	ldr	r3, [r3, #20]
 801a760:	4798      	blx	r3
 801a762:	7225      	strb	r5, [r4, #8]
 801a764:	6860      	ldr	r0, [r4, #4]
 801a766:	6803      	ldr	r3, [r0, #0]
 801a768:	681b      	ldr	r3, [r3, #0]
 801a76a:	4798      	blx	r3
 801a76c:	b928      	cbnz	r0, 801a77a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 801a76e:	6823      	ldr	r3, [r4, #0]
 801a770:	4620      	mov	r0, r4
 801a772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a774:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a778:	4718      	bx	r3
 801a77a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a77e:	f7fc bcf9 	b.w	8017174 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

0801a784 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 801a784:	b510      	push	{r4, lr}
 801a786:	6082      	str	r2, [r0, #8]
 801a788:	2200      	movs	r2, #0
 801a78a:	4c03      	ldr	r4, [pc, #12]	@ (801a798 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801a78c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801a790:	e9c0 4100 	strd	r4, r1, [r0]
 801a794:	bd10      	pop	{r4, pc}
 801a796:	bf00      	nop
 801a798:	0802ec5c 	.word	0x0802ec5c

0801a79c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801a79c:	6840      	ldr	r0, [r0, #4]
 801a79e:	6803      	ldr	r3, [r0, #0]
 801a7a0:	681b      	ldr	r3, [r3, #0]
 801a7a2:	4718      	bx	r3

0801a7a4 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv>:
 801a7a4:	2300      	movs	r3, #0
 801a7a6:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801a7a8:	8503      	strh	r3, [r0, #40]	@ 0x28
 801a7aa:	8543      	strh	r3, [r0, #42]	@ 0x2a
 801a7ac:	8583      	strh	r3, [r0, #44]	@ 0x2c
 801a7ae:	6980      	ldr	r0, [r0, #24]
 801a7b0:	b110      	cbz	r0, 801a7b8 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv+0x14>
 801a7b2:	6803      	ldr	r3, [r0, #0]
 801a7b4:	691b      	ldr	r3, [r3, #16]
 801a7b6:	4718      	bx	r3
 801a7b8:	4770      	bx	lr

0801a7ba <_ZN8touchgfx17CWRVectorRenderer14setStrokeWidthEf>:
 801a7ba:	ed80 0a0c 	vstr	s0, [r0, #48]	@ 0x30
 801a7be:	4770      	bx	lr

0801a7c0 <_ZN8touchgfx17CWRVectorRenderer8setColorENS_9colortypeE>:
 801a7c0:	b538      	push	{r3, r4, r5, lr}
 801a7c2:	0e0b      	lsrs	r3, r1, #24
 801a7c4:	4604      	mov	r4, r0
 801a7c6:	460d      	mov	r5, r1
 801a7c8:	7783      	strb	r3, [r0, #30]
 801a7ca:	6803      	ldr	r3, [r0, #0]
 801a7cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a7ce:	4798      	blx	r3
 801a7d0:	6803      	ldr	r3, [r0, #0]
 801a7d2:	4629      	mov	r1, r5
 801a7d4:	689b      	ldr	r3, [r3, #8]
 801a7d6:	4798      	blx	r3
 801a7d8:	6823      	ldr	r3, [r4, #0]
 801a7da:	4620      	mov	r0, r4
 801a7dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a7de:	4798      	blx	r3
 801a7e0:	61a0      	str	r0, [r4, #24]
 801a7e2:	bd38      	pop	{r3, r4, r5, pc}

0801a7e4 <_ZN8touchgfx17CWRVectorRenderer8setAlphaEh>:
 801a7e4:	7741      	strb	r1, [r0, #29]
 801a7e6:	4770      	bx	lr

0801a7e8 <_ZN8touchgfx17CWRVectorRenderer23setTransformationMatrixERKNS_9Matrix3x3E>:
 801a7e8:	b530      	push	{r4, r5, lr}
 801a7ea:	460d      	mov	r5, r1
 801a7ec:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 801a7f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a7f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a7f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a7f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a7f8:	682b      	ldr	r3, [r5, #0]
 801a7fa:	6023      	str	r3, [r4, #0]
 801a7fc:	bd30      	pop	{r4, r5, pc}

0801a7fe <_ZN8touchgfx17CWRVectorRenderer5setupERKNS_4RectES3_>:
 801a7fe:	b538      	push	{r3, r4, r5, lr}
 801a800:	4604      	mov	r4, r0
 801a802:	1d03      	adds	r3, r0, #4
 801a804:	6808      	ldr	r0, [r1, #0]
 801a806:	2500      	movs	r5, #0
 801a808:	6849      	ldr	r1, [r1, #4]
 801a80a:	c303      	stmia	r3!, {r0, r1}
 801a80c:	6813      	ldr	r3, [r2, #0]
 801a80e:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 801a812:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
 801a816:	6853      	ldr	r3, [r2, #4]
 801a818:	61a5      	str	r5, [r4, #24]
 801a81a:	f8c4 302a 	str.w	r3, [r4, #42]	@ 0x2a
 801a81e:	f004 fe8b 	bl	801f538 <_ZN8touchgfx9Matrix3x35resetEv>
 801a822:	23ff      	movs	r3, #255	@ 0xff
 801a824:	f884 5025 	strb.w	r5, [r4, #37]	@ 0x25
 801a828:	7763      	strb	r3, [r4, #29]
 801a82a:	77a3      	strb	r3, [r4, #30]
 801a82c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 801a830:	6323      	str	r3, [r4, #48]	@ 0x30
 801a832:	2301      	movs	r3, #1
 801a834:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 801a838:	bd38      	pop	{r3, r4, r5, pc}
	...

0801a83c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_>:
 801a83c:	ee70 7a41 	vsub.f32	s15, s0, s2
 801a840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a844:	eef5 7a40 	vcmp.f32	s15, #0.0
 801a848:	4605      	mov	r5, r0
 801a84a:	ed2d 8b0a 	vpush	{d8-d12}
 801a84e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a852:	b086      	sub	sp, #24
 801a854:	eeb0 ba40 	vmov.f32	s22, s0
 801a858:	6802      	ldr	r2, [r0, #0]
 801a85a:	eef0 ba60 	vmov.f32	s23, s1
 801a85e:	f89d 6058 	ldrb.w	r6, [sp, #88]	@ 0x58
 801a862:	eef0 aa41 	vmov.f32	s21, s2
 801a866:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 801a868:	eeb0 aa61 	vmov.f32	s20, s3
 801a86c:	eeb0 ca42 	vmov.f32	s24, s4
 801a870:	eef0 ca62 	vmov.f32	s25, s5
 801a874:	d112      	bne.n	801a89c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 801a876:	ee70 7ae1 	vsub.f32	s15, s1, s3
 801a87a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801a87e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a882:	d10b      	bne.n	801a89c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 801a884:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 801a888:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 801a88a:	3901      	subs	r1, #1
 801a88c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 801a890:	b006      	add	sp, #24
 801a892:	ecbd 8b0a 	vpop	{d8-d12}
 801a896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a89a:	4710      	bx	r2
 801a89c:	23ff      	movs	r3, #255	@ 0xff
 801a89e:	4628      	mov	r0, r5
 801a8a0:	f105 0834 	add.w	r8, r5, #52	@ 0x34
 801a8a4:	77ab      	strb	r3, [r5, #30]
 801a8a6:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 801a8a8:	4798      	blx	r3
 801a8aa:	eeb0 0a4b 	vmov.f32	s0, s22
 801a8ae:	eef0 0a6b 	vmov.f32	s1, s23
 801a8b2:	4604      	mov	r4, r0
 801a8b4:	4640      	mov	r0, r8
 801a8b6:	f004 feee 	bl	801f696 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801a8ba:	eef0 8a40 	vmov.f32	s17, s0
 801a8be:	ed8d 0a00 	vstr	s0, [sp]
 801a8c2:	eeb0 0a6a 	vmov.f32	s0, s21
 801a8c6:	eef0 9a60 	vmov.f32	s19, s1
 801a8ca:	edcd 0a01 	vstr	s1, [sp, #4]
 801a8ce:	4640      	mov	r0, r8
 801a8d0:	eef0 0a4a 	vmov.f32	s1, s20
 801a8d4:	f004 fedf 	bl	801f696 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801a8d8:	eef4 8a40 	vcmp.f32	s17, s0
 801a8dc:	eeb0 8a40 	vmov.f32	s16, s0
 801a8e0:	ed8d 0a02 	vstr	s0, [sp, #8]
 801a8e4:	eeb0 9a60 	vmov.f32	s18, s1
 801a8e8:	edcd 0a03 	vstr	s1, [sp, #12]
 801a8ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8f0:	eef4 9a60 	vcmp.f32	s19, s1
 801a8f4:	bf0c      	ite	eq
 801a8f6:	2301      	moveq	r3, #1
 801a8f8:	2300      	movne	r3, #0
 801a8fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8fe:	eef4 8a40 	vcmp.f32	s17, s0
 801a902:	7463      	strb	r3, [r4, #17]
 801a904:	bf0c      	ite	eq
 801a906:	2301      	moveq	r3, #1
 801a908:	2300      	movne	r3, #0
 801a90a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a90e:	74a3      	strb	r3, [r4, #18]
 801a910:	d024      	beq.n	801a95c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 801a912:	eef4 9a60 	vcmp.f32	s19, s1
 801a916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a91a:	d01f      	beq.n	801a95c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 801a91c:	ee3a aa6b 	vsub.f32	s20, s20, s23
 801a920:	4640      	mov	r0, r8
 801a922:	ee7a aacb 	vsub.f32	s21, s21, s22
 801a926:	eeb0 0a4b 	vmov.f32	s0, s22
 801a92a:	eeca 7a2c 	vdiv.f32	s15, s20, s25
 801a92e:	ee8a 7a8c 	vdiv.f32	s14, s21, s24
 801a932:	eef0 0a6b 	vmov.f32	s1, s23
 801a936:	eea7 0acc 	vfms.f32	s0, s15, s24
 801a93a:	eeec 0a87 	vfma.f32	s1, s25, s14
 801a93e:	f004 feaa 	bl	801f696 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801a942:	ed8d 0a04 	vstr	s0, [sp, #16]
 801a946:	ee30 0a68 	vsub.f32	s0, s0, s17
 801a94a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801a94e:	edcd 0a05 	vstr	s1, [sp, #20]
 801a952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a956:	d121      	bne.n	801a99c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x160>
 801a958:	2301      	movs	r3, #1
 801a95a:	74a3      	strb	r3, [r4, #18]
 801a95c:	7c63      	ldrb	r3, [r4, #17]
 801a95e:	2b00      	cmp	r3, #0
 801a960:	d051      	beq.n	801aa06 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ca>
 801a962:	ee39 7a69 	vsub.f32	s14, s18, s19
 801a966:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801aa5c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 801a96a:	eef4 9ac9 	vcmpe.f32	s19, s18
 801a96e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801a972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a976:	edc4 7a08 	vstr	s15, [r4, #32]
 801a97a:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 801a97e:	ee17 3a90 	vmov	r3, s15
 801a982:	eefd 7ae9 	vcvt.s32.f32	s15, s19
 801a986:	b21a      	sxth	r2, r3
 801a988:	ee17 3a90 	vmov	r3, s15
 801a98c:	bf48      	it	mi
 801a98e:	8122      	strhmi	r2, [r4, #8]
 801a990:	b21b      	sxth	r3, r3
 801a992:	bf56      	itet	pl
 801a994:	80e2      	strhpl	r2, [r4, #6]
 801a996:	80e3      	strhmi	r3, [r4, #6]
 801a998:	8123      	strhpl	r3, [r4, #8]
 801a99a:	e02c      	b.n	801a9f6 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 801a99c:	ee70 0ae9 	vsub.f32	s1, s1, s19
 801a9a0:	eec0 7a80 	vdiv.f32	s15, s1, s0
 801a9a4:	eef5 7a40 	vcmp.f32	s15, #0.0
 801a9a8:	edc4 7a05 	vstr	s15, [r4, #20]
 801a9ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9b0:	d102      	bne.n	801a9b8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x17c>
 801a9b2:	2301      	movs	r3, #1
 801a9b4:	7463      	strb	r3, [r4, #17]
 801a9b6:	e7d1      	b.n	801a95c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 801a9b8:	eeb0 7a69 	vmov.f32	s14, s19
 801a9bc:	ee39 9a69 	vsub.f32	s18, s18, s19
 801a9c0:	ee38 8a68 	vsub.f32	s16, s16, s17
 801a9c4:	eea8 7ae7 	vfms.f32	s14, s17, s15
 801a9c8:	ed84 7a06 	vstr	s14, [r4, #24]
 801a9cc:	ee89 7a27 	vdiv.f32	s14, s18, s15
 801a9d0:	ee38 8a47 	vsub.f32	s16, s16, s14
 801a9d4:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 801aa60 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x224>
 801a9d8:	eec7 7a08 	vdiv.f32	s15, s14, s16
 801a9dc:	ed84 8a07 	vstr	s16, [r4, #28]
 801a9e0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801a9e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9e8:	edc4 7a08 	vstr	s15, [r4, #32]
 801a9ec:	d503      	bpl.n	801a9f6 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 801a9ee:	eeb1 8a48 	vneg.f32	s16, s16
 801a9f2:	ed84 8a07 	vstr	s16, [r4, #28]
 801a9f6:	60e7      	str	r7, [r4, #12]
 801a9f8:	7426      	strb	r6, [r4, #16]
 801a9fa:	61ac      	str	r4, [r5, #24]
 801a9fc:	b006      	add	sp, #24
 801a9fe:	ecbd 8b0a 	vpop	{d8-d12}
 801aa02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa06:	7ca3      	ldrb	r3, [r4, #18]
 801aa08:	2b00      	cmp	r3, #0
 801aa0a:	d0f4      	beq.n	801a9f6 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 801aa0c:	ee38 7a68 	vsub.f32	s14, s16, s17
 801aa10:	eddf 6a12 	vldr	s13, [pc, #72]	@ 801aa5c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 801aa14:	eef4 8ac8 	vcmpe.f32	s17, s16
 801aa18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801aa1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa20:	edc4 7a08 	vstr	s15, [r4, #32]
 801aa24:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801aa28:	ee17 3a90 	vmov	r3, s15
 801aa2c:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 801aa30:	b21a      	sxth	r2, r3
 801aa32:	ee17 3a90 	vmov	r3, s15
 801aa36:	bf48      	it	mi
 801aa38:	8122      	strhmi	r2, [r4, #8]
 801aa3a:	b21b      	sxth	r3, r3
 801aa3c:	bf56      	itet	pl
 801aa3e:	80e2      	strhpl	r2, [r4, #6]
 801aa40:	80e3      	strhmi	r3, [r4, #6]
 801aa42:	8123      	strhpl	r3, [r4, #8]
 801aa44:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801aa48:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801aa4c:	1a9b      	subs	r3, r3, r2
 801aa4e:	ee07 3a90 	vmov	s15, r3
 801aa52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aa56:	edc4 7a07 	vstr	s15, [r4, #28]
 801aa5a:	e7cc      	b.n	801a9f6 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 801aa5c:	447ffffe 	.word	0x447ffffe
 801aa60:	44800000 	.word	0x44800000

0801aa64 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>:
 801aa64:	b510      	push	{r4, lr}
 801aa66:	ed2d 8b02 	vpush	{d8}
 801aa6a:	eef0 8a62 	vmov.f32	s17, s5
 801aa6e:	2100      	movs	r1, #0
 801aa70:	4604      	mov	r4, r0
 801aa72:	eeb0 8a42 	vmov.f32	s16, s4
 801aa76:	f010 fd81 	bl	802b57c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 801aa7a:	eef0 7a68 	vmov.f32	s15, s17
 801aa7e:	6823      	ldr	r3, [r4, #0]
 801aa80:	4620      	mov	r0, r4
 801aa82:	689b      	ldr	r3, [r3, #8]
 801aa84:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801aa88:	ee17 2a90 	vmov	r2, s15
 801aa8c:	eef0 7a48 	vmov.f32	s15, s16
 801aa90:	ecbd 8b02 	vpop	{d8}
 801aa94:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801aa98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aa9c:	ee17 1a90 	vmov	r1, s15
 801aaa0:	4718      	bx	r3

0801aaa2 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>:
 801aaa2:	b510      	push	{r4, lr}
 801aaa4:	ed2d 8b02 	vpush	{d8}
 801aaa8:	eef0 8a63 	vmov.f32	s17, s7
 801aaac:	2100      	movs	r1, #0
 801aaae:	4604      	mov	r4, r0
 801aab0:	eeb0 8a43 	vmov.f32	s16, s6
 801aab4:	f010 fe24 	bl	802b700 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 801aab8:	eef0 7a68 	vmov.f32	s15, s17
 801aabc:	6823      	ldr	r3, [r4, #0]
 801aabe:	4620      	mov	r0, r4
 801aac0:	689b      	ldr	r3, [r3, #8]
 801aac2:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801aac6:	ee17 2a90 	vmov	r2, s15
 801aaca:	eef0 7a48 	vmov.f32	s15, s16
 801aace:	ecbd 8b02 	vpop	{d8}
 801aad2:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801aad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aada:	ee17 1a90 	vmov	r1, s15
 801aade:	4718      	bx	r3

0801aae0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>:
 801aae0:	b513      	push	{r0, r1, r4, lr}
 801aae2:	4604      	mov	r4, r0
 801aae4:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 801aae6:	f004 fdd6 	bl	801f696 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801aaea:	eef0 7a60 	vmov.f32	s15, s1
 801aaee:	4620      	mov	r0, r4
 801aaf0:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801aaf4:	ee17 2a90 	vmov	r2, s15
 801aaf8:	eef0 7a40 	vmov.f32	s15, s0
 801aafc:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801ab00:	ee17 1a90 	vmov	r1, s15
 801ab04:	b002      	add	sp, #8
 801ab06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ab0a:	f010 bc91 	b.w	802b430 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>

0801ab0e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>:
 801ab0e:	b513      	push	{r0, r1, r4, lr}
 801ab10:	4604      	mov	r4, r0
 801ab12:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 801ab14:	f004 fdbf 	bl	801f696 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801ab18:	eef0 7a60 	vmov.f32	s15, s1
 801ab1c:	4620      	mov	r0, r4
 801ab1e:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801ab22:	ee17 2a90 	vmov	r2, s15
 801ab26:	eef0 7a40 	vmov.f32	s15, s0
 801ab2a:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801ab2e:	ee17 1a90 	vmov	r1, s15
 801ab32:	b002      	add	sp, #8
 801ab34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ab38:	f010 bcc7 	b.w	802b4ca <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>

0801ab3c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>:
 801ab3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ab3e:	2400      	movs	r4, #0
 801ab40:	9f07      	ldr	r7, [sp, #28]
 801ab42:	f04f 0e01 	mov.w	lr, #1
 801ab46:	4626      	mov	r6, r4
 801ab48:	e9dd 0c05 	ldrd	r0, ip, [sp, #20]
 801ab4c:	4463      	add	r3, ip
 801ab4e:	4563      	cmp	r3, ip
 801ab50:	d02d      	beq.n	801abae <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x72>
 801ab52:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
 801ab56:	2d06      	cmp	r5, #6
 801ab58:	d8f9      	bhi.n	801ab4e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 801ab5a:	fa0e f505 	lsl.w	r5, lr, r5
 801ab5e:	f015 0f66 	tst.w	r5, #102	@ 0x66
 801ab62:	d10d      	bne.n	801ab80 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x44>
 801ab64:	f015 0f10 	tst.w	r5, #16
 801ab68:	d117      	bne.n	801ab9a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5e>
 801ab6a:	072d      	lsls	r5, r5, #28
 801ab6c:	d5ef      	bpl.n	801ab4e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 801ab6e:	3801      	subs	r0, #1
 801ab70:	b91e      	cbnz	r6, 801ab7a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x3e>
 801ab72:	eb07 0580 	add.w	r5, r7, r0, lsl #2
 801ab76:	682d      	ldr	r5, [r5, #0]
 801ab78:	600d      	str	r5, [r1, #0]
 801ab7a:	b96c      	cbnz	r4, 801ab98 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 801ab7c:	2601      	movs	r6, #1
 801ab7e:	e7e6      	b.n	801ab4e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 801ab80:	b926      	cbnz	r6, 801ab8c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x50>
 801ab82:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 801ab86:	f853 3c08 	ldr.w	r3, [r3, #-8]
 801ab8a:	600b      	str	r3, [r1, #0]
 801ab8c:	b924      	cbnz	r4, 801ab98 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 801ab8e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 801ab92:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801ab96:	6013      	str	r3, [r2, #0]
 801ab98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ab9a:	3801      	subs	r0, #1
 801ab9c:	b91c      	cbnz	r4, 801aba6 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x6a>
 801ab9e:	eb07 0480 	add.w	r4, r7, r0, lsl #2
 801aba2:	6824      	ldr	r4, [r4, #0]
 801aba4:	6014      	str	r4, [r2, #0]
 801aba6:	2e00      	cmp	r6, #0
 801aba8:	d1f6      	bne.n	801ab98 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 801abaa:	2401      	movs	r4, #1
 801abac:	e7cf      	b.n	801ab4e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 801abae:	b90e      	cbnz	r6, 801abb4 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x78>
 801abb0:	2300      	movs	r3, #0
 801abb2:	600b      	str	r3, [r1, #0]
 801abb4:	2c00      	cmp	r4, #0
 801abb6:	d1ef      	bne.n	801ab98 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 801abb8:	2300      	movs	r3, #0
 801abba:	e7ec      	b.n	801ab96 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5a>

0801abbc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>:
 801abbc:	b538      	push	{r3, r4, r5, lr}
 801abbe:	ed2d 8b0a 	vpush	{d8-d12}
 801abc2:	eef0 ba40 	vmov.f32	s23, s0
 801abc6:	4604      	mov	r4, r0
 801abc8:	eeb0 ca60 	vmov.f32	s24, s1
 801abcc:	460d      	mov	r5, r1
 801abce:	eef0 aa41 	vmov.f32	s21, s2
 801abd2:	eeb0 ba61 	vmov.f32	s22, s3
 801abd6:	eeb0 9a42 	vmov.f32	s18, s4
 801abda:	eef0 9a62 	vmov.f32	s19, s5
 801abde:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
 801abe2:	ee7b 8a29 	vadd.f32	s17, s22, s19
 801abe6:	ee3a 8a89 	vadd.f32	s16, s21, s18
 801abea:	ee68 8a8a 	vmul.f32	s17, s17, s20
 801abee:	ee28 8a0a 	vmul.f32	s16, s16, s20
 801abf2:	ee3c 0a68 	vsub.f32	s0, s24, s17
 801abf6:	ee7b 7ac8 	vsub.f32	s15, s23, s16
 801abfa:	ee20 0a00 	vmul.f32	s0, s0, s0
 801abfe:	eea7 0aa7 	vfma.f32	s0, s15, s15
 801ac02:	f010 ff55 	bl	802bab0 <sqrtf>
 801ac06:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801ac0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac0e:	d12e      	bne.n	801ac6e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xb2>
 801ac10:	ee79 7a6a 	vsub.f32	s15, s18, s21
 801ac14:	ee39 7acb 	vsub.f32	s14, s19, s22
 801ac18:	eeb0 8a6a 	vmov.f32	s16, s21
 801ac1c:	eef0 8a4b 	vmov.f32	s17, s22
 801ac20:	eea7 8a8a 	vfma.f32	s16, s15, s20
 801ac24:	eee7 8a0a 	vfma.f32	s17, s14, s20
 801ac28:	eea7 8a0a 	vfma.f32	s16, s14, s20
 801ac2c:	eee7 8aca 	vfms.f32	s17, s15, s20
 801ac30:	2d02      	cmp	r5, #2
 801ac32:	dc2f      	bgt.n	801ac94 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xd8>
 801ac34:	3501      	adds	r5, #1
 801ac36:	eef0 1a4b 	vmov.f32	s3, s22
 801ac3a:	eeb0 1a6a 	vmov.f32	s2, s21
 801ac3e:	4620      	mov	r0, r4
 801ac40:	4629      	mov	r1, r5
 801ac42:	eef0 2a68 	vmov.f32	s5, s17
 801ac46:	eeb0 2a48 	vmov.f32	s4, s16
 801ac4a:	eef0 0a4c 	vmov.f32	s1, s24
 801ac4e:	eeb0 0a6b 	vmov.f32	s0, s23
 801ac52:	f7ff ffb3 	bl	801abbc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 801ac56:	eef0 0a68 	vmov.f32	s1, s17
 801ac5a:	eeb0 0a48 	vmov.f32	s0, s16
 801ac5e:	4620      	mov	r0, r4
 801ac60:	f7ff ff55 	bl	801ab0e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801ac64:	eeb0 ba68 	vmov.f32	s22, s17
 801ac68:	eef0 aa48 	vmov.f32	s21, s16
 801ac6c:	e7b9      	b.n	801abe2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x26>
 801ac6e:	ee38 8a6b 	vsub.f32	s16, s16, s23
 801ac72:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 801ac76:	ee78 8acc 	vsub.f32	s17, s17, s24
 801ac7a:	ee28 7a27 	vmul.f32	s14, s16, s15
 801ac7e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801ac82:	ee87 8a00 	vdiv.f32	s16, s14, s0
 801ac86:	eec7 8a80 	vdiv.f32	s17, s15, s0
 801ac8a:	ee3b 8a88 	vadd.f32	s16, s23, s16
 801ac8e:	ee7c 8a28 	vadd.f32	s17, s24, s17
 801ac92:	e7cd      	b.n	801ac30 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x74>
 801ac94:	eef0 0a68 	vmov.f32	s1, s17
 801ac98:	4620      	mov	r0, r4
 801ac9a:	eeb0 0a48 	vmov.f32	s0, s16
 801ac9e:	f7ff ff36 	bl	801ab0e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801aca2:	ecbd 8b0a 	vpop	{d8-d12}
 801aca6:	bd38      	pop	{r3, r4, r5, pc}

0801aca8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>:
 801aca8:	b510      	push	{r4, lr}
 801acaa:	ed2d 8b0a 	vpush	{d8-d12}
 801acae:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 801acb2:	4604      	mov	r4, r0
 801acb4:	eeb0 ca40 	vmov.f32	s24, s0
 801acb8:	2b02      	cmp	r3, #2
 801acba:	eeb0 9a60 	vmov.f32	s18, s1
 801acbe:	eef0 9a41 	vmov.f32	s19, s2
 801acc2:	eef0 8a61 	vmov.f32	s17, s3
 801acc6:	eeb0 ba42 	vmov.f32	s22, s4
 801acca:	eef0 ba62 	vmov.f32	s23, s5
 801acce:	eeb0 aa43 	vmov.f32	s20, s6
 801acd2:	eef0 aa63 	vmov.f32	s21, s7
 801acd6:	eeb0 8a44 	vmov.f32	s16, s8
 801acda:	eef0 ca64 	vmov.f32	s25, s9
 801acde:	d12c      	bne.n	801ad3a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x92>
 801ace0:	eef0 0a62 	vmov.f32	s1, s5
 801ace4:	eeb0 0a42 	vmov.f32	s0, s4
 801ace8:	f7ff ff11 	bl	801ab0e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801acec:	ee79 9acb 	vsub.f32	s19, s19, s22
 801acf0:	ee7a caec 	vsub.f32	s25, s21, s25
 801acf4:	ee78 8aeb 	vsub.f32	s17, s17, s23
 801acf8:	ee3a 8a48 	vsub.f32	s16, s20, s16
 801acfc:	ee69 9aac 	vmul.f32	s19, s19, s25
 801ad00:	ee28 8a88 	vmul.f32	s16, s17, s16
 801ad04:	eef4 9ac8 	vcmpe.f32	s19, s16
 801ad08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad0c:	db0f      	blt.n	801ad2e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>
 801ad0e:	2101      	movs	r1, #1
 801ad10:	eef0 2a6a 	vmov.f32	s5, s21
 801ad14:	eeb0 2a4a 	vmov.f32	s4, s20
 801ad18:	4620      	mov	r0, r4
 801ad1a:	eef0 1a6b 	vmov.f32	s3, s23
 801ad1e:	eeb0 1a4b 	vmov.f32	s2, s22
 801ad22:	eef0 0a49 	vmov.f32	s1, s18
 801ad26:	eeb0 0a4c 	vmov.f32	s0, s24
 801ad2a:	f7ff ff47 	bl	801abbc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 801ad2e:	eef0 0a6a 	vmov.f32	s1, s21
 801ad32:	4620      	mov	r0, r4
 801ad34:	eeb0 0a4a 	vmov.f32	s0, s20
 801ad38:	e035      	b.n	801ada6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0xfe>
 801ad3a:	2b01      	cmp	r3, #1
 801ad3c:	d138      	bne.n	801adb0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 801ad3e:	ee31 4ae2 	vsub.f32	s8, s3, s5
 801ad42:	ee33 6a48 	vsub.f32	s12, s6, s16
 801ad46:	ee71 7a42 	vsub.f32	s15, s2, s4
 801ad4a:	ee73 6ae4 	vsub.f32	s13, s7, s9
 801ad4e:	ee26 7a44 	vnmul.f32	s14, s12, s8
 801ad52:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801ad56:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801ad5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad5e:	d027      	beq.n	801adb0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 801ad60:	ee28 8a63 	vnmul.f32	s16, s16, s7
 801ad64:	ee61 8ac2 	vnmul.f32	s17, s3, s4
 801ad68:	eea4 8a83 	vfma.f32	s16, s9, s6
 801ad6c:	eee1 8a22 	vfma.f32	s17, s2, s5
 801ad70:	ee68 7a67 	vnmul.f32	s15, s16, s15
 801ad74:	ee28 8a44 	vnmul.f32	s16, s16, s8
 801ad78:	eee6 7a28 	vfma.f32	s15, s12, s17
 801ad7c:	eea6 8aa8 	vfma.f32	s16, s13, s17
 801ad80:	ee87 0a87 	vdiv.f32	s0, s15, s14
 801ad84:	edd0 7a20 	vldr	s15, [r0, #128]	@ 0x80
 801ad88:	eec8 0a07 	vdiv.f32	s1, s16, s14
 801ad8c:	ee3c ca40 	vsub.f32	s24, s24, s0
 801ad90:	ee39 9a60 	vsub.f32	s18, s18, s1
 801ad94:	ee29 9a09 	vmul.f32	s18, s18, s18
 801ad98:	eeac 9a0c 	vfma.f32	s18, s24, s24
 801ad9c:	eef4 7ac9 	vcmpe.f32	s15, s18
 801ada0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ada4:	db04      	blt.n	801adb0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 801ada6:	f7ff feb2 	bl	801ab0e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801adaa:	ecbd 8b0a 	vpop	{d8-d12}
 801adae:	bd10      	pop	{r4, pc}
 801adb0:	eef0 0a6b 	vmov.f32	s1, s23
 801adb4:	4620      	mov	r0, r4
 801adb6:	eeb0 0a4b 	vmov.f32	s0, s22
 801adba:	f7ff fea8 	bl	801ab0e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801adbe:	e7b6      	b.n	801ad2e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>

0801adc0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>:
 801adc0:	b510      	push	{r4, lr}
 801adc2:	ed2d 8b0c 	vpush	{d8-d13}
 801adc6:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 801adca:	4604      	mov	r4, r0
 801adcc:	eeb0 9a40 	vmov.f32	s18, s0
 801add0:	eef0 9a60 	vmov.f32	s19, s1
 801add4:	eef0 aa41 	vmov.f32	s21, s2
 801add8:	eeb0 ba61 	vmov.f32	s22, s3
 801addc:	b933      	cbnz	r3, 801adec <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x2c>
 801adde:	f7ff fe96 	bl	801ab0e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801ade2:	eef0 0a4b 	vmov.f32	s1, s22
 801ade6:	eeb0 0a6a 	vmov.f32	s0, s21
 801adea:	e015      	b.n	801ae18 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x58>
 801adec:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801adf0:	2b02      	cmp	r3, #2
 801adf2:	ee71 8a40 	vsub.f32	s17, s2, s0
 801adf6:	ee31 8ae0 	vsub.f32	s16, s3, s1
 801adfa:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801adfe:	ee28 8a27 	vmul.f32	s16, s16, s15
 801ae02:	d10f      	bne.n	801ae24 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x64>
 801ae04:	ee70 0ae8 	vsub.f32	s1, s1, s17
 801ae08:	ee30 0a08 	vadd.f32	s0, s0, s16
 801ae0c:	f7ff fe7f 	bl	801ab0e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801ae10:	ee7b 0a68 	vsub.f32	s1, s22, s17
 801ae14:	ee3a 0a88 	vadd.f32	s0, s21, s16
 801ae18:	4620      	mov	r0, r4
 801ae1a:	f7ff fe78 	bl	801ab0e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801ae1e:	ecbd 8b0c 	vpop	{d8-d13}
 801ae22:	bd10      	pop	{r4, pc}
 801ae24:	f7ff fe73 	bl	801ab0e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801ae28:	eef0 0a69 	vmov.f32	s1, s19
 801ae2c:	eeb0 0a49 	vmov.f32	s0, s18
 801ae30:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 801af60 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a0>
 801ae34:	eeb1 aa68 	vneg.f32	s20, s17
 801ae38:	eddf ba4a 	vldr	s23, [pc, #296]	@ 801af64 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a4>
 801ae3c:	eee8 0a27 	vfma.f32	s1, s16, s15
 801ae40:	4620      	mov	r0, r4
 801ae42:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801ae46:	ed9f ca48 	vldr	s24, [pc, #288]	@ 801af68 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a8>
 801ae4a:	eddf ca48 	vldr	s25, [pc, #288]	@ 801af6c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1ac>
 801ae4e:	ed9f da48 	vldr	s26, [pc, #288]	@ 801af70 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b0>
 801ae52:	eeea 0a2b 	vfma.f32	s1, s20, s23
 801ae56:	eea8 0a2b 	vfma.f32	s0, s16, s23
 801ae5a:	f7ff fe58 	bl	801ab0e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801ae5e:	eef0 0a69 	vmov.f32	s1, s19
 801ae62:	eeb0 0a49 	vmov.f32	s0, s18
 801ae66:	eddf 7a43 	vldr	s15, [pc, #268]	@ 801af74 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b4>
 801ae6a:	4620      	mov	r0, r4
 801ae6c:	eee8 0a27 	vfma.f32	s1, s16, s15
 801ae70:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801ae74:	eeea 0a0c 	vfma.f32	s1, s20, s24
 801ae78:	eea8 0a0c 	vfma.f32	s0, s16, s24
 801ae7c:	f7ff fe47 	bl	801ab0e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801ae80:	eef0 0a69 	vmov.f32	s1, s19
 801ae84:	eeb0 0a49 	vmov.f32	s0, s18
 801ae88:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 801af78 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b8>
 801ae8c:	4620      	mov	r0, r4
 801ae8e:	eee8 0a27 	vfma.f32	s1, s16, s15
 801ae92:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801ae96:	eeea 0a2c 	vfma.f32	s1, s20, s25
 801ae9a:	eea8 0a2c 	vfma.f32	s0, s16, s25
 801ae9e:	f7ff fe36 	bl	801ab0e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801aea2:	eef0 0a69 	vmov.f32	s1, s19
 801aea6:	eeb0 0a49 	vmov.f32	s0, s18
 801aeaa:	eddf 7a34 	vldr	s15, [pc, #208]	@ 801af7c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1bc>
 801aeae:	4620      	mov	r0, r4
 801aeb0:	eee8 0a27 	vfma.f32	s1, s16, s15
 801aeb4:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801aeb8:	eeea 0a0d 	vfma.f32	s1, s20, s26
 801aebc:	eea8 0a0d 	vfma.f32	s0, s16, s26
 801aec0:	f7ff fe25 	bl	801ab0e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801aec4:	ee79 0a88 	vadd.f32	s1, s19, s16
 801aec8:	ee39 0a28 	vadd.f32	s0, s18, s17
 801aecc:	4620      	mov	r0, r4
 801aece:	ee70 0ae8 	vsub.f32	s1, s1, s17
 801aed2:	ee30 0a08 	vadd.f32	s0, s0, s16
 801aed6:	f7ff fe1a 	bl	801ab0e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801aeda:	eef0 0a69 	vmov.f32	s1, s19
 801aede:	eeb0 0a49 	vmov.f32	s0, s18
 801aee2:	eddf 7a27 	vldr	s15, [pc, #156]	@ 801af80 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c0>
 801aee6:	4620      	mov	r0, r4
 801aee8:	eee8 0a27 	vfma.f32	s1, s16, s15
 801aeec:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801aef0:	eeea 0a0d 	vfma.f32	s1, s20, s26
 801aef4:	eea8 0a0d 	vfma.f32	s0, s16, s26
 801aef8:	f7ff fe09 	bl	801ab0e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801aefc:	eef0 0a69 	vmov.f32	s1, s19
 801af00:	eeb0 0a49 	vmov.f32	s0, s18
 801af04:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 801af84 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c4>
 801af08:	4620      	mov	r0, r4
 801af0a:	eee8 0a27 	vfma.f32	s1, s16, s15
 801af0e:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801af12:	eeea 0a2c 	vfma.f32	s1, s20, s25
 801af16:	eea8 0a2c 	vfma.f32	s0, s16, s25
 801af1a:	f7ff fdf8 	bl	801ab0e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801af1e:	eef0 0a69 	vmov.f32	s1, s19
 801af22:	eeb0 0a49 	vmov.f32	s0, s18
 801af26:	eddf 7a18 	vldr	s15, [pc, #96]	@ 801af88 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c8>
 801af2a:	4620      	mov	r0, r4
 801af2c:	eee8 0a27 	vfma.f32	s1, s16, s15
 801af30:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801af34:	eeea 0a0c 	vfma.f32	s1, s20, s24
 801af38:	eea8 0a0c 	vfma.f32	s0, s16, s24
 801af3c:	f7ff fde7 	bl	801ab0e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801af40:	eef0 0a69 	vmov.f32	s1, s19
 801af44:	eeb0 0a49 	vmov.f32	s0, s18
 801af48:	eddf 7a10 	vldr	s15, [pc, #64]	@ 801af8c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1cc>
 801af4c:	4620      	mov	r0, r4
 801af4e:	eee8 0a27 	vfma.f32	s1, s16, s15
 801af52:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801af56:	eeea 0a2b 	vfma.f32	s1, s20, s23
 801af5a:	eea8 0a2b 	vfma.f32	s0, s16, s23
 801af5e:	e73e      	b.n	801adde <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1e>
 801af60:	3d23d70a 	.word	0x3d23d70a
 801af64:	3e8f5c29 	.word	0x3e8f5c29
 801af68:	3f19999a 	.word	0x3f19999a
 801af6c:	3f4ccccd 	.word	0x3f4ccccd
 801af70:	3f75c28f 	.word	0x3f75c28f
 801af74:	3e4ccccd 	.word	0x3e4ccccd
 801af78:	3ecccccd 	.word	0x3ecccccd
 801af7c:	3f3851ec 	.word	0x3f3851ec
 801af80:	3fa3d70a 	.word	0x3fa3d70a
 801af84:	3fcccccd 	.word	0x3fcccccd
 801af88:	3fe66666 	.word	0x3fe66666
 801af8c:	3ffae148 	.word	0x3ffae148

0801af90 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>:
 801af90:	b570      	push	{r4, r5, r6, lr}
 801af92:	ed2d 8b06 	vpush	{d8-d10}
 801af96:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 801af9a:	eef0 aa40 	vmov.f32	s21, s0
 801af9e:	ed90 9a22 	vldr	s18, [r0, #136]	@ 0x88
 801afa2:	4604      	mov	r4, r0
 801afa4:	ee30 8ac8 	vsub.f32	s16, s1, s16
 801afa8:	ee30 9a49 	vsub.f32	s18, s0, s18
 801afac:	eeb0 aa60 	vmov.f32	s20, s1
 801afb0:	ee28 0a08 	vmul.f32	s0, s16, s16
 801afb4:	eea9 0a09 	vfma.f32	s0, s18, s18
 801afb8:	f010 fd7a 	bl	802bab0 <sqrtf>
 801afbc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801afc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afc4:	dd36      	ble.n	801b034 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xa4>
 801afc6:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 801afca:	2600      	movs	r6, #0
 801afcc:	edd4 0a23 	vldr	s1, [r4, #140]	@ 0x8c
 801afd0:	eec0 6a27 	vdiv.f32	s13, s0, s15
 801afd4:	f894 5078 	ldrb.w	r5, [r4, #120]	@ 0x78
 801afd8:	ed94 0a22 	vldr	s0, [r4, #136]	@ 0x88
 801afdc:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 801afe0:	eec8 8a26 	vdiv.f32	s17, s16, s13
 801afe4:	ee89 8a26 	vdiv.f32	s16, s18, s13
 801afe8:	ee70 9a28 	vadd.f32	s19, s0, s17
 801afec:	ee78 8aaa 	vadd.f32	s17, s17, s21
 801aff0:	ee30 9ac8 	vsub.f32	s18, s1, s16
 801aff4:	ee3a 8a48 	vsub.f32	s16, s20, s16
 801aff8:	b1fd      	cbz	r5, 801b03a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xaa>
 801affa:	edc4 9a24 	vstr	s19, [r4, #144]	@ 0x90
 801affe:	eef0 0a49 	vmov.f32	s1, s18
 801b002:	ed84 9a25 	vstr	s18, [r4, #148]	@ 0x94
 801b006:	eeb0 0a69 	vmov.f32	s0, s19
 801b00a:	edc4 8a26 	vstr	s17, [r4, #152]	@ 0x98
 801b00e:	4620      	mov	r0, r4
 801b010:	ed84 8a27 	vstr	s16, [r4, #156]	@ 0x9c
 801b014:	f7ff fd64 	bl	801aae0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 801b018:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
 801b01c:	edc4 9a28 	vstr	s19, [r4, #160]	@ 0xa0
 801b020:	ed84 9a29 	vstr	s18, [r4, #164]	@ 0xa4
 801b024:	edc4 8a2a 	vstr	s17, [r4, #168]	@ 0xa8
 801b028:	ed84 8a2b 	vstr	s16, [r4, #172]	@ 0xac
 801b02c:	edc4 aa22 	vstr	s21, [r4, #136]	@ 0x88
 801b030:	ed84 aa23 	vstr	s20, [r4, #140]	@ 0x8c
 801b034:	ecbd 8b06 	vpop	{d8-d10}
 801b038:	bd70      	pop	{r4, r5, r6, pc}
 801b03a:	f894 307a 	ldrb.w	r3, [r4, #122]	@ 0x7a
 801b03e:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 801b042:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 801b046:	b16b      	cbz	r3, 801b064 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xd4>
 801b048:	eef0 1a49 	vmov.f32	s3, s18
 801b04c:	4620      	mov	r0, r4
 801b04e:	eeb0 1a69 	vmov.f32	s2, s19
 801b052:	eef0 0a62 	vmov.f32	s1, s5
 801b056:	eeb0 0a42 	vmov.f32	s0, s4
 801b05a:	f7ff feb1 	bl	801adc0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 801b05e:	f884 507a 	strb.w	r5, [r4, #122]	@ 0x7a
 801b062:	e7db      	b.n	801b01c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>
 801b064:	eef0 4a48 	vmov.f32	s9, s16
 801b068:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 801b06c:	eeb0 4a68 	vmov.f32	s8, s17
 801b070:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 801b074:	eef0 3a49 	vmov.f32	s7, s18
 801b078:	4620      	mov	r0, r4
 801b07a:	eeb0 3a69 	vmov.f32	s6, s19
 801b07e:	f7ff fe13 	bl	801aca8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 801b082:	e7cb      	b.n	801b01c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>

0801b084 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_>:
 801b084:	ee07 2a90 	vmov	s15, r2
 801b088:	ee07 1a10 	vmov	s14, r1
 801b08c:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801b090:	eddf 7a04 	vldr	s15, [pc, #16]	@ 801b0a4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_+0x20>
 801b094:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 801b098:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801b09c:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b0a0:	f7ff bf76 	b.w	801af90 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 801b0a4:	3d000000 	.word	0x3d000000

0801b0a8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>:
 801b0a8:	b538      	push	{r3, r4, r5, lr}
 801b0aa:	ed2d 8b02 	vpush	{d8}
 801b0ae:	f890 5079 	ldrb.w	r5, [r0, #121]	@ 0x79
 801b0b2:	4604      	mov	r4, r0
 801b0b4:	b31d      	cbz	r5, 801b0fe <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv+0x56>
 801b0b6:	edd0 7a1f 	vldr	s15, [r0, #124]	@ 0x7c
 801b0ba:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 801b0be:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 801b0c2:	ee78 8a67 	vsub.f32	s17, s16, s15
 801b0c6:	ee38 8a27 	vadd.f32	s16, s16, s15
 801b0ca:	eef0 0a68 	vmov.f32	s1, s17
 801b0ce:	f7ff fd07 	bl	801aae0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 801b0d2:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 801b0d6:	eef0 1a48 	vmov.f32	s3, s16
 801b0da:	4620      	mov	r0, r4
 801b0dc:	eeb0 0a41 	vmov.f32	s0, s2
 801b0e0:	eef0 0a68 	vmov.f32	s1, s17
 801b0e4:	f7ff fe6c 	bl	801adc0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 801b0e8:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 801b0ec:	eef0 1a68 	vmov.f32	s3, s17
 801b0f0:	4620      	mov	r0, r4
 801b0f2:	eef0 0a48 	vmov.f32	s1, s16
 801b0f6:	eeb0 0a41 	vmov.f32	s0, s2
 801b0fa:	f7ff fe61 	bl	801adc0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 801b0fe:	4628      	mov	r0, r5
 801b100:	ecbd 8b02 	vpop	{d8}
 801b104:	bd38      	pop	{r3, r4, r5, pc}

0801b106 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>:
 801b106:	b510      	push	{r4, lr}
 801b108:	ed2d 8b02 	vpush	{d8}
 801b10c:	4604      	mov	r4, r0
 801b10e:	eeb0 8a40 	vmov.f32	s16, s0
 801b112:	eef0 8a60 	vmov.f32	s17, s1
 801b116:	f7ff ffc7 	bl	801b0a8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 801b11a:	b9d0      	cbnz	r0, 801b152 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x4c>
 801b11c:	4620      	mov	r0, r4
 801b11e:	edd4 4a27 	vldr	s9, [r4, #156]	@ 0x9c
 801b122:	ed94 4a26 	vldr	s8, [r4, #152]	@ 0x98
 801b126:	eef0 0a68 	vmov.f32	s1, s17
 801b12a:	edd4 3a25 	vldr	s7, [r4, #148]	@ 0x94
 801b12e:	eeb0 0a48 	vmov.f32	s0, s16
 801b132:	ed94 3a24 	vldr	s6, [r4, #144]	@ 0x90
 801b136:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 801b13a:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 801b13e:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 801b142:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 801b146:	f7ff fdaf 	bl	801aca8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 801b14a:	2001      	movs	r0, #1
 801b14c:	ecbd 8b02 	vpop	{d8}
 801b150:	bd10      	pop	{r4, pc}
 801b152:	2000      	movs	r0, #0
 801b154:	e7fa      	b.n	801b14c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x46>

0801b156 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>:
 801b156:	edd0 1a25 	vldr	s3, [r0, #148]	@ 0x94
 801b15a:	ed90 1a24 	vldr	s2, [r0, #144]	@ 0x90
 801b15e:	edd0 0a2b 	vldr	s1, [r0, #172]	@ 0xac
 801b162:	ed90 0a2a 	vldr	s0, [r0, #168]	@ 0xa8
 801b166:	f7ff be2b 	b.w	801adc0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
	...

0801b16c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>:
 801b16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b170:	b089      	sub	sp, #36	@ 0x24
 801b172:	461c      	mov	r4, r3
 801b174:	4682      	mov	sl, r0
 801b176:	4615      	mov	r5, r2
 801b178:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 801b17c:	f10d 0820 	add.w	r8, sp, #32
 801b180:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801b182:	9304      	str	r3, [sp, #16]
 801b184:	2300      	movs	r3, #0
 801b186:	9105      	str	r1, [sp, #20]
 801b188:	9306      	str	r3, [sp, #24]
 801b18a:	f848 3d04 	str.w	r3, [r8, #-4]!
 801b18e:	9b04      	ldr	r3, [sp, #16]
 801b190:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	@ 0x48
 801b194:	f886 307a 	strb.w	r3, [r6, #122]	@ 0x7a
 801b198:	9b05      	ldr	r3, [sp, #20]
 801b19a:	429d      	cmp	r5, r3
 801b19c:	d96d      	bls.n	801b27a <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x10e>
 801b19e:	3d01      	subs	r5, #1
 801b1a0:	f819 3005 	ldrb.w	r3, [r9, r5]
 801b1a4:	2b06      	cmp	r3, #6
 801b1a6:	d8f7      	bhi.n	801b198 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 801b1a8:	a201      	add	r2, pc, #4	@ (adr r2, 801b1b0 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x44>)
 801b1aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b1ae:	bf00      	nop
 801b1b0:	0801b1cf 	.word	0x0801b1cf
 801b1b4:	0801b199 	.word	0x0801b199
 801b1b8:	0801b1cd 	.word	0x0801b1cd
 801b1bc:	0801b1f1 	.word	0x0801b1f1
 801b1c0:	0801b1f1 	.word	0x0801b1f1
 801b1c4:	0801b1f5 	.word	0x0801b1f5
 801b1c8:	0801b235 	.word	0x0801b235
 801b1cc:	3c02      	subs	r4, #2
 801b1ce:	4650      	mov	r0, sl
 801b1d0:	9400      	str	r4, [sp, #0]
 801b1d2:	462b      	mov	r3, r5
 801b1d4:	4642      	mov	r2, r8
 801b1d6:	a906      	add	r1, sp, #24
 801b1d8:	e9cd 9701 	strd	r9, r7, [sp, #4]
 801b1dc:	f7ff fcae 	bl	801ab3c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 801b1e0:	eddd 0a07 	vldr	s1, [sp, #28]
 801b1e4:	ed9d 0a06 	vldr	s0, [sp, #24]
 801b1e8:	4630      	mov	r0, r6
 801b1ea:	f7ff fed1 	bl	801af90 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 801b1ee:	e7d3      	b.n	801b198 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 801b1f0:	3c01      	subs	r4, #1
 801b1f2:	e7ec      	b.n	801b1ce <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x62>
 801b1f4:	f1a4 0b04 	sub.w	fp, r4, #4
 801b1f8:	3c02      	subs	r4, #2
 801b1fa:	4650      	mov	r0, sl
 801b1fc:	462b      	mov	r3, r5
 801b1fe:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 801b202:	f8cd b000 	str.w	fp, [sp]
 801b206:	4642      	mov	r2, r8
 801b208:	a906      	add	r1, sp, #24
 801b20a:	e9cd 9701 	strd	r9, r7, [sp, #4]
 801b20e:	f7ff fc95 	bl	801ab3c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 801b212:	eddd 2a07 	vldr	s5, [sp, #28]
 801b216:	ed9d 2a06 	vldr	s4, [sp, #24]
 801b21a:	4630      	mov	r0, r6
 801b21c:	ed54 1a01 	vldr	s3, [r4, #-4]
 801b220:	ed14 1a02 	vldr	s2, [r4, #-8]
 801b224:	edd4 0a01 	vldr	s1, [r4, #4]
 801b228:	ed94 0a00 	vldr	s0, [r4]
 801b22c:	f7ff fc1a 	bl	801aa64 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 801b230:	465c      	mov	r4, fp
 801b232:	e7b1      	b.n	801b198 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 801b234:	f1a4 0b06 	sub.w	fp, r4, #6
 801b238:	3c02      	subs	r4, #2
 801b23a:	4650      	mov	r0, sl
 801b23c:	462b      	mov	r3, r5
 801b23e:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 801b242:	f8cd b000 	str.w	fp, [sp]
 801b246:	4642      	mov	r2, r8
 801b248:	a906      	add	r1, sp, #24
 801b24a:	e9cd 9701 	strd	r9, r7, [sp, #4]
 801b24e:	f7ff fc75 	bl	801ab3c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 801b252:	eddd 3a07 	vldr	s7, [sp, #28]
 801b256:	ed9d 3a06 	vldr	s6, [sp, #24]
 801b25a:	4630      	mov	r0, r6
 801b25c:	ed54 2a03 	vldr	s5, [r4, #-12]
 801b260:	ed14 2a04 	vldr	s4, [r4, #-16]
 801b264:	ed54 1a01 	vldr	s3, [r4, #-4]
 801b268:	ed14 1a02 	vldr	s2, [r4, #-8]
 801b26c:	edd4 0a01 	vldr	s1, [r4, #4]
 801b270:	ed94 0a00 	vldr	s0, [r4]
 801b274:	f7ff fc15 	bl	801aaa2 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 801b278:	e7da      	b.n	801b230 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0xc4>
 801b27a:	9b04      	ldr	r3, [sp, #16]
 801b27c:	b113      	cbz	r3, 801b284 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x118>
 801b27e:	4630      	mov	r0, r6
 801b280:	f7ff ff69 	bl	801b156 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>
 801b284:	b009      	add	sp, #36	@ 0x24
 801b286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b28a:	bf00      	nop

0801b28c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>:
 801b28c:	eef0 7a60 	vmov.f32	s15, s1
 801b290:	6803      	ldr	r3, [r0, #0]
 801b292:	689b      	ldr	r3, [r3, #8]
 801b294:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801b298:	ee17 2a90 	vmov	r2, s15
 801b29c:	eef0 7a40 	vmov.f32	s15, s0
 801b2a0:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801b2a4:	ee17 1a90 	vmov	r1, s15
 801b2a8:	4718      	bx	r3
	...

0801b2ac <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>:
 801b2ac:	4b04      	ldr	r3, [pc, #16]	@ (801b2c0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev+0x14>)
 801b2ae:	b510      	push	{r4, lr}
 801b2b0:	4604      	mov	r4, r0
 801b2b2:	f840 3b14 	str.w	r3, [r0], #20
 801b2b6:	f000 ff0d 	bl	801c0d4 <_ZN8touchgfx7OutlineD1Ev>
 801b2ba:	4620      	mov	r0, r4
 801b2bc:	bd10      	pop	{r4, pc}
 801b2be:	bf00      	nop
 801b2c0:	0802f354 	.word	0x0802f354

0801b2c4 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>:
 801b2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2c8:	ed2d 8b04 	vpush	{d8-d9}
 801b2cc:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
 801b2d0:	b0b5      	sub	sp, #212	@ 0xd4
 801b2d2:	4605      	mov	r5, r0
 801b2d4:	468b      	mov	fp, r1
 801b2d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b2da:	9206      	str	r2, [sp, #24]
 801b2dc:	461e      	mov	r6, r3
 801b2de:	2400      	movs	r4, #0
 801b2e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b2e4:	f240 814f 	bls.w	801b586 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c2>
 801b2e8:	23ff      	movs	r3, #255	@ 0xff
 801b2ea:	1d02      	adds	r2, r0, #4
 801b2ec:	ed9f 9aa7 	vldr	s18, [pc, #668]	@ 801b58c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c8>
 801b2f0:	f04f 0800 	mov.w	r8, #0
 801b2f4:	9300      	str	r3, [sp, #0]
 801b2f6:	af08      	add	r7, sp, #32
 801b2f8:	6981      	ldr	r1, [r0, #24]
 801b2fa:	a808      	add	r0, sp, #32
 801b2fc:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801b2fe:	eef0 9a49 	vmov.f32	s19, s18
 801b302:	f00f ff49 	bl	802b198 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 801b306:	edd5 7a0c 	vldr	s15, [r5, #48]	@ 0x30
 801b30a:	4ba1      	ldr	r3, [pc, #644]	@ (801b590 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2cc>)
 801b30c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801b310:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b314:	2201      	movs	r2, #1
 801b316:	9308      	str	r3, [sp, #32]
 801b318:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 801b31c:	edd5 6a08 	vldr	s13, [r5, #32]
 801b320:	eeb0 8a49 	vmov.f32	s16, s18
 801b324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b328:	9325      	str	r3, [sp, #148]	@ 0x94
 801b32a:	f04f 0300 	mov.w	r3, #0
 801b32e:	f88d 2099 	strb.w	r2, [sp, #153]	@ 0x99
 801b332:	7f6a      	ldrb	r2, [r5, #29]
 801b334:	eef0 8a49 	vmov.f32	s17, s18
 801b338:	bf48      	it	mi
 801b33a:	eef1 7a67 	vnegmi.f32	s15, s15
 801b33e:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 801b342:	f88d 309a 	strb.w	r3, [sp, #154]	@ 0x9a
 801b346:	46c1      	mov	r9, r8
 801b348:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 801b34c:	f04f 0a01 	mov.w	sl, #1
 801b350:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b354:	7fab      	ldrb	r3, [r5, #30]
 801b356:	942a      	str	r4, [sp, #168]	@ 0xa8
 801b358:	435a      	muls	r2, r3
 801b35a:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 801b35e:	ee26 7aa7 	vmul.f32	s14, s13, s15
 801b362:	edcd 7a27 	vstr	s15, [sp, #156]	@ 0x9c
 801b366:	1c53      	adds	r3, r2, #1
 801b368:	942b      	str	r4, [sp, #172]	@ 0xac
 801b36a:	942c      	str	r4, [sp, #176]	@ 0xb0
 801b36c:	ee27 7a26 	vmul.f32	s14, s14, s13
 801b370:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801b374:	942d      	str	r4, [sp, #180]	@ 0xb4
 801b376:	942e      	str	r4, [sp, #184]	@ 0xb8
 801b378:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b37c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b380:	942f      	str	r4, [sp, #188]	@ 0xbc
 801b382:	9430      	str	r4, [sp, #192]	@ 0xc0
 801b384:	9431      	str	r4, [sp, #196]	@ 0xc4
 801b386:	9432      	str	r4, [sp, #200]	@ 0xc8
 801b388:	9433      	str	r4, [sp, #204]	@ 0xcc
 801b38a:	4644      	mov	r4, r8
 801b38c:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 801b390:	edcd 7a28 	vstr	s15, [sp, #160]	@ 0xa0
 801b394:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
 801b398:	f88d 10a5 	strb.w	r1, [sp, #165]	@ 0xa5
 801b39c:	f88d 30a6 	strb.w	r3, [sp, #166]	@ 0xa6
 801b3a0:	9b06      	ldr	r3, [sp, #24]
 801b3a2:	454b      	cmp	r3, r9
 801b3a4:	f000 80cc 	beq.w	801b540 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x27c>
 801b3a8:	f109 0301 	add.w	r3, r9, #1
 801b3ac:	9305      	str	r3, [sp, #20]
 801b3ae:	f81b 3009 	ldrb.w	r3, [fp, r9]
 801b3b2:	2b06      	cmp	r3, #6
 801b3b4:	d839      	bhi.n	801b42a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 801b3b6:	e8df f003 	tbb	[pc, r3]
 801b3ba:	3b04      	.short	0x3b04
 801b3bc:	817c6f60 	.word	0x817c6f60
 801b3c0:	a0          	.byte	0xa0
 801b3c1:	00          	.byte	0x00
 801b3c2:	45c1      	cmp	r9, r8
 801b3c4:	d92b      	bls.n	801b41e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 801b3c6:	eef0 0a49 	vmov.f32	s1, s18
 801b3ca:	4638      	mov	r0, r7
 801b3cc:	eeb0 0a69 	vmov.f32	s0, s19
 801b3d0:	f7ff fdde 	bl	801af90 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 801b3d4:	4638      	mov	r0, r7
 801b3d6:	f7ff fe67 	bl	801b0a8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 801b3da:	4681      	mov	r9, r0
 801b3dc:	b9f8      	cbnz	r0, 801b41e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 801b3de:	eef0 0a49 	vmov.f32	s1, s18
 801b3e2:	4638      	mov	r0, r7
 801b3e4:	eeb0 0a69 	vmov.f32	s0, s19
 801b3e8:	f7ff fe8d 	bl	801b106 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 801b3ec:	4628      	mov	r0, r5
 801b3ee:	4623      	mov	r3, r4
 801b3f0:	9a05      	ldr	r2, [sp, #20]
 801b3f2:	4641      	mov	r1, r8
 801b3f4:	edcd 9a2a 	vstr	s19, [sp, #168]	@ 0xa8
 801b3f8:	ed8d 9a2b 	vstr	s18, [sp, #172]	@ 0xac
 801b3fc:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 801b400:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 801b404:	e9cd 9702 	strd	r9, r7, [sp, #8]
 801b408:	e9cd b600 	strd	fp, r6, [sp]
 801b40c:	f7ff feae 	bl	801b16c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 801b410:	eef0 0a49 	vmov.f32	s1, s18
 801b414:	eeb0 0a69 	vmov.f32	s0, s19
 801b418:	4638      	mov	r0, r7
 801b41a:	f7ff fe74 	bl	801b106 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 801b41e:	eeb0 8a49 	vmov.f32	s16, s18
 801b422:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801b426:	eef0 8a69 	vmov.f32	s17, s19
 801b42a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801b42e:	e7b7      	b.n	801b3a0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0xdc>
 801b430:	45c1      	cmp	r9, r8
 801b432:	d90d      	bls.n	801b450 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 801b434:	4638      	mov	r0, r7
 801b436:	f7ff fe37 	bl	801b0a8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 801b43a:	b948      	cbnz	r0, 801b450 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 801b43c:	4623      	mov	r3, r4
 801b43e:	464a      	mov	r2, r9
 801b440:	4641      	mov	r1, r8
 801b442:	4628      	mov	r0, r5
 801b444:	e9cd a702 	strd	sl, r7, [sp, #8]
 801b448:	e9cd b600 	strd	fp, r6, [sp]
 801b44c:	f7ff fe8e 	bl	801b16c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 801b450:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801b454:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 801b458:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 801b45c:	3402      	adds	r4, #2
 801b45e:	edd3 8a00 	vldr	s17, [r3]
 801b462:	46c8      	mov	r8, r9
 801b464:	ed93 8a01 	vldr	s16, [r3, #4]
 801b468:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 801b46c:	eef0 9a68 	vmov.f32	s19, s17
 801b470:	ed8d 8a2b 	vstr	s16, [sp, #172]	@ 0xac
 801b474:	eeb0 9a48 	vmov.f32	s18, s16
 801b478:	e7d7      	b.n	801b42a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 801b47a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801b47e:	4638      	mov	r0, r7
 801b480:	3402      	adds	r4, #2
 801b482:	edd3 8a00 	vldr	s17, [r3]
 801b486:	ed93 8a01 	vldr	s16, [r3, #4]
 801b48a:	eeb0 0a68 	vmov.f32	s0, s17
 801b48e:	eef0 0a48 	vmov.f32	s1, s16
 801b492:	f7ff fd7d 	bl	801af90 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 801b496:	e7c8      	b.n	801b42a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 801b498:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801b49c:	edd3 8a00 	vldr	s17, [r3]
 801b4a0:	eef0 0a48 	vmov.f32	s1, s16
 801b4a4:	4638      	mov	r0, r7
 801b4a6:	eeb0 0a68 	vmov.f32	s0, s17
 801b4aa:	3401      	adds	r4, #1
 801b4ac:	f7ff fd70 	bl	801af90 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 801b4b0:	e7bb      	b.n	801b42a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 801b4b2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801b4b6:	ed93 8a00 	vldr	s16, [r3]
 801b4ba:	e7f1      	b.n	801b4a0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x1dc>
 801b4bc:	00a3      	lsls	r3, r4, #2
 801b4be:	eef0 0a48 	vmov.f32	s1, s16
 801b4c2:	eeb0 0a68 	vmov.f32	s0, s17
 801b4c6:	4638      	mov	r0, r7
 801b4c8:	f103 0208 	add.w	r2, r3, #8
 801b4cc:	f103 090c 	add.w	r9, r3, #12
 801b4d0:	4433      	add	r3, r6
 801b4d2:	3404      	adds	r4, #4
 801b4d4:	4432      	add	r2, r6
 801b4d6:	44b1      	add	r9, r6
 801b4d8:	edd3 1a01 	vldr	s3, [r3, #4]
 801b4dc:	ed92 2a00 	vldr	s4, [r2]
 801b4e0:	edd9 2a00 	vldr	s5, [r9]
 801b4e4:	ed93 1a00 	vldr	s2, [r3]
 801b4e8:	9207      	str	r2, [sp, #28]
 801b4ea:	f7ff fabb 	bl	801aa64 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 801b4ee:	9a07      	ldr	r2, [sp, #28]
 801b4f0:	ed99 8a00 	vldr	s16, [r9]
 801b4f4:	edd2 8a00 	vldr	s17, [r2]
 801b4f8:	e797      	b.n	801b42a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 801b4fa:	00a3      	lsls	r3, r4, #2
 801b4fc:	eef0 0a48 	vmov.f32	s1, s16
 801b500:	eeb0 0a68 	vmov.f32	s0, s17
 801b504:	4638      	mov	r0, r7
 801b506:	f103 0210 	add.w	r2, r3, #16
 801b50a:	f103 0914 	add.w	r9, r3, #20
 801b50e:	4433      	add	r3, r6
 801b510:	3406      	adds	r4, #6
 801b512:	4432      	add	r2, r6
 801b514:	44b1      	add	r9, r6
 801b516:	edd3 2a03 	vldr	s5, [r3, #12]
 801b51a:	ed92 3a00 	vldr	s6, [r2]
 801b51e:	edd9 3a00 	vldr	s7, [r9]
 801b522:	ed93 2a02 	vldr	s4, [r3, #8]
 801b526:	edd3 1a01 	vldr	s3, [r3, #4]
 801b52a:	ed93 1a00 	vldr	s2, [r3]
 801b52e:	9207      	str	r2, [sp, #28]
 801b530:	f7ff fab7 	bl	801aaa2 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 801b534:	9a07      	ldr	r2, [sp, #28]
 801b536:	ed99 8a00 	vldr	s16, [r9]
 801b53a:	edd2 8a00 	vldr	s17, [r2]
 801b53e:	e774      	b.n	801b42a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 801b540:	9b06      	ldr	r3, [sp, #24]
 801b542:	af08      	add	r7, sp, #32
 801b544:	4543      	cmp	r3, r8
 801b546:	d90f      	bls.n	801b568 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 801b548:	4638      	mov	r0, r7
 801b54a:	f7ff fdad 	bl	801b0a8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 801b54e:	b958      	cbnz	r0, 801b568 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 801b550:	2301      	movs	r3, #1
 801b552:	9703      	str	r7, [sp, #12]
 801b554:	f8cd b000 	str.w	fp, [sp]
 801b558:	4641      	mov	r1, r8
 801b55a:	9a06      	ldr	r2, [sp, #24]
 801b55c:	4628      	mov	r0, r5
 801b55e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801b562:	4623      	mov	r3, r4
 801b564:	f7ff fe02 	bl	801b16c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 801b568:	f89d 10a6 	ldrb.w	r1, [sp, #166]	@ 0xa6
 801b56c:	4638      	mov	r0, r7
 801b56e:	f00f fea7 	bl	802b2c0 <_ZN8touchgfx6Canvas6renderEh>
 801b572:	4604      	mov	r4, r0
 801b574:	4638      	mov	r0, r7
 801b576:	f7ff fe99 	bl	801b2ac <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 801b57a:	4620      	mov	r0, r4
 801b57c:	b035      	add	sp, #212	@ 0xd4
 801b57e:	ecbd 8b04 	vpop	{d8-d9}
 801b582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b586:	2401      	movs	r4, #1
 801b588:	e7f7      	b.n	801b57a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2b6>
 801b58a:	bf00      	nop
 801b58c:	00000000 	.word	0x00000000
 801b590:	0802ec80 	.word	0x0802ec80

0801b594 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD0Ev>:
 801b594:	b510      	push	{r4, lr}
 801b596:	4604      	mov	r4, r0
 801b598:	f7ff fe88 	bl	801b2ac <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 801b59c:	21b0      	movs	r1, #176	@ 0xb0
 801b59e:	4620      	mov	r0, r4
 801b5a0:	f010 fa5b 	bl	802ba5a <_ZdlPvj>
 801b5a4:	4620      	mov	r0, r4
 801b5a6:	bd10      	pop	{r4, pc}

0801b5a8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>:
 801b5a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b5ac:	4698      	mov	r8, r3
 801b5ae:	23ff      	movs	r3, #255	@ 0xff
 801b5b0:	4607      	mov	r7, r0
 801b5b2:	4689      	mov	r9, r1
 801b5b4:	4692      	mov	sl, r2
 801b5b6:	1d02      	adds	r2, r0, #4
 801b5b8:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 801b5bc:	2400      	movs	r4, #0
 801b5be:	44ca      	add	sl, r9
 801b5c0:	ed2d 8b06 	vpush	{d8-d10}
 801b5c4:	b0aa      	sub	sp, #168	@ 0xa8
 801b5c6:	ed9f 8a81 	vldr	s16, [pc, #516]	@ 801b7cc <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 801b5ca:	9300      	str	r3, [sp, #0]
 801b5cc:	eef0 8a48 	vmov.f32	s17, s16
 801b5d0:	6981      	ldr	r1, [r0, #24]
 801b5d2:	a80d      	add	r0, sp, #52	@ 0x34
 801b5d4:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 801b5d6:	f00f fddf 	bl	802b198 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 801b5da:	7f3b      	ldrb	r3, [r7, #28]
 801b5dc:	eddf 0a7b 	vldr	s1, [pc, #492]	@ 801b7cc <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 801b5e0:	4628      	mov	r0, r5
 801b5e2:	1e5a      	subs	r2, r3, #1
 801b5e4:	eeb0 0a60 	vmov.f32	s0, s1
 801b5e8:	4253      	negs	r3, r2
 801b5ea:	4153      	adcs	r3, r2
 801b5ec:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
 801b5f0:	f004 f851 	bl	801f696 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801b5f4:	eeb0 9a40 	vmov.f32	s18, s0
 801b5f8:	eef0 9a60 	vmov.f32	s19, s1
 801b5fc:	45ca      	cmp	sl, r9
 801b5fe:	f000 80cd 	beq.w	801b79c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x1f4>
 801b602:	f819 3b01 	ldrb.w	r3, [r9], #1
 801b606:	2b06      	cmp	r3, #6
 801b608:	d8f8      	bhi.n	801b5fc <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 801b60a:	e8df f003 	tbb	[pc, r3]
 801b60e:	0804      	.short	0x0804
 801b610:	58533f2a 	.word	0x58533f2a
 801b614:	8a          	.byte	0x8a
 801b615:	00          	.byte	0x00
 801b616:	a80d      	add	r0, sp, #52	@ 0x34
 801b618:	f00f fe30 	bl	802b27c <_ZN8touchgfx6Canvas5closeEv>
 801b61c:	e7ee      	b.n	801b5fc <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 801b61e:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 801b622:	4628      	mov	r0, r5
 801b624:	ed93 8a01 	vldr	s16, [r3, #4]
 801b628:	edd3 8a00 	vldr	s17, [r3]
 801b62c:	eef0 0a48 	vmov.f32	s1, s16
 801b630:	eeb0 0a68 	vmov.f32	s0, s17
 801b634:	f004 f82f 	bl	801f696 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801b638:	a80d      	add	r0, sp, #52	@ 0x34
 801b63a:	eef0 7a60 	vmov.f32	s15, s1
 801b63e:	eeb0 9a40 	vmov.f32	s18, s0
 801b642:	eef0 9a60 	vmov.f32	s19, s1
 801b646:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801b64a:	ee17 2a90 	vmov	r2, s15
 801b64e:	eef0 7a40 	vmov.f32	s15, s0
 801b652:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801b656:	ee17 1a90 	vmov	r1, s15
 801b65a:	f00f fee9 	bl	802b430 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801b65e:	3402      	adds	r4, #2
 801b660:	e7cc      	b.n	801b5fc <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 801b662:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 801b666:	4628      	mov	r0, r5
 801b668:	edd3 8a00 	vldr	s17, [r3]
 801b66c:	ed93 8a01 	vldr	s16, [r3, #4]
 801b670:	eeb0 0a68 	vmov.f32	s0, s17
 801b674:	eef0 0a48 	vmov.f32	s1, s16
 801b678:	f004 f80d 	bl	801f696 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801b67c:	a80d      	add	r0, sp, #52	@ 0x34
 801b67e:	eeb0 9a40 	vmov.f32	s18, s0
 801b682:	eef0 9a60 	vmov.f32	s19, s1
 801b686:	f7ff fe01 	bl	801b28c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 801b68a:	e7e8      	b.n	801b65e <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xb6>
 801b68c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 801b690:	edd3 8a00 	vldr	s17, [r3]
 801b694:	eef0 0a48 	vmov.f32	s1, s16
 801b698:	4628      	mov	r0, r5
 801b69a:	eeb0 0a68 	vmov.f32	s0, s17
 801b69e:	3401      	adds	r4, #1
 801b6a0:	f003 fff9 	bl	801f696 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801b6a4:	a80d      	add	r0, sp, #52	@ 0x34
 801b6a6:	eef0 9a60 	vmov.f32	s19, s1
 801b6aa:	eeb0 9a40 	vmov.f32	s18, s0
 801b6ae:	f7ff fded 	bl	801b28c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 801b6b2:	e7a3      	b.n	801b5fc <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 801b6b4:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 801b6b8:	ed93 8a00 	vldr	s16, [r3]
 801b6bc:	e7ea      	b.n	801b694 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xec>
 801b6be:	1ca3      	adds	r3, r4, #2
 801b6c0:	4628      	mov	r0, r5
 801b6c2:	3404      	adds	r4, #4
 801b6c4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 801b6c8:	ed53 0a01 	vldr	s1, [r3, #-4]
 801b6cc:	ed13 0a02 	vldr	s0, [r3, #-8]
 801b6d0:	edd3 8a00 	vldr	s17, [r3]
 801b6d4:	ed93 8a01 	vldr	s16, [r3, #4]
 801b6d8:	f003 ffdd 	bl	801f696 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801b6dc:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 801b6e0:	eeb0 0a68 	vmov.f32	s0, s17
 801b6e4:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 801b6e8:	eef0 0a48 	vmov.f32	s1, s16
 801b6ec:	4628      	mov	r0, r5
 801b6ee:	f003 ffd2 	bl	801f696 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801b6f2:	eddd 1a0a 	vldr	s3, [sp, #40]	@ 0x28
 801b6f6:	eef0 2a60 	vmov.f32	s5, s1
 801b6fa:	ed9d 1a09 	vldr	s2, [sp, #36]	@ 0x24
 801b6fe:	eeb0 2a40 	vmov.f32	s4, s0
 801b702:	a80d      	add	r0, sp, #52	@ 0x34
 801b704:	eeb0 aa40 	vmov.f32	s20, s0
 801b708:	eef0 aa60 	vmov.f32	s21, s1
 801b70c:	eeb0 0a49 	vmov.f32	s0, s18
 801b710:	eef0 0a69 	vmov.f32	s1, s19
 801b714:	f7ff f9a6 	bl	801aa64 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 801b718:	eef0 9a6a 	vmov.f32	s19, s21
 801b71c:	eeb0 9a4a 	vmov.f32	s18, s20
 801b720:	e76c      	b.n	801b5fc <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 801b722:	1d26      	adds	r6, r4, #4
 801b724:	4628      	mov	r0, r5
 801b726:	3406      	adds	r4, #6
 801b728:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801b72c:	ed56 0a03 	vldr	s1, [r6, #-12]
 801b730:	ed16 0a04 	vldr	s0, [r6, #-16]
 801b734:	edd6 8a00 	vldr	s17, [r6]
 801b738:	ed96 8a01 	vldr	s16, [r6, #4]
 801b73c:	f003 ffab 	bl	801f696 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801b740:	ed8d 0a07 	vstr	s0, [sp, #28]
 801b744:	4628      	mov	r0, r5
 801b746:	ed16 0a02 	vldr	s0, [r6, #-8]
 801b74a:	edcd 0a08 	vstr	s1, [sp, #32]
 801b74e:	ed56 0a01 	vldr	s1, [r6, #-4]
 801b752:	f003 ffa0 	bl	801f696 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801b756:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 801b75a:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 801b75e:	eeb0 0a68 	vmov.f32	s0, s17
 801b762:	eef0 0a48 	vmov.f32	s1, s16
 801b766:	4628      	mov	r0, r5
 801b768:	f003 ff95 	bl	801f696 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801b76c:	eddd 2a0a 	vldr	s5, [sp, #40]	@ 0x28
 801b770:	eeb0 3a40 	vmov.f32	s6, s0
 801b774:	ed9d 2a09 	vldr	s4, [sp, #36]	@ 0x24
 801b778:	eef0 3a60 	vmov.f32	s7, s1
 801b77c:	eddd 1a08 	vldr	s3, [sp, #32]
 801b780:	eeb0 aa40 	vmov.f32	s20, s0
 801b784:	ed9d 1a07 	vldr	s2, [sp, #28]
 801b788:	eef0 aa60 	vmov.f32	s21, s1
 801b78c:	a80d      	add	r0, sp, #52	@ 0x34
 801b78e:	eef0 0a69 	vmov.f32	s1, s19
 801b792:	eeb0 0a49 	vmov.f32	s0, s18
 801b796:	f7ff f984 	bl	801aaa2 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 801b79a:	e7bd      	b.n	801b718 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x170>
 801b79c:	7f7b      	ldrb	r3, [r7, #29]
 801b79e:	a80d      	add	r0, sp, #52	@ 0x34
 801b7a0:	7fb9      	ldrb	r1, [r7, #30]
 801b7a2:	4359      	muls	r1, r3
 801b7a4:	1c4b      	adds	r3, r1, #1
 801b7a6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801b7aa:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801b7ae:	f00f fd87 	bl	802b2c0 <_ZN8touchgfx6Canvas6renderEh>
 801b7b2:	4b07      	ldr	r3, [pc, #28]	@ (801b7d0 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x228>)
 801b7b4:	4604      	mov	r4, r0
 801b7b6:	a812      	add	r0, sp, #72	@ 0x48
 801b7b8:	930d      	str	r3, [sp, #52]	@ 0x34
 801b7ba:	f000 fc8b 	bl	801c0d4 <_ZN8touchgfx7OutlineD1Ev>
 801b7be:	4620      	mov	r0, r4
 801b7c0:	b02a      	add	sp, #168	@ 0xa8
 801b7c2:	ecbd 8b06 	vpop	{d8-d10}
 801b7c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b7ca:	bf00      	nop
 801b7cc:	00000000 	.word	0x00000000
 801b7d0:	0802f354 	.word	0x0802f354

0801b7d4 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>:
 801b7d4:	b410      	push	{r4}
 801b7d6:	7f04      	ldrb	r4, [r0, #28]
 801b7d8:	b11c      	cbz	r4, 801b7e2 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE+0xe>
 801b7da:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b7de:	f7ff bee3 	b.w	801b5a8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>
 801b7e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b7e6:	f7ff bd6d 	b.w	801b2c4 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>

0801b7ea <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_>:
 801b7ea:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b7ee:	4691      	mov	r9, r2
 801b7f0:	4602      	mov	r2, r0
 801b7f2:	4606      	mov	r6, r0
 801b7f4:	4688      	mov	r8, r1
 801b7f6:	f852 0f26 	ldr.w	r0, [r2, #38]!
 801b7fa:	469a      	mov	sl, r3
 801b7fc:	ab02      	add	r3, sp, #8
 801b7fe:	af02      	add	r7, sp, #8
 801b800:	6851      	ldr	r1, [r2, #4]
 801b802:	c303      	stmia	r3!, {r0, r1}
 801b804:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801b808:	2b00      	cmp	r3, #0
 801b80a:	dd2f      	ble.n	801b86c <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 801b80c:	f9bd 400e 	ldrsh.w	r4, [sp, #14]
 801b810:	2c00      	cmp	r4, #0
 801b812:	dd2b      	ble.n	801b86c <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 801b814:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b818:	441c      	add	r4, r3
 801b81a:	b2a4      	uxth	r4, r4
 801b81c:	b225      	sxth	r5, r4
 801b81e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801b822:	42ab      	cmp	r3, r5
 801b824:	da22      	bge.n	801b86c <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 801b826:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b828:	464a      	mov	r2, r9
 801b82a:	9701      	str	r7, [sp, #4]
 801b82c:	4641      	mov	r1, r8
 801b82e:	9300      	str	r3, [sp, #0]
 801b830:	4630      	mov	r0, r6
 801b832:	4653      	mov	r3, sl
 801b834:	f7ff ffce 	bl	801b7d4 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 801b838:	b940      	cbnz	r0, 801b84c <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 801b83a:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801b83e:	2b01      	cmp	r3, #1
 801b840:	d004      	beq.n	801b84c <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 801b842:	3301      	adds	r3, #1
 801b844:	105b      	asrs	r3, r3, #1
 801b846:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b84a:	e7ec      	b.n	801b826 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3c>
 801b84c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801b850:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b854:	4413      	add	r3, r2
 801b856:	b29b      	uxth	r3, r3
 801b858:	441a      	add	r2, r3
 801b85a:	f8ad 300a 	strh.w	r3, [sp, #10]
 801b85e:	b212      	sxth	r2, r2
 801b860:	4295      	cmp	r5, r2
 801b862:	dadc      	bge.n	801b81e <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 801b864:	1ae3      	subs	r3, r4, r3
 801b866:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b86a:	e7d8      	b.n	801b81e <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 801b86c:	b004      	add	sp, #16
 801b86e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801b872 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 801b872:	0c0b      	lsrs	r3, r1, #16
 801b874:	60c1      	str	r1, [r0, #12]
 801b876:	7481      	strb	r1, [r0, #18]
 801b878:	7403      	strb	r3, [r0, #16]
 801b87a:	0a0b      	lsrs	r3, r1, #8
 801b87c:	7443      	strb	r3, [r0, #17]
 801b87e:	4770      	bx	lr

0801b880 <_ZThn8_N8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 801b880:	f1a0 0008 	sub.w	r0, r0, #8
 801b884:	e7f5      	b.n	801b872 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
	...

0801b888 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv>:
 801b888:	b508      	push	{r3, lr}
 801b88a:	4b05      	ldr	r3, [pc, #20]	@ (801b8a0 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv+0x18>)
 801b88c:	6818      	ldr	r0, [r3, #0]
 801b88e:	6803      	ldr	r3, [r0, #0]
 801b890:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801b894:	4798      	blx	r3
 801b896:	1e43      	subs	r3, r0, #1
 801b898:	4258      	negs	r0, r3
 801b89a:	4158      	adcs	r0, r3
 801b89c:	bd08      	pop	{r3, pc}
 801b89e:	bf00      	nop
 801b8a0:	2403422c 	.word	0x2403422c

0801b8a4 <_ZNK8touchgfx13PainterRGB8885paintEPhssssh>:
 801b8a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b8a8:	b410      	push	{r4}
 801b8aa:	188c      	adds	r4, r1, r2
 801b8ac:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801b8b0:	68c2      	ldr	r2, [r0, #12]
 801b8b2:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801b8b6:	4620      	mov	r0, r4
 801b8b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b8bc:	f7fc b8d2 	b.w	8017a64 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>

0801b8c0 <_ZNK8touchgfx13PainterRGB8888tearDownEv>:
 801b8c0:	f7fc b87a 	b.w	80179b8 <_ZN8touchgfx5paint8tearDownEv>

0801b8c4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh>:
 801b8c4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b8c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b8cc:	4411      	add	r1, r2
 801b8ce:	7c42      	ldrb	r2, [r0, #17]
 801b8d0:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
 801b8d4:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 801b8d8:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 801b8dc:	2a00      	cmp	r2, #0
 801b8de:	f000 8084 	beq.w	801b9ea <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x126>
 801b8e2:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801b8e6:	ed90 7a08 	vldr	s14, [r0, #32]
 801b8ea:	42a2      	cmp	r2, r4
 801b8ec:	68c3      	ldr	r3, [r0, #12]
 801b8ee:	db20      	blt.n	801b932 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x6e>
 801b8f0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801b8f4:	f640 72fc 	movw	r2, #4092	@ 0xffc
 801b8f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b8fc:	bfc8      	it	gt
 801b8fe:	2200      	movgt	r2, #0
 801b900:	589a      	ldr	r2, [r3, r2]
 801b902:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801b906:	7c03      	ldrb	r3, [r0, #16]
 801b908:	fa5f fc82 	uxtb.w	ip, r2
 801b90c:	f3c2 2707 	ubfx	r7, r2, #8, #8
 801b910:	f3c2 4407 	ubfx	r4, r2, #16, #8
 801b914:	440e      	add	r6, r1
 801b916:	b36b      	cbz	r3, 801b974 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 801b918:	2dff      	cmp	r5, #255	@ 0xff
 801b91a:	d12b      	bne.n	801b974 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 801b91c:	42b1      	cmp	r1, r6
 801b91e:	f080 8204 	bcs.w	801bd2a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 801b922:	f881 c000 	strb.w	ip, [r1]
 801b926:	3103      	adds	r1, #3
 801b928:	f801 7c02 	strb.w	r7, [r1, #-2]
 801b92c:	f801 4c01 	strb.w	r4, [r1, #-1]
 801b930:	e7f4      	b.n	801b91c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x58>
 801b932:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 801b936:	42a7      	cmp	r7, r4
 801b938:	dc08      	bgt.n	801b94c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x88>
 801b93a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801b93e:	f640 72fc 	movw	r2, #4092	@ 0xffc
 801b942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b946:	bfd8      	it	le
 801b948:	2200      	movle	r2, #0
 801b94a:	e7d9      	b.n	801b900 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 801b94c:	1aa2      	subs	r2, r4, r2
 801b94e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801b952:	ee07 2a90 	vmov	s15, r2
 801b956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b95a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b95e:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b962:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b966:	ee17 2a90 	vmov	r2, s15
 801b96a:	bfd8      	it	le
 801b96c:	f202 32ff 	addwle	r2, r2, #1023	@ 0x3ff
 801b970:	0092      	lsls	r2, r2, #2
 801b972:	e7c5      	b.n	801b900 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 801b974:	0e12      	lsrs	r2, r2, #24
 801b976:	4355      	muls	r5, r2
 801b978:	1c6a      	adds	r2, r5, #1
 801b97a:	eb02 2525 	add.w	r5, r2, r5, asr #8
 801b97e:	122d      	asrs	r5, r5, #8
 801b980:	43e8      	mvns	r0, r5
 801b982:	b2ad      	uxth	r5, r5
 801b984:	fb1c fc05 	smulbb	ip, ip, r5
 801b988:	b2c0      	uxtb	r0, r0
 801b98a:	fb17 f705 	smulbb	r7, r7, r5
 801b98e:	fb14 f505 	smulbb	r5, r4, r5
 801b992:	fa1f fc8c 	uxth.w	ip, ip
 801b996:	b2bf      	uxth	r7, r7
 801b998:	b2ad      	uxth	r5, r5
 801b99a:	428e      	cmp	r6, r1
 801b99c:	f101 0303 	add.w	r3, r1, #3
 801b9a0:	f240 81c3 	bls.w	801bd2a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 801b9a4:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 801b9a8:	fb02 c200 	mla	r2, r2, r0, ip
 801b9ac:	b292      	uxth	r2, r2
 801b9ae:	1c51      	adds	r1, r2, #1
 801b9b0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801b9b4:	1212      	asrs	r2, r2, #8
 801b9b6:	f803 2c03 	strb.w	r2, [r3, #-3]
 801b9ba:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 801b9be:	fb02 7200 	mla	r2, r2, r0, r7
 801b9c2:	b292      	uxth	r2, r2
 801b9c4:	1c51      	adds	r1, r2, #1
 801b9c6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801b9ca:	1212      	asrs	r2, r2, #8
 801b9cc:	f803 2c02 	strb.w	r2, [r3, #-2]
 801b9d0:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 801b9d4:	fb02 5200 	mla	r2, r2, r0, r5
 801b9d8:	b292      	uxth	r2, r2
 801b9da:	1c51      	adds	r1, r2, #1
 801b9dc:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801b9e0:	4619      	mov	r1, r3
 801b9e2:	1212      	asrs	r2, r2, #8
 801b9e4:	f803 2c01 	strb.w	r2, [r3, #-1]
 801b9e8:	e7d7      	b.n	801b99a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xd6>
 801b9ea:	7c82      	ldrb	r2, [r0, #18]
 801b9ec:	2a00      	cmp	r2, #0
 801b9ee:	d047      	beq.n	801ba80 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1bc>
 801b9f0:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801b9f4:	ee07 2a10 	vmov	s14, r2
 801b9f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b9fc:	ee07 3a90 	vmov	s15, r3
 801ba00:	461a      	mov	r2, r3
 801ba02:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801ba06:	eef4 6ac7 	vcmpe.f32	s13, s14
 801ba0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba0e:	f200 808e 	bhi.w	801bb2e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x26a>
 801ba12:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801ba16:	f640 72fc 	movw	r2, #4092	@ 0xffc
 801ba1a:	68c7      	ldr	r7, [r0, #12]
 801ba1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ba20:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801ba24:	ee06 6a90 	vmov	s13, r6
 801ba28:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801ba2c:	eef4 7ae6 	vcmpe.f32	s15, s13
 801ba30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba34:	bf4a      	itet	mi
 801ba36:	eefd 7ae7 	vcvtmi.s32.f32	s15, s15
 801ba3a:	4634      	movpl	r4, r6
 801ba3c:	ee17 4a90 	vmovmi	r4, s15
 801ba40:	edd0 7a08 	vldr	s15, [r0, #32]
 801ba44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ba48:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 801ba4c:	448e      	add	lr, r1
 801ba4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba52:	bfc8      	it	gt
 801ba54:	2200      	movgt	r2, #0
 801ba56:	58bf      	ldr	r7, [r7, r2]
 801ba58:	7c02      	ldrb	r2, [r0, #16]
 801ba5a:	fa5f f987 	uxtb.w	r9, r7
 801ba5e:	f3c7 2807 	ubfx	r8, r7, #8, #8
 801ba62:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 801ba66:	b31a      	cbz	r2, 801bab0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 801ba68:	2dff      	cmp	r5, #255	@ 0xff
 801ba6a:	d121      	bne.n	801bab0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 801ba6c:	4571      	cmp	r1, lr
 801ba6e:	d25d      	bcs.n	801bb2c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 801ba70:	f881 9000 	strb.w	r9, [r1]
 801ba74:	3103      	adds	r1, #3
 801ba76:	f801 8c02 	strb.w	r8, [r1, #-2]
 801ba7a:	f801 cc01 	strb.w	ip, [r1, #-1]
 801ba7e:	e7f5      	b.n	801ba6c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1a8>
 801ba80:	ee07 4a90 	vmov	s15, r4
 801ba84:	ed90 7a06 	vldr	s14, [r0, #24]
 801ba88:	edd0 6a05 	vldr	s13, [r0, #20]
 801ba8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ba90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ba94:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801ba98:	edd0 7a08 	vldr	s15, [r0, #32]
 801ba9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801baa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801baa4:	bf44      	itt	mi
 801baa6:	edd0 7a07 	vldrmi	s15, [r0, #28]
 801baaa:	ee37 7a67 	vsubmi.f32	s14, s14, s15
 801baae:	e7a5      	b.n	801b9fc <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x138>
 801bab0:	0e3f      	lsrs	r7, r7, #24
 801bab2:	436f      	muls	r7, r5
 801bab4:	1c7a      	adds	r2, r7, #1
 801bab6:	eb02 2227 	add.w	r2, r2, r7, asr #8
 801baba:	1212      	asrs	r2, r2, #8
 801babc:	ea6f 0a02 	mvn.w	sl, r2
 801bac0:	b292      	uxth	r2, r2
 801bac2:	fb19 f902 	smulbb	r9, r9, r2
 801bac6:	fa5f fa8a 	uxtb.w	sl, sl
 801baca:	fb18 f802 	smulbb	r8, r8, r2
 801bace:	fb1c fc02 	smulbb	ip, ip, r2
 801bad2:	fa1f f989 	uxth.w	r9, r9
 801bad6:	fa1f f888 	uxth.w	r8, r8
 801bada:	fa1f fc8c 	uxth.w	ip, ip
 801bade:	458e      	cmp	lr, r1
 801bae0:	f101 0203 	add.w	r2, r1, #3
 801bae4:	d922      	bls.n	801bb2c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 801bae6:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 801baea:	fb01 910a 	mla	r1, r1, sl, r9
 801baee:	b289      	uxth	r1, r1
 801baf0:	1c4f      	adds	r7, r1, #1
 801baf2:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801baf6:	1209      	asrs	r1, r1, #8
 801baf8:	f802 1c03 	strb.w	r1, [r2, #-3]
 801bafc:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 801bb00:	fb01 810a 	mla	r1, r1, sl, r8
 801bb04:	b289      	uxth	r1, r1
 801bb06:	1c4f      	adds	r7, r1, #1
 801bb08:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801bb0c:	1209      	asrs	r1, r1, #8
 801bb0e:	f802 1c02 	strb.w	r1, [r2, #-2]
 801bb12:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 801bb16:	fb01 c10a 	mla	r1, r1, sl, ip
 801bb1a:	b289      	uxth	r1, r1
 801bb1c:	1c4f      	adds	r7, r1, #1
 801bb1e:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801bb22:	1209      	asrs	r1, r1, #8
 801bb24:	f802 1c01 	strb.w	r1, [r2, #-1]
 801bb28:	4611      	mov	r1, r2
 801bb2a:	e7d8      	b.n	801bade <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x21a>
 801bb2c:	191a      	adds	r2, r3, r4
 801bb2e:	4433      	add	r3, r6
 801bb30:	b21b      	sxth	r3, r3
 801bb32:	4293      	cmp	r3, r2
 801bb34:	f340 80f9 	ble.w	801bd2a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 801bb38:	edd0 7a07 	vldr	s15, [r0, #28]
 801bb3c:	ee06 2a90 	vmov	s13, r2
 801bb40:	ee77 7a27 	vadd.f32	s15, s14, s15
 801bb44:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801bb48:	eef4 7ae6 	vcmpe.f32	s15, s13
 801bb4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb50:	f340 80b0 	ble.w	801bcb4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f0>
 801bb54:	ee06 3a10 	vmov	s12, r3
 801bb58:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801bb5c:	eddf 5a74 	vldr	s11, [pc, #464]	@ 801bd30 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x46c>
 801bb60:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801bb64:	eef4 7ac6 	vcmpe.f32	s15, s12
 801bb68:	ed90 6a08 	vldr	s12, [r0, #32]
 801bb6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb70:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801bb74:	bfd6      	itet	le
 801bb76:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 801bb7a:	469c      	movgt	ip, r3
 801bb7c:	ee17 ca90 	vmovle	ip, s15
 801bb80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb84:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 801bd34 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x470>
 801bb88:	ebac 0202 	sub.w	r2, ip, r2
 801bb8c:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 801bb90:	eee6 7a07 	vfma.f32	s15, s12, s14
 801bb94:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bb98:	188c      	adds	r4, r1, r2
 801bb9a:	7c02      	ldrb	r2, [r0, #16]
 801bb9c:	b1d2      	cbz	r2, 801bbd4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 801bb9e:	2dff      	cmp	r5, #255	@ 0xff
 801bba0:	d118      	bne.n	801bbd4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 801bba2:	42a1      	cmp	r1, r4
 801bba4:	d261      	bcs.n	801bc6a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 801bba6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801bbaa:	68c6      	ldr	r6, [r0, #12]
 801bbac:	3103      	adds	r1, #3
 801bbae:	ee17 7a10 	vmov	r7, s14
 801bbb2:	eb06 0287 	add.w	r2, r6, r7, lsl #2
 801bbb6:	f816 6027 	ldrb.w	r6, [r6, r7, lsl #2]
 801bbba:	f801 6c03 	strb.w	r6, [r1, #-3]
 801bbbe:	7856      	ldrb	r6, [r2, #1]
 801bbc0:	f801 6c02 	strb.w	r6, [r1, #-2]
 801bbc4:	7892      	ldrb	r2, [r2, #2]
 801bbc6:	f801 2c01 	strb.w	r2, [r1, #-1]
 801bbca:	ed90 7a08 	vldr	s14, [r0, #32]
 801bbce:	ee77 7a87 	vadd.f32	s15, s15, s14
 801bbd2:	e7e6      	b.n	801bba2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x2de>
 801bbd4:	68c2      	ldr	r2, [r0, #12]
 801bbd6:	428c      	cmp	r4, r1
 801bbd8:	f101 0e03 	add.w	lr, r1, #3
 801bbdc:	d945      	bls.n	801bc6a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 801bbde:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801bbe2:	ee17 9a10 	vmov	r9, s14
 801bbe6:	eb02 0889 	add.w	r8, r2, r9, lsl #2
 801bbea:	f898 7003 	ldrb.w	r7, [r8, #3]
 801bbee:	fb07 f605 	mul.w	r6, r7, r5
 801bbf2:	1c77      	adds	r7, r6, #1
 801bbf4:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801bbf8:	123f      	asrs	r7, r7, #8
 801bbfa:	b2b9      	uxth	r1, r7
 801bbfc:	43ff      	mvns	r7, r7
 801bbfe:	b2fe      	uxtb	r6, r7
 801bc00:	f812 7029 	ldrb.w	r7, [r2, r9, lsl #2]
 801bc04:	f81e 9c03 	ldrb.w	r9, [lr, #-3]
 801bc08:	fb19 f906 	smulbb	r9, r9, r6
 801bc0c:	fb07 9701 	mla	r7, r7, r1, r9
 801bc10:	b2bf      	uxth	r7, r7
 801bc12:	f107 0901 	add.w	r9, r7, #1
 801bc16:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801bc1a:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
 801bc1e:	fb19 f906 	smulbb	r9, r9, r6
 801bc22:	123f      	asrs	r7, r7, #8
 801bc24:	f80e 7c03 	strb.w	r7, [lr, #-3]
 801bc28:	f898 7001 	ldrb.w	r7, [r8, #1]
 801bc2c:	fb07 9701 	mla	r7, r7, r1, r9
 801bc30:	b2bf      	uxth	r7, r7
 801bc32:	f107 0901 	add.w	r9, r7, #1
 801bc36:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801bc3a:	123f      	asrs	r7, r7, #8
 801bc3c:	f80e 7c02 	strb.w	r7, [lr, #-2]
 801bc40:	f81e 7c01 	ldrb.w	r7, [lr, #-1]
 801bc44:	f898 8002 	ldrb.w	r8, [r8, #2]
 801bc48:	fb17 f606 	smulbb	r6, r7, r6
 801bc4c:	fb08 6601 	mla	r6, r8, r1, r6
 801bc50:	b2b6      	uxth	r6, r6
 801bc52:	1c71      	adds	r1, r6, #1
 801bc54:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 801bc58:	4671      	mov	r1, lr
 801bc5a:	1236      	asrs	r6, r6, #8
 801bc5c:	f80e 6c01 	strb.w	r6, [lr, #-1]
 801bc60:	ed90 7a08 	vldr	s14, [r0, #32]
 801bc64:	ee77 7a87 	vadd.f32	s15, s15, s14
 801bc68:	e7b5      	b.n	801bbd6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x312>
 801bc6a:	4563      	cmp	r3, ip
 801bc6c:	dd5d      	ble.n	801bd2a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 801bc6e:	edd0 7a08 	vldr	s15, [r0, #32]
 801bc72:	eba3 030c 	sub.w	r3, r3, ip
 801bc76:	68c4      	ldr	r4, [r0, #12]
 801bc78:	f640 72fc 	movw	r2, #4092	@ 0xffc
 801bc7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801bc80:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bc84:	7c00      	ldrb	r0, [r0, #16]
 801bc86:	440b      	add	r3, r1
 801bc88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc8c:	bfd8      	it	le
 801bc8e:	2200      	movle	r2, #0
 801bc90:	58a2      	ldr	r2, [r4, r2]
 801bc92:	b2d4      	uxtb	r4, r2
 801bc94:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 801bc98:	f3c2 4707 	ubfx	r7, r2, #16, #8
 801bc9c:	b160      	cbz	r0, 801bcb8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 801bc9e:	2dff      	cmp	r5, #255	@ 0xff
 801bca0:	d10a      	bne.n	801bcb8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 801bca2:	4299      	cmp	r1, r3
 801bca4:	d241      	bcs.n	801bd2a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 801bca6:	700c      	strb	r4, [r1, #0]
 801bca8:	3103      	adds	r1, #3
 801bcaa:	f801 cc02 	strb.w	ip, [r1, #-2]
 801bcae:	f801 7c01 	strb.w	r7, [r1, #-1]
 801bcb2:	e7f6      	b.n	801bca2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3de>
 801bcb4:	4694      	mov	ip, r2
 801bcb6:	e7da      	b.n	801bc6e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3aa>
 801bcb8:	0e12      	lsrs	r2, r2, #24
 801bcba:	436a      	muls	r2, r5
 801bcbc:	1c55      	adds	r5, r2, #1
 801bcbe:	eb05 2522 	add.w	r5, r5, r2, asr #8
 801bcc2:	122d      	asrs	r5, r5, #8
 801bcc4:	43ee      	mvns	r6, r5
 801bcc6:	b2ad      	uxth	r5, r5
 801bcc8:	fb14 f405 	smulbb	r4, r4, r5
 801bccc:	b2f6      	uxtb	r6, r6
 801bcce:	fb1c f005 	smulbb	r0, ip, r5
 801bcd2:	fb17 f505 	smulbb	r5, r7, r5
 801bcd6:	b2a4      	uxth	r4, r4
 801bcd8:	b280      	uxth	r0, r0
 801bcda:	b2ad      	uxth	r5, r5
 801bcdc:	428b      	cmp	r3, r1
 801bcde:	f101 0203 	add.w	r2, r1, #3
 801bce2:	d922      	bls.n	801bd2a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 801bce4:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 801bce8:	fb01 4106 	mla	r1, r1, r6, r4
 801bcec:	b289      	uxth	r1, r1
 801bcee:	1c4f      	adds	r7, r1, #1
 801bcf0:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801bcf4:	1209      	asrs	r1, r1, #8
 801bcf6:	f802 1c03 	strb.w	r1, [r2, #-3]
 801bcfa:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 801bcfe:	fb01 0106 	mla	r1, r1, r6, r0
 801bd02:	b289      	uxth	r1, r1
 801bd04:	1c4f      	adds	r7, r1, #1
 801bd06:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801bd0a:	1209      	asrs	r1, r1, #8
 801bd0c:	f802 1c02 	strb.w	r1, [r2, #-2]
 801bd10:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 801bd14:	fb01 5106 	mla	r1, r1, r6, r5
 801bd18:	b289      	uxth	r1, r1
 801bd1a:	1c4f      	adds	r7, r1, #1
 801bd1c:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801bd20:	1209      	asrs	r1, r1, #8
 801bd22:	f802 1c01 	strb.w	r1, [r2, #-1]
 801bd26:	4611      	mov	r1, r2
 801bd28:	e7d8      	b.n	801bcdc <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x418>
 801bd2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bd2e:	bf00      	nop
 801bd30:	447ffffe 	.word	0x447ffffe
 801bd34:	00000000 	.word	0x00000000

0801bd38 <_ZNK8touchgfx27PainterRGB888LinearGradient8tearDownEv>:
 801bd38:	4770      	bx	lr
	...

0801bd3c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 801bd3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801bd3e:	6803      	ldr	r3, [r0, #0]
 801bd40:	460d      	mov	r5, r1
 801bd42:	4604      	mov	r4, r0
 801bd44:	4601      	mov	r1, r0
 801bd46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801bd48:	a802      	add	r0, sp, #8
 801bd4a:	4798      	blx	r3
 801bd4c:	6828      	ldr	r0, [r5, #0]
 801bd4e:	6869      	ldr	r1, [r5, #4]
 801bd50:	466b      	mov	r3, sp
 801bd52:	c303      	stmia	r3!, {r0, r1}
 801bd54:	4668      	mov	r0, sp
 801bd56:	4619      	mov	r1, r3
 801bd58:	f7fd fd0c 	bl	8019774 <_ZN8touchgfx4RectaNERKS0_>
 801bd5c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801bd5e:	b188      	cbz	r0, 801bd84 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801bd60:	6803      	ldr	r3, [r0, #0]
 801bd62:	1d21      	adds	r1, r4, #4
 801bd64:	68db      	ldr	r3, [r3, #12]
 801bd66:	4798      	blx	r3
 801bd68:	b160      	cbz	r0, 801bd84 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801bd6a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801bd6e:	2b00      	cmp	r3, #0
 801bd70:	dd08      	ble.n	801bd84 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801bd72:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 801bd76:	2d00      	cmp	r5, #0
 801bd78:	dd04      	ble.n	801bd84 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801bd7a:	4a2b      	ldr	r2, [pc, #172]	@ (801be28 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 801bd7c:	7812      	ldrb	r2, [r2, #0]
 801bd7e:	b11a      	cbz	r2, 801bd88 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 801bd80:	2a01      	cmp	r2, #1
 801bd82:	d029      	beq.n	801bdd8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 801bd84:	b004      	add	sp, #16
 801bd86:	bd70      	pop	{r4, r5, r6, pc}
 801bd88:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801bd8c:	441d      	add	r5, r3
 801bd8e:	b2ad      	uxth	r5, r5
 801bd90:	b22e      	sxth	r6, r5
 801bd92:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801bd96:	42b3      	cmp	r3, r6
 801bd98:	daf4      	bge.n	801bd84 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801bd9a:	6823      	ldr	r3, [r4, #0]
 801bd9c:	4669      	mov	r1, sp
 801bd9e:	4620      	mov	r0, r4
 801bda0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801bda2:	4798      	blx	r3
 801bda4:	b940      	cbnz	r0, 801bdb8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 801bda6:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801bdaa:	2b01      	cmp	r3, #1
 801bdac:	d004      	beq.n	801bdb8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 801bdae:	3301      	adds	r3, #1
 801bdb0:	105b      	asrs	r3, r3, #1
 801bdb2:	f8ad 3006 	strh.w	r3, [sp, #6]
 801bdb6:	e7f0      	b.n	801bd9a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 801bdb8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801bdbc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801bdc0:	4413      	add	r3, r2
 801bdc2:	b29b      	uxth	r3, r3
 801bdc4:	441a      	add	r2, r3
 801bdc6:	f8ad 3002 	strh.w	r3, [sp, #2]
 801bdca:	b212      	sxth	r2, r2
 801bdcc:	4296      	cmp	r6, r2
 801bdce:	dae0      	bge.n	801bd92 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 801bdd0:	1aeb      	subs	r3, r5, r3
 801bdd2:	f8ad 3006 	strh.w	r3, [sp, #6]
 801bdd6:	e7dc      	b.n	801bd92 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 801bdd8:	f8bd 5000 	ldrh.w	r5, [sp]
 801bddc:	441d      	add	r5, r3
 801bdde:	b2ad      	uxth	r5, r5
 801bde0:	b22e      	sxth	r6, r5
 801bde2:	f9bd 3000 	ldrsh.w	r3, [sp]
 801bde6:	42b3      	cmp	r3, r6
 801bde8:	dacc      	bge.n	801bd84 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801bdea:	6823      	ldr	r3, [r4, #0]
 801bdec:	4669      	mov	r1, sp
 801bdee:	4620      	mov	r0, r4
 801bdf0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801bdf2:	4798      	blx	r3
 801bdf4:	b940      	cbnz	r0, 801be08 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 801bdf6:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801bdfa:	2b01      	cmp	r3, #1
 801bdfc:	d004      	beq.n	801be08 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 801bdfe:	3301      	adds	r3, #1
 801be00:	105b      	asrs	r3, r3, #1
 801be02:	f8ad 3004 	strh.w	r3, [sp, #4]
 801be06:	e7f0      	b.n	801bdea <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 801be08:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801be0c:	f8bd 3000 	ldrh.w	r3, [sp]
 801be10:	4413      	add	r3, r2
 801be12:	b29b      	uxth	r3, r3
 801be14:	441a      	add	r2, r3
 801be16:	f8ad 3000 	strh.w	r3, [sp]
 801be1a:	b212      	sxth	r2, r2
 801be1c:	4296      	cmp	r6, r2
 801be1e:	dae0      	bge.n	801bde2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 801be20:	1aeb      	subs	r3, r5, r3
 801be22:	f8ad 3004 	strh.w	r3, [sp, #4]
 801be26:	e7dc      	b.n	801bde2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 801be28:	24034224 	.word	0x24034224

0801be2c <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 801be2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801be2e:	6803      	ldr	r3, [r0, #0]
 801be30:	4604      	mov	r4, r0
 801be32:	4601      	mov	r1, r0
 801be34:	4668      	mov	r0, sp
 801be36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801be38:	4798      	blx	r3
 801be3a:	2100      	movs	r1, #0
 801be3c:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 801be40:	4668      	mov	r0, sp
 801be42:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801be46:	9102      	str	r1, [sp, #8]
 801be48:	a902      	add	r1, sp, #8
 801be4a:	f8ad 200c 	strh.w	r2, [sp, #12]
 801be4e:	f8ad 300e 	strh.w	r3, [sp, #14]
 801be52:	f7fd fc8f 	bl	8019774 <_ZN8touchgfx4RectaNERKS0_>
 801be56:	6823      	ldr	r3, [r4, #0]
 801be58:	4669      	mov	r1, sp
 801be5a:	4620      	mov	r0, r4
 801be5c:	691b      	ldr	r3, [r3, #16]
 801be5e:	4798      	blx	r3
 801be60:	b004      	add	sp, #16
 801be62:	bd10      	pop	{r4, pc}

0801be64 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 801be64:	2101      	movs	r1, #1
 801be66:	2200      	movs	r2, #0
 801be68:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 801be6c:	490a      	ldr	r1, [pc, #40]	@ (801be98 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 801be6e:	8082      	strh	r2, [r0, #4]
 801be70:	6001      	str	r1, [r0, #0]
 801be72:	21ff      	movs	r1, #255	@ 0xff
 801be74:	80c2      	strh	r2, [r0, #6]
 801be76:	8102      	strh	r2, [r0, #8]
 801be78:	8142      	strh	r2, [r0, #10]
 801be7a:	8182      	strh	r2, [r0, #12]
 801be7c:	81c2      	strh	r2, [r0, #14]
 801be7e:	8202      	strh	r2, [r0, #16]
 801be80:	8242      	strh	r2, [r0, #18]
 801be82:	61c2      	str	r2, [r0, #28]
 801be84:	8402      	strh	r2, [r0, #32]
 801be86:	8442      	strh	r2, [r0, #34]	@ 0x22
 801be88:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 801be8c:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 801be90:	6282      	str	r2, [r0, #40]	@ 0x28
 801be92:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801be96:	4770      	bx	lr
 801be98:	0802ed38 	.word	0x0802ed38

0801be9c <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 801be9c:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 801bea0:	4770      	bx	lr

0801bea2 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 801bea2:	b510      	push	{r4, lr}
 801bea4:	4604      	mov	r4, r0
 801bea6:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 801bea8:	b150      	cbz	r0, 801bec0 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801beaa:	6803      	ldr	r3, [r0, #0]
 801beac:	68db      	ldr	r3, [r3, #12]
 801beae:	4798      	blx	r3
 801beb0:	b130      	cbz	r0, 801bec0 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801beb2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801beb4:	4621      	mov	r1, r4
 801beb6:	6803      	ldr	r3, [r0, #0]
 801beb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bebc:	689b      	ldr	r3, [r3, #8]
 801bebe:	4718      	bx	r3
 801bec0:	bd10      	pop	{r4, pc}

0801bec2 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 801bec2:	790b      	ldrb	r3, [r1, #4]
 801bec4:	2b00      	cmp	r3, #0
 801bec6:	bf0c      	ite	eq
 801bec8:	2301      	moveq	r3, #1
 801beca:	2300      	movne	r3, #0
 801becc:	b570      	push	{r4, r5, r6, lr}
 801bece:	4604      	mov	r4, r0
 801bed0:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 801bed4:	460e      	mov	r6, r1
 801bed6:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 801beda:	d109      	bne.n	801bef0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 801bedc:	b14d      	cbz	r5, 801bef2 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 801bede:	7933      	ldrb	r3, [r6, #4]
 801bee0:	2b01      	cmp	r3, #1
 801bee2:	d10c      	bne.n	801befe <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801bee4:	6823      	ldr	r3, [r4, #0]
 801bee6:	4620      	mov	r0, r4
 801bee8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801beea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801beee:	4718      	bx	r3
 801bef0:	b12d      	cbz	r5, 801befe <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801bef2:	6823      	ldr	r3, [r4, #0]
 801bef4:	4620      	mov	r0, r4
 801bef6:	695b      	ldr	r3, [r3, #20]
 801bef8:	4798      	blx	r3
 801befa:	2d00      	cmp	r5, #0
 801befc:	d1ef      	bne.n	801bede <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 801befe:	bd70      	pop	{r4, r5, r6, pc}

0801bf00 <_ZNK8touchgfx3Box12getSolidRectEv>:
 801bf00:	2300      	movs	r3, #0
 801bf02:	8083      	strh	r3, [r0, #4]
 801bf04:	80c3      	strh	r3, [r0, #6]
 801bf06:	8003      	strh	r3, [r0, #0]
 801bf08:	8043      	strh	r3, [r0, #2]
 801bf0a:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 801bf0e:	2bff      	cmp	r3, #255	@ 0xff
 801bf10:	bf01      	itttt	eq
 801bf12:	890b      	ldrheq	r3, [r1, #8]
 801bf14:	8083      	strheq	r3, [r0, #4]
 801bf16:	894b      	ldrheq	r3, [r1, #10]
 801bf18:	80c3      	strheq	r3, [r0, #6]
 801bf1a:	4770      	bx	lr

0801bf1c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801bf1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bf1e:	4604      	mov	r4, r0
 801bf20:	466b      	mov	r3, sp
 801bf22:	6808      	ldr	r0, [r1, #0]
 801bf24:	6849      	ldr	r1, [r1, #4]
 801bf26:	c303      	stmia	r3!, {r0, r1}
 801bf28:	6823      	ldr	r3, [r4, #0]
 801bf2a:	4669      	mov	r1, sp
 801bf2c:	4620      	mov	r0, r4
 801bf2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bf30:	4798      	blx	r3
 801bf32:	4b08      	ldr	r3, [pc, #32]	@ (801bf54 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801bf34:	681b      	ldr	r3, [r3, #0]
 801bf36:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 801bf3a:	b10a      	cbz	r2, 801bf40 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801bf3c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 801bf3e:	b900      	cbnz	r0, 801bf42 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801bf40:	6898      	ldr	r0, [r3, #8]
 801bf42:	6803      	ldr	r3, [r0, #0]
 801bf44:	4669      	mov	r1, sp
 801bf46:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801bf48:	6a1d      	ldr	r5, [r3, #32]
 801bf4a:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 801bf4e:	47a8      	blx	r5
 801bf50:	b003      	add	sp, #12
 801bf52:	bd30      	pop	{r4, r5, pc}
 801bf54:	2403422c 	.word	0x2403422c

0801bf58 <_ZNK8touchgfx3Box17invalidateContentEv>:
 801bf58:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 801bf5c:	b12a      	cbz	r2, 801bf6a <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801bf5e:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 801bf62:	b112      	cbz	r2, 801bf6a <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801bf64:	6803      	ldr	r3, [r0, #0]
 801bf66:	695b      	ldr	r3, [r3, #20]
 801bf68:	4718      	bx	r3
 801bf6a:	4770      	bx	lr

0801bf6c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 801bf6c:	b570      	push	{r4, r5, r6, lr}
 801bf6e:	880b      	ldrh	r3, [r1, #0]
 801bf70:	4605      	mov	r5, r0
 801bf72:	4604      	mov	r4, r0
 801bf74:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 801bf76:	8813      	ldrh	r3, [r2, #0]
 801bf78:	f825 3f30 	strh.w	r3, [r5, #48]!
 801bf7c:	4628      	mov	r0, r5
 801bf7e:	f004 ffb3 	bl	8020ee8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801bf82:	4606      	mov	r6, r0
 801bf84:	4628      	mov	r0, r5
 801bf86:	f004 ffe3 	bl	8020f50 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801bf8a:	6823      	ldr	r3, [r4, #0]
 801bf8c:	4605      	mov	r5, r0
 801bf8e:	4631      	mov	r1, r6
 801bf90:	4620      	mov	r0, r4
 801bf92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801bf94:	4798      	blx	r3
 801bf96:	6823      	ldr	r3, [r4, #0]
 801bf98:	4629      	mov	r1, r5
 801bf9a:	4620      	mov	r0, r4
 801bf9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801bf9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bfa2:	4718      	bx	r3

0801bfa4 <_ZNK8touchgfx6Button12getSolidRectEv>:
 801bfa4:	b510      	push	{r4, lr}
 801bfa6:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 801bfaa:	4604      	mov	r4, r0
 801bfac:	2bff      	cmp	r3, #255	@ 0xff
 801bfae:	d006      	beq.n	801bfbe <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 801bfb0:	2300      	movs	r3, #0
 801bfb2:	8003      	strh	r3, [r0, #0]
 801bfb4:	8043      	strh	r3, [r0, #2]
 801bfb6:	8083      	strh	r3, [r0, #4]
 801bfb8:	80c3      	strh	r3, [r0, #6]
 801bfba:	4620      	mov	r0, r4
 801bfbc:	bd10      	pop	{r4, pc}
 801bfbe:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 801bfc2:	b11b      	cbz	r3, 801bfcc <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 801bfc4:	3130      	adds	r1, #48	@ 0x30
 801bfc6:	f004 fff7 	bl	8020fb8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801bfca:	e7f6      	b.n	801bfba <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 801bfcc:	312e      	adds	r1, #46	@ 0x2e
 801bfce:	e7fa      	b.n	801bfc6 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

0801bfd0 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 801bfd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bfd4:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 801bfd8:	b08a      	sub	sp, #40	@ 0x28
 801bfda:	4604      	mov	r4, r0
 801bfdc:	4688      	mov	r8, r1
 801bfde:	2b00      	cmp	r3, #0
 801bfe0:	d066      	beq.n	801c0b0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 801bfe2:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 801bfe4:	a805      	add	r0, sp, #20
 801bfe6:	f8ad 3014 	strh.w	r3, [sp, #20]
 801bfea:	f004 ff7d 	bl	8020ee8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801bfee:	4607      	mov	r7, r0
 801bff0:	a805      	add	r0, sp, #20
 801bff2:	f004 ffad 	bl	8020f50 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801bff6:	f9b8 6000 	ldrsh.w	r6, [r8]
 801bffa:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 801bffe:	2300      	movs	r3, #0
 801c000:	4432      	add	r2, r6
 801c002:	9306      	str	r3, [sp, #24]
 801c004:	b292      	uxth	r2, r2
 801c006:	fa0f fc82 	sxth.w	ip, r2
 801c00a:	459c      	cmp	ip, r3
 801c00c:	dd52      	ble.n	801c0b4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801c00e:	42b7      	cmp	r7, r6
 801c010:	dd50      	ble.n	801c0b4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801c012:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 801c016:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801c01a:	442b      	add	r3, r5
 801c01c:	b29b      	uxth	r3, r3
 801c01e:	b219      	sxth	r1, r3
 801c020:	2900      	cmp	r1, #0
 801c022:	dd47      	ble.n	801c0b4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801c024:	42a8      	cmp	r0, r5
 801c026:	dd45      	ble.n	801c0b4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801c028:	4567      	cmp	r7, ip
 801c02a:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 801c02e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801c032:	bfb8      	it	lt
 801c034:	b2ba      	uxthlt	r2, r7
 801c036:	4288      	cmp	r0, r1
 801c038:	f8ad 6018 	strh.w	r6, [sp, #24]
 801c03c:	bfb8      	it	lt
 801c03e:	b283      	uxthlt	r3, r0
 801c040:	1b92      	subs	r2, r2, r6
 801c042:	f8ad 501a 	strh.w	r5, [sp, #26]
 801c046:	1b5b      	subs	r3, r3, r5
 801c048:	f8ad 201c 	strh.w	r2, [sp, #28]
 801c04c:	f8ad 301e 	strh.w	r3, [sp, #30]
 801c050:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801c054:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c058:	429a      	cmp	r2, r3
 801c05a:	d026      	beq.n	801c0aa <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 801c05c:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801c060:	2b00      	cmp	r3, #0
 801c062:	dd22      	ble.n	801c0aa <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 801c064:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801c068:	2b00      	cmp	r3, #0
 801c06a:	dd1e      	ble.n	801c0aa <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 801c06c:	2300      	movs	r3, #0
 801c06e:	a908      	add	r1, sp, #32
 801c070:	4620      	mov	r0, r4
 801c072:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801c076:	6823      	ldr	r3, [r4, #0]
 801c078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c07a:	4798      	blx	r3
 801c07c:	4b0f      	ldr	r3, [pc, #60]	@ (801c0bc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 801c07e:	681b      	ldr	r3, [r3, #0]
 801c080:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 801c084:	b10a      	cbz	r2, 801c08a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 801c086:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 801c088:	b900      	cbnz	r0, 801c08c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 801c08a:	6898      	ldr	r0, [r3, #8]
 801c08c:	2501      	movs	r5, #1
 801c08e:	6801      	ldr	r1, [r0, #0]
 801c090:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801c094:	9502      	str	r5, [sp, #8]
 801c096:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 801c09a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801c09e:	9401      	str	r4, [sp, #4]
 801c0a0:	ac06      	add	r4, sp, #24
 801c0a2:	9400      	str	r4, [sp, #0]
 801c0a4:	688c      	ldr	r4, [r1, #8]
 801c0a6:	a905      	add	r1, sp, #20
 801c0a8:	47a0      	blx	r4
 801c0aa:	b00a      	add	sp, #40	@ 0x28
 801c0ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c0b0:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 801c0b2:	e797      	b.n	801bfe4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 801c0b4:	2300      	movs	r3, #0
 801c0b6:	9307      	str	r3, [sp, #28]
 801c0b8:	e7ca      	b.n	801c050 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 801c0ba:	bf00      	nop
 801c0bc:	2403422c 	.word	0x2403422c

0801c0c0 <_ZNK8touchgfx6Button17invalidateContentEv>:
 801c0c0:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 801c0c4:	b12a      	cbz	r2, 801c0d2 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 801c0c6:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 801c0ca:	b112      	cbz	r2, 801c0d2 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 801c0cc:	6803      	ldr	r3, [r0, #0]
 801c0ce:	695b      	ldr	r3, [r3, #20]
 801c0d0:	4718      	bx	r3
 801c0d2:	4770      	bx	lr

0801c0d4 <_ZN8touchgfx7OutlineD1Ev>:
 801c0d4:	4770      	bx	lr

0801c0d6 <_ZN8touchgfx7OutlineD0Ev>:
 801c0d6:	b510      	push	{r4, lr}
 801c0d8:	4604      	mov	r4, r0
 801c0da:	2130      	movs	r1, #48	@ 0x30
 801c0dc:	f00f fcbd 	bl	802ba5a <_ZdlPvj>
 801c0e0:	4620      	mov	r0, r4
 801c0e2:	bd10      	pop	{r4, pc}

0801c0e4 <_ZN8touchgfx7Outline5resetEv>:
 801c0e4:	b510      	push	{r4, lr}
 801c0e6:	4604      	mov	r4, r0
 801c0e8:	f000 fe72 	bl	801cdd0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 801c0ec:	60e0      	str	r0, [r4, #12]
 801c0ee:	f000 fe75 	bl	801cddc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 801c0f2:	68e3      	ldr	r3, [r4, #12]
 801c0f4:	08c0      	lsrs	r0, r0, #3
 801c0f6:	2200      	movs	r2, #0
 801c0f8:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 801c0fc:	6123      	str	r3, [r4, #16]
 801c0fe:	3801      	subs	r0, #1
 801c100:	60a2      	str	r2, [r4, #8]
 801c102:	6060      	str	r0, [r4, #4]
 801c104:	8019      	strh	r1, [r3, #0]
 801c106:	8059      	strh	r1, [r3, #2]
 801c108:	809a      	strh	r2, [r3, #4]
 801c10a:	80da      	strh	r2, [r3, #6]
 801c10c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801c10e:	f023 0301 	bic.w	r3, r3, #1
 801c112:	f043 0302 	orr.w	r3, r3, #2
 801c116:	6263      	str	r3, [r4, #36]	@ 0x24
 801c118:	bd10      	pop	{r4, pc}
	...

0801c11c <_ZN8touchgfx7OutlineC1Ev>:
 801c11c:	4b0a      	ldr	r3, [pc, #40]	@ (801c148 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 801c11e:	b510      	push	{r4, lr}
 801c120:	6003      	str	r3, [r0, #0]
 801c122:	2300      	movs	r3, #0
 801c124:	4604      	mov	r4, r0
 801c126:	6243      	str	r3, [r0, #36]	@ 0x24
 801c128:	e9c0 3301 	strd	r3, r3, [r0, #4]
 801c12c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c130:	e9c0 3305 	strd	r3, r3, [r0, #20]
 801c134:	e9c0 3307 	strd	r3, r3, [r0, #28]
 801c138:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801c13c:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 801c140:	f7ff ffd0 	bl	801c0e4 <_ZN8touchgfx7Outline5resetEv>
 801c144:	4620      	mov	r0, r4
 801c146:	bd10      	pop	{r4, pc}
 801c148:	0802eefc 	.word	0x0802eefc

0801c14c <_ZN8touchgfx7Outline10renderLineEiiii>:
 801c14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c150:	b093      	sub	sp, #76	@ 0x4c
 801c152:	1156      	asrs	r6, r2, #5
 801c154:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801c156:	9305      	str	r3, [sp, #20]
 801c158:	1153      	asrs	r3, r2, #5
 801c15a:	f004 051f 	and.w	r5, r4, #31
 801c15e:	9303      	str	r3, [sp, #12]
 801c160:	1163      	asrs	r3, r4, #5
 801c162:	9504      	str	r5, [sp, #16]
 801c164:	1165      	asrs	r5, r4, #5
 801c166:	9306      	str	r3, [sp, #24]
 801c168:	f002 031f 	and.w	r3, r2, #31
 801c16c:	42ae      	cmp	r6, r5
 801c16e:	f040 80f4 	bne.w	801c35a <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 801c172:	9c04      	ldr	r4, [sp, #16]
 801c174:	9a05      	ldr	r2, [sp, #20]
 801c176:	42a3      	cmp	r3, r4
 801c178:	ea4f 1e62 	mov.w	lr, r2, asr #5
 801c17c:	6902      	ldr	r2, [r0, #16]
 801c17e:	d125      	bne.n	801c1cc <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 801c180:	f9b2 3000 	ldrsh.w	r3, [r2]
 801c184:	459e      	cmp	lr, r3
 801c186:	d103      	bne.n	801c190 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 801c188:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801c18c:	429e      	cmp	r6, r3
 801c18e:	d035      	beq.n	801c1fc <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801c190:	88d1      	ldrh	r1, [r2, #6]
 801c192:	8893      	ldrh	r3, [r2, #4]
 801c194:	430b      	orrs	r3, r1
 801c196:	d010      	beq.n	801c1ba <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 801c198:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801c19c:	2b00      	cmp	r3, #0
 801c19e:	db0c      	blt.n	801c1ba <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 801c1a0:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801c1a2:	428b      	cmp	r3, r1
 801c1a4:	da09      	bge.n	801c1ba <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 801c1a6:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 801c1aa:	428b      	cmp	r3, r1
 801c1ac:	f103 0301 	add.w	r3, r3, #1
 801c1b0:	bf38      	it	cc
 801c1b2:	3208      	addcc	r2, #8
 801c1b4:	6083      	str	r3, [r0, #8]
 801c1b6:	bf38      	it	cc
 801c1b8:	6102      	strcc	r2, [r0, #16]
 801c1ba:	6903      	ldr	r3, [r0, #16]
 801c1bc:	9a03      	ldr	r2, [sp, #12]
 801c1be:	f8a3 e000 	strh.w	lr, [r3]
 801c1c2:	805a      	strh	r2, [r3, #2]
 801c1c4:	2200      	movs	r2, #0
 801c1c6:	809a      	strh	r2, [r3, #4]
 801c1c8:	80da      	strh	r2, [r3, #6]
 801c1ca:	e017      	b.n	801c1fc <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801c1cc:	9c05      	ldr	r4, [sp, #20]
 801c1ce:	114e      	asrs	r6, r1, #5
 801c1d0:	f001 0c1f 	and.w	ip, r1, #31
 801c1d4:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 801c1d8:	f004 041f 	and.w	r4, r4, #31
 801c1dc:	4576      	cmp	r6, lr
 801c1de:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 801c1e2:	9402      	str	r4, [sp, #8]
 801c1e4:	9c04      	ldr	r4, [sp, #16]
 801c1e6:	eba4 0403 	sub.w	r4, r4, r3
 801c1ea:	d10a      	bne.n	801c202 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 801c1ec:	9b02      	ldr	r3, [sp, #8]
 801c1ee:	44a0      	add	r8, r4
 801c1f0:	449c      	add	ip, r3
 801c1f2:	f8a2 8004 	strh.w	r8, [r2, #4]
 801c1f6:	fb04 a40c 	mla	r4, r4, ip, sl
 801c1fa:	80d4      	strh	r4, [r2, #6]
 801c1fc:	b013      	add	sp, #76	@ 0x4c
 801c1fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c202:	9d05      	ldr	r5, [sp, #20]
 801c204:	1a69      	subs	r1, r5, r1
 801c206:	bf51      	iteee	pl
 801c208:	f1cc 0520 	rsbpl	r5, ip, #32
 801c20c:	fb04 f40c 	mulmi.w	r4, r4, ip
 801c210:	4249      	negmi	r1, r1
 801c212:	2500      	movmi	r5, #0
 801c214:	bf5d      	ittte	pl
 801c216:	436c      	mulpl	r4, r5
 801c218:	2520      	movpl	r5, #32
 801c21a:	f04f 0901 	movpl.w	r9, #1
 801c21e:	f04f 39ff 	movmi.w	r9, #4294967295
 801c222:	9501      	str	r5, [sp, #4]
 801c224:	9f01      	ldr	r7, [sp, #4]
 801c226:	444e      	add	r6, r9
 801c228:	fb94 f5f1 	sdiv	r5, r4, r1
 801c22c:	fb01 4415 	mls	r4, r1, r5, r4
 801c230:	44bc      	add	ip, r7
 801c232:	2c00      	cmp	r4, #0
 801c234:	bfbc      	itt	lt
 801c236:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801c23a:	1864      	addlt	r4, r4, r1
 801c23c:	44a8      	add	r8, r5
 801c23e:	fb05 ac0c 	mla	ip, r5, ip, sl
 801c242:	f8a2 8004 	strh.w	r8, [r2, #4]
 801c246:	f8a2 c006 	strh.w	ip, [r2, #6]
 801c24a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801c24e:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 801c252:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 801c256:	ea58 0202 	orrs.w	r2, r8, r2
 801c25a:	d011      	beq.n	801c280 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 801c25c:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 801c260:	f1b8 0f00 	cmp.w	r8, #0
 801c264:	db0c      	blt.n	801c280 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 801c266:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 801c268:	4590      	cmp	r8, r2
 801c26a:	da09      	bge.n	801c280 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 801c26c:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 801c270:	4590      	cmp	r8, r2
 801c272:	bf3c      	itt	cc
 801c274:	f10c 0208 	addcc.w	r2, ip, #8
 801c278:	6102      	strcc	r2, [r0, #16]
 801c27a:	f108 0201 	add.w	r2, r8, #1
 801c27e:	6082      	str	r2, [r0, #8]
 801c280:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801c284:	2700      	movs	r7, #0
 801c286:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801c28a:	45b6      	cmp	lr, r6
 801c28c:	f8ac 6000 	strh.w	r6, [ip]
 801c290:	442b      	add	r3, r5
 801c292:	f8ac 2002 	strh.w	r2, [ip, #2]
 801c296:	f8ac 7004 	strh.w	r7, [ip, #4]
 801c29a:	f8ac 7006 	strh.w	r7, [ip, #6]
 801c29e:	d04b      	beq.n	801c338 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 801c2a0:	9f04      	ldr	r7, [sp, #16]
 801c2a2:	1a64      	subs	r4, r4, r1
 801c2a4:	f04f 0a00 	mov.w	sl, #0
 801c2a8:	1aff      	subs	r7, r7, r3
 801c2aa:	443d      	add	r5, r7
 801c2ac:	016d      	lsls	r5, r5, #5
 801c2ae:	fb95 f8f1 	sdiv	r8, r5, r1
 801c2b2:	fb01 5518 	mls	r5, r1, r8, r5
 801c2b6:	2d00      	cmp	r5, #0
 801c2b8:	bfbc      	itt	lt
 801c2ba:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801c2be:	186d      	addlt	r5, r5, r1
 801c2c0:	f108 0701 	add.w	r7, r8, #1
 801c2c4:	9703      	str	r7, [sp, #12]
 801c2c6:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801c2ca:	1964      	adds	r4, r4, r5
 801c2cc:	444e      	add	r6, r9
 801c2ce:	bf54      	ite	pl
 801c2d0:	9f03      	ldrpl	r7, [sp, #12]
 801c2d2:	4647      	movmi	r7, r8
 801c2d4:	f8bc b004 	ldrh.w	fp, [ip, #4]
 801c2d8:	bf58      	it	pl
 801c2da:	1a64      	subpl	r4, r4, r1
 801c2dc:	443b      	add	r3, r7
 801c2de:	44bb      	add	fp, r7
 801c2e0:	f8ac b004 	strh.w	fp, [ip, #4]
 801c2e4:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801c2e8:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801c2ec:	f8ac b006 	strh.w	fp, [ip, #6]
 801c2f0:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801c2f4:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801c2f8:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801c2fc:	ea5b 0707 	orrs.w	r7, fp, r7
 801c300:	d011      	beq.n	801c326 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 801c302:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 801c306:	f1bb 0f00 	cmp.w	fp, #0
 801c30a:	db0c      	blt.n	801c326 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 801c30c:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801c30e:	45bb      	cmp	fp, r7
 801c310:	da09      	bge.n	801c326 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 801c312:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801c316:	45bb      	cmp	fp, r7
 801c318:	bf3c      	itt	cc
 801c31a:	f10c 0708 	addcc.w	r7, ip, #8
 801c31e:	6107      	strcc	r7, [r0, #16]
 801c320:	f10b 0701 	add.w	r7, fp, #1
 801c324:	6087      	str	r7, [r0, #8]
 801c326:	6907      	ldr	r7, [r0, #16]
 801c328:	45b6      	cmp	lr, r6
 801c32a:	803e      	strh	r6, [r7, #0]
 801c32c:	807a      	strh	r2, [r7, #2]
 801c32e:	f8a7 a004 	strh.w	sl, [r7, #4]
 801c332:	f8a7 a006 	strh.w	sl, [r7, #6]
 801c336:	d1c6      	bne.n	801c2c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 801c338:	9a04      	ldr	r2, [sp, #16]
 801c33a:	1ad3      	subs	r3, r2, r3
 801c33c:	6902      	ldr	r2, [r0, #16]
 801c33e:	8891      	ldrh	r1, [r2, #4]
 801c340:	88d6      	ldrh	r6, [r2, #6]
 801c342:	4419      	add	r1, r3
 801c344:	8091      	strh	r1, [r2, #4]
 801c346:	9902      	ldr	r1, [sp, #8]
 801c348:	f101 0c20 	add.w	ip, r1, #32
 801c34c:	9901      	ldr	r1, [sp, #4]
 801c34e:	ebac 0c01 	sub.w	ip, ip, r1
 801c352:	fb03 630c 	mla	r3, r3, ip, r6
 801c356:	80d3      	strh	r3, [r2, #6]
 801c358:	e750      	b.n	801c1fc <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801c35a:	9d05      	ldr	r5, [sp, #20]
 801c35c:	1aa2      	subs	r2, r4, r2
 801c35e:	eba5 0501 	sub.w	r5, r5, r1
 801c362:	9202      	str	r2, [sp, #8]
 801c364:	9508      	str	r5, [sp, #32]
 801c366:	f140 8128 	bpl.w	801c5ba <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 801c36a:	9a03      	ldr	r2, [sp, #12]
 801c36c:	2a00      	cmp	r2, #0
 801c36e:	f6ff af45 	blt.w	801c1fc <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801c372:	9a02      	ldr	r2, [sp, #8]
 801c374:	f04f 34ff 	mov.w	r4, #4294967295
 801c378:	4252      	negs	r2, r2
 801c37a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801c37c:	2400      	movs	r4, #0
 801c37e:	9202      	str	r2, [sp, #8]
 801c380:	9a06      	ldr	r2, [sp, #24]
 801c382:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 801c386:	9206      	str	r2, [sp, #24]
 801c388:	462a      	mov	r2, r5
 801c38a:	435a      	muls	r2, r3
 801c38c:	9401      	str	r4, [sp, #4]
 801c38e:	9c02      	ldr	r4, [sp, #8]
 801c390:	9d02      	ldr	r5, [sp, #8]
 801c392:	fb92 f4f4 	sdiv	r4, r2, r4
 801c396:	fb05 2214 	mls	r2, r5, r4, r2
 801c39a:	2a00      	cmp	r2, #0
 801c39c:	9207      	str	r2, [sp, #28]
 801c39e:	bfbc      	itt	lt
 801c3a0:	1952      	addlt	r2, r2, r5
 801c3a2:	f104 34ff 	addlt.w	r4, r4, #4294967295
 801c3a6:	6905      	ldr	r5, [r0, #16]
 801c3a8:	bfb8      	it	lt
 801c3aa:	9207      	strlt	r2, [sp, #28]
 801c3ac:	eb04 0901 	add.w	r9, r4, r1
 801c3b0:	9a01      	ldr	r2, [sp, #4]
 801c3b2:	ea4f 1669 	mov.w	r6, r9, asr #5
 801c3b6:	429a      	cmp	r2, r3
 801c3b8:	f040 8111 	bne.w	801c5de <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 801c3bc:	f9b5 3000 	ldrsh.w	r3, [r5]
 801c3c0:	429e      	cmp	r6, r3
 801c3c2:	d104      	bne.n	801c3ce <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 801c3c4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801c3c8:	9a03      	ldr	r2, [sp, #12]
 801c3ca:	429a      	cmp	r2, r3
 801c3cc:	d01b      	beq.n	801c406 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 801c3ce:	88ea      	ldrh	r2, [r5, #6]
 801c3d0:	88ab      	ldrh	r3, [r5, #4]
 801c3d2:	4313      	orrs	r3, r2
 801c3d4:	d010      	beq.n	801c3f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 801c3d6:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801c3da:	2a00      	cmp	r2, #0
 801c3dc:	db0c      	blt.n	801c3f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 801c3de:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801c3e0:	429a      	cmp	r2, r3
 801c3e2:	da09      	bge.n	801c3f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 801c3e4:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 801c3e8:	429a      	cmp	r2, r3
 801c3ea:	f102 0201 	add.w	r2, r2, #1
 801c3ee:	bf38      	it	cc
 801c3f0:	3508      	addcc	r5, #8
 801c3f2:	6082      	str	r2, [r0, #8]
 801c3f4:	bf38      	it	cc
 801c3f6:	6105      	strcc	r5, [r0, #16]
 801c3f8:	6903      	ldr	r3, [r0, #16]
 801c3fa:	9a03      	ldr	r2, [sp, #12]
 801c3fc:	801e      	strh	r6, [r3, #0]
 801c3fe:	805a      	strh	r2, [r3, #2]
 801c400:	2200      	movs	r2, #0
 801c402:	809a      	strh	r2, [r3, #4]
 801c404:	80da      	strh	r2, [r3, #6]
 801c406:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c408:	9a03      	ldr	r2, [sp, #12]
 801c40a:	6901      	ldr	r1, [r0, #16]
 801c40c:	441a      	add	r2, r3
 801c40e:	f9b1 3000 	ldrsh.w	r3, [r1]
 801c412:	42b3      	cmp	r3, r6
 801c414:	d103      	bne.n	801c41e <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 801c416:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801c41a:	429a      	cmp	r2, r3
 801c41c:	d01a      	beq.n	801c454 <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 801c41e:	88cc      	ldrh	r4, [r1, #6]
 801c420:	888b      	ldrh	r3, [r1, #4]
 801c422:	4323      	orrs	r3, r4
 801c424:	d010      	beq.n	801c448 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 801c426:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 801c42a:	2c00      	cmp	r4, #0
 801c42c:	db0c      	blt.n	801c448 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 801c42e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801c430:	429c      	cmp	r4, r3
 801c432:	da09      	bge.n	801c448 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 801c434:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 801c438:	429c      	cmp	r4, r3
 801c43a:	f104 0401 	add.w	r4, r4, #1
 801c43e:	bf38      	it	cc
 801c440:	3108      	addcc	r1, #8
 801c442:	6084      	str	r4, [r0, #8]
 801c444:	bf38      	it	cc
 801c446:	6101      	strcc	r1, [r0, #16]
 801c448:	6903      	ldr	r3, [r0, #16]
 801c44a:	2100      	movs	r1, #0
 801c44c:	801e      	strh	r6, [r3, #0]
 801c44e:	805a      	strh	r2, [r3, #2]
 801c450:	8099      	strh	r1, [r3, #4]
 801c452:	80d9      	strh	r1, [r3, #6]
 801c454:	9b06      	ldr	r3, [sp, #24]
 801c456:	4293      	cmp	r3, r2
 801c458:	f000 8082 	beq.w	801c560 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 801c45c:	9b08      	ldr	r3, [sp, #32]
 801c45e:	9902      	ldr	r1, [sp, #8]
 801c460:	015b      	lsls	r3, r3, #5
 801c462:	9c02      	ldr	r4, [sp, #8]
 801c464:	fb93 f1f1 	sdiv	r1, r3, r1
 801c468:	fb04 3311 	mls	r3, r4, r1, r3
 801c46c:	9103      	str	r1, [sp, #12]
 801c46e:	2b00      	cmp	r3, #0
 801c470:	9308      	str	r3, [sp, #32]
 801c472:	da04      	bge.n	801c47e <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 801c474:	1e4b      	subs	r3, r1, #1
 801c476:	9303      	str	r3, [sp, #12]
 801c478:	9b08      	ldr	r3, [sp, #32]
 801c47a:	4423      	add	r3, r4
 801c47c:	9308      	str	r3, [sp, #32]
 801c47e:	9b07      	ldr	r3, [sp, #28]
 801c480:	464f      	mov	r7, r9
 801c482:	9902      	ldr	r1, [sp, #8]
 801c484:	2600      	movs	r6, #0
 801c486:	1a5b      	subs	r3, r3, r1
 801c488:	9307      	str	r3, [sp, #28]
 801c48a:	9b01      	ldr	r3, [sp, #4]
 801c48c:	f1c3 0320 	rsb	r3, r3, #32
 801c490:	930e      	str	r3, [sp, #56]	@ 0x38
 801c492:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801c494:	9b01      	ldr	r3, [sp, #4]
 801c496:	1a5b      	subs	r3, r3, r1
 801c498:	930a      	str	r3, [sp, #40]	@ 0x28
 801c49a:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 801c49e:	185b      	adds	r3, r3, r1
 801c4a0:	bf58      	it	pl
 801c4a2:	9902      	ldrpl	r1, [sp, #8]
 801c4a4:	9307      	str	r3, [sp, #28]
 801c4a6:	bf57      	itett	pl
 801c4a8:	1a5b      	subpl	r3, r3, r1
 801c4aa:	9903      	ldrmi	r1, [sp, #12]
 801c4ac:	9307      	strpl	r3, [sp, #28]
 801c4ae:	9b03      	ldrpl	r3, [sp, #12]
 801c4b0:	bf58      	it	pl
 801c4b2:	1c59      	addpl	r1, r3, #1
 801c4b4:	2a00      	cmp	r2, #0
 801c4b6:	4489      	add	r9, r1
 801c4b8:	ea4f 1a69 	mov.w	sl, r9, asr #5
 801c4bc:	db2e      	blt.n	801c51c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801c4be:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801c4c0:	4293      	cmp	r3, r2
 801c4c2:	dd2b      	ble.n	801c51c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801c4c4:	9c01      	ldr	r4, [sp, #4]
 801c4c6:	6905      	ldr	r5, [r0, #16]
 801c4c8:	46a0      	mov	r8, r4
 801c4ca:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801c4cc:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 801c4d0:	45a0      	cmp	r8, r4
 801c4d2:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 801c4d6:	f040 814c 	bne.w	801c772 <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 801c4da:	f9b5 1000 	ldrsh.w	r1, [r5]
 801c4de:	4551      	cmp	r1, sl
 801c4e0:	d103      	bne.n	801c4ea <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 801c4e2:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 801c4e6:	4291      	cmp	r1, r2
 801c4e8:	d018      	beq.n	801c51c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801c4ea:	ea5c 010e 	orrs.w	r1, ip, lr
 801c4ee:	d00f      	beq.n	801c510 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 801c4f0:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 801c4f4:	2900      	cmp	r1, #0
 801c4f6:	db0b      	blt.n	801c510 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 801c4f8:	428b      	cmp	r3, r1
 801c4fa:	dd09      	ble.n	801c510 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 801c4fc:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 801c500:	4299      	cmp	r1, r3
 801c502:	f101 0101 	add.w	r1, r1, #1
 801c506:	bf38      	it	cc
 801c508:	3508      	addcc	r5, #8
 801c50a:	6081      	str	r1, [r0, #8]
 801c50c:	bf38      	it	cc
 801c50e:	6105      	strcc	r5, [r0, #16]
 801c510:	6903      	ldr	r3, [r0, #16]
 801c512:	f8a3 a000 	strh.w	sl, [r3]
 801c516:	805a      	strh	r2, [r3, #2]
 801c518:	809e      	strh	r6, [r3, #4]
 801c51a:	80de      	strh	r6, [r3, #6]
 801c51c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c51e:	6901      	ldr	r1, [r0, #16]
 801c520:	441a      	add	r2, r3
 801c522:	88cc      	ldrh	r4, [r1, #6]
 801c524:	888b      	ldrh	r3, [r1, #4]
 801c526:	4323      	orrs	r3, r4
 801c528:	d010      	beq.n	801c54c <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801c52a:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 801c52e:	2c00      	cmp	r4, #0
 801c530:	db0c      	blt.n	801c54c <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801c532:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801c534:	429c      	cmp	r4, r3
 801c536:	da09      	bge.n	801c54c <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801c538:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 801c53c:	429c      	cmp	r4, r3
 801c53e:	f104 0401 	add.w	r4, r4, #1
 801c542:	bf38      	it	cc
 801c544:	3108      	addcc	r1, #8
 801c546:	6084      	str	r4, [r0, #8]
 801c548:	bf38      	it	cc
 801c54a:	6101      	strcc	r1, [r0, #16]
 801c54c:	6903      	ldr	r3, [r0, #16]
 801c54e:	464f      	mov	r7, r9
 801c550:	f8a3 a000 	strh.w	sl, [r3]
 801c554:	805a      	strh	r2, [r3, #2]
 801c556:	809e      	strh	r6, [r3, #4]
 801c558:	80de      	strh	r6, [r3, #6]
 801c55a:	9b06      	ldr	r3, [sp, #24]
 801c55c:	4293      	cmp	r3, r2
 801c55e:	d19c      	bne.n	801c49a <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 801c560:	9b01      	ldr	r3, [sp, #4]
 801c562:	6907      	ldr	r7, [r0, #16]
 801c564:	f1c3 0620 	rsb	r6, r3, #32
 801c568:	9b05      	ldr	r3, [sp, #20]
 801c56a:	ea4f 1e63 	mov.w	lr, r3, asr #5
 801c56e:	9b04      	ldr	r3, [sp, #16]
 801c570:	429e      	cmp	r6, r3
 801c572:	f040 81c7 	bne.w	801c904 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 801c576:	f9b7 3000 	ldrsh.w	r3, [r7]
 801c57a:	459e      	cmp	lr, r3
 801c57c:	d104      	bne.n	801c588 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 801c57e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c582:	429a      	cmp	r2, r3
 801c584:	f43f ae3a 	beq.w	801c1fc <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801c588:	88f9      	ldrh	r1, [r7, #6]
 801c58a:	88bb      	ldrh	r3, [r7, #4]
 801c58c:	430b      	orrs	r3, r1
 801c58e:	d010      	beq.n	801c5b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 801c590:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c594:	2b00      	cmp	r3, #0
 801c596:	db0c      	blt.n	801c5b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 801c598:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801c59a:	428b      	cmp	r3, r1
 801c59c:	da09      	bge.n	801c5b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 801c59e:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 801c5a2:	428b      	cmp	r3, r1
 801c5a4:	f103 0301 	add.w	r3, r3, #1
 801c5a8:	bf38      	it	cc
 801c5aa:	3708      	addcc	r7, #8
 801c5ac:	6083      	str	r3, [r0, #8]
 801c5ae:	bf38      	it	cc
 801c5b0:	6107      	strcc	r7, [r0, #16]
 801c5b2:	6903      	ldr	r3, [r0, #16]
 801c5b4:	f8a3 e000 	strh.w	lr, [r3]
 801c5b8:	e603      	b.n	801c1c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 801c5ba:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 801c5bc:	9c03      	ldr	r4, [sp, #12]
 801c5be:	42a2      	cmp	r2, r4
 801c5c0:	f6ff ae1c 	blt.w	801c1fc <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801c5c4:	9c06      	ldr	r4, [sp, #24]
 801c5c6:	42a2      	cmp	r2, r4
 801c5c8:	9c08      	ldr	r4, [sp, #32]
 801c5ca:	bfbc      	itt	lt
 801c5cc:	3201      	addlt	r2, #1
 801c5ce:	9206      	strlt	r2, [sp, #24]
 801c5d0:	f1c3 0220 	rsb	r2, r3, #32
 801c5d4:	4362      	muls	r2, r4
 801c5d6:	2401      	movs	r4, #1
 801c5d8:	940b      	str	r4, [sp, #44]	@ 0x2c
 801c5da:	2420      	movs	r4, #32
 801c5dc:	e6d6      	b.n	801c38c <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 801c5de:	ea4f 1861 	mov.w	r8, r1, asr #5
 801c5e2:	f009 021f 	and.w	r2, r9, #31
 801c5e6:	f001 011f 	and.w	r1, r1, #31
 801c5ea:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 801c5ee:	920c      	str	r2, [sp, #48]	@ 0x30
 801c5f0:	45b0      	cmp	r8, r6
 801c5f2:	9a01      	ldr	r2, [sp, #4]
 801c5f4:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 801c5f8:	eba2 0203 	sub.w	r2, r2, r3
 801c5fc:	d108      	bne.n	801c610 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 801c5fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c600:	4496      	add	lr, r2
 801c602:	4419      	add	r1, r3
 801c604:	f8a5 e004 	strh.w	lr, [r5, #4]
 801c608:	fb02 a101 	mla	r1, r2, r1, sl
 801c60c:	80e9      	strh	r1, [r5, #6]
 801c60e:	e6fa      	b.n	801c406 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 801c610:	2c00      	cmp	r4, #0
 801c612:	f2c0 80a7 	blt.w	801c764 <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 801c616:	2701      	movs	r7, #1
 801c618:	f1c1 0c20 	rsb	ip, r1, #32
 801c61c:	970a      	str	r7, [sp, #40]	@ 0x28
 801c61e:	2720      	movs	r7, #32
 801c620:	fb02 f20c 	mul.w	r2, r2, ip
 801c624:	9709      	str	r7, [sp, #36]	@ 0x24
 801c626:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801c628:	fb92 fcf4 	sdiv	ip, r2, r4
 801c62c:	fb04 221c 	mls	r2, r4, ip, r2
 801c630:	4439      	add	r1, r7
 801c632:	2a00      	cmp	r2, #0
 801c634:	bfbc      	itt	lt
 801c636:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 801c63a:	1912      	addlt	r2, r2, r4
 801c63c:	fb0c a101 	mla	r1, ip, r1, sl
 801c640:	44e6      	add	lr, ip
 801c642:	80e9      	strh	r1, [r5, #6]
 801c644:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801c646:	f8a5 e004 	strh.w	lr, [r5, #4]
 801c64a:	eb08 0501 	add.w	r5, r8, r1
 801c64e:	6901      	ldr	r1, [r0, #16]
 801c650:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 801c654:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 801c658:	ea58 070e 	orrs.w	r7, r8, lr
 801c65c:	d010      	beq.n	801c680 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 801c65e:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 801c662:	f1be 0f00 	cmp.w	lr, #0
 801c666:	db0b      	blt.n	801c680 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 801c668:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801c66a:	45be      	cmp	lr, r7
 801c66c:	da08      	bge.n	801c680 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 801c66e:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 801c672:	45be      	cmp	lr, r7
 801c674:	bf3c      	itt	cc
 801c676:	3108      	addcc	r1, #8
 801c678:	6101      	strcc	r1, [r0, #16]
 801c67a:	f10e 0101 	add.w	r1, lr, #1
 801c67e:	6081      	str	r1, [r0, #8]
 801c680:	6901      	ldr	r1, [r0, #16]
 801c682:	f04f 0e00 	mov.w	lr, #0
 801c686:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801c68a:	42ae      	cmp	r6, r5
 801c68c:	800d      	strh	r5, [r1, #0]
 801c68e:	4463      	add	r3, ip
 801c690:	f8a1 8002 	strh.w	r8, [r1, #2]
 801c694:	f8a1 e004 	strh.w	lr, [r1, #4]
 801c698:	f8a1 e006 	strh.w	lr, [r1, #6]
 801c69c:	d053      	beq.n	801c746 <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 801c69e:	9901      	ldr	r1, [sp, #4]
 801c6a0:	1b12      	subs	r2, r2, r4
 801c6a2:	1ac9      	subs	r1, r1, r3
 801c6a4:	4461      	add	r1, ip
 801c6a6:	0149      	lsls	r1, r1, #5
 801c6a8:	fb91 fef4 	sdiv	lr, r1, r4
 801c6ac:	fb04 111e 	mls	r1, r4, lr, r1
 801c6b0:	2900      	cmp	r1, #0
 801c6b2:	bfbc      	itt	lt
 801c6b4:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 801c6b8:	1909      	addlt	r1, r1, r4
 801c6ba:	f10e 0701 	add.w	r7, lr, #1
 801c6be:	970d      	str	r7, [sp, #52]	@ 0x34
 801c6c0:	f8d0 a010 	ldr.w	sl, [r0, #16]
 801c6c4:	1852      	adds	r2, r2, r1
 801c6c6:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801c6c8:	bf54      	ite	pl
 801c6ca:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 801c6ce:	46f4      	movmi	ip, lr
 801c6d0:	f8ba b004 	ldrh.w	fp, [sl, #4]
 801c6d4:	bf58      	it	pl
 801c6d6:	1b12      	subpl	r2, r2, r4
 801c6d8:	4463      	add	r3, ip
 801c6da:	443d      	add	r5, r7
 801c6dc:	44e3      	add	fp, ip
 801c6de:	f8aa b004 	strh.w	fp, [sl, #4]
 801c6e2:	f8ba b006 	ldrh.w	fp, [sl, #6]
 801c6e6:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 801c6ea:	f8aa b006 	strh.w	fp, [sl, #6]
 801c6ee:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801c6f2:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801c6f6:	f8bc a004 	ldrh.w	sl, [ip, #4]
 801c6fa:	ea5b 070a 	orrs.w	r7, fp, sl
 801c6fe:	d014      	beq.n	801c72a <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 801c700:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 801c704:	f1ba 0f00 	cmp.w	sl, #0
 801c708:	db0f      	blt.n	801c72a <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 801c70a:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801c70c:	45ba      	cmp	sl, r7
 801c70e:	da0c      	bge.n	801c72a <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 801c710:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 801c714:	45ba      	cmp	sl, r7
 801c716:	f10a 0a01 	add.w	sl, sl, #1
 801c71a:	bf38      	it	cc
 801c71c:	f10c 0c08 	addcc.w	ip, ip, #8
 801c720:	f8c0 a008 	str.w	sl, [r0, #8]
 801c724:	bf38      	it	cc
 801c726:	f8c0 c010 	strcc.w	ip, [r0, #16]
 801c72a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801c72e:	f04f 0700 	mov.w	r7, #0
 801c732:	42ae      	cmp	r6, r5
 801c734:	f8ac 5000 	strh.w	r5, [ip]
 801c738:	f8ac 8002 	strh.w	r8, [ip, #2]
 801c73c:	f8ac 7004 	strh.w	r7, [ip, #4]
 801c740:	f8ac 7006 	strh.w	r7, [ip, #6]
 801c744:	d1bc      	bne.n	801c6c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 801c746:	6904      	ldr	r4, [r0, #16]
 801c748:	9a01      	ldr	r2, [sp, #4]
 801c74a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801c74c:	1ad3      	subs	r3, r2, r3
 801c74e:	88a2      	ldrh	r2, [r4, #4]
 801c750:	3120      	adds	r1, #32
 801c752:	441a      	add	r2, r3
 801c754:	80a2      	strh	r2, [r4, #4]
 801c756:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c758:	1a89      	subs	r1, r1, r2
 801c75a:	88e2      	ldrh	r2, [r4, #6]
 801c75c:	fb03 2301 	mla	r3, r3, r1, r2
 801c760:	80e3      	strh	r3, [r4, #6]
 801c762:	e650      	b.n	801c406 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 801c764:	f04f 37ff 	mov.w	r7, #4294967295
 801c768:	434a      	muls	r2, r1
 801c76a:	4264      	negs	r4, r4
 801c76c:	970a      	str	r7, [sp, #40]	@ 0x28
 801c76e:	2700      	movs	r7, #0
 801c770:	e758      	b.n	801c624 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 801c772:	ea4f 1867 	mov.w	r8, r7, asr #5
 801c776:	f009 031f 	and.w	r3, r9, #31
 801c77a:	f007 071f 	and.w	r7, r7, #31
 801c77e:	fa1f fc8c 	uxth.w	ip, ip
 801c782:	45d0      	cmp	r8, sl
 801c784:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c786:	fa1f fe8e 	uxth.w	lr, lr
 801c78a:	d10a      	bne.n	801c7a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 801c78c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c78e:	449c      	add	ip, r3
 801c790:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c792:	441f      	add	r7, r3
 801c794:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c796:	f8a5 c004 	strh.w	ip, [r5, #4]
 801c79a:	fb03 e707 	mla	r7, r3, r7, lr
 801c79e:	80ef      	strh	r7, [r5, #6]
 801c7a0:	e6bc      	b.n	801c51c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801c7a2:	2900      	cmp	r1, #0
 801c7a4:	f2c0 80a6 	blt.w	801c8f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 801c7a8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801c7aa:	f1c7 0320 	rsb	r3, r7, #32
 801c7ae:	4363      	muls	r3, r4
 801c7b0:	2401      	movs	r4, #1
 801c7b2:	940d      	str	r4, [sp, #52]	@ 0x34
 801c7b4:	2420      	movs	r4, #32
 801c7b6:	940c      	str	r4, [sp, #48]	@ 0x30
 801c7b8:	fb93 f4f1 	sdiv	r4, r3, r1
 801c7bc:	fb01 3b14 	mls	fp, r1, r4, r3
 801c7c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c7c2:	f1bb 0f00 	cmp.w	fp, #0
 801c7c6:	441f      	add	r7, r3
 801c7c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c7ca:	bfbc      	itt	lt
 801c7cc:	f104 34ff 	addlt.w	r4, r4, #4294967295
 801c7d0:	448b      	addlt	fp, r1
 801c7d2:	fb04 e707 	mla	r7, r4, r7, lr
 801c7d6:	44a4      	add	ip, r4
 801c7d8:	80ef      	strh	r7, [r5, #6]
 801c7da:	f8a5 c004 	strh.w	ip, [r5, #4]
 801c7de:	eb08 0503 	add.w	r5, r8, r3
 801c7e2:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801c7e6:	f8bc e006 	ldrh.w	lr, [ip, #6]
 801c7ea:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801c7ee:	ea5e 0307 	orrs.w	r3, lr, r7
 801c7f2:	d011      	beq.n	801c818 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 801c7f4:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 801c7f8:	f1be 0f00 	cmp.w	lr, #0
 801c7fc:	db0c      	blt.n	801c818 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 801c7fe:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801c800:	45be      	cmp	lr, r7
 801c802:	da09      	bge.n	801c818 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 801c804:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 801c808:	45be      	cmp	lr, r7
 801c80a:	bf3c      	itt	cc
 801c80c:	f10c 0708 	addcc.w	r7, ip, #8
 801c810:	6107      	strcc	r7, [r0, #16]
 801c812:	f10e 0701 	add.w	r7, lr, #1
 801c816:	6087      	str	r7, [r0, #8]
 801c818:	6907      	ldr	r7, [r0, #16]
 801c81a:	b213      	sxth	r3, r2
 801c81c:	4555      	cmp	r5, sl
 801c81e:	9310      	str	r3, [sp, #64]	@ 0x40
 801c820:	807b      	strh	r3, [r7, #2]
 801c822:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c824:	803d      	strh	r5, [r7, #0]
 801c826:	80be      	strh	r6, [r7, #4]
 801c828:	eb04 0c03 	add.w	ip, r4, r3
 801c82c:	80fe      	strh	r6, [r7, #6]
 801c82e:	d050      	beq.n	801c8d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 801c830:	9b01      	ldr	r3, [sp, #4]
 801c832:	eba3 070c 	sub.w	r7, r3, ip
 801c836:	ebab 0301 	sub.w	r3, fp, r1
 801c83a:	443c      	add	r4, r7
 801c83c:	9309      	str	r3, [sp, #36]	@ 0x24
 801c83e:	0164      	lsls	r4, r4, #5
 801c840:	fb94 f8f1 	sdiv	r8, r4, r1
 801c844:	fb01 4418 	mls	r4, r1, r8, r4
 801c848:	2c00      	cmp	r4, #0
 801c84a:	bfbc      	itt	lt
 801c84c:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801c850:	1864      	addlt	r4, r4, r1
 801c852:	f108 0701 	add.w	r7, r8, #1
 801c856:	9711      	str	r7, [sp, #68]	@ 0x44
 801c858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c85a:	f8d0 e010 	ldr.w	lr, [r0, #16]
 801c85e:	191b      	adds	r3, r3, r4
 801c860:	f8be b004 	ldrh.w	fp, [lr, #4]
 801c864:	bf54      	ite	pl
 801c866:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 801c868:	4647      	movmi	r7, r8
 801c86a:	9309      	str	r3, [sp, #36]	@ 0x24
 801c86c:	bf58      	it	pl
 801c86e:	1a5b      	subpl	r3, r3, r1
 801c870:	44bb      	add	fp, r7
 801c872:	44bc      	add	ip, r7
 801c874:	bf58      	it	pl
 801c876:	9309      	strpl	r3, [sp, #36]	@ 0x24
 801c878:	f8ae b004 	strh.w	fp, [lr, #4]
 801c87c:	f8be b006 	ldrh.w	fp, [lr, #6]
 801c880:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801c884:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801c886:	f8ae b006 	strh.w	fp, [lr, #6]
 801c88a:	443d      	add	r5, r7
 801c88c:	f8d0 e010 	ldr.w	lr, [r0, #16]
 801c890:	f8be b006 	ldrh.w	fp, [lr, #6]
 801c894:	f8be 7004 	ldrh.w	r7, [lr, #4]
 801c898:	ea5b 0307 	orrs.w	r3, fp, r7
 801c89c:	d011      	beq.n	801c8c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 801c89e:	f9be b002 	ldrsh.w	fp, [lr, #2]
 801c8a2:	f1bb 0f00 	cmp.w	fp, #0
 801c8a6:	db0c      	blt.n	801c8c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 801c8a8:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801c8aa:	45bb      	cmp	fp, r7
 801c8ac:	da09      	bge.n	801c8c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 801c8ae:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801c8b2:	45bb      	cmp	fp, r7
 801c8b4:	bf3c      	itt	cc
 801c8b6:	f10e 0708 	addcc.w	r7, lr, #8
 801c8ba:	6107      	strcc	r7, [r0, #16]
 801c8bc:	f10b 0701 	add.w	r7, fp, #1
 801c8c0:	6087      	str	r7, [r0, #8]
 801c8c2:	6907      	ldr	r7, [r0, #16]
 801c8c4:	4555      	cmp	r5, sl
 801c8c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c8c8:	803d      	strh	r5, [r7, #0]
 801c8ca:	807b      	strh	r3, [r7, #2]
 801c8cc:	80be      	strh	r6, [r7, #4]
 801c8ce:	80fe      	strh	r6, [r7, #6]
 801c8d0:	d1c2      	bne.n	801c858 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 801c8d2:	9b01      	ldr	r3, [sp, #4]
 801c8d4:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801c8d6:	eba3 0c0c 	sub.w	ip, r3, ip
 801c8da:	6903      	ldr	r3, [r0, #16]
 801c8dc:	3720      	adds	r7, #32
 801c8de:	8899      	ldrh	r1, [r3, #4]
 801c8e0:	4461      	add	r1, ip
 801c8e2:	8099      	strh	r1, [r3, #4]
 801c8e4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801c8e6:	1a7f      	subs	r7, r7, r1
 801c8e8:	88d9      	ldrh	r1, [r3, #6]
 801c8ea:	fb0c 1c07 	mla	ip, ip, r7, r1
 801c8ee:	f8a3 c006 	strh.w	ip, [r3, #6]
 801c8f2:	e613      	b.n	801c51c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801c8f4:	f04f 34ff 	mov.w	r4, #4294967295
 801c8f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c8fa:	4249      	negs	r1, r1
 801c8fc:	940d      	str	r4, [sp, #52]	@ 0x34
 801c8fe:	2400      	movs	r4, #0
 801c900:	437b      	muls	r3, r7
 801c902:	e758      	b.n	801c7b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 801c904:	9905      	ldr	r1, [sp, #20]
 801c906:	ea4f 1b69 	mov.w	fp, r9, asr #5
 801c90a:	f009 0c1f 	and.w	ip, r9, #31
 801c90e:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 801c912:	f001 011f 	and.w	r1, r1, #31
 801c916:	45f3      	cmp	fp, lr
 801c918:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 801c91c:	9102      	str	r1, [sp, #8]
 801c91e:	9904      	ldr	r1, [sp, #16]
 801c920:	eba1 0406 	sub.w	r4, r1, r6
 801c924:	d108      	bne.n	801c938 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 801c926:	9b02      	ldr	r3, [sp, #8]
 801c928:	44a0      	add	r8, r4
 801c92a:	449c      	add	ip, r3
 801c92c:	f8a7 8004 	strh.w	r8, [r7, #4]
 801c930:	fb04 a40c 	mla	r4, r4, ip, sl
 801c934:	80fc      	strh	r4, [r7, #6]
 801c936:	e461      	b.n	801c1fc <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801c938:	9905      	ldr	r1, [sp, #20]
 801c93a:	ebb1 0109 	subs.w	r1, r1, r9
 801c93e:	bf51      	iteee	pl
 801c940:	f1cc 0520 	rsbpl	r5, ip, #32
 801c944:	fb04 f40c 	mulmi.w	r4, r4, ip
 801c948:	4249      	negmi	r1, r1
 801c94a:	2500      	movmi	r5, #0
 801c94c:	bf5d      	ittte	pl
 801c94e:	436c      	mulpl	r4, r5
 801c950:	2520      	movpl	r5, #32
 801c952:	f04f 0901 	movpl.w	r9, #1
 801c956:	f04f 39ff 	movmi.w	r9, #4294967295
 801c95a:	9501      	str	r5, [sp, #4]
 801c95c:	9b01      	ldr	r3, [sp, #4]
 801c95e:	fb94 f5f1 	sdiv	r5, r4, r1
 801c962:	fb01 4415 	mls	r4, r1, r5, r4
 801c966:	449c      	add	ip, r3
 801c968:	eb0b 0309 	add.w	r3, fp, r9
 801c96c:	2c00      	cmp	r4, #0
 801c96e:	bfbc      	itt	lt
 801c970:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801c974:	1864      	addlt	r4, r4, r1
 801c976:	44a8      	add	r8, r5
 801c978:	fb05 ac0c 	mla	ip, r5, ip, sl
 801c97c:	f8a7 8004 	strh.w	r8, [r7, #4]
 801c980:	f8a7 c006 	strh.w	ip, [r7, #6]
 801c984:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801c988:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 801c98c:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801c990:	ea58 0707 	orrs.w	r7, r8, r7
 801c994:	d011      	beq.n	801c9ba <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801c996:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 801c99a:	f1b8 0f00 	cmp.w	r8, #0
 801c99e:	db0c      	blt.n	801c9ba <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801c9a0:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801c9a2:	45b8      	cmp	r8, r7
 801c9a4:	da09      	bge.n	801c9ba <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801c9a6:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 801c9aa:	45b8      	cmp	r8, r7
 801c9ac:	bf3c      	itt	cc
 801c9ae:	f10c 0708 	addcc.w	r7, ip, #8
 801c9b2:	6107      	strcc	r7, [r0, #16]
 801c9b4:	f108 0701 	add.w	r7, r8, #1
 801c9b8:	6087      	str	r7, [r0, #8]
 801c9ba:	6907      	ldr	r7, [r0, #16]
 801c9bc:	f04f 0c00 	mov.w	ip, #0
 801c9c0:	b212      	sxth	r2, r2
 801c9c2:	459e      	cmp	lr, r3
 801c9c4:	803b      	strh	r3, [r7, #0]
 801c9c6:	442e      	add	r6, r5
 801c9c8:	807a      	strh	r2, [r7, #2]
 801c9ca:	f8a7 c004 	strh.w	ip, [r7, #4]
 801c9ce:	f8a7 c006 	strh.w	ip, [r7, #6]
 801c9d2:	d04b      	beq.n	801ca6c <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 801c9d4:	9f04      	ldr	r7, [sp, #16]
 801c9d6:	1a64      	subs	r4, r4, r1
 801c9d8:	f04f 0a00 	mov.w	sl, #0
 801c9dc:	1bbf      	subs	r7, r7, r6
 801c9de:	443d      	add	r5, r7
 801c9e0:	016d      	lsls	r5, r5, #5
 801c9e2:	fb95 f8f1 	sdiv	r8, r5, r1
 801c9e6:	fb01 5518 	mls	r5, r1, r8, r5
 801c9ea:	4565      	cmp	r5, ip
 801c9ec:	bfbc      	itt	lt
 801c9ee:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801c9f2:	186d      	addlt	r5, r5, r1
 801c9f4:	f108 0701 	add.w	r7, r8, #1
 801c9f8:	9703      	str	r7, [sp, #12]
 801c9fa:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801c9fe:	1964      	adds	r4, r4, r5
 801ca00:	444b      	add	r3, r9
 801ca02:	bf54      	ite	pl
 801ca04:	9f03      	ldrpl	r7, [sp, #12]
 801ca06:	4647      	movmi	r7, r8
 801ca08:	f8bc b004 	ldrh.w	fp, [ip, #4]
 801ca0c:	bf58      	it	pl
 801ca0e:	1a64      	subpl	r4, r4, r1
 801ca10:	443e      	add	r6, r7
 801ca12:	44bb      	add	fp, r7
 801ca14:	f8ac b004 	strh.w	fp, [ip, #4]
 801ca18:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801ca1c:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801ca20:	f8ac b006 	strh.w	fp, [ip, #6]
 801ca24:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801ca28:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801ca2c:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801ca30:	ea5b 0707 	orrs.w	r7, fp, r7
 801ca34:	d011      	beq.n	801ca5a <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801ca36:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 801ca3a:	f1bb 0f00 	cmp.w	fp, #0
 801ca3e:	db0c      	blt.n	801ca5a <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801ca40:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801ca42:	45bb      	cmp	fp, r7
 801ca44:	da09      	bge.n	801ca5a <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801ca46:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801ca4a:	45bb      	cmp	fp, r7
 801ca4c:	bf3c      	itt	cc
 801ca4e:	f10c 0708 	addcc.w	r7, ip, #8
 801ca52:	6107      	strcc	r7, [r0, #16]
 801ca54:	f10b 0701 	add.w	r7, fp, #1
 801ca58:	6087      	str	r7, [r0, #8]
 801ca5a:	6907      	ldr	r7, [r0, #16]
 801ca5c:	459e      	cmp	lr, r3
 801ca5e:	803b      	strh	r3, [r7, #0]
 801ca60:	807a      	strh	r2, [r7, #2]
 801ca62:	f8a7 a004 	strh.w	sl, [r7, #4]
 801ca66:	f8a7 a006 	strh.w	sl, [r7, #6]
 801ca6a:	d1c6      	bne.n	801c9fa <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 801ca6c:	9b04      	ldr	r3, [sp, #16]
 801ca6e:	1b9e      	subs	r6, r3, r6
 801ca70:	6903      	ldr	r3, [r0, #16]
 801ca72:	889a      	ldrh	r2, [r3, #4]
 801ca74:	4432      	add	r2, r6
 801ca76:	809a      	strh	r2, [r3, #4]
 801ca78:	9a02      	ldr	r2, [sp, #8]
 801ca7a:	f102 0c20 	add.w	ip, r2, #32
 801ca7e:	9a01      	ldr	r2, [sp, #4]
 801ca80:	ebac 0c02 	sub.w	ip, ip, r2
 801ca84:	88da      	ldrh	r2, [r3, #6]
 801ca86:	fb06 260c 	mla	r6, r6, ip, r2
 801ca8a:	80de      	strh	r6, [r3, #6]
 801ca8c:	f7ff bbb6 	b.w	801c1fc <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

0801ca90 <_ZN8touchgfx7Outline6lineToEii>:
 801ca90:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801ca92:	079b      	lsls	r3, r3, #30
 801ca94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ca96:	460e      	mov	r6, r1
 801ca98:	4615      	mov	r5, r2
 801ca9a:	d511      	bpl.n	801cac0 <_ZN8touchgfx7Outline6lineToEii+0x30>
 801ca9c:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 801caa0:	ea86 0701 	eor.w	r7, r6, r1
 801caa4:	ea85 0302 	eor.w	r3, r5, r2
 801caa8:	433b      	orrs	r3, r7
 801caaa:	d009      	beq.n	801cac0 <_ZN8touchgfx7Outline6lineToEii+0x30>
 801caac:	4633      	mov	r3, r6
 801caae:	9500      	str	r5, [sp, #0]
 801cab0:	f7ff fb4c 	bl	801c14c <_ZN8touchgfx7Outline10renderLineEiiii>
 801cab4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801cab6:	f043 0301 	orr.w	r3, r3, #1
 801caba:	e9c0 6505 	strd	r6, r5, [r0, #20]
 801cabe:	6243      	str	r3, [r0, #36]	@ 0x24
 801cac0:	b003      	add	sp, #12
 801cac2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cac4 <_ZN8touchgfx7Outline6moveToEii>:
 801cac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cac6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801cac8:	4615      	mov	r5, r2
 801caca:	4604      	mov	r4, r0
 801cacc:	460e      	mov	r6, r1
 801cace:	079a      	lsls	r2, r3, #30
 801cad0:	d401      	bmi.n	801cad6 <_ZN8touchgfx7Outline6moveToEii+0x12>
 801cad2:	f7ff fb07 	bl	801c0e4 <_ZN8touchgfx7Outline5resetEv>
 801cad6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801cad8:	07db      	lsls	r3, r3, #31
 801cada:	d504      	bpl.n	801cae6 <_ZN8touchgfx7Outline6moveToEii+0x22>
 801cadc:	4620      	mov	r0, r4
 801cade:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 801cae2:	f7ff ffd5 	bl	801ca90 <_ZN8touchgfx7Outline6lineToEii>
 801cae6:	6923      	ldr	r3, [r4, #16]
 801cae8:	1170      	asrs	r0, r6, #5
 801caea:	1169      	asrs	r1, r5, #5
 801caec:	f9b3 2000 	ldrsh.w	r2, [r3]
 801caf0:	4290      	cmp	r0, r2
 801caf2:	d103      	bne.n	801cafc <_ZN8touchgfx7Outline6moveToEii+0x38>
 801caf4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801caf8:	4291      	cmp	r1, r2
 801cafa:	d01a      	beq.n	801cb32 <_ZN8touchgfx7Outline6moveToEii+0x6e>
 801cafc:	88df      	ldrh	r7, [r3, #6]
 801cafe:	889a      	ldrh	r2, [r3, #4]
 801cb00:	433a      	orrs	r2, r7
 801cb02:	d010      	beq.n	801cb26 <_ZN8touchgfx7Outline6moveToEii+0x62>
 801cb04:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801cb08:	2a00      	cmp	r2, #0
 801cb0a:	db0c      	blt.n	801cb26 <_ZN8touchgfx7Outline6moveToEii+0x62>
 801cb0c:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801cb0e:	42ba      	cmp	r2, r7
 801cb10:	da09      	bge.n	801cb26 <_ZN8touchgfx7Outline6moveToEii+0x62>
 801cb12:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 801cb16:	42ba      	cmp	r2, r7
 801cb18:	f102 0201 	add.w	r2, r2, #1
 801cb1c:	bf38      	it	cc
 801cb1e:	3308      	addcc	r3, #8
 801cb20:	60a2      	str	r2, [r4, #8]
 801cb22:	bf38      	it	cc
 801cb24:	6123      	strcc	r3, [r4, #16]
 801cb26:	6923      	ldr	r3, [r4, #16]
 801cb28:	2200      	movs	r2, #0
 801cb2a:	8018      	strh	r0, [r3, #0]
 801cb2c:	8059      	strh	r1, [r3, #2]
 801cb2e:	809a      	strh	r2, [r3, #4]
 801cb30:	80da      	strh	r2, [r3, #6]
 801cb32:	6166      	str	r6, [r4, #20]
 801cb34:	6225      	str	r5, [r4, #32]
 801cb36:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801cb3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801cb3c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 801cb3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cb40:	b0d0      	sub	sp, #320	@ 0x140
 801cb42:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801cb46:	466c      	mov	r4, sp
 801cb48:	4627      	mov	r7, r4
 801cb4a:	1a0d      	subs	r5, r1, r0
 801cb4c:	f100 0308 	add.w	r3, r0, #8
 801cb50:	2d48      	cmp	r5, #72	@ 0x48
 801cb52:	f340 80d5 	ble.w	801cd00 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 801cb56:	112d      	asrs	r5, r5, #4
 801cb58:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 801cb5c:	f9b0 9000 	ldrsh.w	r9, [r0]
 801cb60:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 801cb64:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 801cb68:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801cb6c:	6816      	ldr	r6, [r2, #0]
 801cb6e:	6006      	str	r6, [r0, #0]
 801cb70:	6856      	ldr	r6, [r2, #4]
 801cb72:	6046      	str	r6, [r0, #4]
 801cb74:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801cb78:	f8a2 8002 	strh.w	r8, [r2, #2]
 801cb7c:	f8a2 e004 	strh.w	lr, [r2, #4]
 801cb80:	f8a2 c006 	strh.w	ip, [r2, #6]
 801cb84:	f1a1 0208 	sub.w	r2, r1, #8
 801cb88:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 801cb8c:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 801cb90:	4565      	cmp	r5, ip
 801cb92:	db06      	blt.n	801cba2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 801cb94:	d119      	bne.n	801cbca <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 801cb96:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 801cb9a:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 801cb9e:	42ae      	cmp	r6, r5
 801cba0:	dd13      	ble.n	801cbca <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 801cba2:	460e      	mov	r6, r1
 801cba4:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 801cba8:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 801cbac:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 801cbb0:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 801cbb4:	601d      	str	r5, [r3, #0]
 801cbb6:	6875      	ldr	r5, [r6, #4]
 801cbb8:	605d      	str	r5, [r3, #4]
 801cbba:	f821 9c08 	strh.w	r9, [r1, #-8]
 801cbbe:	f821 cc06 	strh.w	ip, [r1, #-6]
 801cbc2:	f821 8c04 	strh.w	r8, [r1, #-4]
 801cbc6:	f821 ec02 	strh.w	lr, [r1, #-2]
 801cbca:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801cbce:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 801cbd2:	42ae      	cmp	r6, r5
 801cbd4:	db06      	blt.n	801cbe4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 801cbd6:	d116      	bne.n	801cc06 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 801cbd8:	f9b0 c000 	ldrsh.w	ip, [r0]
 801cbdc:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 801cbe0:	45ac      	cmp	ip, r5
 801cbe2:	da10      	bge.n	801cc06 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 801cbe4:	681d      	ldr	r5, [r3, #0]
 801cbe6:	f9b0 8000 	ldrsh.w	r8, [r0]
 801cbea:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801cbee:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 801cbf2:	6005      	str	r5, [r0, #0]
 801cbf4:	685d      	ldr	r5, [r3, #4]
 801cbf6:	f8a0 8008 	strh.w	r8, [r0, #8]
 801cbfa:	6045      	str	r5, [r0, #4]
 801cbfc:	8146      	strh	r6, [r0, #10]
 801cbfe:	f8a0 e00c 	strh.w	lr, [r0, #12]
 801cc02:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801cc06:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 801cc0a:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801cc0e:	4565      	cmp	r5, ip
 801cc10:	db06      	blt.n	801cc20 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 801cc12:	d119      	bne.n	801cc48 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801cc14:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 801cc18:	f9b0 5000 	ldrsh.w	r5, [r0]
 801cc1c:	42ae      	cmp	r6, r5
 801cc1e:	da13      	bge.n	801cc48 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801cc20:	460e      	mov	r6, r1
 801cc22:	f9b0 9000 	ldrsh.w	r9, [r0]
 801cc26:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 801cc2a:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 801cc2e:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 801cc32:	6005      	str	r5, [r0, #0]
 801cc34:	6875      	ldr	r5, [r6, #4]
 801cc36:	6045      	str	r5, [r0, #4]
 801cc38:	f821 9c08 	strh.w	r9, [r1, #-8]
 801cc3c:	f821 cc06 	strh.w	ip, [r1, #-6]
 801cc40:	f821 8c04 	strh.w	r8, [r1, #-4]
 801cc44:	f821 ec02 	strh.w	lr, [r1, #-2]
 801cc48:	3308      	adds	r3, #8
 801cc4a:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801cc4e:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 801cc52:	45e6      	cmp	lr, ip
 801cc54:	dbf8      	blt.n	801cc48 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801cc56:	d105      	bne.n	801cc64 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801cc58:	f9b3 6000 	ldrsh.w	r6, [r3]
 801cc5c:	f9b0 5000 	ldrsh.w	r5, [r0]
 801cc60:	42ae      	cmp	r6, r5
 801cc62:	dbf1      	blt.n	801cc48 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801cc64:	4615      	mov	r5, r2
 801cc66:	3a08      	subs	r2, #8
 801cc68:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 801cc6c:	45b4      	cmp	ip, r6
 801cc6e:	dbf9      	blt.n	801cc64 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801cc70:	d105      	bne.n	801cc7e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 801cc72:	f9b0 8000 	ldrsh.w	r8, [r0]
 801cc76:	f9b2 6000 	ldrsh.w	r6, [r2]
 801cc7a:	45b0      	cmp	r8, r6
 801cc7c:	dbf2      	blt.n	801cc64 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801cc7e:	4293      	cmp	r3, r2
 801cc80:	f1a5 0608 	sub.w	r6, r5, #8
 801cc84:	d816      	bhi.n	801ccb4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 801cc86:	f8d6 c000 	ldr.w	ip, [r6]
 801cc8a:	f9b3 a000 	ldrsh.w	sl, [r3]
 801cc8e:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 801cc92:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 801cc96:	f8c3 c000 	str.w	ip, [r3]
 801cc9a:	f8d6 c004 	ldr.w	ip, [r6, #4]
 801cc9e:	f8c3 c004 	str.w	ip, [r3, #4]
 801cca2:	f825 ac08 	strh.w	sl, [r5, #-8]
 801cca6:	f825 ec06 	strh.w	lr, [r5, #-6]
 801ccaa:	f825 9c04 	strh.w	r9, [r5, #-4]
 801ccae:	f825 8c02 	strh.w	r8, [r5, #-2]
 801ccb2:	e7c9      	b.n	801cc48 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801ccb4:	f8d6 e000 	ldr.w	lr, [r6]
 801ccb8:	f9b0 a000 	ldrsh.w	sl, [r0]
 801ccbc:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 801ccc0:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 801ccc4:	f8c0 e000 	str.w	lr, [r0]
 801ccc8:	f8d6 e004 	ldr.w	lr, [r6, #4]
 801cccc:	1a16      	subs	r6, r2, r0
 801ccce:	f8c0 e004 	str.w	lr, [r0, #4]
 801ccd2:	f825 ac08 	strh.w	sl, [r5, #-8]
 801ccd6:	f825 cc06 	strh.w	ip, [r5, #-6]
 801ccda:	f825 9c04 	strh.w	r9, [r5, #-4]
 801ccde:	f825 8c02 	strh.w	r8, [r5, #-2]
 801cce2:	1acd      	subs	r5, r1, r3
 801cce4:	10ed      	asrs	r5, r5, #3
 801cce6:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 801ccea:	bfb5      	itete	lt
 801ccec:	e9c4 0200 	strdlt	r0, r2, [r4]
 801ccf0:	e9c4 3100 	strdge	r3, r1, [r4]
 801ccf4:	460a      	movlt	r2, r1
 801ccf6:	4603      	movge	r3, r0
 801ccf8:	3408      	adds	r4, #8
 801ccfa:	4618      	mov	r0, r3
 801ccfc:	4611      	mov	r1, r2
 801ccfe:	e724      	b.n	801cb4a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 801cd00:	4299      	cmp	r1, r3
 801cd02:	d927      	bls.n	801cd54 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 801cd04:	f1a3 0210 	sub.w	r2, r3, #16
 801cd08:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 801cd0c:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 801cd10:	45ac      	cmp	ip, r5
 801cd12:	db06      	blt.n	801cd22 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 801cd14:	d11c      	bne.n	801cd50 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 801cd16:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 801cd1a:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 801cd1e:	42ae      	cmp	r6, r5
 801cd20:	da16      	bge.n	801cd50 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 801cd22:	4615      	mov	r5, r2
 801cd24:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 801cd28:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 801cd2c:	3a08      	subs	r2, #8
 801cd2e:	f855 6f08 	ldr.w	r6, [r5, #8]!
 801cd32:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 801cd36:	6196      	str	r6, [r2, #24]
 801cd38:	42a8      	cmp	r0, r5
 801cd3a:	686e      	ldr	r6, [r5, #4]
 801cd3c:	f8a2 9010 	strh.w	r9, [r2, #16]
 801cd40:	61d6      	str	r6, [r2, #28]
 801cd42:	f8a2 c012 	strh.w	ip, [r2, #18]
 801cd46:	f8a2 8014 	strh.w	r8, [r2, #20]
 801cd4a:	f8a2 e016 	strh.w	lr, [r2, #22]
 801cd4e:	d1db      	bne.n	801cd08 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 801cd50:	3308      	adds	r3, #8
 801cd52:	e7d5      	b.n	801cd00 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 801cd54:	42bc      	cmp	r4, r7
 801cd56:	d903      	bls.n	801cd60 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 801cd58:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 801cd5c:	3c08      	subs	r4, #8
 801cd5e:	e6f4      	b.n	801cb4a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 801cd60:	b050      	add	sp, #320	@ 0x140
 801cd62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801cd66 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 801cd66:	b510      	push	{r4, lr}
 801cd68:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801cd6a:	4604      	mov	r4, r0
 801cd6c:	07da      	lsls	r2, r3, #31
 801cd6e:	d507      	bpl.n	801cd80 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 801cd70:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 801cd74:	f7ff fe8c 	bl	801ca90 <_ZN8touchgfx7Outline6lineToEii>
 801cd78:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801cd7a:	f023 0301 	bic.w	r3, r3, #1
 801cd7e:	6243      	str	r3, [r0, #36]	@ 0x24
 801cd80:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801cd82:	079b      	lsls	r3, r3, #30
 801cd84:	d521      	bpl.n	801cdca <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 801cd86:	6923      	ldr	r3, [r4, #16]
 801cd88:	88d9      	ldrh	r1, [r3, #6]
 801cd8a:	889a      	ldrh	r2, [r3, #4]
 801cd8c:	430a      	orrs	r2, r1
 801cd8e:	d010      	beq.n	801cdb2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801cd90:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801cd94:	2a00      	cmp	r2, #0
 801cd96:	db0c      	blt.n	801cdb2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801cd98:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801cd9a:	428a      	cmp	r2, r1
 801cd9c:	da09      	bge.n	801cdb2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801cd9e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 801cda2:	4291      	cmp	r1, r2
 801cda4:	f102 0201 	add.w	r2, r2, #1
 801cda8:	bf88      	it	hi
 801cdaa:	3308      	addhi	r3, #8
 801cdac:	60a2      	str	r2, [r4, #8]
 801cdae:	bf88      	it	hi
 801cdb0:	6123      	strhi	r3, [r4, #16]
 801cdb2:	68a1      	ldr	r1, [r4, #8]
 801cdb4:	b129      	cbz	r1, 801cdc2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 801cdb6:	6863      	ldr	r3, [r4, #4]
 801cdb8:	4299      	cmp	r1, r3
 801cdba:	d802      	bhi.n	801cdc2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 801cdbc:	68e0      	ldr	r0, [r4, #12]
 801cdbe:	f7ff febd 	bl	801cb3c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 801cdc2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801cdc4:	f023 0302 	bic.w	r3, r3, #2
 801cdc8:	6263      	str	r3, [r4, #36]	@ 0x24
 801cdca:	68e0      	ldr	r0, [r4, #12]
 801cdcc:	bd10      	pop	{r4, pc}
	...

0801cdd0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 801cdd0:	4b01      	ldr	r3, [pc, #4]	@ (801cdd8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 801cdd2:	6818      	ldr	r0, [r3, #0]
 801cdd4:	4770      	bx	lr
 801cdd6:	bf00      	nop
 801cdd8:	24034234 	.word	0x24034234

0801cddc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 801cddc:	4b01      	ldr	r3, [pc, #4]	@ (801cde4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801cdde:	6818      	ldr	r0, [r3, #0]
 801cde0:	4770      	bx	lr
 801cde2:	bf00      	nop
 801cde4:	24034238 	.word	0x24034238

0801cde8 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 801cde8:	b510      	push	{r4, lr}
 801cdea:	6803      	ldr	r3, [r0, #0]
 801cdec:	460c      	mov	r4, r1
 801cdee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cdf0:	4798      	blx	r3
 801cdf2:	1b03      	subs	r3, r0, r4
 801cdf4:	4258      	negs	r0, r3
 801cdf6:	4158      	adcs	r0, r3
 801cdf8:	bd10      	pop	{r4, pc}
	...

0801cdfc <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801cdfc:	4b01      	ldr	r3, [pc, #4]	@ (801ce04 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801cdfe:	6019      	str	r1, [r3, #0]
 801ce00:	4770      	bx	lr
 801ce02:	bf00      	nop
 801ce04:	2403423c 	.word	0x2403423c

0801ce08 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801ce08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce0c:	4696      	mov	lr, r2
 801ce0e:	b097      	sub	sp, #92	@ 0x5c
 801ce10:	4605      	mov	r5, r0
 801ce12:	4614      	mov	r4, r2
 801ce14:	460e      	mov	r6, r1
 801ce16:	461f      	mov	r7, r3
 801ce18:	f10d 0c1c 	add.w	ip, sp, #28
 801ce1c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 801ce20:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 801ce24:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 801ce28:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ce2c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ce30:	f8de 3000 	ldr.w	r3, [lr]
 801ce34:	f104 0e14 	add.w	lr, r4, #20
 801ce38:	f8cc 3000 	str.w	r3, [ip]
 801ce3c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801ce40:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ce44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ce48:	f8de 3000 	ldr.w	r3, [lr]
 801ce4c:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 801ce50:	f8cc 3000 	str.w	r3, [ip]
 801ce54:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801ce58:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ce5c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ce60:	f8de 3000 	ldr.w	r3, [lr]
 801ce64:	4631      	mov	r1, r6
 801ce66:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801ce68:	4628      	mov	r0, r5
 801ce6a:	f8cc 3000 	str.w	r3, [ip]
 801ce6e:	682b      	ldr	r3, [r5, #0]
 801ce70:	9201      	str	r2, [sp, #4]
 801ce72:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801ce74:	f8cd 8008 	str.w	r8, [sp, #8]
 801ce78:	9200      	str	r2, [sp, #0]
 801ce7a:	aa07      	add	r2, sp, #28
 801ce7c:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801ce80:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 801ce84:	463b      	mov	r3, r7
 801ce86:	47d8      	blx	fp
 801ce88:	46a6      	mov	lr, r4
 801ce8a:	f10d 0c1c 	add.w	ip, sp, #28
 801ce8e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ce92:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ce96:	f8de 3000 	ldr.w	r3, [lr]
 801ce9a:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 801ce9e:	343c      	adds	r4, #60	@ 0x3c
 801cea0:	f8cc 3000 	str.w	r3, [ip]
 801cea4:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801cea8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ceac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ceb0:	f8de 3000 	ldr.w	r3, [lr]
 801ceb4:	f8cc 3000 	str.w	r3, [ip]
 801ceb8:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801cebc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801cebe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801cec2:	6823      	ldr	r3, [r4, #0]
 801cec4:	4631      	mov	r1, r6
 801cec6:	4628      	mov	r0, r5
 801cec8:	f8cc 3000 	str.w	r3, [ip]
 801cecc:	682b      	ldr	r3, [r5, #0]
 801cece:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801ced2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801ced4:	f8cd 8008 	str.w	r8, [sp, #8]
 801ced8:	9201      	str	r2, [sp, #4]
 801ceda:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801cedc:	9200      	str	r2, [sp, #0]
 801cede:	aa07      	add	r2, sp, #28
 801cee0:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 801cee2:	463b      	mov	r3, r7
 801cee4:	47a0      	blx	r4
 801cee6:	b017      	add	sp, #92	@ 0x5c
 801cee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ceec <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801ceec:	2000      	movs	r0, #0
 801ceee:	4770      	bx	lr

0801cef0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801cef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cef4:	b08d      	sub	sp, #52	@ 0x34
 801cef6:	4688      	mov	r8, r1
 801cef8:	f8d3 c000 	ldr.w	ip, [r3]
 801cefc:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801cefe:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 801cf02:	680f      	ldr	r7, [r1, #0]
 801cf04:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 801cf08:	eba7 070c 	sub.w	r7, r7, ip
 801cf0c:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 801cf10:	edd3 6a07 	vldr	s13, [r3, #28]
 801cf14:	42bc      	cmp	r4, r7
 801cf16:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801cf18:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 801cf1c:	bfa8      	it	ge
 801cf1e:	463c      	movge	r4, r7
 801cf20:	f9b1 9000 	ldrsh.w	r9, [r1]
 801cf24:	f9ba 1000 	ldrsh.w	r1, [sl]
 801cf28:	ee07 4a90 	vmov	s15, r4
 801cf2c:	eb09 0e0c 	add.w	lr, r9, ip
 801cf30:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 801cf34:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801cf38:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 801cf3c:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 801cf40:	4571      	cmp	r1, lr
 801cf42:	ee25 4a04 	vmul.f32	s8, s10, s8
 801cf46:	ee65 4a24 	vmul.f32	s9, s10, s9
 801cf4a:	ee25 5a27 	vmul.f32	s10, s10, s15
 801cf4e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801cf52:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801cf56:	ee32 1a05 	vadd.f32	s2, s4, s10
 801cf5a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801cf5e:	ee36 0a84 	vadd.f32	s0, s13, s8
 801cf62:	ee61 1a87 	vmul.f32	s3, s3, s14
 801cf66:	ee22 2a07 	vmul.f32	s4, s4, s14
 801cf6a:	f340 808c 	ble.w	801d086 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801cf6e:	eba1 060e 	sub.w	r6, r1, lr
 801cf72:	fb96 f5f4 	sdiv	r5, r6, r4
 801cf76:	ee07 5a10 	vmov	s14, r5
 801cf7a:	2d00      	cmp	r5, #0
 801cf7c:	fb04 6615 	mls	r6, r4, r5, r6
 801cf80:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801cf84:	eea7 0a04 	vfma.f32	s0, s14, s8
 801cf88:	eee7 0a24 	vfma.f32	s1, s14, s9
 801cf8c:	eea7 1a05 	vfma.f32	s2, s14, s10
 801cf90:	dd12      	ble.n	801cfb8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801cf92:	ee70 6a44 	vsub.f32	s13, s0, s8
 801cf96:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801cf9a:	ee31 2a45 	vsub.f32	s4, s2, s10
 801cf9e:	eef5 6a40 	vcmp.f32	s13, #0.0
 801cfa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cfa6:	bf14      	ite	ne
 801cfa8:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801cfac:	eeb0 7a67 	vmoveq.f32	s14, s15
 801cfb0:	ee61 1a87 	vmul.f32	s3, s3, s14
 801cfb4:	ee22 2a07 	vmul.f32	s4, s4, s14
 801cfb8:	fb05 f204 	mul.w	r2, r5, r4
 801cfbc:	1abf      	subs	r7, r7, r2
 801cfbe:	4494      	add	ip, r2
 801cfc0:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801cfc4:	4411      	add	r1, r2
 801cfc6:	eb09 020c 	add.w	r2, r9, ip
 801cfca:	b209      	sxth	r1, r1
 801cfcc:	443a      	add	r2, r7
 801cfce:	428a      	cmp	r2, r1
 801cfd0:	bfc4      	itt	gt
 801cfd2:	eba1 0209 	subgt.w	r2, r1, r9
 801cfd6:	eba2 070c 	subgt.w	r7, r2, ip
 801cfda:	2f00      	cmp	r7, #0
 801cfdc:	dd50      	ble.n	801d080 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801cfde:	fb97 f1f4 	sdiv	r1, r7, r4
 801cfe2:	fb04 7211 	mls	r2, r4, r1, r7
 801cfe6:	b90a      	cbnz	r2, 801cfec <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801cfe8:	3901      	subs	r1, #1
 801cfea:	4622      	mov	r2, r4
 801cfec:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801cff0:	6840      	ldr	r0, [r0, #4]
 801cff2:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 801cff6:	44b6      	add	lr, r6
 801cff8:	f8d0 a000 	ldr.w	sl, [r0]
 801cffc:	2900      	cmp	r1, #0
 801cffe:	bfcc      	ite	gt
 801d000:	46a1      	movgt	r9, r4
 801d002:	4691      	movle	r9, r2
 801d004:	900b      	str	r0, [sp, #44]	@ 0x2c
 801d006:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801d008:	fb04 e505 	mla	r5, r4, r5, lr
 801d00c:	eef0 6a42 	vmov.f32	s13, s4
 801d010:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801d014:	9008      	str	r0, [sp, #32]
 801d016:	eeb0 7a61 	vmov.f32	s14, s3
 801d01a:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801d01c:	695b      	ldr	r3, [r3, #20]
 801d01e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d022:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801d026:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801d02a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801d02c:	445b      	add	r3, fp
 801d02e:	9307      	str	r3, [sp, #28]
 801d030:	ee16 3a90 	vmov	r3, s13
 801d034:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801d038:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801d03c:	ee21 3a23 	vmul.f32	s6, s2, s7
 801d040:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801d044:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801d048:	ee17 7a90 	vmov	r7, s15
 801d04c:	ee73 7a42 	vsub.f32	s15, s6, s4
 801d050:	fb97 f7f4 	sdiv	r7, r7, r4
 801d054:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801d058:	ee17 ca90 	vmov	ip, s15
 801d05c:	fb9c fcf4 	sdiv	ip, ip, r4
 801d060:	fb0c 3306 	mla	r3, ip, r6, r3
 801d064:	9302      	str	r3, [sp, #8]
 801d066:	ee17 3a10 	vmov	r3, s14
 801d06a:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801d06e:	fb07 3706 	mla	r7, r7, r6, r3
 801d072:	eba9 0306 	sub.w	r3, r9, r6
 801d076:	e9cd 4700 	strd	r4, r7, [sp]
 801d07a:	f8da 4008 	ldr.w	r4, [sl, #8]
 801d07e:	47a0      	blx	r4
 801d080:	b00d      	add	sp, #52	@ 0x34
 801d082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d086:	2500      	movs	r5, #0
 801d088:	462e      	mov	r6, r5
 801d08a:	e799      	b.n	801cfc0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0801d08c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801d08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d090:	b0db      	sub	sp, #364	@ 0x16c
 801d092:	461d      	mov	r5, r3
 801d094:	4614      	mov	r4, r2
 801d096:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 801d09a:	910f      	str	r1, [sp, #60]	@ 0x3c
 801d09c:	4629      	mov	r1, r5
 801d09e:	930a      	str	r3, [sp, #40]	@ 0x28
 801d0a0:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 801d0a4:	9009      	str	r0, [sp, #36]	@ 0x24
 801d0a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d0a8:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 801d0ac:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 801d0b0:	9310      	str	r3, [sp, #64]	@ 0x40
 801d0b2:	6803      	ldr	r3, [r0, #0]
 801d0b4:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 801d0b6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 801d0ba:	47b8      	blx	r7
 801d0bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d0be:	6058      	str	r0, [r3, #4]
 801d0c0:	2800      	cmp	r0, #0
 801d0c2:	f000 83a1 	beq.w	801d808 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801d0c6:	682b      	ldr	r3, [r5, #0]
 801d0c8:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 801d0cc:	ed94 7a02 	vldr	s14, [r4, #8]
 801d0d0:	9314      	str	r3, [sp, #80]	@ 0x50
 801d0d2:	686b      	ldr	r3, [r5, #4]
 801d0d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d0d8:	9315      	str	r3, [sp, #84]	@ 0x54
 801d0da:	4bc1      	ldr	r3, [pc, #772]	@ (801d3e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 801d0dc:	7819      	ldrb	r1, [r3, #0]
 801d0de:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801d0e2:	2900      	cmp	r1, #0
 801d0e4:	bf16      	itet	ne
 801d0e6:	4619      	movne	r1, r3
 801d0e8:	4611      	moveq	r1, r2
 801d0ea:	4613      	movne	r3, r2
 801d0ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d0f0:	9116      	str	r1, [sp, #88]	@ 0x58
 801d0f2:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 801d0f6:	f240 8387 	bls.w	801d808 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801d0fa:	ed94 7a07 	vldr	s14, [r4, #28]
 801d0fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d106:	f240 837f 	bls.w	801d808 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801d10a:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 801d10e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d116:	f240 8377 	bls.w	801d808 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801d11a:	6822      	ldr	r2, [r4, #0]
 801d11c:	4bb1      	ldr	r3, [pc, #708]	@ (801d3e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801d11e:	429a      	cmp	r2, r3
 801d120:	f2c0 8372 	blt.w	801d808 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801d124:	49b0      	ldr	r1, [pc, #704]	@ (801d3e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801d126:	6963      	ldr	r3, [r4, #20]
 801d128:	428a      	cmp	r2, r1
 801d12a:	f300 836d 	bgt.w	801d808 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801d12e:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 801d132:	48ae      	ldr	r0, [pc, #696]	@ (801d3ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801d134:	33ff      	adds	r3, #255	@ 0xff
 801d136:	4283      	cmp	r3, r0
 801d138:	f200 8366 	bhi.w	801d808 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801d13c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801d13e:	4dac      	ldr	r5, [pc, #688]	@ (801d3f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801d140:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 801d144:	33ff      	adds	r3, #255	@ 0xff
 801d146:	42ab      	cmp	r3, r5
 801d148:	f200 835e 	bhi.w	801d808 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801d14c:	6862      	ldr	r2, [r4, #4]
 801d14e:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 801d152:	33ff      	adds	r3, #255	@ 0xff
 801d154:	4283      	cmp	r3, r0
 801d156:	f200 8357 	bhi.w	801d808 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801d15a:	69a1      	ldr	r1, [r4, #24]
 801d15c:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 801d160:	33ff      	adds	r3, #255	@ 0xff
 801d162:	4283      	cmp	r3, r0
 801d164:	f200 8350 	bhi.w	801d808 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801d168:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801d16a:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 801d16e:	30ff      	adds	r0, #255	@ 0xff
 801d170:	42a8      	cmp	r0, r5
 801d172:	f200 8349 	bhi.w	801d808 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801d176:	428a      	cmp	r2, r1
 801d178:	f280 8110 	bge.w	801d39c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801d17c:	429a      	cmp	r2, r3
 801d17e:	f300 8119 	bgt.w	801d3b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801d182:	4299      	cmp	r1, r3
 801d184:	f280 811d 	bge.w	801d3c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801d188:	2502      	movs	r5, #2
 801d18a:	2701      	movs	r7, #1
 801d18c:	46a9      	mov	r9, r5
 801d18e:	46b8      	mov	r8, r7
 801d190:	f04f 0a00 	mov.w	sl, #0
 801d194:	4621      	mov	r1, r4
 801d196:	a849      	add	r0, sp, #292	@ 0x124
 801d198:	f003 fb22 	bl	80207e0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801d19c:	4622      	mov	r2, r4
 801d19e:	4653      	mov	r3, sl
 801d1a0:	a949      	add	r1, sp, #292	@ 0x124
 801d1a2:	f8cd 9000 	str.w	r9, [sp]
 801d1a6:	a819      	add	r0, sp, #100	@ 0x64
 801d1a8:	f003 fc4a 	bl	8020a40 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801d1ac:	4622      	mov	r2, r4
 801d1ae:	4653      	mov	r3, sl
 801d1b0:	a949      	add	r1, sp, #292	@ 0x124
 801d1b2:	f8cd 8000 	str.w	r8, [sp]
 801d1b6:	a829      	add	r0, sp, #164	@ 0xa4
 801d1b8:	f003 fc42 	bl	8020a40 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801d1bc:	4643      	mov	r3, r8
 801d1be:	4622      	mov	r2, r4
 801d1c0:	a949      	add	r1, sp, #292	@ 0x124
 801d1c2:	f8cd 9000 	str.w	r9, [sp]
 801d1c6:	a839      	add	r0, sp, #228	@ 0xe4
 801d1c8:	f003 fc3a 	bl	8020a40 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801d1cc:	42af      	cmp	r7, r5
 801d1ce:	af12      	add	r7, sp, #72	@ 0x48
 801d1d0:	bfb7      	itett	lt
 801d1d2:	2300      	movlt	r3, #0
 801d1d4:	2301      	movge	r3, #1
 801d1d6:	ad29      	addlt	r5, sp, #164	@ 0xa4
 801d1d8:	ac19      	addlt	r4, sp, #100	@ 0x64
 801d1da:	bfb1      	iteee	lt
 801d1dc:	930e      	strlt	r3, [sp, #56]	@ 0x38
 801d1de:	ad19      	addge	r5, sp, #100	@ 0x64
 801d1e0:	930e      	strge	r3, [sp, #56]	@ 0x38
 801d1e2:	ac29      	addge	r4, sp, #164	@ 0xa4
 801d1e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d1e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d1ea:	e887 0003 	stmia.w	r7, {r0, r1}
 801d1ee:	b928      	cbnz	r0, 801d1fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801d1f0:	4b80      	ldr	r3, [pc, #512]	@ (801d3f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801d1f2:	6818      	ldr	r0, [r3, #0]
 801d1f4:	6803      	ldr	r3, [r0, #0]
 801d1f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d1f8:	4798      	blx	r3
 801d1fa:	6038      	str	r0, [r7, #0]
 801d1fc:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801d1fe:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801d202:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d206:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 801d208:	930c      	str	r3, [sp, #48]	@ 0x30
 801d20a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801d20c:	6963      	ldr	r3, [r4, #20]
 801d20e:	440b      	add	r3, r1
 801d210:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801d214:	4408      	add	r0, r1
 801d216:	b200      	sxth	r0, r0
 801d218:	4283      	cmp	r3, r0
 801d21a:	900d      	str	r0, [sp, #52]	@ 0x34
 801d21c:	f280 80dd 	bge.w	801d3da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801d220:	428b      	cmp	r3, r1
 801d222:	da08      	bge.n	801d236 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801d224:	2a00      	cmp	r2, #0
 801d226:	dd06      	ble.n	801d236 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801d228:	1acb      	subs	r3, r1, r3
 801d22a:	429a      	cmp	r2, r3
 801d22c:	f2c0 80e4 	blt.w	801d3f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801d230:	2b00      	cmp	r3, #0
 801d232:	f300 80e2 	bgt.w	801d3fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801d236:	6967      	ldr	r7, [r4, #20]
 801d238:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 801d23c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d23e:	443b      	add	r3, r7
 801d240:	461f      	mov	r7, r3
 801d242:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d244:	1bdf      	subs	r7, r3, r7
 801d246:	4297      	cmp	r7, r2
 801d248:	bfa8      	it	ge
 801d24a:	4617      	movge	r7, r2
 801d24c:	2f00      	cmp	r7, #0
 801d24e:	f340 8166 	ble.w	801d51e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801d252:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801d254:	6829      	ldr	r1, [r5, #0]
 801d256:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d25a:	f9bb 3000 	ldrsh.w	r3, [fp]
 801d25e:	4411      	add	r1, r2
 801d260:	6820      	ldr	r0, [r4, #0]
 801d262:	4299      	cmp	r1, r3
 801d264:	dd1a      	ble.n	801d29c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801d266:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801d26a:	4402      	add	r2, r0
 801d26c:	440b      	add	r3, r1
 801d26e:	b21b      	sxth	r3, r3
 801d270:	429a      	cmp	r2, r3
 801d272:	dc13      	bgt.n	801d29c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801d274:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d276:	a912      	add	r1, sp, #72	@ 0x48
 801d278:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d27a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d27c:	681b      	ldr	r3, [r3, #0]
 801d27e:	9206      	str	r2, [sp, #24]
 801d280:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801d282:	9500      	str	r5, [sp, #0]
 801d284:	9205      	str	r2, [sp, #20]
 801d286:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d288:	e9cd b203 	strd	fp, r2, [sp, #12]
 801d28c:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 801d28e:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801d292:	aa49      	add	r2, sp, #292	@ 0x124
 801d294:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 801d298:	4623      	mov	r3, r4
 801d29a:	47c8      	blx	r9
 801d29c:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 801d2a0:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 801d2a4:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 801d2a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 801d2ac:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 801d2b0:	68a1      	ldr	r1, [r4, #8]
 801d2b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d2b6:	ed94 6a08 	vldr	s12, [r4, #32]
 801d2ba:	edd4 6a07 	vldr	s13, [r4, #28]
 801d2be:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801d2c2:	ee76 6a86 	vadd.f32	s13, s13, s12
 801d2c6:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801d2ca:	e9d4 2300 	ldrd	r2, r3, [r4]
 801d2ce:	edc4 6a07 	vstr	s13, [r4, #28]
 801d2d2:	441a      	add	r2, r3
 801d2d4:	6963      	ldr	r3, [r4, #20]
 801d2d6:	3301      	adds	r3, #1
 801d2d8:	6022      	str	r2, [r4, #0]
 801d2da:	6163      	str	r3, [r4, #20]
 801d2dc:	69a3      	ldr	r3, [r4, #24]
 801d2de:	3b01      	subs	r3, #1
 801d2e0:	61a3      	str	r3, [r4, #24]
 801d2e2:	6923      	ldr	r3, [r4, #16]
 801d2e4:	440b      	add	r3, r1
 801d2e6:	68e1      	ldr	r1, [r4, #12]
 801d2e8:	428b      	cmp	r3, r1
 801d2ea:	6123      	str	r3, [r4, #16]
 801d2ec:	db15      	blt.n	801d31a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801d2ee:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 801d2f2:	3201      	adds	r2, #1
 801d2f4:	1a5b      	subs	r3, r3, r1
 801d2f6:	ee76 6a26 	vadd.f32	s13, s12, s13
 801d2fa:	6022      	str	r2, [r4, #0]
 801d2fc:	6123      	str	r3, [r4, #16]
 801d2fe:	edc4 6a07 	vstr	s13, [r4, #28]
 801d302:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 801d306:	ee36 7a87 	vadd.f32	s14, s13, s14
 801d30a:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801d30e:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 801d312:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d316:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801d31a:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 801d31e:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 801d322:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 801d326:	ee37 7a27 	vadd.f32	s14, s14, s15
 801d32a:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 801d32e:	68a9      	ldr	r1, [r5, #8]
 801d330:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d334:	ed95 6a08 	vldr	s12, [r5, #32]
 801d338:	edd5 6a07 	vldr	s13, [r5, #28]
 801d33c:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801d340:	ee76 6a86 	vadd.f32	s13, s13, s12
 801d344:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801d348:	e9d5 2300 	ldrd	r2, r3, [r5]
 801d34c:	edc5 6a07 	vstr	s13, [r5, #28]
 801d350:	441a      	add	r2, r3
 801d352:	696b      	ldr	r3, [r5, #20]
 801d354:	3301      	adds	r3, #1
 801d356:	602a      	str	r2, [r5, #0]
 801d358:	616b      	str	r3, [r5, #20]
 801d35a:	69ab      	ldr	r3, [r5, #24]
 801d35c:	3b01      	subs	r3, #1
 801d35e:	61ab      	str	r3, [r5, #24]
 801d360:	692b      	ldr	r3, [r5, #16]
 801d362:	440b      	add	r3, r1
 801d364:	68e9      	ldr	r1, [r5, #12]
 801d366:	428b      	cmp	r3, r1
 801d368:	612b      	str	r3, [r5, #16]
 801d36a:	db15      	blt.n	801d398 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801d36c:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 801d370:	3201      	adds	r2, #1
 801d372:	1a5b      	subs	r3, r3, r1
 801d374:	ee76 6a26 	vadd.f32	s13, s12, s13
 801d378:	602a      	str	r2, [r5, #0]
 801d37a:	612b      	str	r3, [r5, #16]
 801d37c:	edc5 6a07 	vstr	s13, [r5, #28]
 801d380:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 801d384:	ee36 7a87 	vadd.f32	s14, s13, s14
 801d388:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801d38c:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 801d390:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d394:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801d398:	3f01      	subs	r7, #1
 801d39a:	e757      	b.n	801d24c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801d39c:	4299      	cmp	r1, r3
 801d39e:	dc13      	bgt.n	801d3c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801d3a0:	429a      	cmp	r2, r3
 801d3a2:	da14      	bge.n	801d3ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801d3a4:	2502      	movs	r5, #2
 801d3a6:	2703      	movs	r7, #3
 801d3a8:	f04f 0800 	mov.w	r8, #0
 801d3ac:	46a9      	mov	r9, r5
 801d3ae:	f04f 0a01 	mov.w	sl, #1
 801d3b2:	e6ef      	b.n	801d194 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801d3b4:	2501      	movs	r5, #1
 801d3b6:	2700      	movs	r7, #0
 801d3b8:	46a9      	mov	r9, r5
 801d3ba:	46b8      	mov	r8, r7
 801d3bc:	f04f 0a02 	mov.w	sl, #2
 801d3c0:	e6e8      	b.n	801d194 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801d3c2:	2501      	movs	r5, #1
 801d3c4:	2702      	movs	r7, #2
 801d3c6:	e6e1      	b.n	801d18c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801d3c8:	2500      	movs	r5, #0
 801d3ca:	2701      	movs	r7, #1
 801d3cc:	e7f4      	b.n	801d3b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801d3ce:	2702      	movs	r7, #2
 801d3d0:	2503      	movs	r5, #3
 801d3d2:	f04f 0900 	mov.w	r9, #0
 801d3d6:	46b8      	mov	r8, r7
 801d3d8:	e7e9      	b.n	801d3ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801d3da:	4613      	mov	r3, r2
 801d3dc:	e728      	b.n	801d230 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801d3de:	bf00      	nop
 801d3e0:	24034224 	.word	0x24034224
 801d3e4:	fffd8f01 	.word	0xfffd8f01
 801d3e8:	00027100 	.word	0x00027100
 801d3ec:	0004e1ff 	.word	0x0004e1ff
 801d3f0:	0004e1fe 	.word	0x0004e1fe
 801d3f4:	2403422c 	.word	0x2403422c
 801d3f8:	4613      	mov	r3, r2
 801d3fa:	992b      	ldr	r1, [sp, #172]	@ 0xac
 801d3fc:	469e      	mov	lr, r3
 801d3fe:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 801d400:	469c      	mov	ip, r3
 801d402:	9111      	str	r1, [sp, #68]	@ 0x44
 801d404:	f04f 0900 	mov.w	r9, #0
 801d408:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 801d40c:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 801d410:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 801d414:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 801d418:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 801d41c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801d420:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 801d424:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 801d428:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 801d42c:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 801d430:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 801d434:	f1bc 0f00 	cmp.w	ip, #0
 801d438:	d147      	bne.n	801d4ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801d43a:	eb03 0c07 	add.w	ip, r3, r7
 801d43e:	1ad7      	subs	r7, r2, r3
 801d440:	f1b9 0f00 	cmp.w	r9, #0
 801d444:	d009      	beq.n	801d45a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801d446:	9029      	str	r0, [sp, #164]	@ 0xa4
 801d448:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 801d44c:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 801d450:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 801d454:	912d      	str	r1, [sp, #180]	@ 0xb4
 801d456:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 801d45a:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801d45c:	f04f 0800 	mov.w	r8, #0
 801d460:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 801d464:	9111      	str	r1, [sp, #68]	@ 0x44
 801d466:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 801d46a:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 801d46e:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 801d472:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 801d476:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 801d47a:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 801d47e:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 801d482:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 801d486:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 801d48a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 801d48e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 801d492:	f1be 0f00 	cmp.w	lr, #0
 801d496:	d031      	beq.n	801d4fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801d498:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801d49a:	4450      	add	r0, sl
 801d49c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801d4a0:	4431      	add	r1, r6
 801d4a2:	ee37 7a04 	vadd.f32	s14, s14, s8
 801d4a6:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801d4aa:	4549      	cmp	r1, r9
 801d4ac:	db08      	blt.n	801d4c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801d4ae:	ee77 7a85 	vadd.f32	s15, s15, s10
 801d4b2:	3001      	adds	r0, #1
 801d4b4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801d4b8:	eba1 0109 	sub.w	r1, r1, r9
 801d4bc:	ee37 7a06 	vadd.f32	s14, s14, s12
 801d4c0:	f10e 3eff 	add.w	lr, lr, #4294967295
 801d4c4:	f04f 0801 	mov.w	r8, #1
 801d4c8:	e7e3      	b.n	801d492 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801d4ca:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801d4cc:	4450      	add	r0, sl
 801d4ce:	ee37 7a24 	vadd.f32	s14, s14, s9
 801d4d2:	4431      	add	r1, r6
 801d4d4:	ee77 7a84 	vadd.f32	s15, s15, s8
 801d4d8:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801d4dc:	4541      	cmp	r1, r8
 801d4de:	db08      	blt.n	801d4f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801d4e0:	ee76 6a85 	vadd.f32	s13, s13, s10
 801d4e4:	3001      	adds	r0, #1
 801d4e6:	ee37 7a25 	vadd.f32	s14, s14, s11
 801d4ea:	eba1 0108 	sub.w	r1, r1, r8
 801d4ee:	ee77 7a86 	vadd.f32	s15, s15, s12
 801d4f2:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d4f6:	f04f 0901 	mov.w	r9, #1
 801d4fa:	e79b      	b.n	801d434 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801d4fc:	449c      	add	ip, r3
 801d4fe:	1aff      	subs	r7, r7, r3
 801d500:	f1b8 0f00 	cmp.w	r8, #0
 801d504:	d009      	beq.n	801d51a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801d506:	9019      	str	r0, [sp, #100]	@ 0x64
 801d508:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 801d50c:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 801d510:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 801d514:	911d      	str	r1, [sp, #116]	@ 0x74
 801d516:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 801d51a:	1ad2      	subs	r2, r2, r3
 801d51c:	e68b      	b.n	801d236 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801d51e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d520:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801d522:	2b00      	cmp	r3, #0
 801d524:	f000 80d1 	beq.w	801d6ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801d528:	ad19      	add	r5, sp, #100	@ 0x64
 801d52a:	ac39      	add	r4, sp, #228	@ 0xe4
 801d52c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801d52e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801d532:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d536:	930c      	str	r3, [sp, #48]	@ 0x30
 801d538:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801d53a:	6963      	ldr	r3, [r4, #20]
 801d53c:	440b      	add	r3, r1
 801d53e:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801d542:	4408      	add	r0, r1
 801d544:	b200      	sxth	r0, r0
 801d546:	4283      	cmp	r3, r0
 801d548:	900d      	str	r0, [sp, #52]	@ 0x34
 801d54a:	f280 80c1 	bge.w	801d6d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801d54e:	428b      	cmp	r3, r1
 801d550:	da08      	bge.n	801d564 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801d552:	2a00      	cmp	r2, #0
 801d554:	dd06      	ble.n	801d564 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801d556:	1acb      	subs	r3, r1, r3
 801d558:	429a      	cmp	r2, r3
 801d55a:	f2c0 80bb 	blt.w	801d6d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801d55e:	2b00      	cmp	r3, #0
 801d560:	f300 80b9 	bgt.w	801d6d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801d564:	6967      	ldr	r7, [r4, #20]
 801d566:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 801d56a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d56c:	443b      	add	r3, r7
 801d56e:	461f      	mov	r7, r3
 801d570:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d572:	1bdf      	subs	r7, r3, r7
 801d574:	4297      	cmp	r7, r2
 801d576:	bfa8      	it	ge
 801d578:	4617      	movge	r7, r2
 801d57a:	2f00      	cmp	r7, #0
 801d57c:	f340 813c 	ble.w	801d7f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801d580:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801d582:	6829      	ldr	r1, [r5, #0]
 801d584:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d588:	f9bb 3000 	ldrsh.w	r3, [fp]
 801d58c:	4411      	add	r1, r2
 801d58e:	6820      	ldr	r0, [r4, #0]
 801d590:	4299      	cmp	r1, r3
 801d592:	dd1a      	ble.n	801d5ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801d594:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801d598:	4402      	add	r2, r0
 801d59a:	440b      	add	r3, r1
 801d59c:	b21b      	sxth	r3, r3
 801d59e:	429a      	cmp	r2, r3
 801d5a0:	dc13      	bgt.n	801d5ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801d5a2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d5a4:	a912      	add	r1, sp, #72	@ 0x48
 801d5a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d5a8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d5aa:	681b      	ldr	r3, [r3, #0]
 801d5ac:	9206      	str	r2, [sp, #24]
 801d5ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801d5b0:	9500      	str	r5, [sp, #0]
 801d5b2:	9205      	str	r2, [sp, #20]
 801d5b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d5b6:	e9cd b203 	strd	fp, r2, [sp, #12]
 801d5ba:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 801d5bc:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801d5c0:	aa49      	add	r2, sp, #292	@ 0x124
 801d5c2:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 801d5c6:	4623      	mov	r3, r4
 801d5c8:	47c8      	blx	r9
 801d5ca:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 801d5ce:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 801d5d2:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 801d5d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 801d5da:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 801d5de:	68a1      	ldr	r1, [r4, #8]
 801d5e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d5e4:	ed94 6a08 	vldr	s12, [r4, #32]
 801d5e8:	edd4 6a07 	vldr	s13, [r4, #28]
 801d5ec:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801d5f0:	ee76 6a86 	vadd.f32	s13, s13, s12
 801d5f4:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801d5f8:	e9d4 2300 	ldrd	r2, r3, [r4]
 801d5fc:	edc4 6a07 	vstr	s13, [r4, #28]
 801d600:	441a      	add	r2, r3
 801d602:	6963      	ldr	r3, [r4, #20]
 801d604:	3301      	adds	r3, #1
 801d606:	6022      	str	r2, [r4, #0]
 801d608:	6163      	str	r3, [r4, #20]
 801d60a:	69a3      	ldr	r3, [r4, #24]
 801d60c:	3b01      	subs	r3, #1
 801d60e:	61a3      	str	r3, [r4, #24]
 801d610:	6923      	ldr	r3, [r4, #16]
 801d612:	440b      	add	r3, r1
 801d614:	68e1      	ldr	r1, [r4, #12]
 801d616:	428b      	cmp	r3, r1
 801d618:	6123      	str	r3, [r4, #16]
 801d61a:	db15      	blt.n	801d648 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801d61c:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 801d620:	3201      	adds	r2, #1
 801d622:	1a5b      	subs	r3, r3, r1
 801d624:	ee76 6a26 	vadd.f32	s13, s12, s13
 801d628:	6022      	str	r2, [r4, #0]
 801d62a:	6123      	str	r3, [r4, #16]
 801d62c:	edc4 6a07 	vstr	s13, [r4, #28]
 801d630:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 801d634:	ee36 7a87 	vadd.f32	s14, s13, s14
 801d638:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801d63c:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 801d640:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d644:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801d648:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 801d64c:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 801d650:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 801d654:	ee37 7a27 	vadd.f32	s14, s14, s15
 801d658:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 801d65c:	68a9      	ldr	r1, [r5, #8]
 801d65e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d662:	ed95 6a08 	vldr	s12, [r5, #32]
 801d666:	edd5 6a07 	vldr	s13, [r5, #28]
 801d66a:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801d66e:	ee76 6a86 	vadd.f32	s13, s13, s12
 801d672:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801d676:	e9d5 2300 	ldrd	r2, r3, [r5]
 801d67a:	edc5 6a07 	vstr	s13, [r5, #28]
 801d67e:	441a      	add	r2, r3
 801d680:	696b      	ldr	r3, [r5, #20]
 801d682:	3301      	adds	r3, #1
 801d684:	602a      	str	r2, [r5, #0]
 801d686:	616b      	str	r3, [r5, #20]
 801d688:	69ab      	ldr	r3, [r5, #24]
 801d68a:	3b01      	subs	r3, #1
 801d68c:	61ab      	str	r3, [r5, #24]
 801d68e:	692b      	ldr	r3, [r5, #16]
 801d690:	440b      	add	r3, r1
 801d692:	68e9      	ldr	r1, [r5, #12]
 801d694:	428b      	cmp	r3, r1
 801d696:	612b      	str	r3, [r5, #16]
 801d698:	db15      	blt.n	801d6c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801d69a:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 801d69e:	3201      	adds	r2, #1
 801d6a0:	1a5b      	subs	r3, r3, r1
 801d6a2:	ee76 6a26 	vadd.f32	s13, s12, s13
 801d6a6:	602a      	str	r2, [r5, #0]
 801d6a8:	612b      	str	r3, [r5, #16]
 801d6aa:	edc5 6a07 	vstr	s13, [r5, #28]
 801d6ae:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 801d6b2:	ee36 7a87 	vadd.f32	s14, s13, s14
 801d6b6:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801d6ba:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 801d6be:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d6c2:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801d6c6:	3f01      	subs	r7, #1
 801d6c8:	e757      	b.n	801d57a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801d6ca:	ad39      	add	r5, sp, #228	@ 0xe4
 801d6cc:	ac19      	add	r4, sp, #100	@ 0x64
 801d6ce:	e72d      	b.n	801d52c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801d6d0:	4613      	mov	r3, r2
 801d6d2:	e744      	b.n	801d55e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801d6d4:	4613      	mov	r3, r2
 801d6d6:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 801d6d8:	469e      	mov	lr, r3
 801d6da:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 801d6de:	461f      	mov	r7, r3
 801d6e0:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 801d6e4:	f04f 0900 	mov.w	r9, #0
 801d6e8:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 801d6ec:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 801d6f0:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 801d6f4:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 801d6f8:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 801d6fc:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 801d6fe:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 801d702:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 801d706:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 801d70a:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 801d70e:	960e      	str	r6, [sp, #56]	@ 0x38
 801d710:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 801d714:	2f00      	cmp	r7, #0
 801d716:	d146      	bne.n	801d7a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801d718:	449c      	add	ip, r3
 801d71a:	1ad7      	subs	r7, r2, r3
 801d71c:	f1b9 0f00 	cmp.w	r9, #0
 801d720:	d009      	beq.n	801d736 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801d722:	9039      	str	r0, [sp, #228]	@ 0xe4
 801d724:	913d      	str	r1, [sp, #244]	@ 0xf4
 801d726:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 801d72a:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 801d72e:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 801d732:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 801d736:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801d738:	f04f 0800 	mov.w	r8, #0
 801d73c:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 801d740:	910e      	str	r1, [sp, #56]	@ 0x38
 801d742:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 801d746:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 801d74a:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 801d74e:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 801d752:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 801d756:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 801d75a:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 801d75e:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 801d762:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 801d766:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 801d76a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 801d76e:	f1be 0f00 	cmp.w	lr, #0
 801d772:	d030      	beq.n	801d7d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801d774:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801d776:	4450      	add	r0, sl
 801d778:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801d77c:	4431      	add	r1, r6
 801d77e:	ee37 7a04 	vadd.f32	s14, s14, s8
 801d782:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801d786:	4549      	cmp	r1, r9
 801d788:	db08      	blt.n	801d79c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801d78a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801d78e:	3001      	adds	r0, #1
 801d790:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801d794:	eba1 0109 	sub.w	r1, r1, r9
 801d798:	ee37 7a06 	vadd.f32	s14, s14, s12
 801d79c:	f10e 3eff 	add.w	lr, lr, #4294967295
 801d7a0:	f04f 0801 	mov.w	r8, #1
 801d7a4:	e7e3      	b.n	801d76e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801d7a6:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801d7a8:	4450      	add	r0, sl
 801d7aa:	ee37 7a24 	vadd.f32	s14, s14, s9
 801d7ae:	4431      	add	r1, r6
 801d7b0:	ee77 7a84 	vadd.f32	s15, s15, s8
 801d7b4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801d7b8:	4541      	cmp	r1, r8
 801d7ba:	db08      	blt.n	801d7ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801d7bc:	ee76 6a85 	vadd.f32	s13, s13, s10
 801d7c0:	3001      	adds	r0, #1
 801d7c2:	ee37 7a25 	vadd.f32	s14, s14, s11
 801d7c6:	eba1 0108 	sub.w	r1, r1, r8
 801d7ca:	ee77 7a86 	vadd.f32	s15, s15, s12
 801d7ce:	3f01      	subs	r7, #1
 801d7d0:	f04f 0901 	mov.w	r9, #1
 801d7d4:	e79e      	b.n	801d714 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801d7d6:	449c      	add	ip, r3
 801d7d8:	1aff      	subs	r7, r7, r3
 801d7da:	f1b8 0f00 	cmp.w	r8, #0
 801d7de:	d009      	beq.n	801d7f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801d7e0:	9019      	str	r0, [sp, #100]	@ 0x64
 801d7e2:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 801d7e6:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 801d7ea:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 801d7ee:	911d      	str	r1, [sp, #116]	@ 0x74
 801d7f0:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 801d7f4:	1ad2      	subs	r2, r2, r3
 801d7f6:	e6b5      	b.n	801d564 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801d7f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d7fa:	681b      	ldr	r3, [r3, #0]
 801d7fc:	b923      	cbnz	r3, 801d808 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801d7fe:	4b04      	ldr	r3, [pc, #16]	@ (801d810 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801d800:	6818      	ldr	r0, [r3, #0]
 801d802:	6803      	ldr	r3, [r0, #0]
 801d804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d806:	4798      	blx	r3
 801d808:	b05b      	add	sp, #364	@ 0x16c
 801d80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d80e:	bf00      	nop
 801d810:	2403422c 	.word	0x2403422c

0801d814 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801d814:	2b03      	cmp	r3, #3
 801d816:	d818      	bhi.n	801d84a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801d818:	e8df f003 	tbb	[pc, r3]
 801d81c:	130d0602 	.word	0x130d0602
 801d820:	f9b0 2000 	ldrsh.w	r2, [r0]
 801d824:	1850      	adds	r0, r2, r1
 801d826:	4770      	bx	lr
 801d828:	8803      	ldrh	r3, [r0, #0]
 801d82a:	8880      	ldrh	r0, [r0, #4]
 801d82c:	4418      	add	r0, r3
 801d82e:	b200      	sxth	r0, r0
 801d830:	1a80      	subs	r0, r0, r2
 801d832:	3801      	subs	r0, #1
 801d834:	4770      	bx	lr
 801d836:	8803      	ldrh	r3, [r0, #0]
 801d838:	8880      	ldrh	r0, [r0, #4]
 801d83a:	4418      	add	r0, r3
 801d83c:	b200      	sxth	r0, r0
 801d83e:	1a40      	subs	r0, r0, r1
 801d840:	e7f7      	b.n	801d832 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801d842:	f9b0 0000 	ldrsh.w	r0, [r0]
 801d846:	4410      	add	r0, r2
 801d848:	4770      	bx	lr
 801d84a:	2000      	movs	r0, #0
 801d84c:	4770      	bx	lr

0801d84e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801d84e:	2b03      	cmp	r3, #3
 801d850:	d817      	bhi.n	801d882 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801d852:	e8df f003 	tbb	[pc, r3]
 801d856:	0602      	.short	0x0602
 801d858:	1009      	.short	0x1009
 801d85a:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801d85e:	1850      	adds	r0, r2, r1
 801d860:	4770      	bx	lr
 801d862:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801d866:	e7fa      	b.n	801d85e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801d868:	8843      	ldrh	r3, [r0, #2]
 801d86a:	88c0      	ldrh	r0, [r0, #6]
 801d86c:	4418      	add	r0, r3
 801d86e:	b200      	sxth	r0, r0
 801d870:	1a80      	subs	r0, r0, r2
 801d872:	3801      	subs	r0, #1
 801d874:	4770      	bx	lr
 801d876:	8843      	ldrh	r3, [r0, #2]
 801d878:	88c0      	ldrh	r0, [r0, #6]
 801d87a:	4418      	add	r0, r3
 801d87c:	b200      	sxth	r0, r0
 801d87e:	1a40      	subs	r0, r0, r1
 801d880:	e7f7      	b.n	801d872 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801d882:	2000      	movs	r0, #0
 801d884:	4770      	bx	lr
	...

0801d888 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801d888:	4b01      	ldr	r3, [pc, #4]	@ (801d890 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801d88a:	2200      	movs	r2, #0
 801d88c:	601a      	str	r2, [r3, #0]
 801d88e:	4770      	bx	lr
 801d890:	2403423c 	.word	0x2403423c

0801d894 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801d894:	4603      	mov	r3, r0
 801d896:	b1c8      	cbz	r0, 801d8cc <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801d898:	0c02      	lsrs	r2, r0, #16
 801d89a:	0412      	lsls	r2, r2, #16
 801d89c:	b9a2      	cbnz	r2, 801d8c8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801d89e:	0403      	lsls	r3, r0, #16
 801d8a0:	2010      	movs	r0, #16
 801d8a2:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 801d8a6:	bf04      	itt	eq
 801d8a8:	021b      	lsleq	r3, r3, #8
 801d8aa:	3008      	addeq	r0, #8
 801d8ac:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 801d8b0:	bf04      	itt	eq
 801d8b2:	011b      	lsleq	r3, r3, #4
 801d8b4:	3004      	addeq	r0, #4
 801d8b6:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 801d8ba:	bf04      	itt	eq
 801d8bc:	009b      	lsleq	r3, r3, #2
 801d8be:	3002      	addeq	r0, #2
 801d8c0:	2b00      	cmp	r3, #0
 801d8c2:	db04      	blt.n	801d8ce <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801d8c4:	3001      	adds	r0, #1
 801d8c6:	4770      	bx	lr
 801d8c8:	2000      	movs	r0, #0
 801d8ca:	e7ea      	b.n	801d8a2 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801d8cc:	2020      	movs	r0, #32
 801d8ce:	4770      	bx	lr

0801d8d0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801d8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8d4:	b087      	sub	sp, #28
 801d8d6:	460d      	mov	r5, r1
 801d8d8:	4616      	mov	r6, r2
 801d8da:	4698      	mov	r8, r3
 801d8dc:	4601      	mov	r1, r0
 801d8de:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 801d8e2:	b120      	cbz	r0, 801d8ee <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801d8e4:	b11a      	cbz	r2, 801d8ee <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801d8e6:	2d1f      	cmp	r5, #31
 801d8e8:	d801      	bhi.n	801d8ee <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801d8ea:	2b1f      	cmp	r3, #31
 801d8ec:	d904      	bls.n	801d8f8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 801d8ee:	2000      	movs	r0, #0
 801d8f0:	6038      	str	r0, [r7, #0]
 801d8f2:	b007      	add	sp, #28
 801d8f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d8f8:	b97d      	cbnz	r5, 801d91a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 801d8fa:	b143      	cbz	r3, 801d90e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 801d8fc:	4602      	mov	r2, r0
 801d8fe:	462b      	mov	r3, r5
 801d900:	4641      	mov	r1, r8
 801d902:	4630      	mov	r0, r6
 801d904:	e9cd 4700 	strd	r4, r7, [sp]
 801d908:	f7ff ffe2 	bl	801d8d0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801d90c:	e7f1      	b.n	801d8f2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801d90e:	f04f 33ff 	mov.w	r3, #4294967295
 801d912:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801d916:	603b      	str	r3, [r7, #0]
 801d918:	e7eb      	b.n	801d8f2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801d91a:	fa32 fa05 	lsrs.w	sl, r2, r5
 801d91e:	d106      	bne.n	801d92e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 801d920:	4346      	muls	r6, r0
 801d922:	fbb6 f0f4 	udiv	r0, r6, r4
 801d926:	fb04 6610 	mls	r6, r4, r0, r6
 801d92a:	603e      	str	r6, [r7, #0]
 801d92c:	e7e1      	b.n	801d8f2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801d92e:	2201      	movs	r2, #1
 801d930:	fa00 fb05 	lsl.w	fp, r0, r5
 801d934:	40aa      	lsls	r2, r5
 801d936:	fbbb f9f4 	udiv	r9, fp, r4
 801d93a:	3a01      	subs	r2, #1
 801d93c:	fb0a f309 	mul.w	r3, sl, r9
 801d940:	fb04 b919 	mls	r9, r4, r9, fp
 801d944:	4016      	ands	r6, r2
 801d946:	9303      	str	r3, [sp, #12]
 801d948:	4630      	mov	r0, r6
 801d94a:	f7ff ffa3 	bl	801d894 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801d94e:	462b      	mov	r3, r5
 801d950:	460a      	mov	r2, r1
 801d952:	4601      	mov	r1, r0
 801d954:	4630      	mov	r0, r6
 801d956:	e9cd 4700 	strd	r4, r7, [sp]
 801d95a:	f7ff ffb9 	bl	801d8d0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801d95e:	4606      	mov	r6, r0
 801d960:	4648      	mov	r0, r9
 801d962:	eb05 0108 	add.w	r1, r5, r8
 801d966:	f7ff ff95 	bl	801d894 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801d96a:	ab05      	add	r3, sp, #20
 801d96c:	464a      	mov	r2, r9
 801d96e:	e9cd 4300 	strd	r4, r3, [sp]
 801d972:	4603      	mov	r3, r0
 801d974:	4650      	mov	r0, sl
 801d976:	f7ff ffab 	bl	801d8d0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801d97a:	6839      	ldr	r1, [r7, #0]
 801d97c:	9a05      	ldr	r2, [sp, #20]
 801d97e:	9b03      	ldr	r3, [sp, #12]
 801d980:	4411      	add	r1, r2
 801d982:	fbb1 f2f4 	udiv	r2, r1, r4
 801d986:	18d3      	adds	r3, r2, r3
 801d988:	fb04 1412 	mls	r4, r4, r2, r1
 801d98c:	441e      	add	r6, r3
 801d98e:	603c      	str	r4, [r7, #0]
 801d990:	4430      	add	r0, r6
 801d992:	e7ae      	b.n	801d8f2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

0801d994 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801d994:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d998:	b085      	sub	sp, #20
 801d99a:	f1b0 0900 	subs.w	r9, r0, #0
 801d99e:	461d      	mov	r5, r3
 801d9a0:	4617      	mov	r7, r2
 801d9a2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801d9a4:	bfbb      	ittet	lt
 801d9a6:	f1c9 0900 	rsblt	r9, r9, #0
 801d9aa:	f04f 36ff 	movlt.w	r6, #4294967295
 801d9ae:	2601      	movge	r6, #1
 801d9b0:	6823      	ldrlt	r3, [r4, #0]
 801d9b2:	bfbc      	itt	lt
 801d9b4:	425b      	neglt	r3, r3
 801d9b6:	6023      	strlt	r3, [r4, #0]
 801d9b8:	2a00      	cmp	r2, #0
 801d9ba:	da04      	bge.n	801d9c6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801d9bc:	6823      	ldr	r3, [r4, #0]
 801d9be:	4257      	negs	r7, r2
 801d9c0:	4276      	negs	r6, r6
 801d9c2:	425b      	negs	r3, r3
 801d9c4:	6023      	str	r3, [r4, #0]
 801d9c6:	2d00      	cmp	r5, #0
 801d9c8:	4638      	mov	r0, r7
 801d9ca:	bfba      	itte	lt
 801d9cc:	426d      	neglt	r5, r5
 801d9ce:	f04f 38ff 	movlt.w	r8, #4294967295
 801d9d2:	f04f 0801 	movge.w	r8, #1
 801d9d6:	f7ff ff5d 	bl	801d894 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801d9da:	ab03      	add	r3, sp, #12
 801d9dc:	463a      	mov	r2, r7
 801d9de:	e9cd 5300 	strd	r5, r3, [sp]
 801d9e2:	4603      	mov	r3, r0
 801d9e4:	4648      	mov	r0, r9
 801d9e6:	f7ff ff73 	bl	801d8d0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801d9ea:	6823      	ldr	r3, [r4, #0]
 801d9ec:	9a03      	ldr	r2, [sp, #12]
 801d9ee:	4546      	cmp	r6, r8
 801d9f0:	441a      	add	r2, r3
 801d9f2:	fb92 f3f5 	sdiv	r3, r2, r5
 801d9f6:	4418      	add	r0, r3
 801d9f8:	fb05 2313 	mls	r3, r5, r3, r2
 801d9fc:	bf18      	it	ne
 801d9fe:	4240      	negne	r0, r0
 801da00:	1c72      	adds	r2, r6, #1
 801da02:	6023      	str	r3, [r4, #0]
 801da04:	d105      	bne.n	801da12 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801da06:	2b00      	cmp	r3, #0
 801da08:	f1c3 0200 	rsb	r2, r3, #0
 801da0c:	db0b      	blt.n	801da26 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801da0e:	6022      	str	r2, [r4, #0]
 801da10:	e006      	b.n	801da20 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801da12:	2e01      	cmp	r6, #1
 801da14:	d104      	bne.n	801da20 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801da16:	2b00      	cmp	r3, #0
 801da18:	da02      	bge.n	801da20 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801da1a:	442b      	add	r3, r5
 801da1c:	3801      	subs	r0, #1
 801da1e:	6023      	str	r3, [r4, #0]
 801da20:	b005      	add	sp, #20
 801da22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801da26:	3801      	subs	r0, #1
 801da28:	1b52      	subs	r2, r2, r5
 801da2a:	e7f0      	b.n	801da0e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

0801da2c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801da2c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801da30:	4c1c      	ldr	r4, [pc, #112]	@ (801daa4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801da32:	4605      	mov	r5, r0
 801da34:	6807      	ldr	r7, [r0, #0]
 801da36:	69a3      	ldr	r3, [r4, #24]
 801da38:	b92b      	cbnz	r3, 801da46 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801da3a:	6840      	ldr	r0, [r0, #4]
 801da3c:	e9c5 7000 	strd	r7, r0, [r5]
 801da40:	b004      	add	sp, #16
 801da42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801da46:	f04f 0802 	mov.w	r8, #2
 801da4a:	68a2      	ldr	r2, [r4, #8]
 801da4c:	ae04      	add	r6, sp, #16
 801da4e:	6820      	ldr	r0, [r4, #0]
 801da50:	fb93 f1f8 	sdiv	r1, r3, r8
 801da54:	440a      	add	r2, r1
 801da56:	69e1      	ldr	r1, [r4, #28]
 801da58:	f846 2d04 	str.w	r2, [r6, #-4]!
 801da5c:	463a      	mov	r2, r7
 801da5e:	9600      	str	r6, [sp, #0]
 801da60:	f7ff ff98 	bl	801d994 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801da64:	69a3      	ldr	r3, [r4, #24]
 801da66:	4607      	mov	r7, r0
 801da68:	686a      	ldr	r2, [r5, #4]
 801da6a:	6a21      	ldr	r1, [r4, #32]
 801da6c:	9600      	str	r6, [sp, #0]
 801da6e:	6860      	ldr	r0, [r4, #4]
 801da70:	f7ff ff90 	bl	801d994 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801da74:	69a3      	ldr	r3, [r4, #24]
 801da76:	6962      	ldr	r2, [r4, #20]
 801da78:	4407      	add	r7, r0
 801da7a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801da7c:	9600      	str	r6, [sp, #0]
 801da7e:	68e0      	ldr	r0, [r4, #12]
 801da80:	fb93 f8f8 	sdiv	r8, r3, r8
 801da84:	4442      	add	r2, r8
 801da86:	9203      	str	r2, [sp, #12]
 801da88:	682a      	ldr	r2, [r5, #0]
 801da8a:	f7ff ff83 	bl	801d994 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801da8e:	4680      	mov	r8, r0
 801da90:	9600      	str	r6, [sp, #0]
 801da92:	69a3      	ldr	r3, [r4, #24]
 801da94:	686a      	ldr	r2, [r5, #4]
 801da96:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801da98:	6920      	ldr	r0, [r4, #16]
 801da9a:	f7ff ff7b 	bl	801d994 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801da9e:	4440      	add	r0, r8
 801daa0:	e7cc      	b.n	801da3c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801daa2:	bf00      	nop
 801daa4:	24034240 	.word	0x24034240

0801daa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801daa8:	4b07      	ldr	r3, [pc, #28]	@ (801dac8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801daaa:	781b      	ldrb	r3, [r3, #0]
 801daac:	2b01      	cmp	r3, #1
 801daae:	d109      	bne.n	801dac4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801dab0:	f9b1 3000 	ldrsh.w	r3, [r1]
 801dab4:	f9b0 2000 	ldrsh.w	r2, [r0]
 801dab8:	8003      	strh	r3, [r0, #0]
 801daba:	4b04      	ldr	r3, [pc, #16]	@ (801dacc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801dabc:	881b      	ldrh	r3, [r3, #0]
 801dabe:	3b01      	subs	r3, #1
 801dac0:	1a9b      	subs	r3, r3, r2
 801dac2:	800b      	strh	r3, [r1, #0]
 801dac4:	4770      	bx	lr
 801dac6:	bf00      	nop
 801dac8:	24034224 	.word	0x24034224
 801dacc:	24034220 	.word	0x24034220

0801dad0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801dad0:	4b07      	ldr	r3, [pc, #28]	@ (801daf0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801dad2:	b510      	push	{r4, lr}
 801dad4:	781b      	ldrb	r3, [r3, #0]
 801dad6:	2b01      	cmp	r3, #1
 801dad8:	d108      	bne.n	801daec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801dada:	4b06      	ldr	r3, [pc, #24]	@ (801daf4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801dadc:	880c      	ldrh	r4, [r1, #0]
 801dade:	881b      	ldrh	r3, [r3, #0]
 801dae0:	f9b0 2000 	ldrsh.w	r2, [r0]
 801dae4:	3b01      	subs	r3, #1
 801dae6:	1b1b      	subs	r3, r3, r4
 801dae8:	8003      	strh	r3, [r0, #0]
 801daea:	800a      	strh	r2, [r1, #0]
 801daec:	bd10      	pop	{r4, pc}
 801daee:	bf00      	nop
 801daf0:	24034224 	.word	0x24034224
 801daf4:	24034220 	.word	0x24034220

0801daf8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801daf8:	4b0a      	ldr	r3, [pc, #40]	@ (801db24 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801dafa:	b510      	push	{r4, lr}
 801dafc:	781b      	ldrb	r3, [r3, #0]
 801dafe:	2b01      	cmp	r3, #1
 801db00:	d10e      	bne.n	801db20 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801db02:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801db06:	8843      	ldrh	r3, [r0, #2]
 801db08:	f9b0 4000 	ldrsh.w	r4, [r0]
 801db0c:	18ca      	adds	r2, r1, r3
 801db0e:	4b06      	ldr	r3, [pc, #24]	@ (801db28 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801db10:	8044      	strh	r4, [r0, #2]
 801db12:	881b      	ldrh	r3, [r3, #0]
 801db14:	1a9b      	subs	r3, r3, r2
 801db16:	8003      	strh	r3, [r0, #0]
 801db18:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801db1c:	8081      	strh	r1, [r0, #4]
 801db1e:	80c3      	strh	r3, [r0, #6]
 801db20:	bd10      	pop	{r4, pc}
 801db22:	bf00      	nop
 801db24:	24034224 	.word	0x24034224
 801db28:	24034220 	.word	0x24034220

0801db2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801db2c:	4b08      	ldr	r3, [pc, #32]	@ (801db50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801db2e:	781b      	ldrb	r3, [r3, #0]
 801db30:	2b01      	cmp	r3, #1
 801db32:	d10c      	bne.n	801db4e <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801db34:	8803      	ldrh	r3, [r0, #0]
 801db36:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801db3a:	8842      	ldrh	r2, [r0, #2]
 801db3c:	8002      	strh	r2, [r0, #0]
 801db3e:	185a      	adds	r2, r3, r1
 801db40:	4b04      	ldr	r3, [pc, #16]	@ (801db54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801db42:	881b      	ldrh	r3, [r3, #0]
 801db44:	1a9b      	subs	r3, r3, r2
 801db46:	8043      	strh	r3, [r0, #2]
 801db48:	88c3      	ldrh	r3, [r0, #6]
 801db4a:	80c1      	strh	r1, [r0, #6]
 801db4c:	8083      	strh	r3, [r0, #4]
 801db4e:	4770      	bx	lr
 801db50:	24034224 	.word	0x24034224
 801db54:	24034220 	.word	0x24034220

0801db58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801db58:	4b07      	ldr	r3, [pc, #28]	@ (801db78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801db5a:	b510      	push	{r4, lr}
 801db5c:	781b      	ldrb	r3, [r3, #0]
 801db5e:	2b01      	cmp	r3, #1
 801db60:	d108      	bne.n	801db74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801db62:	f9b1 3000 	ldrsh.w	r3, [r1]
 801db66:	f9b0 4000 	ldrsh.w	r4, [r0]
 801db6a:	8003      	strh	r3, [r0, #0]
 801db6c:	8893      	ldrh	r3, [r2, #4]
 801db6e:	3b01      	subs	r3, #1
 801db70:	1b1b      	subs	r3, r3, r4
 801db72:	800b      	strh	r3, [r1, #0]
 801db74:	bd10      	pop	{r4, pc}
 801db76:	bf00      	nop
 801db78:	24034224 	.word	0x24034224

0801db7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801db7c:	4b0a      	ldr	r3, [pc, #40]	@ (801dba8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801db7e:	460a      	mov	r2, r1
 801db80:	b510      	push	{r4, lr}
 801db82:	781b      	ldrb	r3, [r3, #0]
 801db84:	2b01      	cmp	r3, #1
 801db86:	d10d      	bne.n	801dba4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801db88:	8881      	ldrh	r1, [r0, #4]
 801db8a:	8803      	ldrh	r3, [r0, #0]
 801db8c:	440b      	add	r3, r1
 801db8e:	4601      	mov	r1, r0
 801db90:	3b01      	subs	r3, #1
 801db92:	f821 3b02 	strh.w	r3, [r1], #2
 801db96:	f7ff ffdf 	bl	801db58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801db9a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801db9e:	88c2      	ldrh	r2, [r0, #6]
 801dba0:	80c3      	strh	r3, [r0, #6]
 801dba2:	8082      	strh	r2, [r0, #4]
 801dba4:	bd10      	pop	{r4, pc}
 801dba6:	bf00      	nop
 801dba8:	24034224 	.word	0x24034224

0801dbac <_ZN8touchgfx11Application13requestRedrawEv>:
 801dbac:	4b06      	ldr	r3, [pc, #24]	@ (801dbc8 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801dbae:	2100      	movs	r1, #0
 801dbb0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801dbb4:	4b05      	ldr	r3, [pc, #20]	@ (801dbcc <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801dbb6:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 801dbba:	f9b3 3000 	ldrsh.w	r3, [r3]
 801dbbe:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 801dbc2:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 801dbc6:	4770      	bx	lr
 801dbc8:	24034220 	.word	0x24034220
 801dbcc:	24034222 	.word	0x24034222

0801dbd0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801dbd0:	4b03      	ldr	r3, [pc, #12]	@ (801dbe0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801dbd2:	6818      	ldr	r0, [r3, #0]
 801dbd4:	b110      	cbz	r0, 801dbdc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801dbd6:	6803      	ldr	r3, [r0, #0]
 801dbd8:	699b      	ldr	r3, [r3, #24]
 801dbda:	4718      	bx	r3
 801dbdc:	4770      	bx	lr
 801dbde:	bf00      	nop
 801dbe0:	24034270 	.word	0x24034270

0801dbe4 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801dbe4:	4770      	bx	lr
	...

0801dbe8 <_ZN8touchgfx11Application4drawEv>:
 801dbe8:	4b09      	ldr	r3, [pc, #36]	@ (801dc10 <_ZN8touchgfx11Application4drawEv+0x28>)
 801dbea:	b507      	push	{r0, r1, r2, lr}
 801dbec:	f9b3 2000 	ldrsh.w	r2, [r3]
 801dbf0:	2100      	movs	r1, #0
 801dbf2:	4b08      	ldr	r3, [pc, #32]	@ (801dc14 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801dbf4:	9100      	str	r1, [sp, #0]
 801dbf6:	4669      	mov	r1, sp
 801dbf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801dbfc:	f8ad 2004 	strh.w	r2, [sp, #4]
 801dc00:	f8ad 3006 	strh.w	r3, [sp, #6]
 801dc04:	6803      	ldr	r3, [r0, #0]
 801dc06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801dc08:	4798      	blx	r3
 801dc0a:	b003      	add	sp, #12
 801dc0c:	f85d fb04 	ldr.w	pc, [sp], #4
 801dc10:	24034220 	.word	0x24034220
 801dc14:	24034222 	.word	0x24034222

0801dc18 <_ZN8touchgfx11Application10invalidateEv>:
 801dc18:	4b09      	ldr	r3, [pc, #36]	@ (801dc40 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801dc1a:	b082      	sub	sp, #8
 801dc1c:	2100      	movs	r1, #0
 801dc1e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801dc22:	4b08      	ldr	r3, [pc, #32]	@ (801dc44 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801dc24:	f8ad 2004 	strh.w	r2, [sp, #4]
 801dc28:	aa02      	add	r2, sp, #8
 801dc2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801dc2e:	9100      	str	r1, [sp, #0]
 801dc30:	f8ad 3006 	strh.w	r3, [sp, #6]
 801dc34:	6803      	ldr	r3, [r0, #0]
 801dc36:	e912 0006 	ldmdb	r2, {r1, r2}
 801dc3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801dc3c:	b002      	add	sp, #8
 801dc3e:	4718      	bx	r3
 801dc40:	24034220 	.word	0x24034220
 801dc44:	24034222 	.word	0x24034222

0801dc48 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801dc48:	4b03      	ldr	r3, [pc, #12]	@ (801dc58 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801dc4a:	6818      	ldr	r0, [r3, #0]
 801dc4c:	b110      	cbz	r0, 801dc54 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801dc4e:	6803      	ldr	r3, [r0, #0]
 801dc50:	69db      	ldr	r3, [r3, #28]
 801dc52:	4718      	bx	r3
 801dc54:	4770      	bx	lr
 801dc56:	bf00      	nop
 801dc58:	24034270 	.word	0x24034270

0801dc5c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801dc5c:	4b03      	ldr	r3, [pc, #12]	@ (801dc6c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801dc5e:	6818      	ldr	r0, [r3, #0]
 801dc60:	b110      	cbz	r0, 801dc68 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801dc62:	6803      	ldr	r3, [r0, #0]
 801dc64:	6a1b      	ldr	r3, [r3, #32]
 801dc66:	4718      	bx	r3
 801dc68:	4770      	bx	lr
 801dc6a:	bf00      	nop
 801dc6c:	24034270 	.word	0x24034270

0801dc70 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801dc70:	2300      	movs	r3, #0
 801dc72:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 801dc76:	4770      	bx	lr

0801dc78 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801dc78:	4b03      	ldr	r3, [pc, #12]	@ (801dc88 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801dc7a:	6818      	ldr	r0, [r3, #0]
 801dc7c:	b110      	cbz	r0, 801dc84 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801dc7e:	6803      	ldr	r3, [r0, #0]
 801dc80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dc82:	4718      	bx	r3
 801dc84:	4770      	bx	lr
 801dc86:	bf00      	nop
 801dc88:	24034270 	.word	0x24034270

0801dc8c <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801dc8c:	b510      	push	{r4, lr}
 801dc8e:	f9b1 4000 	ldrsh.w	r4, [r1]
 801dc92:	888a      	ldrh	r2, [r1, #4]
 801dc94:	f9b0 3000 	ldrsh.w	r3, [r0]
 801dc98:	4422      	add	r2, r4
 801dc9a:	b212      	sxth	r2, r2
 801dc9c:	4293      	cmp	r3, r2
 801dc9e:	da15      	bge.n	801dccc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801dca0:	8882      	ldrh	r2, [r0, #4]
 801dca2:	4413      	add	r3, r2
 801dca4:	b21b      	sxth	r3, r3
 801dca6:	429c      	cmp	r4, r3
 801dca8:	da10      	bge.n	801dccc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801dcaa:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801dcae:	88c9      	ldrh	r1, [r1, #6]
 801dcb0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801dcb4:	4419      	add	r1, r3
 801dcb6:	b209      	sxth	r1, r1
 801dcb8:	428a      	cmp	r2, r1
 801dcba:	da07      	bge.n	801dccc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801dcbc:	88c0      	ldrh	r0, [r0, #6]
 801dcbe:	4410      	add	r0, r2
 801dcc0:	b200      	sxth	r0, r0
 801dcc2:	4283      	cmp	r3, r0
 801dcc4:	bfac      	ite	ge
 801dcc6:	2000      	movge	r0, #0
 801dcc8:	2001      	movlt	r0, #1
 801dcca:	bd10      	pop	{r4, pc}
 801dccc:	2000      	movs	r0, #0
 801dcce:	e7fc      	b.n	801dcca <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801dcd0 <_ZN8touchgfx4Rect10restrictToEss>:
 801dcd0:	f9b0 3000 	ldrsh.w	r3, [r0]
 801dcd4:	2b00      	cmp	r3, #0
 801dcd6:	b510      	push	{r4, lr}
 801dcd8:	da04      	bge.n	801dce4 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801dcda:	8884      	ldrh	r4, [r0, #4]
 801dcdc:	4423      	add	r3, r4
 801dcde:	8083      	strh	r3, [r0, #4]
 801dce0:	2300      	movs	r3, #0
 801dce2:	8003      	strh	r3, [r0, #0]
 801dce4:	f9b0 4000 	ldrsh.w	r4, [r0]
 801dce8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801dcec:	1b09      	subs	r1, r1, r4
 801dcee:	428b      	cmp	r3, r1
 801dcf0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801dcf4:	bfc8      	it	gt
 801dcf6:	8081      	strhgt	r1, [r0, #4]
 801dcf8:	2b00      	cmp	r3, #0
 801dcfa:	da04      	bge.n	801dd06 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801dcfc:	88c1      	ldrh	r1, [r0, #6]
 801dcfe:	440b      	add	r3, r1
 801dd00:	80c3      	strh	r3, [r0, #6]
 801dd02:	2300      	movs	r3, #0
 801dd04:	8043      	strh	r3, [r0, #2]
 801dd06:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801dd0a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801dd0e:	1a52      	subs	r2, r2, r1
 801dd10:	4293      	cmp	r3, r2
 801dd12:	bfc8      	it	gt
 801dd14:	80c2      	strhgt	r2, [r0, #6]
 801dd16:	bd10      	pop	{r4, pc}

0801dd18 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801dd18:	4b10      	ldr	r3, [pc, #64]	@ (801dd5c <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801dd1a:	b510      	push	{r4, lr}
 801dd1c:	460c      	mov	r4, r1
 801dd1e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801dd22:	4b0f      	ldr	r3, [pc, #60]	@ (801dd60 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801dd24:	4620      	mov	r0, r4
 801dd26:	f9b3 1000 	ldrsh.w	r1, [r3]
 801dd2a:	f7ff ffd1 	bl	801dcd0 <_ZN8touchgfx4Rect10restrictToEss>
 801dd2e:	4b0d      	ldr	r3, [pc, #52]	@ (801dd64 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801dd30:	6818      	ldr	r0, [r3, #0]
 801dd32:	b190      	cbz	r0, 801dd5a <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801dd34:	6803      	ldr	r3, [r0, #0]
 801dd36:	4621      	mov	r1, r4
 801dd38:	689b      	ldr	r3, [r3, #8]
 801dd3a:	4798      	blx	r3
 801dd3c:	4b0a      	ldr	r3, [pc, #40]	@ (801dd68 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801dd3e:	6818      	ldr	r0, [r3, #0]
 801dd40:	b118      	cbz	r0, 801dd4a <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801dd42:	6803      	ldr	r3, [r0, #0]
 801dd44:	4621      	mov	r1, r4
 801dd46:	689b      	ldr	r3, [r3, #8]
 801dd48:	4798      	blx	r3
 801dd4a:	4b08      	ldr	r3, [pc, #32]	@ (801dd6c <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801dd4c:	4621      	mov	r1, r4
 801dd4e:	6818      	ldr	r0, [r3, #0]
 801dd50:	6803      	ldr	r3, [r0, #0]
 801dd52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dd56:	69db      	ldr	r3, [r3, #28]
 801dd58:	4718      	bx	r3
 801dd5a:	bd10      	pop	{r4, pc}
 801dd5c:	24034222 	.word	0x24034222
 801dd60:	24034220 	.word	0x24034220
 801dd64:	24034270 	.word	0x24034270
 801dd68:	2403426c 	.word	0x2403426c
 801dd6c:	2403422c 	.word	0x2403422c

0801dd70 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801dd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dd72:	4606      	mov	r6, r0
 801dd74:	4608      	mov	r0, r1
 801dd76:	460f      	mov	r7, r1
 801dd78:	f7fb fd3f 	bl	80197fa <_ZNK8touchgfx4Rect7isEmptyEv>
 801dd7c:	b9e8      	cbnz	r0, 801ddba <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801dd7e:	f9b7 5000 	ldrsh.w	r5, [r7]
 801dd82:	f9b6 4000 	ldrsh.w	r4, [r6]
 801dd86:	42a5      	cmp	r5, r4
 801dd88:	db17      	blt.n	801ddba <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801dd8a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801dd8e:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801dd92:	429a      	cmp	r2, r3
 801dd94:	db11      	blt.n	801ddba <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801dd96:	88b9      	ldrh	r1, [r7, #4]
 801dd98:	440d      	add	r5, r1
 801dd9a:	88b1      	ldrh	r1, [r6, #4]
 801dd9c:	440c      	add	r4, r1
 801dd9e:	b22d      	sxth	r5, r5
 801dda0:	b224      	sxth	r4, r4
 801dda2:	42a5      	cmp	r5, r4
 801dda4:	dc09      	bgt.n	801ddba <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801dda6:	88f8      	ldrh	r0, [r7, #6]
 801dda8:	4410      	add	r0, r2
 801ddaa:	88f2      	ldrh	r2, [r6, #6]
 801ddac:	4413      	add	r3, r2
 801ddae:	b200      	sxth	r0, r0
 801ddb0:	b21b      	sxth	r3, r3
 801ddb2:	4298      	cmp	r0, r3
 801ddb4:	bfcc      	ite	gt
 801ddb6:	2000      	movgt	r0, #0
 801ddb8:	2001      	movle	r0, #1
 801ddba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801ddbc <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801ddbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ddbe:	4604      	mov	r4, r0
 801ddc0:	4608      	mov	r0, r1
 801ddc2:	460d      	mov	r5, r1
 801ddc4:	f7fb fd19 	bl	80197fa <_ZNK8touchgfx4Rect7isEmptyEv>
 801ddc8:	b978      	cbnz	r0, 801ddea <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801ddca:	4620      	mov	r0, r4
 801ddcc:	f7fb fd15 	bl	80197fa <_ZNK8touchgfx4Rect7isEmptyEv>
 801ddd0:	f9b5 6000 	ldrsh.w	r6, [r5]
 801ddd4:	b150      	cbz	r0, 801ddec <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801ddd6:	8026      	strh	r6, [r4, #0]
 801ddd8:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801dddc:	8063      	strh	r3, [r4, #2]
 801ddde:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801dde2:	80a3      	strh	r3, [r4, #4]
 801dde4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801dde8:	80e3      	strh	r3, [r4, #6]
 801ddea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ddec:	f9b4 1000 	ldrsh.w	r1, [r4]
 801ddf0:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801ddf4:	42b1      	cmp	r1, r6
 801ddf6:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801ddfa:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801ddfe:	460f      	mov	r7, r1
 801de00:	88ed      	ldrh	r5, [r5, #6]
 801de02:	bfa8      	it	ge
 801de04:	4637      	movge	r7, r6
 801de06:	4293      	cmp	r3, r2
 801de08:	4618      	mov	r0, r3
 801de0a:	4466      	add	r6, ip
 801de0c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801de10:	bfa8      	it	ge
 801de12:	4610      	movge	r0, r2
 801de14:	442a      	add	r2, r5
 801de16:	88e5      	ldrh	r5, [r4, #6]
 801de18:	4461      	add	r1, ip
 801de1a:	b236      	sxth	r6, r6
 801de1c:	8027      	strh	r7, [r4, #0]
 801de1e:	442b      	add	r3, r5
 801de20:	b209      	sxth	r1, r1
 801de22:	b212      	sxth	r2, r2
 801de24:	8060      	strh	r0, [r4, #2]
 801de26:	b21b      	sxth	r3, r3
 801de28:	428e      	cmp	r6, r1
 801de2a:	bfac      	ite	ge
 801de2c:	ebc7 0106 	rsbge	r1, r7, r6
 801de30:	ebc7 0101 	rsblt	r1, r7, r1
 801de34:	429a      	cmp	r2, r3
 801de36:	bfac      	ite	ge
 801de38:	ebc0 0202 	rsbge	r2, r0, r2
 801de3c:	ebc0 0203 	rsblt	r2, r0, r3
 801de40:	80a1      	strh	r1, [r4, #4]
 801de42:	80e2      	strh	r2, [r4, #6]
 801de44:	e7d1      	b.n	801ddea <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801de48 <_ZN8touchgfx11Application11getInstanceEv>:
 801de48:	4b01      	ldr	r3, [pc, #4]	@ (801de50 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801de4a:	6818      	ldr	r0, [r3, #0]
 801de4c:	4770      	bx	lr
 801de4e:	bf00      	nop
 801de50:	24034280 	.word	0x24034280

0801de54 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 801de54:	2300      	movs	r3, #0
 801de56:	b510      	push	{r4, lr}
 801de58:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 801de5c:	4604      	mov	r4, r0
 801de5e:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801de62:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 801de66:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 801de6a:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 801de6e:	429a      	cmp	r2, r3
 801de70:	d90e      	bls.n	801de90 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801de72:	18e2      	adds	r2, r4, r3
 801de74:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 801de78:	b122      	cbz	r2, 801de84 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 801de7a:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801de7e:	6803      	ldr	r3, [r0, #0]
 801de80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801de82:	4798      	blx	r3
 801de84:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 801de88:	3301      	adds	r3, #1
 801de8a:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 801de8e:	e7ea      	b.n	801de66 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 801de90:	bd10      	pop	{r4, pc}

0801de92 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 801de92:	2300      	movs	r3, #0
 801de94:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 801de98:	30a4      	adds	r0, #164	@ 0xa4
 801de9a:	f820 3c24 	strh.w	r3, [r0, #-36]
 801de9e:	f802 3b01 	strb.w	r3, [r2], #1
 801dea2:	4282      	cmp	r2, r0
 801dea4:	d1fb      	bne.n	801de9e <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 801dea6:	4770      	bx	lr

0801dea8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801dea8:	b570      	push	{r4, r5, r6, lr}
 801deaa:	4c0b      	ldr	r4, [pc, #44]	@ (801ded8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 801deac:	4605      	mov	r5, r0
 801deae:	460e      	mov	r6, r1
 801deb0:	6820      	ldr	r0, [r4, #0]
 801deb2:	b110      	cbz	r0, 801deba <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 801deb4:	6803      	ldr	r3, [r0, #0]
 801deb6:	695b      	ldr	r3, [r3, #20]
 801deb8:	4798      	blx	r3
 801deba:	1d28      	adds	r0, r5, #4
 801debc:	f7ff ffe9 	bl	801de92 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801dec0:	6026      	str	r6, [r4, #0]
 801dec2:	6833      	ldr	r3, [r6, #0]
 801dec4:	4630      	mov	r0, r6
 801dec6:	68db      	ldr	r3, [r3, #12]
 801dec8:	4798      	blx	r3
 801deca:	682b      	ldr	r3, [r5, #0]
 801decc:	4628      	mov	r0, r5
 801dece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ded0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ded4:	4718      	bx	r3
 801ded6:	bf00      	nop
 801ded8:	24034270 	.word	0x24034270

0801dedc <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 801dedc:	2300      	movs	r3, #0
 801dede:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 801dee2:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 801dee6:	461a      	mov	r2, r3
 801dee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801deea:	461c      	mov	r4, r3
 801deec:	461d      	mov	r5, r3
 801deee:	459c      	cmp	ip, r3
 801def0:	dd1a      	ble.n	801df28 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 801def2:	18c6      	adds	r6, r0, r3
 801def4:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 801def8:	b16e      	cbz	r6, 801df16 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 801defa:	429a      	cmp	r2, r3
 801defc:	d008      	beq.n	801df10 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 801defe:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 801df02:	fa1f fe82 	uxth.w	lr, r2
 801df06:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801df0a:	1887      	adds	r7, r0, r2
 801df0c:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 801df10:	3201      	adds	r2, #1
 801df12:	3301      	adds	r3, #1
 801df14:	e7eb      	b.n	801deee <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 801df16:	4299      	cmp	r1, r3
 801df18:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 801df1c:	bfa8      	it	ge
 801df1e:	3501      	addge	r5, #1
 801df20:	429e      	cmp	r6, r3
 801df22:	bfc8      	it	gt
 801df24:	3401      	addgt	r4, #1
 801df26:	e7f4      	b.n	801df12 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 801df28:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 801df2c:	1b49      	subs	r1, r1, r5
 801df2e:	1b1b      	subs	r3, r3, r4
 801df30:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 801df34:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 801df38:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801df3c:	4293      	cmp	r3, r2
 801df3e:	dd03      	ble.n	801df48 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 801df40:	3b01      	subs	r3, #1
 801df42:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 801df46:	e7f7      	b.n	801df38 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 801df48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801df4c <_ZN8touchgfx11Application15handleTickEventEv>:
 801df4c:	b570      	push	{r4, r5, r6, lr}
 801df4e:	4d16      	ldr	r5, [pc, #88]	@ (801dfa8 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 801df50:	4604      	mov	r4, r0
 801df52:	6828      	ldr	r0, [r5, #0]
 801df54:	b140      	cbz	r0, 801df68 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801df56:	7a03      	ldrb	r3, [r0, #8]
 801df58:	b933      	cbnz	r3, 801df68 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801df5a:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801df5e:	6803      	ldr	r3, [r0, #0]
 801df60:	689b      	ldr	r3, [r3, #8]
 801df62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801df66:	4718      	bx	r3
 801df68:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 801df6c:	4e0f      	ldr	r6, [pc, #60]	@ (801dfac <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 801df6e:	b973      	cbnz	r3, 801df8e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801df70:	b168      	cbz	r0, 801df8e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801df72:	7a03      	ldrb	r3, [r0, #8]
 801df74:	b15b      	cbz	r3, 801df8e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801df76:	6830      	ldr	r0, [r6, #0]
 801df78:	b110      	cbz	r0, 801df80 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801df7a:	6803      	ldr	r3, [r0, #0]
 801df7c:	691b      	ldr	r3, [r3, #16]
 801df7e:	4798      	blx	r3
 801df80:	6828      	ldr	r0, [r5, #0]
 801df82:	6803      	ldr	r3, [r0, #0]
 801df84:	68db      	ldr	r3, [r3, #12]
 801df86:	4798      	blx	r3
 801df88:	2301      	movs	r3, #1
 801df8a:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801df8e:	3404      	adds	r4, #4
 801df90:	4620      	mov	r0, r4
 801df92:	f7ff ff5f 	bl	801de54 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 801df96:	4620      	mov	r0, r4
 801df98:	f7ff ffa0 	bl	801dedc <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801df9c:	6830      	ldr	r0, [r6, #0]
 801df9e:	b110      	cbz	r0, 801dfa6 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 801dfa0:	6803      	ldr	r3, [r0, #0]
 801dfa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801dfa4:	e7dd      	b.n	801df62 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801dfa6:	bd70      	pop	{r4, r5, r6, pc}
 801dfa8:	24034274 	.word	0x24034274
 801dfac:	24034270 	.word	0x24034270

0801dfb0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801dfb0:	4603      	mov	r3, r0
 801dfb2:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 801dfb6:	2200      	movs	r2, #0
 801dfb8:	801a      	strh	r2, [r3, #0]
 801dfba:	3308      	adds	r3, #8
 801dfbc:	f823 2c06 	strh.w	r2, [r3, #-6]
 801dfc0:	f823 2c04 	strh.w	r2, [r3, #-4]
 801dfc4:	f823 2c02 	strh.w	r2, [r3, #-2]
 801dfc8:	428b      	cmp	r3, r1
 801dfca:	d1f5      	bne.n	801dfb8 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801dfcc:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 801dfd0:	4770      	bx	lr
	...

0801dfd4 <_ZN8touchgfx11ApplicationC1Ev>:
 801dfd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dfd6:	4b1d      	ldr	r3, [pc, #116]	@ (801e04c <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801dfd8:	4606      	mov	r6, r0
 801dfda:	4604      	mov	r4, r0
 801dfdc:	2500      	movs	r5, #0
 801dfde:	f846 3b04 	str.w	r3, [r6], #4
 801dfe2:	22a8      	movs	r2, #168	@ 0xa8
 801dfe4:	2100      	movs	r1, #0
 801dfe6:	4630      	mov	r0, r6
 801dfe8:	f00e fb4a 	bl	802c680 <memset>
 801dfec:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 801dff0:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 801dff4:	4f16      	ldr	r7, [pc, #88]	@ (801e050 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801dff6:	f7ff ffdb 	bl	801dfb0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801dffa:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 801dffe:	f7ff ffd7 	bl	801dfb0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801e002:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 801e006:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 801e00a:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 801e00e:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 801e012:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 801e016:	490f      	ldr	r1, [pc, #60]	@ (801e054 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801e018:	480f      	ldr	r0, [pc, #60]	@ (801e058 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801e01a:	f00c fead 	bl	802ad78 <CRC_Lock>
 801e01e:	4b0f      	ldr	r3, [pc, #60]	@ (801e05c <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 801e020:	b158      	cbz	r0, 801e03a <_ZN8touchgfx11ApplicationC1Ev+0x66>
 801e022:	801d      	strh	r5, [r3, #0]
 801e024:	2300      	movs	r3, #0
 801e026:	4a0e      	ldr	r2, [pc, #56]	@ (801e060 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 801e028:	4630      	mov	r0, r6
 801e02a:	6013      	str	r3, [r2, #0]
 801e02c:	4a0d      	ldr	r2, [pc, #52]	@ (801e064 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 801e02e:	603b      	str	r3, [r7, #0]
 801e030:	6013      	str	r3, [r2, #0]
 801e032:	f7ff ff2e 	bl	801de92 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801e036:	4620      	mov	r0, r4
 801e038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e03a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801e03e:	2002      	movs	r0, #2
 801e040:	801a      	strh	r2, [r3, #0]
 801e042:	6038      	str	r0, [r7, #0]
 801e044:	f001 fd6c 	bl	801fb20 <_ZN8touchgfx6Screen4drawEv>
 801e048:	e7ec      	b.n	801e024 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 801e04a:	bf00      	nop
 801e04c:	0802ef64 	.word	0x0802ef64
 801e050:	24034270 	.word	0x24034270
 801e054:	b5e8b5cd 	.word	0xb5e8b5cd
 801e058:	f407a5c2 	.word	0xf407a5c2
 801e05c:	24000050 	.word	0x24000050
 801e060:	24034280 	.word	0x24034280
 801e064:	24034274 	.word	0x24034274

0801e068 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801e068:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 801e06c:	3b01      	subs	r3, #1
 801e06e:	b29b      	uxth	r3, r3
 801e070:	428b      	cmp	r3, r1
 801e072:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 801e076:	b510      	push	{r4, lr}
 801e078:	d908      	bls.n	801e08c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801e07a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801e07e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801e082:	681a      	ldr	r2, [r3, #0]
 801e084:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801e088:	685a      	ldr	r2, [r3, #4]
 801e08a:	6062      	str	r2, [r4, #4]
 801e08c:	bd10      	pop	{r4, pc}
	...

0801e090 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801e090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e094:	b08f      	sub	sp, #60	@ 0x3c
 801e096:	4b8f      	ldr	r3, [pc, #572]	@ (801e2d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 801e098:	4683      	mov	fp, r0
 801e09a:	ac0a      	add	r4, sp, #40	@ 0x28
 801e09c:	e884 0006 	stmia.w	r4, {r1, r2}
 801e0a0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e0a4:	4620      	mov	r0, r4
 801e0a6:	4b8c      	ldr	r3, [pc, #560]	@ (801e2d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 801e0a8:	f9b3 1000 	ldrsh.w	r1, [r3]
 801e0ac:	f7ff fe10 	bl	801dcd0 <_ZN8touchgfx4Rect10restrictToEss>
 801e0b0:	4620      	mov	r0, r4
 801e0b2:	f7fb fba2 	bl	80197fa <_ZNK8touchgfx4Rect7isEmptyEv>
 801e0b6:	2800      	cmp	r0, #0
 801e0b8:	d16a      	bne.n	801e190 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801e0ba:	9403      	str	r4, [sp, #12]
 801e0bc:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 801e0c0:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 801e0c4:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 801e0c8:	9301      	str	r3, [sp, #4]
 801e0ca:	35a4      	adds	r5, #164	@ 0xa4
 801e0cc:	b15c      	cbz	r4, 801e0e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801e0ce:	4629      	mov	r1, r5
 801e0d0:	9803      	ldr	r0, [sp, #12]
 801e0d2:	f7ff fe4d 	bl	801dd70 <_ZNK8touchgfx4Rect8includesERKS0_>
 801e0d6:	3c01      	subs	r4, #1
 801e0d8:	b118      	cbz	r0, 801e0e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 801e0da:	b2a1      	uxth	r1, r4
 801e0dc:	9801      	ldr	r0, [sp, #4]
 801e0de:	f7ff ffc3 	bl	801e068 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801e0e2:	3d08      	subs	r5, #8
 801e0e4:	e7f2      	b.n	801e0cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 801e0e6:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 801e0ea:	f10a 33ff 	add.w	r3, sl, #4294967295
 801e0ee:	f8cd a010 	str.w	sl, [sp, #16]
 801e0f2:	9302      	str	r3, [sp, #8]
 801e0f4:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801e0f8:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 801e0fc:	9306      	str	r3, [sp, #24]
 801e0fe:	445c      	add	r4, fp
 801e100:	2500      	movs	r5, #0
 801e102:	4626      	mov	r6, r4
 801e104:	f8cd a014 	str.w	sl, [sp, #20]
 801e108:	462f      	mov	r7, r5
 801e10a:	9b05      	ldr	r3, [sp, #20]
 801e10c:	2b00      	cmp	r3, #0
 801e10e:	d073      	beq.n	801e1f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801e110:	9903      	ldr	r1, [sp, #12]
 801e112:	4630      	mov	r0, r6
 801e114:	f7ff fdba 	bl	801dc8c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801e118:	b350      	cbz	r0, 801e170 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801e11a:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 801e11e:	f9b6 c000 	ldrsh.w	ip, [r6]
 801e122:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 801e126:	45e6      	cmp	lr, ip
 801e128:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801e12c:	db33      	blt.n	801e196 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801e12e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801e132:	88b3      	ldrh	r3, [r6, #4]
 801e134:	4472      	add	r2, lr
 801e136:	4463      	add	r3, ip
 801e138:	b212      	sxth	r2, r2
 801e13a:	b21b      	sxth	r3, r3
 801e13c:	429a      	cmp	r2, r3
 801e13e:	dc2a      	bgt.n	801e196 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801e140:	fa1f f289 	uxth.w	r2, r9
 801e144:	88f3      	ldrh	r3, [r6, #6]
 801e146:	45c8      	cmp	r8, r9
 801e148:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 801e14c:	4413      	add	r3, r2
 801e14e:	fa1f fc88 	uxth.w	ip, r8
 801e152:	b29b      	uxth	r3, r3
 801e154:	fa0f fe83 	sxth.w	lr, r3
 801e158:	db0f      	blt.n	801e17a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801e15a:	eba3 030c 	sub.w	r3, r3, ip
 801e15e:	1ac9      	subs	r1, r1, r3
 801e160:	b209      	sxth	r1, r1
 801e162:	2900      	cmp	r1, #0
 801e164:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801e168:	dd12      	ble.n	801e190 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801e16a:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 801e16e:	4605      	mov	r5, r0
 801e170:	9b05      	ldr	r3, [sp, #20]
 801e172:	3e08      	subs	r6, #8
 801e174:	3b01      	subs	r3, #1
 801e176:	9305      	str	r3, [sp, #20]
 801e178:	e7c7      	b.n	801e10a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801e17a:	4461      	add	r1, ip
 801e17c:	b209      	sxth	r1, r1
 801e17e:	4571      	cmp	r1, lr
 801e180:	dc38      	bgt.n	801e1f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801e182:	eba2 020c 	sub.w	r2, r2, ip
 801e186:	b212      	sxth	r2, r2
 801e188:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 801e18c:	2a00      	cmp	r2, #0
 801e18e:	dcee      	bgt.n	801e16e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801e190:	b00f      	add	sp, #60	@ 0x3c
 801e192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e196:	45c8      	cmp	r8, r9
 801e198:	db2c      	blt.n	801e1f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801e19a:	88f3      	ldrh	r3, [r6, #6]
 801e19c:	4499      	add	r9, r3
 801e19e:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 801e1a2:	4498      	add	r8, r3
 801e1a4:	fa0f f989 	sxth.w	r9, r9
 801e1a8:	fa0f f888 	sxth.w	r8, r8
 801e1ac:	45c1      	cmp	r9, r8
 801e1ae:	db21      	blt.n	801e1f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801e1b0:	fa1f f28c 	uxth.w	r2, ip
 801e1b4:	88b3      	ldrh	r3, [r6, #4]
 801e1b6:	45e6      	cmp	lr, ip
 801e1b8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801e1bc:	4413      	add	r3, r2
 801e1be:	fa1f f88e 	uxth.w	r8, lr
 801e1c2:	b29b      	uxth	r3, r3
 801e1c4:	fa0f f983 	sxth.w	r9, r3
 801e1c8:	db0a      	blt.n	801e1e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 801e1ca:	eba3 0308 	sub.w	r3, r3, r8
 801e1ce:	1ac9      	subs	r1, r1, r3
 801e1d0:	b209      	sxth	r1, r1
 801e1d2:	2900      	cmp	r1, #0
 801e1d4:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 801e1d8:	ddda      	ble.n	801e190 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801e1da:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801e1de:	e7c6      	b.n	801e16e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801e1e0:	4441      	add	r1, r8
 801e1e2:	b209      	sxth	r1, r1
 801e1e4:	4549      	cmp	r1, r9
 801e1e6:	dc05      	bgt.n	801e1f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801e1e8:	eba2 0208 	sub.w	r2, r2, r8
 801e1ec:	b212      	sxth	r2, r2
 801e1ee:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 801e1f2:	e7cb      	b.n	801e18c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 801e1f4:	4607      	mov	r7, r0
 801e1f6:	e7bb      	b.n	801e170 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801e1f8:	2d00      	cmp	r5, #0
 801e1fa:	d181      	bne.n	801e100 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 801e1fc:	2f00      	cmp	r7, #0
 801e1fe:	f000 81dd 	beq.w	801e5bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801e202:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 801e206:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 801e20a:	b2b3      	uxth	r3, r6
 801e20c:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 801e210:	9305      	str	r3, [sp, #20]
 801e212:	9a05      	ldr	r2, [sp, #20]
 801e214:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801e218:	4413      	add	r3, r2
 801e21a:	b2ba      	uxth	r2, r7
 801e21c:	4492      	add	sl, r2
 801e21e:	b29b      	uxth	r3, r3
 801e220:	fa1f fa8a 	uxth.w	sl, sl
 801e224:	fa0f f883 	sxth.w	r8, r3
 801e228:	fa0f f98a 	sxth.w	r9, sl
 801e22c:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801e230:	9b04      	ldr	r3, [sp, #16]
 801e232:	2b00      	cmp	r3, #0
 801e234:	d052      	beq.n	801e2dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801e236:	9903      	ldr	r1, [sp, #12]
 801e238:	4620      	mov	r0, r4
 801e23a:	f7ff fd27 	bl	801dc8c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801e23e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801e242:	b1c0      	cbz	r0, 801e276 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801e244:	f9b4 e000 	ldrsh.w	lr, [r4]
 801e248:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801e24c:	4576      	cmp	r6, lr
 801e24e:	dc22      	bgt.n	801e296 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801e250:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801e254:	44f4      	add	ip, lr
 801e256:	fa0f fc8c 	sxth.w	ip, ip
 801e25a:	45e0      	cmp	r8, ip
 801e25c:	db1b      	blt.n	801e296 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801e25e:	428f      	cmp	r7, r1
 801e260:	fa1f fc81 	uxth.w	ip, r1
 801e264:	88e1      	ldrh	r1, [r4, #6]
 801e266:	dc0d      	bgt.n	801e284 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 801e268:	ebaa 0c0c 	sub.w	ip, sl, ip
 801e26c:	f8a4 9002 	strh.w	r9, [r4, #2]
 801e270:	eba1 010c 	sub.w	r1, r1, ip
 801e274:	80e1      	strh	r1, [r4, #6]
 801e276:	4628      	mov	r0, r5
 801e278:	9904      	ldr	r1, [sp, #16]
 801e27a:	3c08      	subs	r4, #8
 801e27c:	4605      	mov	r5, r0
 801e27e:	3901      	subs	r1, #1
 801e280:	9104      	str	r1, [sp, #16]
 801e282:	e7d3      	b.n	801e22c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 801e284:	4461      	add	r1, ip
 801e286:	b209      	sxth	r1, r1
 801e288:	4549      	cmp	r1, r9
 801e28a:	dcf5      	bgt.n	801e278 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801e28c:	eba2 0c0c 	sub.w	ip, r2, ip
 801e290:	f8a4 c006 	strh.w	ip, [r4, #6]
 801e294:	e7ef      	b.n	801e276 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801e296:	428f      	cmp	r7, r1
 801e298:	dcee      	bgt.n	801e278 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801e29a:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 801e29e:	4461      	add	r1, ip
 801e2a0:	b209      	sxth	r1, r1
 801e2a2:	4589      	cmp	r9, r1
 801e2a4:	dbe8      	blt.n	801e278 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801e2a6:	4576      	cmp	r6, lr
 801e2a8:	fa1f fc8e 	uxth.w	ip, lr
 801e2ac:	88a1      	ldrh	r1, [r4, #4]
 801e2ae:	dc07      	bgt.n	801e2c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 801e2b0:	eba3 0c0c 	sub.w	ip, r3, ip
 801e2b4:	f8a4 8000 	strh.w	r8, [r4]
 801e2b8:	eba1 010c 	sub.w	r1, r1, ip
 801e2bc:	80a1      	strh	r1, [r4, #4]
 801e2be:	e7da      	b.n	801e276 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801e2c0:	4461      	add	r1, ip
 801e2c2:	b209      	sxth	r1, r1
 801e2c4:	4588      	cmp	r8, r1
 801e2c6:	dbd7      	blt.n	801e278 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801e2c8:	9905      	ldr	r1, [sp, #20]
 801e2ca:	eba1 0c0c 	sub.w	ip, r1, ip
 801e2ce:	f8a4 c004 	strh.w	ip, [r4, #4]
 801e2d2:	e7d0      	b.n	801e276 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801e2d4:	24034222 	.word	0x24034222
 801e2d8:	24034220 	.word	0x24034220
 801e2dc:	2d00      	cmp	r5, #0
 801e2de:	f000 816d 	beq.w	801e5bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801e2e2:	9b06      	ldr	r3, [sp, #24]
 801e2e4:	445b      	add	r3, fp
 801e2e6:	461c      	mov	r4, r3
 801e2e8:	9b02      	ldr	r3, [sp, #8]
 801e2ea:	3301      	adds	r3, #1
 801e2ec:	f000 8166 	beq.w	801e5bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801e2f0:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 801e2f4:	9803      	ldr	r0, [sp, #12]
 801e2f6:	4629      	mov	r1, r5
 801e2f8:	f7ff fd3a 	bl	801dd70 <_ZNK8touchgfx4Rect8includesERKS0_>
 801e2fc:	b120      	cbz	r0, 801e308 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 801e2fe:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801e302:	9801      	ldr	r0, [sp, #4]
 801e304:	f7ff feb0 	bl	801e068 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801e308:	9903      	ldr	r1, [sp, #12]
 801e30a:	4628      	mov	r0, r5
 801e30c:	f7ff fcbe 	bl	801dc8c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801e310:	2800      	cmp	r0, #0
 801e312:	f000 809c 	beq.w	801e44e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801e316:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 801e31a:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801e31e:	fa1f f189 	uxth.w	r1, r9
 801e322:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 801e326:	9309      	str	r3, [sp, #36]	@ 0x24
 801e328:	eb01 0c03 	add.w	ip, r1, r3
 801e32c:	b283      	uxth	r3, r0
 801e32e:	4548      	cmp	r0, r9
 801e330:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 801e334:	fa1f fa8c 	uxth.w	sl, ip
 801e338:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 801e33c:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 801e340:	eb03 050c 	add.w	r5, r3, ip
 801e344:	b2ad      	uxth	r5, r5
 801e346:	9505      	str	r5, [sp, #20]
 801e348:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801e34c:	9504      	str	r5, [sp, #16]
 801e34e:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 801e352:	f340 8099 	ble.w	801e488 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 801e356:	1a5b      	subs	r3, r3, r1
 801e358:	4596      	cmp	lr, r2
 801e35a:	fa0f f08a 	sxth.w	r0, sl
 801e35e:	b29b      	uxth	r3, r3
 801e360:	b21e      	sxth	r6, r3
 801e362:	dd2e      	ble.n	801e3c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 801e364:	9f02      	ldr	r7, [sp, #8]
 801e366:	fa1f fe8e 	uxth.w	lr, lr
 801e36a:	b292      	uxth	r2, r2
 801e36c:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 801e370:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801e374:	9f04      	ldr	r7, [sp, #16]
 801e376:	ebae 0102 	sub.w	r1, lr, r2
 801e37a:	44a6      	add	lr, r4
 801e37c:	1a3f      	subs	r7, r7, r0
 801e37e:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 801e382:	b289      	uxth	r1, r1
 801e384:	4402      	add	r2, r0
 801e386:	fa0f fe8e 	sxth.w	lr, lr
 801e38a:	b20d      	sxth	r5, r1
 801e38c:	b212      	sxth	r2, r2
 801e38e:	436f      	muls	r7, r5
 801e390:	ebae 0202 	sub.w	r2, lr, r2
 801e394:	4372      	muls	r2, r6
 801e396:	4297      	cmp	r7, r2
 801e398:	db09      	blt.n	801e3ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801e39a:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 801e39e:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 801e3a2:	449c      	add	ip, r3
 801e3a4:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801e3a8:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 801e3ac:	e686      	b.n	801e0bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801e3ae:	4421      	add	r1, r4
 801e3b0:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 801e3b4:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 801e3b8:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801e3bc:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801e3c0:	e67c      	b.n	801e0bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801e3c2:	9f04      	ldr	r7, [sp, #16]
 801e3c4:	42b8      	cmp	r0, r7
 801e3c6:	da27      	bge.n	801e418 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801e3c8:	9902      	ldr	r1, [sp, #8]
 801e3ca:	1a3f      	subs	r7, r7, r0
 801e3cc:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 801e3d0:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 801e3d4:	eb05 010e 	add.w	r1, r5, lr
 801e3d8:	fa1f f881 	uxth.w	r8, r1
 801e3dc:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 801e3e0:	4411      	add	r1, r2
 801e3e2:	fa0f f988 	sxth.w	r9, r8
 801e3e6:	eba2 020e 	sub.w	r2, r2, lr
 801e3ea:	eba1 0108 	sub.w	r1, r1, r8
 801e3ee:	4372      	muls	r2, r6
 801e3f0:	b289      	uxth	r1, r1
 801e3f2:	fa0f f881 	sxth.w	r8, r1
 801e3f6:	fb08 f707 	mul.w	r7, r8, r7
 801e3fa:	42ba      	cmp	r2, r7
 801e3fc:	dc06      	bgt.n	801e40c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 801e3fe:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 801e402:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 801e406:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 801e40a:	e7ca      	b.n	801e3a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 801e40c:	4429      	add	r1, r5
 801e40e:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 801e412:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801e416:	e651      	b.n	801e0bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801e418:	9805      	ldr	r0, [sp, #20]
 801e41a:	2d06      	cmp	r5, #6
 801e41c:	ebaa 0000 	sub.w	r0, sl, r0
 801e420:	b280      	uxth	r0, r0
 801e422:	fa0f fe80 	sxth.w	lr, r0
 801e426:	d817      	bhi.n	801e458 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 801e428:	9b04      	ldr	r3, [sp, #16]
 801e42a:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 801e42e:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 801e432:	1c6b      	adds	r3, r5, #1
 801e434:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 801e438:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 801e43c:	9b01      	ldr	r3, [sp, #4]
 801e43e:	9801      	ldr	r0, [sp, #4]
 801e440:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801e444:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801e448:	805a      	strh	r2, [r3, #2]
 801e44a:	809e      	strh	r6, [r3, #4]
 801e44c:	80d9      	strh	r1, [r3, #6]
 801e44e:	9b02      	ldr	r3, [sp, #8]
 801e450:	3c08      	subs	r4, #8
 801e452:	3b01      	subs	r3, #1
 801e454:	9302      	str	r3, [sp, #8]
 801e456:	e747      	b.n	801e2e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 801e458:	9a02      	ldr	r2, [sp, #8]
 801e45a:	45b6      	cmp	lr, r6
 801e45c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801e460:	db0d      	blt.n	801e47e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801e462:	449c      	add	ip, r3
 801e464:	445a      	add	r2, fp
 801e466:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801e46a:	fa1f fc8c 	uxth.w	ip, ip
 801e46e:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 801e472:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 801e476:	448c      	add	ip, r1
 801e478:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 801e47c:	e61e      	b.n	801e0bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801e47e:	445a      	add	r2, fp
 801e480:	4484      	add	ip, r0
 801e482:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 801e486:	e78f      	b.n	801e3a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801e488:	fa1f f18e 	uxth.w	r1, lr
 801e48c:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 801e490:	b293      	uxth	r3, r2
 801e492:	4596      	cmp	lr, r2
 801e494:	eb01 0806 	add.w	r8, r1, r6
 801e498:	9306      	str	r3, [sp, #24]
 801e49a:	fa1f f888 	uxth.w	r8, r8
 801e49e:	9f06      	ldr	r7, [sp, #24]
 801e4a0:	fa0f f388 	sxth.w	r3, r8
 801e4a4:	9307      	str	r3, [sp, #28]
 801e4a6:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801e4aa:	443b      	add	r3, r7
 801e4ac:	b29b      	uxth	r3, r3
 801e4ae:	9308      	str	r3, [sp, #32]
 801e4b0:	da24      	bge.n	801e4fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 801e4b2:	9905      	ldr	r1, [sp, #20]
 801e4b4:	eba3 0308 	sub.w	r3, r3, r8
 801e4b8:	eba2 020e 	sub.w	r2, r2, lr
 801e4bc:	eba9 0000 	sub.w	r0, r9, r0
 801e4c0:	ebaa 0401 	sub.w	r4, sl, r1
 801e4c4:	b29b      	uxth	r3, r3
 801e4c6:	b2a4      	uxth	r4, r4
 801e4c8:	b219      	sxth	r1, r3
 801e4ca:	b225      	sxth	r5, r4
 801e4cc:	4348      	muls	r0, r1
 801e4ce:	436a      	muls	r2, r5
 801e4d0:	4282      	cmp	r2, r0
 801e4d2:	9a02      	ldr	r2, [sp, #8]
 801e4d4:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801e4d8:	445a      	add	r2, fp
 801e4da:	dc06      	bgt.n	801e4ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 801e4dc:	9b07      	ldr	r3, [sp, #28]
 801e4de:	44a4      	add	ip, r4
 801e4e0:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 801e4e4:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 801e4e8:	e75e      	b.n	801e3a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801e4ea:	9904      	ldr	r1, [sp, #16]
 801e4ec:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 801e4f0:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 801e4f4:	4433      	add	r3, r6
 801e4f6:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801e4fa:	e5df      	b.n	801e0bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801e4fc:	9f06      	ldr	r7, [sp, #24]
 801e4fe:	9b04      	ldr	r3, [sp, #16]
 801e500:	1bc9      	subs	r1, r1, r7
 801e502:	fa0f f78a 	sxth.w	r7, sl
 801e506:	b289      	uxth	r1, r1
 801e508:	429f      	cmp	r7, r3
 801e50a:	fa0f fe81 	sxth.w	lr, r1
 801e50e:	dd23      	ble.n	801e558 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 801e510:	9a05      	ldr	r2, [sp, #20]
 801e512:	eba9 0000 	sub.w	r0, r9, r0
 801e516:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801e51a:	ebaa 0202 	sub.w	r2, sl, r2
 801e51e:	9d07      	ldr	r5, [sp, #28]
 801e520:	fb0e f000 	mul.w	r0, lr, r0
 801e524:	b292      	uxth	r2, r2
 801e526:	eba5 0a03 	sub.w	sl, r5, r3
 801e52a:	9b02      	ldr	r3, [sp, #8]
 801e52c:	b214      	sxth	r4, r2
 801e52e:	00db      	lsls	r3, r3, #3
 801e530:	fb04 fa0a 	mul.w	sl, r4, sl
 801e534:	445b      	add	r3, fp
 801e536:	4550      	cmp	r0, sl
 801e538:	db03      	blt.n	801e542 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 801e53a:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 801e53e:	4494      	add	ip, r2
 801e540:	e732      	b.n	801e3a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801e542:	9a04      	ldr	r2, [sp, #16]
 801e544:	4431      	add	r1, r6
 801e546:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 801e54a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 801e54e:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 801e552:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801e556:	e75c      	b.n	801e412 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 801e558:	9b08      	ldr	r3, [sp, #32]
 801e55a:	2d06      	cmp	r5, #6
 801e55c:	eba3 0308 	sub.w	r3, r3, r8
 801e560:	b29b      	uxth	r3, r3
 801e562:	b218      	sxth	r0, r3
 801e564:	d813      	bhi.n	801e58e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 801e566:	9b07      	ldr	r3, [sp, #28]
 801e568:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 801e56c:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 801e570:	1c6b      	adds	r3, r5, #1
 801e572:	9901      	ldr	r1, [sp, #4]
 801e574:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 801e578:	9b01      	ldr	r3, [sp, #4]
 801e57a:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 801e57e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801e582:	805a      	strh	r2, [r3, #2]
 801e584:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e586:	f8a3 e006 	strh.w	lr, [r3, #6]
 801e58a:	809a      	strh	r2, [r3, #4]
 801e58c:	e75f      	b.n	801e44e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801e58e:	9c02      	ldr	r4, [sp, #8]
 801e590:	4570      	cmp	r0, lr
 801e592:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801e596:	db0d      	blt.n	801e5b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 801e598:	4431      	add	r1, r6
 801e59a:	9b06      	ldr	r3, [sp, #24]
 801e59c:	445c      	add	r4, fp
 801e59e:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 801e5a2:	b289      	uxth	r1, r1
 801e5a4:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 801e5a8:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801e5ac:	4419      	add	r1, r3
 801e5ae:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 801e5b2:	e583      	b.n	801e0bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801e5b4:	445c      	add	r4, fp
 801e5b6:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 801e5ba:	e79b      	b.n	801e4f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 801e5bc:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 801e5c0:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 801e5c4:	1e65      	subs	r5, r4, #1
 801e5c6:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 801e5ca:	b2ad      	uxth	r5, r5
 801e5cc:	42b5      	cmp	r5, r6
 801e5ce:	d044      	beq.n	801e65a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 801e5d0:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 801e5d4:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 801e5d8:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 801e5dc:	4282      	cmp	r2, r0
 801e5de:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 801e5e2:	d11f      	bne.n	801e624 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801e5e4:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 801e5e8:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 801e5ec:	459c      	cmp	ip, r3
 801e5ee:	d119      	bne.n	801e624 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801e5f0:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 801e5f4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801e5f8:	19d8      	adds	r0, r3, r7
 801e5fa:	b200      	sxth	r0, r0
 801e5fc:	4288      	cmp	r0, r1
 801e5fe:	d109      	bne.n	801e614 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 801e600:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 801e604:	4413      	add	r3, r2
 801e606:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 801e60a:	4629      	mov	r1, r5
 801e60c:	9801      	ldr	r0, [sp, #4]
 801e60e:	f7ff fd2b 	bl	801e068 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801e612:	e003      	b.n	801e61c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801e614:	4411      	add	r1, r2
 801e616:	b209      	sxth	r1, r1
 801e618:	42b9      	cmp	r1, r7
 801e61a:	d0f3      	beq.n	801e604 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 801e61c:	3d01      	subs	r5, #1
 801e61e:	3c08      	subs	r4, #8
 801e620:	b2ad      	uxth	r5, r5
 801e622:	e7d3      	b.n	801e5cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 801e624:	42b9      	cmp	r1, r7
 801e626:	d1f9      	bne.n	801e61c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801e628:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 801e62c:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801e630:	4299      	cmp	r1, r3
 801e632:	d1f3      	bne.n	801e61c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801e634:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801e638:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 801e63c:	181f      	adds	r7, r3, r0
 801e63e:	b23f      	sxth	r7, r7
 801e640:	42ba      	cmp	r2, r7
 801e642:	d105      	bne.n	801e650 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 801e644:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 801e648:	440b      	add	r3, r1
 801e64a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801e64e:	e7dc      	b.n	801e60a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 801e650:	440a      	add	r2, r1
 801e652:	b212      	sxth	r2, r2
 801e654:	4290      	cmp	r0, r2
 801e656:	d1e1      	bne.n	801e61c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801e658:	e7f6      	b.n	801e648 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 801e65a:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 801e65e:	2e07      	cmp	r6, #7
 801e660:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801e664:	d812      	bhi.n	801e68c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 801e666:	1c75      	adds	r5, r6, #1
 801e668:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 801e66c:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 801e670:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 801e674:	9d01      	ldr	r5, [sp, #4]
 801e676:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801e67a:	442c      	add	r4, r5
 801e67c:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801e680:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801e684:	8061      	strh	r1, [r4, #2]
 801e686:	80a2      	strh	r2, [r4, #4]
 801e688:	80e3      	strh	r3, [r4, #6]
 801e68a:	e581      	b.n	801e190 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801e68c:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 801e690:	3e01      	subs	r6, #1
 801e692:	445c      	add	r4, fp
 801e694:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 801e698:	f04f 37ff 	mov.w	r7, #4294967295
 801e69c:	2500      	movs	r5, #0
 801e69e:	9305      	str	r3, [sp, #20]
 801e6a0:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801e6a4:	1e72      	subs	r2, r6, #1
 801e6a6:	9302      	str	r3, [sp, #8]
 801e6a8:	4691      	mov	r9, r2
 801e6aa:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 801e6ae:	9304      	str	r3, [sp, #16]
 801e6b0:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 801e6b4:	f1b9 3fff 	cmp.w	r9, #4294967295
 801e6b8:	6818      	ldr	r0, [r3, #0]
 801e6ba:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801e6be:	9207      	str	r2, [sp, #28]
 801e6c0:	bf16      	itet	ne
 801e6c2:	9905      	ldrne	r1, [sp, #20]
 801e6c4:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801e6c8:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801e6cc:	9306      	str	r3, [sp, #24]
 801e6ce:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801e6d2:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801e6d6:	fb18 f801 	smulbb	r8, r8, r1
 801e6da:	6859      	ldr	r1, [r3, #4]
 801e6dc:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801e6e0:	4671      	mov	r1, lr
 801e6e2:	a80c      	add	r0, sp, #48	@ 0x30
 801e6e4:	f7ff fb6a 	bl	801ddbc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801e6e8:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 801e6ec:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 801e6f0:	f04f 0c08 	mov.w	ip, #8
 801e6f4:	9b04      	ldr	r3, [sp, #16]
 801e6f6:	9a02      	ldr	r2, [sp, #8]
 801e6f8:	fb10 f001 	smulbb	r0, r0, r1
 801e6fc:	fb02 8803 	mla	r8, r2, r3, r8
 801e700:	eba0 0108 	sub.w	r1, r0, r8
 801e704:	fb90 f0fc 	sdiv	r0, r0, ip
 801e708:	4288      	cmp	r0, r1
 801e70a:	dc20      	bgt.n	801e74e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 801e70c:	4551      	cmp	r1, sl
 801e70e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801e712:	da03      	bge.n	801e71c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 801e714:	b1d9      	cbz	r1, 801e74e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 801e716:	468a      	mov	sl, r1
 801e718:	464f      	mov	r7, r9
 801e71a:	4635      	mov	r5, r6
 801e71c:	f109 39ff 	add.w	r9, r9, #4294967295
 801e720:	f119 0f02 	cmn.w	r9, #2
 801e724:	d1c6      	bne.n	801e6b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 801e726:	4616      	mov	r6, r2
 801e728:	3201      	adds	r2, #1
 801e72a:	f1a4 0408 	sub.w	r4, r4, #8
 801e72e:	d1b7      	bne.n	801e6a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 801e730:	9b01      	ldr	r3, [sp, #4]
 801e732:	b2ac      	uxth	r4, r5
 801e734:	00ed      	lsls	r5, r5, #3
 801e736:	1958      	adds	r0, r3, r5
 801e738:	1c7b      	adds	r3, r7, #1
 801e73a:	d10b      	bne.n	801e754 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 801e73c:	4601      	mov	r1, r0
 801e73e:	9803      	ldr	r0, [sp, #12]
 801e740:	f7ff fb3c 	bl	801ddbc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801e744:	4621      	mov	r1, r4
 801e746:	9801      	ldr	r0, [sp, #4]
 801e748:	f7ff fc8e 	bl	801e068 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801e74c:	e4b6      	b.n	801e0bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801e74e:	464f      	mov	r7, r9
 801e750:	4635      	mov	r5, r6
 801e752:	e7ed      	b.n	801e730 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 801e754:	9b01      	ldr	r3, [sp, #4]
 801e756:	00ff      	lsls	r7, r7, #3
 801e758:	445d      	add	r5, fp
 801e75a:	19d9      	adds	r1, r3, r7
 801e75c:	445f      	add	r7, fp
 801e75e:	f7ff fb2d 	bl	801ddbc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801e762:	9b03      	ldr	r3, [sp, #12]
 801e764:	cb03      	ldmia	r3!, {r0, r1}
 801e766:	9b03      	ldr	r3, [sp, #12]
 801e768:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 801e76c:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 801e770:	f855 0fac 	ldr.w	r0, [r5, #172]!
 801e774:	6869      	ldr	r1, [r5, #4]
 801e776:	c303      	stmia	r3!, {r0, r1}
 801e778:	e7e4      	b.n	801e744 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 801e77a:	bf00      	nop

0801e77c <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801e77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e780:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 801e784:	b09b      	sub	sp, #108	@ 0x6c
 801e786:	4604      	mov	r4, r0
 801e788:	4630      	mov	r0, r6
 801e78a:	f7fb f836 	bl	80197fa <_ZNK8touchgfx4Rect7isEmptyEv>
 801e78e:	4605      	mov	r5, r0
 801e790:	b948      	cbnz	r0, 801e7a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 801e792:	6823      	ldr	r3, [r4, #0]
 801e794:	4620      	mov	r0, r4
 801e796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e798:	e896 0006 	ldmia.w	r6, {r1, r2}
 801e79c:	4798      	blx	r3
 801e79e:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 801e7a2:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 801e7a6:	4bc5      	ldr	r3, [pc, #788]	@ (801eabc <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 801e7a8:	681b      	ldr	r3, [r3, #0]
 801e7aa:	2b00      	cmp	r3, #0
 801e7ac:	d03f      	beq.n	801e82e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801e7ae:	4dc4      	ldr	r5, [pc, #784]	@ (801eac0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 801e7b0:	4628      	mov	r0, r5
 801e7b2:	f7fb f822 	bl	80197fa <_ZNK8touchgfx4Rect7isEmptyEv>
 801e7b6:	4606      	mov	r6, r0
 801e7b8:	2800      	cmp	r0, #0
 801e7ba:	d138      	bne.n	801e82e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801e7bc:	4628      	mov	r0, r5
 801e7be:	f7ff f99b 	bl	801daf8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801e7c2:	6823      	ldr	r3, [r4, #0]
 801e7c4:	6829      	ldr	r1, [r5, #0]
 801e7c6:	4620      	mov	r0, r4
 801e7c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e7ca:	686a      	ldr	r2, [r5, #4]
 801e7cc:	4798      	blx	r3
 801e7ce:	802e      	strh	r6, [r5, #0]
 801e7d0:	806e      	strh	r6, [r5, #2]
 801e7d2:	80ae      	strh	r6, [r5, #4]
 801e7d4:	80ee      	strh	r6, [r5, #6]
 801e7d6:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 801e7da:	4dba      	ldr	r5, [pc, #744]	@ (801eac4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 801e7dc:	4640      	mov	r0, r8
 801e7de:	f7ff fbe7 	bl	801dfb0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801e7e2:	882e      	ldrh	r6, [r5, #0]
 801e7e4:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 801e7e8:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 801e7ec:	4633      	mov	r3, r6
 801e7ee:	42bb      	cmp	r3, r7
 801e7f0:	d224      	bcs.n	801e83c <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801e7f2:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 801e7f6:	2907      	cmp	r1, #7
 801e7f8:	d816      	bhi.n	801e828 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 801e7fa:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801e7fe:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 801e802:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 801e806:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801e80a:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801e80e:	1c4a      	adds	r2, r1, #1
 801e810:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 801e814:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 801e818:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 801e81c:	f8a2 a002 	strh.w	sl, [r2, #2]
 801e820:	f8a2 e004 	strh.w	lr, [r2, #4]
 801e824:	f8a2 c006 	strh.w	ip, [r2, #6]
 801e828:	3301      	adds	r3, #1
 801e82a:	b29b      	uxth	r3, r3
 801e82c:	e7df      	b.n	801e7ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 801e82e:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801e832:	2b00      	cmp	r3, #0
 801e834:	d1cf      	bne.n	801e7d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 801e836:	b01b      	add	sp, #108	@ 0x6c
 801e838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e83c:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 801e840:	42b3      	cmp	r3, r6
 801e842:	d90c      	bls.n	801e85e <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 801e844:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801e848:	6822      	ldr	r2, [r4, #0]
 801e84a:	3601      	adds	r6, #1
 801e84c:	4620      	mov	r0, r4
 801e84e:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 801e850:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 801e854:	b2b6      	uxth	r6, r6
 801e856:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 801e85a:	47b8      	blx	r7
 801e85c:	e7ee      	b.n	801e83c <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801e85e:	4a9a      	ldr	r2, [pc, #616]	@ (801eac8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801e860:	6813      	ldr	r3, [r2, #0]
 801e862:	4691      	mov	r9, r2
 801e864:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801e868:	2b01      	cmp	r3, #1
 801e86a:	f040 80e0 	bne.w	801ea2e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 801e86e:	8829      	ldrh	r1, [r5, #0]
 801e870:	2600      	movs	r6, #0
 801e872:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 801e876:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 801e87a:	33ae      	adds	r3, #174	@ 0xae
 801e87c:	428f      	cmp	r7, r1
 801e87e:	f103 0308 	add.w	r3, r3, #8
 801e882:	dd0a      	ble.n	801e89a <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 801e884:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 801e888:	3101      	adds	r1, #1
 801e88a:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 801e88e:	4402      	add	r2, r0
 801e890:	b212      	sxth	r2, r2
 801e892:	4296      	cmp	r6, r2
 801e894:	bfb8      	it	lt
 801e896:	4616      	movlt	r6, r2
 801e898:	e7f0      	b.n	801e87c <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 801e89a:	4b8c      	ldr	r3, [pc, #560]	@ (801eacc <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801e89c:	f8df 9228 	ldr.w	r9, [pc, #552]	@ 801eac8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 801e8a0:	881b      	ldrh	r3, [r3, #0]
 801e8a2:	2b0f      	cmp	r3, #15
 801e8a4:	bf8c      	ite	hi
 801e8a6:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 801e8aa:	f04f 0b01 	movls.w	fp, #1
 801e8ae:	2300      	movs	r3, #0
 801e8b0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801e8b4:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 801e8b8:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 801e8bc:	4b82      	ldr	r3, [pc, #520]	@ (801eac8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801e8be:	4438      	add	r0, r7
 801e8c0:	b207      	sxth	r7, r0
 801e8c2:	6818      	ldr	r0, [r3, #0]
 801e8c4:	42b7      	cmp	r7, r6
 801e8c6:	6803      	ldr	r3, [r0, #0]
 801e8c8:	f280 8083 	bge.w	801e9d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 801e8cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801e8d0:	4798      	blx	r3
 801e8d2:	eb07 030b 	add.w	r3, r7, fp
 801e8d6:	4298      	cmp	r0, r3
 801e8d8:	da07      	bge.n	801e8ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801e8da:	42b0      	cmp	r0, r6
 801e8dc:	da05      	bge.n	801e8ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801e8de:	4287      	cmp	r7, r0
 801e8e0:	dd6c      	ble.n	801e9bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801e8e2:	2f00      	cmp	r7, #0
 801e8e4:	dd6a      	ble.n	801e9bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801e8e6:	4630      	mov	r0, r6
 801e8e8:	e004      	b.n	801e8f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 801e8ea:	4287      	cmp	r7, r0
 801e8ec:	dcfb      	bgt.n	801e8e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 801e8ee:	42b0      	cmp	r0, r6
 801e8f0:	bfa8      	it	ge
 801e8f2:	4630      	movge	r0, r6
 801e8f4:	4b76      	ldr	r3, [pc, #472]	@ (801ead0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801e8f6:	1bc0      	subs	r0, r0, r7
 801e8f8:	2200      	movs	r2, #0
 801e8fa:	f8ad 7016 	strh.w	r7, [sp, #22]
 801e8fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e902:	882f      	ldrh	r7, [r5, #0]
 801e904:	f8ad 2014 	strh.w	r2, [sp, #20]
 801e908:	f8ad 3018 	strh.w	r3, [sp, #24]
 801e90c:	f8ad 001a 	strh.w	r0, [sp, #26]
 801e910:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801e914:	42bb      	cmp	r3, r7
 801e916:	d9cd      	bls.n	801e8b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 801e918:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801e91c:	ab07      	add	r3, sp, #28
 801e91e:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801e922:	6851      	ldr	r1, [r2, #4]
 801e924:	c303      	stmia	r3!, {r0, r1}
 801e926:	a905      	add	r1, sp, #20
 801e928:	a807      	add	r0, sp, #28
 801e92a:	f7ff f9af 	bl	801dc8c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801e92e:	2800      	cmp	r0, #0
 801e930:	d04c      	beq.n	801e9cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801e932:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801e936:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801e93a:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801e93e:	4686      	mov	lr, r0
 801e940:	4290      	cmp	r0, r2
 801e942:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801e946:	4450      	add	r0, sl
 801e948:	f8bd a018 	ldrh.w	sl, [sp, #24]
 801e94c:	bfb8      	it	lt
 801e94e:	4696      	movlt	lr, r2
 801e950:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801e954:	4452      	add	r2, sl
 801e956:	b280      	uxth	r0, r0
 801e958:	4299      	cmp	r1, r3
 801e95a:	468c      	mov	ip, r1
 801e95c:	b292      	uxth	r2, r2
 801e95e:	9302      	str	r3, [sp, #8]
 801e960:	bfb8      	it	lt
 801e962:	469c      	movlt	ip, r3
 801e964:	b203      	sxth	r3, r0
 801e966:	fa0f fa82 	sxth.w	sl, r2
 801e96a:	f8ad e01c 	strh.w	lr, [sp, #28]
 801e96e:	f8ad c01e 	strh.w	ip, [sp, #30]
 801e972:	4553      	cmp	r3, sl
 801e974:	bfb8      	it	lt
 801e976:	4602      	movlt	r2, r0
 801e978:	9b02      	ldr	r3, [sp, #8]
 801e97a:	eba2 020e 	sub.w	r2, r2, lr
 801e97e:	f8ad 2020 	strh.w	r2, [sp, #32]
 801e982:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 801e986:	4411      	add	r1, r2
 801e988:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801e98c:	4413      	add	r3, r2
 801e98e:	b289      	uxth	r1, r1
 801e990:	b29b      	uxth	r3, r3
 801e992:	b208      	sxth	r0, r1
 801e994:	b21a      	sxth	r2, r3
 801e996:	4290      	cmp	r0, r2
 801e998:	bfb8      	it	lt
 801e99a:	460b      	movlt	r3, r1
 801e99c:	eba3 030c 	sub.w	r3, r3, ip
 801e9a0:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801e9a4:	a807      	add	r0, sp, #28
 801e9a6:	f7fa ff28 	bl	80197fa <_ZNK8touchgfx4Rect7isEmptyEv>
 801e9aa:	b920      	cbnz	r0, 801e9b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 801e9ac:	6823      	ldr	r3, [r4, #0]
 801e9ae:	a907      	add	r1, sp, #28
 801e9b0:	4620      	mov	r0, r4
 801e9b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801e9b4:	4798      	blx	r3
 801e9b6:	3701      	adds	r7, #1
 801e9b8:	b2bf      	uxth	r7, r7
 801e9ba:	e7a9      	b.n	801e910 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 801e9bc:	f8d9 0000 	ldr.w	r0, [r9]
 801e9c0:	2101      	movs	r1, #1
 801e9c2:	6803      	ldr	r3, [r0, #0]
 801e9c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801e9c8:	4798      	blx	r3
 801e9ca:	e773      	b.n	801e8b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 801e9cc:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801e9d0:	e7e8      	b.n	801e9a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801e9d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e9d4:	4798      	blx	r3
 801e9d6:	4b3f      	ldr	r3, [pc, #252]	@ (801ead4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801e9d8:	781b      	ldrb	r3, [r3, #0]
 801e9da:	2b00      	cmp	r3, #0
 801e9dc:	f43f af2b 	beq.w	801e836 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801e9e0:	2300      	movs	r3, #0
 801e9e2:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 801e9e6:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 801e9ea:	882b      	ldrh	r3, [r5, #0]
 801e9ec:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 801e9f0:	42ab      	cmp	r3, r5
 801e9f2:	f4bf af20 	bcs.w	801e836 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801e9f6:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 801e9fa:	2907      	cmp	r1, #7
 801e9fc:	d814      	bhi.n	801ea28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 801e9fe:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 801ea02:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 801ea06:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 801ea0a:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 801ea0e:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 801ea12:	1c4a      	adds	r2, r1, #1
 801ea14:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 801ea18:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801ea1c:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 801ea20:	f8a2 c002 	strh.w	ip, [r2, #2]
 801ea24:	8097      	strh	r7, [r2, #4]
 801ea26:	80d6      	strh	r6, [r2, #6]
 801ea28:	3301      	adds	r3, #1
 801ea2a:	b29b      	uxth	r3, r3
 801ea2c:	e7e0      	b.n	801e9f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 801ea2e:	2b02      	cmp	r3, #2
 801ea30:	f040 8133 	bne.w	801ec9a <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 801ea34:	4b28      	ldr	r3, [pc, #160]	@ (801ead8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801ea36:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 801ea3a:	781b      	ldrb	r3, [r3, #0]
 801ea3c:	2b01      	cmp	r3, #1
 801ea3e:	f000 8098 	beq.w	801eb72 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801ea42:	882a      	ldrh	r2, [r5, #0]
 801ea44:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 801ea48:	3201      	adds	r2, #1
 801ea4a:	b292      	uxth	r2, r2
 801ea4c:	2900      	cmp	r1, #0
 801ea4e:	d0c2      	beq.n	801e9d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801ea50:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 801ea54:	4694      	mov	ip, r2
 801ea56:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 801ea5a:	f04f 0900 	mov.w	r9, #0
 801ea5e:	441e      	add	r6, r3
 801ea60:	b236      	sxth	r6, r6
 801ea62:	fa1f f38c 	uxth.w	r3, ip
 801ea66:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 801ea6a:	4299      	cmp	r1, r3
 801ea6c:	f240 80be 	bls.w	801ebec <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 801ea70:	4427      	add	r7, r4
 801ea72:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 801ea76:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 801ea7a:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 801ea7e:	4283      	cmp	r3, r0
 801ea80:	f340 80a0 	ble.w	801ebc4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 801ea84:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 801ea88:	46e1      	mov	r9, ip
 801ea8a:	4406      	add	r6, r0
 801ea8c:	b236      	sxth	r6, r6
 801ea8e:	429e      	cmp	r6, r3
 801ea90:	bfa8      	it	ge
 801ea92:	461e      	movge	r6, r3
 801ea94:	f10c 0c01 	add.w	ip, ip, #1
 801ea98:	e7e3      	b.n	801ea62 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 801ea9a:	d10a      	bne.n	801eab2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 801ea9c:	4562      	cmp	r2, ip
 801ea9e:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 801eaa2:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 801eaa6:	bfb8      	it	lt
 801eaa8:	4662      	movlt	r2, ip
 801eaaa:	4288      	cmp	r0, r1
 801eaac:	bfb8      	it	lt
 801eaae:	461f      	movlt	r7, r3
 801eab0:	e086      	b.n	801ebc0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 801eab2:	428a      	cmp	r2, r1
 801eab4:	bfb8      	it	lt
 801eab6:	460a      	movlt	r2, r1
 801eab8:	e082      	b.n	801ebc0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 801eaba:	bf00      	nop
 801eabc:	2403426c 	.word	0x2403426c
 801eac0:	24034278 	.word	0x24034278
 801eac4:	24000050 	.word	0x24000050
 801eac8:	2403422c 	.word	0x2403422c
 801eacc:	24034222 	.word	0x24034222
 801ead0:	24034220 	.word	0x24034220
 801ead4:	2403422a 	.word	0x2403422a
 801ead8:	24034224 	.word	0x24034224
 801eadc:	19a1      	adds	r1, r4, r6
 801eade:	ab07      	add	r3, sp, #28
 801eae0:	f851 0fac 	ldr.w	r0, [r1, #172]!
 801eae4:	6849      	ldr	r1, [r1, #4]
 801eae6:	c303      	stmia	r3!, {r0, r1}
 801eae8:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801eaec:	a807      	add	r0, sp, #28
 801eaee:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801eaf2:	2b13      	cmp	r3, #19
 801eaf4:	440b      	add	r3, r1
 801eaf6:	bfd8      	it	le
 801eaf8:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801eafc:	1a9b      	subs	r3, r3, r2
 801eafe:	f8ad 201c 	strh.w	r2, [sp, #28]
 801eb02:	f8ad 3020 	strh.w	r3, [sp, #32]
 801eb06:	f7ff f811 	bl	801db2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801eb0a:	a807      	add	r0, sp, #28
 801eb0c:	f7fa fe75 	bl	80197fa <_ZNK8touchgfx4Rect7isEmptyEv>
 801eb10:	bb78      	cbnz	r0, 801eb72 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801eb12:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 801eb16:	4426      	add	r6, r4
 801eb18:	f8d9 0000 	ldr.w	r0, [r9]
 801eb1c:	f1bc 0f14 	cmp.w	ip, #20
 801eb20:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801eb24:	f8d0 e000 	ldr.w	lr, [r0]
 801eb28:	bfa8      	it	ge
 801eb2a:	f04f 0c14 	movge.w	ip, #20
 801eb2e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801eb32:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801eb36:	fa1f fc8c 	uxth.w	ip, ip
 801eb3a:	f8cd c000 	str.w	ip, [sp]
 801eb3e:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 801eb42:	47d8      	blx	fp
 801eb44:	4683      	mov	fp, r0
 801eb46:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801eb4a:	a807      	add	r0, sp, #28
 801eb4c:	f7fe ffd4 	bl	801daf8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801eb50:	6823      	ldr	r3, [r4, #0]
 801eb52:	4620      	mov	r0, r4
 801eb54:	a907      	add	r1, sp, #28
 801eb56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801eb58:	4798      	blx	r3
 801eb5a:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 801eb5e:	eba0 000b 	sub.w	r0, r0, fp
 801eb62:	b200      	sxth	r0, r0
 801eb64:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 801eb68:	b918      	cbnz	r0, 801eb72 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801eb6a:	b2b9      	uxth	r1, r7
 801eb6c:	4650      	mov	r0, sl
 801eb6e:	f7ff fa7b 	bl	801e068 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801eb72:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 801eb76:	f1bb 0f00 	cmp.w	fp, #0
 801eb7a:	f43f af2c 	beq.w	801e9d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801eb7e:	882b      	ldrh	r3, [r5, #0]
 801eb80:	2700      	movs	r7, #0
 801eb82:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 801eb86:	3301      	adds	r3, #1
 801eb88:	b29b      	uxth	r3, r3
 801eb8a:	b299      	uxth	r1, r3
 801eb8c:	00fe      	lsls	r6, r7, #3
 801eb8e:	458b      	cmp	fp, r1
 801eb90:	d9a4      	bls.n	801eadc <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 801eb92:	4426      	add	r6, r4
 801eb94:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 801eb98:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 801eb9c:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 801eba0:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 801eba4:	4408      	add	r0, r1
 801eba6:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 801ebaa:	4461      	add	r1, ip
 801ebac:	b200      	sxth	r0, r0
 801ebae:	b209      	sxth	r1, r1
 801ebb0:	4288      	cmp	r0, r1
 801ebb2:	f6bf af72 	bge.w	801ea9a <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 801ebb6:	4584      	cmp	ip, r0
 801ebb8:	4662      	mov	r2, ip
 801ebba:	461f      	mov	r7, r3
 801ebbc:	bfb8      	it	lt
 801ebbe:	4602      	movlt	r2, r0
 801ebc0:	3301      	adds	r3, #1
 801ebc2:	e7e2      	b.n	801eb8a <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 801ebc4:	d10e      	bne.n	801ebe4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 801ebc6:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 801ebca:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 801ebce:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 801ebd2:	4473      	add	r3, lr
 801ebd4:	b21b      	sxth	r3, r3
 801ebd6:	429e      	cmp	r6, r3
 801ebd8:	bfa8      	it	ge
 801ebda:	461e      	movge	r6, r3
 801ebdc:	4287      	cmp	r7, r0
 801ebde:	bfb8      	it	lt
 801ebe0:	46e1      	movlt	r9, ip
 801ebe2:	e757      	b.n	801ea94 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801ebe4:	4286      	cmp	r6, r0
 801ebe6:	bfa8      	it	ge
 801ebe8:	4606      	movge	r6, r0
 801ebea:	e753      	b.n	801ea94 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801ebec:	eb0a 0007 	add.w	r0, sl, r7
 801ebf0:	4427      	add	r7, r4
 801ebf2:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 801ebf6:	f1bb 0f13 	cmp.w	fp, #19
 801ebfa:	bfdc      	itt	le
 801ebfc:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 801ec00:	445e      	addle	r6, fp
 801ec02:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801ec06:	bfd8      	it	le
 801ec08:	b236      	sxthle	r6, r6
 801ec0a:	f7fa fdf6 	bl	80197fa <_ZNK8touchgfx4Rect7isEmptyEv>
 801ec0e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801ec12:	2800      	cmp	r0, #0
 801ec14:	f47f af1a 	bne.w	801ea4c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 801ec18:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 801ec1c:	fa1f fb8b 	uxth.w	fp, fp
 801ec20:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801ec24:	1ab6      	subs	r6, r6, r2
 801ec26:	4829      	ldr	r0, [pc, #164]	@ (801eccc <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 801ec28:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 801ec2c:	2e14      	cmp	r6, #20
 801ec2e:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 801ec32:	6800      	ldr	r0, [r0, #0]
 801ec34:	bfa8      	it	ge
 801ec36:	2614      	movge	r6, #20
 801ec38:	f8ad 101c 	strh.w	r1, [sp, #28]
 801ec3c:	f8ad 201e 	strh.w	r2, [sp, #30]
 801ec40:	b289      	uxth	r1, r1
 801ec42:	f8ad 3020 	strh.w	r3, [sp, #32]
 801ec46:	b2b6      	uxth	r6, r6
 801ec48:	f8d0 c000 	ldr.w	ip, [r0]
 801ec4c:	b292      	uxth	r2, r2
 801ec4e:	455e      	cmp	r6, fp
 801ec50:	bf94      	ite	ls
 801ec52:	9600      	strls	r6, [sp, #0]
 801ec54:	f8cd b000 	strhi.w	fp, [sp]
 801ec58:	b29b      	uxth	r3, r3
 801ec5a:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 801ec5e:	47b0      	blx	r6
 801ec60:	6823      	ldr	r3, [r4, #0]
 801ec62:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801ec66:	a907      	add	r1, sp, #28
 801ec68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801ec6a:	4620      	mov	r0, r4
 801ec6c:	4798      	blx	r3
 801ec6e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 801ec72:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801ec76:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 801ec7a:	1a5b      	subs	r3, r3, r1
 801ec7c:	440a      	add	r2, r1
 801ec7e:	b21b      	sxth	r3, r3
 801ec80:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 801ec84:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 801ec88:	2b00      	cmp	r3, #0
 801ec8a:	f47f aeda 	bne.w	801ea42 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801ec8e:	fa1f f189 	uxth.w	r1, r9
 801ec92:	4650      	mov	r0, sl
 801ec94:	f7ff f9e8 	bl	801e068 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ec98:	e6d3      	b.n	801ea42 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801ec9a:	882e      	ldrh	r6, [r5, #0]
 801ec9c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801eca0:	42b3      	cmp	r3, r6
 801eca2:	f67f ae98 	bls.w	801e9d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801eca6:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 801ecaa:	ab07      	add	r3, sp, #28
 801ecac:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801ecb0:	6851      	ldr	r1, [r2, #4]
 801ecb2:	c303      	stmia	r3!, {r0, r1}
 801ecb4:	a807      	add	r0, sp, #28
 801ecb6:	f7fa fda0 	bl	80197fa <_ZNK8touchgfx4Rect7isEmptyEv>
 801ecba:	b920      	cbnz	r0, 801ecc6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 801ecbc:	6823      	ldr	r3, [r4, #0]
 801ecbe:	a907      	add	r1, sp, #28
 801ecc0:	4620      	mov	r0, r4
 801ecc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801ecc4:	4798      	blx	r3
 801ecc6:	3601      	adds	r6, #1
 801ecc8:	b2b6      	uxth	r6, r6
 801ecca:	e7e7      	b.n	801ec9c <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 801eccc:	2403422c 	.word	0x2403422c

0801ecd0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801ecd0:	4b03      	ldr	r3, [pc, #12]	@ (801ece0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801ecd2:	2200      	movs	r2, #0
 801ecd4:	801a      	strh	r2, [r3, #0]
 801ecd6:	805a      	strh	r2, [r3, #2]
 801ecd8:	809a      	strh	r2, [r3, #4]
 801ecda:	80da      	strh	r2, [r3, #6]
 801ecdc:	4770      	bx	lr
 801ecde:	bf00      	nop
 801ece0:	24034278 	.word	0x24034278

0801ece4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801ece4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ece8:	b09d      	sub	sp, #116	@ 0x74
 801ecea:	4606      	mov	r6, r0
 801ecec:	4614      	mov	r4, r2
 801ecee:	468a      	mov	sl, r1
 801ecf0:	a803      	add	r0, sp, #12
 801ecf2:	461d      	mov	r5, r3
 801ecf4:	f001 f88e 	bl	801fe14 <_ZN8touchgfx12TextProviderC1Ev>
 801ecf8:	6833      	ldr	r3, [r6, #0]
 801ecfa:	4630      	mov	r0, r6
 801ecfc:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 801ed00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ed02:	4798      	blx	r3
 801ed04:	6833      	ldr	r3, [r6, #0]
 801ed06:	4607      	mov	r7, r0
 801ed08:	4630      	mov	r0, r6
 801ed0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ed0c:	4798      	blx	r3
 801ed0e:	462a      	mov	r2, r5
 801ed10:	2500      	movs	r5, #0
 801ed12:	4621      	mov	r1, r4
 801ed14:	9000      	str	r0, [sp, #0]
 801ed16:	463b      	mov	r3, r7
 801ed18:	462c      	mov	r4, r5
 801ed1a:	46a9      	mov	r9, r5
 801ed1c:	46a8      	mov	r8, r5
 801ed1e:	a803      	add	r0, sp, #12
 801ed20:	f001 f8cb 	bl	801feba <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801ed24:	2300      	movs	r3, #0
 801ed26:	9302      	str	r3, [sp, #8]
 801ed28:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801ed2c:	429c      	cmp	r4, r3
 801ed2e:	d002      	beq.n	801ed36 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801ed30:	455c      	cmp	r4, fp
 801ed32:	bf18      	it	ne
 801ed34:	4625      	movne	r5, r4
 801ed36:	ab02      	add	r3, sp, #8
 801ed38:	4632      	mov	r2, r6
 801ed3a:	4651      	mov	r1, sl
 801ed3c:	a803      	add	r0, sp, #12
 801ed3e:	f001 fbb1 	bl	80204a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ed42:	4604      	mov	r4, r0
 801ed44:	b108      	cbz	r0, 801ed4a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801ed46:	280a      	cmp	r0, #10
 801ed48:	d10a      	bne.n	801ed60 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801ed4a:	45c1      	cmp	r9, r8
 801ed4c:	bf38      	it	cc
 801ed4e:	46c1      	movcc	r9, r8
 801ed50:	f04f 0800 	mov.w	r8, #0
 801ed54:	2c00      	cmp	r4, #0
 801ed56:	d1e5      	bne.n	801ed24 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801ed58:	4648      	mov	r0, r9
 801ed5a:	b01d      	add	sp, #116	@ 0x74
 801ed5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed60:	9a02      	ldr	r2, [sp, #8]
 801ed62:	2a00      	cmp	r2, #0
 801ed64:	d0de      	beq.n	801ed24 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801ed66:	7b57      	ldrb	r7, [r2, #13]
 801ed68:	4629      	mov	r1, r5
 801ed6a:	6833      	ldr	r3, [r6, #0]
 801ed6c:	007f      	lsls	r7, r7, #1
 801ed6e:	8894      	ldrh	r4, [r2, #4]
 801ed70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ed72:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 801ed76:	7a97      	ldrb	r7, [r2, #10]
 801ed78:	4307      	orrs	r7, r0
 801ed7a:	4630      	mov	r0, r6
 801ed7c:	4798      	blx	r3
 801ed7e:	4438      	add	r0, r7
 801ed80:	4480      	add	r8, r0
 801ed82:	fa1f f888 	uxth.w	r8, r8
 801ed86:	e7e5      	b.n	801ed54 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801ed88 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801ed88:	b508      	push	{r3, lr}
 801ed8a:	6803      	ldr	r3, [r0, #0]
 801ed8c:	68db      	ldr	r3, [r3, #12]
 801ed8e:	4798      	blx	r3
 801ed90:	b128      	cbz	r0, 801ed9e <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801ed92:	7b43      	ldrb	r3, [r0, #13]
 801ed94:	7a80      	ldrb	r0, [r0, #10]
 801ed96:	005b      	lsls	r3, r3, #1
 801ed98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ed9c:	4318      	orrs	r0, r3
 801ed9e:	bd08      	pop	{r3, pc}

0801eda0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801eda0:	b40e      	push	{r1, r2, r3}
 801eda2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801eda4:	b09e      	sub	sp, #120	@ 0x78
 801eda6:	4605      	mov	r5, r0
 801eda8:	ab23      	add	r3, sp, #140	@ 0x8c
 801edaa:	a805      	add	r0, sp, #20
 801edac:	f853 4b04 	ldr.w	r4, [r3], #4
 801edb0:	9303      	str	r3, [sp, #12]
 801edb2:	f001 f82f 	bl	801fe14 <_ZN8touchgfx12TextProviderC1Ev>
 801edb6:	682b      	ldr	r3, [r5, #0]
 801edb8:	4628      	mov	r0, r5
 801edba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801edbc:	4798      	blx	r3
 801edbe:	682b      	ldr	r3, [r5, #0]
 801edc0:	4606      	mov	r6, r0
 801edc2:	4628      	mov	r0, r5
 801edc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801edc6:	4798      	blx	r3
 801edc8:	4633      	mov	r3, r6
 801edca:	4621      	mov	r1, r4
 801edcc:	ae1e      	add	r6, sp, #120	@ 0x78
 801edce:	2400      	movs	r4, #0
 801edd0:	9000      	str	r0, [sp, #0]
 801edd2:	9a03      	ldr	r2, [sp, #12]
 801edd4:	a805      	add	r0, sp, #20
 801edd6:	f001 f870 	bl	801feba <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801edda:	f846 4d68 	str.w	r4, [r6, #-104]!
 801edde:	462a      	mov	r2, r5
 801ede0:	4633      	mov	r3, r6
 801ede2:	4621      	mov	r1, r4
 801ede4:	a805      	add	r0, sp, #20
 801ede6:	f001 fb5d 	bl	80204a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801edea:	b300      	cbz	r0, 801ee2e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801edec:	280a      	cmp	r0, #10
 801edee:	d01a      	beq.n	801ee26 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801edf0:	9f04      	ldr	r7, [sp, #16]
 801edf2:	b1c7      	cbz	r7, 801ee26 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801edf4:	7b78      	ldrb	r0, [r7, #13]
 801edf6:	7a3b      	ldrb	r3, [r7, #8]
 801edf8:	00c1      	lsls	r1, r0, #3
 801edfa:	88ea      	ldrh	r2, [r5, #6]
 801edfc:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801ee00:	4319      	orrs	r1, r3
 801ee02:	0643      	lsls	r3, r0, #25
 801ee04:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801ee08:	bf48      	it	mi
 801ee0a:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 801ee0e:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801ee12:	bf48      	it	mi
 801ee14:	b219      	sxthmi	r1, r3
 801ee16:	79fb      	ldrb	r3, [r7, #7]
 801ee18:	4303      	orrs	r3, r0
 801ee1a:	4413      	add	r3, r2
 801ee1c:	1a5b      	subs	r3, r3, r1
 801ee1e:	b21b      	sxth	r3, r3
 801ee20:	429c      	cmp	r4, r3
 801ee22:	bfb8      	it	lt
 801ee24:	461c      	movlt	r4, r3
 801ee26:	4633      	mov	r3, r6
 801ee28:	462a      	mov	r2, r5
 801ee2a:	2100      	movs	r1, #0
 801ee2c:	e7da      	b.n	801ede4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801ee2e:	b2a0      	uxth	r0, r4
 801ee30:	b01e      	add	sp, #120	@ 0x78
 801ee32:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ee36:	b003      	add	sp, #12
 801ee38:	4770      	bx	lr

0801ee3a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801ee3a:	7a43      	ldrb	r3, [r0, #9]
 801ee3c:	8880      	ldrh	r0, [r0, #4]
 801ee3e:	4418      	add	r0, r3
 801ee40:	b280      	uxth	r0, r0
 801ee42:	4770      	bx	lr

0801ee44 <_ZNK8touchgfx4Font13getFontHeightEv>:
 801ee44:	6803      	ldr	r3, [r0, #0]
 801ee46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ee48:	4718      	bx	r3

0801ee4a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801ee4a:	b40e      	push	{r1, r2, r3}
 801ee4c:	b570      	push	{r4, r5, r6, lr}
 801ee4e:	b09d      	sub	sp, #116	@ 0x74
 801ee50:	4604      	mov	r4, r0
 801ee52:	ab21      	add	r3, sp, #132	@ 0x84
 801ee54:	a803      	add	r0, sp, #12
 801ee56:	f853 5b04 	ldr.w	r5, [r3], #4
 801ee5a:	9302      	str	r3, [sp, #8]
 801ee5c:	f000 ffda 	bl	801fe14 <_ZN8touchgfx12TextProviderC1Ev>
 801ee60:	6823      	ldr	r3, [r4, #0]
 801ee62:	4620      	mov	r0, r4
 801ee64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ee66:	4798      	blx	r3
 801ee68:	6823      	ldr	r3, [r4, #0]
 801ee6a:	4606      	mov	r6, r0
 801ee6c:	4620      	mov	r0, r4
 801ee6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ee70:	2401      	movs	r4, #1
 801ee72:	4798      	blx	r3
 801ee74:	4633      	mov	r3, r6
 801ee76:	9000      	str	r0, [sp, #0]
 801ee78:	4629      	mov	r1, r5
 801ee7a:	9a02      	ldr	r2, [sp, #8]
 801ee7c:	a803      	add	r0, sp, #12
 801ee7e:	f001 f81c 	bl	801feba <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801ee82:	a803      	add	r0, sp, #12
 801ee84:	f001 fb8e 	bl	80205a4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801ee88:	b2a3      	uxth	r3, r4
 801ee8a:	b138      	cbz	r0, 801ee9c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801ee8c:	280a      	cmp	r0, #10
 801ee8e:	a803      	add	r0, sp, #12
 801ee90:	bf04      	itt	eq
 801ee92:	3301      	addeq	r3, #1
 801ee94:	b21c      	sxtheq	r4, r3
 801ee96:	f001 fb85 	bl	80205a4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801ee9a:	e7f5      	b.n	801ee88 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801ee9c:	4618      	mov	r0, r3
 801ee9e:	b01d      	add	sp, #116	@ 0x74
 801eea0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801eea4:	b003      	add	sp, #12
 801eea6:	4770      	bx	lr

0801eea8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801eea8:	b40e      	push	{r1, r2, r3}
 801eeaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 801eeac:	b09e      	sub	sp, #120	@ 0x78
 801eeae:	4604      	mov	r4, r0
 801eeb0:	ab23      	add	r3, sp, #140	@ 0x8c
 801eeb2:	a805      	add	r0, sp, #20
 801eeb4:	f853 5b04 	ldr.w	r5, [r3], #4
 801eeb8:	9303      	str	r3, [sp, #12]
 801eeba:	f000 ffab 	bl	801fe14 <_ZN8touchgfx12TextProviderC1Ev>
 801eebe:	6823      	ldr	r3, [r4, #0]
 801eec0:	4620      	mov	r0, r4
 801eec2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801eec4:	4798      	blx	r3
 801eec6:	6823      	ldr	r3, [r4, #0]
 801eec8:	4606      	mov	r6, r0
 801eeca:	4620      	mov	r0, r4
 801eecc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801eece:	4798      	blx	r3
 801eed0:	4633      	mov	r3, r6
 801eed2:	4629      	mov	r1, r5
 801eed4:	9000      	str	r0, [sp, #0]
 801eed6:	9a03      	ldr	r2, [sp, #12]
 801eed8:	a805      	add	r0, sp, #20
 801eeda:	f000 ffee 	bl	801feba <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801eede:	ad1e      	add	r5, sp, #120	@ 0x78
 801eee0:	2100      	movs	r1, #0
 801eee2:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 801eee6:	4622      	mov	r2, r4
 801eee8:	a805      	add	r0, sp, #20
 801eeea:	f845 1d68 	str.w	r1, [r5, #-104]!
 801eeee:	462b      	mov	r3, r5
 801eef0:	f001 fad8 	bl	80204a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801eef4:	b1d8      	cbz	r0, 801ef2e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801eef6:	280a      	cmp	r0, #10
 801eef8:	d012      	beq.n	801ef20 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801eefa:	9804      	ldr	r0, [sp, #16]
 801eefc:	b180      	cbz	r0, 801ef20 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801eefe:	7b47      	ldrb	r7, [r0, #13]
 801ef00:	88e2      	ldrh	r2, [r4, #6]
 801ef02:	00fb      	lsls	r3, r7, #3
 801ef04:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801ef08:	7a03      	ldrb	r3, [r0, #8]
 801ef0a:	430b      	orrs	r3, r1
 801ef0c:	0679      	lsls	r1, r7, #25
 801ef0e:	bf44      	itt	mi
 801ef10:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801ef14:	b21b      	sxthmi	r3, r3
 801ef16:	1ad3      	subs	r3, r2, r3
 801ef18:	b21b      	sxth	r3, r3
 801ef1a:	429e      	cmp	r6, r3
 801ef1c:	bfa8      	it	ge
 801ef1e:	461e      	movge	r6, r3
 801ef20:	462b      	mov	r3, r5
 801ef22:	4622      	mov	r2, r4
 801ef24:	2100      	movs	r1, #0
 801ef26:	a805      	add	r0, sp, #20
 801ef28:	f001 fabc 	bl	80204a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ef2c:	e7e2      	b.n	801eef4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801ef2e:	4630      	mov	r0, r6
 801ef30:	b01e      	add	sp, #120	@ 0x78
 801ef32:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ef36:	b003      	add	sp, #12
 801ef38:	4770      	bx	lr

0801ef3a <_ZNK8touchgfx8Drawable10invalidateEv>:
 801ef3a:	b513      	push	{r0, r1, r4, lr}
 801ef3c:	6803      	ldr	r3, [r0, #0]
 801ef3e:	2400      	movs	r4, #0
 801ef40:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801ef44:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801ef48:	f8ad 1004 	strh.w	r1, [sp, #4]
 801ef4c:	4669      	mov	r1, sp
 801ef4e:	691b      	ldr	r3, [r3, #16]
 801ef50:	9400      	str	r4, [sp, #0]
 801ef52:	f8ad 2006 	strh.w	r2, [sp, #6]
 801ef56:	4798      	blx	r3
 801ef58:	b002      	add	sp, #8
 801ef5a:	bd10      	pop	{r4, pc}

0801ef5c <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801ef5c:	b538      	push	{r3, r4, r5, lr}
 801ef5e:	680b      	ldr	r3, [r1, #0]
 801ef60:	460c      	mov	r4, r1
 801ef62:	4605      	mov	r5, r0
 801ef64:	68db      	ldr	r3, [r3, #12]
 801ef66:	4798      	blx	r3
 801ef68:	6823      	ldr	r3, [r4, #0]
 801ef6a:	4620      	mov	r0, r4
 801ef6c:	4629      	mov	r1, r5
 801ef6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ef70:	4798      	blx	r3
 801ef72:	4628      	mov	r0, r5
 801ef74:	bd38      	pop	{r3, r4, r5, pc}

0801ef76 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801ef76:	b410      	push	{r4}
 801ef78:	880a      	ldrh	r2, [r1, #0]
 801ef7a:	8884      	ldrh	r4, [r0, #4]
 801ef7c:	4422      	add	r2, r4
 801ef7e:	800a      	strh	r2, [r1, #0]
 801ef80:	884a      	ldrh	r2, [r1, #2]
 801ef82:	88c4      	ldrh	r4, [r0, #6]
 801ef84:	4422      	add	r2, r4
 801ef86:	804a      	strh	r2, [r1, #2]
 801ef88:	6940      	ldr	r0, [r0, #20]
 801ef8a:	b120      	cbz	r0, 801ef96 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801ef8c:	6803      	ldr	r3, [r0, #0]
 801ef8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ef92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ef94:	4718      	bx	r3
 801ef96:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ef9a:	4770      	bx	lr

0801ef9c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801ef9c:	b570      	push	{r4, r5, r6, lr}
 801ef9e:	8882      	ldrh	r2, [r0, #4]
 801efa0:	460c      	mov	r4, r1
 801efa2:	880b      	ldrh	r3, [r1, #0]
 801efa4:	4605      	mov	r5, r0
 801efa6:	4413      	add	r3, r2
 801efa8:	800b      	strh	r3, [r1, #0]
 801efaa:	884b      	ldrh	r3, [r1, #2]
 801efac:	88c2      	ldrh	r2, [r0, #6]
 801efae:	4413      	add	r3, r2
 801efb0:	804b      	strh	r3, [r1, #2]
 801efb2:	1d01      	adds	r1, r0, #4
 801efb4:	4620      	mov	r0, r4
 801efb6:	f7fa fbdd 	bl	8019774 <_ZN8touchgfx4RectaNERKS0_>
 801efba:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801efbe:	2b00      	cmp	r3, #0
 801efc0:	dd0b      	ble.n	801efda <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801efc2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801efc6:	2b00      	cmp	r3, #0
 801efc8:	dd07      	ble.n	801efda <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801efca:	6968      	ldr	r0, [r5, #20]
 801efcc:	b128      	cbz	r0, 801efda <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801efce:	6803      	ldr	r3, [r0, #0]
 801efd0:	4621      	mov	r1, r4
 801efd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801efd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801efd8:	4718      	bx	r3
 801efda:	bd70      	pop	{r4, r5, r6, pc}

0801efdc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801efdc:	b570      	push	{r4, r5, r6, lr}
 801efde:	8882      	ldrh	r2, [r0, #4]
 801efe0:	460c      	mov	r4, r1
 801efe2:	880b      	ldrh	r3, [r1, #0]
 801efe4:	4605      	mov	r5, r0
 801efe6:	4413      	add	r3, r2
 801efe8:	800b      	strh	r3, [r1, #0]
 801efea:	884b      	ldrh	r3, [r1, #2]
 801efec:	88c2      	ldrh	r2, [r0, #6]
 801efee:	4413      	add	r3, r2
 801eff0:	804b      	strh	r3, [r1, #2]
 801eff2:	1d01      	adds	r1, r0, #4
 801eff4:	4620      	mov	r0, r4
 801eff6:	f7fa fbbd 	bl	8019774 <_ZN8touchgfx4RectaNERKS0_>
 801effa:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801effe:	2b00      	cmp	r3, #0
 801f000:	dd19      	ble.n	801f036 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801f002:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801f006:	2b00      	cmp	r3, #0
 801f008:	dd15      	ble.n	801f036 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801f00a:	6968      	ldr	r0, [r5, #20]
 801f00c:	b128      	cbz	r0, 801f01a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801f00e:	6803      	ldr	r3, [r0, #0]
 801f010:	4621      	mov	r1, r4
 801f012:	691b      	ldr	r3, [r3, #16]
 801f014:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f018:	4718      	bx	r3
 801f01a:	4b07      	ldr	r3, [pc, #28]	@ (801f038 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801f01c:	681b      	ldr	r3, [r3, #0]
 801f01e:	3304      	adds	r3, #4
 801f020:	429d      	cmp	r5, r3
 801f022:	d108      	bne.n	801f036 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801f024:	f7fe ff10 	bl	801de48 <_ZN8touchgfx11Application11getInstanceEv>
 801f028:	6803      	ldr	r3, [r0, #0]
 801f02a:	6821      	ldr	r1, [r4, #0]
 801f02c:	6862      	ldr	r2, [r4, #4]
 801f02e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f030:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f034:	4718      	bx	r3
 801f036:	bd70      	pop	{r4, r5, r6, pc}
 801f038:	24034270 	.word	0x24034270

0801f03c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801f03c:	b570      	push	{r4, r5, r6, lr}
 801f03e:	4604      	mov	r4, r0
 801f040:	4616      	mov	r6, r2
 801f042:	460d      	mov	r5, r1
 801f044:	b901      	cbnz	r1, 801f048 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801f046:	b192      	cbz	r2, 801f06e <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801f048:	6823      	ldr	r3, [r4, #0]
 801f04a:	4620      	mov	r0, r4
 801f04c:	699b      	ldr	r3, [r3, #24]
 801f04e:	4798      	blx	r3
 801f050:	88e2      	ldrh	r2, [r4, #6]
 801f052:	88a1      	ldrh	r1, [r4, #4]
 801f054:	4620      	mov	r0, r4
 801f056:	4432      	add	r2, r6
 801f058:	4429      	add	r1, r5
 801f05a:	b212      	sxth	r2, r2
 801f05c:	b209      	sxth	r1, r1
 801f05e:	f7f6 f8f8 	bl	8015252 <_ZN8touchgfx8Drawable5setXYEss>
 801f062:	6823      	ldr	r3, [r4, #0]
 801f064:	4620      	mov	r0, r4
 801f066:	699b      	ldr	r3, [r3, #24]
 801f068:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f06c:	4718      	bx	r3
 801f06e:	bd70      	pop	{r4, r5, r6, pc}

0801f070 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801f070:	b510      	push	{r4, lr}
 801f072:	2300      	movs	r3, #0
 801f074:	4604      	mov	r4, r0
 801f076:	4608      	mov	r0, r1
 801f078:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801f07c:	8023      	strh	r3, [r4, #0]
 801f07e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801f082:	8063      	strh	r3, [r4, #2]
 801f084:	6803      	ldr	r3, [r0, #0]
 801f086:	80a1      	strh	r1, [r4, #4]
 801f088:	4621      	mov	r1, r4
 801f08a:	80e2      	strh	r2, [r4, #6]
 801f08c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f08e:	4798      	blx	r3
 801f090:	4620      	mov	r0, r4
 801f092:	bd10      	pop	{r4, pc}

0801f094 <_ZN8touchgfx22VectorFontRendererImplC1Ev>:
 801f094:	4a04      	ldr	r2, [pc, #16]	@ (801f0a8 <_ZN8touchgfx22VectorFontRendererImplC1Ev+0x14>)
 801f096:	6002      	str	r2, [r0, #0]
 801f098:	2200      	movs	r2, #0
 801f09a:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801f09e:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801f0a2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801f0a6:	4770      	bx	lr
 801f0a8:	0802f020 	.word	0x0802f020

0801f0ac <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>:
 801f0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0b0:	4604      	mov	r4, r0
 801f0b2:	b087      	sub	sp, #28
 801f0b4:	4696      	mov	lr, r2
 801f0b6:	6880      	ldr	r0, [r0, #8]
 801f0b8:	8b22      	ldrh	r2, [r4, #24]
 801f0ba:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801f0be:	9105      	str	r1, [sp, #20]
 801f0c0:	1c51      	adds	r1, r2, #1
 801f0c2:	8321      	strh	r1, [r4, #24]
 801f0c4:	2101      	movs	r1, #1
 801f0c6:	5481      	strb	r1, [r0, r2]
 801f0c8:	4689      	mov	r9, r1
 801f0ca:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f0ce:	8b60      	ldrh	r0, [r4, #26]
 801f0d0:	ee06 2a90 	vmov	s13, r2
 801f0d4:	68e2      	ldr	r2, [r4, #12]
 801f0d6:	1845      	adds	r5, r0, r1
 801f0d8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801f0dc:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 801f0e0:	8365      	strh	r5, [r4, #26]
 801f0e2:	edc2 6a00 	vstr	s13, [r2]
 801f0e6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801f0ea:	8b60      	ldrh	r0, [r4, #26]
 801f0ec:	ee07 2a10 	vmov	s14, r2
 801f0f0:	68e2      	ldr	r2, [r4, #12]
 801f0f2:	1845      	adds	r5, r0, r1
 801f0f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f0f8:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 801f0fc:	8365      	strh	r5, [r4, #26]
 801f0fe:	1d18      	adds	r0, r3, #4
 801f100:	460d      	mov	r5, r1
 801f102:	ed82 7a00 	vstr	s14, [r2]
 801f106:	f8be 2000 	ldrh.w	r2, [lr]
 801f10a:	9203      	str	r2, [sp, #12]
 801f10c:	2200      	movs	r2, #0
 801f10e:	4613      	mov	r3, r2
 801f110:	4694      	mov	ip, r2
 801f112:	9201      	str	r2, [sp, #4]
 801f114:	9202      	str	r2, [sp, #8]
 801f116:	f8b4 8018 	ldrh.w	r8, [r4, #24]
 801f11a:	9e05      	ldr	r6, [sp, #20]
 801f11c:	f108 0701 	add.w	r7, r8, #1
 801f120:	f8d4 a008 	ldr.w	sl, [r4, #8]
 801f124:	428e      	cmp	r6, r1
 801f126:	b2bf      	uxth	r7, r7
 801f128:	eb0a 0b08 	add.w	fp, sl, r8
 801f12c:	f340 80b6 	ble.w	801f29c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1f0>
 801f130:	9b03      	ldr	r3, [sp, #12]
 801f132:	f9b0 c000 	ldrsh.w	ip, [r0]
 801f136:	fa43 fb05 	asr.w	fp, r3, r5
 801f13a:	f00b 0b01 	and.w	fp, fp, #1
 801f13e:	fa5f f38b 	uxtb.w	r3, fp
 801f142:	9304      	str	r3, [sp, #16]
 801f144:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801f148:	f1bb 0f00 	cmp.w	fp, #0
 801f14c:	d057      	beq.n	801f1fe <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x152>
 801f14e:	ee07 ca90 	vmov	s15, ip
 801f152:	8327      	strh	r7, [r4, #24]
 801f154:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 801f158:	ee07 3a90 	vmov	s15, r3
 801f15c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f160:	f1b9 0f00 	cmp.w	r9, #0
 801f164:	d028      	beq.n	801f1b8 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x10c>
 801f166:	f04f 0602 	mov.w	r6, #2
 801f16a:	f80a 6008 	strb.w	r6, [sl, r8]
 801f16e:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801f172:	68e7      	ldr	r7, [r4, #12]
 801f174:	f108 0901 	add.w	r9, r8, #1
 801f178:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801f17c:	f8a4 901a 	strh.w	r9, [r4, #26]
 801f180:	edc7 5a00 	vstr	s11, [r7]
 801f184:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801f188:	68e7      	ldr	r7, [r4, #12]
 801f18a:	f108 0901 	add.w	r9, r8, #1
 801f18e:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801f192:	f8a4 901a 	strh.w	r9, [r4, #26]
 801f196:	edc7 7a00 	vstr	s15, [r7]
 801f19a:	3501      	adds	r5, #1
 801f19c:	2d10      	cmp	r5, #16
 801f19e:	d106      	bne.n	801f1ae <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x102>
 801f1a0:	9d02      	ldr	r5, [sp, #8]
 801f1a2:	3501      	adds	r5, #1
 801f1a4:	9502      	str	r5, [sp, #8]
 801f1a6:	f83e 5015 	ldrh.w	r5, [lr, r5, lsl #1]
 801f1aa:	9503      	str	r5, [sp, #12]
 801f1ac:	2500      	movs	r5, #0
 801f1ae:	3101      	adds	r1, #1
 801f1b0:	3004      	adds	r0, #4
 801f1b2:	f8dd 9010 	ldr.w	r9, [sp, #16]
 801f1b6:	e7ae      	b.n	801f116 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x6a>
 801f1b8:	f04f 0605 	mov.w	r6, #5
 801f1bc:	ed9d 5a01 	vldr	s10, [sp, #4]
 801f1c0:	f80a 6008 	strb.w	r6, [sl, r8]
 801f1c4:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801f1c8:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801f1cc:	68e7      	ldr	r7, [r4, #12]
 801f1ce:	f108 0901 	add.w	r9, r8, #1
 801f1d2:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801f1d6:	f8a4 901a 	strh.w	r9, [r4, #26]
 801f1da:	ed87 5a00 	vstr	s10, [r7]
 801f1de:	ee05 2a10 	vmov	s10, r2
 801f1e2:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801f1e6:	68e7      	ldr	r7, [r4, #12]
 801f1e8:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801f1ec:	f108 0901 	add.w	r9, r8, #1
 801f1f0:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801f1f4:	f8a4 901a 	strh.w	r9, [r4, #26]
 801f1f8:	ed87 5a00 	vstr	s10, [r7]
 801f1fc:	e7b7      	b.n	801f16e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xc2>
 801f1fe:	f1b9 0f00 	cmp.w	r9, #0
 801f202:	d147      	bne.n	801f294 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1e8>
 801f204:	f04f 0605 	mov.w	r6, #5
 801f208:	eddd 7a01 	vldr	s15, [sp, #4]
 801f20c:	8327      	strh	r7, [r4, #24]
 801f20e:	f80a 6008 	strb.w	r6, [sl, r8]
 801f212:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f216:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801f21a:	68e7      	ldr	r7, [r4, #12]
 801f21c:	f108 0901 	add.w	r9, r8, #1
 801f220:	9e01      	ldr	r6, [sp, #4]
 801f222:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801f226:	f8a4 901a 	strh.w	r9, [r4, #26]
 801f22a:	4466      	add	r6, ip
 801f22c:	edc7 7a00 	vstr	s15, [r7]
 801f230:	ee07 2a90 	vmov	s15, r2
 801f234:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801f238:	441a      	add	r2, r3
 801f23a:	68e7      	ldr	r7, [r4, #12]
 801f23c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f240:	f108 0901 	add.w	r9, r8, #1
 801f244:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801f248:	f8a4 901a 	strh.w	r9, [r4, #26]
 801f24c:	edc7 7a00 	vstr	s15, [r7]
 801f250:	ee07 6a90 	vmov	s15, r6
 801f254:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801f258:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f25c:	68e7      	ldr	r7, [r4, #12]
 801f25e:	f108 0901 	add.w	r9, r8, #1
 801f262:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801f266:	ee67 7a86 	vmul.f32	s15, s15, s12
 801f26a:	f8a4 901a 	strh.w	r9, [r4, #26]
 801f26e:	edc7 7a00 	vstr	s15, [r7]
 801f272:	ee07 2a90 	vmov	s15, r2
 801f276:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801f27a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f27e:	68e7      	ldr	r7, [r4, #12]
 801f280:	f108 0901 	add.w	r9, r8, #1
 801f284:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801f288:	ee67 7a86 	vmul.f32	s15, s15, s12
 801f28c:	f8a4 901a 	strh.w	r9, [r4, #26]
 801f290:	edc7 7a00 	vstr	s15, [r7]
 801f294:	461a      	mov	r2, r3
 801f296:	f8cd c004 	str.w	ip, [sp, #4]
 801f29a:	e77e      	b.n	801f19a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xee>
 801f29c:	f1b9 0f00 	cmp.w	r9, #0
 801f2a0:	d028      	beq.n	801f2f4 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 801f2a2:	ee07 ca90 	vmov	s15, ip
 801f2a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f2aa:	eef4 6a67 	vcmp.f32	s13, s15
 801f2ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f2b2:	d108      	bne.n	801f2c6 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x21a>
 801f2b4:	ee07 3a90 	vmov	s15, r3
 801f2b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f2bc:	eeb4 7a67 	vcmp.f32	s14, s15
 801f2c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f2c4:	d016      	beq.n	801f2f4 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 801f2c6:	2302      	movs	r3, #2
 801f2c8:	8327      	strh	r7, [r4, #24]
 801f2ca:	f88b 3000 	strb.w	r3, [fp]
 801f2ce:	8b62      	ldrh	r2, [r4, #26]
 801f2d0:	68e3      	ldr	r3, [r4, #12]
 801f2d2:	1c51      	adds	r1, r2, #1
 801f2d4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801f2d8:	8361      	strh	r1, [r4, #26]
 801f2da:	edc3 6a00 	vstr	s13, [r3]
 801f2de:	8b62      	ldrh	r2, [r4, #26]
 801f2e0:	68e3      	ldr	r3, [r4, #12]
 801f2e2:	1c51      	adds	r1, r2, #1
 801f2e4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801f2e8:	8361      	strh	r1, [r4, #26]
 801f2ea:	ed83 7a00 	vstr	s14, [r3]
 801f2ee:	b007      	add	sp, #28
 801f2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f2f4:	2305      	movs	r3, #5
 801f2f6:	eddd 7a01 	vldr	s15, [sp, #4]
 801f2fa:	8327      	strh	r7, [r4, #24]
 801f2fc:	f88b 3000 	strb.w	r3, [fp]
 801f300:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f304:	8b61      	ldrh	r1, [r4, #26]
 801f306:	68e3      	ldr	r3, [r4, #12]
 801f308:	1c4d      	adds	r5, r1, #1
 801f30a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801f30e:	8365      	strh	r5, [r4, #26]
 801f310:	edc3 7a00 	vstr	s15, [r3]
 801f314:	ee07 2a90 	vmov	s15, r2
 801f318:	8b61      	ldrh	r1, [r4, #26]
 801f31a:	68e3      	ldr	r3, [r4, #12]
 801f31c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f320:	1c4d      	adds	r5, r1, #1
 801f322:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801f326:	8365      	strh	r5, [r4, #26]
 801f328:	edc3 7a00 	vstr	s15, [r3]
 801f32c:	e7cf      	b.n	801f2ce <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x222>
	...

0801f330 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii>:
 801f330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f334:	4604      	mov	r4, r0
 801f336:	b08e      	sub	sp, #56	@ 0x38
 801f338:	4699      	mov	r9, r3
 801f33a:	4688      	mov	r8, r1
 801f33c:	4615      	mov	r5, r2
 801f33e:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 801f340:	f89d a064 	ldrb.w	sl, [sp, #100]	@ 0x64
 801f344:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801f346:	f7f9 fd59 	bl	8018dfc <_ZN8touchgfx14VectorRenderer11getInstanceEv>
 801f34a:	6060      	str	r0, [r4, #4]
 801f34c:	f1b9 0f00 	cmp.w	r9, #0
 801f350:	f000 80e8 	beq.w	801f524 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 801f354:	2800      	cmp	r0, #0
 801f356:	f000 80e5 	beq.w	801f524 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 801f35a:	a805      	add	r0, sp, #20
 801f35c:	f000 f8f9 	bl	801f552 <_ZN8touchgfx9Matrix3x3C1Ev>
 801f360:	6833      	ldr	r3, [r6, #0]
 801f362:	4630      	mov	r0, r6
 801f364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801f366:	4798      	blx	r3
 801f368:	a805      	add	r0, sp, #20
 801f36a:	eef0 0a40 	vmov.f32	s1, s0
 801f36e:	f000 f8f4 	bl	801f55a <_ZN8touchgfx9Matrix3x35scaleEff>
 801f372:	6860      	ldr	r0, [r4, #4]
 801f374:	f1ba 0f03 	cmp.w	sl, #3
 801f378:	d83b      	bhi.n	801f3f2 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xc2>
 801f37a:	e8df f00a 	tbb	[pc, sl]
 801f37e:	1002      	.short	0x1002
 801f380:	9f71      	.short	0x9f71
 801f382:	6803      	ldr	r3, [r0, #0]
 801f384:	462a      	mov	r2, r5
 801f386:	4641      	mov	r1, r8
 801f388:	689b      	ldr	r3, [r3, #8]
 801f38a:	4798      	blx	r3
 801f38c:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 801f390:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801f394:	ee07 7a90 	vmov	s15, r7
 801f398:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801f39c:	e026      	b.n	801f3ec <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xbc>
 801f39e:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 801f3a2:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 801f3a6:	8869      	ldrh	r1, [r5, #2]
 801f3a8:	1a9b      	subs	r3, r3, r2
 801f3aa:	f8ad 2010 	strh.w	r2, [sp, #16]
 801f3ae:	aa03      	add	r2, sp, #12
 801f3b0:	1a5b      	subs	r3, r3, r1
 801f3b2:	4641      	mov	r1, r8
 801f3b4:	f8ad 300c 	strh.w	r3, [sp, #12]
 801f3b8:	882b      	ldrh	r3, [r5, #0]
 801f3ba:	f8ad 300e 	strh.w	r3, [sp, #14]
 801f3be:	88ab      	ldrh	r3, [r5, #4]
 801f3c0:	f8ad 3012 	strh.w	r3, [sp, #18]
 801f3c4:	6803      	ldr	r3, [r0, #0]
 801f3c6:	689b      	ldr	r3, [r3, #8]
 801f3c8:	4798      	blx	r3
 801f3ca:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 801f52c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1fc>
 801f3ce:	a805      	add	r0, sp, #20
 801f3d0:	f000 f8e8 	bl	801f5a4 <_ZN8touchgfx9Matrix3x36rotateEf>
 801f3d4:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 801f3d8:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801f3da:	ee07 7a90 	vmov	s15, r7
 801f3de:	1a9b      	subs	r3, r3, r2
 801f3e0:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801f3e4:	ee00 3a10 	vmov	s0, r3
 801f3e8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801f3ec:	a805      	add	r0, sp, #20
 801f3ee:	f000 f927 	bl	801f640 <_ZN8touchgfx9Matrix3x39translateEff>
 801f3f2:	6860      	ldr	r0, [r4, #4]
 801f3f4:	a905      	add	r1, sp, #20
 801f3f6:	2500      	movs	r5, #0
 801f3f8:	f109 0602 	add.w	r6, r9, #2
 801f3fc:	6803      	ldr	r3, [r0, #0]
 801f3fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f400:	4798      	blx	r3
 801f402:	6860      	ldr	r0, [r4, #4]
 801f404:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801f406:	6803      	ldr	r3, [r0, #0]
 801f408:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 801f40c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f40e:	4798      	blx	r3
 801f410:	6860      	ldr	r0, [r4, #4]
 801f412:	f89d 1060 	ldrb.w	r1, [sp, #96]	@ 0x60
 801f416:	6803      	ldr	r3, [r0, #0]
 801f418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f41a:	4798      	blx	r3
 801f41c:	6860      	ldr	r0, [r4, #4]
 801f41e:	2101      	movs	r1, #1
 801f420:	6803      	ldr	r3, [r0, #0]
 801f422:	68db      	ldr	r3, [r3, #12]
 801f424:	4798      	blx	r3
 801f426:	f8b9 7000 	ldrh.w	r7, [r9]
 801f42a:	f104 0310 	add.w	r3, r4, #16
 801f42e:	61a5      	str	r5, [r4, #24]
 801f430:	f104 0208 	add.w	r2, r4, #8
 801f434:	f104 0114 	add.w	r1, r4, #20
 801f438:	f104 000c 	add.w	r0, r4, #12
 801f43c:	f7f4 ff2a 	bl	8014294 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>
 801f440:	42af      	cmp	r7, r5
 801f442:	dd60      	ble.n	801f506 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1d6>
 801f444:	8831      	ldrh	r1, [r6, #0]
 801f446:	1cb2      	adds	r2, r6, #2
 801f448:	4620      	mov	r0, r4
 801f44a:	3501      	adds	r5, #1
 801f44c:	f101 030f 	add.w	r3, r1, #15
 801f450:	f3c3 1307 	ubfx	r3, r3, #4, #8
 801f454:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f458:	f7ff fe28 	bl	801f0ac <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>
 801f45c:	4606      	mov	r6, r0
 801f45e:	e7ef      	b.n	801f440 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x110>
 801f460:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801f464:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 801f468:	8829      	ldrh	r1, [r5, #0]
 801f46a:	1a9b      	subs	r3, r3, r2
 801f46c:	f8ad 2010 	strh.w	r2, [sp, #16]
 801f470:	aa03      	add	r2, sp, #12
 801f472:	1a5b      	subs	r3, r3, r1
 801f474:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801f478:	886d      	ldrh	r5, [r5, #2]
 801f47a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801f47e:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801f482:	f8ad 1012 	strh.w	r1, [sp, #18]
 801f486:	1a5b      	subs	r3, r3, r1
 801f488:	4641      	mov	r1, r8
 801f48a:	1b5b      	subs	r3, r3, r5
 801f48c:	f8ad 300e 	strh.w	r3, [sp, #14]
 801f490:	6803      	ldr	r3, [r0, #0]
 801f492:	689b      	ldr	r3, [r3, #8]
 801f494:	4798      	blx	r3
 801f496:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 801f530 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x200>
 801f49a:	a805      	add	r0, sp, #20
 801f49c:	f000 f882 	bl	801f5a4 <_ZN8touchgfx9Matrix3x36rotateEf>
 801f4a0:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801f4a4:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801f4a6:	1a9b      	subs	r3, r3, r2
 801f4a8:	ee00 3a90 	vmov	s1, r3
 801f4ac:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 801f4b0:	1bdb      	subs	r3, r3, r7
 801f4b2:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801f4b6:	ee00 3a10 	vmov	s0, r3
 801f4ba:	e795      	b.n	801f3e8 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xb8>
 801f4bc:	886b      	ldrh	r3, [r5, #2]
 801f4be:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801f4c2:	f8ad 300c 	strh.w	r3, [sp, #12]
 801f4c6:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801f4ca:	8829      	ldrh	r1, [r5, #0]
 801f4cc:	1a9b      	subs	r3, r3, r2
 801f4ce:	f8ad 2012 	strh.w	r2, [sp, #18]
 801f4d2:	aa03      	add	r2, sp, #12
 801f4d4:	1a5b      	subs	r3, r3, r1
 801f4d6:	4641      	mov	r1, r8
 801f4d8:	f8ad 300e 	strh.w	r3, [sp, #14]
 801f4dc:	88eb      	ldrh	r3, [r5, #6]
 801f4de:	f8ad 3010 	strh.w	r3, [sp, #16]
 801f4e2:	6803      	ldr	r3, [r0, #0]
 801f4e4:	689b      	ldr	r3, [r3, #8]
 801f4e6:	4798      	blx	r3
 801f4e8:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 801f534 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x204>
 801f4ec:	a805      	add	r0, sp, #20
 801f4ee:	f000 f859 	bl	801f5a4 <_ZN8touchgfx9Matrix3x36rotateEf>
 801f4f2:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801f4f6:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 801f4fa:	1bdb      	subs	r3, r3, r7
 801f4fc:	ee00 3a90 	vmov	s1, r3
 801f500:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801f504:	e748      	b.n	801f398 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x68>
 801f506:	6860      	ldr	r0, [r4, #4]
 801f508:	2100      	movs	r1, #0
 801f50a:	8b22      	ldrh	r2, [r4, #24]
 801f50c:	6803      	ldr	r3, [r0, #0]
 801f50e:	9101      	str	r1, [sp, #4]
 801f510:	8b61      	ldrh	r1, [r4, #26]
 801f512:	9100      	str	r1, [sp, #0]
 801f514:	6a1d      	ldr	r5, [r3, #32]
 801f516:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 801f51a:	47a8      	blx	r5
 801f51c:	6860      	ldr	r0, [r4, #4]
 801f51e:	6803      	ldr	r3, [r0, #0]
 801f520:	69db      	ldr	r3, [r3, #28]
 801f522:	4798      	blx	r3
 801f524:	b00e      	add	sp, #56	@ 0x38
 801f526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f52a:	bf00      	nop
 801f52c:	42b40000 	.word	0x42b40000
 801f530:	43340000 	.word	0x43340000
 801f534:	43870000 	.word	0x43870000

0801f538 <_ZN8touchgfx9Matrix3x35resetEv>:
 801f538:	2300      	movs	r3, #0
 801f53a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801f53e:	6043      	str	r3, [r0, #4]
 801f540:	6002      	str	r2, [r0, #0]
 801f542:	6083      	str	r3, [r0, #8]
 801f544:	60c3      	str	r3, [r0, #12]
 801f546:	6102      	str	r2, [r0, #16]
 801f548:	6143      	str	r3, [r0, #20]
 801f54a:	6183      	str	r3, [r0, #24]
 801f54c:	61c3      	str	r3, [r0, #28]
 801f54e:	6202      	str	r2, [r0, #32]
 801f550:	4770      	bx	lr

0801f552 <_ZN8touchgfx9Matrix3x3C1Ev>:
 801f552:	b508      	push	{r3, lr}
 801f554:	f7ff fff0 	bl	801f538 <_ZN8touchgfx9Matrix3x35resetEv>
 801f558:	bd08      	pop	{r3, pc}

0801f55a <_ZN8touchgfx9Matrix3x35scaleEff>:
 801f55a:	edd0 7a00 	vldr	s15, [r0]
 801f55e:	ee67 7a80 	vmul.f32	s15, s15, s0
 801f562:	edc0 7a00 	vstr	s15, [r0]
 801f566:	edd0 7a01 	vldr	s15, [r0, #4]
 801f56a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801f56e:	edc0 7a01 	vstr	s15, [r0, #4]
 801f572:	edd0 7a02 	vldr	s15, [r0, #8]
 801f576:	ee27 0a80 	vmul.f32	s0, s15, s0
 801f57a:	edd0 7a03 	vldr	s15, [r0, #12]
 801f57e:	ee67 7aa0 	vmul.f32	s15, s15, s1
 801f582:	ed80 0a02 	vstr	s0, [r0, #8]
 801f586:	edc0 7a03 	vstr	s15, [r0, #12]
 801f58a:	edd0 7a04 	vldr	s15, [r0, #16]
 801f58e:	ee67 7aa0 	vmul.f32	s15, s15, s1
 801f592:	edc0 7a04 	vstr	s15, [r0, #16]
 801f596:	edd0 7a05 	vldr	s15, [r0, #20]
 801f59a:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801f59e:	edc0 0a05 	vstr	s1, [r0, #20]
 801f5a2:	4770      	bx	lr

0801f5a4 <_ZN8touchgfx9Matrix3x36rotateEf>:
 801f5a4:	eddf 7a24 	vldr	s15, [pc, #144]	@ 801f638 <_ZN8touchgfx9Matrix3x36rotateEf+0x94>
 801f5a8:	ee20 0a27 	vmul.f32	s0, s0, s15
 801f5ac:	eddf 7a23 	vldr	s15, [pc, #140]	@ 801f63c <_ZN8touchgfx9Matrix3x36rotateEf+0x98>
 801f5b0:	b510      	push	{r4, lr}
 801f5b2:	ed2d 8b02 	vpush	{d8}
 801f5b6:	eec0 8a27 	vdiv.f32	s17, s0, s15
 801f5ba:	4604      	mov	r4, r0
 801f5bc:	eeb0 0a68 	vmov.f32	s0, s17
 801f5c0:	f00c fb82 	bl	802bcc8 <cosf>
 801f5c4:	eeb0 8a40 	vmov.f32	s16, s0
 801f5c8:	eeb0 0a68 	vmov.f32	s0, s17
 801f5cc:	f00c fab8 	bl	802bb40 <sinf>
 801f5d0:	edd4 6a03 	vldr	s13, [r4, #12]
 801f5d4:	edd4 4a00 	vldr	s9, [r4]
 801f5d8:	ee60 7a66 	vnmul.f32	s15, s0, s13
 801f5dc:	ed94 7a04 	vldr	s14, [r4, #16]
 801f5e0:	ed94 5a01 	vldr	s10, [r4, #4]
 801f5e4:	ee66 6a88 	vmul.f32	s13, s13, s16
 801f5e8:	edd4 5a02 	vldr	s11, [r4, #8]
 801f5ec:	eee8 7a24 	vfma.f32	s15, s16, s9
 801f5f0:	eee0 6a24 	vfma.f32	s13, s0, s9
 801f5f4:	edc4 7a00 	vstr	s15, [r4]
 801f5f8:	ee60 7a47 	vnmul.f32	s15, s0, s14
 801f5fc:	ee27 7a08 	vmul.f32	s14, s14, s16
 801f600:	edc4 6a03 	vstr	s13, [r4, #12]
 801f604:	eee8 7a05 	vfma.f32	s15, s16, s10
 801f608:	eea0 7a05 	vfma.f32	s14, s0, s10
 801f60c:	edc4 7a01 	vstr	s15, [r4, #4]
 801f610:	edd4 7a05 	vldr	s15, [r4, #20]
 801f614:	ed84 7a04 	vstr	s14, [r4, #16]
 801f618:	ee20 6a67 	vnmul.f32	s12, s0, s15
 801f61c:	ee67 7a88 	vmul.f32	s15, s15, s16
 801f620:	eea8 6a25 	vfma.f32	s12, s16, s11
 801f624:	eee0 7a25 	vfma.f32	s15, s0, s11
 801f628:	ecbd 8b02 	vpop	{d8}
 801f62c:	ed84 6a02 	vstr	s12, [r4, #8]
 801f630:	edc4 7a05 	vstr	s15, [r4, #20]
 801f634:	bd10      	pop	{r4, pc}
 801f636:	bf00      	nop
 801f638:	40490fdb 	.word	0x40490fdb
 801f63c:	43340000 	.word	0x43340000

0801f640 <_ZN8touchgfx9Matrix3x39translateEff>:
 801f640:	ed90 6a06 	vldr	s12, [r0, #24]
 801f644:	edd0 7a00 	vldr	s15, [r0]
 801f648:	edd0 6a07 	vldr	s13, [r0, #28]
 801f64c:	eee6 7a00 	vfma.f32	s15, s12, s0
 801f650:	ed90 7a08 	vldr	s14, [r0, #32]
 801f654:	edc0 7a00 	vstr	s15, [r0]
 801f658:	edd0 7a01 	vldr	s15, [r0, #4]
 801f65c:	eee6 7a80 	vfma.f32	s15, s13, s0
 801f660:	edc0 7a01 	vstr	s15, [r0, #4]
 801f664:	edd0 7a02 	vldr	s15, [r0, #8]
 801f668:	eee7 7a00 	vfma.f32	s15, s14, s0
 801f66c:	edc0 7a02 	vstr	s15, [r0, #8]
 801f670:	edd0 7a03 	vldr	s15, [r0, #12]
 801f674:	eee6 7a20 	vfma.f32	s15, s12, s1
 801f678:	edc0 7a03 	vstr	s15, [r0, #12]
 801f67c:	edd0 7a04 	vldr	s15, [r0, #16]
 801f680:	eee6 7aa0 	vfma.f32	s15, s13, s1
 801f684:	edc0 7a04 	vstr	s15, [r0, #16]
 801f688:	edd0 7a05 	vldr	s15, [r0, #20]
 801f68c:	eee7 7a20 	vfma.f32	s15, s14, s1
 801f690:	edc0 7a05 	vstr	s15, [r0, #20]
 801f694:	4770      	bx	lr

0801f696 <_ZNK8touchgfx9Matrix3x315affineTransformEff>:
 801f696:	edd0 6a01 	vldr	s13, [r0, #4]
 801f69a:	b084      	sub	sp, #16
 801f69c:	edd0 7a04 	vldr	s15, [r0, #16]
 801f6a0:	ed90 7a03 	vldr	s14, [r0, #12]
 801f6a4:	ee60 7aa7 	vmul.f32	s15, s1, s15
 801f6a8:	ee60 0aa6 	vmul.f32	s1, s1, s13
 801f6ac:	edd0 6a00 	vldr	s13, [r0]
 801f6b0:	eee7 7a00 	vfma.f32	s15, s14, s0
 801f6b4:	ed90 7a05 	vldr	s14, [r0, #20]
 801f6b8:	eee6 0a80 	vfma.f32	s1, s13, s0
 801f6bc:	ed90 0a02 	vldr	s0, [r0, #8]
 801f6c0:	ee30 0a80 	vadd.f32	s0, s1, s0
 801f6c4:	ee77 0a87 	vadd.f32	s1, s15, s14
 801f6c8:	b004      	add	sp, #16
 801f6ca:	4770      	bx	lr

0801f6cc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801f6cc:	b530      	push	{r4, r5, lr}
 801f6ce:	8083      	strh	r3, [r0, #4]
 801f6d0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801f6d4:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801f6d8:	80c3      	strh	r3, [r0, #6]
 801f6da:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801f6de:	6141      	str	r1, [r0, #20]
 801f6e0:	7203      	strb	r3, [r0, #8]
 801f6e2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801f6e6:	8302      	strh	r2, [r0, #24]
 801f6e8:	7243      	strb	r3, [r0, #9]
 801f6ea:	7a83      	ldrb	r3, [r0, #10]
 801f6ec:	f365 0306 	bfi	r3, r5, #0, #7
 801f6f0:	f89d 501c 	ldrb.w	r5, [sp, #28]
 801f6f4:	f365 13c7 	bfi	r3, r5, #7, #1
 801f6f8:	7283      	strb	r3, [r0, #10]
 801f6fa:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801f6fe:	72c3      	strb	r3, [r0, #11]
 801f700:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801f704:	7303      	strb	r3, [r0, #12]
 801f706:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801f70a:	81c3      	strh	r3, [r0, #14]
 801f70c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801f710:	8203      	strh	r3, [r0, #16]
 801f712:	4b01      	ldr	r3, [pc, #4]	@ (801f718 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 801f714:	6003      	str	r3, [r0, #0]
 801f716:	bd30      	pop	{r4, r5, pc}
 801f718:	0802f034 	.word	0x0802f034

0801f71c <_ZNK8touchgfx9ConstFont4findEt>:
 801f71c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f71e:	6944      	ldr	r4, [r0, #20]
 801f720:	b3bc      	cbz	r4, 801f792 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801f722:	88a3      	ldrh	r3, [r4, #4]
 801f724:	8b02      	ldrh	r2, [r0, #24]
 801f726:	1acb      	subs	r3, r1, r3
 801f728:	f102 32ff 	add.w	r2, r2, #4294967295
 801f72c:	d431      	bmi.n	801f792 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801f72e:	4293      	cmp	r3, r2
 801f730:	dd0c      	ble.n	801f74c <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801f732:	230e      	movs	r3, #14
 801f734:	fb03 4302 	mla	r3, r3, r2, r4
 801f738:	889b      	ldrh	r3, [r3, #4]
 801f73a:	1a5b      	subs	r3, r3, r1
 801f73c:	1ad3      	subs	r3, r2, r3
 801f73e:	429a      	cmp	r2, r3
 801f740:	db27      	blt.n	801f792 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801f742:	2b00      	cmp	r3, #0
 801f744:	bfbc      	itt	lt
 801f746:	2302      	movlt	r3, #2
 801f748:	fb92 f3f3 	sdivlt	r3, r2, r3
 801f74c:	2500      	movs	r5, #0
 801f74e:	260e      	movs	r6, #14
 801f750:	4295      	cmp	r5, r2
 801f752:	dc1e      	bgt.n	801f792 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801f754:	fb06 4003 	mla	r0, r6, r3, r4
 801f758:	8887      	ldrh	r7, [r0, #4]
 801f75a:	42b9      	cmp	r1, r7
 801f75c:	d01a      	beq.n	801f794 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801f75e:	d20d      	bcs.n	801f77c <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801f760:	1e5a      	subs	r2, r3, #1
 801f762:	4295      	cmp	r5, r2
 801f764:	dc15      	bgt.n	801f792 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801f766:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801f76a:	1a5b      	subs	r3, r3, r1
 801f76c:	1ad3      	subs	r3, r2, r3
 801f76e:	429a      	cmp	r2, r3
 801f770:	db0f      	blt.n	801f792 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801f772:	429d      	cmp	r5, r3
 801f774:	ddec      	ble.n	801f750 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801f776:	1953      	adds	r3, r2, r5
 801f778:	105b      	asrs	r3, r3, #1
 801f77a:	e7e9      	b.n	801f750 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801f77c:	1c5d      	adds	r5, r3, #1
 801f77e:	42aa      	cmp	r2, r5
 801f780:	db07      	blt.n	801f792 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801f782:	8a43      	ldrh	r3, [r0, #18]
 801f784:	1acb      	subs	r3, r1, r3
 801f786:	442b      	add	r3, r5
 801f788:	429d      	cmp	r5, r3
 801f78a:	dc02      	bgt.n	801f792 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801f78c:	429a      	cmp	r2, r3
 801f78e:	dadf      	bge.n	801f750 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801f790:	e7f1      	b.n	801f776 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801f792:	2000      	movs	r0, #0
 801f794:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801f796 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801f796:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f798:	4604      	mov	r4, r0
 801f79a:	4617      	mov	r7, r2
 801f79c:	461e      	mov	r6, r3
 801f79e:	b911      	cbnz	r1, 801f7a6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801f7a0:	2500      	movs	r5, #0
 801f7a2:	4628      	mov	r0, r5
 801f7a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f7a6:	290a      	cmp	r1, #10
 801f7a8:	d0fa      	beq.n	801f7a0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801f7aa:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801f7ae:	4291      	cmp	r1, r2
 801f7b0:	d0f6      	beq.n	801f7a0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801f7b2:	f242 020b 	movw	r2, #8203	@ 0x200b
 801f7b6:	4291      	cmp	r1, r2
 801f7b8:	d0f2      	beq.n	801f7a0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801f7ba:	f7ff ffaf 	bl	801f71c <_ZNK8touchgfx9ConstFont4findEt>
 801f7be:	4605      	mov	r5, r0
 801f7c0:	b950      	cbnz	r0, 801f7d8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801f7c2:	6823      	ldr	r3, [r4, #0]
 801f7c4:	4620      	mov	r0, r4
 801f7c6:	691b      	ldr	r3, [r3, #16]
 801f7c8:	4798      	blx	r3
 801f7ca:	4601      	mov	r1, r0
 801f7cc:	4620      	mov	r0, r4
 801f7ce:	f7ff ffa5 	bl	801f71c <_ZNK8touchgfx9ConstFont4findEt>
 801f7d2:	4605      	mov	r5, r0
 801f7d4:	2800      	cmp	r0, #0
 801f7d6:	d0e3      	beq.n	801f7a0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801f7d8:	6823      	ldr	r3, [r4, #0]
 801f7da:	4629      	mov	r1, r5
 801f7dc:	4620      	mov	r0, r4
 801f7de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801f7e0:	4798      	blx	r3
 801f7e2:	6038      	str	r0, [r7, #0]
 801f7e4:	6823      	ldr	r3, [r4, #0]
 801f7e6:	4620      	mov	r0, r4
 801f7e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f7ea:	4798      	blx	r3
 801f7ec:	7030      	strb	r0, [r6, #0]
 801f7ee:	e7d8      	b.n	801f7a2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801f7f0 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801f7f0:	2000      	movs	r0, #0
 801f7f2:	4770      	bx	lr

0801f7f4 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801f7f4:	2001      	movs	r0, #1
 801f7f6:	4770      	bx	lr

0801f7f8 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801f7f8:	2002      	movs	r0, #2
 801f7fa:	4770      	bx	lr

0801f7fc <_ZN8touchgfx12GestureEventD1Ev>:
 801f7fc:	4770      	bx	lr

0801f7fe <_ZN8touchgfx9DragEventD1Ev>:
 801f7fe:	4770      	bx	lr

0801f800 <_ZN8touchgfx10ClickEventD1Ev>:
 801f800:	4770      	bx	lr

0801f802 <_ZN8touchgfx10ClickEventD0Ev>:
 801f802:	b510      	push	{r4, lr}
 801f804:	4604      	mov	r4, r0
 801f806:	210c      	movs	r1, #12
 801f808:	f00c f927 	bl	802ba5a <_ZdlPvj>
 801f80c:	4620      	mov	r0, r4
 801f80e:	bd10      	pop	{r4, pc}

0801f810 <_ZN8touchgfx9DragEventD0Ev>:
 801f810:	b510      	push	{r4, lr}
 801f812:	4604      	mov	r4, r0
 801f814:	2110      	movs	r1, #16
 801f816:	f00c f920 	bl	802ba5a <_ZdlPvj>
 801f81a:	4620      	mov	r0, r4
 801f81c:	bd10      	pop	{r4, pc}

0801f81e <_ZN8touchgfx12GestureEventD0Ev>:
 801f81e:	b510      	push	{r4, lr}
 801f820:	4604      	mov	r4, r0
 801f822:	210c      	movs	r1, #12
 801f824:	f00c f919 	bl	802ba5a <_ZdlPvj>
 801f828:	4620      	mov	r0, r4
 801f82a:	bd10      	pop	{r4, pc}

0801f82c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801f82c:	b530      	push	{r4, r5, lr}
 801f82e:	460d      	mov	r5, r1
 801f830:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801f832:	b087      	sub	sp, #28
 801f834:	4604      	mov	r4, r0
 801f836:	b301      	cbz	r1, 801f87a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801f838:	a801      	add	r0, sp, #4
 801f83a:	f7ff fc19 	bl	801f070 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f83e:	892a      	ldrh	r2, [r5, #8]
 801f840:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801f844:	7928      	ldrb	r0, [r5, #4]
 801f846:	1ad2      	subs	r2, r2, r3
 801f848:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801f84a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801f84e:	441a      	add	r2, r3
 801f850:	896b      	ldrh	r3, [r5, #10]
 801f852:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801f856:	f88d 0010 	strb.w	r0, [sp, #16]
 801f85a:	1b5b      	subs	r3, r3, r5
 801f85c:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 801f85e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801f860:	442b      	add	r3, r5
 801f862:	4d07      	ldr	r5, [pc, #28]	@ (801f880 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801f864:	f8ad 1012 	strh.w	r1, [sp, #18]
 801f868:	a903      	add	r1, sp, #12
 801f86a:	9503      	str	r5, [sp, #12]
 801f86c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801f870:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f874:	6803      	ldr	r3, [r0, #0]
 801f876:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801f878:	4798      	blx	r3
 801f87a:	b007      	add	sp, #28
 801f87c:	bd30      	pop	{r4, r5, pc}
 801f87e:	bf00      	nop
 801f880:	0802f0c4 	.word	0x0802f0c4

0801f884 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801f884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f888:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801f88a:	b08a      	sub	sp, #40	@ 0x28
 801f88c:	4604      	mov	r4, r0
 801f88e:	460d      	mov	r5, r1
 801f890:	b113      	cbz	r3, 801f898 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801f892:	790b      	ldrb	r3, [r1, #4]
 801f894:	2b00      	cmp	r3, #0
 801f896:	d044      	beq.n	801f922 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801f898:	f104 0804 	add.w	r8, r4, #4
 801f89c:	a803      	add	r0, sp, #12
 801f89e:	4641      	mov	r1, r8
 801f8a0:	f7ff fbe6 	bl	801f070 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f8a4:	792b      	ldrb	r3, [r5, #4]
 801f8a6:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801f8aa:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801f8ae:	b983      	cbnz	r3, 801f8d2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801f8b0:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 801f8b4:	892a      	ldrh	r2, [r5, #8]
 801f8b6:	88e9      	ldrh	r1, [r5, #6]
 801f8b8:	4640      	mov	r0, r8
 801f8ba:	1b92      	subs	r2, r2, r6
 801f8bc:	9301      	str	r3, [sp, #4]
 801f8be:	1bc9      	subs	r1, r1, r7
 801f8c0:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 801f8c4:	b212      	sxth	r2, r2
 801f8c6:	9300      	str	r3, [sp, #0]
 801f8c8:	b209      	sxth	r1, r1
 801f8ca:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 801f8ce:	f7f9 fe6f 	bl	80195b0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801f8d2:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801f8d4:	b329      	cbz	r1, 801f922 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801f8d6:	a805      	add	r0, sp, #20
 801f8d8:	f7ff fbca 	bl	801f070 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f8dc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801f8e0:	792b      	ldrb	r3, [r5, #4]
 801f8e2:	a907      	add	r1, sp, #28
 801f8e4:	1abf      	subs	r7, r7, r2
 801f8e6:	88ea      	ldrh	r2, [r5, #6]
 801f8e8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801f8ea:	4417      	add	r7, r2
 801f8ec:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 801f8ee:	f88d 3020 	strb.w	r3, [sp, #32]
 801f8f2:	4417      	add	r7, r2
 801f8f4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801f8f8:	1ab6      	subs	r6, r6, r2
 801f8fa:	892a      	ldrh	r2, [r5, #8]
 801f8fc:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 801f900:	4416      	add	r6, r2
 801f902:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801f904:	4416      	add	r6, r2
 801f906:	4a08      	ldr	r2, [pc, #32]	@ (801f928 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801f908:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 801f90c:	2600      	movs	r6, #0
 801f90e:	9207      	str	r2, [sp, #28]
 801f910:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 801f914:	6803      	ldr	r3, [r0, #0]
 801f916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801f918:	4798      	blx	r3
 801f91a:	792b      	ldrb	r3, [r5, #4]
 801f91c:	b10b      	cbz	r3, 801f922 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801f91e:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 801f922:	b00a      	add	sp, #40	@ 0x28
 801f924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f928:	0802f09c 	.word	0x0802f09c

0801f92c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801f92c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f930:	460c      	mov	r4, r1
 801f932:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801f934:	b088      	sub	sp, #32
 801f936:	4605      	mov	r5, r0
 801f938:	2900      	cmp	r1, #0
 801f93a:	d06d      	beq.n	801fa18 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801f93c:	4668      	mov	r0, sp
 801f93e:	f7ff fb97 	bl	801f070 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f942:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 801f944:	88e3      	ldrh	r3, [r4, #6]
 801f946:	f9bd 8000 	ldrsh.w	r8, [sp]
 801f94a:	440b      	add	r3, r1
 801f94c:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801f950:	b21b      	sxth	r3, r3
 801f952:	4543      	cmp	r3, r8
 801f954:	db31      	blt.n	801f9ba <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801f956:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801f95a:	44c4      	add	ip, r8
 801f95c:	fa0f fc8c 	sxth.w	ip, ip
 801f960:	4563      	cmp	r3, ip
 801f962:	da2a      	bge.n	801f9ba <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801f964:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 801f966:	8926      	ldrh	r6, [r4, #8]
 801f968:	4416      	add	r6, r2
 801f96a:	b236      	sxth	r6, r6
 801f96c:	42be      	cmp	r6, r7
 801f96e:	db24      	blt.n	801f9ba <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801f970:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801f974:	4438      	add	r0, r7
 801f976:	b200      	sxth	r0, r0
 801f978:	4286      	cmp	r6, r0
 801f97a:	da1e      	bge.n	801f9ba <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801f97c:	8963      	ldrh	r3, [r4, #10]
 801f97e:	4419      	add	r1, r3
 801f980:	b209      	sxth	r1, r1
 801f982:	4541      	cmp	r1, r8
 801f984:	db08      	blt.n	801f998 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801f986:	4561      	cmp	r1, ip
 801f988:	da06      	bge.n	801f998 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801f98a:	89a3      	ldrh	r3, [r4, #12]
 801f98c:	441a      	add	r2, r3
 801f98e:	b212      	sxth	r2, r2
 801f990:	42ba      	cmp	r2, r7
 801f992:	db01      	blt.n	801f998 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801f994:	4282      	cmp	r2, r0
 801f996:	db10      	blt.n	801f9ba <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801f998:	4b21      	ldr	r3, [pc, #132]	@ (801fa20 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801f99a:	a904      	add	r1, sp, #16
 801f99c:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801f99e:	9304      	str	r3, [sp, #16]
 801f9a0:	2302      	movs	r3, #2
 801f9a2:	f88d 3014 	strb.w	r3, [sp, #20]
 801f9a6:	2300      	movs	r3, #0
 801f9a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f9ac:	f8ad 3018 	strh.w	r3, [sp, #24]
 801f9b0:	f8ad 301a 	strh.w	r3, [sp, #26]
 801f9b4:	6803      	ldr	r3, [r0, #0]
 801f9b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801f9b8:	4798      	blx	r3
 801f9ba:	1d29      	adds	r1, r5, #4
 801f9bc:	a802      	add	r0, sp, #8
 801f9be:	f7ff fb57 	bl	801f070 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f9c2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801f9c6:	88e0      	ldrh	r0, [r4, #6]
 801f9c8:	eba3 0808 	sub.w	r8, r3, r8
 801f9cc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801f9d0:	7921      	ldrb	r1, [r4, #4]
 801f9d2:	fa1f f888 	uxth.w	r8, r8
 801f9d6:	1bdf      	subs	r7, r3, r7
 801f9d8:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 801f9dc:	b2bb      	uxth	r3, r7
 801f9de:	4440      	add	r0, r8
 801f9e0:	8922      	ldrh	r2, [r4, #8]
 801f9e2:	8967      	ldrh	r7, [r4, #10]
 801f9e4:	4460      	add	r0, ip
 801f9e6:	89a4      	ldrh	r4, [r4, #12]
 801f9e8:	441a      	add	r2, r3
 801f9ea:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 801f9ec:	44b8      	add	r8, r7
 801f9ee:	4423      	add	r3, r4
 801f9f0:	f8ad 0016 	strh.w	r0, [sp, #22]
 801f9f4:	4432      	add	r2, r6
 801f9f6:	44e0      	add	r8, ip
 801f9f8:	4433      	add	r3, r6
 801f9fa:	4c0a      	ldr	r4, [pc, #40]	@ (801fa24 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801f9fc:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801f9fe:	f88d 1014 	strb.w	r1, [sp, #20]
 801fa02:	a904      	add	r1, sp, #16
 801fa04:	9404      	str	r4, [sp, #16]
 801fa06:	f8ad 2018 	strh.w	r2, [sp, #24]
 801fa0a:	f8ad 801a 	strh.w	r8, [sp, #26]
 801fa0e:	f8ad 301c 	strh.w	r3, [sp, #28]
 801fa12:	6803      	ldr	r3, [r0, #0]
 801fa14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801fa16:	4798      	blx	r3
 801fa18:	b008      	add	sp, #32
 801fa1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fa1e:	bf00      	nop
 801fa20:	0802f09c 	.word	0x0802f09c
 801fa24:	0802f0b0 	.word	0x0802f0b0

0801fa28 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801fa28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801fa2a:	4604      	mov	r4, r0
 801fa2c:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801fa30:	3201      	adds	r2, #1
 801fa32:	d112      	bne.n	801fa5a <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801fa34:	2500      	movs	r5, #0
 801fa36:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801fa3a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801fa3e:	6803      	ldr	r3, [r0, #0]
 801fa40:	9500      	str	r5, [sp, #0]
 801fa42:	466d      	mov	r5, sp
 801fa44:	f8ad 1004 	strh.w	r1, [sp, #4]
 801fa48:	f8ad 2006 	strh.w	r2, [sp, #6]
 801fa4c:	4629      	mov	r1, r5
 801fa4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fa50:	4798      	blx	r3
 801fa52:	e895 0003 	ldmia.w	r5, {r0, r1}
 801fa56:	e884 0003 	stmia.w	r4, {r0, r1}
 801fa5a:	4620      	mov	r0, r4
 801fa5c:	b003      	add	sp, #12
 801fa5e:	bd30      	pop	{r4, r5, pc}

0801fa60 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801fa60:	b513      	push	{r0, r1, r4, lr}
 801fa62:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801fa66:	4604      	mov	r4, r0
 801fa68:	3301      	adds	r3, #1
 801fa6a:	d109      	bne.n	801fa80 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801fa6c:	4601      	mov	r1, r0
 801fa6e:	4668      	mov	r0, sp
 801fa70:	f7ff fafe 	bl	801f070 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801fa74:	f8bd 3000 	ldrh.w	r3, [sp]
 801fa78:	8423      	strh	r3, [r4, #32]
 801fa7a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801fa7e:	8463      	strh	r3, [r4, #34]	@ 0x22
 801fa80:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801fa84:	b002      	add	sp, #8
 801fa86:	bd10      	pop	{r4, pc}

0801fa88 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801fa88:	b513      	push	{r0, r1, r4, lr}
 801fa8a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 801fa8e:	4604      	mov	r4, r0
 801fa90:	3301      	adds	r3, #1
 801fa92:	d109      	bne.n	801faa8 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801fa94:	4601      	mov	r1, r0
 801fa96:	4668      	mov	r0, sp
 801fa98:	f7ff faea 	bl	801f070 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801fa9c:	f8bd 3000 	ldrh.w	r3, [sp]
 801faa0:	8423      	strh	r3, [r4, #32]
 801faa2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801faa6:	8463      	strh	r3, [r4, #34]	@ 0x22
 801faa8:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 801faac:	b002      	add	sp, #8
 801faae:	bd10      	pop	{r4, pc}

0801fab0 <_ZN8touchgfx6ScreenC1Ev>:
 801fab0:	b570      	push	{r4, r5, r6, lr}
 801fab2:	4b17      	ldr	r3, [pc, #92]	@ (801fb10 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801fab4:	4605      	mov	r5, r0
 801fab6:	4a17      	ldr	r2, [pc, #92]	@ (801fb14 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801fab8:	2101      	movs	r1, #1
 801faba:	f845 3b04 	str.w	r3, [r5], #4
 801fabe:	2300      	movs	r3, #0
 801fac0:	6042      	str	r2, [r0, #4]
 801fac2:	4604      	mov	r4, r0
 801fac4:	8103      	strh	r3, [r0, #8]
 801fac6:	8143      	strh	r3, [r0, #10]
 801fac8:	8183      	strh	r3, [r0, #12]
 801faca:	81c3      	strh	r3, [r0, #14]
 801facc:	8203      	strh	r3, [r0, #16]
 801face:	8243      	strh	r3, [r0, #18]
 801fad0:	8283      	strh	r3, [r0, #20]
 801fad2:	82c3      	strh	r3, [r0, #22]
 801fad4:	6203      	str	r3, [r0, #32]
 801fad6:	8483      	strh	r3, [r0, #36]	@ 0x24
 801fad8:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801fada:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 801fade:	6343      	str	r3, [r0, #52]	@ 0x34
 801fae0:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 801fae4:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801fae8:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801faec:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 801faf0:	4b09      	ldr	r3, [pc, #36]	@ (801fb18 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801faf2:	4628      	mov	r0, r5
 801faf4:	f9b3 6000 	ldrsh.w	r6, [r3]
 801faf8:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 801fafa:	4a08      	ldr	r2, [pc, #32]	@ (801fb1c <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801fafc:	f9b2 1000 	ldrsh.w	r1, [r2]
 801fb00:	4798      	blx	r3
 801fb02:	6863      	ldr	r3, [r4, #4]
 801fb04:	4628      	mov	r0, r5
 801fb06:	4631      	mov	r1, r6
 801fb08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801fb0a:	4798      	blx	r3
 801fb0c:	4620      	mov	r0, r4
 801fb0e:	bd70      	pop	{r4, r5, r6, pc}
 801fb10:	0802f0d8 	.word	0x0802f0d8
 801fb14:	0802ea98 	.word	0x0802ea98
 801fb18:	24034222 	.word	0x24034222
 801fb1c:	24034220 	.word	0x24034220

0801fb20 <_ZN8touchgfx6Screen4drawEv>:
 801fb20:	4b09      	ldr	r3, [pc, #36]	@ (801fb48 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801fb22:	b507      	push	{r0, r1, r2, lr}
 801fb24:	f9b3 2000 	ldrsh.w	r2, [r3]
 801fb28:	2100      	movs	r1, #0
 801fb2a:	4b08      	ldr	r3, [pc, #32]	@ (801fb4c <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801fb2c:	9100      	str	r1, [sp, #0]
 801fb2e:	4669      	mov	r1, sp
 801fb30:	f9b3 3000 	ldrsh.w	r3, [r3]
 801fb34:	f8ad 2004 	strh.w	r2, [sp, #4]
 801fb38:	f8ad 3006 	strh.w	r3, [sp, #6]
 801fb3c:	6803      	ldr	r3, [r0, #0]
 801fb3e:	689b      	ldr	r3, [r3, #8]
 801fb40:	4798      	blx	r3
 801fb42:	b003      	add	sp, #12
 801fb44:	f85d fb04 	ldr.w	pc, [sp], #4
 801fb48:	24034220 	.word	0x24034220
 801fb4c:	24034222 	.word	0x24034222

0801fb50 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801fb50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb54:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801fb58:	b089      	sub	sp, #36	@ 0x24
 801fb5a:	4680      	mov	r8, r0
 801fb5c:	460c      	mov	r4, r1
 801fb5e:	2b00      	cmp	r3, #0
 801fb60:	4615      	mov	r5, r2
 801fb62:	dd0e      	ble.n	801fb82 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801fb64:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801fb68:	2b00      	cmp	r3, #0
 801fb6a:	dd0a      	ble.n	801fb82 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801fb6c:	4628      	mov	r0, r5
 801fb6e:	f7ff ff5b 	bl	801fa28 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801fb72:	4621      	mov	r1, r4
 801fb74:	f7fe f88a 	bl	801dc8c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801fb78:	69eb      	ldr	r3, [r5, #28]
 801fb7a:	b928      	cbnz	r0, 801fb88 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801fb7c:	461d      	mov	r5, r3
 801fb7e:	2b00      	cmp	r3, #0
 801fb80:	d1f4      	bne.n	801fb6c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801fb82:	b009      	add	sp, #36	@ 0x24
 801fb84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb88:	ae04      	add	r6, sp, #16
 801fb8a:	2b00      	cmp	r3, #0
 801fb8c:	f000 80b5 	beq.w	801fcfa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801fb90:	682b      	ldr	r3, [r5, #0]
 801fb92:	4629      	mov	r1, r5
 801fb94:	a802      	add	r0, sp, #8
 801fb96:	68db      	ldr	r3, [r3, #12]
 801fb98:	4798      	blx	r3
 801fb9a:	4628      	mov	r0, r5
 801fb9c:	f7ff ff60 	bl	801fa60 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801fba0:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801fba4:	4407      	add	r7, r0
 801fba6:	4628      	mov	r0, r5
 801fba8:	f7ff ff6e 	bl	801fa88 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801fbac:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801fbb0:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801fbb4:	b23f      	sxth	r7, r7
 801fbb6:	4418      	add	r0, r3
 801fbb8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801fbbc:	4621      	mov	r1, r4
 801fbbe:	f8ad 2014 	strh.w	r2, [sp, #20]
 801fbc2:	f8ad 0012 	strh.w	r0, [sp, #18]
 801fbc6:	4630      	mov	r0, r6
 801fbc8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801fbcc:	f8ad 7010 	strh.w	r7, [sp, #16]
 801fbd0:	f7f9 fdd0 	bl	8019774 <_ZN8touchgfx4RectaNERKS0_>
 801fbd4:	4628      	mov	r0, r5
 801fbd6:	f7ff ff27 	bl	801fa28 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801fbda:	ab06      	add	r3, sp, #24
 801fbdc:	4602      	mov	r2, r0
 801fbde:	e896 0003 	ldmia.w	r6, {r0, r1}
 801fbe2:	e883 0003 	stmia.w	r3, {r0, r1}
 801fbe6:	4611      	mov	r1, r2
 801fbe8:	4618      	mov	r0, r3
 801fbea:	f7f9 fdc3 	bl	8019774 <_ZN8touchgfx4RectaNERKS0_>
 801fbee:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801fbf2:	f9b4 1000 	ldrsh.w	r1, [r4]
 801fbf6:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801fbfa:	4299      	cmp	r1, r3
 801fbfc:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801fc00:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801fc04:	d10b      	bne.n	801fc1e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801fc06:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801fc0a:	4552      	cmp	r2, sl
 801fc0c:	d107      	bne.n	801fc1e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801fc0e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801fc12:	455a      	cmp	r2, fp
 801fc14:	d103      	bne.n	801fc1e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801fc16:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801fc1a:	454a      	cmp	r2, r9
 801fc1c:	d06d      	beq.n	801fcfa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801fc1e:	f1bb 0f00 	cmp.w	fp, #0
 801fc22:	dd65      	ble.n	801fcf0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801fc24:	f1b9 0f00 	cmp.w	r9, #0
 801fc28:	dd62      	ble.n	801fcf0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801fc2a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801fc2e:	fa1f f08a 	uxth.w	r0, sl
 801fc32:	4552      	cmp	r2, sl
 801fc34:	9000      	str	r0, [sp, #0]
 801fc36:	da12      	bge.n	801fc5e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801fc38:	9301      	str	r3, [sp, #4]
 801fc3a:	9b00      	ldr	r3, [sp, #0]
 801fc3c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801fc40:	f8ad 2012 	strh.w	r2, [sp, #18]
 801fc44:	1a9a      	subs	r2, r3, r2
 801fc46:	f8ad 1010 	strh.w	r1, [sp, #16]
 801fc4a:	4631      	mov	r1, r6
 801fc4c:	f8ad 0014 	strh.w	r0, [sp, #20]
 801fc50:	4640      	mov	r0, r8
 801fc52:	f8ad 2016 	strh.w	r2, [sp, #22]
 801fc56:	69ea      	ldr	r2, [r5, #28]
 801fc58:	f7ff ff7a 	bl	801fb50 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801fc5c:	9b01      	ldr	r3, [sp, #4]
 801fc5e:	f9b4 2000 	ldrsh.w	r2, [r4]
 801fc62:	b29f      	uxth	r7, r3
 801fc64:	429a      	cmp	r2, r3
 801fc66:	da0d      	bge.n	801fc84 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801fc68:	f8ad 2010 	strh.w	r2, [sp, #16]
 801fc6c:	1aba      	subs	r2, r7, r2
 801fc6e:	f8ad a012 	strh.w	sl, [sp, #18]
 801fc72:	4631      	mov	r1, r6
 801fc74:	f8ad 2014 	strh.w	r2, [sp, #20]
 801fc78:	4640      	mov	r0, r8
 801fc7a:	f8ad 9016 	strh.w	r9, [sp, #22]
 801fc7e:	69ea      	ldr	r2, [r5, #28]
 801fc80:	f7ff ff66 	bl	801fb50 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801fc84:	8822      	ldrh	r2, [r4, #0]
 801fc86:	445f      	add	r7, fp
 801fc88:	88a3      	ldrh	r3, [r4, #4]
 801fc8a:	b2bf      	uxth	r7, r7
 801fc8c:	4413      	add	r3, r2
 801fc8e:	b23a      	sxth	r2, r7
 801fc90:	b29b      	uxth	r3, r3
 801fc92:	b219      	sxth	r1, r3
 801fc94:	4291      	cmp	r1, r2
 801fc96:	dd0d      	ble.n	801fcb4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801fc98:	1bdb      	subs	r3, r3, r7
 801fc9a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801fc9e:	f8ad a012 	strh.w	sl, [sp, #18]
 801fca2:	4631      	mov	r1, r6
 801fca4:	f8ad 3014 	strh.w	r3, [sp, #20]
 801fca8:	4640      	mov	r0, r8
 801fcaa:	f8ad 9016 	strh.w	r9, [sp, #22]
 801fcae:	69ea      	ldr	r2, [r5, #28]
 801fcb0:	f7ff ff4e 	bl	801fb50 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801fcb4:	88e2      	ldrh	r2, [r4, #6]
 801fcb6:	8863      	ldrh	r3, [r4, #2]
 801fcb8:	4413      	add	r3, r2
 801fcba:	9a00      	ldr	r2, [sp, #0]
 801fcbc:	444a      	add	r2, r9
 801fcbe:	b29b      	uxth	r3, r3
 801fcc0:	fa1f f982 	uxth.w	r9, r2
 801fcc4:	b219      	sxth	r1, r3
 801fcc6:	fa0f f289 	sxth.w	r2, r9
 801fcca:	428a      	cmp	r2, r1
 801fccc:	da15      	bge.n	801fcfa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801fcce:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801fcd2:	eba3 0309 	sub.w	r3, r3, r9
 801fcd6:	f9b4 0000 	ldrsh.w	r0, [r4]
 801fcda:	f8ad 1014 	strh.w	r1, [sp, #20]
 801fcde:	4631      	mov	r1, r6
 801fce0:	f8ad 0010 	strh.w	r0, [sp, #16]
 801fce4:	f8ad 2012 	strh.w	r2, [sp, #18]
 801fce8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801fcec:	69ea      	ldr	r2, [r5, #28]
 801fcee:	e001      	b.n	801fcf4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801fcf0:	69ea      	ldr	r2, [r5, #28]
 801fcf2:	4621      	mov	r1, r4
 801fcf4:	4640      	mov	r0, r8
 801fcf6:	f7ff ff2b 	bl	801fb50 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801fcfa:	4628      	mov	r0, r5
 801fcfc:	f7ff fe94 	bl	801fa28 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801fd00:	6861      	ldr	r1, [r4, #4]
 801fd02:	4602      	mov	r2, r0
 801fd04:	4633      	mov	r3, r6
 801fd06:	6820      	ldr	r0, [r4, #0]
 801fd08:	c303      	stmia	r3!, {r0, r1}
 801fd0a:	4611      	mov	r1, r2
 801fd0c:	4630      	mov	r0, r6
 801fd0e:	f7f9 fd31 	bl	8019774 <_ZN8touchgfx4RectaNERKS0_>
 801fd12:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801fd16:	2b00      	cmp	r3, #0
 801fd18:	f77f af33 	ble.w	801fb82 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801fd1c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801fd20:	2b00      	cmp	r3, #0
 801fd22:	f77f af2e 	ble.w	801fb82 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801fd26:	4628      	mov	r0, r5
 801fd28:	f7ff fe9a 	bl	801fa60 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801fd2c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801fd30:	1a18      	subs	r0, r3, r0
 801fd32:	f8ad 0010 	strh.w	r0, [sp, #16]
 801fd36:	4628      	mov	r0, r5
 801fd38:	f7ff fea6 	bl	801fa88 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801fd3c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801fd40:	4631      	mov	r1, r6
 801fd42:	1a18      	subs	r0, r3, r0
 801fd44:	f8ad 0012 	strh.w	r0, [sp, #18]
 801fd48:	4628      	mov	r0, r5
 801fd4a:	682b      	ldr	r3, [r5, #0]
 801fd4c:	689b      	ldr	r3, [r3, #8]
 801fd4e:	4798      	blx	r3
 801fd50:	e717      	b.n	801fb82 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801fd52 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801fd52:	b570      	push	{r4, r5, r6, lr}
 801fd54:	1d06      	adds	r6, r0, #4
 801fd56:	b086      	sub	sp, #24
 801fd58:	460c      	mov	r4, r1
 801fd5a:	2300      	movs	r3, #0
 801fd5c:	4631      	mov	r1, r6
 801fd5e:	4605      	mov	r5, r0
 801fd60:	a802      	add	r0, sp, #8
 801fd62:	9301      	str	r3, [sp, #4]
 801fd64:	f7ff f984 	bl	801f070 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801fd68:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801fd6c:	8822      	ldrh	r2, [r4, #0]
 801fd6e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801fd72:	1ad2      	subs	r2, r2, r3
 801fd74:	8863      	ldrh	r3, [r4, #2]
 801fd76:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801fd7a:	1a5b      	subs	r3, r3, r1
 801fd7c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801fd80:	f8ad 2010 	strh.w	r2, [sp, #16]
 801fd84:	aa01      	add	r2, sp, #4
 801fd86:	f8ad 0014 	strh.w	r0, [sp, #20]
 801fd8a:	4630      	mov	r0, r6
 801fd8c:	f8ad 1016 	strh.w	r1, [sp, #22]
 801fd90:	a904      	add	r1, sp, #16
 801fd92:	f8ad 3012 	strh.w	r3, [sp, #18]
 801fd96:	f7f9 fdc5 	bl	8019924 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801fd9a:	9a01      	ldr	r2, [sp, #4]
 801fd9c:	b11a      	cbz	r2, 801fda6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801fd9e:	4621      	mov	r1, r4
 801fda0:	4628      	mov	r0, r5
 801fda2:	f7ff fed5 	bl	801fb50 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801fda6:	b006      	add	sp, #24
 801fda8:	bd70      	pop	{r4, r5, r6, pc}

0801fdaa <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801fdaa:	4602      	mov	r2, r0
 801fdac:	b530      	push	{r4, r5, lr}
 801fdae:	4604      	mov	r4, r0
 801fdb0:	b085      	sub	sp, #20
 801fdb2:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801fdb6:	460d      	mov	r5, r1
 801fdb8:	466b      	mov	r3, sp
 801fdba:	6851      	ldr	r1, [r2, #4]
 801fdbc:	c303      	stmia	r3!, {r0, r1}
 801fdbe:	4629      	mov	r1, r5
 801fdc0:	4668      	mov	r0, sp
 801fdc2:	f7f9 fcd7 	bl	8019774 <_ZN8touchgfx4RectaNERKS0_>
 801fdc6:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801fdca:	b12b      	cbz	r3, 801fdd8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801fdcc:	4669      	mov	r1, sp
 801fdce:	4620      	mov	r0, r4
 801fdd0:	f7ff ffbf 	bl	801fd52 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801fdd4:	b005      	add	sp, #20
 801fdd6:	bd30      	pop	{r4, r5, pc}
 801fdd8:	3404      	adds	r4, #4
 801fdda:	a802      	add	r0, sp, #8
 801fddc:	4621      	mov	r1, r4
 801fdde:	f7ff f947 	bl	801f070 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801fde2:	f8bd 3000 	ldrh.w	r3, [sp]
 801fde6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801fdea:	4669      	mov	r1, sp
 801fdec:	4620      	mov	r0, r4
 801fdee:	1a9b      	subs	r3, r3, r2
 801fdf0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801fdf4:	f8ad 3000 	strh.w	r3, [sp]
 801fdf8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801fdfc:	1a9b      	subs	r3, r3, r2
 801fdfe:	f8ad 3002 	strh.w	r3, [sp, #2]
 801fe02:	f7f9 fd56 	bl	80198b2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801fe06:	e7e5      	b.n	801fdd4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801fe08 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801fe08:	460b      	mov	r3, r1
 801fe0a:	680a      	ldr	r2, [r1, #0]
 801fe0c:	1d01      	adds	r1, r0, #4
 801fe0e:	6992      	ldr	r2, [r2, #24]
 801fe10:	4618      	mov	r0, r3
 801fe12:	4710      	bx	r2

0801fe14 <_ZN8touchgfx12TextProviderC1Ev>:
 801fe14:	b538      	push	{r3, r4, r5, lr}
 801fe16:	2500      	movs	r5, #0
 801fe18:	2302      	movs	r3, #2
 801fe1a:	4604      	mov	r4, r0
 801fe1c:	220e      	movs	r2, #14
 801fe1e:	7403      	strb	r3, [r0, #16]
 801fe20:	4629      	mov	r1, r5
 801fe22:	6145      	str	r5, [r0, #20]
 801fe24:	7605      	strb	r5, [r0, #24]
 801fe26:	83c5      	strh	r5, [r0, #30]
 801fe28:	8405      	strh	r5, [r0, #32]
 801fe2a:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801fe2c:	8705      	strh	r5, [r0, #56]	@ 0x38
 801fe2e:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 801fe30:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 801fe34:	e9c0 5500 	strd	r5, r5, [r0]
 801fe38:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 801fe3c:	304c      	adds	r0, #76	@ 0x4c
 801fe3e:	f00c fc1f 	bl	802c680 <memset>
 801fe42:	2301      	movs	r3, #1
 801fe44:	4620      	mov	r0, r4
 801fe46:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 801fe4a:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801fe4e:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 801fe52:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 801fe56:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 801fe5a:	f7f6 fa81 	bl	8016360 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801fe5e:	4620      	mov	r0, r4
 801fe60:	bd38      	pop	{r3, r4, r5, pc}

0801fe62 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801fe62:	b530      	push	{r4, r5, lr}
 801fe64:	2500      	movs	r5, #0
 801fe66:	2401      	movs	r4, #1
 801fe68:	6843      	ldr	r3, [r0, #4]
 801fe6a:	b913      	cbnz	r3, 801fe72 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801fe6c:	6803      	ldr	r3, [r0, #0]
 801fe6e:	b313      	cbz	r3, 801feb6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801fe70:	6043      	str	r3, [r0, #4]
 801fe72:	7e03      	ldrb	r3, [r0, #24]
 801fe74:	b143      	cbz	r3, 801fe88 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801fe76:	6943      	ldr	r3, [r0, #20]
 801fe78:	b12b      	cbz	r3, 801fe86 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801fe7a:	881a      	ldrh	r2, [r3, #0]
 801fe7c:	b11a      	cbz	r2, 801fe86 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801fe7e:	1c9a      	adds	r2, r3, #2
 801fe80:	6142      	str	r2, [r0, #20]
 801fe82:	8818      	ldrh	r0, [r3, #0]
 801fe84:	bd30      	pop	{r4, r5, pc}
 801fe86:	7605      	strb	r5, [r0, #24]
 801fe88:	6843      	ldr	r3, [r0, #4]
 801fe8a:	8819      	ldrh	r1, [r3, #0]
 801fe8c:	b199      	cbz	r1, 801feb6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801fe8e:	1c9a      	adds	r2, r3, #2
 801fe90:	2902      	cmp	r1, #2
 801fe92:	6042      	str	r2, [r0, #4]
 801fe94:	d1f5      	bne.n	801fe82 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801fe96:	7c03      	ldrb	r3, [r0, #16]
 801fe98:	2b01      	cmp	r3, #1
 801fe9a:	d8e5      	bhi.n	801fe68 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801fe9c:	1c5a      	adds	r2, r3, #1
 801fe9e:	3302      	adds	r3, #2
 801fea0:	7402      	strb	r2, [r0, #16]
 801fea2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801fea6:	6143      	str	r3, [r0, #20]
 801fea8:	2b00      	cmp	r3, #0
 801feaa:	d0dd      	beq.n	801fe68 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801feac:	881b      	ldrh	r3, [r3, #0]
 801feae:	2b00      	cmp	r3, #0
 801feb0:	d0da      	beq.n	801fe68 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801feb2:	7604      	strb	r4, [r0, #24]
 801feb4:	e7d8      	b.n	801fe68 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801feb6:	2000      	movs	r0, #0
 801feb8:	e7e4      	b.n	801fe84 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801feba <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801feba:	6001      	str	r1, [r0, #0]
 801febc:	2100      	movs	r1, #0
 801febe:	b430      	push	{r4, r5}
 801fec0:	6041      	str	r1, [r0, #4]
 801fec2:	6815      	ldr	r5, [r2, #0]
 801fec4:	6085      	str	r5, [r0, #8]
 801fec6:	6852      	ldr	r2, [r2, #4]
 801fec8:	6443      	str	r3, [r0, #68]	@ 0x44
 801feca:	9b02      	ldr	r3, [sp, #8]
 801fecc:	60c2      	str	r2, [r0, #12]
 801fece:	7401      	strb	r1, [r0, #16]
 801fed0:	6141      	str	r1, [r0, #20]
 801fed2:	7601      	strb	r1, [r0, #24]
 801fed4:	8701      	strh	r1, [r0, #56]	@ 0x38
 801fed6:	8401      	strh	r1, [r0, #32]
 801fed8:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 801fedc:	6483      	str	r3, [r0, #72]	@ 0x48
 801fede:	bc30      	pop	{r4, r5}
 801fee0:	f7f6 ba3e 	b.w	8016360 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801fee4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801fee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fee6:	4605      	mov	r5, r0
 801fee8:	4608      	mov	r0, r1
 801feea:	b1f1      	cbz	r1, 801ff2a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801feec:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 801fef0:	460b      	mov	r3, r1
 801fef2:	f101 0708 	add.w	r7, r1, #8
 801fef6:	4622      	mov	r2, r4
 801fef8:	6818      	ldr	r0, [r3, #0]
 801fefa:	3308      	adds	r3, #8
 801fefc:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801ff00:	4626      	mov	r6, r4
 801ff02:	42bb      	cmp	r3, r7
 801ff04:	c603      	stmia	r6!, {r0, r1}
 801ff06:	4634      	mov	r4, r6
 801ff08:	d1f6      	bne.n	801fef8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801ff0a:	6818      	ldr	r0, [r3, #0]
 801ff0c:	6030      	str	r0, [r6, #0]
 801ff0e:	4610      	mov	r0, r2
 801ff10:	889b      	ldrh	r3, [r3, #4]
 801ff12:	80b3      	strh	r3, [r6, #4]
 801ff14:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 801ff18:	015b      	lsls	r3, r3, #5
 801ff1a:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801ff1e:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 801ff22:	430b      	orrs	r3, r1
 801ff24:	425b      	negs	r3, r3
 801ff26:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801ff2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ff2c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801ff2c:	b538      	push	{r3, r4, r5, lr}
 801ff2e:	460c      	mov	r4, r1
 801ff30:	6811      	ldr	r1, [r2, #0]
 801ff32:	4610      	mov	r0, r2
 801ff34:	68cd      	ldr	r5, [r1, #12]
 801ff36:	4619      	mov	r1, r3
 801ff38:	47a8      	blx	r5
 801ff3a:	2800      	cmp	r0, #0
 801ff3c:	bf08      	it	eq
 801ff3e:	4620      	moveq	r0, r4
 801ff40:	bd38      	pop	{r3, r4, r5, pc}
	...

0801ff44 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801ff44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ff48:	468c      	mov	ip, r1
 801ff4a:	4604      	mov	r4, r0
 801ff4c:	4615      	mov	r5, r2
 801ff4e:	b942      	cbnz	r2, 801ff62 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 801ff50:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 801ff54:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 801ff58:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 801ff5c:	4628      	mov	r0, r5
 801ff5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ff62:	7b50      	ldrb	r0, [r2, #13]
 801ff64:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 801ff68:	8893      	ldrh	r3, [r2, #4]
 801ff6a:	0106      	lsls	r6, r0, #4
 801ff6c:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801ff70:	79ee      	ldrb	r6, [r5, #7]
 801ff72:	4316      	orrs	r6, r2
 801ff74:	185a      	adds	r2, r3, r1
 801ff76:	b291      	uxth	r1, r2
 801ff78:	b2b7      	uxth	r7, r6
 801ff7a:	291d      	cmp	r1, #29
 801ff7c:	d87f      	bhi.n	802007e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 801ff7e:	2201      	movs	r2, #1
 801ff80:	10f6      	asrs	r6, r6, #3
 801ff82:	408a      	lsls	r2, r1
 801ff84:	4974      	ldr	r1, [pc, #464]	@ (8020158 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801ff86:	420a      	tst	r2, r1
 801ff88:	d12e      	bne.n	801ffe8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801ff8a:	f412 7f60 	tst.w	r2, #896	@ 0x380
 801ff8e:	d076      	beq.n	802007e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 801ff90:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 801ff94:	462b      	mov	r3, r5
 801ff96:	f105 0e08 	add.w	lr, r5, #8
 801ff9a:	4615      	mov	r5, r2
 801ff9c:	6818      	ldr	r0, [r3, #0]
 801ff9e:	3308      	adds	r3, #8
 801ffa0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801ffa4:	4694      	mov	ip, r2
 801ffa6:	4573      	cmp	r3, lr
 801ffa8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801ffac:	4662      	mov	r2, ip
 801ffae:	d1f5      	bne.n	801ff9c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801ffb0:	6818      	ldr	r0, [r3, #0]
 801ffb2:	f8cc 0000 	str.w	r0, [ip]
 801ffb6:	889b      	ldrh	r3, [r3, #4]
 801ffb8:	f8ac 3004 	strh.w	r3, [ip, #4]
 801ffbc:	b2b3      	uxth	r3, r6
 801ffbe:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 801ffc2:	f894 0059 	ldrb.w	r0, [r4, #89]	@ 0x59
 801ffc6:	1aca      	subs	r2, r1, r3
 801ffc8:	1bcf      	subs	r7, r1, r7
 801ffca:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 801ffce:	b292      	uxth	r2, r2
 801ffd0:	1afb      	subs	r3, r7, r3
 801ffd2:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 801ffd6:	10d2      	asrs	r2, r2, #3
 801ffd8:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 801ffdc:	4302      	orrs	r2, r0
 801ffde:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 801ffe2:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801ffe6:	e7b9      	b.n	801ff5c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801ffe8:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 801ffec:	462b      	mov	r3, r5
 801ffee:	f105 0808 	add.w	r8, r5, #8
 801fff2:	4615      	mov	r5, r2
 801fff4:	6818      	ldr	r0, [r3, #0]
 801fff6:	3308      	adds	r3, #8
 801fff8:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801fffc:	4696      	mov	lr, r2
 801fffe:	4543      	cmp	r3, r8
 8020000:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8020004:	4672      	mov	r2, lr
 8020006:	d1f5      	bne.n	801fff4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 8020008:	6818      	ldr	r0, [r3, #0]
 802000a:	f8ce 0000 	str.w	r0, [lr]
 802000e:	889b      	ldrh	r3, [r3, #4]
 8020010:	f8ae 3004 	strh.w	r3, [lr, #4]
 8020014:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8020016:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802001a:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 802001c:	f640 6333 	movw	r3, #3635	@ 0xe33
 8020020:	4299      	cmp	r1, r3
 8020022:	d111      	bne.n	8020048 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x104>
 8020024:	f8dc 3000 	ldr.w	r3, [ip]
 8020028:	4660      	mov	r0, ip
 802002a:	68db      	ldr	r3, [r3, #12]
 802002c:	4798      	blx	r3
 802002e:	7b41      	ldrb	r1, [r0, #13]
 8020030:	00cb      	lsls	r3, r1, #3
 8020032:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8020036:	7a03      	ldrb	r3, [r0, #8]
 8020038:	4313      	orrs	r3, r2
 802003a:	064a      	lsls	r2, r1, #25
 802003c:	bf44      	itt	mi
 802003e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8020042:	b21b      	sxthmi	r3, r3
 8020044:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8020048:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 802004c:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8020050:	443b      	add	r3, r7
 8020052:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8020056:	4433      	add	r3, r6
 8020058:	b29b      	uxth	r3, r3
 802005a:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 802005e:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8020062:	10db      	asrs	r3, r3, #3
 8020064:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8020068:	4313      	orrs	r3, r2
 802006a:	f894 205e 	ldrb.w	r2, [r4, #94]	@ 0x5e
 802006e:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8020072:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 8020076:	1a9b      	subs	r3, r3, r2
 8020078:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
 802007c:	e76e      	b.n	801ff5c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 802007e:	f023 0204 	bic.w	r2, r3, #4
 8020082:	f640 611b 	movw	r1, #3611	@ 0xe1b
 8020086:	428a      	cmp	r2, r1
 8020088:	d003      	beq.n	8020092 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 802008a:	f640 621d 	movw	r2, #3613	@ 0xe1d
 802008e:	4293      	cmp	r3, r2
 8020090:	d120      	bne.n	80200d4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x190>
 8020092:	3b01      	subs	r3, #1
 8020094:	4662      	mov	r2, ip
 8020096:	4629      	mov	r1, r5
 8020098:	4620      	mov	r0, r4
 802009a:	b29b      	uxth	r3, r3
 802009c:	f7ff ff46 	bl	801ff2c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80200a0:	7b41      	ldrb	r1, [r0, #13]
 80200a2:	00cb      	lsls	r3, r1, #3
 80200a4:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80200a8:	7a03      	ldrb	r3, [r0, #8]
 80200aa:	0648      	lsls	r0, r1, #25
 80200ac:	ea43 0302 	orr.w	r3, r3, r2
 80200b0:	bf44      	itt	mi
 80200b2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80200b6:	b21b      	sxthmi	r3, r3
 80200b8:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 80200bc:	7b6b      	ldrb	r3, [r5, #13]
 80200be:	7aaa      	ldrb	r2, [r5, #10]
 80200c0:	005b      	lsls	r3, r3, #1
 80200c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80200c6:	4313      	orrs	r3, r2
 80200c8:	115a      	asrs	r2, r3, #5
 80200ca:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80200ce:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 80200d2:	e032      	b.n	802013a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f6>
 80200d4:	00c2      	lsls	r2, r0, #3
 80200d6:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 80200da:	7a2a      	ldrb	r2, [r5, #8]
 80200dc:	430a      	orrs	r2, r1
 80200de:	0641      	lsls	r1, r0, #25
 80200e0:	f640 6109 	movw	r1, #3593	@ 0xe09
 80200e4:	bf44      	itt	mi
 80200e6:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 80200ea:	b212      	sxthmi	r2, r2
 80200ec:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 80200f0:	f023 0210 	bic.w	r2, r3, #16
 80200f4:	428a      	cmp	r2, r1
 80200f6:	d003      	beq.n	8020100 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1bc>
 80200f8:	f640 6213 	movw	r2, #3603	@ 0xe13
 80200fc:	4293      	cmp	r3, r2
 80200fe:	d129      	bne.n	8020154 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x210>
 8020100:	7b6e      	ldrb	r6, [r5, #13]
 8020102:	4629      	mov	r1, r5
 8020104:	4620      	mov	r0, r4
 8020106:	0076      	lsls	r6, r6, #1
 8020108:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 802010c:	7aae      	ldrb	r6, [r5, #10]
 802010e:	4316      	orrs	r6, r2
 8020110:	f640 6213 	movw	r2, #3603	@ 0xe13
 8020114:	4293      	cmp	r3, r2
 8020116:	4662      	mov	r2, ip
 8020118:	bf16      	itet	ne
 802011a:	f103 33ff 	addne.w	r3, r3, #4294967295
 802011e:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 8020122:	b29b      	uxthne	r3, r3
 8020124:	f7ff ff02 	bl	801ff2c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8020128:	7b43      	ldrb	r3, [r0, #13]
 802012a:	7a82      	ldrb	r2, [r0, #10]
 802012c:	005b      	lsls	r3, r3, #1
 802012e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8020132:	4313      	orrs	r3, r2
 8020134:	1af6      	subs	r6, r6, r3
 8020136:	f8a4 605e 	strh.w	r6, [r4, #94]	@ 0x5e
 802013a:	7b69      	ldrb	r1, [r5, #13]
 802013c:	00cb      	lsls	r3, r1, #3
 802013e:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8020142:	7a2b      	ldrb	r3, [r5, #8]
 8020144:	4313      	orrs	r3, r2
 8020146:	064a      	lsls	r2, r1, #25
 8020148:	bf44      	itt	mi
 802014a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 802014e:	b21b      	sxthmi	r3, r3
 8020150:	1bdb      	subs	r3, r3, r7
 8020152:	e746      	b.n	801ffe2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8020154:	2300      	movs	r3, #0
 8020156:	e7ba      	b.n	80200ce <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18a>
 8020158:	3fc00079 	.word	0x3fc00079

0802015c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 802015c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020160:	4604      	mov	r4, r0
 8020162:	b942      	cbnz	r2, 8020176 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8020164:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8020168:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 802016c:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 8020170:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 8020174:	e047      	b.n	8020206 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8020176:	7b51      	ldrb	r1, [r2, #13]
 8020178:	8893      	ldrh	r3, [r2, #4]
 802017a:	010d      	lsls	r5, r1, #4
 802017c:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 8020180:	79d5      	ldrb	r5, [r2, #7]
 8020182:	4305      	orrs	r5, r0
 8020184:	2d04      	cmp	r5, #4
 8020186:	bfcc      	ite	gt
 8020188:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 802018c:	f04f 0e01 	movle.w	lr, #1
 8020190:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 8020194:	f200 80ab 	bhi.w	80202ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8020198:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 802019c:	4283      	cmp	r3, r0
 802019e:	d216      	bcs.n	80201ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80201a0:	f240 605b 	movw	r0, #1627	@ 0x65b
 80201a4:	4283      	cmp	r3, r0
 80201a6:	d859      	bhi.n	802025c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 80201a8:	f240 6057 	movw	r0, #1623	@ 0x657
 80201ac:	4283      	cmp	r3, r0
 80201ae:	d20e      	bcs.n	80201ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80201b0:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 80201b4:	d24a      	bcs.n	802024c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 80201b6:	f240 604e 	movw	r0, #1614	@ 0x64e
 80201ba:	4283      	cmp	r3, r0
 80201bc:	d207      	bcs.n	80201ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80201be:	f240 601a 	movw	r0, #1562	@ 0x61a
 80201c2:	4283      	cmp	r3, r0
 80201c4:	d02a      	beq.n	802021c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80201c6:	d821      	bhi.n	802020c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 80201c8:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 80201cc:	d35b      	bcc.n	8020286 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80201ce:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 80201d2:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80201d6:	f040 80d0 	bne.w	802037a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 80201da:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 80201de:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 80201e2:	f040 80ca 	bne.w	802037a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 80201e6:	00cb      	lsls	r3, r1, #3
 80201e8:	0649      	lsls	r1, r1, #25
 80201ea:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 80201ee:	7a13      	ldrb	r3, [r2, #8]
 80201f0:	ea43 0300 	orr.w	r3, r3, r0
 80201f4:	bf44      	itt	mi
 80201f6:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80201fa:	b21b      	sxthmi	r3, r3
 80201fc:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8020200:	1b5d      	subs	r5, r3, r5
 8020202:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8020206:	4610      	mov	r0, r2
 8020208:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802020c:	f240 604b 	movw	r0, #1611	@ 0x64b
 8020210:	4283      	cmp	r3, r0
 8020212:	d338      	bcc.n	8020286 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8020214:	f240 604c 	movw	r0, #1612	@ 0x64c
 8020218:	4283      	cmp	r3, r0
 802021a:	d9d8      	bls.n	80201ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 802021c:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 8020220:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 8020224:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8020228:	f040 80f3 	bne.w	8020412 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 802022c:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8020230:	f040 80ef 	bne.w	8020412 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8020234:	00cb      	lsls	r3, r1, #3
 8020236:	064e      	lsls	r6, r1, #25
 8020238:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 802023c:	7a13      	ldrb	r3, [r2, #8]
 802023e:	ea43 0300 	orr.w	r3, r3, r0
 8020242:	bf44      	itt	mi
 8020244:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8020248:	b21b      	sxthmi	r3, r3
 802024a:	e7d9      	b.n	8020200 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 802024c:	f240 6054 	movw	r0, #1620	@ 0x654
 8020250:	4283      	cmp	r3, r0
 8020252:	d8e3      	bhi.n	802021c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8020254:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8020258:	d9e0      	bls.n	802021c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 802025a:	e7b8      	b.n	80201ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 802025c:	f240 6074 	movw	r0, #1652	@ 0x674
 8020260:	4283      	cmp	r3, r0
 8020262:	d0b4      	beq.n	80201ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8020264:	d82d      	bhi.n	80202c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8020266:	f240 605e 	movw	r0, #1630	@ 0x65e
 802026a:	4283      	cmp	r3, r0
 802026c:	d804      	bhi.n	8020278 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 802026e:	f240 605d 	movw	r0, #1629	@ 0x65d
 8020272:	4283      	cmp	r3, r0
 8020274:	d3d2      	bcc.n	802021c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8020276:	e7aa      	b.n	80201ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8020278:	f240 605f 	movw	r0, #1631	@ 0x65f
 802027c:	4283      	cmp	r3, r0
 802027e:	d0cd      	beq.n	802021c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8020280:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 8020284:	d0a3      	beq.n	80201ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8020286:	00cb      	lsls	r3, r1, #3
 8020288:	0649      	lsls	r1, r1, #25
 802028a:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 802028e:	7a13      	ldrb	r3, [r2, #8]
 8020290:	ea43 0300 	orr.w	r3, r3, r0
 8020294:	bf44      	itt	mi
 8020296:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 802029a:	b21b      	sxthmi	r3, r3
 802029c:	1b5d      	subs	r5, r3, r5
 802029e:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 80202a2:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 80202a6:	7b53      	ldrb	r3, [r2, #13]
 80202a8:	015b      	lsls	r3, r3, #5
 80202aa:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 80202ae:	7993      	ldrb	r3, [r2, #6]
 80202b0:	430b      	orrs	r3, r1
 80202b2:	2105      	movs	r1, #5
 80202b4:	005b      	lsls	r3, r3, #1
 80202b6:	fb93 f3f1 	sdiv	r3, r3, r1
 80202ba:	f992 1009 	ldrsb.w	r1, [r2, #9]
 80202be:	440b      	add	r3, r1
 80202c0:	e756      	b.n	8020170 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 80202c2:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 80202c6:	4283      	cmp	r3, r0
 80202c8:	d809      	bhi.n	80202de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 80202ca:	f240 60df 	movw	r0, #1759	@ 0x6df
 80202ce:	4283      	cmp	r3, r0
 80202d0:	f4bf af7d 	bcs.w	80201ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80202d4:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 80202d8:	2b05      	cmp	r3, #5
 80202da:	d8d4      	bhi.n	8020286 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80202dc:	e777      	b.n	80201ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80202de:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 80202e2:	4283      	cmp	r3, r0
 80202e4:	d09a      	beq.n	802021c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80202e6:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 80202ea:	4283      	cmp	r3, r0
 80202ec:	e7ca      	b.n	8020284 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80202ee:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 80202f2:	d22b      	bcs.n	802034c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 80202f4:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 80202f8:	4283      	cmp	r3, r0
 80202fa:	d28f      	bcs.n	802021c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80202fc:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8020300:	4283      	cmp	r3, r0
 8020302:	d816      	bhi.n	8020332 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8020304:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 8020308:	4283      	cmp	r3, r0
 802030a:	f4bf af60 	bcs.w	80201ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 802030e:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 8020312:	4283      	cmp	r3, r0
 8020314:	d80a      	bhi.n	802032c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8020316:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 802031a:	4283      	cmp	r3, r0
 802031c:	f4bf af57 	bcs.w	80201ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8020320:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 8020324:	4283      	cmp	r3, r0
 8020326:	f43f af79 	beq.w	802021c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 802032a:	e7ac      	b.n	8020286 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 802032c:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 8020330:	e7f8      	b.n	8020324 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8020332:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 8020336:	4283      	cmp	r3, r0
 8020338:	d802      	bhi.n	8020340 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 802033a:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 802033e:	e798      	b.n	8020272 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8020340:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 8020344:	4283      	cmp	r3, r0
 8020346:	f47f af42 	bne.w	80201ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 802034a:	e767      	b.n	802021c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 802034c:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 8020350:	4283      	cmp	r3, r0
 8020352:	f43f af63 	beq.w	802021c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8020356:	d802      	bhi.n	802035e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8020358:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 802035c:	e7f2      	b.n	8020344 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 802035e:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 8020362:	4283      	cmp	r3, r0
 8020364:	d805      	bhi.n	8020372 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8020366:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 802036a:	4283      	cmp	r3, r0
 802036c:	f4ff af2f 	bcc.w	80201ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8020370:	e754      	b.n	802021c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8020372:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 8020376:	4283      	cmp	r3, r0
 8020378:	e7af      	b.n	80202da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 802037a:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 802037e:	4617      	mov	r7, r2
 8020380:	f102 0808 	add.w	r8, r2, #8
 8020384:	4666      	mov	r6, ip
 8020386:	6838      	ldr	r0, [r7, #0]
 8020388:	3708      	adds	r7, #8
 802038a:	f857 1c04 	ldr.w	r1, [r7, #-4]
 802038e:	46e6      	mov	lr, ip
 8020390:	4547      	cmp	r7, r8
 8020392:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8020396:	46f4      	mov	ip, lr
 8020398:	d1f5      	bne.n	8020386 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 802039a:	6838      	ldr	r0, [r7, #0]
 802039c:	f8ce 0000 	str.w	r0, [lr]
 80203a0:	88b9      	ldrh	r1, [r7, #4]
 80203a2:	f8ae 1004 	strh.w	r1, [lr, #4]
 80203a6:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 80203aa:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 80203ae:	d009      	beq.n	80203c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 80203b0:	7b51      	ldrb	r1, [r2, #13]
 80203b2:	7992      	ldrb	r2, [r2, #6]
 80203b4:	0149      	lsls	r1, r1, #5
 80203b6:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 80203ba:	4311      	orrs	r1, r2
 80203bc:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80203c0:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 80203c4:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80203c8:	b2ad      	uxth	r5, r5
 80203ca:	d00d      	beq.n	80203e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 80203cc:	442b      	add	r3, r5
 80203ce:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 80203d2:	b29b      	uxth	r3, r3
 80203d4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80203d8:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 80203dc:	10db      	asrs	r3, r3, #3
 80203de:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80203e2:	4313      	orrs	r3, r2
 80203e4:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 80203e8:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 80203ec:	00cb      	lsls	r3, r1, #3
 80203ee:	064f      	lsls	r7, r1, #25
 80203f0:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80203f4:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 80203f8:	ea43 0302 	orr.w	r3, r3, r2
 80203fc:	bf44      	itt	mi
 80203fe:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8020402:	b21b      	sxthmi	r3, r3
 8020404:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8020408:	1b5b      	subs	r3, r3, r5
 802040a:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 802040e:	4632      	mov	r2, r6
 8020410:	e6f9      	b.n	8020206 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8020412:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8020416:	4617      	mov	r7, r2
 8020418:	f102 0908 	add.w	r9, r2, #8
 802041c:	4666      	mov	r6, ip
 802041e:	6838      	ldr	r0, [r7, #0]
 8020420:	3708      	adds	r7, #8
 8020422:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8020426:	46e0      	mov	r8, ip
 8020428:	454f      	cmp	r7, r9
 802042a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 802042e:	46c4      	mov	ip, r8
 8020430:	d1f5      	bne.n	802041e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 8020432:	6838      	ldr	r0, [r7, #0]
 8020434:	f8c8 0000 	str.w	r0, [r8]
 8020438:	88b9      	ldrh	r1, [r7, #4]
 802043a:	f8a8 1004 	strh.w	r1, [r8, #4]
 802043e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8020442:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8020446:	d009      	beq.n	802045c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8020448:	7b51      	ldrb	r1, [r2, #13]
 802044a:	7992      	ldrb	r2, [r2, #6]
 802044c:	0149      	lsls	r1, r1, #5
 802044e:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8020452:	4311      	orrs	r1, r2
 8020454:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8020458:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 802045c:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8020460:	d00e      	beq.n	8020480 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8020462:	eba3 030e 	sub.w	r3, r3, lr
 8020466:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 802046a:	b29b      	uxth	r3, r3
 802046c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8020470:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8020474:	10db      	asrs	r3, r3, #3
 8020476:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 802047a:	4313      	orrs	r3, r2
 802047c:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8020480:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8020484:	00cb      	lsls	r3, r1, #3
 8020486:	0648      	lsls	r0, r1, #25
 8020488:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 802048c:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8020490:	ea43 0302 	orr.w	r3, r3, r2
 8020494:	bf44      	itt	mi
 8020496:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 802049a:	b21b      	sxthmi	r3, r3
 802049c:	1b5d      	subs	r5, r3, r5
 802049e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 80204a2:	e7b4      	b.n	802040e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

080204a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80204a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80204a8:	461e      	mov	r6, r3
 80204aa:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 80204ac:	4604      	mov	r4, r0
 80204ae:	4617      	mov	r7, r2
 80204b0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80204b4:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 80204b8:	f7f5 feac 	bl	8016214 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80204bc:	4605      	mov	r5, r0
 80204be:	b918      	cbnz	r0, 80204c8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 80204c0:	6030      	str	r0, [r6, #0]
 80204c2:	4628      	mov	r0, r5
 80204c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80204c8:	683b      	ldr	r3, [r7, #0]
 80204ca:	4601      	mov	r1, r0
 80204cc:	4638      	mov	r0, r7
 80204ce:	68db      	ldr	r3, [r3, #12]
 80204d0:	4798      	blx	r3
 80204d2:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 80204d6:	4602      	mov	r2, r0
 80204d8:	6030      	str	r0, [r6, #0]
 80204da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80204de:	d213      	bcs.n	8020508 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 80204e0:	4643      	mov	r3, r8
 80204e2:	4639      	mov	r1, r7
 80204e4:	4620      	mov	r0, r4
 80204e6:	f7ff fe39 	bl	802015c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80204ea:	6030      	str	r0, [r6, #0]
 80204ec:	6833      	ldr	r3, [r6, #0]
 80204ee:	b143      	cbz	r3, 8020502 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 80204f0:	7b5a      	ldrb	r2, [r3, #13]
 80204f2:	7a9b      	ldrb	r3, [r3, #10]
 80204f4:	0052      	lsls	r2, r2, #1
 80204f6:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80204fa:	4313      	orrs	r3, r2
 80204fc:	bf0c      	ite	eq
 80204fe:	2301      	moveq	r3, #1
 8020500:	2300      	movne	r3, #0
 8020502:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 8020506:	e7dc      	b.n	80204c2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8020508:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 802050c:	b29b      	uxth	r3, r3
 802050e:	2b7f      	cmp	r3, #127	@ 0x7f
 8020510:	d804      	bhi.n	802051c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8020512:	4639      	mov	r1, r7
 8020514:	4620      	mov	r0, r4
 8020516:	f7ff fd15 	bl	801ff44 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 802051a:	e7e6      	b.n	80204ea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 802051c:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8020520:	2b00      	cmp	r3, #0
 8020522:	d0e3      	beq.n	80204ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8020524:	f640 1302 	movw	r3, #2306	@ 0x902
 8020528:	429d      	cmp	r5, r3
 802052a:	d1df      	bne.n	80204ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 802052c:	4601      	mov	r1, r0
 802052e:	4620      	mov	r0, r4
 8020530:	f7ff fcd8 	bl	801fee4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8020534:	e7d9      	b.n	80204ea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08020536 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8020536:	b510      	push	{r4, lr}
 8020538:	4604      	mov	r4, r0
 802053a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 802053e:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8020540:	b1e1      	cbz	r1, 802057c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8020542:	2b0a      	cmp	r3, #10
 8020544:	d02d      	beq.n	80205a2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8020546:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8020548:	3901      	subs	r1, #1
 802054a:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 802054e:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 8020550:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 8020554:	1c51      	adds	r1, r2, #1
 8020556:	b289      	uxth	r1, r1
 8020558:	2901      	cmp	r1, #1
 802055a:	bf8a      	itet	hi
 802055c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8020560:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 8020562:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 8020564:	1c5a      	adds	r2, r3, #1
 8020566:	8722      	strh	r2, [r4, #56]	@ 0x38
 8020568:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 802056a:	4413      	add	r3, r2
 802056c:	b29b      	uxth	r3, r3
 802056e:	2b09      	cmp	r3, #9
 8020570:	bf88      	it	hi
 8020572:	3b0a      	subhi	r3, #10
 8020574:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8020578:	8458      	strh	r0, [r3, #34]	@ 0x22
 802057a:	e7de      	b.n	802053a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 802057c:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 802057e:	2b0a      	cmp	r3, #10
 8020580:	d00f      	beq.n	80205a2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8020582:	4620      	mov	r0, r4
 8020584:	f7ff fc6d 	bl	801fe62 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8020588:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 802058a:	1c5a      	adds	r2, r3, #1
 802058c:	8722      	strh	r2, [r4, #56]	@ 0x38
 802058e:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8020590:	4413      	add	r3, r2
 8020592:	b29b      	uxth	r3, r3
 8020594:	2b09      	cmp	r3, #9
 8020596:	bf88      	it	hi
 8020598:	3b0a      	subhi	r3, #10
 802059a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802059e:	8458      	strh	r0, [r3, #34]	@ 0x22
 80205a0:	e7ec      	b.n	802057c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 80205a2:	bd10      	pop	{r4, pc}

080205a4 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 80205a4:	b538      	push	{r3, r4, r5, lr}
 80205a6:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 80205a8:	4604      	mov	r4, r0
 80205aa:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 80205ae:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 80205b0:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 80205b2:	3a01      	subs	r2, #1
 80205b4:	8702      	strh	r2, [r0, #56]	@ 0x38
 80205b6:	1c5a      	adds	r2, r3, #1
 80205b8:	b292      	uxth	r2, r2
 80205ba:	2a09      	cmp	r2, #9
 80205bc:	bf8a      	itet	hi
 80205be:	3b09      	subhi	r3, #9
 80205c0:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 80205c2:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 80205c4:	f7ff ffb7 	bl	8020536 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 80205c8:	8c23      	ldrh	r3, [r4, #32]
 80205ca:	2b01      	cmp	r3, #1
 80205cc:	bf9c      	itt	ls
 80205ce:	3301      	addls	r3, #1
 80205d0:	8423      	strhls	r3, [r4, #32]
 80205d2:	8be3      	ldrh	r3, [r4, #30]
 80205d4:	b90b      	cbnz	r3, 80205da <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 80205d6:	2302      	movs	r3, #2
 80205d8:	83e3      	strh	r3, [r4, #30]
 80205da:	8be3      	ldrh	r3, [r4, #30]
 80205dc:	4628      	mov	r0, r5
 80205de:	3b01      	subs	r3, #1
 80205e0:	b29b      	uxth	r3, r3
 80205e2:	83e3      	strh	r3, [r4, #30]
 80205e4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80205e8:	8365      	strh	r5, [r4, #26]
 80205ea:	bd38      	pop	{r3, r4, r5, pc}

080205ec <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 80205ec:	428a      	cmp	r2, r1
 80205ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80205f2:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 80205f4:	d932      	bls.n	802065c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 80205f6:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 80205f8:	1a54      	subs	r4, r2, r1
 80205fa:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 80205fe:	19ee      	adds	r6, r5, r7
 8020600:	fa1f fe84 	uxth.w	lr, r4
 8020604:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 8020608:	3e01      	subs	r6, #1
 802060a:	b2b4      	uxth	r4, r6
 802060c:	eba4 090e 	sub.w	r9, r4, lr
 8020610:	fa1f f989 	uxth.w	r9, r9
 8020614:	2c09      	cmp	r4, #9
 8020616:	4626      	mov	r6, r4
 8020618:	bf88      	it	hi
 802061a:	f1a4 060a 	subhi.w	r6, r4, #10
 802061e:	f1bc 0f00 	cmp.w	ip, #0
 8020622:	f104 34ff 	add.w	r4, r4, #4294967295
 8020626:	bf08      	it	eq
 8020628:	f04f 0c02 	moveq.w	ip, #2
 802062c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8020630:	b2a4      	uxth	r4, r4
 8020632:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020636:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 802063a:	454c      	cmp	r4, r9
 802063c:	fa1f fc8c 	uxth.w	ip, ip
 8020640:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8020644:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 8020648:	d1e4      	bne.n	8020614 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 802064a:	eba5 050e 	sub.w	r5, r5, lr
 802064e:	eb0e 0408 	add.w	r4, lr, r8
 8020652:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 8020656:	8705      	strh	r5, [r0, #56]	@ 0x38
 8020658:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 802065c:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 802065e:	250a      	movs	r5, #10
 8020660:	1a64      	subs	r4, r4, r1
 8020662:	4439      	add	r1, r7
 8020664:	b289      	uxth	r1, r1
 8020666:	8704      	strh	r4, [r0, #56]	@ 0x38
 8020668:	2909      	cmp	r1, #9
 802066a:	bf88      	it	hi
 802066c:	390a      	subhi	r1, #10
 802066e:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8020670:	b18a      	cbz	r2, 8020696 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 8020672:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 8020674:	3a01      	subs	r2, #1
 8020676:	3101      	adds	r1, #1
 8020678:	b292      	uxth	r2, r2
 802067a:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 802067e:	8701      	strh	r1, [r0, #56]	@ 0x38
 8020680:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8020682:	b901      	cbnz	r1, 8020686 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 8020684:	86c5      	strh	r5, [r0, #54]	@ 0x36
 8020686:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8020688:	3901      	subs	r1, #1
 802068a:	b289      	uxth	r1, r1
 802068c:	86c1      	strh	r1, [r0, #54]	@ 0x36
 802068e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8020692:	844c      	strh	r4, [r1, #34]	@ 0x22
 8020694:	e7ec      	b.n	8020670 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 8020696:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802069a:	f7ff bf4c 	b.w	8020536 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0802069e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 802069e:	b570      	push	{r4, r5, r6, lr}
 80206a0:	2500      	movs	r5, #0
 80206a2:	4295      	cmp	r5, r2
 80206a4:	d011      	beq.n	80206ca <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 80206a6:	8bc4      	ldrh	r4, [r0, #30]
 80206a8:	f831 6b02 	ldrh.w	r6, [r1], #2
 80206ac:	4414      	add	r4, r2
 80206ae:	3c01      	subs	r4, #1
 80206b0:	1b64      	subs	r4, r4, r5
 80206b2:	b2a4      	uxth	r4, r4
 80206b4:	2c01      	cmp	r4, #1
 80206b6:	bf88      	it	hi
 80206b8:	3c02      	subhi	r4, #2
 80206ba:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80206be:	8b64      	ldrh	r4, [r4, #26]
 80206c0:	42b4      	cmp	r4, r6
 80206c2:	d117      	bne.n	80206f4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 80206c4:	3501      	adds	r5, #1
 80206c6:	b2ad      	uxth	r5, r5
 80206c8:	e7eb      	b.n	80206a2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 80206ca:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80206ce:	2400      	movs	r4, #0
 80206d0:	4413      	add	r3, r2
 80206d2:	b2a2      	uxth	r2, r4
 80206d4:	429a      	cmp	r2, r3
 80206d6:	da0f      	bge.n	80206f8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 80206d8:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 80206da:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 80206de:	3401      	adds	r4, #1
 80206e0:	4432      	add	r2, r6
 80206e2:	b292      	uxth	r2, r2
 80206e4:	2a09      	cmp	r2, #9
 80206e6:	bf88      	it	hi
 80206e8:	3a0a      	subhi	r2, #10
 80206ea:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80206ee:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 80206f0:	42aa      	cmp	r2, r5
 80206f2:	d0ee      	beq.n	80206d2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 80206f4:	2000      	movs	r0, #0
 80206f6:	bd70      	pop	{r4, r5, r6, pc}
 80206f8:	2001      	movs	r0, #1
 80206fa:	e7fc      	b.n	80206f6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

080206fc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 80206fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020700:	4605      	mov	r5, r0
 8020702:	4616      	mov	r6, r2
 8020704:	1c8c      	adds	r4, r1, #2
 8020706:	8809      	ldrh	r1, [r1, #0]
 8020708:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 802070c:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8020710:	42b3      	cmp	r3, r6
 8020712:	d124      	bne.n	802075e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8020714:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8020718:	f3c1 1803 	ubfx	r8, r1, #4, #4
 802071c:	f001 070f 	and.w	r7, r1, #15
 8020720:	4652      	mov	r2, sl
 8020722:	f8cd 8000 	str.w	r8, [sp]
 8020726:	464b      	mov	r3, r9
 8020728:	4621      	mov	r1, r4
 802072a:	4628      	mov	r0, r5
 802072c:	f7ff ffb7 	bl	802069e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8020730:	4683      	mov	fp, r0
 8020732:	b168      	cbz	r0, 8020750 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8020734:	eb0a 0109 	add.w	r1, sl, r9
 8020738:	463a      	mov	r2, r7
 802073a:	4628      	mov	r0, r5
 802073c:	4441      	add	r1, r8
 802073e:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8020742:	4649      	mov	r1, r9
 8020744:	f7ff ff52 	bl	80205ec <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8020748:	4658      	mov	r0, fp
 802074a:	b003      	add	sp, #12
 802074c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020750:	eb07 010a 	add.w	r1, r7, sl
 8020754:	4449      	add	r1, r9
 8020756:	4441      	add	r1, r8
 8020758:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 802075c:	e7d2      	b.n	8020704 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 802075e:	f04f 0b00 	mov.w	fp, #0
 8020762:	e7f1      	b.n	8020748 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08020764 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8020764:	b570      	push	{r4, r5, r6, lr}
 8020766:	8810      	ldrh	r0, [r2, #0]
 8020768:	4298      	cmp	r0, r3
 802076a:	d817      	bhi.n	802079c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 802076c:	1e48      	subs	r0, r1, #1
 802076e:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8020772:	4298      	cmp	r0, r3
 8020774:	d312      	bcc.n	802079c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8020776:	2400      	movs	r4, #0
 8020778:	428c      	cmp	r4, r1
 802077a:	d20f      	bcs.n	802079c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 802077c:	1860      	adds	r0, r4, r1
 802077e:	1040      	asrs	r0, r0, #1
 8020780:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8020784:	0085      	lsls	r5, r0, #2
 8020786:	42b3      	cmp	r3, r6
 8020788:	d902      	bls.n	8020790 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 802078a:	3001      	adds	r0, #1
 802078c:	b284      	uxth	r4, r0
 802078e:	e7f3      	b.n	8020778 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8020790:	d201      	bcs.n	8020796 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8020792:	b281      	uxth	r1, r0
 8020794:	e7f0      	b.n	8020778 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8020796:	442a      	add	r2, r5
 8020798:	8850      	ldrh	r0, [r2, #2]
 802079a:	bd70      	pop	{r4, r5, r6, pc}
 802079c:	2000      	movs	r0, #0
 802079e:	e7fc      	b.n	802079a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

080207a0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 80207a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80207a4:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 80207a6:	4604      	mov	r4, r0
 80207a8:	260b      	movs	r6, #11
 80207aa:	886f      	ldrh	r7, [r5, #2]
 80207ac:	087f      	lsrs	r7, r7, #1
 80207ae:	3e01      	subs	r6, #1
 80207b0:	d013      	beq.n	80207da <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80207b2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80207b4:	462a      	mov	r2, r5
 80207b6:	4639      	mov	r1, r7
 80207b8:	4620      	mov	r0, r4
 80207ba:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80207be:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 80207c2:	4643      	mov	r3, r8
 80207c4:	f7ff ffce 	bl	8020764 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 80207c8:	b138      	cbz	r0, 80207da <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80207ca:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 80207ce:	4642      	mov	r2, r8
 80207d0:	4620      	mov	r0, r4
 80207d2:	f7ff ff93 	bl	80206fc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 80207d6:	2800      	cmp	r0, #0
 80207d8:	d1e9      	bne.n	80207ae <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 80207da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080207e0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 80207e0:	b570      	push	{r4, r5, r6, lr}
 80207e2:	694a      	ldr	r2, [r1, #20]
 80207e4:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 80207e6:	684b      	ldr	r3, [r1, #4]
 80207e8:	1b54      	subs	r4, r2, r5
 80207ea:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 80207ec:	f000 8106 	beq.w	80209fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 80207f0:	1b9b      	subs	r3, r3, r6
 80207f2:	d003      	beq.n	80207fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80207f4:	4363      	muls	r3, r4
 80207f6:	2210      	movs	r2, #16
 80207f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80207fc:	680c      	ldr	r4, [r1, #0]
 80207fe:	698a      	ldr	r2, [r1, #24]
 8020800:	1b65      	subs	r5, r4, r5
 8020802:	f000 80fd 	beq.w	8020a00 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8020806:	1b92      	subs	r2, r2, r6
 8020808:	d003      	beq.n	8020812 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 802080a:	436a      	muls	r2, r5
 802080c:	2410      	movs	r4, #16
 802080e:	fb92 f2f4 	sdiv	r2, r2, r4
 8020812:	1a9b      	subs	r3, r3, r2
 8020814:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 8020a3c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8020818:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802081c:	460a      	mov	r2, r1
 802081e:	ee07 3a90 	vmov	s15, r3
 8020822:	f100 040c 	add.w	r4, r0, #12
 8020826:	4603      	mov	r3, r0
 8020828:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802082c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8020830:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8020834:	eeb1 6a43 	vneg.f32	s12, s6
 8020838:	edd2 7a02 	vldr	s15, [r2, #8]
 802083c:	3214      	adds	r2, #20
 802083e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8020842:	ece3 6a01 	vstmia	r3!, {s13}
 8020846:	429c      	cmp	r4, r3
 8020848:	ed52 7a02 	vldr	s15, [r2, #-8]
 802084c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8020850:	edc3 7a02 	vstr	s15, [r3, #8]
 8020854:	ed52 7a01 	vldr	s15, [r2, #-4]
 8020858:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802085c:	edc3 7a05 	vstr	s15, [r3, #20]
 8020860:	d1ea      	bne.n	8020838 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8020862:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8020864:	698b      	ldr	r3, [r1, #24]
 8020866:	edd0 4a02 	vldr	s9, [r0, #8]
 802086a:	1a9b      	subs	r3, r3, r2
 802086c:	edd0 3a00 	vldr	s7, [r0]
 8020870:	edd0 6a01 	vldr	s13, [r0, #4]
 8020874:	ee07 3a90 	vmov	s15, r3
 8020878:	684b      	ldr	r3, [r1, #4]
 802087a:	ee76 6ae4 	vsub.f32	s13, s13, s9
 802087e:	ed90 5a05 	vldr	s10, [r0, #20]
 8020882:	1a9b      	subs	r3, r3, r2
 8020884:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020888:	ee73 4ae4 	vsub.f32	s9, s7, s9
 802088c:	ed90 2a03 	vldr	s4, [r0, #12]
 8020890:	ee07 3a10 	vmov	s14, r3
 8020894:	edd0 5a04 	vldr	s11, [r0, #16]
 8020898:	ee67 7a84 	vmul.f32	s15, s15, s8
 802089c:	ed90 1a07 	vldr	s2, [r0, #28]
 80208a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80208a4:	edd0 2a06 	vldr	s5, [r0, #24]
 80208a8:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80208ac:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 80208b0:	ee27 7a04 	vmul.f32	s14, s14, s8
 80208b4:	ee32 5a45 	vsub.f32	s10, s4, s10
 80208b8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80208bc:	ee67 7a83 	vmul.f32	s15, s15, s6
 80208c0:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 80208c4:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 80208c6:	694a      	ldr	r2, [r1, #20]
 80208c8:	1b13      	subs	r3, r2, r4
 80208ca:	ee07 3a10 	vmov	s14, r3
 80208ce:	680b      	ldr	r3, [r1, #0]
 80208d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80208d4:	1b1b      	subs	r3, r3, r4
 80208d6:	ee27 7a04 	vmul.f32	s14, s14, s8
 80208da:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 80208de:	ee07 3a10 	vmov	s14, r3
 80208e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80208e6:	ee27 7a04 	vmul.f32	s14, s14, s8
 80208ea:	eee6 4a87 	vfma.f32	s9, s13, s14
 80208ee:	ee64 4a86 	vmul.f32	s9, s9, s12
 80208f2:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 80208f6:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80208f8:	698b      	ldr	r3, [r1, #24]
 80208fa:	1a9b      	subs	r3, r3, r2
 80208fc:	ee06 3a90 	vmov	s13, r3
 8020900:	684b      	ldr	r3, [r1, #4]
 8020902:	1a9b      	subs	r3, r3, r2
 8020904:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8020908:	ee07 3a10 	vmov	s14, r3
 802090c:	ee66 6a84 	vmul.f32	s13, s13, s8
 8020910:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8020914:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8020918:	ee27 7a04 	vmul.f32	s14, s14, s8
 802091c:	eee5 6a87 	vfma.f32	s13, s11, s14
 8020920:	ee66 6a83 	vmul.f32	s13, s13, s6
 8020924:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 8020928:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 802092a:	694a      	ldr	r2, [r1, #20]
 802092c:	1b13      	subs	r3, r2, r4
 802092e:	ee07 3a10 	vmov	s14, r3
 8020932:	680b      	ldr	r3, [r1, #0]
 8020934:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8020938:	1b1b      	subs	r3, r3, r4
 802093a:	ee27 7a04 	vmul.f32	s14, s14, s8
 802093e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8020942:	ee07 3a10 	vmov	s14, r3
 8020946:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802094a:	ee27 7a04 	vmul.f32	s14, s14, s8
 802094e:	eea5 5a87 	vfma.f32	s10, s11, s14
 8020952:	edd0 5a08 	vldr	s11, [r0, #32]
 8020956:	ee31 1a65 	vsub.f32	s2, s2, s11
 802095a:	ee72 5ae5 	vsub.f32	s11, s5, s11
 802095e:	ee25 5a06 	vmul.f32	s10, s10, s12
 8020962:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 8020966:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8020968:	698b      	ldr	r3, [r1, #24]
 802096a:	1a9b      	subs	r3, r3, r2
 802096c:	ee07 3a10 	vmov	s14, r3
 8020970:	684b      	ldr	r3, [r1, #4]
 8020972:	1a9b      	subs	r3, r3, r2
 8020974:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8020978:	ee01 3a90 	vmov	s3, r3
 802097c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8020980:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8020984:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8020988:	ee61 1a84 	vmul.f32	s3, s3, s8
 802098c:	eea1 7a21 	vfma.f32	s14, s2, s3
 8020990:	ee27 7a03 	vmul.f32	s14, s14, s6
 8020994:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8020998:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 802099a:	694a      	ldr	r2, [r1, #20]
 802099c:	1b13      	subs	r3, r2, r4
 802099e:	ee03 3a10 	vmov	s6, r3
 80209a2:	680b      	ldr	r3, [r1, #0]
 80209a4:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80209a8:	1b1b      	subs	r3, r3, r4
 80209aa:	ee23 3a04 	vmul.f32	s6, s6, s8
 80209ae:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 80209b2:	ee03 3a10 	vmov	s6, r3
 80209b6:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80209ba:	ee23 4a04 	vmul.f32	s8, s6, s8
 80209be:	eee1 5a04 	vfma.f32	s11, s2, s8
 80209c2:	ee25 6a86 	vmul.f32	s12, s11, s12
 80209c6:	ee62 5a67 	vnmul.f32	s11, s4, s15
 80209ca:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 80209ce:	eee3 5aa6 	vfma.f32	s11, s7, s13
 80209d2:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 80209d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80209da:	dd13      	ble.n	8020a04 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 80209dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80209e0:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 80209e4:	63c3      	str	r3, [r0, #60]	@ 0x3c
 80209e6:	eee3 7a87 	vfma.f32	s15, s7, s14
 80209ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80209ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80209f2:	dd15      	ble.n	8020a20 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 80209f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80209f8:	6403      	str	r3, [r0, #64]	@ 0x40
 80209fa:	bd70      	pop	{r4, r5, r6, pc}
 80209fc:	4623      	mov	r3, r4
 80209fe:	e6fd      	b.n	80207fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8020a00:	462a      	mov	r2, r5
 8020a02:	e706      	b.n	8020812 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8020a04:	d502      	bpl.n	8020a0c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8020a06:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8020a0a:	e7e9      	b.n	80209e0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8020a0c:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8020a10:	eea3 2a85 	vfma.f32	s4, s7, s10
 8020a14:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8020a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020a1c:	dade      	bge.n	80209dc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8020a1e:	e7f2      	b.n	8020a06 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8020a20:	d502      	bpl.n	8020a28 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8020a22:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8020a26:	e7e7      	b.n	80209f8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8020a28:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8020a2c:	eee3 4a86 	vfma.f32	s9, s7, s12
 8020a30:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8020a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020a38:	dadc      	bge.n	80209f4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8020a3a:	e7f2      	b.n	8020a22 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8020a3c:	3d800000 	.word	0x3d800000

08020a40 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8020a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020a44:	2714      	movs	r7, #20
 8020a46:	435f      	muls	r7, r3
 8020a48:	eb02 0c07 	add.w	ip, r2, r7
 8020a4c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8020a50:	f115 0e0f 	adds.w	lr, r5, #15
 8020a54:	f100 80a2 	bmi.w	8020b9c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8020a58:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8020a5c:	9c08      	ldr	r4, [sp, #32]
 8020a5e:	2614      	movs	r6, #20
 8020a60:	f8c0 e014 	str.w	lr, [r0, #20]
 8020a64:	4366      	muls	r6, r4
 8020a66:	eb02 0806 	add.w	r8, r2, r6
 8020a6a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8020a6e:	f115 040f 	adds.w	r4, r5, #15
 8020a72:	f100 809f 	bmi.w	8020bb4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8020a76:	1124      	asrs	r4, r4, #4
 8020a78:	eba4 040e 	sub.w	r4, r4, lr
 8020a7c:	6184      	str	r4, [r0, #24]
 8020a7e:	2c00      	cmp	r4, #0
 8020a80:	f000 808a 	beq.w	8020b98 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8020a84:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8020a88:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8020a8c:	5995      	ldr	r5, [r2, r6]
 8020a8e:	eba4 0809 	sub.w	r8, r4, r9
 8020a92:	59d4      	ldr	r4, [r2, r7]
 8020a94:	eba5 0a04 	sub.w	sl, r5, r4
 8020a98:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8020a9c:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8020aa0:	fb0e fe05 	mul.w	lr, lr, r5
 8020aa4:	fb0a ee19 	mls	lr, sl, r9, lr
 8020aa8:	fb08 e404 	mla	r4, r8, r4, lr
 8020aac:	3c01      	subs	r4, #1
 8020aae:	19a4      	adds	r4, r4, r6
 8020ab0:	f100 808c 	bmi.w	8020bcc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8020ab4:	fb94 fef6 	sdiv	lr, r4, r6
 8020ab8:	fb06 441e 	mls	r4, r6, lr, r4
 8020abc:	f8c0 e000 	str.w	lr, [r0]
 8020ac0:	6104      	str	r4, [r0, #16]
 8020ac2:	2d00      	cmp	r5, #0
 8020ac4:	f2c0 8095 	blt.w	8020bf2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8020ac8:	fb95 f4f6 	sdiv	r4, r5, r6
 8020acc:	fb06 5514 	mls	r5, r6, r4, r5
 8020ad0:	6044      	str	r4, [r0, #4]
 8020ad2:	6085      	str	r5, [r0, #8]
 8020ad4:	60c6      	str	r6, [r0, #12]
 8020ad6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8020ada:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8020ade:	6945      	ldr	r5, [r0, #20]
 8020ae0:	59d2      	ldr	r2, [r2, r7]
 8020ae2:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8020ae6:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8020c14 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8020aea:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 8020aee:	ee07 4a10 	vmov	s14, r4
 8020af2:	6804      	ldr	r4, [r0, #0]
 8020af4:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8020af8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8020afc:	ee07 2a90 	vmov	s15, r2
 8020b00:	ee27 7a26 	vmul.f32	s14, s14, s13
 8020b04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020b08:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8020b0c:	edd3 6a00 	vldr	s13, [r3]
 8020b10:	eee6 6a07 	vfma.f32	s13, s12, s14
 8020b14:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 8020b18:	eee6 6a27 	vfma.f32	s13, s12, s15
 8020b1c:	edc0 6a07 	vstr	s13, [r0, #28]
 8020b20:	edd0 6a01 	vldr	s13, [r0, #4]
 8020b24:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 8020b28:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8020b2c:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 8020b30:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8020b34:	ed80 6a08 	vstr	s12, [r0, #32]
 8020b38:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8020b3a:	6242      	str	r2, [r0, #36]	@ 0x24
 8020b3c:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 8020b40:	ed93 6a03 	vldr	s12, [r3, #12]
 8020b44:	eea5 6a87 	vfma.f32	s12, s11, s14
 8020b48:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8020b4c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8020b50:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 8020b54:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8020b58:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 8020b5c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8020b60:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 8020b64:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8020b66:	6302      	str	r2, [r0, #48]	@ 0x30
 8020b68:	ed93 6a06 	vldr	s12, [r3, #24]
 8020b6c:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 8020b70:	eea5 6a87 	vfma.f32	s12, s11, s14
 8020b74:	eeb0 7a46 	vmov.f32	s14, s12
 8020b78:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 8020b7c:	eea6 7a27 	vfma.f32	s14, s12, s15
 8020b80:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8020b84:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 8020b88:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 8020b8c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8020b90:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 8020b94:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8020b96:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8020b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020b9c:	2410      	movs	r4, #16
 8020b9e:	f1c5 0501 	rsb	r5, r5, #1
 8020ba2:	fb9e fef4 	sdiv	lr, lr, r4
 8020ba6:	f015 050f 	ands.w	r5, r5, #15
 8020baa:	bf18      	it	ne
 8020bac:	2501      	movne	r5, #1
 8020bae:	ebae 0e05 	sub.w	lr, lr, r5
 8020bb2:	e753      	b.n	8020a5c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8020bb4:	f04f 0910 	mov.w	r9, #16
 8020bb8:	f1c5 0501 	rsb	r5, r5, #1
 8020bbc:	fb94 f4f9 	sdiv	r4, r4, r9
 8020bc0:	f015 050f 	ands.w	r5, r5, #15
 8020bc4:	bf18      	it	ne
 8020bc6:	2501      	movne	r5, #1
 8020bc8:	1b64      	subs	r4, r4, r5
 8020bca:	e755      	b.n	8020a78 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8020bcc:	4264      	negs	r4, r4
 8020bce:	fb94 fef6 	sdiv	lr, r4, r6
 8020bd2:	f1ce 0800 	rsb	r8, lr, #0
 8020bd6:	fb06 441e 	mls	r4, r6, lr, r4
 8020bda:	f8c0 8000 	str.w	r8, [r0]
 8020bde:	6104      	str	r4, [r0, #16]
 8020be0:	2c00      	cmp	r4, #0
 8020be2:	f43f af6e 	beq.w	8020ac2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8020be6:	ea6f 0e0e 	mvn.w	lr, lr
 8020bea:	1b34      	subs	r4, r6, r4
 8020bec:	f8c0 e000 	str.w	lr, [r0]
 8020bf0:	e766      	b.n	8020ac0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8020bf2:	426d      	negs	r5, r5
 8020bf4:	fb95 f4f6 	sdiv	r4, r5, r6
 8020bf8:	f1c4 0e00 	rsb	lr, r4, #0
 8020bfc:	fb06 5514 	mls	r5, r6, r4, r5
 8020c00:	f8c0 e004 	str.w	lr, [r0, #4]
 8020c04:	6085      	str	r5, [r0, #8]
 8020c06:	2d00      	cmp	r5, #0
 8020c08:	f43f af64 	beq.w	8020ad4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8020c0c:	43e4      	mvns	r4, r4
 8020c0e:	1b75      	subs	r5, r6, r5
 8020c10:	6044      	str	r4, [r0, #4]
 8020c12:	e75e      	b.n	8020ad2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8020c14:	3d800000 	.word	0x3d800000

08020c18 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8020c18:	4b01      	ldr	r3, [pc, #4]	@ (8020c20 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8020c1a:	6018      	str	r0, [r3, #0]
 8020c1c:	4770      	bx	lr
 8020c1e:	bf00      	nop
 8020c20:	24034294 	.word	0x24034294

08020c24 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8020c24:	4b06      	ldr	r3, [pc, #24]	@ (8020c40 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8020c26:	881a      	ldrh	r2, [r3, #0]
 8020c28:	4282      	cmp	r2, r0
 8020c2a:	d807      	bhi.n	8020c3c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8020c2c:	4b05      	ldr	r3, [pc, #20]	@ (8020c44 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8020c2e:	881b      	ldrh	r3, [r3, #0]
 8020c30:	4413      	add	r3, r2
 8020c32:	4298      	cmp	r0, r3
 8020c34:	bfac      	ite	ge
 8020c36:	2000      	movge	r0, #0
 8020c38:	2001      	movlt	r0, #1
 8020c3a:	4770      	bx	lr
 8020c3c:	2000      	movs	r0, #0
 8020c3e:	4770      	bx	lr
 8020c40:	240342b4 	.word	0x240342b4
 8020c44:	240342b8 	.word	0x240342b8

08020c48 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8020c48:	b508      	push	{r3, lr}
 8020c4a:	4601      	mov	r1, r0
 8020c4c:	f7ff ffea 	bl	8020c24 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8020c50:	b118      	cbz	r0, 8020c5a <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8020c52:	4b02      	ldr	r3, [pc, #8]	@ (8020c5c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8020c54:	681b      	ldr	r3, [r3, #0]
 8020c56:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8020c5a:	bd08      	pop	{r3, pc}
 8020c5c:	24034298 	.word	0x24034298

08020c60 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 8020c60:	b538      	push	{r3, r4, r5, lr}
 8020c62:	4604      	mov	r4, r0
 8020c64:	f7ff ffde 	bl	8020c24 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8020c68:	b1d8      	cbz	r0, 8020ca2 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 8020c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8020ca8 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x48>)
 8020c6c:	881b      	ldrh	r3, [r3, #0]
 8020c6e:	1ae4      	subs	r4, r4, r3
 8020c70:	230e      	movs	r3, #14
 8020c72:	4363      	muls	r3, r4
 8020c74:	4c0d      	ldr	r4, [pc, #52]	@ (8020cac <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x4c>)
 8020c76:	6825      	ldr	r5, [r4, #0]
 8020c78:	18ea      	adds	r2, r5, r3
 8020c7a:	7b12      	ldrb	r2, [r2, #12]
 8020c7c:	f012 0220 	ands.w	r2, r2, #32
 8020c80:	d010      	beq.n	8020ca4 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x44>
 8020c82:	f9b1 2000 	ldrsh.w	r2, [r1]
 8020c86:	52ea      	strh	r2, [r5, r3]
 8020c88:	6822      	ldr	r2, [r4, #0]
 8020c8a:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8020c8e:	441a      	add	r2, r3
 8020c90:	8055      	strh	r5, [r2, #2]
 8020c92:	6822      	ldr	r2, [r4, #0]
 8020c94:	4413      	add	r3, r2
 8020c96:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 8020c9a:	809a      	strh	r2, [r3, #4]
 8020c9c:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8020ca0:	80da      	strh	r2, [r3, #6]
 8020ca2:	bd38      	pop	{r3, r4, r5, pc}
 8020ca4:	4610      	mov	r0, r2
 8020ca6:	e7fc      	b.n	8020ca2 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 8020ca8:	240342b4 	.word	0x240342b4
 8020cac:	2403429c 	.word	0x2403429c

08020cb0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 8020cb0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8020cb4:	4606      	mov	r6, r0
 8020cb6:	460c      	mov	r4, r1
 8020cb8:	f7ff ffb4 	bl	8020c24 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8020cbc:	b918      	cbnz	r0, 8020cc6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 8020cbe:	2000      	movs	r0, #0
 8020cc0:	b002      	add	sp, #8
 8020cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020cc6:	4608      	mov	r0, r1
 8020cc8:	f7f8 fd97 	bl	80197fa <_ZNK8touchgfx4Rect7isEmptyEv>
 8020ccc:	2800      	cmp	r0, #0
 8020cce:	d1f6      	bne.n	8020cbe <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8020cd0:	4b3f      	ldr	r3, [pc, #252]	@ (8020dd0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 8020cd2:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 8020dd4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 8020cd6:	881d      	ldrh	r5, [r3, #0]
 8020cd8:	f8d9 a000 	ldr.w	sl, [r9]
 8020cdc:	46c8      	mov	r8, r9
 8020cde:	1b73      	subs	r3, r6, r5
 8020ce0:	250e      	movs	r5, #14
 8020ce2:	435d      	muls	r5, r3
 8020ce4:	eb0a 0705 	add.w	r7, sl, r5
 8020ce8:	7b3b      	ldrb	r3, [r7, #12]
 8020cea:	f013 0f20 	tst.w	r3, #32
 8020cee:	d0e6      	beq.n	8020cbe <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8020cf0:	4621      	mov	r1, r4
 8020cf2:	4638      	mov	r0, r7
 8020cf4:	f7fd f83c 	bl	801dd70 <_ZNK8touchgfx4Rect8includesERKS0_>
 8020cf8:	2800      	cmp	r0, #0
 8020cfa:	d1e1      	bne.n	8020cc0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8020cfc:	4639      	mov	r1, r7
 8020cfe:	4620      	mov	r0, r4
 8020d00:	f7fd f836 	bl	801dd70 <_ZNK8touchgfx4Rect8includesERKS0_>
 8020d04:	b108      	cbz	r0, 8020d0a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 8020d06:	4621      	mov	r1, r4
 8020d08:	e020      	b.n	8020d4c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 8020d0a:	f9b4 2000 	ldrsh.w	r2, [r4]
 8020d0e:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 8020d12:	429a      	cmp	r2, r3
 8020d14:	d11e      	bne.n	8020d54 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8020d16:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8020d1a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8020d1e:	429a      	cmp	r2, r3
 8020d20:	d118      	bne.n	8020d54 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8020d22:	6820      	ldr	r0, [r4, #0]
 8020d24:	466b      	mov	r3, sp
 8020d26:	6861      	ldr	r1, [r4, #4]
 8020d28:	c303      	stmia	r3!, {r0, r1}
 8020d2a:	4639      	mov	r1, r7
 8020d2c:	4668      	mov	r0, sp
 8020d2e:	f7fd f845 	bl	801ddbc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8020d32:	f8d9 3000 	ldr.w	r3, [r9]
 8020d36:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8020d3a:	442b      	add	r3, r5
 8020d3c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8020d40:	4413      	add	r3, r2
 8020d42:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8020d46:	4293      	cmp	r3, r2
 8020d48:	dc04      	bgt.n	8020d54 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8020d4a:	4669      	mov	r1, sp
 8020d4c:	4630      	mov	r0, r6
 8020d4e:	f7ff ff87 	bl	8020c60 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 8020d52:	e7b5      	b.n	8020cc0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8020d54:	f8d8 3000 	ldr.w	r3, [r8]
 8020d58:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8020d5c:	442b      	add	r3, r5
 8020d5e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8020d62:	4291      	cmp	r1, r2
 8020d64:	d119      	bne.n	8020d9a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8020d66:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8020d6a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8020d6e:	4291      	cmp	r1, r2
 8020d70:	d113      	bne.n	8020d9a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8020d72:	6820      	ldr	r0, [r4, #0]
 8020d74:	466a      	mov	r2, sp
 8020d76:	6861      	ldr	r1, [r4, #4]
 8020d78:	c203      	stmia	r2!, {r0, r1}
 8020d7a:	4619      	mov	r1, r3
 8020d7c:	4668      	mov	r0, sp
 8020d7e:	f7fd f81d 	bl	801ddbc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8020d82:	f8d8 3000 	ldr.w	r3, [r8]
 8020d86:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8020d8a:	442b      	add	r3, r5
 8020d8c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020d90:	4413      	add	r3, r2
 8020d92:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8020d96:	4293      	cmp	r3, r2
 8020d98:	ddd7      	ble.n	8020d4a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 8020d9a:	4620      	mov	r0, r4
 8020d9c:	f7f8 fd2d 	bl	80197fa <_ZNK8touchgfx4Rect7isEmptyEv>
 8020da0:	b990      	cbnz	r0, 8020dc8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 8020da2:	88a7      	ldrh	r7, [r4, #4]
 8020da4:	88e3      	ldrh	r3, [r4, #6]
 8020da6:	fb17 f703 	smulbb	r7, r7, r3
 8020daa:	f8d8 3000 	ldr.w	r3, [r8]
 8020dae:	441d      	add	r5, r3
 8020db0:	4628      	mov	r0, r5
 8020db2:	f7f8 fd22 	bl	80197fa <_ZNK8touchgfx4Rect7isEmptyEv>
 8020db6:	b948      	cbnz	r0, 8020dcc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 8020db8:	88ab      	ldrh	r3, [r5, #4]
 8020dba:	88ea      	ldrh	r2, [r5, #6]
 8020dbc:	fb13 f302 	smulbb	r3, r3, r2
 8020dc0:	42bb      	cmp	r3, r7
 8020dc2:	f6bf af7c 	bge.w	8020cbe <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8020dc6:	e79e      	b.n	8020d06 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 8020dc8:	2700      	movs	r7, #0
 8020dca:	e7ee      	b.n	8020daa <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 8020dcc:	2300      	movs	r3, #0
 8020dce:	e7f7      	b.n	8020dc0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 8020dd0:	240342b4 	.word	0x240342b4
 8020dd4:	2403429c 	.word	0x2403429c

08020dd8 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8020dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020dda:	4c24      	ldr	r4, [pc, #144]	@ (8020e6c <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8020ddc:	6823      	ldr	r3, [r4, #0]
 8020dde:	2b00      	cmp	r3, #0
 8020de0:	d042      	beq.n	8020e68 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8020de2:	4a23      	ldr	r2, [pc, #140]	@ (8020e70 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8020de4:	4d23      	ldr	r5, [pc, #140]	@ (8020e74 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8020de6:	8811      	ldrh	r1, [r2, #0]
 8020de8:	f8b5 c000 	ldrh.w	ip, [r5]
 8020dec:	4822      	ldr	r0, [pc, #136]	@ (8020e78 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8020dee:	4461      	add	r1, ip
 8020df0:	1c4a      	adds	r2, r1, #1
 8020df2:	008f      	lsls	r7, r1, #2
 8020df4:	f022 0201 	bic.w	r2, r2, #1
 8020df8:	19de      	adds	r6, r3, r7
 8020dfa:	0412      	lsls	r2, r2, #16
 8020dfc:	6006      	str	r6, [r0, #0]
 8020dfe:	4e1f      	ldr	r6, [pc, #124]	@ (8020e7c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8020e00:	0c12      	lsrs	r2, r2, #16
 8020e02:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8020e06:	19da      	adds	r2, r3, r7
 8020e08:	6032      	str	r2, [r6, #0]
 8020e0a:	220e      	movs	r2, #14
 8020e0c:	fb02 f20c 	mul.w	r2, r2, ip
 8020e10:	3203      	adds	r2, #3
 8020e12:	f022 0203 	bic.w	r2, r2, #3
 8020e16:	443a      	add	r2, r7
 8020e18:	4f19      	ldr	r7, [pc, #100]	@ (8020e80 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8020e1a:	4413      	add	r3, r2
 8020e1c:	603b      	str	r3, [r7, #0]
 8020e1e:	2300      	movs	r3, #0
 8020e20:	4f18      	ldr	r7, [pc, #96]	@ (8020e84 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8020e22:	469c      	mov	ip, r3
 8020e24:	803b      	strh	r3, [r7, #0]
 8020e26:	4f18      	ldr	r7, [pc, #96]	@ (8020e88 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8020e28:	683f      	ldr	r7, [r7, #0]
 8020e2a:	1aba      	subs	r2, r7, r2
 8020e2c:	4f17      	ldr	r7, [pc, #92]	@ (8020e8c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8020e2e:	603a      	str	r2, [r7, #0]
 8020e30:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8020e34:	4a16      	ldr	r2, [pc, #88]	@ (8020e90 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8020e36:	8013      	strh	r3, [r2, #0]
 8020e38:	428b      	cmp	r3, r1
 8020e3a:	d10d      	bne.n	8020e58 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8020e3c:	882d      	ldrh	r5, [r5, #0]
 8020e3e:	2300      	movs	r3, #0
 8020e40:	6830      	ldr	r0, [r6, #0]
 8020e42:	240e      	movs	r4, #14
 8020e44:	429d      	cmp	r5, r3
 8020e46:	d90f      	bls.n	8020e68 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8020e48:	fb04 0203 	mla	r2, r4, r3, r0
 8020e4c:	3301      	adds	r3, #1
 8020e4e:	7b11      	ldrb	r1, [r2, #12]
 8020e50:	f36f 1145 	bfc	r1, #5, #1
 8020e54:	7311      	strb	r1, [r2, #12]
 8020e56:	e7f5      	b.n	8020e44 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8020e58:	6822      	ldr	r2, [r4, #0]
 8020e5a:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8020e5e:	6802      	ldr	r2, [r0, #0]
 8020e60:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8020e64:	3301      	adds	r3, #1
 8020e66:	e7e7      	b.n	8020e38 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8020e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020e6a:	bf00      	nop
 8020e6c:	24034298 	.word	0x24034298
 8020e70:	240342b4 	.word	0x240342b4
 8020e74:	240342b8 	.word	0x240342b8
 8020e78:	240342ac 	.word	0x240342ac
 8020e7c:	2403429c 	.word	0x2403429c
 8020e80:	240342a4 	.word	0x240342a4
 8020e84:	240342b6 	.word	0x240342b6
 8020e88:	240342a0 	.word	0x240342a0
 8020e8c:	240342b0 	.word	0x240342b0
 8020e90:	240342a8 	.word	0x240342a8

08020e94 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8020e94:	4b06      	ldr	r3, [pc, #24]	@ (8020eb0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 8020e96:	681b      	ldr	r3, [r3, #0]
 8020e98:	b943      	cbnz	r3, 8020eac <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8020e9a:	b139      	cbz	r1, 8020eac <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8020e9c:	4b05      	ldr	r3, [pc, #20]	@ (8020eb4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8020e9e:	801a      	strh	r2, [r3, #0]
 8020ea0:	4b05      	ldr	r3, [pc, #20]	@ (8020eb8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 8020ea2:	6019      	str	r1, [r3, #0]
 8020ea4:	4b05      	ldr	r3, [pc, #20]	@ (8020ebc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 8020ea6:	6018      	str	r0, [r3, #0]
 8020ea8:	f7ff bf96 	b.w	8020dd8 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8020eac:	4770      	bx	lr
 8020eae:	bf00      	nop
 8020eb0:	240342a4 	.word	0x240342a4
 8020eb4:	240342b8 	.word	0x240342b8
 8020eb8:	240342a0 	.word	0x240342a0
 8020ebc:	24034298 	.word	0x24034298

08020ec0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8020ec0:	b470      	push	{r4, r5, r6}
 8020ec2:	4c07      	ldr	r4, [pc, #28]	@ (8020ee0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8020ec4:	4605      	mov	r5, r0
 8020ec6:	4610      	mov	r0, r2
 8020ec8:	9a03      	ldr	r2, [sp, #12]
 8020eca:	6826      	ldr	r6, [r4, #0]
 8020ecc:	b936      	cbnz	r6, 8020edc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8020ece:	6025      	str	r5, [r4, #0]
 8020ed0:	4c04      	ldr	r4, [pc, #16]	@ (8020ee4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8020ed2:	8021      	strh	r1, [r4, #0]
 8020ed4:	4619      	mov	r1, r3
 8020ed6:	bc70      	pop	{r4, r5, r6}
 8020ed8:	f7ff bfdc 	b.w	8020e94 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8020edc:	bc70      	pop	{r4, r5, r6}
 8020ede:	4770      	bx	lr
 8020ee0:	240342bc 	.word	0x240342bc
 8020ee4:	240342b4 	.word	0x240342b4

08020ee8 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8020ee8:	4a12      	ldr	r2, [pc, #72]	@ (8020f34 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 8020eea:	8803      	ldrh	r3, [r0, #0]
 8020eec:	8812      	ldrh	r2, [r2, #0]
 8020eee:	4293      	cmp	r3, r2
 8020ef0:	d207      	bcs.n	8020f02 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8020ef2:	4a11      	ldr	r2, [pc, #68]	@ (8020f38 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8020ef4:	2114      	movs	r1, #20
 8020ef6:	6812      	ldr	r2, [r2, #0]
 8020ef8:	fb01 2303 	mla	r3, r1, r3, r2
 8020efc:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8020f00:	4770      	bx	lr
 8020f02:	490e      	ldr	r1, [pc, #56]	@ (8020f3c <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8020f04:	8809      	ldrh	r1, [r1, #0]
 8020f06:	4411      	add	r1, r2
 8020f08:	428b      	cmp	r3, r1
 8020f0a:	da04      	bge.n	8020f16 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8020f0c:	1a9b      	subs	r3, r3, r2
 8020f0e:	4a0c      	ldr	r2, [pc, #48]	@ (8020f40 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8020f10:	210e      	movs	r1, #14
 8020f12:	6812      	ldr	r2, [r2, #0]
 8020f14:	e7f0      	b.n	8020ef8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8020f16:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8020f1a:	4293      	cmp	r3, r2
 8020f1c:	d108      	bne.n	8020f30 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 8020f1e:	4b09      	ldr	r3, [pc, #36]	@ (8020f44 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8020f20:	781b      	ldrb	r3, [r3, #0]
 8020f22:	b91b      	cbnz	r3, 8020f2c <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8020f24:	4b08      	ldr	r3, [pc, #32]	@ (8020f48 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8020f26:	f9b3 0000 	ldrsh.w	r0, [r3]
 8020f2a:	4770      	bx	lr
 8020f2c:	4b07      	ldr	r3, [pc, #28]	@ (8020f4c <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8020f2e:	e7fa      	b.n	8020f26 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8020f30:	2000      	movs	r0, #0
 8020f32:	4770      	bx	lr
 8020f34:	240342b4 	.word	0x240342b4
 8020f38:	240342bc 	.word	0x240342bc
 8020f3c:	240342b8 	.word	0x240342b8
 8020f40:	2403429c 	.word	0x2403429c
 8020f44:	24034224 	.word	0x24034224
 8020f48:	24034226 	.word	0x24034226
 8020f4c:	24034228 	.word	0x24034228

08020f50 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8020f50:	4a12      	ldr	r2, [pc, #72]	@ (8020f9c <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8020f52:	8803      	ldrh	r3, [r0, #0]
 8020f54:	8812      	ldrh	r2, [r2, #0]
 8020f56:	4293      	cmp	r3, r2
 8020f58:	d207      	bcs.n	8020f6a <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 8020f5a:	4a11      	ldr	r2, [pc, #68]	@ (8020fa0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8020f5c:	2114      	movs	r1, #20
 8020f5e:	6812      	ldr	r2, [r2, #0]
 8020f60:	fb01 2303 	mla	r3, r1, r3, r2
 8020f64:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8020f68:	4770      	bx	lr
 8020f6a:	490e      	ldr	r1, [pc, #56]	@ (8020fa4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8020f6c:	8809      	ldrh	r1, [r1, #0]
 8020f6e:	4411      	add	r1, r2
 8020f70:	428b      	cmp	r3, r1
 8020f72:	da04      	bge.n	8020f7e <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8020f74:	1a9b      	subs	r3, r3, r2
 8020f76:	4a0c      	ldr	r2, [pc, #48]	@ (8020fa8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8020f78:	210e      	movs	r1, #14
 8020f7a:	6812      	ldr	r2, [r2, #0]
 8020f7c:	e7f0      	b.n	8020f60 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8020f7e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8020f82:	4293      	cmp	r3, r2
 8020f84:	d108      	bne.n	8020f98 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 8020f86:	4b09      	ldr	r3, [pc, #36]	@ (8020fac <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8020f88:	781b      	ldrb	r3, [r3, #0]
 8020f8a:	b91b      	cbnz	r3, 8020f94 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8020f8c:	4b08      	ldr	r3, [pc, #32]	@ (8020fb0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8020f8e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8020f92:	4770      	bx	lr
 8020f94:	4b07      	ldr	r3, [pc, #28]	@ (8020fb4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8020f96:	e7fa      	b.n	8020f8e <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8020f98:	2000      	movs	r0, #0
 8020f9a:	4770      	bx	lr
 8020f9c:	240342b4 	.word	0x240342b4
 8020fa0:	240342bc 	.word	0x240342bc
 8020fa4:	240342b8 	.word	0x240342b8
 8020fa8:	2403429c 	.word	0x2403429c
 8020fac:	24034224 	.word	0x24034224
 8020fb0:	24034228 	.word	0x24034228
 8020fb4:	24034226 	.word	0x24034226

08020fb8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8020fb8:	4a22      	ldr	r2, [pc, #136]	@ (8021044 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8020fba:	b530      	push	{r4, r5, lr}
 8020fbc:	880b      	ldrh	r3, [r1, #0]
 8020fbe:	8812      	ldrh	r2, [r2, #0]
 8020fc0:	4293      	cmp	r3, r2
 8020fc2:	d213      	bcs.n	8020fec <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8020fc4:	4a20      	ldr	r2, [pc, #128]	@ (8021048 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8020fc6:	2114      	movs	r1, #20
 8020fc8:	6812      	ldr	r2, [r2, #0]
 8020fca:	fb01 2303 	mla	r3, r1, r3, r2
 8020fce:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8020fd2:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8020fd6:	8a1a      	ldrh	r2, [r3, #16]
 8020fd8:	8a5b      	ldrh	r3, [r3, #18]
 8020fda:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8020fde:	8004      	strh	r4, [r0, #0]
 8020fe0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8020fe4:	8041      	strh	r1, [r0, #2]
 8020fe6:	8082      	strh	r2, [r0, #4]
 8020fe8:	80c3      	strh	r3, [r0, #6]
 8020fea:	e024      	b.n	8021036 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 8020fec:	4917      	ldr	r1, [pc, #92]	@ (802104c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8020fee:	8809      	ldrh	r1, [r1, #0]
 8020ff0:	4411      	add	r1, r2
 8020ff2:	428b      	cmp	r3, r1
 8020ff4:	da10      	bge.n	8021018 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 8020ff6:	1a9b      	subs	r3, r3, r2
 8020ff8:	220e      	movs	r2, #14
 8020ffa:	4353      	muls	r3, r2
 8020ffc:	4a14      	ldr	r2, [pc, #80]	@ (8021050 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8020ffe:	6811      	ldr	r1, [r2, #0]
 8021000:	18ca      	adds	r2, r1, r3
 8021002:	5ecd      	ldrsh	r5, [r1, r3]
 8021004:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8021008:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 802100c:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8021010:	8005      	strh	r5, [r0, #0]
 8021012:	8044      	strh	r4, [r0, #2]
 8021014:	8081      	strh	r1, [r0, #4]
 8021016:	e7e7      	b.n	8020fe8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8021018:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 802101c:	4293      	cmp	r3, r2
 802101e:	d10b      	bne.n	8021038 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 8021020:	4b0c      	ldr	r3, [pc, #48]	@ (8021054 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8021022:	f9b3 1000 	ldrsh.w	r1, [r3]
 8021026:	4b0c      	ldr	r3, [pc, #48]	@ (8021058 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8021028:	8081      	strh	r1, [r0, #4]
 802102a:	f9b3 2000 	ldrsh.w	r2, [r3]
 802102e:	2300      	movs	r3, #0
 8021030:	80c2      	strh	r2, [r0, #6]
 8021032:	8003      	strh	r3, [r0, #0]
 8021034:	8043      	strh	r3, [r0, #2]
 8021036:	bd30      	pop	{r4, r5, pc}
 8021038:	2300      	movs	r3, #0
 802103a:	8003      	strh	r3, [r0, #0]
 802103c:	8043      	strh	r3, [r0, #2]
 802103e:	8083      	strh	r3, [r0, #4]
 8021040:	e7d2      	b.n	8020fe8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8021042:	bf00      	nop
 8021044:	240342b4 	.word	0x240342b4
 8021048:	240342bc 	.word	0x240342bc
 802104c:	240342b8 	.word	0x240342b8
 8021050:	2403429c 	.word	0x2403429c
 8021054:	24034220 	.word	0x24034220
 8021058:	24034222 	.word	0x24034222

0802105c <_ZNK8touchgfx6Bitmap7getDataEv>:
 802105c:	4a12      	ldr	r2, [pc, #72]	@ (80210a8 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 802105e:	8803      	ldrh	r3, [r0, #0]
 8021060:	8811      	ldrh	r1, [r2, #0]
 8021062:	428b      	cmp	r3, r1
 8021064:	d20b      	bcs.n	802107e <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 8021066:	4a11      	ldr	r2, [pc, #68]	@ (80210ac <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8021068:	6812      	ldr	r2, [r2, #0]
 802106a:	b112      	cbz	r2, 8021072 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 802106c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8021070:	b9c0      	cbnz	r0, 80210a4 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 8021072:	4a0f      	ldr	r2, [pc, #60]	@ (80210b0 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8021074:	6811      	ldr	r1, [r2, #0]
 8021076:	2214      	movs	r2, #20
 8021078:	4353      	muls	r3, r2
 802107a:	58c8      	ldr	r0, [r1, r3]
 802107c:	4770      	bx	lr
 802107e:	4a0d      	ldr	r2, [pc, #52]	@ (80210b4 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8021080:	8812      	ldrh	r2, [r2, #0]
 8021082:	440a      	add	r2, r1
 8021084:	4293      	cmp	r3, r2
 8021086:	da04      	bge.n	8021092 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8021088:	4a08      	ldr	r2, [pc, #32]	@ (80210ac <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 802108a:	6812      	ldr	r2, [r2, #0]
 802108c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8021090:	4770      	bx	lr
 8021092:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8021096:	4293      	cmp	r3, r2
 8021098:	d103      	bne.n	80210a2 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 802109a:	4b07      	ldr	r3, [pc, #28]	@ (80210b8 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 802109c:	681b      	ldr	r3, [r3, #0]
 802109e:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80210a0:	4770      	bx	lr
 80210a2:	2000      	movs	r0, #0
 80210a4:	4770      	bx	lr
 80210a6:	bf00      	nop
 80210a8:	240342b4 	.word	0x240342b4
 80210ac:	24034298 	.word	0x24034298
 80210b0:	240342bc 	.word	0x240342bc
 80210b4:	240342b8 	.word	0x240342b8
 80210b8:	2403422c 	.word	0x2403422c

080210bc <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 80210bc:	4b24      	ldr	r3, [pc, #144]	@ (8021150 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 80210be:	8802      	ldrh	r2, [r0, #0]
 80210c0:	8818      	ldrh	r0, [r3, #0]
 80210c2:	4282      	cmp	r2, r0
 80210c4:	d221      	bcs.n	802110a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 80210c6:	4b23      	ldr	r3, [pc, #140]	@ (8021154 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 80210c8:	6819      	ldr	r1, [r3, #0]
 80210ca:	2314      	movs	r3, #20
 80210cc:	fb03 1302 	mla	r3, r3, r2, r1
 80210d0:	6858      	ldr	r0, [r3, #4]
 80210d2:	2800      	cmp	r0, #0
 80210d4:	d03a      	beq.n	802114c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80210d6:	4920      	ldr	r1, [pc, #128]	@ (8021158 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80210d8:	6809      	ldr	r1, [r1, #0]
 80210da:	2900      	cmp	r1, #0
 80210dc:	d036      	beq.n	802114c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80210de:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80210e2:	2900      	cmp	r1, #0
 80210e4:	d032      	beq.n	802114c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80210e6:	891a      	ldrh	r2, [r3, #8]
 80210e8:	8958      	ldrh	r0, [r3, #10]
 80210ea:	4350      	muls	r0, r2
 80210ec:	7c5a      	ldrb	r2, [r3, #17]
 80210ee:	7cdb      	ldrb	r3, [r3, #19]
 80210f0:	0952      	lsrs	r2, r2, #5
 80210f2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80210f6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80210fa:	2b0b      	cmp	r3, #11
 80210fc:	bf18      	it	ne
 80210fe:	0040      	lslne	r0, r0, #1
 8021100:	3003      	adds	r0, #3
 8021102:	f020 0003 	bic.w	r0, r0, #3
 8021106:	4408      	add	r0, r1
 8021108:	4770      	bx	lr
 802110a:	4b14      	ldr	r3, [pc, #80]	@ (802115c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 802110c:	881b      	ldrh	r3, [r3, #0]
 802110e:	4403      	add	r3, r0
 8021110:	429a      	cmp	r2, r3
 8021112:	da1a      	bge.n	802114a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8021114:	4b12      	ldr	r3, [pc, #72]	@ (8021160 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8021116:	1a10      	subs	r0, r2, r0
 8021118:	210e      	movs	r1, #14
 802111a:	681b      	ldr	r3, [r3, #0]
 802111c:	fb01 3000 	mla	r0, r1, r0, r3
 8021120:	7b03      	ldrb	r3, [r0, #12]
 8021122:	f003 031f 	and.w	r3, r3, #31
 8021126:	2b0b      	cmp	r3, #11
 8021128:	d10b      	bne.n	8021142 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 802112a:	8903      	ldrh	r3, [r0, #8]
 802112c:	8940      	ldrh	r0, [r0, #10]
 802112e:	4358      	muls	r0, r3
 8021130:	4b09      	ldr	r3, [pc, #36]	@ (8021158 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8021132:	3003      	adds	r0, #3
 8021134:	6819      	ldr	r1, [r3, #0]
 8021136:	f020 0303 	bic.w	r3, r0, #3
 802113a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 802113e:	4418      	add	r0, r3
 8021140:	4770      	bx	lr
 8021142:	2b0d      	cmp	r3, #13
 8021144:	d101      	bne.n	802114a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8021146:	300d      	adds	r0, #13
 8021148:	4770      	bx	lr
 802114a:	2000      	movs	r0, #0
 802114c:	4770      	bx	lr
 802114e:	bf00      	nop
 8021150:	240342b4 	.word	0x240342b4
 8021154:	240342bc 	.word	0x240342bc
 8021158:	24034298 	.word	0x24034298
 802115c:	240342b8 	.word	0x240342b8
 8021160:	2403429c 	.word	0x2403429c

08021164 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8021164:	4b1f      	ldr	r3, [pc, #124]	@ (80211e4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 8021166:	b510      	push	{r4, lr}
 8021168:	8802      	ldrh	r2, [r0, #0]
 802116a:	881b      	ldrh	r3, [r3, #0]
 802116c:	429a      	cmp	r2, r3
 802116e:	d21a      	bcs.n	80211a6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 8021170:	4b1d      	ldr	r3, [pc, #116]	@ (80211e8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 8021172:	2114      	movs	r1, #20
 8021174:	681b      	ldr	r3, [r3, #0]
 8021176:	fb01 3102 	mla	r1, r1, r2, r3
 802117a:	7c4b      	ldrb	r3, [r1, #17]
 802117c:	0958      	lsrs	r0, r3, #5
 802117e:	7ccb      	ldrb	r3, [r1, #19]
 8021180:	491a      	ldr	r1, [pc, #104]	@ (80211ec <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 8021182:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8021186:	6809      	ldr	r1, [r1, #0]
 8021188:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 802118c:	b2d8      	uxtb	r0, r3
 802118e:	b149      	cbz	r1, 80211a4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8021190:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8021194:	b132      	cbz	r2, 80211a4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8021196:	2b0e      	cmp	r3, #14
 8021198:	d021      	beq.n	80211de <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 802119a:	280f      	cmp	r0, #15
 802119c:	d01d      	beq.n	80211da <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 802119e:	2810      	cmp	r0, #16
 80211a0:	bf08      	it	eq
 80211a2:	2002      	moveq	r0, #2
 80211a4:	bd10      	pop	{r4, pc}
 80211a6:	4912      	ldr	r1, [pc, #72]	@ (80211f0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 80211a8:	8809      	ldrh	r1, [r1, #0]
 80211aa:	4419      	add	r1, r3
 80211ac:	428a      	cmp	r2, r1
 80211ae:	da09      	bge.n	80211c4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 80211b0:	1ad3      	subs	r3, r2, r3
 80211b2:	4a10      	ldr	r2, [pc, #64]	@ (80211f4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 80211b4:	210e      	movs	r1, #14
 80211b6:	6812      	ldr	r2, [r2, #0]
 80211b8:	fb01 2303 	mla	r3, r1, r3, r2
 80211bc:	7b18      	ldrb	r0, [r3, #12]
 80211be:	f000 001f 	and.w	r0, r0, #31
 80211c2:	e7ef      	b.n	80211a4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 80211c4:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80211c8:	429a      	cmp	r2, r3
 80211ca:	d108      	bne.n	80211de <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 80211cc:	f7f3 f94a 	bl	8014464 <_ZN8touchgfx3HAL3lcdEv>
 80211d0:	6803      	ldr	r3, [r0, #0]
 80211d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80211d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80211d8:	4718      	bx	r3
 80211da:	2001      	movs	r0, #1
 80211dc:	e7e2      	b.n	80211a4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 80211de:	2000      	movs	r0, #0
 80211e0:	e7e0      	b.n	80211a4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 80211e2:	bf00      	nop
 80211e4:	240342b4 	.word	0x240342b4
 80211e8:	240342bc 	.word	0x240342bc
 80211ec:	24034298 	.word	0x24034298
 80211f0:	240342b8 	.word	0x240342b8
 80211f4:	2403429c 	.word	0x2403429c

080211f8 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 80211f8:	2018      	movs	r0, #24
 80211fa:	4770      	bx	lr

080211fc <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 80211fc:	2001      	movs	r0, #1
 80211fe:	4770      	bx	lr

08021200 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8021200:	4b02      	ldr	r3, [pc, #8]	@ (802120c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 8021202:	8818      	ldrh	r0, [r3, #0]
 8021204:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021208:	b280      	uxth	r0, r0
 802120a:	4770      	bx	lr
 802120c:	24034226 	.word	0x24034226

08021210 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8021210:	2bff      	cmp	r3, #255	@ 0xff
 8021212:	d04c      	beq.n	80212ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8021214:	2a2c      	cmp	r2, #44	@ 0x2c
 8021216:	d030      	beq.n	802127a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a>
 8021218:	d80f      	bhi.n	802123a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 802121a:	2a08      	cmp	r2, #8
 802121c:	d043      	beq.n	80212a6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 802121e:	d805      	bhi.n	802122c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 8021220:	2a04      	cmp	r2, #4
 8021222:	d03e      	beq.n	80212a2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8021224:	2a05      	cmp	r2, #5
 8021226:	d03a      	beq.n	802129e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 8021228:	2300      	movs	r3, #0
 802122a:	e024      	b.n	8021276 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 802122c:	2a0a      	cmp	r2, #10
 802122e:	d03a      	beq.n	80212a6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8021230:	d301      	bcc.n	8021236 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 8021232:	2a0b      	cmp	r2, #11
 8021234:	d1f8      	bne.n	8021228 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8021236:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8021238:	e01d      	b.n	8021276 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 802123a:	2a30      	cmp	r2, #48	@ 0x30
 802123c:	d035      	beq.n	80212aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 802123e:	d80a      	bhi.n	8021256 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x46>
 8021240:	2a2e      	cmp	r2, #46	@ 0x2e
 8021242:	684b      	ldr	r3, [r1, #4]
 8021244:	d023      	beq.n	802128e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8021246:	d90d      	bls.n	8021264 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 8021248:	781a      	ldrb	r2, [r3, #0]
 802124a:	785b      	ldrb	r3, [r3, #1]
 802124c:	2b00      	cmp	r3, #0
 802124e:	d1eb      	bne.n	8021228 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8021250:	b98a      	cbnz	r2, 8021276 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8021252:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8021254:	e00f      	b.n	8021276 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8021256:	2a32      	cmp	r2, #50	@ 0x32
 8021258:	d027      	beq.n	80212aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 802125a:	d301      	bcc.n	8021260 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 802125c:	2a33      	cmp	r2, #51	@ 0x33
 802125e:	d1e3      	bne.n	8021228 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8021260:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8021262:	e008      	b.n	8021276 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8021264:	781a      	ldrb	r2, [r3, #0]
 8021266:	785b      	ldrb	r3, [r3, #1]
 8021268:	2b00      	cmp	r3, #0
 802126a:	d1dd      	bne.n	8021228 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 802126c:	2a00      	cmp	r2, #0
 802126e:	d0f0      	beq.n	8021252 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 8021270:	2a01      	cmp	r2, #1
 8021272:	d1d9      	bne.n	8021228 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8021274:	6943      	ldr	r3, [r0, #20]
 8021276:	4618      	mov	r0, r3
 8021278:	4770      	bx	lr
 802127a:	684b      	ldr	r3, [r1, #4]
 802127c:	781a      	ldrb	r2, [r3, #0]
 802127e:	785b      	ldrb	r3, [r3, #1]
 8021280:	2b00      	cmp	r3, #0
 8021282:	d1d1      	bne.n	8021228 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8021284:	b14a      	cbz	r2, 802129a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 8021286:	2a01      	cmp	r2, #1
 8021288:	bf08      	it	eq
 802128a:	68c3      	ldreq	r3, [r0, #12]
 802128c:	e7f3      	b.n	8021276 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 802128e:	781a      	ldrb	r2, [r3, #0]
 8021290:	785b      	ldrb	r3, [r3, #1]
 8021292:	2b00      	cmp	r3, #0
 8021294:	d1c8      	bne.n	8021228 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8021296:	2a00      	cmp	r2, #0
 8021298:	d1ed      	bne.n	8021276 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 802129a:	69c3      	ldr	r3, [r0, #28]
 802129c:	e7eb      	b.n	8021276 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 802129e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80212a0:	e7e9      	b.n	8021276 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80212a2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80212a4:	e7e7      	b.n	8021276 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80212a6:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80212a8:	e7e5      	b.n	8021276 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80212aa:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80212ac:	e7e3      	b.n	8021276 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80212ae:	2a2c      	cmp	r2, #44	@ 0x2c
 80212b0:	d030      	beq.n	8021314 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x104>
 80212b2:	d80f      	bhi.n	80212d4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 80212b4:	2a08      	cmp	r2, #8
 80212b6:	d042      	beq.n	802133e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 80212b8:	d805      	bhi.n	80212c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 80212ba:	2a04      	cmp	r2, #4
 80212bc:	d03d      	beq.n	802133a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 80212be:	2a05      	cmp	r2, #5
 80212c0:	d1b2      	bne.n	8021228 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80212c2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80212c4:	e7d7      	b.n	8021276 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80212c6:	2a0a      	cmp	r2, #10
 80212c8:	d039      	beq.n	802133e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 80212ca:	d301      	bcc.n	80212d0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 80212cc:	2a0b      	cmp	r2, #11
 80212ce:	d1ab      	bne.n	8021228 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80212d0:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80212d2:	e7d0      	b.n	8021276 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80212d4:	2a30      	cmp	r2, #48	@ 0x30
 80212d6:	d034      	beq.n	8021342 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 80212d8:	d80b      	bhi.n	80212f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 80212da:	2a2e      	cmp	r2, #46	@ 0x2e
 80212dc:	684b      	ldr	r3, [r1, #4]
 80212de:	d023      	beq.n	8021328 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 80212e0:	d90e      	bls.n	8021300 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf0>
 80212e2:	781a      	ldrb	r2, [r3, #0]
 80212e4:	785b      	ldrb	r3, [r3, #1]
 80212e6:	2b00      	cmp	r3, #0
 80212e8:	d19e      	bne.n	8021228 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80212ea:	2a00      	cmp	r2, #0
 80212ec:	d1c3      	bne.n	8021276 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80212ee:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80212f0:	e7c1      	b.n	8021276 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80212f2:	2a32      	cmp	r2, #50	@ 0x32
 80212f4:	d025      	beq.n	8021342 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 80212f6:	d301      	bcc.n	80212fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 80212f8:	2a33      	cmp	r2, #51	@ 0x33
 80212fa:	d195      	bne.n	8021228 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80212fc:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80212fe:	e7ba      	b.n	8021276 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8021300:	781a      	ldrb	r2, [r3, #0]
 8021302:	785b      	ldrb	r3, [r3, #1]
 8021304:	2b00      	cmp	r3, #0
 8021306:	d18f      	bne.n	8021228 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8021308:	2a00      	cmp	r2, #0
 802130a:	d0f0      	beq.n	80212ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xde>
 802130c:	2a01      	cmp	r2, #1
 802130e:	d18b      	bne.n	8021228 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8021310:	6983      	ldr	r3, [r0, #24]
 8021312:	e7b0      	b.n	8021276 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8021314:	684b      	ldr	r3, [r1, #4]
 8021316:	781a      	ldrb	r2, [r3, #0]
 8021318:	785b      	ldrb	r3, [r3, #1]
 802131a:	2b00      	cmp	r3, #0
 802131c:	d184      	bne.n	8021228 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 802131e:	b152      	cbz	r2, 8021336 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 8021320:	2a01      	cmp	r2, #1
 8021322:	bf08      	it	eq
 8021324:	6903      	ldreq	r3, [r0, #16]
 8021326:	e7a6      	b.n	8021276 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8021328:	781a      	ldrb	r2, [r3, #0]
 802132a:	785b      	ldrb	r3, [r3, #1]
 802132c:	2b00      	cmp	r3, #0
 802132e:	f47f af7b 	bne.w	8021228 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8021332:	2a00      	cmp	r2, #0
 8021334:	d19f      	bne.n	8021276 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8021336:	6a03      	ldr	r3, [r0, #32]
 8021338:	e79d      	b.n	8021276 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 802133a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 802133c:	e79b      	b.n	8021276 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 802133e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8021340:	e799      	b.n	8021276 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8021342:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8021344:	e797      	b.n	8021276 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>

08021346 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021346:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802134a:	b085      	sub	sp, #20
 802134c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 802134e:	9203      	str	r2, [sp, #12]
 8021350:	6870      	ldr	r0, [r6, #4]
 8021352:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8021356:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 802135a:	9101      	str	r1, [sp, #4]
 802135c:	fa1f f885 	uxth.w	r8, r5
 8021360:	43ed      	mvns	r5, r5
 8021362:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 8021366:	b2ed      	uxtb	r5, r5
 8021368:	fb00 2404 	mla	r4, r0, r4, r2
 802136c:	6832      	ldr	r2, [r6, #0]
 802136e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021372:	4414      	add	r4, r2
 8021374:	f8dc 2000 	ldr.w	r2, [ip]
 8021378:	9202      	str	r2, [sp, #8]
 802137a:	f8dc 2004 	ldr.w	r2, [ip, #4]
 802137e:	f102 0e04 	add.w	lr, r2, #4
 8021382:	9a01      	ldr	r2, [sp, #4]
 8021384:	2a00      	cmp	r2, #0
 8021386:	dc03      	bgt.n	8021390 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8021388:	9a03      	ldr	r2, [sp, #12]
 802138a:	2a00      	cmp	r2, #0
 802138c:	f340 8116 	ble.w	80215bc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8021390:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8021392:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8021396:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 802139a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802139c:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 80213a0:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80213a4:	2b00      	cmp	r3, #0
 80213a6:	dd0e      	ble.n	80213c6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80213a8:	1406      	asrs	r6, r0, #16
 80213aa:	d405      	bmi.n	80213b8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80213ac:	4556      	cmp	r6, sl
 80213ae:	da03      	bge.n	80213b8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80213b0:	1416      	asrs	r6, r2, #16
 80213b2:	d401      	bmi.n	80213b8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80213b4:	454e      	cmp	r6, r9
 80213b6:	db07      	blt.n	80213c8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80213b8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80213ba:	3b01      	subs	r3, #1
 80213bc:	3403      	adds	r4, #3
 80213be:	4430      	add	r0, r6
 80213c0:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 80213c2:	4432      	add	r2, r6
 80213c4:	e7ee      	b.n	80213a4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80213c6:	d063      	beq.n	8021490 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80213c8:	1e5e      	subs	r6, r3, #1
 80213ca:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 80213cc:	fb07 0706 	mla	r7, r7, r6, r0
 80213d0:	143f      	asrs	r7, r7, #16
 80213d2:	d454      	bmi.n	802147e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80213d4:	4557      	cmp	r7, sl
 80213d6:	da52      	bge.n	802147e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80213d8:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 80213da:	fb07 2606 	mla	r6, r7, r6, r2
 80213de:	1436      	asrs	r6, r6, #16
 80213e0:	d44d      	bmi.n	802147e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80213e2:	454e      	cmp	r6, r9
 80213e4:	da4b      	bge.n	802147e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80213e6:	1ce6      	adds	r6, r4, #3
 80213e8:	4699      	mov	r9, r3
 80213ea:	f1b9 0f00 	cmp.w	r9, #0
 80213ee:	f106 0603 	add.w	r6, r6, #3
 80213f2:	dd48      	ble.n	8021486 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80213f4:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 80213f8:	1417      	asrs	r7, r2, #16
 80213fa:	9902      	ldr	r1, [sp, #8]
 80213fc:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8021400:	f109 39ff 	add.w	r9, r9, #4294967295
 8021404:	fb0b 1707 	mla	r7, fp, r7, r1
 8021408:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 802140c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 802140e:	f817 700a 	ldrb.w	r7, [r7, sl]
 8021412:	fb1b fb05 	smulbb	fp, fp, r5
 8021416:	4408      	add	r0, r1
 8021418:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802141a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802141e:	440a      	add	r2, r1
 8021420:	eb0e 0a07 	add.w	sl, lr, r7
 8021424:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8021428:	fb07 b708 	mla	r7, r7, r8, fp
 802142c:	b2bf      	uxth	r7, r7
 802142e:	f107 0b01 	add.w	fp, r7, #1
 8021432:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8021436:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 802143a:	fb1b fb05 	smulbb	fp, fp, r5
 802143e:	123f      	asrs	r7, r7, #8
 8021440:	f806 7c06 	strb.w	r7, [r6, #-6]
 8021444:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8021448:	fb07 b708 	mla	r7, r7, r8, fp
 802144c:	b2bf      	uxth	r7, r7
 802144e:	f107 0b01 	add.w	fp, r7, #1
 8021452:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8021456:	123f      	asrs	r7, r7, #8
 8021458:	f806 7c05 	strb.w	r7, [r6, #-5]
 802145c:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8021460:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8021464:	fb1a fa05 	smulbb	sl, sl, r5
 8021468:	fb07 a708 	mla	r7, r7, r8, sl
 802146c:	b2bf      	uxth	r7, r7
 802146e:	f107 0a01 	add.w	sl, r7, #1
 8021472:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8021476:	123f      	asrs	r7, r7, #8
 8021478:	f806 7c04 	strb.w	r7, [r6, #-4]
 802147c:	e7b5      	b.n	80213ea <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 802147e:	2700      	movs	r7, #0
 8021480:	1bde      	subs	r6, r3, r7
 8021482:	2e00      	cmp	r6, #0
 8021484:	dc42      	bgt.n	802150c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8021486:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802148a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802148e:	441c      	add	r4, r3
 8021490:	9b01      	ldr	r3, [sp, #4]
 8021492:	2b00      	cmp	r3, #0
 8021494:	f340 8092 	ble.w	80215bc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8021498:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802149c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802149e:	ee30 0a04 	vadd.f32	s0, s0, s8
 80214a2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80214a6:	eef0 6a62 	vmov.f32	s13, s5
 80214aa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80214ae:	ee31 1a05 	vadd.f32	s2, s2, s10
 80214b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80214b6:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 80214ba:	eef0 6a43 	vmov.f32	s13, s6
 80214be:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80214c2:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 80214c6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80214ca:	ee61 7a27 	vmul.f32	s15, s2, s15
 80214ce:	ee77 2a62 	vsub.f32	s5, s14, s5
 80214d2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80214d6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80214da:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80214de:	ee12 2a90 	vmov	r2, s5
 80214e2:	eef0 2a47 	vmov.f32	s5, s14
 80214e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80214ea:	ee13 2a10 	vmov	r2, s6
 80214ee:	9311      	str	r3, [sp, #68]	@ 0x44
 80214f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80214f2:	eeb0 3a67 	vmov.f32	s6, s15
 80214f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80214fa:	9312      	str	r3, [sp, #72]	@ 0x48
 80214fc:	9b01      	ldr	r3, [sp, #4]
 80214fe:	9a03      	ldr	r2, [sp, #12]
 8021500:	3b01      	subs	r3, #1
 8021502:	9301      	str	r3, [sp, #4]
 8021504:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021506:	bf08      	it	eq
 8021508:	4613      	moveq	r3, r2
 802150a:	e73a      	b.n	8021382 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802150c:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8021510:	d44e      	bmi.n	80215b0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8021512:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8021516:	4556      	cmp	r6, sl
 8021518:	dd4a      	ble.n	80215b0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 802151a:	ea5f 4b22 	movs.w	fp, r2, asr #16
 802151e:	d447      	bmi.n	80215b0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8021520:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8021524:	4559      	cmp	r1, fp
 8021526:	dd43      	ble.n	80215b0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8021528:	fa0f f986 	sxth.w	r9, r6
 802152c:	9902      	ldr	r1, [sp, #8]
 802152e:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8021532:	fb0b 1909 	mla	r9, fp, r9, r1
 8021536:	f814 b006 	ldrb.w	fp, [r4, r6]
 802153a:	f819 900a 	ldrb.w	r9, [r9, sl]
 802153e:	fb1b fb05 	smulbb	fp, fp, r5
 8021542:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8021546:	eb0e 0a09 	add.w	sl, lr, r9
 802154a:	f81e 9009 	ldrb.w	r9, [lr, r9]
 802154e:	fb09 b908 	mla	r9, r9, r8, fp
 8021552:	fa1f f989 	uxth.w	r9, r9
 8021556:	f109 0b01 	add.w	fp, r9, #1
 802155a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 802155e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021562:	f804 9006 	strb.w	r9, [r4, r6]
 8021566:	4426      	add	r6, r4
 8021568:	f89a 9001 	ldrb.w	r9, [sl, #1]
 802156c:	f896 b001 	ldrb.w	fp, [r6, #1]
 8021570:	fb1b fb05 	smulbb	fp, fp, r5
 8021574:	fb09 b908 	mla	r9, r9, r8, fp
 8021578:	fa1f f989 	uxth.w	r9, r9
 802157c:	f109 0b01 	add.w	fp, r9, #1
 8021580:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8021584:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021588:	f886 9001 	strb.w	r9, [r6, #1]
 802158c:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8021590:	f896 a002 	ldrb.w	sl, [r6, #2]
 8021594:	fb1a fa05 	smulbb	sl, sl, r5
 8021598:	fb09 a908 	mla	r9, r9, r8, sl
 802159c:	fa1f f989 	uxth.w	r9, r9
 80215a0:	f109 0a01 	add.w	sl, r9, #1
 80215a4:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 80215a8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80215ac:	f886 9002 	strb.w	r9, [r6, #2]
 80215b0:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80215b2:	3701      	adds	r7, #1
 80215b4:	4408      	add	r0, r1
 80215b6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80215b8:	440a      	add	r2, r1
 80215ba:	e761      	b.n	8021480 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80215bc:	b005      	add	sp, #20
 80215be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080215c2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80215c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80215c6:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80215c8:	4693      	mov	fp, r2
 80215ca:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80215cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80215d0:	6868      	ldr	r0, [r5, #4]
 80215d2:	6877      	ldr	r7, [r6, #4]
 80215d4:	9100      	str	r1, [sp, #0]
 80215d6:	3704      	adds	r7, #4
 80215d8:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 80215dc:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	@ 0x3c
 80215e0:	fb00 2404 	mla	r4, r0, r4, r2
 80215e4:	682a      	ldr	r2, [r5, #0]
 80215e6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80215ea:	4414      	add	r4, r2
 80215ec:	6832      	ldr	r2, [r6, #0]
 80215ee:	9201      	str	r2, [sp, #4]
 80215f0:	9a00      	ldr	r2, [sp, #0]
 80215f2:	2a00      	cmp	r2, #0
 80215f4:	dc03      	bgt.n	80215fe <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80215f6:	f1bb 0f00 	cmp.w	fp, #0
 80215fa:	f340 80bc 	ble.w	8021776 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80215fe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8021600:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 8021604:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8021608:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802160a:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 802160e:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8021612:	2b00      	cmp	r3, #0
 8021614:	dd0c      	ble.n	8021630 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8021616:	1405      	asrs	r5, r0, #16
 8021618:	d405      	bmi.n	8021626 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 802161a:	4555      	cmp	r5, sl
 802161c:	da03      	bge.n	8021626 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 802161e:	1415      	asrs	r5, r2, #16
 8021620:	d401      	bmi.n	8021626 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8021622:	454d      	cmp	r5, r9
 8021624:	db05      	blt.n	8021632 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021626:	4440      	add	r0, r8
 8021628:	4472      	add	r2, lr
 802162a:	3b01      	subs	r3, #1
 802162c:	3403      	adds	r4, #3
 802162e:	e7f0      	b.n	8021612 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8021630:	d03f      	beq.n	80216b2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 8021632:	1e5d      	subs	r5, r3, #1
 8021634:	fb08 0c05 	mla	ip, r8, r5, r0
 8021638:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 802163c:	d42e      	bmi.n	802169c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 802163e:	45d4      	cmp	ip, sl
 8021640:	da2c      	bge.n	802169c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8021642:	fb0e 2505 	mla	r5, lr, r5, r2
 8021646:	142d      	asrs	r5, r5, #16
 8021648:	d428      	bmi.n	802169c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 802164a:	454d      	cmp	r5, r9
 802164c:	da26      	bge.n	802169c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 802164e:	1ce5      	adds	r5, r4, #3
 8021650:	469c      	mov	ip, r3
 8021652:	f1bc 0f00 	cmp.w	ip, #0
 8021656:	f105 0503 	add.w	r5, r5, #3
 802165a:	dd25      	ble.n	80216a8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 802165c:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8021660:	ea4f 4922 	mov.w	r9, r2, asr #16
 8021664:	f10c 3cff 	add.w	ip, ip, #4294967295
 8021668:	4472      	add	r2, lr
 802166a:	468a      	mov	sl, r1
 802166c:	9901      	ldr	r1, [sp, #4]
 802166e:	fb0a 1909 	mla	r9, sl, r9, r1
 8021672:	1401      	asrs	r1, r0, #16
 8021674:	4440      	add	r0, r8
 8021676:	f819 9001 	ldrb.w	r9, [r9, r1]
 802167a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 802167e:	eb07 0a09 	add.w	sl, r7, r9
 8021682:	f817 9009 	ldrb.w	r9, [r7, r9]
 8021686:	f805 9c06 	strb.w	r9, [r5, #-6]
 802168a:	f89a 9001 	ldrb.w	r9, [sl, #1]
 802168e:	f805 9c05 	strb.w	r9, [r5, #-5]
 8021692:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8021696:	f805 9c04 	strb.w	r9, [r5, #-4]
 802169a:	e7da      	b.n	8021652 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802169c:	2500      	movs	r5, #0
 802169e:	eba3 0c05 	sub.w	ip, r3, r5
 80216a2:	f1bc 0f00 	cmp.w	ip, #0
 80216a6:	dc3b      	bgt.n	8021720 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 80216a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80216ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80216b0:	441c      	add	r4, r3
 80216b2:	9b00      	ldr	r3, [sp, #0]
 80216b4:	2b00      	cmp	r3, #0
 80216b6:	dd5e      	ble.n	8021776 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80216b8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80216bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80216be:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80216c2:	eeb0 6a62 	vmov.f32	s12, s5
 80216c6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80216ca:	ee31 1a05 	vadd.f32	s2, s2, s10
 80216ce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80216d2:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 80216d6:	eeb0 6a43 	vmov.f32	s12, s6
 80216da:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80216de:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 80216e2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80216e6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80216ea:	ee77 2a62 	vsub.f32	s5, s14, s5
 80216ee:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80216f2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80216f6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80216fa:	ee12 2a90 	vmov	r2, s5
 80216fe:	eef0 2a47 	vmov.f32	s5, s14
 8021702:	fb92 f8f3 	sdiv	r8, r2, r3
 8021706:	ee13 2a10 	vmov	r2, s6
 802170a:	eeb0 3a67 	vmov.f32	s6, s15
 802170e:	fb92 fef3 	sdiv	lr, r2, r3
 8021712:	9b00      	ldr	r3, [sp, #0]
 8021714:	3b01      	subs	r3, #1
 8021716:	9300      	str	r3, [sp, #0]
 8021718:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802171a:	bf08      	it	eq
 802171c:	465b      	moveq	r3, fp
 802171e:	e767      	b.n	80215f0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8021720:	ea5f 4920 	movs.w	r9, r0, asr #16
 8021724:	d423      	bmi.n	802176e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8021726:	f8d6 c008 	ldr.w	ip, [r6, #8]
 802172a:	45cc      	cmp	ip, r9
 802172c:	dd1f      	ble.n	802176e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 802172e:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8021732:	d41c      	bmi.n	802176e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8021734:	68f1      	ldr	r1, [r6, #12]
 8021736:	4551      	cmp	r1, sl
 8021738:	dd19      	ble.n	802176e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 802173a:	fa0f fc8c 	sxth.w	ip, ip
 802173e:	9901      	ldr	r1, [sp, #4]
 8021740:	fb0a 1c0c 	mla	ip, sl, ip, r1
 8021744:	f81c c009 	ldrb.w	ip, [ip, r9]
 8021748:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802174c:	f817 a00c 	ldrb.w	sl, [r7, ip]
 8021750:	eb07 090c 	add.w	r9, r7, ip
 8021754:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8021758:	f804 a00c 	strb.w	sl, [r4, ip]
 802175c:	44a4      	add	ip, r4
 802175e:	f899 a001 	ldrb.w	sl, [r9, #1]
 8021762:	f88c a001 	strb.w	sl, [ip, #1]
 8021766:	f899 9002 	ldrb.w	r9, [r9, #2]
 802176a:	f88c 9002 	strb.w	r9, [ip, #2]
 802176e:	4440      	add	r0, r8
 8021770:	4472      	add	r2, lr
 8021772:	3501      	adds	r5, #1
 8021774:	e793      	b.n	802169e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 8021776:	b003      	add	sp, #12
 8021778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802177c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802177c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021780:	b085      	sub	sp, #20
 8021782:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021786:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8021788:	9202      	str	r2, [sp, #8]
 802178a:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 802178e:	6860      	ldr	r0, [r4, #4]
 8021790:	9203      	str	r2, [sp, #12]
 8021792:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8021796:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 802179a:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 802179e:	fb00 2505 	mla	r5, r0, r5, r2
 80217a2:	6822      	ldr	r2, [r4, #0]
 80217a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80217a8:	4415      	add	r5, r2
 80217aa:	f8dc 2000 	ldr.w	r2, [ip]
 80217ae:	9200      	str	r2, [sp, #0]
 80217b0:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80217b4:	3204      	adds	r2, #4
 80217b6:	9201      	str	r2, [sp, #4]
 80217b8:	2900      	cmp	r1, #0
 80217ba:	dc03      	bgt.n	80217c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80217bc:	9a02      	ldr	r2, [sp, #8]
 80217be:	2a00      	cmp	r2, #0
 80217c0:	f340 8127 	ble.w	8021a12 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80217c4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80217c6:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80217ca:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 80217ce:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80217d0:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80217d4:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80217d8:	2b00      	cmp	r3, #0
 80217da:	dd0d      	ble.n	80217f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80217dc:	1422      	asrs	r2, r4, #16
 80217de:	d405      	bmi.n	80217ec <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80217e0:	4542      	cmp	r2, r8
 80217e2:	da03      	bge.n	80217ec <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80217e4:	1402      	asrs	r2, r0, #16
 80217e6:	d401      	bmi.n	80217ec <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80217e8:	42ba      	cmp	r2, r7
 80217ea:	db06      	blt.n	80217fa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80217ec:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80217ee:	4474      	add	r4, lr
 80217f0:	3b01      	subs	r3, #1
 80217f2:	3503      	adds	r5, #3
 80217f4:	4410      	add	r0, r2
 80217f6:	e7ef      	b.n	80217d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80217f8:	d075      	beq.n	80218e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 80217fa:	1e5a      	subs	r2, r3, #1
 80217fc:	fb0e 4602 	mla	r6, lr, r2, r4
 8021800:	1436      	asrs	r6, r6, #16
 8021802:	d465      	bmi.n	80218d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8021804:	4546      	cmp	r6, r8
 8021806:	da63      	bge.n	80218d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8021808:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 802180a:	fb06 0202 	mla	r2, r6, r2, r0
 802180e:	1412      	asrs	r2, r2, #16
 8021810:	d45e      	bmi.n	80218d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8021812:	42ba      	cmp	r2, r7
 8021814:	da5c      	bge.n	80218d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8021816:	1cef      	adds	r7, r5, #3
 8021818:	4699      	mov	r9, r3
 802181a:	f1b9 0f00 	cmp.w	r9, #0
 802181e:	dd5d      	ble.n	80218dc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 8021820:	1402      	asrs	r2, r0, #16
 8021822:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8021826:	1426      	asrs	r6, r4, #16
 8021828:	4692      	mov	sl, r2
 802182a:	9a00      	ldr	r2, [sp, #0]
 802182c:	fb08 220a 	mla	r2, r8, sl, r2
 8021830:	5d92      	ldrb	r2, [r2, r6]
 8021832:	9e01      	ldr	r6, [sp, #4]
 8021834:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8021838:	ea5f 6816 	movs.w	r8, r6, lsr #24
 802183c:	d041      	beq.n	80218c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 802183e:	9a03      	ldr	r2, [sp, #12]
 8021840:	fa5f fb86 	uxtb.w	fp, r6
 8021844:	fb02 f808 	mul.w	r8, r2, r8
 8021848:	f108 0201 	add.w	r2, r8, #1
 802184c:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8021850:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8021854:	1212      	asrs	r2, r2, #8
 8021856:	fa1f fa82 	uxth.w	sl, r2
 802185a:	43d2      	mvns	r2, r2
 802185c:	fb1b fb0a 	smulbb	fp, fp, sl
 8021860:	b2d2      	uxtb	r2, r2
 8021862:	fb08 b802 	mla	r8, r8, r2, fp
 8021866:	fa1f f888 	uxth.w	r8, r8
 802186a:	f108 0b01 	add.w	fp, r8, #1
 802186e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8021872:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8021876:	f3c6 4607 	ubfx	r6, r6, #16, #8
 802187a:	fb1b fb0a 	smulbb	fp, fp, sl
 802187e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021882:	fb16 fa0a 	smulbb	sl, r6, sl
 8021886:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 802188a:	f807 8c03 	strb.w	r8, [r7, #-3]
 802188e:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8021892:	fb06 aa02 	mla	sl, r6, r2, sl
 8021896:	fb08 b802 	mla	r8, r8, r2, fp
 802189a:	fa1f fa8a 	uxth.w	sl, sl
 802189e:	fa1f f888 	uxth.w	r8, r8
 80218a2:	f10a 0601 	add.w	r6, sl, #1
 80218a6:	f108 0b01 	add.w	fp, r8, #1
 80218aa:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 80218ae:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80218b2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80218b6:	ea4f 2828 	mov.w	r8, r8, asr #8
 80218ba:	f807 ac01 	strb.w	sl, [r7, #-1]
 80218be:	f807 8c02 	strb.w	r8, [r7, #-2]
 80218c2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80218c4:	4474      	add	r4, lr
 80218c6:	3703      	adds	r7, #3
 80218c8:	f109 39ff 	add.w	r9, r9, #4294967295
 80218cc:	4410      	add	r0, r2
 80218ce:	e7a4      	b.n	802181a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80218d0:	f04f 0800 	mov.w	r8, #0
 80218d4:	eba3 0208 	sub.w	r2, r3, r8
 80218d8:	2a00      	cmp	r2, #0
 80218da:	dc3b      	bgt.n	8021954 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 80218dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80218e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80218e4:	441d      	add	r5, r3
 80218e6:	2900      	cmp	r1, #0
 80218e8:	f340 8093 	ble.w	8021a12 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80218ec:	ee30 0a04 	vadd.f32	s0, s0, s8
 80218f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80218f2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80218f6:	3901      	subs	r1, #1
 80218f8:	eeb0 6a62 	vmov.f32	s12, s5
 80218fc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021900:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021904:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021908:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 802190c:	eeb0 6a43 	vmov.f32	s12, s6
 8021910:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021914:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8021918:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802191c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021920:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021924:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021928:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802192c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021930:	ee12 2a90 	vmov	r2, s5
 8021934:	eef0 2a47 	vmov.f32	s5, s14
 8021938:	fb92 fef3 	sdiv	lr, r2, r3
 802193c:	ee13 2a10 	vmov	r2, s6
 8021940:	eeb0 3a67 	vmov.f32	s6, s15
 8021944:	fb92 f3f3 	sdiv	r3, r2, r3
 8021948:	9a02      	ldr	r2, [sp, #8]
 802194a:	9312      	str	r3, [sp, #72]	@ 0x48
 802194c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802194e:	bf08      	it	eq
 8021950:	4613      	moveq	r3, r2
 8021952:	e731      	b.n	80217b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8021954:	1427      	asrs	r7, r4, #16
 8021956:	d456      	bmi.n	8021a06 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8021958:	f8dc 6008 	ldr.w	r6, [ip, #8]
 802195c:	42be      	cmp	r6, r7
 802195e:	dd52      	ble.n	8021a06 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8021960:	ea5f 4920 	movs.w	r9, r0, asr #16
 8021964:	d44f      	bmi.n	8021a06 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8021966:	f8dc 200c 	ldr.w	r2, [ip, #12]
 802196a:	454a      	cmp	r2, r9
 802196c:	dd4b      	ble.n	8021a06 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 802196e:	9a00      	ldr	r2, [sp, #0]
 8021970:	b236      	sxth	r6, r6
 8021972:	fb09 2606 	mla	r6, r9, r6, r2
 8021976:	5df2      	ldrb	r2, [r6, r7]
 8021978:	9e01      	ldr	r6, [sp, #4]
 802197a:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 802197e:	0e3a      	lsrs	r2, r7, #24
 8021980:	d041      	beq.n	8021a06 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8021982:	9e03      	ldr	r6, [sp, #12]
 8021984:	fa5f fb87 	uxtb.w	fp, r7
 8021988:	4372      	muls	r2, r6
 802198a:	1c56      	adds	r6, r2, #1
 802198c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8021990:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8021994:	1212      	asrs	r2, r2, #8
 8021996:	f815 9006 	ldrb.w	r9, [r5, r6]
 802199a:	fa1f fa82 	uxth.w	sl, r2
 802199e:	43d2      	mvns	r2, r2
 80219a0:	fb1b fb0a 	smulbb	fp, fp, sl
 80219a4:	b2d2      	uxtb	r2, r2
 80219a6:	fb09 b902 	mla	r9, r9, r2, fp
 80219aa:	fa1f f989 	uxth.w	r9, r9
 80219ae:	f109 0b01 	add.w	fp, r9, #1
 80219b2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80219b6:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80219ba:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80219be:	fb1b fb0a 	smulbb	fp, fp, sl
 80219c2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80219c6:	fb17 fa0a 	smulbb	sl, r7, sl
 80219ca:	f805 9006 	strb.w	r9, [r5, r6]
 80219ce:	442e      	add	r6, r5
 80219d0:	78b7      	ldrb	r7, [r6, #2]
 80219d2:	f896 9001 	ldrb.w	r9, [r6, #1]
 80219d6:	fb07 aa02 	mla	sl, r7, r2, sl
 80219da:	fb09 b902 	mla	r9, r9, r2, fp
 80219de:	fa1f fa8a 	uxth.w	sl, sl
 80219e2:	fa1f f989 	uxth.w	r9, r9
 80219e6:	f10a 0701 	add.w	r7, sl, #1
 80219ea:	f109 0b01 	add.w	fp, r9, #1
 80219ee:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80219f2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80219f6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80219fa:	ea4f 2929 	mov.w	r9, r9, asr #8
 80219fe:	f886 a002 	strb.w	sl, [r6, #2]
 8021a02:	f886 9001 	strb.w	r9, [r6, #1]
 8021a06:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8021a08:	4474      	add	r4, lr
 8021a0a:	f108 0801 	add.w	r8, r8, #1
 8021a0e:	4410      	add	r0, r2
 8021a10:	e760      	b.n	80218d4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 8021a12:	b005      	add	sp, #20
 8021a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021a18 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a1c:	b085      	sub	sp, #20
 8021a1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021a22:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8021a24:	9203      	str	r2, [sp, #12]
 8021a26:	6868      	ldr	r0, [r5, #4]
 8021a28:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8021a2c:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 8021a30:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 8021a34:	fb00 2404 	mla	r4, r0, r4, r2
 8021a38:	682a      	ldr	r2, [r5, #0]
 8021a3a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021a3e:	4414      	add	r4, r2
 8021a40:	f8dc 2000 	ldr.w	r2, [ip]
 8021a44:	9201      	str	r2, [sp, #4]
 8021a46:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8021a4a:	3204      	adds	r2, #4
 8021a4c:	9202      	str	r2, [sp, #8]
 8021a4e:	2900      	cmp	r1, #0
 8021a50:	dc03      	bgt.n	8021a5a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8021a52:	9a03      	ldr	r2, [sp, #12]
 8021a54:	2a00      	cmp	r2, #0
 8021a56:	f340 8137 	ble.w	8021cc8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8021a5a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8021a5c:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8021a60:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8021a64:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8021a66:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8021a6a:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8021a6e:	2b00      	cmp	r3, #0
 8021a70:	dd0d      	ble.n	8021a8e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8021a72:	1405      	asrs	r5, r0, #16
 8021a74:	d405      	bmi.n	8021a82 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8021a76:	4545      	cmp	r5, r8
 8021a78:	da03      	bge.n	8021a82 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8021a7a:	1415      	asrs	r5, r2, #16
 8021a7c:	d401      	bmi.n	8021a82 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8021a7e:	42bd      	cmp	r5, r7
 8021a80:	db06      	blt.n	8021a90 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021a82:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8021a84:	4470      	add	r0, lr
 8021a86:	3b01      	subs	r3, #1
 8021a88:	3403      	adds	r4, #3
 8021a8a:	442a      	add	r2, r5
 8021a8c:	e7ef      	b.n	8021a6e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8021a8e:	d070      	beq.n	8021b72 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8021a90:	1e5d      	subs	r5, r3, #1
 8021a92:	fb0e 0605 	mla	r6, lr, r5, r0
 8021a96:	1436      	asrs	r6, r6, #16
 8021a98:	d462      	bmi.n	8021b60 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8021a9a:	4546      	cmp	r6, r8
 8021a9c:	da60      	bge.n	8021b60 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8021a9e:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8021aa0:	fb06 2505 	mla	r5, r6, r5, r2
 8021aa4:	142d      	asrs	r5, r5, #16
 8021aa6:	d45b      	bmi.n	8021b60 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8021aa8:	42bd      	cmp	r5, r7
 8021aaa:	da59      	bge.n	8021b60 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8021aac:	1ce5      	adds	r5, r4, #3
 8021aae:	469a      	mov	sl, r3
 8021ab0:	f1ba 0f00 	cmp.w	sl, #0
 8021ab4:	dd58      	ble.n	8021b68 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8021ab6:	1416      	asrs	r6, r2, #16
 8021ab8:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8021abc:	1407      	asrs	r7, r0, #16
 8021abe:	46b1      	mov	r9, r6
 8021ac0:	9e01      	ldr	r6, [sp, #4]
 8021ac2:	fb08 6609 	mla	r6, r8, r9, r6
 8021ac6:	5df6      	ldrb	r6, [r6, r7]
 8021ac8:	9f02      	ldr	r7, [sp, #8]
 8021aca:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8021ace:	0e37      	lsrs	r7, r6, #24
 8021ad0:	2fff      	cmp	r7, #255	@ 0xff
 8021ad2:	f000 80f0 	beq.w	8021cb6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8021ad6:	fa5f f887 	uxtb.w	r8, r7
 8021ada:	b3d7      	cbz	r7, 8021b52 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8021adc:	fa1f f788 	uxth.w	r7, r8
 8021ae0:	ea6f 0808 	mvn.w	r8, r8
 8021ae4:	fa5f fb86 	uxtb.w	fp, r6
 8021ae8:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 8021aec:	fa5f f888 	uxtb.w	r8, r8
 8021af0:	fb1b fb07 	smulbb	fp, fp, r7
 8021af4:	fb09 b908 	mla	r9, r9, r8, fp
 8021af8:	fa1f f989 	uxth.w	r9, r9
 8021afc:	f109 0b01 	add.w	fp, r9, #1
 8021b00:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8021b04:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8021b08:	fb1b fb08 	smulbb	fp, fp, r8
 8021b0c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021b10:	f805 9c03 	strb.w	r9, [r5, #-3]
 8021b14:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8021b18:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8021b1c:	fb09 b907 	mla	r9, r9, r7, fp
 8021b20:	fa1f f989 	uxth.w	r9, r9
 8021b24:	f109 0b01 	add.w	fp, r9, #1
 8021b28:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8021b2c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021b30:	f805 9c02 	strb.w	r9, [r5, #-2]
 8021b34:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 8021b38:	fb19 f808 	smulbb	r8, r9, r8
 8021b3c:	fb06 8607 	mla	r6, r6, r7, r8
 8021b40:	b2b6      	uxth	r6, r6
 8021b42:	f106 0801 	add.w	r8, r6, #1
 8021b46:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8021b4a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021b4e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8021b52:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8021b54:	4470      	add	r0, lr
 8021b56:	3503      	adds	r5, #3
 8021b58:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021b5c:	4432      	add	r2, r6
 8021b5e:	e7a7      	b.n	8021ab0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8021b60:	2600      	movs	r6, #0
 8021b62:	1b9d      	subs	r5, r3, r6
 8021b64:	2d00      	cmp	r5, #0
 8021b66:	dc3b      	bgt.n	8021be0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8021b68:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021b6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021b70:	441c      	add	r4, r3
 8021b72:	2900      	cmp	r1, #0
 8021b74:	f340 80a8 	ble.w	8021cc8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8021b78:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021b7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021b7e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021b82:	3901      	subs	r1, #1
 8021b84:	eeb0 6a62 	vmov.f32	s12, s5
 8021b88:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021b8c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021b90:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021b94:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8021b98:	eeb0 6a43 	vmov.f32	s12, s6
 8021b9c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021ba0:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8021ba4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021ba8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021bac:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021bb0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021bb4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021bb8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021bbc:	ee12 2a90 	vmov	r2, s5
 8021bc0:	eef0 2a47 	vmov.f32	s5, s14
 8021bc4:	fb92 fef3 	sdiv	lr, r2, r3
 8021bc8:	ee13 2a10 	vmov	r2, s6
 8021bcc:	eeb0 3a67 	vmov.f32	s6, s15
 8021bd0:	fb92 f3f3 	sdiv	r3, r2, r3
 8021bd4:	9a03      	ldr	r2, [sp, #12]
 8021bd6:	9312      	str	r3, [sp, #72]	@ 0x48
 8021bd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021bda:	bf08      	it	eq
 8021bdc:	4613      	moveq	r3, r2
 8021bde:	e736      	b.n	8021a4e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8021be0:	ea5f 4820 	movs.w	r8, r0, asr #16
 8021be4:	d457      	bmi.n	8021c96 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8021be6:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8021bea:	4547      	cmp	r7, r8
 8021bec:	dd53      	ble.n	8021c96 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8021bee:	ea5f 4922 	movs.w	r9, r2, asr #16
 8021bf2:	d450      	bmi.n	8021c96 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8021bf4:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8021bf8:	454d      	cmp	r5, r9
 8021bfa:	dd4c      	ble.n	8021c96 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8021bfc:	9d01      	ldr	r5, [sp, #4]
 8021bfe:	b23f      	sxth	r7, r7
 8021c00:	fb09 5707 	mla	r7, r9, r7, r5
 8021c04:	f817 5008 	ldrb.w	r5, [r7, r8]
 8021c08:	9f02      	ldr	r7, [sp, #8]
 8021c0a:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8021c0e:	0e2f      	lsrs	r7, r5, #24
 8021c10:	2fff      	cmp	r7, #255	@ 0xff
 8021c12:	d045      	beq.n	8021ca0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8021c14:	fa5f f987 	uxtb.w	r9, r7
 8021c18:	b3ef      	cbz	r7, 8021c96 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8021c1a:	fa1f f889 	uxth.w	r8, r9
 8021c1e:	ea6f 0909 	mvn.w	r9, r9
 8021c22:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8021c26:	fa5f fb85 	uxtb.w	fp, r5
 8021c2a:	f814 a007 	ldrb.w	sl, [r4, r7]
 8021c2e:	fa5f f989 	uxtb.w	r9, r9
 8021c32:	fb1b fb08 	smulbb	fp, fp, r8
 8021c36:	fb0a ba09 	mla	sl, sl, r9, fp
 8021c3a:	fa1f fa8a 	uxth.w	sl, sl
 8021c3e:	f10a 0b01 	add.w	fp, sl, #1
 8021c42:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8021c46:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021c4a:	f804 a007 	strb.w	sl, [r4, r7]
 8021c4e:	4427      	add	r7, r4
 8021c50:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8021c54:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8021c58:	f897 b001 	ldrb.w	fp, [r7, #1]
 8021c5c:	fb1b fb09 	smulbb	fp, fp, r9
 8021c60:	fb0a ba08 	mla	sl, sl, r8, fp
 8021c64:	fa1f fa8a 	uxth.w	sl, sl
 8021c68:	f10a 0b01 	add.w	fp, sl, #1
 8021c6c:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8021c70:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021c74:	f887 a001 	strb.w	sl, [r7, #1]
 8021c78:	f897 a002 	ldrb.w	sl, [r7, #2]
 8021c7c:	fb1a f909 	smulbb	r9, sl, r9
 8021c80:	fb05 9508 	mla	r5, r5, r8, r9
 8021c84:	b2ad      	uxth	r5, r5
 8021c86:	f105 0901 	add.w	r9, r5, #1
 8021c8a:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8021c8e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021c92:	f887 9002 	strb.w	r9, [r7, #2]
 8021c96:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8021c98:	4470      	add	r0, lr
 8021c9a:	3601      	adds	r6, #1
 8021c9c:	442a      	add	r2, r5
 8021c9e:	e760      	b.n	8021b62 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8021ca0:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8021ca4:	ea4f 2815 	mov.w	r8, r5, lsr #8
 8021ca8:	55e5      	strb	r5, [r4, r7]
 8021caa:	4427      	add	r7, r4
 8021cac:	0c2d      	lsrs	r5, r5, #16
 8021cae:	f887 8001 	strb.w	r8, [r7, #1]
 8021cb2:	70bd      	strb	r5, [r7, #2]
 8021cb4:	e7ef      	b.n	8021c96 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8021cb6:	0a37      	lsrs	r7, r6, #8
 8021cb8:	f805 6c03 	strb.w	r6, [r5, #-3]
 8021cbc:	0c36      	lsrs	r6, r6, #16
 8021cbe:	f805 7c02 	strb.w	r7, [r5, #-2]
 8021cc2:	f805 6c01 	strb.w	r6, [r5, #-1]
 8021cc6:	e744      	b.n	8021b52 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8021cc8:	b005      	add	sp, #20
 8021cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021cce <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021cce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021cd2:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8021cd4:	9201      	str	r2, [sp, #4]
 8021cd6:	6870      	ldr	r0, [r6, #4]
 8021cd8:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8021cdc:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 8021ce0:	fa1f fe85 	uxth.w	lr, r5
 8021ce4:	43ed      	mvns	r5, r5
 8021ce6:	f8dc 8000 	ldr.w	r8, [ip]
 8021cea:	b2ed      	uxtb	r5, r5
 8021cec:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 8021cf0:	fb00 2404 	mla	r4, r0, r4, r2
 8021cf4:	6832      	ldr	r2, [r6, #0]
 8021cf6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021cfa:	4414      	add	r4, r2
 8021cfc:	2900      	cmp	r1, #0
 8021cfe:	dc03      	bgt.n	8021d08 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8021d00:	9a01      	ldr	r2, [sp, #4]
 8021d02:	2a00      	cmp	r2, #0
 8021d04:	f340 810d 	ble.w	8021f22 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8021d08:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8021d0a:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8021d0e:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8021d12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021d14:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8021d18:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8021d1c:	2b00      	cmp	r3, #0
 8021d1e:	dd0e      	ble.n	8021d3e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021d20:	1406      	asrs	r6, r0, #16
 8021d22:	d405      	bmi.n	8021d30 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8021d24:	4556      	cmp	r6, sl
 8021d26:	da03      	bge.n	8021d30 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8021d28:	1416      	asrs	r6, r2, #16
 8021d2a:	d401      	bmi.n	8021d30 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8021d2c:	454e      	cmp	r6, r9
 8021d2e:	db07      	blt.n	8021d40 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021d30:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8021d32:	3b01      	subs	r3, #1
 8021d34:	3403      	adds	r4, #3
 8021d36:	4430      	add	r0, r6
 8021d38:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8021d3a:	4432      	add	r2, r6
 8021d3c:	e7ee      	b.n	8021d1c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8021d3e:	d060      	beq.n	8021e02 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8021d40:	1e5e      	subs	r6, r3, #1
 8021d42:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8021d44:	fb07 0706 	mla	r7, r7, r6, r0
 8021d48:	143f      	asrs	r7, r7, #16
 8021d4a:	d451      	bmi.n	8021df0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8021d4c:	4557      	cmp	r7, sl
 8021d4e:	da4f      	bge.n	8021df0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8021d50:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8021d52:	fb07 2606 	mla	r6, r7, r6, r2
 8021d56:	1436      	asrs	r6, r6, #16
 8021d58:	d44a      	bmi.n	8021df0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8021d5a:	454e      	cmp	r6, r9
 8021d5c:	da48      	bge.n	8021df0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8021d5e:	1ce6      	adds	r6, r4, #3
 8021d60:	4699      	mov	r9, r3
 8021d62:	f1b9 0f00 	cmp.w	r9, #0
 8021d66:	f106 0603 	add.w	r6, r6, #3
 8021d6a:	dd45      	ble.n	8021df8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8021d6c:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8021d70:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8021d74:	1417      	asrs	r7, r2, #16
 8021d76:	f109 39ff 	add.w	r9, r9, #4294967295
 8021d7a:	fb0b a707 	mla	r7, fp, r7, sl
 8021d7e:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8021d82:	fb1b fb05 	smulbb	fp, fp, r5
 8021d86:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8021d8a:	eb08 0a07 	add.w	sl, r8, r7
 8021d8e:	f818 7007 	ldrb.w	r7, [r8, r7]
 8021d92:	fb07 b70e 	mla	r7, r7, lr, fp
 8021d96:	b2bf      	uxth	r7, r7
 8021d98:	f107 0b01 	add.w	fp, r7, #1
 8021d9c:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8021da0:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8021da4:	fb1b fb05 	smulbb	fp, fp, r5
 8021da8:	123f      	asrs	r7, r7, #8
 8021daa:	f806 7c06 	strb.w	r7, [r6, #-6]
 8021dae:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8021db2:	fb07 b70e 	mla	r7, r7, lr, fp
 8021db6:	b2bf      	uxth	r7, r7
 8021db8:	f107 0b01 	add.w	fp, r7, #1
 8021dbc:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8021dc0:	123f      	asrs	r7, r7, #8
 8021dc2:	f806 7c05 	strb.w	r7, [r6, #-5]
 8021dc6:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8021dca:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8021dce:	fb1a fa05 	smulbb	sl, sl, r5
 8021dd2:	fb07 a70e 	mla	r7, r7, lr, sl
 8021dd6:	b2bf      	uxth	r7, r7
 8021dd8:	f107 0a01 	add.w	sl, r7, #1
 8021ddc:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8021de0:	123f      	asrs	r7, r7, #8
 8021de2:	f806 7c04 	strb.w	r7, [r6, #-4]
 8021de6:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8021de8:	4438      	add	r0, r7
 8021dea:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8021dec:	443a      	add	r2, r7
 8021dee:	e7b8      	b.n	8021d62 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8021df0:	2700      	movs	r7, #0
 8021df2:	1bde      	subs	r6, r3, r7
 8021df4:	2e00      	cmp	r6, #0
 8021df6:	dc3f      	bgt.n	8021e78 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8021df8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021dfc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021e00:	441c      	add	r4, r3
 8021e02:	2900      	cmp	r1, #0
 8021e04:	f340 808d 	ble.w	8021f22 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8021e08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021e0c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021e0e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021e12:	3901      	subs	r1, #1
 8021e14:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021e18:	eef0 6a62 	vmov.f32	s13, s5
 8021e1c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021e20:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021e24:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021e28:	edcd 6a0d 	vstr	s13, [sp, #52]	@ 0x34
 8021e2c:	eef0 6a43 	vmov.f32	s13, s6
 8021e30:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021e34:	edcd 6a0e 	vstr	s13, [sp, #56]	@ 0x38
 8021e38:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021e3c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021e40:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021e44:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021e48:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021e4c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021e50:	ee12 2a90 	vmov	r2, s5
 8021e54:	eef0 2a47 	vmov.f32	s5, s14
 8021e58:	fb92 f3f3 	sdiv	r3, r2, r3
 8021e5c:	ee13 2a10 	vmov	r2, s6
 8021e60:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021e62:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021e64:	eeb0 3a67 	vmov.f32	s6, s15
 8021e68:	fb92 f3f3 	sdiv	r3, r2, r3
 8021e6c:	9a01      	ldr	r2, [sp, #4]
 8021e6e:	9310      	str	r3, [sp, #64]	@ 0x40
 8021e70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021e72:	bf08      	it	eq
 8021e74:	4613      	moveq	r3, r2
 8021e76:	e741      	b.n	8021cfc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8021e78:	ea5f 4920 	movs.w	r9, r0, asr #16
 8021e7c:	d44b      	bmi.n	8021f16 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8021e7e:	f8dc b008 	ldr.w	fp, [ip, #8]
 8021e82:	45cb      	cmp	fp, r9
 8021e84:	dd47      	ble.n	8021f16 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8021e86:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8021e8a:	d444      	bmi.n	8021f16 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8021e8c:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8021e90:	4556      	cmp	r6, sl
 8021e92:	dd40      	ble.n	8021f16 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8021e94:	fa0f f68b 	sxth.w	r6, fp
 8021e98:	fb0a 9906 	mla	r9, sl, r6, r9
 8021e9c:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8021ea0:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8021ea4:	f814 b006 	ldrb.w	fp, [r4, r6]
 8021ea8:	fb1b fb05 	smulbb	fp, fp, r5
 8021eac:	eb08 0a09 	add.w	sl, r8, r9
 8021eb0:	f818 9009 	ldrb.w	r9, [r8, r9]
 8021eb4:	fb09 b90e 	mla	r9, r9, lr, fp
 8021eb8:	fa1f f989 	uxth.w	r9, r9
 8021ebc:	f109 0b01 	add.w	fp, r9, #1
 8021ec0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8021ec4:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021ec8:	f804 9006 	strb.w	r9, [r4, r6]
 8021ecc:	4426      	add	r6, r4
 8021ece:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8021ed2:	f896 b001 	ldrb.w	fp, [r6, #1]
 8021ed6:	fb1b fb05 	smulbb	fp, fp, r5
 8021eda:	fb09 b90e 	mla	r9, r9, lr, fp
 8021ede:	fa1f f989 	uxth.w	r9, r9
 8021ee2:	f109 0b01 	add.w	fp, r9, #1
 8021ee6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8021eea:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021eee:	f886 9001 	strb.w	r9, [r6, #1]
 8021ef2:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8021ef6:	f896 a002 	ldrb.w	sl, [r6, #2]
 8021efa:	fb1a fa05 	smulbb	sl, sl, r5
 8021efe:	fb09 a90e 	mla	r9, r9, lr, sl
 8021f02:	fa1f f989 	uxth.w	r9, r9
 8021f06:	f109 0a01 	add.w	sl, r9, #1
 8021f0a:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8021f0e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021f12:	f886 9002 	strb.w	r9, [r6, #2]
 8021f16:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8021f18:	3701      	adds	r7, #1
 8021f1a:	4430      	add	r0, r6
 8021f1c:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8021f1e:	4432      	add	r2, r6
 8021f20:	e767      	b.n	8021df2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8021f22:	b003      	add	sp, #12
 8021f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021f28 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021f28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f2c:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8021f2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021f32:	9201      	str	r2, [sp, #4]
 8021f34:	6868      	ldr	r0, [r5, #4]
 8021f36:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8021f38:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 8021f3c:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	@ 0x3c
 8021f40:	fb00 2404 	mla	r4, r0, r4, r2
 8021f44:	682a      	ldr	r2, [r5, #0]
 8021f46:	f8d7 8000 	ldr.w	r8, [r7]
 8021f4a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021f4e:	4414      	add	r4, r2
 8021f50:	2900      	cmp	r1, #0
 8021f52:	dc03      	bgt.n	8021f5c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8021f54:	9a01      	ldr	r2, [sp, #4]
 8021f56:	2a00      	cmp	r2, #0
 8021f58:	f340 80af 	ble.w	80220ba <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8021f5c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8021f5e:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 8021f62:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8021f66:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021f68:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 8021f6c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8021f70:	2b00      	cmp	r3, #0
 8021f72:	dd0c      	ble.n	8021f8e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8021f74:	1405      	asrs	r5, r0, #16
 8021f76:	d405      	bmi.n	8021f84 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8021f78:	4555      	cmp	r5, sl
 8021f7a:	da03      	bge.n	8021f84 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8021f7c:	1415      	asrs	r5, r2, #16
 8021f7e:	d401      	bmi.n	8021f84 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8021f80:	454d      	cmp	r5, r9
 8021f82:	db05      	blt.n	8021f90 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8021f84:	4470      	add	r0, lr
 8021f86:	4462      	add	r2, ip
 8021f88:	3b01      	subs	r3, #1
 8021f8a:	3403      	adds	r4, #3
 8021f8c:	e7f0      	b.n	8021f70 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8021f8e:	d038      	beq.n	8022002 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8021f90:	1e5d      	subs	r5, r3, #1
 8021f92:	fb0e 0605 	mla	r6, lr, r5, r0
 8021f96:	1436      	asrs	r6, r6, #16
 8021f98:	d42a      	bmi.n	8021ff0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8021f9a:	4556      	cmp	r6, sl
 8021f9c:	da28      	bge.n	8021ff0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8021f9e:	fb0c 2505 	mla	r5, ip, r5, r2
 8021fa2:	142d      	asrs	r5, r5, #16
 8021fa4:	d424      	bmi.n	8021ff0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8021fa6:	454d      	cmp	r5, r9
 8021fa8:	da22      	bge.n	8021ff0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8021faa:	1ce6      	adds	r6, r4, #3
 8021fac:	4699      	mov	r9, r3
 8021fae:	f1b9 0f00 	cmp.w	r9, #0
 8021fb2:	f106 0603 	add.w	r6, r6, #3
 8021fb6:	dd1f      	ble.n	8021ff8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8021fb8:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 8021fbc:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8021fc0:	1415      	asrs	r5, r2, #16
 8021fc2:	4470      	add	r0, lr
 8021fc4:	4462      	add	r2, ip
 8021fc6:	f109 39ff 	add.w	r9, r9, #4294967295
 8021fca:	fb0b a505 	mla	r5, fp, r5, sl
 8021fce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021fd2:	eb08 0a05 	add.w	sl, r8, r5
 8021fd6:	f818 5005 	ldrb.w	r5, [r8, r5]
 8021fda:	f806 5c06 	strb.w	r5, [r6, #-6]
 8021fde:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8021fe2:	f806 5c05 	strb.w	r5, [r6, #-5]
 8021fe6:	f89a 5002 	ldrb.w	r5, [sl, #2]
 8021fea:	f806 5c04 	strb.w	r5, [r6, #-4]
 8021fee:	e7de      	b.n	8021fae <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8021ff0:	2600      	movs	r6, #0
 8021ff2:	1b9d      	subs	r5, r3, r6
 8021ff4:	2d00      	cmp	r5, #0
 8021ff6:	dc38      	bgt.n	802206a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8021ff8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021ffc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022000:	441c      	add	r4, r3
 8022002:	2900      	cmp	r1, #0
 8022004:	dd59      	ble.n	80220ba <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8022006:	ee30 0a04 	vadd.f32	s0, s0, s8
 802200a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802200c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022010:	3901      	subs	r1, #1
 8022012:	eeb0 6a62 	vmov.f32	s12, s5
 8022016:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802201a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802201e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022022:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 8022026:	eeb0 6a43 	vmov.f32	s12, s6
 802202a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802202e:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 8022032:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022036:	ee61 7a27 	vmul.f32	s15, s2, s15
 802203a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802203e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022042:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022046:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802204a:	ee12 2a90 	vmov	r2, s5
 802204e:	eef0 2a47 	vmov.f32	s5, s14
 8022052:	fb92 fef3 	sdiv	lr, r2, r3
 8022056:	ee13 2a10 	vmov	r2, s6
 802205a:	eeb0 3a67 	vmov.f32	s6, s15
 802205e:	fb92 fcf3 	sdiv	ip, r2, r3
 8022062:	9a01      	ldr	r2, [sp, #4]
 8022064:	bf08      	it	eq
 8022066:	4613      	moveq	r3, r2
 8022068:	e772      	b.n	8021f50 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 802206a:	ea5f 4920 	movs.w	r9, r0, asr #16
 802206e:	d420      	bmi.n	80220b2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8022070:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8022074:	45cb      	cmp	fp, r9
 8022076:	dd1c      	ble.n	80220b2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8022078:	ea5f 4a22 	movs.w	sl, r2, asr #16
 802207c:	d419      	bmi.n	80220b2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 802207e:	68fd      	ldr	r5, [r7, #12]
 8022080:	4555      	cmp	r5, sl
 8022082:	dd16      	ble.n	80220b2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8022084:	fa0f f58b 	sxth.w	r5, fp
 8022088:	fb0a 9505 	mla	r5, sl, r5, r9
 802208c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022090:	f818 9005 	ldrb.w	r9, [r8, r5]
 8022094:	eb08 0b05 	add.w	fp, r8, r5
 8022098:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 802209c:	f804 9005 	strb.w	r9, [r4, r5]
 80220a0:	4425      	add	r5, r4
 80220a2:	f89b 9001 	ldrb.w	r9, [fp, #1]
 80220a6:	f885 9001 	strb.w	r9, [r5, #1]
 80220aa:	f89b 9002 	ldrb.w	r9, [fp, #2]
 80220ae:	f885 9002 	strb.w	r9, [r5, #2]
 80220b2:	4470      	add	r0, lr
 80220b4:	4462      	add	r2, ip
 80220b6:	3601      	adds	r6, #1
 80220b8:	e79b      	b.n	8021ff2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 80220ba:	b003      	add	sp, #12
 80220bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080220c0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80220c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80220c4:	b085      	sub	sp, #20
 80220c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80220ca:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80220cc:	9202      	str	r2, [sp, #8]
 80220ce:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 80220d2:	6860      	ldr	r0, [r4, #4]
 80220d4:	9203      	str	r2, [sp, #12]
 80220d6:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 80220da:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 80220de:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 80220e2:	fb00 2505 	mla	r5, r0, r5, r2
 80220e6:	6822      	ldr	r2, [r4, #0]
 80220e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80220ec:	4415      	add	r5, r2
 80220ee:	f8dc 2000 	ldr.w	r2, [ip]
 80220f2:	9201      	str	r2, [sp, #4]
 80220f4:	2900      	cmp	r1, #0
 80220f6:	dc03      	bgt.n	8022100 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 80220f8:	9a02      	ldr	r2, [sp, #8]
 80220fa:	2a00      	cmp	r2, #0
 80220fc:	f340 8122 	ble.w	8022344 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8022100:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8022102:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8022106:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 802210a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802210c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8022110:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8022114:	2b00      	cmp	r3, #0
 8022116:	dd0d      	ble.n	8022134 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8022118:	1422      	asrs	r2, r4, #16
 802211a:	d405      	bmi.n	8022128 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802211c:	4542      	cmp	r2, r8
 802211e:	da03      	bge.n	8022128 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8022120:	1402      	asrs	r2, r0, #16
 8022122:	d401      	bmi.n	8022128 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8022124:	42ba      	cmp	r2, r7
 8022126:	db06      	blt.n	8022136 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8022128:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802212a:	4474      	add	r4, lr
 802212c:	3b01      	subs	r3, #1
 802212e:	3503      	adds	r5, #3
 8022130:	4410      	add	r0, r2
 8022132:	e7ef      	b.n	8022114 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8022134:	d072      	beq.n	802221c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8022136:	1e5a      	subs	r2, r3, #1
 8022138:	fb0e 4602 	mla	r6, lr, r2, r4
 802213c:	1436      	asrs	r6, r6, #16
 802213e:	d462      	bmi.n	8022206 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8022140:	4546      	cmp	r6, r8
 8022142:	da60      	bge.n	8022206 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8022144:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8022146:	fb06 0202 	mla	r2, r6, r2, r0
 802214a:	1412      	asrs	r2, r2, #16
 802214c:	d45b      	bmi.n	8022206 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 802214e:	42ba      	cmp	r2, r7
 8022150:	da59      	bge.n	8022206 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8022152:	1cef      	adds	r7, r5, #3
 8022154:	4699      	mov	r9, r3
 8022156:	f1b9 0f00 	cmp.w	r9, #0
 802215a:	dd5a      	ble.n	8022212 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802215c:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8022160:	1426      	asrs	r6, r4, #16
 8022162:	1402      	asrs	r2, r0, #16
 8022164:	fb08 6202 	mla	r2, r8, r2, r6
 8022168:	9e01      	ldr	r6, [sp, #4]
 802216a:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 802216e:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8022172:	d041      	beq.n	80221f8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8022174:	9a03      	ldr	r2, [sp, #12]
 8022176:	fa5f fb86 	uxtb.w	fp, r6
 802217a:	fb02 f808 	mul.w	r8, r2, r8
 802217e:	f108 0201 	add.w	r2, r8, #1
 8022182:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8022186:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 802218a:	1212      	asrs	r2, r2, #8
 802218c:	fa1f fa82 	uxth.w	sl, r2
 8022190:	43d2      	mvns	r2, r2
 8022192:	fb1b fb0a 	smulbb	fp, fp, sl
 8022196:	b2d2      	uxtb	r2, r2
 8022198:	fb08 b802 	mla	r8, r8, r2, fp
 802219c:	fa1f f888 	uxth.w	r8, r8
 80221a0:	f108 0b01 	add.w	fp, r8, #1
 80221a4:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80221a8:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 80221ac:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80221b0:	fb1b fb0a 	smulbb	fp, fp, sl
 80221b4:	ea4f 2828 	mov.w	r8, r8, asr #8
 80221b8:	fb16 fa0a 	smulbb	sl, r6, sl
 80221bc:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 80221c0:	f807 8c03 	strb.w	r8, [r7, #-3]
 80221c4:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 80221c8:	fb06 aa02 	mla	sl, r6, r2, sl
 80221cc:	fb08 b802 	mla	r8, r8, r2, fp
 80221d0:	fa1f fa8a 	uxth.w	sl, sl
 80221d4:	fa1f f888 	uxth.w	r8, r8
 80221d8:	f10a 0601 	add.w	r6, sl, #1
 80221dc:	f108 0b01 	add.w	fp, r8, #1
 80221e0:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 80221e4:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80221e8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80221ec:	ea4f 2828 	mov.w	r8, r8, asr #8
 80221f0:	f807 ac01 	strb.w	sl, [r7, #-1]
 80221f4:	f807 8c02 	strb.w	r8, [r7, #-2]
 80221f8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80221fa:	4474      	add	r4, lr
 80221fc:	3703      	adds	r7, #3
 80221fe:	f109 39ff 	add.w	r9, r9, #4294967295
 8022202:	4410      	add	r0, r2
 8022204:	e7a7      	b.n	8022156 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8022206:	f04f 0800 	mov.w	r8, #0
 802220a:	eba3 0208 	sub.w	r2, r3, r8
 802220e:	2a00      	cmp	r2, #0
 8022210:	dc3b      	bgt.n	802228a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8022212:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022216:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802221a:	441d      	add	r5, r3
 802221c:	2900      	cmp	r1, #0
 802221e:	f340 8091 	ble.w	8022344 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8022222:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022226:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022228:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802222c:	3901      	subs	r1, #1
 802222e:	eeb0 6a62 	vmov.f32	s12, s5
 8022232:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022236:	ee31 1a05 	vadd.f32	s2, s2, s10
 802223a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802223e:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8022242:	eeb0 6a43 	vmov.f32	s12, s6
 8022246:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802224a:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 802224e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022252:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022256:	ee77 2a62 	vsub.f32	s5, s14, s5
 802225a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802225e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022262:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022266:	ee12 2a90 	vmov	r2, s5
 802226a:	eef0 2a47 	vmov.f32	s5, s14
 802226e:	fb92 fef3 	sdiv	lr, r2, r3
 8022272:	ee13 2a10 	vmov	r2, s6
 8022276:	eeb0 3a67 	vmov.f32	s6, s15
 802227a:	fb92 f3f3 	sdiv	r3, r2, r3
 802227e:	9a02      	ldr	r2, [sp, #8]
 8022280:	9312      	str	r3, [sp, #72]	@ 0x48
 8022282:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022284:	bf08      	it	eq
 8022286:	4613      	moveq	r3, r2
 8022288:	e734      	b.n	80220f4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 802228a:	1427      	asrs	r7, r4, #16
 802228c:	d454      	bmi.n	8022338 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 802228e:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8022292:	42be      	cmp	r6, r7
 8022294:	dd50      	ble.n	8022338 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8022296:	ea5f 4920 	movs.w	r9, r0, asr #16
 802229a:	d44d      	bmi.n	8022338 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 802229c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80222a0:	454a      	cmp	r2, r9
 80222a2:	dd49      	ble.n	8022338 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80222a4:	b236      	sxth	r6, r6
 80222a6:	9a01      	ldr	r2, [sp, #4]
 80222a8:	fb09 7606 	mla	r6, r9, r6, r7
 80222ac:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 80222b0:	0e3a      	lsrs	r2, r7, #24
 80222b2:	d041      	beq.n	8022338 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80222b4:	9e03      	ldr	r6, [sp, #12]
 80222b6:	fa5f fb87 	uxtb.w	fp, r7
 80222ba:	4372      	muls	r2, r6
 80222bc:	1c56      	adds	r6, r2, #1
 80222be:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80222c2:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 80222c6:	1212      	asrs	r2, r2, #8
 80222c8:	f815 9006 	ldrb.w	r9, [r5, r6]
 80222cc:	fa1f fa82 	uxth.w	sl, r2
 80222d0:	43d2      	mvns	r2, r2
 80222d2:	fb1b fb0a 	smulbb	fp, fp, sl
 80222d6:	b2d2      	uxtb	r2, r2
 80222d8:	fb09 b902 	mla	r9, r9, r2, fp
 80222dc:	fa1f f989 	uxth.w	r9, r9
 80222e0:	f109 0b01 	add.w	fp, r9, #1
 80222e4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80222e8:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80222ec:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80222f0:	fb1b fb0a 	smulbb	fp, fp, sl
 80222f4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80222f8:	fb17 fa0a 	smulbb	sl, r7, sl
 80222fc:	f805 9006 	strb.w	r9, [r5, r6]
 8022300:	442e      	add	r6, r5
 8022302:	78b7      	ldrb	r7, [r6, #2]
 8022304:	f896 9001 	ldrb.w	r9, [r6, #1]
 8022308:	fb07 aa02 	mla	sl, r7, r2, sl
 802230c:	fb09 b902 	mla	r9, r9, r2, fp
 8022310:	fa1f fa8a 	uxth.w	sl, sl
 8022314:	fa1f f989 	uxth.w	r9, r9
 8022318:	f10a 0701 	add.w	r7, sl, #1
 802231c:	f109 0b01 	add.w	fp, r9, #1
 8022320:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022324:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8022328:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802232c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022330:	f886 a002 	strb.w	sl, [r6, #2]
 8022334:	f886 9001 	strb.w	r9, [r6, #1]
 8022338:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802233a:	4474      	add	r4, lr
 802233c:	f108 0801 	add.w	r8, r8, #1
 8022340:	4410      	add	r0, r2
 8022342:	e762      	b.n	802220a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8022344:	b005      	add	sp, #20
 8022346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802234a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802234a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802234e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8022350:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8022354:	9201      	str	r2, [sp, #4]
 8022356:	6860      	ldr	r0, [r4, #4]
 8022358:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 802235c:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	@ 0x48
 8022360:	fb00 2505 	mla	r5, r0, r5, r2
 8022364:	6822      	ldr	r2, [r4, #0]
 8022366:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802236a:	4415      	add	r5, r2
 802236c:	f8dc 2000 	ldr.w	r2, [ip]
 8022370:	9200      	str	r2, [sp, #0]
 8022372:	2900      	cmp	r1, #0
 8022374:	dc03      	bgt.n	802237e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8022376:	9a01      	ldr	r2, [sp, #4]
 8022378:	2a00      	cmp	r2, #0
 802237a:	f340 812b 	ble.w	80225d4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 802237e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8022380:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8022384:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8022388:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802238a:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 802238e:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8022392:	2b00      	cmp	r3, #0
 8022394:	dd0e      	ble.n	80223b4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8022396:	1422      	asrs	r2, r4, #16
 8022398:	d405      	bmi.n	80223a6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 802239a:	4572      	cmp	r2, lr
 802239c:	da03      	bge.n	80223a6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 802239e:	1402      	asrs	r2, r0, #16
 80223a0:	d401      	bmi.n	80223a6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80223a2:	42ba      	cmp	r2, r7
 80223a4:	db07      	blt.n	80223b6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80223a6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80223a8:	3b01      	subs	r3, #1
 80223aa:	3503      	adds	r5, #3
 80223ac:	4414      	add	r4, r2
 80223ae:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80223b0:	4410      	add	r0, r2
 80223b2:	e7ee      	b.n	8022392 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80223b4:	d06f      	beq.n	8022496 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 80223b6:	1e5a      	subs	r2, r3, #1
 80223b8:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 80223ba:	fb06 4602 	mla	r6, r6, r2, r4
 80223be:	1436      	asrs	r6, r6, #16
 80223c0:	d45e      	bmi.n	8022480 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80223c2:	4576      	cmp	r6, lr
 80223c4:	da5c      	bge.n	8022480 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80223c6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80223c8:	fb06 0202 	mla	r2, r6, r2, r0
 80223cc:	1412      	asrs	r2, r2, #16
 80223ce:	d457      	bmi.n	8022480 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80223d0:	42ba      	cmp	r2, r7
 80223d2:	da55      	bge.n	8022480 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80223d4:	1cee      	adds	r6, r5, #3
 80223d6:	469a      	mov	sl, r3
 80223d8:	f1ba 0f00 	cmp.w	sl, #0
 80223dc:	dd56      	ble.n	802248c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80223de:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80223e2:	1427      	asrs	r7, r4, #16
 80223e4:	1402      	asrs	r2, r0, #16
 80223e6:	fb0e 7202 	mla	r2, lr, r2, r7
 80223ea:	9f00      	ldr	r7, [sp, #0]
 80223ec:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 80223f0:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 80223f4:	d03c      	beq.n	8022470 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80223f6:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80223fa:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80223fe:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8022402:	fa5f f28e 	uxtb.w	r2, lr
 8022406:	b2ff      	uxtb	r7, r7
 8022408:	f000 80dd 	beq.w	80225c6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 802240c:	fa1f f882 	uxth.w	r8, r2
 8022410:	43d2      	mvns	r2, r2
 8022412:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 8022416:	fb17 f708 	smulbb	r7, r7, r8
 802241a:	b2d2      	uxtb	r2, r2
 802241c:	fb19 f908 	smulbb	r9, r9, r8
 8022420:	fb0e 7702 	mla	r7, lr, r2, r7
 8022424:	fb1b f808 	smulbb	r8, fp, r8
 8022428:	b2bf      	uxth	r7, r7
 802242a:	f107 0e01 	add.w	lr, r7, #1
 802242e:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8022432:	123f      	asrs	r7, r7, #8
 8022434:	f806 7c03 	strb.w	r7, [r6, #-3]
 8022438:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 802243c:	fb07 9902 	mla	r9, r7, r2, r9
 8022440:	fa1f f989 	uxth.w	r9, r9
 8022444:	f109 0701 	add.w	r7, r9, #1
 8022448:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 802244c:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8022450:	fb07 8802 	mla	r8, r7, r2, r8
 8022454:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022458:	fa1f f888 	uxth.w	r8, r8
 802245c:	f806 9c02 	strb.w	r9, [r6, #-2]
 8022460:	f108 0201 	add.w	r2, r8, #1
 8022464:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8022468:	ea4f 2828 	mov.w	r8, r8, asr #8
 802246c:	f806 8c01 	strb.w	r8, [r6, #-1]
 8022470:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8022472:	3603      	adds	r6, #3
 8022474:	f10a 3aff 	add.w	sl, sl, #4294967295
 8022478:	4414      	add	r4, r2
 802247a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802247c:	4410      	add	r0, r2
 802247e:	e7ab      	b.n	80223d8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022480:	f04f 0e00 	mov.w	lr, #0
 8022484:	eba3 020e 	sub.w	r2, r3, lr
 8022488:	2a00      	cmp	r2, #0
 802248a:	dc3d      	bgt.n	8022508 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802248c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022490:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022494:	441d      	add	r5, r3
 8022496:	2900      	cmp	r1, #0
 8022498:	f340 809c 	ble.w	80225d4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 802249c:	ee30 0a04 	vadd.f32	s0, s0, s8
 80224a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80224a2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80224a6:	3901      	subs	r1, #1
 80224a8:	eeb0 6a62 	vmov.f32	s12, s5
 80224ac:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80224b0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80224b4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80224b8:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 80224bc:	eeb0 6a43 	vmov.f32	s12, s6
 80224c0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80224c4:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 80224c8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80224cc:	ee61 7a27 	vmul.f32	s15, s2, s15
 80224d0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80224d4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80224d8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80224dc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80224e0:	ee12 2a90 	vmov	r2, s5
 80224e4:	eef0 2a47 	vmov.f32	s5, s14
 80224e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80224ec:	ee13 2a10 	vmov	r2, s6
 80224f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80224f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80224f4:	eeb0 3a67 	vmov.f32	s6, s15
 80224f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80224fc:	9a01      	ldr	r2, [sp, #4]
 80224fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8022500:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022502:	bf08      	it	eq
 8022504:	4613      	moveq	r3, r2
 8022506:	e734      	b.n	8022372 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8022508:	1427      	asrs	r7, r4, #16
 802250a:	d44d      	bmi.n	80225a8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 802250c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8022510:	42be      	cmp	r6, r7
 8022512:	dd49      	ble.n	80225a8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8022514:	ea5f 4820 	movs.w	r8, r0, asr #16
 8022518:	d446      	bmi.n	80225a8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 802251a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 802251e:	4542      	cmp	r2, r8
 8022520:	dd42      	ble.n	80225a8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8022522:	b236      	sxth	r6, r6
 8022524:	9a00      	ldr	r2, [sp, #0]
 8022526:	fb08 7606 	mla	r6, r8, r6, r7
 802252a:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 802252e:	0e3a      	lsrs	r2, r7, #24
 8022530:	d03a      	beq.n	80225a8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8022532:	2aff      	cmp	r2, #255	@ 0xff
 8022534:	b2d6      	uxtb	r6, r2
 8022536:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 802253a:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 802253e:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8022542:	b2ff      	uxtb	r7, r7
 8022544:	d037      	beq.n	80225b6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8022546:	fa1f f986 	uxth.w	r9, r6
 802254a:	4472      	add	r2, lr
 802254c:	43f6      	mvns	r6, r6
 802254e:	f815 8002 	ldrb.w	r8, [r5, r2]
 8022552:	fb17 f709 	smulbb	r7, r7, r9
 8022556:	fb1a fa09 	smulbb	sl, sl, r9
 802255a:	b2f6      	uxtb	r6, r6
 802255c:	fb1b f909 	smulbb	r9, fp, r9
 8022560:	fb08 7706 	mla	r7, r8, r6, r7
 8022564:	b2bf      	uxth	r7, r7
 8022566:	f107 0801 	add.w	r8, r7, #1
 802256a:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 802256e:	123f      	asrs	r7, r7, #8
 8022570:	54af      	strb	r7, [r5, r2]
 8022572:	442a      	add	r2, r5
 8022574:	7857      	ldrb	r7, [r2, #1]
 8022576:	fb07 aa06 	mla	sl, r7, r6, sl
 802257a:	fa1f fa8a 	uxth.w	sl, sl
 802257e:	f10a 0701 	add.w	r7, sl, #1
 8022582:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022586:	7897      	ldrb	r7, [r2, #2]
 8022588:	fb07 9906 	mla	r9, r7, r6, r9
 802258c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022590:	fa1f f989 	uxth.w	r9, r9
 8022594:	f882 a001 	strb.w	sl, [r2, #1]
 8022598:	f109 0601 	add.w	r6, r9, #1
 802259c:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 80225a0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80225a4:	f882 9002 	strb.w	r9, [r2, #2]
 80225a8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80225aa:	f10e 0e01 	add.w	lr, lr, #1
 80225ae:	4414      	add	r4, r2
 80225b0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80225b2:	4410      	add	r0, r2
 80225b4:	e766      	b.n	8022484 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80225b6:	4472      	add	r2, lr
 80225b8:	54af      	strb	r7, [r5, r2]
 80225ba:	442a      	add	r2, r5
 80225bc:	f882 a001 	strb.w	sl, [r2, #1]
 80225c0:	f882 b002 	strb.w	fp, [r2, #2]
 80225c4:	e7f0      	b.n	80225a8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80225c6:	f806 7c03 	strb.w	r7, [r6, #-3]
 80225ca:	f806 9c02 	strb.w	r9, [r6, #-2]
 80225ce:	f806 bc01 	strb.w	fp, [r6, #-1]
 80225d2:	e74d      	b.n	8022470 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80225d4:	b003      	add	sp, #12
 80225d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080225dc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80225dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80225e0:	b087      	sub	sp, #28
 80225e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80225e6:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80225e8:	9204      	str	r2, [sp, #16]
 80225ea:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 80225ee:	6860      	ldr	r0, [r4, #4]
 80225f0:	9205      	str	r2, [sp, #20]
 80225f2:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 80225f6:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 80225fa:	9101      	str	r1, [sp, #4]
 80225fc:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 8022600:	fb00 2505 	mla	r5, r0, r5, r2
 8022604:	6822      	ldr	r2, [r4, #0]
 8022606:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802260a:	4415      	add	r5, r2
 802260c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8022610:	3201      	adds	r2, #1
 8022612:	f022 0201 	bic.w	r2, r2, #1
 8022616:	9202      	str	r2, [sp, #8]
 8022618:	f8dc 2000 	ldr.w	r2, [ip]
 802261c:	9203      	str	r2, [sp, #12]
 802261e:	9a01      	ldr	r2, [sp, #4]
 8022620:	2a00      	cmp	r2, #0
 8022622:	dc03      	bgt.n	802262c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8022624:	9a04      	ldr	r2, [sp, #16]
 8022626:	2a00      	cmp	r2, #0
 8022628:	f340 8135 	ble.w	8022896 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 802262c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802262e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8022632:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8022636:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8022638:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 802263c:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8022640:	2b00      	cmp	r3, #0
 8022642:	dd0d      	ble.n	8022660 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022644:	1422      	asrs	r2, r4, #16
 8022646:	d405      	bmi.n	8022654 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8022648:	4542      	cmp	r2, r8
 802264a:	da03      	bge.n	8022654 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802264c:	1402      	asrs	r2, r0, #16
 802264e:	d401      	bmi.n	8022654 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8022650:	42ba      	cmp	r2, r7
 8022652:	db06      	blt.n	8022662 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8022654:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8022656:	4474      	add	r4, lr
 8022658:	3b01      	subs	r3, #1
 802265a:	3503      	adds	r5, #3
 802265c:	4410      	add	r0, r2
 802265e:	e7ef      	b.n	8022640 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8022660:	d077      	beq.n	8022752 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8022662:	1e5a      	subs	r2, r3, #1
 8022664:	fb0e 4602 	mla	r6, lr, r2, r4
 8022668:	1436      	asrs	r6, r6, #16
 802266a:	d469      	bmi.n	8022740 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802266c:	4546      	cmp	r6, r8
 802266e:	da67      	bge.n	8022740 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022670:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8022672:	fb06 0202 	mla	r2, r6, r2, r0
 8022676:	1412      	asrs	r2, r2, #16
 8022678:	d462      	bmi.n	8022740 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802267a:	42ba      	cmp	r2, r7
 802267c:	da60      	bge.n	8022740 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802267e:	1cee      	adds	r6, r5, #3
 8022680:	4699      	mov	r9, r3
 8022682:	f1b9 0f00 	cmp.w	r9, #0
 8022686:	dd5f      	ble.n	8022748 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8022688:	1422      	asrs	r2, r4, #16
 802268a:	9902      	ldr	r1, [sp, #8]
 802268c:	1407      	asrs	r7, r0, #16
 802268e:	fb01 2707 	mla	r7, r1, r7, r2
 8022692:	9903      	ldr	r1, [sp, #12]
 8022694:	087a      	lsrs	r2, r7, #1
 8022696:	5c8a      	ldrb	r2, [r1, r2]
 8022698:	07f9      	lsls	r1, r7, #31
 802269a:	bf54      	ite	pl
 802269c:	f002 020f 	andpl.w	r2, r2, #15
 80226a0:	1112      	asrmi	r2, r2, #4
 80226a2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80226a6:	b2d2      	uxtb	r2, r2
 80226a8:	2a00      	cmp	r2, #0
 80226aa:	d042      	beq.n	8022732 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80226ac:	497b      	ldr	r1, [pc, #492]	@ (802289c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 80226ae:	680f      	ldr	r7, [r1, #0]
 80226b0:	9905      	ldr	r1, [sp, #20]
 80226b2:	fa5f fb87 	uxtb.w	fp, r7
 80226b6:	434a      	muls	r2, r1
 80226b8:	f102 0801 	add.w	r8, r2, #1
 80226bc:	eb08 2222 	add.w	r2, r8, r2, asr #8
 80226c0:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 80226c4:	1212      	asrs	r2, r2, #8
 80226c6:	fa1f fa82 	uxth.w	sl, r2
 80226ca:	43d2      	mvns	r2, r2
 80226cc:	fb1b fb0a 	smulbb	fp, fp, sl
 80226d0:	b2d2      	uxtb	r2, r2
 80226d2:	fb08 b802 	mla	r8, r8, r2, fp
 80226d6:	fa1f f888 	uxth.w	r8, r8
 80226da:	f108 0b01 	add.w	fp, r8, #1
 80226de:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80226e2:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80226e6:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80226ea:	fb1b fb0a 	smulbb	fp, fp, sl
 80226ee:	ea4f 2828 	mov.w	r8, r8, asr #8
 80226f2:	fb17 fa0a 	smulbb	sl, r7, sl
 80226f6:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 80226fa:	f806 8c03 	strb.w	r8, [r6, #-3]
 80226fe:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 8022702:	fb07 aa02 	mla	sl, r7, r2, sl
 8022706:	fb08 b802 	mla	r8, r8, r2, fp
 802270a:	fa1f fa8a 	uxth.w	sl, sl
 802270e:	fa1f f888 	uxth.w	r8, r8
 8022712:	f10a 0701 	add.w	r7, sl, #1
 8022716:	f108 0b01 	add.w	fp, r8, #1
 802271a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802271e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8022722:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022726:	ea4f 2828 	mov.w	r8, r8, asr #8
 802272a:	f806 ac01 	strb.w	sl, [r6, #-1]
 802272e:	f806 8c02 	strb.w	r8, [r6, #-2]
 8022732:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8022734:	4474      	add	r4, lr
 8022736:	3603      	adds	r6, #3
 8022738:	f109 39ff 	add.w	r9, r9, #4294967295
 802273c:	4410      	add	r0, r2
 802273e:	e7a0      	b.n	8022682 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8022740:	2700      	movs	r7, #0
 8022742:	1bda      	subs	r2, r3, r7
 8022744:	2a00      	cmp	r2, #0
 8022746:	dc3e      	bgt.n	80227c6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8022748:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802274c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022750:	441d      	add	r5, r3
 8022752:	9b01      	ldr	r3, [sp, #4]
 8022754:	2b00      	cmp	r3, #0
 8022756:	f340 809e 	ble.w	8022896 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 802275a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802275e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022760:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022764:	eeb0 6a62 	vmov.f32	s12, s5
 8022768:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802276c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022770:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022774:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 8022778:	eeb0 6a43 	vmov.f32	s12, s6
 802277c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022780:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 8022784:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022788:	ee61 7a27 	vmul.f32	s15, s2, s15
 802278c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022790:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022794:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022798:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802279c:	ee12 2a90 	vmov	r2, s5
 80227a0:	eef0 2a47 	vmov.f32	s5, s14
 80227a4:	fb92 fef3 	sdiv	lr, r2, r3
 80227a8:	ee13 2a10 	vmov	r2, s6
 80227ac:	eeb0 3a67 	vmov.f32	s6, s15
 80227b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80227b4:	9314      	str	r3, [sp, #80]	@ 0x50
 80227b6:	9b01      	ldr	r3, [sp, #4]
 80227b8:	9a04      	ldr	r2, [sp, #16]
 80227ba:	3b01      	subs	r3, #1
 80227bc:	9301      	str	r3, [sp, #4]
 80227be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80227c0:	bf08      	it	eq
 80227c2:	4613      	moveq	r3, r2
 80227c4:	e72b      	b.n	802261e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80227c6:	1426      	asrs	r6, r4, #16
 80227c8:	d460      	bmi.n	802288c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80227ca:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80227ce:	42b2      	cmp	r2, r6
 80227d0:	dd5c      	ble.n	802288c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80227d2:	ea5f 4820 	movs.w	r8, r0, asr #16
 80227d6:	d459      	bmi.n	802288c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80227d8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80227dc:	4542      	cmp	r2, r8
 80227de:	dd55      	ble.n	802288c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80227e0:	9a02      	ldr	r2, [sp, #8]
 80227e2:	9903      	ldr	r1, [sp, #12]
 80227e4:	fb08 6602 	mla	r6, r8, r2, r6
 80227e8:	0872      	lsrs	r2, r6, #1
 80227ea:	07f6      	lsls	r6, r6, #31
 80227ec:	5c8a      	ldrb	r2, [r1, r2]
 80227ee:	bf54      	ite	pl
 80227f0:	f002 020f 	andpl.w	r2, r2, #15
 80227f4:	1112      	asrmi	r2, r2, #4
 80227f6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80227fa:	b2d2      	uxtb	r2, r2
 80227fc:	2a00      	cmp	r2, #0
 80227fe:	d045      	beq.n	802288c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8022800:	4926      	ldr	r1, [pc, #152]	@ (802289c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8022802:	f8d1 8000 	ldr.w	r8, [r1]
 8022806:	9905      	ldr	r1, [sp, #20]
 8022808:	fa5f fb88 	uxtb.w	fp, r8
 802280c:	434a      	muls	r2, r1
 802280e:	1c56      	adds	r6, r2, #1
 8022810:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8022814:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8022818:	1212      	asrs	r2, r2, #8
 802281a:	f815 9006 	ldrb.w	r9, [r5, r6]
 802281e:	fa1f fa82 	uxth.w	sl, r2
 8022822:	43d2      	mvns	r2, r2
 8022824:	fb1b fb0a 	smulbb	fp, fp, sl
 8022828:	b2d2      	uxtb	r2, r2
 802282a:	fb09 b902 	mla	r9, r9, r2, fp
 802282e:	fa1f f989 	uxth.w	r9, r9
 8022832:	f109 0b01 	add.w	fp, r9, #1
 8022836:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 802283a:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 802283e:	f3c8 4807 	ubfx	r8, r8, #16, #8
 8022842:	fb1b fb0a 	smulbb	fp, fp, sl
 8022846:	ea4f 2929 	mov.w	r9, r9, asr #8
 802284a:	fb18 fa0a 	smulbb	sl, r8, sl
 802284e:	f805 9006 	strb.w	r9, [r5, r6]
 8022852:	442e      	add	r6, r5
 8022854:	f896 8002 	ldrb.w	r8, [r6, #2]
 8022858:	f896 9001 	ldrb.w	r9, [r6, #1]
 802285c:	fb08 aa02 	mla	sl, r8, r2, sl
 8022860:	fb09 b902 	mla	r9, r9, r2, fp
 8022864:	fa1f fa8a 	uxth.w	sl, sl
 8022868:	fa1f f989 	uxth.w	r9, r9
 802286c:	f10a 0801 	add.w	r8, sl, #1
 8022870:	f109 0b01 	add.w	fp, r9, #1
 8022874:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 8022878:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 802287c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022880:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022884:	f886 a002 	strb.w	sl, [r6, #2]
 8022888:	f886 9001 	strb.w	r9, [r6, #1]
 802288c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802288e:	4474      	add	r4, lr
 8022890:	3701      	adds	r7, #1
 8022892:	4410      	add	r0, r2
 8022894:	e755      	b.n	8022742 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 8022896:	b007      	add	sp, #28
 8022898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802289c:	2403423c 	.word	0x2403423c

080228a0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80228a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80228a4:	b085      	sub	sp, #20
 80228a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80228aa:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80228ac:	9203      	str	r2, [sp, #12]
 80228ae:	6860      	ldr	r0, [r4, #4]
 80228b0:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 80228b4:	9100      	str	r1, [sp, #0]
 80228b6:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	@ 0x50
 80228ba:	fb00 2606 	mla	r6, r0, r6, r2
 80228be:	6822      	ldr	r2, [r4, #0]
 80228c0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80228c4:	4416      	add	r6, r2
 80228c6:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80228ca:	3201      	adds	r2, #1
 80228cc:	f022 0201 	bic.w	r2, r2, #1
 80228d0:	9201      	str	r2, [sp, #4]
 80228d2:	f8dc 2000 	ldr.w	r2, [ip]
 80228d6:	9202      	str	r2, [sp, #8]
 80228d8:	9a00      	ldr	r2, [sp, #0]
 80228da:	2a00      	cmp	r2, #0
 80228dc:	dc03      	bgt.n	80228e6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 80228de:	9a03      	ldr	r2, [sp, #12]
 80228e0:	2a00      	cmp	r2, #0
 80228e2:	f340 8140 	ble.w	8022b66 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 80228e6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80228e8:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80228ec:	f502 4500 	add.w	r5, r2, #32768	@ 0x8000
 80228f0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80228f2:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80228f6:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 80228fa:	2b00      	cmp	r3, #0
 80228fc:	dd0e      	ble.n	802291c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80228fe:	142a      	asrs	r2, r5, #16
 8022900:	d405      	bmi.n	802290e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8022902:	4572      	cmp	r2, lr
 8022904:	da03      	bge.n	802290e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8022906:	1422      	asrs	r2, r4, #16
 8022908:	d401      	bmi.n	802290e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802290a:	42ba      	cmp	r2, r7
 802290c:	db07      	blt.n	802291e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 802290e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8022910:	3b01      	subs	r3, #1
 8022912:	3603      	adds	r6, #3
 8022914:	4415      	add	r5, r2
 8022916:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8022918:	4414      	add	r4, r2
 802291a:	e7ee      	b.n	80228fa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 802291c:	d072      	beq.n	8022a04 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802291e:	1e5a      	subs	r2, r3, #1
 8022920:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8022922:	fb00 5002 	mla	r0, r0, r2, r5
 8022926:	1400      	asrs	r0, r0, #16
 8022928:	d463      	bmi.n	80229f2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802292a:	4570      	cmp	r0, lr
 802292c:	da61      	bge.n	80229f2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802292e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8022930:	fb00 4202 	mla	r2, r0, r2, r4
 8022934:	1412      	asrs	r2, r2, #16
 8022936:	d45c      	bmi.n	80229f2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8022938:	42ba      	cmp	r2, r7
 802293a:	da5a      	bge.n	80229f2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802293c:	1cf0      	adds	r0, r6, #3
 802293e:	469a      	mov	sl, r3
 8022940:	f1ba 0f00 	cmp.w	sl, #0
 8022944:	dd59      	ble.n	80229fa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8022946:	142a      	asrs	r2, r5, #16
 8022948:	9901      	ldr	r1, [sp, #4]
 802294a:	1427      	asrs	r7, r4, #16
 802294c:	fb01 2707 	mla	r7, r1, r7, r2
 8022950:	9902      	ldr	r1, [sp, #8]
 8022952:	087a      	lsrs	r2, r7, #1
 8022954:	5c8a      	ldrb	r2, [r1, r2]
 8022956:	07f9      	lsls	r1, r7, #31
 8022958:	bf54      	ite	pl
 802295a:	f002 020f 	andpl.w	r2, r2, #15
 802295e:	1112      	asrmi	r2, r2, #4
 8022960:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022964:	b2d2      	uxtb	r2, r2
 8022966:	2a00      	cmp	r2, #0
 8022968:	d03b      	beq.n	80229e2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 802296a:	4980      	ldr	r1, [pc, #512]	@ (8022b6c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 802296c:	2aff      	cmp	r2, #255	@ 0xff
 802296e:	680f      	ldr	r7, [r1, #0]
 8022970:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8022974:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8022978:	b2ff      	uxtb	r7, r7
 802297a:	f000 80ed 	beq.w	8022b58 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 802297e:	fa1f f882 	uxth.w	r8, r2
 8022982:	43d2      	mvns	r2, r2
 8022984:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 8022988:	fb17 f708 	smulbb	r7, r7, r8
 802298c:	b2d2      	uxtb	r2, r2
 802298e:	fb19 f908 	smulbb	r9, r9, r8
 8022992:	fb0e 7702 	mla	r7, lr, r2, r7
 8022996:	fb1b f808 	smulbb	r8, fp, r8
 802299a:	b2bf      	uxth	r7, r7
 802299c:	f107 0e01 	add.w	lr, r7, #1
 80229a0:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 80229a4:	123f      	asrs	r7, r7, #8
 80229a6:	f800 7c03 	strb.w	r7, [r0, #-3]
 80229aa:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 80229ae:	fb07 9902 	mla	r9, r7, r2, r9
 80229b2:	fa1f f989 	uxth.w	r9, r9
 80229b6:	f109 0701 	add.w	r7, r9, #1
 80229ba:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80229be:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 80229c2:	fb07 8802 	mla	r8, r7, r2, r8
 80229c6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80229ca:	fa1f f888 	uxth.w	r8, r8
 80229ce:	f800 9c02 	strb.w	r9, [r0, #-2]
 80229d2:	f108 0201 	add.w	r2, r8, #1
 80229d6:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80229da:	ea4f 2828 	mov.w	r8, r8, asr #8
 80229de:	f800 8c01 	strb.w	r8, [r0, #-1]
 80229e2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80229e4:	3003      	adds	r0, #3
 80229e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80229ea:	4415      	add	r5, r2
 80229ec:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80229ee:	4414      	add	r4, r2
 80229f0:	e7a6      	b.n	8022940 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80229f2:	2700      	movs	r7, #0
 80229f4:	1bda      	subs	r2, r3, r7
 80229f6:	2a00      	cmp	r2, #0
 80229f8:	dc40      	bgt.n	8022a7c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 80229fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80229fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022a02:	441e      	add	r6, r3
 8022a04:	9b00      	ldr	r3, [sp, #0]
 8022a06:	2b00      	cmp	r3, #0
 8022a08:	f340 80ad 	ble.w	8022b66 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8022a0c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022a10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022a12:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022a16:	eeb0 6a62 	vmov.f32	s12, s5
 8022a1a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022a1e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022a22:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022a26:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8022a2a:	eeb0 6a43 	vmov.f32	s12, s6
 8022a2e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022a32:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8022a36:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022a3a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022a3e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022a42:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022a46:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022a4a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022a4e:	ee12 2a90 	vmov	r2, s5
 8022a52:	eef0 2a47 	vmov.f32	s5, s14
 8022a56:	fb92 f3f3 	sdiv	r3, r2, r3
 8022a5a:	ee13 2a10 	vmov	r2, s6
 8022a5e:	9311      	str	r3, [sp, #68]	@ 0x44
 8022a60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022a62:	eeb0 3a67 	vmov.f32	s6, s15
 8022a66:	fb92 f3f3 	sdiv	r3, r2, r3
 8022a6a:	9312      	str	r3, [sp, #72]	@ 0x48
 8022a6c:	9b00      	ldr	r3, [sp, #0]
 8022a6e:	9a03      	ldr	r2, [sp, #12]
 8022a70:	3b01      	subs	r3, #1
 8022a72:	9300      	str	r3, [sp, #0]
 8022a74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022a76:	bf08      	it	eq
 8022a78:	4613      	moveq	r3, r2
 8022a7a:	e72d      	b.n	80228d8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8022a7c:	1428      	asrs	r0, r5, #16
 8022a7e:	d45c      	bmi.n	8022b3a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8022a80:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8022a84:	4282      	cmp	r2, r0
 8022a86:	dd58      	ble.n	8022b3a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8022a88:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8022a8c:	d455      	bmi.n	8022b3a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8022a8e:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8022a92:	4572      	cmp	r2, lr
 8022a94:	dd51      	ble.n	8022b3a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8022a96:	9a01      	ldr	r2, [sp, #4]
 8022a98:	9902      	ldr	r1, [sp, #8]
 8022a9a:	fb0e 0002 	mla	r0, lr, r2, r0
 8022a9e:	0842      	lsrs	r2, r0, #1
 8022aa0:	07c0      	lsls	r0, r0, #31
 8022aa2:	5c8a      	ldrb	r2, [r1, r2]
 8022aa4:	bf54      	ite	pl
 8022aa6:	f002 020f 	andpl.w	r2, r2, #15
 8022aaa:	1112      	asrmi	r2, r2, #4
 8022aac:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022ab0:	b2d2      	uxtb	r2, r2
 8022ab2:	2a00      	cmp	r2, #0
 8022ab4:	d041      	beq.n	8022b3a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8022ab6:	492d      	ldr	r1, [pc, #180]	@ (8022b6c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8022ab8:	2aff      	cmp	r2, #255	@ 0xff
 8022aba:	6808      	ldr	r0, [r1, #0]
 8022abc:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8022ac0:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8022ac4:	fa5f fe80 	uxtb.w	lr, r0
 8022ac8:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8022acc:	d03b      	beq.n	8022b46 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8022ace:	fa1f f982 	uxth.w	r9, r2
 8022ad2:	4438      	add	r0, r7
 8022ad4:	43d2      	mvns	r2, r2
 8022ad6:	f816 8000 	ldrb.w	r8, [r6, r0]
 8022ada:	fb1e fe09 	smulbb	lr, lr, r9
 8022ade:	fb1a fa09 	smulbb	sl, sl, r9
 8022ae2:	b2d2      	uxtb	r2, r2
 8022ae4:	fb1b f909 	smulbb	r9, fp, r9
 8022ae8:	fb08 ee02 	mla	lr, r8, r2, lr
 8022aec:	fa1f fe8e 	uxth.w	lr, lr
 8022af0:	f10e 0801 	add.w	r8, lr, #1
 8022af4:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 8022af8:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022afc:	f806 e000 	strb.w	lr, [r6, r0]
 8022b00:	4430      	add	r0, r6
 8022b02:	f890 e001 	ldrb.w	lr, [r0, #1]
 8022b06:	fb0e aa02 	mla	sl, lr, r2, sl
 8022b0a:	fa1f fa8a 	uxth.w	sl, sl
 8022b0e:	f10a 0e01 	add.w	lr, sl, #1
 8022b12:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 8022b16:	f890 e002 	ldrb.w	lr, [r0, #2]
 8022b1a:	fb0e 9902 	mla	r9, lr, r2, r9
 8022b1e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022b22:	fa1f f989 	uxth.w	r9, r9
 8022b26:	f880 a001 	strb.w	sl, [r0, #1]
 8022b2a:	f109 0201 	add.w	r2, r9, #1
 8022b2e:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8022b32:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022b36:	f880 9002 	strb.w	r9, [r0, #2]
 8022b3a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8022b3c:	3701      	adds	r7, #1
 8022b3e:	4415      	add	r5, r2
 8022b40:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8022b42:	4414      	add	r4, r2
 8022b44:	e756      	b.n	80229f4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8022b46:	4438      	add	r0, r7
 8022b48:	f806 e000 	strb.w	lr, [r6, r0]
 8022b4c:	4430      	add	r0, r6
 8022b4e:	f880 a001 	strb.w	sl, [r0, #1]
 8022b52:	f880 b002 	strb.w	fp, [r0, #2]
 8022b56:	e7f0      	b.n	8022b3a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8022b58:	f800 7c03 	strb.w	r7, [r0, #-3]
 8022b5c:	f800 9c02 	strb.w	r9, [r0, #-2]
 8022b60:	f800 bc01 	strb.w	fp, [r0, #-1]
 8022b64:	e73d      	b.n	80229e2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8022b66:	b005      	add	sp, #20
 8022b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b6c:	2403423c 	.word	0x2403423c

08022b70 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID1Ev>:
 8022b70:	4770      	bx	lr

08022b72 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev>:
 8022b72:	4770      	bx	lr

08022b74 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev>:
 8022b74:	4770      	bx	lr

08022b76 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev>:
 8022b76:	4770      	bx	lr

08022b78 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8022b78:	4770      	bx	lr

08022b7a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8022b7a:	4770      	bx	lr

08022b7c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8022b7c:	4770      	bx	lr

08022b7e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8022b7e:	4770      	bx	lr

08022b80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8022b80:	4770      	bx	lr

08022b82 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8022b82:	4770      	bx	lr

08022b84 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8022b84:	4770      	bx	lr

08022b86 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8022b86:	4770      	bx	lr

08022b88 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8022b88:	4770      	bx	lr

08022b8a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8022b8a:	4770      	bx	lr

08022b8c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8022b8c:	4770      	bx	lr

08022b8e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8022b8e:	4770      	bx	lr

08022b90 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8022b90:	4770      	bx	lr

08022b92 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8022b92:	4770      	bx	lr

08022b94 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8022b94:	4770      	bx	lr

08022b96 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8022b96:	4770      	bx	lr

08022b98 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8022b98:	4770      	bx	lr

08022b9a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8022b9a:	4770      	bx	lr

08022b9c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8022b9c:	4770      	bx	lr

08022b9e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8022b9e:	4770      	bx	lr

08022ba0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8022ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022ba2:	4606      	mov	r6, r0
 8022ba4:	b087      	sub	sp, #28
 8022ba6:	4615      	mov	r5, r2
 8022ba8:	461f      	mov	r7, r3
 8022baa:	b353      	cbz	r3, 8022c02 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8022bac:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8022bb0:	2b00      	cmp	r3, #0
 8022bb2:	dd26      	ble.n	8022c02 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8022bb4:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8022bb8:	2b00      	cmp	r3, #0
 8022bba:	dd22      	ble.n	8022c02 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8022bbc:	6808      	ldr	r0, [r1, #0]
 8022bbe:	aa04      	add	r2, sp, #16
 8022bc0:	6849      	ldr	r1, [r1, #4]
 8022bc2:	4c1b      	ldr	r4, [pc, #108]	@ (8022c30 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8022bc4:	c203      	stmia	r2!, {r0, r1}
 8022bc6:	a804      	add	r0, sp, #16
 8022bc8:	f7fa ffb0 	bl	801db2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022bcc:	6820      	ldr	r0, [r4, #0]
 8022bce:	6803      	ldr	r3, [r0, #0]
 8022bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022bd2:	4798      	blx	r3
 8022bd4:	2fff      	cmp	r7, #255	@ 0xff
 8022bd6:	d016      	beq.n	8022c06 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8022bd8:	f010 0f08 	tst.w	r0, #8
 8022bdc:	6820      	ldr	r0, [r4, #0]
 8022bde:	d015      	beq.n	8022c0c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8022be0:	2400      	movs	r4, #0
 8022be2:	6801      	ldr	r1, [r0, #0]
 8022be4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8022be8:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8022bec:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8022bf0:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8022bf4:	9401      	str	r4, [sp, #4]
 8022bf6:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8022bfa:	9400      	str	r4, [sp, #0]
 8022bfc:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 8022bfe:	4629      	mov	r1, r5
 8022c00:	47a0      	blx	r4
 8022c02:	b007      	add	sp, #28
 8022c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022c06:	f010 0f02 	tst.w	r0, #2
 8022c0a:	e7e7      	b.n	8022bdc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8022c0c:	6803      	ldr	r3, [r0, #0]
 8022c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022c10:	4798      	blx	r3
 8022c12:	4b08      	ldr	r3, [pc, #32]	@ (8022c34 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8022c14:	4601      	mov	r1, r0
 8022c16:	4630      	mov	r0, r6
 8022c18:	881a      	ldrh	r2, [r3, #0]
 8022c1a:	6833      	ldr	r3, [r6, #0]
 8022c1c:	e9cd 5700 	strd	r5, r7, [sp]
 8022c20:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8022c22:	ab04      	add	r3, sp, #16
 8022c24:	47a8      	blx	r5
 8022c26:	6820      	ldr	r0, [r4, #0]
 8022c28:	6803      	ldr	r3, [r0, #0]
 8022c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022c2c:	4798      	blx	r3
 8022c2e:	e7e8      	b.n	8022c02 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8022c30:	2403422c 	.word	0x2403422c
 8022c34:	24034226 	.word	0x24034226

08022c38 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8022c38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022c3c:	b08b      	sub	sp, #44	@ 0x2c
 8022c3e:	460d      	mov	r5, r1
 8022c40:	4616      	mov	r6, r2
 8022c42:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
 8022c46:	f1b8 0f00 	cmp.w	r8, #0
 8022c4a:	d047      	beq.n	8022cdc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8022c4c:	6810      	ldr	r0, [r2, #0]
 8022c4e:	ac06      	add	r4, sp, #24
 8022c50:	6851      	ldr	r1, [r2, #4]
 8022c52:	4f51      	ldr	r7, [pc, #324]	@ (8022d98 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 8022c54:	c403      	stmia	r4!, {r0, r1}
 8022c56:	6818      	ldr	r0, [r3, #0]
 8022c58:	ac08      	add	r4, sp, #32
 8022c5a:	6859      	ldr	r1, [r3, #4]
 8022c5c:	c403      	stmia	r4!, {r0, r1}
 8022c5e:	a806      	add	r0, sp, #24
 8022c60:	f7fa ff64 	bl	801db2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022c64:	4631      	mov	r1, r6
 8022c66:	a808      	add	r0, sp, #32
 8022c68:	f7fa ff88 	bl	801db7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022c6c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8022c70:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8022c74:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8022c78:	6838      	ldr	r0, [r7, #0]
 8022c7a:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022c7e:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 8022c82:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	@ 0x26
 8022c86:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022c8a:	440d      	add	r5, r1
 8022c8c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8022c90:	440a      	add	r2, r1
 8022c92:	f8ad 2020 	strh.w	r2, [sp, #32]
 8022c96:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8022c9a:	4413      	add	r3, r2
 8022c9c:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8022ca0:	6803      	ldr	r3, [r0, #0]
 8022ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022ca4:	4798      	blx	r3
 8022ca6:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8022caa:	d01a      	beq.n	8022ce2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 8022cac:	f010 0f04 	tst.w	r0, #4
 8022cb0:	6838      	ldr	r0, [r7, #0]
 8022cb2:	d019      	beq.n	8022ce8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 8022cb4:	2100      	movs	r1, #0
 8022cb6:	6807      	ldr	r7, [r0, #0]
 8022cb8:	b2a4      	uxth	r4, r4
 8022cba:	f8cd 800c 	str.w	r8, [sp, #12]
 8022cbe:	b2b6      	uxth	r6, r6
 8022cc0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8022cc4:	9401      	str	r4, [sp, #4]
 8022cc6:	9600      	str	r6, [sp, #0]
 8022cc8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8022ccc:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8022cd0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8022cd4:	9102      	str	r1, [sp, #8]
 8022cd6:	4629      	mov	r1, r5
 8022cd8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8022cda:	47a0      	blx	r4
 8022cdc:	b00b      	add	sp, #44	@ 0x2c
 8022cde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022ce2:	f010 0f01 	tst.w	r0, #1
 8022ce6:	e7e3      	b.n	8022cb0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 8022ce8:	6803      	ldr	r3, [r0, #0]
 8022cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022cec:	4798      	blx	r3
 8022cee:	4a2b      	ldr	r2, [pc, #172]	@ (8022d9c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 8022cf0:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 8022cf4:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8022cf8:	8813      	ldrh	r3, [r2, #0]
 8022cfa:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 8022cfe:	fb03 f404 	mul.w	r4, r3, r4
 8022d02:	fb03 c101 	mla	r1, r3, r1, ip
 8022d06:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022d0a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022d0e:	4408      	add	r0, r1
 8022d10:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8022d14:	4404      	add	r4, r0
 8022d16:	d02e      	beq.n	8022d76 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 8022d18:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8022d1c:	1b9b      	subs	r3, r3, r6
 8022d1e:	f1c8 0cff 	rsb	ip, r8, #255	@ 0xff
 8022d22:	1b96      	subs	r6, r2, r6
 8022d24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022d28:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022d2c:	42a0      	cmp	r0, r4
 8022d2e:	d22d      	bcs.n	8022d8c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8022d30:	eb00 0e01 	add.w	lr, r0, r1
 8022d34:	4570      	cmp	r0, lr
 8022d36:	d210      	bcs.n	8022d5a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 8022d38:	f890 9000 	ldrb.w	r9, [r0]
 8022d3c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8022d40:	fb19 f90c 	smulbb	r9, r9, ip
 8022d44:	fb02 9208 	mla	r2, r2, r8, r9
 8022d48:	b292      	uxth	r2, r2
 8022d4a:	f102 0901 	add.w	r9, r2, #1
 8022d4e:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 8022d52:	1212      	asrs	r2, r2, #8
 8022d54:	f800 2b01 	strb.w	r2, [r0], #1
 8022d58:	e7ec      	b.n	8022d34 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 8022d5a:	4418      	add	r0, r3
 8022d5c:	4435      	add	r5, r6
 8022d5e:	e7e5      	b.n	8022d2c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 8022d60:	8813      	ldrh	r3, [r2, #0]
 8022d62:	1b9b      	subs	r3, r3, r6
 8022d64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022d68:	4418      	add	r0, r3
 8022d6a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8022d6e:	1b9b      	subs	r3, r3, r6
 8022d70:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022d74:	441d      	add	r5, r3
 8022d76:	42a0      	cmp	r0, r4
 8022d78:	d208      	bcs.n	8022d8c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8022d7a:	eb00 0c01 	add.w	ip, r0, r1
 8022d7e:	4560      	cmp	r0, ip
 8022d80:	d2ee      	bcs.n	8022d60 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 8022d82:	f815 3b01 	ldrb.w	r3, [r5], #1
 8022d86:	f800 3b01 	strb.w	r3, [r0], #1
 8022d8a:	e7f8      	b.n	8022d7e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 8022d8c:	6838      	ldr	r0, [r7, #0]
 8022d8e:	6803      	ldr	r3, [r0, #0]
 8022d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022d92:	4798      	blx	r3
 8022d94:	e7a2      	b.n	8022cdc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8022d96:	bf00      	nop
 8022d98:	2403422c 	.word	0x2403422c
 8022d9c:	24034226 	.word	0x24034226

08022da0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8022da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022da2:	2300      	movs	r3, #0
 8022da4:	b085      	sub	sp, #20
 8022da6:	9300      	str	r3, [sp, #0]
 8022da8:	4b41      	ldr	r3, [pc, #260]	@ (8022eb0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 8022daa:	781b      	ldrb	r3, [r3, #0]
 8022dac:	2b00      	cmp	r3, #0
 8022dae:	d136      	bne.n	8022e1e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 8022db0:	4a40      	ldr	r2, [pc, #256]	@ (8022eb4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8022db2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8022db6:	f8ad 2004 	strh.w	r2, [sp, #4]
 8022dba:	2b00      	cmp	r3, #0
 8022dbc:	d131      	bne.n	8022e22 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 8022dbe:	4b3e      	ldr	r3, [pc, #248]	@ (8022eb8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8022dc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8022dc4:	ac02      	add	r4, sp, #8
 8022dc6:	6808      	ldr	r0, [r1, #0]
 8022dc8:	f8ad 3006 	strh.w	r3, [sp, #6]
 8022dcc:	ab02      	add	r3, sp, #8
 8022dce:	6849      	ldr	r1, [r1, #4]
 8022dd0:	4d3a      	ldr	r5, [pc, #232]	@ (8022ebc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 8022dd2:	c303      	stmia	r3!, {r0, r1}
 8022dd4:	4669      	mov	r1, sp
 8022dd6:	4620      	mov	r0, r4
 8022dd8:	f7fa fed0 	bl	801db7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022ddc:	4668      	mov	r0, sp
 8022dde:	f7fa fea5 	bl	801db2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022de2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8022de6:	f8bd 2000 	ldrh.w	r2, [sp]
 8022dea:	462e      	mov	r6, r5
 8022dec:	6828      	ldr	r0, [r5, #0]
 8022dee:	4413      	add	r3, r2
 8022df0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8022df4:	f8ad 3008 	strh.w	r3, [sp, #8]
 8022df8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8022dfc:	4413      	add	r3, r2
 8022dfe:	f8ad 300a 	strh.w	r3, [sp, #10]
 8022e02:	6803      	ldr	r3, [r0, #0]
 8022e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022e06:	4798      	blx	r3
 8022e08:	f010 0f01 	tst.w	r0, #1
 8022e0c:	d00b      	beq.n	8022e26 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 8022e0e:	6828      	ldr	r0, [r5, #0]
 8022e10:	6803      	ldr	r3, [r0, #0]
 8022e12:	e894 0006 	ldmia.w	r4, {r1, r2}
 8022e16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8022e18:	4798      	blx	r3
 8022e1a:	b005      	add	sp, #20
 8022e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022e1e:	4a26      	ldr	r2, [pc, #152]	@ (8022eb8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8022e20:	e7c7      	b.n	8022db2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8022e22:	4b24      	ldr	r3, [pc, #144]	@ (8022eb4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8022e24:	e7cc      	b.n	8022dc0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8022e26:	6830      	ldr	r0, [r6, #0]
 8022e28:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 8022e2c:	6803      	ldr	r3, [r0, #0]
 8022e2e:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8022e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022e34:	4798      	blx	r3
 8022e36:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8022e3a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8022e3e:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 8022e42:	fb14 3402 	smlabb	r4, r4, r2, r3
 8022e46:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022e4a:	4404      	add	r4, r0
 8022e4c:	6830      	ldr	r0, [r6, #0]
 8022e4e:	6803      	ldr	r3, [r0, #0]
 8022e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022e52:	4798      	blx	r3
 8022e54:	4917      	ldr	r1, [pc, #92]	@ (8022eb4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8022e56:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8022e5a:	880b      	ldrh	r3, [r1, #0]
 8022e5c:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 8022e60:	fb03 c202 	mla	r2, r3, r2, ip
 8022e64:	437b      	muls	r3, r7
 8022e66:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8022e6a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022e6e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022e72:	4410      	add	r0, r2
 8022e74:	18c2      	adds	r2, r0, r3
 8022e76:	4290      	cmp	r0, r2
 8022e78:	d214      	bcs.n	8022ea4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 8022e7a:	eb00 0c07 	add.w	ip, r0, r7
 8022e7e:	4560      	cmp	r0, ip
 8022e80:	d204      	bcs.n	8022e8c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 8022e82:	f814 3b01 	ldrb.w	r3, [r4], #1
 8022e86:	f800 3b01 	strb.w	r3, [r0], #1
 8022e8a:	e7f8      	b.n	8022e7e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 8022e8c:	880b      	ldrh	r3, [r1, #0]
 8022e8e:	1b5b      	subs	r3, r3, r5
 8022e90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022e94:	4418      	add	r0, r3
 8022e96:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8022e9a:	1b5b      	subs	r3, r3, r5
 8022e9c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022ea0:	441c      	add	r4, r3
 8022ea2:	e7e8      	b.n	8022e76 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 8022ea4:	6830      	ldr	r0, [r6, #0]
 8022ea6:	6803      	ldr	r3, [r0, #0]
 8022ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022eaa:	4798      	blx	r3
 8022eac:	e7b5      	b.n	8022e1a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8022eae:	bf00      	nop
 8022eb0:	24034224 	.word	0x24034224
 8022eb4:	24034226 	.word	0x24034226
 8022eb8:	24034228 	.word	0x24034228
 8022ebc:	2403422c 	.word	0x2403422c

08022ec0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8022ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ec4:	b08f      	sub	sp, #60	@ 0x3c
 8022ec6:	461c      	mov	r4, r3
 8022ec8:	9203      	str	r2, [sp, #12]
 8022eca:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8022ece:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8022ed0:	6820      	ldr	r0, [r4, #0]
 8022ed2:	9100      	str	r1, [sp, #0]
 8022ed4:	9204      	str	r2, [sp, #16]
 8022ed6:	aa0a      	add	r2, sp, #40	@ 0x28
 8022ed8:	6861      	ldr	r1, [r4, #4]
 8022eda:	c203      	stmia	r2!, {r0, r1}
 8022edc:	6818      	ldr	r0, [r3, #0]
 8022ede:	aa0c      	add	r2, sp, #48	@ 0x30
 8022ee0:	6859      	ldr	r1, [r3, #4]
 8022ee2:	c203      	stmia	r2!, {r0, r1}
 8022ee4:	a80a      	add	r0, sp, #40	@ 0x28
 8022ee6:	f7fa fe21 	bl	801db2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022eea:	4621      	mov	r1, r4
 8022eec:	a80c      	add	r0, sp, #48	@ 0x30
 8022eee:	f7fa fe45 	bl	801db7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022ef2:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 8022ef6:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 8022efa:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8022efe:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 8022f02:	bfdb      	ittet	le
 8022f04:	b2b3      	uxthle	r3, r6
 8022f06:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8022f0a:	2301      	movgt	r3, #1
 8022f0c:	fb92 f3f3 	sdivle	r3, r2, r3
 8022f10:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8022f14:	441d      	add	r5, r3
 8022f16:	fb92 f1f3 	sdiv	r1, r2, r3
 8022f1a:	fa1f fc81 	uxth.w	ip, r1
 8022f1e:	3d01      	subs	r5, #1
 8022f20:	fb0c 2413 	mls	r4, ip, r3, r2
 8022f24:	4661      	mov	r1, ip
 8022f26:	fb14 f406 	smulbb	r4, r4, r6
 8022f2a:	4404      	add	r4, r0
 8022f2c:	fb95 f5f3 	sdiv	r5, r5, r3
 8022f30:	b2a4      	uxth	r4, r4
 8022f32:	b131      	cbz	r1, 8022f42 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 8022f34:	9b03      	ldr	r3, [sp, #12]
 8022f36:	9900      	ldr	r1, [sp, #0]
 8022f38:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8022f3c:	ba1b      	rev	r3, r3
 8022f3e:	4419      	add	r1, r3
 8022f40:	9100      	str	r1, [sp, #0]
 8022f42:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8022f46:	b2ad      	uxth	r5, r5
 8022f48:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 8022f4c:	4418      	add	r0, r3
 8022f4e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8022f52:	00ad      	lsls	r5, r5, #2
 8022f54:	441a      	add	r2, r3
 8022f56:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8022f5a:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8022f5e:	9301      	str	r3, [sp, #4]
 8022f60:	4b79      	ldr	r3, [pc, #484]	@ (8023148 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 8022f62:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8022f66:	6818      	ldr	r0, [r3, #0]
 8022f68:	6803      	ldr	r3, [r0, #0]
 8022f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022f6c:	4798      	blx	r3
 8022f6e:	4a77      	ldr	r2, [pc, #476]	@ (802314c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>)
 8022f70:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8022f74:	2c00      	cmp	r4, #0
 8022f76:	8813      	ldrh	r3, [r2, #0]
 8022f78:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8022f7c:	9209      	str	r2, [sp, #36]	@ 0x24
 8022f7e:	fb03 c101 	mla	r1, r3, r1, ip
 8022f82:	fb06 f303 	mul.w	r3, r6, r3
 8022f86:	bf18      	it	ne
 8022f88:	2600      	movne	r6, #0
 8022f8a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022f8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022f92:	4408      	add	r0, r1
 8022f94:	4403      	add	r3, r0
 8022f96:	9306      	str	r3, [sp, #24]
 8022f98:	f105 0304 	add.w	r3, r5, #4
 8022f9c:	9305      	str	r3, [sp, #20]
 8022f9e:	9b01      	ldr	r3, [sp, #4]
 8022fa0:	bf08      	it	eq
 8022fa2:	461e      	moveq	r6, r3
 8022fa4:	2300      	movs	r3, #0
 8022fa6:	b2b6      	uxth	r6, r6
 8022fa8:	9302      	str	r3, [sp, #8]
 8022faa:	9a06      	ldr	r2, [sp, #24]
 8022fac:	4290      	cmp	r0, r2
 8022fae:	f080 80c2 	bcs.w	8023136 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x276>
 8022fb2:	b963      	cbnz	r3, 8022fce <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 8022fb4:	9b00      	ldr	r3, [sp, #0]
 8022fb6:	781a      	ldrb	r2, [r3, #0]
 8022fb8:	0993      	lsrs	r3, r2, #6
 8022fba:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8022fbe:	9202      	str	r2, [sp, #8]
 8022fc0:	1e5a      	subs	r2, r3, #1
 8022fc2:	2a02      	cmp	r2, #2
 8022fc4:	d815      	bhi.n	8022ff2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 8022fc6:	9a00      	ldr	r2, [sp, #0]
 8022fc8:	b29b      	uxth	r3, r3
 8022fca:	3201      	adds	r2, #1
 8022fcc:	9200      	str	r2, [sp, #0]
 8022fce:	b1b4      	cbz	r4, 8022ffe <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 8022fd0:	429c      	cmp	r4, r3
 8022fd2:	bf91      	iteee	ls
 8022fd4:	1b1c      	subls	r4, r3, r4
 8022fd6:	1ae4      	subhi	r4, r4, r3
 8022fd8:	4635      	movhi	r5, r6
 8022fda:	f04f 0e00 	movhi.w	lr, #0
 8022fde:	bf9b      	ittet	ls
 8022fe0:	fa1f fe84 	uxthls.w	lr, r4
 8022fe4:	f8bd 5004 	ldrhls.w	r5, [sp, #4]
 8022fe8:	b2a4      	uxthhi	r4, r4
 8022fea:	2400      	movls	r4, #0
 8022fec:	4673      	mov	r3, lr
 8022fee:	462e      	mov	r6, r5
 8022ff0:	e7db      	b.n	8022faa <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 8022ff2:	9a00      	ldr	r2, [sp, #0]
 8022ff4:	9b00      	ldr	r3, [sp, #0]
 8022ff6:	3202      	adds	r2, #2
 8022ff8:	785b      	ldrb	r3, [r3, #1]
 8022ffa:	9200      	str	r2, [sp, #0]
 8022ffc:	e7e7      	b.n	8022fce <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 8022ffe:	2204      	movs	r2, #4
 8023000:	9905      	ldr	r1, [sp, #20]
 8023002:	429e      	cmp	r6, r3
 8023004:	4615      	mov	r5, r2
 8023006:	9a02      	ldr	r2, [sp, #8]
 8023008:	bf94      	ite	ls
 802300a:	eba3 0e06 	subls.w	lr, r3, r6
 802300e:	46a6      	movhi	lr, r4
 8023010:	fb15 1202 	smlabb	r2, r5, r2, r1
 8023014:	9903      	ldr	r1, [sp, #12]
 8023016:	bf8c      	ite	hi
 8023018:	1af5      	subhi	r5, r6, r3
 802301a:	fa1f fe8e 	uxthls.w	lr, lr
 802301e:	f851 c002 	ldr.w	ip, [r1, r2]
 8023022:	bf9a      	itte	ls
 8023024:	4625      	movls	r5, r4
 8023026:	4632      	movls	r2, r6
 8023028:	b2ad      	uxthhi	r5, r5
 802302a:	ea4f 611c 	mov.w	r1, ip, lsr #24
 802302e:	bf88      	it	hi
 8023030:	461a      	movhi	r2, r3
 8023032:	b179      	cbz	r1, 8023054 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 8023034:	29ff      	cmp	r1, #255	@ 0xff
 8023036:	fa5f f98c 	uxtb.w	r9, ip
 802303a:	f3cc 2807 	ubfx	r8, ip, #8, #8
 802303e:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8023042:	d126      	bne.n	8023092 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 8023044:	9f04      	ldr	r7, [sp, #16]
 8023046:	2fff      	cmp	r7, #255	@ 0xff
 8023048:	d123      	bne.n	8023092 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 802304a:	4682      	mov	sl, r0
 802304c:	4611      	mov	r1, r2
 802304e:	f10a 0a03 	add.w	sl, sl, #3
 8023052:	b9a9      	cbnz	r1, 8023080 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 8023054:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023058:	429e      	cmp	r6, r3
 802305a:	4410      	add	r0, r2
 802305c:	d8c6      	bhi.n	8022fec <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 802305e:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 8023062:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8023066:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023068:	1b64      	subs	r4, r4, r5
 802306a:	9a01      	ldr	r2, [sp, #4]
 802306c:	881b      	ldrh	r3, [r3, #0]
 802306e:	b2a4      	uxth	r4, r4
 8023070:	1a9b      	subs	r3, r3, r2
 8023072:	2c00      	cmp	r4, #0
 8023074:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023078:	bf18      	it	ne
 802307a:	2500      	movne	r5, #0
 802307c:	4418      	add	r0, r3
 802307e:	e7b5      	b.n	8022fec <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 8023080:	3901      	subs	r1, #1
 8023082:	f80a 9c03 	strb.w	r9, [sl, #-3]
 8023086:	f80a 8c02 	strb.w	r8, [sl, #-2]
 802308a:	f80a cc01 	strb.w	ip, [sl, #-1]
 802308e:	b289      	uxth	r1, r1
 8023090:	e7dd      	b.n	802304e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 8023092:	9f04      	ldr	r7, [sp, #16]
 8023094:	fb07 fa01 	mul.w	sl, r7, r1
 8023098:	f10a 0101 	add.w	r1, sl, #1
 802309c:	eb01 212a 	add.w	r1, r1, sl, asr #8
 80230a0:	1209      	asrs	r1, r1, #8
 80230a2:	ea6f 0a01 	mvn.w	sl, r1
 80230a6:	b289      	uxth	r1, r1
 80230a8:	fb19 f901 	smulbb	r9, r9, r1
 80230ac:	fa5f fa8a 	uxtb.w	sl, sl
 80230b0:	fb18 f801 	smulbb	r8, r8, r1
 80230b4:	fb1c f101 	smulbb	r1, ip, r1
 80230b8:	fa1f f789 	uxth.w	r7, r9
 80230bc:	4684      	mov	ip, r0
 80230be:	4691      	mov	r9, r2
 80230c0:	9707      	str	r7, [sp, #28]
 80230c2:	b289      	uxth	r1, r1
 80230c4:	fa1f f788 	uxth.w	r7, r8
 80230c8:	9708      	str	r7, [sp, #32]
 80230ca:	f10c 0c03 	add.w	ip, ip, #3
 80230ce:	f1b9 0f00 	cmp.w	r9, #0
 80230d2:	d0bf      	beq.n	8023054 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 80230d4:	f81c 8c03 	ldrb.w	r8, [ip, #-3]
 80230d8:	f109 39ff 	add.w	r9, r9, #4294967295
 80230dc:	9f07      	ldr	r7, [sp, #28]
 80230de:	fa1f f989 	uxth.w	r9, r9
 80230e2:	fb08 780a 	mla	r8, r8, sl, r7
 80230e6:	9f08      	ldr	r7, [sp, #32]
 80230e8:	fa1f f888 	uxth.w	r8, r8
 80230ec:	f108 0b01 	add.w	fp, r8, #1
 80230f0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80230f4:	ea4f 2828 	mov.w	r8, r8, asr #8
 80230f8:	f80c 8c03 	strb.w	r8, [ip, #-3]
 80230fc:	f81c 8c02 	ldrb.w	r8, [ip, #-2]
 8023100:	fb08 780a 	mla	r8, r8, sl, r7
 8023104:	fa1f f888 	uxth.w	r8, r8
 8023108:	f108 0b01 	add.w	fp, r8, #1
 802310c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8023110:	ea4f 2828 	mov.w	r8, r8, asr #8
 8023114:	f80c 8c02 	strb.w	r8, [ip, #-2]
 8023118:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
 802311c:	fb08 180a 	mla	r8, r8, sl, r1
 8023120:	fa1f f888 	uxth.w	r8, r8
 8023124:	f108 0b01 	add.w	fp, r8, #1
 8023128:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 802312c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8023130:	f80c 8c01 	strb.w	r8, [ip, #-1]
 8023134:	e7c9      	b.n	80230ca <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 8023136:	4b04      	ldr	r3, [pc, #16]	@ (8023148 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 8023138:	6818      	ldr	r0, [r3, #0]
 802313a:	6803      	ldr	r3, [r0, #0]
 802313c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802313e:	4798      	blx	r3
 8023140:	b00f      	add	sp, #60	@ 0x3c
 8023142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023146:	bf00      	nop
 8023148:	2403422c 	.word	0x2403422c
 802314c:	24034226 	.word	0x24034226

08023150 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8023150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023154:	b089      	sub	sp, #36	@ 0x24
 8023156:	4607      	mov	r7, r0
 8023158:	4689      	mov	r9, r1
 802315a:	4692      	mov	sl, r2
 802315c:	ac08      	add	r4, sp, #32
 802315e:	461e      	mov	r6, r3
 8023160:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8023164:	4620      	mov	r0, r4
 8023166:	f7fd ff79 	bl	802105c <_ZNK8touchgfx6Bitmap7getDataEv>
 802316a:	683b      	ldr	r3, [r7, #0]
 802316c:	4605      	mov	r5, r0
 802316e:	4620      	mov	r0, r4
 8023170:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8023174:	f7fd feb8 	bl	8020ee8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8023178:	4683      	mov	fp, r0
 802317a:	4620      	mov	r0, r4
 802317c:	f7fd fee8 	bl	8020f50 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8023180:	4653      	mov	r3, sl
 8023182:	464a      	mov	r2, r9
 8023184:	4639      	mov	r1, r7
 8023186:	9500      	str	r5, [sp, #0]
 8023188:	e9cd b001 	strd	fp, r0, [sp, #4]
 802318c:	a806      	add	r0, sp, #24
 802318e:	47c0      	blx	r8
 8023190:	a906      	add	r1, sp, #24
 8023192:	4630      	mov	r0, r6
 8023194:	f7fd fd8c 	bl	8020cb0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 8023198:	4628      	mov	r0, r5
 802319a:	b009      	add	sp, #36	@ 0x24
 802319c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080231a0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D0Ev>:
 80231a0:	b510      	push	{r4, lr}
 80231a2:	4604      	mov	r4, r0
 80231a4:	2104      	movs	r1, #4
 80231a6:	f008 fc58 	bl	802ba5a <_ZdlPvj>
 80231aa:	4620      	mov	r0, r4
 80231ac:	bd10      	pop	{r4, pc}

080231ae <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED0Ev>:
 80231ae:	b510      	push	{r4, lr}
 80231b0:	4604      	mov	r4, r0
 80231b2:	2104      	movs	r1, #4
 80231b4:	f008 fc51 	bl	802ba5a <_ZdlPvj>
 80231b8:	4620      	mov	r0, r4
 80231ba:	bd10      	pop	{r4, pc}

080231bc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D0Ev>:
 80231bc:	b510      	push	{r4, lr}
 80231be:	4604      	mov	r4, r0
 80231c0:	f640 0144 	movw	r1, #2116	@ 0x844
 80231c4:	f008 fc49 	bl	802ba5a <_ZdlPvj>
 80231c8:	4620      	mov	r0, r4
 80231ca:	bd10      	pop	{r4, pc}

080231cc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID0Ev>:
 80231cc:	b510      	push	{r4, lr}
 80231ce:	4604      	mov	r4, r0
 80231d0:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80231d4:	f008 fc41 	bl	802ba5a <_ZdlPvj>
 80231d8:	4620      	mov	r0, r4
 80231da:	bd10      	pop	{r4, pc}

080231dc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80231dc:	b510      	push	{r4, lr}
 80231de:	4604      	mov	r4, r0
 80231e0:	2104      	movs	r1, #4
 80231e2:	f008 fc3a 	bl	802ba5a <_ZdlPvj>
 80231e6:	4620      	mov	r0, r4
 80231e8:	bd10      	pop	{r4, pc}

080231ea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80231ea:	b510      	push	{r4, lr}
 80231ec:	4604      	mov	r4, r0
 80231ee:	2104      	movs	r1, #4
 80231f0:	f008 fc33 	bl	802ba5a <_ZdlPvj>
 80231f4:	4620      	mov	r0, r4
 80231f6:	bd10      	pop	{r4, pc}

080231f8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80231f8:	b510      	push	{r4, lr}
 80231fa:	4604      	mov	r4, r0
 80231fc:	2104      	movs	r1, #4
 80231fe:	f008 fc2c 	bl	802ba5a <_ZdlPvj>
 8023202:	4620      	mov	r0, r4
 8023204:	bd10      	pop	{r4, pc}

08023206 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8023206:	b510      	push	{r4, lr}
 8023208:	4604      	mov	r4, r0
 802320a:	2104      	movs	r1, #4
 802320c:	f008 fc25 	bl	802ba5a <_ZdlPvj>
 8023210:	4620      	mov	r0, r4
 8023212:	bd10      	pop	{r4, pc}

08023214 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8023214:	b510      	push	{r4, lr}
 8023216:	4604      	mov	r4, r0
 8023218:	2104      	movs	r1, #4
 802321a:	f008 fc1e 	bl	802ba5a <_ZdlPvj>
 802321e:	4620      	mov	r0, r4
 8023220:	bd10      	pop	{r4, pc}

08023222 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8023222:	b510      	push	{r4, lr}
 8023224:	4604      	mov	r4, r0
 8023226:	2104      	movs	r1, #4
 8023228:	f008 fc17 	bl	802ba5a <_ZdlPvj>
 802322c:	4620      	mov	r0, r4
 802322e:	bd10      	pop	{r4, pc}

08023230 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8023230:	b510      	push	{r4, lr}
 8023232:	4604      	mov	r4, r0
 8023234:	2104      	movs	r1, #4
 8023236:	f008 fc10 	bl	802ba5a <_ZdlPvj>
 802323a:	4620      	mov	r0, r4
 802323c:	bd10      	pop	{r4, pc}

0802323e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 802323e:	b510      	push	{r4, lr}
 8023240:	4604      	mov	r4, r0
 8023242:	2104      	movs	r1, #4
 8023244:	f008 fc09 	bl	802ba5a <_ZdlPvj>
 8023248:	4620      	mov	r0, r4
 802324a:	bd10      	pop	{r4, pc}

0802324c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 802324c:	b510      	push	{r4, lr}
 802324e:	4604      	mov	r4, r0
 8023250:	2104      	movs	r1, #4
 8023252:	f008 fc02 	bl	802ba5a <_ZdlPvj>
 8023256:	4620      	mov	r0, r4
 8023258:	bd10      	pop	{r4, pc}

0802325a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 802325a:	b510      	push	{r4, lr}
 802325c:	4604      	mov	r4, r0
 802325e:	2104      	movs	r1, #4
 8023260:	f008 fbfb 	bl	802ba5a <_ZdlPvj>
 8023264:	4620      	mov	r0, r4
 8023266:	bd10      	pop	{r4, pc}

08023268 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8023268:	b510      	push	{r4, lr}
 802326a:	4604      	mov	r4, r0
 802326c:	2104      	movs	r1, #4
 802326e:	f008 fbf4 	bl	802ba5a <_ZdlPvj>
 8023272:	4620      	mov	r0, r4
 8023274:	bd10      	pop	{r4, pc}

08023276 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8023276:	b510      	push	{r4, lr}
 8023278:	4604      	mov	r4, r0
 802327a:	2104      	movs	r1, #4
 802327c:	f008 fbed 	bl	802ba5a <_ZdlPvj>
 8023280:	4620      	mov	r0, r4
 8023282:	bd10      	pop	{r4, pc}

08023284 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8023284:	b510      	push	{r4, lr}
 8023286:	4604      	mov	r4, r0
 8023288:	2104      	movs	r1, #4
 802328a:	f008 fbe6 	bl	802ba5a <_ZdlPvj>
 802328e:	4620      	mov	r0, r4
 8023290:	bd10      	pop	{r4, pc}

08023292 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8023292:	b510      	push	{r4, lr}
 8023294:	4604      	mov	r4, r0
 8023296:	2104      	movs	r1, #4
 8023298:	f008 fbdf 	bl	802ba5a <_ZdlPvj>
 802329c:	4620      	mov	r0, r4
 802329e:	bd10      	pop	{r4, pc}

080232a0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80232a0:	b510      	push	{r4, lr}
 80232a2:	4604      	mov	r4, r0
 80232a4:	2104      	movs	r1, #4
 80232a6:	f008 fbd8 	bl	802ba5a <_ZdlPvj>
 80232aa:	4620      	mov	r0, r4
 80232ac:	bd10      	pop	{r4, pc}

080232ae <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80232ae:	b510      	push	{r4, lr}
 80232b0:	4604      	mov	r4, r0
 80232b2:	2104      	movs	r1, #4
 80232b4:	f008 fbd1 	bl	802ba5a <_ZdlPvj>
 80232b8:	4620      	mov	r0, r4
 80232ba:	bd10      	pop	{r4, pc}

080232bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 80232bc:	b510      	push	{r4, lr}
 80232be:	4604      	mov	r4, r0
 80232c0:	2104      	movs	r1, #4
 80232c2:	f008 fbca 	bl	802ba5a <_ZdlPvj>
 80232c6:	4620      	mov	r0, r4
 80232c8:	bd10      	pop	{r4, pc}

080232ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 80232ca:	b510      	push	{r4, lr}
 80232cc:	4604      	mov	r4, r0
 80232ce:	2104      	movs	r1, #4
 80232d0:	f008 fbc3 	bl	802ba5a <_ZdlPvj>
 80232d4:	4620      	mov	r0, r4
 80232d6:	bd10      	pop	{r4, pc}

080232d8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 80232d8:	b510      	push	{r4, lr}
 80232da:	4604      	mov	r4, r0
 80232dc:	2104      	movs	r1, #4
 80232de:	f008 fbbc 	bl	802ba5a <_ZdlPvj>
 80232e2:	4620      	mov	r0, r4
 80232e4:	bd10      	pop	{r4, pc}

080232e6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 80232e6:	b510      	push	{r4, lr}
 80232e8:	4604      	mov	r4, r0
 80232ea:	2104      	movs	r1, #4
 80232ec:	f008 fbb5 	bl	802ba5a <_ZdlPvj>
 80232f0:	4620      	mov	r0, r4
 80232f2:	bd10      	pop	{r4, pc}

080232f4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 80232f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232f8:	b08f      	sub	sp, #60	@ 0x3c
 80232fa:	461c      	mov	r4, r3
 80232fc:	460e      	mov	r6, r1
 80232fe:	9206      	str	r2, [sp, #24]
 8023300:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8023304:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8023306:	9202      	str	r2, [sp, #8]
 8023308:	2a00      	cmp	r2, #0
 802330a:	f000 8128 	beq.w	802355e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 802330e:	6820      	ldr	r0, [r4, #0]
 8023310:	aa0a      	add	r2, sp, #40	@ 0x28
 8023312:	6861      	ldr	r1, [r4, #4]
 8023314:	c203      	stmia	r2!, {r0, r1}
 8023316:	6818      	ldr	r0, [r3, #0]
 8023318:	aa0c      	add	r2, sp, #48	@ 0x30
 802331a:	6859      	ldr	r1, [r3, #4]
 802331c:	c203      	stmia	r2!, {r0, r1}
 802331e:	a80a      	add	r0, sp, #40	@ 0x28
 8023320:	f7fa fc04 	bl	801db2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023324:	4621      	mov	r1, r4
 8023326:	a80c      	add	r0, sp, #48	@ 0x30
 8023328:	f7fa fc28 	bl	801db7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802332c:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	@ 0x2c
 8023330:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 8023334:	f5b7 6f80 	cmp.w	r7, #1024	@ 0x400
 8023338:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 802333c:	bfdb      	ittet	le
 802333e:	b2bb      	uxthle	r3, r7
 8023340:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8023344:	2301      	movgt	r3, #1
 8023346:	fb92 f3f3 	sdivle	r3, r2, r3
 802334a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 802334e:	441d      	add	r5, r3
 8023350:	fb92 f1f3 	sdiv	r1, r2, r3
 8023354:	fa1f fc81 	uxth.w	ip, r1
 8023358:	3d01      	subs	r5, #1
 802335a:	fb0c 2413 	mls	r4, ip, r3, r2
 802335e:	4661      	mov	r1, ip
 8023360:	fb14 f407 	smulbb	r4, r4, r7
 8023364:	4404      	add	r4, r0
 8023366:	fb95 f5f3 	sdiv	r5, r5, r3
 802336a:	b2a4      	uxth	r4, r4
 802336c:	b121      	cbz	r1, 8023378 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x84>
 802336e:	9b06      	ldr	r3, [sp, #24]
 8023370:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8023374:	ba1b      	rev	r3, r3
 8023376:	441e      	add	r6, r3
 8023378:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 802337c:	b2ad      	uxth	r5, r5
 802337e:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 8023382:	4418      	add	r0, r3
 8023384:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8023388:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	@ 0x36
 802338c:	00ad      	lsls	r5, r5, #2
 802338e:	441a      	add	r2, r3
 8023390:	4b74      	ldr	r3, [pc, #464]	@ (8023564 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 8023392:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8023396:	6818      	ldr	r0, [r3, #0]
 8023398:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 802339c:	6803      	ldr	r3, [r0, #0]
 802339e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80233a0:	4798      	blx	r3
 80233a2:	4a71      	ldr	r2, [pc, #452]	@ (8023568 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>)
 80233a4:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 80233a8:	2c00      	cmp	r4, #0
 80233aa:	8813      	ldrh	r3, [r2, #0]
 80233ac:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 80233b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80233b2:	fb03 c101 	mla	r1, r3, r1, ip
 80233b6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80233ba:	fb03 f307 	mul.w	r3, r3, r7
 80233be:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80233c2:	9204      	str	r2, [sp, #16]
 80233c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80233c8:	9a02      	ldr	r2, [sp, #8]
 80233ca:	4408      	add	r0, r1
 80233cc:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 80233d0:	4403      	add	r3, r0
 80233d2:	b292      	uxth	r2, r2
 80233d4:	9307      	str	r3, [sp, #28]
 80233d6:	f105 0304 	add.w	r3, r5, #4
 80233da:	bf0c      	ite	eq
 80233dc:	4645      	moveq	r5, r8
 80233de:	2500      	movne	r5, #0
 80233e0:	9308      	str	r3, [sp, #32]
 80233e2:	2300      	movs	r3, #0
 80233e4:	b2ad      	uxth	r5, r5
 80233e6:	9205      	str	r2, [sp, #20]
 80233e8:	9303      	str	r3, [sp, #12]
 80233ea:	9a07      	ldr	r2, [sp, #28]
 80233ec:	4282      	cmp	r2, r0
 80233ee:	f240 80b1 	bls.w	8023554 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 80233f2:	b95b      	cbnz	r3, 802340c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x118>
 80233f4:	7832      	ldrb	r2, [r6, #0]
 80233f6:	0993      	lsrs	r3, r2, #6
 80233f8:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80233fc:	9203      	str	r2, [sp, #12]
 80233fe:	1e5a      	subs	r2, r3, #1
 8023400:	2a02      	cmp	r2, #2
 8023402:	bf8d      	iteet	hi
 8023404:	7873      	ldrbhi	r3, [r6, #1]
 8023406:	3601      	addls	r6, #1
 8023408:	b29b      	uxthls	r3, r3
 802340a:	3602      	addhi	r6, #2
 802340c:	b184      	cbz	r4, 8023430 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13c>
 802340e:	429c      	cmp	r4, r3
 8023410:	bf91      	iteee	ls
 8023412:	1b1c      	subls	r4, r3, r4
 8023414:	1ae4      	subhi	r4, r4, r3
 8023416:	4629      	movhi	r1, r5
 8023418:	f04f 0e00 	movhi.w	lr, #0
 802341c:	bf9b      	ittet	ls
 802341e:	fa1f fe84 	uxthls.w	lr, r4
 8023422:	2400      	movls	r4, #0
 8023424:	b2a4      	uxthhi	r4, r4
 8023426:	fa1f f188 	uxthls.w	r1, r8
 802342a:	4673      	mov	r3, lr
 802342c:	460d      	mov	r5, r1
 802342e:	e7dc      	b.n	80233ea <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 8023430:	2203      	movs	r2, #3
 8023432:	9908      	ldr	r1, [sp, #32]
 8023434:	42ab      	cmp	r3, r5
 8023436:	4617      	mov	r7, r2
 8023438:	9a03      	ldr	r2, [sp, #12]
 802343a:	bf24      	itt	cs
 802343c:	eba3 0e05 	subcs.w	lr, r3, r5
 8023440:	9501      	strcs	r5, [sp, #4]
 8023442:	fb17 1702 	smlabb	r7, r7, r2, r1
 8023446:	9a06      	ldr	r2, [sp, #24]
 8023448:	bf34      	ite	cc
 802344a:	1ae9      	subcc	r1, r5, r3
 802344c:	fa1f fe8e 	uxthcs.w	lr, lr
 8023450:	4417      	add	r7, r2
 8023452:	9a02      	ldr	r2, [sp, #8]
 8023454:	bf2f      	iteee	cs
 8023456:	4621      	movcs	r1, r4
 8023458:	b289      	uxthcc	r1, r1
 802345a:	9301      	strcc	r3, [sp, #4]
 802345c:	46a6      	movcc	lr, r4
 802345e:	2aff      	cmp	r2, #255	@ 0xff
 8023460:	d11e      	bne.n	80234a0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ac>
 8023462:	4681      	mov	r9, r0
 8023464:	f8dd c004 	ldr.w	ip, [sp, #4]
 8023468:	f109 0903 	add.w	r9, r9, #3
 802346c:	f1bc 0f00 	cmp.w	ip, #0
 8023470:	d15f      	bne.n	8023532 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23e>
 8023472:	9a01      	ldr	r2, [sp, #4]
 8023474:	42ab      	cmp	r3, r5
 8023476:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802347a:	4410      	add	r0, r2
 802347c:	d3d5      	bcc.n	802342a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 802347e:	fa1f f188 	uxth.w	r1, r8
 8023482:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8023486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023488:	1a64      	subs	r4, r4, r1
 802348a:	881b      	ldrh	r3, [r3, #0]
 802348c:	b2a4      	uxth	r4, r4
 802348e:	eba3 0308 	sub.w	r3, r3, r8
 8023492:	2c00      	cmp	r4, #0
 8023494:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023498:	bf18      	it	ne
 802349a:	2100      	movne	r1, #0
 802349c:	4418      	add	r0, r3
 802349e:	e7c4      	b.n	802342a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 80234a0:	4684      	mov	ip, r0
 80234a2:	f8dd a004 	ldr.w	sl, [sp, #4]
 80234a6:	f10c 0c03 	add.w	ip, ip, #3
 80234aa:	f1ba 0f00 	cmp.w	sl, #0
 80234ae:	d0e0      	beq.n	8023472 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 80234b0:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 80234b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80234b8:	9a05      	ldr	r2, [sp, #20]
 80234ba:	f897 9000 	ldrb.w	r9, [r7]
 80234be:	fa1f fa8a 	uxth.w	sl, sl
 80234c2:	fb1b fb02 	smulbb	fp, fp, r2
 80234c6:	9a04      	ldr	r2, [sp, #16]
 80234c8:	fb09 b902 	mla	r9, r9, r2, fp
 80234cc:	9a05      	ldr	r2, [sp, #20]
 80234ce:	fa1f f989 	uxth.w	r9, r9
 80234d2:	f109 0b01 	add.w	fp, r9, #1
 80234d6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80234da:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 80234de:	fb1b fb02 	smulbb	fp, fp, r2
 80234e2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80234e6:	9a04      	ldr	r2, [sp, #16]
 80234e8:	f80c 9c03 	strb.w	r9, [ip, #-3]
 80234ec:	f897 9001 	ldrb.w	r9, [r7, #1]
 80234f0:	fb09 b902 	mla	r9, r9, r2, fp
 80234f4:	9a05      	ldr	r2, [sp, #20]
 80234f6:	fa1f f989 	uxth.w	r9, r9
 80234fa:	f109 0b01 	add.w	fp, r9, #1
 80234fe:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8023502:	f81c bc01 	ldrb.w	fp, [ip, #-1]
 8023506:	fb1b fb02 	smulbb	fp, fp, r2
 802350a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802350e:	9a04      	ldr	r2, [sp, #16]
 8023510:	f80c 9c02 	strb.w	r9, [ip, #-2]
 8023514:	f897 9002 	ldrb.w	r9, [r7, #2]
 8023518:	fb09 b902 	mla	r9, r9, r2, fp
 802351c:	fa1f f989 	uxth.w	r9, r9
 8023520:	f109 0b01 	add.w	fp, r9, #1
 8023524:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8023528:	ea4f 2929 	mov.w	r9, r9, asr #8
 802352c:	f80c 9c01 	strb.w	r9, [ip, #-1]
 8023530:	e7b9      	b.n	80234a6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1b2>
 8023532:	f897 a000 	ldrb.w	sl, [r7]
 8023536:	f10c 3cff 	add.w	ip, ip, #4294967295
 802353a:	f809 ac03 	strb.w	sl, [r9, #-3]
 802353e:	fa1f fc8c 	uxth.w	ip, ip
 8023542:	f897 a001 	ldrb.w	sl, [r7, #1]
 8023546:	f809 ac02 	strb.w	sl, [r9, #-2]
 802354a:	f897 a002 	ldrb.w	sl, [r7, #2]
 802354e:	f809 ac01 	strb.w	sl, [r9, #-1]
 8023552:	e789      	b.n	8023468 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 8023554:	4b03      	ldr	r3, [pc, #12]	@ (8023564 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 8023556:	6818      	ldr	r0, [r3, #0]
 8023558:	6803      	ldr	r3, [r0, #0]
 802355a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802355c:	4798      	blx	r3
 802355e:	b00f      	add	sp, #60	@ 0x3c
 8023560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023564:	2403422c 	.word	0x2403422c
 8023568:	24034226 	.word	0x24034226

0802356c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 802356c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023570:	b09b      	sub	sp, #108	@ 0x6c
 8023572:	461d      	mov	r5, r3
 8023574:	4604      	mov	r4, r0
 8023576:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023578:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
 802357c:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 8023580:	9208      	str	r2, [sp, #32]
 8023582:	2a00      	cmp	r2, #0
 8023584:	f000 81f3 	beq.w	802396e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x402>
 8023588:	6828      	ldr	r0, [r5, #0]
 802358a:	aa16      	add	r2, sp, #88	@ 0x58
 802358c:	6869      	ldr	r1, [r5, #4]
 802358e:	c203      	stmia	r2!, {r0, r1}
 8023590:	6818      	ldr	r0, [r3, #0]
 8023592:	aa18      	add	r2, sp, #96	@ 0x60
 8023594:	6859      	ldr	r1, [r3, #4]
 8023596:	c203      	stmia	r2!, {r0, r1}
 8023598:	a816      	add	r0, sp, #88	@ 0x58
 802359a:	f7fa fac7 	bl	801db2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802359e:	4629      	mov	r1, r5
 80235a0:	a818      	add	r0, sp, #96	@ 0x60
 80235a2:	f7fa faeb 	bl	801db7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80235a6:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	@ 0x5c
 80235aa:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	@ 0x5e
 80235ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80235b2:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	@ 0x66
 80235b6:	bfdb      	ittet	le
 80235b8:	b29a      	uxthle	r2, r3
 80235ba:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 80235be:	f04f 0a01 	movgt.w	sl, #1
 80235c2:	fb91 faf2 	sdivle	sl, r1, r2
 80235c6:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	@ 0x62
 80235ca:	4456      	add	r6, sl
 80235cc:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 80235d0:	3e01      	subs	r6, #1
 80235d2:	fb92 f0fa 	sdiv	r0, r2, sl
 80235d6:	b280      	uxth	r0, r0
 80235d8:	fb00 281a 	mls	r8, r0, sl, r2
 80235dc:	900e      	str	r0, [sp, #56]	@ 0x38
 80235de:	fb18 f803 	smulbb	r8, r8, r3
 80235e2:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 80235e6:	4488      	add	r8, r1
 80235e8:	4419      	add	r1, r3
 80235ea:	f8bd 305a 	ldrh.w	r3, [sp, #90]	@ 0x5a
 80235ee:	f8ad 1060 	strh.w	r1, [sp, #96]	@ 0x60
 80235f2:	fa1f f888 	uxth.w	r8, r8
 80235f6:	441a      	add	r2, r3
 80235f8:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 80235fc:	9303      	str	r3, [sp, #12]
 80235fe:	4b9c      	ldr	r3, [pc, #624]	@ (8023870 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 8023600:	f8ad 2062 	strh.w	r2, [sp, #98]	@ 0x62
 8023604:	6818      	ldr	r0, [r3, #0]
 8023606:	6803      	ldr	r3, [r0, #0]
 8023608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802360a:	4798      	blx	r3
 802360c:	4b99      	ldr	r3, [pc, #612]	@ (8023874 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>)
 802360e:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	@ 0x62
 8023612:	f1b8 0f00 	cmp.w	r8, #0
 8023616:	881a      	ldrh	r2, [r3, #0]
 8023618:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	@ 0x60
 802361c:	fb02 f505 	mul.w	r5, r2, r5
 8023620:	fb02 7101 	mla	r1, r2, r1, r7
 8023624:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023628:	9314      	str	r3, [sp, #80]	@ 0x50
 802362a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802362e:	9b08      	ldr	r3, [sp, #32]
 8023630:	fb96 f6fa 	sdiv	r6, r6, sl
 8023634:	4408      	add	r0, r1
 8023636:	f106 0601 	add.w	r6, r6, #1
 802363a:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 802363e:	f04f 0100 	mov.w	r1, #0
 8023642:	eb00 0205 	add.w	r2, r0, r5
 8023646:	b2b6      	uxth	r6, r6
 8023648:	b29b      	uxth	r3, r3
 802364a:	910b      	str	r1, [sp, #44]	@ 0x2c
 802364c:	9209      	str	r2, [sp, #36]	@ 0x24
 802364e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8023650:	930d      	str	r3, [sp, #52]	@ 0x34
 8023652:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8023656:	4b88      	ldr	r3, [pc, #544]	@ (8023878 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30c>)
 8023658:	f106 0204 	add.w	r2, r6, #4
 802365c:	eba3 0304 	sub.w	r3, r3, r4
 8023660:	9205      	str	r2, [sp, #20]
 8023662:	9a03      	ldr	r2, [sp, #12]
 8023664:	bf18      	it	ne
 8023666:	2200      	movne	r2, #0
 8023668:	9315      	str	r3, [sp, #84]	@ 0x54
 802366a:	b292      	uxth	r2, r2
 802366c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802366e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023670:	fa11 f383 	uxtah	r3, r1, r3
 8023674:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8023676:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 802367a:	3304      	adds	r3, #4
 802367c:	9306      	str	r3, [sp, #24]
 802367e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023680:	4283      	cmp	r3, r0
 8023682:	f240 816f 	bls.w	8023964 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f8>
 8023686:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 802368a:	f04f 0900 	mov.w	r9, #0
 802368e:	9d06      	ldr	r5, [sp, #24]
 8023690:	fbb8 f3f3 	udiv	r3, r8, r3
 8023694:	ebaa 0303 	sub.w	r3, sl, r3
 8023698:	782d      	ldrb	r5, [r5, #0]
 802369a:	b29b      	uxth	r3, r3
 802369c:	950f      	str	r5, [sp, #60]	@ 0x3c
 802369e:	3501      	adds	r5, #1
 80236a0:	9312      	str	r3, [sp, #72]	@ 0x48
 80236a2:	9b06      	ldr	r3, [sp, #24]
 80236a4:	9504      	str	r5, [sp, #16]
 80236a6:	7859      	ldrb	r1, [r3, #1]
 80236a8:	789b      	ldrb	r3, [r3, #2]
 80236aa:	021b      	lsls	r3, r3, #8
 80236ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80236b0:	9906      	ldr	r1, [sp, #24]
 80236b2:	78c9      	ldrb	r1, [r1, #3]
 80236b4:	430b      	orrs	r3, r1
 80236b6:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80236b8:	4419      	add	r1, r3
 80236ba:	1c4d      	adds	r5, r1, #1
 80236bc:	7849      	ldrb	r1, [r1, #1]
 80236be:	9502      	str	r5, [sp, #8]
 80236c0:	0209      	lsls	r1, r1, #8
 80236c2:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80236c4:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 80236c8:	5ceb      	ldrb	r3, [r5, r3]
 80236ca:	4319      	orrs	r1, r3
 80236cc:	b28b      	uxth	r3, r1
 80236ce:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 80236d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80236d4:	2300      	movs	r3, #0
 80236d6:	9307      	str	r3, [sp, #28]
 80236d8:	2301      	movs	r3, #1
 80236da:	e9cd 3300 	strd	r3, r3, [sp]
 80236de:	469c      	mov	ip, r3
 80236e0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80236e4:	930c      	str	r3, [sp, #48]	@ 0x30
 80236e6:	f1b8 0f00 	cmp.w	r8, #0
 80236ea:	f000 8082 	beq.w	80237f2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x286>
 80236ee:	45c4      	cmp	ip, r8
 80236f0:	d270      	bcs.n	80237d4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 80236f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80236f4:	eba8 080c 	sub.w	r8, r8, ip
 80236f8:	4611      	mov	r1, r2
 80236fa:	4283      	cmp	r3, r0
 80236fc:	fa1f f888 	uxth.w	r8, r8
 8023700:	d802      	bhi.n	8023708 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 8023702:	e074      	b.n	80237ee <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x282>
 8023704:	2b00      	cmp	r3, #0
 8023706:	d15f      	bne.n	80237c8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 8023708:	9b02      	ldr	r3, [sp, #8]
 802370a:	9a01      	ldr	r2, [sp, #4]
 802370c:	785b      	ldrb	r3, [r3, #1]
 802370e:	f1c2 0207 	rsb	r2, r2, #7
 8023712:	9d01      	ldr	r5, [sp, #4]
 8023714:	4093      	lsls	r3, r2
 8023716:	005b      	lsls	r3, r3, #1
 8023718:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 802371c:	9b02      	ldr	r3, [sp, #8]
 802371e:	781b      	ldrb	r3, [r3, #0]
 8023720:	412b      	asrs	r3, r5
 8023722:	b2db      	uxtb	r3, r3
 8023724:	4313      	orrs	r3, r2
 8023726:	462a      	mov	r2, r5
 8023728:	3201      	adds	r2, #1
 802372a:	b29e      	uxth	r6, r3
 802372c:	b2d2      	uxtb	r2, r2
 802372e:	2a08      	cmp	r2, #8
 8023730:	9201      	str	r2, [sp, #4]
 8023732:	9a02      	ldr	r2, [sp, #8]
 8023734:	bf09      	itett	eq
 8023736:	3202      	addeq	r2, #2
 8023738:	3201      	addne	r2, #1
 802373a:	9202      	streq	r2, [sp, #8]
 802373c:	2200      	moveq	r2, #0
 802373e:	bf14      	ite	ne
 8023740:	9202      	strne	r2, [sp, #8]
 8023742:	9201      	streq	r2, [sp, #4]
 8023744:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8023746:	42b2      	cmp	r2, r6
 8023748:	d309      	bcc.n	802375e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 802374a:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 802374e:	2301      	movs	r3, #1
 8023750:	9a04      	ldr	r2, [sp, #16]
 8023752:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8023756:	d30e      	bcc.n	8023776 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 8023758:	9300      	str	r3, [sp, #0]
 802375a:	2500      	movs	r5, #0
 802375c:	e035      	b.n	80237ca <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 802375e:	9b04      	ldr	r3, [sp, #16]
 8023760:	429e      	cmp	r6, r3
 8023762:	d318      	bcc.n	8023796 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 8023764:	9b00      	ldr	r3, [sp, #0]
 8023766:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 802376a:	18e3      	adds	r3, r4, r3
 802376c:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 8023770:	9b00      	ldr	r3, [sp, #0]
 8023772:	3301      	adds	r3, #1
 8023774:	b29b      	uxth	r3, r3
 8023776:	9a04      	ldr	r2, [sp, #16]
 8023778:	f894 5804 	ldrb.w	r5, [r4, #2052]	@ 0x804
 802377c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8023780:	9f00      	ldr	r7, [sp, #0]
 8023782:	7115      	strb	r5, [r2, #4]
 8023784:	3701      	adds	r7, #1
 8023786:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8023788:	7157      	strb	r7, [r2, #5]
 802378a:	80d5      	strh	r5, [r2, #6]
 802378c:	9a04      	ldr	r2, [sp, #16]
 802378e:	3201      	adds	r2, #1
 8023790:	b292      	uxth	r2, r2
 8023792:	9204      	str	r2, [sp, #16]
 8023794:	e7e0      	b.n	8023758 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 8023796:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 802379a:	4632      	mov	r2, r6
 802379c:	795b      	ldrb	r3, [r3, #5]
 802379e:	f603 0504 	addw	r5, r3, #2052	@ 0x804
 80237a2:	4425      	add	r5, r4
 80237a4:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 80237a6:	eb07 0c05 	add.w	ip, r7, r5
 80237aa:	f1bc 0f00 	cmp.w	ip, #0
 80237ae:	dd07      	ble.n	80237c0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x254>
 80237b0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80237b4:	f892 c004 	ldrb.w	ip, [r2, #4]
 80237b8:	f805 cd01 	strb.w	ip, [r5, #-1]!
 80237bc:	88d2      	ldrh	r2, [r2, #6]
 80237be:	e7f1      	b.n	80237a4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 80237c0:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 80237c4:	b29b      	uxth	r3, r3
 80237c6:	e7c3      	b.n	8023750 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 80237c8:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80237ca:	460a      	mov	r2, r1
 80237cc:	960a      	str	r6, [sp, #40]	@ 0x28
 80237ce:	46a9      	mov	r9, r5
 80237d0:	469c      	mov	ip, r3
 80237d2:	e788      	b.n	80236e6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 80237d4:	ebac 0308 	sub.w	r3, ip, r8
 80237d8:	eb09 0508 	add.w	r5, r9, r8
 80237dc:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80237e0:	b29b      	uxth	r3, r3
 80237e2:	b2ad      	uxth	r5, r5
 80237e4:	f04f 0800 	mov.w	r8, #0
 80237e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80237ea:	4282      	cmp	r2, r0
 80237ec:	d88a      	bhi.n	8023704 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 80237ee:	460a      	mov	r2, r1
 80237f0:	e745      	b.n	802367e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x112>
 80237f2:	4594      	cmp	ip, r2
 80237f4:	9d08      	ldr	r5, [sp, #32]
 80237f6:	4686      	mov	lr, r0
 80237f8:	bf27      	ittee	cs
 80237fa:	ebac 0302 	subcs.w	r3, ip, r2
 80237fe:	4616      	movcs	r6, r2
 8023800:	eba2 010c 	subcc.w	r1, r2, ip
 8023804:	4666      	movcc	r6, ip
 8023806:	bf27      	ittee	cs
 8023808:	b29b      	uxthcs	r3, r3
 802380a:	4641      	movcs	r1, r8
 802380c:	b289      	uxthcc	r1, r1
 802380e:	4643      	movcc	r3, r8
 8023810:	2dff      	cmp	r5, #255	@ 0xff
 8023812:	eb09 0506 	add.w	r5, r9, r6
 8023816:	b2ad      	uxth	r5, r5
 8023818:	d130      	bne.n	802387c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 802381a:	45a9      	cmp	r9, r5
 802381c:	f10e 0e03 	add.w	lr, lr, #3
 8023820:	d17a      	bne.n	8023918 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ac>
 8023822:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023826:	4594      	cmp	ip, r2
 8023828:	4430      	add	r0, r6
 802382a:	d3db      	bcc.n	80237e4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 802382c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802382e:	9903      	ldr	r1, [sp, #12]
 8023830:	8812      	ldrh	r2, [r2, #0]
 8023832:	1a52      	subs	r2, r2, r1
 8023834:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8023836:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802383a:	4410      	add	r0, r2
 802383c:	9a07      	ldr	r2, [sp, #28]
 802383e:	3201      	adds	r2, #1
 8023840:	428a      	cmp	r2, r1
 8023842:	9207      	str	r2, [sp, #28]
 8023844:	f040 8081 	bne.w	802394a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3de>
 8023848:	f8bd 8060 	ldrh.w	r8, [sp, #96]	@ 0x60
 802384c:	f8bd c058 	ldrh.w	ip, [sp, #88]	@ 0x58
 8023850:	9b03      	ldr	r3, [sp, #12]
 8023852:	eba8 080c 	sub.w	r8, r8, ip
 8023856:	fa1f f888 	uxth.w	r8, r8
 802385a:	f1b8 0f00 	cmp.w	r8, #0
 802385e:	bf08      	it	eq
 8023860:	461a      	moveq	r2, r3
 8023862:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023864:	bf18      	it	ne
 8023866:	2200      	movne	r2, #0
 8023868:	3301      	adds	r3, #1
 802386a:	b292      	uxth	r2, r2
 802386c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802386e:	e6fd      	b.n	802366c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x100>
 8023870:	2403422c 	.word	0x2403422c
 8023874:	24034226 	.word	0x24034226
 8023878:	fffff7fb 	.word	0xfffff7fb
 802387c:	45a9      	cmp	r9, r5
 802387e:	f10e 0e03 	add.w	lr, lr, #3
 8023882:	d0ce      	beq.n	8023822 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b6>
 8023884:	f109 0701 	add.w	r7, r9, #1
 8023888:	44a1      	add	r9, r4
 802388a:	f81e bc03 	ldrb.w	fp, [lr, #-3]
 802388e:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 8023892:	9713      	str	r7, [sp, #76]	@ 0x4c
 8023894:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8023898:	9f05      	ldr	r7, [sp, #20]
 802389a:	eb07 0908 	add.w	r9, r7, r8
 802389e:	f817 8008 	ldrb.w	r8, [r7, r8]
 80238a2:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 80238a4:	fb1b fb07 	smulbb	fp, fp, r7
 80238a8:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80238aa:	fb08 b807 	mla	r8, r8, r7, fp
 80238ae:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 80238b0:	fa1f f888 	uxth.w	r8, r8
 80238b4:	f108 0b01 	add.w	fp, r8, #1
 80238b8:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80238bc:	f81e bc02 	ldrb.w	fp, [lr, #-2]
 80238c0:	fb1b fb07 	smulbb	fp, fp, r7
 80238c4:	ea4f 2828 	mov.w	r8, r8, asr #8
 80238c8:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80238ca:	f80e 8c03 	strb.w	r8, [lr, #-3]
 80238ce:	f899 8001 	ldrb.w	r8, [r9, #1]
 80238d2:	fb08 b807 	mla	r8, r8, r7, fp
 80238d6:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 80238d8:	fa1f f888 	uxth.w	r8, r8
 80238dc:	f108 0b01 	add.w	fp, r8, #1
 80238e0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80238e4:	ea4f 2828 	mov.w	r8, r8, asr #8
 80238e8:	f80e 8c02 	strb.w	r8, [lr, #-2]
 80238ec:	f899 8002 	ldrb.w	r8, [r9, #2]
 80238f0:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 80238f4:	fb19 f907 	smulbb	r9, r9, r7
 80238f8:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80238fa:	fb08 9807 	mla	r8, r8, r7, r9
 80238fe:	fa1f f888 	uxth.w	r8, r8
 8023902:	f108 0901 	add.w	r9, r8, #1
 8023906:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 802390a:	f8bd 904c 	ldrh.w	r9, [sp, #76]	@ 0x4c
 802390e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8023912:	f80e 8c01 	strb.w	r8, [lr, #-1]
 8023916:	e7b1      	b.n	802387c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 8023918:	f109 0b01 	add.w	fp, r9, #1
 802391c:	44a1      	add	r9, r4
 802391e:	9f05      	ldr	r7, [sp, #20]
 8023920:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 8023924:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8023928:	eb07 0908 	add.w	r9, r7, r8
 802392c:	f817 8008 	ldrb.w	r8, [r7, r8]
 8023930:	f80e 8c03 	strb.w	r8, [lr, #-3]
 8023934:	f899 8001 	ldrb.w	r8, [r9, #1]
 8023938:	f80e 8c02 	strb.w	r8, [lr, #-2]
 802393c:	f899 8002 	ldrb.w	r8, [r9, #2]
 8023940:	fa1f f98b 	uxth.w	r9, fp
 8023944:	f80e 8c01 	strb.w	r8, [lr, #-1]
 8023948:	e767      	b.n	802381a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ae>
 802394a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 802394e:	f8bd 805c 	ldrh.w	r8, [sp, #92]	@ 0x5c
 8023952:	eba8 0801 	sub.w	r8, r8, r1
 8023956:	fa1f f888 	uxth.w	r8, r8
 802395a:	f1b8 0f00 	cmp.w	r8, #0
 802395e:	bf18      	it	ne
 8023960:	2100      	movne	r1, #0
 8023962:	e741      	b.n	80237e8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>
 8023964:	4b03      	ldr	r3, [pc, #12]	@ (8023974 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x408>)
 8023966:	6818      	ldr	r0, [r3, #0]
 8023968:	6803      	ldr	r3, [r0, #0]
 802396a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802396c:	4798      	blx	r3
 802396e:	b01b      	add	sp, #108	@ 0x6c
 8023970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023974:	2403422c 	.word	0x2403422c

08023978 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8023978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802397c:	b09d      	sub	sp, #116	@ 0x74
 802397e:	461d      	mov	r5, r3
 8023980:	4604      	mov	r4, r0
 8023982:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8023984:	e9cd 120f 	strd	r1, r2, [sp, #60]	@ 0x3c
 8023988:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 802398c:	920c      	str	r2, [sp, #48]	@ 0x30
 802398e:	2a00      	cmp	r2, #0
 8023990:	f000 81de 	beq.w	8023d50 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d8>
 8023994:	6828      	ldr	r0, [r5, #0]
 8023996:	aa18      	add	r2, sp, #96	@ 0x60
 8023998:	6869      	ldr	r1, [r5, #4]
 802399a:	c203      	stmia	r2!, {r0, r1}
 802399c:	6818      	ldr	r0, [r3, #0]
 802399e:	aa1a      	add	r2, sp, #104	@ 0x68
 80239a0:	6859      	ldr	r1, [r3, #4]
 80239a2:	c203      	stmia	r2!, {r0, r1}
 80239a4:	a818      	add	r0, sp, #96	@ 0x60
 80239a6:	f7fa f8c1 	bl	801db2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80239aa:	4629      	mov	r1, r5
 80239ac:	a81a      	add	r0, sp, #104	@ 0x68
 80239ae:	f7fa f8e5 	bl	801db7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80239b2:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 80239b6:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	@ 0x66
 80239ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80239be:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 80239c2:	bfdb      	ittet	le
 80239c4:	b29a      	uxthle	r2, r3
 80239c6:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 80239ca:	2201      	movgt	r2, #1
 80239cc:	fb91 f2f2 	sdivle	r2, r1, r2
 80239d0:	9201      	str	r2, [sp, #4]
 80239d2:	9801      	ldr	r0, [sp, #4]
 80239d4:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 80239d8:	9901      	ldr	r1, [sp, #4]
 80239da:	fb92 f0f0 	sdiv	r0, r2, r0
 80239de:	b280      	uxth	r0, r0
 80239e0:	440f      	add	r7, r1
 80239e2:	900d      	str	r0, [sp, #52]	@ 0x34
 80239e4:	3f01      	subs	r7, #1
 80239e6:	9801      	ldr	r0, [sp, #4]
 80239e8:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80239ea:	fb05 2510 	mls	r5, r5, r0, r2
 80239ee:	fb97 f7f1 	sdiv	r7, r7, r1
 80239f2:	fb15 f503 	smulbb	r5, r5, r3
 80239f6:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 80239fa:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 80239fe:	3701      	adds	r7, #1
 8023a00:	440d      	add	r5, r1
 8023a02:	4419      	add	r1, r3
 8023a04:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 8023a08:	b2bf      	uxth	r7, r7
 8023a0a:	441a      	add	r2, r3
 8023a0c:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 8023a10:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 8023a14:	00bf      	lsls	r7, r7, #2
 8023a16:	9304      	str	r3, [sp, #16]
 8023a18:	b2ad      	uxth	r5, r5
 8023a1a:	4bb0      	ldr	r3, [pc, #704]	@ (8023cdc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x364>)
 8023a1c:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 8023a20:	6818      	ldr	r0, [r3, #0]
 8023a22:	6803      	ldr	r3, [r0, #0]
 8023a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023a26:	4798      	blx	r3
 8023a28:	4bad      	ldr	r3, [pc, #692]	@ (8023ce0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 8023a2a:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 8023a2e:	2d00      	cmp	r5, #0
 8023a30:	881a      	ldrh	r2, [r3, #0]
 8023a32:	f9bd c068 	ldrsh.w	ip, [sp, #104]	@ 0x68
 8023a36:	fb02 f606 	mul.w	r6, r2, r6
 8023a3a:	fb02 c101 	mla	r1, r2, r1, ip
 8023a3e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023a42:	9316      	str	r3, [sp, #88]	@ 0x58
 8023a44:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8023a48:	4ba6      	ldr	r3, [pc, #664]	@ (8023ce4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 8023a4a:	eb00 0801 	add.w	r8, r0, r1
 8023a4e:	bf18      	it	ne
 8023a50:	2100      	movne	r1, #0
 8023a52:	eba3 0304 	sub.w	r3, r3, r4
 8023a56:	eb08 0206 	add.w	r2, r8, r6
 8023a5a:	9317      	str	r3, [sp, #92]	@ 0x5c
 8023a5c:	9208      	str	r2, [sp, #32]
 8023a5e:	f107 0204 	add.w	r2, r7, #4
 8023a62:	9211      	str	r2, [sp, #68]	@ 0x44
 8023a64:	9a04      	ldr	r2, [sp, #16]
 8023a66:	bf08      	it	eq
 8023a68:	4611      	moveq	r1, r2
 8023a6a:	2200      	movs	r2, #0
 8023a6c:	b289      	uxth	r1, r1
 8023a6e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8023a70:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8023a72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023a74:	fa12 f383 	uxtah	r3, r2, r3
 8023a78:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8023a7a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8023a7e:	3304      	adds	r3, #4
 8023a80:	9306      	str	r3, [sp, #24]
 8023a82:	9b08      	ldr	r3, [sp, #32]
 8023a84:	4543      	cmp	r3, r8
 8023a86:	f240 815e 	bls.w	8023d46 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ce>
 8023a8a:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 8023a8e:	f04f 0b01 	mov.w	fp, #1
 8023a92:	9a01      	ldr	r2, [sp, #4]
 8023a94:	9806      	ldr	r0, [sp, #24]
 8023a96:	465e      	mov	r6, fp
 8023a98:	f8cd b008 	str.w	fp, [sp, #8]
 8023a9c:	7800      	ldrb	r0, [r0, #0]
 8023a9e:	fbb5 f3f3 	udiv	r3, r5, r3
 8023aa2:	1ad3      	subs	r3, r2, r3
 8023aa4:	900e      	str	r0, [sp, #56]	@ 0x38
 8023aa6:	3001      	adds	r0, #1
 8023aa8:	b29b      	uxth	r3, r3
 8023aaa:	9005      	str	r0, [sp, #20]
 8023aac:	9312      	str	r3, [sp, #72]	@ 0x48
 8023aae:	9b06      	ldr	r3, [sp, #24]
 8023ab0:	785a      	ldrb	r2, [r3, #1]
 8023ab2:	789b      	ldrb	r3, [r3, #2]
 8023ab4:	021b      	lsls	r3, r3, #8
 8023ab6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8023aba:	9a06      	ldr	r2, [sp, #24]
 8023abc:	78d2      	ldrb	r2, [r2, #3]
 8023abe:	4313      	orrs	r3, r2
 8023ac0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8023ac2:	441a      	add	r2, r3
 8023ac4:	1c50      	adds	r0, r2, #1
 8023ac6:	7852      	ldrb	r2, [r2, #1]
 8023ac8:	9003      	str	r0, [sp, #12]
 8023aca:	0212      	lsls	r2, r2, #8
 8023acc:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8023ace:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 8023ad2:	5cc3      	ldrb	r3, [r0, r3]
 8023ad4:	431a      	orrs	r2, r3
 8023ad6:	b293      	uxth	r3, r2
 8023ad8:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 8023adc:	930a      	str	r3, [sp, #40]	@ 0x28
 8023ade:	2300      	movs	r3, #0
 8023ae0:	461a      	mov	r2, r3
 8023ae2:	9307      	str	r3, [sp, #28]
 8023ae4:	2d00      	cmp	r5, #0
 8023ae6:	d07c      	beq.n	8023be2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 8023ae8:	42ae      	cmp	r6, r5
 8023aea:	d26c      	bcs.n	8023bc6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x24e>
 8023aec:	9b08      	ldr	r3, [sp, #32]
 8023aee:	1bad      	subs	r5, r5, r6
 8023af0:	4608      	mov	r0, r1
 8023af2:	4543      	cmp	r3, r8
 8023af4:	b2ad      	uxth	r5, r5
 8023af6:	d802      	bhi.n	8023afe <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x186>
 8023af8:	e071      	b.n	8023bde <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 8023afa:	2b00      	cmp	r3, #0
 8023afc:	d15d      	bne.n	8023bba <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x242>
 8023afe:	9b03      	ldr	r3, [sp, #12]
 8023b00:	9a02      	ldr	r2, [sp, #8]
 8023b02:	785b      	ldrb	r3, [r3, #1]
 8023b04:	f1c2 0207 	rsb	r2, r2, #7
 8023b08:	9902      	ldr	r1, [sp, #8]
 8023b0a:	4093      	lsls	r3, r2
 8023b0c:	005b      	lsls	r3, r3, #1
 8023b0e:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8023b12:	9b03      	ldr	r3, [sp, #12]
 8023b14:	781b      	ldrb	r3, [r3, #0]
 8023b16:	410b      	asrs	r3, r1
 8023b18:	3101      	adds	r1, #1
 8023b1a:	b2c9      	uxtb	r1, r1
 8023b1c:	b2db      	uxtb	r3, r3
 8023b1e:	2908      	cmp	r1, #8
 8023b20:	9102      	str	r1, [sp, #8]
 8023b22:	9903      	ldr	r1, [sp, #12]
 8023b24:	ea43 0302 	orr.w	r3, r3, r2
 8023b28:	bf0c      	ite	eq
 8023b2a:	3102      	addeq	r1, #2
 8023b2c:	3101      	addne	r1, #1
 8023b2e:	b29a      	uxth	r2, r3
 8023b30:	bf05      	ittet	eq
 8023b32:	9103      	streq	r1, [sp, #12]
 8023b34:	2100      	moveq	r1, #0
 8023b36:	9103      	strne	r1, [sp, #12]
 8023b38:	9102      	streq	r1, [sp, #8]
 8023b3a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8023b3c:	4291      	cmp	r1, r2
 8023b3e:	d30a      	bcc.n	8023b56 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1de>
 8023b40:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 8023b44:	2301      	movs	r3, #1
 8023b46:	9905      	ldr	r1, [sp, #20]
 8023b48:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8023b4c:	d30f      	bcc.n	8023b6e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f6>
 8023b4e:	469b      	mov	fp, r3
 8023b50:	f04f 0c00 	mov.w	ip, #0
 8023b54:	e032      	b.n	8023bbc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x244>
 8023b56:	9b05      	ldr	r3, [sp, #20]
 8023b58:	429a      	cmp	r2, r3
 8023b5a:	d318      	bcc.n	8023b8e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 8023b5c:	eb04 030b 	add.w	r3, r4, fp
 8023b60:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 8023b64:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 8023b68:	f10b 0301 	add.w	r3, fp, #1
 8023b6c:	b29b      	uxth	r3, r3
 8023b6e:	9905      	ldr	r1, [sp, #20]
 8023b70:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 8023b74:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8023b78:	710e      	strb	r6, [r1, #4]
 8023b7a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8023b7c:	80ce      	strh	r6, [r1, #6]
 8023b7e:	f10b 0601 	add.w	r6, fp, #1
 8023b82:	714e      	strb	r6, [r1, #5]
 8023b84:	9905      	ldr	r1, [sp, #20]
 8023b86:	3101      	adds	r1, #1
 8023b88:	b289      	uxth	r1, r1
 8023b8a:	9105      	str	r1, [sp, #20]
 8023b8c:	e7df      	b.n	8023b4e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 8023b8e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8023b92:	4611      	mov	r1, r2
 8023b94:	795b      	ldrb	r3, [r3, #5]
 8023b96:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 8023b9a:	4426      	add	r6, r4
 8023b9c:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8023b9e:	4437      	add	r7, r6
 8023ba0:	2f00      	cmp	r7, #0
 8023ba2:	dd06      	ble.n	8023bb2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 8023ba4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8023ba8:	790f      	ldrb	r7, [r1, #4]
 8023baa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8023bae:	88c9      	ldrh	r1, [r1, #6]
 8023bb0:	e7f4      	b.n	8023b9c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x224>
 8023bb2:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 8023bb6:	b29b      	uxth	r3, r3
 8023bb8:	e7c5      	b.n	8023b46 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ce>
 8023bba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023bbc:	920a      	str	r2, [sp, #40]	@ 0x28
 8023bbe:	4601      	mov	r1, r0
 8023bc0:	4662      	mov	r2, ip
 8023bc2:	461e      	mov	r6, r3
 8023bc4:	e78e      	b.n	8023ae4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16c>
 8023bc6:	1b73      	subs	r3, r6, r5
 8023bc8:	eb02 0c05 	add.w	ip, r2, r5
 8023bcc:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8023bd0:	b29b      	uxth	r3, r3
 8023bd2:	fa1f fc8c 	uxth.w	ip, ip
 8023bd6:	2500      	movs	r5, #0
 8023bd8:	9a08      	ldr	r2, [sp, #32]
 8023bda:	4542      	cmp	r2, r8
 8023bdc:	d88d      	bhi.n	8023afa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 8023bde:	4601      	mov	r1, r0
 8023be0:	e74f      	b.n	8023a82 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10a>
 8023be2:	428e      	cmp	r6, r1
 8023be4:	bf2b      	itete	cs
 8023be6:	468e      	movcs	lr, r1
 8023be8:	46b6      	movcc	lr, r6
 8023bea:	1a73      	subcs	r3, r6, r1
 8023bec:	1b88      	subcc	r0, r1, r6
 8023bee:	eb02 0c0e 	add.w	ip, r2, lr
 8023bf2:	bf2b      	itete	cs
 8023bf4:	4628      	movcs	r0, r5
 8023bf6:	462b      	movcc	r3, r5
 8023bf8:	b29b      	uxthcs	r3, r3
 8023bfa:	b280      	uxthcc	r0, r0
 8023bfc:	f108 0503 	add.w	r5, r8, #3
 8023c00:	fa1f fc8c 	uxth.w	ip, ip
 8023c04:	4562      	cmp	r2, ip
 8023c06:	d06f      	beq.n	8023ce8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>
 8023c08:	1c57      	adds	r7, r2, #1
 8023c0a:	4422      	add	r2, r4
 8023c0c:	b2bf      	uxth	r7, r7
 8023c0e:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 8023c12:	9713      	str	r7, [sp, #76]	@ 0x4c
 8023c14:	2704      	movs	r7, #4
 8023c16:	46b9      	mov	r9, r7
 8023c18:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8023c1a:	fb19 7202 	smlabb	r2, r9, r2, r7
 8023c1e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8023c20:	58bf      	ldr	r7, [r7, r2]
 8023c22:	0e3a      	lsrs	r2, r7, #24
 8023c24:	9209      	str	r2, [sp, #36]	@ 0x24
 8023c26:	d016      	beq.n	8023c56 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 8023c28:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8023c2c:	fa5f fa87 	uxtb.w	sl, r7
 8023c30:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8023c34:	fa5f f289 	uxtb.w	r2, r9
 8023c38:	9214      	str	r2, [sp, #80]	@ 0x50
 8023c3a:	b2fa      	uxtb	r2, r7
 8023c3c:	9215      	str	r2, [sp, #84]	@ 0x54
 8023c3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023c40:	2aff      	cmp	r2, #255	@ 0xff
 8023c42:	d10b      	bne.n	8023c5c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 8023c44:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8023c46:	2aff      	cmp	r2, #255	@ 0xff
 8023c48:	d108      	bne.n	8023c5c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 8023c4a:	f805 ac03 	strb.w	sl, [r5, #-3]
 8023c4e:	f805 9c02 	strb.w	r9, [r5, #-2]
 8023c52:	f805 7c01 	strb.w	r7, [r5, #-1]
 8023c56:	3503      	adds	r5, #3
 8023c58:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8023c5a:	e7d3      	b.n	8023c04 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>
 8023c5c:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8023c5e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8023c60:	437a      	muls	r2, r7
 8023c62:	1c57      	adds	r7, r2, #1
 8023c64:	eb07 2222 	add.w	r2, r7, r2, asr #8
 8023c68:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 8023c6c:	1212      	asrs	r2, r2, #8
 8023c6e:	fa1f f982 	uxth.w	r9, r2
 8023c72:	43d2      	mvns	r2, r2
 8023c74:	fb1a fa09 	smulbb	sl, sl, r9
 8023c78:	b2d2      	uxtb	r2, r2
 8023c7a:	fb07 a702 	mla	r7, r7, r2, sl
 8023c7e:	9209      	str	r2, [sp, #36]	@ 0x24
 8023c80:	b2bf      	uxth	r7, r7
 8023c82:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8023c84:	f107 0a01 	add.w	sl, r7, #1
 8023c88:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8023c8c:	fb12 fa09 	smulbb	sl, r2, r9
 8023c90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023c92:	123f      	asrs	r7, r7, #8
 8023c94:	f805 7c03 	strb.w	r7, [r5, #-3]
 8023c98:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 8023c9c:	fb07 aa02 	mla	sl, r7, r2, sl
 8023ca0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8023ca2:	fb12 f909 	smulbb	r9, r2, r9
 8023ca6:	fa1f fa8a 	uxth.w	sl, sl
 8023caa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023cac:	f10a 0701 	add.w	r7, sl, #1
 8023cb0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023cb4:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 8023cb8:	fb07 9902 	mla	r9, r7, r2, r9
 8023cbc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8023cc0:	fa1f f989 	uxth.w	r9, r9
 8023cc4:	f805 ac02 	strb.w	sl, [r5, #-2]
 8023cc8:	f109 0201 	add.w	r2, r9, #1
 8023ccc:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8023cd0:	ea4f 2929 	mov.w	r9, r9, asr #8
 8023cd4:	f805 9c01 	strb.w	r9, [r5, #-1]
 8023cd8:	e7bd      	b.n	8023c56 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 8023cda:	bf00      	nop
 8023cdc:	2403422c 	.word	0x2403422c
 8023ce0:	24034226 	.word	0x24034226
 8023ce4:	fffff7fb 	.word	0xfffff7fb
 8023ce8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8023cec:	428e      	cmp	r6, r1
 8023cee:	44f0      	add	r8, lr
 8023cf0:	f4ff af71 	bcc.w	8023bd6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 8023cf4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8023cf6:	9904      	ldr	r1, [sp, #16]
 8023cf8:	8812      	ldrh	r2, [r2, #0]
 8023cfa:	1a52      	subs	r2, r2, r1
 8023cfc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8023cfe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023d02:	4490      	add	r8, r2
 8023d04:	9a07      	ldr	r2, [sp, #28]
 8023d06:	3201      	adds	r2, #1
 8023d08:	428a      	cmp	r2, r1
 8023d0a:	9207      	str	r2, [sp, #28]
 8023d0c:	d111      	bne.n	8023d32 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ba>
 8023d0e:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 8023d12:	f8bd c060 	ldrh.w	ip, [sp, #96]	@ 0x60
 8023d16:	9b04      	ldr	r3, [sp, #16]
 8023d18:	eba5 050c 	sub.w	r5, r5, ip
 8023d1c:	b2ad      	uxth	r5, r5
 8023d1e:	2d00      	cmp	r5, #0
 8023d20:	bf08      	it	eq
 8023d22:	4619      	moveq	r1, r3
 8023d24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023d26:	bf18      	it	ne
 8023d28:	2100      	movne	r1, #0
 8023d2a:	3301      	adds	r3, #1
 8023d2c:	b289      	uxth	r1, r1
 8023d2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023d30:	e69e      	b.n	8023a70 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf8>
 8023d32:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8023d36:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 8023d3a:	1a2d      	subs	r5, r5, r0
 8023d3c:	b2ad      	uxth	r5, r5
 8023d3e:	2d00      	cmp	r5, #0
 8023d40:	bf18      	it	ne
 8023d42:	2000      	movne	r0, #0
 8023d44:	e748      	b.n	8023bd8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 8023d46:	4b04      	ldr	r3, [pc, #16]	@ (8023d58 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e0>)
 8023d48:	6818      	ldr	r0, [r3, #0]
 8023d4a:	6803      	ldr	r3, [r0, #0]
 8023d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023d4e:	4798      	blx	r3
 8023d50:	b01d      	add	sp, #116	@ 0x74
 8023d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023d56:	bf00      	nop
 8023d58:	2403422c 	.word	0x2403422c

08023d5c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 8023d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d60:	b08f      	sub	sp, #60	@ 0x3c
 8023d62:	4616      	mov	r6, r2
 8023d64:	4681      	mov	r9, r0
 8023d66:	460d      	mov	r5, r1
 8023d68:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 8023d6c:	9205      	str	r2, [sp, #20]
 8023d6e:	2a00      	cmp	r2, #0
 8023d70:	f000 82a8 	beq.w	80242c4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x568>
 8023d74:	6830      	ldr	r0, [r6, #0]
 8023d76:	ac0a      	add	r4, sp, #40	@ 0x28
 8023d78:	6871      	ldr	r1, [r6, #4]
 8023d7a:	c403      	stmia	r4!, {r0, r1}
 8023d7c:	6818      	ldr	r0, [r3, #0]
 8023d7e:	ac0c      	add	r4, sp, #48	@ 0x30
 8023d80:	6859      	ldr	r1, [r3, #4]
 8023d82:	c403      	stmia	r4!, {r0, r1}
 8023d84:	a80a      	add	r0, sp, #40	@ 0x28
 8023d86:	f7f9 fed1 	bl	801db2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023d8a:	4631      	mov	r1, r6
 8023d8c:	a80c      	add	r0, sp, #48	@ 0x30
 8023d8e:	f7f9 fef5 	bl	801db7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023d92:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8023d96:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8023d9a:	bfdb      	ittet	le
 8023d9c:	b293      	uxthle	r3, r2
 8023d9e:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8023da2:	2301      	movgt	r3, #1
 8023da4:	fb91 f3f3 	sdivle	r3, r1, r3
 8023da8:	9300      	str	r3, [sp, #0]
 8023daa:	f105 0308 	add.w	r3, r5, #8
 8023dae:	9900      	ldr	r1, [sp, #0]
 8023db0:	9306      	str	r3, [sp, #24]
 8023db2:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8023db6:	440b      	add	r3, r1
 8023db8:	3b01      	subs	r3, #1
 8023dba:	fb93 f3f1 	sdiv	r3, r3, r1
 8023dbe:	3b01      	subs	r3, #1
 8023dc0:	9906      	ldr	r1, [sp, #24]
 8023dc2:	b29b      	uxth	r3, r3
 8023dc4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8023dc8:	9900      	ldr	r1, [sp, #0]
 8023dca:	9307      	str	r3, [sp, #28]
 8023dcc:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8023dd0:	fb93 f0f1 	sdiv	r0, r3, r1
 8023dd4:	b284      	uxth	r4, r0
 8023dd6:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8023dda:	b280      	uxth	r0, r0
 8023ddc:	9402      	str	r4, [sp, #8]
 8023dde:	9d02      	ldr	r5, [sp, #8]
 8023de0:	9c00      	ldr	r4, [sp, #0]
 8023de2:	fb05 3514 	mls	r5, r5, r4, r3
 8023de6:	fb15 f502 	smulbb	r5, r5, r2
 8023dea:	440d      	add	r5, r1
 8023dec:	b2ad      	uxth	r5, r5
 8023dee:	2800      	cmp	r0, #0
 8023df0:	d071      	beq.n	8023ed6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x17a>
 8023df2:	1e42      	subs	r2, r0, #1
 8023df4:	9806      	ldr	r0, [sp, #24]
 8023df6:	f850 8022 	ldr.w	r8, [r0, r2, lsl #2]
 8023dfa:	9a07      	ldr	r2, [sp, #28]
 8023dfc:	fa98 f888 	rev.w	r8, r8
 8023e00:	4490      	add	r8, r2
 8023e02:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 8023e06:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 8023e0a:	4411      	add	r1, r2
 8023e0c:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8023e10:	f8df b348 	ldr.w	fp, [pc, #840]	@ 802415c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 8023e14:	4413      	add	r3, r2
 8023e16:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 8023e1a:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8023e1e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8023e22:	9301      	str	r3, [sp, #4]
 8023e24:	4bcb      	ldr	r3, [pc, #812]	@ (8024154 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3f8>)
 8023e26:	6818      	ldr	r0, [r3, #0]
 8023e28:	6803      	ldr	r3, [r0, #0]
 8023e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023e2c:	4798      	blx	r3
 8023e2e:	4bca      	ldr	r3, [pc, #808]	@ (8024158 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3fc>)
 8023e30:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8023e34:	881b      	ldrh	r3, [r3, #0]
 8023e36:	f9bd 7032 	ldrsh.w	r7, [sp, #50]	@ 0x32
 8023e3a:	fb03 2707 	mla	r7, r3, r7, r2
 8023e3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8023e42:	4363      	muls	r3, r4
 8023e44:	2400      	movs	r4, #0
 8023e46:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023e4a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023e4e:	4621      	mov	r1, r4
 8023e50:	4407      	add	r7, r0
 8023e52:	18fb      	adds	r3, r7, r3
 8023e54:	9309      	str	r3, [sp, #36]	@ 0x24
 8023e56:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8023e5a:	fb95 f3f3 	sdiv	r3, r5, r3
 8023e5e:	9304      	str	r3, [sp, #16]
 8023e60:	f109 0304 	add.w	r3, r9, #4
 8023e64:	4618      	mov	r0, r3
 8023e66:	9308      	str	r3, [sp, #32]
 8023e68:	f008 fc0a 	bl	802c680 <memset>
 8023e6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023e6e:	42bb      	cmp	r3, r7
 8023e70:	f240 8223 	bls.w	80242ba <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x55e>
 8023e74:	2003      	movs	r0, #3
 8023e76:	f04f 0c07 	mov.w	ip, #7
 8023e7a:	f04f 0e0b 	mov.w	lr, #11
 8023e7e:	2d00      	cmp	r5, #0
 8023e80:	f000 813c 	beq.w	80240fc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a0>
 8023e84:	f898 3000 	ldrb.w	r3, [r8]
 8023e88:	b2db      	uxtb	r3, r3
 8023e8a:	2bfe      	cmp	r3, #254	@ 0xfe
 8023e8c:	d126      	bne.n	8023edc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x180>
 8023e8e:	f898 1001 	ldrb.w	r1, [r8, #1]
 8023e92:	f108 0604 	add.w	r6, r8, #4
 8023e96:	f898 2002 	ldrb.w	r2, [r8, #2]
 8023e9a:	3d01      	subs	r5, #1
 8023e9c:	b2c9      	uxtb	r1, r1
 8023e9e:	f898 8003 	ldrb.w	r8, [r8, #3]
 8023ea2:	b2d2      	uxtb	r2, r2
 8023ea4:	f361 0407 	bfi	r4, r1, #0, #8
 8023ea8:	fa5f f888 	uxtb.w	r8, r8
 8023eac:	b2ad      	uxth	r5, r5
 8023eae:	f362 240f 	bfi	r4, r2, #8, #8
 8023eb2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8023eb6:	fb10 2208 	smlabb	r2, r0, r8, r2
 8023eba:	f368 4417 	bfi	r4, r8, #16, #8
 8023ebe:	fb1c 2201 	smlabb	r2, ip, r1, r2
 8023ec2:	0e23      	lsrs	r3, r4, #24
 8023ec4:	fb1e 2303 	smlabb	r3, lr, r3, r2
 8023ec8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8023ecc:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8023ed0:	605c      	str	r4, [r3, #4]
 8023ed2:	46b0      	mov	r8, r6
 8023ed4:	e7d3      	b.n	8023e7e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x122>
 8023ed6:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8023eda:	e792      	b.n	8023e02 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xa6>
 8023edc:	2bff      	cmp	r3, #255	@ 0xff
 8023ede:	d127      	bne.n	8023f30 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1d4>
 8023ee0:	f898 2001 	ldrb.w	r2, [r8, #1]
 8023ee4:	f108 0605 	add.w	r6, r8, #5
 8023ee8:	f898 3002 	ldrb.w	r3, [r8, #2]
 8023eec:	3d01      	subs	r5, #1
 8023eee:	b2d2      	uxtb	r2, r2
 8023ef0:	f898 1003 	ldrb.w	r1, [r8, #3]
 8023ef4:	b2db      	uxtb	r3, r3
 8023ef6:	f898 8004 	ldrb.w	r8, [r8, #4]
 8023efa:	f362 0407 	bfi	r4, r2, #0, #8
 8023efe:	b2c9      	uxtb	r1, r1
 8023f00:	fa5f f888 	uxtb.w	r8, r8
 8023f04:	f363 240f 	bfi	r4, r3, #8, #8
 8023f08:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8023f0c:	b2ad      	uxth	r5, r5
 8023f0e:	fb10 3301 	smlabb	r3, r0, r1, r3
 8023f12:	f361 4417 	bfi	r4, r1, #16, #8
 8023f16:	fb1c 3302 	smlabb	r3, ip, r2, r3
 8023f1a:	f368 641f 	bfi	r4, r8, #24, #8
 8023f1e:	fb1e 3808 	smlabb	r8, lr, r8, r3
 8023f22:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 8023f26:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 8023f2a:	f8c8 4004 	str.w	r4, [r8, #4]
 8023f2e:	e7d0      	b.n	8023ed2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 8023f30:	119a      	asrs	r2, r3, #6
 8023f32:	f108 0601 	add.w	r6, r8, #1
 8023f36:	d107      	bne.n	8023f48 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1ec>
 8023f38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8023f3c:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8023f40:	685c      	ldr	r4, [r3, #4]
 8023f42:	3d01      	subs	r5, #1
 8023f44:	b2ad      	uxth	r5, r5
 8023f46:	e7c4      	b.n	8023ed2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 8023f48:	2a01      	cmp	r2, #1
 8023f4a:	d129      	bne.n	8023fa0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x244>
 8023f4c:	f003 0203 	and.w	r2, r3, #3
 8023f50:	1ea1      	subs	r1, r4, #2
 8023f52:	4411      	add	r1, r2
 8023f54:	f3c3 0281 	ubfx	r2, r3, #2, #2
 8023f58:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8023f5c:	b2c9      	uxtb	r1, r1
 8023f5e:	3a02      	subs	r2, #2
 8023f60:	3b02      	subs	r3, #2
 8023f62:	f361 0407 	bfi	r4, r1, #0, #8
 8023f66:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8023f6a:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8023f6e:	f362 240f 	bfi	r4, r2, #8, #8
 8023f72:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8023f76:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8023f7a:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 8023f7e:	fb10 2203 	smlabb	r2, r0, r3, r2
 8023f82:	f363 4417 	bfi	r4, r3, #16, #8
 8023f86:	fb1c 2201 	smlabb	r2, ip, r1, r2
 8023f8a:	ea4f 6814 	mov.w	r8, r4, lsr #24
 8023f8e:	fb1e 2808 	smlabb	r8, lr, r8, r2
 8023f92:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 8023f96:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 8023f9a:	f8c8 4004 	str.w	r4, [r8, #4]
 8023f9e:	e7d0      	b.n	8023f42 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 8023fa0:	2a02      	cmp	r2, #2
 8023fa2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8023fa6:	d12e      	bne.n	8024006 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2aa>
 8023fa8:	f898 2001 	ldrb.w	r2, [r8, #1]
 8023fac:	f1a3 0a20 	sub.w	sl, r3, #32
 8023fb0:	f108 0602 	add.w	r6, r8, #2
 8023fb4:	b2d2      	uxtb	r2, r2
 8023fb6:	f002 010f 	and.w	r1, r2, #15
 8023fba:	1112      	asrs	r2, r2, #4
 8023fbc:	3908      	subs	r1, #8
 8023fbe:	3a08      	subs	r2, #8
 8023fc0:	4451      	add	r1, sl
 8023fc2:	4492      	add	sl, r2
 8023fc4:	4421      	add	r1, r4
 8023fc6:	b2c9      	uxtb	r1, r1
 8023fc8:	f361 0407 	bfi	r4, r1, #0, #8
 8023fcc:	f3c4 2807 	ubfx	r8, r4, #8, #8
 8023fd0:	f1a8 0820 	sub.w	r8, r8, #32
 8023fd4:	4443      	add	r3, r8
 8023fd6:	b2db      	uxtb	r3, r3
 8023fd8:	f363 240f 	bfi	r4, r3, #8, #8
 8023fdc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8023fe0:	eb0a 4a14 	add.w	sl, sl, r4, lsr #16
 8023fe4:	f00a 0aff 	and.w	sl, sl, #255	@ 0xff
 8023fe8:	fb10 330a 	smlabb	r3, r0, sl, r3
 8023fec:	f36a 4417 	bfi	r4, sl, #16, #8
 8023ff0:	fb1c 3301 	smlabb	r3, ip, r1, r3
 8023ff4:	0e22      	lsrs	r2, r4, #24
 8023ff6:	fb1e 3202 	smlabb	r2, lr, r2, r3
 8023ffa:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8023ffe:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8024002:	6054      	str	r4, [r2, #4]
 8024004:	e79d      	b.n	8023f42 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 8024006:	3301      	adds	r3, #1
 8024008:	42ab      	cmp	r3, r5
 802400a:	dd59      	ble.n	80240c0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x364>
 802400c:	1b5d      	subs	r5, r3, r5
 802400e:	2d00      	cmp	r5, #0
 8024010:	dc58      	bgt.n	80240c4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x368>
 8024012:	f8dd a004 	ldr.w	sl, [sp, #4]
 8024016:	f04f 0800 	mov.w	r8, #0
 802401a:	f1ba 0f00 	cmp.w	sl, #0
 802401e:	f340 8108 	ble.w	8024232 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4d6>
 8024022:	1c73      	adds	r3, r6, #1
 8024024:	9303      	str	r3, [sp, #12]
 8024026:	7833      	ldrb	r3, [r6, #0]
 8024028:	b2db      	uxtb	r3, r3
 802402a:	2bfe      	cmp	r3, #254	@ 0xfe
 802402c:	d16a      	bne.n	8024104 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a8>
 802402e:	7871      	ldrb	r1, [r6, #1]
 8024030:	1d33      	adds	r3, r6, #4
 8024032:	78b2      	ldrb	r2, [r6, #2]
 8024034:	b2c9      	uxtb	r1, r1
 8024036:	78f0      	ldrb	r0, [r6, #3]
 8024038:	b2d2      	uxtb	r2, r2
 802403a:	9303      	str	r3, [sp, #12]
 802403c:	f361 0407 	bfi	r4, r1, #0, #8
 8024040:	b2c0      	uxtb	r0, r0
 8024042:	2303      	movs	r3, #3
 8024044:	f362 240f 	bfi	r4, r2, #8, #8
 8024048:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 802404c:	fb13 2200 	smlabb	r2, r3, r0, r2
 8024050:	f360 4417 	bfi	r4, r0, #16, #8
 8024054:	2307      	movs	r3, #7
 8024056:	0e25      	lsrs	r5, r4, #24
 8024058:	fb13 2101 	smlabb	r1, r3, r1, r2
 802405c:	230b      	movs	r3, #11
 802405e:	fb13 1305 	smlabb	r3, r3, r5, r1
 8024062:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8024066:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 802406a:	605c      	str	r4, [r3, #4]
 802406c:	2501      	movs	r5, #1
 802406e:	462e      	mov	r6, r5
 8024070:	eb06 0308 	add.w	r3, r6, r8
 8024074:	ebaa 0a06 	sub.w	sl, sl, r6
 8024078:	1bad      	subs	r5, r5, r6
 802407a:	2b40      	cmp	r3, #64	@ 0x40
 802407c:	dd16      	ble.n	80240ac <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x350>
 802407e:	4658      	mov	r0, fp
 8024080:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8024084:	f7f3 fcb0 	bl	80179e8 <_ZN8touchgfx5paint9flushLineEPmi>
 8024088:	4659      	mov	r1, fp
 802408a:	9b05      	ldr	r3, [sp, #20]
 802408c:	4642      	mov	r2, r8
 802408e:	4638      	mov	r0, r7
 8024090:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8024094:	f7f3 fd86 	bl	8017ba4 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 8024098:	4b30      	ldr	r3, [pc, #192]	@ (802415c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>)
 802409a:	4447      	add	r7, r8
 802409c:	f04f 0800 	mov.w	r8, #0
 80240a0:	459b      	cmp	fp, r3
 80240a2:	bf0c      	ite	eq
 80240a4:	f8df b0b8 	ldreq.w	fp, [pc, #184]	@ 8024160 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x404>
 80240a8:	f8df b0b0 	ldrne.w	fp, [pc, #176]	@ 802415c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 80240ac:	eb0b 0288 	add.w	r2, fp, r8, lsl #2
 80240b0:	4633      	mov	r3, r6
 80240b2:	3b01      	subs	r3, #1
 80240b4:	f842 4b04 	str.w	r4, [r2], #4
 80240b8:	d1fb      	bne.n	80240b2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x356>
 80240ba:	44b0      	add	r8, r6
 80240bc:	9e03      	ldr	r6, [sp, #12]
 80240be:	e7ac      	b.n	802401a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2be>
 80240c0:	1aed      	subs	r5, r5, r3
 80240c2:	e73f      	b.n	8023f44 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e8>
 80240c4:	9b01      	ldr	r3, [sp, #4]
 80240c6:	42ab      	cmp	r3, r5
 80240c8:	bfa8      	it	ge
 80240ca:	462b      	movge	r3, r5
 80240cc:	4698      	mov	r8, r3
 80240ce:	9b01      	ldr	r3, [sp, #4]
 80240d0:	eba3 0a08 	sub.w	sl, r3, r8
 80240d4:	0e23      	lsrs	r3, r4, #24
 80240d6:	eba5 0508 	sub.w	r5, r5, r8
 80240da:	d00b      	beq.n	80240f4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x398>
 80240dc:	9a05      	ldr	r2, [sp, #20]
 80240de:	4641      	mov	r1, r8
 80240e0:	4638      	mov	r0, r7
 80240e2:	4353      	muls	r3, r2
 80240e4:	1c5a      	adds	r2, r3, #1
 80240e6:	eb02 2323 	add.w	r3, r2, r3, asr #8
 80240ea:	4622      	mov	r2, r4
 80240ec:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80240f0:	f7f3 fcb8 	bl	8017a64 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 80240f4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80240f8:	4447      	add	r7, r8
 80240fa:	e78c      	b.n	8024016 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 80240fc:	f8dd a004 	ldr.w	sl, [sp, #4]
 8024100:	4646      	mov	r6, r8
 8024102:	e788      	b.n	8024016 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 8024104:	2bff      	cmp	r3, #255	@ 0xff
 8024106:	d11d      	bne.n	8024144 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e8>
 8024108:	7870      	ldrb	r0, [r6, #1]
 802410a:	1d73      	adds	r3, r6, #5
 802410c:	78b2      	ldrb	r2, [r6, #2]
 802410e:	b2c0      	uxtb	r0, r0
 8024110:	78f5      	ldrb	r5, [r6, #3]
 8024112:	b2d2      	uxtb	r2, r2
 8024114:	9303      	str	r3, [sp, #12]
 8024116:	f360 0407 	bfi	r4, r0, #0, #8
 802411a:	7933      	ldrb	r3, [r6, #4]
 802411c:	b2ed      	uxtb	r5, r5
 802411e:	b2d9      	uxtb	r1, r3
 8024120:	f362 240f 	bfi	r4, r2, #8, #8
 8024124:	2303      	movs	r3, #3
 8024126:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 802412a:	f365 4417 	bfi	r4, r5, #16, #8
 802412e:	fb13 2205 	smlabb	r2, r3, r5, r2
 8024132:	2307      	movs	r3, #7
 8024134:	f361 641f 	bfi	r4, r1, #24, #8
 8024138:	fb13 2000 	smlabb	r0, r3, r0, r2
 802413c:	230b      	movs	r3, #11
 802413e:	fb13 0301 	smlabb	r3, r3, r1, r0
 8024142:	e78e      	b.n	8024062 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x306>
 8024144:	119d      	asrs	r5, r3, #6
 8024146:	d10d      	bne.n	8024164 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x408>
 8024148:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 802414c:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8024150:	685c      	ldr	r4, [r3, #4]
 8024152:	e78b      	b.n	802406c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 8024154:	2403422c 	.word	0x2403422c
 8024158:	24034226 	.word	0x24034226
 802415c:	24000120 	.word	0x24000120
 8024160:	24000220 	.word	0x24000220
 8024164:	2d01      	cmp	r5, #1
 8024166:	d12a      	bne.n	80241be <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x462>
 8024168:	f003 0203 	and.w	r2, r3, #3
 802416c:	1ea1      	subs	r1, r4, #2
 802416e:	2603      	movs	r6, #3
 8024170:	4411      	add	r1, r2
 8024172:	f3c3 0281 	ubfx	r2, r3, #2, #2
 8024176:	f3c3 1301 	ubfx	r3, r3, #4, #2
 802417a:	b2c9      	uxtb	r1, r1
 802417c:	3a02      	subs	r2, #2
 802417e:	3b02      	subs	r3, #2
 8024180:	f361 0407 	bfi	r4, r1, #0, #8
 8024184:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8024188:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 802418c:	f362 240f 	bfi	r4, r2, #8, #8
 8024190:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8024194:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8024198:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 802419c:	fb16 2203 	smlabb	r2, r6, r3, r2
 80241a0:	f363 4417 	bfi	r4, r3, #16, #8
 80241a4:	2307      	movs	r3, #7
 80241a6:	0e20      	lsrs	r0, r4, #24
 80241a8:	fb13 2101 	smlabb	r1, r3, r1, r2
 80241ac:	230b      	movs	r3, #11
 80241ae:	fb13 1300 	smlabb	r3, r3, r0, r1
 80241b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80241b6:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80241ba:	605c      	str	r4, [r3, #4]
 80241bc:	e757      	b.n	802406e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x312>
 80241be:	2d02      	cmp	r5, #2
 80241c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80241c4:	d12f      	bne.n	8024226 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4ca>
 80241c6:	1cb2      	adds	r2, r6, #2
 80241c8:	f1a3 0020 	sub.w	r0, r3, #32
 80241cc:	9203      	str	r2, [sp, #12]
 80241ce:	7872      	ldrb	r2, [r6, #1]
 80241d0:	b2d2      	uxtb	r2, r2
 80241d2:	f002 010f 	and.w	r1, r2, #15
 80241d6:	1112      	asrs	r2, r2, #4
 80241d8:	3908      	subs	r1, #8
 80241da:	3a08      	subs	r2, #8
 80241dc:	4401      	add	r1, r0
 80241de:	4402      	add	r2, r0
 80241e0:	4421      	add	r1, r4
 80241e2:	b2c9      	uxtb	r1, r1
 80241e4:	f361 0407 	bfi	r4, r1, #0, #8
 80241e8:	f3c4 2507 	ubfx	r5, r4, #8, #8
 80241ec:	3d20      	subs	r5, #32
 80241ee:	442b      	add	r3, r5
 80241f0:	2503      	movs	r5, #3
 80241f2:	b2db      	uxtb	r3, r3
 80241f4:	f363 240f 	bfi	r4, r3, #8, #8
 80241f8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80241fc:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 8024200:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8024204:	fb15 3302 	smlabb	r3, r5, r2, r3
 8024208:	f362 4417 	bfi	r4, r2, #16, #8
 802420c:	2207      	movs	r2, #7
 802420e:	0e20      	lsrs	r0, r4, #24
 8024210:	fb12 3201 	smlabb	r2, r2, r1, r3
 8024214:	210b      	movs	r1, #11
 8024216:	fb11 2100 	smlabb	r1, r1, r0, r2
 802421a:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 802421e:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8024222:	604c      	str	r4, [r1, #4]
 8024224:	e722      	b.n	802406c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 8024226:	1c5d      	adds	r5, r3, #1
 8024228:	4656      	mov	r6, sl
 802422a:	45aa      	cmp	sl, r5
 802422c:	bfa8      	it	ge
 802422e:	462e      	movge	r6, r5
 8024230:	e71e      	b.n	8024070 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x314>
 8024232:	f1b8 0f00 	cmp.w	r8, #0
 8024236:	d00d      	beq.n	8024254 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4f8>
 8024238:	ea4f 0188 	mov.w	r1, r8, lsl #2
 802423c:	4658      	mov	r0, fp
 802423e:	f7f3 fbd3 	bl	80179e8 <_ZN8touchgfx5paint9flushLineEPmi>
 8024242:	4642      	mov	r2, r8
 8024244:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8024248:	4638      	mov	r0, r7
 802424a:	9b05      	ldr	r3, [sp, #20]
 802424c:	4659      	mov	r1, fp
 802424e:	4447      	add	r7, r8
 8024250:	f7f3 fca8 	bl	8017ba4 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 8024254:	4b1d      	ldr	r3, [pc, #116]	@ (80242cc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x570>)
 8024256:	9a01      	ldr	r2, [sp, #4]
 8024258:	881b      	ldrh	r3, [r3, #0]
 802425a:	1a9b      	subs	r3, r3, r2
 802425c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024260:	441f      	add	r7, r3
 8024262:	9b04      	ldr	r3, [sp, #16]
 8024264:	3301      	adds	r3, #1
 8024266:	9304      	str	r3, [sp, #16]
 8024268:	9a04      	ldr	r2, [sp, #16]
 802426a:	9b00      	ldr	r3, [sp, #0]
 802426c:	4293      	cmp	r3, r2
 802426e:	d11d      	bne.n	80242ac <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x550>
 8024270:	9b02      	ldr	r3, [sp, #8]
 8024272:	2400      	movs	r4, #0
 8024274:	9a02      	ldr	r2, [sp, #8]
 8024276:	f103 0801 	add.w	r8, r3, #1
 802427a:	9b06      	ldr	r3, [sp, #24]
 802427c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8024280:	4621      	mov	r1, r4
 8024282:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8024286:	f44f 7280 	mov.w	r2, #256	@ 0x100
 802428a:	9b07      	ldr	r3, [sp, #28]
 802428c:	ba36      	rev	r6, r6
 802428e:	9808      	ldr	r0, [sp, #32]
 8024290:	441e      	add	r6, r3
 8024292:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8024296:	1aed      	subs	r5, r5, r3
 8024298:	f008 f9f2 	bl	802c680 <memset>
 802429c:	f8cd 8008 	str.w	r8, [sp, #8]
 80242a0:	b2ad      	uxth	r5, r5
 80242a2:	9404      	str	r4, [sp, #16]
 80242a4:	f7f3 fb88 	bl	80179b8 <_ZN8touchgfx5paint8tearDownEv>
 80242a8:	46b0      	mov	r8, r6
 80242aa:	e5df      	b.n	8023e6c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x110>
 80242ac:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80242b0:	9a01      	ldr	r2, [sp, #4]
 80242b2:	1a9b      	subs	r3, r3, r2
 80242b4:	1b5d      	subs	r5, r3, r5
 80242b6:	b2ad      	uxth	r5, r5
 80242b8:	e7f4      	b.n	80242a4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x548>
 80242ba:	4b05      	ldr	r3, [pc, #20]	@ (80242d0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x574>)
 80242bc:	6818      	ldr	r0, [r3, #0]
 80242be:	6803      	ldr	r3, [r0, #0]
 80242c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80242c2:	4798      	blx	r3
 80242c4:	b00f      	add	sp, #60	@ 0x3c
 80242c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80242ca:	bf00      	nop
 80242cc:	24034226 	.word	0x24034226
 80242d0:	2403422c 	.word	0x2403422c

080242d4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h>:
 80242d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80242d8:	b093      	sub	sp, #76	@ 0x4c
 80242da:	460d      	mov	r5, r1
 80242dc:	4616      	mov	r6, r2
 80242de:	f89d b070 	ldrb.w	fp, [sp, #112]	@ 0x70
 80242e2:	9000      	str	r0, [sp, #0]
 80242e4:	f1bb 0f00 	cmp.w	fp, #0
 80242e8:	f000 82ac 	beq.w	8024844 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x570>
 80242ec:	6810      	ldr	r0, [r2, #0]
 80242ee:	ac0e      	add	r4, sp, #56	@ 0x38
 80242f0:	6851      	ldr	r1, [r2, #4]
 80242f2:	c403      	stmia	r4!, {r0, r1}
 80242f4:	6818      	ldr	r0, [r3, #0]
 80242f6:	ac10      	add	r4, sp, #64	@ 0x40
 80242f8:	6859      	ldr	r1, [r3, #4]
 80242fa:	c403      	stmia	r4!, {r0, r1}
 80242fc:	a80e      	add	r0, sp, #56	@ 0x38
 80242fe:	f7f9 fc15 	bl	801db2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024302:	4631      	mov	r1, r6
 8024304:	a810      	add	r0, sp, #64	@ 0x40
 8024306:	f7f9 fc39 	bl	801db7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802430a:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 802430e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8024312:	bfdb      	ittet	le
 8024314:	b293      	uxthle	r3, r2
 8024316:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 802431a:	2301      	movgt	r3, #1
 802431c:	fb91 f3f3 	sdivle	r3, r1, r3
 8024320:	9301      	str	r3, [sp, #4]
 8024322:	f105 0308 	add.w	r3, r5, #8
 8024326:	9901      	ldr	r1, [sp, #4]
 8024328:	9305      	str	r3, [sp, #20]
 802432a:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 802432e:	440b      	add	r3, r1
 8024330:	3b01      	subs	r3, #1
 8024332:	fb93 f3f1 	sdiv	r3, r3, r1
 8024336:	3b01      	subs	r3, #1
 8024338:	9905      	ldr	r1, [sp, #20]
 802433a:	b29b      	uxth	r3, r3
 802433c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8024340:	9901      	ldr	r1, [sp, #4]
 8024342:	9306      	str	r3, [sp, #24]
 8024344:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 8024348:	fb93 f0f1 	sdiv	r0, r3, r1
 802434c:	b284      	uxth	r4, r0
 802434e:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8024352:	9403      	str	r4, [sp, #12]
 8024354:	9d03      	ldr	r5, [sp, #12]
 8024356:	9c01      	ldr	r4, [sp, #4]
 8024358:	fb05 3714 	mls	r7, r5, r4, r3
 802435c:	fb17 f702 	smulbb	r7, r7, r2
 8024360:	440f      	add	r7, r1
 8024362:	b2bf      	uxth	r7, r7
 8024364:	2d00      	cmp	r5, #0
 8024366:	d06b      	beq.n	8024440 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x16c>
 8024368:	1e6a      	subs	r2, r5, #1
 802436a:	9805      	ldr	r0, [sp, #20]
 802436c:	f850 9022 	ldr.w	r9, [r0, r2, lsl #2]
 8024370:	9a06      	ldr	r2, [sp, #24]
 8024372:	fa99 f989 	rev.w	r9, r9
 8024376:	4491      	add	r9, r2
 8024378:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 802437c:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 8024380:	4411      	add	r1, r2
 8024382:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8024386:	f8df a35c 	ldr.w	sl, [pc, #860]	@ 80246e4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x410>
 802438a:	4413      	add	r3, r2
 802438c:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8024390:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 8024394:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 8024398:	9302      	str	r3, [sp, #8]
 802439a:	4bd0      	ldr	r3, [pc, #832]	@ (80246dc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x408>)
 802439c:	6818      	ldr	r0, [r3, #0]
 802439e:	6803      	ldr	r3, [r0, #0]
 80243a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80243a2:	4798      	blx	r3
 80243a4:	4bce      	ldr	r3, [pc, #824]	@ (80246e0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x40c>)
 80243a6:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 80243aa:	881b      	ldrh	r3, [r3, #0]
 80243ac:	f9bd 4042 	ldrsh.w	r4, [sp, #66]	@ 0x42
 80243b0:	fb03 2404 	mla	r4, r3, r4, r2
 80243b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80243b8:	436b      	muls	r3, r5
 80243ba:	2500      	movs	r5, #0
 80243bc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80243c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80243c4:	4629      	mov	r1, r5
 80243c6:	4404      	add	r4, r0
 80243c8:	18e3      	adds	r3, r4, r3
 80243ca:	930d      	str	r3, [sp, #52]	@ 0x34
 80243cc:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 80243d0:	fb97 f3f3 	sdiv	r3, r7, r3
 80243d4:	9304      	str	r3, [sp, #16]
 80243d6:	9b00      	ldr	r3, [sp, #0]
 80243d8:	3304      	adds	r3, #4
 80243da:	4618      	mov	r0, r3
 80243dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80243de:	f008 f94f 	bl	802c680 <memset>
 80243e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80243e4:	42a3      	cmp	r3, r4
 80243e6:	f240 8228 	bls.w	802483a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x566>
 80243ea:	2003      	movs	r0, #3
 80243ec:	2607      	movs	r6, #7
 80243ee:	2f00      	cmp	r7, #0
 80243f0:	f000 80cb 	beq.w	802458a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2b6>
 80243f4:	f899 3000 	ldrb.w	r3, [r9]
 80243f8:	b2db      	uxtb	r3, r3
 80243fa:	2bfe      	cmp	r3, #254	@ 0xfe
 80243fc:	d123      	bne.n	8024446 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x172>
 80243fe:	f899 3001 	ldrb.w	r3, [r9, #1]
 8024402:	3f01      	subs	r7, #1
 8024404:	f899 2002 	ldrb.w	r2, [r9, #2]
 8024408:	f109 0804 	add.w	r8, r9, #4
 802440c:	b2db      	uxtb	r3, r3
 802440e:	f899 1003 	ldrb.w	r1, [r9, #3]
 8024412:	b2d2      	uxtb	r2, r2
 8024414:	f363 0507 	bfi	r5, r3, #0, #8
 8024418:	b2c9      	uxtb	r1, r1
 802441a:	b2bf      	uxth	r7, r7
 802441c:	f362 250f 	bfi	r5, r2, #8, #8
 8024420:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8024424:	fb10 2201 	smlabb	r2, r0, r1, r2
 8024428:	f361 4517 	bfi	r5, r1, #16, #8
 802442c:	fb16 2303 	smlabb	r3, r6, r3, r2
 8024430:	9a00      	ldr	r2, [sp, #0]
 8024432:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8024436:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802443a:	605d      	str	r5, [r3, #4]
 802443c:	46c1      	mov	r9, r8
 802443e:	e7d6      	b.n	80243ee <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x11a>
 8024440:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8024444:	e798      	b.n	8024378 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0xa4>
 8024446:	119a      	asrs	r2, r3, #6
 8024448:	f109 0801 	add.w	r8, r9, #1
 802444c:	d108      	bne.n	8024460 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x18c>
 802444e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8024452:	9a00      	ldr	r2, [sp, #0]
 8024454:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8024458:	685d      	ldr	r5, [r3, #4]
 802445a:	3f01      	subs	r7, #1
 802445c:	b2bf      	uxth	r7, r7
 802445e:	e7ed      	b.n	802443c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x168>
 8024460:	2a01      	cmp	r2, #1
 8024462:	d125      	bne.n	80244b0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x1dc>
 8024464:	f003 0103 	and.w	r1, r3, #3
 8024468:	1eaa      	subs	r2, r5, #2
 802446a:	440a      	add	r2, r1
 802446c:	f3c3 0181 	ubfx	r1, r3, #2, #2
 8024470:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8024474:	b2d2      	uxtb	r2, r2
 8024476:	3902      	subs	r1, #2
 8024478:	3b02      	subs	r3, #2
 802447a:	f362 0507 	bfi	r5, r2, #0, #8
 802447e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8024482:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8024486:	f361 250f 	bfi	r5, r1, #8, #8
 802448a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 802448e:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 8024492:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 8024496:	fb10 1103 	smlabb	r1, r0, r3, r1
 802449a:	f363 4517 	bfi	r5, r3, #16, #8
 802449e:	9b00      	ldr	r3, [sp, #0]
 80244a0:	fb16 1202 	smlabb	r2, r6, r2, r1
 80244a4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80244a8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80244ac:	6055      	str	r5, [r2, #4]
 80244ae:	e7d4      	b.n	802445a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 80244b0:	2a02      	cmp	r2, #2
 80244b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80244b6:	d12c      	bne.n	8024512 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x23e>
 80244b8:	f899 2001 	ldrb.w	r2, [r9, #1]
 80244bc:	f1a3 0c20 	sub.w	ip, r3, #32
 80244c0:	f109 0802 	add.w	r8, r9, #2
 80244c4:	b2d2      	uxtb	r2, r2
 80244c6:	f002 010f 	and.w	r1, r2, #15
 80244ca:	1112      	asrs	r2, r2, #4
 80244cc:	3908      	subs	r1, #8
 80244ce:	3a08      	subs	r2, #8
 80244d0:	4461      	add	r1, ip
 80244d2:	4494      	add	ip, r2
 80244d4:	4429      	add	r1, r5
 80244d6:	b2c9      	uxtb	r1, r1
 80244d8:	f361 0507 	bfi	r5, r1, #0, #8
 80244dc:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 80244e0:	f1ae 0e20 	sub.w	lr, lr, #32
 80244e4:	4473      	add	r3, lr
 80244e6:	b2db      	uxtb	r3, r3
 80244e8:	f363 250f 	bfi	r5, r3, #8, #8
 80244ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80244f0:	eb0c 4c15 	add.w	ip, ip, r5, lsr #16
 80244f4:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 80244f8:	fb10 330c 	smlabb	r3, r0, ip, r3
 80244fc:	f36c 4517 	bfi	r5, ip, #16, #8
 8024500:	fb16 3101 	smlabb	r1, r6, r1, r3
 8024504:	9b00      	ldr	r3, [sp, #0]
 8024506:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 802450a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 802450e:	604d      	str	r5, [r1, #4]
 8024510:	e7a3      	b.n	802445a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 8024512:	3301      	adds	r3, #1
 8024514:	42bb      	cmp	r3, r7
 8024516:	dd23      	ble.n	8024560 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x28c>
 8024518:	eba3 0907 	sub.w	r9, r3, r7
 802451c:	f1b9 0f00 	cmp.w	r9, #0
 8024520:	dc20      	bgt.n	8024564 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x290>
 8024522:	9e02      	ldr	r6, [sp, #8]
 8024524:	2700      	movs	r7, #0
 8024526:	2e00      	cmp	r6, #0
 8024528:	f340 8142 	ble.w	80247b0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4dc>
 802452c:	f108 0301 	add.w	r3, r8, #1
 8024530:	9307      	str	r3, [sp, #28]
 8024532:	f898 3000 	ldrb.w	r3, [r8]
 8024536:	b2db      	uxtb	r3, r3
 8024538:	119a      	asrs	r2, r3, #6
 802453a:	d12a      	bne.n	8024592 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2be>
 802453c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8024540:	9a00      	ldr	r2, [sp, #0]
 8024542:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8024546:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802454a:	685d      	ldr	r5, [r3, #4]
 802454c:	f040 811f 	bne.w	802478e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 8024550:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8024554:	7025      	strb	r5, [r4, #0]
 8024556:	7063      	strb	r3, [r4, #1]
 8024558:	f3c5 4307 	ubfx	r3, r5, #16, #8
 802455c:	70a3      	strb	r3, [r4, #2]
 802455e:	e04e      	b.n	80245fe <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 8024560:	1aff      	subs	r7, r7, r3
 8024562:	e77b      	b.n	802445c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x188>
 8024564:	9b02      	ldr	r3, [sp, #8]
 8024566:	4620      	mov	r0, r4
 8024568:	462a      	mov	r2, r5
 802456a:	454b      	cmp	r3, r9
 802456c:	bfa8      	it	ge
 802456e:	464b      	movge	r3, r9
 8024570:	461f      	mov	r7, r3
 8024572:	9b02      	ldr	r3, [sp, #8]
 8024574:	4639      	mov	r1, r7
 8024576:	1bde      	subs	r6, r3, r7
 8024578:	eba9 0907 	sub.w	r9, r9, r7
 802457c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024580:	465b      	mov	r3, fp
 8024582:	f7f3 fa6f 	bl	8017a64 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 8024586:	443c      	add	r4, r7
 8024588:	e7cc      	b.n	8024524 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 802458a:	46c8      	mov	r8, r9
 802458c:	9e02      	ldr	r6, [sp, #8]
 802458e:	46b9      	mov	r9, r7
 8024590:	e7c8      	b.n	8024524 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 8024592:	2a01      	cmp	r2, #1
 8024594:	d136      	bne.n	8024604 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x330>
 8024596:	f003 0103 	and.w	r1, r3, #3
 802459a:	1ea8      	subs	r0, r5, #2
 802459c:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 80245a0:	4408      	add	r0, r1
 80245a2:	f3c3 0181 	ubfx	r1, r3, #2, #2
 80245a6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80245aa:	b2c0      	uxtb	r0, r0
 80245ac:	f1a1 0102 	sub.w	r1, r1, #2
 80245b0:	f1a3 0302 	sub.w	r3, r3, #2
 80245b4:	f360 0507 	bfi	r5, r0, #0, #8
 80245b8:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80245bc:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80245c0:	f361 250f 	bfi	r5, r1, #8, #8
 80245c4:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 80245c8:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 80245cc:	f003 08ff 	and.w	r8, r3, #255	@ 0xff
 80245d0:	f04f 0303 	mov.w	r3, #3
 80245d4:	fb13 ce08 	smlabb	lr, r3, r8, ip
 80245d8:	f04f 0c07 	mov.w	ip, #7
 80245dc:	9b00      	ldr	r3, [sp, #0]
 80245de:	f368 4517 	bfi	r5, r8, #16, #8
 80245e2:	fb1c ec00 	smlabb	ip, ip, r0, lr
 80245e6:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
 80245ea:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 80245ee:	f8cc 5004 	str.w	r5, [ip, #4]
 80245f2:	f040 80cd 	bne.w	8024790 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 80245f6:	7020      	strb	r0, [r4, #0]
 80245f8:	7061      	strb	r1, [r4, #1]
 80245fa:	f884 8002 	strb.w	r8, [r4, #2]
 80245fe:	3e01      	subs	r6, #1
 8024600:	3403      	adds	r4, #3
 8024602:	e0c1      	b.n	8024788 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 8024604:	2a02      	cmp	r2, #2
 8024606:	d13d      	bne.n	8024684 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x3b0>
 8024608:	f898 1001 	ldrb.w	r1, [r8, #1]
 802460c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8024610:	f108 0202 	add.w	r2, r8, #2
 8024614:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8024618:	b2c9      	uxtb	r1, r1
 802461a:	f1a3 0c20 	sub.w	ip, r3, #32
 802461e:	9207      	str	r2, [sp, #28]
 8024620:	f001 000f 	and.w	r0, r1, #15
 8024624:	f1a0 0008 	sub.w	r0, r0, #8
 8024628:	4460      	add	r0, ip
 802462a:	4428      	add	r0, r5
 802462c:	b2c0      	uxtb	r0, r0
 802462e:	f360 0507 	bfi	r5, r0, #0, #8
 8024632:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8024636:	f1a2 0220 	sub.w	r2, r2, #32
 802463a:	4413      	add	r3, r2
 802463c:	ea4f 1221 	mov.w	r2, r1, asr #4
 8024640:	b2db      	uxtb	r3, r3
 8024642:	f1a2 0208 	sub.w	r2, r2, #8
 8024646:	f363 250f 	bfi	r5, r3, #8, #8
 802464a:	4462      	add	r2, ip
 802464c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8024650:	f04f 0c03 	mov.w	ip, #3
 8024654:	eb02 4215 	add.w	r2, r2, r5, lsr #16
 8024658:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 802465c:	fb1c 1c02 	smlabb	ip, ip, r2, r1
 8024660:	f04f 0107 	mov.w	r1, #7
 8024664:	f362 4517 	bfi	r5, r2, #16, #8
 8024668:	fb11 c100 	smlabb	r1, r1, r0, ip
 802466c:	f001 0c3f 	and.w	ip, r1, #63	@ 0x3f
 8024670:	9900      	ldr	r1, [sp, #0]
 8024672:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 8024676:	604d      	str	r5, [r1, #4]
 8024678:	f040 8089 	bne.w	802478e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 802467c:	7020      	strb	r0, [r4, #0]
 802467e:	7063      	strb	r3, [r4, #1]
 8024680:	70a2      	strb	r2, [r4, #2]
 8024682:	e7bc      	b.n	80245fe <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 8024684:	2bfe      	cmp	r3, #254	@ 0xfe
 8024686:	d12f      	bne.n	80246e8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x414>
 8024688:	f898 0001 	ldrb.w	r0, [r8, #1]
 802468c:	f108 0304 	add.w	r3, r8, #4
 8024690:	f898 2002 	ldrb.w	r2, [r8, #2]
 8024694:	f04f 0c03 	mov.w	ip, #3
 8024698:	f898 1003 	ldrb.w	r1, [r8, #3]
 802469c:	b2c0      	uxtb	r0, r0
 802469e:	b2d2      	uxtb	r2, r2
 80246a0:	9307      	str	r3, [sp, #28]
 80246a2:	b2c9      	uxtb	r1, r1
 80246a4:	f360 0507 	bfi	r5, r0, #0, #8
 80246a8:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 80246ac:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 80246b0:	f362 250f 	bfi	r5, r2, #8, #8
 80246b4:	fb1c 3c01 	smlabb	ip, ip, r1, r3
 80246b8:	f04f 0307 	mov.w	r3, #7
 80246bc:	f361 4517 	bfi	r5, r1, #16, #8
 80246c0:	fb13 c300 	smlabb	r3, r3, r0, ip
 80246c4:	f003 0c3f 	and.w	ip, r3, #63	@ 0x3f
 80246c8:	9b00      	ldr	r3, [sp, #0]
 80246ca:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 80246ce:	605d      	str	r5, [r3, #4]
 80246d0:	d15d      	bne.n	802478e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 80246d2:	7020      	strb	r0, [r4, #0]
 80246d4:	7062      	strb	r2, [r4, #1]
 80246d6:	70a1      	strb	r1, [r4, #2]
 80246d8:	e791      	b.n	80245fe <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 80246da:	bf00      	nop
 80246dc:	2403422c 	.word	0x2403422c
 80246e0:	24034226 	.word	0x24034226
 80246e4:	24000120 	.word	0x24000120
 80246e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80246ec:	1c5a      	adds	r2, r3, #1
 80246ee:	b94b      	cbnz	r3, 8024704 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x430>
 80246f0:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 80246f4:	d14c      	bne.n	8024790 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 80246f6:	f3c5 2207 	ubfx	r2, r5, #8, #8
 80246fa:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80246fe:	7025      	strb	r5, [r4, #0]
 8024700:	7062      	strb	r2, [r4, #1]
 8024702:	e72b      	b.n	802455c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x288>
 8024704:	4296      	cmp	r6, r2
 8024706:	46b0      	mov	r8, r6
 8024708:	bfa8      	it	ge
 802470a:	4690      	movge	r8, r2
 802470c:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8024710:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8024714:	eba6 0608 	sub.w	r6, r6, r8
 8024718:	eba2 0908 	sub.w	r9, r2, r8
 802471c:	9308      	str	r3, [sp, #32]
 802471e:	b2eb      	uxtb	r3, r5
 8024720:	930c      	str	r3, [sp, #48]	@ 0x30
 8024722:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8024726:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024728:	f3c5 4307 	ubfx	r3, r5, #16, #8
 802472c:	930a      	str	r3, [sp, #40]	@ 0x28
 802472e:	9b08      	ldr	r3, [sp, #32]
 8024730:	d030      	beq.n	8024794 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c0>
 8024732:	18fb      	adds	r3, r7, r3
 8024734:	2bc0      	cmp	r3, #192	@ 0xc0
 8024736:	dd15      	ble.n	8024764 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x490>
 8024738:	4650      	mov	r0, sl
 802473a:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 802473e:	f7f3 f953 	bl	80179e8 <_ZN8touchgfx5paint9flushLineEPmi>
 8024742:	2203      	movs	r2, #3
 8024744:	4651      	mov	r1, sl
 8024746:	465b      	mov	r3, fp
 8024748:	4620      	mov	r0, r4
 802474a:	443c      	add	r4, r7
 802474c:	fb97 f2f2 	sdiv	r2, r7, r2
 8024750:	f7f3 f9dc 	bl	8017b0c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 8024754:	4b3d      	ldr	r3, [pc, #244]	@ (802484c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>)
 8024756:	2700      	movs	r7, #0
 8024758:	459a      	cmp	sl, r3
 802475a:	bf0c      	ite	eq
 802475c:	f8df a0f8 	ldreq.w	sl, [pc, #248]	@ 8024858 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x584>
 8024760:	f8df a0e8 	ldrne.w	sl, [pc, #232]	@ 802484c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>
 8024764:	eb0a 0307 	add.w	r3, sl, r7
 8024768:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802476a:	f1b8 0801 	subs.w	r8, r8, #1
 802476e:	f103 0303 	add.w	r3, r3, #3
 8024772:	f803 2c03 	strb.w	r2, [r3, #-3]
 8024776:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8024778:	f803 2c02 	strb.w	r2, [r3, #-2]
 802477c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802477e:	f803 2c01 	strb.w	r2, [r3, #-1]
 8024782:	d1f1      	bne.n	8024768 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x494>
 8024784:	9b08      	ldr	r3, [sp, #32]
 8024786:	441f      	add	r7, r3
 8024788:	f8dd 801c 	ldr.w	r8, [sp, #28]
 802478c:	e6cb      	b.n	8024526 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x252>
 802478e:	2201      	movs	r2, #1
 8024790:	4690      	mov	r8, r2
 8024792:	e7bb      	b.n	802470c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x438>
 8024794:	4423      	add	r3, r4
 8024796:	42a3      	cmp	r3, r4
 8024798:	d9f6      	bls.n	8024788 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 802479a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802479c:	3403      	adds	r4, #3
 802479e:	f804 2c03 	strb.w	r2, [r4, #-3]
 80247a2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80247a4:	f804 2c02 	strb.w	r2, [r4, #-2]
 80247a8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80247aa:	f804 2c01 	strb.w	r2, [r4, #-1]
 80247ae:	e7f2      	b.n	8024796 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c2>
 80247b0:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 80247b4:	d00e      	beq.n	80247d4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 80247b6:	b16f      	cbz	r7, 80247d4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 80247b8:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 80247bc:	4650      	mov	r0, sl
 80247be:	f7f3 f913 	bl	80179e8 <_ZN8touchgfx5paint9flushLineEPmi>
 80247c2:	2203      	movs	r2, #3
 80247c4:	4620      	mov	r0, r4
 80247c6:	443c      	add	r4, r7
 80247c8:	465b      	mov	r3, fp
 80247ca:	4651      	mov	r1, sl
 80247cc:	fb97 f2f2 	sdiv	r2, r7, r2
 80247d0:	f7f3 f99c 	bl	8017b0c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 80247d4:	4b1e      	ldr	r3, [pc, #120]	@ (8024850 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x57c>)
 80247d6:	9a02      	ldr	r2, [sp, #8]
 80247d8:	881b      	ldrh	r3, [r3, #0]
 80247da:	1a9b      	subs	r3, r3, r2
 80247dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80247e0:	441c      	add	r4, r3
 80247e2:	9b04      	ldr	r3, [sp, #16]
 80247e4:	3301      	adds	r3, #1
 80247e6:	9304      	str	r3, [sp, #16]
 80247e8:	9a04      	ldr	r2, [sp, #16]
 80247ea:	9b01      	ldr	r3, [sp, #4]
 80247ec:	4293      	cmp	r3, r2
 80247ee:	d11c      	bne.n	802482a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x556>
 80247f0:	9b03      	ldr	r3, [sp, #12]
 80247f2:	2500      	movs	r5, #0
 80247f4:	9a03      	ldr	r2, [sp, #12]
 80247f6:	1c5e      	adds	r6, r3, #1
 80247f8:	9b05      	ldr	r3, [sp, #20]
 80247fa:	f8bd 7040 	ldrh.w	r7, [sp, #64]	@ 0x40
 80247fe:	4629      	mov	r1, r5
 8024800:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 8024804:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8024808:	9b06      	ldr	r3, [sp, #24]
 802480a:	fa98 f888 	rev.w	r8, r8
 802480e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024810:	4498      	add	r8, r3
 8024812:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8024816:	1aff      	subs	r7, r7, r3
 8024818:	f007 ff32 	bl	802c680 <memset>
 802481c:	b2bf      	uxth	r7, r7
 802481e:	e9cd 6503 	strd	r6, r5, [sp, #12]
 8024822:	f7f3 f8c9 	bl	80179b8 <_ZN8touchgfx5paint8tearDownEv>
 8024826:	46c1      	mov	r9, r8
 8024828:	e5db      	b.n	80243e2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x10e>
 802482a:	f8bd 703c 	ldrh.w	r7, [sp, #60]	@ 0x3c
 802482e:	9b02      	ldr	r3, [sp, #8]
 8024830:	1aff      	subs	r7, r7, r3
 8024832:	eba7 0709 	sub.w	r7, r7, r9
 8024836:	b2bf      	uxth	r7, r7
 8024838:	e7f3      	b.n	8024822 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x54e>
 802483a:	4b06      	ldr	r3, [pc, #24]	@ (8024854 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x580>)
 802483c:	6818      	ldr	r0, [r3, #0]
 802483e:	6803      	ldr	r3, [r0, #0]
 8024840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024842:	4798      	blx	r3
 8024844:	b013      	add	sp, #76	@ 0x4c
 8024846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802484a:	bf00      	nop
 802484c:	24000120 	.word	0x24000120
 8024850:	24034226 	.word	0x24034226
 8024854:	2403422c 	.word	0x2403422c
 8024858:	24000220 	.word	0x24000220

0802485c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 802485c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024860:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8024864:	9c06      	ldr	r4, [sp, #24]
 8024866:	2800      	cmp	r0, #0
 8024868:	d06e      	beq.n	8024948 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 802486a:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 802486e:	2d00      	cmp	r5, #0
 8024870:	dd6a      	ble.n	8024948 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8024872:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 8024876:	f1bc 0f00 	cmp.w	ip, #0
 802487a:	dd65      	ble.n	8024948 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 802487c:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8024880:	28ff      	cmp	r0, #255	@ 0xff
 8024882:	f9b3 3000 	ldrsh.w	r3, [r3]
 8024886:	f3c4 2707 	ubfx	r7, r4, #8, #8
 802488a:	fb02 3306 	mla	r3, r2, r6, r3
 802488e:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8024892:	b2e4      	uxtb	r4, r4
 8024894:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024898:	4419      	add	r1, r3
 802489a:	fb02 f30c 	mul.w	r3, r2, ip
 802489e:	eba2 0205 	sub.w	r2, r2, r5
 80248a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80248a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80248aa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80248ae:	440b      	add	r3, r1
 80248b0:	d03e      	beq.n	8024930 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 80248b2:	fa1f fc80 	uxth.w	ip, r0
 80248b6:	f1c0 00ff 	rsb	r0, r0, #255	@ 0xff
 80248ba:	fb06 f60c 	mul.w	r6, r6, ip
 80248be:	b280      	uxth	r0, r0
 80248c0:	fb07 f70c 	mul.w	r7, r7, ip
 80248c4:	fb04 f40c 	mul.w	r4, r4, ip
 80248c8:	4299      	cmp	r1, r3
 80248ca:	d23d      	bcs.n	8024948 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80248cc:	eb01 0c05 	add.w	ip, r1, r5
 80248d0:	458c      	cmp	ip, r1
 80248d2:	f101 0e03 	add.w	lr, r1, #3
 80248d6:	d928      	bls.n	802492a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 80248d8:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 80248dc:	fb11 f100 	smulbb	r1, r1, r0
 80248e0:	4421      	add	r1, r4
 80248e2:	b289      	uxth	r1, r1
 80248e4:	f101 0801 	add.w	r8, r1, #1
 80248e8:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80248ec:	1209      	asrs	r1, r1, #8
 80248ee:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80248f2:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 80248f6:	fb11 f100 	smulbb	r1, r1, r0
 80248fa:	4439      	add	r1, r7
 80248fc:	b289      	uxth	r1, r1
 80248fe:	f101 0801 	add.w	r8, r1, #1
 8024902:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8024906:	1209      	asrs	r1, r1, #8
 8024908:	f80e 1c02 	strb.w	r1, [lr, #-2]
 802490c:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8024910:	fb11 f100 	smulbb	r1, r1, r0
 8024914:	4431      	add	r1, r6
 8024916:	b289      	uxth	r1, r1
 8024918:	f101 0801 	add.w	r8, r1, #1
 802491c:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8024920:	1209      	asrs	r1, r1, #8
 8024922:	f80e 1c01 	strb.w	r1, [lr, #-1]
 8024926:	4671      	mov	r1, lr
 8024928:	e7d2      	b.n	80248d0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 802492a:	4411      	add	r1, r2
 802492c:	e7cc      	b.n	80248c8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 802492e:	4411      	add	r1, r2
 8024930:	4299      	cmp	r1, r3
 8024932:	d209      	bcs.n	8024948 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8024934:	1948      	adds	r0, r1, r5
 8024936:	4281      	cmp	r1, r0
 8024938:	d2f9      	bcs.n	802492e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 802493a:	700c      	strb	r4, [r1, #0]
 802493c:	3103      	adds	r1, #3
 802493e:	f801 7c02 	strb.w	r7, [r1, #-2]
 8024942:	f801 6c01 	strb.w	r6, [r1, #-1]
 8024946:	e7f6      	b.n	8024936 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 8024948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802494c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 802494c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024950:	b093      	sub	sp, #76	@ 0x4c
 8024952:	4699      	mov	r9, r3
 8024954:	4617      	mov	r7, r2
 8024956:	f9b3 2000 	ldrsh.w	r2, [r3]
 802495a:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	@ 0x74
 802495e:	4604      	mov	r4, r0
 8024960:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8024964:	a80c      	add	r0, sp, #48	@ 0x30
 8024966:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	@ 0x78
 802496a:	460d      	mov	r5, r1
 802496c:	4649      	mov	r1, r9
 802496e:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8024972:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8024976:	f8ad 8034 	strh.w	r8, [sp, #52]	@ 0x34
 802497a:	f8ad 6036 	strh.w	r6, [sp, #54]	@ 0x36
 802497e:	f7f4 fef9 	bl	8019774 <_ZN8touchgfx4RectaNERKS0_>
 8024982:	4639      	mov	r1, r7
 8024984:	a80c      	add	r0, sp, #48	@ 0x30
 8024986:	f7f4 fef5 	bl	8019774 <_ZN8touchgfx4RectaNERKS0_>
 802498a:	4b78      	ldr	r3, [pc, #480]	@ (8024b6c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 802498c:	8818      	ldrh	r0, [r3, #0]
 802498e:	4b78      	ldr	r3, [pc, #480]	@ (8024b70 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 8024990:	b202      	sxth	r2, r0
 8024992:	8819      	ldrh	r1, [r3, #0]
 8024994:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8024998:	b20f      	sxth	r7, r1
 802499a:	2b00      	cmp	r3, #0
 802499c:	da07      	bge.n	80249ae <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 802499e:	f8bd c034 	ldrh.w	ip, [sp, #52]	@ 0x34
 80249a2:	4463      	add	r3, ip
 80249a4:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 80249a8:	2300      	movs	r3, #0
 80249aa:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 80249ae:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 80249b2:	f9bd c034 	ldrsh.w	ip, [sp, #52]	@ 0x34
 80249b6:	1ad2      	subs	r2, r2, r3
 80249b8:	4594      	cmp	ip, r2
 80249ba:	bfc4      	itt	gt
 80249bc:	1ac2      	subgt	r2, r0, r3
 80249be:	f8ad 2034 	strhgt.w	r2, [sp, #52]	@ 0x34
 80249c2:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 80249c6:	2a00      	cmp	r2, #0
 80249c8:	da07      	bge.n	80249da <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 80249ca:	f8bd c036 	ldrh.w	ip, [sp, #54]	@ 0x36
 80249ce:	4462      	add	r2, ip
 80249d0:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 80249d4:	2200      	movs	r2, #0
 80249d6:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 80249da:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 80249de:	f9bd c036 	ldrsh.w	ip, [sp, #54]	@ 0x36
 80249e2:	1abf      	subs	r7, r7, r2
 80249e4:	45bc      	cmp	ip, r7
 80249e6:	f8df c190 	ldr.w	ip, [pc, #400]	@ 8024b78 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 80249ea:	bfc8      	it	gt
 80249ec:	1a8f      	subgt	r7, r1, r2
 80249ee:	f89c c000 	ldrb.w	ip, [ip]
 80249f2:	bfc8      	it	gt
 80249f4:	f8ad 7036 	strhgt.w	r7, [sp, #54]	@ 0x36
 80249f8:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 80249fc:	f1bc 0f00 	cmp.w	ip, #0
 8024a00:	d176      	bne.n	8024af0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 8024a02:	4287      	cmp	r7, r0
 8024a04:	bf14      	ite	ne
 8024a06:	2100      	movne	r1, #0
 8024a08:	2101      	moveq	r1, #1
 8024a0a:	2f00      	cmp	r7, #0
 8024a0c:	9107      	str	r1, [sp, #28]
 8024a0e:	dd73      	ble.n	8024af8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8024a10:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	@ 0x36
 8024a14:	2900      	cmp	r1, #0
 8024a16:	9104      	str	r1, [sp, #16]
 8024a18:	dd6e      	ble.n	8024af8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8024a1a:	f8b9 1000 	ldrh.w	r1, [r9]
 8024a1e:	a80e      	add	r0, sp, #56	@ 0x38
 8024a20:	f8ad 8044 	strh.w	r8, [sp, #68]	@ 0x44
 8024a24:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 8024a28:	1a5b      	subs	r3, r3, r1
 8024a2a:	a910      	add	r1, sp, #64	@ 0x40
 8024a2c:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 8024a30:	b21b      	sxth	r3, r3
 8024a32:	f8ad 703c 	strh.w	r7, [sp, #60]	@ 0x3c
 8024a36:	f8df a144 	ldr.w	sl, [pc, #324]	@ 8024b7c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8024a3a:	9305      	str	r3, [sp, #20]
 8024a3c:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8024a40:	1ad2      	subs	r2, r2, r3
 8024a42:	b213      	sxth	r3, r2
 8024a44:	9306      	str	r3, [sp, #24]
 8024a46:	9b05      	ldr	r3, [sp, #20]
 8024a48:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8024a4c:	9b06      	ldr	r3, [sp, #24]
 8024a4e:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8024a52:	9b04      	ldr	r3, [sp, #16]
 8024a54:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 8024a58:	2300      	movs	r3, #0
 8024a5a:	9310      	str	r3, [sp, #64]	@ 0x40
 8024a5c:	f7f9 f88e 	bl	801db7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024a60:	4640      	mov	r0, r8
 8024a62:	f7f9 f863 	bl	801db2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024a66:	a810      	add	r0, sp, #64	@ 0x40
 8024a68:	f7f9 f860 	bl	801db2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024a6c:	4b41      	ldr	r3, [pc, #260]	@ (8024b74 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 8024a6e:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 8024a72:	4628      	mov	r0, r5
 8024a74:	881b      	ldrh	r3, [r3, #0]
 8024a76:	9308      	str	r3, [sp, #32]
 8024a78:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8024a7c:	b21b      	sxth	r3, r3
 8024a7e:	9303      	str	r3, [sp, #12]
 8024a80:	682b      	ldr	r3, [r5, #0]
 8024a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8024a84:	4798      	blx	r3
 8024a86:	9a03      	ldr	r2, [sp, #12]
 8024a88:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 8024a8c:	4681      	mov	r9, r0
 8024a8e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8024a92:	fb13 f302 	smulbb	r3, r3, r2
 8024a96:	2203      	movs	r2, #3
 8024a98:	f8da 0000 	ldr.w	r0, [sl]
 8024a9c:	fb15 3302 	smlabb	r3, r5, r2, r3
 8024aa0:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 8024aa2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8024aa4:	441d      	add	r5, r3
 8024aa6:	6803      	ldr	r3, [r0, #0]
 8024aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8024aaa:	4798      	blx	r3
 8024aac:	9009      	str	r0, [sp, #36]	@ 0x24
 8024aae:	f8da 0000 	ldr.w	r0, [sl]
 8024ab2:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8024ab6:	6803      	ldr	r3, [r0, #0]
 8024ab8:	910a      	str	r1, [sp, #40]	@ 0x28
 8024aba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8024abc:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	@ 0x32
 8024ac0:	4798      	blx	r3
 8024ac2:	f010 0f01 	tst.w	r0, #1
 8024ac6:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 8024aca:	d01e      	beq.n	8024b0a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 8024acc:	f8da 0000 	ldr.w	r0, [sl]
 8024ad0:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 8024ad4:	6803      	ldr	r3, [r0, #0]
 8024ad6:	9200      	str	r2, [sp, #0]
 8024ad8:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8024ada:	462b      	mov	r3, r5
 8024adc:	e898 0006 	ldmia.w	r8, {r1, r2}
 8024ae0:	47b0      	blx	r6
 8024ae2:	9b05      	ldr	r3, [sp, #20]
 8024ae4:	80a7      	strh	r7, [r4, #4]
 8024ae6:	8023      	strh	r3, [r4, #0]
 8024ae8:	9b06      	ldr	r3, [sp, #24]
 8024aea:	8063      	strh	r3, [r4, #2]
 8024aec:	9b04      	ldr	r3, [sp, #16]
 8024aee:	e007      	b.n	8024b00 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 8024af0:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	@ 0x36
 8024af4:	4288      	cmp	r0, r1
 8024af6:	e785      	b.n	8024a04 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 8024af8:	2300      	movs	r3, #0
 8024afa:	8023      	strh	r3, [r4, #0]
 8024afc:	8063      	strh	r3, [r4, #2]
 8024afe:	80a3      	strh	r3, [r4, #4]
 8024b00:	4620      	mov	r0, r4
 8024b02:	80e3      	strh	r3, [r4, #6]
 8024b04:	b013      	add	sp, #76	@ 0x4c
 8024b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024b0a:	fb09 f606 	mul.w	r6, r9, r6
 8024b0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024b10:	fb11 6602 	smlabb	r6, r1, r2, r6
 8024b14:	9a07      	ldr	r2, [sp, #28]
 8024b16:	4433      	add	r3, r6
 8024b18:	461e      	mov	r6, r3
 8024b1a:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 8024b1e:	b16a      	cbz	r2, 8024b3c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8024b20:	9a08      	ldr	r2, [sp, #32]
 8024b22:	4593      	cmp	fp, r2
 8024b24:	d10a      	bne.n	8024b3c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8024b26:	f8da 0000 	ldr.w	r0, [sl]
 8024b2a:	fb09 f303 	mul.w	r3, r9, r3
 8024b2e:	4629      	mov	r1, r5
 8024b30:	6802      	ldr	r2, [r0, #0]
 8024b32:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 8024b36:	4632      	mov	r2, r6
 8024b38:	47d0      	blx	sl
 8024b3a:	e7d2      	b.n	8024ae2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8024b3c:	9a03      	ldr	r2, [sp, #12]
 8024b3e:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 8024b7c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8024b42:	fb02 5803 	mla	r8, r2, r3, r5
 8024b46:	4545      	cmp	r5, r8
 8024b48:	d2cb      	bcs.n	8024ae2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8024b4a:	f8db 0000 	ldr.w	r0, [fp]
 8024b4e:	4629      	mov	r1, r5
 8024b50:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 8024b54:	6802      	ldr	r2, [r0, #0]
 8024b56:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024b5a:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 8024b5e:	4632      	mov	r2, r6
 8024b60:	47d0      	blx	sl
 8024b62:	9b03      	ldr	r3, [sp, #12]
 8024b64:	444e      	add	r6, r9
 8024b66:	441d      	add	r5, r3
 8024b68:	e7ed      	b.n	8024b46 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 8024b6a:	bf00      	nop
 8024b6c:	24034220 	.word	0x24034220
 8024b70:	24034222 	.word	0x24034222
 8024b74:	24034226 	.word	0x24034226
 8024b78:	24034224 	.word	0x24034224
 8024b7c:	2403422c 	.word	0x2403422c

08024b80 <_ZN8touchgfx8LCD24bppC1Ev>:
 8024b80:	2200      	movs	r2, #0
 8024b82:	490e      	ldr	r1, [pc, #56]	@ (8024bbc <_ZN8touchgfx8LCD24bppC1Ev+0x3c>)
 8024b84:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8024b88:	6001      	str	r1, [r0, #0]
 8024b8a:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8024b8e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8024b92:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8024b96:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 8024b9a:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 8024b9e:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 8024ba2:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 8024ba6:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 8024baa:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 8024bae:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 8024bb2:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 8024bb6:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 8024bba:	4770      	bx	lr
 8024bbc:	0802f2fc 	.word	0x0802f2fc

08024bc0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8024bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024bc4:	b091      	sub	sp, #68	@ 0x44
 8024bc6:	4607      	mov	r7, r0
 8024bc8:	4688      	mov	r8, r1
 8024bca:	6810      	ldr	r0, [r2, #0]
 8024bcc:	6851      	ldr	r1, [r2, #4]
 8024bce:	ac0c      	add	r4, sp, #48	@ 0x30
 8024bd0:	4616      	mov	r6, r2
 8024bd2:	f89d 9068 	ldrb.w	r9, [sp, #104]	@ 0x68
 8024bd6:	4d64      	ldr	r5, [pc, #400]	@ (8024d68 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8024bd8:	f8df a190 	ldr.w	sl, [pc, #400]	@ 8024d6c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8024bdc:	c403      	stmia	r4!, {r0, r1}
 8024bde:	6818      	ldr	r0, [r3, #0]
 8024be0:	ac0e      	add	r4, sp, #56	@ 0x38
 8024be2:	6859      	ldr	r1, [r3, #4]
 8024be4:	c403      	stmia	r4!, {r0, r1}
 8024be6:	a80c      	add	r0, sp, #48	@ 0x30
 8024be8:	f7f8 ffa0 	bl	801db2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024bec:	4631      	mov	r1, r6
 8024bee:	a80e      	add	r0, sp, #56	@ 0x38
 8024bf0:	f7f8 ffc4 	bl	801db7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024bf4:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8024bf8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8024bfc:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8024c00:	6828      	ldr	r0, [r5, #0]
 8024c02:	fb11 2103 	smlabb	r1, r1, r3, r2
 8024c06:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	@ 0x3c
 8024c0a:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	@ 0x3e
 8024c0e:	440f      	add	r7, r1
 8024c10:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8024c14:	440a      	add	r2, r1
 8024c16:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8024c1a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8024c1e:	4413      	add	r3, r2
 8024c20:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8024c24:	6803      	ldr	r3, [r0, #0]
 8024c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8024c28:	4798      	blx	r3
 8024c2a:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8024c2e:	6828      	ldr	r0, [r5, #0]
 8024c30:	d01f      	beq.n	8024c72 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 8024c32:	2201      	movs	r2, #1
 8024c34:	2500      	movs	r5, #0
 8024c36:	6801      	ldr	r1, [r0, #0]
 8024c38:	b2a4      	uxth	r4, r4
 8024c3a:	b2b6      	uxth	r6, r6
 8024c3c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8024c40:	e9cd 2508 	strd	r2, r5, [sp, #32]
 8024c44:	250b      	movs	r5, #11
 8024c46:	9507      	str	r5, [sp, #28]
 8024c48:	f8ba 5000 	ldrh.w	r5, [sl]
 8024c4c:	f8cd 9010 	str.w	r9, [sp, #16]
 8024c50:	9602      	str	r6, [sp, #8]
 8024c52:	9401      	str	r4, [sp, #4]
 8024c54:	e9cd 2505 	strd	r2, r5, [sp, #20]
 8024c58:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 8024c5c:	9203      	str	r2, [sp, #12]
 8024c5e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8024c62:	9200      	str	r2, [sp, #0]
 8024c64:	4642      	mov	r2, r8
 8024c66:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 8024c68:	4639      	mov	r1, r7
 8024c6a:	47a0      	blx	r4
 8024c6c:	b011      	add	sp, #68	@ 0x44
 8024c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024c72:	6803      	ldr	r3, [r0, #0]
 8024c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024c76:	4798      	blx	r3
 8024c78:	f8ba 5000 	ldrh.w	r5, [sl]
 8024c7c:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8024c80:	f04f 0e04 	mov.w	lr, #4
 8024c84:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8024c88:	436e      	muls	r6, r5
 8024c8a:	fb05 2303 	mla	r3, r5, r3, r2
 8024c8e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8024c92:	1b2d      	subs	r5, r5, r4
 8024c94:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024c98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024c9c:	4418      	add	r0, r3
 8024c9e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8024ca2:	1982      	adds	r2, r0, r6
 8024ca4:	1b1b      	subs	r3, r3, r4
 8024ca6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024caa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024cac:	4290      	cmp	r0, r2
 8024cae:	d254      	bcs.n	8024d5a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 8024cb0:	eb00 0a04 	add.w	sl, r0, r4
 8024cb4:	4550      	cmp	r0, sl
 8024cb6:	d24c      	bcs.n	8024d52 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 8024cb8:	f817 1b01 	ldrb.w	r1, [r7], #1
 8024cbc:	fb1e e101 	smlabb	r1, lr, r1, lr
 8024cc0:	eb08 0c01 	add.w	ip, r8, r1
 8024cc4:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8024cc8:	b173      	cbz	r3, 8024ce8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8024cca:	2bff      	cmp	r3, #255	@ 0xff
 8024ccc:	f818 b001 	ldrb.w	fp, [r8, r1]
 8024cd0:	d10c      	bne.n	8024cec <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8024cd2:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8024cd6:	d109      	bne.n	8024cec <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8024cd8:	f880 b000 	strb.w	fp, [r0]
 8024cdc:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8024ce0:	7043      	strb	r3, [r0, #1]
 8024ce2:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8024ce6:	7083      	strb	r3, [r0, #2]
 8024ce8:	3003      	adds	r0, #3
 8024cea:	e7e3      	b.n	8024cb4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 8024cec:	fb09 f103 	mul.w	r1, r9, r3
 8024cf0:	1c4b      	adds	r3, r1, #1
 8024cf2:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8024cf6:	7801      	ldrb	r1, [r0, #0]
 8024cf8:	121b      	asrs	r3, r3, #8
 8024cfa:	b29e      	uxth	r6, r3
 8024cfc:	43db      	mvns	r3, r3
 8024cfe:	fb1b fb06 	smulbb	fp, fp, r6
 8024d02:	b2db      	uxtb	r3, r3
 8024d04:	fb01 b103 	mla	r1, r1, r3, fp
 8024d08:	b289      	uxth	r1, r1
 8024d0a:	f101 0b01 	add.w	fp, r1, #1
 8024d0e:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8024d12:	f890 b001 	ldrb.w	fp, [r0, #1]
 8024d16:	fb1b fb03 	smulbb	fp, fp, r3
 8024d1a:	1209      	asrs	r1, r1, #8
 8024d1c:	7001      	strb	r1, [r0, #0]
 8024d1e:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8024d22:	fb01 b106 	mla	r1, r1, r6, fp
 8024d26:	b289      	uxth	r1, r1
 8024d28:	f101 0b01 	add.w	fp, r1, #1
 8024d2c:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8024d30:	1209      	asrs	r1, r1, #8
 8024d32:	7041      	strb	r1, [r0, #1]
 8024d34:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8024d38:	f890 c002 	ldrb.w	ip, [r0, #2]
 8024d3c:	fb1c f303 	smulbb	r3, ip, r3
 8024d40:	fb01 3606 	mla	r6, r1, r6, r3
 8024d44:	b2b6      	uxth	r6, r6
 8024d46:	1c73      	adds	r3, r6, #1
 8024d48:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8024d4c:	1236      	asrs	r6, r6, #8
 8024d4e:	7086      	strb	r6, [r0, #2]
 8024d50:	e7ca      	b.n	8024ce8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8024d52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024d54:	4428      	add	r0, r5
 8024d56:	441f      	add	r7, r3
 8024d58:	e7a8      	b.n	8024cac <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 8024d5a:	4b03      	ldr	r3, [pc, #12]	@ (8024d68 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8024d5c:	6818      	ldr	r0, [r3, #0]
 8024d5e:	6803      	ldr	r3, [r0, #0]
 8024d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024d62:	4798      	blx	r3
 8024d64:	e782      	b.n	8024c6c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8024d66:	bf00      	nop
 8024d68:	2403422c 	.word	0x2403422c
 8024d6c:	24034226 	.word	0x24034226

08024d70 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8024d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024d74:	b091      	sub	sp, #68	@ 0x44
 8024d76:	4680      	mov	r8, r0
 8024d78:	460e      	mov	r6, r1
 8024d7a:	6810      	ldr	r0, [r2, #0]
 8024d7c:	6851      	ldr	r1, [r2, #4]
 8024d7e:	ad0c      	add	r5, sp, #48	@ 0x30
 8024d80:	4614      	mov	r4, r2
 8024d82:	f89d 7068 	ldrb.w	r7, [sp, #104]	@ 0x68
 8024d86:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 8024f20 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 8024d8a:	f8df a198 	ldr.w	sl, [pc, #408]	@ 8024f24 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8024d8e:	c503      	stmia	r5!, {r0, r1}
 8024d90:	6818      	ldr	r0, [r3, #0]
 8024d92:	ad0e      	add	r5, sp, #56	@ 0x38
 8024d94:	6859      	ldr	r1, [r3, #4]
 8024d96:	c503      	stmia	r5!, {r0, r1}
 8024d98:	a80c      	add	r0, sp, #48	@ 0x30
 8024d9a:	f7f8 fec7 	bl	801db2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024d9e:	4621      	mov	r1, r4
 8024da0:	a80e      	add	r0, sp, #56	@ 0x38
 8024da2:	f7f8 feeb 	bl	801db7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024da6:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8024daa:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8024dae:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8024db2:	f8d9 0000 	ldr.w	r0, [r9]
 8024db6:	fb11 2103 	smlabb	r1, r1, r3, r2
 8024dba:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 8024dbe:	eb08 0401 	add.w	r4, r8, r1
 8024dc2:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8024dc6:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 8024dca:	440a      	add	r2, r1
 8024dcc:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8024dd0:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8024dd4:	4413      	add	r3, r2
 8024dd6:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8024dda:	6803      	ldr	r3, [r0, #0]
 8024ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8024dde:	4798      	blx	r3
 8024de0:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8024de4:	f8d9 0000 	ldr.w	r0, [r9]
 8024de8:	d022      	beq.n	8024e30 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 8024dea:	2200      	movs	r2, #0
 8024dec:	f04f 0c01 	mov.w	ip, #1
 8024df0:	6801      	ldr	r1, [r0, #0]
 8024df2:	b2ad      	uxth	r5, r5
 8024df4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8024df8:	e9cd c208 	strd	ip, r2, [sp, #32]
 8024dfc:	f04f 0c0b 	mov.w	ip, #11
 8024e00:	f8cd c01c 	str.w	ip, [sp, #28]
 8024e04:	f8ba c000 	ldrh.w	ip, [sl]
 8024e08:	9704      	str	r7, [sp, #16]
 8024e0a:	9502      	str	r5, [sp, #8]
 8024e0c:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 8024e10:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 8024e14:	9203      	str	r2, [sp, #12]
 8024e16:	fa1f f288 	uxth.w	r2, r8
 8024e1a:	9201      	str	r2, [sp, #4]
 8024e1c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8024e20:	9200      	str	r2, [sp, #0]
 8024e22:	4632      	mov	r2, r6
 8024e24:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 8024e26:	4621      	mov	r1, r4
 8024e28:	47a8      	blx	r5
 8024e2a:	b011      	add	sp, #68	@ 0x44
 8024e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024e30:	6803      	ldr	r3, [r0, #0]
 8024e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024e34:	4798      	blx	r3
 8024e36:	f8ba 2000 	ldrh.w	r2, [sl]
 8024e3a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8024e3e:	f04f 0e03 	mov.w	lr, #3
 8024e42:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 8024e46:	4355      	muls	r5, r2
 8024e48:	fa1f fc87 	uxth.w	ip, r7
 8024e4c:	fb02 1303 	mla	r3, r2, r3, r1
 8024e50:	eba2 0208 	sub.w	r2, r2, r8
 8024e54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024e58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024e5c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024e60:	4418      	add	r0, r3
 8024e62:	920b      	str	r2, [sp, #44]	@ 0x2c
 8024e64:	1943      	adds	r3, r0, r5
 8024e66:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 8024e6a:	f1c7 05ff 	rsb	r5, r7, #255	@ 0xff
 8024e6e:	eba2 0208 	sub.w	r2, r2, r8
 8024e72:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8024e76:	b2ad      	uxth	r5, r5
 8024e78:	4298      	cmp	r0, r3
 8024e7a:	d24a      	bcs.n	8024f12 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 8024e7c:	eb00 0908 	add.w	r9, r0, r8
 8024e80:	4621      	mov	r1, r4
 8024e82:	4548      	cmp	r0, r9
 8024e84:	460c      	mov	r4, r1
 8024e86:	d240      	bcs.n	8024f0a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 8024e88:	f04f 0a04 	mov.w	sl, #4
 8024e8c:	7824      	ldrb	r4, [r4, #0]
 8024e8e:	2fff      	cmp	r7, #255	@ 0xff
 8024e90:	f101 0101 	add.w	r1, r1, #1
 8024e94:	fb1e a404 	smlabb	r4, lr, r4, sl
 8024e98:	eb06 0a04 	add.w	sl, r6, r4
 8024e9c:	f816 b004 	ldrb.w	fp, [r6, r4]
 8024ea0:	d02b      	beq.n	8024efa <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 8024ea2:	7804      	ldrb	r4, [r0, #0]
 8024ea4:	fb14 f405 	smulbb	r4, r4, r5
 8024ea8:	fb0b 440c 	mla	r4, fp, ip, r4
 8024eac:	b2a4      	uxth	r4, r4
 8024eae:	f104 0b01 	add.w	fp, r4, #1
 8024eb2:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8024eb6:	f890 b001 	ldrb.w	fp, [r0, #1]
 8024eba:	fb1b fb05 	smulbb	fp, fp, r5
 8024ebe:	1224      	asrs	r4, r4, #8
 8024ec0:	7004      	strb	r4, [r0, #0]
 8024ec2:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8024ec6:	fb04 b40c 	mla	r4, r4, ip, fp
 8024eca:	b2a4      	uxth	r4, r4
 8024ecc:	f104 0b01 	add.w	fp, r4, #1
 8024ed0:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8024ed4:	1224      	asrs	r4, r4, #8
 8024ed6:	7044      	strb	r4, [r0, #1]
 8024ed8:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8024edc:	f890 a002 	ldrb.w	sl, [r0, #2]
 8024ee0:	fb1a fa05 	smulbb	sl, sl, r5
 8024ee4:	fb04 a40c 	mla	r4, r4, ip, sl
 8024ee8:	b2a4      	uxth	r4, r4
 8024eea:	f104 0a01 	add.w	sl, r4, #1
 8024eee:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8024ef2:	1224      	asrs	r4, r4, #8
 8024ef4:	7084      	strb	r4, [r0, #2]
 8024ef6:	3003      	adds	r0, #3
 8024ef8:	e7c3      	b.n	8024e82 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 8024efa:	f880 b000 	strb.w	fp, [r0]
 8024efe:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8024f02:	7044      	strb	r4, [r0, #1]
 8024f04:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8024f08:	e7f4      	b.n	8024ef4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 8024f0a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024f0c:	4420      	add	r0, r4
 8024f0e:	188c      	adds	r4, r1, r2
 8024f10:	e7b2      	b.n	8024e78 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 8024f12:	4b03      	ldr	r3, [pc, #12]	@ (8024f20 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8024f14:	6818      	ldr	r0, [r3, #0]
 8024f16:	6803      	ldr	r3, [r0, #0]
 8024f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024f1a:	4798      	blx	r3
 8024f1c:	e785      	b.n	8024e2a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 8024f1e:	bf00      	nop
 8024f20:	2403422c 	.word	0x2403422c
 8024f24:	24034226 	.word	0x24034226

08024f28 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8024f28:	b4f0      	push	{r4, r5, r6, r7}
 8024f2a:	460c      	mov	r4, r1
 8024f2c:	4611      	mov	r1, r2
 8024f2e:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8024f32:	461a      	mov	r2, r3
 8024f34:	780f      	ldrb	r7, [r1, #0]
 8024f36:	9b04      	ldr	r3, [sp, #16]
 8024f38:	784e      	ldrb	r6, [r1, #1]
 8024f3a:	b11f      	cbz	r7, 8024f44 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 8024f3c:	2f01      	cmp	r7, #1
 8024f3e:	d01d      	beq.n	8024f7c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 8024f40:	bcf0      	pop	{r4, r5, r6, r7}
 8024f42:	4770      	bx	lr
 8024f44:	2e03      	cmp	r6, #3
 8024f46:	d8fb      	bhi.n	8024f40 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8024f48:	e8df f006 	tbb	[pc, r6]
 8024f4c:	16140702 	.word	0x16140702
 8024f50:	9504      	str	r5, [sp, #16]
 8024f52:	4620      	mov	r0, r4
 8024f54:	bcf0      	pop	{r4, r5, r6, r7}
 8024f56:	f7ff be33 	b.w	8024bc0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8024f5a:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 8024f5c:	2800      	cmp	r0, #0
 8024f5e:	d0ef      	beq.n	8024f40 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8024f60:	6806      	ldr	r6, [r0, #0]
 8024f62:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8024f66:	68f5      	ldr	r5, [r6, #12]
 8024f68:	4613      	mov	r3, r2
 8024f6a:	46ac      	mov	ip, r5
 8024f6c:	460a      	mov	r2, r1
 8024f6e:	4621      	mov	r1, r4
 8024f70:	bcf0      	pop	{r4, r5, r6, r7}
 8024f72:	4760      	bx	ip
 8024f74:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 8024f76:	e7f1      	b.n	8024f5c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8024f78:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 8024f7a:	e7ef      	b.n	8024f5c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8024f7c:	2e03      	cmp	r6, #3
 8024f7e:	d8df      	bhi.n	8024f40 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8024f80:	e8df f006 	tbb	[pc, r6]
 8024f84:	110f0702 	.word	0x110f0702
 8024f88:	9504      	str	r5, [sp, #16]
 8024f8a:	4620      	mov	r0, r4
 8024f8c:	bcf0      	pop	{r4, r5, r6, r7}
 8024f8e:	f7ff beef 	b.w	8024d70 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8024f92:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 8024f94:	2800      	cmp	r0, #0
 8024f96:	d0d3      	beq.n	8024f40 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8024f98:	6806      	ldr	r6, [r0, #0]
 8024f9a:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8024f9e:	68b5      	ldr	r5, [r6, #8]
 8024fa0:	e7e2      	b.n	8024f68 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8024fa2:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 8024fa4:	e7f6      	b.n	8024f94 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
 8024fa6:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 8024fa8:	e7f4      	b.n	8024f94 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
	...

08024fac <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8024fac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024fb0:	4605      	mov	r5, r0
 8024fb2:	b08f      	sub	sp, #60	@ 0x3c
 8024fb4:	460c      	mov	r4, r1
 8024fb6:	461f      	mov	r7, r3
 8024fb8:	2b00      	cmp	r3, #0
 8024fba:	d052      	beq.n	8025062 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8024fbc:	6808      	ldr	r0, [r1, #0]
 8024fbe:	ab0a      	add	r3, sp, #40	@ 0x28
 8024fc0:	6849      	ldr	r1, [r1, #4]
 8024fc2:	f8df 81c8 	ldr.w	r8, [pc, #456]	@ 802518c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 8024fc6:	f8df 91c8 	ldr.w	r9, [pc, #456]	@ 8025190 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 8024fca:	c303      	stmia	r3!, {r0, r1}
 8024fcc:	6810      	ldr	r0, [r2, #0]
 8024fce:	ab0c      	add	r3, sp, #48	@ 0x30
 8024fd0:	6851      	ldr	r1, [r2, #4]
 8024fd2:	c303      	stmia	r3!, {r0, r1}
 8024fd4:	a80a      	add	r0, sp, #40	@ 0x28
 8024fd6:	f7f8 fda9 	bl	801db2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024fda:	4621      	mov	r1, r4
 8024fdc:	a80c      	add	r0, sp, #48	@ 0x30
 8024fde:	f7f8 fdcd 	bl	801db7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024fe2:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8024fe6:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8024fea:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8024fee:	f8d8 0000 	ldr.w	r0, [r8]
 8024ff2:	fb11 2103 	smlabb	r1, r1, r3, r2
 8024ff6:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	@ 0x34
 8024ffa:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 8024ffe:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 8025002:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8025006:	440a      	add	r2, r1
 8025008:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 802500c:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8025010:	4413      	add	r3, r2
 8025012:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8025016:	6803      	ldr	r3, [r0, #0]
 8025018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802501a:	4798      	blx	r3
 802501c:	2fff      	cmp	r7, #255	@ 0xff
 802501e:	d023      	beq.n	8025068 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8025020:	f010 0f04 	tst.w	r0, #4
 8025024:	f8d8 0000 	ldr.w	r0, [r8]
 8025028:	d021      	beq.n	802506e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 802502a:	2100      	movs	r1, #0
 802502c:	f04f 0e01 	mov.w	lr, #1
 8025030:	f8d0 c000 	ldr.w	ip, [r0]
 8025034:	b2a4      	uxth	r4, r4
 8025036:	9106      	str	r1, [sp, #24]
 8025038:	b2b6      	uxth	r6, r6
 802503a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 802503e:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8025042:	e9cd e107 	strd	lr, r1, [sp, #28]
 8025046:	f8b9 e000 	ldrh.w	lr, [r9]
 802504a:	9703      	str	r7, [sp, #12]
 802504c:	9401      	str	r4, [sp, #4]
 802504e:	9600      	str	r6, [sp, #0]
 8025050:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8025054:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8025058:	9102      	str	r1, [sp, #8]
 802505a:	4629      	mov	r1, r5
 802505c:	f8dc 4040 	ldr.w	r4, [ip, #64]	@ 0x40
 8025060:	47a0      	blx	r4
 8025062:	b00f      	add	sp, #60	@ 0x3c
 8025064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025068:	f010 0f01 	tst.w	r0, #1
 802506c:	e7da      	b.n	8025024 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 802506e:	6803      	ldr	r3, [r0, #0]
 8025070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8025072:	4798      	blx	r3
 8025074:	f8b9 1000 	ldrh.w	r1, [r9]
 8025078:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 802507c:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8025080:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8025084:	434c      	muls	r4, r1
 8025086:	2fff      	cmp	r7, #255	@ 0xff
 8025088:	fb01 2303 	mla	r3, r1, r3, r2
 802508c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025090:	eba1 0106 	sub.w	r1, r1, r6
 8025094:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025098:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802509c:	4418      	add	r0, r3
 802509e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80250a2:	eba3 0606 	sub.w	r6, r3, r6
 80250a6:	4404      	add	r4, r0
 80250a8:	ea4f 0646 	mov.w	r6, r6, lsl #1
 80250ac:	d04a      	beq.n	8025144 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 80250ae:	43fa      	mvns	r2, r7
 80250b0:	b2bb      	uxth	r3, r7
 80250b2:	b2d7      	uxtb	r7, r2
 80250b4:	42a0      	cmp	r0, r4
 80250b6:	d263      	bcs.n	8025180 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 80250b8:	eb00 0e0c 	add.w	lr, r0, ip
 80250bc:	4586      	cmp	lr, r0
 80250be:	f100 0803 	add.w	r8, r0, #3
 80250c2:	d93a      	bls.n	802513a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 80250c4:	f835 2b02 	ldrh.w	r2, [r5], #2
 80250c8:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 80250cc:	00d0      	lsls	r0, r2, #3
 80250ce:	fb19 f907 	smulbb	r9, r9, r7
 80250d2:	b2c0      	uxtb	r0, r0
 80250d4:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 80250d8:	fb00 9003 	mla	r0, r0, r3, r9
 80250dc:	b280      	uxth	r0, r0
 80250de:	f100 0901 	add.w	r9, r0, #1
 80250e2:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 80250e6:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 80250ea:	fb19 f907 	smulbb	r9, r9, r7
 80250ee:	1200      	asrs	r0, r0, #8
 80250f0:	f808 0c03 	strb.w	r0, [r8, #-3]
 80250f4:	10d0      	asrs	r0, r2, #3
 80250f6:	1212      	asrs	r2, r2, #8
 80250f8:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80250fc:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8025100:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8025104:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8025108:	fb00 9003 	mla	r0, r0, r3, r9
 802510c:	b280      	uxth	r0, r0
 802510e:	f100 0901 	add.w	r9, r0, #1
 8025112:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8025116:	1200      	asrs	r0, r0, #8
 8025118:	f808 0c02 	strb.w	r0, [r8, #-2]
 802511c:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 8025120:	fb10 f007 	smulbb	r0, r0, r7
 8025124:	fb02 0203 	mla	r2, r2, r3, r0
 8025128:	b292      	uxth	r2, r2
 802512a:	1c50      	adds	r0, r2, #1
 802512c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8025130:	4640      	mov	r0, r8
 8025132:	1212      	asrs	r2, r2, #8
 8025134:	f808 2c01 	strb.w	r2, [r8, #-1]
 8025138:	e7c0      	b.n	80250bc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 802513a:	4408      	add	r0, r1
 802513c:	4435      	add	r5, r6
 802513e:	e7b9      	b.n	80250b4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 8025140:	4408      	add	r0, r1
 8025142:	4435      	add	r5, r6
 8025144:	42a0      	cmp	r0, r4
 8025146:	d21b      	bcs.n	8025180 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8025148:	eb00 070c 	add.w	r7, r0, ip
 802514c:	42b8      	cmp	r0, r7
 802514e:	d2f7      	bcs.n	8025140 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 8025150:	f835 3b02 	ldrh.w	r3, [r5], #2
 8025154:	3003      	adds	r0, #3
 8025156:	00da      	lsls	r2, r3, #3
 8025158:	b2d2      	uxtb	r2, r2
 802515a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802515e:	f800 2c03 	strb.w	r2, [r0, #-3]
 8025162:	10da      	asrs	r2, r3, #3
 8025164:	121b      	asrs	r3, r3, #8
 8025166:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802516a:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 802516e:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8025172:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8025176:	f800 2c02 	strb.w	r2, [r0, #-2]
 802517a:	f800 3c01 	strb.w	r3, [r0, #-1]
 802517e:	e7e5      	b.n	802514c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 8025180:	4b02      	ldr	r3, [pc, #8]	@ (802518c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 8025182:	6818      	ldr	r0, [r3, #0]
 8025184:	6803      	ldr	r3, [r0, #0]
 8025186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8025188:	4798      	blx	r3
 802518a:	e76a      	b.n	8025062 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 802518c:	2403422c 	.word	0x2403422c
 8025190:	24034226 	.word	0x24034226

08025194 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8025194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025198:	b08a      	sub	sp, #40	@ 0x28
 802519a:	460d      	mov	r5, r1
 802519c:	4604      	mov	r4, r0
 802519e:	461e      	mov	r6, r3
 80251a0:	6808      	ldr	r0, [r1, #0]
 80251a2:	ab06      	add	r3, sp, #24
 80251a4:	6849      	ldr	r1, [r1, #4]
 80251a6:	4f5d      	ldr	r7, [pc, #372]	@ (802531c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 80251a8:	c303      	stmia	r3!, {r0, r1}
 80251aa:	6810      	ldr	r0, [r2, #0]
 80251ac:	ab08      	add	r3, sp, #32
 80251ae:	6851      	ldr	r1, [r2, #4]
 80251b0:	c303      	stmia	r3!, {r0, r1}
 80251b2:	a806      	add	r0, sp, #24
 80251b4:	f7f8 fcba 	bl	801db2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80251b8:	4629      	mov	r1, r5
 80251ba:	a808      	add	r0, sp, #32
 80251bc:	f7f8 fcde 	bl	801db7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80251c0:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80251c4:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 80251c8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80251cc:	6838      	ldr	r0, [r7, #0]
 80251ce:	fb11 2103 	smlabb	r1, r1, r3, r2
 80251d2:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 80251d6:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 80251da:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80251de:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80251e2:	440a      	add	r2, r1
 80251e4:	f8ad 2020 	strh.w	r2, [sp, #32]
 80251e8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80251ec:	4413      	add	r3, r2
 80251ee:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80251f2:	6803      	ldr	r3, [r0, #0]
 80251f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80251f6:	4798      	blx	r3
 80251f8:	2eff      	cmp	r6, #255	@ 0xff
 80251fa:	d119      	bne.n	8025230 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 80251fc:	f010 0f20 	tst.w	r0, #32
 8025200:	6838      	ldr	r0, [r7, #0]
 8025202:	d018      	beq.n	8025236 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 8025204:	b2ad      	uxth	r5, r5
 8025206:	2700      	movs	r7, #0
 8025208:	6801      	ldr	r1, [r0, #0]
 802520a:	9501      	str	r5, [sp, #4]
 802520c:	fa1f f588 	uxth.w	r5, r8
 8025210:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8025214:	9500      	str	r5, [sp, #0]
 8025216:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802521a:	e9cd 6703 	strd	r6, r7, [sp, #12]
 802521e:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8025222:	9602      	str	r6, [sp, #8]
 8025224:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 8025226:	4621      	mov	r1, r4
 8025228:	47a8      	blx	r5
 802522a:	b00a      	add	sp, #40	@ 0x28
 802522c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025230:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8025234:	e7e4      	b.n	8025200 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 8025236:	6803      	ldr	r3, [r0, #0]
 8025238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802523a:	4798      	blx	r3
 802523c:	4b38      	ldr	r3, [pc, #224]	@ (8025320 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 802523e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8025242:	f8b3 c000 	ldrh.w	ip, [r3]
 8025246:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 802524a:	fb0c f505 	mul.w	r5, ip, r5
 802524e:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 8025252:	fb0c 2303 	mla	r3, ip, r3, r2
 8025256:	ebac 0c08 	sub.w	ip, ip, r8
 802525a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802525e:	ebae 0e08 	sub.w	lr, lr, r8
 8025262:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025266:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802526a:	4418      	add	r0, r3
 802526c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8025270:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8025274:	4405      	add	r5, r0
 8025276:	42a8      	cmp	r0, r5
 8025278:	d24a      	bcs.n	8025310 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 802527a:	eb00 0803 	add.w	r8, r0, r3
 802527e:	4540      	cmp	r0, r8
 8025280:	d243      	bcs.n	802530a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 8025282:	78e2      	ldrb	r2, [r4, #3]
 8025284:	b15a      	cbz	r2, 802529e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 8025286:	2aff      	cmp	r2, #255	@ 0xff
 8025288:	f894 9000 	ldrb.w	r9, [r4]
 802528c:	d10a      	bne.n	80252a4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 802528e:	2eff      	cmp	r6, #255	@ 0xff
 8025290:	d108      	bne.n	80252a4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8025292:	f880 9000 	strb.w	r9, [r0]
 8025296:	7862      	ldrb	r2, [r4, #1]
 8025298:	7042      	strb	r2, [r0, #1]
 802529a:	78a2      	ldrb	r2, [r4, #2]
 802529c:	7082      	strb	r2, [r0, #2]
 802529e:	3003      	adds	r0, #3
 80252a0:	3404      	adds	r4, #4
 80252a2:	e7ec      	b.n	802527e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 80252a4:	4372      	muls	r2, r6
 80252a6:	1c51      	adds	r1, r2, #1
 80252a8:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80252ac:	1209      	asrs	r1, r1, #8
 80252ae:	fa1f fa81 	uxth.w	sl, r1
 80252b2:	43c9      	mvns	r1, r1
 80252b4:	fb19 f90a 	smulbb	r9, r9, sl
 80252b8:	b2ca      	uxtb	r2, r1
 80252ba:	7801      	ldrb	r1, [r0, #0]
 80252bc:	fb01 9902 	mla	r9, r1, r2, r9
 80252c0:	fa1f f989 	uxth.w	r9, r9
 80252c4:	f109 0101 	add.w	r1, r9, #1
 80252c8:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 80252cc:	ea4f 2929 	mov.w	r9, r9, asr #8
 80252d0:	f880 9000 	strb.w	r9, [r0]
 80252d4:	f890 9001 	ldrb.w	r9, [r0, #1]
 80252d8:	7861      	ldrb	r1, [r4, #1]
 80252da:	fb19 f902 	smulbb	r9, r9, r2
 80252de:	fb01 910a 	mla	r1, r1, sl, r9
 80252e2:	b289      	uxth	r1, r1
 80252e4:	f101 0901 	add.w	r9, r1, #1
 80252e8:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 80252ec:	1209      	asrs	r1, r1, #8
 80252ee:	7041      	strb	r1, [r0, #1]
 80252f0:	7881      	ldrb	r1, [r0, #2]
 80252f2:	f894 9002 	ldrb.w	r9, [r4, #2]
 80252f6:	fb11 f202 	smulbb	r2, r1, r2
 80252fa:	fb09 220a 	mla	r2, r9, sl, r2
 80252fe:	b292      	uxth	r2, r2
 8025300:	1c51      	adds	r1, r2, #1
 8025302:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8025306:	1212      	asrs	r2, r2, #8
 8025308:	e7c8      	b.n	802529c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 802530a:	4460      	add	r0, ip
 802530c:	4474      	add	r4, lr
 802530e:	e7b2      	b.n	8025276 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 8025310:	6838      	ldr	r0, [r7, #0]
 8025312:	6803      	ldr	r3, [r0, #0]
 8025314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8025316:	4798      	blx	r3
 8025318:	e787      	b.n	802522a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 802531a:	bf00      	nop
 802531c:	2403422c 	.word	0x2403422c
 8025320:	24034226 	.word	0x24034226

08025324 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8025324:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8025328:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 802532c:	4607      	mov	r7, r0
 802532e:	460c      	mov	r4, r1
 8025330:	4692      	mov	sl, r2
 8025332:	4699      	mov	r9, r3
 8025334:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8025336:	b335      	cbz	r5, 8025386 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8025338:	4608      	mov	r0, r1
 802533a:	f7fb fdd5 	bl	8020ee8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 802533e:	4680      	mov	r8, r0
 8025340:	4620      	mov	r0, r4
 8025342:	f7fb fe05 	bl	8020f50 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8025346:	f8ad 000e 	strh.w	r0, [sp, #14]
 802534a:	4620      	mov	r0, r4
 802534c:	f8ad a008 	strh.w	sl, [sp, #8]
 8025350:	f8ad 900a 	strh.w	r9, [sp, #10]
 8025354:	f8ad 800c 	strh.w	r8, [sp, #12]
 8025358:	f7fb ff04 	bl	8021164 <_ZNK8touchgfx6Bitmap9getFormatEv>
 802535c:	2810      	cmp	r0, #16
 802535e:	d812      	bhi.n	8025386 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8025360:	e8df f000 	tbb	[pc, r0]
 8025364:	11092d24 	.word	0x11092d24
 8025368:	11111111 	.word	0x11111111
 802536c:	14111111 	.word	0x14111111
 8025370:	4c111111 	.word	0x4c111111
 8025374:	3c          	.byte	0x3c
 8025375:	00          	.byte	0x00
 8025376:	4620      	mov	r0, r4
 8025378:	f7fb fe70 	bl	802105c <_ZNK8touchgfx6Bitmap7getDataEv>
 802537c:	462b      	mov	r3, r5
 802537e:	4632      	mov	r2, r6
 8025380:	a902      	add	r1, sp, #8
 8025382:	f7ff ff07 	bl	8025194 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8025386:	b004      	add	sp, #16
 8025388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802538c:	4620      	mov	r0, r4
 802538e:	f7fb fe65 	bl	802105c <_ZNK8touchgfx6Bitmap7getDataEv>
 8025392:	4680      	mov	r8, r0
 8025394:	4620      	mov	r0, r4
 8025396:	f7fb fe91 	bl	80210bc <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 802539a:	ab02      	add	r3, sp, #8
 802539c:	4602      	mov	r2, r0
 802539e:	4641      	mov	r1, r8
 80253a0:	4638      	mov	r0, r7
 80253a2:	e9cd 6500 	strd	r6, r5, [sp]
 80253a6:	f7ff fdbf 	bl	8024f28 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80253aa:	e7ec      	b.n	8025386 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 80253ac:	4620      	mov	r0, r4
 80253ae:	f7fb fe55 	bl	802105c <_ZNK8touchgfx6Bitmap7getDataEv>
 80253b2:	462b      	mov	r3, r5
 80253b4:	4632      	mov	r2, r6
 80253b6:	a902      	add	r1, sp, #8
 80253b8:	f7ff fdf8 	bl	8024fac <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 80253bc:	e7e3      	b.n	8025386 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 80253be:	683b      	ldr	r3, [r7, #0]
 80253c0:	4620      	mov	r0, r4
 80253c2:	f8d3 800c 	ldr.w	r8, [r3, #12]
 80253c6:	f7fb fe49 	bl	802105c <_ZNK8touchgfx6Bitmap7getDataEv>
 80253ca:	2300      	movs	r3, #0
 80253cc:	4601      	mov	r1, r0
 80253ce:	aa02      	add	r2, sp, #8
 80253d0:	4638      	mov	r0, r7
 80253d2:	e9cd 5300 	strd	r5, r3, [sp]
 80253d6:	4633      	mov	r3, r6
 80253d8:	47c0      	blx	r8
 80253da:	e7d4      	b.n	8025386 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 80253dc:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 80253de:	2f00      	cmp	r7, #0
 80253e0:	d0d1      	beq.n	8025386 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 80253e2:	683b      	ldr	r3, [r7, #0]
 80253e4:	f8d3 8008 	ldr.w	r8, [r3, #8]
 80253e8:	4620      	mov	r0, r4
 80253ea:	f7fb fe37 	bl	802105c <_ZNK8touchgfx6Bitmap7getDataEv>
 80253ee:	9500      	str	r5, [sp, #0]
 80253f0:	4601      	mov	r1, r0
 80253f2:	4633      	mov	r3, r6
 80253f4:	aa02      	add	r2, sp, #8
 80253f6:	4638      	mov	r0, r7
 80253f8:	47c0      	blx	r8
 80253fa:	e7c4      	b.n	8025386 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 80253fc:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 80253fe:	2f00      	cmp	r7, #0
 8025400:	d0c1      	beq.n	8025386 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8025402:	683b      	ldr	r3, [r7, #0]
 8025404:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8025408:	e7ee      	b.n	80253e8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>

0802540a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 802540a:	b4f0      	push	{r4, r5, r6, r7}
 802540c:	4616      	mov	r6, r2
 802540e:	461c      	mov	r4, r3
 8025410:	460d      	mov	r5, r1
 8025412:	9a04      	ldr	r2, [sp, #16]
 8025414:	2e01      	cmp	r6, #1
 8025416:	f89d 3014 	ldrb.w	r3, [sp, #20]
 802541a:	d00e      	beq.n	802543a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 802541c:	d303      	bcc.n	8025426 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 802541e:	2e02      	cmp	r6, #2
 8025420:	d006      	beq.n	8025430 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 8025422:	bcf0      	pop	{r4, r5, r6, r7}
 8025424:	4770      	bx	lr
 8025426:	4621      	mov	r1, r4
 8025428:	4628      	mov	r0, r5
 802542a:	bcf0      	pop	{r4, r5, r6, r7}
 802542c:	f7ff bdbe 	b.w	8024fac <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8025430:	4621      	mov	r1, r4
 8025432:	4628      	mov	r0, r5
 8025434:	bcf0      	pop	{r4, r5, r6, r7}
 8025436:	f7ff bead 	b.w	8025194 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 802543a:	6805      	ldr	r5, [r0, #0]
 802543c:	2600      	movs	r6, #0
 802543e:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8025442:	68ed      	ldr	r5, [r5, #12]
 8025444:	4613      	mov	r3, r2
 8025446:	4622      	mov	r2, r4
 8025448:	46ac      	mov	ip, r5
 802544a:	bcf0      	pop	{r4, r5, r6, r7}
 802544c:	4760      	bx	ip
	...

08025450 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8025450:	b160      	cbz	r0, 802546c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 8025452:	2903      	cmp	r1, #3
 8025454:	d818      	bhi.n	8025488 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8025456:	e8df f001 	tbb	[pc, r1]
 802545a:	1902      	.short	0x1902
 802545c:	1b06      	.short	0x1b06
 802545e:	4b0e      	ldr	r3, [pc, #56]	@ (8025498 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8025460:	8818      	ldrh	r0, [r3, #0]
 8025462:	4240      	negs	r0, r0
 8025464:	4770      	bx	lr
 8025466:	4b0c      	ldr	r3, [pc, #48]	@ (8025498 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8025468:	8818      	ldrh	r0, [r3, #0]
 802546a:	4770      	bx	lr
 802546c:	2903      	cmp	r1, #3
 802546e:	d80b      	bhi.n	8025488 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8025470:	a301      	add	r3, pc, #4	@ (adr r3, 8025478 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 8025472:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8025476:	bf00      	nop
 8025478:	0802548d 	.word	0x0802548d
 802547c:	08025467 	.word	0x08025467
 8025480:	08025491 	.word	0x08025491
 8025484:	0802545f 	.word	0x0802545f
 8025488:	2000      	movs	r0, #0
 802548a:	4770      	bx	lr
 802548c:	2001      	movs	r0, #1
 802548e:	4770      	bx	lr
 8025490:	f04f 30ff 	mov.w	r0, #4294967295
 8025494:	4770      	bx	lr
 8025496:	bf00      	nop
 8025498:	24034226 	.word	0x24034226

0802549c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 802549c:	b160      	cbz	r0, 80254b8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 802549e:	2903      	cmp	r1, #3
 80254a0:	d818      	bhi.n	80254d4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 80254a2:	e8df f001 	tbb	[pc, r1]
 80254a6:	0219      	.short	0x0219
 80254a8:	051b      	.short	0x051b
 80254aa:	4b0e      	ldr	r3, [pc, #56]	@ (80254e4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 80254ac:	8818      	ldrh	r0, [r3, #0]
 80254ae:	4770      	bx	lr
 80254b0:	4b0c      	ldr	r3, [pc, #48]	@ (80254e4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 80254b2:	8818      	ldrh	r0, [r3, #0]
 80254b4:	4240      	negs	r0, r0
 80254b6:	4770      	bx	lr
 80254b8:	2903      	cmp	r1, #3
 80254ba:	d80b      	bhi.n	80254d4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 80254bc:	a301      	add	r3, pc, #4	@ (adr r3, 80254c4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 80254be:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80254c2:	bf00      	nop
 80254c4:	080254ab 	.word	0x080254ab
 80254c8:	080254dd 	.word	0x080254dd
 80254cc:	080254b1 	.word	0x080254b1
 80254d0:	080254d9 	.word	0x080254d9
 80254d4:	2000      	movs	r0, #0
 80254d6:	4770      	bx	lr
 80254d8:	2001      	movs	r0, #1
 80254da:	4770      	bx	lr
 80254dc:	f04f 30ff 	mov.w	r0, #4294967295
 80254e0:	4770      	bx	lr
 80254e2:	bf00      	nop
 80254e4:	24034226 	.word	0x24034226

080254e8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 80254e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80254ec:	b097      	sub	sp, #92	@ 0x5c
 80254ee:	910b      	str	r1, [sp, #44]	@ 0x2c
 80254f0:	a912      	add	r1, sp, #72	@ 0x48
 80254f2:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	@ 0x80
 80254f6:	f8bd 7088 	ldrh.w	r7, [sp, #136]	@ 0x88
 80254fa:	f8bd 408c 	ldrh.w	r4, [sp, #140]	@ 0x8c
 80254fe:	f89d 80a4 	ldrb.w	r8, [sp, #164]	@ 0xa4
 8025502:	f89d 90ac 	ldrb.w	r9, [sp, #172]	@ 0xac
 8025506:	e881 000c 	stmia.w	r1, {r2, r3}
 802550a:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	@ 0x84
 802550e:	930a      	str	r3, [sp, #40]	@ 0x28
 8025510:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 8025514:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	@ 0x90
 8025518:	9311      	str	r3, [sp, #68]	@ 0x44
 802551a:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 802551e:	798d      	ldrb	r5, [r1, #6]
 8025520:	930c      	str	r3, [sp, #48]	@ 0x30
 8025522:	7b4b      	ldrb	r3, [r1, #13]
 8025524:	0158      	lsls	r0, r3, #5
 8025526:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 802552a:	4328      	orrs	r0, r5
 802552c:	9009      	str	r0, [sp, #36]	@ 0x24
 802552e:	f000 817c 	beq.w	802582a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8025532:	011b      	lsls	r3, r3, #4
 8025534:	79c8      	ldrb	r0, [r1, #7]
 8025536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802553a:	4303      	orrs	r3, r0
 802553c:	930e      	str	r3, [sp, #56]	@ 0x38
 802553e:	f000 8174 	beq.w	802582a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8025542:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8025546:	b29b      	uxth	r3, r3
 8025548:	2f00      	cmp	r7, #0
 802554a:	f000 8116 	beq.w	802577a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 802554e:	1aff      	subs	r7, r7, r3
 8025550:	b2bf      	uxth	r7, r7
 8025552:	043b      	lsls	r3, r7, #16
 8025554:	d502      	bpl.n	802555c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8025556:	1bf6      	subs	r6, r6, r7
 8025558:	2700      	movs	r7, #0
 802555a:	b236      	sxth	r6, r6
 802555c:	f9b2 1000 	ldrsh.w	r1, [r2]
 8025560:	a812      	add	r0, sp, #72	@ 0x48
 8025562:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8025566:	428e      	cmp	r6, r1
 8025568:	b28b      	uxth	r3, r1
 802556a:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 802556e:	bfbf      	itttt	lt
 8025570:	18ff      	addlt	r7, r7, r3
 8025572:	1bbe      	sublt	r6, r7, r6
 8025574:	b2b7      	uxthlt	r7, r6
 8025576:	460e      	movlt	r6, r1
 8025578:	8891      	ldrh	r1, [r2, #4]
 802557a:	440b      	add	r3, r1
 802557c:	4631      	mov	r1, r6
 802557e:	b21b      	sxth	r3, r3
 8025580:	9310      	str	r3, [sp, #64]	@ 0x40
 8025582:	88d3      	ldrh	r3, [r2, #6]
 8025584:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025586:	449a      	add	sl, r3
 8025588:	fa0f f38a 	sxth.w	r3, sl
 802558c:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 8025590:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025592:	4bb5      	ldr	r3, [pc, #724]	@ (8025868 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 8025594:	f893 b000 	ldrb.w	fp, [r3]
 8025598:	f10b 3cff 	add.w	ip, fp, #4294967295
 802559c:	f1dc 0300 	rsbs	r3, ip, #0
 80255a0:	eb43 030c 	adc.w	r3, r3, ip
 80255a4:	930d      	str	r3, [sp, #52]	@ 0x34
 80255a6:	464b      	mov	r3, r9
 80255a8:	f7f8 f934 	bl	801d814 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 80255ac:	4631      	mov	r1, r6
 80255ae:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 80255b2:	464b      	mov	r3, r9
 80255b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80255b6:	a812      	add	r0, sp, #72	@ 0x48
 80255b8:	f7f8 f949 	bl	801d84e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 80255bc:	a916      	add	r1, sp, #88	@ 0x58
 80255be:	f821 0d02 	strh.w	r0, [r1, #-2]!
 80255c2:	a815      	add	r0, sp, #84	@ 0x54
 80255c4:	f7f8 fa70 	bl	801daa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 80255c8:	f1b9 0f00 	cmp.w	r9, #0
 80255cc:	f040 80d8 	bne.w	8025780 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 80255d0:	f1bb 0f01 	cmp.w	fp, #1
 80255d4:	f040 80dc 	bne.w	8025790 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 80255d8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80255da:	b153      	cbz	r3, 80255f2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 80255dc:	2508      	movs	r5, #8
 80255de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80255e0:	fb95 f3f8 	sdiv	r3, r5, r8
 80255e4:	1e5d      	subs	r5, r3, #1
 80255e6:	4415      	add	r5, r2
 80255e8:	fb95 f5f3 	sdiv	r5, r5, r3
 80255ec:	fb15 f503 	smulbb	r5, r5, r3
 80255f0:	b2ad      	uxth	r5, r5
 80255f2:	b907      	cbnz	r7, 80255f6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 80255f4:	b16c      	cbz	r4, 8025612 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 80255f6:	fb04 7305 	mla	r3, r4, r5, r7
 80255fa:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80255fc:	ebaa 0a04 	sub.w	sl, sl, r4
 8025600:	fb08 f303 	mul.w	r3, r8, r3
 8025604:	fa1f fa8a 	uxth.w	sl, sl
 8025608:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 802560c:	f003 0407 	and.w	r4, r3, #7
 8025610:	9226      	str	r2, [sp, #152]	@ 0x98
 8025612:	4649      	mov	r1, r9
 8025614:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8025616:	f7ff ff1b 	bl	8025450 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 802561a:	4683      	mov	fp, r0
 802561c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802561e:	f7ff ff3d 	bl	802549c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 8025622:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025624:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025626:	4681      	mov	r9, r0
 8025628:	1a9b      	subs	r3, r3, r2
 802562a:	459a      	cmp	sl, r3
 802562c:	bfa8      	it	ge
 802562e:	469a      	movge	sl, r3
 8025630:	f1ba 0f00 	cmp.w	sl, #0
 8025634:	f340 80f9 	ble.w	802582a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8025638:	1bf6      	subs	r6, r6, r7
 802563a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802563c:	1b9e      	subs	r6, r3, r6
 802563e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025640:	429e      	cmp	r6, r3
 8025642:	bfd4      	ite	le
 8025644:	ebc7 0706 	rsble	r7, r7, r6
 8025648:	ebc7 0703 	rsbgt	r7, r7, r3
 802564c:	2f00      	cmp	r7, #0
 802564e:	f340 80ec 	ble.w	802582a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8025652:	1bed      	subs	r5, r5, r7
 8025654:	fb08 f305 	mul.w	r3, r8, r5
 8025658:	930d      	str	r3, [sp, #52]	@ 0x34
 802565a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802565c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8025660:	930e      	str	r3, [sp, #56]	@ 0x38
 8025662:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8025664:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025668:	930f      	str	r3, [sp, #60]	@ 0x3c
 802566a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802566c:	b2db      	uxtb	r3, r3
 802566e:	9310      	str	r3, [sp, #64]	@ 0x40
 8025670:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025672:	2b00      	cmp	r3, #0
 8025674:	f040 80de 	bne.w	8025834 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 8025678:	4b7c      	ldr	r3, [pc, #496]	@ (802586c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 802567a:	6818      	ldr	r0, [r3, #0]
 802567c:	6803      	ldr	r3, [r0, #0]
 802567e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8025680:	4798      	blx	r3
 8025682:	2301      	movs	r3, #1
 8025684:	4a7a      	ldr	r2, [pc, #488]	@ (8025870 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 8025686:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 802568a:	fb07 9b1b 	mls	fp, r7, fp, r9
 802568e:	fa03 f308 	lsl.w	r3, r3, r8
 8025692:	8811      	ldrh	r1, [r2, #0]
 8025694:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	@ 0x54
 8025698:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 802569c:	3b01      	subs	r3, #1
 802569e:	fb06 bb07 	mla	fp, r6, r7, fp
 80256a2:	b2db      	uxtb	r3, r3
 80256a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80256a6:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 80256aa:	fb01 2303 	mla	r3, r1, r3, r2
 80256ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80256b2:	18c3      	adds	r3, r0, r3
 80256b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80256b6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80256b8:	781a      	ldrb	r2, [r3, #0]
 80256ba:	4122      	asrs	r2, r4
 80256bc:	b2d2      	uxtb	r2, r2
 80256be:	f11a 3aff 	adds.w	sl, sl, #4294967295
 80256c2:	f0c0 80d7 	bcc.w	8025874 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 80256c6:	46be      	mov	lr, r7
 80256c8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80256ca:	f11e 3eff 	adds.w	lr, lr, #4294967295
 80256ce:	f0c0 80ba 	bcc.w	8025846 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 80256d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80256d4:	4013      	ands	r3, r2
 80256d6:	d041      	beq.n	802575c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 80256d8:	20ff      	movs	r0, #255	@ 0xff
 80256da:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80256dc:	fb90 f5f5 	sdiv	r5, r0, r5
 80256e0:	436b      	muls	r3, r5
 80256e2:	2bfe      	cmp	r3, #254	@ 0xfe
 80256e4:	dd03      	ble.n	80256ee <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 80256e6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80256e8:	4285      	cmp	r5, r0
 80256ea:	f000 80a5 	beq.w	8025838 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 80256ee:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80256f0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80256f2:	fb15 f303 	smulbb	r3, r5, r3
 80256f6:	b29b      	uxth	r3, r3
 80256f8:	1c5d      	adds	r5, r3, #1
 80256fa:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 80256fe:	780d      	ldrb	r5, [r1, #0]
 8025700:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025704:	fa1f fc83 	uxth.w	ip, r3
 8025708:	43db      	mvns	r3, r3
 802570a:	fb10 f90c 	smulbb	r9, r0, ip
 802570e:	b2db      	uxtb	r3, r3
 8025710:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8025712:	fb05 9503 	mla	r5, r5, r3, r9
 8025716:	b2ad      	uxth	r5, r5
 8025718:	f105 0901 	add.w	r9, r5, #1
 802571c:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8025720:	fb10 f90c 	smulbb	r9, r0, ip
 8025724:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8025726:	122d      	asrs	r5, r5, #8
 8025728:	fb10 fc0c 	smulbb	ip, r0, ip
 802572c:	700d      	strb	r5, [r1, #0]
 802572e:	784d      	ldrb	r5, [r1, #1]
 8025730:	fb05 9503 	mla	r5, r5, r3, r9
 8025734:	b2ad      	uxth	r5, r5
 8025736:	f105 0901 	add.w	r9, r5, #1
 802573a:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 802573e:	122d      	asrs	r5, r5, #8
 8025740:	704d      	strb	r5, [r1, #1]
 8025742:	788d      	ldrb	r5, [r1, #2]
 8025744:	fb05 cc03 	mla	ip, r5, r3, ip
 8025748:	fa1f fc8c 	uxth.w	ip, ip
 802574c:	f10c 0301 	add.w	r3, ip, #1
 8025750:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8025754:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8025758:	f881 c002 	strb.w	ip, [r1, #2]
 802575c:	4444      	add	r4, r8
 802575e:	4431      	add	r1, r6
 8025760:	b2a4      	uxth	r4, r4
 8025762:	2c07      	cmp	r4, #7
 8025764:	bf89      	itett	hi
 8025766:	9b26      	ldrhi	r3, [sp, #152]	@ 0x98
 8025768:	fa42 f208 	asrls.w	r2, r2, r8
 802576c:	2400      	movhi	r4, #0
 802576e:	785a      	ldrbhi	r2, [r3, #1]
 8025770:	bf8a      	itet	hi
 8025772:	3301      	addhi	r3, #1
 8025774:	b2d2      	uxtbls	r2, r2
 8025776:	9326      	strhi	r3, [sp, #152]	@ 0x98
 8025778:	e7a7      	b.n	80256ca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 802577a:	441e      	add	r6, r3
 802577c:	b236      	sxth	r6, r6
 802577e:	e6ed      	b.n	802555c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8025780:	f1b9 0f01 	cmp.w	r9, #1
 8025784:	f47f af28 	bne.w	80255d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8025788:	f1bb 0f01 	cmp.w	fp, #1
 802578c:	f47f af24 	bne.w	80255d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8025790:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 802586c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 8025794:	f8db 0000 	ldr.w	r0, [fp]
 8025798:	6803      	ldr	r3, [r0, #0]
 802579a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802579c:	4798      	blx	r3
 802579e:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 80257a2:	465a      	mov	r2, fp
 80257a4:	d006      	beq.n	80257b4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 80257a6:	f1b8 0f04 	cmp.w	r8, #4
 80257aa:	d141      	bne.n	8025830 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 80257ac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80257ae:	3300      	adds	r3, #0
 80257b0:	bf18      	it	ne
 80257b2:	2301      	movne	r3, #1
 80257b4:	0580      	lsls	r0, r0, #22
 80257b6:	d566      	bpl.n	8025886 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 80257b8:	f1b8 0f08 	cmp.w	r8, #8
 80257bc:	d163      	bne.n	8025886 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 80257be:	2b00      	cmp	r3, #0
 80257c0:	bf0c      	ite	eq
 80257c2:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 80257c6:	f44f 7180 	movne.w	r1, #256	@ 0x100
 80257ca:	2f00      	cmp	r7, #0
 80257cc:	f47f af04 	bne.w	80255d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80257d0:	2c00      	cmp	r4, #0
 80257d2:	f47f af01 	bne.w	80255d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80257d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80257d8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80257da:	18f3      	adds	r3, r6, r3
 80257dc:	4283      	cmp	r3, r0
 80257de:	f73f aefb 	bgt.w	80255d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80257e2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80257e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80257e6:	4403      	add	r3, r0
 80257e8:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80257ea:	4283      	cmp	r3, r0
 80257ec:	f73f aef4 	bgt.w	80255d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80257f0:	f1b8 0f08 	cmp.w	r8, #8
 80257f4:	6810      	ldr	r0, [r2, #0]
 80257f6:	f04f 0600 	mov.w	r6, #0
 80257fa:	f8bd 3056 	ldrh.w	r3, [sp, #86]	@ 0x56
 80257fe:	bf18      	it	ne
 8025800:	3501      	addne	r5, #1
 8025802:	6804      	ldr	r4, [r0, #0]
 8025804:	f8bd 2054 	ldrh.w	r2, [sp, #84]	@ 0x54
 8025808:	bf18      	it	ne
 802580a:	f025 0501 	bicne.w	r5, r5, #1
 802580e:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8025812:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8025814:	bf18      	it	ne
 8025816:	b2ad      	uxthne	r5, r5
 8025818:	9104      	str	r1, [sp, #16]
 802581a:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 802581c:	e9cd 5a00 	strd	r5, sl, [sp]
 8025820:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8025824:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8025826:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 8025828:	47a0      	blx	r4
 802582a:	b017      	add	sp, #92	@ 0x5c
 802582c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025830:	2300      	movs	r3, #0
 8025832:	e7bf      	b.n	80257b4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8025834:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8025836:	e724      	b.n	8025682 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 8025838:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802583a:	700b      	strb	r3, [r1, #0]
 802583c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802583e:	704b      	strb	r3, [r1, #1]
 8025840:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025842:	708b      	strb	r3, [r1, #2]
 8025844:	e78a      	b.n	802575c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 8025846:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025848:	b153      	cbz	r3, 8025860 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 802584a:	441c      	add	r4, r3
 802584c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802584e:	b2a4      	uxth	r4, r4
 8025850:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8025854:	f004 0407 	and.w	r4, r4, #7
 8025858:	781a      	ldrb	r2, [r3, #0]
 802585a:	9326      	str	r3, [sp, #152]	@ 0x98
 802585c:	4122      	asrs	r2, r4
 802585e:	b2d2      	uxtb	r2, r2
 8025860:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025862:	445b      	add	r3, fp
 8025864:	9309      	str	r3, [sp, #36]	@ 0x24
 8025866:	e72a      	b.n	80256be <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 8025868:	24034224 	.word	0x24034224
 802586c:	2403422c 	.word	0x2403422c
 8025870:	24034226 	.word	0x24034226
 8025874:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025876:	2b00      	cmp	r3, #0
 8025878:	d1d7      	bne.n	802582a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 802587a:	4b06      	ldr	r3, [pc, #24]	@ (8025894 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 802587c:	6818      	ldr	r0, [r3, #0]
 802587e:	6803      	ldr	r3, [r0, #0]
 8025880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8025882:	4798      	blx	r3
 8025884:	e7d1      	b.n	802582a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8025886:	2b00      	cmp	r3, #0
 8025888:	f43f aea6 	beq.w	80255d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 802588c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8025890:	e79b      	b.n	80257ca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 8025892:	bf00      	nop
 8025894:	2403422c 	.word	0x2403422c

08025898 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8025898:	b538      	push	{r3, r4, r5, lr}
 802589a:	4c15      	ldr	r4, [pc, #84]	@ (80258f0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 802589c:	4605      	mov	r5, r0
 802589e:	7823      	ldrb	r3, [r4, #0]
 80258a0:	f3bf 8f5b 	dmb	ish
 80258a4:	07da      	lsls	r2, r3, #31
 80258a6:	d40b      	bmi.n	80258c0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80258a8:	4620      	mov	r0, r4
 80258aa:	f006 f8d8 	bl	802ba5e <__cxa_guard_acquire>
 80258ae:	b138      	cbz	r0, 80258c0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80258b0:	4620      	mov	r0, r4
 80258b2:	f006 f8e0 	bl	802ba76 <__cxa_guard_release>
 80258b6:	4a0f      	ldr	r2, [pc, #60]	@ (80258f4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80258b8:	490f      	ldr	r1, [pc, #60]	@ (80258f8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 80258ba:	4810      	ldr	r0, [pc, #64]	@ (80258fc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80258bc:	f006 f8c8 	bl	802ba50 <__aeabi_atexit>
 80258c0:	4c0f      	ldr	r4, [pc, #60]	@ (8025900 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 80258c2:	7823      	ldrb	r3, [r4, #0]
 80258c4:	f3bf 8f5b 	dmb	ish
 80258c8:	07db      	lsls	r3, r3, #31
 80258ca:	d40b      	bmi.n	80258e4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80258cc:	4620      	mov	r0, r4
 80258ce:	f006 f8c6 	bl	802ba5e <__cxa_guard_acquire>
 80258d2:	b138      	cbz	r0, 80258e4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80258d4:	4620      	mov	r0, r4
 80258d6:	f006 f8ce 	bl	802ba76 <__cxa_guard_release>
 80258da:	4a06      	ldr	r2, [pc, #24]	@ (80258f4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80258dc:	4909      	ldr	r1, [pc, #36]	@ (8025904 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 80258de:	480a      	ldr	r0, [pc, #40]	@ (8025908 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80258e0:	f006 f8b6 	bl	802ba50 <__aeabi_atexit>
 80258e4:	4b05      	ldr	r3, [pc, #20]	@ (80258fc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80258e6:	616b      	str	r3, [r5, #20]
 80258e8:	4b07      	ldr	r3, [pc, #28]	@ (8025908 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80258ea:	61ab      	str	r3, [r5, #24]
 80258ec:	bd38      	pop	{r3, r4, r5, pc}
 80258ee:	bf00      	nop
 80258f0:	24034310 	.word	0x24034310
 80258f4:	24000000 	.word	0x24000000
 80258f8:	08022b9b 	.word	0x08022b9b
 80258fc:	2400009c 	.word	0x2400009c
 8025900:	24034314 	.word	0x24034314
 8025904:	08022b99 	.word	0x08022b99
 8025908:	240000a0 	.word	0x240000a0

0802590c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 802590c:	b538      	push	{r3, r4, r5, lr}
 802590e:	4c15      	ldr	r4, [pc, #84]	@ (8025964 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8025910:	4605      	mov	r5, r0
 8025912:	7823      	ldrb	r3, [r4, #0]
 8025914:	f3bf 8f5b 	dmb	ish
 8025918:	07da      	lsls	r2, r3, #31
 802591a:	d40b      	bmi.n	8025934 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 802591c:	4620      	mov	r0, r4
 802591e:	f006 f89e 	bl	802ba5e <__cxa_guard_acquire>
 8025922:	b138      	cbz	r0, 8025934 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8025924:	4620      	mov	r0, r4
 8025926:	f006 f8a6 	bl	802ba76 <__cxa_guard_release>
 802592a:	4a0f      	ldr	r2, [pc, #60]	@ (8025968 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 802592c:	490f      	ldr	r1, [pc, #60]	@ (802596c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 802592e:	4810      	ldr	r0, [pc, #64]	@ (8025970 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8025930:	f006 f88e 	bl	802ba50 <__aeabi_atexit>
 8025934:	4c0f      	ldr	r4, [pc, #60]	@ (8025974 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8025936:	7823      	ldrb	r3, [r4, #0]
 8025938:	f3bf 8f5b 	dmb	ish
 802593c:	07db      	lsls	r3, r3, #31
 802593e:	d40b      	bmi.n	8025958 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8025940:	4620      	mov	r0, r4
 8025942:	f006 f88c 	bl	802ba5e <__cxa_guard_acquire>
 8025946:	b138      	cbz	r0, 8025958 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8025948:	4620      	mov	r0, r4
 802594a:	f006 f894 	bl	802ba76 <__cxa_guard_release>
 802594e:	4a06      	ldr	r2, [pc, #24]	@ (8025968 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8025950:	4909      	ldr	r1, [pc, #36]	@ (8025978 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8025952:	480a      	ldr	r0, [pc, #40]	@ (802597c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8025954:	f006 f87c 	bl	802ba50 <__aeabi_atexit>
 8025958:	4b05      	ldr	r3, [pc, #20]	@ (8025970 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 802595a:	60eb      	str	r3, [r5, #12]
 802595c:	4b07      	ldr	r3, [pc, #28]	@ (802597c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 802595e:	612b      	str	r3, [r5, #16]
 8025960:	bd38      	pop	{r3, r4, r5, pc}
 8025962:	bf00      	nop
 8025964:	240342f0 	.word	0x240342f0
 8025968:	24000000 	.word	0x24000000
 802596c:	08022b9f 	.word	0x08022b9f
 8025970:	2400007c 	.word	0x2400007c
 8025974:	240342f4 	.word	0x240342f4
 8025978:	08022b9d 	.word	0x08022b9d
 802597c:	24000080 	.word	0x24000080

08025980 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 8025980:	b510      	push	{r4, lr}
 8025982:	4604      	mov	r4, r0
 8025984:	f7ff ff88 	bl	8025898 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8025988:	4620      	mov	r0, r4
 802598a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802598e:	f7ff bfbd 	b.w	802590c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08025994 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8025994:	b538      	push	{r3, r4, r5, lr}
 8025996:	4c15      	ldr	r4, [pc, #84]	@ (80259ec <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8025998:	4605      	mov	r5, r0
 802599a:	7823      	ldrb	r3, [r4, #0]
 802599c:	f3bf 8f5b 	dmb	ish
 80259a0:	07da      	lsls	r2, r3, #31
 80259a2:	d40b      	bmi.n	80259bc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80259a4:	4620      	mov	r0, r4
 80259a6:	f006 f85a 	bl	802ba5e <__cxa_guard_acquire>
 80259aa:	b138      	cbz	r0, 80259bc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80259ac:	4620      	mov	r0, r4
 80259ae:	f006 f862 	bl	802ba76 <__cxa_guard_release>
 80259b2:	4a0f      	ldr	r2, [pc, #60]	@ (80259f0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80259b4:	490f      	ldr	r1, [pc, #60]	@ (80259f4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 80259b6:	4810      	ldr	r0, [pc, #64]	@ (80259f8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80259b8:	f006 f84a 	bl	802ba50 <__aeabi_atexit>
 80259bc:	4c0f      	ldr	r4, [pc, #60]	@ (80259fc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 80259be:	7823      	ldrb	r3, [r4, #0]
 80259c0:	f3bf 8f5b 	dmb	ish
 80259c4:	07db      	lsls	r3, r3, #31
 80259c6:	d40b      	bmi.n	80259e0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80259c8:	4620      	mov	r0, r4
 80259ca:	f006 f848 	bl	802ba5e <__cxa_guard_acquire>
 80259ce:	b138      	cbz	r0, 80259e0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80259d0:	4620      	mov	r0, r4
 80259d2:	f006 f850 	bl	802ba76 <__cxa_guard_release>
 80259d6:	4a06      	ldr	r2, [pc, #24]	@ (80259f0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80259d8:	4909      	ldr	r1, [pc, #36]	@ (8025a00 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 80259da:	480a      	ldr	r0, [pc, #40]	@ (8025a04 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80259dc:	f006 f838 	bl	802ba50 <__aeabi_atexit>
 80259e0:	4b05      	ldr	r3, [pc, #20]	@ (80259f8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80259e2:	626b      	str	r3, [r5, #36]	@ 0x24
 80259e4:	4b07      	ldr	r3, [pc, #28]	@ (8025a04 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80259e6:	62ab      	str	r3, [r5, #40]	@ 0x28
 80259e8:	bd38      	pop	{r3, r4, r5, pc}
 80259ea:	bf00      	nop
 80259ec:	24034318 	.word	0x24034318
 80259f0:	24000000 	.word	0x24000000
 80259f4:	08022b93 	.word	0x08022b93
 80259f8:	240000a4 	.word	0x240000a4
 80259fc:	2403431c 	.word	0x2403431c
 8025a00:	08022b91 	.word	0x08022b91
 8025a04:	240000a8 	.word	0x240000a8

08025a08 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8025a08:	b538      	push	{r3, r4, r5, lr}
 8025a0a:	4c15      	ldr	r4, [pc, #84]	@ (8025a60 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8025a0c:	4605      	mov	r5, r0
 8025a0e:	7823      	ldrb	r3, [r4, #0]
 8025a10:	f3bf 8f5b 	dmb	ish
 8025a14:	07da      	lsls	r2, r3, #31
 8025a16:	d40b      	bmi.n	8025a30 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8025a18:	4620      	mov	r0, r4
 8025a1a:	f006 f820 	bl	802ba5e <__cxa_guard_acquire>
 8025a1e:	b138      	cbz	r0, 8025a30 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8025a20:	4620      	mov	r0, r4
 8025a22:	f006 f828 	bl	802ba76 <__cxa_guard_release>
 8025a26:	4a0f      	ldr	r2, [pc, #60]	@ (8025a64 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8025a28:	490f      	ldr	r1, [pc, #60]	@ (8025a68 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8025a2a:	4810      	ldr	r0, [pc, #64]	@ (8025a6c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8025a2c:	f006 f810 	bl	802ba50 <__aeabi_atexit>
 8025a30:	4c0f      	ldr	r4, [pc, #60]	@ (8025a70 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8025a32:	7823      	ldrb	r3, [r4, #0]
 8025a34:	f3bf 8f5b 	dmb	ish
 8025a38:	07db      	lsls	r3, r3, #31
 8025a3a:	d40b      	bmi.n	8025a54 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8025a3c:	4620      	mov	r0, r4
 8025a3e:	f006 f80e 	bl	802ba5e <__cxa_guard_acquire>
 8025a42:	b138      	cbz	r0, 8025a54 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8025a44:	4620      	mov	r0, r4
 8025a46:	f006 f816 	bl	802ba76 <__cxa_guard_release>
 8025a4a:	4a06      	ldr	r2, [pc, #24]	@ (8025a64 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8025a4c:	4909      	ldr	r1, [pc, #36]	@ (8025a74 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8025a4e:	480a      	ldr	r0, [pc, #40]	@ (8025a78 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8025a50:	f005 fffe 	bl	802ba50 <__aeabi_atexit>
 8025a54:	4b05      	ldr	r3, [pc, #20]	@ (8025a6c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8025a56:	61eb      	str	r3, [r5, #28]
 8025a58:	4b07      	ldr	r3, [pc, #28]	@ (8025a78 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8025a5a:	622b      	str	r3, [r5, #32]
 8025a5c:	bd38      	pop	{r3, r4, r5, pc}
 8025a5e:	bf00      	nop
 8025a60:	240342f8 	.word	0x240342f8
 8025a64:	24000000 	.word	0x24000000
 8025a68:	08022b97 	.word	0x08022b97
 8025a6c:	24000084 	.word	0x24000084
 8025a70:	240342fc 	.word	0x240342fc
 8025a74:	08022b95 	.word	0x08022b95
 8025a78:	24000088 	.word	0x24000088

08025a7c <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 8025a7c:	b510      	push	{r4, lr}
 8025a7e:	4604      	mov	r4, r0
 8025a80:	f7ff ff88 	bl	8025994 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8025a84:	4620      	mov	r0, r4
 8025a86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025a8a:	f7ff bfbd 	b.w	8025a08 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08025a90 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8025a90:	b538      	push	{r3, r4, r5, lr}
 8025a92:	4c15      	ldr	r4, [pc, #84]	@ (8025ae8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8025a94:	4605      	mov	r5, r0
 8025a96:	7823      	ldrb	r3, [r4, #0]
 8025a98:	f3bf 8f5b 	dmb	ish
 8025a9c:	07da      	lsls	r2, r3, #31
 8025a9e:	d40b      	bmi.n	8025ab8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8025aa0:	4620      	mov	r0, r4
 8025aa2:	f005 ffdc 	bl	802ba5e <__cxa_guard_acquire>
 8025aa6:	b138      	cbz	r0, 8025ab8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8025aa8:	4620      	mov	r0, r4
 8025aaa:	f005 ffe4 	bl	802ba76 <__cxa_guard_release>
 8025aae:	4a0f      	ldr	r2, [pc, #60]	@ (8025aec <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8025ab0:	490f      	ldr	r1, [pc, #60]	@ (8025af0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8025ab2:	4810      	ldr	r0, [pc, #64]	@ (8025af4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8025ab4:	f005 ffcc 	bl	802ba50 <__aeabi_atexit>
 8025ab8:	4c0f      	ldr	r4, [pc, #60]	@ (8025af8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8025aba:	7823      	ldrb	r3, [r4, #0]
 8025abc:	f3bf 8f5b 	dmb	ish
 8025ac0:	07db      	lsls	r3, r3, #31
 8025ac2:	d40b      	bmi.n	8025adc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8025ac4:	4620      	mov	r0, r4
 8025ac6:	f005 ffca 	bl	802ba5e <__cxa_guard_acquire>
 8025aca:	b138      	cbz	r0, 8025adc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8025acc:	4620      	mov	r0, r4
 8025ace:	f005 ffd2 	bl	802ba76 <__cxa_guard_release>
 8025ad2:	4a06      	ldr	r2, [pc, #24]	@ (8025aec <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8025ad4:	4909      	ldr	r1, [pc, #36]	@ (8025afc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8025ad6:	480a      	ldr	r0, [pc, #40]	@ (8025b00 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8025ad8:	f005 ffba 	bl	802ba50 <__aeabi_atexit>
 8025adc:	4b05      	ldr	r3, [pc, #20]	@ (8025af4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8025ade:	636b      	str	r3, [r5, #52]	@ 0x34
 8025ae0:	4b07      	ldr	r3, [pc, #28]	@ (8025b00 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8025ae2:	63ab      	str	r3, [r5, #56]	@ 0x38
 8025ae4:	bd38      	pop	{r3, r4, r5, pc}
 8025ae6:	bf00      	nop
 8025ae8:	24034300 	.word	0x24034300
 8025aec:	24000000 	.word	0x24000000
 8025af0:	08022b8b 	.word	0x08022b8b
 8025af4:	2400008c 	.word	0x2400008c
 8025af8:	24034304 	.word	0x24034304
 8025afc:	08022b89 	.word	0x08022b89
 8025b00:	24000090 	.word	0x24000090

08025b04 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8025b04:	b538      	push	{r3, r4, r5, lr}
 8025b06:	4c15      	ldr	r4, [pc, #84]	@ (8025b5c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8025b08:	4605      	mov	r5, r0
 8025b0a:	7823      	ldrb	r3, [r4, #0]
 8025b0c:	f3bf 8f5b 	dmb	ish
 8025b10:	07da      	lsls	r2, r3, #31
 8025b12:	d40b      	bmi.n	8025b2c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8025b14:	4620      	mov	r0, r4
 8025b16:	f005 ffa2 	bl	802ba5e <__cxa_guard_acquire>
 8025b1a:	b138      	cbz	r0, 8025b2c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8025b1c:	4620      	mov	r0, r4
 8025b1e:	f005 ffaa 	bl	802ba76 <__cxa_guard_release>
 8025b22:	4a0f      	ldr	r2, [pc, #60]	@ (8025b60 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8025b24:	490f      	ldr	r1, [pc, #60]	@ (8025b64 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8025b26:	4810      	ldr	r0, [pc, #64]	@ (8025b68 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8025b28:	f005 ff92 	bl	802ba50 <__aeabi_atexit>
 8025b2c:	4c0f      	ldr	r4, [pc, #60]	@ (8025b6c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8025b2e:	7823      	ldrb	r3, [r4, #0]
 8025b30:	f3bf 8f5b 	dmb	ish
 8025b34:	07db      	lsls	r3, r3, #31
 8025b36:	d40b      	bmi.n	8025b50 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8025b38:	4620      	mov	r0, r4
 8025b3a:	f005 ff90 	bl	802ba5e <__cxa_guard_acquire>
 8025b3e:	b138      	cbz	r0, 8025b50 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8025b40:	4620      	mov	r0, r4
 8025b42:	f005 ff98 	bl	802ba76 <__cxa_guard_release>
 8025b46:	4a06      	ldr	r2, [pc, #24]	@ (8025b60 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8025b48:	4909      	ldr	r1, [pc, #36]	@ (8025b70 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8025b4a:	480a      	ldr	r0, [pc, #40]	@ (8025b74 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8025b4c:	f005 ff80 	bl	802ba50 <__aeabi_atexit>
 8025b50:	4b05      	ldr	r3, [pc, #20]	@ (8025b68 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8025b52:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8025b54:	4b07      	ldr	r3, [pc, #28]	@ (8025b74 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8025b56:	632b      	str	r3, [r5, #48]	@ 0x30
 8025b58:	bd38      	pop	{r3, r4, r5, pc}
 8025b5a:	bf00      	nop
 8025b5c:	240342d8 	.word	0x240342d8
 8025b60:	24000000 	.word	0x24000000
 8025b64:	08022b8f 	.word	0x08022b8f
 8025b68:	24000064 	.word	0x24000064
 8025b6c:	240342dc 	.word	0x240342dc
 8025b70:	08022b8d 	.word	0x08022b8d
 8025b74:	24000068 	.word	0x24000068

08025b78 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8025b78:	b510      	push	{r4, lr}
 8025b7a:	4604      	mov	r4, r0
 8025b7c:	f7ff ff88 	bl	8025a90 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8025b80:	4620      	mov	r0, r4
 8025b82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025b86:	f7ff bfbd 	b.w	8025b04 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08025b8c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8025b8c:	b538      	push	{r3, r4, r5, lr}
 8025b8e:	4c15      	ldr	r4, [pc, #84]	@ (8025be4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8025b90:	4605      	mov	r5, r0
 8025b92:	7823      	ldrb	r3, [r4, #0]
 8025b94:	f3bf 8f5b 	dmb	ish
 8025b98:	07da      	lsls	r2, r3, #31
 8025b9a:	d40b      	bmi.n	8025bb4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8025b9c:	4620      	mov	r0, r4
 8025b9e:	f005 ff5e 	bl	802ba5e <__cxa_guard_acquire>
 8025ba2:	b138      	cbz	r0, 8025bb4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8025ba4:	4620      	mov	r0, r4
 8025ba6:	f005 ff66 	bl	802ba76 <__cxa_guard_release>
 8025baa:	4a0f      	ldr	r2, [pc, #60]	@ (8025be8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8025bac:	490f      	ldr	r1, [pc, #60]	@ (8025bec <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8025bae:	4810      	ldr	r0, [pc, #64]	@ (8025bf0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8025bb0:	f005 ff4e 	bl	802ba50 <__aeabi_atexit>
 8025bb4:	4c0f      	ldr	r4, [pc, #60]	@ (8025bf4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8025bb6:	7823      	ldrb	r3, [r4, #0]
 8025bb8:	f3bf 8f5b 	dmb	ish
 8025bbc:	07db      	lsls	r3, r3, #31
 8025bbe:	d40b      	bmi.n	8025bd8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8025bc0:	4620      	mov	r0, r4
 8025bc2:	f005 ff4c 	bl	802ba5e <__cxa_guard_acquire>
 8025bc6:	b138      	cbz	r0, 8025bd8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8025bc8:	4620      	mov	r0, r4
 8025bca:	f005 ff54 	bl	802ba76 <__cxa_guard_release>
 8025bce:	4a06      	ldr	r2, [pc, #24]	@ (8025be8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8025bd0:	4909      	ldr	r1, [pc, #36]	@ (8025bf8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8025bd2:	480a      	ldr	r0, [pc, #40]	@ (8025bfc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8025bd4:	f005 ff3c 	bl	802ba50 <__aeabi_atexit>
 8025bd8:	4b05      	ldr	r3, [pc, #20]	@ (8025bf0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8025bda:	646b      	str	r3, [r5, #68]	@ 0x44
 8025bdc:	4b07      	ldr	r3, [pc, #28]	@ (8025bfc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8025bde:	64ab      	str	r3, [r5, #72]	@ 0x48
 8025be0:	bd38      	pop	{r3, r4, r5, pc}
 8025be2:	bf00      	nop
 8025be4:	24034308 	.word	0x24034308
 8025be8:	24000000 	.word	0x24000000
 8025bec:	08022b83 	.word	0x08022b83
 8025bf0:	24000094 	.word	0x24000094
 8025bf4:	2403430c 	.word	0x2403430c
 8025bf8:	08022b81 	.word	0x08022b81
 8025bfc:	24000098 	.word	0x24000098

08025c00 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8025c00:	b538      	push	{r3, r4, r5, lr}
 8025c02:	4c15      	ldr	r4, [pc, #84]	@ (8025c58 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8025c04:	4605      	mov	r5, r0
 8025c06:	7823      	ldrb	r3, [r4, #0]
 8025c08:	f3bf 8f5b 	dmb	ish
 8025c0c:	07da      	lsls	r2, r3, #31
 8025c0e:	d40b      	bmi.n	8025c28 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8025c10:	4620      	mov	r0, r4
 8025c12:	f005 ff24 	bl	802ba5e <__cxa_guard_acquire>
 8025c16:	b138      	cbz	r0, 8025c28 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8025c18:	4620      	mov	r0, r4
 8025c1a:	f005 ff2c 	bl	802ba76 <__cxa_guard_release>
 8025c1e:	4a0f      	ldr	r2, [pc, #60]	@ (8025c5c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8025c20:	490f      	ldr	r1, [pc, #60]	@ (8025c60 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8025c22:	4810      	ldr	r0, [pc, #64]	@ (8025c64 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8025c24:	f005 ff14 	bl	802ba50 <__aeabi_atexit>
 8025c28:	4c0f      	ldr	r4, [pc, #60]	@ (8025c68 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8025c2a:	7823      	ldrb	r3, [r4, #0]
 8025c2c:	f3bf 8f5b 	dmb	ish
 8025c30:	07db      	lsls	r3, r3, #31
 8025c32:	d40b      	bmi.n	8025c4c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8025c34:	4620      	mov	r0, r4
 8025c36:	f005 ff12 	bl	802ba5e <__cxa_guard_acquire>
 8025c3a:	b138      	cbz	r0, 8025c4c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8025c3c:	4620      	mov	r0, r4
 8025c3e:	f005 ff1a 	bl	802ba76 <__cxa_guard_release>
 8025c42:	4a06      	ldr	r2, [pc, #24]	@ (8025c5c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8025c44:	4909      	ldr	r1, [pc, #36]	@ (8025c6c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8025c46:	480a      	ldr	r0, [pc, #40]	@ (8025c70 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8025c48:	f005 ff02 	bl	802ba50 <__aeabi_atexit>
 8025c4c:	4b05      	ldr	r3, [pc, #20]	@ (8025c64 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8025c4e:	63eb      	str	r3, [r5, #60]	@ 0x3c
 8025c50:	4b07      	ldr	r3, [pc, #28]	@ (8025c70 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8025c52:	642b      	str	r3, [r5, #64]	@ 0x40
 8025c54:	bd38      	pop	{r3, r4, r5, pc}
 8025c56:	bf00      	nop
 8025c58:	240342e8 	.word	0x240342e8
 8025c5c:	24000000 	.word	0x24000000
 8025c60:	08022b87 	.word	0x08022b87
 8025c64:	24000074 	.word	0x24000074
 8025c68:	240342ec 	.word	0x240342ec
 8025c6c:	08022b85 	.word	0x08022b85
 8025c70:	24000078 	.word	0x24000078

08025c74 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8025c74:	b510      	push	{r4, lr}
 8025c76:	4604      	mov	r4, r0
 8025c78:	f7ff ff88 	bl	8025b8c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8025c7c:	4620      	mov	r0, r4
 8025c7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025c82:	f7ff bfbd 	b.w	8025c00 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08025c88 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8025c88:	b538      	push	{r3, r4, r5, lr}
 8025c8a:	4c15      	ldr	r4, [pc, #84]	@ (8025ce0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8025c8c:	4605      	mov	r5, r0
 8025c8e:	7823      	ldrb	r3, [r4, #0]
 8025c90:	f3bf 8f5b 	dmb	ish
 8025c94:	07da      	lsls	r2, r3, #31
 8025c96:	d40b      	bmi.n	8025cb0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8025c98:	4620      	mov	r0, r4
 8025c9a:	f005 fee0 	bl	802ba5e <__cxa_guard_acquire>
 8025c9e:	b138      	cbz	r0, 8025cb0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8025ca0:	4620      	mov	r0, r4
 8025ca2:	f005 fee8 	bl	802ba76 <__cxa_guard_release>
 8025ca6:	4a0f      	ldr	r2, [pc, #60]	@ (8025ce4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8025ca8:	490f      	ldr	r1, [pc, #60]	@ (8025ce8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8025caa:	4810      	ldr	r0, [pc, #64]	@ (8025cec <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8025cac:	f005 fed0 	bl	802ba50 <__aeabi_atexit>
 8025cb0:	4c0f      	ldr	r4, [pc, #60]	@ (8025cf0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8025cb2:	7823      	ldrb	r3, [r4, #0]
 8025cb4:	f3bf 8f5b 	dmb	ish
 8025cb8:	07db      	lsls	r3, r3, #31
 8025cba:	d40b      	bmi.n	8025cd4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8025cbc:	4620      	mov	r0, r4
 8025cbe:	f005 fece 	bl	802ba5e <__cxa_guard_acquire>
 8025cc2:	b138      	cbz	r0, 8025cd4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8025cc4:	4620      	mov	r0, r4
 8025cc6:	f005 fed6 	bl	802ba76 <__cxa_guard_release>
 8025cca:	4a06      	ldr	r2, [pc, #24]	@ (8025ce4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8025ccc:	4909      	ldr	r1, [pc, #36]	@ (8025cf4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8025cce:	480a      	ldr	r0, [pc, #40]	@ (8025cf8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8025cd0:	f005 febe 	bl	802ba50 <__aeabi_atexit>
 8025cd4:	4b05      	ldr	r3, [pc, #20]	@ (8025cec <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8025cd6:	656b      	str	r3, [r5, #84]	@ 0x54
 8025cd8:	4b07      	ldr	r3, [pc, #28]	@ (8025cf8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8025cda:	65ab      	str	r3, [r5, #88]	@ 0x58
 8025cdc:	bd38      	pop	{r3, r4, r5, pc}
 8025cde:	bf00      	nop
 8025ce0:	240342e0 	.word	0x240342e0
 8025ce4:	24000000 	.word	0x24000000
 8025ce8:	08022b7b 	.word	0x08022b7b
 8025cec:	2400006c 	.word	0x2400006c
 8025cf0:	240342e4 	.word	0x240342e4
 8025cf4:	08022b79 	.word	0x08022b79
 8025cf8:	24000070 	.word	0x24000070

08025cfc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8025cfc:	b538      	push	{r3, r4, r5, lr}
 8025cfe:	4c15      	ldr	r4, [pc, #84]	@ (8025d54 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8025d00:	4605      	mov	r5, r0
 8025d02:	7823      	ldrb	r3, [r4, #0]
 8025d04:	f3bf 8f5b 	dmb	ish
 8025d08:	07da      	lsls	r2, r3, #31
 8025d0a:	d40b      	bmi.n	8025d24 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8025d0c:	4620      	mov	r0, r4
 8025d0e:	f005 fea6 	bl	802ba5e <__cxa_guard_acquire>
 8025d12:	b138      	cbz	r0, 8025d24 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8025d14:	4620      	mov	r0, r4
 8025d16:	f005 feae 	bl	802ba76 <__cxa_guard_release>
 8025d1a:	4a0f      	ldr	r2, [pc, #60]	@ (8025d58 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8025d1c:	490f      	ldr	r1, [pc, #60]	@ (8025d5c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8025d1e:	4810      	ldr	r0, [pc, #64]	@ (8025d60 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8025d20:	f005 fe96 	bl	802ba50 <__aeabi_atexit>
 8025d24:	4c0f      	ldr	r4, [pc, #60]	@ (8025d64 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8025d26:	7823      	ldrb	r3, [r4, #0]
 8025d28:	f3bf 8f5b 	dmb	ish
 8025d2c:	07db      	lsls	r3, r3, #31
 8025d2e:	d40b      	bmi.n	8025d48 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8025d30:	4620      	mov	r0, r4
 8025d32:	f005 fe94 	bl	802ba5e <__cxa_guard_acquire>
 8025d36:	b138      	cbz	r0, 8025d48 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8025d38:	4620      	mov	r0, r4
 8025d3a:	f005 fe9c 	bl	802ba76 <__cxa_guard_release>
 8025d3e:	4a06      	ldr	r2, [pc, #24]	@ (8025d58 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8025d40:	4909      	ldr	r1, [pc, #36]	@ (8025d68 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8025d42:	480a      	ldr	r0, [pc, #40]	@ (8025d6c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8025d44:	f005 fe84 	bl	802ba50 <__aeabi_atexit>
 8025d48:	4b05      	ldr	r3, [pc, #20]	@ (8025d60 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8025d4a:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8025d4c:	4b07      	ldr	r3, [pc, #28]	@ (8025d6c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8025d4e:	652b      	str	r3, [r5, #80]	@ 0x50
 8025d50:	bd38      	pop	{r3, r4, r5, pc}
 8025d52:	bf00      	nop
 8025d54:	240342d0 	.word	0x240342d0
 8025d58:	24000000 	.word	0x24000000
 8025d5c:	08022b7f 	.word	0x08022b7f
 8025d60:	2400005c 	.word	0x2400005c
 8025d64:	240342d4 	.word	0x240342d4
 8025d68:	08022b7d 	.word	0x08022b7d
 8025d6c:	24000060 	.word	0x24000060

08025d70 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8025d70:	b510      	push	{r4, lr}
 8025d72:	4604      	mov	r4, r0
 8025d74:	f7ff ff88 	bl	8025c88 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8025d78:	4620      	mov	r0, r4
 8025d7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025d7e:	f7ff bfbd 	b.w	8025cfc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08025d82 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8025d82:	b510      	push	{r4, lr}
 8025d84:	4604      	mov	r4, r0
 8025d86:	f7ff fff3 	bl	8025d70 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 8025d8a:	4620      	mov	r0, r4
 8025d8c:	f7ff ff72 	bl	8025c74 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8025d90:	4620      	mov	r0, r4
 8025d92:	f7ff fe73 	bl	8025a7c <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8025d96:	4620      	mov	r0, r4
 8025d98:	f7ff fdf2 	bl	8025980 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8025d9c:	4620      	mov	r0, r4
 8025d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025da2:	f7ff bee9 	b.w	8025b78 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

08025da8 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>:
 8025da8:	b538      	push	{r3, r4, r5, lr}
 8025daa:	4c0b      	ldr	r4, [pc, #44]	@ (8025dd8 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x30>)
 8025dac:	4605      	mov	r5, r0
 8025dae:	7823      	ldrb	r3, [r4, #0]
 8025db0:	f3bf 8f5b 	dmb	ish
 8025db4:	07db      	lsls	r3, r3, #31
 8025db6:	d40b      	bmi.n	8025dd0 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 8025db8:	4620      	mov	r0, r4
 8025dba:	f005 fe50 	bl	802ba5e <__cxa_guard_acquire>
 8025dbe:	b138      	cbz	r0, 8025dd0 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 8025dc0:	4620      	mov	r0, r4
 8025dc2:	f005 fe58 	bl	802ba76 <__cxa_guard_release>
 8025dc6:	4a05      	ldr	r2, [pc, #20]	@ (8025ddc <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x34>)
 8025dc8:	4905      	ldr	r1, [pc, #20]	@ (8025de0 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x38>)
 8025dca:	4806      	ldr	r0, [pc, #24]	@ (8025de4 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 8025dcc:	f005 fe40 	bl	802ba50 <__aeabi_atexit>
 8025dd0:	4b04      	ldr	r3, [pc, #16]	@ (8025de4 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 8025dd2:	65eb      	str	r3, [r5, #92]	@ 0x5c
 8025dd4:	bd38      	pop	{r3, r4, r5, pc}
 8025dd6:	bf00      	nop
 8025dd8:	240342c4 	.word	0x240342c4
 8025ddc:	24000000 	.word	0x24000000
 8025de0:	08022b77 	.word	0x08022b77
 8025de4:	24000054 	.word	0x24000054

08025de8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>:
 8025de8:	b538      	push	{r3, r4, r5, lr}
 8025dea:	4c0b      	ldr	r4, [pc, #44]	@ (8025e18 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x30>)
 8025dec:	4605      	mov	r5, r0
 8025dee:	7823      	ldrb	r3, [r4, #0]
 8025df0:	f3bf 8f5b 	dmb	ish
 8025df4:	07db      	lsls	r3, r3, #31
 8025df6:	d40b      	bmi.n	8025e10 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 8025df8:	4620      	mov	r0, r4
 8025dfa:	f005 fe30 	bl	802ba5e <__cxa_guard_acquire>
 8025dfe:	b138      	cbz	r0, 8025e10 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 8025e00:	4620      	mov	r0, r4
 8025e02:	f005 fe38 	bl	802ba76 <__cxa_guard_release>
 8025e06:	4a05      	ldr	r2, [pc, #20]	@ (8025e1c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x34>)
 8025e08:	4905      	ldr	r1, [pc, #20]	@ (8025e20 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x38>)
 8025e0a:	4806      	ldr	r0, [pc, #24]	@ (8025e24 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 8025e0c:	f005 fe20 	bl	802ba50 <__aeabi_atexit>
 8025e10:	4b04      	ldr	r3, [pc, #16]	@ (8025e24 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 8025e12:	662b      	str	r3, [r5, #96]	@ 0x60
 8025e14:	bd38      	pop	{r3, r4, r5, pc}
 8025e16:	bf00      	nop
 8025e18:	240342c8 	.word	0x240342c8
 8025e1c:	24000000 	.word	0x24000000
 8025e20:	08022b75 	.word	0x08022b75
 8025e24:	24000058 	.word	0x24000058

08025e28 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>:
 8025e28:	b570      	push	{r4, r5, r6, lr}
 8025e2a:	4d0c      	ldr	r5, [pc, #48]	@ (8025e5c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x34>)
 8025e2c:	4606      	mov	r6, r0
 8025e2e:	4c0c      	ldr	r4, [pc, #48]	@ (8025e60 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x38>)
 8025e30:	782b      	ldrb	r3, [r5, #0]
 8025e32:	f3bf 8f5b 	dmb	ish
 8025e36:	f013 0f01 	tst.w	r3, #1
 8025e3a:	d10d      	bne.n	8025e58 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 8025e3c:	4628      	mov	r0, r5
 8025e3e:	f005 fe0e 	bl	802ba5e <__cxa_guard_acquire>
 8025e42:	b148      	cbz	r0, 8025e58 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 8025e44:	4b07      	ldr	r3, [pc, #28]	@ (8025e64 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 8025e46:	4628      	mov	r0, r5
 8025e48:	6023      	str	r3, [r4, #0]
 8025e4a:	f005 fe14 	bl	802ba76 <__cxa_guard_release>
 8025e4e:	4a06      	ldr	r2, [pc, #24]	@ (8025e68 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x40>)
 8025e50:	4620      	mov	r0, r4
 8025e52:	4906      	ldr	r1, [pc, #24]	@ (8025e6c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x44>)
 8025e54:	f005 fdfc 	bl	802ba50 <__aeabi_atexit>
 8025e58:	6674      	str	r4, [r6, #100]	@ 0x64
 8025e5a:	bd70      	pop	{r4, r5, r6, pc}
 8025e5c:	240342cc 	.word	0x240342cc
 8025e60:	24034424 	.word	0x24034424
 8025e64:	0802f13c 	.word	0x0802f13c
 8025e68:	24000000 	.word	0x24000000
 8025e6c:	08022b73 	.word	0x08022b73

08025e70 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>:
 8025e70:	b510      	push	{r4, lr}
 8025e72:	4604      	mov	r4, r0
 8025e74:	f7ff ff98 	bl	8025da8 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>
 8025e78:	4620      	mov	r0, r4
 8025e7a:	f7ff ffb5 	bl	8025de8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>
 8025e7e:	4620      	mov	r0, r4
 8025e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025e84:	f7ff bfd0 	b.w	8025e28 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>

08025e88 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>:
 8025e88:	b570      	push	{r4, r5, r6, lr}
 8025e8a:	4d0c      	ldr	r5, [pc, #48]	@ (8025ebc <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x34>)
 8025e8c:	4606      	mov	r6, r0
 8025e8e:	4c0c      	ldr	r4, [pc, #48]	@ (8025ec0 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x38>)
 8025e90:	782b      	ldrb	r3, [r5, #0]
 8025e92:	f3bf 8f5b 	dmb	ish
 8025e96:	f013 0f01 	tst.w	r3, #1
 8025e9a:	d10d      	bne.n	8025eb8 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 8025e9c:	4628      	mov	r0, r5
 8025e9e:	f005 fdde 	bl	802ba5e <__cxa_guard_acquire>
 8025ea2:	b148      	cbz	r0, 8025eb8 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 8025ea4:	4b07      	ldr	r3, [pc, #28]	@ (8025ec4 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x3c>)
 8025ea6:	4628      	mov	r0, r5
 8025ea8:	6023      	str	r3, [r4, #0]
 8025eaa:	f005 fde4 	bl	802ba76 <__cxa_guard_release>
 8025eae:	4a06      	ldr	r2, [pc, #24]	@ (8025ec8 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x40>)
 8025eb0:	4620      	mov	r0, r4
 8025eb2:	4906      	ldr	r1, [pc, #24]	@ (8025ecc <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x44>)
 8025eb4:	f005 fdcc 	bl	802ba50 <__aeabi_atexit>
 8025eb8:	66b4      	str	r4, [r6, #104]	@ 0x68
 8025eba:	bd70      	pop	{r4, r5, r6, pc}
 8025ebc:	240342c0 	.word	0x240342c0
 8025ec0:	24034320 	.word	0x24034320
 8025ec4:	0802f154 	.word	0x0802f154
 8025ec8:	24000000 	.word	0x24000000
 8025ecc:	08022b71 	.word	0x08022b71

08025ed0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8025ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025ed4:	b087      	sub	sp, #28
 8025ed6:	788d      	ldrb	r5, [r1, #2]
 8025ed8:	f891 9000 	ldrb.w	r9, [r1]
 8025edc:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 8025ee0:	9501      	str	r5, [sp, #4]
 8025ee2:	784d      	ldrb	r5, [r1, #1]
 8025ee4:	9203      	str	r2, [sp, #12]
 8025ee6:	9502      	str	r5, [sp, #8]
 8025ee8:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 8025eec:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 8025ef0:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 8025ef4:	f89d e058 	ldrb.w	lr, [sp, #88]	@ 0x58
 8025ef8:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 8025efc:	fb06 0708 	mla	r7, r6, r8, r0
 8025f00:	2e00      	cmp	r6, #0
 8025f02:	eb02 0a07 	add.w	sl, r2, r7
 8025f06:	ea4f 2205 	mov.w	r2, r5, lsl #8
 8025f0a:	9d01      	ldr	r5, [sp, #4]
 8025f0c:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8025f10:	ea45 0509 	orr.w	r5, r5, r9
 8025f14:	9505      	str	r5, [sp, #20]
 8025f16:	f2c0 80b2 	blt.w	802607e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8025f1a:	45b3      	cmp	fp, r6
 8025f1c:	f340 80af 	ble.w	802607e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8025f20:	2800      	cmp	r0, #0
 8025f22:	f2c0 80aa 	blt.w	802607a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8025f26:	4580      	cmp	r8, r0
 8025f28:	f340 80a7 	ble.w	802607a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8025f2c:	9a03      	ldr	r2, [sp, #12]
 8025f2e:	5dd7      	ldrb	r7, [r2, r7]
 8025f30:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8025f34:	441f      	add	r7, r3
 8025f36:	1c42      	adds	r2, r0, #1
 8025f38:	f100 80a4 	bmi.w	8026084 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8025f3c:	4590      	cmp	r8, r2
 8025f3e:	f340 80a1 	ble.w	8026084 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8025f42:	2c00      	cmp	r4, #0
 8025f44:	f000 809e 	beq.w	8026084 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8025f48:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8025f4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8025f50:	441d      	add	r5, r3
 8025f52:	3601      	adds	r6, #1
 8025f54:	f100 809a 	bmi.w	802608c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8025f58:	45b3      	cmp	fp, r6
 8025f5a:	f340 8097 	ble.w	802608c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8025f5e:	f1bc 0f00 	cmp.w	ip, #0
 8025f62:	f000 8093 	beq.w	802608c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8025f66:	2800      	cmp	r0, #0
 8025f68:	f2c0 808e 	blt.w	8026088 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8025f6c:	4580      	cmp	r8, r0
 8025f6e:	f340 808b 	ble.w	8026088 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8025f72:	f81a 6008 	ldrb.w	r6, [sl, r8]
 8025f76:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8025f7a:	441e      	add	r6, r3
 8025f7c:	3001      	adds	r0, #1
 8025f7e:	f100 8088 	bmi.w	8026092 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8025f82:	4580      	cmp	r8, r0
 8025f84:	f340 8085 	ble.w	8026092 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8025f88:	2c00      	cmp	r4, #0
 8025f8a:	f000 8082 	beq.w	8026092 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8025f8e:	44d0      	add	r8, sl
 8025f90:	f898 2001 	ldrb.w	r2, [r8, #1]
 8025f94:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025f98:	4413      	add	r3, r2
 8025f9a:	b2a4      	uxth	r4, r4
 8025f9c:	f895 a000 	ldrb.w	sl, [r5]
 8025fa0:	fa1f fc8c 	uxth.w	ip, ip
 8025fa4:	fb04 fb0c 	mul.w	fp, r4, ip
 8025fa8:	0124      	lsls	r4, r4, #4
 8025faa:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 8025fae:	f5c4 7880 	rsb	r8, r4, #256	@ 0x100
 8025fb2:	eba4 040b 	sub.w	r4, r4, fp
 8025fb6:	fa1f f08c 	uxth.w	r0, ip
 8025fba:	b2a2      	uxth	r2, r4
 8025fbc:	783c      	ldrb	r4, [r7, #0]
 8025fbe:	eba8 0800 	sub.w	r8, r8, r0
 8025fc2:	fa1f fc8e 	uxth.w	ip, lr
 8025fc6:	fb02 fa0a 	mul.w	sl, r2, sl
 8025fca:	ea6f 0e0e 	mvn.w	lr, lr
 8025fce:	fa1f f888 	uxth.w	r8, r8
 8025fd2:	fa5f fe8e 	uxtb.w	lr, lr
 8025fd6:	fb08 aa04 	mla	sl, r8, r4, sl
 8025fda:	7834      	ldrb	r4, [r6, #0]
 8025fdc:	fb19 f90e 	smulbb	r9, r9, lr
 8025fe0:	fb00 aa04 	mla	sl, r0, r4, sl
 8025fe4:	781c      	ldrb	r4, [r3, #0]
 8025fe6:	fb0b a404 	mla	r4, fp, r4, sl
 8025fea:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8025fee:	fb04 990c 	mla	r9, r4, ip, r9
 8025ff2:	fa1f f989 	uxth.w	r9, r9
 8025ff6:	f109 0401 	add.w	r4, r9, #1
 8025ffa:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8025ffe:	ea4f 2929 	mov.w	r9, r9, asr #8
 8026002:	f881 9000 	strb.w	r9, [r1]
 8026006:	f895 9001 	ldrb.w	r9, [r5, #1]
 802600a:	787c      	ldrb	r4, [r7, #1]
 802600c:	fb02 f909 	mul.w	r9, r2, r9
 8026010:	fb08 9904 	mla	r9, r8, r4, r9
 8026014:	7874      	ldrb	r4, [r6, #1]
 8026016:	fb00 9904 	mla	r9, r0, r4, r9
 802601a:	785c      	ldrb	r4, [r3, #1]
 802601c:	fb0b 9404 	mla	r4, fp, r4, r9
 8026020:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 8026024:	9c02      	ldr	r4, [sp, #8]
 8026026:	fb14 f90e 	smulbb	r9, r4, lr
 802602a:	fb0a 940c 	mla	r4, sl, ip, r9
 802602e:	b2a4      	uxth	r4, r4
 8026030:	f104 0901 	add.w	r9, r4, #1
 8026034:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 8026038:	1224      	asrs	r4, r4, #8
 802603a:	704c      	strb	r4, [r1, #1]
 802603c:	78ad      	ldrb	r5, [r5, #2]
 802603e:	78bc      	ldrb	r4, [r7, #2]
 8026040:	436a      	muls	r2, r5
 8026042:	789b      	ldrb	r3, [r3, #2]
 8026044:	fb08 2204 	mla	r2, r8, r4, r2
 8026048:	78b4      	ldrb	r4, [r6, #2]
 802604a:	fb00 2004 	mla	r0, r0, r4, r2
 802604e:	fb0b 0b03 	mla	fp, fp, r3, r0
 8026052:	9b01      	ldr	r3, [sp, #4]
 8026054:	fb13 fe0e 	smulbb	lr, r3, lr
 8026058:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 802605c:	fb0b ec0c 	mla	ip, fp, ip, lr
 8026060:	fa1f fc8c 	uxth.w	ip, ip
 8026064:	f10c 0e01 	add.w	lr, ip, #1
 8026068:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 802606c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8026070:	f881 c002 	strb.w	ip, [r1, #2]
 8026074:	b007      	add	sp, #28
 8026076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802607a:	af05      	add	r7, sp, #20
 802607c:	e75b      	b.n	8025f36 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 802607e:	ad05      	add	r5, sp, #20
 8026080:	462f      	mov	r7, r5
 8026082:	e766      	b.n	8025f52 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8026084:	ad05      	add	r5, sp, #20
 8026086:	e764      	b.n	8025f52 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8026088:	ae05      	add	r6, sp, #20
 802608a:	e777      	b.n	8025f7c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 802608c:	ab05      	add	r3, sp, #20
 802608e:	461e      	mov	r6, r3
 8026090:	e783      	b.n	8025f9a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 8026092:	ab05      	add	r3, sp, #20
 8026094:	e781      	b.n	8025f9a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

08026096 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026096:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802609a:	b093      	sub	sp, #76	@ 0x4c
 802609c:	9210      	str	r2, [sp, #64]	@ 0x40
 802609e:	9309      	str	r3, [sp, #36]	@ 0x24
 80260a0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80260a2:	f89d 3094 	ldrb.w	r3, [sp, #148]	@ 0x94
 80260a6:	9011      	str	r0, [sp, #68]	@ 0x44
 80260a8:	930e      	str	r3, [sp, #56]	@ 0x38
 80260aa:	6850      	ldr	r0, [r2, #4]
 80260ac:	910d      	str	r1, [sp, #52]	@ 0x34
 80260ae:	6812      	ldr	r2, [r2, #0]
 80260b0:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 80260b4:	fb00 1303 	mla	r3, r0, r3, r1
 80260b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80260bc:	18d3      	adds	r3, r2, r3
 80260be:	930a      	str	r3, [sp, #40]	@ 0x28
 80260c0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80260c2:	681b      	ldr	r3, [r3, #0]
 80260c4:	930c      	str	r3, [sp, #48]	@ 0x30
 80260c6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80260c8:	685c      	ldr	r4, [r3, #4]
 80260ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80260cc:	3404      	adds	r4, #4
 80260ce:	43db      	mvns	r3, r3
 80260d0:	b2db      	uxtb	r3, r3
 80260d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80260d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80260d6:	2b00      	cmp	r3, #0
 80260d8:	dc03      	bgt.n	80260e2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80260da:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80260dc:	2b00      	cmp	r3, #0
 80260de:	f340 8250 	ble.w	8026582 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 80260e2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80260e4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80260e8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80260ec:	1e48      	subs	r0, r1, #1
 80260ee:	1e55      	subs	r5, r2, #1
 80260f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80260f2:	2b00      	cmp	r3, #0
 80260f4:	f340 80ee 	ble.w	80262d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 80260f8:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 80260fa:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80260fc:	1436      	asrs	r6, r6, #16
 80260fe:	ea4f 4323 	mov.w	r3, r3, asr #16
 8026102:	d406      	bmi.n	8026112 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8026104:	4286      	cmp	r6, r0
 8026106:	da04      	bge.n	8026112 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8026108:	2b00      	cmp	r3, #0
 802610a:	db02      	blt.n	8026112 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802610c:	42ab      	cmp	r3, r5
 802610e:	f2c0 80e2 	blt.w	80262d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8026112:	3601      	adds	r6, #1
 8026114:	f100 80cf 	bmi.w	80262b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8026118:	42b1      	cmp	r1, r6
 802611a:	f2c0 80cc 	blt.w	80262b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 802611e:	3301      	adds	r3, #1
 8026120:	f100 80c9 	bmi.w	80262b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8026124:	429a      	cmp	r2, r3
 8026126:	f2c0 80c6 	blt.w	80262b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 802612a:	e9dd b609 	ldrd	fp, r6, [sp, #36]	@ 0x24
 802612e:	f1bb 0f00 	cmp.w	fp, #0
 8026132:	f340 80f1 	ble.w	8026318 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8026136:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8026138:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 802613a:	9824      	ldr	r0, [sp, #144]	@ 0x90
 802613c:	141d      	asrs	r5, r3, #16
 802613e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8026140:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8026144:	68c7      	ldr	r7, [r0, #12]
 8026146:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8026148:	1418      	asrs	r0, r3, #16
 802614a:	f3c3 3803 	ubfx	r8, r3, #12, #4
 802614e:	6892      	ldr	r2, [r2, #8]
 8026150:	f100 8137 	bmi.w	80263c2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8026154:	f102 3cff 	add.w	ip, r2, #4294967295
 8026158:	4560      	cmp	r0, ip
 802615a:	f280 8132 	bge.w	80263c2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802615e:	2d00      	cmp	r5, #0
 8026160:	f2c0 812f 	blt.w	80263c2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8026164:	f107 3cff 	add.w	ip, r7, #4294967295
 8026168:	4565      	cmp	r5, ip
 802616a:	f280 812a 	bge.w	80263c2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802616e:	b212      	sxth	r2, r2
 8026170:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8026172:	fb05 0002 	mla	r0, r5, r2, r0
 8026176:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8026178:	f817 c000 	ldrb.w	ip, [r7, r0]
 802617c:	4405      	add	r5, r0
 802617e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8026182:	eb04 0e0c 	add.w	lr, r4, ip
 8026186:	f1b8 0f00 	cmp.w	r8, #0
 802618a:	f000 810c 	beq.w	80263a6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 802618e:	786f      	ldrb	r7, [r5, #1]
 8026190:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8026194:	4427      	add	r7, r4
 8026196:	2900      	cmp	r1, #0
 8026198:	f000 810d 	beq.w	80263b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 802619c:	18a8      	adds	r0, r5, r2
 802619e:	5caa      	ldrb	r2, [r5, r2]
 80261a0:	7840      	ldrb	r0, [r0, #1]
 80261a2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80261a6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80261aa:	4422      	add	r2, r4
 80261ac:	4420      	add	r0, r4
 80261ae:	fa1f f388 	uxth.w	r3, r8
 80261b2:	f814 a00c 	ldrb.w	sl, [r4, ip]
 80261b6:	b289      	uxth	r1, r1
 80261b8:	f897 c000 	ldrb.w	ip, [r7]
 80261bc:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 80261c0:	fb03 f901 	mul.w	r9, r3, r1
 80261c4:	011b      	lsls	r3, r3, #4
 80261c6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80261ca:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 80261ce:	eba3 0309 	sub.w	r3, r3, r9
 80261d2:	b289      	uxth	r1, r1
 80261d4:	b29b      	uxth	r3, r3
 80261d6:	eba8 0801 	sub.w	r8, r8, r1
 80261da:	fb03 fc0c 	mul.w	ip, r3, ip
 80261de:	fa1f f888 	uxth.w	r8, r8
 80261e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80261e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80261e6:	fb08 cc0a 	mla	ip, r8, sl, ip
 80261ea:	f892 a000 	ldrb.w	sl, [r2]
 80261ee:	fb01 cc0a 	mla	ip, r1, sl, ip
 80261f2:	f890 a000 	ldrb.w	sl, [r0]
 80261f6:	fb09 cc0a 	mla	ip, r9, sl, ip
 80261fa:	f896 a000 	ldrb.w	sl, [r6]
 80261fe:	fb1a fa03 	smulbb	sl, sl, r3
 8026202:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8026206:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026208:	fb0c ac05 	mla	ip, ip, r5, sl
 802620c:	fa1f fc8c 	uxth.w	ip, ip
 8026210:	f10c 0a01 	add.w	sl, ip, #1
 8026214:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8026218:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802621c:	f886 a000 	strb.w	sl, [r6]
 8026220:	f897 c001 	ldrb.w	ip, [r7, #1]
 8026224:	f89e a001 	ldrb.w	sl, [lr, #1]
 8026228:	fb03 fc0c 	mul.w	ip, r3, ip
 802622c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802622e:	fb08 cc0a 	mla	ip, r8, sl, ip
 8026232:	f892 a001 	ldrb.w	sl, [r2, #1]
 8026236:	fb01 cc0a 	mla	ip, r1, sl, ip
 802623a:	f890 a001 	ldrb.w	sl, [r0, #1]
 802623e:	fb09 cc0a 	mla	ip, r9, sl, ip
 8026242:	f896 a001 	ldrb.w	sl, [r6, #1]
 8026246:	fb1a fa03 	smulbb	sl, sl, r3
 802624a:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 802624e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026250:	fb0c ac05 	mla	ip, ip, r5, sl
 8026254:	fa1f fc8c 	uxth.w	ip, ip
 8026258:	f10c 0a01 	add.w	sl, ip, #1
 802625c:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 8026260:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8026264:	f886 c001 	strb.w	ip, [r6, #1]
 8026268:	78bf      	ldrb	r7, [r7, #2]
 802626a:	f89e c002 	ldrb.w	ip, [lr, #2]
 802626e:	437b      	muls	r3, r7
 8026270:	fb08 330c 	mla	r3, r8, ip, r3
 8026274:	f892 c002 	ldrb.w	ip, [r2, #2]
 8026278:	7882      	ldrb	r2, [r0, #2]
 802627a:	fb01 310c 	mla	r1, r1, ip, r3
 802627e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026280:	fb09 1902 	mla	r9, r9, r2, r1
 8026284:	78b1      	ldrb	r1, [r6, #2]
 8026286:	fb11 f103 	smulbb	r1, r1, r3
 802628a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 802628e:	fb09 1505 	mla	r5, r9, r5, r1
 8026292:	b2ad      	uxth	r5, r5
 8026294:	1c6b      	adds	r3, r5, #1
 8026296:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802629a:	122d      	asrs	r5, r5, #8
 802629c:	70b5      	strb	r5, [r6, #2]
 802629e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80262a0:	3603      	adds	r6, #3
 80262a2:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 80262a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80262a8:	4413      	add	r3, r2
 80262aa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80262ac:	931d      	str	r3, [sp, #116]	@ 0x74
 80262ae:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80262b0:	4413      	add	r3, r2
 80262b2:	931e      	str	r3, [sp, #120]	@ 0x78
 80262b4:	e73b      	b.n	802612e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80262b6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80262b8:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 80262ba:	4433      	add	r3, r6
 80262bc:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80262be:	931d      	str	r3, [sp, #116]	@ 0x74
 80262c0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80262c2:	4433      	add	r3, r6
 80262c4:	931e      	str	r3, [sp, #120]	@ 0x78
 80262c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80262c8:	3b01      	subs	r3, #1
 80262ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80262cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80262ce:	3303      	adds	r3, #3
 80262d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80262d2:	e70d      	b.n	80260f0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80262d4:	d028      	beq.n	8026328 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 80262d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80262d8:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 80262da:	3b01      	subs	r3, #1
 80262dc:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 80262de:	fb00 5003 	mla	r0, r0, r3, r5
 80262e2:	1400      	asrs	r0, r0, #16
 80262e4:	f53f af21 	bmi.w	802612a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80262e8:	3901      	subs	r1, #1
 80262ea:	4288      	cmp	r0, r1
 80262ec:	f6bf af1d 	bge.w	802612a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80262f0:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80262f2:	981e      	ldr	r0, [sp, #120]	@ 0x78
 80262f4:	fb01 0303 	mla	r3, r1, r3, r0
 80262f8:	141b      	asrs	r3, r3, #16
 80262fa:	f53f af16 	bmi.w	802612a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80262fe:	3a01      	subs	r2, #1
 8026300:	4293      	cmp	r3, r2
 8026302:	f6bf af12 	bge.w	802612a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8026306:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026308:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 802630c:	1cdf      	adds	r7, r3, #3
 802630e:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 8026312:	f1b9 0f00 	cmp.w	r9, #0
 8026316:	dc73      	bgt.n	8026400 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8026318:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802631a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802631c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8026320:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026324:	441a      	add	r2, r3
 8026326:	920a      	str	r2, [sp, #40]	@ 0x28
 8026328:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802632a:	2b00      	cmp	r3, #0
 802632c:	f340 8129 	ble.w	8026582 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8026330:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8026334:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8026336:	ee30 0a04 	vadd.f32	s0, s0, s8
 802633a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802633e:	eef0 6a62 	vmov.f32	s13, s5
 8026342:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026346:	ee31 1a05 	vadd.f32	s2, s2, s10
 802634a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802634e:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 8026352:	eef0 6a43 	vmov.f32	s13, s6
 8026356:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802635a:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 802635e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026362:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026366:	ee77 2a62 	vsub.f32	s5, s14, s5
 802636a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802636e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026372:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026376:	ee12 2a90 	vmov	r2, s5
 802637a:	eef0 2a47 	vmov.f32	s5, s14
 802637e:	fb92 f3f3 	sdiv	r3, r2, r3
 8026382:	ee13 2a10 	vmov	r2, s6
 8026386:	931f      	str	r3, [sp, #124]	@ 0x7c
 8026388:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802638a:	eeb0 3a67 	vmov.f32	s6, s15
 802638e:	fb92 f3f3 	sdiv	r3, r2, r3
 8026392:	9320      	str	r3, [sp, #128]	@ 0x80
 8026394:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026396:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8026398:	3b01      	subs	r3, #1
 802639a:	930d      	str	r3, [sp, #52]	@ 0x34
 802639c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802639e:	bf08      	it	eq
 80263a0:	4613      	moveq	r3, r2
 80263a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80263a4:	e696      	b.n	80260d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80263a6:	b149      	cbz	r1, 80263bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 80263a8:	5caa      	ldrb	r2, [r5, r2]
 80263aa:	4670      	mov	r0, lr
 80263ac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80263b0:	4422      	add	r2, r4
 80263b2:	4677      	mov	r7, lr
 80263b4:	e6fb      	b.n	80261ae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80263b6:	4670      	mov	r0, lr
 80263b8:	4672      	mov	r2, lr
 80263ba:	e6f8      	b.n	80261ae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80263bc:	4670      	mov	r0, lr
 80263be:	4672      	mov	r2, lr
 80263c0:	e7f7      	b.n	80263b2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80263c2:	f110 0c01 	adds.w	ip, r0, #1
 80263c6:	f53f af6a 	bmi.w	802629e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80263ca:	4562      	cmp	r2, ip
 80263cc:	f6ff af67 	blt.w	802629e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80263d0:	f115 0c01 	adds.w	ip, r5, #1
 80263d4:	f53f af63 	bmi.w	802629e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80263d8:	4567      	cmp	r7, ip
 80263da:	f6ff af60 	blt.w	802629e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80263de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80263e0:	b23f      	sxth	r7, r7
 80263e2:	b212      	sxth	r2, r2
 80263e4:	9002      	str	r0, [sp, #8]
 80263e6:	9701      	str	r7, [sp, #4]
 80263e8:	9200      	str	r2, [sp, #0]
 80263ea:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80263ec:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80263ee:	e9cd 1305 	strd	r1, r3, [sp, #20]
 80263f2:	e9cd 5803 	strd	r5, r8, [sp, #12]
 80263f6:	4623      	mov	r3, r4
 80263f8:	4631      	mov	r1, r6
 80263fa:	f7ff fd69 	bl	8025ed0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 80263fe:	e74e      	b.n	802629e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8026400:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8026402:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8026404:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8026408:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 802640a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802640c:	1400      	asrs	r0, r0, #16
 802640e:	142d      	asrs	r5, r5, #16
 8026410:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8026412:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8026416:	f3c3 3303 	ubfx	r3, r3, #12, #4
 802641a:	fb02 5000 	mla	r0, r2, r0, r5
 802641e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8026420:	f815 e000 	ldrb.w	lr, [r5, r0]
 8026424:	eb05 0c00 	add.w	ip, r5, r0
 8026428:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 802642c:	eb04 060e 	add.w	r6, r4, lr
 8026430:	2b00      	cmp	r3, #0
 8026432:	f000 8097 	beq.w	8026564 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 8026436:	f89c 5001 	ldrb.w	r5, [ip, #1]
 802643a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802643e:	4425      	add	r5, r4
 8026440:	2900      	cmp	r1, #0
 8026442:	f000 8098 	beq.w	8026576 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 8026446:	eb0c 0002 	add.w	r0, ip, r2
 802644a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 802644e:	7840      	ldrb	r0, [r0, #1]
 8026450:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026454:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026458:	4422      	add	r2, r4
 802645a:	4420      	add	r0, r4
 802645c:	b29b      	uxth	r3, r3
 802645e:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8026462:	b289      	uxth	r1, r1
 8026464:	f895 e000 	ldrb.w	lr, [r5]
 8026468:	3703      	adds	r7, #3
 802646a:	f109 39ff 	add.w	r9, r9, #4294967295
 802646e:	fb03 f801 	mul.w	r8, r3, r1
 8026472:	011b      	lsls	r3, r3, #4
 8026474:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8026478:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 802647c:	eba3 0308 	sub.w	r3, r3, r8
 8026480:	b289      	uxth	r1, r1
 8026482:	b29b      	uxth	r3, r3
 8026484:	ebac 0c01 	sub.w	ip, ip, r1
 8026488:	fb03 fe0e 	mul.w	lr, r3, lr
 802648c:	fa1f fc8c 	uxth.w	ip, ip
 8026490:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026492:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026494:	fb0c ee0b 	mla	lr, ip, fp, lr
 8026498:	f892 b000 	ldrb.w	fp, [r2]
 802649c:	fb01 ee0b 	mla	lr, r1, fp, lr
 80264a0:	f890 b000 	ldrb.w	fp, [r0]
 80264a4:	fb08 ee0b 	mla	lr, r8, fp, lr
 80264a8:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 80264ac:	fb1b fb03 	smulbb	fp, fp, r3
 80264b0:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80264b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80264b6:	fb0e be0a 	mla	lr, lr, sl, fp
 80264ba:	fa1f fe8e 	uxth.w	lr, lr
 80264be:	f10e 0b01 	add.w	fp, lr, #1
 80264c2:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80264c6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80264ca:	f807 ec06 	strb.w	lr, [r7, #-6]
 80264ce:	f895 e001 	ldrb.w	lr, [r5, #1]
 80264d2:	f896 b001 	ldrb.w	fp, [r6, #1]
 80264d6:	fb03 fe0e 	mul.w	lr, r3, lr
 80264da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80264dc:	fb0c ee0b 	mla	lr, ip, fp, lr
 80264e0:	f892 b001 	ldrb.w	fp, [r2, #1]
 80264e4:	fb01 ee0b 	mla	lr, r1, fp, lr
 80264e8:	f890 b001 	ldrb.w	fp, [r0, #1]
 80264ec:	fb08 ee0b 	mla	lr, r8, fp, lr
 80264f0:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 80264f4:	fb1b fb03 	smulbb	fp, fp, r3
 80264f8:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80264fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80264fe:	fb0e be0a 	mla	lr, lr, sl, fp
 8026502:	fa1f fe8e 	uxth.w	lr, lr
 8026506:	f10e 0b01 	add.w	fp, lr, #1
 802650a:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 802650e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8026512:	f807 ec05 	strb.w	lr, [r7, #-5]
 8026516:	78ad      	ldrb	r5, [r5, #2]
 8026518:	78b6      	ldrb	r6, [r6, #2]
 802651a:	436b      	muls	r3, r5
 802651c:	7895      	ldrb	r5, [r2, #2]
 802651e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8026520:	fb0c 3306 	mla	r3, ip, r6, r3
 8026524:	fb01 3305 	mla	r3, r1, r5, r3
 8026528:	7885      	ldrb	r5, [r0, #2]
 802652a:	fb08 3805 	mla	r8, r8, r5, r3
 802652e:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8026532:	fb13 f302 	smulbb	r3, r3, r2
 8026536:	f3c8 2807 	ubfx	r8, r8, #8, #8
 802653a:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 802653c:	fb08 380a 	mla	r8, r8, sl, r3
 8026540:	fa1f f888 	uxth.w	r8, r8
 8026544:	f108 0301 	add.w	r3, r8, #1
 8026548:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 802654c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802654e:	4413      	add	r3, r2
 8026550:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8026552:	ea4f 2828 	mov.w	r8, r8, asr #8
 8026556:	931d      	str	r3, [sp, #116]	@ 0x74
 8026558:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802655a:	f807 8c04 	strb.w	r8, [r7, #-4]
 802655e:	4413      	add	r3, r2
 8026560:	931e      	str	r3, [sp, #120]	@ 0x78
 8026562:	e6d6      	b.n	8026312 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8026564:	b151      	cbz	r1, 802657c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8026566:	f81c 2002 	ldrb.w	r2, [ip, r2]
 802656a:	4630      	mov	r0, r6
 802656c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026570:	4422      	add	r2, r4
 8026572:	4635      	mov	r5, r6
 8026574:	e772      	b.n	802645c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8026576:	4630      	mov	r0, r6
 8026578:	4632      	mov	r2, r6
 802657a:	e76f      	b.n	802645c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 802657c:	4630      	mov	r0, r6
 802657e:	4632      	mov	r2, r6
 8026580:	e7f7      	b.n	8026572 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8026582:	b013      	add	sp, #76	@ 0x4c
 8026584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026588 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8026588:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 802658c:	784c      	ldrb	r4, [r1, #1]
 802658e:	f891 a002 	ldrb.w	sl, [r1, #2]
 8026592:	0224      	lsls	r4, r4, #8
 8026594:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 8026598:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	@ 0x2c
 802659c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80265a0:	f891 a000 	ldrb.w	sl, [r1]
 80265a4:	f89d 0038 	ldrb.w	r0, [sp, #56]	@ 0x38
 80265a8:	ea44 040a 	orr.w	r4, r4, sl
 80265ac:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 80265b0:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	@ 0x30
 80265b4:	9401      	str	r4, [sp, #4]
 80265b6:	fb05 c70e 	mla	r7, r5, lr, ip
 80265ba:	2d00      	cmp	r5, #0
 80265bc:	eb02 0807 	add.w	r8, r2, r7
 80265c0:	db72      	blt.n	80266a8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 80265c2:	45a9      	cmp	r9, r5
 80265c4:	dd70      	ble.n	80266a8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 80265c6:	f1bc 0f00 	cmp.w	ip, #0
 80265ca:	db6b      	blt.n	80266a4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 80265cc:	45e6      	cmp	lr, ip
 80265ce:	dd69      	ble.n	80266a4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 80265d0:	5dd7      	ldrb	r7, [r2, r7]
 80265d2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80265d6:	441f      	add	r7, r3
 80265d8:	f11c 0201 	adds.w	r2, ip, #1
 80265dc:	d467      	bmi.n	80266ae <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 80265de:	4596      	cmp	lr, r2
 80265e0:	dd65      	ble.n	80266ae <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 80265e2:	2800      	cmp	r0, #0
 80265e4:	d063      	beq.n	80266ae <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 80265e6:	f898 4001 	ldrb.w	r4, [r8, #1]
 80265ea:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80265ee:	441c      	add	r4, r3
 80265f0:	3501      	adds	r5, #1
 80265f2:	d460      	bmi.n	80266b6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 80265f4:	45a9      	cmp	r9, r5
 80265f6:	dd5e      	ble.n	80266b6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 80265f8:	2e00      	cmp	r6, #0
 80265fa:	d05c      	beq.n	80266b6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 80265fc:	f1bc 0f00 	cmp.w	ip, #0
 8026600:	db57      	blt.n	80266b2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8026602:	45e6      	cmp	lr, ip
 8026604:	dd55      	ble.n	80266b2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8026606:	f818 500e 	ldrb.w	r5, [r8, lr]
 802660a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802660e:	441d      	add	r5, r3
 8026610:	f11c 0201 	adds.w	r2, ip, #1
 8026614:	d452      	bmi.n	80266bc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8026616:	4596      	cmp	lr, r2
 8026618:	dd50      	ble.n	80266bc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 802661a:	2800      	cmp	r0, #0
 802661c:	d04e      	beq.n	80266bc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 802661e:	44c6      	add	lr, r8
 8026620:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8026624:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026628:	4413      	add	r3, r2
 802662a:	b280      	uxth	r0, r0
 802662c:	f897 8000 	ldrb.w	r8, [r7]
 8026630:	b2b2      	uxth	r2, r6
 8026632:	fb00 f602 	mul.w	r6, r0, r2
 8026636:	0100      	lsls	r0, r0, #4
 8026638:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 802663c:	f5c0 7e80 	rsb	lr, r0, #256	@ 0x100
 8026640:	1b80      	subs	r0, r0, r6
 8026642:	fa1f fc82 	uxth.w	ip, r2
 8026646:	b282      	uxth	r2, r0
 8026648:	7820      	ldrb	r0, [r4, #0]
 802664a:	ebae 0e0c 	sub.w	lr, lr, ip
 802664e:	4350      	muls	r0, r2
 8026650:	fa1f fe8e 	uxth.w	lr, lr
 8026654:	fb0e 0808 	mla	r8, lr, r8, r0
 8026658:	7828      	ldrb	r0, [r5, #0]
 802665a:	fb0c 8800 	mla	r8, ip, r0, r8
 802665e:	7818      	ldrb	r0, [r3, #0]
 8026660:	fb06 8000 	mla	r0, r6, r0, r8
 8026664:	1200      	asrs	r0, r0, #8
 8026666:	7008      	strb	r0, [r1, #0]
 8026668:	7860      	ldrb	r0, [r4, #1]
 802666a:	f897 8001 	ldrb.w	r8, [r7, #1]
 802666e:	4350      	muls	r0, r2
 8026670:	fb0e 0808 	mla	r8, lr, r8, r0
 8026674:	7868      	ldrb	r0, [r5, #1]
 8026676:	fb0c 8800 	mla	r8, ip, r0, r8
 802667a:	7858      	ldrb	r0, [r3, #1]
 802667c:	fb06 8000 	mla	r0, r6, r0, r8
 8026680:	1200      	asrs	r0, r0, #8
 8026682:	7048      	strb	r0, [r1, #1]
 8026684:	78a0      	ldrb	r0, [r4, #2]
 8026686:	78bf      	ldrb	r7, [r7, #2]
 8026688:	4350      	muls	r0, r2
 802668a:	78aa      	ldrb	r2, [r5, #2]
 802668c:	fb0e 0007 	mla	r0, lr, r7, r0
 8026690:	fb0c 0c02 	mla	ip, ip, r2, r0
 8026694:	789a      	ldrb	r2, [r3, #2]
 8026696:	fb06 c202 	mla	r2, r6, r2, ip
 802669a:	1212      	asrs	r2, r2, #8
 802669c:	708a      	strb	r2, [r1, #2]
 802669e:	b002      	add	sp, #8
 80266a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80266a4:	af01      	add	r7, sp, #4
 80266a6:	e797      	b.n	80265d8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 80266a8:	ac01      	add	r4, sp, #4
 80266aa:	4627      	mov	r7, r4
 80266ac:	e7a0      	b.n	80265f0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 80266ae:	ac01      	add	r4, sp, #4
 80266b0:	e79e      	b.n	80265f0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 80266b2:	ad01      	add	r5, sp, #4
 80266b4:	e7ac      	b.n	8026610 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 80266b6:	ab01      	add	r3, sp, #4
 80266b8:	461d      	mov	r5, r3
 80266ba:	e7b6      	b.n	802662a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 80266bc:	ab01      	add	r3, sp, #4
 80266be:	e7b4      	b.n	802662a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

080266c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80266c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80266c4:	b08d      	sub	sp, #52	@ 0x34
 80266c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80266ca:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
 80266ce:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80266d0:	900b      	str	r0, [sp, #44]	@ 0x2c
 80266d2:	9306      	str	r3, [sp, #24]
 80266d4:	6850      	ldr	r0, [r2, #4]
 80266d6:	6812      	ldr	r2, [r2, #0]
 80266d8:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80266da:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	@ 0x70
 80266de:	fb00 1303 	mla	r3, r0, r3, r1
 80266e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80266e6:	18d3      	adds	r3, r2, r3
 80266e8:	9307      	str	r3, [sp, #28]
 80266ea:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80266ec:	681b      	ldr	r3, [r3, #0]
 80266ee:	9308      	str	r3, [sp, #32]
 80266f0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80266f2:	685d      	ldr	r5, [r3, #4]
 80266f4:	3504      	adds	r5, #4
 80266f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80266f8:	2b00      	cmp	r3, #0
 80266fa:	dc03      	bgt.n	8026704 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 80266fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80266fe:	2b00      	cmp	r3, #0
 8026700:	f340 81e6 	ble.w	8026ad0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8026704:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8026706:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802670a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802670e:	1e48      	subs	r0, r1, #1
 8026710:	1e56      	subs	r6, r2, #1
 8026712:	9b06      	ldr	r3, [sp, #24]
 8026714:	2b00      	cmp	r3, #0
 8026716:	f340 80bd 	ble.w	8026894 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 802671a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802671c:	1427      	asrs	r7, r4, #16
 802671e:	ea4f 4323 	mov.w	r3, r3, asr #16
 8026722:	d406      	bmi.n	8026732 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8026724:	4287      	cmp	r7, r0
 8026726:	da04      	bge.n	8026732 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8026728:	2b00      	cmp	r3, #0
 802672a:	db02      	blt.n	8026732 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802672c:	42b3      	cmp	r3, r6
 802672e:	f2c0 80b2 	blt.w	8026896 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8026732:	3701      	adds	r7, #1
 8026734:	f100 80a1 	bmi.w	802687a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8026738:	42b9      	cmp	r1, r7
 802673a:	f2c0 809e 	blt.w	802687a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802673e:	3301      	adds	r3, #1
 8026740:	f100 809b 	bmi.w	802687a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8026744:	429a      	cmp	r2, r3
 8026746:	f2c0 8098 	blt.w	802687a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802674a:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 802674e:	f1bb 0f00 	cmp.w	fp, #0
 8026752:	f340 80bf 	ble.w	80268d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8026756:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8026758:	981e      	ldr	r0, [sp, #120]	@ 0x78
 802675a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802675c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8026760:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8026764:	1420      	asrs	r0, r4, #16
 8026766:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8026768:	ea4f 4723 	mov.w	r7, r3, asr #16
 802676c:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8026770:	6892      	ldr	r2, [r2, #8]
 8026772:	f100 8103 	bmi.w	802697c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8026776:	f102 3eff 	add.w	lr, r2, #4294967295
 802677a:	4570      	cmp	r0, lr
 802677c:	f280 80fe 	bge.w	802697c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8026780:	2f00      	cmp	r7, #0
 8026782:	f2c0 80fb 	blt.w	802697c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8026786:	f10c 3eff 	add.w	lr, ip, #4294967295
 802678a:	4577      	cmp	r7, lr
 802678c:	f280 80f6 	bge.w	802697c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8026790:	b212      	sxth	r2, r2
 8026792:	fb07 0002 	mla	r0, r7, r2, r0
 8026796:	9f08      	ldr	r7, [sp, #32]
 8026798:	f817 8000 	ldrb.w	r8, [r7, r0]
 802679c:	eb07 0e00 	add.w	lr, r7, r0
 80267a0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80267a4:	eb05 0c08 	add.w	ip, r5, r8
 80267a8:	2b00      	cmp	r3, #0
 80267aa:	f000 80d8 	beq.w	802695e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 80267ae:	f89e 7001 	ldrb.w	r7, [lr, #1]
 80267b2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80267b6:	442f      	add	r7, r5
 80267b8:	2900      	cmp	r1, #0
 80267ba:	f000 80d9 	beq.w	8026970 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80267be:	eb0e 0002 	add.w	r0, lr, r2
 80267c2:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80267c6:	7840      	ldrb	r0, [r0, #1]
 80267c8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80267cc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80267d0:	442a      	add	r2, r5
 80267d2:	4428      	add	r0, r5
 80267d4:	b29b      	uxth	r3, r3
 80267d6:	f815 a008 	ldrb.w	sl, [r5, r8]
 80267da:	b289      	uxth	r1, r1
 80267dc:	f897 8000 	ldrb.w	r8, [r7]
 80267e0:	fb03 f901 	mul.w	r9, r3, r1
 80267e4:	011b      	lsls	r3, r3, #4
 80267e6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80267ea:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 80267ee:	eba3 0309 	sub.w	r3, r3, r9
 80267f2:	b289      	uxth	r1, r1
 80267f4:	b29b      	uxth	r3, r3
 80267f6:	ebae 0e01 	sub.w	lr, lr, r1
 80267fa:	fb03 f808 	mul.w	r8, r3, r8
 80267fe:	fa1f fe8e 	uxth.w	lr, lr
 8026802:	fb0e 880a 	mla	r8, lr, sl, r8
 8026806:	f892 a000 	ldrb.w	sl, [r2]
 802680a:	fb01 880a 	mla	r8, r1, sl, r8
 802680e:	f890 a000 	ldrb.w	sl, [r0]
 8026812:	fb09 880a 	mla	r8, r9, sl, r8
 8026816:	ea4f 2828 	mov.w	r8, r8, asr #8
 802681a:	f886 8000 	strb.w	r8, [r6]
 802681e:	f897 8001 	ldrb.w	r8, [r7, #1]
 8026822:	f89c a001 	ldrb.w	sl, [ip, #1]
 8026826:	fb03 f808 	mul.w	r8, r3, r8
 802682a:	fb0e 880a 	mla	r8, lr, sl, r8
 802682e:	f892 a001 	ldrb.w	sl, [r2, #1]
 8026832:	fb01 880a 	mla	r8, r1, sl, r8
 8026836:	f890 a001 	ldrb.w	sl, [r0, #1]
 802683a:	fb09 880a 	mla	r8, r9, sl, r8
 802683e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8026842:	f886 8001 	strb.w	r8, [r6, #1]
 8026846:	78bf      	ldrb	r7, [r7, #2]
 8026848:	f89c c002 	ldrb.w	ip, [ip, #2]
 802684c:	437b      	muls	r3, r7
 802684e:	7892      	ldrb	r2, [r2, #2]
 8026850:	fb0e 330c 	mla	r3, lr, ip, r3
 8026854:	fb01 3102 	mla	r1, r1, r2, r3
 8026858:	7882      	ldrb	r2, [r0, #2]
 802685a:	fb09 1902 	mla	r9, r9, r2, r1
 802685e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8026862:	f886 9002 	strb.w	r9, [r6, #2]
 8026866:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8026868:	3603      	adds	r6, #3
 802686a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 802686c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026870:	441c      	add	r4, r3
 8026872:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8026874:	4413      	add	r3, r2
 8026876:	9318      	str	r3, [sp, #96]	@ 0x60
 8026878:	e769      	b.n	802674e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802687a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802687c:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 802687e:	441c      	add	r4, r3
 8026880:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8026882:	443b      	add	r3, r7
 8026884:	9318      	str	r3, [sp, #96]	@ 0x60
 8026886:	9b06      	ldr	r3, [sp, #24]
 8026888:	3b01      	subs	r3, #1
 802688a:	9306      	str	r3, [sp, #24]
 802688c:	9b07      	ldr	r3, [sp, #28]
 802688e:	3303      	adds	r3, #3
 8026890:	9307      	str	r3, [sp, #28]
 8026892:	e73e      	b.n	8026712 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8026894:	d026      	beq.n	80268e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8026896:	9b06      	ldr	r3, [sp, #24]
 8026898:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802689a:	3b01      	subs	r3, #1
 802689c:	fb00 4003 	mla	r0, r0, r3, r4
 80268a0:	1400      	asrs	r0, r0, #16
 80268a2:	f53f af52 	bmi.w	802674a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80268a6:	3901      	subs	r1, #1
 80268a8:	4288      	cmp	r0, r1
 80268aa:	f6bf af4e 	bge.w	802674a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80268ae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80268b0:	9818      	ldr	r0, [sp, #96]	@ 0x60
 80268b2:	fb01 0303 	mla	r3, r1, r3, r0
 80268b6:	141b      	asrs	r3, r3, #16
 80268b8:	f53f af47 	bmi.w	802674a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80268bc:	3a01      	subs	r2, #1
 80268be:	4293      	cmp	r3, r2
 80268c0:	f6bf af43 	bge.w	802674a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80268c4:	9b07      	ldr	r3, [sp, #28]
 80268c6:	f8dd a018 	ldr.w	sl, [sp, #24]
 80268ca:	f103 0803 	add.w	r8, r3, #3
 80268ce:	f1ba 0f00 	cmp.w	sl, #0
 80268d2:	dc71      	bgt.n	80269b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 80268d4:	9b06      	ldr	r3, [sp, #24]
 80268d6:	9a07      	ldr	r2, [sp, #28]
 80268d8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80268dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80268e0:	441a      	add	r2, r3
 80268e2:	9207      	str	r2, [sp, #28]
 80268e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80268e6:	2b00      	cmp	r3, #0
 80268e8:	f340 80f2 	ble.w	8026ad0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 80268ec:	ee30 0a04 	vadd.f32	s0, s0, s8
 80268f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80268f2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80268f6:	eeb0 6a62 	vmov.f32	s12, s5
 80268fa:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80268fe:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026902:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8026906:	ee16 4a10 	vmov	r4, s12
 802690a:	eeb0 6a43 	vmov.f32	s12, s6
 802690e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8026912:	ed8d 6a18 	vstr	s12, [sp, #96]	@ 0x60
 8026916:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802691a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802691e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026922:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026926:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802692a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802692e:	ee12 2a90 	vmov	r2, s5
 8026932:	eef0 2a47 	vmov.f32	s5, s14
 8026936:	fb92 f3f3 	sdiv	r3, r2, r3
 802693a:	ee13 2a10 	vmov	r2, s6
 802693e:	9319      	str	r3, [sp, #100]	@ 0x64
 8026940:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8026942:	eeb0 3a67 	vmov.f32	s6, s15
 8026946:	fb92 f3f3 	sdiv	r3, r2, r3
 802694a:	931a      	str	r3, [sp, #104]	@ 0x68
 802694c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802694e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026950:	3b01      	subs	r3, #1
 8026952:	9309      	str	r3, [sp, #36]	@ 0x24
 8026954:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8026956:	bf08      	it	eq
 8026958:	4613      	moveq	r3, r2
 802695a:	9306      	str	r3, [sp, #24]
 802695c:	e6cb      	b.n	80266f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 802695e:	b151      	cbz	r1, 8026976 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8026960:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8026964:	4660      	mov	r0, ip
 8026966:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802696a:	442a      	add	r2, r5
 802696c:	4667      	mov	r7, ip
 802696e:	e731      	b.n	80267d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8026970:	4660      	mov	r0, ip
 8026972:	4662      	mov	r2, ip
 8026974:	e72e      	b.n	80267d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8026976:	4660      	mov	r0, ip
 8026978:	4662      	mov	r2, ip
 802697a:	e7f7      	b.n	802696c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 802697c:	f110 0e01 	adds.w	lr, r0, #1
 8026980:	f53f af71 	bmi.w	8026866 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8026984:	4572      	cmp	r2, lr
 8026986:	f6ff af6e 	blt.w	8026866 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 802698a:	f117 0e01 	adds.w	lr, r7, #1
 802698e:	f53f af6a 	bmi.w	8026866 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8026992:	45f4      	cmp	ip, lr
 8026994:	f6ff af67 	blt.w	8026866 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8026998:	b212      	sxth	r2, r2
 802699a:	e9cd 3104 	strd	r3, r1, [sp, #16]
 802699e:	fa0f f38c 	sxth.w	r3, ip
 80269a2:	9200      	str	r2, [sp, #0]
 80269a4:	4631      	mov	r1, r6
 80269a6:	9a08      	ldr	r2, [sp, #32]
 80269a8:	9301      	str	r3, [sp, #4]
 80269aa:	462b      	mov	r3, r5
 80269ac:	e9cd 0702 	strd	r0, r7, [sp, #8]
 80269b0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80269b2:	f7ff fde9 	bl	8026588 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 80269b6:	e756      	b.n	8026866 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80269b8:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80269ba:	1426      	asrs	r6, r4, #16
 80269bc:	9818      	ldr	r0, [sp, #96]	@ 0x60
 80269be:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80269c2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80269c6:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80269c8:	1400      	asrs	r0, r0, #16
 80269ca:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80269ce:	fb02 6000 	mla	r0, r2, r0, r6
 80269d2:	9e08      	ldr	r6, [sp, #32]
 80269d4:	f816 e000 	ldrb.w	lr, [r6, r0]
 80269d8:	eb06 0c00 	add.w	ip, r6, r0
 80269dc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80269e0:	eb05 070e 	add.w	r7, r5, lr
 80269e4:	2b00      	cmp	r3, #0
 80269e6:	d064      	beq.n	8026ab2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 80269e8:	f89c 6001 	ldrb.w	r6, [ip, #1]
 80269ec:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80269f0:	442e      	add	r6, r5
 80269f2:	2900      	cmp	r1, #0
 80269f4:	d066      	beq.n	8026ac4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 80269f6:	eb0c 0002 	add.w	r0, ip, r2
 80269fa:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80269fe:	7840      	ldrb	r0, [r0, #1]
 8026a00:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026a04:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026a08:	442a      	add	r2, r5
 8026a0a:	4428      	add	r0, r5
 8026a0c:	b29b      	uxth	r3, r3
 8026a0e:	f815 b00e 	ldrb.w	fp, [r5, lr]
 8026a12:	b289      	uxth	r1, r1
 8026a14:	f896 e000 	ldrb.w	lr, [r6]
 8026a18:	f108 0803 	add.w	r8, r8, #3
 8026a1c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8026a20:	fb03 f901 	mul.w	r9, r3, r1
 8026a24:	011b      	lsls	r3, r3, #4
 8026a26:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8026a2a:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 8026a2e:	eba3 0309 	sub.w	r3, r3, r9
 8026a32:	b289      	uxth	r1, r1
 8026a34:	b29b      	uxth	r3, r3
 8026a36:	ebac 0c01 	sub.w	ip, ip, r1
 8026a3a:	fb03 fe0e 	mul.w	lr, r3, lr
 8026a3e:	fa1f fc8c 	uxth.w	ip, ip
 8026a42:	fb0c ee0b 	mla	lr, ip, fp, lr
 8026a46:	f892 b000 	ldrb.w	fp, [r2]
 8026a4a:	fb01 ee0b 	mla	lr, r1, fp, lr
 8026a4e:	f890 b000 	ldrb.w	fp, [r0]
 8026a52:	fb09 ee0b 	mla	lr, r9, fp, lr
 8026a56:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8026a5a:	f808 ec06 	strb.w	lr, [r8, #-6]
 8026a5e:	f896 e001 	ldrb.w	lr, [r6, #1]
 8026a62:	f897 b001 	ldrb.w	fp, [r7, #1]
 8026a66:	fb03 fe0e 	mul.w	lr, r3, lr
 8026a6a:	fb0c ee0b 	mla	lr, ip, fp, lr
 8026a6e:	f892 b001 	ldrb.w	fp, [r2, #1]
 8026a72:	fb01 ee0b 	mla	lr, r1, fp, lr
 8026a76:	f890 b001 	ldrb.w	fp, [r0, #1]
 8026a7a:	fb09 ee0b 	mla	lr, r9, fp, lr
 8026a7e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8026a82:	f808 ec05 	strb.w	lr, [r8, #-5]
 8026a86:	78b6      	ldrb	r6, [r6, #2]
 8026a88:	78bf      	ldrb	r7, [r7, #2]
 8026a8a:	4373      	muls	r3, r6
 8026a8c:	7896      	ldrb	r6, [r2, #2]
 8026a8e:	7882      	ldrb	r2, [r0, #2]
 8026a90:	fb0c 3307 	mla	r3, ip, r7, r3
 8026a94:	fb01 3306 	mla	r3, r1, r6, r3
 8026a98:	fb09 3902 	mla	r9, r9, r2, r3
 8026a9c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8026a9e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8026aa0:	441c      	add	r4, r3
 8026aa2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8026aa4:	ea4f 2929 	mov.w	r9, r9, asr #8
 8026aa8:	4413      	add	r3, r2
 8026aaa:	f808 9c04 	strb.w	r9, [r8, #-4]
 8026aae:	9318      	str	r3, [sp, #96]	@ 0x60
 8026ab0:	e70d      	b.n	80268ce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8026ab2:	b151      	cbz	r1, 8026aca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8026ab4:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8026ab8:	4638      	mov	r0, r7
 8026aba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026abe:	442a      	add	r2, r5
 8026ac0:	463e      	mov	r6, r7
 8026ac2:	e7a3      	b.n	8026a0c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8026ac4:	4638      	mov	r0, r7
 8026ac6:	463a      	mov	r2, r7
 8026ac8:	e7a0      	b.n	8026a0c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8026aca:	4638      	mov	r0, r7
 8026acc:	463a      	mov	r2, r7
 8026ace:	e7f7      	b.n	8026ac0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 8026ad0:	b00d      	add	sp, #52	@ 0x34
 8026ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026ad6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8026ad6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026ada:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 8026ade:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8026ae2:	2d00      	cmp	r5, #0
 8026ae4:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8026ae8:	fb05 700c 	mla	r0, r5, ip, r7
 8026aec:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 8026af0:	f89d e044 	ldrb.w	lr, [sp, #68]	@ 0x44
 8026af4:	eb02 0800 	add.w	r8, r2, r0
 8026af8:	f2c0 8118 	blt.w	8026d2c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8026afc:	45a9      	cmp	r9, r5
 8026afe:	f340 8115 	ble.w	8026d2c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8026b02:	2f00      	cmp	r7, #0
 8026b04:	f2c0 8110 	blt.w	8026d28 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8026b08:	45bc      	cmp	ip, r7
 8026b0a:	f340 810d 	ble.w	8026d28 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8026b0e:	5c12      	ldrb	r2, [r2, r0]
 8026b10:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8026b14:	1c7a      	adds	r2, r7, #1
 8026b16:	f100 810c 	bmi.w	8026d32 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8026b1a:	4594      	cmp	ip, r2
 8026b1c:	f340 8109 	ble.w	8026d32 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8026b20:	2c00      	cmp	r4, #0
 8026b22:	f000 8108 	beq.w	8026d36 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 8026b26:	f898 2001 	ldrb.w	r2, [r8, #1]
 8026b2a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8026b2e:	3501      	adds	r5, #1
 8026b30:	f100 8105 	bmi.w	8026d3e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8026b34:	45a9      	cmp	r9, r5
 8026b36:	f340 8102 	ble.w	8026d3e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8026b3a:	f1be 0f00 	cmp.w	lr, #0
 8026b3e:	f000 8101 	beq.w	8026d44 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 8026b42:	2f00      	cmp	r7, #0
 8026b44:	f2c0 80f9 	blt.w	8026d3a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8026b48:	45bc      	cmp	ip, r7
 8026b4a:	f340 80f6 	ble.w	8026d3a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8026b4e:	f818 200c 	ldrb.w	r2, [r8, ip]
 8026b52:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8026b56:	3701      	adds	r7, #1
 8026b58:	f100 80f7 	bmi.w	8026d4a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8026b5c:	45bc      	cmp	ip, r7
 8026b5e:	f340 80f4 	ble.w	8026d4a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8026b62:	2c00      	cmp	r4, #0
 8026b64:	f000 80f3 	beq.w	8026d4e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 8026b68:	44c4      	add	ip, r8
 8026b6a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8026b6e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8026b72:	fa1f fc84 	uxth.w	ip, r4
 8026b76:	fa1f f48e 	uxth.w	r4, lr
 8026b7a:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8026b7e:	fb04 fe0c 	mul.w	lr, r4, ip
 8026b82:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8026b86:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8026b8a:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 8026b8e:	ebac 070e 	sub.w	r7, ip, lr
 8026b92:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 8026b96:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8026b9a:	b2a4      	uxth	r4, r4
 8026b9c:	b2bf      	uxth	r7, r7
 8026b9e:	1b1b      	subs	r3, r3, r4
 8026ba0:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8026ba4:	fb07 fc0a 	mul.w	ip, r7, sl
 8026ba8:	b29b      	uxth	r3, r3
 8026baa:	fb03 cc0b 	mla	ip, r3, fp, ip
 8026bae:	9300      	str	r3, [sp, #0]
 8026bb0:	fb04 cc09 	mla	ip, r4, r9, ip
 8026bb4:	fb0e cc08 	mla	ip, lr, r8, ip
 8026bb8:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8026bbc:	9301      	str	r3, [sp, #4]
 8026bbe:	2b00      	cmp	r3, #0
 8026bc0:	f000 80af 	beq.w	8026d22 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 8026bc4:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 8026bc8:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8026bcc:	fb0b fc0c 	mul.w	ip, fp, ip
 8026bd0:	fb0b f606 	mul.w	r6, fp, r6
 8026bd4:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8026bd8:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8026bdc:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8026be0:	44dc      	add	ip, fp
 8026be2:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 8026be6:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8026bea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026bee:	fb0a fb0b 	mul.w	fp, sl, fp
 8026bf2:	fb0a fa00 	mul.w	sl, sl, r0
 8026bf6:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 8026bfa:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 8026bfe:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 8026c02:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8026c06:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8026c0a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8026c0e:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8026c12:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026c16:	0a36      	lsrs	r6, r6, #8
 8026c18:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026c1c:	44dc      	add	ip, fp
 8026c1e:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8026c22:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8026c26:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8026c2a:	fb09 fb0b 	mul.w	fp, r9, fp
 8026c2e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026c32:	fb09 f905 	mul.w	r9, r9, r5
 8026c36:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8026c3a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026c3e:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 8026c42:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8026c46:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8026c4a:	fb0c fc07 	mul.w	ip, ip, r7
 8026c4e:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8026c52:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 8026c56:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8026c5a:	4458      	add	r0, fp
 8026c5c:	fb08 f505 	mul.w	r5, r8, r5
 8026c60:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026c64:	fb08 f802 	mul.w	r8, r8, r2
 8026c68:	0a00      	lsrs	r0, r0, #8
 8026c6a:	0a2a      	lsrs	r2, r5, #8
 8026c6c:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 8026c70:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8026c74:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8026c78:	4415      	add	r5, r2
 8026c7a:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 8026c7e:	0a2d      	lsrs	r5, r5, #8
 8026c80:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8026c84:	9a00      	ldr	r2, [sp, #0]
 8026c86:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8026c8a:	fb03 cc02 	mla	ip, r3, r2, ip
 8026c8e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8026c92:	9b01      	ldr	r3, [sp, #4]
 8026c94:	fb05 c50e 	mla	r5, r5, lr, ip
 8026c98:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8026c9c:	fb00 5004 	mla	r0, r0, r4, r5
 8026ca0:	0a00      	lsrs	r0, r0, #8
 8026ca2:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 8026ca6:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 8026caa:	4378      	muls	r0, r7
 8026cac:	fb02 0006 	mla	r0, r2, r6, r0
 8026cb0:	fb0e 0e08 	mla	lr, lr, r8, r0
 8026cb4:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 8026cb8:	fb04 e000 	mla	r0, r4, r0, lr
 8026cbc:	0a00      	lsrs	r0, r0, #8
 8026cbe:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8026cc2:	4328      	orrs	r0, r5
 8026cc4:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8026cc8:	b2ad      	uxth	r5, r5
 8026cca:	b2c4      	uxtb	r4, r0
 8026ccc:	436b      	muls	r3, r5
 8026cce:	fb14 f405 	smulbb	r4, r4, r5
 8026cd2:	1c5a      	adds	r2, r3, #1
 8026cd4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8026cd8:	780b      	ldrb	r3, [r1, #0]
 8026cda:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8026cde:	b2d2      	uxtb	r2, r2
 8026ce0:	fb03 4302 	mla	r3, r3, r2, r4
 8026ce4:	b29b      	uxth	r3, r3
 8026ce6:	1c5c      	adds	r4, r3, #1
 8026ce8:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8026cec:	784c      	ldrb	r4, [r1, #1]
 8026cee:	fb14 f402 	smulbb	r4, r4, r2
 8026cf2:	121b      	asrs	r3, r3, #8
 8026cf4:	700b      	strb	r3, [r1, #0]
 8026cf6:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8026cfa:	fb03 4305 	mla	r3, r3, r5, r4
 8026cfe:	b29b      	uxth	r3, r3
 8026d00:	1c5c      	adds	r4, r3, #1
 8026d02:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8026d06:	0c04      	lsrs	r4, r0, #16
 8026d08:	7888      	ldrb	r0, [r1, #2]
 8026d0a:	121b      	asrs	r3, r3, #8
 8026d0c:	fb10 f002 	smulbb	r0, r0, r2
 8026d10:	704b      	strb	r3, [r1, #1]
 8026d12:	fb04 0005 	mla	r0, r4, r5, r0
 8026d16:	b280      	uxth	r0, r0
 8026d18:	1c43      	adds	r3, r0, #1
 8026d1a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8026d1e:	1200      	asrs	r0, r0, #8
 8026d20:	7088      	strb	r0, [r1, #2]
 8026d22:	b003      	add	sp, #12
 8026d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026d28:	2600      	movs	r6, #0
 8026d2a:	e6f3      	b.n	8026b14 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 8026d2c:	2000      	movs	r0, #0
 8026d2e:	4606      	mov	r6, r0
 8026d30:	e6fd      	b.n	8026b2e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8026d32:	2000      	movs	r0, #0
 8026d34:	e6fb      	b.n	8026b2e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8026d36:	4620      	mov	r0, r4
 8026d38:	e6f9      	b.n	8026b2e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8026d3a:	2500      	movs	r5, #0
 8026d3c:	e70b      	b.n	8026b56 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 8026d3e:	2200      	movs	r2, #0
 8026d40:	4615      	mov	r5, r2
 8026d42:	e716      	b.n	8026b72 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8026d44:	4672      	mov	r2, lr
 8026d46:	4675      	mov	r5, lr
 8026d48:	e713      	b.n	8026b72 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8026d4a:	2200      	movs	r2, #0
 8026d4c:	e711      	b.n	8026b72 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8026d4e:	4622      	mov	r2, r4
 8026d50:	e70f      	b.n	8026b72 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

08026d52 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026d52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026d56:	b09f      	sub	sp, #124	@ 0x7c
 8026d58:	921b      	str	r2, [sp, #108]	@ 0x6c
 8026d5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8026d5c:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8026d5e:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 8026d62:	901d      	str	r0, [sp, #116]	@ 0x74
 8026d64:	931c      	str	r3, [sp, #112]	@ 0x70
 8026d66:	6850      	ldr	r0, [r2, #4]
 8026d68:	9119      	str	r1, [sp, #100]	@ 0x64
 8026d6a:	6812      	ldr	r2, [r2, #0]
 8026d6c:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8026d6e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 8026d72:	fb00 1303 	mla	r3, r0, r3, r1
 8026d76:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026d7a:	18d3      	adds	r3, r2, r3
 8026d7c:	930c      	str	r3, [sp, #48]	@ 0x30
 8026d7e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8026d80:	681b      	ldr	r3, [r3, #0]
 8026d82:	9312      	str	r3, [sp, #72]	@ 0x48
 8026d84:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8026d86:	685e      	ldr	r6, [r3, #4]
 8026d88:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 8026d8c:	3604      	adds	r6, #4
 8026d8e:	930d      	str	r3, [sp, #52]	@ 0x34
 8026d90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8026d92:	2b00      	cmp	r3, #0
 8026d94:	dc03      	bgt.n	8026d9e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8026d96:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8026d98:	2b00      	cmp	r3, #0
 8026d9a:	f340 8378 	ble.w	802748e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8026d9e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8026da0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026da4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026da8:	1e48      	subs	r0, r1, #1
 8026daa:	1e57      	subs	r7, r2, #1
 8026dac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026dae:	2b00      	cmp	r3, #0
 8026db0:	f340 818c 	ble.w	80270cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8026db4:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8026db6:	142b      	asrs	r3, r5, #16
 8026db8:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8026dbc:	d406      	bmi.n	8026dcc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8026dbe:	4584      	cmp	ip, r0
 8026dc0:	da04      	bge.n	8026dcc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8026dc2:	2b00      	cmp	r3, #0
 8026dc4:	db02      	blt.n	8026dcc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8026dc6:	42bb      	cmp	r3, r7
 8026dc8:	f2c0 8181 	blt.w	80270ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8026dcc:	f11c 0c01 	adds.w	ip, ip, #1
 8026dd0:	f100 816f 	bmi.w	80270b2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8026dd4:	4561      	cmp	r1, ip
 8026dd6:	f2c0 816c 	blt.w	80270b2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8026dda:	3301      	adds	r3, #1
 8026ddc:	f100 8169 	bmi.w	80270b2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8026de0:	429a      	cmp	r2, r3
 8026de2:	f2c0 8166 	blt.w	80270b2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8026de6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026de8:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8026dea:	931a      	str	r3, [sp, #104]	@ 0x68
 8026dec:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8026dee:	2b00      	cmp	r3, #0
 8026df0:	f340 818c 	ble.w	802710c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8026df4:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8026df6:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8026dfa:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8026dfe:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026e02:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8026e04:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8026e08:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8026e0a:	141b      	asrs	r3, r3, #16
 8026e0c:	f100 81d0 	bmi.w	80271b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8026e10:	f100 38ff 	add.w	r8, r0, #4294967295
 8026e14:	4543      	cmp	r3, r8
 8026e16:	f280 81cb 	bge.w	80271b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8026e1a:	f1bc 0f00 	cmp.w	ip, #0
 8026e1e:	f2c0 81c7 	blt.w	80271b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8026e22:	f10e 38ff 	add.w	r8, lr, #4294967295
 8026e26:	45c4      	cmp	ip, r8
 8026e28:	f280 81c2 	bge.w	80271b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8026e2c:	b200      	sxth	r0, r0
 8026e2e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026e30:	fb0c 3300 	mla	r3, ip, r0, r3
 8026e34:	eb04 0803 	add.w	r8, r4, r3
 8026e38:	5ce3      	ldrb	r3, [r4, r3]
 8026e3a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8026e3e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8026e42:	2a00      	cmp	r2, #0
 8026e44:	f000 81a9 	beq.w	802719a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8026e48:	f898 c001 	ldrb.w	ip, [r8, #1]
 8026e4c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8026e50:	940e      	str	r4, [sp, #56]	@ 0x38
 8026e52:	0e24      	lsrs	r4, r4, #24
 8026e54:	9415      	str	r4, [sp, #84]	@ 0x54
 8026e56:	b179      	cbz	r1, 8026e78 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8026e58:	eb08 0c00 	add.w	ip, r8, r0
 8026e5c:	f818 0000 	ldrb.w	r0, [r8, r0]
 8026e60:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8026e64:	900a      	str	r0, [sp, #40]	@ 0x28
 8026e66:	0e00      	lsrs	r0, r0, #24
 8026e68:	9013      	str	r0, [sp, #76]	@ 0x4c
 8026e6a:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8026e6e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8026e72:	900f      	str	r0, [sp, #60]	@ 0x3c
 8026e74:	0e00      	lsrs	r0, r0, #24
 8026e76:	9016      	str	r0, [sp, #88]	@ 0x58
 8026e78:	b292      	uxth	r2, r2
 8026e7a:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8026e7c:	b289      	uxth	r1, r1
 8026e7e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026e80:	fb02 f901 	mul.w	r9, r2, r1
 8026e84:	0112      	lsls	r2, r2, #4
 8026e86:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8026e8a:	eba2 0809 	sub.w	r8, r2, r9
 8026e8e:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8026e92:	b289      	uxth	r1, r1
 8026e94:	fa1f f888 	uxth.w	r8, r8
 8026e98:	1a52      	subs	r2, r2, r1
 8026e9a:	fb08 f000 	mul.w	r0, r8, r0
 8026e9e:	b292      	uxth	r2, r2
 8026ea0:	fb02 000e 	mla	r0, r2, lr, r0
 8026ea4:	fb01 0004 	mla	r0, r1, r4, r0
 8026ea8:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8026eaa:	fb09 0004 	mla	r0, r9, r4, r0
 8026eae:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026eb2:	2800      	cmp	r0, #0
 8026eb4:	f000 80f2 	beq.w	802709c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8026eb8:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8026ebc:	d01b      	beq.n	8026ef6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8026ebe:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8026ec2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8026ec6:	fb0e fa0a 	mul.w	sl, lr, sl
 8026eca:	fb0e fe03 	mul.w	lr, lr, r3
 8026ece:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026ed2:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8026ed6:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8026eda:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8026ede:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8026ee2:	4453      	add	r3, sl
 8026ee4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026ee8:	0a1b      	lsrs	r3, r3, #8
 8026eea:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8026eee:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8026ef2:	ea43 030c 	orr.w	r3, r3, ip
 8026ef6:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8026ef8:	2cff      	cmp	r4, #255	@ 0xff
 8026efa:	d021      	beq.n	8026f40 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8026efc:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8026efe:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8026f02:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8026f04:	fb04 fb0b 	mul.w	fp, r4, fp
 8026f08:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8026f0a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026f0e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8026f10:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026f14:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8026f18:	fb04 fa0a 	mul.w	sl, r4, sl
 8026f1c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026f20:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8026f24:	44de      	add	lr, fp
 8026f26:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026f2a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026f2e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026f32:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026f36:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026f3a:	ea4e 040a 	orr.w	r4, lr, sl
 8026f3e:	940e      	str	r4, [sp, #56]	@ 0x38
 8026f40:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026f42:	2cff      	cmp	r4, #255	@ 0xff
 8026f44:	d021      	beq.n	8026f8a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8026f46:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8026f48:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8026f4c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026f4e:	fb04 fb0b 	mul.w	fp, r4, fp
 8026f52:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8026f54:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026f58:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026f5a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026f5e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8026f62:	fb04 fa0a 	mul.w	sl, r4, sl
 8026f66:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026f6a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8026f6e:	44de      	add	lr, fp
 8026f70:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026f74:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026f78:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026f7c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026f80:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026f84:	ea4e 040a 	orr.w	r4, lr, sl
 8026f88:	940a      	str	r4, [sp, #40]	@ 0x28
 8026f8a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8026f8c:	2cff      	cmp	r4, #255	@ 0xff
 8026f8e:	d021      	beq.n	8026fd4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8026f90:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8026f92:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8026f96:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8026f98:	fb04 fb0b 	mul.w	fp, r4, fp
 8026f9c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8026f9e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026fa2:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8026fa4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026fa8:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8026fac:	fb04 fa0a 	mul.w	sl, r4, sl
 8026fb0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026fb4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8026fb8:	44de      	add	lr, fp
 8026fba:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026fbe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026fc2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026fc6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026fca:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026fce:	ea4e 040a 	orr.w	r4, lr, sl
 8026fd2:	940f      	str	r4, [sp, #60]	@ 0x3c
 8026fd4:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8026fd6:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8026fda:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8026fde:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8026fe2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8026fe4:	fb08 fc0c 	mul.w	ip, r8, ip
 8026fe8:	fb02 cc0e 	mla	ip, r2, lr, ip
 8026fec:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8026ff0:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8026ff2:	fb01 cc0e 	mla	ip, r1, lr, ip
 8026ff6:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8026ffa:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8026ffc:	fb09 cc0e 	mla	ip, r9, lr, ip
 8027000:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8027004:	fb08 f80e 	mul.w	r8, r8, lr
 8027008:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802700c:	fb02 8303 	mla	r3, r2, r3, r8
 8027010:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8027012:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027016:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 802701a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802701c:	fb01 330a 	mla	r3, r1, sl, r3
 8027020:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 8027024:	fb09 3901 	mla	r9, r9, r1, r3
 8027028:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802702a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 802702c:	4343      	muls	r3, r0
 802702e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027032:	1c58      	adds	r0, r3, #1
 8027034:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8027038:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802703c:	ea4c 0c09 	orr.w	ip, ip, r9
 8027040:	783b      	ldrb	r3, [r7, #0]
 8027042:	fa5f f28c 	uxtb.w	r2, ip
 8027046:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802704a:	fb12 f201 	smulbb	r2, r2, r1
 802704e:	b2c0      	uxtb	r0, r0
 8027050:	fb03 2300 	mla	r3, r3, r0, r2
 8027054:	b29b      	uxth	r3, r3
 8027056:	1c5a      	adds	r2, r3, #1
 8027058:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802705c:	787a      	ldrb	r2, [r7, #1]
 802705e:	fb12 f200 	smulbb	r2, r2, r0
 8027062:	121b      	asrs	r3, r3, #8
 8027064:	703b      	strb	r3, [r7, #0]
 8027066:	f3cc 2307 	ubfx	r3, ip, #8, #8
 802706a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 802706e:	fb03 2301 	mla	r3, r3, r1, r2
 8027072:	b29b      	uxth	r3, r3
 8027074:	1c5a      	adds	r2, r3, #1
 8027076:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802707a:	121b      	asrs	r3, r3, #8
 802707c:	707b      	strb	r3, [r7, #1]
 802707e:	78bb      	ldrb	r3, [r7, #2]
 8027080:	fb13 f000 	smulbb	r0, r3, r0
 8027084:	fb0c 0c01 	mla	ip, ip, r1, r0
 8027088:	fa1f fc8c 	uxth.w	ip, ip
 802708c:	f10c 0301 	add.w	r3, ip, #1
 8027090:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8027094:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8027098:	f887 c002 	strb.w	ip, [r7, #2]
 802709c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 802709e:	3703      	adds	r7, #3
 80270a0:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80270a2:	441a      	add	r2, r3
 80270a4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80270a6:	441d      	add	r5, r3
 80270a8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80270aa:	9229      	str	r2, [sp, #164]	@ 0xa4
 80270ac:	3b01      	subs	r3, #1
 80270ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80270b0:	e69c      	b.n	8026dec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80270b2:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80270b4:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 80270b6:	441c      	add	r4, r3
 80270b8:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80270ba:	441d      	add	r5, r3
 80270bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80270be:	9429      	str	r4, [sp, #164]	@ 0xa4
 80270c0:	3b01      	subs	r3, #1
 80270c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80270c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80270c6:	3303      	adds	r3, #3
 80270c8:	930c      	str	r3, [sp, #48]	@ 0x30
 80270ca:	e66f      	b.n	8026dac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80270cc:	d026      	beq.n	802711c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 80270ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80270d0:	982b      	ldr	r0, [sp, #172]	@ 0xac
 80270d2:	3b01      	subs	r3, #1
 80270d4:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 80270d6:	fb00 4003 	mla	r0, r0, r3, r4
 80270da:	1400      	asrs	r0, r0, #16
 80270dc:	f53f ae83 	bmi.w	8026de6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80270e0:	3901      	subs	r1, #1
 80270e2:	4288      	cmp	r0, r1
 80270e4:	f6bf ae7f 	bge.w	8026de6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80270e8:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 80270ea:	fb01 5303 	mla	r3, r1, r3, r5
 80270ee:	141b      	asrs	r3, r3, #16
 80270f0:	f53f ae79 	bmi.w	8026de6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80270f4:	3a01      	subs	r2, #1
 80270f6:	4293      	cmp	r3, r2
 80270f8:	f6bf ae75 	bge.w	8026de6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80270fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80270fe:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8027102:	f103 0e03 	add.w	lr, r3, #3
 8027106:	f1bb 0f00 	cmp.w	fp, #0
 802710a:	dc71      	bgt.n	80271f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 802710c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802710e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027112:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8027114:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8027118:	4423      	add	r3, r4
 802711a:	930c      	str	r3, [sp, #48]	@ 0x30
 802711c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802711e:	2b00      	cmp	r3, #0
 8027120:	f340 81b5 	ble.w	802748e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8027124:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8027128:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802712a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802712e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027132:	eef0 6a62 	vmov.f32	s13, s5
 8027136:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802713a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802713e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027142:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 8027146:	eef0 6a43 	vmov.f32	s13, s6
 802714a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802714e:	ee16 5a90 	vmov	r5, s13
 8027152:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027156:	ee61 7a27 	vmul.f32	s15, s2, s15
 802715a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802715e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027162:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027166:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802716a:	ee12 2a90 	vmov	r2, s5
 802716e:	eef0 2a47 	vmov.f32	s5, s14
 8027172:	fb92 f3f3 	sdiv	r3, r2, r3
 8027176:	ee13 2a10 	vmov	r2, s6
 802717a:	932b      	str	r3, [sp, #172]	@ 0xac
 802717c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802717e:	eeb0 3a67 	vmov.f32	s6, s15
 8027182:	fb92 f3f3 	sdiv	r3, r2, r3
 8027186:	932c      	str	r3, [sp, #176]	@ 0xb0
 8027188:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802718a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 802718c:	3b01      	subs	r3, #1
 802718e:	9319      	str	r3, [sp, #100]	@ 0x64
 8027190:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027192:	bf08      	it	eq
 8027194:	4613      	moveq	r3, r2
 8027196:	9309      	str	r3, [sp, #36]	@ 0x24
 8027198:	e5fa      	b.n	8026d90 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 802719a:	2900      	cmp	r1, #0
 802719c:	f43f ae6c 	beq.w	8026e78 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80271a0:	f818 0000 	ldrb.w	r0, [r8, r0]
 80271a4:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80271a8:	900a      	str	r0, [sp, #40]	@ 0x28
 80271aa:	0e00      	lsrs	r0, r0, #24
 80271ac:	9013      	str	r0, [sp, #76]	@ 0x4c
 80271ae:	e663      	b.n	8026e78 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80271b0:	f113 0801 	adds.w	r8, r3, #1
 80271b4:	f53f af72 	bmi.w	802709c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80271b8:	4540      	cmp	r0, r8
 80271ba:	f6ff af6f 	blt.w	802709c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80271be:	f11c 0801 	adds.w	r8, ip, #1
 80271c2:	f53f af6b 	bmi.w	802709c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80271c6:	45c6      	cmp	lr, r8
 80271c8:	f6ff af68 	blt.w	802709c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80271cc:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80271ce:	b200      	sxth	r0, r0
 80271d0:	9302      	str	r3, [sp, #8]
 80271d2:	fa0f f38e 	sxth.w	r3, lr
 80271d6:	9000      	str	r0, [sp, #0]
 80271d8:	9301      	str	r3, [sp, #4]
 80271da:	4633      	mov	r3, r6
 80271dc:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80271de:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80271e2:	e9cd c203 	strd	ip, r2, [sp, #12]
 80271e6:	4639      	mov	r1, r7
 80271e8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80271ea:	f7ff fc74 	bl	8026ad6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 80271ee:	e755      	b.n	802709c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80271f0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80271f2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80271f6:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 80271f8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80271fc:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80271fe:	1427      	asrs	r7, r4, #16
 8027200:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8027202:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027206:	142b      	asrs	r3, r5, #16
 8027208:	fb01 7303 	mla	r3, r1, r3, r7
 802720c:	18e7      	adds	r7, r4, r3
 802720e:	5ce3      	ldrb	r3, [r4, r3]
 8027210:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8027214:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8027218:	2a00      	cmp	r2, #0
 802721a:	f000 812e 	beq.w	802747a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 802721e:	f897 8001 	ldrb.w	r8, [r7, #1]
 8027222:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8027226:	9410      	str	r4, [sp, #64]	@ 0x40
 8027228:	0e24      	lsrs	r4, r4, #24
 802722a:	9417      	str	r4, [sp, #92]	@ 0x5c
 802722c:	b170      	cbz	r0, 802724c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 802722e:	eb07 0801 	add.w	r8, r7, r1
 8027232:	5c79      	ldrb	r1, [r7, r1]
 8027234:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8027238:	910b      	str	r1, [sp, #44]	@ 0x2c
 802723a:	0e09      	lsrs	r1, r1, #24
 802723c:	9114      	str	r1, [sp, #80]	@ 0x50
 802723e:	f898 1001 	ldrb.w	r1, [r8, #1]
 8027242:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8027246:	9111      	str	r1, [sp, #68]	@ 0x44
 8027248:	0e09      	lsrs	r1, r1, #24
 802724a:	9118      	str	r1, [sp, #96]	@ 0x60
 802724c:	b292      	uxth	r2, r2
 802724e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8027250:	b280      	uxth	r0, r0
 8027252:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8027254:	fb02 f900 	mul.w	r9, r2, r0
 8027258:	0112      	lsls	r2, r2, #4
 802725a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802725e:	eba2 0809 	sub.w	r8, r2, r9
 8027262:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8027266:	b280      	uxth	r0, r0
 8027268:	fa1f f888 	uxth.w	r8, r8
 802726c:	1a12      	subs	r2, r2, r0
 802726e:	fb08 f101 	mul.w	r1, r8, r1
 8027272:	b292      	uxth	r2, r2
 8027274:	fb02 110c 	mla	r1, r2, ip, r1
 8027278:	fb00 1104 	mla	r1, r0, r4, r1
 802727c:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 802727e:	fb09 1104 	mla	r1, r9, r4, r1
 8027282:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8027286:	2900      	cmp	r1, #0
 8027288:	f000 80ec 	beq.w	8027464 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 802728c:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8027290:	d019      	beq.n	80272c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 8027292:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8027296:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802729a:	fb0c fa0a 	mul.w	sl, ip, sl
 802729e:	fb0c fc03 	mul.w	ip, ip, r3
 80272a2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80272a6:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80272aa:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 80272ae:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80272b2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80272b6:	4453      	add	r3, sl
 80272b8:	0a3f      	lsrs	r7, r7, #8
 80272ba:	0a1b      	lsrs	r3, r3, #8
 80272bc:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 80272c0:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80272c4:	433b      	orrs	r3, r7
 80272c6:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80272c8:	2cff      	cmp	r4, #255	@ 0xff
 80272ca:	d020      	beq.n	802730e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 80272cc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80272ce:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80272d2:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80272d4:	4367      	muls	r7, r4
 80272d6:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80272d8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80272dc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80272e0:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80272e2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80272e6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80272ea:	fb04 fa0a 	mul.w	sl, r4, sl
 80272ee:	44bc      	add	ip, r7
 80272f0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80272f4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80272f8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80272fc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027300:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027304:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027308:	ea4c 040a 	orr.w	r4, ip, sl
 802730c:	9410      	str	r4, [sp, #64]	@ 0x40
 802730e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8027310:	2cff      	cmp	r4, #255	@ 0xff
 8027312:	d020      	beq.n	8027356 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 8027314:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8027316:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802731a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802731c:	4367      	muls	r7, r4
 802731e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8027320:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027324:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8027328:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802732a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802732e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027332:	fb04 fa0a 	mul.w	sl, r4, sl
 8027336:	44bc      	add	ip, r7
 8027338:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802733c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027340:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027344:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027348:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802734c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027350:	ea4c 040a 	orr.w	r4, ip, sl
 8027354:	940b      	str	r4, [sp, #44]	@ 0x2c
 8027356:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8027358:	2cff      	cmp	r4, #255	@ 0xff
 802735a:	d020      	beq.n	802739e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 802735c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802735e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8027362:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8027364:	4367      	muls	r7, r4
 8027366:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8027368:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802736c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8027370:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8027372:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8027376:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802737a:	fb04 fa0a 	mul.w	sl, r4, sl
 802737e:	44bc      	add	ip, r7
 8027380:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8027384:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027388:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802738c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027390:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027394:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027398:	ea4c 040a 	orr.w	r4, ip, sl
 802739c:	9411      	str	r4, [sp, #68]	@ 0x44
 802739e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80273a0:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 80273a4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80273a8:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80273ac:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80273ae:	fb08 f707 	mul.w	r7, r8, r7
 80273b2:	fb02 770c 	mla	r7, r2, ip, r7
 80273b6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80273ba:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80273bc:	fb00 770c 	mla	r7, r0, ip, r7
 80273c0:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80273c4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80273c6:	fb09 770c 	mla	r7, r9, ip, r7
 80273ca:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 80273ce:	fb08 f80c 	mul.w	r8, r8, ip
 80273d2:	0a3f      	lsrs	r7, r7, #8
 80273d4:	fb02 8303 	mla	r3, r2, r3, r8
 80273d8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80273da:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 80273de:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 80273e2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80273e4:	fb00 330a 	mla	r3, r0, sl, r3
 80273e8:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 80273ec:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80273ee:	fb09 3c0c 	mla	ip, r9, ip, r3
 80273f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80273f4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80273f8:	434b      	muls	r3, r1
 80273fa:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80273fe:	1c59      	adds	r1, r3, #1
 8027400:	ea47 070c 	orr.w	r7, r7, ip
 8027404:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8027408:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 802740c:	b2fa      	uxtb	r2, r7
 802740e:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8027412:	fb12 f200 	smulbb	r2, r2, r0
 8027416:	b2c9      	uxtb	r1, r1
 8027418:	fb03 2301 	mla	r3, r3, r1, r2
 802741c:	b29b      	uxth	r3, r3
 802741e:	1c5a      	adds	r2, r3, #1
 8027420:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027424:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8027428:	fb12 f201 	smulbb	r2, r2, r1
 802742c:	121b      	asrs	r3, r3, #8
 802742e:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8027432:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8027436:	0c3f      	lsrs	r7, r7, #16
 8027438:	fb03 2300 	mla	r3, r3, r0, r2
 802743c:	b29b      	uxth	r3, r3
 802743e:	1c5a      	adds	r2, r3, #1
 8027440:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027444:	121b      	asrs	r3, r3, #8
 8027446:	f80e 3c02 	strb.w	r3, [lr, #-2]
 802744a:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 802744e:	fb13 f101 	smulbb	r1, r3, r1
 8027452:	fb07 1700 	mla	r7, r7, r0, r1
 8027456:	b2bf      	uxth	r7, r7
 8027458:	1c7b      	adds	r3, r7, #1
 802745a:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 802745e:	123f      	asrs	r7, r7, #8
 8027460:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8027464:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8027466:	f10e 0e03 	add.w	lr, lr, #3
 802746a:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 802746c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8027470:	441a      	add	r2, r3
 8027472:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8027474:	9229      	str	r2, [sp, #164]	@ 0xa4
 8027476:	441d      	add	r5, r3
 8027478:	e645      	b.n	8027106 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 802747a:	2800      	cmp	r0, #0
 802747c:	f43f aee6 	beq.w	802724c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8027480:	5c79      	ldrb	r1, [r7, r1]
 8027482:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8027486:	910b      	str	r1, [sp, #44]	@ 0x2c
 8027488:	0e09      	lsrs	r1, r1, #24
 802748a:	9114      	str	r1, [sp, #80]	@ 0x50
 802748c:	e6de      	b.n	802724c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 802748e:	b01f      	add	sp, #124	@ 0x7c
 8027490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027494 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8027494:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027498:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 802749c:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 80274a0:	2d00      	cmp	r5, #0
 80274a2:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 80274a6:	fb05 700e 	mla	r0, r5, lr, r7
 80274aa:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 80274ae:	f89d c044 	ldrb.w	ip, [sp, #68]	@ 0x44
 80274b2:	eb02 0800 	add.w	r8, r2, r0
 80274b6:	f2c0 8105 	blt.w	80276c4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 80274ba:	45a9      	cmp	r9, r5
 80274bc:	f340 8102 	ble.w	80276c4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 80274c0:	2f00      	cmp	r7, #0
 80274c2:	f2c0 80fd 	blt.w	80276c0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 80274c6:	45be      	cmp	lr, r7
 80274c8:	f340 80fa 	ble.w	80276c0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 80274cc:	5c12      	ldrb	r2, [r2, r0]
 80274ce:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80274d2:	1c7a      	adds	r2, r7, #1
 80274d4:	f100 80f9 	bmi.w	80276ca <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 80274d8:	4596      	cmp	lr, r2
 80274da:	f340 80f6 	ble.w	80276ca <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 80274de:	2c00      	cmp	r4, #0
 80274e0:	f000 80f5 	beq.w	80276ce <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 80274e4:	f898 2001 	ldrb.w	r2, [r8, #1]
 80274e8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80274ec:	3501      	adds	r5, #1
 80274ee:	f100 80f2 	bmi.w	80276d6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 80274f2:	45a9      	cmp	r9, r5
 80274f4:	f340 80ef 	ble.w	80276d6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 80274f8:	f1bc 0f00 	cmp.w	ip, #0
 80274fc:	f000 80ee 	beq.w	80276dc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 8027500:	2f00      	cmp	r7, #0
 8027502:	f2c0 80e6 	blt.w	80276d2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8027506:	45be      	cmp	lr, r7
 8027508:	f340 80e3 	ble.w	80276d2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 802750c:	f818 200e 	ldrb.w	r2, [r8, lr]
 8027510:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8027514:	3701      	adds	r7, #1
 8027516:	f100 80e4 	bmi.w	80276e2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 802751a:	45be      	cmp	lr, r7
 802751c:	f340 80e1 	ble.w	80276e2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8027520:	2c00      	cmp	r4, #0
 8027522:	f000 80e0 	beq.w	80276e6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 8027526:	44c6      	add	lr, r8
 8027528:	f89e 2001 	ldrb.w	r2, [lr, #1]
 802752c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8027530:	b2a3      	uxth	r3, r4
 8027532:	fa1f fc8c 	uxth.w	ip, ip
 8027536:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 802753a:	fb0c fe03 	mul.w	lr, ip, r3
 802753e:	011b      	lsls	r3, r3, #4
 8027540:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8027544:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 8027548:	eba3 070e 	sub.w	r7, r3, lr
 802754c:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8027550:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8027554:	fa1f f48c 	uxth.w	r4, ip
 8027558:	b2bf      	uxth	r7, r7
 802755a:	1b1b      	subs	r3, r3, r4
 802755c:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8027560:	fb07 fc0a 	mul.w	ip, r7, sl
 8027564:	b29b      	uxth	r3, r3
 8027566:	fb03 cc0b 	mla	ip, r3, fp, ip
 802756a:	9300      	str	r3, [sp, #0]
 802756c:	fb04 cc09 	mla	ip, r4, r9, ip
 8027570:	fb0e cc08 	mla	ip, lr, r8, ip
 8027574:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8027578:	9301      	str	r3, [sp, #4]
 802757a:	2b00      	cmp	r3, #0
 802757c:	f000 809d 	beq.w	80276ba <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 8027580:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 8027584:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8027588:	fb0b fc0c 	mul.w	ip, fp, ip
 802758c:	fb0b f606 	mul.w	r6, fp, r6
 8027590:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8027594:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8027598:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 802759c:	44dc      	add	ip, fp
 802759e:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 80275a2:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80275a6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80275aa:	fb0a fb0b 	mul.w	fp, sl, fp
 80275ae:	fb0a fa00 	mul.w	sl, sl, r0
 80275b2:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 80275b6:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 80275ba:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 80275be:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80275c2:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 80275c6:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80275ca:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80275ce:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80275d2:	0a36      	lsrs	r6, r6, #8
 80275d4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80275d8:	44dc      	add	ip, fp
 80275da:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 80275de:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 80275e2:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 80275e6:	fb09 fb0b 	mul.w	fp, r9, fp
 80275ea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80275ee:	fb09 f905 	mul.w	r9, r9, r5
 80275f2:	ea4f 201b 	mov.w	r0, fp, lsr #8
 80275f6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80275fa:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 80275fe:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8027602:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8027606:	fb0c fc07 	mul.w	ip, ip, r7
 802760a:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 802760e:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 8027612:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8027616:	4458      	add	r0, fp
 8027618:	fb08 f505 	mul.w	r5, r8, r5
 802761c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027620:	fb08 f802 	mul.w	r8, r8, r2
 8027624:	0a00      	lsrs	r0, r0, #8
 8027626:	0a2a      	lsrs	r2, r5, #8
 8027628:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 802762c:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8027630:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8027634:	4415      	add	r5, r2
 8027636:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 802763a:	0a2d      	lsrs	r5, r5, #8
 802763c:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8027640:	9a00      	ldr	r2, [sp, #0]
 8027642:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8027646:	fb03 cc02 	mla	ip, r3, r2, ip
 802764a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802764e:	9b01      	ldr	r3, [sp, #4]
 8027650:	fb05 c50e 	mla	r5, r5, lr, ip
 8027654:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8027658:	43db      	mvns	r3, r3
 802765a:	fb00 5004 	mla	r0, r0, r4, r5
 802765e:	b2db      	uxtb	r3, r3
 8027660:	0a00      	lsrs	r0, r0, #8
 8027662:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 8027666:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 802766a:	4378      	muls	r0, r7
 802766c:	fb02 0006 	mla	r0, r2, r6, r0
 8027670:	780a      	ldrb	r2, [r1, #0]
 8027672:	fb0e 0e08 	mla	lr, lr, r8, r0
 8027676:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 802767a:	fb04 e000 	mla	r0, r4, r0, lr
 802767e:	fb02 f403 	mul.w	r4, r2, r3
 8027682:	0a00      	lsrs	r0, r0, #8
 8027684:	1c62      	adds	r2, r4, #1
 8027686:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 802768a:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802768e:	4328      	orrs	r0, r5
 8027690:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8027694:	700a      	strb	r2, [r1, #0]
 8027696:	784a      	ldrb	r2, [r1, #1]
 8027698:	435a      	muls	r2, r3
 802769a:	1c54      	adds	r4, r2, #1
 802769c:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 80276a0:	0a02      	lsrs	r2, r0, #8
 80276a2:	0c00      	lsrs	r0, r0, #16
 80276a4:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80276a8:	704a      	strb	r2, [r1, #1]
 80276aa:	788a      	ldrb	r2, [r1, #2]
 80276ac:	4353      	muls	r3, r2
 80276ae:	1c5a      	adds	r2, r3, #1
 80276b0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80276b4:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80276b8:	7088      	strb	r0, [r1, #2]
 80276ba:	b003      	add	sp, #12
 80276bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80276c0:	2600      	movs	r6, #0
 80276c2:	e706      	b.n	80274d2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 80276c4:	2000      	movs	r0, #0
 80276c6:	4606      	mov	r6, r0
 80276c8:	e710      	b.n	80274ec <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 80276ca:	2000      	movs	r0, #0
 80276cc:	e70e      	b.n	80274ec <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 80276ce:	4620      	mov	r0, r4
 80276d0:	e70c      	b.n	80274ec <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 80276d2:	2500      	movs	r5, #0
 80276d4:	e71e      	b.n	8027514 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 80276d6:	2200      	movs	r2, #0
 80276d8:	4615      	mov	r5, r2
 80276da:	e729      	b.n	8027530 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80276dc:	4662      	mov	r2, ip
 80276de:	4665      	mov	r5, ip
 80276e0:	e726      	b.n	8027530 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80276e2:	2200      	movs	r2, #0
 80276e4:	e724      	b.n	8027530 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80276e6:	4622      	mov	r2, r4
 80276e8:	e722      	b.n	8027530 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

080276ea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80276ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80276ee:	b09b      	sub	sp, #108	@ 0x6c
 80276f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80276f4:	9218      	str	r2, [sp, #96]	@ 0x60
 80276f6:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80276f8:	9019      	str	r0, [sp, #100]	@ 0x64
 80276fa:	9116      	str	r1, [sp, #88]	@ 0x58
 80276fc:	6850      	ldr	r0, [r2, #4]
 80276fe:	9307      	str	r3, [sp, #28]
 8027700:	6812      	ldr	r2, [r2, #0]
 8027702:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 8027704:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 8027708:	fb00 1303 	mla	r3, r0, r3, r1
 802770c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8027710:	18d3      	adds	r3, r2, r3
 8027712:	930a      	str	r3, [sp, #40]	@ 0x28
 8027714:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8027716:	681b      	ldr	r3, [r3, #0]
 8027718:	930f      	str	r3, [sp, #60]	@ 0x3c
 802771a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802771c:	685e      	ldr	r6, [r3, #4]
 802771e:	3604      	adds	r6, #4
 8027720:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8027722:	2b00      	cmp	r3, #0
 8027724:	dc03      	bgt.n	802772e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8027726:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8027728:	2b00      	cmp	r3, #0
 802772a:	f340 834f 	ble.w	8027dcc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 802772e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8027730:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027734:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027738:	1e48      	subs	r0, r1, #1
 802773a:	1e57      	subs	r7, r2, #1
 802773c:	9b07      	ldr	r3, [sp, #28]
 802773e:	2b00      	cmp	r3, #0
 8027740:	f340 8178 	ble.w	8027a34 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8027744:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8027746:	142b      	asrs	r3, r5, #16
 8027748:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802774c:	d406      	bmi.n	802775c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802774e:	4584      	cmp	ip, r0
 8027750:	da04      	bge.n	802775c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8027752:	2b00      	cmp	r3, #0
 8027754:	db02      	blt.n	802775c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8027756:	42bb      	cmp	r3, r7
 8027758:	f2c0 816d 	blt.w	8027a36 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 802775c:	f11c 0c01 	adds.w	ip, ip, #1
 8027760:	f100 815b 	bmi.w	8027a1a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8027764:	4561      	cmp	r1, ip
 8027766:	f2c0 8158 	blt.w	8027a1a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802776a:	3301      	adds	r3, #1
 802776c:	f100 8155 	bmi.w	8027a1a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8027770:	429a      	cmp	r2, r3
 8027772:	f2c0 8152 	blt.w	8027a1a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8027776:	9b07      	ldr	r3, [sp, #28]
 8027778:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 802777a:	9317      	str	r3, [sp, #92]	@ 0x5c
 802777c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802777e:	2b00      	cmp	r3, #0
 8027780:	f340 8178 	ble.w	8027a74 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8027784:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8027786:	ea4f 4c25 	mov.w	ip, r5, asr #16
 802778a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802778e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8027792:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8027794:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8027798:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802779a:	141b      	asrs	r3, r3, #16
 802779c:	f100 81ba 	bmi.w	8027b14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80277a0:	f101 38ff 	add.w	r8, r1, #4294967295
 80277a4:	4543      	cmp	r3, r8
 80277a6:	f280 81b5 	bge.w	8027b14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80277aa:	f1bc 0f00 	cmp.w	ip, #0
 80277ae:	f2c0 81b1 	blt.w	8027b14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80277b2:	f10e 38ff 	add.w	r8, lr, #4294967295
 80277b6:	45c4      	cmp	ip, r8
 80277b8:	f280 81ac 	bge.w	8027b14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80277bc:	b209      	sxth	r1, r1
 80277be:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80277c0:	fb0c 3301 	mla	r3, ip, r1, r3
 80277c4:	eb04 0803 	add.w	r8, r4, r3
 80277c8:	5ce3      	ldrb	r3, [r4, r3]
 80277ca:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80277ce:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80277d2:	2a00      	cmp	r2, #0
 80277d4:	f000 8193 	beq.w	8027afe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 80277d8:	f898 c001 	ldrb.w	ip, [r8, #1]
 80277dc:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80277e0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80277e2:	0e24      	lsrs	r4, r4, #24
 80277e4:	9412      	str	r4, [sp, #72]	@ 0x48
 80277e6:	b178      	cbz	r0, 8027808 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 80277e8:	eb08 0c01 	add.w	ip, r8, r1
 80277ec:	f818 1001 	ldrb.w	r1, [r8, r1]
 80277f0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80277f4:	9108      	str	r1, [sp, #32]
 80277f6:	0e09      	lsrs	r1, r1, #24
 80277f8:	9110      	str	r1, [sp, #64]	@ 0x40
 80277fa:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80277fe:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8027802:	910c      	str	r1, [sp, #48]	@ 0x30
 8027804:	0e09      	lsrs	r1, r1, #24
 8027806:	9113      	str	r1, [sp, #76]	@ 0x4c
 8027808:	b292      	uxth	r2, r2
 802780a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802780c:	b280      	uxth	r0, r0
 802780e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8027810:	fb02 f900 	mul.w	r9, r2, r0
 8027814:	0112      	lsls	r2, r2, #4
 8027816:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802781a:	eba2 0809 	sub.w	r8, r2, r9
 802781e:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8027822:	b280      	uxth	r0, r0
 8027824:	fa1f f888 	uxth.w	r8, r8
 8027828:	1a12      	subs	r2, r2, r0
 802782a:	fb08 f101 	mul.w	r1, r8, r1
 802782e:	b292      	uxth	r2, r2
 8027830:	fb02 110e 	mla	r1, r2, lr, r1
 8027834:	fb00 1104 	mla	r1, r0, r4, r1
 8027838:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802783a:	fb09 1104 	mla	r1, r9, r4, r1
 802783e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8027842:	2900      	cmp	r1, #0
 8027844:	f000 80de 	beq.w	8027a04 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8027848:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 802784c:	d01b      	beq.n	8027886 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 802784e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8027852:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8027856:	fb0e fa0a 	mul.w	sl, lr, sl
 802785a:	fb0e fe03 	mul.w	lr, lr, r3
 802785e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8027862:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8027866:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 802786a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802786e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8027872:	4453      	add	r3, sl
 8027874:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027878:	0a1b      	lsrs	r3, r3, #8
 802787a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802787e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8027882:	ea43 030c 	orr.w	r3, r3, ip
 8027886:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8027888:	2cff      	cmp	r4, #255	@ 0xff
 802788a:	d021      	beq.n	80278d0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802788c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802788e:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8027892:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8027894:	fb04 fb0b 	mul.w	fp, r4, fp
 8027898:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802789a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802789e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80278a0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80278a4:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80278a8:	fb04 fa0a 	mul.w	sl, r4, sl
 80278ac:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80278b0:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80278b4:	44de      	add	lr, fp
 80278b6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80278ba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80278be:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80278c2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80278c6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80278ca:	ea4e 040a 	orr.w	r4, lr, sl
 80278ce:	940b      	str	r4, [sp, #44]	@ 0x2c
 80278d0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80278d2:	2cff      	cmp	r4, #255	@ 0xff
 80278d4:	d021      	beq.n	802791a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 80278d6:	9c08      	ldr	r4, [sp, #32]
 80278d8:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80278dc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80278de:	fb04 fb0b 	mul.w	fp, r4, fp
 80278e2:	9c08      	ldr	r4, [sp, #32]
 80278e4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80278e8:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80278ea:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80278ee:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80278f2:	fb04 fa0a 	mul.w	sl, r4, sl
 80278f6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80278fa:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80278fe:	44de      	add	lr, fp
 8027900:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027904:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027908:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802790c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027910:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027914:	ea4e 040a 	orr.w	r4, lr, sl
 8027918:	9408      	str	r4, [sp, #32]
 802791a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802791c:	2cff      	cmp	r4, #255	@ 0xff
 802791e:	d021      	beq.n	8027964 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8027920:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8027922:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8027926:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8027928:	fb04 fb0b 	mul.w	fp, r4, fp
 802792c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802792e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8027932:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8027934:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027938:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802793c:	fb04 fa0a 	mul.w	sl, r4, sl
 8027940:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027944:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8027948:	44de      	add	lr, fp
 802794a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802794e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027952:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027956:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802795a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802795e:	ea4e 040a 	orr.w	r4, lr, sl
 8027962:	940c      	str	r4, [sp, #48]	@ 0x30
 8027964:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8027966:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 802796a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802796e:	43c9      	mvns	r1, r1
 8027970:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8027974:	9c08      	ldr	r4, [sp, #32]
 8027976:	b2c9      	uxtb	r1, r1
 8027978:	fb08 fc0c 	mul.w	ip, r8, ip
 802797c:	fb02 cc0e 	mla	ip, r2, lr, ip
 8027980:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8027984:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8027986:	fb00 cc0e 	mla	ip, r0, lr, ip
 802798a:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802798e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8027990:	fb09 cc0e 	mla	ip, r9, lr, ip
 8027994:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8027998:	fb08 f80e 	mul.w	r8, r8, lr
 802799c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80279a0:	fb02 8303 	mla	r3, r2, r3, r8
 80279a4:	9a08      	ldr	r2, [sp, #32]
 80279a6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80279aa:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 80279ae:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80279b0:	fb00 330a 	mla	r3, r0, sl, r3
 80279b4:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 80279b8:	fb09 3900 	mla	r9, r9, r0, r3
 80279bc:	783b      	ldrb	r3, [r7, #0]
 80279be:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80279c2:	fb03 f201 	mul.w	r2, r3, r1
 80279c6:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 80279ca:	1c53      	adds	r3, r2, #1
 80279cc:	ea4c 0c09 	orr.w	ip, ip, r9
 80279d0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80279d4:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80279d8:	703b      	strb	r3, [r7, #0]
 80279da:	787b      	ldrb	r3, [r7, #1]
 80279dc:	434b      	muls	r3, r1
 80279de:	1c5a      	adds	r2, r3, #1
 80279e0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80279e4:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80279e8:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80279ec:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80279f0:	707b      	strb	r3, [r7, #1]
 80279f2:	78bb      	ldrb	r3, [r7, #2]
 80279f4:	4359      	muls	r1, r3
 80279f6:	1c4b      	adds	r3, r1, #1
 80279f8:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80279fc:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8027a00:	f887 c002 	strb.w	ip, [r7, #2]
 8027a04:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8027a06:	3703      	adds	r7, #3
 8027a08:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8027a0a:	441a      	add	r2, r3
 8027a0c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027a0e:	441d      	add	r5, r3
 8027a10:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8027a12:	9225      	str	r2, [sp, #148]	@ 0x94
 8027a14:	3b01      	subs	r3, #1
 8027a16:	9317      	str	r3, [sp, #92]	@ 0x5c
 8027a18:	e6b0      	b.n	802777c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8027a1a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8027a1c:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8027a1e:	441c      	add	r4, r3
 8027a20:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027a22:	441d      	add	r5, r3
 8027a24:	9b07      	ldr	r3, [sp, #28]
 8027a26:	9425      	str	r4, [sp, #148]	@ 0x94
 8027a28:	3b01      	subs	r3, #1
 8027a2a:	9307      	str	r3, [sp, #28]
 8027a2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027a2e:	3303      	adds	r3, #3
 8027a30:	930a      	str	r3, [sp, #40]	@ 0x28
 8027a32:	e683      	b.n	802773c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8027a34:	d026      	beq.n	8027a84 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8027a36:	9b07      	ldr	r3, [sp, #28]
 8027a38:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8027a3a:	3b01      	subs	r3, #1
 8027a3c:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8027a3e:	fb00 4003 	mla	r0, r0, r3, r4
 8027a42:	1400      	asrs	r0, r0, #16
 8027a44:	f53f ae97 	bmi.w	8027776 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8027a48:	3901      	subs	r1, #1
 8027a4a:	4288      	cmp	r0, r1
 8027a4c:	f6bf ae93 	bge.w	8027776 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8027a50:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8027a52:	fb01 5303 	mla	r3, r1, r3, r5
 8027a56:	141b      	asrs	r3, r3, #16
 8027a58:	f53f ae8d 	bmi.w	8027776 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8027a5c:	3a01      	subs	r2, #1
 8027a5e:	4293      	cmp	r3, r2
 8027a60:	f6bf ae89 	bge.w	8027776 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8027a64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027a66:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8027a6a:	f103 0e03 	add.w	lr, r3, #3
 8027a6e:	f1bb 0f00 	cmp.w	fp, #0
 8027a72:	dc6d      	bgt.n	8027b50 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 8027a74:	9b07      	ldr	r3, [sp, #28]
 8027a76:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027a7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027a7c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8027a80:	4423      	add	r3, r4
 8027a82:	930a      	str	r3, [sp, #40]	@ 0x28
 8027a84:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8027a86:	2b00      	cmp	r3, #0
 8027a88:	f340 81a0 	ble.w	8027dcc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8027a8c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027a90:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027a92:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027a96:	eeb0 6a62 	vmov.f32	s12, s5
 8027a9a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8027a9e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027aa2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8027aa6:	ed8d 6a25 	vstr	s12, [sp, #148]	@ 0x94
 8027aaa:	eeb0 6a43 	vmov.f32	s12, s6
 8027aae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8027ab2:	ee16 5a10 	vmov	r5, s12
 8027ab6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027aba:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027abe:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027ac2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027ac6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027aca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027ace:	ee12 2a90 	vmov	r2, s5
 8027ad2:	eef0 2a47 	vmov.f32	s5, s14
 8027ad6:	fb92 f3f3 	sdiv	r3, r2, r3
 8027ada:	ee13 2a10 	vmov	r2, s6
 8027ade:	9327      	str	r3, [sp, #156]	@ 0x9c
 8027ae0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027ae2:	eeb0 3a67 	vmov.f32	s6, s15
 8027ae6:	fb92 f3f3 	sdiv	r3, r2, r3
 8027aea:	9328      	str	r3, [sp, #160]	@ 0xa0
 8027aec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8027aee:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8027af0:	3b01      	subs	r3, #1
 8027af2:	9316      	str	r3, [sp, #88]	@ 0x58
 8027af4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027af6:	bf08      	it	eq
 8027af8:	4613      	moveq	r3, r2
 8027afa:	9307      	str	r3, [sp, #28]
 8027afc:	e610      	b.n	8027720 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8027afe:	2800      	cmp	r0, #0
 8027b00:	f43f ae82 	beq.w	8027808 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8027b04:	f818 1001 	ldrb.w	r1, [r8, r1]
 8027b08:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8027b0c:	9108      	str	r1, [sp, #32]
 8027b0e:	0e09      	lsrs	r1, r1, #24
 8027b10:	9110      	str	r1, [sp, #64]	@ 0x40
 8027b12:	e679      	b.n	8027808 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8027b14:	f113 0801 	adds.w	r8, r3, #1
 8027b18:	f53f af74 	bmi.w	8027a04 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8027b1c:	4541      	cmp	r1, r8
 8027b1e:	f6ff af71 	blt.w	8027a04 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8027b22:	f11c 0801 	adds.w	r8, ip, #1
 8027b26:	f53f af6d 	bmi.w	8027a04 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8027b2a:	45c6      	cmp	lr, r8
 8027b2c:	f6ff af6a 	blt.w	8027a04 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8027b30:	b209      	sxth	r1, r1
 8027b32:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8027b36:	fa0f f38e 	sxth.w	r3, lr
 8027b3a:	9100      	str	r1, [sp, #0]
 8027b3c:	4639      	mov	r1, r7
 8027b3e:	9301      	str	r3, [sp, #4]
 8027b40:	4633      	mov	r3, r6
 8027b42:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8027b46:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8027b48:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8027b4a:	f7ff fca3 	bl	8027494 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8027b4e:	e759      	b.n	8027a04 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8027b50:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8027b52:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8027b56:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8027b58:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8027b5c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8027b5e:	1427      	asrs	r7, r4, #16
 8027b60:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8027b62:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027b66:	142b      	asrs	r3, r5, #16
 8027b68:	fb01 7303 	mla	r3, r1, r3, r7
 8027b6c:	18e7      	adds	r7, r4, r3
 8027b6e:	5ce3      	ldrb	r3, [r4, r3]
 8027b70:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8027b74:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8027b78:	2a00      	cmp	r2, #0
 8027b7a:	f000 811d 	beq.w	8027db8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 8027b7e:	f897 8001 	ldrb.w	r8, [r7, #1]
 8027b82:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8027b86:	940d      	str	r4, [sp, #52]	@ 0x34
 8027b88:	0e24      	lsrs	r4, r4, #24
 8027b8a:	9414      	str	r4, [sp, #80]	@ 0x50
 8027b8c:	b170      	cbz	r0, 8027bac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8027b8e:	eb07 0801 	add.w	r8, r7, r1
 8027b92:	5c79      	ldrb	r1, [r7, r1]
 8027b94:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8027b98:	9109      	str	r1, [sp, #36]	@ 0x24
 8027b9a:	0e09      	lsrs	r1, r1, #24
 8027b9c:	9111      	str	r1, [sp, #68]	@ 0x44
 8027b9e:	f898 1001 	ldrb.w	r1, [r8, #1]
 8027ba2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8027ba6:	910e      	str	r1, [sp, #56]	@ 0x38
 8027ba8:	0e09      	lsrs	r1, r1, #24
 8027baa:	9115      	str	r1, [sp, #84]	@ 0x54
 8027bac:	b292      	uxth	r2, r2
 8027bae:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8027bb0:	b280      	uxth	r0, r0
 8027bb2:	fb02 f900 	mul.w	r9, r2, r0
 8027bb6:	0112      	lsls	r2, r2, #4
 8027bb8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8027bbc:	eba2 0809 	sub.w	r8, r2, r9
 8027bc0:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 8027bc4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8027bc6:	b280      	uxth	r0, r0
 8027bc8:	fa1f f888 	uxth.w	r8, r8
 8027bcc:	1a09      	subs	r1, r1, r0
 8027bce:	fb08 f202 	mul.w	r2, r8, r2
 8027bd2:	b289      	uxth	r1, r1
 8027bd4:	fb01 220c 	mla	r2, r1, ip, r2
 8027bd8:	fb00 2204 	mla	r2, r0, r4, r2
 8027bdc:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8027bde:	fb09 2204 	mla	r2, r9, r4, r2
 8027be2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8027be6:	2a00      	cmp	r2, #0
 8027be8:	f000 80db 	beq.w	8027da2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8027bec:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8027bf0:	d019      	beq.n	8027c26 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 8027bf2:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8027bf6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8027bfa:	fb0c fa0a 	mul.w	sl, ip, sl
 8027bfe:	fb0c fc03 	mul.w	ip, ip, r3
 8027c02:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8027c06:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8027c0a:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8027c0e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8027c12:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8027c16:	4453      	add	r3, sl
 8027c18:	0a3f      	lsrs	r7, r7, #8
 8027c1a:	0a1b      	lsrs	r3, r3, #8
 8027c1c:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8027c20:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8027c24:	433b      	orrs	r3, r7
 8027c26:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8027c28:	2cff      	cmp	r4, #255	@ 0xff
 8027c2a:	d020      	beq.n	8027c6e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 8027c2c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8027c2e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8027c32:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8027c34:	4367      	muls	r7, r4
 8027c36:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8027c38:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027c3c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8027c40:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8027c42:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8027c46:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027c4a:	fb04 fa0a 	mul.w	sl, r4, sl
 8027c4e:	44bc      	add	ip, r7
 8027c50:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8027c54:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027c58:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027c5c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027c60:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027c64:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027c68:	ea4c 040a 	orr.w	r4, ip, sl
 8027c6c:	940d      	str	r4, [sp, #52]	@ 0x34
 8027c6e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8027c70:	2cff      	cmp	r4, #255	@ 0xff
 8027c72:	d020      	beq.n	8027cb6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 8027c74:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8027c76:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8027c7a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8027c7c:	4367      	muls	r7, r4
 8027c7e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8027c80:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027c84:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8027c88:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8027c8a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8027c8e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027c92:	fb04 fa0a 	mul.w	sl, r4, sl
 8027c96:	44bc      	add	ip, r7
 8027c98:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8027c9c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027ca0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027ca4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027ca8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027cac:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027cb0:	ea4c 040a 	orr.w	r4, ip, sl
 8027cb4:	9409      	str	r4, [sp, #36]	@ 0x24
 8027cb6:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8027cb8:	2cff      	cmp	r4, #255	@ 0xff
 8027cba:	d020      	beq.n	8027cfe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 8027cbc:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8027cbe:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8027cc2:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8027cc4:	4367      	muls	r7, r4
 8027cc6:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8027cc8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027ccc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8027cd0:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8027cd2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8027cd6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027cda:	fb04 fa0a 	mul.w	sl, r4, sl
 8027cde:	44bc      	add	ip, r7
 8027ce0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8027ce4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027ce8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027cec:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027cf0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027cf4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027cf8:	ea4c 040a 	orr.w	r4, ip, sl
 8027cfc:	940e      	str	r4, [sp, #56]	@ 0x38
 8027cfe:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8027d00:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8027d04:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8027d08:	43d2      	mvns	r2, r2
 8027d0a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8027d0e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8027d10:	b2d2      	uxtb	r2, r2
 8027d12:	fb08 f707 	mul.w	r7, r8, r7
 8027d16:	fb01 770c 	mla	r7, r1, ip, r7
 8027d1a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8027d1e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8027d20:	fb00 770c 	mla	r7, r0, ip, r7
 8027d24:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8027d28:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8027d2a:	fb09 770c 	mla	r7, r9, ip, r7
 8027d2e:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8027d32:	fb08 f80c 	mul.w	r8, r8, ip
 8027d36:	0a3f      	lsrs	r7, r7, #8
 8027d38:	fb01 8303 	mla	r3, r1, r3, r8
 8027d3c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8027d3e:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8027d42:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8027d46:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8027d48:	fb00 330a 	mla	r3, r0, sl, r3
 8027d4c:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 8027d50:	fb09 3c0c 	mla	ip, r9, ip, r3
 8027d54:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8027d58:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027d5c:	fb03 f102 	mul.w	r1, r3, r2
 8027d60:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8027d64:	1c4b      	adds	r3, r1, #1
 8027d66:	ea47 070c 	orr.w	r7, r7, ip
 8027d6a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8027d6e:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8027d72:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8027d76:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 8027d7a:	4353      	muls	r3, r2
 8027d7c:	1c59      	adds	r1, r3, #1
 8027d7e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8027d82:	0a3b      	lsrs	r3, r7, #8
 8027d84:	0c3f      	lsrs	r7, r7, #16
 8027d86:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8027d8a:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8027d8e:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8027d92:	435a      	muls	r2, r3
 8027d94:	1c53      	adds	r3, r2, #1
 8027d96:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8027d9a:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8027d9e:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8027da2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8027da4:	f10e 0e03 	add.w	lr, lr, #3
 8027da8:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8027daa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8027dae:	441a      	add	r2, r3
 8027db0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027db2:	9225      	str	r2, [sp, #148]	@ 0x94
 8027db4:	441d      	add	r5, r3
 8027db6:	e65a      	b.n	8027a6e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8027db8:	2800      	cmp	r0, #0
 8027dba:	f43f aef7 	beq.w	8027bac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8027dbe:	5c79      	ldrb	r1, [r7, r1]
 8027dc0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8027dc4:	9109      	str	r1, [sp, #36]	@ 0x24
 8027dc6:	0e09      	lsrs	r1, r1, #24
 8027dc8:	9111      	str	r1, [sp, #68]	@ 0x44
 8027dca:	e6ef      	b.n	8027bac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8027dcc:	b01b      	add	sp, #108	@ 0x6c
 8027dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027dd2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8027dd2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027dd6:	b08d      	sub	sp, #52	@ 0x34
 8027dd8:	468b      	mov	fp, r1
 8027dda:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	@ 0x5c
 8027dde:	f89d 106c 	ldrb.w	r1, [sp, #108]	@ 0x6c
 8027de2:	fb0c 5703 	mla	r7, ip, r3, r5
 8027de6:	f1bc 0f00 	cmp.w	ip, #0
 8027dea:	910b      	str	r1, [sp, #44]	@ 0x2c
 8027dec:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8027df0:	f9bd e058 	ldrsh.w	lr, [sp, #88]	@ 0x58
 8027df4:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
 8027df8:	f89d a068 	ldrb.w	sl, [sp, #104]	@ 0x68
 8027dfc:	eb02 0607 	add.w	r6, r2, r7
 8027e00:	f89b 4000 	ldrb.w	r4, [fp]
 8027e04:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8027e08:	f89b 1002 	ldrb.w	r1, [fp, #2]
 8027e0c:	f2c0 80c1 	blt.w	8027f92 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8027e10:	45e6      	cmp	lr, ip
 8027e12:	f340 80be 	ble.w	8027f92 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8027e16:	2d00      	cmp	r5, #0
 8027e18:	f2c0 80b7 	blt.w	8027f8a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8027e1c:	42ab      	cmp	r3, r5
 8027e1e:	f340 80b4 	ble.w	8027f8a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8027e22:	5dd2      	ldrb	r2, [r2, r7]
 8027e24:	9205      	str	r2, [sp, #20]
 8027e26:	7872      	ldrb	r2, [r6, #1]
 8027e28:	9206      	str	r2, [sp, #24]
 8027e2a:	78b2      	ldrb	r2, [r6, #2]
 8027e2c:	9207      	str	r2, [sp, #28]
 8027e2e:	1c6a      	adds	r2, r5, #1
 8027e30:	f100 80b6 	bmi.w	8027fa0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8027e34:	4293      	cmp	r3, r2
 8027e36:	f340 80b3 	ble.w	8027fa0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8027e3a:	f1b8 0f00 	cmp.w	r8, #0
 8027e3e:	f000 80af 	beq.w	8027fa0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8027e42:	78f2      	ldrb	r2, [r6, #3]
 8027e44:	9201      	str	r2, [sp, #4]
 8027e46:	7932      	ldrb	r2, [r6, #4]
 8027e48:	9202      	str	r2, [sp, #8]
 8027e4a:	7972      	ldrb	r2, [r6, #5]
 8027e4c:	9203      	str	r2, [sp, #12]
 8027e4e:	f11c 0c01 	adds.w	ip, ip, #1
 8027e52:	f100 80ad 	bmi.w	8027fb0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8027e56:	45e6      	cmp	lr, ip
 8027e58:	f340 80aa 	ble.w	8027fb0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8027e5c:	f1ba 0f00 	cmp.w	sl, #0
 8027e60:	f000 80a6 	beq.w	8027fb0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8027e64:	2d00      	cmp	r5, #0
 8027e66:	f2c0 809f 	blt.w	8027fa8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8027e6a:	42ab      	cmp	r3, r5
 8027e6c:	f340 809c 	ble.w	8027fa8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8027e70:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8027e74:	f816 9002 	ldrb.w	r9, [r6, r2]
 8027e78:	2203      	movs	r2, #3
 8027e7a:	fb03 6c02 	mla	ip, r3, r2, r6
 8027e7e:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8027e82:	f89c e002 	ldrb.w	lr, [ip, #2]
 8027e86:	9704      	str	r7, [sp, #16]
 8027e88:	3501      	adds	r5, #1
 8027e8a:	f100 8098 	bmi.w	8027fbe <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8027e8e:	42ab      	cmp	r3, r5
 8027e90:	f340 8095 	ble.w	8027fbe <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8027e94:	f1b8 0f00 	cmp.w	r8, #0
 8027e98:	f000 8091 	beq.w	8027fbe <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8027e9c:	f04f 0c03 	mov.w	ip, #3
 8027ea0:	fb13 c20c 	smlabb	r2, r3, ip, ip
 8027ea4:	5cb5      	ldrb	r5, [r6, r2]
 8027ea6:	fb03 620c 	mla	r2, r3, ip, r6
 8027eaa:	fb03 630c 	mla	r3, r3, ip, r6
 8027eae:	7912      	ldrb	r2, [r2, #4]
 8027eb0:	795e      	ldrb	r6, [r3, #5]
 8027eb2:	fa1f f388 	uxth.w	r3, r8
 8027eb6:	fa1f fc8a 	uxth.w	ip, sl
 8027eba:	fb03 f70c 	mul.w	r7, r3, ip
 8027ebe:	011b      	lsls	r3, r3, #4
 8027ec0:	9708      	str	r7, [sp, #32]
 8027ec2:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8027ec6:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
 8027eca:	1bdb      	subs	r3, r3, r7
 8027ecc:	f8bd 702c 	ldrh.w	r7, [sp, #44]	@ 0x2c
 8027ed0:	fa1f fc8c 	uxth.w	ip, ip
 8027ed4:	b29b      	uxth	r3, r3
 8027ed6:	9709      	str	r7, [sp, #36]	@ 0x24
 8027ed8:	ebaa 0a0c 	sub.w	sl, sl, ip
 8027edc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8027ede:	930a      	str	r3, [sp, #40]	@ 0x28
 8027ee0:	fa1f fa8a 	uxth.w	sl, sl
 8027ee4:	ea6f 0807 	mvn.w	r8, r7
 8027ee8:	9f01      	ldr	r7, [sp, #4]
 8027eea:	435f      	muls	r7, r3
 8027eec:	9b05      	ldr	r3, [sp, #20]
 8027eee:	fa5f f888 	uxtb.w	r8, r8
 8027ef2:	fb0a 7703 	mla	r7, sl, r3, r7
 8027ef6:	9b08      	ldr	r3, [sp, #32]
 8027ef8:	fb14 f408 	smulbb	r4, r4, r8
 8027efc:	fb0c 7709 	mla	r7, ip, r9, r7
 8027f00:	fb10 f008 	smulbb	r0, r0, r8
 8027f04:	fb11 f108 	smulbb	r1, r1, r8
 8027f08:	fb03 7705 	mla	r7, r3, r5, r7
 8027f0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027f0e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8027f12:	fb07 4703 	mla	r7, r7, r3, r4
 8027f16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027f18:	b2bf      	uxth	r7, r7
 8027f1a:	1c7c      	adds	r4, r7, #1
 8027f1c:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 8027f20:	1224      	asrs	r4, r4, #8
 8027f22:	f88b 4000 	strb.w	r4, [fp]
 8027f26:	9c02      	ldr	r4, [sp, #8]
 8027f28:	435c      	muls	r4, r3
 8027f2a:	9b06      	ldr	r3, [sp, #24]
 8027f2c:	fb0a 4403 	mla	r4, sl, r3, r4
 8027f30:	9b04      	ldr	r3, [sp, #16]
 8027f32:	fb0c 4403 	mla	r4, ip, r3, r4
 8027f36:	9b08      	ldr	r3, [sp, #32]
 8027f38:	fb03 4402 	mla	r4, r3, r2, r4
 8027f3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027f3e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8027f40:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8027f44:	fb04 0403 	mla	r4, r4, r3, r0
 8027f48:	9b03      	ldr	r3, [sp, #12]
 8027f4a:	435a      	muls	r2, r3
 8027f4c:	b2a4      	uxth	r4, r4
 8027f4e:	4613      	mov	r3, r2
 8027f50:	9a07      	ldr	r2, [sp, #28]
 8027f52:	1c60      	adds	r0, r4, #1
 8027f54:	fb0a 3a02 	mla	sl, sl, r2, r3
 8027f58:	9b08      	ldr	r3, [sp, #32]
 8027f5a:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8027f5e:	fb0c ac0e 	mla	ip, ip, lr, sl
 8027f62:	1224      	asrs	r4, r4, #8
 8027f64:	fb03 c606 	mla	r6, r3, r6, ip
 8027f68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027f6a:	f88b 4001 	strb.w	r4, [fp, #1]
 8027f6e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8027f72:	fb06 1103 	mla	r1, r6, r3, r1
 8027f76:	b289      	uxth	r1, r1
 8027f78:	1c4e      	adds	r6, r1, #1
 8027f7a:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 8027f7e:	1209      	asrs	r1, r1, #8
 8027f80:	f88b 1002 	strb.w	r1, [fp, #2]
 8027f84:	b00d      	add	sp, #52	@ 0x34
 8027f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027f8a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8027f8e:	9405      	str	r4, [sp, #20]
 8027f90:	e74d      	b.n	8027e2e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 8027f92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8027f96:	9401      	str	r4, [sp, #4]
 8027f98:	9405      	str	r4, [sp, #20]
 8027f9a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8027f9e:	e756      	b.n	8027e4e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8027fa0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8027fa4:	9401      	str	r4, [sp, #4]
 8027fa6:	e752      	b.n	8027e4e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8027fa8:	468e      	mov	lr, r1
 8027faa:	9004      	str	r0, [sp, #16]
 8027fac:	46a1      	mov	r9, r4
 8027fae:	e76b      	b.n	8027e88 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 8027fb0:	460e      	mov	r6, r1
 8027fb2:	4602      	mov	r2, r0
 8027fb4:	4625      	mov	r5, r4
 8027fb6:	468e      	mov	lr, r1
 8027fb8:	9004      	str	r0, [sp, #16]
 8027fba:	46a1      	mov	r9, r4
 8027fbc:	e779      	b.n	8027eb2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 8027fbe:	460e      	mov	r6, r1
 8027fc0:	4602      	mov	r2, r0
 8027fc2:	4625      	mov	r5, r4
 8027fc4:	e775      	b.n	8027eb2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

08027fc6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027fc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027fca:	b09f      	sub	sp, #124	@ 0x7c
 8027fcc:	920e      	str	r2, [sp, #56]	@ 0x38
 8027fce:	9307      	str	r3, [sp, #28]
 8027fd0:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8027fd2:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 8027fd6:	901d      	str	r0, [sp, #116]	@ 0x74
 8027fd8:	930c      	str	r3, [sp, #48]	@ 0x30
 8027fda:	6850      	ldr	r0, [r2, #4]
 8027fdc:	910b      	str	r1, [sp, #44]	@ 0x2c
 8027fde:	6812      	ldr	r2, [r2, #0]
 8027fe0:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 8027fe4:	e9dd a829 	ldrd	sl, r8, [sp, #164]	@ 0xa4
 8027fe8:	fb00 1303 	mla	r3, r0, r3, r1
 8027fec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8027ff0:	18d3      	adds	r3, r2, r3
 8027ff2:	9308      	str	r3, [sp, #32]
 8027ff4:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8027ff6:	681b      	ldr	r3, [r3, #0]
 8027ff8:	930a      	str	r3, [sp, #40]	@ 0x28
 8027ffa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8027ffc:	43db      	mvns	r3, r3
 8027ffe:	b2db      	uxtb	r3, r3
 8028000:	9309      	str	r3, [sp, #36]	@ 0x24
 8028002:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028004:	2b00      	cmp	r3, #0
 8028006:	dc03      	bgt.n	8028010 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8028008:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802800a:	2b00      	cmp	r3, #0
 802800c:	f340 81f5 	ble.w	80283fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8028010:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8028012:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028016:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802801a:	1e48      	subs	r0, r1, #1
 802801c:	1e54      	subs	r4, r2, #1
 802801e:	9b07      	ldr	r3, [sp, #28]
 8028020:	2b00      	cmp	r3, #0
 8028022:	f340 80d5 	ble.w	80281d0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8028026:	ea5f 452a 	movs.w	r5, sl, asr #16
 802802a:	ea4f 4328 	mov.w	r3, r8, asr #16
 802802e:	d406      	bmi.n	802803e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8028030:	4285      	cmp	r5, r0
 8028032:	da04      	bge.n	802803e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8028034:	2b00      	cmp	r3, #0
 8028036:	db02      	blt.n	802803e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8028038:	42a3      	cmp	r3, r4
 802803a:	f2c0 80ca 	blt.w	80281d2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 802803e:	3501      	adds	r5, #1
 8028040:	f100 80bb 	bmi.w	80281ba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8028044:	42a9      	cmp	r1, r5
 8028046:	f2c0 80b8 	blt.w	80281ba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 802804a:	3301      	adds	r3, #1
 802804c:	f100 80b5 	bmi.w	80281ba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8028050:	429a      	cmp	r2, r3
 8028052:	f2c0 80b2 	blt.w	80281ba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8028056:	9b07      	ldr	r3, [sp, #28]
 8028058:	9d08      	ldr	r5, [sp, #32]
 802805a:	930d      	str	r3, [sp, #52]	@ 0x34
 802805c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802805e:	2b00      	cmp	r3, #0
 8028060:	f340 80d6 	ble.w	8028210 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 8028064:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 8028066:	ea4f 4428 	mov.w	r4, r8, asr #16
 802806a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 802806c:	f3ca 3203 	ubfx	r2, sl, #12, #4
 8028070:	68c6      	ldr	r6, [r0, #12]
 8028072:	ea5f 402a 	movs.w	r0, sl, asr #16
 8028076:	f3c8 3103 	ubfx	r1, r8, #12, #4
 802807a:	689b      	ldr	r3, [r3, #8]
 802807c:	f100 810f 	bmi.w	802829e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8028080:	1e5f      	subs	r7, r3, #1
 8028082:	42b8      	cmp	r0, r7
 8028084:	f280 810b 	bge.w	802829e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8028088:	2c00      	cmp	r4, #0
 802808a:	f2c0 8108 	blt.w	802829e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 802808e:	1e77      	subs	r7, r6, #1
 8028090:	42bc      	cmp	r4, r7
 8028092:	f280 8104 	bge.w	802829e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8028096:	b21b      	sxth	r3, r3
 8028098:	fb04 0003 	mla	r0, r4, r3, r0
 802809c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802809e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80280a2:	1826      	adds	r6, r4, r0
 80280a4:	5c24      	ldrb	r4, [r4, r0]
 80280a6:	78b7      	ldrb	r7, [r6, #2]
 80280a8:	7870      	ldrb	r0, [r6, #1]
 80280aa:	970f      	str	r7, [sp, #60]	@ 0x3c
 80280ac:	7977      	ldrb	r7, [r6, #5]
 80280ae:	f896 e003 	ldrb.w	lr, [r6, #3]
 80280b2:	f896 c004 	ldrb.w	ip, [r6, #4]
 80280b6:	9710      	str	r7, [sp, #64]	@ 0x40
 80280b8:	b1c9      	cbz	r1, 80280ee <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80280ba:	f04f 0b03 	mov.w	fp, #3
 80280be:	f06f 0904 	mvn.w	r9, #4
 80280c2:	3605      	adds	r6, #5
 80280c4:	fb13 930b 	smlabb	r3, r3, fp, r9
 80280c8:	eb06 0b03 	add.w	fp, r6, r3
 80280cc:	5cf3      	ldrb	r3, [r6, r3]
 80280ce:	9311      	str	r3, [sp, #68]	@ 0x44
 80280d0:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80280d4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80280d6:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80280da:	9315      	str	r3, [sp, #84]	@ 0x54
 80280dc:	f89b 3003 	ldrb.w	r3, [fp, #3]
 80280e0:	9312      	str	r3, [sp, #72]	@ 0x48
 80280e2:	f89b 3004 	ldrb.w	r3, [fp, #4]
 80280e6:	9314      	str	r3, [sp, #80]	@ 0x50
 80280e8:	f89b 3005 	ldrb.w	r3, [fp, #5]
 80280ec:	9316      	str	r3, [sp, #88]	@ 0x58
 80280ee:	b292      	uxth	r2, r2
 80280f0:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 80280f2:	b289      	uxth	r1, r1
 80280f4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 80280f8:	fb02 f601 	mul.w	r6, r2, r1
 80280fc:	0112      	lsls	r2, r2, #4
 80280fe:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 8028102:	f5c2 7980 	rsb	r9, r2, #256	@ 0x100
 8028106:	1b92      	subs	r2, r2, r6
 8028108:	b289      	uxth	r1, r1
 802810a:	b292      	uxth	r2, r2
 802810c:	eba9 0901 	sub.w	r9, r9, r1
 8028110:	fb02 fe0e 	mul.w	lr, r2, lr
 8028114:	fa1f f989 	uxth.w	r9, r9
 8028118:	fb02 fc0c 	mul.w	ip, r2, ip
 802811c:	fb09 e404 	mla	r4, r9, r4, lr
 8028120:	f895 e000 	ldrb.w	lr, [r5]
 8028124:	fb09 c000 	mla	r0, r9, r0, ip
 8028128:	fb01 4407 	mla	r4, r1, r7, r4
 802812c:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 802812e:	fb06 4407 	mla	r4, r6, r7, r4
 8028132:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8028134:	fb1e fe07 	smulbb	lr, lr, r7
 8028138:	f3c4 2407 	ubfx	r4, r4, #8, #8
 802813c:	fb04 e403 	mla	r4, r4, r3, lr
 8028140:	b2a4      	uxth	r4, r4
 8028142:	f104 0e01 	add.w	lr, r4, #1
 8028146:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 802814a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802814c:	fb01 0004 	mla	r0, r1, r4, r0
 8028150:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8028152:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8028156:	fb06 0004 	mla	r0, r6, r4, r0
 802815a:	786c      	ldrb	r4, [r5, #1]
 802815c:	f885 e000 	strb.w	lr, [r5]
 8028160:	fb14 f407 	smulbb	r4, r4, r7
 8028164:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8028168:	fb00 4003 	mla	r0, r0, r3, r4
 802816c:	b280      	uxth	r0, r0
 802816e:	1c44      	adds	r4, r0, #1
 8028170:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8028174:	1200      	asrs	r0, r0, #8
 8028176:	7068      	strb	r0, [r5, #1]
 8028178:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802817a:	4342      	muls	r2, r0
 802817c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802817e:	fb09 2200 	mla	r2, r9, r0, r2
 8028182:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8028184:	fb01 2100 	mla	r1, r1, r0, r2
 8028188:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 802818a:	fb06 1602 	mla	r6, r6, r2, r1
 802818e:	78a9      	ldrb	r1, [r5, #2]
 8028190:	fb11 f107 	smulbb	r1, r1, r7
 8028194:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8028198:	fb06 1303 	mla	r3, r6, r3, r1
 802819c:	b29b      	uxth	r3, r3
 802819e:	1c5e      	adds	r6, r3, #1
 80281a0:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 80281a4:	121b      	asrs	r3, r3, #8
 80281a6:	70ab      	strb	r3, [r5, #2]
 80281a8:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80281aa:	3503      	adds	r5, #3
 80281ac:	449a      	add	sl, r3
 80281ae:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80281b0:	4498      	add	r8, r3
 80281b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80281b4:	3b01      	subs	r3, #1
 80281b6:	930d      	str	r3, [sp, #52]	@ 0x34
 80281b8:	e750      	b.n	802805c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80281ba:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80281bc:	449a      	add	sl, r3
 80281be:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80281c0:	4498      	add	r8, r3
 80281c2:	9b07      	ldr	r3, [sp, #28]
 80281c4:	3b01      	subs	r3, #1
 80281c6:	9307      	str	r3, [sp, #28]
 80281c8:	9b08      	ldr	r3, [sp, #32]
 80281ca:	3303      	adds	r3, #3
 80281cc:	9308      	str	r3, [sp, #32]
 80281ce:	e726      	b.n	802801e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80281d0:	d026      	beq.n	8028220 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 80281d2:	9b07      	ldr	r3, [sp, #28]
 80281d4:	982b      	ldr	r0, [sp, #172]	@ 0xac
 80281d6:	3b01      	subs	r3, #1
 80281d8:	fb00 a003 	mla	r0, r0, r3, sl
 80281dc:	1400      	asrs	r0, r0, #16
 80281de:	f53f af3a 	bmi.w	8028056 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80281e2:	3901      	subs	r1, #1
 80281e4:	4288      	cmp	r0, r1
 80281e6:	f6bf af36 	bge.w	8028056 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80281ea:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 80281ec:	fb01 8303 	mla	r3, r1, r3, r8
 80281f0:	141b      	asrs	r3, r3, #16
 80281f2:	f53f af30 	bmi.w	8028056 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80281f6:	3a01      	subs	r2, #1
 80281f8:	4293      	cmp	r3, r2
 80281fa:	f6bf af2c 	bge.w	8028056 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80281fe:	9b08      	ldr	r3, [sp, #32]
 8028200:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8028204:	1cdd      	adds	r5, r3, #3
 8028206:	f8bd e030 	ldrh.w	lr, [sp, #48]	@ 0x30
 802820a:	f1bc 0f00 	cmp.w	ip, #0
 802820e:	dc5f      	bgt.n	80282d0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 8028210:	9b07      	ldr	r3, [sp, #28]
 8028212:	9a08      	ldr	r2, [sp, #32]
 8028214:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8028218:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802821c:	441a      	add	r2, r3
 802821e:	9208      	str	r2, [sp, #32]
 8028220:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028222:	2b00      	cmp	r3, #0
 8028224:	f340 80e9 	ble.w	80283fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8028228:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802822c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802822e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028232:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8028236:	eef0 6a62 	vmov.f32	s13, s5
 802823a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802823e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8028242:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028246:	ee16 aa90 	vmov	sl, s13
 802824a:	eef0 6a43 	vmov.f32	s13, s6
 802824e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028252:	ee16 8a90 	vmov	r8, s13
 8028256:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802825a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802825e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028262:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8028266:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802826a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802826e:	ee12 2a90 	vmov	r2, s5
 8028272:	eef0 2a47 	vmov.f32	s5, s14
 8028276:	fb92 f3f3 	sdiv	r3, r2, r3
 802827a:	ee13 2a10 	vmov	r2, s6
 802827e:	932b      	str	r3, [sp, #172]	@ 0xac
 8028280:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8028282:	eeb0 3a67 	vmov.f32	s6, s15
 8028286:	fb92 f3f3 	sdiv	r3, r2, r3
 802828a:	932c      	str	r3, [sp, #176]	@ 0xb0
 802828c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802828e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8028290:	3b01      	subs	r3, #1
 8028292:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028294:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8028296:	bf08      	it	eq
 8028298:	4613      	moveq	r3, r2
 802829a:	9307      	str	r3, [sp, #28]
 802829c:	e6b1      	b.n	8028002 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802829e:	1c47      	adds	r7, r0, #1
 80282a0:	d482      	bmi.n	80281a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80282a2:	42bb      	cmp	r3, r7
 80282a4:	db80      	blt.n	80281a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80282a6:	1c67      	adds	r7, r4, #1
 80282a8:	f53f af7e 	bmi.w	80281a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80282ac:	42be      	cmp	r6, r7
 80282ae:	f6ff af7b 	blt.w	80281a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80282b2:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80282b4:	b236      	sxth	r6, r6
 80282b6:	9001      	str	r0, [sp, #4]
 80282b8:	b21b      	sxth	r3, r3
 80282ba:	9600      	str	r6, [sp, #0]
 80282bc:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80282be:	e9cd 1704 	strd	r1, r7, [sp, #16]
 80282c2:	e9cd 4202 	strd	r4, r2, [sp, #8]
 80282c6:	4629      	mov	r1, r5
 80282c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80282ca:	f7ff fd82 	bl	8027dd2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 80282ce:	e76b      	b.n	80281a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80282d0:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 80282d2:	ea4f 402a 	mov.w	r0, sl, asr #16
 80282d6:	f3c8 3203 	ubfx	r2, r8, #12, #4
 80282da:	f3ca 3303 	ubfx	r3, sl, #12, #4
 80282de:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 80282e2:	ea4f 4128 	mov.w	r1, r8, asr #16
 80282e6:	fb07 0101 	mla	r1, r7, r1, r0
 80282ea:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80282ec:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80282f0:	1844      	adds	r4, r0, r1
 80282f2:	5c40      	ldrb	r0, [r0, r1]
 80282f4:	78a6      	ldrb	r6, [r4, #2]
 80282f6:	7861      	ldrb	r1, [r4, #1]
 80282f8:	960f      	str	r6, [sp, #60]	@ 0x3c
 80282fa:	78e6      	ldrb	r6, [r4, #3]
 80282fc:	910d      	str	r1, [sp, #52]	@ 0x34
 80282fe:	9610      	str	r6, [sp, #64]	@ 0x40
 8028300:	f894 9004 	ldrb.w	r9, [r4, #4]
 8028304:	f894 b005 	ldrb.w	fp, [r4, #5]
 8028308:	b192      	cbz	r2, 8028330 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 802830a:	f06f 0604 	mvn.w	r6, #4
 802830e:	2103      	movs	r1, #3
 8028310:	3405      	adds	r4, #5
 8028312:	fb17 6701 	smlabb	r7, r7, r1, r6
 8028316:	19e6      	adds	r6, r4, r7
 8028318:	5de4      	ldrb	r4, [r4, r7]
 802831a:	9417      	str	r4, [sp, #92]	@ 0x5c
 802831c:	7874      	ldrb	r4, [r6, #1]
 802831e:	9419      	str	r4, [sp, #100]	@ 0x64
 8028320:	78b4      	ldrb	r4, [r6, #2]
 8028322:	941b      	str	r4, [sp, #108]	@ 0x6c
 8028324:	78f4      	ldrb	r4, [r6, #3]
 8028326:	9418      	str	r4, [sp, #96]	@ 0x60
 8028328:	7934      	ldrb	r4, [r6, #4]
 802832a:	941a      	str	r4, [sp, #104]	@ 0x68
 802832c:	7974      	ldrb	r4, [r6, #5]
 802832e:	941c      	str	r4, [sp, #112]	@ 0x70
 8028330:	b29b      	uxth	r3, r3
 8028332:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8028334:	b292      	uxth	r2, r2
 8028336:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8028338:	3503      	adds	r5, #3
 802833a:	f10c 3cff 	add.w	ip, ip, #4294967295
 802833e:	fb03 f402 	mul.w	r4, r3, r2
 8028342:	011b      	lsls	r3, r3, #4
 8028344:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8028348:	f5c3 7680 	rsb	r6, r3, #256	@ 0x100
 802834c:	1b1b      	subs	r3, r3, r4
 802834e:	b292      	uxth	r2, r2
 8028350:	b29b      	uxth	r3, r3
 8028352:	1ab6      	subs	r6, r6, r2
 8028354:	435f      	muls	r7, r3
 8028356:	b2b6      	uxth	r6, r6
 8028358:	fb03 f909 	mul.w	r9, r3, r9
 802835c:	fb03 fb0b 	mul.w	fp, r3, fp
 8028360:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028362:	fb06 7000 	mla	r0, r6, r0, r7
 8028366:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8028368:	fb06 bb03 	mla	fp, r6, r3, fp
 802836c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802836e:	fb02 0007 	mla	r0, r2, r7, r0
 8028372:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 8028374:	fb02 bb03 	mla	fp, r2, r3, fp
 8028378:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802837a:	fb04 0007 	mla	r0, r4, r7, r0
 802837e:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 8028382:	fb17 f701 	smulbb	r7, r7, r1
 8028386:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802838a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 802838c:	fb00 700e 	mla	r0, r0, lr, r7
 8028390:	fb06 9101 	mla	r1, r6, r1, r9
 8028394:	b280      	uxth	r0, r0
 8028396:	1c47      	adds	r7, r0, #1
 8028398:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 802839c:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 802839e:	1200      	asrs	r0, r0, #8
 80283a0:	f805 0c06 	strb.w	r0, [r5, #-6]
 80283a4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80283a6:	fb02 1100 	mla	r1, r2, r0, r1
 80283aa:	981a      	ldr	r0, [sp, #104]	@ 0x68
 80283ac:	fb04 1100 	mla	r1, r4, r0, r1
 80283b0:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 80283b4:	fb04 b403 	mla	r4, r4, r3, fp
 80283b8:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 80283bc:	fb10 f007 	smulbb	r0, r0, r7
 80283c0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80283c4:	fb13 f307 	smulbb	r3, r3, r7
 80283c8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80283cc:	fb01 010e 	mla	r1, r1, lr, r0
 80283d0:	fb04 340e 	mla	r4, r4, lr, r3
 80283d4:	b289      	uxth	r1, r1
 80283d6:	b2a4      	uxth	r4, r4
 80283d8:	1c48      	adds	r0, r1, #1
 80283da:	1c63      	adds	r3, r4, #1
 80283dc:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80283e0:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80283e4:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80283e6:	1209      	asrs	r1, r1, #8
 80283e8:	1224      	asrs	r4, r4, #8
 80283ea:	449a      	add	sl, r3
 80283ec:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80283ee:	f805 1c05 	strb.w	r1, [r5, #-5]
 80283f2:	f805 4c04 	strb.w	r4, [r5, #-4]
 80283f6:	4498      	add	r8, r3
 80283f8:	e707      	b.n	802820a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 80283fa:	b01f      	add	sp, #124	@ 0x7c
 80283fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028400 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8028400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028404:	b087      	sub	sp, #28
 8028406:	780d      	ldrb	r5, [r1, #0]
 8028408:	784c      	ldrb	r4, [r1, #1]
 802840a:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 802840e:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	@ 0x40
 8028412:	9004      	str	r0, [sp, #16]
 8028414:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8028418:	e9dd b611 	ldrd	fp, r6, [sp, #68]	@ 0x44
 802841c:	9005      	str	r0, [sp, #20]
 802841e:	fb06 bc03 	mla	ip, r6, r3, fp
 8028422:	2e00      	cmp	r6, #0
 8028424:	7888      	ldrb	r0, [r1, #2]
 8028426:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802842a:	eb02 090c 	add.w	r9, r2, ip
 802842e:	f2c0 8084 	blt.w	802853a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8028432:	42b7      	cmp	r7, r6
 8028434:	f340 8081 	ble.w	802853a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8028438:	f1bb 0f00 	cmp.w	fp, #0
 802843c:	db79      	blt.n	8028532 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 802843e:	455b      	cmp	r3, fp
 8028440:	dd77      	ble.n	8028532 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8028442:	f812 200c 	ldrb.w	r2, [r2, ip]
 8028446:	9201      	str	r2, [sp, #4]
 8028448:	f899 2001 	ldrb.w	r2, [r9, #1]
 802844c:	9202      	str	r2, [sp, #8]
 802844e:	f899 2002 	ldrb.w	r2, [r9, #2]
 8028452:	9203      	str	r2, [sp, #12]
 8028454:	f11b 0201 	adds.w	r2, fp, #1
 8028458:	d476      	bmi.n	8028548 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 802845a:	4293      	cmp	r3, r2
 802845c:	dd74      	ble.n	8028548 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 802845e:	9a04      	ldr	r2, [sp, #16]
 8028460:	2a00      	cmp	r2, #0
 8028462:	d071      	beq.n	8028548 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8028464:	f899 8003 	ldrb.w	r8, [r9, #3]
 8028468:	f899 c004 	ldrb.w	ip, [r9, #4]
 802846c:	f899 a005 	ldrb.w	sl, [r9, #5]
 8028470:	3601      	adds	r6, #1
 8028472:	d471      	bmi.n	8028558 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8028474:	42b7      	cmp	r7, r6
 8028476:	dd6f      	ble.n	8028558 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8028478:	9a05      	ldr	r2, [sp, #20]
 802847a:	2a00      	cmp	r2, #0
 802847c:	d06c      	beq.n	8028558 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 802847e:	f1bb 0f00 	cmp.w	fp, #0
 8028482:	db65      	blt.n	8028550 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8028484:	455b      	cmp	r3, fp
 8028486:	dd63      	ble.n	8028550 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8028488:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 802848c:	f819 e002 	ldrb.w	lr, [r9, r2]
 8028490:	2203      	movs	r2, #3
 8028492:	fb03 9602 	mla	r6, r3, r2, r9
 8028496:	7877      	ldrb	r7, [r6, #1]
 8028498:	78b6      	ldrb	r6, [r6, #2]
 802849a:	f11b 0b01 	adds.w	fp, fp, #1
 802849e:	d40c      	bmi.n	80284ba <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 80284a0:	455b      	cmp	r3, fp
 80284a2:	dd0a      	ble.n	80284ba <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 80284a4:	9a04      	ldr	r2, [sp, #16]
 80284a6:	b142      	cbz	r2, 80284ba <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 80284a8:	2203      	movs	r2, #3
 80284aa:	fb13 2002 	smlabb	r0, r3, r2, r2
 80284ae:	f819 5000 	ldrb.w	r5, [r9, r0]
 80284b2:	fb03 9002 	mla	r0, r3, r2, r9
 80284b6:	7904      	ldrb	r4, [r0, #4]
 80284b8:	7940      	ldrb	r0, [r0, #5]
 80284ba:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80284be:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80284c2:	fb03 fb02 	mul.w	fp, r3, r2
 80284c6:	011b      	lsls	r3, r3, #4
 80284c8:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 80284cc:	f5c3 7980 	rsb	r9, r3, #256	@ 0x100
 80284d0:	eba3 030b 	sub.w	r3, r3, fp
 80284d4:	b292      	uxth	r2, r2
 80284d6:	b29b      	uxth	r3, r3
 80284d8:	eba9 0902 	sub.w	r9, r9, r2
 80284dc:	9304      	str	r3, [sp, #16]
 80284de:	fa1f f989 	uxth.w	r9, r9
 80284e2:	fb03 f808 	mul.w	r8, r3, r8
 80284e6:	9b01      	ldr	r3, [sp, #4]
 80284e8:	fb09 8803 	mla	r8, r9, r3, r8
 80284ec:	9b04      	ldr	r3, [sp, #16]
 80284ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80284f2:	9b02      	ldr	r3, [sp, #8]
 80284f4:	fb02 880e 	mla	r8, r2, lr, r8
 80284f8:	fb09 cc03 	mla	ip, r9, r3, ip
 80284fc:	9b04      	ldr	r3, [sp, #16]
 80284fe:	fb0b 8805 	mla	r8, fp, r5, r8
 8028502:	fb02 c707 	mla	r7, r2, r7, ip
 8028506:	fb03 f30a 	mul.w	r3, r3, sl
 802850a:	ea4f 2828 	mov.w	r8, r8, asr #8
 802850e:	fb0b 7404 	mla	r4, fp, r4, r7
 8028512:	f881 8000 	strb.w	r8, [r1]
 8028516:	1224      	asrs	r4, r4, #8
 8028518:	704c      	strb	r4, [r1, #1]
 802851a:	9c03      	ldr	r4, [sp, #12]
 802851c:	fb09 3904 	mla	r9, r9, r4, r3
 8028520:	fb02 9206 	mla	r2, r2, r6, r9
 8028524:	fb0b 2000 	mla	r0, fp, r0, r2
 8028528:	1200      	asrs	r0, r0, #8
 802852a:	7088      	strb	r0, [r1, #2]
 802852c:	b007      	add	sp, #28
 802852e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028532:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8028536:	9501      	str	r5, [sp, #4]
 8028538:	e78c      	b.n	8028454 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 802853a:	4682      	mov	sl, r0
 802853c:	46a4      	mov	ip, r4
 802853e:	46a8      	mov	r8, r5
 8028540:	9501      	str	r5, [sp, #4]
 8028542:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8028546:	e793      	b.n	8028470 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8028548:	4682      	mov	sl, r0
 802854a:	46a4      	mov	ip, r4
 802854c:	46a8      	mov	r8, r5
 802854e:	e78f      	b.n	8028470 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8028550:	4606      	mov	r6, r0
 8028552:	4627      	mov	r7, r4
 8028554:	46ae      	mov	lr, r5
 8028556:	e7a0      	b.n	802849a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8028558:	4606      	mov	r6, r0
 802855a:	4627      	mov	r7, r4
 802855c:	46ae      	mov	lr, r5
 802855e:	e7ac      	b.n	80284ba <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

08028560 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028564:	b09b      	sub	sp, #108	@ 0x6c
 8028566:	920b      	str	r2, [sp, #44]	@ 0x2c
 8028568:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 802856a:	9019      	str	r0, [sp, #100]	@ 0x64
 802856c:	9109      	str	r1, [sp, #36]	@ 0x24
 802856e:	6850      	ldr	r0, [r2, #4]
 8028570:	9306      	str	r3, [sp, #24]
 8028572:	6812      	ldr	r2, [r2, #0]
 8028574:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 8028578:	e9dd b425 	ldrd	fp, r4, [sp, #148]	@ 0x94
 802857c:	fb00 1303 	mla	r3, r0, r3, r1
 8028580:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8028584:	18d3      	adds	r3, r2, r3
 8028586:	9307      	str	r3, [sp, #28]
 8028588:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802858a:	681b      	ldr	r3, [r3, #0]
 802858c:	9308      	str	r3, [sp, #32]
 802858e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028590:	2b00      	cmp	r3, #0
 8028592:	dc03      	bgt.n	802859c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8028594:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028596:	2b00      	cmp	r3, #0
 8028598:	f340 81ab 	ble.w	80288f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 802859c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802859e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80285a2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80285a6:	1e48      	subs	r0, r1, #1
 80285a8:	1e55      	subs	r5, r2, #1
 80285aa:	9b06      	ldr	r3, [sp, #24]
 80285ac:	2b00      	cmp	r3, #0
 80285ae:	f340 80b1 	ble.w	8028714 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80285b2:	ea5f 462b 	movs.w	r6, fp, asr #16
 80285b6:	ea4f 4324 	mov.w	r3, r4, asr #16
 80285ba:	d406      	bmi.n	80285ca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80285bc:	4286      	cmp	r6, r0
 80285be:	da04      	bge.n	80285ca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80285c0:	2b00      	cmp	r3, #0
 80285c2:	db02      	blt.n	80285ca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80285c4:	42ab      	cmp	r3, r5
 80285c6:	f2c0 80a6 	blt.w	8028716 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 80285ca:	3601      	adds	r6, #1
 80285cc:	f100 8097 	bmi.w	80286fe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80285d0:	42b1      	cmp	r1, r6
 80285d2:	f2c0 8094 	blt.w	80286fe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80285d6:	3301      	adds	r3, #1
 80285d8:	f100 8091 	bmi.w	80286fe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80285dc:	429a      	cmp	r2, r3
 80285de:	f2c0 808e 	blt.w	80286fe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80285e2:	9b06      	ldr	r3, [sp, #24]
 80285e4:	9e07      	ldr	r6, [sp, #28]
 80285e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80285e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80285ea:	2b00      	cmp	r3, #0
 80285ec:	f340 80b0 	ble.w	8028750 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80285f0:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 80285f2:	1425      	asrs	r5, r4, #16
 80285f4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80285f6:	f3cb 3203 	ubfx	r2, fp, #12, #4
 80285fa:	68c7      	ldr	r7, [r0, #12]
 80285fc:	ea5f 402b 	movs.w	r0, fp, asr #16
 8028600:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8028604:	689b      	ldr	r3, [r3, #8]
 8028606:	f100 80ea 	bmi.w	80287de <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 802860a:	f103 3cff 	add.w	ip, r3, #4294967295
 802860e:	4560      	cmp	r0, ip
 8028610:	f280 80e5 	bge.w	80287de <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8028614:	2d00      	cmp	r5, #0
 8028616:	f2c0 80e2 	blt.w	80287de <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 802861a:	f107 3cff 	add.w	ip, r7, #4294967295
 802861e:	4565      	cmp	r5, ip
 8028620:	f280 80dd 	bge.w	80287de <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8028624:	b21b      	sxth	r3, r3
 8028626:	fb05 0003 	mla	r0, r5, r3, r0
 802862a:	9d08      	ldr	r5, [sp, #32]
 802862c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8028630:	182f      	adds	r7, r5, r0
 8028632:	5c2d      	ldrb	r5, [r5, r0]
 8028634:	7878      	ldrb	r0, [r7, #1]
 8028636:	f897 e002 	ldrb.w	lr, [r7, #2]
 802863a:	900c      	str	r0, [sp, #48]	@ 0x30
 802863c:	f897 9003 	ldrb.w	r9, [r7, #3]
 8028640:	f897 8004 	ldrb.w	r8, [r7, #4]
 8028644:	f897 a005 	ldrb.w	sl, [r7, #5]
 8028648:	b1c9      	cbz	r1, 802867e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 802864a:	f04f 0c03 	mov.w	ip, #3
 802864e:	f06f 0004 	mvn.w	r0, #4
 8028652:	3705      	adds	r7, #5
 8028654:	fb13 030c 	smlabb	r3, r3, ip, r0
 8028658:	eb07 0c03 	add.w	ip, r7, r3
 802865c:	5cfb      	ldrb	r3, [r7, r3]
 802865e:	930d      	str	r3, [sp, #52]	@ 0x34
 8028660:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8028664:	930f      	str	r3, [sp, #60]	@ 0x3c
 8028666:	f89c 3002 	ldrb.w	r3, [ip, #2]
 802866a:	9311      	str	r3, [sp, #68]	@ 0x44
 802866c:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8028670:	930e      	str	r3, [sp, #56]	@ 0x38
 8028672:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8028676:	9310      	str	r3, [sp, #64]	@ 0x40
 8028678:	f89c 3005 	ldrb.w	r3, [ip, #5]
 802867c:	9312      	str	r3, [sp, #72]	@ 0x48
 802867e:	b292      	uxth	r2, r2
 8028680:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8028682:	b289      	uxth	r1, r1
 8028684:	fb02 f301 	mul.w	r3, r2, r1
 8028688:	0112      	lsls	r2, r2, #4
 802868a:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802868e:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8028692:	1ad2      	subs	r2, r2, r3
 8028694:	b289      	uxth	r1, r1
 8028696:	b292      	uxth	r2, r2
 8028698:	1a7f      	subs	r7, r7, r1
 802869a:	fb02 f909 	mul.w	r9, r2, r9
 802869e:	b2bf      	uxth	r7, r7
 80286a0:	fb02 f808 	mul.w	r8, r2, r8
 80286a4:	fb02 fa0a 	mul.w	sl, r2, sl
 80286a8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80286aa:	fb07 9905 	mla	r9, r7, r5, r9
 80286ae:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80286b0:	fb07 8800 	mla	r8, r7, r0, r8
 80286b4:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80286b6:	fb07 aa0e 	mla	sl, r7, lr, sl
 80286ba:	fb01 9905 	mla	r9, r1, r5, r9
 80286be:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80286c0:	fb01 8800 	mla	r8, r1, r0, r8
 80286c4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80286c6:	fb01 a102 	mla	r1, r1, r2, sl
 80286ca:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80286cc:	fb03 9905 	mla	r9, r3, r5, r9
 80286d0:	fb03 8800 	mla	r8, r3, r0, r8
 80286d4:	fb03 1302 	mla	r3, r3, r2, r1
 80286d8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80286dc:	ea4f 2828 	mov.w	r8, r8, asr #8
 80286e0:	121b      	asrs	r3, r3, #8
 80286e2:	f886 9000 	strb.w	r9, [r6]
 80286e6:	f886 8001 	strb.w	r8, [r6, #1]
 80286ea:	70b3      	strb	r3, [r6, #2]
 80286ec:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80286ee:	3603      	adds	r6, #3
 80286f0:	449b      	add	fp, r3
 80286f2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80286f4:	441c      	add	r4, r3
 80286f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80286f8:	3b01      	subs	r3, #1
 80286fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80286fc:	e774      	b.n	80285e8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 80286fe:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8028700:	449b      	add	fp, r3
 8028702:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8028704:	441c      	add	r4, r3
 8028706:	9b06      	ldr	r3, [sp, #24]
 8028708:	3b01      	subs	r3, #1
 802870a:	9306      	str	r3, [sp, #24]
 802870c:	9b07      	ldr	r3, [sp, #28]
 802870e:	3303      	adds	r3, #3
 8028710:	9307      	str	r3, [sp, #28]
 8028712:	e74a      	b.n	80285aa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8028714:	d024      	beq.n	8028760 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8028716:	9b06      	ldr	r3, [sp, #24]
 8028718:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 802871a:	3b01      	subs	r3, #1
 802871c:	fb00 b003 	mla	r0, r0, r3, fp
 8028720:	1400      	asrs	r0, r0, #16
 8028722:	f53f af5e 	bmi.w	80285e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8028726:	3901      	subs	r1, #1
 8028728:	4288      	cmp	r0, r1
 802872a:	f6bf af5a 	bge.w	80285e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802872e:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8028730:	fb01 4303 	mla	r3, r1, r3, r4
 8028734:	141b      	asrs	r3, r3, #16
 8028736:	f53f af54 	bmi.w	80285e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802873a:	3a01      	subs	r2, #1
 802873c:	4293      	cmp	r3, r2
 802873e:	f6bf af50 	bge.w	80285e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8028742:	9b07      	ldr	r3, [sp, #28]
 8028744:	f8dd e018 	ldr.w	lr, [sp, #24]
 8028748:	1cde      	adds	r6, r3, #3
 802874a:	f1be 0f00 	cmp.w	lr, #0
 802874e:	dc5f      	bgt.n	8028810 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8028750:	9b06      	ldr	r3, [sp, #24]
 8028752:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8028756:	9b07      	ldr	r3, [sp, #28]
 8028758:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802875c:	4423      	add	r3, r4
 802875e:	9307      	str	r3, [sp, #28]
 8028760:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028762:	2b00      	cmp	r3, #0
 8028764:	f340 80c5 	ble.w	80288f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8028768:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802876c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802876e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028772:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8028776:	eef0 6a62 	vmov.f32	s13, s5
 802877a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802877e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8028782:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028786:	ee16 ba90 	vmov	fp, s13
 802878a:	eef0 6a43 	vmov.f32	s13, s6
 802878e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028792:	ee16 4a90 	vmov	r4, s13
 8028796:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802879a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802879e:	ee77 2a62 	vsub.f32	s5, s14, s5
 80287a2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80287a6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80287aa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80287ae:	ee12 2a90 	vmov	r2, s5
 80287b2:	eef0 2a47 	vmov.f32	s5, s14
 80287b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80287ba:	ee13 2a10 	vmov	r2, s6
 80287be:	9327      	str	r3, [sp, #156]	@ 0x9c
 80287c0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80287c2:	eeb0 3a67 	vmov.f32	s6, s15
 80287c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80287ca:	9328      	str	r3, [sp, #160]	@ 0xa0
 80287cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80287ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80287d0:	3b01      	subs	r3, #1
 80287d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80287d4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80287d6:	bf08      	it	eq
 80287d8:	4613      	moveq	r3, r2
 80287da:	9306      	str	r3, [sp, #24]
 80287dc:	e6d7      	b.n	802858e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80287de:	f110 0c01 	adds.w	ip, r0, #1
 80287e2:	d483      	bmi.n	80286ec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80287e4:	4563      	cmp	r3, ip
 80287e6:	db81      	blt.n	80286ec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80287e8:	f115 0c01 	adds.w	ip, r5, #1
 80287ec:	f53f af7e 	bmi.w	80286ec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80287f0:	4567      	cmp	r7, ip
 80287f2:	f6ff af7b 	blt.w	80286ec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80287f6:	b23f      	sxth	r7, r7
 80287f8:	b21b      	sxth	r3, r3
 80287fa:	9700      	str	r7, [sp, #0]
 80287fc:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8028800:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8028804:	9a08      	ldr	r2, [sp, #32]
 8028806:	4631      	mov	r1, r6
 8028808:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802880a:	f7ff fdf9 	bl	8028400 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 802880e:	e76d      	b.n	80286ec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8028810:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8028812:	ea4f 402b 	mov.w	r0, fp, asr #16
 8028816:	f3cb 3303 	ubfx	r3, fp, #12, #4
 802881a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802881e:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8028822:	1421      	asrs	r1, r4, #16
 8028824:	930a      	str	r3, [sp, #40]	@ 0x28
 8028826:	fb0c 0101 	mla	r1, ip, r1, r0
 802882a:	9808      	ldr	r0, [sp, #32]
 802882c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8028830:	1845      	adds	r5, r0, r1
 8028832:	5c40      	ldrb	r0, [r0, r1]
 8028834:	796f      	ldrb	r7, [r5, #5]
 8028836:	7869      	ldrb	r1, [r5, #1]
 8028838:	f895 8002 	ldrb.w	r8, [r5, #2]
 802883c:	f895 a003 	ldrb.w	sl, [r5, #3]
 8028840:	f895 9004 	ldrb.w	r9, [r5, #4]
 8028844:	970c      	str	r7, [sp, #48]	@ 0x30
 8028846:	b1a2      	cbz	r2, 8028872 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8028848:	2703      	movs	r7, #3
 802884a:	f06f 0304 	mvn.w	r3, #4
 802884e:	3505      	adds	r5, #5
 8028850:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8028854:	eb05 070c 	add.w	r7, r5, ip
 8028858:	f815 500c 	ldrb.w	r5, [r5, ip]
 802885c:	9513      	str	r5, [sp, #76]	@ 0x4c
 802885e:	787d      	ldrb	r5, [r7, #1]
 8028860:	9515      	str	r5, [sp, #84]	@ 0x54
 8028862:	78bd      	ldrb	r5, [r7, #2]
 8028864:	9517      	str	r5, [sp, #92]	@ 0x5c
 8028866:	78fd      	ldrb	r5, [r7, #3]
 8028868:	9514      	str	r5, [sp, #80]	@ 0x50
 802886a:	793d      	ldrb	r5, [r7, #4]
 802886c:	9516      	str	r5, [sp, #88]	@ 0x58
 802886e:	797d      	ldrb	r5, [r7, #5]
 8028870:	9518      	str	r5, [sp, #96]	@ 0x60
 8028872:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8028876:	b292      	uxth	r2, r2
 8028878:	3603      	adds	r6, #3
 802887a:	f10e 3eff 	add.w	lr, lr, #4294967295
 802887e:	fb03 f502 	mul.w	r5, r3, r2
 8028882:	011b      	lsls	r3, r3, #4
 8028884:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8028888:	f5c3 7780 	rsb	r7, r3, #256	@ 0x100
 802888c:	1b5b      	subs	r3, r3, r5
 802888e:	b292      	uxth	r2, r2
 8028890:	b29b      	uxth	r3, r3
 8028892:	1abf      	subs	r7, r7, r2
 8028894:	fb03 f909 	mul.w	r9, r3, r9
 8028898:	b2bf      	uxth	r7, r7
 802889a:	fb03 fa0a 	mul.w	sl, r3, sl
 802889e:	fb07 9901 	mla	r9, r7, r1, r9
 80288a2:	9915      	ldr	r1, [sp, #84]	@ 0x54
 80288a4:	fb07 aa00 	mla	sl, r7, r0, sl
 80288a8:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80288aa:	fb02 9901 	mla	r9, r2, r1, r9
 80288ae:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80288b0:	fb02 aa00 	mla	sl, r2, r0, sl
 80288b4:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80288b6:	fb05 9901 	mla	r9, r5, r1, r9
 80288ba:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80288bc:	fb05 aa00 	mla	sl, r5, r0, sl
 80288c0:	434b      	muls	r3, r1
 80288c2:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80288c4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80288c8:	fb07 3308 	mla	r3, r7, r8, r3
 80288cc:	ea4f 2929 	mov.w	r9, r9, asr #8
 80288d0:	f806 ac06 	strb.w	sl, [r6, #-6]
 80288d4:	fb02 3201 	mla	r2, r2, r1, r3
 80288d8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80288da:	f806 9c05 	strb.w	r9, [r6, #-5]
 80288de:	fb05 2503 	mla	r5, r5, r3, r2
 80288e2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80288e4:	122d      	asrs	r5, r5, #8
 80288e6:	449b      	add	fp, r3
 80288e8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80288ea:	f806 5c04 	strb.w	r5, [r6, #-4]
 80288ee:	441c      	add	r4, r3
 80288f0:	e72b      	b.n	802874a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80288f2:	b01b      	add	sp, #108	@ 0x6c
 80288f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080288f8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 80288f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80288fc:	b087      	sub	sp, #28
 80288fe:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 8028902:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 8028906:	fb05 7003 	mla	r0, r5, r3, r7
 802890a:	2d00      	cmp	r5, #0
 802890c:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 8028910:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 8028914:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8028918:	f2c0 811f 	blt.w	8028b5a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 802891c:	45a8      	cmp	r8, r5
 802891e:	f340 811c 	ble.w	8028b5a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8028922:	2f00      	cmp	r7, #0
 8028924:	f2c0 8117 	blt.w	8028b56 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8028928:	42bb      	cmp	r3, r7
 802892a:	f340 8114 	ble.w	8028b56 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 802892e:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8028932:	1c7a      	adds	r2, r7, #1
 8028934:	f100 8114 	bmi.w	8028b60 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8028938:	4293      	cmp	r3, r2
 802893a:	f340 8111 	ble.w	8028b60 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 802893e:	2c00      	cmp	r4, #0
 8028940:	f000 8110 	beq.w	8028b64 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 8028944:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8028948:	3501      	adds	r5, #1
 802894a:	f100 810f 	bmi.w	8028b6c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 802894e:	45a8      	cmp	r8, r5
 8028950:	f340 810c 	ble.w	8028b6c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8028954:	f1be 0f00 	cmp.w	lr, #0
 8028958:	f000 810b 	beq.w	8028b72 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 802895c:	2f00      	cmp	r7, #0
 802895e:	f2c0 8103 	blt.w	8028b68 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8028962:	42bb      	cmp	r3, r7
 8028964:	f340 8100 	ble.w	8028b68 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8028968:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 802896c:	3701      	adds	r7, #1
 802896e:	f100 8103 	bmi.w	8028b78 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 8028972:	42bb      	cmp	r3, r7
 8028974:	f340 8100 	ble.w	8028b78 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 8028978:	2c00      	cmp	r4, #0
 802897a:	f000 80ff 	beq.w	8028b7c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 802897e:	3301      	adds	r3, #1
 8028980:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8028984:	fa1f fc84 	uxth.w	ip, r4
 8028988:	fa1f fe8e 	uxth.w	lr, lr
 802898c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8028990:	fb0c f90e 	mul.w	r9, ip, lr
 8028994:	0e13      	lsrs	r3, r2, #24
 8028996:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 802899a:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 802899e:	9302      	str	r3, [sp, #8]
 80289a0:	ebac 0709 	sub.w	r7, ip, r9
 80289a4:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 80289a8:	fa1f f48e 	uxth.w	r4, lr
 80289ac:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 80289b0:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 80289b4:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 80289b8:	fb0a fe0e 	mul.w	lr, sl, lr
 80289bc:	1b1b      	subs	r3, r3, r4
 80289be:	fb0a f606 	mul.w	r6, sl, r6
 80289c2:	ea4f 6815 	mov.w	r8, r5, lsr #24
 80289c6:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80289ca:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 80289ce:	b29b      	uxth	r3, r3
 80289d0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80289d4:	b2bf      	uxth	r7, r7
 80289d6:	9301      	str	r3, [sp, #4]
 80289d8:	44e6      	add	lr, ip
 80289da:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 80289de:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80289e2:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80289e6:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 80289ea:	9303      	str	r3, [sp, #12]
 80289ec:	0a33      	lsrs	r3, r6, #8
 80289ee:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 80289f2:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80289f6:	9304      	str	r3, [sp, #16]
 80289f8:	fb0b f606 	mul.w	r6, fp, r6
 80289fc:	fb0b f000 	mul.w	r0, fp, r0
 8028a00:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8028a04:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8028a08:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028a0c:	44b6      	add	lr, r6
 8028a0e:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 8028a12:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8028a16:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 8028a1a:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8028a1e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028a22:	fb08 f606 	mul.w	r6, r8, r6
 8028a26:	0a03      	lsrs	r3, r0, #8
 8028a28:	fb08 f505 	mul.w	r5, r8, r5
 8028a2c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028a30:	0a30      	lsrs	r0, r6, #8
 8028a32:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8028a36:	9305      	str	r3, [sp, #20]
 8028a38:	0e13      	lsrs	r3, r2, #24
 8028a3a:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8028a3e:	fb0e fe07 	mul.w	lr, lr, r7
 8028a42:	4430      	add	r0, r6
 8028a44:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 8028a48:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8028a4c:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 8028a50:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8028a54:	0a00      	lsrs	r0, r0, #8
 8028a56:	435e      	muls	r6, r3
 8028a58:	0a2d      	lsrs	r5, r5, #8
 8028a5a:	435a      	muls	r2, r3
 8028a5c:	9b03      	ldr	r3, [sp, #12]
 8028a5e:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8028a62:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8028a66:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8028a6a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8028a6e:	44b4      	add	ip, r6
 8028a70:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 8028a74:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028a78:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8028a7c:	9e01      	ldr	r6, [sp, #4]
 8028a7e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8028a82:	fb03 ee06 	mla	lr, r3, r6, lr
 8028a86:	9b04      	ldr	r3, [sp, #16]
 8028a88:	0a12      	lsrs	r2, r2, #8
 8028a8a:	fb0c ee09 	mla	lr, ip, r9, lr
 8028a8e:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 8028a92:	9b05      	ldr	r3, [sp, #20]
 8028a94:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8028a98:	fb00 ee04 	mla	lr, r0, r4, lr
 8028a9c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028aa0:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 8028aa4:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 8028aa8:	9b01      	ldr	r3, [sp, #4]
 8028aaa:	fb07 fe0e 	mul.w	lr, r7, lr
 8028aae:	fb07 f70b 	mul.w	r7, r7, fp
 8028ab2:	fb03 ee06 	mla	lr, r3, r6, lr
 8028ab6:	fb03 730a 	mla	r3, r3, sl, r7
 8028aba:	fb09 e202 	mla	r2, r9, r2, lr
 8028abe:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8028ac2:	fb04 2e0e 	mla	lr, r4, lr, r2
 8028ac6:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 8028aca:	fb04 3408 	mla	r4, r4, r8, r3
 8028ace:	9b02      	ldr	r3, [sp, #8]
 8028ad0:	b292      	uxth	r2, r2
 8028ad2:	fb09 4903 	mla	r9, r9, r3, r4
 8028ad6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028ada:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8028ade:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8028ae2:	fb09 f902 	mul.w	r9, r9, r2
 8028ae6:	ea40 0e0e 	orr.w	lr, r0, lr
 8028aea:	f109 0301 	add.w	r3, r9, #1
 8028aee:	fa5f f08e 	uxtb.w	r0, lr
 8028af2:	fb10 f002 	smulbb	r0, r0, r2
 8028af6:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8028afa:	780b      	ldrb	r3, [r1, #0]
 8028afc:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 8028b00:	fa5f f989 	uxtb.w	r9, r9
 8028b04:	fb03 0309 	mla	r3, r3, r9, r0
 8028b08:	b29b      	uxth	r3, r3
 8028b0a:	1c58      	adds	r0, r3, #1
 8028b0c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8028b10:	7848      	ldrb	r0, [r1, #1]
 8028b12:	fb10 f009 	smulbb	r0, r0, r9
 8028b16:	121b      	asrs	r3, r3, #8
 8028b18:	700b      	strb	r3, [r1, #0]
 8028b1a:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8028b1e:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8028b22:	fb03 0302 	mla	r3, r3, r2, r0
 8028b26:	b29b      	uxth	r3, r3
 8028b28:	1c58      	adds	r0, r3, #1
 8028b2a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8028b2e:	121b      	asrs	r3, r3, #8
 8028b30:	704b      	strb	r3, [r1, #1]
 8028b32:	788b      	ldrb	r3, [r1, #2]
 8028b34:	fb13 f909 	smulbb	r9, r3, r9
 8028b38:	fb0e 9e02 	mla	lr, lr, r2, r9
 8028b3c:	fa1f fe8e 	uxth.w	lr, lr
 8028b40:	f10e 0301 	add.w	r3, lr, #1
 8028b44:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8028b48:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8028b4c:	f881 e002 	strb.w	lr, [r1, #2]
 8028b50:	b007      	add	sp, #28
 8028b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028b56:	2600      	movs	r6, #0
 8028b58:	e6eb      	b.n	8028932 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 8028b5a:	2000      	movs	r0, #0
 8028b5c:	4606      	mov	r6, r0
 8028b5e:	e6f3      	b.n	8028948 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8028b60:	2000      	movs	r0, #0
 8028b62:	e6f1      	b.n	8028948 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8028b64:	4620      	mov	r0, r4
 8028b66:	e6ef      	b.n	8028948 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8028b68:	2500      	movs	r5, #0
 8028b6a:	e6ff      	b.n	802896c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 8028b6c:	2200      	movs	r2, #0
 8028b6e:	4615      	mov	r5, r2
 8028b70:	e708      	b.n	8028984 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8028b72:	4672      	mov	r2, lr
 8028b74:	4675      	mov	r5, lr
 8028b76:	e705      	b.n	8028984 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8028b78:	2200      	movs	r2, #0
 8028b7a:	e703      	b.n	8028984 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8028b7c:	4622      	mov	r2, r4
 8028b7e:	e701      	b.n	8028984 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

08028b80 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028b84:	b09d      	sub	sp, #116	@ 0x74
 8028b86:	9219      	str	r2, [sp, #100]	@ 0x64
 8028b88:	9307      	str	r3, [sp, #28]
 8028b8a:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 8028b8c:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 8028b90:	901b      	str	r0, [sp, #108]	@ 0x6c
 8028b92:	931a      	str	r3, [sp, #104]	@ 0x68
 8028b94:	6850      	ldr	r0, [r2, #4]
 8028b96:	9117      	str	r1, [sp, #92]	@ 0x5c
 8028b98:	6812      	ldr	r2, [r2, #0]
 8028b9a:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 8028b9e:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	@ 0x9c
 8028ba2:	fb00 1303 	mla	r3, r0, r3, r1
 8028ba6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8028baa:	18d3      	adds	r3, r2, r3
 8028bac:	930a      	str	r3, [sp, #40]	@ 0x28
 8028bae:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8028bb0:	681b      	ldr	r3, [r3, #0]
 8028bb2:	9310      	str	r3, [sp, #64]	@ 0x40
 8028bb4:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8028bb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028bba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8028bbc:	2b00      	cmp	r3, #0
 8028bbe:	dc03      	bgt.n	8028bc8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8028bc0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8028bc2:	2b00      	cmp	r3, #0
 8028bc4:	f340 8368 	ble.w	8029298 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8028bc8:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8028bca:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028bce:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028bd2:	1e48      	subs	r0, r1, #1
 8028bd4:	1e57      	subs	r7, r2, #1
 8028bd6:	9b07      	ldr	r3, [sp, #28]
 8028bd8:	2b00      	cmp	r3, #0
 8028bda:	f340 8187 	ble.w	8028eec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8028bde:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8028be2:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028be6:	d406      	bmi.n	8028bf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8028be8:	4584      	cmp	ip, r0
 8028bea:	da04      	bge.n	8028bf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8028bec:	2b00      	cmp	r3, #0
 8028bee:	db02      	blt.n	8028bf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8028bf0:	42bb      	cmp	r3, r7
 8028bf2:	f2c0 817c 	blt.w	8028eee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8028bf6:	f11c 0c01 	adds.w	ip, ip, #1
 8028bfa:	f100 816c 	bmi.w	8028ed6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8028bfe:	4561      	cmp	r1, ip
 8028c00:	f2c0 8169 	blt.w	8028ed6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8028c04:	3301      	adds	r3, #1
 8028c06:	f100 8166 	bmi.w	8028ed6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8028c0a:	429a      	cmp	r2, r3
 8028c0c:	f2c0 8163 	blt.w	8028ed6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8028c10:	9b07      	ldr	r3, [sp, #28]
 8028c12:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8028c14:	9318      	str	r3, [sp, #96]	@ 0x60
 8028c16:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8028c18:	2b00      	cmp	r3, #0
 8028c1a:	f340 8186 	ble.w	8028f2a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8028c1e:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8028c20:	142a      	asrs	r2, r5, #16
 8028c22:	ea4f 4026 	mov.w	r0, r6, asr #16
 8028c26:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8028c2a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8028c2e:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8028c32:	f100 81cb 	bmi.w	8028fcc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8028c36:	f10e 38ff 	add.w	r8, lr, #4294967295
 8028c3a:	4542      	cmp	r2, r8
 8028c3c:	f280 81c6 	bge.w	8028fcc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8028c40:	2800      	cmp	r0, #0
 8028c42:	f2c0 81c3 	blt.w	8028fcc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8028c46:	f103 38ff 	add.w	r8, r3, #4294967295
 8028c4a:	4540      	cmp	r0, r8
 8028c4c:	f280 81be 	bge.w	8028fcc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8028c50:	fa0f f38e 	sxth.w	r3, lr
 8028c54:	fb00 2203 	mla	r2, r0, r3, r2
 8028c58:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8028c5a:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 8028c5e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8028c62:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8028c66:	2900      	cmp	r1, #0
 8028c68:	f000 81a6 	beq.w	8028fb8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8028c6c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8028c70:	900c      	str	r0, [sp, #48]	@ 0x30
 8028c72:	0e00      	lsrs	r0, r0, #24
 8028c74:	9013      	str	r0, [sp, #76]	@ 0x4c
 8028c76:	f1bc 0f00 	cmp.w	ip, #0
 8028c7a:	d00f      	beq.n	8028c9c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8028c7c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8028c80:	3b01      	subs	r3, #1
 8028c82:	009b      	lsls	r3, r3, #2
 8028c84:	3304      	adds	r3, #4
 8028c86:	eb08 0003 	add.w	r0, r8, r3
 8028c8a:	f858 3003 	ldr.w	r3, [r8, r3]
 8028c8e:	9308      	str	r3, [sp, #32]
 8028c90:	0e1b      	lsrs	r3, r3, #24
 8028c92:	9311      	str	r3, [sp, #68]	@ 0x44
 8028c94:	6843      	ldr	r3, [r0, #4]
 8028c96:	930d      	str	r3, [sp, #52]	@ 0x34
 8028c98:	0e1b      	lsrs	r3, r3, #24
 8028c9a:	9314      	str	r3, [sp, #80]	@ 0x50
 8028c9c:	b289      	uxth	r1, r1
 8028c9e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8028ca0:	fa1f fc8c 	uxth.w	ip, ip
 8028ca4:	0108      	lsls	r0, r1, #4
 8028ca6:	fb01 f90c 	mul.w	r9, r1, ip
 8028caa:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8028cae:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 8028cb2:	eba0 0809 	sub.w	r8, r0, r9
 8028cb6:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8028cb8:	fa1f f18c 	uxth.w	r1, ip
 8028cbc:	fa1f f888 	uxth.w	r8, r8
 8028cc0:	1a5b      	subs	r3, r3, r1
 8028cc2:	fb08 f000 	mul.w	r0, r8, r0
 8028cc6:	b29b      	uxth	r3, r3
 8028cc8:	fb03 000e 	mla	r0, r3, lr, r0
 8028ccc:	fb01 0004 	mla	r0, r1, r4, r0
 8028cd0:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8028cd2:	fb09 0004 	mla	r0, r9, r4, r0
 8028cd6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8028cda:	2800      	cmp	r0, #0
 8028cdc:	f000 80f2 	beq.w	8028ec4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8028ce0:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8028ce4:	d01b      	beq.n	8028d1e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8028ce6:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 8028cea:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8028cee:	fb0e fa0a 	mul.w	sl, lr, sl
 8028cf2:	fb0e fe02 	mul.w	lr, lr, r2
 8028cf6:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8028cfa:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8028cfe:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8028d02:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8028d06:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8028d0a:	4452      	add	r2, sl
 8028d0c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028d10:	0a12      	lsrs	r2, r2, #8
 8028d12:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8028d16:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8028d1a:	ea42 020c 	orr.w	r2, r2, ip
 8028d1e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8028d20:	2cff      	cmp	r4, #255	@ 0xff
 8028d22:	d021      	beq.n	8028d68 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8028d24:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8028d26:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8028d2a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8028d2c:	fb04 fb0b 	mul.w	fp, r4, fp
 8028d30:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8028d32:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8028d36:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8028d38:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028d3c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8028d40:	fb04 fa0a 	mul.w	sl, r4, sl
 8028d44:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028d48:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8028d4c:	44de      	add	lr, fp
 8028d4e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028d52:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028d56:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028d5a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028d5e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028d62:	ea4e 040a 	orr.w	r4, lr, sl
 8028d66:	940c      	str	r4, [sp, #48]	@ 0x30
 8028d68:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8028d6a:	2cff      	cmp	r4, #255	@ 0xff
 8028d6c:	d021      	beq.n	8028db2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8028d6e:	9c08      	ldr	r4, [sp, #32]
 8028d70:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8028d74:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8028d76:	fb04 fb0b 	mul.w	fp, r4, fp
 8028d7a:	9c08      	ldr	r4, [sp, #32]
 8028d7c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8028d80:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8028d82:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028d86:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8028d8a:	fb04 fa0a 	mul.w	sl, r4, sl
 8028d8e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028d92:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8028d96:	44de      	add	lr, fp
 8028d98:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028d9c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028da0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028da4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028da8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028dac:	ea4e 040a 	orr.w	r4, lr, sl
 8028db0:	9408      	str	r4, [sp, #32]
 8028db2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8028db4:	2cff      	cmp	r4, #255	@ 0xff
 8028db6:	d021      	beq.n	8028dfc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8028db8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8028dba:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8028dbe:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8028dc0:	fb04 fb0b 	mul.w	fp, r4, fp
 8028dc4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8028dc6:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8028dca:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8028dcc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028dd0:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8028dd4:	fb04 fa0a 	mul.w	sl, r4, sl
 8028dd8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028ddc:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8028de0:	44de      	add	lr, fp
 8028de2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028de6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028dea:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028dee:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028df2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028df6:	ea4e 040a 	orr.w	r4, lr, sl
 8028dfa:	940d      	str	r4, [sp, #52]	@ 0x34
 8028dfc:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8028dfe:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8028e02:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8028e06:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8028e0a:	9c08      	ldr	r4, [sp, #32]
 8028e0c:	fb08 fc0c 	mul.w	ip, r8, ip
 8028e10:	fb03 cc0e 	mla	ip, r3, lr, ip
 8028e14:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8028e18:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8028e1a:	fb01 cc0e 	mla	ip, r1, lr, ip
 8028e1e:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8028e22:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8028e24:	fb09 cc0e 	mla	ip, r9, lr, ip
 8028e28:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8028e2c:	fb08 f80e 	mul.w	r8, r8, lr
 8028e30:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028e34:	fb03 8202 	mla	r2, r3, r2, r8
 8028e38:	9b08      	ldr	r3, [sp, #32]
 8028e3a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8028e3e:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 8028e42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8028e44:	fb01 220a 	mla	r2, r1, sl, r2
 8028e48:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 8028e4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028e4e:	fb09 2901 	mla	r9, r9, r1, r2
 8028e52:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8028e54:	4343      	muls	r3, r0
 8028e56:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028e5a:	1c58      	adds	r0, r3, #1
 8028e5c:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8028e60:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8028e64:	783b      	ldrb	r3, [r7, #0]
 8028e66:	ea4c 0c09 	orr.w	ip, ip, r9
 8028e6a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8028e6e:	fa5f f28c 	uxtb.w	r2, ip
 8028e72:	b2c0      	uxtb	r0, r0
 8028e74:	fb12 f201 	smulbb	r2, r2, r1
 8028e78:	fb03 2300 	mla	r3, r3, r0, r2
 8028e7c:	b29b      	uxth	r3, r3
 8028e7e:	1c5a      	adds	r2, r3, #1
 8028e80:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8028e84:	787a      	ldrb	r2, [r7, #1]
 8028e86:	fb12 f200 	smulbb	r2, r2, r0
 8028e8a:	121b      	asrs	r3, r3, #8
 8028e8c:	703b      	strb	r3, [r7, #0]
 8028e8e:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8028e92:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8028e96:	fb03 2301 	mla	r3, r3, r1, r2
 8028e9a:	b29b      	uxth	r3, r3
 8028e9c:	1c5a      	adds	r2, r3, #1
 8028e9e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8028ea2:	121b      	asrs	r3, r3, #8
 8028ea4:	707b      	strb	r3, [r7, #1]
 8028ea6:	78bb      	ldrb	r3, [r7, #2]
 8028ea8:	fb13 f000 	smulbb	r0, r3, r0
 8028eac:	fb0c 0c01 	mla	ip, ip, r1, r0
 8028eb0:	fa1f fc8c 	uxth.w	ip, ip
 8028eb4:	f10c 0301 	add.w	r3, ip, #1
 8028eb8:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8028ebc:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8028ec0:	f887 c002 	strb.w	ip, [r7, #2]
 8028ec4:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8028ec6:	3703      	adds	r7, #3
 8028ec8:	441d      	add	r5, r3
 8028eca:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8028ecc:	441e      	add	r6, r3
 8028ece:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8028ed0:	3b01      	subs	r3, #1
 8028ed2:	9318      	str	r3, [sp, #96]	@ 0x60
 8028ed4:	e69f      	b.n	8028c16 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8028ed6:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8028ed8:	441d      	add	r5, r3
 8028eda:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8028edc:	441e      	add	r6, r3
 8028ede:	9b07      	ldr	r3, [sp, #28]
 8028ee0:	3b01      	subs	r3, #1
 8028ee2:	9307      	str	r3, [sp, #28]
 8028ee4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028ee6:	3303      	adds	r3, #3
 8028ee8:	930a      	str	r3, [sp, #40]	@ 0x28
 8028eea:	e674      	b.n	8028bd6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8028eec:	d025      	beq.n	8028f3a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8028eee:	9b07      	ldr	r3, [sp, #28]
 8028ef0:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 8028ef2:	3b01      	subs	r3, #1
 8028ef4:	fb00 5003 	mla	r0, r0, r3, r5
 8028ef8:	1400      	asrs	r0, r0, #16
 8028efa:	f53f ae89 	bmi.w	8028c10 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8028efe:	3901      	subs	r1, #1
 8028f00:	4288      	cmp	r0, r1
 8028f02:	f6bf ae85 	bge.w	8028c10 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8028f06:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8028f08:	fb01 6303 	mla	r3, r1, r3, r6
 8028f0c:	141b      	asrs	r3, r3, #16
 8028f0e:	f53f ae7f 	bmi.w	8028c10 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8028f12:	3a01      	subs	r2, #1
 8028f14:	4293      	cmp	r3, r2
 8028f16:	f6bf ae7b 	bge.w	8028c10 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8028f1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028f1c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8028f20:	f103 0e03 	add.w	lr, r3, #3
 8028f24:	f1bb 0f00 	cmp.w	fp, #0
 8028f28:	dc6e      	bgt.n	8029008 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8028f2a:	9b07      	ldr	r3, [sp, #28]
 8028f2c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8028f30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028f32:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8028f36:	4423      	add	r3, r4
 8028f38:	930a      	str	r3, [sp, #40]	@ 0x28
 8028f3a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8028f3c:	2b00      	cmp	r3, #0
 8028f3e:	f340 81ab 	ble.w	8029298 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8028f42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8028f46:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8028f48:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028f4c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8028f50:	eef0 6a62 	vmov.f32	s13, s5
 8028f54:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028f58:	ee31 1a05 	vadd.f32	s2, s2, s10
 8028f5c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028f60:	ee16 5a90 	vmov	r5, s13
 8028f64:	eef0 6a43 	vmov.f32	s13, s6
 8028f68:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028f6c:	ee16 6a90 	vmov	r6, s13
 8028f70:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8028f74:	ee61 7a27 	vmul.f32	s15, s2, s15
 8028f78:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028f7c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8028f80:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8028f84:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028f88:	ee12 2a90 	vmov	r2, s5
 8028f8c:	eef0 2a47 	vmov.f32	s5, s14
 8028f90:	fb92 f3f3 	sdiv	r3, r2, r3
 8028f94:	ee13 2a10 	vmov	r2, s6
 8028f98:	9329      	str	r3, [sp, #164]	@ 0xa4
 8028f9a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8028f9c:	eeb0 3a67 	vmov.f32	s6, s15
 8028fa0:	fb92 f3f3 	sdiv	r3, r2, r3
 8028fa4:	932a      	str	r3, [sp, #168]	@ 0xa8
 8028fa6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8028fa8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8028faa:	3b01      	subs	r3, #1
 8028fac:	9317      	str	r3, [sp, #92]	@ 0x5c
 8028fae:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8028fb0:	bf08      	it	eq
 8028fb2:	4613      	moveq	r3, r2
 8028fb4:	9307      	str	r3, [sp, #28]
 8028fb6:	e600      	b.n	8028bba <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8028fb8:	f1bc 0f00 	cmp.w	ip, #0
 8028fbc:	f43f ae6e 	beq.w	8028c9c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8028fc0:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8028fc4:	9308      	str	r3, [sp, #32]
 8028fc6:	0e1b      	lsrs	r3, r3, #24
 8028fc8:	9311      	str	r3, [sp, #68]	@ 0x44
 8028fca:	e667      	b.n	8028c9c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8028fcc:	f112 0801 	adds.w	r8, r2, #1
 8028fd0:	f53f af78 	bmi.w	8028ec4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8028fd4:	45c6      	cmp	lr, r8
 8028fd6:	f6ff af75 	blt.w	8028ec4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8028fda:	f110 0801 	adds.w	r8, r0, #1
 8028fde:	f53f af71 	bmi.w	8028ec4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8028fe2:	4543      	cmp	r3, r8
 8028fe4:	f6ff af6e 	blt.w	8028ec4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8028fe8:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8028fea:	b21b      	sxth	r3, r3
 8028fec:	9201      	str	r2, [sp, #4]
 8028fee:	9300      	str	r3, [sp, #0]
 8028ff0:	fa0f f38e 	sxth.w	r3, lr
 8028ff4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8028ff6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8028ffa:	e9cd c404 	strd	ip, r4, [sp, #16]
 8028ffe:	4639      	mov	r1, r7
 8029000:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8029002:	f7ff fc79 	bl	80288f8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8029006:	e75d      	b.n	8028ec4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8029008:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 802900a:	142f      	asrs	r7, r5, #16
 802900c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802900e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8029012:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8029016:	1433      	asrs	r3, r6, #16
 8029018:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802901c:	fb02 7303 	mla	r3, r2, r3, r7
 8029020:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 8029024:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8029028:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802902c:	2900      	cmp	r1, #0
 802902e:	f000 812a 	beq.w	8029286 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8029032:	687c      	ldr	r4, [r7, #4]
 8029034:	940e      	str	r4, [sp, #56]	@ 0x38
 8029036:	0e24      	lsrs	r4, r4, #24
 8029038:	9415      	str	r4, [sp, #84]	@ 0x54
 802903a:	b178      	cbz	r0, 802905c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 802903c:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8029040:	3a01      	subs	r2, #1
 8029042:	0092      	lsls	r2, r2, #2
 8029044:	3204      	adds	r2, #4
 8029046:	eb07 0802 	add.w	r8, r7, r2
 802904a:	58ba      	ldr	r2, [r7, r2]
 802904c:	9209      	str	r2, [sp, #36]	@ 0x24
 802904e:	0e12      	lsrs	r2, r2, #24
 8029050:	9212      	str	r2, [sp, #72]	@ 0x48
 8029052:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8029056:	920f      	str	r2, [sp, #60]	@ 0x3c
 8029058:	0e12      	lsrs	r2, r2, #24
 802905a:	9216      	str	r2, [sp, #88]	@ 0x58
 802905c:	b289      	uxth	r1, r1
 802905e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8029060:	b280      	uxth	r0, r0
 8029062:	fb01 f900 	mul.w	r9, r1, r0
 8029066:	0109      	lsls	r1, r1, #4
 8029068:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802906c:	eba1 0809 	sub.w	r8, r1, r9
 8029070:	f5c1 7280 	rsb	r2, r1, #256	@ 0x100
 8029074:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8029076:	b280      	uxth	r0, r0
 8029078:	fa1f f888 	uxth.w	r8, r8
 802907c:	1a12      	subs	r2, r2, r0
 802907e:	fb08 f101 	mul.w	r1, r8, r1
 8029082:	b292      	uxth	r2, r2
 8029084:	fb02 110c 	mla	r1, r2, ip, r1
 8029088:	fb00 1104 	mla	r1, r0, r4, r1
 802908c:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 802908e:	fb09 1104 	mla	r1, r9, r4, r1
 8029092:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8029096:	2900      	cmp	r1, #0
 8029098:	f000 80ec 	beq.w	8029274 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 802909c:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 80290a0:	d019      	beq.n	80290d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 80290a2:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80290a6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80290aa:	fb0c fa0a 	mul.w	sl, ip, sl
 80290ae:	fb0c fc03 	mul.w	ip, ip, r3
 80290b2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80290b6:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80290ba:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 80290be:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80290c2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80290c6:	4453      	add	r3, sl
 80290c8:	0a3f      	lsrs	r7, r7, #8
 80290ca:	0a1b      	lsrs	r3, r3, #8
 80290cc:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 80290d0:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80290d4:	433b      	orrs	r3, r7
 80290d6:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80290d8:	2cff      	cmp	r4, #255	@ 0xff
 80290da:	d020      	beq.n	802911e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 80290dc:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80290de:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80290e2:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80290e4:	4367      	muls	r7, r4
 80290e6:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80290e8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80290ec:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80290f0:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80290f2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80290f6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80290fa:	fb04 fa0a 	mul.w	sl, r4, sl
 80290fe:	44bc      	add	ip, r7
 8029100:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8029104:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029108:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802910c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029110:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029114:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029118:	ea4c 040a 	orr.w	r4, ip, sl
 802911c:	940e      	str	r4, [sp, #56]	@ 0x38
 802911e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8029120:	2cff      	cmp	r4, #255	@ 0xff
 8029122:	d020      	beq.n	8029166 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 8029124:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8029126:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802912a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802912c:	4367      	muls	r7, r4
 802912e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8029130:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029134:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8029138:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802913a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802913e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029142:	fb04 fa0a 	mul.w	sl, r4, sl
 8029146:	44bc      	add	ip, r7
 8029148:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802914c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029150:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029154:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029158:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802915c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029160:	ea4c 040a 	orr.w	r4, ip, sl
 8029164:	9409      	str	r4, [sp, #36]	@ 0x24
 8029166:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8029168:	2cff      	cmp	r4, #255	@ 0xff
 802916a:	d020      	beq.n	80291ae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 802916c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802916e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8029172:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8029174:	4367      	muls	r7, r4
 8029176:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8029178:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802917c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8029180:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8029182:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8029186:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802918a:	fb04 fa0a 	mul.w	sl, r4, sl
 802918e:	44bc      	add	ip, r7
 8029190:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8029194:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029198:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802919c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80291a0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80291a4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80291a8:	ea4c 040a 	orr.w	r4, ip, sl
 80291ac:	940f      	str	r4, [sp, #60]	@ 0x3c
 80291ae:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80291b0:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 80291b4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80291b8:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80291bc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80291be:	fb08 f707 	mul.w	r7, r8, r7
 80291c2:	fb02 770c 	mla	r7, r2, ip, r7
 80291c6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80291ca:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80291cc:	fb00 770c 	mla	r7, r0, ip, r7
 80291d0:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80291d4:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80291d6:	fb09 770c 	mla	r7, r9, ip, r7
 80291da:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 80291de:	fb08 f80c 	mul.w	r8, r8, ip
 80291e2:	0a3f      	lsrs	r7, r7, #8
 80291e4:	fb02 8303 	mla	r3, r2, r3, r8
 80291e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80291ea:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 80291ee:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 80291f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80291f4:	fb00 330a 	mla	r3, r0, sl, r3
 80291f8:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 80291fc:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80291fe:	fb09 3c0c 	mla	ip, r9, ip, r3
 8029202:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029204:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029208:	434b      	muls	r3, r1
 802920a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802920e:	1c59      	adds	r1, r3, #1
 8029210:	ea47 070c 	orr.w	r7, r7, ip
 8029214:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8029218:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 802921c:	b2fa      	uxtb	r2, r7
 802921e:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8029222:	fb12 f200 	smulbb	r2, r2, r0
 8029226:	b2c9      	uxtb	r1, r1
 8029228:	fb03 2301 	mla	r3, r3, r1, r2
 802922c:	b29b      	uxth	r3, r3
 802922e:	1c5a      	adds	r2, r3, #1
 8029230:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8029234:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8029238:	fb12 f201 	smulbb	r2, r2, r1
 802923c:	121b      	asrs	r3, r3, #8
 802923e:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8029242:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8029246:	0c3f      	lsrs	r7, r7, #16
 8029248:	fb03 2300 	mla	r3, r3, r0, r2
 802924c:	b29b      	uxth	r3, r3
 802924e:	1c5a      	adds	r2, r3, #1
 8029250:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8029254:	121b      	asrs	r3, r3, #8
 8029256:	f80e 3c02 	strb.w	r3, [lr, #-2]
 802925a:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 802925e:	fb13 f101 	smulbb	r1, r3, r1
 8029262:	fb07 1700 	mla	r7, r7, r0, r1
 8029266:	b2bf      	uxth	r7, r7
 8029268:	1c79      	adds	r1, r7, #1
 802926a:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 802926e:	123f      	asrs	r7, r7, #8
 8029270:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8029274:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8029276:	f10e 0e03 	add.w	lr, lr, #3
 802927a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802927e:	441d      	add	r5, r3
 8029280:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8029282:	441e      	add	r6, r3
 8029284:	e64e      	b.n	8028f24 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 8029286:	2800      	cmp	r0, #0
 8029288:	f43f aee8 	beq.w	802905c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 802928c:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8029290:	9209      	str	r2, [sp, #36]	@ 0x24
 8029292:	0e12      	lsrs	r2, r2, #24
 8029294:	9212      	str	r2, [sp, #72]	@ 0x48
 8029296:	e6e1      	b.n	802905c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8029298:	b01d      	add	sp, #116	@ 0x74
 802929a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802929e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 802929e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80292a2:	b087      	sub	sp, #28
 80292a4:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 80292a8:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 80292ac:	fb05 7003 	mla	r0, r5, r3, r7
 80292b0:	2d00      	cmp	r5, #0
 80292b2:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 80292b6:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 80292ba:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 80292be:	f2c0 810a 	blt.w	80294d6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 80292c2:	45a8      	cmp	r8, r5
 80292c4:	f340 8107 	ble.w	80294d6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 80292c8:	2f00      	cmp	r7, #0
 80292ca:	f2c0 8102 	blt.w	80294d2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 80292ce:	42bb      	cmp	r3, r7
 80292d0:	f340 80ff 	ble.w	80294d2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 80292d4:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 80292d8:	1c7a      	adds	r2, r7, #1
 80292da:	f100 80ff 	bmi.w	80294dc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 80292de:	4293      	cmp	r3, r2
 80292e0:	f340 80fc 	ble.w	80294dc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 80292e4:	2c00      	cmp	r4, #0
 80292e6:	f000 80fb 	beq.w	80294e0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 80292ea:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80292ee:	3501      	adds	r5, #1
 80292f0:	f100 80fa 	bmi.w	80294e8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 80292f4:	45a8      	cmp	r8, r5
 80292f6:	f340 80f7 	ble.w	80294e8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 80292fa:	f1be 0f00 	cmp.w	lr, #0
 80292fe:	f000 80f6 	beq.w	80294ee <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 8029302:	2f00      	cmp	r7, #0
 8029304:	f2c0 80ee 	blt.w	80294e4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8029308:	42bb      	cmp	r3, r7
 802930a:	f340 80eb 	ble.w	80294e4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 802930e:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8029312:	3701      	adds	r7, #1
 8029314:	f100 80ee 	bmi.w	80294f4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8029318:	42bb      	cmp	r3, r7
 802931a:	f340 80eb 	ble.w	80294f4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 802931e:	2c00      	cmp	r4, #0
 8029320:	f000 80ea 	beq.w	80294f8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 8029324:	3301      	adds	r3, #1
 8029326:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 802932a:	fa1f fc84 	uxth.w	ip, r4
 802932e:	fa1f fe8e 	uxth.w	lr, lr
 8029332:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8029336:	fb0c f90e 	mul.w	r9, ip, lr
 802933a:	0e13      	lsrs	r3, r2, #24
 802933c:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8029340:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8029344:	9302      	str	r3, [sp, #8]
 8029346:	ebac 0709 	sub.w	r7, ip, r9
 802934a:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 802934e:	fa1f f48e 	uxth.w	r4, lr
 8029352:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 8029356:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 802935a:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 802935e:	fb0a fe0e 	mul.w	lr, sl, lr
 8029362:	1b1b      	subs	r3, r3, r4
 8029364:	fb0a f606 	mul.w	r6, sl, r6
 8029368:	ea4f 6815 	mov.w	r8, r5, lsr #24
 802936c:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8029370:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 8029374:	b29b      	uxth	r3, r3
 8029376:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802937a:	b2bf      	uxth	r7, r7
 802937c:	9301      	str	r3, [sp, #4]
 802937e:	44e6      	add	lr, ip
 8029380:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 8029384:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029388:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 802938c:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 8029390:	9303      	str	r3, [sp, #12]
 8029392:	0a33      	lsrs	r3, r6, #8
 8029394:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 8029398:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 802939c:	9304      	str	r3, [sp, #16]
 802939e:	fb0b f606 	mul.w	r6, fp, r6
 80293a2:	fb0b f000 	mul.w	r0, fp, r0
 80293a6:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 80293aa:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 80293ae:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80293b2:	44b6      	add	lr, r6
 80293b4:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 80293b8:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 80293bc:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 80293c0:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 80293c4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80293c8:	fb08 f606 	mul.w	r6, r8, r6
 80293cc:	0a03      	lsrs	r3, r0, #8
 80293ce:	fb08 f505 	mul.w	r5, r8, r5
 80293d2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80293d6:	0a30      	lsrs	r0, r6, #8
 80293d8:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 80293dc:	9305      	str	r3, [sp, #20]
 80293de:	0e13      	lsrs	r3, r2, #24
 80293e0:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 80293e4:	fb0e fe07 	mul.w	lr, lr, r7
 80293e8:	4430      	add	r0, r6
 80293ea:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 80293ee:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80293f2:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 80293f6:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80293fa:	0a00      	lsrs	r0, r0, #8
 80293fc:	435e      	muls	r6, r3
 80293fe:	0a2d      	lsrs	r5, r5, #8
 8029400:	435a      	muls	r2, r3
 8029402:	9b03      	ldr	r3, [sp, #12]
 8029404:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8029408:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 802940c:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8029410:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029414:	44b4      	add	ip, r6
 8029416:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 802941a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802941e:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8029422:	9e01      	ldr	r6, [sp, #4]
 8029424:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029428:	fb03 ee06 	mla	lr, r3, r6, lr
 802942c:	9b04      	ldr	r3, [sp, #16]
 802942e:	0a12      	lsrs	r2, r2, #8
 8029430:	fb0c ee09 	mla	lr, ip, r9, lr
 8029434:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 8029438:	9b05      	ldr	r3, [sp, #20]
 802943a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802943e:	fb00 ee04 	mla	lr, r0, r4, lr
 8029442:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029446:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 802944a:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 802944e:	9b01      	ldr	r3, [sp, #4]
 8029450:	fb07 fe0e 	mul.w	lr, r7, lr
 8029454:	fb07 f70b 	mul.w	r7, r7, fp
 8029458:	fb03 ee06 	mla	lr, r3, r6, lr
 802945c:	fb03 730a 	mla	r3, r3, sl, r7
 8029460:	fb09 e202 	mla	r2, r9, r2, lr
 8029464:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8029468:	fb04 2e0e 	mla	lr, r4, lr, r2
 802946c:	fb04 3408 	mla	r4, r4, r8, r3
 8029470:	9b02      	ldr	r3, [sp, #8]
 8029472:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029476:	fb09 4903 	mla	r9, r9, r3, r4
 802947a:	780b      	ldrb	r3, [r1, #0]
 802947c:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8029480:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8029484:	ea40 0e0e 	orr.w	lr, r0, lr
 8029488:	fa5f f989 	uxtb.w	r9, r9
 802948c:	fb03 f209 	mul.w	r2, r3, r9
 8029490:	1c53      	adds	r3, r2, #1
 8029492:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8029496:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 802949a:	700b      	strb	r3, [r1, #0]
 802949c:	784b      	ldrb	r3, [r1, #1]
 802949e:	fb03 f309 	mul.w	r3, r3, r9
 80294a2:	1c5a      	adds	r2, r3, #1
 80294a4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80294a8:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80294ac:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80294b0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80294b4:	704b      	strb	r3, [r1, #1]
 80294b6:	788b      	ldrb	r3, [r1, #2]
 80294b8:	fb03 f909 	mul.w	r9, r3, r9
 80294bc:	f109 0301 	add.w	r3, r9, #1
 80294c0:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 80294c4:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 80294c8:	f881 e002 	strb.w	lr, [r1, #2]
 80294cc:	b007      	add	sp, #28
 80294ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80294d2:	2600      	movs	r6, #0
 80294d4:	e700      	b.n	80292d8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 80294d6:	2000      	movs	r0, #0
 80294d8:	4606      	mov	r6, r0
 80294da:	e708      	b.n	80292ee <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 80294dc:	2000      	movs	r0, #0
 80294de:	e706      	b.n	80292ee <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 80294e0:	4620      	mov	r0, r4
 80294e2:	e704      	b.n	80292ee <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 80294e4:	2500      	movs	r5, #0
 80294e6:	e714      	b.n	8029312 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 80294e8:	2200      	movs	r2, #0
 80294ea:	4615      	mov	r5, r2
 80294ec:	e71d      	b.n	802932a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80294ee:	4672      	mov	r2, lr
 80294f0:	4675      	mov	r5, lr
 80294f2:	e71a      	b.n	802932a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80294f4:	2200      	movs	r2, #0
 80294f6:	e718      	b.n	802932a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80294f8:	4622      	mov	r2, r4
 80294fa:	e716      	b.n	802932a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

080294fc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80294fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029500:	b099      	sub	sp, #100	@ 0x64
 8029502:	e9cd 1215 	strd	r1, r2, [sp, #84]	@ 0x54
 8029506:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8029508:	9017      	str	r0, [sp, #92]	@ 0x5c
 802950a:	9306      	str	r3, [sp, #24]
 802950c:	6850      	ldr	r0, [r2, #4]
 802950e:	6812      	ldr	r2, [r2, #0]
 8029510:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 8029514:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	@ 0x8c
 8029518:	fb00 1303 	mla	r3, r0, r3, r1
 802951c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8029520:	18d3      	adds	r3, r2, r3
 8029522:	9309      	str	r3, [sp, #36]	@ 0x24
 8029524:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8029526:	681b      	ldr	r3, [r3, #0]
 8029528:	930e      	str	r3, [sp, #56]	@ 0x38
 802952a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802952c:	2b00      	cmp	r3, #0
 802952e:	dc03      	bgt.n	8029538 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8029530:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8029532:	2b00      	cmp	r3, #0
 8029534:	f340 8360 	ble.w	8029bf8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8029538:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802953a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802953e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029542:	1e48      	subs	r0, r1, #1
 8029544:	1e57      	subs	r7, r2, #1
 8029546:	9b06      	ldr	r3, [sp, #24]
 8029548:	2b00      	cmp	r3, #0
 802954a:	f340 817b 	ble.w	8029844 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 802954e:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8029552:	ea4f 4326 	mov.w	r3, r6, asr #16
 8029556:	d406      	bmi.n	8029566 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8029558:	4584      	cmp	ip, r0
 802955a:	da04      	bge.n	8029566 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 802955c:	2b00      	cmp	r3, #0
 802955e:	db02      	blt.n	8029566 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8029560:	42bb      	cmp	r3, r7
 8029562:	f2c0 8170 	blt.w	8029846 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8029566:	f11c 0c01 	adds.w	ip, ip, #1
 802956a:	f100 8160 	bmi.w	802982e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 802956e:	4561      	cmp	r1, ip
 8029570:	f2c0 815d 	blt.w	802982e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8029574:	3301      	adds	r3, #1
 8029576:	f100 815a 	bmi.w	802982e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 802957a:	429a      	cmp	r2, r3
 802957c:	f2c0 8157 	blt.w	802982e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8029580:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8029584:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8029586:	f1b8 0f00 	cmp.w	r8, #0
 802958a:	f340 8179 	ble.w	8029880 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 802958e:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8029590:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8029594:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8029596:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802959a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802959e:	142a      	asrs	r2, r5, #16
 80295a0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80295a4:	689b      	ldr	r3, [r3, #8]
 80295a6:	f100 81be 	bmi.w	8029926 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80295aa:	f103 39ff 	add.w	r9, r3, #4294967295
 80295ae:	454a      	cmp	r2, r9
 80295b0:	f280 81b9 	bge.w	8029926 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80295b4:	f1bc 0f00 	cmp.w	ip, #0
 80295b8:	f2c0 81b5 	blt.w	8029926 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80295bc:	f10e 39ff 	add.w	r9, lr, #4294967295
 80295c0:	45cc      	cmp	ip, r9
 80295c2:	f280 81b0 	bge.w	8029926 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80295c6:	b21b      	sxth	r3, r3
 80295c8:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80295ca:	fb0c 2203 	mla	r2, ip, r3, r2
 80295ce:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 80295d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80295d6:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80295da:	2900      	cmp	r1, #0
 80295dc:	f000 8197 	beq.w	802990e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 80295e0:	f8d9 4004 	ldr.w	r4, [r9, #4]
 80295e4:	940a      	str	r4, [sp, #40]	@ 0x28
 80295e6:	0e24      	lsrs	r4, r4, #24
 80295e8:	9411      	str	r4, [sp, #68]	@ 0x44
 80295ea:	b180      	cbz	r0, 802960e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 80295ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80295f0:	3b01      	subs	r3, #1
 80295f2:	009b      	lsls	r3, r3, #2
 80295f4:	3304      	adds	r3, #4
 80295f6:	eb09 0c03 	add.w	ip, r9, r3
 80295fa:	f859 3003 	ldr.w	r3, [r9, r3]
 80295fe:	9307      	str	r3, [sp, #28]
 8029600:	0e1b      	lsrs	r3, r3, #24
 8029602:	930f      	str	r3, [sp, #60]	@ 0x3c
 8029604:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8029608:	930b      	str	r3, [sp, #44]	@ 0x2c
 802960a:	0e1b      	lsrs	r3, r3, #24
 802960c:	9312      	str	r3, [sp, #72]	@ 0x48
 802960e:	b289      	uxth	r1, r1
 8029610:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8029612:	b280      	uxth	r0, r0
 8029614:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8029616:	fb01 fa00 	mul.w	sl, r1, r0
 802961a:	0109      	lsls	r1, r1, #4
 802961c:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8029620:	eba1 090a 	sub.w	r9, r1, sl
 8029624:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8029628:	b280      	uxth	r0, r0
 802962a:	fa1f f989 	uxth.w	r9, r9
 802962e:	1a09      	subs	r1, r1, r0
 8029630:	fb09 f303 	mul.w	r3, r9, r3
 8029634:	b289      	uxth	r1, r1
 8029636:	fb01 330e 	mla	r3, r1, lr, r3
 802963a:	fb00 3304 	mla	r3, r0, r4, r3
 802963e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8029640:	fb0a 3304 	mla	r3, sl, r4, r3
 8029644:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029648:	2b00      	cmp	r3, #0
 802964a:	f000 80e8 	beq.w	802981e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802964e:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8029652:	d01b      	beq.n	802968c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 8029654:	f002 1bff 	and.w	fp, r2, #16711935	@ 0xff00ff
 8029658:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802965c:	fb0e fb0b 	mul.w	fp, lr, fp
 8029660:	fb0e fe02 	mul.w	lr, lr, r2
 8029664:	ea4f 221b 	mov.w	r2, fp, lsr #8
 8029668:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802966c:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8029670:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8029674:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8029678:	445a      	add	r2, fp
 802967a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802967e:	0a12      	lsrs	r2, r2, #8
 8029680:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8029684:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8029688:	ea42 020c 	orr.w	r2, r2, ip
 802968c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802968e:	2cff      	cmp	r4, #255	@ 0xff
 8029690:	d021      	beq.n	80296d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8029692:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8029694:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8029698:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802969a:	fb04 fc0c 	mul.w	ip, r4, ip
 802969e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80296a0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80296a4:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 80296a8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80296aa:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80296ae:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80296b2:	fb04 fb0b 	mul.w	fp, r4, fp
 80296b6:	44e6      	add	lr, ip
 80296b8:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 80296bc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80296c0:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80296c4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80296c8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80296cc:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 80296d0:	ea4e 040b 	orr.w	r4, lr, fp
 80296d4:	940a      	str	r4, [sp, #40]	@ 0x28
 80296d6:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80296d8:	2cff      	cmp	r4, #255	@ 0xff
 80296da:	d021      	beq.n	8029720 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80296dc:	9c07      	ldr	r4, [sp, #28]
 80296de:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80296e2:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80296e4:	fb04 fc0c 	mul.w	ip, r4, ip
 80296e8:	9c07      	ldr	r4, [sp, #28]
 80296ea:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80296ee:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 80296f2:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80296f4:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80296f8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80296fc:	fb04 fb0b 	mul.w	fp, r4, fp
 8029700:	44e6      	add	lr, ip
 8029702:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8029706:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802970a:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 802970e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8029712:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8029716:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 802971a:	ea4e 040b 	orr.w	r4, lr, fp
 802971e:	9407      	str	r4, [sp, #28]
 8029720:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8029722:	2cff      	cmp	r4, #255	@ 0xff
 8029724:	d021      	beq.n	802976a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8029726:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8029728:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802972c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802972e:	fb04 fc0c 	mul.w	ip, r4, ip
 8029732:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8029734:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8029738:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 802973c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802973e:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8029742:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8029746:	fb04 fb0b 	mul.w	fp, r4, fp
 802974a:	44e6      	add	lr, ip
 802974c:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8029750:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029754:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8029758:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802975c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8029760:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8029764:	ea4e 040b 	orr.w	r4, lr, fp
 8029768:	940b      	str	r4, [sp, #44]	@ 0x2c
 802976a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802976c:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8029770:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8029774:	2bff      	cmp	r3, #255	@ 0xff
 8029776:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802977a:	9c07      	ldr	r4, [sp, #28]
 802977c:	fb09 fc0c 	mul.w	ip, r9, ip
 8029780:	fb01 cc0e 	mla	ip, r1, lr, ip
 8029784:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8029788:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802978a:	fb00 cc0e 	mla	ip, r0, lr, ip
 802978e:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8029792:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8029794:	fb0a cc0e 	mla	ip, sl, lr, ip
 8029798:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 802979c:	fb09 f90e 	mul.w	r9, r9, lr
 80297a0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80297a4:	fb01 9202 	mla	r2, r1, r2, r9
 80297a8:	9907      	ldr	r1, [sp, #28]
 80297aa:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80297ae:	f401 4b7f 	and.w	fp, r1, #65280	@ 0xff00
 80297b2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80297b4:	fb00 220b 	mla	r2, r0, fp, r2
 80297b8:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 80297bc:	fb0a 2a00 	mla	sl, sl, r0, r2
 80297c0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80297c4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80297c8:	ea4c 0c0a 	orr.w	ip, ip, sl
 80297cc:	fa5f f08c 	uxtb.w	r0, ip
 80297d0:	f3cc 2107 	ubfx	r1, ip, #8, #8
 80297d4:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80297d8:	f000 80a2 	beq.w	8029920 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 80297dc:	43db      	mvns	r3, r3
 80297de:	783a      	ldrb	r2, [r7, #0]
 80297e0:	f897 a002 	ldrb.w	sl, [r7, #2]
 80297e4:	b2db      	uxtb	r3, r3
 80297e6:	fb02 fe03 	mul.w	lr, r2, r3
 80297ea:	fb0a fa03 	mul.w	sl, sl, r3
 80297ee:	f10e 0201 	add.w	r2, lr, #1
 80297f2:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 80297f6:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80297fa:	703a      	strb	r2, [r7, #0]
 80297fc:	787a      	ldrb	r2, [r7, #1]
 80297fe:	fb02 f003 	mul.w	r0, r2, r3
 8029802:	f10a 0301 	add.w	r3, sl, #1
 8029806:	1c42      	adds	r2, r0, #1
 8029808:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 802980c:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8029810:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8029814:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8029818:	707a      	strb	r2, [r7, #1]
 802981a:	f887 c002 	strb.w	ip, [r7, #2]
 802981e:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8029820:	3703      	adds	r7, #3
 8029822:	f108 38ff 	add.w	r8, r8, #4294967295
 8029826:	441d      	add	r5, r3
 8029828:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802982a:	441e      	add	r6, r3
 802982c:	e6ab      	b.n	8029586 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802982e:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8029830:	441d      	add	r5, r3
 8029832:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8029834:	441e      	add	r6, r3
 8029836:	9b06      	ldr	r3, [sp, #24]
 8029838:	3b01      	subs	r3, #1
 802983a:	9306      	str	r3, [sp, #24]
 802983c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802983e:	3303      	adds	r3, #3
 8029840:	9309      	str	r3, [sp, #36]	@ 0x24
 8029842:	e680      	b.n	8029546 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8029844:	d024      	beq.n	8029890 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8029846:	9b06      	ldr	r3, [sp, #24]
 8029848:	9825      	ldr	r0, [sp, #148]	@ 0x94
 802984a:	3b01      	subs	r3, #1
 802984c:	fb00 5003 	mla	r0, r0, r3, r5
 8029850:	1400      	asrs	r0, r0, #16
 8029852:	f53f ae95 	bmi.w	8029580 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8029856:	3901      	subs	r1, #1
 8029858:	4288      	cmp	r0, r1
 802985a:	f6bf ae91 	bge.w	8029580 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802985e:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8029860:	fb01 6303 	mla	r3, r1, r3, r6
 8029864:	141b      	asrs	r3, r3, #16
 8029866:	f53f ae8b 	bmi.w	8029580 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802986a:	3a01      	subs	r2, #1
 802986c:	4293      	cmp	r3, r2
 802986e:	f6bf ae87 	bge.w	8029580 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8029872:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029874:	f8dd b018 	ldr.w	fp, [sp, #24]
 8029878:	1cdf      	adds	r7, r3, #3
 802987a:	f1bb 0f00 	cmp.w	fp, #0
 802987e:	dc6e      	bgt.n	802995e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8029880:	9b06      	ldr	r3, [sp, #24]
 8029882:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8029886:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029888:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802988c:	4423      	add	r3, r4
 802988e:	9309      	str	r3, [sp, #36]	@ 0x24
 8029890:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8029892:	2b00      	cmp	r3, #0
 8029894:	f340 81b0 	ble.w	8029bf8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8029898:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802989c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802989e:	ee30 0a04 	vadd.f32	s0, s0, s8
 80298a2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80298a6:	eef0 6a62 	vmov.f32	s13, s5
 80298aa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80298ae:	ee31 1a05 	vadd.f32	s2, s2, s10
 80298b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80298b6:	ee16 5a90 	vmov	r5, s13
 80298ba:	eef0 6a43 	vmov.f32	s13, s6
 80298be:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80298c2:	ee16 6a90 	vmov	r6, s13
 80298c6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80298ca:	ee61 7a27 	vmul.f32	s15, s2, s15
 80298ce:	ee77 2a62 	vsub.f32	s5, s14, s5
 80298d2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80298d6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80298da:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80298de:	ee12 2a90 	vmov	r2, s5
 80298e2:	eef0 2a47 	vmov.f32	s5, s14
 80298e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80298ea:	ee13 2a10 	vmov	r2, s6
 80298ee:	9325      	str	r3, [sp, #148]	@ 0x94
 80298f0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80298f2:	eeb0 3a67 	vmov.f32	s6, s15
 80298f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80298fa:	9326      	str	r3, [sp, #152]	@ 0x98
 80298fc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80298fe:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8029900:	3b01      	subs	r3, #1
 8029902:	9315      	str	r3, [sp, #84]	@ 0x54
 8029904:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8029906:	bf08      	it	eq
 8029908:	4613      	moveq	r3, r2
 802990a:	9306      	str	r3, [sp, #24]
 802990c:	e60d      	b.n	802952a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 802990e:	2800      	cmp	r0, #0
 8029910:	f43f ae7d 	beq.w	802960e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8029914:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8029918:	9307      	str	r3, [sp, #28]
 802991a:	0e1b      	lsrs	r3, r3, #24
 802991c:	930f      	str	r3, [sp, #60]	@ 0x3c
 802991e:	e676      	b.n	802960e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8029920:	7038      	strb	r0, [r7, #0]
 8029922:	7079      	strb	r1, [r7, #1]
 8029924:	e779      	b.n	802981a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8029926:	f112 0901 	adds.w	r9, r2, #1
 802992a:	f53f af78 	bmi.w	802981e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802992e:	454b      	cmp	r3, r9
 8029930:	f6ff af75 	blt.w	802981e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8029934:	f11c 0901 	adds.w	r9, ip, #1
 8029938:	f53f af71 	bmi.w	802981e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802993c:	45ce      	cmp	lr, r9
 802993e:	f6ff af6e 	blt.w	802981e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8029942:	b21b      	sxth	r3, r3
 8029944:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8029948:	fa0f f28e 	sxth.w	r2, lr
 802994c:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8029950:	9200      	str	r2, [sp, #0]
 8029952:	4639      	mov	r1, r7
 8029954:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8029956:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8029958:	f7ff fca1 	bl	802929e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 802995c:	e75f      	b.n	802981e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802995e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8029960:	1429      	asrs	r1, r5, #16
 8029962:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8029964:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8029968:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 802996c:	1433      	asrs	r3, r6, #16
 802996e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8029972:	fb0c 1303 	mla	r3, ip, r3, r1
 8029976:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8029978:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 802997c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8029980:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8029984:	2a00      	cmp	r2, #0
 8029986:	f000 8129 	beq.w	8029bdc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 802998a:	684c      	ldr	r4, [r1, #4]
 802998c:	940c      	str	r4, [sp, #48]	@ 0x30
 802998e:	0e24      	lsrs	r4, r4, #24
 8029990:	9413      	str	r4, [sp, #76]	@ 0x4c
 8029992:	b198      	cbz	r0, 80299bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8029994:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 8029998:	f10c 3cff 	add.w	ip, ip, #4294967295
 802999c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80299a0:	f10c 0c04 	add.w	ip, ip, #4
 80299a4:	eb01 080c 	add.w	r8, r1, ip
 80299a8:	f851 100c 	ldr.w	r1, [r1, ip]
 80299ac:	9108      	str	r1, [sp, #32]
 80299ae:	0e09      	lsrs	r1, r1, #24
 80299b0:	9110      	str	r1, [sp, #64]	@ 0x40
 80299b2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80299b6:	910d      	str	r1, [sp, #52]	@ 0x34
 80299b8:	0e09      	lsrs	r1, r1, #24
 80299ba:	9114      	str	r1, [sp, #80]	@ 0x50
 80299bc:	b292      	uxth	r2, r2
 80299be:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80299c0:	b280      	uxth	r0, r0
 80299c2:	fb02 f900 	mul.w	r9, r2, r0
 80299c6:	0112      	lsls	r2, r2, #4
 80299c8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80299cc:	eba2 0809 	sub.w	r8, r2, r9
 80299d0:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 80299d4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80299d6:	b280      	uxth	r0, r0
 80299d8:	fa1f f888 	uxth.w	r8, r8
 80299dc:	1a09      	subs	r1, r1, r0
 80299de:	fb08 f202 	mul.w	r2, r8, r2
 80299e2:	b289      	uxth	r1, r1
 80299e4:	fb01 220e 	mla	r2, r1, lr, r2
 80299e8:	fb00 2204 	mla	r2, r0, r4, r2
 80299ec:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80299ee:	fb09 2204 	mla	r2, r9, r4, r2
 80299f2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80299f6:	2a00      	cmp	r2, #0
 80299f8:	f000 80e8 	beq.w	8029bcc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 80299fc:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8029a00:	d01b      	beq.n	8029a3a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 8029a02:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8029a06:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8029a0a:	fb0e fa0a 	mul.w	sl, lr, sl
 8029a0e:	fb0e fe03 	mul.w	lr, lr, r3
 8029a12:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8029a16:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8029a1a:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8029a1e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8029a22:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8029a26:	4453      	add	r3, sl
 8029a28:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029a2c:	0a1b      	lsrs	r3, r3, #8
 8029a2e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8029a32:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8029a36:	ea43 030c 	orr.w	r3, r3, ip
 8029a3a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8029a3c:	2cff      	cmp	r4, #255	@ 0xff
 8029a3e:	d021      	beq.n	8029a84 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 8029a40:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8029a42:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8029a46:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8029a48:	fb04 fc0c 	mul.w	ip, r4, ip
 8029a4c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8029a4e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8029a52:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8029a56:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8029a58:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8029a5c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8029a60:	fb04 fa0a 	mul.w	sl, r4, sl
 8029a64:	44e6      	add	lr, ip
 8029a66:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8029a6a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029a6e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8029a72:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8029a76:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029a7a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029a7e:	ea4e 040a 	orr.w	r4, lr, sl
 8029a82:	940c      	str	r4, [sp, #48]	@ 0x30
 8029a84:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8029a86:	2cff      	cmp	r4, #255	@ 0xff
 8029a88:	d021      	beq.n	8029ace <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 8029a8a:	9c08      	ldr	r4, [sp, #32]
 8029a8c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8029a90:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8029a92:	fb04 fc0c 	mul.w	ip, r4, ip
 8029a96:	9c08      	ldr	r4, [sp, #32]
 8029a98:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8029a9c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8029a9e:	fb04 fa0e 	mul.w	sl, r4, lr
 8029aa2:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8029aa6:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8029aaa:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8029aae:	44e6      	add	lr, ip
 8029ab0:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8029ab4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8029ab8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029abc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029ac0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8029ac4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029ac8:	ea4e 040a 	orr.w	r4, lr, sl
 8029acc:	9408      	str	r4, [sp, #32]
 8029ace:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8029ad0:	2cff      	cmp	r4, #255	@ 0xff
 8029ad2:	d021      	beq.n	8029b18 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8029ad4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8029ad6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8029ada:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8029adc:	fb04 fc0c 	mul.w	ip, r4, ip
 8029ae0:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8029ae2:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8029ae6:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8029aea:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8029aec:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8029af0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8029af4:	fb04 fa0a 	mul.w	sl, r4, sl
 8029af8:	44e6      	add	lr, ip
 8029afa:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8029afe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029b02:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8029b06:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8029b0a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029b0e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029b12:	ea4e 040a 	orr.w	r4, lr, sl
 8029b16:	940d      	str	r4, [sp, #52]	@ 0x34
 8029b18:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8029b1a:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8029b1e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8029b22:	2aff      	cmp	r2, #255	@ 0xff
 8029b24:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8029b28:	9c08      	ldr	r4, [sp, #32]
 8029b2a:	fb08 fc0c 	mul.w	ip, r8, ip
 8029b2e:	fb01 cc0e 	mla	ip, r1, lr, ip
 8029b32:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8029b36:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8029b38:	fb00 cc0e 	mla	ip, r0, lr, ip
 8029b3c:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8029b40:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8029b42:	fb09 cc0e 	mla	ip, r9, lr, ip
 8029b46:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8029b4a:	fb08 f80e 	mul.w	r8, r8, lr
 8029b4e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029b52:	fb01 8303 	mla	r3, r1, r3, r8
 8029b56:	9908      	ldr	r1, [sp, #32]
 8029b58:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029b5c:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8029b60:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8029b62:	fb00 330a 	mla	r3, r0, sl, r3
 8029b66:	f401 4e7f 	and.w	lr, r1, #65280	@ 0xff00
 8029b6a:	fb09 3e0e 	mla	lr, r9, lr, r3
 8029b6e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029b72:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8029b76:	ea4c 0c0e 	orr.w	ip, ip, lr
 8029b7a:	fa5f f08c 	uxtb.w	r0, ip
 8029b7e:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8029b82:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8029b86:	d032      	beq.n	8029bee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8029b88:	43d2      	mvns	r2, r2
 8029b8a:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 8029b8e:	b2d2      	uxtb	r2, r2
 8029b90:	fb0e fe02 	mul.w	lr, lr, r2
 8029b94:	f10e 0301 	add.w	r3, lr, #1
 8029b98:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8029b9c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8029ba0:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8029ba4:	4350      	muls	r0, r2
 8029ba6:	f807 3c03 	strb.w	r3, [r7, #-3]
 8029baa:	1c43      	adds	r3, r0, #1
 8029bac:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8029bb0:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8029bb4:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8029bb8:	4353      	muls	r3, r2
 8029bba:	f807 1c02 	strb.w	r1, [r7, #-2]
 8029bbe:	1c5a      	adds	r2, r3, #1
 8029bc0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8029bc4:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8029bc8:	f807 cc01 	strb.w	ip, [r7, #-1]
 8029bcc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8029bce:	3703      	adds	r7, #3
 8029bd0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8029bd4:	441d      	add	r5, r3
 8029bd6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8029bd8:	441e      	add	r6, r3
 8029bda:	e64e      	b.n	802987a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8029bdc:	2800      	cmp	r0, #0
 8029bde:	f43f aeed 	beq.w	80299bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8029be2:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8029be6:	9108      	str	r1, [sp, #32]
 8029be8:	0e09      	lsrs	r1, r1, #24
 8029bea:	9110      	str	r1, [sp, #64]	@ 0x40
 8029bec:	e6e6      	b.n	80299bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8029bee:	f807 0c03 	strb.w	r0, [r7, #-3]
 8029bf2:	f807 1c02 	strb.w	r1, [r7, #-2]
 8029bf6:	e7e7      	b.n	8029bc8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 8029bf8:	b019      	add	sp, #100	@ 0x64
 8029bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08029c00 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8029c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029c04:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	@ 0x2c
 8029c08:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8029c0c:	2c00      	cmp	r4, #0
 8029c0e:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 8029c12:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
 8029c16:	fb00 4e03 	mla	lr, r0, r3, r4
 8029c1a:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 8029c1e:	f2c0 80b8 	blt.w	8029d92 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8029c22:	45a1      	cmp	r9, r4
 8029c24:	f340 80b5 	ble.w	8029d92 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8029c28:	2800      	cmp	r0, #0
 8029c2a:	f2c0 80b2 	blt.w	8029d92 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8029c2e:	4580      	cmp	r8, r0
 8029c30:	f340 80af 	ble.w	8029d92 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8029c34:	ea4f 055e 	mov.w	r5, lr, lsr #1
 8029c38:	f01e 0f01 	tst.w	lr, #1
 8029c3c:	5d56      	ldrb	r6, [r2, r5]
 8029c3e:	bf0c      	ite	eq
 8029c40:	f006 060f 	andeq.w	r6, r6, #15
 8029c44:	1136      	asrne	r6, r6, #4
 8029c46:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8029c4a:	b2f6      	uxtb	r6, r6
 8029c4c:	f114 0a01 	adds.w	sl, r4, #1
 8029c50:	f100 80a1 	bmi.w	8029d96 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8029c54:	45d1      	cmp	r9, sl
 8029c56:	f340 809e 	ble.w	8029d96 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8029c5a:	2800      	cmp	r0, #0
 8029c5c:	f2c0 809b 	blt.w	8029d96 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8029c60:	4580      	cmp	r8, r0
 8029c62:	f340 8098 	ble.w	8029d96 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8029c66:	2f00      	cmp	r7, #0
 8029c68:	f000 8097 	beq.w	8029d9a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 8029c6c:	f10e 0b01 	add.w	fp, lr, #1
 8029c70:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8029c74:	f01b 0f01 	tst.w	fp, #1
 8029c78:	5d55      	ldrb	r5, [r2, r5]
 8029c7a:	bf0c      	ite	eq
 8029c7c:	f005 050f 	andeq.w	r5, r5, #15
 8029c80:	112d      	asrne	r5, r5, #4
 8029c82:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8029c86:	b2ed      	uxtb	r5, r5
 8029c88:	f1bc 0f00 	cmp.w	ip, #0
 8029c8c:	f000 8089 	beq.w	8029da2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 8029c90:	2c00      	cmp	r4, #0
 8029c92:	f100 0001 	add.w	r0, r0, #1
 8029c96:	f2c0 8082 	blt.w	8029d9e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8029c9a:	45a1      	cmp	r9, r4
 8029c9c:	dd7f      	ble.n	8029d9e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8029c9e:	2800      	cmp	r0, #0
 8029ca0:	db7d      	blt.n	8029d9e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8029ca2:	4580      	cmp	r8, r0
 8029ca4:	dd7b      	ble.n	8029d9e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8029ca6:	eb03 0b0e 	add.w	fp, r3, lr
 8029caa:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8029cae:	f01b 0f01 	tst.w	fp, #1
 8029cb2:	5d14      	ldrb	r4, [r2, r4]
 8029cb4:	bf0c      	ite	eq
 8029cb6:	f004 040f 	andeq.w	r4, r4, #15
 8029cba:	1124      	asrne	r4, r4, #4
 8029cbc:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8029cc0:	b2e4      	uxtb	r4, r4
 8029cc2:	f1ba 0f00 	cmp.w	sl, #0
 8029cc6:	db6f      	blt.n	8029da8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8029cc8:	45d1      	cmp	r9, sl
 8029cca:	dd6d      	ble.n	8029da8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8029ccc:	2800      	cmp	r0, #0
 8029cce:	db6b      	blt.n	8029da8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8029cd0:	4580      	cmp	r8, r0
 8029cd2:	dd69      	ble.n	8029da8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8029cd4:	2f00      	cmp	r7, #0
 8029cd6:	d069      	beq.n	8029dac <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 8029cd8:	3301      	adds	r3, #1
 8029cda:	449e      	add	lr, r3
 8029cdc:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8029ce0:	f01e 0f01 	tst.w	lr, #1
 8029ce4:	5cd0      	ldrb	r0, [r2, r3]
 8029ce6:	bf0c      	ite	eq
 8029ce8:	f000 000f 	andeq.w	r0, r0, #15
 8029cec:	1100      	asrne	r0, r0, #4
 8029cee:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029cf2:	b2c3      	uxtb	r3, r0
 8029cf4:	b2ba      	uxth	r2, r7
 8029cf6:	fa1f fc8c 	uxth.w	ip, ip
 8029cfa:	fb02 f00c 	mul.w	r0, r2, ip
 8029cfe:	0112      	lsls	r2, r2, #4
 8029d00:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8029d04:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8029d08:	1a12      	subs	r2, r2, r0
 8029d0a:	fa1f fc8c 	uxth.w	ip, ip
 8029d0e:	b292      	uxth	r2, r2
 8029d10:	eba7 070c 	sub.w	r7, r7, ip
 8029d14:	436a      	muls	r2, r5
 8029d16:	b2bf      	uxth	r7, r7
 8029d18:	fb06 2207 	mla	r2, r6, r7, r2
 8029d1c:	fb0c 2404 	mla	r4, ip, r4, r2
 8029d20:	fb00 4303 	mla	r3, r0, r3, r4
 8029d24:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029d28:	b38b      	cbz	r3, 8029d8e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 8029d2a:	4a21      	ldr	r2, [pc, #132]	@ (8029db0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 8029d2c:	6814      	ldr	r4, [r2, #0]
 8029d2e:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 8029d32:	b2e5      	uxtb	r5, r4
 8029d34:	4353      	muls	r3, r2
 8029d36:	1c5a      	adds	r2, r3, #1
 8029d38:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8029d3c:	1212      	asrs	r2, r2, #8
 8029d3e:	b290      	uxth	r0, r2
 8029d40:	43d2      	mvns	r2, r2
 8029d42:	fb15 f500 	smulbb	r5, r5, r0
 8029d46:	b2d3      	uxtb	r3, r2
 8029d48:	780a      	ldrb	r2, [r1, #0]
 8029d4a:	fb02 5203 	mla	r2, r2, r3, r5
 8029d4e:	b292      	uxth	r2, r2
 8029d50:	1c55      	adds	r5, r2, #1
 8029d52:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8029d56:	784d      	ldrb	r5, [r1, #1]
 8029d58:	fb15 f503 	smulbb	r5, r5, r3
 8029d5c:	1212      	asrs	r2, r2, #8
 8029d5e:	700a      	strb	r2, [r1, #0]
 8029d60:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8029d64:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8029d68:	fb02 5200 	mla	r2, r2, r0, r5
 8029d6c:	b292      	uxth	r2, r2
 8029d6e:	1c55      	adds	r5, r2, #1
 8029d70:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8029d74:	1212      	asrs	r2, r2, #8
 8029d76:	704a      	strb	r2, [r1, #1]
 8029d78:	788a      	ldrb	r2, [r1, #2]
 8029d7a:	fb12 f303 	smulbb	r3, r2, r3
 8029d7e:	fb04 3300 	mla	r3, r4, r0, r3
 8029d82:	b29b      	uxth	r3, r3
 8029d84:	1c5a      	adds	r2, r3, #1
 8029d86:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8029d8a:	121b      	asrs	r3, r3, #8
 8029d8c:	708b      	strb	r3, [r1, #2]
 8029d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029d92:	2600      	movs	r6, #0
 8029d94:	e75a      	b.n	8029c4c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 8029d96:	2500      	movs	r5, #0
 8029d98:	e776      	b.n	8029c88 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8029d9a:	463d      	mov	r5, r7
 8029d9c:	e774      	b.n	8029c88 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8029d9e:	2400      	movs	r4, #0
 8029da0:	e78f      	b.n	8029cc2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 8029da2:	4663      	mov	r3, ip
 8029da4:	4664      	mov	r4, ip
 8029da6:	e7a5      	b.n	8029cf4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8029da8:	2300      	movs	r3, #0
 8029daa:	e7a3      	b.n	8029cf4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8029dac:	463b      	mov	r3, r7
 8029dae:	e7a1      	b.n	8029cf4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8029db0:	2403423c 	.word	0x2403423c

08029db4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029db8:	b097      	sub	sp, #92	@ 0x5c
 8029dba:	9214      	str	r2, [sp, #80]	@ 0x50
 8029dbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8029dbe:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8029dc0:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8029dc4:	9015      	str	r0, [sp, #84]	@ 0x54
 8029dc6:	910c      	str	r1, [sp, #48]	@ 0x30
 8029dc8:	6850      	ldr	r0, [r2, #4]
 8029dca:	930e      	str	r3, [sp, #56]	@ 0x38
 8029dcc:	6812      	ldr	r2, [r2, #0]
 8029dce:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 8029dd2:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	@ 0x84
 8029dd6:	fb00 1303 	mla	r3, r0, r3, r1
 8029dda:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8029dde:	eb02 0a03 	add.w	sl, r2, r3
 8029de2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029de4:	689b      	ldr	r3, [r3, #8]
 8029de6:	3301      	adds	r3, #1
 8029de8:	f023 0301 	bic.w	r3, r3, #1
 8029dec:	930f      	str	r3, [sp, #60]	@ 0x3c
 8029dee:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029df0:	681f      	ldr	r7, [r3, #0]
 8029df2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8029df4:	2b00      	cmp	r3, #0
 8029df6:	dc03      	bgt.n	8029e00 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8029df8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8029dfa:	2b00      	cmp	r3, #0
 8029dfc:	f340 8247 	ble.w	802a28e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8029e00:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029e02:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029e06:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029e0a:	1e48      	subs	r0, r1, #1
 8029e0c:	f102 3cff 	add.w	ip, r2, #4294967295
 8029e10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029e12:	2b00      	cmp	r3, #0
 8029e14:	f340 80e5 	ble.w	8029fe2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8029e18:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8029e1c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8029e20:	d406      	bmi.n	8029e30 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8029e22:	4586      	cmp	lr, r0
 8029e24:	da04      	bge.n	8029e30 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8029e26:	2b00      	cmp	r3, #0
 8029e28:	db02      	blt.n	8029e30 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8029e2a:	4563      	cmp	r3, ip
 8029e2c:	f2c0 80da 	blt.w	8029fe4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8029e30:	f11e 0e01 	adds.w	lr, lr, #1
 8029e34:	f100 80cb 	bmi.w	8029fce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8029e38:	4571      	cmp	r1, lr
 8029e3a:	f2c0 80c8 	blt.w	8029fce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8029e3e:	3301      	adds	r3, #1
 8029e40:	f100 80c5 	bmi.w	8029fce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8029e44:	429a      	cmp	r2, r3
 8029e46:	f2c0 80c2 	blt.w	8029fce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8029e4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029e4c:	46d0      	mov	r8, sl
 8029e4e:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 8029e52:	930d      	str	r3, [sp, #52]	@ 0x34
 8029e54:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029e56:	2b00      	cmp	r3, #0
 8029e58:	f340 80e3 	ble.w	802a022 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8029e5c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029e5e:	1430      	asrs	r0, r6, #16
 8029e60:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8029e64:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8029e68:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8029e6c:	142b      	asrs	r3, r5, #16
 8029e6e:	f100 812e 	bmi.w	802a0ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8029e72:	f10c 3bff 	add.w	fp, ip, #4294967295
 8029e76:	455b      	cmp	r3, fp
 8029e78:	f280 8129 	bge.w	802a0ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8029e7c:	2800      	cmp	r0, #0
 8029e7e:	f2c0 8126 	blt.w	802a0ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8029e82:	f10e 3bff 	add.w	fp, lr, #4294967295
 8029e86:	4558      	cmp	r0, fp
 8029e88:	f280 8121 	bge.w	802a0ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8029e8c:	fb00 3309 	mla	r3, r0, r9, r3
 8029e90:	0858      	lsrs	r0, r3, #1
 8029e92:	07dc      	lsls	r4, r3, #31
 8029e94:	f817 c000 	ldrb.w	ip, [r7, r0]
 8029e98:	bf54      	ite	pl
 8029e9a:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029e9e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029ea2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029ea6:	fa5f fc8c 	uxtb.w	ip, ip
 8029eaa:	2a00      	cmp	r2, #0
 8029eac:	f000 80fe 	beq.w	802a0ac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8029eb0:	1c58      	adds	r0, r3, #1
 8029eb2:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8029eb6:	07c0      	lsls	r0, r0, #31
 8029eb8:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8029ebc:	bf54      	ite	pl
 8029ebe:	f00e 0e0f 	andpl.w	lr, lr, #15
 8029ec2:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8029ec6:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8029eca:	fa5f f08e 	uxtb.w	r0, lr
 8029ece:	9010      	str	r0, [sp, #64]	@ 0x40
 8029ed0:	b1d9      	cbz	r1, 8029f0a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8029ed2:	444b      	add	r3, r9
 8029ed4:	0858      	lsrs	r0, r3, #1
 8029ed6:	07dc      	lsls	r4, r3, #31
 8029ed8:	f103 0301 	add.w	r3, r3, #1
 8029edc:	5c38      	ldrb	r0, [r7, r0]
 8029ede:	bf54      	ite	pl
 8029ee0:	f000 000f 	andpl.w	r0, r0, #15
 8029ee4:	1100      	asrmi	r0, r0, #4
 8029ee6:	07dc      	lsls	r4, r3, #31
 8029ee8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029eec:	b2c0      	uxtb	r0, r0
 8029eee:	900a      	str	r0, [sp, #40]	@ 0x28
 8029ef0:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8029ef4:	f817 e000 	ldrb.w	lr, [r7, r0]
 8029ef8:	bf54      	ite	pl
 8029efa:	f00e 030f 	andpl.w	r3, lr, #15
 8029efe:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8029f02:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029f06:	b2db      	uxtb	r3, r3
 8029f08:	9311      	str	r3, [sp, #68]	@ 0x44
 8029f0a:	b292      	uxth	r2, r2
 8029f0c:	b289      	uxth	r1, r1
 8029f0e:	0113      	lsls	r3, r2, #4
 8029f10:	fb02 f001 	mul.w	r0, r2, r1
 8029f14:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8029f16:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8029f1a:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 8029f1e:	1a1b      	subs	r3, r3, r0
 8029f20:	b289      	uxth	r1, r1
 8029f22:	b29b      	uxth	r3, r3
 8029f24:	ebae 0e01 	sub.w	lr, lr, r1
 8029f28:	4353      	muls	r3, r2
 8029f2a:	fa1f fe8e 	uxth.w	lr, lr
 8029f2e:	fb0c 320e 	mla	r2, ip, lr, r3
 8029f32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8029f34:	fb01 2203 	mla	r2, r1, r3, r2
 8029f38:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8029f3a:	fb00 2203 	mla	r2, r0, r3, r2
 8029f3e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8029f42:	2a00      	cmp	r2, #0
 8029f44:	d039      	beq.n	8029fba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8029f46:	4bc7      	ldr	r3, [pc, #796]	@ (802a264 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8029f48:	6819      	ldr	r1, [r3, #0]
 8029f4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8029f4c:	fa5f fc81 	uxtb.w	ip, r1
 8029f50:	435a      	muls	r2, r3
 8029f52:	1c53      	adds	r3, r2, #1
 8029f54:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8029f58:	1212      	asrs	r2, r2, #8
 8029f5a:	b290      	uxth	r0, r2
 8029f5c:	43d2      	mvns	r2, r2
 8029f5e:	fb1c fc00 	smulbb	ip, ip, r0
 8029f62:	b2d3      	uxtb	r3, r2
 8029f64:	f898 2000 	ldrb.w	r2, [r8]
 8029f68:	fb02 c203 	mla	r2, r2, r3, ip
 8029f6c:	b292      	uxth	r2, r2
 8029f6e:	f102 0c01 	add.w	ip, r2, #1
 8029f72:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8029f76:	f898 c001 	ldrb.w	ip, [r8, #1]
 8029f7a:	fb1c fc03 	smulbb	ip, ip, r3
 8029f7e:	1212      	asrs	r2, r2, #8
 8029f80:	f888 2000 	strb.w	r2, [r8]
 8029f84:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8029f88:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8029f8c:	fb02 c200 	mla	r2, r2, r0, ip
 8029f90:	b292      	uxth	r2, r2
 8029f92:	f102 0c01 	add.w	ip, r2, #1
 8029f96:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8029f9a:	1212      	asrs	r2, r2, #8
 8029f9c:	f888 2001 	strb.w	r2, [r8, #1]
 8029fa0:	f898 2002 	ldrb.w	r2, [r8, #2]
 8029fa4:	fb12 f303 	smulbb	r3, r2, r3
 8029fa8:	fb01 3300 	mla	r3, r1, r0, r3
 8029fac:	b29b      	uxth	r3, r3
 8029fae:	1c5a      	adds	r2, r3, #1
 8029fb0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8029fb4:	121b      	asrs	r3, r3, #8
 8029fb6:	f888 3002 	strb.w	r3, [r8, #2]
 8029fba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8029fbc:	f108 0803 	add.w	r8, r8, #3
 8029fc0:	441d      	add	r5, r3
 8029fc2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8029fc4:	441e      	add	r6, r3
 8029fc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029fc8:	3b01      	subs	r3, #1
 8029fca:	930d      	str	r3, [sp, #52]	@ 0x34
 8029fcc:	e742      	b.n	8029e54 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8029fce:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8029fd0:	f10a 0a03 	add.w	sl, sl, #3
 8029fd4:	441d      	add	r5, r3
 8029fd6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8029fd8:	441e      	add	r6, r3
 8029fda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029fdc:	3b01      	subs	r3, #1
 8029fde:	9309      	str	r3, [sp, #36]	@ 0x24
 8029fe0:	e716      	b.n	8029e10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8029fe2:	d024      	beq.n	802a02e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8029fe4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029fe6:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8029fe8:	3b01      	subs	r3, #1
 8029fea:	fb00 5003 	mla	r0, r0, r3, r5
 8029fee:	1400      	asrs	r0, r0, #16
 8029ff0:	f53f af2b 	bmi.w	8029e4a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8029ff4:	3901      	subs	r1, #1
 8029ff6:	4288      	cmp	r0, r1
 8029ff8:	f6bf af27 	bge.w	8029e4a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8029ffc:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8029ffe:	fb01 6303 	mla	r3, r1, r3, r6
 802a002:	141b      	asrs	r3, r3, #16
 802a004:	f53f af21 	bmi.w	8029e4a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802a008:	3a01      	subs	r2, #1
 802a00a:	4293      	cmp	r3, r2
 802a00c:	f6bf af1d 	bge.w	8029e4a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802a010:	f10a 0e03 	add.w	lr, sl, #3
 802a014:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 802a018:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 802a01c:	f1b8 0f00 	cmp.w	r8, #0
 802a020:	dc76      	bgt.n	802a110 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 802a022:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a024:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802a028:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802a02c:	44a2      	add	sl, r4
 802a02e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a030:	2b00      	cmp	r3, #0
 802a032:	f340 812c 	ble.w	802a28e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 802a036:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802a03a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802a03c:	ee30 0a04 	vadd.f32	s0, s0, s8
 802a040:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802a044:	eef0 6a62 	vmov.f32	s13, s5
 802a048:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802a04c:	ee31 1a05 	vadd.f32	s2, s2, s10
 802a050:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a054:	ee16 5a90 	vmov	r5, s13
 802a058:	eef0 6a43 	vmov.f32	s13, s6
 802a05c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a060:	ee16 6a90 	vmov	r6, s13
 802a064:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802a068:	ee61 7a27 	vmul.f32	s15, s2, s15
 802a06c:	ee77 2a62 	vsub.f32	s5, s14, s5
 802a070:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802a074:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802a078:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802a07c:	ee12 2a90 	vmov	r2, s5
 802a080:	eef0 2a47 	vmov.f32	s5, s14
 802a084:	fb92 f3f3 	sdiv	r3, r2, r3
 802a088:	ee13 2a10 	vmov	r2, s6
 802a08c:	9323      	str	r3, [sp, #140]	@ 0x8c
 802a08e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802a090:	eeb0 3a67 	vmov.f32	s6, s15
 802a094:	fb92 f3f3 	sdiv	r3, r2, r3
 802a098:	9324      	str	r3, [sp, #144]	@ 0x90
 802a09a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a09c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802a09e:	3b01      	subs	r3, #1
 802a0a0:	930c      	str	r3, [sp, #48]	@ 0x30
 802a0a2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802a0a4:	bf08      	it	eq
 802a0a6:	4613      	moveq	r3, r2
 802a0a8:	9309      	str	r3, [sp, #36]	@ 0x24
 802a0aa:	e6a2      	b.n	8029df2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 802a0ac:	2900      	cmp	r1, #0
 802a0ae:	f43f af2c 	beq.w	8029f0a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 802a0b2:	eb09 0003 	add.w	r0, r9, r3
 802a0b6:	0843      	lsrs	r3, r0, #1
 802a0b8:	07c0      	lsls	r0, r0, #31
 802a0ba:	5cfb      	ldrb	r3, [r7, r3]
 802a0bc:	bf54      	ite	pl
 802a0be:	f003 030f 	andpl.w	r3, r3, #15
 802a0c2:	111b      	asrmi	r3, r3, #4
 802a0c4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802a0c8:	b2db      	uxtb	r3, r3
 802a0ca:	930a      	str	r3, [sp, #40]	@ 0x28
 802a0cc:	e71d      	b.n	8029f0a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 802a0ce:	f113 0b01 	adds.w	fp, r3, #1
 802a0d2:	f53f af72 	bmi.w	8029fba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802a0d6:	45dc      	cmp	ip, fp
 802a0d8:	f6ff af6f 	blt.w	8029fba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802a0dc:	f110 0b01 	adds.w	fp, r0, #1
 802a0e0:	f53f af6b 	bmi.w	8029fba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802a0e4:	45de      	cmp	lr, fp
 802a0e6:	f6ff af68 	blt.w	8029fba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802a0ea:	9302      	str	r3, [sp, #8]
 802a0ec:	fa0f f38e 	sxth.w	r3, lr
 802a0f0:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802a0f2:	9301      	str	r3, [sp, #4]
 802a0f4:	fa0f f38c 	sxth.w	r3, ip
 802a0f8:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802a0fc:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802a100:	9300      	str	r3, [sp, #0]
 802a102:	463a      	mov	r2, r7
 802a104:	464b      	mov	r3, r9
 802a106:	4641      	mov	r1, r8
 802a108:	9815      	ldr	r0, [sp, #84]	@ 0x54
 802a10a:	f7ff fd79 	bl	8029c00 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 802a10e:	e754      	b.n	8029fba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802a110:	142a      	asrs	r2, r5, #16
 802a112:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802a116:	1433      	asrs	r3, r6, #16
 802a118:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802a11c:	fb09 2303 	mla	r3, r9, r3, r2
 802a120:	085a      	lsrs	r2, r3, #1
 802a122:	07dc      	lsls	r4, r3, #31
 802a124:	5cba      	ldrb	r2, [r7, r2]
 802a126:	bf54      	ite	pl
 802a128:	f002 020f 	andpl.w	r2, r2, #15
 802a12c:	1112      	asrmi	r2, r2, #4
 802a12e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802a132:	b2d2      	uxtb	r2, r2
 802a134:	2900      	cmp	r1, #0
 802a136:	f000 8097 	beq.w	802a268 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802a13a:	f103 0b01 	add.w	fp, r3, #1
 802a13e:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 802a142:	f01b 0f01 	tst.w	fp, #1
 802a146:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802a14a:	bf0c      	ite	eq
 802a14c:	f00c 0c0f 	andeq.w	ip, ip, #15
 802a150:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802a154:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a158:	fa5f f48c 	uxtb.w	r4, ip
 802a15c:	9412      	str	r4, [sp, #72]	@ 0x48
 802a15e:	b300      	cbz	r0, 802a1a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 802a160:	444b      	add	r3, r9
 802a162:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802a166:	07dc      	lsls	r4, r3, #31
 802a168:	f103 0301 	add.w	r3, r3, #1
 802a16c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802a170:	bf54      	ite	pl
 802a172:	f00c 0c0f 	andpl.w	ip, ip, #15
 802a176:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802a17a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a17e:	fa5f f48c 	uxtb.w	r4, ip
 802a182:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802a186:	940b      	str	r4, [sp, #44]	@ 0x2c
 802a188:	07dc      	lsls	r4, r3, #31
 802a18a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802a18e:	bf54      	ite	pl
 802a190:	f00c 0c0f 	andpl.w	ip, ip, #15
 802a194:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802a198:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a19c:	fa5f f38c 	uxtb.w	r3, ip
 802a1a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 802a1a2:	b289      	uxth	r1, r1
 802a1a4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802a1a6:	b280      	uxth	r0, r0
 802a1a8:	fb01 f300 	mul.w	r3, r1, r0
 802a1ac:	0109      	lsls	r1, r1, #4
 802a1ae:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802a1b2:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 802a1b6:	1ac9      	subs	r1, r1, r3
 802a1b8:	b280      	uxth	r0, r0
 802a1ba:	b289      	uxth	r1, r1
 802a1bc:	ebac 0c00 	sub.w	ip, ip, r0
 802a1c0:	4361      	muls	r1, r4
 802a1c2:	fa1f fc8c 	uxth.w	ip, ip
 802a1c6:	fb02 120c 	mla	r2, r2, ip, r1
 802a1ca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802a1cc:	fb00 2001 	mla	r0, r0, r1, r2
 802a1d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802a1d2:	fb03 0302 	mla	r3, r3, r2, r0
 802a1d6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a1da:	2b00      	cmp	r3, #0
 802a1dc:	d039      	beq.n	802a252 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 802a1de:	4a21      	ldr	r2, [pc, #132]	@ (802a264 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 802a1e0:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 802a1e4:	6810      	ldr	r0, [r2, #0]
 802a1e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802a1e8:	fa5f fc80 	uxtb.w	ip, r0
 802a1ec:	4353      	muls	r3, r2
 802a1ee:	1c5a      	adds	r2, r3, #1
 802a1f0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802a1f4:	121b      	asrs	r3, r3, #8
 802a1f6:	b29a      	uxth	r2, r3
 802a1f8:	43db      	mvns	r3, r3
 802a1fa:	fb1c fc02 	smulbb	ip, ip, r2
 802a1fe:	b2db      	uxtb	r3, r3
 802a200:	fb01 c103 	mla	r1, r1, r3, ip
 802a204:	b289      	uxth	r1, r1
 802a206:	f101 0c01 	add.w	ip, r1, #1
 802a20a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802a20e:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 802a212:	fb1c fc03 	smulbb	ip, ip, r3
 802a216:	1209      	asrs	r1, r1, #8
 802a218:	f80e 1c03 	strb.w	r1, [lr, #-3]
 802a21c:	f3c0 2107 	ubfx	r1, r0, #8, #8
 802a220:	f3c0 4007 	ubfx	r0, r0, #16, #8
 802a224:	fb01 c102 	mla	r1, r1, r2, ip
 802a228:	b289      	uxth	r1, r1
 802a22a:	f101 0c01 	add.w	ip, r1, #1
 802a22e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802a232:	1209      	asrs	r1, r1, #8
 802a234:	f80e 1c02 	strb.w	r1, [lr, #-2]
 802a238:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 802a23c:	fb11 f303 	smulbb	r3, r1, r3
 802a240:	fb00 3002 	mla	r0, r0, r2, r3
 802a244:	b280      	uxth	r0, r0
 802a246:	1c42      	adds	r2, r0, #1
 802a248:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802a24c:	1200      	asrs	r0, r0, #8
 802a24e:	f80e 0c01 	strb.w	r0, [lr, #-1]
 802a252:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802a254:	f10e 0e03 	add.w	lr, lr, #3
 802a258:	f108 38ff 	add.w	r8, r8, #4294967295
 802a25c:	441d      	add	r5, r3
 802a25e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a260:	441e      	add	r6, r3
 802a262:	e6db      	b.n	802a01c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 802a264:	2403423c 	.word	0x2403423c
 802a268:	2800      	cmp	r0, #0
 802a26a:	d09a      	beq.n	802a1a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 802a26c:	444b      	add	r3, r9
 802a26e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802a272:	07db      	lsls	r3, r3, #31
 802a274:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802a278:	bf54      	ite	pl
 802a27a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802a27e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802a282:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a286:	fa5f f38c 	uxtb.w	r3, ip
 802a28a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802a28c:	e789      	b.n	802a1a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 802a28e:	b017      	add	sp, #92	@ 0x5c
 802a290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802a294 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 802a294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a298:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
 802a29c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802a2a0:	2d00      	cmp	r5, #0
 802a2a2:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 802a2a6:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 802a2aa:	fb04 5e03 	mla	lr, r4, r3, r5
 802a2ae:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 802a2b2:	f2c0 80b1 	blt.w	802a418 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 802a2b6:	45a9      	cmp	r9, r5
 802a2b8:	f340 80ae 	ble.w	802a418 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 802a2bc:	2c00      	cmp	r4, #0
 802a2be:	f2c0 80ab 	blt.w	802a418 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 802a2c2:	45a0      	cmp	r8, r4
 802a2c4:	f340 80a8 	ble.w	802a418 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 802a2c8:	ea4f 065e 	mov.w	r6, lr, lsr #1
 802a2cc:	f01e 0f01 	tst.w	lr, #1
 802a2d0:	5d97      	ldrb	r7, [r2, r6]
 802a2d2:	bf0c      	ite	eq
 802a2d4:	f007 070f 	andeq.w	r7, r7, #15
 802a2d8:	113f      	asrne	r7, r7, #4
 802a2da:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 802a2de:	b2ff      	uxtb	r7, r7
 802a2e0:	f115 0a01 	adds.w	sl, r5, #1
 802a2e4:	f100 809a 	bmi.w	802a41c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 802a2e8:	45d1      	cmp	r9, sl
 802a2ea:	f340 8097 	ble.w	802a41c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 802a2ee:	2c00      	cmp	r4, #0
 802a2f0:	f2c0 8094 	blt.w	802a41c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 802a2f4:	45a0      	cmp	r8, r4
 802a2f6:	f340 8091 	ble.w	802a41c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 802a2fa:	2800      	cmp	r0, #0
 802a2fc:	f000 8090 	beq.w	802a420 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 802a300:	f10e 0b01 	add.w	fp, lr, #1
 802a304:	ea4f 065b 	mov.w	r6, fp, lsr #1
 802a308:	f01b 0f01 	tst.w	fp, #1
 802a30c:	5d96      	ldrb	r6, [r2, r6]
 802a30e:	bf0c      	ite	eq
 802a310:	f006 060f 	andeq.w	r6, r6, #15
 802a314:	1136      	asrne	r6, r6, #4
 802a316:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802a31a:	b2f6      	uxtb	r6, r6
 802a31c:	f1bc 0f00 	cmp.w	ip, #0
 802a320:	f000 8082 	beq.w	802a428 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 802a324:	2d00      	cmp	r5, #0
 802a326:	f104 0401 	add.w	r4, r4, #1
 802a32a:	db7b      	blt.n	802a424 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 802a32c:	45a9      	cmp	r9, r5
 802a32e:	dd79      	ble.n	802a424 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 802a330:	2c00      	cmp	r4, #0
 802a332:	db77      	blt.n	802a424 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 802a334:	45a0      	cmp	r8, r4
 802a336:	dd75      	ble.n	802a424 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 802a338:	eb03 0b0e 	add.w	fp, r3, lr
 802a33c:	ea4f 055b 	mov.w	r5, fp, lsr #1
 802a340:	f01b 0f01 	tst.w	fp, #1
 802a344:	5d55      	ldrb	r5, [r2, r5]
 802a346:	bf0c      	ite	eq
 802a348:	f005 050f 	andeq.w	r5, r5, #15
 802a34c:	112d      	asrne	r5, r5, #4
 802a34e:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802a352:	b2ed      	uxtb	r5, r5
 802a354:	f1ba 0f00 	cmp.w	sl, #0
 802a358:	db69      	blt.n	802a42e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 802a35a:	45d1      	cmp	r9, sl
 802a35c:	dd67      	ble.n	802a42e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 802a35e:	2c00      	cmp	r4, #0
 802a360:	db65      	blt.n	802a42e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 802a362:	45a0      	cmp	r8, r4
 802a364:	dd63      	ble.n	802a42e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 802a366:	2800      	cmp	r0, #0
 802a368:	d063      	beq.n	802a432 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 802a36a:	3301      	adds	r3, #1
 802a36c:	449e      	add	lr, r3
 802a36e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802a372:	f01e 0f01 	tst.w	lr, #1
 802a376:	5cd4      	ldrb	r4, [r2, r3]
 802a378:	bf0c      	ite	eq
 802a37a:	f004 040f 	andeq.w	r4, r4, #15
 802a37e:	1124      	asrne	r4, r4, #4
 802a380:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802a384:	b2e3      	uxtb	r3, r4
 802a386:	b282      	uxth	r2, r0
 802a388:	fa1f fc8c 	uxth.w	ip, ip
 802a38c:	fb02 f40c 	mul.w	r4, r2, ip
 802a390:	0112      	lsls	r2, r2, #4
 802a392:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 802a396:	fa1f f08c 	uxth.w	r0, ip
 802a39a:	f5c2 7c80 	rsb	ip, r2, #256	@ 0x100
 802a39e:	1b12      	subs	r2, r2, r4
 802a3a0:	ebac 0c00 	sub.w	ip, ip, r0
 802a3a4:	b292      	uxth	r2, r2
 802a3a6:	fa1f fc8c 	uxth.w	ip, ip
 802a3aa:	4372      	muls	r2, r6
 802a3ac:	fb07 220c 	mla	r2, r7, ip, r2
 802a3b0:	fb00 2005 	mla	r0, r0, r5, r2
 802a3b4:	fb04 0303 	mla	r3, r4, r3, r0
 802a3b8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a3bc:	b353      	cbz	r3, 802a414 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 802a3be:	4a1e      	ldr	r2, [pc, #120]	@ (802a438 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 802a3c0:	7808      	ldrb	r0, [r1, #0]
 802a3c2:	6814      	ldr	r4, [r2, #0]
 802a3c4:	b29a      	uxth	r2, r3
 802a3c6:	43db      	mvns	r3, r3
 802a3c8:	b2e5      	uxtb	r5, r4
 802a3ca:	b2db      	uxtb	r3, r3
 802a3cc:	fb15 f502 	smulbb	r5, r5, r2
 802a3d0:	fb00 5003 	mla	r0, r0, r3, r5
 802a3d4:	b280      	uxth	r0, r0
 802a3d6:	1c45      	adds	r5, r0, #1
 802a3d8:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802a3dc:	784d      	ldrb	r5, [r1, #1]
 802a3de:	fb15 f503 	smulbb	r5, r5, r3
 802a3e2:	1200      	asrs	r0, r0, #8
 802a3e4:	7008      	strb	r0, [r1, #0]
 802a3e6:	f3c4 2007 	ubfx	r0, r4, #8, #8
 802a3ea:	f3c4 4407 	ubfx	r4, r4, #16, #8
 802a3ee:	fb00 5002 	mla	r0, r0, r2, r5
 802a3f2:	b280      	uxth	r0, r0
 802a3f4:	1c45      	adds	r5, r0, #1
 802a3f6:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802a3fa:	1200      	asrs	r0, r0, #8
 802a3fc:	7048      	strb	r0, [r1, #1]
 802a3fe:	7888      	ldrb	r0, [r1, #2]
 802a400:	fb10 f303 	smulbb	r3, r0, r3
 802a404:	fb04 3202 	mla	r2, r4, r2, r3
 802a408:	b292      	uxth	r2, r2
 802a40a:	1c53      	adds	r3, r2, #1
 802a40c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802a410:	1212      	asrs	r2, r2, #8
 802a412:	708a      	strb	r2, [r1, #2]
 802a414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a418:	2700      	movs	r7, #0
 802a41a:	e761      	b.n	802a2e0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 802a41c:	2600      	movs	r6, #0
 802a41e:	e77d      	b.n	802a31c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 802a420:	4606      	mov	r6, r0
 802a422:	e77b      	b.n	802a31c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 802a424:	2500      	movs	r5, #0
 802a426:	e795      	b.n	802a354 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 802a428:	4663      	mov	r3, ip
 802a42a:	4665      	mov	r5, ip
 802a42c:	e7ab      	b.n	802a386 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 802a42e:	2300      	movs	r3, #0
 802a430:	e7a9      	b.n	802a386 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 802a432:	4603      	mov	r3, r0
 802a434:	e7a7      	b.n	802a386 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 802a436:	bf00      	nop
 802a438:	2403423c 	.word	0x2403423c

0802a43c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802a43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a440:	b093      	sub	sp, #76	@ 0x4c
 802a442:	461c      	mov	r4, r3
 802a444:	920c      	str	r2, [sp, #48]	@ 0x30
 802a446:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802a448:	9011      	str	r0, [sp, #68]	@ 0x44
 802a44a:	9107      	str	r1, [sp, #28]
 802a44c:	6850      	ldr	r0, [r2, #4]
 802a44e:	6812      	ldr	r2, [r2, #0]
 802a450:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 802a454:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	@ 0x74
 802a458:	fb00 1303 	mla	r3, r0, r3, r1
 802a45c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802a460:	eb02 0b03 	add.w	fp, r2, r3
 802a464:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a466:	689b      	ldr	r3, [r3, #8]
 802a468:	3301      	adds	r3, #1
 802a46a:	f023 0301 	bic.w	r3, r3, #1
 802a46e:	9309      	str	r3, [sp, #36]	@ 0x24
 802a470:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a472:	f8d3 8000 	ldr.w	r8, [r3]
 802a476:	9b07      	ldr	r3, [sp, #28]
 802a478:	2b00      	cmp	r3, #0
 802a47a:	dc03      	bgt.n	802a484 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802a47c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a47e:	2b00      	cmp	r3, #0
 802a480:	f340 822b 	ble.w	802a8da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 802a484:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a486:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802a48a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802a48e:	1e48      	subs	r0, r1, #1
 802a490:	1e57      	subs	r7, r2, #1
 802a492:	2c00      	cmp	r4, #0
 802a494:	f340 80d7 	ble.w	802a646 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 802a498:	ea5f 4c25 	movs.w	ip, r5, asr #16
 802a49c:	ea4f 4326 	mov.w	r3, r6, asr #16
 802a4a0:	d406      	bmi.n	802a4b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802a4a2:	4584      	cmp	ip, r0
 802a4a4:	da04      	bge.n	802a4b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802a4a6:	2b00      	cmp	r3, #0
 802a4a8:	db02      	blt.n	802a4b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802a4aa:	42bb      	cmp	r3, r7
 802a4ac:	f2c0 80cc 	blt.w	802a648 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 802a4b0:	f11c 0c01 	adds.w	ip, ip, #1
 802a4b4:	f100 80bf 	bmi.w	802a636 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802a4b8:	4561      	cmp	r1, ip
 802a4ba:	f2c0 80bc 	blt.w	802a636 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802a4be:	3301      	adds	r3, #1
 802a4c0:	f100 80b9 	bmi.w	802a636 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802a4c4:	429a      	cmp	r2, r3
 802a4c6:	f2c0 80b6 	blt.w	802a636 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802a4ca:	46a2      	mov	sl, r4
 802a4cc:	465f      	mov	r7, fp
 802a4ce:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802a4d2:	f1ba 0f00 	cmp.w	sl, #0
 802a4d6:	f340 80d4 	ble.w	802a682 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 802a4da:	f3c5 3303 	ubfx	r3, r5, #12, #4
 802a4de:	1430      	asrs	r0, r6, #16
 802a4e0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802a4e4:	9308      	str	r3, [sp, #32]
 802a4e6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a4e8:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802a4ec:	142b      	asrs	r3, r5, #16
 802a4ee:	f100 8124 	bmi.w	802a73a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802a4f2:	f10c 32ff 	add.w	r2, ip, #4294967295
 802a4f6:	4293      	cmp	r3, r2
 802a4f8:	f280 811f 	bge.w	802a73a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802a4fc:	2800      	cmp	r0, #0
 802a4fe:	f2c0 811c 	blt.w	802a73a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802a502:	f10e 32ff 	add.w	r2, lr, #4294967295
 802a506:	4290      	cmp	r0, r2
 802a508:	f280 8117 	bge.w	802a73a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802a50c:	fb00 3309 	mla	r3, r0, r9, r3
 802a510:	0858      	lsrs	r0, r3, #1
 802a512:	07da      	lsls	r2, r3, #31
 802a514:	9a08      	ldr	r2, [sp, #32]
 802a516:	f818 c000 	ldrb.w	ip, [r8, r0]
 802a51a:	bf54      	ite	pl
 802a51c:	f00c 0c0f 	andpl.w	ip, ip, #15
 802a520:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802a524:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a528:	fa5f fc8c 	uxtb.w	ip, ip
 802a52c:	2a00      	cmp	r2, #0
 802a52e:	f000 80ed 	beq.w	802a70c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 802a532:	1c58      	adds	r0, r3, #1
 802a534:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802a538:	07c0      	lsls	r0, r0, #31
 802a53a:	f818 e00e 	ldrb.w	lr, [r8, lr]
 802a53e:	bf54      	ite	pl
 802a540:	f00e 0e0f 	andpl.w	lr, lr, #15
 802a544:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802a548:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802a54c:	fa5f fe8e 	uxtb.w	lr, lr
 802a550:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 802a554:	b1c9      	cbz	r1, 802a58a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802a556:	444b      	add	r3, r9
 802a558:	0858      	lsrs	r0, r3, #1
 802a55a:	07da      	lsls	r2, r3, #31
 802a55c:	f818 0000 	ldrb.w	r0, [r8, r0]
 802a560:	bf54      	ite	pl
 802a562:	f000 000f 	andpl.w	r0, r0, #15
 802a566:	1100      	asrmi	r0, r0, #4
 802a568:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802a56c:	b2c0      	uxtb	r0, r0
 802a56e:	900a      	str	r0, [sp, #40]	@ 0x28
 802a570:	1c58      	adds	r0, r3, #1
 802a572:	0843      	lsrs	r3, r0, #1
 802a574:	07c2      	lsls	r2, r0, #31
 802a576:	f818 3003 	ldrb.w	r3, [r8, r3]
 802a57a:	bf54      	ite	pl
 802a57c:	f003 030f 	andpl.w	r3, r3, #15
 802a580:	111b      	asrmi	r3, r3, #4
 802a582:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802a586:	b2db      	uxtb	r3, r3
 802a588:	930e      	str	r3, [sp, #56]	@ 0x38
 802a58a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802a58e:	b289      	uxth	r1, r1
 802a590:	fb02 f301 	mul.w	r3, r2, r1
 802a594:	0112      	lsls	r2, r2, #4
 802a596:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802a59a:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 802a59e:	1ad2      	subs	r2, r2, r3
 802a5a0:	b289      	uxth	r1, r1
 802a5a2:	b292      	uxth	r2, r2
 802a5a4:	1a40      	subs	r0, r0, r1
 802a5a6:	fa1f fe80 	uxth.w	lr, r0
 802a5aa:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802a5ac:	4342      	muls	r2, r0
 802a5ae:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802a5b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802a5b4:	fb01 c102 	mla	r1, r1, r2, ip
 802a5b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802a5ba:	fb03 1302 	mla	r3, r3, r2, r1
 802a5be:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a5c2:	b383      	cbz	r3, 802a626 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802a5c4:	4ac6      	ldr	r2, [pc, #792]	@ (802a8e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 802a5c6:	2bff      	cmp	r3, #255	@ 0xff
 802a5c8:	6812      	ldr	r2, [r2, #0]
 802a5ca:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 802a5ce:	f3c2 2007 	ubfx	r0, r2, #8, #8
 802a5d2:	b2d2      	uxtb	r2, r2
 802a5d4:	f000 80ac 	beq.w	802a730 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802a5d8:	b299      	uxth	r1, r3
 802a5da:	43db      	mvns	r3, r3
 802a5dc:	f897 c000 	ldrb.w	ip, [r7]
 802a5e0:	fb12 f201 	smulbb	r2, r2, r1
 802a5e4:	b2db      	uxtb	r3, r3
 802a5e6:	fb10 f001 	smulbb	r0, r0, r1
 802a5ea:	fb0c 2203 	mla	r2, ip, r3, r2
 802a5ee:	fb1e f101 	smulbb	r1, lr, r1
 802a5f2:	b292      	uxth	r2, r2
 802a5f4:	f102 0c01 	add.w	ip, r2, #1
 802a5f8:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802a5fc:	1212      	asrs	r2, r2, #8
 802a5fe:	703a      	strb	r2, [r7, #0]
 802a600:	787a      	ldrb	r2, [r7, #1]
 802a602:	fb02 0003 	mla	r0, r2, r3, r0
 802a606:	b280      	uxth	r0, r0
 802a608:	1c42      	adds	r2, r0, #1
 802a60a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802a60e:	78ba      	ldrb	r2, [r7, #2]
 802a610:	fb02 1303 	mla	r3, r2, r3, r1
 802a614:	1200      	asrs	r0, r0, #8
 802a616:	b29b      	uxth	r3, r3
 802a618:	7078      	strb	r0, [r7, #1]
 802a61a:	f103 0e01 	add.w	lr, r3, #1
 802a61e:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 802a622:	121b      	asrs	r3, r3, #8
 802a624:	70bb      	strb	r3, [r7, #2]
 802a626:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802a628:	3703      	adds	r7, #3
 802a62a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802a62e:	441d      	add	r5, r3
 802a630:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802a632:	441e      	add	r6, r3
 802a634:	e74d      	b.n	802a4d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802a636:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802a638:	3c01      	subs	r4, #1
 802a63a:	f10b 0b03 	add.w	fp, fp, #3
 802a63e:	441d      	add	r5, r3
 802a640:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802a642:	441e      	add	r6, r3
 802a644:	e725      	b.n	802a492 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 802a646:	d021      	beq.n	802a68c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 802a648:	1e63      	subs	r3, r4, #1
 802a64a:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 802a64c:	fb00 5003 	mla	r0, r0, r3, r5
 802a650:	1400      	asrs	r0, r0, #16
 802a652:	f53f af3a 	bmi.w	802a4ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802a656:	3901      	subs	r1, #1
 802a658:	4288      	cmp	r0, r1
 802a65a:	f6bf af36 	bge.w	802a4ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802a65e:	9920      	ldr	r1, [sp, #128]	@ 0x80
 802a660:	fb01 6303 	mla	r3, r1, r3, r6
 802a664:	141b      	asrs	r3, r3, #16
 802a666:	f53f af30 	bmi.w	802a4ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802a66a:	3a01      	subs	r2, #1
 802a66c:	4293      	cmp	r3, r2
 802a66e:	f6bf af2c 	bge.w	802a4ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802a672:	f10b 0c03 	add.w	ip, fp, #3
 802a676:	46a6      	mov	lr, r4
 802a678:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802a67c:	f1be 0f00 	cmp.w	lr, #0
 802a680:	dc79      	bgt.n	802a776 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 802a682:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 802a686:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802a68a:	44a3      	add	fp, r4
 802a68c:	9b07      	ldr	r3, [sp, #28]
 802a68e:	2b00      	cmp	r3, #0
 802a690:	f340 8123 	ble.w	802a8da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 802a694:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802a698:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802a69a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802a69e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802a6a2:	eef0 6a62 	vmov.f32	s13, s5
 802a6a6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802a6aa:	ee31 1a05 	vadd.f32	s2, s2, s10
 802a6ae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a6b2:	ee16 5a90 	vmov	r5, s13
 802a6b6:	eef0 6a43 	vmov.f32	s13, s6
 802a6ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a6be:	ee16 6a90 	vmov	r6, s13
 802a6c2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802a6c6:	ee61 7a27 	vmul.f32	s15, s2, s15
 802a6ca:	ee77 2a62 	vsub.f32	s5, s14, s5
 802a6ce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802a6d2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802a6d6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802a6da:	ee12 2a90 	vmov	r2, s5
 802a6de:	eef0 2a47 	vmov.f32	s5, s14
 802a6e2:	fb92 f3f3 	sdiv	r3, r2, r3
 802a6e6:	ee13 2a10 	vmov	r2, s6
 802a6ea:	931f      	str	r3, [sp, #124]	@ 0x7c
 802a6ec:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802a6ee:	eeb0 3a67 	vmov.f32	s6, s15
 802a6f2:	fb92 f3f3 	sdiv	r3, r2, r3
 802a6f6:	9320      	str	r3, [sp, #128]	@ 0x80
 802a6f8:	9b07      	ldr	r3, [sp, #28]
 802a6fa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802a6fc:	3b01      	subs	r3, #1
 802a6fe:	9307      	str	r3, [sp, #28]
 802a700:	bf08      	it	eq
 802a702:	4614      	moveq	r4, r2
 802a704:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802a706:	bf18      	it	ne
 802a708:	461c      	movne	r4, r3
 802a70a:	e6b4      	b.n	802a476 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802a70c:	2900      	cmp	r1, #0
 802a70e:	f43f af3c 	beq.w	802a58a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802a712:	eb09 0003 	add.w	r0, r9, r3
 802a716:	0843      	lsrs	r3, r0, #1
 802a718:	07c0      	lsls	r0, r0, #31
 802a71a:	f818 3003 	ldrb.w	r3, [r8, r3]
 802a71e:	bf54      	ite	pl
 802a720:	f003 030f 	andpl.w	r3, r3, #15
 802a724:	111b      	asrmi	r3, r3, #4
 802a726:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802a72a:	b2db      	uxtb	r3, r3
 802a72c:	930a      	str	r3, [sp, #40]	@ 0x28
 802a72e:	e72c      	b.n	802a58a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802a730:	703a      	strb	r2, [r7, #0]
 802a732:	7078      	strb	r0, [r7, #1]
 802a734:	f887 e002 	strb.w	lr, [r7, #2]
 802a738:	e775      	b.n	802a626 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802a73a:	1c5a      	adds	r2, r3, #1
 802a73c:	f53f af73 	bmi.w	802a626 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802a740:	4594      	cmp	ip, r2
 802a742:	f6ff af70 	blt.w	802a626 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802a746:	1c42      	adds	r2, r0, #1
 802a748:	f53f af6d 	bmi.w	802a626 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802a74c:	4596      	cmp	lr, r2
 802a74e:	f6ff af6a 	blt.w	802a626 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802a752:	9302      	str	r3, [sp, #8]
 802a754:	fa0f f38e 	sxth.w	r3, lr
 802a758:	9a08      	ldr	r2, [sp, #32]
 802a75a:	9301      	str	r3, [sp, #4]
 802a75c:	fa0f f38c 	sxth.w	r3, ip
 802a760:	9105      	str	r1, [sp, #20]
 802a762:	4639      	mov	r1, r7
 802a764:	9300      	str	r3, [sp, #0]
 802a766:	464b      	mov	r3, r9
 802a768:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802a76c:	4642      	mov	r2, r8
 802a76e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 802a770:	f7ff fd90 	bl	802a294 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 802a774:	e757      	b.n	802a626 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802a776:	142a      	asrs	r2, r5, #16
 802a778:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802a77c:	1433      	asrs	r3, r6, #16
 802a77e:	f3c6 3703 	ubfx	r7, r6, #12, #4
 802a782:	fb09 2303 	mla	r3, r9, r3, r2
 802a786:	085a      	lsrs	r2, r3, #1
 802a788:	07d9      	lsls	r1, r3, #31
 802a78a:	f818 2002 	ldrb.w	r2, [r8, r2]
 802a78e:	bf54      	ite	pl
 802a790:	f002 020f 	andpl.w	r2, r2, #15
 802a794:	1112      	asrmi	r2, r2, #4
 802a796:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802a79a:	b2d2      	uxtb	r2, r2
 802a79c:	2800      	cmp	r0, #0
 802a79e:	f000 8085 	beq.w	802a8ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 802a7a2:	f103 0a01 	add.w	sl, r3, #1
 802a7a6:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802a7aa:	f01a 0f01 	tst.w	sl, #1
 802a7ae:	f818 1001 	ldrb.w	r1, [r8, r1]
 802a7b2:	bf0c      	ite	eq
 802a7b4:	f001 010f 	andeq.w	r1, r1, #15
 802a7b8:	1109      	asrne	r1, r1, #4
 802a7ba:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a7be:	b2c9      	uxtb	r1, r1
 802a7c0:	910f      	str	r1, [sp, #60]	@ 0x3c
 802a7c2:	b1df      	cbz	r7, 802a7fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 802a7c4:	444b      	add	r3, r9
 802a7c6:	0859      	lsrs	r1, r3, #1
 802a7c8:	f013 0f01 	tst.w	r3, #1
 802a7cc:	f103 0301 	add.w	r3, r3, #1
 802a7d0:	f818 1001 	ldrb.w	r1, [r8, r1]
 802a7d4:	bf0c      	ite	eq
 802a7d6:	f001 010f 	andeq.w	r1, r1, #15
 802a7da:	1109      	asrne	r1, r1, #4
 802a7dc:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a7e0:	b2c9      	uxtb	r1, r1
 802a7e2:	910b      	str	r1, [sp, #44]	@ 0x2c
 802a7e4:	0859      	lsrs	r1, r3, #1
 802a7e6:	07db      	lsls	r3, r3, #31
 802a7e8:	f818 1001 	ldrb.w	r1, [r8, r1]
 802a7ec:	bf54      	ite	pl
 802a7ee:	f001 010f 	andpl.w	r1, r1, #15
 802a7f2:	1109      	asrmi	r1, r1, #4
 802a7f4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a7f8:	b2c9      	uxtb	r1, r1
 802a7fa:	9110      	str	r1, [sp, #64]	@ 0x40
 802a7fc:	b280      	uxth	r0, r0
 802a7fe:	b2bf      	uxth	r7, r7
 802a800:	fb00 f307 	mul.w	r3, r0, r7
 802a804:	0100      	lsls	r0, r0, #4
 802a806:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 802a80a:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 802a80e:	1ac0      	subs	r0, r0, r3
 802a810:	b2bf      	uxth	r7, r7
 802a812:	b280      	uxth	r0, r0
 802a814:	1bc9      	subs	r1, r1, r7
 802a816:	fa1f fa81 	uxth.w	sl, r1
 802a81a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802a81c:	4348      	muls	r0, r1
 802a81e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802a820:	fb02 020a 	mla	r2, r2, sl, r0
 802a824:	fb07 2701 	mla	r7, r7, r1, r2
 802a828:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802a82a:	fb03 7302 	mla	r3, r3, r2, r7
 802a82e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a832:	b393      	cbz	r3, 802a89a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 802a834:	4a2a      	ldr	r2, [pc, #168]	@ (802a8e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 802a836:	2bff      	cmp	r3, #255	@ 0xff
 802a838:	6811      	ldr	r1, [r2, #0]
 802a83a:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 802a83e:	f3c1 2707 	ubfx	r7, r1, #8, #8
 802a842:	b2c9      	uxtb	r1, r1
 802a844:	d042      	beq.n	802a8cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 802a846:	b298      	uxth	r0, r3
 802a848:	43db      	mvns	r3, r3
 802a84a:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 802a84e:	fb11 f100 	smulbb	r1, r1, r0
 802a852:	b2db      	uxtb	r3, r3
 802a854:	fb17 f700 	smulbb	r7, r7, r0
 802a858:	fb02 1103 	mla	r1, r2, r3, r1
 802a85c:	fb1a f000 	smulbb	r0, sl, r0
 802a860:	b289      	uxth	r1, r1
 802a862:	1c4a      	adds	r2, r1, #1
 802a864:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802a868:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 802a86c:	fb02 7703 	mla	r7, r2, r3, r7
 802a870:	1209      	asrs	r1, r1, #8
 802a872:	b2bf      	uxth	r7, r7
 802a874:	f80c 1c03 	strb.w	r1, [ip, #-3]
 802a878:	1c7a      	adds	r2, r7, #1
 802a87a:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 802a87e:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 802a882:	fb02 0303 	mla	r3, r2, r3, r0
 802a886:	123f      	asrs	r7, r7, #8
 802a888:	b29b      	uxth	r3, r3
 802a88a:	f80c 7c02 	strb.w	r7, [ip, #-2]
 802a88e:	1c5a      	adds	r2, r3, #1
 802a890:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802a894:	121b      	asrs	r3, r3, #8
 802a896:	f80c 3c01 	strb.w	r3, [ip, #-1]
 802a89a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802a89c:	f10c 0c03 	add.w	ip, ip, #3
 802a8a0:	f10e 3eff 	add.w	lr, lr, #4294967295
 802a8a4:	441d      	add	r5, r3
 802a8a6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802a8a8:	441e      	add	r6, r3
 802a8aa:	e6e7      	b.n	802a67c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802a8ac:	2f00      	cmp	r7, #0
 802a8ae:	d0a5      	beq.n	802a7fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 802a8b0:	444b      	add	r3, r9
 802a8b2:	0859      	lsrs	r1, r3, #1
 802a8b4:	07db      	lsls	r3, r3, #31
 802a8b6:	f818 1001 	ldrb.w	r1, [r8, r1]
 802a8ba:	bf54      	ite	pl
 802a8bc:	f001 010f 	andpl.w	r1, r1, #15
 802a8c0:	1109      	asrmi	r1, r1, #4
 802a8c2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a8c6:	b2c9      	uxtb	r1, r1
 802a8c8:	910b      	str	r1, [sp, #44]	@ 0x2c
 802a8ca:	e797      	b.n	802a7fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 802a8cc:	f80c 1c03 	strb.w	r1, [ip, #-3]
 802a8d0:	f80c 7c02 	strb.w	r7, [ip, #-2]
 802a8d4:	f80c ac01 	strb.w	sl, [ip, #-1]
 802a8d8:	e7df      	b.n	802a89a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 802a8da:	b013      	add	sp, #76	@ 0x4c
 802a8dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a8e0:	2403423c 	.word	0x2403423c

0802a8e4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>:
 802a8e4:	b530      	push	{r4, r5, lr}
 802a8e6:	b29d      	uxth	r5, r3
 802a8e8:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 802a8ec:	780c      	ldrb	r4, [r1, #0]
 802a8ee:	b298      	uxth	r0, r3
 802a8f0:	7813      	ldrb	r3, [r2, #0]
 802a8f2:	fb14 f405 	smulbb	r4, r4, r5
 802a8f6:	fb13 f300 	smulbb	r3, r3, r0
 802a8fa:	441c      	add	r4, r3
 802a8fc:	b2a4      	uxth	r4, r4
 802a8fe:	1c63      	adds	r3, r4, #1
 802a900:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802a904:	7853      	ldrb	r3, [r2, #1]
 802a906:	fb13 f300 	smulbb	r3, r3, r0
 802a90a:	1224      	asrs	r4, r4, #8
 802a90c:	7014      	strb	r4, [r2, #0]
 802a90e:	784c      	ldrb	r4, [r1, #1]
 802a910:	fb14 f405 	smulbb	r4, r4, r5
 802a914:	441c      	add	r4, r3
 802a916:	b2a4      	uxth	r4, r4
 802a918:	1c63      	adds	r3, r4, #1
 802a91a:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802a91e:	1224      	asrs	r4, r4, #8
 802a920:	7054      	strb	r4, [r2, #1]
 802a922:	788b      	ldrb	r3, [r1, #2]
 802a924:	7891      	ldrb	r1, [r2, #2]
 802a926:	fb13 f305 	smulbb	r3, r3, r5
 802a92a:	fb11 f000 	smulbb	r0, r1, r0
 802a92e:	4403      	add	r3, r0
 802a930:	b29b      	uxth	r3, r3
 802a932:	1c59      	adds	r1, r3, #1
 802a934:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802a938:	121b      	asrs	r3, r3, #8
 802a93a:	7093      	strb	r3, [r2, #2]
 802a93c:	bd30      	pop	{r4, r5, pc}
	...

0802a940 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 802a940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a944:	461c      	mov	r4, r3
 802a946:	b08b      	sub	sp, #44	@ 0x2c
 802a948:	460e      	mov	r6, r1
 802a94a:	4615      	mov	r5, r2
 802a94c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802a94e:	4682      	mov	sl, r0
 802a950:	6861      	ldr	r1, [r4, #4]
 802a952:	aa06      	add	r2, sp, #24
 802a954:	6820      	ldr	r0, [r4, #0]
 802a956:	2702      	movs	r7, #2
 802a958:	f89d 9054 	ldrb.w	r9, [sp, #84]	@ 0x54
 802a95c:	3504      	adds	r5, #4
 802a95e:	c203      	stmia	r2!, {r0, r1}
 802a960:	6818      	ldr	r0, [r3, #0]
 802a962:	aa08      	add	r2, sp, #32
 802a964:	6859      	ldr	r1, [r3, #4]
 802a966:	c203      	stmia	r2!, {r0, r1}
 802a968:	a806      	add	r0, sp, #24
 802a96a:	f7f3 f8df 	bl	801db2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802a96e:	4621      	mov	r1, r4
 802a970:	a808      	add	r0, sp, #32
 802a972:	f7f3 f903 	bl	801db7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802a976:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 802a97a:	f9bd b026 	ldrsh.w	fp, [sp, #38]	@ 0x26
 802a97e:	f002 0301 	and.w	r3, r2, #1
 802a982:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 802a986:	9302      	str	r3, [sp, #8]
 802a988:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802a98c:	f003 0101 	and.w	r1, r3, #1
 802a990:	9101      	str	r1, [sp, #4]
 802a992:	9801      	ldr	r0, [sp, #4]
 802a994:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 802a998:	4403      	add	r3, r0
 802a99a:	fb01 2303 	mla	r3, r1, r3, r2
 802a99e:	fb93 f3f7 	sdiv	r3, r3, r7
 802a9a2:	441e      	add	r6, r3
 802a9a4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 802a9a8:	441a      	add	r2, r3
 802a9aa:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 802a9ae:	4419      	add	r1, r3
 802a9b0:	4b70      	ldr	r3, [pc, #448]	@ (802ab74 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 802a9b2:	f8ad 2020 	strh.w	r2, [sp, #32]
 802a9b6:	6818      	ldr	r0, [r3, #0]
 802a9b8:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 802a9bc:	6803      	ldr	r3, [r0, #0]
 802a9be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802a9c0:	4798      	blx	r3
 802a9c2:	4a6d      	ldr	r2, [pc, #436]	@ (802ab78 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 802a9c4:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 802a9c8:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 802a9cc:	8813      	ldrh	r3, [r2, #0]
 802a9ce:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 802a9d2:	fb03 1404 	mla	r4, r3, r4, r1
 802a9d6:	4611      	mov	r1, r2
 802a9d8:	fb0b f303 	mul.w	r3, fp, r3
 802a9dc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802a9e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802a9e4:	4404      	add	r4, r0
 802a9e6:	4423      	add	r3, r4
 802a9e8:	d073      	beq.n	802aad2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 802a9ea:	9705      	str	r7, [sp, #20]
 802a9ec:	e9cd 3203 	strd	r3, r2, [sp, #12]
 802a9f0:	9b03      	ldr	r3, [sp, #12]
 802a9f2:	429c      	cmp	r4, r3
 802a9f4:	f080 80b5 	bcs.w	802ab62 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 802a9f8:	9b02      	ldr	r3, [sp, #8]
 802a9fa:	b35b      	cbz	r3, 802aa54 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x114>
 802a9fc:	7831      	ldrb	r1, [r6, #0]
 802a9fe:	4622      	mov	r2, r4
 802aa00:	1c77      	adds	r7, r6, #1
 802aa02:	3403      	adds	r4, #3
 802aa04:	f001 010f 	and.w	r1, r1, #15
 802aa08:	f108 3bff 	add.w	fp, r8, #4294967295
 802aa0c:	464b      	mov	r3, r9
 802aa0e:	4650      	mov	r0, sl
 802aa10:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802aa14:	4429      	add	r1, r5
 802aa16:	f7ff ff65 	bl	802a8e4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 802aa1a:	f1bb 0f01 	cmp.w	fp, #1
 802aa1e:	dd1c      	ble.n	802aa5a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 802aa20:	7839      	ldrb	r1, [r7, #0]
 802aa22:	4622      	mov	r2, r4
 802aa24:	464b      	mov	r3, r9
 802aa26:	4650      	mov	r0, sl
 802aa28:	0909      	lsrs	r1, r1, #4
 802aa2a:	f1ab 0b02 	sub.w	fp, fp, #2
 802aa2e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802aa32:	4429      	add	r1, r5
 802aa34:	f7ff ff56 	bl	802a8e4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 802aa38:	f817 1b01 	ldrb.w	r1, [r7], #1
 802aa3c:	1ce2      	adds	r2, r4, #3
 802aa3e:	464b      	mov	r3, r9
 802aa40:	f001 010f 	and.w	r1, r1, #15
 802aa44:	4650      	mov	r0, sl
 802aa46:	3406      	adds	r4, #6
 802aa48:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802aa4c:	4429      	add	r1, r5
 802aa4e:	f7ff ff49 	bl	802a8e4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 802aa52:	e7e2      	b.n	802aa1a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 802aa54:	4637      	mov	r7, r6
 802aa56:	46c3      	mov	fp, r8
 802aa58:	e7df      	b.n	802aa1a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 802aa5a:	d10a      	bne.n	802aa72 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x132>
 802aa5c:	7839      	ldrb	r1, [r7, #0]
 802aa5e:	4622      	mov	r2, r4
 802aa60:	3403      	adds	r4, #3
 802aa62:	464b      	mov	r3, r9
 802aa64:	0909      	lsrs	r1, r1, #4
 802aa66:	4650      	mov	r0, sl
 802aa68:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802aa6c:	4429      	add	r1, r5
 802aa6e:	f7ff ff39 	bl	802a8e4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 802aa72:	9b04      	ldr	r3, [sp, #16]
 802aa74:	9a01      	ldr	r2, [sp, #4]
 802aa76:	881b      	ldrh	r3, [r3, #0]
 802aa78:	eba3 0308 	sub.w	r3, r3, r8
 802aa7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802aa80:	441c      	add	r4, r3
 802aa82:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802aa86:	4413      	add	r3, r2
 802aa88:	9a05      	ldr	r2, [sp, #20]
 802aa8a:	fb93 f3f2 	sdiv	r3, r3, r2
 802aa8e:	441e      	add	r6, r3
 802aa90:	e7ae      	b.n	802a9f0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xb0>
 802aa92:	4632      	mov	r2, r6
 802aa94:	46c4      	mov	ip, r8
 802aa96:	e037      	b.n	802ab08 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 802aa98:	d10e      	bne.n	802aab8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x178>
 802aa9a:	7812      	ldrb	r2, [r2, #0]
 802aa9c:	3003      	adds	r0, #3
 802aa9e:	0912      	lsrs	r2, r2, #4
 802aaa0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802aaa4:	18ac      	adds	r4, r5, r2
 802aaa6:	5caa      	ldrb	r2, [r5, r2]
 802aaa8:	f800 2c03 	strb.w	r2, [r0, #-3]
 802aaac:	7862      	ldrb	r2, [r4, #1]
 802aaae:	f800 2c02 	strb.w	r2, [r0, #-2]
 802aab2:	78a2      	ldrb	r2, [r4, #2]
 802aab4:	f800 2c01 	strb.w	r2, [r0, #-1]
 802aab8:	880c      	ldrh	r4, [r1, #0]
 802aaba:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 802aabe:	eba4 0408 	sub.w	r4, r4, r8
 802aac2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802aac6:	4404      	add	r4, r0
 802aac8:	9801      	ldr	r0, [sp, #4]
 802aaca:	4402      	add	r2, r0
 802aacc:	fb92 f2f7 	sdiv	r2, r2, r7
 802aad0:	4416      	add	r6, r2
 802aad2:	429c      	cmp	r4, r3
 802aad4:	d245      	bcs.n	802ab62 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 802aad6:	9a02      	ldr	r2, [sp, #8]
 802aad8:	2a00      	cmp	r2, #0
 802aada:	d0da      	beq.n	802aa92 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x152>
 802aadc:	7830      	ldrb	r0, [r6, #0]
 802aade:	1c72      	adds	r2, r6, #1
 802aae0:	3403      	adds	r4, #3
 802aae2:	f000 000f 	and.w	r0, r0, #15
 802aae6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802aaea:	eb05 0c00 	add.w	ip, r5, r0
 802aaee:	5c28      	ldrb	r0, [r5, r0]
 802aaf0:	f804 0c03 	strb.w	r0, [r4, #-3]
 802aaf4:	f89c 0001 	ldrb.w	r0, [ip, #1]
 802aaf8:	f804 0c02 	strb.w	r0, [r4, #-2]
 802aafc:	f89c 0002 	ldrb.w	r0, [ip, #2]
 802ab00:	f108 3cff 	add.w	ip, r8, #4294967295
 802ab04:	f804 0c01 	strb.w	r0, [r4, #-1]
 802ab08:	f1bc 0f01 	cmp.w	ip, #1
 802ab0c:	4620      	mov	r0, r4
 802ab0e:	f104 0406 	add.w	r4, r4, #6
 802ab12:	ddc1      	ble.n	802aa98 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x158>
 802ab14:	7810      	ldrb	r0, [r2, #0]
 802ab16:	f1ac 0c02 	sub.w	ip, ip, #2
 802ab1a:	0900      	lsrs	r0, r0, #4
 802ab1c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802ab20:	eb05 0e00 	add.w	lr, r5, r0
 802ab24:	5c28      	ldrb	r0, [r5, r0]
 802ab26:	f804 0c06 	strb.w	r0, [r4, #-6]
 802ab2a:	f89e 0001 	ldrb.w	r0, [lr, #1]
 802ab2e:	f804 0c05 	strb.w	r0, [r4, #-5]
 802ab32:	f89e 0002 	ldrb.w	r0, [lr, #2]
 802ab36:	f804 0c04 	strb.w	r0, [r4, #-4]
 802ab3a:	f812 0b01 	ldrb.w	r0, [r2], #1
 802ab3e:	f000 000f 	and.w	r0, r0, #15
 802ab42:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802ab46:	eb05 0e00 	add.w	lr, r5, r0
 802ab4a:	5c28      	ldrb	r0, [r5, r0]
 802ab4c:	f804 0c03 	strb.w	r0, [r4, #-3]
 802ab50:	f89e 0001 	ldrb.w	r0, [lr, #1]
 802ab54:	f804 0c02 	strb.w	r0, [r4, #-2]
 802ab58:	f89e 0002 	ldrb.w	r0, [lr, #2]
 802ab5c:	f804 0c01 	strb.w	r0, [r4, #-1]
 802ab60:	e7d2      	b.n	802ab08 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 802ab62:	4b04      	ldr	r3, [pc, #16]	@ (802ab74 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 802ab64:	6818      	ldr	r0, [r3, #0]
 802ab66:	6803      	ldr	r3, [r0, #0]
 802ab68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802ab6a:	4798      	blx	r3
 802ab6c:	b00b      	add	sp, #44	@ 0x2c
 802ab6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ab72:	bf00      	nop
 802ab74:	2403422c 	.word	0x2403422c
 802ab78:	24034226 	.word	0x24034226

0802ab7c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>:
 802ab7c:	b530      	push	{r4, r5, lr}
 802ab7e:	f89d 000c 	ldrb.w	r0, [sp, #12]
 802ab82:	780d      	ldrb	r5, [r1, #0]
 802ab84:	28ff      	cmp	r0, #255	@ 0xff
 802ab86:	d107      	bne.n	802ab98 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 802ab88:	2bff      	cmp	r3, #255	@ 0xff
 802ab8a:	d105      	bne.n	802ab98 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 802ab8c:	7015      	strb	r5, [r2, #0]
 802ab8e:	784b      	ldrb	r3, [r1, #1]
 802ab90:	7053      	strb	r3, [r2, #1]
 802ab92:	788b      	ldrb	r3, [r1, #2]
 802ab94:	7093      	strb	r3, [r2, #2]
 802ab96:	bd30      	pop	{r4, r5, pc}
 802ab98:	fb10 f003 	smulbb	r0, r0, r3
 802ab9c:	b283      	uxth	r3, r0
 802ab9e:	1c58      	adds	r0, r3, #1
 802aba0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802aba4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802aba8:	b284      	uxth	r4, r0
 802abaa:	43c0      	mvns	r0, r0
 802abac:	fb15 f504 	smulbb	r5, r5, r4
 802abb0:	b2c3      	uxtb	r3, r0
 802abb2:	7810      	ldrb	r0, [r2, #0]
 802abb4:	fb00 5003 	mla	r0, r0, r3, r5
 802abb8:	b280      	uxth	r0, r0
 802abba:	1c45      	adds	r5, r0, #1
 802abbc:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802abc0:	7855      	ldrb	r5, [r2, #1]
 802abc2:	fb15 f503 	smulbb	r5, r5, r3
 802abc6:	1200      	asrs	r0, r0, #8
 802abc8:	7010      	strb	r0, [r2, #0]
 802abca:	7848      	ldrb	r0, [r1, #1]
 802abcc:	fb00 5004 	mla	r0, r0, r4, r5
 802abd0:	b280      	uxth	r0, r0
 802abd2:	1c45      	adds	r5, r0, #1
 802abd4:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802abd8:	1200      	asrs	r0, r0, #8
 802abda:	7050      	strb	r0, [r2, #1]
 802abdc:	7888      	ldrb	r0, [r1, #2]
 802abde:	7891      	ldrb	r1, [r2, #2]
 802abe0:	fb11 f303 	smulbb	r3, r1, r3
 802abe4:	fb00 3304 	mla	r3, r0, r4, r3
 802abe8:	b29b      	uxth	r3, r3
 802abea:	1c59      	adds	r1, r3, #1
 802abec:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802abf0:	121b      	asrs	r3, r3, #8
 802abf2:	e7cf      	b.n	802ab94 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x18>

0802abf4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 802abf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802abf8:	461d      	mov	r5, r3
 802abfa:	b08f      	sub	sp, #60	@ 0x3c
 802abfc:	460c      	mov	r4, r1
 802abfe:	4616      	mov	r6, r2
 802ac00:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802ac02:	4680      	mov	r8, r0
 802ac04:	6869      	ldr	r1, [r5, #4]
 802ac06:	aa0a      	add	r2, sp, #40	@ 0x28
 802ac08:	6828      	ldr	r0, [r5, #0]
 802ac0a:	3604      	adds	r6, #4
 802ac0c:	f89d 9064 	ldrb.w	r9, [sp, #100]	@ 0x64
 802ac10:	4f57      	ldr	r7, [pc, #348]	@ (802ad70 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>)
 802ac12:	c203      	stmia	r2!, {r0, r1}
 802ac14:	6818      	ldr	r0, [r3, #0]
 802ac16:	aa0c      	add	r2, sp, #48	@ 0x30
 802ac18:	6859      	ldr	r1, [r3, #4]
 802ac1a:	c203      	stmia	r2!, {r0, r1}
 802ac1c:	a80a      	add	r0, sp, #40	@ 0x28
 802ac1e:	f7f2 ff85 	bl	801db2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802ac22:	4629      	mov	r1, r5
 802ac24:	a80c      	add	r0, sp, #48	@ 0x30
 802ac26:	2502      	movs	r5, #2
 802ac28:	f7f2 ffa8 	bl	801db7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802ac2c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 802ac30:	f9bd a036 	ldrsh.w	sl, [sp, #54]	@ 0x36
 802ac34:	f002 0301 	and.w	r3, r2, #1
 802ac38:	f9bd b034 	ldrsh.w	fp, [sp, #52]	@ 0x34
 802ac3c:	9304      	str	r3, [sp, #16]
 802ac3e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802ac42:	f003 0101 	and.w	r1, r3, #1
 802ac46:	9103      	str	r1, [sp, #12]
 802ac48:	9803      	ldr	r0, [sp, #12]
 802ac4a:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 802ac4e:	4403      	add	r3, r0
 802ac50:	6838      	ldr	r0, [r7, #0]
 802ac52:	fb01 2303 	mla	r3, r1, r3, r2
 802ac56:	fb93 f3f5 	sdiv	r3, r3, r5
 802ac5a:	18e5      	adds	r5, r4, r3
 802ac5c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 802ac60:	441a      	add	r2, r3
 802ac62:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 802ac66:	4419      	add	r1, r3
 802ac68:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 802ac6c:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 802ac70:	6803      	ldr	r3, [r0, #0]
 802ac72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802ac74:	4798      	blx	r3
 802ac76:	4a3f      	ldr	r2, [pc, #252]	@ (802ad74 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x180>)
 802ac78:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 802ac7c:	8813      	ldrh	r3, [r2, #0]
 802ac7e:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 802ac82:	9207      	str	r2, [sp, #28]
 802ac84:	fb03 1404 	mla	r4, r3, r4, r1
 802ac88:	fb0a f303 	mul.w	r3, sl, r3
 802ac8c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802ac90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802ac94:	4404      	add	r4, r0
 802ac96:	18e3      	adds	r3, r4, r3
 802ac98:	e9cd 3705 	strd	r3, r7, [sp, #20]
 802ac9c:	9b05      	ldr	r3, [sp, #20]
 802ac9e:	429c      	cmp	r4, r3
 802aca0:	d25d      	bcs.n	802ad5e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16a>
 802aca2:	9b04      	ldr	r3, [sp, #16]
 802aca4:	2b00      	cmp	r3, #0
 802aca6:	d037      	beq.n	802ad18 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 802aca8:	782b      	ldrb	r3, [r5, #0]
 802acaa:	1c6f      	adds	r7, r5, #1
 802acac:	f003 030f 	and.w	r3, r3, #15
 802acb0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802acb4:	9309      	str	r3, [sp, #36]	@ 0x24
 802acb6:	0e1b      	lsrs	r3, r3, #24
 802acb8:	d006      	beq.n	802acc8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd4>
 802acba:	9300      	str	r3, [sp, #0]
 802acbc:	4622      	mov	r2, r4
 802acbe:	464b      	mov	r3, r9
 802acc0:	a909      	add	r1, sp, #36	@ 0x24
 802acc2:	4640      	mov	r0, r8
 802acc4:	f7ff ff5a 	bl	802ab7c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 802acc8:	3403      	adds	r4, #3
 802acca:	f10b 3aff 	add.w	sl, fp, #4294967295
 802acce:	f1ba 0f01 	cmp.w	sl, #1
 802acd2:	dd24      	ble.n	802ad1e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 802acd4:	783b      	ldrb	r3, [r7, #0]
 802acd6:	091b      	lsrs	r3, r3, #4
 802acd8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802acdc:	9308      	str	r3, [sp, #32]
 802acde:	0e1b      	lsrs	r3, r3, #24
 802ace0:	d006      	beq.n	802acf0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 802ace2:	9300      	str	r3, [sp, #0]
 802ace4:	4622      	mov	r2, r4
 802ace6:	464b      	mov	r3, r9
 802ace8:	a908      	add	r1, sp, #32
 802acea:	4640      	mov	r0, r8
 802acec:	f7ff ff46 	bl	802ab7c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 802acf0:	f817 3b01 	ldrb.w	r3, [r7], #1
 802acf4:	f003 030f 	and.w	r3, r3, #15
 802acf8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802acfc:	9309      	str	r3, [sp, #36]	@ 0x24
 802acfe:	0e1b      	lsrs	r3, r3, #24
 802ad00:	d006      	beq.n	802ad10 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 802ad02:	9300      	str	r3, [sp, #0]
 802ad04:	1ce2      	adds	r2, r4, #3
 802ad06:	464b      	mov	r3, r9
 802ad08:	a909      	add	r1, sp, #36	@ 0x24
 802ad0a:	4640      	mov	r0, r8
 802ad0c:	f7ff ff36 	bl	802ab7c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 802ad10:	3406      	adds	r4, #6
 802ad12:	f1aa 0a02 	sub.w	sl, sl, #2
 802ad16:	e7da      	b.n	802acce <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 802ad18:	462f      	mov	r7, r5
 802ad1a:	46da      	mov	sl, fp
 802ad1c:	e7d7      	b.n	802acce <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 802ad1e:	d10e      	bne.n	802ad3e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x14a>
 802ad20:	783b      	ldrb	r3, [r7, #0]
 802ad22:	091b      	lsrs	r3, r3, #4
 802ad24:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802ad28:	9309      	str	r3, [sp, #36]	@ 0x24
 802ad2a:	0e1b      	lsrs	r3, r3, #24
 802ad2c:	d006      	beq.n	802ad3c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 802ad2e:	9300      	str	r3, [sp, #0]
 802ad30:	4622      	mov	r2, r4
 802ad32:	464b      	mov	r3, r9
 802ad34:	a909      	add	r1, sp, #36	@ 0x24
 802ad36:	4640      	mov	r0, r8
 802ad38:	f7ff ff20 	bl	802ab7c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 802ad3c:	3403      	adds	r4, #3
 802ad3e:	9b07      	ldr	r3, [sp, #28]
 802ad40:	9a03      	ldr	r2, [sp, #12]
 802ad42:	881b      	ldrh	r3, [r3, #0]
 802ad44:	eba3 030b 	sub.w	r3, r3, fp
 802ad48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802ad4c:	441c      	add	r4, r3
 802ad4e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802ad52:	4413      	add	r3, r2
 802ad54:	2202      	movs	r2, #2
 802ad56:	fb93 f3f2 	sdiv	r3, r3, r2
 802ad5a:	441d      	add	r5, r3
 802ad5c:	e79e      	b.n	802ac9c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa8>
 802ad5e:	9b06      	ldr	r3, [sp, #24]
 802ad60:	6818      	ldr	r0, [r3, #0]
 802ad62:	6803      	ldr	r3, [r0, #0]
 802ad64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802ad66:	4798      	blx	r3
 802ad68:	b00f      	add	sp, #60	@ 0x3c
 802ad6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ad6e:	bf00      	nop
 802ad70:	2403422c 	.word	0x2403422c
 802ad74:	24034226 	.word	0x24034226

0802ad78 <CRC_Lock>:
 802ad78:	4a2d      	ldr	r2, [pc, #180]	@ (802ae30 <CRC_Lock+0xb8>)
 802ad7a:	b530      	push	{r4, r5, lr}
 802ad7c:	6813      	ldr	r3, [r2, #0]
 802ad7e:	f24c 2540 	movw	r5, #49728	@ 0xc240
 802ad82:	f023 0301 	bic.w	r3, r3, #1
 802ad86:	6013      	str	r3, [r2, #0]
 802ad88:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 802ad8c:	4b29      	ldr	r3, [pc, #164]	@ (802ae34 <CRC_Lock+0xbc>)
 802ad8e:	681c      	ldr	r4, [r3, #0]
 802ad90:	4014      	ands	r4, r2
 802ad92:	42ac      	cmp	r4, r5
 802ad94:	d005      	beq.n	802ada2 <CRC_Lock+0x2a>
 802ad96:	681c      	ldr	r4, [r3, #0]
 802ad98:	f24c 2570 	movw	r5, #49776	@ 0xc270
 802ad9c:	4014      	ands	r4, r2
 802ad9e:	42ac      	cmp	r4, r5
 802ada0:	d125      	bne.n	802adee <CRC_Lock+0x76>
 802ada2:	4b25      	ldr	r3, [pc, #148]	@ (802ae38 <CRC_Lock+0xc0>)
 802ada4:	681b      	ldr	r3, [r3, #0]
 802ada6:	2b00      	cmp	r3, #0
 802ada8:	d139      	bne.n	802ae1e <CRC_Lock+0xa6>
 802adaa:	4b24      	ldr	r3, [pc, #144]	@ (802ae3c <CRC_Lock+0xc4>)
 802adac:	681a      	ldr	r2, [r3, #0]
 802adae:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802adb2:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 802adb6:	d00d      	beq.n	802add4 <CRC_Lock+0x5c>
 802adb8:	681a      	ldr	r2, [r3, #0]
 802adba:	f240 4483 	movw	r4, #1155	@ 0x483
 802adbe:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802adc2:	42a2      	cmp	r2, r4
 802adc4:	d006      	beq.n	802add4 <CRC_Lock+0x5c>
 802adc6:	681b      	ldr	r3, [r3, #0]
 802adc8:	f240 4285 	movw	r2, #1157	@ 0x485
 802adcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802add0:	4293      	cmp	r3, r2
 802add2:	d124      	bne.n	802ae1e <CRC_Lock+0xa6>
 802add4:	4b1a      	ldr	r3, [pc, #104]	@ (802ae40 <CRC_Lock+0xc8>)
 802add6:	2201      	movs	r2, #1
 802add8:	601a      	str	r2, [r3, #0]
 802adda:	681a      	ldr	r2, [r3, #0]
 802addc:	2a00      	cmp	r2, #0
 802adde:	d1fc      	bne.n	802adda <CRC_Lock+0x62>
 802ade0:	4b18      	ldr	r3, [pc, #96]	@ (802ae44 <CRC_Lock+0xcc>)
 802ade2:	6018      	str	r0, [r3, #0]
 802ade4:	6818      	ldr	r0, [r3, #0]
 802ade6:	1a43      	subs	r3, r0, r1
 802ade8:	4258      	negs	r0, r3
 802adea:	4158      	adcs	r0, r3
 802adec:	e00e      	b.n	802ae0c <CRC_Lock+0x94>
 802adee:	681b      	ldr	r3, [r3, #0]
 802adf0:	4013      	ands	r3, r2
 802adf2:	f24d 2220 	movw	r2, #53792	@ 0xd220
 802adf6:	4293      	cmp	r3, r2
 802adf8:	d111      	bne.n	802ae1e <CRC_Lock+0xa6>
 802adfa:	4b13      	ldr	r3, [pc, #76]	@ (802ae48 <CRC_Lock+0xd0>)
 802adfc:	f240 4286 	movw	r2, #1158	@ 0x486
 802ae00:	681b      	ldr	r3, [r3, #0]
 802ae02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802ae06:	4293      	cmp	r3, r2
 802ae08:	d001      	beq.n	802ae0e <CRC_Lock+0x96>
 802ae0a:	2000      	movs	r0, #0
 802ae0c:	bd30      	pop	{r4, r5, pc}
 802ae0e:	4b0f      	ldr	r3, [pc, #60]	@ (802ae4c <CRC_Lock+0xd4>)
 802ae10:	2201      	movs	r2, #1
 802ae12:	601a      	str	r2, [r3, #0]
 802ae14:	681a      	ldr	r2, [r3, #0]
 802ae16:	2a00      	cmp	r2, #0
 802ae18:	d1fc      	bne.n	802ae14 <CRC_Lock+0x9c>
 802ae1a:	4b0d      	ldr	r3, [pc, #52]	@ (802ae50 <CRC_Lock+0xd8>)
 802ae1c:	e7e1      	b.n	802ade2 <CRC_Lock+0x6a>
 802ae1e:	4b0d      	ldr	r3, [pc, #52]	@ (802ae54 <CRC_Lock+0xdc>)
 802ae20:	2201      	movs	r2, #1
 802ae22:	601a      	str	r2, [r3, #0]
 802ae24:	681a      	ldr	r2, [r3, #0]
 802ae26:	2a00      	cmp	r2, #0
 802ae28:	d1fc      	bne.n	802ae24 <CRC_Lock+0xac>
 802ae2a:	4b0b      	ldr	r3, [pc, #44]	@ (802ae58 <CRC_Lock+0xe0>)
 802ae2c:	e7d9      	b.n	802ade2 <CRC_Lock+0x6a>
 802ae2e:	bf00      	nop
 802ae30:	e0002000 	.word	0xe0002000
 802ae34:	e000ed00 	.word	0xe000ed00
 802ae38:	e0042000 	.word	0xe0042000
 802ae3c:	5c001000 	.word	0x5c001000
 802ae40:	58024c08 	.word	0x58024c08
 802ae44:	58024c00 	.word	0x58024c00
 802ae48:	46008ff0 	.word	0x46008ff0
 802ae4c:	46024c08 	.word	0x46024c08
 802ae50:	46024c00 	.word	0x46024c00
 802ae54:	40023008 	.word	0x40023008
 802ae58:	40023000 	.word	0x40023000

0802ae5c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802ae5c:	6101      	str	r1, [r0, #16]
 802ae5e:	4770      	bx	lr

0802ae60 <_ZN8touchgfx8Gestures4tickEv>:
 802ae60:	7b83      	ldrb	r3, [r0, #14]
 802ae62:	b14b      	cbz	r3, 802ae78 <_ZN8touchgfx8Gestures4tickEv+0x18>
 802ae64:	8903      	ldrh	r3, [r0, #8]
 802ae66:	3301      	adds	r3, #1
 802ae68:	b29b      	uxth	r3, r3
 802ae6a:	2b07      	cmp	r3, #7
 802ae6c:	8103      	strh	r3, [r0, #8]
 802ae6e:	bf81      	itttt	hi
 802ae70:	2300      	movhi	r3, #0
 802ae72:	8143      	strhhi	r3, [r0, #10]
 802ae74:	8183      	strhhi	r3, [r0, #12]
 802ae76:	7383      	strbhi	r3, [r0, #14]
 802ae78:	4770      	bx	lr
	...

0802ae7c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802ae7c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802ae80:	4698      	mov	r8, r3
 802ae82:	8883      	ldrh	r3, [r0, #4]
 802ae84:	4604      	mov	r4, r0
 802ae86:	4617      	mov	r7, r2
 802ae88:	f8ad 3006 	strh.w	r3, [sp, #6]
 802ae8c:	eba8 0303 	sub.w	r3, r8, r3
 802ae90:	4a19      	ldr	r2, [pc, #100]	@ (802aef8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 802ae92:	460e      	mov	r6, r1
 802ae94:	b21b      	sxth	r3, r3
 802ae96:	88c1      	ldrh	r1, [r0, #6]
 802ae98:	9200      	str	r2, [sp, #0]
 802ae9a:	2000      	movs	r0, #0
 802ae9c:	2b00      	cmp	r3, #0
 802ae9e:	8aa2      	ldrh	r2, [r4, #20]
 802aea0:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 802aea4:	bfb8      	it	lt
 802aea6:	425b      	neglt	r3, r3
 802aea8:	f88d 0004 	strb.w	r0, [sp, #4]
 802aeac:	f8ad 1008 	strh.w	r1, [sp, #8]
 802aeb0:	b21b      	sxth	r3, r3
 802aeb2:	f8ad 800a 	strh.w	r8, [sp, #10]
 802aeb6:	f8ad 500c 	strh.w	r5, [sp, #12]
 802aeba:	4293      	cmp	r3, r2
 802aebc:	dc07      	bgt.n	802aece <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 802aebe:	1a69      	subs	r1, r5, r1
 802aec0:	b209      	sxth	r1, r1
 802aec2:	2900      	cmp	r1, #0
 802aec4:	bfb8      	it	lt
 802aec6:	4249      	neglt	r1, r1
 802aec8:	b209      	sxth	r1, r1
 802aeca:	428a      	cmp	r2, r1
 802aecc:	da10      	bge.n	802aef0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 802aece:	6920      	ldr	r0, [r4, #16]
 802aed0:	4669      	mov	r1, sp
 802aed2:	eba8 0606 	sub.w	r6, r8, r6
 802aed6:	1bef      	subs	r7, r5, r7
 802aed8:	6803      	ldr	r3, [r0, #0]
 802aeda:	685b      	ldr	r3, [r3, #4]
 802aedc:	4798      	blx	r3
 802aede:	2300      	movs	r3, #0
 802aee0:	2001      	movs	r0, #1
 802aee2:	8166      	strh	r6, [r4, #10]
 802aee4:	8123      	strh	r3, [r4, #8]
 802aee6:	81a7      	strh	r7, [r4, #12]
 802aee8:	f8a4 8004 	strh.w	r8, [r4, #4]
 802aeec:	80e5      	strh	r5, [r4, #6]
 802aeee:	73a0      	strb	r0, [r4, #14]
 802aef0:	b004      	add	sp, #16
 802aef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802aef6:	bf00      	nop
 802aef8:	0802f0b0 	.word	0x0802f0b0

0802aefc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802aefc:	b5f0      	push	{r4, r5, r6, r7, lr}
 802aefe:	461e      	mov	r6, r3
 802af00:	1e4b      	subs	r3, r1, #1
 802af02:	b085      	sub	sp, #20
 802af04:	4604      	mov	r4, r0
 802af06:	2b01      	cmp	r3, #1
 802af08:	460d      	mov	r5, r1
 802af0a:	4617      	mov	r7, r2
 802af0c:	d84b      	bhi.n	802afa6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802af0e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802af12:	1cd3      	adds	r3, r2, #3
 802af14:	b29b      	uxth	r3, r3
 802af16:	2b06      	cmp	r3, #6
 802af18:	d916      	bls.n	802af48 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802af1a:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 802afbc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802af1e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802af22:	f8cd c004 	str.w	ip, [sp, #4]
 802af26:	f04f 0c00 	mov.w	ip, #0
 802af2a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802af2e:	6900      	ldr	r0, [r0, #16]
 802af30:	f8ad 100c 	strh.w	r1, [sp, #12]
 802af34:	a901      	add	r1, sp, #4
 802af36:	f88d c008 	strb.w	ip, [sp, #8]
 802af3a:	f8ad 200a 	strh.w	r2, [sp, #10]
 802af3e:	f8ad 300e 	strh.w	r3, [sp, #14]
 802af42:	6803      	ldr	r3, [r0, #0]
 802af44:	689b      	ldr	r3, [r3, #8]
 802af46:	4798      	blx	r3
 802af48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802af4c:	1cd3      	adds	r3, r2, #3
 802af4e:	b29b      	uxth	r3, r3
 802af50:	2b06      	cmp	r3, #6
 802af52:	d916      	bls.n	802af82 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802af54:	f8df c064 	ldr.w	ip, [pc, #100]	@ 802afbc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802af58:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802af5c:	f8cd c004 	str.w	ip, [sp, #4]
 802af60:	f04f 0c01 	mov.w	ip, #1
 802af64:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802af68:	6920      	ldr	r0, [r4, #16]
 802af6a:	f8ad 100c 	strh.w	r1, [sp, #12]
 802af6e:	a901      	add	r1, sp, #4
 802af70:	f88d c008 	strb.w	ip, [sp, #8]
 802af74:	f8ad 200a 	strh.w	r2, [sp, #10]
 802af78:	f8ad 300e 	strh.w	r3, [sp, #14]
 802af7c:	6803      	ldr	r3, [r0, #0]
 802af7e:	689b      	ldr	r3, [r3, #8]
 802af80:	4798      	blx	r3
 802af82:	4b0d      	ldr	r3, [pc, #52]	@ (802afb8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802af84:	a901      	add	r1, sp, #4
 802af86:	6920      	ldr	r0, [r4, #16]
 802af88:	9301      	str	r3, [sp, #4]
 802af8a:	2300      	movs	r3, #0
 802af8c:	f88d 5008 	strb.w	r5, [sp, #8]
 802af90:	f8ad 700a 	strh.w	r7, [sp, #10]
 802af94:	f8ad 600c 	strh.w	r6, [sp, #12]
 802af98:	f8ad 300e 	strh.w	r3, [sp, #14]
 802af9c:	6803      	ldr	r3, [r0, #0]
 802af9e:	681b      	ldr	r3, [r3, #0]
 802afa0:	4798      	blx	r3
 802afa2:	b005      	add	sp, #20
 802afa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802afa6:	2900      	cmp	r1, #0
 802afa8:	d1eb      	bne.n	802af82 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802afaa:	80a2      	strh	r2, [r4, #4]
 802afac:	80c6      	strh	r6, [r0, #6]
 802afae:	60a1      	str	r1, [r4, #8]
 802afb0:	81a1      	strh	r1, [r4, #12]
 802afb2:	73a1      	strb	r1, [r4, #14]
 802afb4:	e7e5      	b.n	802af82 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802afb6:	bf00      	nop
 802afb8:	0802f09c 	.word	0x0802f09c
 802afbc:	0802f0c4 	.word	0x0802f0c4

0802afc0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 802afc0:	10c9      	asrs	r1, r1, #3
 802afc2:	2900      	cmp	r1, #0
 802afc4:	bfb8      	it	lt
 802afc6:	4249      	neglt	r1, r1
 802afc8:	2801      	cmp	r0, #1
 802afca:	d108      	bne.n	802afde <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 802afcc:	f3c1 0008 	ubfx	r0, r1, #0, #9
 802afd0:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 802afd4:	4601      	mov	r1, r0
 802afd6:	dd02      	ble.n	802afde <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 802afd8:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 802afdc:	4770      	bx	lr
 802afde:	29ff      	cmp	r1, #255	@ 0xff
 802afe0:	bfa8      	it	ge
 802afe2:	21ff      	movge	r1, #255	@ 0xff
 802afe4:	4608      	mov	r0, r1
 802afe6:	4770      	bx	lr

0802afe8 <_ZN8touchgfx10Rasterizer6lineToEii>:
 802afe8:	b410      	push	{r4}
 802afea:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 802afee:	429c      	cmp	r4, r3
 802aff0:	d803      	bhi.n	802affa <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 802aff2:	f85d 4b04 	ldr.w	r4, [sp], #4
 802aff6:	f7f1 bd4b 	b.w	801ca90 <_ZN8touchgfx7Outline6lineToEii>
 802affa:	f85d 4b04 	ldr.w	r4, [sp], #4
 802affe:	4770      	bx	lr

0802b000 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 802b000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b004:	b08b      	sub	sp, #44	@ 0x2c
 802b006:	4606      	mov	r6, r0
 802b008:	468a      	mov	sl, r1
 802b00a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802b00e:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 802b012:	9308      	str	r3, [sp, #32]
 802b014:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 802b018:	9309      	str	r3, [sp, #36]	@ 0x24
 802b01a:	f7f1 fea4 	bl	801cd66 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 802b01e:	68b5      	ldr	r5, [r6, #8]
 802b020:	4604      	mov	r4, r0
 802b022:	2d00      	cmp	r5, #0
 802b024:	d044      	beq.n	802b0b0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802b026:	6873      	ldr	r3, [r6, #4]
 802b028:	42ab      	cmp	r3, r5
 802b02a:	d33d      	bcc.n	802b0a8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 802b02c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 802b030:	f04f 0800 	mov.w	r8, #0
 802b034:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 802b038:	eb02 0b03 	add.w	fp, r2, r3
 802b03c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 802b040:	fb02 1203 	mla	r2, r2, r3, r1
 802b044:	9205      	str	r2, [sp, #20]
 802b046:	1e6a      	subs	r2, r5, #1
 802b048:	9204      	str	r2, [sp, #16]
 802b04a:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 802b04e:	f9b4 7000 	ldrsh.w	r7, [r4]
 802b052:	454b      	cmp	r3, r9
 802b054:	463a      	mov	r2, r7
 802b056:	d008      	beq.n	802b06a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 802b058:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 802b05c:	eb03 0b09 	add.w	fp, r3, r9
 802b060:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 802b064:	fb03 1309 	mla	r3, r3, r9, r1
 802b068:	9305      	str	r3, [sp, #20]
 802b06a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 802b06e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 802b072:	4498      	add	r8, r3
 802b074:	9b04      	ldr	r3, [sp, #16]
 802b076:	3b01      	subs	r3, #1
 802b078:	9304      	str	r3, [sp, #16]
 802b07a:	9b04      	ldr	r3, [sp, #16]
 802b07c:	3301      	adds	r3, #1
 802b07e:	d015      	beq.n	802b0ac <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 802b080:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 802b084:	42bb      	cmp	r3, r7
 802b086:	d117      	bne.n	802b0b8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 802b088:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 802b08c:	9b04      	ldr	r3, [sp, #16]
 802b08e:	4548      	cmp	r0, r9
 802b090:	f103 33ff 	add.w	r3, r3, #4294967295
 802b094:	d17d      	bne.n	802b192 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 802b096:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 802b09a:	4401      	add	r1, r0
 802b09c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 802b0a0:	4480      	add	r8, r0
 802b0a2:	e7e9      	b.n	802b078 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 802b0a4:	461f      	mov	r7, r3
 802b0a6:	e042      	b.n	802b12e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 802b0a8:	2000      	movs	r0, #0
 802b0aa:	e002      	b.n	802b0b2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 802b0ac:	2900      	cmp	r1, #0
 802b0ae:	d16d      	bne.n	802b18c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 802b0b0:	2001      	movs	r0, #1
 802b0b2:	b00b      	add	sp, #44	@ 0x2c
 802b0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b0b8:	b379      	cbz	r1, 802b11a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 802b0ba:	2f00      	cmp	r7, #0
 802b0bc:	db29      	blt.n	802b112 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802b0be:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 802b0c2:	42bb      	cmp	r3, r7
 802b0c4:	dd25      	ble.n	802b112 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802b0c6:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 802b0ca:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 802b0ce:	f7ff ff77 	bl	802afc0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 802b0d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b0d4:	fb10 f003 	smulbb	r0, r0, r3
 802b0d8:	b280      	uxth	r0, r0
 802b0da:	1c41      	adds	r1, r0, #1
 802b0dc:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802b0e0:	1209      	asrs	r1, r1, #8
 802b0e2:	f011 0fff 	tst.w	r1, #255	@ 0xff
 802b0e6:	d014      	beq.n	802b112 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802b0e8:	b2c9      	uxtb	r1, r1
 802b0ea:	9808      	ldr	r0, [sp, #32]
 802b0ec:	b2ba      	uxth	r2, r7
 802b0ee:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 802b0f0:	9102      	str	r1, [sp, #8]
 802b0f2:	2101      	movs	r1, #1
 802b0f4:	4413      	add	r3, r2
 802b0f6:	4402      	add	r2, r0
 802b0f8:	9101      	str	r1, [sp, #4]
 802b0fa:	fa0f f18b 	sxth.w	r1, fp
 802b0fe:	f8da 0000 	ldr.w	r0, [sl]
 802b102:	b21b      	sxth	r3, r3
 802b104:	9100      	str	r1, [sp, #0]
 802b106:	b212      	sxth	r2, r2
 802b108:	6941      	ldr	r1, [r0, #20]
 802b10a:	4650      	mov	r0, sl
 802b10c:	460d      	mov	r5, r1
 802b10e:	9905      	ldr	r1, [sp, #20]
 802b110:	47a8      	blx	r5
 802b112:	9b04      	ldr	r3, [sp, #16]
 802b114:	1c7a      	adds	r2, r7, #1
 802b116:	3301      	adds	r3, #1
 802b118:	d0ca      	beq.n	802b0b0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802b11a:	f9b4 7000 	ldrsh.w	r7, [r4]
 802b11e:	1abb      	subs	r3, r7, r2
 802b120:	2b00      	cmp	r3, #0
 802b122:	dd31      	ble.n	802b188 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802b124:	2a00      	cmp	r2, #0
 802b126:	dabd      	bge.n	802b0a4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 802b128:	2f00      	cmp	r7, #0
 802b12a:	dd2d      	ble.n	802b188 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802b12c:	2200      	movs	r2, #0
 802b12e:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 802b132:	19d1      	adds	r1, r2, r7
 802b134:	4299      	cmp	r1, r3
 802b136:	db02      	blt.n	802b13e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 802b138:	1a9f      	subs	r7, r3, r2
 802b13a:	2f00      	cmp	r7, #0
 802b13c:	dd24      	ble.n	802b188 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802b13e:	ea4f 1188 	mov.w	r1, r8, lsl #6
 802b142:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 802b146:	f7ff ff3b 	bl	802afc0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 802b14a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b14c:	fb10 f003 	smulbb	r0, r0, r3
 802b150:	b280      	uxth	r0, r0
 802b152:	1c41      	adds	r1, r0, #1
 802b154:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802b158:	1209      	asrs	r1, r1, #8
 802b15a:	f011 0fff 	tst.w	r1, #255	@ 0xff
 802b15e:	d013      	beq.n	802b188 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802b160:	b292      	uxth	r2, r2
 802b162:	9808      	ldr	r0, [sp, #32]
 802b164:	b2c9      	uxtb	r1, r1
 802b166:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 802b168:	b23f      	sxth	r7, r7
 802b16a:	4413      	add	r3, r2
 802b16c:	9102      	str	r1, [sp, #8]
 802b16e:	4402      	add	r2, r0
 802b170:	fa0f f18b 	sxth.w	r1, fp
 802b174:	f8da 0000 	ldr.w	r0, [sl]
 802b178:	b21b      	sxth	r3, r3
 802b17a:	9100      	str	r1, [sp, #0]
 802b17c:	b212      	sxth	r2, r2
 802b17e:	9701      	str	r7, [sp, #4]
 802b180:	9905      	ldr	r1, [sp, #20]
 802b182:	6947      	ldr	r7, [r0, #20]
 802b184:	4650      	mov	r0, sl
 802b186:	47b8      	blx	r7
 802b188:	464b      	mov	r3, r9
 802b18a:	e75e      	b.n	802b04a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 802b18c:	2f00      	cmp	r7, #0
 802b18e:	da96      	bge.n	802b0be <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 802b190:	e78e      	b.n	802b0b0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802b192:	2900      	cmp	r1, #0
 802b194:	d0f8      	beq.n	802b188 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802b196:	e790      	b.n	802b0ba <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

0802b198 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 802b198:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802b19c:	461e      	mov	r6, r3
 802b19e:	4b36      	ldr	r3, [pc, #216]	@ (802b278 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 802b1a0:	2500      	movs	r5, #0
 802b1a2:	f100 0814 	add.w	r8, r0, #20
 802b1a6:	4604      	mov	r4, r0
 802b1a8:	4617      	mov	r7, r2
 802b1aa:	e9c0 3100 	strd	r3, r1, [r0]
 802b1ae:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 802b1b2:	8185      	strh	r5, [r0, #12]
 802b1b4:	8103      	strh	r3, [r0, #8]
 802b1b6:	f89d 3020 	ldrb.w	r3, [sp, #32]
 802b1ba:	81c5      	strh	r5, [r0, #14]
 802b1bc:	7283      	strb	r3, [r0, #10]
 802b1be:	8205      	strh	r5, [r0, #16]
 802b1c0:	8245      	strh	r5, [r0, #18]
 802b1c2:	4640      	mov	r0, r8
 802b1c4:	f7f0 ffaa 	bl	801c11c <_ZN8touchgfx7OutlineC1Ev>
 802b1c8:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 802b1cc:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 802b1d0:	466b      	mov	r3, sp
 802b1d2:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 802b1d6:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 802b1da:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 802b1de:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 802b1e2:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 802b1e6:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 802b1ea:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 802b1ee:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 802b1f2:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 802b1f6:	6830      	ldr	r0, [r6, #0]
 802b1f8:	6871      	ldr	r1, [r6, #4]
 802b1fa:	8872      	ldrh	r2, [r6, #2]
 802b1fc:	8835      	ldrh	r5, [r6, #0]
 802b1fe:	c303      	stmia	r3!, {r0, r1}
 802b200:	887b      	ldrh	r3, [r7, #2]
 802b202:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 802b206:	4413      	add	r3, r2
 802b208:	883a      	ldrh	r2, [r7, #0]
 802b20a:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 802b20e:	442a      	add	r2, r5
 802b210:	81e3      	strh	r3, [r4, #14]
 802b212:	8220      	strh	r0, [r4, #16]
 802b214:	4668      	mov	r0, sp
 802b216:	81a2      	strh	r2, [r4, #12]
 802b218:	8261      	strh	r1, [r4, #18]
 802b21a:	4639      	mov	r1, r7
 802b21c:	f7f2 fcae 	bl	801db7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802b220:	f104 000c 	add.w	r0, r4, #12
 802b224:	f7f2 fc82 	bl	801db2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802b228:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802b22c:	f8bd 2000 	ldrh.w	r2, [sp]
 802b230:	4640      	mov	r0, r8
 802b232:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 802b236:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 802b23a:	f7f0 ff53 	bl	801c0e4 <_ZN8touchgfx7Outline5resetEv>
 802b23e:	f9bd 3000 	ldrsh.w	r3, [sp]
 802b242:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 802b246:	4620      	mov	r0, r4
 802b248:	015b      	lsls	r3, r3, #5
 802b24a:	64e3      	str	r3, [r4, #76]	@ 0x4c
 802b24c:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802b250:	015b      	lsls	r3, r3, #5
 802b252:	6523      	str	r3, [r4, #80]	@ 0x50
 802b254:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 802b258:	015b      	lsls	r3, r3, #5
 802b25a:	6563      	str	r3, [r4, #84]	@ 0x54
 802b25c:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 802b260:	015b      	lsls	r3, r3, #5
 802b262:	65a3      	str	r3, [r4, #88]	@ 0x58
 802b264:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 802b268:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 802b26c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 802b270:	b002      	add	sp, #8
 802b272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b276:	bf00      	nop
 802b278:	0802f354 	.word	0x0802f354

0802b27c <_ZN8touchgfx6Canvas5closeEv>:
 802b27c:	b538      	push	{r3, r4, r5, lr}
 802b27e:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 802b282:	4604      	mov	r4, r0
 802b284:	b193      	cbz	r3, 802b2ac <_ZN8touchgfx6Canvas5closeEv+0x30>
 802b286:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 802b28a:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 802b28e:	4213      	tst	r3, r2
 802b290:	d10c      	bne.n	802b2ac <_ZN8touchgfx6Canvas5closeEv+0x30>
 802b292:	f100 0514 	add.w	r5, r0, #20
 802b296:	b123      	cbz	r3, 802b2a2 <_ZN8touchgfx6Canvas5closeEv+0x26>
 802b298:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 802b29c:	4628      	mov	r0, r5
 802b29e:	f7ff fea3 	bl	802afe8 <_ZN8touchgfx10Rasterizer6lineToEii>
 802b2a2:	4628      	mov	r0, r5
 802b2a4:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 802b2a8:	f7ff fe9e 	bl	802afe8 <_ZN8touchgfx10Rasterizer6lineToEii>
 802b2ac:	2300      	movs	r3, #0
 802b2ae:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802b2b2:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 802b2b6:	4298      	cmp	r0, r3
 802b2b8:	bf34      	ite	cc
 802b2ba:	2000      	movcc	r0, #0
 802b2bc:	2001      	movcs	r0, #1
 802b2be:	bd38      	pop	{r3, r4, r5, pc}

0802b2c0 <_ZN8touchgfx6Canvas6renderEh>:
 802b2c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802b2c4:	7a85      	ldrb	r5, [r0, #10]
 802b2c6:	4604      	mov	r4, r0
 802b2c8:	4369      	muls	r1, r5
 802b2ca:	1c4d      	adds	r5, r1, #1
 802b2cc:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 802b2d0:	122d      	asrs	r5, r5, #8
 802b2d2:	f000 8098 	beq.w	802b406 <_ZN8touchgfx6Canvas6renderEh+0x146>
 802b2d6:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 802b2da:	2b00      	cmp	r3, #0
 802b2dc:	f000 8093 	beq.w	802b406 <_ZN8touchgfx6Canvas6renderEh+0x146>
 802b2e0:	f7ff ffcc 	bl	802b27c <_ZN8touchgfx6Canvas5closeEv>
 802b2e4:	4607      	mov	r7, r0
 802b2e6:	2800      	cmp	r0, #0
 802b2e8:	d045      	beq.n	802b376 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 802b2ea:	6860      	ldr	r0, [r4, #4]
 802b2ec:	4e47      	ldr	r6, [pc, #284]	@ (802b40c <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 802b2ee:	6803      	ldr	r3, [r0, #0]
 802b2f0:	6837      	ldr	r7, [r6, #0]
 802b2f2:	689b      	ldr	r3, [r3, #8]
 802b2f4:	4798      	blx	r3
 802b2f6:	4601      	mov	r1, r0
 802b2f8:	4638      	mov	r0, r7
 802b2fa:	f7ef f939 	bl	801a570 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 802b2fe:	4607      	mov	r7, r0
 802b300:	f7e9 f8b0 	bl	8014464 <_ZN8touchgfx3HAL3lcdEv>
 802b304:	6803      	ldr	r3, [r0, #0]
 802b306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802b308:	4798      	blx	r3
 802b30a:	4680      	mov	r8, r0
 802b30c:	f7e9 f8aa 	bl	8014464 <_ZN8touchgfx3HAL3lcdEv>
 802b310:	6803      	ldr	r3, [r0, #0]
 802b312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802b314:	4798      	blx	r3
 802b316:	280b      	cmp	r0, #11
 802b318:	d85a      	bhi.n	802b3d0 <_ZN8touchgfx6Canvas6renderEh+0x110>
 802b31a:	e8df f000 	tbb	[pc, r0]
 802b31e:	5b50      	.short	0x5b50
 802b320:	3059066b 	.word	0x3059066b
 802b324:	64646440 	.word	0x64646440
 802b328:	6464      	.short	0x6464
 802b32a:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802b32e:	2208      	movs	r2, #8
 802b330:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802b334:	fb91 f2f2 	sdiv	r2, r1, r2
 802b338:	fb08 2303 	mla	r3, r8, r3, r2
 802b33c:	441f      	add	r7, r3
 802b33e:	424b      	negs	r3, r1
 802b340:	f001 0107 	and.w	r1, r1, #7
 802b344:	f003 0307 	and.w	r3, r3, #7
 802b348:	bf58      	it	pl
 802b34a:	4259      	negpl	r1, r3
 802b34c:	b2c9      	uxtb	r1, r1
 802b34e:	b2ed      	uxtb	r5, r5
 802b350:	463a      	mov	r2, r7
 802b352:	fa0f f388 	sxth.w	r3, r8
 802b356:	f104 0014 	add.w	r0, r4, #20
 802b35a:	e9cd 1500 	strd	r1, r5, [sp]
 802b35e:	6861      	ldr	r1, [r4, #4]
 802b360:	f7ff fe4e 	bl	802b000 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 802b364:	4607      	mov	r7, r0
 802b366:	6860      	ldr	r0, [r4, #4]
 802b368:	6803      	ldr	r3, [r0, #0]
 802b36a:	691b      	ldr	r3, [r3, #16]
 802b36c:	4798      	blx	r3
 802b36e:	6830      	ldr	r0, [r6, #0]
 802b370:	6803      	ldr	r3, [r0, #0]
 802b372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802b374:	4798      	blx	r3
 802b376:	4638      	mov	r0, r7
 802b378:	b002      	add	sp, #8
 802b37a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b37e:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802b382:	2204      	movs	r2, #4
 802b384:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802b388:	fb91 f2f2 	sdiv	r2, r1, r2
 802b38c:	fb08 2303 	mla	r3, r8, r3, r2
 802b390:	441f      	add	r7, r3
 802b392:	424b      	negs	r3, r1
 802b394:	f001 0103 	and.w	r1, r1, #3
 802b398:	f003 0303 	and.w	r3, r3, #3
 802b39c:	e7d4      	b.n	802b348 <_ZN8touchgfx6Canvas6renderEh+0x88>
 802b39e:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802b3a2:	2202      	movs	r2, #2
 802b3a4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802b3a8:	2900      	cmp	r1, #0
 802b3aa:	fb91 f2f2 	sdiv	r2, r1, r2
 802b3ae:	f001 0101 	and.w	r1, r1, #1
 802b3b2:	fb08 2303 	mla	r3, r8, r3, r2
 802b3b6:	bfb8      	it	lt
 802b3b8:	4249      	neglt	r1, r1
 802b3ba:	441f      	add	r7, r3
 802b3bc:	e7c6      	b.n	802b34c <_ZN8touchgfx6Canvas6renderEh+0x8c>
 802b3be:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802b3c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b3c6:	fb08 f303 	mul.w	r3, r8, r3
 802b3ca:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802b3ce:	441f      	add	r7, r3
 802b3d0:	2100      	movs	r1, #0
 802b3d2:	e7bc      	b.n	802b34e <_ZN8touchgfx6Canvas6renderEh+0x8e>
 802b3d4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802b3d8:	2103      	movs	r1, #3
 802b3da:	fb08 f203 	mul.w	r2, r8, r3
 802b3de:	89a3      	ldrh	r3, [r4, #12]
 802b3e0:	fb13 2301 	smlabb	r3, r3, r1, r2
 802b3e4:	e7f3      	b.n	802b3ce <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802b3e6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802b3ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b3ee:	fb08 2303 	mla	r3, r8, r3, r2
 802b3f2:	e7ec      	b.n	802b3ce <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802b3f4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802b3f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b3fc:	fb08 f303 	mul.w	r3, r8, r3
 802b400:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802b404:	e7e3      	b.n	802b3ce <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802b406:	2701      	movs	r7, #1
 802b408:	e7b5      	b.n	802b376 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 802b40a:	bf00      	nop
 802b40c:	2403422c 	.word	0x2403422c

0802b410 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 802b410:	4b06      	ldr	r3, [pc, #24]	@ (802b42c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 802b412:	b510      	push	{r4, lr}
 802b414:	781b      	ldrb	r3, [r3, #0]
 802b416:	2b01      	cmp	r3, #1
 802b418:	d107      	bne.n	802b42a <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 802b41a:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 802b41e:	680b      	ldr	r3, [r1, #0]
 802b420:	6814      	ldr	r4, [r2, #0]
 802b422:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 802b426:	6013      	str	r3, [r2, #0]
 802b428:	600c      	str	r4, [r1, #0]
 802b42a:	bd10      	pop	{r4, pc}
 802b42c:	24034224 	.word	0x24034224

0802b430 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 802b430:	b513      	push	{r0, r1, r4, lr}
 802b432:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 802b436:	4604      	mov	r4, r0
 802b438:	e9cd 2100 	strd	r2, r1, [sp]
 802b43c:	b9a3      	cbnz	r3, 802b468 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 802b43e:	466a      	mov	r2, sp
 802b440:	a901      	add	r1, sp, #4
 802b442:	4620      	mov	r0, r4
 802b444:	f7ff ffe4 	bl	802b410 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802b448:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 802b44a:	9901      	ldr	r1, [sp, #4]
 802b44c:	9a00      	ldr	r2, [sp, #0]
 802b44e:	1ac9      	subs	r1, r1, r3
 802b450:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802b452:	1ad2      	subs	r2, r2, r3
 802b454:	9101      	str	r1, [sp, #4]
 802b456:	2a00      	cmp	r2, #0
 802b458:	9200      	str	r2, [sp, #0]
 802b45a:	da0b      	bge.n	802b474 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 802b45c:	2301      	movs	r3, #1
 802b45e:	2900      	cmp	r1, #0
 802b460:	da0e      	bge.n	802b480 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 802b462:	f043 0304 	orr.w	r3, r3, #4
 802b466:	e013      	b.n	802b490 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 802b468:	f7ff ff08 	bl	802b27c <_ZN8touchgfx6Canvas5closeEv>
 802b46c:	2800      	cmp	r0, #0
 802b46e:	d1e6      	bne.n	802b43e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 802b470:	b002      	add	sp, #8
 802b472:	bd10      	pop	{r4, pc}
 802b474:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802b476:	429a      	cmp	r2, r3
 802b478:	bfac      	ite	ge
 802b47a:	2302      	movge	r3, #2
 802b47c:	2300      	movlt	r3, #0
 802b47e:	e7ee      	b.n	802b45e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 802b480:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 802b482:	4281      	cmp	r1, r0
 802b484:	bfac      	ite	ge
 802b486:	2008      	movge	r0, #8
 802b488:	2000      	movlt	r0, #0
 802b48a:	4318      	orrs	r0, r3
 802b48c:	b2c3      	uxtb	r3, r0
 802b48e:	b158      	cbz	r0, 802b4a8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 802b490:	2200      	movs	r2, #0
 802b492:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 802b496:	9901      	ldr	r1, [sp, #4]
 802b498:	9a00      	ldr	r2, [sp, #0]
 802b49a:	66e1      	str	r1, [r4, #108]	@ 0x6c
 802b49c:	6722      	str	r2, [r4, #112]	@ 0x70
 802b49e:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 802b4a2:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 802b4a6:	e7e3      	b.n	802b470 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 802b4a8:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 802b4ac:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 802b4b0:	4298      	cmp	r0, r3
 802b4b2:	d803      	bhi.n	802b4bc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 802b4b4:	f104 0014 	add.w	r0, r4, #20
 802b4b8:	f7f1 fb04 	bl	801cac4 <_ZN8touchgfx7Outline6moveToEii>
 802b4bc:	2301      	movs	r3, #1
 802b4be:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802b4c2:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 802b4c6:	2300      	movs	r3, #0
 802b4c8:	e7e5      	b.n	802b496 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

0802b4ca <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 802b4ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802b4cc:	ab02      	add	r3, sp, #8
 802b4ce:	4604      	mov	r4, r0
 802b4d0:	9101      	str	r1, [sp, #4]
 802b4d2:	a901      	add	r1, sp, #4
 802b4d4:	f843 2d08 	str.w	r2, [r3, #-8]!
 802b4d8:	461a      	mov	r2, r3
 802b4da:	f7ff ff99 	bl	802b410 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802b4de:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 802b4e0:	9901      	ldr	r1, [sp, #4]
 802b4e2:	9a00      	ldr	r2, [sp, #0]
 802b4e4:	1ac9      	subs	r1, r1, r3
 802b4e6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802b4e8:	1ad2      	subs	r2, r2, r3
 802b4ea:	9101      	str	r1, [sp, #4]
 802b4ec:	2a00      	cmp	r2, #0
 802b4ee:	9200      	str	r2, [sp, #0]
 802b4f0:	db1c      	blt.n	802b52c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 802b4f2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802b4f4:	429a      	cmp	r2, r3
 802b4f6:	bfac      	ite	ge
 802b4f8:	2002      	movge	r0, #2
 802b4fa:	2000      	movlt	r0, #0
 802b4fc:	2900      	cmp	r1, #0
 802b4fe:	db17      	blt.n	802b530 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 802b500:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 802b502:	4299      	cmp	r1, r3
 802b504:	bfac      	ite	ge
 802b506:	2308      	movge	r3, #8
 802b508:	2300      	movlt	r3, #0
 802b50a:	4303      	orrs	r3, r0
 802b50c:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 802b510:	b2dd      	uxtb	r5, r3
 802b512:	b978      	cbnz	r0, 802b534 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 802b514:	f104 0014 	add.w	r0, r4, #20
 802b518:	f7ff fd66 	bl	802afe8 <_ZN8touchgfx10Rasterizer6lineToEii>
 802b51c:	9b01      	ldr	r3, [sp, #4]
 802b51e:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 802b522:	6623      	str	r3, [r4, #96]	@ 0x60
 802b524:	9b00      	ldr	r3, [sp, #0]
 802b526:	6663      	str	r3, [r4, #100]	@ 0x64
 802b528:	b002      	add	sp, #8
 802b52a:	bd70      	pop	{r4, r5, r6, pc}
 802b52c:	2001      	movs	r0, #1
 802b52e:	e7e5      	b.n	802b4fc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 802b530:	2304      	movs	r3, #4
 802b532:	e7ea      	b.n	802b50a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 802b534:	b113      	cbz	r3, 802b53c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 802b536:	ea10 0305 	ands.w	r3, r0, r5
 802b53a:	d11c      	bne.n	802b576 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 802b53c:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 802b540:	f104 0614 	add.w	r6, r4, #20
 802b544:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 802b548:	b98b      	cbnz	r3, 802b56e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 802b54a:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 802b54e:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 802b552:	4298      	cmp	r0, r3
 802b554:	d802      	bhi.n	802b55c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 802b556:	4630      	mov	r0, r6
 802b558:	f7f1 fab4 	bl	801cac4 <_ZN8touchgfx7Outline6moveToEii>
 802b55c:	2301      	movs	r3, #1
 802b55e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802b562:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 802b566:	4630      	mov	r0, r6
 802b568:	e9dd 2100 	ldrd	r2, r1, [sp]
 802b56c:	e7d4      	b.n	802b518 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 802b56e:	4630      	mov	r0, r6
 802b570:	f7ff fd3a 	bl	802afe8 <_ZN8touchgfx10Rasterizer6lineToEii>
 802b574:	e7f7      	b.n	802b566 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 802b576:	461d      	mov	r5, r3
 802b578:	e7d0      	b.n	802b51c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

0802b57c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>:
 802b57c:	b538      	push	{r3, r4, r5, lr}
 802b57e:	ed2d 8b10 	vpush	{d8-d15}
 802b582:	eef6 ba00 	vmov.f32	s23, #96	@ 0x3f000000  0.5
 802b586:	4605      	mov	r5, r0
 802b588:	eeb0 ca40 	vmov.f32	s24, s0
 802b58c:	460c      	mov	r4, r1
 802b58e:	eef0 ca60 	vmov.f32	s25, s1
 802b592:	ed9f ba57 	vldr	s22, [pc, #348]	@ 802b6f0 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x174>
 802b596:	eeb0 da41 	vmov.f32	s26, s2
 802b59a:	eef0 da61 	vmov.f32	s27, s3
 802b59e:	eeb0 ea42 	vmov.f32	s28, s4
 802b5a2:	eef0 ea62 	vmov.f32	s29, s5
 802b5a6:	eef0 aa6b 	vmov.f32	s21, s23
 802b5aa:	2c08      	cmp	r4, #8
 802b5ac:	d86e      	bhi.n	802b68c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x110>
 802b5ae:	ee7e 6a4c 	vsub.f32	s13, s28, s24
 802b5b2:	ee7d 7aee 	vsub.f32	s15, s27, s29
 802b5b6:	ee3d 6a4e 	vsub.f32	s12, s26, s28
 802b5ba:	ee3e 7aec 	vsub.f32	s14, s29, s25
 802b5be:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 802b5c2:	ee3c fa0d 	vadd.f32	s30, s24, s26
 802b5c6:	ee7c faad 	vadd.f32	s31, s25, s27
 802b5ca:	eee6 7a07 	vfma.f32	s15, s12, s14
 802b5ce:	ee7d 9a0e 	vadd.f32	s19, s26, s28
 802b5d2:	ee3d aaae 	vadd.f32	s20, s27, s29
 802b5d6:	ee2f fa2b 	vmul.f32	s30, s30, s23
 802b5da:	ee6f faab 	vmul.f32	s31, s31, s23
 802b5de:	ee69 9aab 	vmul.f32	s19, s19, s23
 802b5e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 802b5e6:	ee2a aa2b 	vmul.f32	s20, s20, s23
 802b5ea:	ee7f 8a29 	vadd.f32	s17, s30, s19
 802b5ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b5f2:	ee3f 9a8a 	vadd.f32	s18, s31, s20
 802b5f6:	ee68 8aab 	vmul.f32	s17, s17, s23
 802b5fa:	bf48      	it	mi
 802b5fc:	eef1 7a67 	vnegmi.f32	s15, s15
 802b600:	ee29 9a2b 	vmul.f32	s18, s18, s23
 802b604:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 802b608:	eef4 7acb 	vcmpe.f32	s15, s22
 802b60c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b610:	dd3f      	ble.n	802b692 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x116>
 802b612:	ee27 7a07 	vmul.f32	s14, s14, s14
 802b616:	ee67 7aa7 	vmul.f32	s15, s15, s15
 802b61a:	eea6 7aa6 	vfma.f32	s14, s13, s13
 802b61e:	ee27 7a06 	vmul.f32	s14, s14, s12
 802b622:	eef4 7ac7 	vcmpe.f32	s15, s14
 802b626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b62a:	d847      	bhi.n	802b6bc <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 802b62c:	ee7e 0a4d 	vsub.f32	s1, s28, s26
 802b630:	ee3e 0aed 	vsub.f32	s0, s29, s27
 802b634:	f000 fa39 	bl	802baaa <atan2f>
 802b638:	eeb0 8a40 	vmov.f32	s16, s0
 802b63c:	ee7d 0a4c 	vsub.f32	s1, s26, s24
 802b640:	ee3d 0aec 	vsub.f32	s0, s27, s25
 802b644:	f000 fa31 	bl	802baaa <atan2f>
 802b648:	ee38 0a40 	vsub.f32	s0, s16, s0
 802b64c:	eddf 7a29 	vldr	s15, [pc, #164]	@ 802b6f4 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x178>
 802b650:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802b654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b658:	bf48      	it	mi
 802b65a:	eeb1 0a40 	vnegmi.f32	s0, s0
 802b65e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802b662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b666:	bfa4      	itt	ge
 802b668:	eddf 7a23 	vldrge	s15, [pc, #140]	@ 802b6f8 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x17c>
 802b66c:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 802b670:	eddf 7a22 	vldr	s15, [pc, #136]	@ 802b6fc <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x180>
 802b674:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802b678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b67c:	d51e      	bpl.n	802b6bc <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 802b67e:	eef0 0a49 	vmov.f32	s1, s18
 802b682:	4628      	mov	r0, r5
 802b684:	eeb0 0a68 	vmov.f32	s0, s17
 802b688:	f7ef fe00 	bl	801b28c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 802b68c:	ecbd 8b10 	vpop	{d8-d15}
 802b690:	bd38      	pop	{r3, r4, r5, pc}
 802b692:	ee7c 7a0e 	vadd.f32	s15, s24, s28
 802b696:	eeb0 7a68 	vmov.f32	s14, s17
 802b69a:	eef0 6a49 	vmov.f32	s13, s18
 802b69e:	eea7 7aea 	vfms.f32	s14, s15, s21
 802b6a2:	ee7c 7aae 	vadd.f32	s15, s25, s29
 802b6a6:	eee7 6aea 	vfms.f32	s13, s15, s21
 802b6aa:	ee66 7aa6 	vmul.f32	s15, s13, s13
 802b6ae:	eee7 7a07 	vfma.f32	s15, s14, s14
 802b6b2:	eef4 7ac6 	vcmpe.f32	s15, s12
 802b6b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b6ba:	d9e0      	bls.n	802b67e <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x102>
 802b6bc:	3401      	adds	r4, #1
 802b6be:	eef0 0a6c 	vmov.f32	s1, s25
 802b6c2:	eeb0 0a4c 	vmov.f32	s0, s24
 802b6c6:	4628      	mov	r0, r5
 802b6c8:	4621      	mov	r1, r4
 802b6ca:	eef0 2a49 	vmov.f32	s5, s18
 802b6ce:	eeb0 2a68 	vmov.f32	s4, s17
 802b6d2:	eef0 1a6f 	vmov.f32	s3, s31
 802b6d6:	eeb0 1a4f 	vmov.f32	s2, s30
 802b6da:	f7ff ff4f 	bl	802b57c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 802b6de:	eef0 da4a 	vmov.f32	s27, s20
 802b6e2:	eeb0 da69 	vmov.f32	s26, s19
 802b6e6:	eef0 ca49 	vmov.f32	s25, s18
 802b6ea:	eeb0 ca68 	vmov.f32	s24, s17
 802b6ee:	e75c      	b.n	802b5aa <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x2e>
 802b6f0:	2edbe6ff 	.word	0x2edbe6ff
 802b6f4:	40490fdb 	.word	0x40490fdb
 802b6f8:	40c90fdb 	.word	0x40c90fdb
 802b6fc:	3dcccccd 	.word	0x3dcccccd

0802b700 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>:
 802b700:	b530      	push	{r4, r5, lr}
 802b702:	ed2d 8b10 	vpush	{d8-d15}
 802b706:	eef0 8a40 	vmov.f32	s17, s0
 802b70a:	b085      	sub	sp, #20
 802b70c:	eef0 9a60 	vmov.f32	s19, s1
 802b710:	4604      	mov	r4, r0
 802b712:	eef0 fa41 	vmov.f32	s31, s2
 802b716:	460d      	mov	r5, r1
 802b718:	eeb0 fa61 	vmov.f32	s30, s3
 802b71c:	eef0 ba42 	vmov.f32	s23, s4
 802b720:	eeb0 ca62 	vmov.f32	s24, s5
 802b724:	eef0 aa43 	vmov.f32	s21, s6
 802b728:	eeb0 ba63 	vmov.f32	s22, s7
 802b72c:	2d08      	cmp	r5, #8
 802b72e:	f200 8113 	bhi.w	802b958 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x258>
 802b732:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 802b736:	ee3b 6aaa 	vadd.f32	s12, s23, s21
 802b73a:	ee7f 6aab 	vadd.f32	s13, s31, s23
 802b73e:	ee38 daaf 	vadd.f32	s26, s17, s31
 802b742:	ee26 6a27 	vmul.f32	s12, s12, s15
 802b746:	ee7c ca0b 	vadd.f32	s25, s24, s22
 802b74a:	ee2d da27 	vmul.f32	s26, s26, s15
 802b74e:	ed8d 6a01 	vstr	s12, [sp, #4]
 802b752:	eea6 6aa7 	vfma.f32	s12, s13, s15
 802b756:	ee6c caa7 	vmul.f32	s25, s25, s15
 802b75a:	eeb0 ea4d 	vmov.f32	s28, s26
 802b75e:	ee79 da8f 	vadd.f32	s27, s19, s30
 802b762:	ee3f 7a0c 	vadd.f32	s14, s30, s24
 802b766:	eea6 eaa7 	vfma.f32	s28, s13, s15
 802b76a:	ee66 6a27 	vmul.f32	s13, s12, s15
 802b76e:	ee6d daa7 	vmul.f32	s27, s27, s15
 802b772:	edcd 6a03 	vstr	s13, [sp, #12]
 802b776:	eef0 6a6c 	vmov.f32	s13, s25
 802b77a:	eef0 ea6d 	vmov.f32	s29, s27
 802b77e:	ee2e ea27 	vmul.f32	s28, s28, s15
 802b782:	eee7 6a27 	vfma.f32	s13, s14, s15
 802b786:	eee7 ea27 	vfma.f32	s29, s14, s15
 802b78a:	ee26 7aa7 	vmul.f32	s14, s13, s15
 802b78e:	ee6e eaa7 	vmul.f32	s29, s29, s15
 802b792:	eef0 6a67 	vmov.f32	s13, s15
 802b796:	ed8d 7a02 	vstr	s14, [sp, #8]
 802b79a:	ed9d 7a03 	vldr	s14, [sp, #12]
 802b79e:	ee3e 9a07 	vadd.f32	s18, s28, s14
 802b7a2:	ed9d 7a02 	vldr	s14, [sp, #8]
 802b7a6:	ee3e aa87 	vadd.f32	s20, s29, s14
 802b7aa:	ee29 9a27 	vmul.f32	s18, s18, s15
 802b7ae:	ee2a aa27 	vmul.f32	s20, s20, s15
 802b7b2:	2d00      	cmp	r5, #0
 802b7b4:	f000 810b 	beq.w	802b9ce <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802b7b8:	ee7a 5ae8 	vsub.f32	s11, s21, s17
 802b7bc:	eddf 4a95 	vldr	s9, [pc, #596]	@ 802ba14 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 802b7c0:	ee3f 7a4b 	vsub.f32	s14, s30, s22
 802b7c4:	ee7b 7a69 	vsub.f32	s15, s22, s19
 802b7c8:	ee3f 6aea 	vsub.f32	s12, s31, s21
 802b7cc:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 802b7d0:	ee3b 5aea 	vsub.f32	s10, s23, s21
 802b7d4:	eea6 7a27 	vfma.f32	s14, s12, s15
 802b7d8:	ee3c 6a4b 	vsub.f32	s12, s24, s22
 802b7dc:	ee25 6ac6 	vnmul.f32	s12, s11, s12
 802b7e0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 802b7e4:	eea5 6a27 	vfma.f32	s12, s10, s15
 802b7e8:	eeb5 5a00 	vmov.f32	s10, #80	@ 0x3e800000  0.250
 802b7ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b7f0:	bf48      	it	mi
 802b7f2:	eeb1 7a47 	vnegmi.f32	s14, s14
 802b7f6:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 802b7fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b7fe:	eeb4 7ae4 	vcmpe.f32	s14, s9
 802b802:	bf48      	it	mi
 802b804:	eeb1 6a46 	vnegmi.f32	s12, s12
 802b808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b80c:	f340 80a8 	ble.w	802b960 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x260>
 802b810:	eeb4 6ae4 	vcmpe.f32	s12, s9
 802b814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b818:	dd5a      	ble.n	802b8d0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1d0>
 802b81a:	ee65 5aa5 	vmul.f32	s11, s11, s11
 802b81e:	ee37 7a06 	vadd.f32	s14, s14, s12
 802b822:	eee7 5aa7 	vfma.f32	s11, s15, s15
 802b826:	ee27 7a07 	vmul.f32	s14, s14, s14
 802b82a:	ee65 7a85 	vmul.f32	s15, s11, s10
 802b82e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802b832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b836:	f200 80ca 	bhi.w	802b9ce <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802b83a:	ee7b 0aef 	vsub.f32	s1, s23, s31
 802b83e:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 802b842:	f000 f932 	bl	802baaa <atan2f>
 802b846:	eeb0 8a40 	vmov.f32	s16, s0
 802b84a:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 802b84e:	ee3f 0a69 	vsub.f32	s0, s30, s19
 802b852:	f000 f92a 	bl	802baaa <atan2f>
 802b856:	ee38 fa40 	vsub.f32	s30, s16, s0
 802b85a:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 802b85e:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 802b862:	eeb5 fac0 	vcmpe.f32	s30, #0.0
 802b866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b86a:	bf48      	it	mi
 802b86c:	eeb1 fa4f 	vnegmi.f32	s30, s30
 802b870:	f000 f91b 	bl	802baaa <atan2f>
 802b874:	ee30 0a48 	vsub.f32	s0, s0, s16
 802b878:	eddf 7a67 	vldr	s15, [pc, #412]	@ 802ba18 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 802b87c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802b880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b884:	eeb4 fae7 	vcmpe.f32	s30, s15
 802b888:	eddf 7a63 	vldr	s15, [pc, #396]	@ 802ba18 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 802b88c:	bf48      	it	mi
 802b88e:	eeb1 0a40 	vnegmi.f32	s0, s0
 802b892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b896:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802b89a:	eddf 7a60 	vldr	s15, [pc, #384]	@ 802ba1c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 802b89e:	bfa4      	itt	ge
 802b8a0:	ed9f 7a5f 	vldrge	s14, [pc, #380]	@ 802ba20 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 802b8a4:	ee37 fa4f 	vsubge.f32	s30, s14, s30
 802b8a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b8ac:	bfa4      	itt	ge
 802b8ae:	ed9f 7a5c 	vldrge	s14, [pc, #368]	@ 802ba20 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 802b8b2:	ee37 0a40 	vsubge.f32	s0, s14, s0
 802b8b6:	ee3f 0a00 	vadd.f32	s0, s30, s0
 802b8ba:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802b8be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b8c2:	f140 8084 	bpl.w	802b9ce <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802b8c6:	eef0 0a4a 	vmov.f32	s1, s20
 802b8ca:	eeb0 0a49 	vmov.f32	s0, s18
 802b8ce:	e040      	b.n	802b952 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x252>
 802b8d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 802b8d4:	ee27 7a07 	vmul.f32	s14, s14, s14
 802b8d8:	eee5 7aa5 	vfma.f32	s15, s11, s11
 802b8dc:	ee67 7a85 	vmul.f32	s15, s15, s10
 802b8e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802b8e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b8e8:	d871      	bhi.n	802b9ce <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802b8ea:	ee7b 0aef 	vsub.f32	s1, s23, s31
 802b8ee:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 802b8f2:	f000 f8da 	bl	802baaa <atan2f>
 802b8f6:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 802b8fa:	eeb0 8a40 	vmov.f32	s16, s0
 802b8fe:	ee3f 0a69 	vsub.f32	s0, s30, s19
 802b902:	f000 f8d2 	bl	802baaa <atan2f>
 802b906:	ee38 0a40 	vsub.f32	s0, s16, s0
 802b90a:	eddf 7a43 	vldr	s15, [pc, #268]	@ 802ba18 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 802b90e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802b912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b916:	bf48      	it	mi
 802b918:	eeb1 0a40 	vnegmi.f32	s0, s0
 802b91c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802b920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b924:	bfa4      	itt	ge
 802b926:	eddf 7a3e 	vldrge	s15, [pc, #248]	@ 802ba20 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 802b92a:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 802b92e:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 802ba1c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 802b932:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802b936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b93a:	d548      	bpl.n	802b9ce <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802b93c:	eef0 0a4f 	vmov.f32	s1, s30
 802b940:	4620      	mov	r0, r4
 802b942:	eeb0 0a6f 	vmov.f32	s0, s31
 802b946:	f7ef fca1 	bl	801b28c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 802b94a:	eef0 0a4c 	vmov.f32	s1, s24
 802b94e:	eeb0 0a6b 	vmov.f32	s0, s23
 802b952:	4620      	mov	r0, r4
 802b954:	f7ef fc9a 	bl	801b28c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 802b958:	b005      	add	sp, #20
 802b95a:	ecbd 8b10 	vpop	{d8-d15}
 802b95e:	bd30      	pop	{r4, r5, pc}
 802b960:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 802ba14 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 802b964:	eeb4 6ac7 	vcmpe.f32	s12, s14
 802b968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b96c:	dd19      	ble.n	802b9a2 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2a2>
 802b96e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 802b972:	ee26 7a06 	vmul.f32	s14, s12, s12
 802b976:	eee5 7aa5 	vfma.f32	s15, s11, s11
 802b97a:	ee67 7a85 	vmul.f32	s15, s15, s10
 802b97e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802b982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b986:	d822      	bhi.n	802b9ce <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802b988:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 802b98c:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 802b990:	f000 f88b 	bl	802baaa <atan2f>
 802b994:	ee7b 0aef 	vsub.f32	s1, s23, s31
 802b998:	eeb0 8a40 	vmov.f32	s16, s0
 802b99c:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 802b9a0:	e7af      	b.n	802b902 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x202>
 802b9a2:	ee78 7aaa 	vadd.f32	s15, s17, s21
 802b9a6:	eeb0 7a49 	vmov.f32	s14, s18
 802b9aa:	eeb0 6a4a 	vmov.f32	s12, s20
 802b9ae:	eea7 7ae6 	vfms.f32	s14, s15, s13
 802b9b2:	ee79 7a8b 	vadd.f32	s15, s19, s22
 802b9b6:	eea7 6ae6 	vfms.f32	s12, s15, s13
 802b9ba:	ee66 7a06 	vmul.f32	s15, s12, s12
 802b9be:	eee7 7a07 	vfma.f32	s15, s14, s14
 802b9c2:	eef4 7ac5 	vcmpe.f32	s15, s10
 802b9c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b9ca:	f67f af7c 	bls.w	802b8c6 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1c6>
 802b9ce:	3501      	adds	r5, #1
 802b9d0:	eef0 0a69 	vmov.f32	s1, s19
 802b9d4:	eeb0 0a68 	vmov.f32	s0, s17
 802b9d8:	4620      	mov	r0, r4
 802b9da:	4629      	mov	r1, r5
 802b9dc:	eef0 3a4a 	vmov.f32	s7, s20
 802b9e0:	eeb0 3a49 	vmov.f32	s6, s18
 802b9e4:	eef0 2a6e 	vmov.f32	s5, s29
 802b9e8:	eeb0 2a4e 	vmov.f32	s4, s28
 802b9ec:	eef0 1a6d 	vmov.f32	s3, s27
 802b9f0:	eeb0 1a4d 	vmov.f32	s2, s26
 802b9f4:	f7ff fe84 	bl	802b700 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 802b9f8:	eeb0 ca6c 	vmov.f32	s24, s25
 802b9fc:	eddd ba01 	vldr	s23, [sp, #4]
 802ba00:	eef0 9a4a 	vmov.f32	s19, s20
 802ba04:	ed9d fa02 	vldr	s30, [sp, #8]
 802ba08:	eef0 8a49 	vmov.f32	s17, s18
 802ba0c:	eddd fa03 	vldr	s31, [sp, #12]
 802ba10:	e68c      	b.n	802b72c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2c>
 802ba12:	bf00      	nop
 802ba14:	2edbe6ff 	.word	0x2edbe6ff
 802ba18:	40490fdb 	.word	0x40490fdb
 802ba1c:	3dcccccd 	.word	0x3dcccccd
 802ba20:	40c90fdb 	.word	0x40c90fdb

0802ba24 <_ZN8touchgfx6CanvasD1Ev>:
 802ba24:	4b04      	ldr	r3, [pc, #16]	@ (802ba38 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 802ba26:	b510      	push	{r4, lr}
 802ba28:	4604      	mov	r4, r0
 802ba2a:	f840 3b14 	str.w	r3, [r0], #20
 802ba2e:	f7f0 fb51 	bl	801c0d4 <_ZN8touchgfx7OutlineD1Ev>
 802ba32:	4620      	mov	r0, r4
 802ba34:	bd10      	pop	{r4, pc}
 802ba36:	bf00      	nop
 802ba38:	0802f354 	.word	0x0802f354

0802ba3c <_ZN8touchgfx6CanvasD0Ev>:
 802ba3c:	b510      	push	{r4, lr}
 802ba3e:	4604      	mov	r4, r0
 802ba40:	f7ff fff0 	bl	802ba24 <_ZN8touchgfx6CanvasD1Ev>
 802ba44:	2174      	movs	r1, #116	@ 0x74
 802ba46:	4620      	mov	r0, r4
 802ba48:	f000 f807 	bl	802ba5a <_ZdlPvj>
 802ba4c:	4620      	mov	r0, r4
 802ba4e:	bd10      	pop	{r4, pc}

0802ba50 <__aeabi_atexit>:
 802ba50:	460b      	mov	r3, r1
 802ba52:	4601      	mov	r1, r0
 802ba54:	4618      	mov	r0, r3
 802ba56:	f000 bc59 	b.w	802c30c <__cxa_atexit>

0802ba5a <_ZdlPvj>:
 802ba5a:	f000 b812 	b.w	802ba82 <_ZdlPv>

0802ba5e <__cxa_guard_acquire>:
 802ba5e:	6802      	ldr	r2, [r0, #0]
 802ba60:	07d2      	lsls	r2, r2, #31
 802ba62:	4603      	mov	r3, r0
 802ba64:	d405      	bmi.n	802ba72 <__cxa_guard_acquire+0x14>
 802ba66:	7842      	ldrb	r2, [r0, #1]
 802ba68:	b102      	cbz	r2, 802ba6c <__cxa_guard_acquire+0xe>
 802ba6a:	deff      	udf	#255	@ 0xff
 802ba6c:	2001      	movs	r0, #1
 802ba6e:	7058      	strb	r0, [r3, #1]
 802ba70:	4770      	bx	lr
 802ba72:	2000      	movs	r0, #0
 802ba74:	4770      	bx	lr

0802ba76 <__cxa_guard_release>:
 802ba76:	2301      	movs	r3, #1
 802ba78:	6003      	str	r3, [r0, #0]
 802ba7a:	4770      	bx	lr

0802ba7c <__cxa_pure_virtual>:
 802ba7c:	b508      	push	{r3, lr}
 802ba7e:	f000 f80f 	bl	802baa0 <_ZSt9terminatev>

0802ba82 <_ZdlPv>:
 802ba82:	f000 bb8d 	b.w	802c1a0 <free>

0802ba86 <_ZN10__cxxabiv111__terminateEPFvvE>:
 802ba86:	b508      	push	{r3, lr}
 802ba88:	4780      	blx	r0
 802ba8a:	f000 fb56 	bl	802c13a <abort>
	...

0802ba90 <_ZSt13get_terminatev>:
 802ba90:	4b02      	ldr	r3, [pc, #8]	@ (802ba9c <_ZSt13get_terminatev+0xc>)
 802ba92:	6818      	ldr	r0, [r3, #0]
 802ba94:	f3bf 8f5b 	dmb	ish
 802ba98:	4770      	bx	lr
 802ba9a:	bf00      	nop
 802ba9c:	240000ac 	.word	0x240000ac

0802baa0 <_ZSt9terminatev>:
 802baa0:	b508      	push	{r3, lr}
 802baa2:	f7ff fff5 	bl	802ba90 <_ZSt13get_terminatev>
 802baa6:	f7ff ffee 	bl	802ba86 <_ZN10__cxxabiv111__terminateEPFvvE>

0802baaa <atan2f>:
 802baaa:	f000 b9cd 	b.w	802be48 <__ieee754_atan2f>
	...

0802bab0 <sqrtf>:
 802bab0:	b508      	push	{r3, lr}
 802bab2:	ed2d 8b02 	vpush	{d8}
 802bab6:	eeb0 8a40 	vmov.f32	s16, s0
 802baba:	f000 f9c2 	bl	802be42 <__ieee754_sqrtf>
 802babe:	eeb4 8a48 	vcmp.f32	s16, s16
 802bac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bac6:	d60c      	bvs.n	802bae2 <sqrtf+0x32>
 802bac8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 802bae8 <sqrtf+0x38>
 802bacc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 802bad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bad4:	d505      	bpl.n	802bae2 <sqrtf+0x32>
 802bad6:	f000 fecb 	bl	802c870 <__errno>
 802bada:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 802bade:	2321      	movs	r3, #33	@ 0x21
 802bae0:	6003      	str	r3, [r0, #0]
 802bae2:	ecbd 8b02 	vpop	{d8}
 802bae6:	bd08      	pop	{r3, pc}
 802bae8:	00000000 	.word	0x00000000

0802baec <sinf_poly>:
 802baec:	07cb      	lsls	r3, r1, #31
 802baee:	d412      	bmi.n	802bb16 <sinf_poly+0x2a>
 802baf0:	ee21 5b00 	vmul.f64	d5, d1, d0
 802baf4:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 802baf8:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 802bafc:	eea6 7b01 	vfma.f64	d7, d6, d1
 802bb00:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 802bb04:	ee21 1b05 	vmul.f64	d1, d1, d5
 802bb08:	eea6 0b05 	vfma.f64	d0, d6, d5
 802bb0c:	eea7 0b01 	vfma.f64	d0, d7, d1
 802bb10:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 802bb14:	4770      	bx	lr
 802bb16:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 802bb1a:	ee21 5b01 	vmul.f64	d5, d1, d1
 802bb1e:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 802bb22:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 802bb26:	eea1 7b06 	vfma.f64	d7, d1, d6
 802bb2a:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 802bb2e:	eea1 0b06 	vfma.f64	d0, d1, d6
 802bb32:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 802bb36:	ee21 1b05 	vmul.f64	d1, d1, d5
 802bb3a:	eea5 0b06 	vfma.f64	d0, d5, d6
 802bb3e:	e7e5      	b.n	802bb0c <sinf_poly+0x20>

0802bb40 <sinf>:
 802bb40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802bb42:	ee10 4a10 	vmov	r4, s0
 802bb46:	f3c4 530a 	ubfx	r3, r4, #20, #11
 802bb4a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 802bb4e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 802bb52:	eef0 7a40 	vmov.f32	s15, s0
 802bb56:	ea4f 5214 	mov.w	r2, r4, lsr #20
 802bb5a:	d218      	bcs.n	802bb8e <sinf+0x4e>
 802bb5c:	ee26 1b06 	vmul.f64	d1, d6, d6
 802bb60:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 802bb64:	d20a      	bcs.n	802bb7c <sinf+0x3c>
 802bb66:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 802bb6a:	d103      	bne.n	802bb74 <sinf+0x34>
 802bb6c:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 802bb70:	ed8d 1a01 	vstr	s2, [sp, #4]
 802bb74:	eeb0 0a67 	vmov.f32	s0, s15
 802bb78:	b003      	add	sp, #12
 802bb7a:	bd30      	pop	{r4, r5, pc}
 802bb7c:	483a      	ldr	r0, [pc, #232]	@ (802bc68 <sinf+0x128>)
 802bb7e:	eeb0 0b46 	vmov.f64	d0, d6
 802bb82:	2100      	movs	r1, #0
 802bb84:	b003      	add	sp, #12
 802bb86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802bb8a:	f7ff bfaf 	b.w	802baec <sinf_poly>
 802bb8e:	f240 422e 	movw	r2, #1070	@ 0x42e
 802bb92:	4293      	cmp	r3, r2
 802bb94:	d824      	bhi.n	802bbe0 <sinf+0xa0>
 802bb96:	4b34      	ldr	r3, [pc, #208]	@ (802bc68 <sinf+0x128>)
 802bb98:	ed93 7b08 	vldr	d7, [r3, #32]
 802bb9c:	ee26 7b07 	vmul.f64	d7, d6, d7
 802bba0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 802bba4:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 802bba8:	ee17 1a90 	vmov	r1, s15
 802bbac:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 802bbb0:	1609      	asrs	r1, r1, #24
 802bbb2:	ee07 1a90 	vmov	s15, r1
 802bbb6:	f001 0203 	and.w	r2, r1, #3
 802bbba:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802bbbe:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 802bbc2:	ed92 0b00 	vldr	d0, [r2]
 802bbc6:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 802bbca:	f011 0f02 	tst.w	r1, #2
 802bbce:	eea5 6b47 	vfms.f64	d6, d5, d7
 802bbd2:	bf08      	it	eq
 802bbd4:	4618      	moveq	r0, r3
 802bbd6:	ee26 1b06 	vmul.f64	d1, d6, d6
 802bbda:	ee20 0b06 	vmul.f64	d0, d0, d6
 802bbde:	e7d1      	b.n	802bb84 <sinf+0x44>
 802bbe0:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 802bbe4:	d237      	bcs.n	802bc56 <sinf+0x116>
 802bbe6:	4921      	ldr	r1, [pc, #132]	@ (802bc6c <sinf+0x12c>)
 802bbe8:	f3c4 6083 	ubfx	r0, r4, #26, #4
 802bbec:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 802bbf0:	f3c4 0316 	ubfx	r3, r4, #0, #23
 802bbf4:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 802bbf8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 802bbfc:	6a10      	ldr	r0, [r2, #32]
 802bbfe:	6912      	ldr	r2, [r2, #16]
 802bc00:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 802bc04:	40ab      	lsls	r3, r5
 802bc06:	fba0 5003 	umull	r5, r0, r0, r3
 802bc0a:	4359      	muls	r1, r3
 802bc0c:	fbe3 0102 	umlal	r0, r1, r3, r2
 802bc10:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 802bc14:	0f9d      	lsrs	r5, r3, #30
 802bc16:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 802bc1a:	1ac9      	subs	r1, r1, r3
 802bc1c:	f7d4 fd56 	bl	80006cc <__aeabi_l2d>
 802bc20:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 802bc24:	4b10      	ldr	r3, [pc, #64]	@ (802bc68 <sinf+0x128>)
 802bc26:	f004 0203 	and.w	r2, r4, #3
 802bc2a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802bc2e:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 802bc60 <sinf+0x120>
 802bc32:	ed92 0b00 	vldr	d0, [r2]
 802bc36:	ec41 0b17 	vmov	d7, r0, r1
 802bc3a:	f014 0f02 	tst.w	r4, #2
 802bc3e:	ee27 7b06 	vmul.f64	d7, d7, d6
 802bc42:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 802bc46:	4629      	mov	r1, r5
 802bc48:	bf08      	it	eq
 802bc4a:	4618      	moveq	r0, r3
 802bc4c:	ee27 1b07 	vmul.f64	d1, d7, d7
 802bc50:	ee20 0b07 	vmul.f64	d0, d0, d7
 802bc54:	e796      	b.n	802bb84 <sinf+0x44>
 802bc56:	b003      	add	sp, #12
 802bc58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802bc5c:	f000 b8e2 	b.w	802be24 <__math_invalidf>
 802bc60:	54442d18 	.word	0x54442d18
 802bc64:	3c1921fb 	.word	0x3c1921fb
 802bc68:	0802f3c0 	.word	0x0802f3c0
 802bc6c:	0802f360 	.word	0x0802f360

0802bc70 <sinf_poly>:
 802bc70:	07cb      	lsls	r3, r1, #31
 802bc72:	d412      	bmi.n	802bc9a <sinf_poly+0x2a>
 802bc74:	ee21 5b00 	vmul.f64	d5, d1, d0
 802bc78:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 802bc7c:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 802bc80:	eea6 7b01 	vfma.f64	d7, d6, d1
 802bc84:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 802bc88:	ee21 1b05 	vmul.f64	d1, d1, d5
 802bc8c:	eea6 0b05 	vfma.f64	d0, d6, d5
 802bc90:	eea7 0b01 	vfma.f64	d0, d7, d1
 802bc94:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 802bc98:	4770      	bx	lr
 802bc9a:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 802bc9e:	ee21 5b01 	vmul.f64	d5, d1, d1
 802bca2:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 802bca6:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 802bcaa:	eea1 7b06 	vfma.f64	d7, d1, d6
 802bcae:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 802bcb2:	eea1 0b06 	vfma.f64	d0, d1, d6
 802bcb6:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 802bcba:	ee21 1b05 	vmul.f64	d1, d1, d5
 802bcbe:	eea5 0b06 	vfma.f64	d0, d5, d6
 802bcc2:	e7e5      	b.n	802bc90 <sinf_poly+0x20>
 802bcc4:	0000      	movs	r0, r0
	...

0802bcc8 <cosf>:
 802bcc8:	b538      	push	{r3, r4, r5, lr}
 802bcca:	ee10 4a10 	vmov	r4, s0
 802bcce:	f3c4 530a 	ubfx	r3, r4, #20, #11
 802bcd2:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 802bcd6:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 802bcda:	d21f      	bcs.n	802bd1c <cosf+0x54>
 802bcdc:	ee27 7b07 	vmul.f64	d7, d7, d7
 802bce0:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 802bce4:	f0c0 8082 	bcc.w	802bdec <cosf+0x124>
 802bce8:	ee27 4b07 	vmul.f64	d4, d7, d7
 802bcec:	4b44      	ldr	r3, [pc, #272]	@ (802be00 <cosf+0x138>)
 802bcee:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 802bcf2:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 802bcf6:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 802bcfa:	eea7 6b05 	vfma.f64	d6, d7, d5
 802bcfe:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 802bd02:	eea7 0b05 	vfma.f64	d0, d7, d5
 802bd06:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 802bd0a:	ee27 7b04 	vmul.f64	d7, d7, d4
 802bd0e:	eea4 0b05 	vfma.f64	d0, d4, d5
 802bd12:	eea6 0b07 	vfma.f64	d0, d6, d7
 802bd16:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 802bd1a:	bd38      	pop	{r3, r4, r5, pc}
 802bd1c:	f240 422e 	movw	r2, #1070	@ 0x42e
 802bd20:	4293      	cmp	r3, r2
 802bd22:	d829      	bhi.n	802bd78 <cosf+0xb0>
 802bd24:	4b36      	ldr	r3, [pc, #216]	@ (802be00 <cosf+0x138>)
 802bd26:	ed93 6b08 	vldr	d6, [r3, #32]
 802bd2a:	ee27 6b06 	vmul.f64	d6, d7, d6
 802bd2e:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 802bd32:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 802bd36:	ee16 1a90 	vmov	r1, s13
 802bd3a:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 802bd3e:	1609      	asrs	r1, r1, #24
 802bd40:	ee06 1a90 	vmov	s13, r1
 802bd44:	f001 0203 	and.w	r2, r1, #3
 802bd48:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802bd4c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 802bd50:	ed92 0b00 	vldr	d0, [r2]
 802bd54:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 802bd58:	f011 0f02 	tst.w	r1, #2
 802bd5c:	f081 0101 	eor.w	r1, r1, #1
 802bd60:	eea5 7b46 	vfms.f64	d7, d5, d6
 802bd64:	bf08      	it	eq
 802bd66:	4618      	moveq	r0, r3
 802bd68:	ee27 1b07 	vmul.f64	d1, d7, d7
 802bd6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802bd70:	ee20 0b07 	vmul.f64	d0, d0, d7
 802bd74:	f7ff bf7c 	b.w	802bc70 <sinf_poly>
 802bd78:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 802bd7c:	d232      	bcs.n	802bde4 <cosf+0x11c>
 802bd7e:	4921      	ldr	r1, [pc, #132]	@ (802be04 <cosf+0x13c>)
 802bd80:	f3c4 6083 	ubfx	r0, r4, #26, #4
 802bd84:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 802bd88:	f3c4 0316 	ubfx	r3, r4, #0, #23
 802bd8c:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 802bd90:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 802bd94:	6a10      	ldr	r0, [r2, #32]
 802bd96:	6912      	ldr	r2, [r2, #16]
 802bd98:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 802bd9c:	40ab      	lsls	r3, r5
 802bd9e:	fba0 5003 	umull	r5, r0, r0, r3
 802bda2:	4359      	muls	r1, r3
 802bda4:	fbe3 0102 	umlal	r0, r1, r3, r2
 802bda8:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 802bdac:	0f9d      	lsrs	r5, r3, #30
 802bdae:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 802bdb2:	1ac9      	subs	r1, r1, r3
 802bdb4:	f7d4 fc8a 	bl	80006cc <__aeabi_l2d>
 802bdb8:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 802bdbc:	4b10      	ldr	r3, [pc, #64]	@ (802be00 <cosf+0x138>)
 802bdbe:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 802bdf8 <cosf+0x130>
 802bdc2:	ec41 0b17 	vmov	d7, r0, r1
 802bdc6:	f004 0203 	and.w	r2, r4, #3
 802bdca:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802bdce:	ed92 0b00 	vldr	d0, [r2]
 802bdd2:	ee27 7b06 	vmul.f64	d7, d7, d6
 802bdd6:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 802bdda:	f014 0f02 	tst.w	r4, #2
 802bdde:	f085 0101 	eor.w	r1, r5, #1
 802bde2:	e7bf      	b.n	802bd64 <cosf+0x9c>
 802bde4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802bde8:	f000 b81c 	b.w	802be24 <__math_invalidf>
 802bdec:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 802bdf0:	e793      	b.n	802bd1a <cosf+0x52>
 802bdf2:	bf00      	nop
 802bdf4:	f3af 8000 	nop.w
 802bdf8:	54442d18 	.word	0x54442d18
 802bdfc:	3c1921fb 	.word	0x3c1921fb
 802be00:	0802f3c0 	.word	0x0802f3c0
 802be04:	0802f360 	.word	0x0802f360

0802be08 <with_errnof>:
 802be08:	b510      	push	{r4, lr}
 802be0a:	ed2d 8b02 	vpush	{d8}
 802be0e:	eeb0 8a40 	vmov.f32	s16, s0
 802be12:	4604      	mov	r4, r0
 802be14:	f000 fd2c 	bl	802c870 <__errno>
 802be18:	eeb0 0a48 	vmov.f32	s0, s16
 802be1c:	ecbd 8b02 	vpop	{d8}
 802be20:	6004      	str	r4, [r0, #0]
 802be22:	bd10      	pop	{r4, pc}

0802be24 <__math_invalidf>:
 802be24:	eef0 7a40 	vmov.f32	s15, s0
 802be28:	ee30 7a40 	vsub.f32	s14, s0, s0
 802be2c:	eef4 7a67 	vcmp.f32	s15, s15
 802be30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802be34:	ee87 0a07 	vdiv.f32	s0, s14, s14
 802be38:	d602      	bvs.n	802be40 <__math_invalidf+0x1c>
 802be3a:	2021      	movs	r0, #33	@ 0x21
 802be3c:	f7ff bfe4 	b.w	802be08 <with_errnof>
 802be40:	4770      	bx	lr

0802be42 <__ieee754_sqrtf>:
 802be42:	eeb1 0ac0 	vsqrt.f32	s0, s0
 802be46:	4770      	bx	lr

0802be48 <__ieee754_atan2f>:
 802be48:	ee10 2a90 	vmov	r2, s1
 802be4c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 802be50:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 802be54:	b510      	push	{r4, lr}
 802be56:	eef0 7a40 	vmov.f32	s15, s0
 802be5a:	d806      	bhi.n	802be6a <__ieee754_atan2f+0x22>
 802be5c:	ee10 0a10 	vmov	r0, s0
 802be60:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 802be64:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802be68:	d904      	bls.n	802be74 <__ieee754_atan2f+0x2c>
 802be6a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 802be6e:	eeb0 0a67 	vmov.f32	s0, s15
 802be72:	bd10      	pop	{r4, pc}
 802be74:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 802be78:	d103      	bne.n	802be82 <__ieee754_atan2f+0x3a>
 802be7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802be7e:	f000 b881 	b.w	802bf84 <atanf>
 802be82:	1794      	asrs	r4, r2, #30
 802be84:	f004 0402 	and.w	r4, r4, #2
 802be88:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 802be8c:	b93b      	cbnz	r3, 802be9e <__ieee754_atan2f+0x56>
 802be8e:	2c02      	cmp	r4, #2
 802be90:	d05c      	beq.n	802bf4c <__ieee754_atan2f+0x104>
 802be92:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 802bf60 <__ieee754_atan2f+0x118>
 802be96:	2c03      	cmp	r4, #3
 802be98:	fe47 7a00 	vseleq.f32	s15, s14, s0
 802be9c:	e7e7      	b.n	802be6e <__ieee754_atan2f+0x26>
 802be9e:	b939      	cbnz	r1, 802beb0 <__ieee754_atan2f+0x68>
 802bea0:	eddf 7a30 	vldr	s15, [pc, #192]	@ 802bf64 <__ieee754_atan2f+0x11c>
 802bea4:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 802bf68 <__ieee754_atan2f+0x120>
 802bea8:	2800      	cmp	r0, #0
 802beaa:	fe67 7a87 	vselge.f32	s15, s15, s14
 802beae:	e7de      	b.n	802be6e <__ieee754_atan2f+0x26>
 802beb0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 802beb4:	d110      	bne.n	802bed8 <__ieee754_atan2f+0x90>
 802beb6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802beba:	f104 34ff 	add.w	r4, r4, #4294967295
 802bebe:	d107      	bne.n	802bed0 <__ieee754_atan2f+0x88>
 802bec0:	2c02      	cmp	r4, #2
 802bec2:	d846      	bhi.n	802bf52 <__ieee754_atan2f+0x10a>
 802bec4:	4b29      	ldr	r3, [pc, #164]	@ (802bf6c <__ieee754_atan2f+0x124>)
 802bec6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 802beca:	edd3 7a00 	vldr	s15, [r3]
 802bece:	e7ce      	b.n	802be6e <__ieee754_atan2f+0x26>
 802bed0:	2c02      	cmp	r4, #2
 802bed2:	d841      	bhi.n	802bf58 <__ieee754_atan2f+0x110>
 802bed4:	4b26      	ldr	r3, [pc, #152]	@ (802bf70 <__ieee754_atan2f+0x128>)
 802bed6:	e7f6      	b.n	802bec6 <__ieee754_atan2f+0x7e>
 802bed8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802bedc:	d0e0      	beq.n	802bea0 <__ieee754_atan2f+0x58>
 802bede:	1a5b      	subs	r3, r3, r1
 802bee0:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 802bee4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 802bee8:	da1a      	bge.n	802bf20 <__ieee754_atan2f+0xd8>
 802beea:	2a00      	cmp	r2, #0
 802beec:	da01      	bge.n	802bef2 <__ieee754_atan2f+0xaa>
 802beee:	313c      	adds	r1, #60	@ 0x3c
 802bef0:	db19      	blt.n	802bf26 <__ieee754_atan2f+0xde>
 802bef2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 802bef6:	f000 f919 	bl	802c12c <fabsf>
 802befa:	f000 f843 	bl	802bf84 <atanf>
 802befe:	eef0 7a40 	vmov.f32	s15, s0
 802bf02:	2c01      	cmp	r4, #1
 802bf04:	d012      	beq.n	802bf2c <__ieee754_atan2f+0xe4>
 802bf06:	2c02      	cmp	r4, #2
 802bf08:	d017      	beq.n	802bf3a <__ieee754_atan2f+0xf2>
 802bf0a:	2c00      	cmp	r4, #0
 802bf0c:	d0af      	beq.n	802be6e <__ieee754_atan2f+0x26>
 802bf0e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 802bf74 <__ieee754_atan2f+0x12c>
 802bf12:	ee77 7a87 	vadd.f32	s15, s15, s14
 802bf16:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 802bf78 <__ieee754_atan2f+0x130>
 802bf1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802bf1e:	e7a6      	b.n	802be6e <__ieee754_atan2f+0x26>
 802bf20:	eddf 7a10 	vldr	s15, [pc, #64]	@ 802bf64 <__ieee754_atan2f+0x11c>
 802bf24:	e7ed      	b.n	802bf02 <__ieee754_atan2f+0xba>
 802bf26:	eddf 7a15 	vldr	s15, [pc, #84]	@ 802bf7c <__ieee754_atan2f+0x134>
 802bf2a:	e7ea      	b.n	802bf02 <__ieee754_atan2f+0xba>
 802bf2c:	ee17 3a90 	vmov	r3, s15
 802bf30:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 802bf34:	ee07 3a90 	vmov	s15, r3
 802bf38:	e799      	b.n	802be6e <__ieee754_atan2f+0x26>
 802bf3a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 802bf74 <__ieee754_atan2f+0x12c>
 802bf3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 802bf42:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 802bf78 <__ieee754_atan2f+0x130>
 802bf46:	ee77 7a67 	vsub.f32	s15, s14, s15
 802bf4a:	e790      	b.n	802be6e <__ieee754_atan2f+0x26>
 802bf4c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 802bf78 <__ieee754_atan2f+0x130>
 802bf50:	e78d      	b.n	802be6e <__ieee754_atan2f+0x26>
 802bf52:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 802bf80 <__ieee754_atan2f+0x138>
 802bf56:	e78a      	b.n	802be6e <__ieee754_atan2f+0x26>
 802bf58:	eddf 7a08 	vldr	s15, [pc, #32]	@ 802bf7c <__ieee754_atan2f+0x134>
 802bf5c:	e787      	b.n	802be6e <__ieee754_atan2f+0x26>
 802bf5e:	bf00      	nop
 802bf60:	c0490fdb 	.word	0xc0490fdb
 802bf64:	3fc90fdb 	.word	0x3fc90fdb
 802bf68:	bfc90fdb 	.word	0xbfc90fdb
 802bf6c:	0802f4ac 	.word	0x0802f4ac
 802bf70:	0802f4a0 	.word	0x0802f4a0
 802bf74:	33bbbd2e 	.word	0x33bbbd2e
 802bf78:	40490fdb 	.word	0x40490fdb
 802bf7c:	00000000 	.word	0x00000000
 802bf80:	3f490fdb 	.word	0x3f490fdb

0802bf84 <atanf>:
 802bf84:	b538      	push	{r3, r4, r5, lr}
 802bf86:	ee10 5a10 	vmov	r5, s0
 802bf8a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 802bf8e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 802bf92:	eef0 7a40 	vmov.f32	s15, s0
 802bf96:	d30f      	bcc.n	802bfb8 <atanf+0x34>
 802bf98:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 802bf9c:	d904      	bls.n	802bfa8 <atanf+0x24>
 802bf9e:	ee70 7a00 	vadd.f32	s15, s0, s0
 802bfa2:	eeb0 0a67 	vmov.f32	s0, s15
 802bfa6:	bd38      	pop	{r3, r4, r5, pc}
 802bfa8:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 802c0e0 <atanf+0x15c>
 802bfac:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 802c0e4 <atanf+0x160>
 802bfb0:	2d00      	cmp	r5, #0
 802bfb2:	fe77 7a27 	vselgt.f32	s15, s14, s15
 802bfb6:	e7f4      	b.n	802bfa2 <atanf+0x1e>
 802bfb8:	4b4b      	ldr	r3, [pc, #300]	@ (802c0e8 <atanf+0x164>)
 802bfba:	429c      	cmp	r4, r3
 802bfbc:	d810      	bhi.n	802bfe0 <atanf+0x5c>
 802bfbe:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 802bfc2:	d20a      	bcs.n	802bfda <atanf+0x56>
 802bfc4:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 802c0ec <atanf+0x168>
 802bfc8:	ee30 7a07 	vadd.f32	s14, s0, s14
 802bfcc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802bfd0:	eeb4 7ae6 	vcmpe.f32	s14, s13
 802bfd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bfd8:	dce3      	bgt.n	802bfa2 <atanf+0x1e>
 802bfda:	f04f 33ff 	mov.w	r3, #4294967295
 802bfde:	e013      	b.n	802c008 <atanf+0x84>
 802bfe0:	f000 f8a4 	bl	802c12c <fabsf>
 802bfe4:	4b42      	ldr	r3, [pc, #264]	@ (802c0f0 <atanf+0x16c>)
 802bfe6:	429c      	cmp	r4, r3
 802bfe8:	d84f      	bhi.n	802c08a <atanf+0x106>
 802bfea:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 802bfee:	429c      	cmp	r4, r3
 802bff0:	d841      	bhi.n	802c076 <atanf+0xf2>
 802bff2:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 802bff6:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 802bffa:	eea0 7a27 	vfma.f32	s14, s0, s15
 802bffe:	2300      	movs	r3, #0
 802c000:	ee30 0a27 	vadd.f32	s0, s0, s15
 802c004:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802c008:	1c5a      	adds	r2, r3, #1
 802c00a:	ee27 6aa7 	vmul.f32	s12, s15, s15
 802c00e:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 802c0f4 <atanf+0x170>
 802c012:	eddf 5a39 	vldr	s11, [pc, #228]	@ 802c0f8 <atanf+0x174>
 802c016:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 802c0fc <atanf+0x178>
 802c01a:	ee66 6a06 	vmul.f32	s13, s12, s12
 802c01e:	eee6 5a87 	vfma.f32	s11, s13, s14
 802c022:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 802c100 <atanf+0x17c>
 802c026:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802c02a:	eddf 5a36 	vldr	s11, [pc, #216]	@ 802c104 <atanf+0x180>
 802c02e:	eee7 5a26 	vfma.f32	s11, s14, s13
 802c032:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 802c108 <atanf+0x184>
 802c036:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802c03a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 802c10c <atanf+0x188>
 802c03e:	eee7 5a26 	vfma.f32	s11, s14, s13
 802c042:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 802c110 <atanf+0x18c>
 802c046:	eea6 5a87 	vfma.f32	s10, s13, s14
 802c04a:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 802c114 <atanf+0x190>
 802c04e:	eea5 7a26 	vfma.f32	s14, s10, s13
 802c052:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 802c118 <atanf+0x194>
 802c056:	eea7 5a26 	vfma.f32	s10, s14, s13
 802c05a:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 802c11c <atanf+0x198>
 802c05e:	eea5 7a26 	vfma.f32	s14, s10, s13
 802c062:	ee27 7a26 	vmul.f32	s14, s14, s13
 802c066:	eea5 7a86 	vfma.f32	s14, s11, s12
 802c06a:	ee27 7a87 	vmul.f32	s14, s15, s14
 802c06e:	d121      	bne.n	802c0b4 <atanf+0x130>
 802c070:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c074:	e795      	b.n	802bfa2 <atanf+0x1e>
 802c076:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 802c07a:	ee30 7a67 	vsub.f32	s14, s0, s15
 802c07e:	ee30 0a27 	vadd.f32	s0, s0, s15
 802c082:	2301      	movs	r3, #1
 802c084:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802c088:	e7be      	b.n	802c008 <atanf+0x84>
 802c08a:	4b25      	ldr	r3, [pc, #148]	@ (802c120 <atanf+0x19c>)
 802c08c:	429c      	cmp	r4, r3
 802c08e:	d80b      	bhi.n	802c0a8 <atanf+0x124>
 802c090:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 802c094:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802c098:	eea0 7a27 	vfma.f32	s14, s0, s15
 802c09c:	2302      	movs	r3, #2
 802c09e:	ee70 6a67 	vsub.f32	s13, s0, s15
 802c0a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802c0a6:	e7af      	b.n	802c008 <atanf+0x84>
 802c0a8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 802c0ac:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802c0b0:	2303      	movs	r3, #3
 802c0b2:	e7a9      	b.n	802c008 <atanf+0x84>
 802c0b4:	4a1b      	ldr	r2, [pc, #108]	@ (802c124 <atanf+0x1a0>)
 802c0b6:	491c      	ldr	r1, [pc, #112]	@ (802c128 <atanf+0x1a4>)
 802c0b8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802c0bc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 802c0c0:	edd3 6a00 	vldr	s13, [r3]
 802c0c4:	ee37 7a66 	vsub.f32	s14, s14, s13
 802c0c8:	2d00      	cmp	r5, #0
 802c0ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 802c0ce:	edd2 7a00 	vldr	s15, [r2]
 802c0d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c0d6:	bfb8      	it	lt
 802c0d8:	eef1 7a67 	vneglt.f32	s15, s15
 802c0dc:	e761      	b.n	802bfa2 <atanf+0x1e>
 802c0de:	bf00      	nop
 802c0e0:	bfc90fdb 	.word	0xbfc90fdb
 802c0e4:	3fc90fdb 	.word	0x3fc90fdb
 802c0e8:	3edfffff 	.word	0x3edfffff
 802c0ec:	7149f2ca 	.word	0x7149f2ca
 802c0f0:	3f97ffff 	.word	0x3f97ffff
 802c0f4:	3c8569d7 	.word	0x3c8569d7
 802c0f8:	3d4bda59 	.word	0x3d4bda59
 802c0fc:	bd6ef16b 	.word	0xbd6ef16b
 802c100:	3d886b35 	.word	0x3d886b35
 802c104:	3dba2e6e 	.word	0x3dba2e6e
 802c108:	3e124925 	.word	0x3e124925
 802c10c:	3eaaaaab 	.word	0x3eaaaaab
 802c110:	bd15a221 	.word	0xbd15a221
 802c114:	bd9d8795 	.word	0xbd9d8795
 802c118:	bde38e38 	.word	0xbde38e38
 802c11c:	be4ccccd 	.word	0xbe4ccccd
 802c120:	401bffff 	.word	0x401bffff
 802c124:	0802f4c8 	.word	0x0802f4c8
 802c128:	0802f4b8 	.word	0x0802f4b8

0802c12c <fabsf>:
 802c12c:	ee10 3a10 	vmov	r3, s0
 802c130:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802c134:	ee00 3a10 	vmov	s0, r3
 802c138:	4770      	bx	lr

0802c13a <abort>:
 802c13a:	b508      	push	{r3, lr}
 802c13c:	2006      	movs	r0, #6
 802c13e:	f000 facf 	bl	802c6e0 <raise>
 802c142:	2001      	movs	r0, #1
 802c144:	f7d6 fcea 	bl	8002b1c <_exit>

0802c148 <__assert_func>:
 802c148:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802c14a:	4614      	mov	r4, r2
 802c14c:	461a      	mov	r2, r3
 802c14e:	4b09      	ldr	r3, [pc, #36]	@ (802c174 <__assert_func+0x2c>)
 802c150:	681b      	ldr	r3, [r3, #0]
 802c152:	4605      	mov	r5, r0
 802c154:	68d8      	ldr	r0, [r3, #12]
 802c156:	b954      	cbnz	r4, 802c16e <__assert_func+0x26>
 802c158:	4b07      	ldr	r3, [pc, #28]	@ (802c178 <__assert_func+0x30>)
 802c15a:	461c      	mov	r4, r3
 802c15c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802c160:	9100      	str	r1, [sp, #0]
 802c162:	462b      	mov	r3, r5
 802c164:	4905      	ldr	r1, [pc, #20]	@ (802c17c <__assert_func+0x34>)
 802c166:	f000 f983 	bl	802c470 <fiprintf>
 802c16a:	f7ff ffe6 	bl	802c13a <abort>
 802c16e:	4b04      	ldr	r3, [pc, #16]	@ (802c180 <__assert_func+0x38>)
 802c170:	e7f4      	b.n	802c15c <__assert_func+0x14>
 802c172:	bf00      	nop
 802c174:	240000bc 	.word	0x240000bc
 802c178:	0802f513 	.word	0x0802f513
 802c17c:	0802f4e5 	.word	0x0802f4e5
 802c180:	0802f4d8 	.word	0x0802f4d8

0802c184 <atexit>:
 802c184:	2300      	movs	r3, #0
 802c186:	4601      	mov	r1, r0
 802c188:	461a      	mov	r2, r3
 802c18a:	4618      	mov	r0, r3
 802c18c:	f000 bbac 	b.w	802c8e8 <__register_exitproc>

0802c190 <malloc>:
 802c190:	4b02      	ldr	r3, [pc, #8]	@ (802c19c <malloc+0xc>)
 802c192:	4601      	mov	r1, r0
 802c194:	6818      	ldr	r0, [r3, #0]
 802c196:	f000 b82d 	b.w	802c1f4 <_malloc_r>
 802c19a:	bf00      	nop
 802c19c:	240000bc 	.word	0x240000bc

0802c1a0 <free>:
 802c1a0:	4b02      	ldr	r3, [pc, #8]	@ (802c1ac <free+0xc>)
 802c1a2:	4601      	mov	r1, r0
 802c1a4:	6818      	ldr	r0, [r3, #0]
 802c1a6:	f000 bbfb 	b.w	802c9a0 <_free_r>
 802c1aa:	bf00      	nop
 802c1ac:	240000bc 	.word	0x240000bc

0802c1b0 <sbrk_aligned>:
 802c1b0:	b570      	push	{r4, r5, r6, lr}
 802c1b2:	4e0f      	ldr	r6, [pc, #60]	@ (802c1f0 <sbrk_aligned+0x40>)
 802c1b4:	460c      	mov	r4, r1
 802c1b6:	6831      	ldr	r1, [r6, #0]
 802c1b8:	4605      	mov	r5, r0
 802c1ba:	b911      	cbnz	r1, 802c1c2 <sbrk_aligned+0x12>
 802c1bc:	f000 fb36 	bl	802c82c <_sbrk_r>
 802c1c0:	6030      	str	r0, [r6, #0]
 802c1c2:	4621      	mov	r1, r4
 802c1c4:	4628      	mov	r0, r5
 802c1c6:	f000 fb31 	bl	802c82c <_sbrk_r>
 802c1ca:	1c43      	adds	r3, r0, #1
 802c1cc:	d103      	bne.n	802c1d6 <sbrk_aligned+0x26>
 802c1ce:	f04f 34ff 	mov.w	r4, #4294967295
 802c1d2:	4620      	mov	r0, r4
 802c1d4:	bd70      	pop	{r4, r5, r6, pc}
 802c1d6:	1cc4      	adds	r4, r0, #3
 802c1d8:	f024 0403 	bic.w	r4, r4, #3
 802c1dc:	42a0      	cmp	r0, r4
 802c1de:	d0f8      	beq.n	802c1d2 <sbrk_aligned+0x22>
 802c1e0:	1a21      	subs	r1, r4, r0
 802c1e2:	4628      	mov	r0, r5
 802c1e4:	f000 fb22 	bl	802c82c <_sbrk_r>
 802c1e8:	3001      	adds	r0, #1
 802c1ea:	d1f2      	bne.n	802c1d2 <sbrk_aligned+0x22>
 802c1ec:	e7ef      	b.n	802c1ce <sbrk_aligned+0x1e>
 802c1ee:	bf00      	nop
 802c1f0:	24034c68 	.word	0x24034c68

0802c1f4 <_malloc_r>:
 802c1f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c1f8:	1ccd      	adds	r5, r1, #3
 802c1fa:	f025 0503 	bic.w	r5, r5, #3
 802c1fe:	3508      	adds	r5, #8
 802c200:	2d0c      	cmp	r5, #12
 802c202:	bf38      	it	cc
 802c204:	250c      	movcc	r5, #12
 802c206:	2d00      	cmp	r5, #0
 802c208:	4606      	mov	r6, r0
 802c20a:	db01      	blt.n	802c210 <_malloc_r+0x1c>
 802c20c:	42a9      	cmp	r1, r5
 802c20e:	d904      	bls.n	802c21a <_malloc_r+0x26>
 802c210:	230c      	movs	r3, #12
 802c212:	6033      	str	r3, [r6, #0]
 802c214:	2000      	movs	r0, #0
 802c216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c21a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802c2f0 <_malloc_r+0xfc>
 802c21e:	f000 f869 	bl	802c2f4 <__malloc_lock>
 802c222:	f8d8 3000 	ldr.w	r3, [r8]
 802c226:	461c      	mov	r4, r3
 802c228:	bb44      	cbnz	r4, 802c27c <_malloc_r+0x88>
 802c22a:	4629      	mov	r1, r5
 802c22c:	4630      	mov	r0, r6
 802c22e:	f7ff ffbf 	bl	802c1b0 <sbrk_aligned>
 802c232:	1c43      	adds	r3, r0, #1
 802c234:	4604      	mov	r4, r0
 802c236:	d158      	bne.n	802c2ea <_malloc_r+0xf6>
 802c238:	f8d8 4000 	ldr.w	r4, [r8]
 802c23c:	4627      	mov	r7, r4
 802c23e:	2f00      	cmp	r7, #0
 802c240:	d143      	bne.n	802c2ca <_malloc_r+0xd6>
 802c242:	2c00      	cmp	r4, #0
 802c244:	d04b      	beq.n	802c2de <_malloc_r+0xea>
 802c246:	6823      	ldr	r3, [r4, #0]
 802c248:	4639      	mov	r1, r7
 802c24a:	4630      	mov	r0, r6
 802c24c:	eb04 0903 	add.w	r9, r4, r3
 802c250:	f000 faec 	bl	802c82c <_sbrk_r>
 802c254:	4581      	cmp	r9, r0
 802c256:	d142      	bne.n	802c2de <_malloc_r+0xea>
 802c258:	6821      	ldr	r1, [r4, #0]
 802c25a:	1a6d      	subs	r5, r5, r1
 802c25c:	4629      	mov	r1, r5
 802c25e:	4630      	mov	r0, r6
 802c260:	f7ff ffa6 	bl	802c1b0 <sbrk_aligned>
 802c264:	3001      	adds	r0, #1
 802c266:	d03a      	beq.n	802c2de <_malloc_r+0xea>
 802c268:	6823      	ldr	r3, [r4, #0]
 802c26a:	442b      	add	r3, r5
 802c26c:	6023      	str	r3, [r4, #0]
 802c26e:	f8d8 3000 	ldr.w	r3, [r8]
 802c272:	685a      	ldr	r2, [r3, #4]
 802c274:	bb62      	cbnz	r2, 802c2d0 <_malloc_r+0xdc>
 802c276:	f8c8 7000 	str.w	r7, [r8]
 802c27a:	e00f      	b.n	802c29c <_malloc_r+0xa8>
 802c27c:	6822      	ldr	r2, [r4, #0]
 802c27e:	1b52      	subs	r2, r2, r5
 802c280:	d420      	bmi.n	802c2c4 <_malloc_r+0xd0>
 802c282:	2a0b      	cmp	r2, #11
 802c284:	d917      	bls.n	802c2b6 <_malloc_r+0xc2>
 802c286:	1961      	adds	r1, r4, r5
 802c288:	42a3      	cmp	r3, r4
 802c28a:	6025      	str	r5, [r4, #0]
 802c28c:	bf18      	it	ne
 802c28e:	6059      	strne	r1, [r3, #4]
 802c290:	6863      	ldr	r3, [r4, #4]
 802c292:	bf08      	it	eq
 802c294:	f8c8 1000 	streq.w	r1, [r8]
 802c298:	5162      	str	r2, [r4, r5]
 802c29a:	604b      	str	r3, [r1, #4]
 802c29c:	4630      	mov	r0, r6
 802c29e:	f000 f82f 	bl	802c300 <__malloc_unlock>
 802c2a2:	f104 000b 	add.w	r0, r4, #11
 802c2a6:	1d23      	adds	r3, r4, #4
 802c2a8:	f020 0007 	bic.w	r0, r0, #7
 802c2ac:	1ac2      	subs	r2, r0, r3
 802c2ae:	bf1c      	itt	ne
 802c2b0:	1a1b      	subne	r3, r3, r0
 802c2b2:	50a3      	strne	r3, [r4, r2]
 802c2b4:	e7af      	b.n	802c216 <_malloc_r+0x22>
 802c2b6:	6862      	ldr	r2, [r4, #4]
 802c2b8:	42a3      	cmp	r3, r4
 802c2ba:	bf0c      	ite	eq
 802c2bc:	f8c8 2000 	streq.w	r2, [r8]
 802c2c0:	605a      	strne	r2, [r3, #4]
 802c2c2:	e7eb      	b.n	802c29c <_malloc_r+0xa8>
 802c2c4:	4623      	mov	r3, r4
 802c2c6:	6864      	ldr	r4, [r4, #4]
 802c2c8:	e7ae      	b.n	802c228 <_malloc_r+0x34>
 802c2ca:	463c      	mov	r4, r7
 802c2cc:	687f      	ldr	r7, [r7, #4]
 802c2ce:	e7b6      	b.n	802c23e <_malloc_r+0x4a>
 802c2d0:	461a      	mov	r2, r3
 802c2d2:	685b      	ldr	r3, [r3, #4]
 802c2d4:	42a3      	cmp	r3, r4
 802c2d6:	d1fb      	bne.n	802c2d0 <_malloc_r+0xdc>
 802c2d8:	2300      	movs	r3, #0
 802c2da:	6053      	str	r3, [r2, #4]
 802c2dc:	e7de      	b.n	802c29c <_malloc_r+0xa8>
 802c2de:	230c      	movs	r3, #12
 802c2e0:	6033      	str	r3, [r6, #0]
 802c2e2:	4630      	mov	r0, r6
 802c2e4:	f000 f80c 	bl	802c300 <__malloc_unlock>
 802c2e8:	e794      	b.n	802c214 <_malloc_r+0x20>
 802c2ea:	6005      	str	r5, [r0, #0]
 802c2ec:	e7d6      	b.n	802c29c <_malloc_r+0xa8>
 802c2ee:	bf00      	nop
 802c2f0:	24034c6c 	.word	0x24034c6c

0802c2f4 <__malloc_lock>:
 802c2f4:	4801      	ldr	r0, [pc, #4]	@ (802c2fc <__malloc_lock+0x8>)
 802c2f6:	f000 bae6 	b.w	802c8c6 <__retarget_lock_acquire_recursive>
 802c2fa:	bf00      	nop
 802c2fc:	24034db0 	.word	0x24034db0

0802c300 <__malloc_unlock>:
 802c300:	4801      	ldr	r0, [pc, #4]	@ (802c308 <__malloc_unlock+0x8>)
 802c302:	f000 bae1 	b.w	802c8c8 <__retarget_lock_release_recursive>
 802c306:	bf00      	nop
 802c308:	24034db0 	.word	0x24034db0

0802c30c <__cxa_atexit>:
 802c30c:	b510      	push	{r4, lr}
 802c30e:	4604      	mov	r4, r0
 802c310:	4804      	ldr	r0, [pc, #16]	@ (802c324 <__cxa_atexit+0x18>)
 802c312:	4613      	mov	r3, r2
 802c314:	b120      	cbz	r0, 802c320 <__cxa_atexit+0x14>
 802c316:	460a      	mov	r2, r1
 802c318:	2002      	movs	r0, #2
 802c31a:	4621      	mov	r1, r4
 802c31c:	f000 fae4 	bl	802c8e8 <__register_exitproc>
 802c320:	bd10      	pop	{r4, pc}
 802c322:	bf00      	nop
 802c324:	0802c8e9 	.word	0x0802c8e9

0802c328 <std>:
 802c328:	2300      	movs	r3, #0
 802c32a:	b510      	push	{r4, lr}
 802c32c:	4604      	mov	r4, r0
 802c32e:	e9c0 3300 	strd	r3, r3, [r0]
 802c332:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802c336:	6083      	str	r3, [r0, #8]
 802c338:	8181      	strh	r1, [r0, #12]
 802c33a:	6643      	str	r3, [r0, #100]	@ 0x64
 802c33c:	81c2      	strh	r2, [r0, #14]
 802c33e:	6183      	str	r3, [r0, #24]
 802c340:	4619      	mov	r1, r3
 802c342:	2208      	movs	r2, #8
 802c344:	305c      	adds	r0, #92	@ 0x5c
 802c346:	f000 f99b 	bl	802c680 <memset>
 802c34a:	4b0d      	ldr	r3, [pc, #52]	@ (802c380 <std+0x58>)
 802c34c:	6263      	str	r3, [r4, #36]	@ 0x24
 802c34e:	4b0d      	ldr	r3, [pc, #52]	@ (802c384 <std+0x5c>)
 802c350:	62a3      	str	r3, [r4, #40]	@ 0x28
 802c352:	4b0d      	ldr	r3, [pc, #52]	@ (802c388 <std+0x60>)
 802c354:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802c356:	4b0d      	ldr	r3, [pc, #52]	@ (802c38c <std+0x64>)
 802c358:	6323      	str	r3, [r4, #48]	@ 0x30
 802c35a:	4b0d      	ldr	r3, [pc, #52]	@ (802c390 <std+0x68>)
 802c35c:	6224      	str	r4, [r4, #32]
 802c35e:	429c      	cmp	r4, r3
 802c360:	d006      	beq.n	802c370 <std+0x48>
 802c362:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802c366:	4294      	cmp	r4, r2
 802c368:	d002      	beq.n	802c370 <std+0x48>
 802c36a:	33d0      	adds	r3, #208	@ 0xd0
 802c36c:	429c      	cmp	r4, r3
 802c36e:	d105      	bne.n	802c37c <std+0x54>
 802c370:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802c374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802c378:	f000 baa4 	b.w	802c8c4 <__retarget_lock_init_recursive>
 802c37c:	bd10      	pop	{r4, pc}
 802c37e:	bf00      	nop
 802c380:	0802c4d1 	.word	0x0802c4d1
 802c384:	0802c4f3 	.word	0x0802c4f3
 802c388:	0802c52b 	.word	0x0802c52b
 802c38c:	0802c54f 	.word	0x0802c54f
 802c390:	24034c70 	.word	0x24034c70

0802c394 <stdio_exit_handler>:
 802c394:	4a02      	ldr	r2, [pc, #8]	@ (802c3a0 <stdio_exit_handler+0xc>)
 802c396:	4903      	ldr	r1, [pc, #12]	@ (802c3a4 <stdio_exit_handler+0x10>)
 802c398:	4803      	ldr	r0, [pc, #12]	@ (802c3a8 <stdio_exit_handler+0x14>)
 802c39a:	f000 b87b 	b.w	802c494 <_fwalk_sglue>
 802c39e:	bf00      	nop
 802c3a0:	240000b0 	.word	0x240000b0
 802c3a4:	0802d0dd 	.word	0x0802d0dd
 802c3a8:	240000c0 	.word	0x240000c0

0802c3ac <cleanup_stdio>:
 802c3ac:	6841      	ldr	r1, [r0, #4]
 802c3ae:	4b0c      	ldr	r3, [pc, #48]	@ (802c3e0 <cleanup_stdio+0x34>)
 802c3b0:	4299      	cmp	r1, r3
 802c3b2:	b510      	push	{r4, lr}
 802c3b4:	4604      	mov	r4, r0
 802c3b6:	d001      	beq.n	802c3bc <cleanup_stdio+0x10>
 802c3b8:	f000 fe90 	bl	802d0dc <_fflush_r>
 802c3bc:	68a1      	ldr	r1, [r4, #8]
 802c3be:	4b09      	ldr	r3, [pc, #36]	@ (802c3e4 <cleanup_stdio+0x38>)
 802c3c0:	4299      	cmp	r1, r3
 802c3c2:	d002      	beq.n	802c3ca <cleanup_stdio+0x1e>
 802c3c4:	4620      	mov	r0, r4
 802c3c6:	f000 fe89 	bl	802d0dc <_fflush_r>
 802c3ca:	68e1      	ldr	r1, [r4, #12]
 802c3cc:	4b06      	ldr	r3, [pc, #24]	@ (802c3e8 <cleanup_stdio+0x3c>)
 802c3ce:	4299      	cmp	r1, r3
 802c3d0:	d004      	beq.n	802c3dc <cleanup_stdio+0x30>
 802c3d2:	4620      	mov	r0, r4
 802c3d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802c3d8:	f000 be80 	b.w	802d0dc <_fflush_r>
 802c3dc:	bd10      	pop	{r4, pc}
 802c3de:	bf00      	nop
 802c3e0:	24034c70 	.word	0x24034c70
 802c3e4:	24034cd8 	.word	0x24034cd8
 802c3e8:	24034d40 	.word	0x24034d40

0802c3ec <global_stdio_init.part.0>:
 802c3ec:	b510      	push	{r4, lr}
 802c3ee:	4b0b      	ldr	r3, [pc, #44]	@ (802c41c <global_stdio_init.part.0+0x30>)
 802c3f0:	4c0b      	ldr	r4, [pc, #44]	@ (802c420 <global_stdio_init.part.0+0x34>)
 802c3f2:	4a0c      	ldr	r2, [pc, #48]	@ (802c424 <global_stdio_init.part.0+0x38>)
 802c3f4:	601a      	str	r2, [r3, #0]
 802c3f6:	4620      	mov	r0, r4
 802c3f8:	2200      	movs	r2, #0
 802c3fa:	2104      	movs	r1, #4
 802c3fc:	f7ff ff94 	bl	802c328 <std>
 802c400:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802c404:	2201      	movs	r2, #1
 802c406:	2109      	movs	r1, #9
 802c408:	f7ff ff8e 	bl	802c328 <std>
 802c40c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802c410:	2202      	movs	r2, #2
 802c412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802c416:	2112      	movs	r1, #18
 802c418:	f7ff bf86 	b.w	802c328 <std>
 802c41c:	24034da8 	.word	0x24034da8
 802c420:	24034c70 	.word	0x24034c70
 802c424:	0802c395 	.word	0x0802c395

0802c428 <__sfp_lock_acquire>:
 802c428:	4801      	ldr	r0, [pc, #4]	@ (802c430 <__sfp_lock_acquire+0x8>)
 802c42a:	f000 ba4c 	b.w	802c8c6 <__retarget_lock_acquire_recursive>
 802c42e:	bf00      	nop
 802c430:	24034db2 	.word	0x24034db2

0802c434 <__sfp_lock_release>:
 802c434:	4801      	ldr	r0, [pc, #4]	@ (802c43c <__sfp_lock_release+0x8>)
 802c436:	f000 ba47 	b.w	802c8c8 <__retarget_lock_release_recursive>
 802c43a:	bf00      	nop
 802c43c:	24034db2 	.word	0x24034db2

0802c440 <__sinit>:
 802c440:	b510      	push	{r4, lr}
 802c442:	4604      	mov	r4, r0
 802c444:	f7ff fff0 	bl	802c428 <__sfp_lock_acquire>
 802c448:	6a23      	ldr	r3, [r4, #32]
 802c44a:	b11b      	cbz	r3, 802c454 <__sinit+0x14>
 802c44c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802c450:	f7ff bff0 	b.w	802c434 <__sfp_lock_release>
 802c454:	4b04      	ldr	r3, [pc, #16]	@ (802c468 <__sinit+0x28>)
 802c456:	6223      	str	r3, [r4, #32]
 802c458:	4b04      	ldr	r3, [pc, #16]	@ (802c46c <__sinit+0x2c>)
 802c45a:	681b      	ldr	r3, [r3, #0]
 802c45c:	2b00      	cmp	r3, #0
 802c45e:	d1f5      	bne.n	802c44c <__sinit+0xc>
 802c460:	f7ff ffc4 	bl	802c3ec <global_stdio_init.part.0>
 802c464:	e7f2      	b.n	802c44c <__sinit+0xc>
 802c466:	bf00      	nop
 802c468:	0802c3ad 	.word	0x0802c3ad
 802c46c:	24034da8 	.word	0x24034da8

0802c470 <fiprintf>:
 802c470:	b40e      	push	{r1, r2, r3}
 802c472:	b503      	push	{r0, r1, lr}
 802c474:	4601      	mov	r1, r0
 802c476:	ab03      	add	r3, sp, #12
 802c478:	4805      	ldr	r0, [pc, #20]	@ (802c490 <fiprintf+0x20>)
 802c47a:	f853 2b04 	ldr.w	r2, [r3], #4
 802c47e:	6800      	ldr	r0, [r0, #0]
 802c480:	9301      	str	r3, [sp, #4]
 802c482:	f000 fb01 	bl	802ca88 <_vfiprintf_r>
 802c486:	b002      	add	sp, #8
 802c488:	f85d eb04 	ldr.w	lr, [sp], #4
 802c48c:	b003      	add	sp, #12
 802c48e:	4770      	bx	lr
 802c490:	240000bc 	.word	0x240000bc

0802c494 <_fwalk_sglue>:
 802c494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c498:	4607      	mov	r7, r0
 802c49a:	4688      	mov	r8, r1
 802c49c:	4614      	mov	r4, r2
 802c49e:	2600      	movs	r6, #0
 802c4a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802c4a4:	f1b9 0901 	subs.w	r9, r9, #1
 802c4a8:	d505      	bpl.n	802c4b6 <_fwalk_sglue+0x22>
 802c4aa:	6824      	ldr	r4, [r4, #0]
 802c4ac:	2c00      	cmp	r4, #0
 802c4ae:	d1f7      	bne.n	802c4a0 <_fwalk_sglue+0xc>
 802c4b0:	4630      	mov	r0, r6
 802c4b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c4b6:	89ab      	ldrh	r3, [r5, #12]
 802c4b8:	2b01      	cmp	r3, #1
 802c4ba:	d907      	bls.n	802c4cc <_fwalk_sglue+0x38>
 802c4bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802c4c0:	3301      	adds	r3, #1
 802c4c2:	d003      	beq.n	802c4cc <_fwalk_sglue+0x38>
 802c4c4:	4629      	mov	r1, r5
 802c4c6:	4638      	mov	r0, r7
 802c4c8:	47c0      	blx	r8
 802c4ca:	4306      	orrs	r6, r0
 802c4cc:	3568      	adds	r5, #104	@ 0x68
 802c4ce:	e7e9      	b.n	802c4a4 <_fwalk_sglue+0x10>

0802c4d0 <__sread>:
 802c4d0:	b510      	push	{r4, lr}
 802c4d2:	460c      	mov	r4, r1
 802c4d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c4d8:	f000 f982 	bl	802c7e0 <_read_r>
 802c4dc:	2800      	cmp	r0, #0
 802c4de:	bfab      	itete	ge
 802c4e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802c4e2:	89a3      	ldrhlt	r3, [r4, #12]
 802c4e4:	181b      	addge	r3, r3, r0
 802c4e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802c4ea:	bfac      	ite	ge
 802c4ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 802c4ee:	81a3      	strhlt	r3, [r4, #12]
 802c4f0:	bd10      	pop	{r4, pc}

0802c4f2 <__swrite>:
 802c4f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c4f6:	461f      	mov	r7, r3
 802c4f8:	898b      	ldrh	r3, [r1, #12]
 802c4fa:	05db      	lsls	r3, r3, #23
 802c4fc:	4605      	mov	r5, r0
 802c4fe:	460c      	mov	r4, r1
 802c500:	4616      	mov	r6, r2
 802c502:	d505      	bpl.n	802c510 <__swrite+0x1e>
 802c504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c508:	2302      	movs	r3, #2
 802c50a:	2200      	movs	r2, #0
 802c50c:	f000 f956 	bl	802c7bc <_lseek_r>
 802c510:	89a3      	ldrh	r3, [r4, #12]
 802c512:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802c516:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802c51a:	81a3      	strh	r3, [r4, #12]
 802c51c:	4632      	mov	r2, r6
 802c51e:	463b      	mov	r3, r7
 802c520:	4628      	mov	r0, r5
 802c522:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802c526:	f000 b991 	b.w	802c84c <_write_r>

0802c52a <__sseek>:
 802c52a:	b510      	push	{r4, lr}
 802c52c:	460c      	mov	r4, r1
 802c52e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c532:	f000 f943 	bl	802c7bc <_lseek_r>
 802c536:	1c43      	adds	r3, r0, #1
 802c538:	89a3      	ldrh	r3, [r4, #12]
 802c53a:	bf15      	itete	ne
 802c53c:	6560      	strne	r0, [r4, #84]	@ 0x54
 802c53e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802c542:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802c546:	81a3      	strheq	r3, [r4, #12]
 802c548:	bf18      	it	ne
 802c54a:	81a3      	strhne	r3, [r4, #12]
 802c54c:	bd10      	pop	{r4, pc}

0802c54e <__sclose>:
 802c54e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c552:	f000 b8cd 	b.w	802c6f0 <_close_r>

0802c556 <__swbuf_r>:
 802c556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c558:	460e      	mov	r6, r1
 802c55a:	4614      	mov	r4, r2
 802c55c:	4605      	mov	r5, r0
 802c55e:	b118      	cbz	r0, 802c568 <__swbuf_r+0x12>
 802c560:	6a03      	ldr	r3, [r0, #32]
 802c562:	b90b      	cbnz	r3, 802c568 <__swbuf_r+0x12>
 802c564:	f7ff ff6c 	bl	802c440 <__sinit>
 802c568:	69a3      	ldr	r3, [r4, #24]
 802c56a:	60a3      	str	r3, [r4, #8]
 802c56c:	89a3      	ldrh	r3, [r4, #12]
 802c56e:	071a      	lsls	r2, r3, #28
 802c570:	d501      	bpl.n	802c576 <__swbuf_r+0x20>
 802c572:	6923      	ldr	r3, [r4, #16]
 802c574:	b943      	cbnz	r3, 802c588 <__swbuf_r+0x32>
 802c576:	4621      	mov	r1, r4
 802c578:	4628      	mov	r0, r5
 802c57a:	f000 f82b 	bl	802c5d4 <__swsetup_r>
 802c57e:	b118      	cbz	r0, 802c588 <__swbuf_r+0x32>
 802c580:	f04f 37ff 	mov.w	r7, #4294967295
 802c584:	4638      	mov	r0, r7
 802c586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802c588:	6823      	ldr	r3, [r4, #0]
 802c58a:	6922      	ldr	r2, [r4, #16]
 802c58c:	1a98      	subs	r0, r3, r2
 802c58e:	6963      	ldr	r3, [r4, #20]
 802c590:	b2f6      	uxtb	r6, r6
 802c592:	4283      	cmp	r3, r0
 802c594:	4637      	mov	r7, r6
 802c596:	dc05      	bgt.n	802c5a4 <__swbuf_r+0x4e>
 802c598:	4621      	mov	r1, r4
 802c59a:	4628      	mov	r0, r5
 802c59c:	f000 fd9e 	bl	802d0dc <_fflush_r>
 802c5a0:	2800      	cmp	r0, #0
 802c5a2:	d1ed      	bne.n	802c580 <__swbuf_r+0x2a>
 802c5a4:	68a3      	ldr	r3, [r4, #8]
 802c5a6:	3b01      	subs	r3, #1
 802c5a8:	60a3      	str	r3, [r4, #8]
 802c5aa:	6823      	ldr	r3, [r4, #0]
 802c5ac:	1c5a      	adds	r2, r3, #1
 802c5ae:	6022      	str	r2, [r4, #0]
 802c5b0:	701e      	strb	r6, [r3, #0]
 802c5b2:	6962      	ldr	r2, [r4, #20]
 802c5b4:	1c43      	adds	r3, r0, #1
 802c5b6:	429a      	cmp	r2, r3
 802c5b8:	d004      	beq.n	802c5c4 <__swbuf_r+0x6e>
 802c5ba:	89a3      	ldrh	r3, [r4, #12]
 802c5bc:	07db      	lsls	r3, r3, #31
 802c5be:	d5e1      	bpl.n	802c584 <__swbuf_r+0x2e>
 802c5c0:	2e0a      	cmp	r6, #10
 802c5c2:	d1df      	bne.n	802c584 <__swbuf_r+0x2e>
 802c5c4:	4621      	mov	r1, r4
 802c5c6:	4628      	mov	r0, r5
 802c5c8:	f000 fd88 	bl	802d0dc <_fflush_r>
 802c5cc:	2800      	cmp	r0, #0
 802c5ce:	d0d9      	beq.n	802c584 <__swbuf_r+0x2e>
 802c5d0:	e7d6      	b.n	802c580 <__swbuf_r+0x2a>
	...

0802c5d4 <__swsetup_r>:
 802c5d4:	b538      	push	{r3, r4, r5, lr}
 802c5d6:	4b29      	ldr	r3, [pc, #164]	@ (802c67c <__swsetup_r+0xa8>)
 802c5d8:	4605      	mov	r5, r0
 802c5da:	6818      	ldr	r0, [r3, #0]
 802c5dc:	460c      	mov	r4, r1
 802c5de:	b118      	cbz	r0, 802c5e8 <__swsetup_r+0x14>
 802c5e0:	6a03      	ldr	r3, [r0, #32]
 802c5e2:	b90b      	cbnz	r3, 802c5e8 <__swsetup_r+0x14>
 802c5e4:	f7ff ff2c 	bl	802c440 <__sinit>
 802c5e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c5ec:	0719      	lsls	r1, r3, #28
 802c5ee:	d422      	bmi.n	802c636 <__swsetup_r+0x62>
 802c5f0:	06da      	lsls	r2, r3, #27
 802c5f2:	d407      	bmi.n	802c604 <__swsetup_r+0x30>
 802c5f4:	2209      	movs	r2, #9
 802c5f6:	602a      	str	r2, [r5, #0]
 802c5f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802c5fc:	81a3      	strh	r3, [r4, #12]
 802c5fe:	f04f 30ff 	mov.w	r0, #4294967295
 802c602:	e033      	b.n	802c66c <__swsetup_r+0x98>
 802c604:	0758      	lsls	r0, r3, #29
 802c606:	d512      	bpl.n	802c62e <__swsetup_r+0x5a>
 802c608:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802c60a:	b141      	cbz	r1, 802c61e <__swsetup_r+0x4a>
 802c60c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802c610:	4299      	cmp	r1, r3
 802c612:	d002      	beq.n	802c61a <__swsetup_r+0x46>
 802c614:	4628      	mov	r0, r5
 802c616:	f000 f9c3 	bl	802c9a0 <_free_r>
 802c61a:	2300      	movs	r3, #0
 802c61c:	6363      	str	r3, [r4, #52]	@ 0x34
 802c61e:	89a3      	ldrh	r3, [r4, #12]
 802c620:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802c624:	81a3      	strh	r3, [r4, #12]
 802c626:	2300      	movs	r3, #0
 802c628:	6063      	str	r3, [r4, #4]
 802c62a:	6923      	ldr	r3, [r4, #16]
 802c62c:	6023      	str	r3, [r4, #0]
 802c62e:	89a3      	ldrh	r3, [r4, #12]
 802c630:	f043 0308 	orr.w	r3, r3, #8
 802c634:	81a3      	strh	r3, [r4, #12]
 802c636:	6923      	ldr	r3, [r4, #16]
 802c638:	b94b      	cbnz	r3, 802c64e <__swsetup_r+0x7a>
 802c63a:	89a3      	ldrh	r3, [r4, #12]
 802c63c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802c640:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802c644:	d003      	beq.n	802c64e <__swsetup_r+0x7a>
 802c646:	4621      	mov	r1, r4
 802c648:	4628      	mov	r0, r5
 802c64a:	f000 fd95 	bl	802d178 <__smakebuf_r>
 802c64e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c652:	f013 0201 	ands.w	r2, r3, #1
 802c656:	d00a      	beq.n	802c66e <__swsetup_r+0x9a>
 802c658:	2200      	movs	r2, #0
 802c65a:	60a2      	str	r2, [r4, #8]
 802c65c:	6962      	ldr	r2, [r4, #20]
 802c65e:	4252      	negs	r2, r2
 802c660:	61a2      	str	r2, [r4, #24]
 802c662:	6922      	ldr	r2, [r4, #16]
 802c664:	b942      	cbnz	r2, 802c678 <__swsetup_r+0xa4>
 802c666:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802c66a:	d1c5      	bne.n	802c5f8 <__swsetup_r+0x24>
 802c66c:	bd38      	pop	{r3, r4, r5, pc}
 802c66e:	0799      	lsls	r1, r3, #30
 802c670:	bf58      	it	pl
 802c672:	6962      	ldrpl	r2, [r4, #20]
 802c674:	60a2      	str	r2, [r4, #8]
 802c676:	e7f4      	b.n	802c662 <__swsetup_r+0x8e>
 802c678:	2000      	movs	r0, #0
 802c67a:	e7f7      	b.n	802c66c <__swsetup_r+0x98>
 802c67c:	240000bc 	.word	0x240000bc

0802c680 <memset>:
 802c680:	4402      	add	r2, r0
 802c682:	4603      	mov	r3, r0
 802c684:	4293      	cmp	r3, r2
 802c686:	d100      	bne.n	802c68a <memset+0xa>
 802c688:	4770      	bx	lr
 802c68a:	f803 1b01 	strb.w	r1, [r3], #1
 802c68e:	e7f9      	b.n	802c684 <memset+0x4>

0802c690 <_raise_r>:
 802c690:	291f      	cmp	r1, #31
 802c692:	b538      	push	{r3, r4, r5, lr}
 802c694:	4605      	mov	r5, r0
 802c696:	460c      	mov	r4, r1
 802c698:	d904      	bls.n	802c6a4 <_raise_r+0x14>
 802c69a:	2316      	movs	r3, #22
 802c69c:	6003      	str	r3, [r0, #0]
 802c69e:	f04f 30ff 	mov.w	r0, #4294967295
 802c6a2:	bd38      	pop	{r3, r4, r5, pc}
 802c6a4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802c6a6:	b112      	cbz	r2, 802c6ae <_raise_r+0x1e>
 802c6a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802c6ac:	b94b      	cbnz	r3, 802c6c2 <_raise_r+0x32>
 802c6ae:	4628      	mov	r0, r5
 802c6b0:	f000 f8ba 	bl	802c828 <_getpid_r>
 802c6b4:	4622      	mov	r2, r4
 802c6b6:	4601      	mov	r1, r0
 802c6b8:	4628      	mov	r0, r5
 802c6ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802c6be:	f000 b8a1 	b.w	802c804 <_kill_r>
 802c6c2:	2b01      	cmp	r3, #1
 802c6c4:	d00a      	beq.n	802c6dc <_raise_r+0x4c>
 802c6c6:	1c59      	adds	r1, r3, #1
 802c6c8:	d103      	bne.n	802c6d2 <_raise_r+0x42>
 802c6ca:	2316      	movs	r3, #22
 802c6cc:	6003      	str	r3, [r0, #0]
 802c6ce:	2001      	movs	r0, #1
 802c6d0:	e7e7      	b.n	802c6a2 <_raise_r+0x12>
 802c6d2:	2100      	movs	r1, #0
 802c6d4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802c6d8:	4620      	mov	r0, r4
 802c6da:	4798      	blx	r3
 802c6dc:	2000      	movs	r0, #0
 802c6de:	e7e0      	b.n	802c6a2 <_raise_r+0x12>

0802c6e0 <raise>:
 802c6e0:	4b02      	ldr	r3, [pc, #8]	@ (802c6ec <raise+0xc>)
 802c6e2:	4601      	mov	r1, r0
 802c6e4:	6818      	ldr	r0, [r3, #0]
 802c6e6:	f7ff bfd3 	b.w	802c690 <_raise_r>
 802c6ea:	bf00      	nop
 802c6ec:	240000bc 	.word	0x240000bc

0802c6f0 <_close_r>:
 802c6f0:	b538      	push	{r3, r4, r5, lr}
 802c6f2:	4d06      	ldr	r5, [pc, #24]	@ (802c70c <_close_r+0x1c>)
 802c6f4:	2300      	movs	r3, #0
 802c6f6:	4604      	mov	r4, r0
 802c6f8:	4608      	mov	r0, r1
 802c6fa:	602b      	str	r3, [r5, #0]
 802c6fc:	f7d6 fa52 	bl	8002ba4 <_close>
 802c700:	1c43      	adds	r3, r0, #1
 802c702:	d102      	bne.n	802c70a <_close_r+0x1a>
 802c704:	682b      	ldr	r3, [r5, #0]
 802c706:	b103      	cbz	r3, 802c70a <_close_r+0x1a>
 802c708:	6023      	str	r3, [r4, #0]
 802c70a:	bd38      	pop	{r3, r4, r5, pc}
 802c70c:	24034dac 	.word	0x24034dac

0802c710 <_reclaim_reent>:
 802c710:	4b29      	ldr	r3, [pc, #164]	@ (802c7b8 <_reclaim_reent+0xa8>)
 802c712:	681b      	ldr	r3, [r3, #0]
 802c714:	4283      	cmp	r3, r0
 802c716:	b570      	push	{r4, r5, r6, lr}
 802c718:	4604      	mov	r4, r0
 802c71a:	d04b      	beq.n	802c7b4 <_reclaim_reent+0xa4>
 802c71c:	69c3      	ldr	r3, [r0, #28]
 802c71e:	b1ab      	cbz	r3, 802c74c <_reclaim_reent+0x3c>
 802c720:	68db      	ldr	r3, [r3, #12]
 802c722:	b16b      	cbz	r3, 802c740 <_reclaim_reent+0x30>
 802c724:	2500      	movs	r5, #0
 802c726:	69e3      	ldr	r3, [r4, #28]
 802c728:	68db      	ldr	r3, [r3, #12]
 802c72a:	5959      	ldr	r1, [r3, r5]
 802c72c:	2900      	cmp	r1, #0
 802c72e:	d13b      	bne.n	802c7a8 <_reclaim_reent+0x98>
 802c730:	3504      	adds	r5, #4
 802c732:	2d80      	cmp	r5, #128	@ 0x80
 802c734:	d1f7      	bne.n	802c726 <_reclaim_reent+0x16>
 802c736:	69e3      	ldr	r3, [r4, #28]
 802c738:	4620      	mov	r0, r4
 802c73a:	68d9      	ldr	r1, [r3, #12]
 802c73c:	f000 f930 	bl	802c9a0 <_free_r>
 802c740:	69e3      	ldr	r3, [r4, #28]
 802c742:	6819      	ldr	r1, [r3, #0]
 802c744:	b111      	cbz	r1, 802c74c <_reclaim_reent+0x3c>
 802c746:	4620      	mov	r0, r4
 802c748:	f000 f92a 	bl	802c9a0 <_free_r>
 802c74c:	6961      	ldr	r1, [r4, #20]
 802c74e:	b111      	cbz	r1, 802c756 <_reclaim_reent+0x46>
 802c750:	4620      	mov	r0, r4
 802c752:	f000 f925 	bl	802c9a0 <_free_r>
 802c756:	69e1      	ldr	r1, [r4, #28]
 802c758:	b111      	cbz	r1, 802c760 <_reclaim_reent+0x50>
 802c75a:	4620      	mov	r0, r4
 802c75c:	f000 f920 	bl	802c9a0 <_free_r>
 802c760:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802c762:	b111      	cbz	r1, 802c76a <_reclaim_reent+0x5a>
 802c764:	4620      	mov	r0, r4
 802c766:	f000 f91b 	bl	802c9a0 <_free_r>
 802c76a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802c76c:	b111      	cbz	r1, 802c774 <_reclaim_reent+0x64>
 802c76e:	4620      	mov	r0, r4
 802c770:	f000 f916 	bl	802c9a0 <_free_r>
 802c774:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 802c776:	b111      	cbz	r1, 802c77e <_reclaim_reent+0x6e>
 802c778:	4620      	mov	r0, r4
 802c77a:	f000 f911 	bl	802c9a0 <_free_r>
 802c77e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 802c780:	b111      	cbz	r1, 802c788 <_reclaim_reent+0x78>
 802c782:	4620      	mov	r0, r4
 802c784:	f000 f90c 	bl	802c9a0 <_free_r>
 802c788:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 802c78a:	b111      	cbz	r1, 802c792 <_reclaim_reent+0x82>
 802c78c:	4620      	mov	r0, r4
 802c78e:	f000 f907 	bl	802c9a0 <_free_r>
 802c792:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 802c794:	b111      	cbz	r1, 802c79c <_reclaim_reent+0x8c>
 802c796:	4620      	mov	r0, r4
 802c798:	f000 f902 	bl	802c9a0 <_free_r>
 802c79c:	6a23      	ldr	r3, [r4, #32]
 802c79e:	b14b      	cbz	r3, 802c7b4 <_reclaim_reent+0xa4>
 802c7a0:	4620      	mov	r0, r4
 802c7a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802c7a6:	4718      	bx	r3
 802c7a8:	680e      	ldr	r6, [r1, #0]
 802c7aa:	4620      	mov	r0, r4
 802c7ac:	f000 f8f8 	bl	802c9a0 <_free_r>
 802c7b0:	4631      	mov	r1, r6
 802c7b2:	e7bb      	b.n	802c72c <_reclaim_reent+0x1c>
 802c7b4:	bd70      	pop	{r4, r5, r6, pc}
 802c7b6:	bf00      	nop
 802c7b8:	240000bc 	.word	0x240000bc

0802c7bc <_lseek_r>:
 802c7bc:	b538      	push	{r3, r4, r5, lr}
 802c7be:	4d07      	ldr	r5, [pc, #28]	@ (802c7dc <_lseek_r+0x20>)
 802c7c0:	4604      	mov	r4, r0
 802c7c2:	4608      	mov	r0, r1
 802c7c4:	4611      	mov	r1, r2
 802c7c6:	2200      	movs	r2, #0
 802c7c8:	602a      	str	r2, [r5, #0]
 802c7ca:	461a      	mov	r2, r3
 802c7cc:	f7d6 fa11 	bl	8002bf2 <_lseek>
 802c7d0:	1c43      	adds	r3, r0, #1
 802c7d2:	d102      	bne.n	802c7da <_lseek_r+0x1e>
 802c7d4:	682b      	ldr	r3, [r5, #0]
 802c7d6:	b103      	cbz	r3, 802c7da <_lseek_r+0x1e>
 802c7d8:	6023      	str	r3, [r4, #0]
 802c7da:	bd38      	pop	{r3, r4, r5, pc}
 802c7dc:	24034dac 	.word	0x24034dac

0802c7e0 <_read_r>:
 802c7e0:	b538      	push	{r3, r4, r5, lr}
 802c7e2:	4d07      	ldr	r5, [pc, #28]	@ (802c800 <_read_r+0x20>)
 802c7e4:	4604      	mov	r4, r0
 802c7e6:	4608      	mov	r0, r1
 802c7e8:	4611      	mov	r1, r2
 802c7ea:	2200      	movs	r2, #0
 802c7ec:	602a      	str	r2, [r5, #0]
 802c7ee:	461a      	mov	r2, r3
 802c7f0:	f7d6 f99f 	bl	8002b32 <_read>
 802c7f4:	1c43      	adds	r3, r0, #1
 802c7f6:	d102      	bne.n	802c7fe <_read_r+0x1e>
 802c7f8:	682b      	ldr	r3, [r5, #0]
 802c7fa:	b103      	cbz	r3, 802c7fe <_read_r+0x1e>
 802c7fc:	6023      	str	r3, [r4, #0]
 802c7fe:	bd38      	pop	{r3, r4, r5, pc}
 802c800:	24034dac 	.word	0x24034dac

0802c804 <_kill_r>:
 802c804:	b538      	push	{r3, r4, r5, lr}
 802c806:	4d07      	ldr	r5, [pc, #28]	@ (802c824 <_kill_r+0x20>)
 802c808:	2300      	movs	r3, #0
 802c80a:	4604      	mov	r4, r0
 802c80c:	4608      	mov	r0, r1
 802c80e:	4611      	mov	r1, r2
 802c810:	602b      	str	r3, [r5, #0]
 802c812:	f7d6 f973 	bl	8002afc <_kill>
 802c816:	1c43      	adds	r3, r0, #1
 802c818:	d102      	bne.n	802c820 <_kill_r+0x1c>
 802c81a:	682b      	ldr	r3, [r5, #0]
 802c81c:	b103      	cbz	r3, 802c820 <_kill_r+0x1c>
 802c81e:	6023      	str	r3, [r4, #0]
 802c820:	bd38      	pop	{r3, r4, r5, pc}
 802c822:	bf00      	nop
 802c824:	24034dac 	.word	0x24034dac

0802c828 <_getpid_r>:
 802c828:	f7d6 b960 	b.w	8002aec <_getpid>

0802c82c <_sbrk_r>:
 802c82c:	b538      	push	{r3, r4, r5, lr}
 802c82e:	4d06      	ldr	r5, [pc, #24]	@ (802c848 <_sbrk_r+0x1c>)
 802c830:	2300      	movs	r3, #0
 802c832:	4604      	mov	r4, r0
 802c834:	4608      	mov	r0, r1
 802c836:	602b      	str	r3, [r5, #0]
 802c838:	f7d6 f9e8 	bl	8002c0c <_sbrk>
 802c83c:	1c43      	adds	r3, r0, #1
 802c83e:	d102      	bne.n	802c846 <_sbrk_r+0x1a>
 802c840:	682b      	ldr	r3, [r5, #0]
 802c842:	b103      	cbz	r3, 802c846 <_sbrk_r+0x1a>
 802c844:	6023      	str	r3, [r4, #0]
 802c846:	bd38      	pop	{r3, r4, r5, pc}
 802c848:	24034dac 	.word	0x24034dac

0802c84c <_write_r>:
 802c84c:	b538      	push	{r3, r4, r5, lr}
 802c84e:	4d07      	ldr	r5, [pc, #28]	@ (802c86c <_write_r+0x20>)
 802c850:	4604      	mov	r4, r0
 802c852:	4608      	mov	r0, r1
 802c854:	4611      	mov	r1, r2
 802c856:	2200      	movs	r2, #0
 802c858:	602a      	str	r2, [r5, #0]
 802c85a:	461a      	mov	r2, r3
 802c85c:	f7d6 f986 	bl	8002b6c <_write>
 802c860:	1c43      	adds	r3, r0, #1
 802c862:	d102      	bne.n	802c86a <_write_r+0x1e>
 802c864:	682b      	ldr	r3, [r5, #0]
 802c866:	b103      	cbz	r3, 802c86a <_write_r+0x1e>
 802c868:	6023      	str	r3, [r4, #0]
 802c86a:	bd38      	pop	{r3, r4, r5, pc}
 802c86c:	24034dac 	.word	0x24034dac

0802c870 <__errno>:
 802c870:	4b01      	ldr	r3, [pc, #4]	@ (802c878 <__errno+0x8>)
 802c872:	6818      	ldr	r0, [r3, #0]
 802c874:	4770      	bx	lr
 802c876:	bf00      	nop
 802c878:	240000bc 	.word	0x240000bc

0802c87c <__libc_init_array>:
 802c87c:	b570      	push	{r4, r5, r6, lr}
 802c87e:	4d0d      	ldr	r5, [pc, #52]	@ (802c8b4 <__libc_init_array+0x38>)
 802c880:	4c0d      	ldr	r4, [pc, #52]	@ (802c8b8 <__libc_init_array+0x3c>)
 802c882:	1b64      	subs	r4, r4, r5
 802c884:	10a4      	asrs	r4, r4, #2
 802c886:	2600      	movs	r6, #0
 802c888:	42a6      	cmp	r6, r4
 802c88a:	d109      	bne.n	802c8a0 <__libc_init_array+0x24>
 802c88c:	4d0b      	ldr	r5, [pc, #44]	@ (802c8bc <__libc_init_array+0x40>)
 802c88e:	4c0c      	ldr	r4, [pc, #48]	@ (802c8c0 <__libc_init_array+0x44>)
 802c890:	f000 fcd0 	bl	802d234 <_init>
 802c894:	1b64      	subs	r4, r4, r5
 802c896:	10a4      	asrs	r4, r4, #2
 802c898:	2600      	movs	r6, #0
 802c89a:	42a6      	cmp	r6, r4
 802c89c:	d105      	bne.n	802c8aa <__libc_init_array+0x2e>
 802c89e:	bd70      	pop	{r4, r5, r6, pc}
 802c8a0:	f855 3b04 	ldr.w	r3, [r5], #4
 802c8a4:	4798      	blx	r3
 802c8a6:	3601      	adds	r6, #1
 802c8a8:	e7ee      	b.n	802c888 <__libc_init_array+0xc>
 802c8aa:	f855 3b04 	ldr.w	r3, [r5], #4
 802c8ae:	4798      	blx	r3
 802c8b0:	3601      	adds	r6, #1
 802c8b2:	e7f2      	b.n	802c89a <__libc_init_array+0x1e>
 802c8b4:	08051a04 	.word	0x08051a04
 802c8b8:	08051a04 	.word	0x08051a04
 802c8bc:	08051a04 	.word	0x08051a04
 802c8c0:	08051a18 	.word	0x08051a18

0802c8c4 <__retarget_lock_init_recursive>:
 802c8c4:	4770      	bx	lr

0802c8c6 <__retarget_lock_acquire_recursive>:
 802c8c6:	4770      	bx	lr

0802c8c8 <__retarget_lock_release_recursive>:
 802c8c8:	4770      	bx	lr

0802c8ca <memcpy>:
 802c8ca:	440a      	add	r2, r1
 802c8cc:	4291      	cmp	r1, r2
 802c8ce:	f100 33ff 	add.w	r3, r0, #4294967295
 802c8d2:	d100      	bne.n	802c8d6 <memcpy+0xc>
 802c8d4:	4770      	bx	lr
 802c8d6:	b510      	push	{r4, lr}
 802c8d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 802c8dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 802c8e0:	4291      	cmp	r1, r2
 802c8e2:	d1f9      	bne.n	802c8d8 <memcpy+0xe>
 802c8e4:	bd10      	pop	{r4, pc}
	...

0802c8e8 <__register_exitproc>:
 802c8e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c8ec:	4d27      	ldr	r5, [pc, #156]	@ (802c98c <__register_exitproc+0xa4>)
 802c8ee:	4607      	mov	r7, r0
 802c8f0:	6828      	ldr	r0, [r5, #0]
 802c8f2:	4691      	mov	r9, r2
 802c8f4:	460e      	mov	r6, r1
 802c8f6:	4698      	mov	r8, r3
 802c8f8:	f7ff ffe5 	bl	802c8c6 <__retarget_lock_acquire_recursive>
 802c8fc:	4a24      	ldr	r2, [pc, #144]	@ (802c990 <__register_exitproc+0xa8>)
 802c8fe:	6814      	ldr	r4, [r2, #0]
 802c900:	b93c      	cbnz	r4, 802c912 <__register_exitproc+0x2a>
 802c902:	4b24      	ldr	r3, [pc, #144]	@ (802c994 <__register_exitproc+0xac>)
 802c904:	6013      	str	r3, [r2, #0]
 802c906:	4a24      	ldr	r2, [pc, #144]	@ (802c998 <__register_exitproc+0xb0>)
 802c908:	b112      	cbz	r2, 802c910 <__register_exitproc+0x28>
 802c90a:	6812      	ldr	r2, [r2, #0]
 802c90c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 802c910:	4c20      	ldr	r4, [pc, #128]	@ (802c994 <__register_exitproc+0xac>)
 802c912:	6863      	ldr	r3, [r4, #4]
 802c914:	2b1f      	cmp	r3, #31
 802c916:	dd06      	ble.n	802c926 <__register_exitproc+0x3e>
 802c918:	6828      	ldr	r0, [r5, #0]
 802c91a:	f7ff ffd5 	bl	802c8c8 <__retarget_lock_release_recursive>
 802c91e:	f04f 30ff 	mov.w	r0, #4294967295
 802c922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c926:	b32f      	cbz	r7, 802c974 <__register_exitproc+0x8c>
 802c928:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 802c92c:	b968      	cbnz	r0, 802c94a <__register_exitproc+0x62>
 802c92e:	4b1b      	ldr	r3, [pc, #108]	@ (802c99c <__register_exitproc+0xb4>)
 802c930:	2b00      	cmp	r3, #0
 802c932:	d0f1      	beq.n	802c918 <__register_exitproc+0x30>
 802c934:	f44f 7084 	mov.w	r0, #264	@ 0x108
 802c938:	f7ff fc2a 	bl	802c190 <malloc>
 802c93c:	2800      	cmp	r0, #0
 802c93e:	d0eb      	beq.n	802c918 <__register_exitproc+0x30>
 802c940:	2300      	movs	r3, #0
 802c942:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 802c946:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 802c94a:	6863      	ldr	r3, [r4, #4]
 802c94c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802c950:	2201      	movs	r2, #1
 802c952:	409a      	lsls	r2, r3
 802c954:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802c958:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 802c95c:	4313      	orrs	r3, r2
 802c95e:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 802c962:	2f02      	cmp	r7, #2
 802c964:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 802c968:	bf02      	ittt	eq
 802c96a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 802c96e:	4313      	orreq	r3, r2
 802c970:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 802c974:	6863      	ldr	r3, [r4, #4]
 802c976:	6828      	ldr	r0, [r5, #0]
 802c978:	1c5a      	adds	r2, r3, #1
 802c97a:	3302      	adds	r3, #2
 802c97c:	6062      	str	r2, [r4, #4]
 802c97e:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 802c982:	f7ff ffa1 	bl	802c8c8 <__retarget_lock_release_recursive>
 802c986:	2000      	movs	r0, #0
 802c988:	e7cb      	b.n	802c922 <__register_exitproc+0x3a>
 802c98a:	bf00      	nop
 802c98c:	2400010c 	.word	0x2400010c
 802c990:	24034e40 	.word	0x24034e40
 802c994:	24034db4 	.word	0x24034db4
 802c998:	0802f514 	.word	0x0802f514
 802c99c:	0802c191 	.word	0x0802c191

0802c9a0 <_free_r>:
 802c9a0:	b538      	push	{r3, r4, r5, lr}
 802c9a2:	4605      	mov	r5, r0
 802c9a4:	2900      	cmp	r1, #0
 802c9a6:	d041      	beq.n	802ca2c <_free_r+0x8c>
 802c9a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802c9ac:	1f0c      	subs	r4, r1, #4
 802c9ae:	2b00      	cmp	r3, #0
 802c9b0:	bfb8      	it	lt
 802c9b2:	18e4      	addlt	r4, r4, r3
 802c9b4:	f7ff fc9e 	bl	802c2f4 <__malloc_lock>
 802c9b8:	4a1d      	ldr	r2, [pc, #116]	@ (802ca30 <_free_r+0x90>)
 802c9ba:	6813      	ldr	r3, [r2, #0]
 802c9bc:	b933      	cbnz	r3, 802c9cc <_free_r+0x2c>
 802c9be:	6063      	str	r3, [r4, #4]
 802c9c0:	6014      	str	r4, [r2, #0]
 802c9c2:	4628      	mov	r0, r5
 802c9c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802c9c8:	f7ff bc9a 	b.w	802c300 <__malloc_unlock>
 802c9cc:	42a3      	cmp	r3, r4
 802c9ce:	d908      	bls.n	802c9e2 <_free_r+0x42>
 802c9d0:	6820      	ldr	r0, [r4, #0]
 802c9d2:	1821      	adds	r1, r4, r0
 802c9d4:	428b      	cmp	r3, r1
 802c9d6:	bf01      	itttt	eq
 802c9d8:	6819      	ldreq	r1, [r3, #0]
 802c9da:	685b      	ldreq	r3, [r3, #4]
 802c9dc:	1809      	addeq	r1, r1, r0
 802c9de:	6021      	streq	r1, [r4, #0]
 802c9e0:	e7ed      	b.n	802c9be <_free_r+0x1e>
 802c9e2:	461a      	mov	r2, r3
 802c9e4:	685b      	ldr	r3, [r3, #4]
 802c9e6:	b10b      	cbz	r3, 802c9ec <_free_r+0x4c>
 802c9e8:	42a3      	cmp	r3, r4
 802c9ea:	d9fa      	bls.n	802c9e2 <_free_r+0x42>
 802c9ec:	6811      	ldr	r1, [r2, #0]
 802c9ee:	1850      	adds	r0, r2, r1
 802c9f0:	42a0      	cmp	r0, r4
 802c9f2:	d10b      	bne.n	802ca0c <_free_r+0x6c>
 802c9f4:	6820      	ldr	r0, [r4, #0]
 802c9f6:	4401      	add	r1, r0
 802c9f8:	1850      	adds	r0, r2, r1
 802c9fa:	4283      	cmp	r3, r0
 802c9fc:	6011      	str	r1, [r2, #0]
 802c9fe:	d1e0      	bne.n	802c9c2 <_free_r+0x22>
 802ca00:	6818      	ldr	r0, [r3, #0]
 802ca02:	685b      	ldr	r3, [r3, #4]
 802ca04:	6053      	str	r3, [r2, #4]
 802ca06:	4408      	add	r0, r1
 802ca08:	6010      	str	r0, [r2, #0]
 802ca0a:	e7da      	b.n	802c9c2 <_free_r+0x22>
 802ca0c:	d902      	bls.n	802ca14 <_free_r+0x74>
 802ca0e:	230c      	movs	r3, #12
 802ca10:	602b      	str	r3, [r5, #0]
 802ca12:	e7d6      	b.n	802c9c2 <_free_r+0x22>
 802ca14:	6820      	ldr	r0, [r4, #0]
 802ca16:	1821      	adds	r1, r4, r0
 802ca18:	428b      	cmp	r3, r1
 802ca1a:	bf04      	itt	eq
 802ca1c:	6819      	ldreq	r1, [r3, #0]
 802ca1e:	685b      	ldreq	r3, [r3, #4]
 802ca20:	6063      	str	r3, [r4, #4]
 802ca22:	bf04      	itt	eq
 802ca24:	1809      	addeq	r1, r1, r0
 802ca26:	6021      	streq	r1, [r4, #0]
 802ca28:	6054      	str	r4, [r2, #4]
 802ca2a:	e7ca      	b.n	802c9c2 <_free_r+0x22>
 802ca2c:	bd38      	pop	{r3, r4, r5, pc}
 802ca2e:	bf00      	nop
 802ca30:	24034c6c 	.word	0x24034c6c

0802ca34 <__sfputc_r>:
 802ca34:	6893      	ldr	r3, [r2, #8]
 802ca36:	3b01      	subs	r3, #1
 802ca38:	2b00      	cmp	r3, #0
 802ca3a:	b410      	push	{r4}
 802ca3c:	6093      	str	r3, [r2, #8]
 802ca3e:	da08      	bge.n	802ca52 <__sfputc_r+0x1e>
 802ca40:	6994      	ldr	r4, [r2, #24]
 802ca42:	42a3      	cmp	r3, r4
 802ca44:	db01      	blt.n	802ca4a <__sfputc_r+0x16>
 802ca46:	290a      	cmp	r1, #10
 802ca48:	d103      	bne.n	802ca52 <__sfputc_r+0x1e>
 802ca4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802ca4e:	f7ff bd82 	b.w	802c556 <__swbuf_r>
 802ca52:	6813      	ldr	r3, [r2, #0]
 802ca54:	1c58      	adds	r0, r3, #1
 802ca56:	6010      	str	r0, [r2, #0]
 802ca58:	7019      	strb	r1, [r3, #0]
 802ca5a:	4608      	mov	r0, r1
 802ca5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 802ca60:	4770      	bx	lr

0802ca62 <__sfputs_r>:
 802ca62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ca64:	4606      	mov	r6, r0
 802ca66:	460f      	mov	r7, r1
 802ca68:	4614      	mov	r4, r2
 802ca6a:	18d5      	adds	r5, r2, r3
 802ca6c:	42ac      	cmp	r4, r5
 802ca6e:	d101      	bne.n	802ca74 <__sfputs_r+0x12>
 802ca70:	2000      	movs	r0, #0
 802ca72:	e007      	b.n	802ca84 <__sfputs_r+0x22>
 802ca74:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ca78:	463a      	mov	r2, r7
 802ca7a:	4630      	mov	r0, r6
 802ca7c:	f7ff ffda 	bl	802ca34 <__sfputc_r>
 802ca80:	1c43      	adds	r3, r0, #1
 802ca82:	d1f3      	bne.n	802ca6c <__sfputs_r+0xa>
 802ca84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802ca88 <_vfiprintf_r>:
 802ca88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ca8c:	460d      	mov	r5, r1
 802ca8e:	b09d      	sub	sp, #116	@ 0x74
 802ca90:	4614      	mov	r4, r2
 802ca92:	4698      	mov	r8, r3
 802ca94:	4606      	mov	r6, r0
 802ca96:	b118      	cbz	r0, 802caa0 <_vfiprintf_r+0x18>
 802ca98:	6a03      	ldr	r3, [r0, #32]
 802ca9a:	b90b      	cbnz	r3, 802caa0 <_vfiprintf_r+0x18>
 802ca9c:	f7ff fcd0 	bl	802c440 <__sinit>
 802caa0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802caa2:	07d9      	lsls	r1, r3, #31
 802caa4:	d405      	bmi.n	802cab2 <_vfiprintf_r+0x2a>
 802caa6:	89ab      	ldrh	r3, [r5, #12]
 802caa8:	059a      	lsls	r2, r3, #22
 802caaa:	d402      	bmi.n	802cab2 <_vfiprintf_r+0x2a>
 802caac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802caae:	f7ff ff0a 	bl	802c8c6 <__retarget_lock_acquire_recursive>
 802cab2:	89ab      	ldrh	r3, [r5, #12]
 802cab4:	071b      	lsls	r3, r3, #28
 802cab6:	d501      	bpl.n	802cabc <_vfiprintf_r+0x34>
 802cab8:	692b      	ldr	r3, [r5, #16]
 802caba:	b99b      	cbnz	r3, 802cae4 <_vfiprintf_r+0x5c>
 802cabc:	4629      	mov	r1, r5
 802cabe:	4630      	mov	r0, r6
 802cac0:	f7ff fd88 	bl	802c5d4 <__swsetup_r>
 802cac4:	b170      	cbz	r0, 802cae4 <_vfiprintf_r+0x5c>
 802cac6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802cac8:	07dc      	lsls	r4, r3, #31
 802caca:	d504      	bpl.n	802cad6 <_vfiprintf_r+0x4e>
 802cacc:	f04f 30ff 	mov.w	r0, #4294967295
 802cad0:	b01d      	add	sp, #116	@ 0x74
 802cad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802cad6:	89ab      	ldrh	r3, [r5, #12]
 802cad8:	0598      	lsls	r0, r3, #22
 802cada:	d4f7      	bmi.n	802cacc <_vfiprintf_r+0x44>
 802cadc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802cade:	f7ff fef3 	bl	802c8c8 <__retarget_lock_release_recursive>
 802cae2:	e7f3      	b.n	802cacc <_vfiprintf_r+0x44>
 802cae4:	2300      	movs	r3, #0
 802cae6:	9309      	str	r3, [sp, #36]	@ 0x24
 802cae8:	2320      	movs	r3, #32
 802caea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802caee:	f8cd 800c 	str.w	r8, [sp, #12]
 802caf2:	2330      	movs	r3, #48	@ 0x30
 802caf4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 802cca4 <_vfiprintf_r+0x21c>
 802caf8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802cafc:	f04f 0901 	mov.w	r9, #1
 802cb00:	4623      	mov	r3, r4
 802cb02:	469a      	mov	sl, r3
 802cb04:	f813 2b01 	ldrb.w	r2, [r3], #1
 802cb08:	b10a      	cbz	r2, 802cb0e <_vfiprintf_r+0x86>
 802cb0a:	2a25      	cmp	r2, #37	@ 0x25
 802cb0c:	d1f9      	bne.n	802cb02 <_vfiprintf_r+0x7a>
 802cb0e:	ebba 0b04 	subs.w	fp, sl, r4
 802cb12:	d00b      	beq.n	802cb2c <_vfiprintf_r+0xa4>
 802cb14:	465b      	mov	r3, fp
 802cb16:	4622      	mov	r2, r4
 802cb18:	4629      	mov	r1, r5
 802cb1a:	4630      	mov	r0, r6
 802cb1c:	f7ff ffa1 	bl	802ca62 <__sfputs_r>
 802cb20:	3001      	adds	r0, #1
 802cb22:	f000 80a7 	beq.w	802cc74 <_vfiprintf_r+0x1ec>
 802cb26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802cb28:	445a      	add	r2, fp
 802cb2a:	9209      	str	r2, [sp, #36]	@ 0x24
 802cb2c:	f89a 3000 	ldrb.w	r3, [sl]
 802cb30:	2b00      	cmp	r3, #0
 802cb32:	f000 809f 	beq.w	802cc74 <_vfiprintf_r+0x1ec>
 802cb36:	2300      	movs	r3, #0
 802cb38:	f04f 32ff 	mov.w	r2, #4294967295
 802cb3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802cb40:	f10a 0a01 	add.w	sl, sl, #1
 802cb44:	9304      	str	r3, [sp, #16]
 802cb46:	9307      	str	r3, [sp, #28]
 802cb48:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802cb4c:	931a      	str	r3, [sp, #104]	@ 0x68
 802cb4e:	4654      	mov	r4, sl
 802cb50:	2205      	movs	r2, #5
 802cb52:	f814 1b01 	ldrb.w	r1, [r4], #1
 802cb56:	4853      	ldr	r0, [pc, #332]	@ (802cca4 <_vfiprintf_r+0x21c>)
 802cb58:	f7d3 fbda 	bl	8000310 <memchr>
 802cb5c:	9a04      	ldr	r2, [sp, #16]
 802cb5e:	b9d8      	cbnz	r0, 802cb98 <_vfiprintf_r+0x110>
 802cb60:	06d1      	lsls	r1, r2, #27
 802cb62:	bf44      	itt	mi
 802cb64:	2320      	movmi	r3, #32
 802cb66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802cb6a:	0713      	lsls	r3, r2, #28
 802cb6c:	bf44      	itt	mi
 802cb6e:	232b      	movmi	r3, #43	@ 0x2b
 802cb70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802cb74:	f89a 3000 	ldrb.w	r3, [sl]
 802cb78:	2b2a      	cmp	r3, #42	@ 0x2a
 802cb7a:	d015      	beq.n	802cba8 <_vfiprintf_r+0x120>
 802cb7c:	9a07      	ldr	r2, [sp, #28]
 802cb7e:	4654      	mov	r4, sl
 802cb80:	2000      	movs	r0, #0
 802cb82:	f04f 0c0a 	mov.w	ip, #10
 802cb86:	4621      	mov	r1, r4
 802cb88:	f811 3b01 	ldrb.w	r3, [r1], #1
 802cb8c:	3b30      	subs	r3, #48	@ 0x30
 802cb8e:	2b09      	cmp	r3, #9
 802cb90:	d94b      	bls.n	802cc2a <_vfiprintf_r+0x1a2>
 802cb92:	b1b0      	cbz	r0, 802cbc2 <_vfiprintf_r+0x13a>
 802cb94:	9207      	str	r2, [sp, #28]
 802cb96:	e014      	b.n	802cbc2 <_vfiprintf_r+0x13a>
 802cb98:	eba0 0308 	sub.w	r3, r0, r8
 802cb9c:	fa09 f303 	lsl.w	r3, r9, r3
 802cba0:	4313      	orrs	r3, r2
 802cba2:	9304      	str	r3, [sp, #16]
 802cba4:	46a2      	mov	sl, r4
 802cba6:	e7d2      	b.n	802cb4e <_vfiprintf_r+0xc6>
 802cba8:	9b03      	ldr	r3, [sp, #12]
 802cbaa:	1d19      	adds	r1, r3, #4
 802cbac:	681b      	ldr	r3, [r3, #0]
 802cbae:	9103      	str	r1, [sp, #12]
 802cbb0:	2b00      	cmp	r3, #0
 802cbb2:	bfbb      	ittet	lt
 802cbb4:	425b      	neglt	r3, r3
 802cbb6:	f042 0202 	orrlt.w	r2, r2, #2
 802cbba:	9307      	strge	r3, [sp, #28]
 802cbbc:	9307      	strlt	r3, [sp, #28]
 802cbbe:	bfb8      	it	lt
 802cbc0:	9204      	strlt	r2, [sp, #16]
 802cbc2:	7823      	ldrb	r3, [r4, #0]
 802cbc4:	2b2e      	cmp	r3, #46	@ 0x2e
 802cbc6:	d10a      	bne.n	802cbde <_vfiprintf_r+0x156>
 802cbc8:	7863      	ldrb	r3, [r4, #1]
 802cbca:	2b2a      	cmp	r3, #42	@ 0x2a
 802cbcc:	d132      	bne.n	802cc34 <_vfiprintf_r+0x1ac>
 802cbce:	9b03      	ldr	r3, [sp, #12]
 802cbd0:	1d1a      	adds	r2, r3, #4
 802cbd2:	681b      	ldr	r3, [r3, #0]
 802cbd4:	9203      	str	r2, [sp, #12]
 802cbd6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802cbda:	3402      	adds	r4, #2
 802cbdc:	9305      	str	r3, [sp, #20]
 802cbde:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802ccb4 <_vfiprintf_r+0x22c>
 802cbe2:	7821      	ldrb	r1, [r4, #0]
 802cbe4:	2203      	movs	r2, #3
 802cbe6:	4650      	mov	r0, sl
 802cbe8:	f7d3 fb92 	bl	8000310 <memchr>
 802cbec:	b138      	cbz	r0, 802cbfe <_vfiprintf_r+0x176>
 802cbee:	9b04      	ldr	r3, [sp, #16]
 802cbf0:	eba0 000a 	sub.w	r0, r0, sl
 802cbf4:	2240      	movs	r2, #64	@ 0x40
 802cbf6:	4082      	lsls	r2, r0
 802cbf8:	4313      	orrs	r3, r2
 802cbfa:	3401      	adds	r4, #1
 802cbfc:	9304      	str	r3, [sp, #16]
 802cbfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 802cc02:	4829      	ldr	r0, [pc, #164]	@ (802cca8 <_vfiprintf_r+0x220>)
 802cc04:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802cc08:	2206      	movs	r2, #6
 802cc0a:	f7d3 fb81 	bl	8000310 <memchr>
 802cc0e:	2800      	cmp	r0, #0
 802cc10:	d03f      	beq.n	802cc92 <_vfiprintf_r+0x20a>
 802cc12:	4b26      	ldr	r3, [pc, #152]	@ (802ccac <_vfiprintf_r+0x224>)
 802cc14:	bb1b      	cbnz	r3, 802cc5e <_vfiprintf_r+0x1d6>
 802cc16:	9b03      	ldr	r3, [sp, #12]
 802cc18:	3307      	adds	r3, #7
 802cc1a:	f023 0307 	bic.w	r3, r3, #7
 802cc1e:	3308      	adds	r3, #8
 802cc20:	9303      	str	r3, [sp, #12]
 802cc22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802cc24:	443b      	add	r3, r7
 802cc26:	9309      	str	r3, [sp, #36]	@ 0x24
 802cc28:	e76a      	b.n	802cb00 <_vfiprintf_r+0x78>
 802cc2a:	fb0c 3202 	mla	r2, ip, r2, r3
 802cc2e:	460c      	mov	r4, r1
 802cc30:	2001      	movs	r0, #1
 802cc32:	e7a8      	b.n	802cb86 <_vfiprintf_r+0xfe>
 802cc34:	2300      	movs	r3, #0
 802cc36:	3401      	adds	r4, #1
 802cc38:	9305      	str	r3, [sp, #20]
 802cc3a:	4619      	mov	r1, r3
 802cc3c:	f04f 0c0a 	mov.w	ip, #10
 802cc40:	4620      	mov	r0, r4
 802cc42:	f810 2b01 	ldrb.w	r2, [r0], #1
 802cc46:	3a30      	subs	r2, #48	@ 0x30
 802cc48:	2a09      	cmp	r2, #9
 802cc4a:	d903      	bls.n	802cc54 <_vfiprintf_r+0x1cc>
 802cc4c:	2b00      	cmp	r3, #0
 802cc4e:	d0c6      	beq.n	802cbde <_vfiprintf_r+0x156>
 802cc50:	9105      	str	r1, [sp, #20]
 802cc52:	e7c4      	b.n	802cbde <_vfiprintf_r+0x156>
 802cc54:	fb0c 2101 	mla	r1, ip, r1, r2
 802cc58:	4604      	mov	r4, r0
 802cc5a:	2301      	movs	r3, #1
 802cc5c:	e7f0      	b.n	802cc40 <_vfiprintf_r+0x1b8>
 802cc5e:	ab03      	add	r3, sp, #12
 802cc60:	9300      	str	r3, [sp, #0]
 802cc62:	462a      	mov	r2, r5
 802cc64:	4b12      	ldr	r3, [pc, #72]	@ (802ccb0 <_vfiprintf_r+0x228>)
 802cc66:	a904      	add	r1, sp, #16
 802cc68:	4630      	mov	r0, r6
 802cc6a:	f3af 8000 	nop.w
 802cc6e:	4607      	mov	r7, r0
 802cc70:	1c78      	adds	r0, r7, #1
 802cc72:	d1d6      	bne.n	802cc22 <_vfiprintf_r+0x19a>
 802cc74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802cc76:	07d9      	lsls	r1, r3, #31
 802cc78:	d405      	bmi.n	802cc86 <_vfiprintf_r+0x1fe>
 802cc7a:	89ab      	ldrh	r3, [r5, #12]
 802cc7c:	059a      	lsls	r2, r3, #22
 802cc7e:	d402      	bmi.n	802cc86 <_vfiprintf_r+0x1fe>
 802cc80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802cc82:	f7ff fe21 	bl	802c8c8 <__retarget_lock_release_recursive>
 802cc86:	89ab      	ldrh	r3, [r5, #12]
 802cc88:	065b      	lsls	r3, r3, #25
 802cc8a:	f53f af1f 	bmi.w	802cacc <_vfiprintf_r+0x44>
 802cc8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802cc90:	e71e      	b.n	802cad0 <_vfiprintf_r+0x48>
 802cc92:	ab03      	add	r3, sp, #12
 802cc94:	9300      	str	r3, [sp, #0]
 802cc96:	462a      	mov	r2, r5
 802cc98:	4b05      	ldr	r3, [pc, #20]	@ (802ccb0 <_vfiprintf_r+0x228>)
 802cc9a:	a904      	add	r1, sp, #16
 802cc9c:	4630      	mov	r0, r6
 802cc9e:	f000 f879 	bl	802cd94 <_printf_i>
 802cca2:	e7e4      	b.n	802cc6e <_vfiprintf_r+0x1e6>
 802cca4:	0802f518 	.word	0x0802f518
 802cca8:	0802f522 	.word	0x0802f522
 802ccac:	00000000 	.word	0x00000000
 802ccb0:	0802ca63 	.word	0x0802ca63
 802ccb4:	0802f51e 	.word	0x0802f51e

0802ccb8 <_printf_common>:
 802ccb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802ccbc:	4616      	mov	r6, r2
 802ccbe:	4698      	mov	r8, r3
 802ccc0:	688a      	ldr	r2, [r1, #8]
 802ccc2:	690b      	ldr	r3, [r1, #16]
 802ccc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802ccc8:	4293      	cmp	r3, r2
 802ccca:	bfb8      	it	lt
 802cccc:	4613      	movlt	r3, r2
 802ccce:	6033      	str	r3, [r6, #0]
 802ccd0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 802ccd4:	4607      	mov	r7, r0
 802ccd6:	460c      	mov	r4, r1
 802ccd8:	b10a      	cbz	r2, 802ccde <_printf_common+0x26>
 802ccda:	3301      	adds	r3, #1
 802ccdc:	6033      	str	r3, [r6, #0]
 802ccde:	6823      	ldr	r3, [r4, #0]
 802cce0:	0699      	lsls	r1, r3, #26
 802cce2:	bf42      	ittt	mi
 802cce4:	6833      	ldrmi	r3, [r6, #0]
 802cce6:	3302      	addmi	r3, #2
 802cce8:	6033      	strmi	r3, [r6, #0]
 802ccea:	6825      	ldr	r5, [r4, #0]
 802ccec:	f015 0506 	ands.w	r5, r5, #6
 802ccf0:	d106      	bne.n	802cd00 <_printf_common+0x48>
 802ccf2:	f104 0a19 	add.w	sl, r4, #25
 802ccf6:	68e3      	ldr	r3, [r4, #12]
 802ccf8:	6832      	ldr	r2, [r6, #0]
 802ccfa:	1a9b      	subs	r3, r3, r2
 802ccfc:	42ab      	cmp	r3, r5
 802ccfe:	dc26      	bgt.n	802cd4e <_printf_common+0x96>
 802cd00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 802cd04:	6822      	ldr	r2, [r4, #0]
 802cd06:	3b00      	subs	r3, #0
 802cd08:	bf18      	it	ne
 802cd0a:	2301      	movne	r3, #1
 802cd0c:	0692      	lsls	r2, r2, #26
 802cd0e:	d42b      	bmi.n	802cd68 <_printf_common+0xb0>
 802cd10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802cd14:	4641      	mov	r1, r8
 802cd16:	4638      	mov	r0, r7
 802cd18:	47c8      	blx	r9
 802cd1a:	3001      	adds	r0, #1
 802cd1c:	d01e      	beq.n	802cd5c <_printf_common+0xa4>
 802cd1e:	6823      	ldr	r3, [r4, #0]
 802cd20:	6922      	ldr	r2, [r4, #16]
 802cd22:	f003 0306 	and.w	r3, r3, #6
 802cd26:	2b04      	cmp	r3, #4
 802cd28:	bf02      	ittt	eq
 802cd2a:	68e5      	ldreq	r5, [r4, #12]
 802cd2c:	6833      	ldreq	r3, [r6, #0]
 802cd2e:	1aed      	subeq	r5, r5, r3
 802cd30:	68a3      	ldr	r3, [r4, #8]
 802cd32:	bf0c      	ite	eq
 802cd34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802cd38:	2500      	movne	r5, #0
 802cd3a:	4293      	cmp	r3, r2
 802cd3c:	bfc4      	itt	gt
 802cd3e:	1a9b      	subgt	r3, r3, r2
 802cd40:	18ed      	addgt	r5, r5, r3
 802cd42:	2600      	movs	r6, #0
 802cd44:	341a      	adds	r4, #26
 802cd46:	42b5      	cmp	r5, r6
 802cd48:	d11a      	bne.n	802cd80 <_printf_common+0xc8>
 802cd4a:	2000      	movs	r0, #0
 802cd4c:	e008      	b.n	802cd60 <_printf_common+0xa8>
 802cd4e:	2301      	movs	r3, #1
 802cd50:	4652      	mov	r2, sl
 802cd52:	4641      	mov	r1, r8
 802cd54:	4638      	mov	r0, r7
 802cd56:	47c8      	blx	r9
 802cd58:	3001      	adds	r0, #1
 802cd5a:	d103      	bne.n	802cd64 <_printf_common+0xac>
 802cd5c:	f04f 30ff 	mov.w	r0, #4294967295
 802cd60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802cd64:	3501      	adds	r5, #1
 802cd66:	e7c6      	b.n	802ccf6 <_printf_common+0x3e>
 802cd68:	18e1      	adds	r1, r4, r3
 802cd6a:	1c5a      	adds	r2, r3, #1
 802cd6c:	2030      	movs	r0, #48	@ 0x30
 802cd6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802cd72:	4422      	add	r2, r4
 802cd74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802cd78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802cd7c:	3302      	adds	r3, #2
 802cd7e:	e7c7      	b.n	802cd10 <_printf_common+0x58>
 802cd80:	2301      	movs	r3, #1
 802cd82:	4622      	mov	r2, r4
 802cd84:	4641      	mov	r1, r8
 802cd86:	4638      	mov	r0, r7
 802cd88:	47c8      	blx	r9
 802cd8a:	3001      	adds	r0, #1
 802cd8c:	d0e6      	beq.n	802cd5c <_printf_common+0xa4>
 802cd8e:	3601      	adds	r6, #1
 802cd90:	e7d9      	b.n	802cd46 <_printf_common+0x8e>
	...

0802cd94 <_printf_i>:
 802cd94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802cd98:	7e0f      	ldrb	r7, [r1, #24]
 802cd9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802cd9c:	2f78      	cmp	r7, #120	@ 0x78
 802cd9e:	4691      	mov	r9, r2
 802cda0:	4680      	mov	r8, r0
 802cda2:	460c      	mov	r4, r1
 802cda4:	469a      	mov	sl, r3
 802cda6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802cdaa:	d807      	bhi.n	802cdbc <_printf_i+0x28>
 802cdac:	2f62      	cmp	r7, #98	@ 0x62
 802cdae:	d80a      	bhi.n	802cdc6 <_printf_i+0x32>
 802cdb0:	2f00      	cmp	r7, #0
 802cdb2:	f000 80d2 	beq.w	802cf5a <_printf_i+0x1c6>
 802cdb6:	2f58      	cmp	r7, #88	@ 0x58
 802cdb8:	f000 80b9 	beq.w	802cf2e <_printf_i+0x19a>
 802cdbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802cdc0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 802cdc4:	e03a      	b.n	802ce3c <_printf_i+0xa8>
 802cdc6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802cdca:	2b15      	cmp	r3, #21
 802cdcc:	d8f6      	bhi.n	802cdbc <_printf_i+0x28>
 802cdce:	a101      	add	r1, pc, #4	@ (adr r1, 802cdd4 <_printf_i+0x40>)
 802cdd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802cdd4:	0802ce2d 	.word	0x0802ce2d
 802cdd8:	0802ce41 	.word	0x0802ce41
 802cddc:	0802cdbd 	.word	0x0802cdbd
 802cde0:	0802cdbd 	.word	0x0802cdbd
 802cde4:	0802cdbd 	.word	0x0802cdbd
 802cde8:	0802cdbd 	.word	0x0802cdbd
 802cdec:	0802ce41 	.word	0x0802ce41
 802cdf0:	0802cdbd 	.word	0x0802cdbd
 802cdf4:	0802cdbd 	.word	0x0802cdbd
 802cdf8:	0802cdbd 	.word	0x0802cdbd
 802cdfc:	0802cdbd 	.word	0x0802cdbd
 802ce00:	0802cf41 	.word	0x0802cf41
 802ce04:	0802ce6b 	.word	0x0802ce6b
 802ce08:	0802cefb 	.word	0x0802cefb
 802ce0c:	0802cdbd 	.word	0x0802cdbd
 802ce10:	0802cdbd 	.word	0x0802cdbd
 802ce14:	0802cf63 	.word	0x0802cf63
 802ce18:	0802cdbd 	.word	0x0802cdbd
 802ce1c:	0802ce6b 	.word	0x0802ce6b
 802ce20:	0802cdbd 	.word	0x0802cdbd
 802ce24:	0802cdbd 	.word	0x0802cdbd
 802ce28:	0802cf03 	.word	0x0802cf03
 802ce2c:	6833      	ldr	r3, [r6, #0]
 802ce2e:	1d1a      	adds	r2, r3, #4
 802ce30:	681b      	ldr	r3, [r3, #0]
 802ce32:	6032      	str	r2, [r6, #0]
 802ce34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802ce38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802ce3c:	2301      	movs	r3, #1
 802ce3e:	e09d      	b.n	802cf7c <_printf_i+0x1e8>
 802ce40:	6833      	ldr	r3, [r6, #0]
 802ce42:	6820      	ldr	r0, [r4, #0]
 802ce44:	1d19      	adds	r1, r3, #4
 802ce46:	6031      	str	r1, [r6, #0]
 802ce48:	0606      	lsls	r6, r0, #24
 802ce4a:	d501      	bpl.n	802ce50 <_printf_i+0xbc>
 802ce4c:	681d      	ldr	r5, [r3, #0]
 802ce4e:	e003      	b.n	802ce58 <_printf_i+0xc4>
 802ce50:	0645      	lsls	r5, r0, #25
 802ce52:	d5fb      	bpl.n	802ce4c <_printf_i+0xb8>
 802ce54:	f9b3 5000 	ldrsh.w	r5, [r3]
 802ce58:	2d00      	cmp	r5, #0
 802ce5a:	da03      	bge.n	802ce64 <_printf_i+0xd0>
 802ce5c:	232d      	movs	r3, #45	@ 0x2d
 802ce5e:	426d      	negs	r5, r5
 802ce60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802ce64:	4859      	ldr	r0, [pc, #356]	@ (802cfcc <_printf_i+0x238>)
 802ce66:	230a      	movs	r3, #10
 802ce68:	e011      	b.n	802ce8e <_printf_i+0xfa>
 802ce6a:	6821      	ldr	r1, [r4, #0]
 802ce6c:	6833      	ldr	r3, [r6, #0]
 802ce6e:	0608      	lsls	r0, r1, #24
 802ce70:	f853 5b04 	ldr.w	r5, [r3], #4
 802ce74:	d402      	bmi.n	802ce7c <_printf_i+0xe8>
 802ce76:	0649      	lsls	r1, r1, #25
 802ce78:	bf48      	it	mi
 802ce7a:	b2ad      	uxthmi	r5, r5
 802ce7c:	2f6f      	cmp	r7, #111	@ 0x6f
 802ce7e:	4853      	ldr	r0, [pc, #332]	@ (802cfcc <_printf_i+0x238>)
 802ce80:	6033      	str	r3, [r6, #0]
 802ce82:	bf14      	ite	ne
 802ce84:	230a      	movne	r3, #10
 802ce86:	2308      	moveq	r3, #8
 802ce88:	2100      	movs	r1, #0
 802ce8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802ce8e:	6866      	ldr	r6, [r4, #4]
 802ce90:	60a6      	str	r6, [r4, #8]
 802ce92:	2e00      	cmp	r6, #0
 802ce94:	bfa2      	ittt	ge
 802ce96:	6821      	ldrge	r1, [r4, #0]
 802ce98:	f021 0104 	bicge.w	r1, r1, #4
 802ce9c:	6021      	strge	r1, [r4, #0]
 802ce9e:	b90d      	cbnz	r5, 802cea4 <_printf_i+0x110>
 802cea0:	2e00      	cmp	r6, #0
 802cea2:	d04b      	beq.n	802cf3c <_printf_i+0x1a8>
 802cea4:	4616      	mov	r6, r2
 802cea6:	fbb5 f1f3 	udiv	r1, r5, r3
 802ceaa:	fb03 5711 	mls	r7, r3, r1, r5
 802ceae:	5dc7      	ldrb	r7, [r0, r7]
 802ceb0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802ceb4:	462f      	mov	r7, r5
 802ceb6:	42bb      	cmp	r3, r7
 802ceb8:	460d      	mov	r5, r1
 802ceba:	d9f4      	bls.n	802cea6 <_printf_i+0x112>
 802cebc:	2b08      	cmp	r3, #8
 802cebe:	d10b      	bne.n	802ced8 <_printf_i+0x144>
 802cec0:	6823      	ldr	r3, [r4, #0]
 802cec2:	07df      	lsls	r7, r3, #31
 802cec4:	d508      	bpl.n	802ced8 <_printf_i+0x144>
 802cec6:	6923      	ldr	r3, [r4, #16]
 802cec8:	6861      	ldr	r1, [r4, #4]
 802ceca:	4299      	cmp	r1, r3
 802cecc:	bfde      	ittt	le
 802cece:	2330      	movle	r3, #48	@ 0x30
 802ced0:	f806 3c01 	strble.w	r3, [r6, #-1]
 802ced4:	f106 36ff 	addle.w	r6, r6, #4294967295
 802ced8:	1b92      	subs	r2, r2, r6
 802ceda:	6122      	str	r2, [r4, #16]
 802cedc:	f8cd a000 	str.w	sl, [sp]
 802cee0:	464b      	mov	r3, r9
 802cee2:	aa03      	add	r2, sp, #12
 802cee4:	4621      	mov	r1, r4
 802cee6:	4640      	mov	r0, r8
 802cee8:	f7ff fee6 	bl	802ccb8 <_printf_common>
 802ceec:	3001      	adds	r0, #1
 802ceee:	d14a      	bne.n	802cf86 <_printf_i+0x1f2>
 802cef0:	f04f 30ff 	mov.w	r0, #4294967295
 802cef4:	b004      	add	sp, #16
 802cef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802cefa:	6823      	ldr	r3, [r4, #0]
 802cefc:	f043 0320 	orr.w	r3, r3, #32
 802cf00:	6023      	str	r3, [r4, #0]
 802cf02:	4833      	ldr	r0, [pc, #204]	@ (802cfd0 <_printf_i+0x23c>)
 802cf04:	2778      	movs	r7, #120	@ 0x78
 802cf06:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802cf0a:	6823      	ldr	r3, [r4, #0]
 802cf0c:	6831      	ldr	r1, [r6, #0]
 802cf0e:	061f      	lsls	r7, r3, #24
 802cf10:	f851 5b04 	ldr.w	r5, [r1], #4
 802cf14:	d402      	bmi.n	802cf1c <_printf_i+0x188>
 802cf16:	065f      	lsls	r7, r3, #25
 802cf18:	bf48      	it	mi
 802cf1a:	b2ad      	uxthmi	r5, r5
 802cf1c:	6031      	str	r1, [r6, #0]
 802cf1e:	07d9      	lsls	r1, r3, #31
 802cf20:	bf44      	itt	mi
 802cf22:	f043 0320 	orrmi.w	r3, r3, #32
 802cf26:	6023      	strmi	r3, [r4, #0]
 802cf28:	b11d      	cbz	r5, 802cf32 <_printf_i+0x19e>
 802cf2a:	2310      	movs	r3, #16
 802cf2c:	e7ac      	b.n	802ce88 <_printf_i+0xf4>
 802cf2e:	4827      	ldr	r0, [pc, #156]	@ (802cfcc <_printf_i+0x238>)
 802cf30:	e7e9      	b.n	802cf06 <_printf_i+0x172>
 802cf32:	6823      	ldr	r3, [r4, #0]
 802cf34:	f023 0320 	bic.w	r3, r3, #32
 802cf38:	6023      	str	r3, [r4, #0]
 802cf3a:	e7f6      	b.n	802cf2a <_printf_i+0x196>
 802cf3c:	4616      	mov	r6, r2
 802cf3e:	e7bd      	b.n	802cebc <_printf_i+0x128>
 802cf40:	6833      	ldr	r3, [r6, #0]
 802cf42:	6825      	ldr	r5, [r4, #0]
 802cf44:	6961      	ldr	r1, [r4, #20]
 802cf46:	1d18      	adds	r0, r3, #4
 802cf48:	6030      	str	r0, [r6, #0]
 802cf4a:	062e      	lsls	r6, r5, #24
 802cf4c:	681b      	ldr	r3, [r3, #0]
 802cf4e:	d501      	bpl.n	802cf54 <_printf_i+0x1c0>
 802cf50:	6019      	str	r1, [r3, #0]
 802cf52:	e002      	b.n	802cf5a <_printf_i+0x1c6>
 802cf54:	0668      	lsls	r0, r5, #25
 802cf56:	d5fb      	bpl.n	802cf50 <_printf_i+0x1bc>
 802cf58:	8019      	strh	r1, [r3, #0]
 802cf5a:	2300      	movs	r3, #0
 802cf5c:	6123      	str	r3, [r4, #16]
 802cf5e:	4616      	mov	r6, r2
 802cf60:	e7bc      	b.n	802cedc <_printf_i+0x148>
 802cf62:	6833      	ldr	r3, [r6, #0]
 802cf64:	1d1a      	adds	r2, r3, #4
 802cf66:	6032      	str	r2, [r6, #0]
 802cf68:	681e      	ldr	r6, [r3, #0]
 802cf6a:	6862      	ldr	r2, [r4, #4]
 802cf6c:	2100      	movs	r1, #0
 802cf6e:	4630      	mov	r0, r6
 802cf70:	f7d3 f9ce 	bl	8000310 <memchr>
 802cf74:	b108      	cbz	r0, 802cf7a <_printf_i+0x1e6>
 802cf76:	1b80      	subs	r0, r0, r6
 802cf78:	6060      	str	r0, [r4, #4]
 802cf7a:	6863      	ldr	r3, [r4, #4]
 802cf7c:	6123      	str	r3, [r4, #16]
 802cf7e:	2300      	movs	r3, #0
 802cf80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802cf84:	e7aa      	b.n	802cedc <_printf_i+0x148>
 802cf86:	6923      	ldr	r3, [r4, #16]
 802cf88:	4632      	mov	r2, r6
 802cf8a:	4649      	mov	r1, r9
 802cf8c:	4640      	mov	r0, r8
 802cf8e:	47d0      	blx	sl
 802cf90:	3001      	adds	r0, #1
 802cf92:	d0ad      	beq.n	802cef0 <_printf_i+0x15c>
 802cf94:	6823      	ldr	r3, [r4, #0]
 802cf96:	079b      	lsls	r3, r3, #30
 802cf98:	d413      	bmi.n	802cfc2 <_printf_i+0x22e>
 802cf9a:	68e0      	ldr	r0, [r4, #12]
 802cf9c:	9b03      	ldr	r3, [sp, #12]
 802cf9e:	4298      	cmp	r0, r3
 802cfa0:	bfb8      	it	lt
 802cfa2:	4618      	movlt	r0, r3
 802cfa4:	e7a6      	b.n	802cef4 <_printf_i+0x160>
 802cfa6:	2301      	movs	r3, #1
 802cfa8:	4632      	mov	r2, r6
 802cfaa:	4649      	mov	r1, r9
 802cfac:	4640      	mov	r0, r8
 802cfae:	47d0      	blx	sl
 802cfb0:	3001      	adds	r0, #1
 802cfb2:	d09d      	beq.n	802cef0 <_printf_i+0x15c>
 802cfb4:	3501      	adds	r5, #1
 802cfb6:	68e3      	ldr	r3, [r4, #12]
 802cfb8:	9903      	ldr	r1, [sp, #12]
 802cfba:	1a5b      	subs	r3, r3, r1
 802cfbc:	42ab      	cmp	r3, r5
 802cfbe:	dcf2      	bgt.n	802cfa6 <_printf_i+0x212>
 802cfc0:	e7eb      	b.n	802cf9a <_printf_i+0x206>
 802cfc2:	2500      	movs	r5, #0
 802cfc4:	f104 0619 	add.w	r6, r4, #25
 802cfc8:	e7f5      	b.n	802cfb6 <_printf_i+0x222>
 802cfca:	bf00      	nop
 802cfcc:	0802f529 	.word	0x0802f529
 802cfd0:	0802f53a 	.word	0x0802f53a

0802cfd4 <__sflush_r>:
 802cfd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802cfd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802cfdc:	0716      	lsls	r6, r2, #28
 802cfde:	4605      	mov	r5, r0
 802cfe0:	460c      	mov	r4, r1
 802cfe2:	d454      	bmi.n	802d08e <__sflush_r+0xba>
 802cfe4:	684b      	ldr	r3, [r1, #4]
 802cfe6:	2b00      	cmp	r3, #0
 802cfe8:	dc02      	bgt.n	802cff0 <__sflush_r+0x1c>
 802cfea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802cfec:	2b00      	cmp	r3, #0
 802cfee:	dd48      	ble.n	802d082 <__sflush_r+0xae>
 802cff0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802cff2:	2e00      	cmp	r6, #0
 802cff4:	d045      	beq.n	802d082 <__sflush_r+0xae>
 802cff6:	2300      	movs	r3, #0
 802cff8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802cffc:	682f      	ldr	r7, [r5, #0]
 802cffe:	6a21      	ldr	r1, [r4, #32]
 802d000:	602b      	str	r3, [r5, #0]
 802d002:	d030      	beq.n	802d066 <__sflush_r+0x92>
 802d004:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802d006:	89a3      	ldrh	r3, [r4, #12]
 802d008:	0759      	lsls	r1, r3, #29
 802d00a:	d505      	bpl.n	802d018 <__sflush_r+0x44>
 802d00c:	6863      	ldr	r3, [r4, #4]
 802d00e:	1ad2      	subs	r2, r2, r3
 802d010:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802d012:	b10b      	cbz	r3, 802d018 <__sflush_r+0x44>
 802d014:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802d016:	1ad2      	subs	r2, r2, r3
 802d018:	2300      	movs	r3, #0
 802d01a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802d01c:	6a21      	ldr	r1, [r4, #32]
 802d01e:	4628      	mov	r0, r5
 802d020:	47b0      	blx	r6
 802d022:	1c43      	adds	r3, r0, #1
 802d024:	89a3      	ldrh	r3, [r4, #12]
 802d026:	d106      	bne.n	802d036 <__sflush_r+0x62>
 802d028:	6829      	ldr	r1, [r5, #0]
 802d02a:	291d      	cmp	r1, #29
 802d02c:	d82b      	bhi.n	802d086 <__sflush_r+0xb2>
 802d02e:	4a2a      	ldr	r2, [pc, #168]	@ (802d0d8 <__sflush_r+0x104>)
 802d030:	410a      	asrs	r2, r1
 802d032:	07d6      	lsls	r6, r2, #31
 802d034:	d427      	bmi.n	802d086 <__sflush_r+0xb2>
 802d036:	2200      	movs	r2, #0
 802d038:	6062      	str	r2, [r4, #4]
 802d03a:	04d9      	lsls	r1, r3, #19
 802d03c:	6922      	ldr	r2, [r4, #16]
 802d03e:	6022      	str	r2, [r4, #0]
 802d040:	d504      	bpl.n	802d04c <__sflush_r+0x78>
 802d042:	1c42      	adds	r2, r0, #1
 802d044:	d101      	bne.n	802d04a <__sflush_r+0x76>
 802d046:	682b      	ldr	r3, [r5, #0]
 802d048:	b903      	cbnz	r3, 802d04c <__sflush_r+0x78>
 802d04a:	6560      	str	r0, [r4, #84]	@ 0x54
 802d04c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802d04e:	602f      	str	r7, [r5, #0]
 802d050:	b1b9      	cbz	r1, 802d082 <__sflush_r+0xae>
 802d052:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802d056:	4299      	cmp	r1, r3
 802d058:	d002      	beq.n	802d060 <__sflush_r+0x8c>
 802d05a:	4628      	mov	r0, r5
 802d05c:	f7ff fca0 	bl	802c9a0 <_free_r>
 802d060:	2300      	movs	r3, #0
 802d062:	6363      	str	r3, [r4, #52]	@ 0x34
 802d064:	e00d      	b.n	802d082 <__sflush_r+0xae>
 802d066:	2301      	movs	r3, #1
 802d068:	4628      	mov	r0, r5
 802d06a:	47b0      	blx	r6
 802d06c:	4602      	mov	r2, r0
 802d06e:	1c50      	adds	r0, r2, #1
 802d070:	d1c9      	bne.n	802d006 <__sflush_r+0x32>
 802d072:	682b      	ldr	r3, [r5, #0]
 802d074:	2b00      	cmp	r3, #0
 802d076:	d0c6      	beq.n	802d006 <__sflush_r+0x32>
 802d078:	2b1d      	cmp	r3, #29
 802d07a:	d001      	beq.n	802d080 <__sflush_r+0xac>
 802d07c:	2b16      	cmp	r3, #22
 802d07e:	d11e      	bne.n	802d0be <__sflush_r+0xea>
 802d080:	602f      	str	r7, [r5, #0]
 802d082:	2000      	movs	r0, #0
 802d084:	e022      	b.n	802d0cc <__sflush_r+0xf8>
 802d086:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802d08a:	b21b      	sxth	r3, r3
 802d08c:	e01b      	b.n	802d0c6 <__sflush_r+0xf2>
 802d08e:	690f      	ldr	r7, [r1, #16]
 802d090:	2f00      	cmp	r7, #0
 802d092:	d0f6      	beq.n	802d082 <__sflush_r+0xae>
 802d094:	0793      	lsls	r3, r2, #30
 802d096:	680e      	ldr	r6, [r1, #0]
 802d098:	bf08      	it	eq
 802d09a:	694b      	ldreq	r3, [r1, #20]
 802d09c:	600f      	str	r7, [r1, #0]
 802d09e:	bf18      	it	ne
 802d0a0:	2300      	movne	r3, #0
 802d0a2:	eba6 0807 	sub.w	r8, r6, r7
 802d0a6:	608b      	str	r3, [r1, #8]
 802d0a8:	f1b8 0f00 	cmp.w	r8, #0
 802d0ac:	dde9      	ble.n	802d082 <__sflush_r+0xae>
 802d0ae:	6a21      	ldr	r1, [r4, #32]
 802d0b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802d0b2:	4643      	mov	r3, r8
 802d0b4:	463a      	mov	r2, r7
 802d0b6:	4628      	mov	r0, r5
 802d0b8:	47b0      	blx	r6
 802d0ba:	2800      	cmp	r0, #0
 802d0bc:	dc08      	bgt.n	802d0d0 <__sflush_r+0xfc>
 802d0be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802d0c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802d0c6:	81a3      	strh	r3, [r4, #12]
 802d0c8:	f04f 30ff 	mov.w	r0, #4294967295
 802d0cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802d0d0:	4407      	add	r7, r0
 802d0d2:	eba8 0800 	sub.w	r8, r8, r0
 802d0d6:	e7e7      	b.n	802d0a8 <__sflush_r+0xd4>
 802d0d8:	dfbffffe 	.word	0xdfbffffe

0802d0dc <_fflush_r>:
 802d0dc:	b538      	push	{r3, r4, r5, lr}
 802d0de:	690b      	ldr	r3, [r1, #16]
 802d0e0:	4605      	mov	r5, r0
 802d0e2:	460c      	mov	r4, r1
 802d0e4:	b913      	cbnz	r3, 802d0ec <_fflush_r+0x10>
 802d0e6:	2500      	movs	r5, #0
 802d0e8:	4628      	mov	r0, r5
 802d0ea:	bd38      	pop	{r3, r4, r5, pc}
 802d0ec:	b118      	cbz	r0, 802d0f6 <_fflush_r+0x1a>
 802d0ee:	6a03      	ldr	r3, [r0, #32]
 802d0f0:	b90b      	cbnz	r3, 802d0f6 <_fflush_r+0x1a>
 802d0f2:	f7ff f9a5 	bl	802c440 <__sinit>
 802d0f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802d0fa:	2b00      	cmp	r3, #0
 802d0fc:	d0f3      	beq.n	802d0e6 <_fflush_r+0xa>
 802d0fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802d100:	07d0      	lsls	r0, r2, #31
 802d102:	d404      	bmi.n	802d10e <_fflush_r+0x32>
 802d104:	0599      	lsls	r1, r3, #22
 802d106:	d402      	bmi.n	802d10e <_fflush_r+0x32>
 802d108:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802d10a:	f7ff fbdc 	bl	802c8c6 <__retarget_lock_acquire_recursive>
 802d10e:	4628      	mov	r0, r5
 802d110:	4621      	mov	r1, r4
 802d112:	f7ff ff5f 	bl	802cfd4 <__sflush_r>
 802d116:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802d118:	07da      	lsls	r2, r3, #31
 802d11a:	4605      	mov	r5, r0
 802d11c:	d4e4      	bmi.n	802d0e8 <_fflush_r+0xc>
 802d11e:	89a3      	ldrh	r3, [r4, #12]
 802d120:	059b      	lsls	r3, r3, #22
 802d122:	d4e1      	bmi.n	802d0e8 <_fflush_r+0xc>
 802d124:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802d126:	f7ff fbcf 	bl	802c8c8 <__retarget_lock_release_recursive>
 802d12a:	e7dd      	b.n	802d0e8 <_fflush_r+0xc>

0802d12c <__swhatbuf_r>:
 802d12c:	b570      	push	{r4, r5, r6, lr}
 802d12e:	460c      	mov	r4, r1
 802d130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d134:	2900      	cmp	r1, #0
 802d136:	b096      	sub	sp, #88	@ 0x58
 802d138:	4615      	mov	r5, r2
 802d13a:	461e      	mov	r6, r3
 802d13c:	da0d      	bge.n	802d15a <__swhatbuf_r+0x2e>
 802d13e:	89a3      	ldrh	r3, [r4, #12]
 802d140:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802d144:	f04f 0100 	mov.w	r1, #0
 802d148:	bf14      	ite	ne
 802d14a:	2340      	movne	r3, #64	@ 0x40
 802d14c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802d150:	2000      	movs	r0, #0
 802d152:	6031      	str	r1, [r6, #0]
 802d154:	602b      	str	r3, [r5, #0]
 802d156:	b016      	add	sp, #88	@ 0x58
 802d158:	bd70      	pop	{r4, r5, r6, pc}
 802d15a:	466a      	mov	r2, sp
 802d15c:	f000 f848 	bl	802d1f0 <_fstat_r>
 802d160:	2800      	cmp	r0, #0
 802d162:	dbec      	blt.n	802d13e <__swhatbuf_r+0x12>
 802d164:	9901      	ldr	r1, [sp, #4]
 802d166:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802d16a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802d16e:	4259      	negs	r1, r3
 802d170:	4159      	adcs	r1, r3
 802d172:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802d176:	e7eb      	b.n	802d150 <__swhatbuf_r+0x24>

0802d178 <__smakebuf_r>:
 802d178:	898b      	ldrh	r3, [r1, #12]
 802d17a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802d17c:	079d      	lsls	r5, r3, #30
 802d17e:	4606      	mov	r6, r0
 802d180:	460c      	mov	r4, r1
 802d182:	d507      	bpl.n	802d194 <__smakebuf_r+0x1c>
 802d184:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802d188:	6023      	str	r3, [r4, #0]
 802d18a:	6123      	str	r3, [r4, #16]
 802d18c:	2301      	movs	r3, #1
 802d18e:	6163      	str	r3, [r4, #20]
 802d190:	b003      	add	sp, #12
 802d192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802d194:	ab01      	add	r3, sp, #4
 802d196:	466a      	mov	r2, sp
 802d198:	f7ff ffc8 	bl	802d12c <__swhatbuf_r>
 802d19c:	9f00      	ldr	r7, [sp, #0]
 802d19e:	4605      	mov	r5, r0
 802d1a0:	4639      	mov	r1, r7
 802d1a2:	4630      	mov	r0, r6
 802d1a4:	f7ff f826 	bl	802c1f4 <_malloc_r>
 802d1a8:	b948      	cbnz	r0, 802d1be <__smakebuf_r+0x46>
 802d1aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802d1ae:	059a      	lsls	r2, r3, #22
 802d1b0:	d4ee      	bmi.n	802d190 <__smakebuf_r+0x18>
 802d1b2:	f023 0303 	bic.w	r3, r3, #3
 802d1b6:	f043 0302 	orr.w	r3, r3, #2
 802d1ba:	81a3      	strh	r3, [r4, #12]
 802d1bc:	e7e2      	b.n	802d184 <__smakebuf_r+0xc>
 802d1be:	89a3      	ldrh	r3, [r4, #12]
 802d1c0:	6020      	str	r0, [r4, #0]
 802d1c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802d1c6:	81a3      	strh	r3, [r4, #12]
 802d1c8:	9b01      	ldr	r3, [sp, #4]
 802d1ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802d1ce:	b15b      	cbz	r3, 802d1e8 <__smakebuf_r+0x70>
 802d1d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802d1d4:	4630      	mov	r0, r6
 802d1d6:	f000 f81d 	bl	802d214 <_isatty_r>
 802d1da:	b128      	cbz	r0, 802d1e8 <__smakebuf_r+0x70>
 802d1dc:	89a3      	ldrh	r3, [r4, #12]
 802d1de:	f023 0303 	bic.w	r3, r3, #3
 802d1e2:	f043 0301 	orr.w	r3, r3, #1
 802d1e6:	81a3      	strh	r3, [r4, #12]
 802d1e8:	89a3      	ldrh	r3, [r4, #12]
 802d1ea:	431d      	orrs	r5, r3
 802d1ec:	81a5      	strh	r5, [r4, #12]
 802d1ee:	e7cf      	b.n	802d190 <__smakebuf_r+0x18>

0802d1f0 <_fstat_r>:
 802d1f0:	b538      	push	{r3, r4, r5, lr}
 802d1f2:	4d07      	ldr	r5, [pc, #28]	@ (802d210 <_fstat_r+0x20>)
 802d1f4:	2300      	movs	r3, #0
 802d1f6:	4604      	mov	r4, r0
 802d1f8:	4608      	mov	r0, r1
 802d1fa:	4611      	mov	r1, r2
 802d1fc:	602b      	str	r3, [r5, #0]
 802d1fe:	f7d5 fcdd 	bl	8002bbc <_fstat>
 802d202:	1c43      	adds	r3, r0, #1
 802d204:	d102      	bne.n	802d20c <_fstat_r+0x1c>
 802d206:	682b      	ldr	r3, [r5, #0]
 802d208:	b103      	cbz	r3, 802d20c <_fstat_r+0x1c>
 802d20a:	6023      	str	r3, [r4, #0]
 802d20c:	bd38      	pop	{r3, r4, r5, pc}
 802d20e:	bf00      	nop
 802d210:	24034dac 	.word	0x24034dac

0802d214 <_isatty_r>:
 802d214:	b538      	push	{r3, r4, r5, lr}
 802d216:	4d06      	ldr	r5, [pc, #24]	@ (802d230 <_isatty_r+0x1c>)
 802d218:	2300      	movs	r3, #0
 802d21a:	4604      	mov	r4, r0
 802d21c:	4608      	mov	r0, r1
 802d21e:	602b      	str	r3, [r5, #0]
 802d220:	f7d5 fcdc 	bl	8002bdc <_isatty>
 802d224:	1c43      	adds	r3, r0, #1
 802d226:	d102      	bne.n	802d22e <_isatty_r+0x1a>
 802d228:	682b      	ldr	r3, [r5, #0]
 802d22a:	b103      	cbz	r3, 802d22e <_isatty_r+0x1a>
 802d22c:	6023      	str	r3, [r4, #0]
 802d22e:	bd38      	pop	{r3, r4, r5, pc}
 802d230:	24034dac 	.word	0x24034dac

0802d234 <_init>:
 802d234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d236:	bf00      	nop
 802d238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802d23a:	bc08      	pop	{r3}
 802d23c:	469e      	mov	lr, r3
 802d23e:	4770      	bx	lr

0802d240 <_fini>:
 802d240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d242:	bf00      	nop
 802d244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802d246:	bc08      	pop	{r3}
 802d248:	469e      	mov	lr, r3
 802d24a:	4770      	bx	lr
