
CustomSTM32H735BoardBringUp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002aec4  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000227c  0802b198  0802b198  0002c198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000001a6  0802d414  0802d414  0002e414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  0802d5bc  0802d5bc  0002e5bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000010  0802d5d4  0802d5d4  0002e5d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  0802d5e4  0802d5e4  000522e0  2**0
                  CONTENTS
  7 .ARM          00000008  0802d5e4  0802d5e4  0002e5e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  0802d5ec  0802d5ec  000522e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  0802d5ec  0802d5ec  0002e5ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  0802d600  0802d600  0002e600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         000000e0  24000000  0802d608  0002f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 TouchGFX_ScratchbufferA 00000100  240000e0  0802d6e8  0002f0e0  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 13 TouchGFX_ScratchbufferB 00000100  240001e0  0802d7e8  0002f1e0  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 14 .bss          00014598  240002e0  0802d8e8  0002f2e0  2**2
                  ALLOC
 15 ._user_heap_stack 00000600  24014878  0802d8e8  0002f878  2**0
                  ALLOC
 16 .ARM.attributes 0000002e  00000000  00000000  000522e0  2**0
                  CONTENTS, READONLY
 17 ExtFlashSection 000222e0  90000000  90000000  00030000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 BufferSection 000bf400  70000000  70000000  00030000  2**2
                  ALLOC
 19 .debug_info   0006e577  00000000  00000000  0005230e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 0000f315  00000000  00000000  000c0885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 000043b0  00000000  00000000  000cfba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 0000330b  00000000  00000000  000d3f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_macro  0001167e  00000000  00000000  000d725b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line   000537cf  00000000  00000000  000e88d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_str    0019a32d  00000000  00000000  0013c0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .comment      000000c2  00000000  00000000  002d63d5  2**0
                  CONTENTS, READONLY
 27 .debug_frame  00012d54  00000000  00000000  002d6498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_line_str 0000007a  00000000  00000000  002e91ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002e0 	.word	0x240002e0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0802b17c 	.word	0x0802b17c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002e4 	.word	0x240002e4
 800030c:	0802b17c 	.word	0x0802b17c

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295
 8000738:	f04f 30ff 	movne.w	r0, #4294967295
 800073c:	f000 b96a 	b.w	8000a14 <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f806 	bl	8000758 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__udivmoddi4>:
 8000758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800075c:	9d08      	ldr	r5, [sp, #32]
 800075e:	460c      	mov	r4, r1
 8000760:	2b00      	cmp	r3, #0
 8000762:	d14e      	bne.n	8000802 <__udivmoddi4+0xaa>
 8000764:	4694      	mov	ip, r2
 8000766:	458c      	cmp	ip, r1
 8000768:	4686      	mov	lr, r0
 800076a:	fab2 f282 	clz	r2, r2
 800076e:	d962      	bls.n	8000836 <__udivmoddi4+0xde>
 8000770:	b14a      	cbz	r2, 8000786 <__udivmoddi4+0x2e>
 8000772:	f1c2 0320 	rsb	r3, r2, #32
 8000776:	4091      	lsls	r1, r2
 8000778:	fa20 f303 	lsr.w	r3, r0, r3
 800077c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000780:	4319      	orrs	r1, r3
 8000782:	fa00 fe02 	lsl.w	lr, r0, r2
 8000786:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800078a:	fa1f f68c 	uxth.w	r6, ip
 800078e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000792:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000796:	fb07 1114 	mls	r1, r7, r4, r1
 800079a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800079e:	fb04 f106 	mul.w	r1, r4, r6
 80007a2:	4299      	cmp	r1, r3
 80007a4:	d90a      	bls.n	80007bc <__udivmoddi4+0x64>
 80007a6:	eb1c 0303 	adds.w	r3, ip, r3
 80007aa:	f104 30ff 	add.w	r0, r4, #4294967295
 80007ae:	f080 8112 	bcs.w	80009d6 <__udivmoddi4+0x27e>
 80007b2:	4299      	cmp	r1, r3
 80007b4:	f240 810f 	bls.w	80009d6 <__udivmoddi4+0x27e>
 80007b8:	3c02      	subs	r4, #2
 80007ba:	4463      	add	r3, ip
 80007bc:	1a59      	subs	r1, r3, r1
 80007be:	fa1f f38e 	uxth.w	r3, lr
 80007c2:	fbb1 f0f7 	udiv	r0, r1, r7
 80007c6:	fb07 1110 	mls	r1, r7, r0, r1
 80007ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ce:	fb00 f606 	mul.w	r6, r0, r6
 80007d2:	429e      	cmp	r6, r3
 80007d4:	d90a      	bls.n	80007ec <__udivmoddi4+0x94>
 80007d6:	eb1c 0303 	adds.w	r3, ip, r3
 80007da:	f100 31ff 	add.w	r1, r0, #4294967295
 80007de:	f080 80fc 	bcs.w	80009da <__udivmoddi4+0x282>
 80007e2:	429e      	cmp	r6, r3
 80007e4:	f240 80f9 	bls.w	80009da <__udivmoddi4+0x282>
 80007e8:	4463      	add	r3, ip
 80007ea:	3802      	subs	r0, #2
 80007ec:	1b9b      	subs	r3, r3, r6
 80007ee:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80007f2:	2100      	movs	r1, #0
 80007f4:	b11d      	cbz	r5, 80007fe <__udivmoddi4+0xa6>
 80007f6:	40d3      	lsrs	r3, r2
 80007f8:	2200      	movs	r2, #0
 80007fa:	e9c5 3200 	strd	r3, r2, [r5]
 80007fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000802:	428b      	cmp	r3, r1
 8000804:	d905      	bls.n	8000812 <__udivmoddi4+0xba>
 8000806:	b10d      	cbz	r5, 800080c <__udivmoddi4+0xb4>
 8000808:	e9c5 0100 	strd	r0, r1, [r5]
 800080c:	2100      	movs	r1, #0
 800080e:	4608      	mov	r0, r1
 8000810:	e7f5      	b.n	80007fe <__udivmoddi4+0xa6>
 8000812:	fab3 f183 	clz	r1, r3
 8000816:	2900      	cmp	r1, #0
 8000818:	d146      	bne.n	80008a8 <__udivmoddi4+0x150>
 800081a:	42a3      	cmp	r3, r4
 800081c:	d302      	bcc.n	8000824 <__udivmoddi4+0xcc>
 800081e:	4290      	cmp	r0, r2
 8000820:	f0c0 80f0 	bcc.w	8000a04 <__udivmoddi4+0x2ac>
 8000824:	1a86      	subs	r6, r0, r2
 8000826:	eb64 0303 	sbc.w	r3, r4, r3
 800082a:	2001      	movs	r0, #1
 800082c:	2d00      	cmp	r5, #0
 800082e:	d0e6      	beq.n	80007fe <__udivmoddi4+0xa6>
 8000830:	e9c5 6300 	strd	r6, r3, [r5]
 8000834:	e7e3      	b.n	80007fe <__udivmoddi4+0xa6>
 8000836:	2a00      	cmp	r2, #0
 8000838:	f040 8090 	bne.w	800095c <__udivmoddi4+0x204>
 800083c:	eba1 040c 	sub.w	r4, r1, ip
 8000840:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000844:	fa1f f78c 	uxth.w	r7, ip
 8000848:	2101      	movs	r1, #1
 800084a:	fbb4 f6f8 	udiv	r6, r4, r8
 800084e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000852:	fb08 4416 	mls	r4, r8, r6, r4
 8000856:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800085a:	fb07 f006 	mul.w	r0, r7, r6
 800085e:	4298      	cmp	r0, r3
 8000860:	d908      	bls.n	8000874 <__udivmoddi4+0x11c>
 8000862:	eb1c 0303 	adds.w	r3, ip, r3
 8000866:	f106 34ff 	add.w	r4, r6, #4294967295
 800086a:	d202      	bcs.n	8000872 <__udivmoddi4+0x11a>
 800086c:	4298      	cmp	r0, r3
 800086e:	f200 80cd 	bhi.w	8000a0c <__udivmoddi4+0x2b4>
 8000872:	4626      	mov	r6, r4
 8000874:	1a1c      	subs	r4, r3, r0
 8000876:	fa1f f38e 	uxth.w	r3, lr
 800087a:	fbb4 f0f8 	udiv	r0, r4, r8
 800087e:	fb08 4410 	mls	r4, r8, r0, r4
 8000882:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000886:	fb00 f707 	mul.w	r7, r0, r7
 800088a:	429f      	cmp	r7, r3
 800088c:	d908      	bls.n	80008a0 <__udivmoddi4+0x148>
 800088e:	eb1c 0303 	adds.w	r3, ip, r3
 8000892:	f100 34ff 	add.w	r4, r0, #4294967295
 8000896:	d202      	bcs.n	800089e <__udivmoddi4+0x146>
 8000898:	429f      	cmp	r7, r3
 800089a:	f200 80b0 	bhi.w	80009fe <__udivmoddi4+0x2a6>
 800089e:	4620      	mov	r0, r4
 80008a0:	1bdb      	subs	r3, r3, r7
 80008a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008a6:	e7a5      	b.n	80007f4 <__udivmoddi4+0x9c>
 80008a8:	f1c1 0620 	rsb	r6, r1, #32
 80008ac:	408b      	lsls	r3, r1
 80008ae:	fa22 f706 	lsr.w	r7, r2, r6
 80008b2:	431f      	orrs	r7, r3
 80008b4:	fa20 fc06 	lsr.w	ip, r0, r6
 80008b8:	fa04 f301 	lsl.w	r3, r4, r1
 80008bc:	ea43 030c 	orr.w	r3, r3, ip
 80008c0:	40f4      	lsrs	r4, r6
 80008c2:	fa00 f801 	lsl.w	r8, r0, r1
 80008c6:	0c38      	lsrs	r0, r7, #16
 80008c8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80008cc:	fbb4 fef0 	udiv	lr, r4, r0
 80008d0:	fa1f fc87 	uxth.w	ip, r7
 80008d4:	fb00 441e 	mls	r4, r0, lr, r4
 80008d8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008dc:	fb0e f90c 	mul.w	r9, lr, ip
 80008e0:	45a1      	cmp	r9, r4
 80008e2:	fa02 f201 	lsl.w	r2, r2, r1
 80008e6:	d90a      	bls.n	80008fe <__udivmoddi4+0x1a6>
 80008e8:	193c      	adds	r4, r7, r4
 80008ea:	f10e 3aff 	add.w	sl, lr, #4294967295
 80008ee:	f080 8084 	bcs.w	80009fa <__udivmoddi4+0x2a2>
 80008f2:	45a1      	cmp	r9, r4
 80008f4:	f240 8081 	bls.w	80009fa <__udivmoddi4+0x2a2>
 80008f8:	f1ae 0e02 	sub.w	lr, lr, #2
 80008fc:	443c      	add	r4, r7
 80008fe:	eba4 0409 	sub.w	r4, r4, r9
 8000902:	fa1f f983 	uxth.w	r9, r3
 8000906:	fbb4 f3f0 	udiv	r3, r4, r0
 800090a:	fb00 4413 	mls	r4, r0, r3, r4
 800090e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000912:	fb03 fc0c 	mul.w	ip, r3, ip
 8000916:	45a4      	cmp	ip, r4
 8000918:	d907      	bls.n	800092a <__udivmoddi4+0x1d2>
 800091a:	193c      	adds	r4, r7, r4
 800091c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000920:	d267      	bcs.n	80009f2 <__udivmoddi4+0x29a>
 8000922:	45a4      	cmp	ip, r4
 8000924:	d965      	bls.n	80009f2 <__udivmoddi4+0x29a>
 8000926:	3b02      	subs	r3, #2
 8000928:	443c      	add	r4, r7
 800092a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800092e:	fba0 9302 	umull	r9, r3, r0, r2
 8000932:	eba4 040c 	sub.w	r4, r4, ip
 8000936:	429c      	cmp	r4, r3
 8000938:	46ce      	mov	lr, r9
 800093a:	469c      	mov	ip, r3
 800093c:	d351      	bcc.n	80009e2 <__udivmoddi4+0x28a>
 800093e:	d04e      	beq.n	80009de <__udivmoddi4+0x286>
 8000940:	b155      	cbz	r5, 8000958 <__udivmoddi4+0x200>
 8000942:	ebb8 030e 	subs.w	r3, r8, lr
 8000946:	eb64 040c 	sbc.w	r4, r4, ip
 800094a:	fa04 f606 	lsl.w	r6, r4, r6
 800094e:	40cb      	lsrs	r3, r1
 8000950:	431e      	orrs	r6, r3
 8000952:	40cc      	lsrs	r4, r1
 8000954:	e9c5 6400 	strd	r6, r4, [r5]
 8000958:	2100      	movs	r1, #0
 800095a:	e750      	b.n	80007fe <__udivmoddi4+0xa6>
 800095c:	f1c2 0320 	rsb	r3, r2, #32
 8000960:	fa20 f103 	lsr.w	r1, r0, r3
 8000964:	fa0c fc02 	lsl.w	ip, ip, r2
 8000968:	fa24 f303 	lsr.w	r3, r4, r3
 800096c:	4094      	lsls	r4, r2
 800096e:	430c      	orrs	r4, r1
 8000970:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000974:	fa00 fe02 	lsl.w	lr, r0, r2
 8000978:	fa1f f78c 	uxth.w	r7, ip
 800097c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000980:	fb08 3110 	mls	r1, r8, r0, r3
 8000984:	0c23      	lsrs	r3, r4, #16
 8000986:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800098a:	fb00 f107 	mul.w	r1, r0, r7
 800098e:	4299      	cmp	r1, r3
 8000990:	d908      	bls.n	80009a4 <__udivmoddi4+0x24c>
 8000992:	eb1c 0303 	adds.w	r3, ip, r3
 8000996:	f100 36ff 	add.w	r6, r0, #4294967295
 800099a:	d22c      	bcs.n	80009f6 <__udivmoddi4+0x29e>
 800099c:	4299      	cmp	r1, r3
 800099e:	d92a      	bls.n	80009f6 <__udivmoddi4+0x29e>
 80009a0:	3802      	subs	r0, #2
 80009a2:	4463      	add	r3, ip
 80009a4:	1a5b      	subs	r3, r3, r1
 80009a6:	b2a4      	uxth	r4, r4
 80009a8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009ac:	fb08 3311 	mls	r3, r8, r1, r3
 80009b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009b4:	fb01 f307 	mul.w	r3, r1, r7
 80009b8:	42a3      	cmp	r3, r4
 80009ba:	d908      	bls.n	80009ce <__udivmoddi4+0x276>
 80009bc:	eb1c 0404 	adds.w	r4, ip, r4
 80009c0:	f101 36ff 	add.w	r6, r1, #4294967295
 80009c4:	d213      	bcs.n	80009ee <__udivmoddi4+0x296>
 80009c6:	42a3      	cmp	r3, r4
 80009c8:	d911      	bls.n	80009ee <__udivmoddi4+0x296>
 80009ca:	3902      	subs	r1, #2
 80009cc:	4464      	add	r4, ip
 80009ce:	1ae4      	subs	r4, r4, r3
 80009d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80009d4:	e739      	b.n	800084a <__udivmoddi4+0xf2>
 80009d6:	4604      	mov	r4, r0
 80009d8:	e6f0      	b.n	80007bc <__udivmoddi4+0x64>
 80009da:	4608      	mov	r0, r1
 80009dc:	e706      	b.n	80007ec <__udivmoddi4+0x94>
 80009de:	45c8      	cmp	r8, r9
 80009e0:	d2ae      	bcs.n	8000940 <__udivmoddi4+0x1e8>
 80009e2:	ebb9 0e02 	subs.w	lr, r9, r2
 80009e6:	eb63 0c07 	sbc.w	ip, r3, r7
 80009ea:	3801      	subs	r0, #1
 80009ec:	e7a8      	b.n	8000940 <__udivmoddi4+0x1e8>
 80009ee:	4631      	mov	r1, r6
 80009f0:	e7ed      	b.n	80009ce <__udivmoddi4+0x276>
 80009f2:	4603      	mov	r3, r0
 80009f4:	e799      	b.n	800092a <__udivmoddi4+0x1d2>
 80009f6:	4630      	mov	r0, r6
 80009f8:	e7d4      	b.n	80009a4 <__udivmoddi4+0x24c>
 80009fa:	46d6      	mov	lr, sl
 80009fc:	e77f      	b.n	80008fe <__udivmoddi4+0x1a6>
 80009fe:	4463      	add	r3, ip
 8000a00:	3802      	subs	r0, #2
 8000a02:	e74d      	b.n	80008a0 <__udivmoddi4+0x148>
 8000a04:	4606      	mov	r6, r0
 8000a06:	4623      	mov	r3, r4
 8000a08:	4608      	mov	r0, r1
 8000a0a:	e70f      	b.n	800082c <__udivmoddi4+0xd4>
 8000a0c:	3e02      	subs	r6, #2
 8000a0e:	4463      	add	r3, ip
 8000a10:	e730      	b.n	8000874 <__udivmoddi4+0x11c>
 8000a12:	bf00      	nop

08000a14 <__aeabi_idiv0>:
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000a1e:	f000 ff87 	bl	8001930 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000a22:	4b63      	ldr	r3, [pc, #396]	@ (8000bb0 <main+0x198>)
 8000a24:	695b      	ldr	r3, [r3, #20]
 8000a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d11b      	bne.n	8000a66 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a2e:	f3bf 8f4f 	dsb	sy
}
 8000a32:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a34:	f3bf 8f6f 	isb	sy
}
 8000a38:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000a3a:	4b5d      	ldr	r3, [pc, #372]	@ (8000bb0 <main+0x198>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000a42:	f3bf 8f4f 	dsb	sy
}
 8000a46:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a48:	f3bf 8f6f 	isb	sy
}
 8000a4c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000a4e:	4b58      	ldr	r3, [pc, #352]	@ (8000bb0 <main+0x198>)
 8000a50:	695b      	ldr	r3, [r3, #20]
 8000a52:	4a57      	ldr	r2, [pc, #348]	@ (8000bb0 <main+0x198>)
 8000a54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a58:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a5a:	f3bf 8f4f 	dsb	sy
}
 8000a5e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a60:	f3bf 8f6f 	isb	sy
}
 8000a64:	e000      	b.n	8000a68 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000a66:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000a68:	4b51      	ldr	r3, [pc, #324]	@ (8000bb0 <main+0x198>)
 8000a6a:	695b      	ldr	r3, [r3, #20]
 8000a6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d138      	bne.n	8000ae6 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000a74:	4b4e      	ldr	r3, [pc, #312]	@ (8000bb0 <main+0x198>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000a7c:	f3bf 8f4f 	dsb	sy
}
 8000a80:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000a82:	4b4b      	ldr	r3, [pc, #300]	@ (8000bb0 <main+0x198>)
 8000a84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000a88:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	0b5b      	lsrs	r3, r3, #13
 8000a8e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a92:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	08db      	lsrs	r3, r3, #3
 8000a98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a9c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	015a      	lsls	r2, r3, #5
 8000aa2:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000aa6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000aac:	4940      	ldr	r1, [pc, #256]	@ (8000bb0 <main+0x198>)
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	1e5a      	subs	r2, r3, #1
 8000ab8:	607a      	str	r2, [r7, #4]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d1ef      	bne.n	8000a9e <main+0x86>
    } while(sets-- != 0U);
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	1e5a      	subs	r2, r3, #1
 8000ac2:	60ba      	str	r2, [r7, #8]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d1e5      	bne.n	8000a94 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ac8:	f3bf 8f4f 	dsb	sy
}
 8000acc:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000ace:	4b38      	ldr	r3, [pc, #224]	@ (8000bb0 <main+0x198>)
 8000ad0:	695b      	ldr	r3, [r3, #20]
 8000ad2:	4a37      	ldr	r2, [pc, #220]	@ (8000bb0 <main+0x198>)
 8000ad4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ad8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ada:	f3bf 8f4f 	dsb	sy
}
 8000ade:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ae0:	f3bf 8f6f 	isb	sy
}
 8000ae4:	e000      	b.n	8000ae8 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000ae6:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae8:	f003 fcb8 	bl	800445c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aec:	f000 f878 	bl	8000be0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000af0:	f000 f8e8 	bl	8000cc4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000af4:	f000 fe18 	bl	8001728 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000af8:	f000 f914 	bl	8000d24 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000afc:	f000 f98e 	bl	8000e1c <MX_ADC2_Init>
  MX_ADC3_Init();
 8000b00:	f000 f9f4 	bl	8000eec <MX_ADC3_Init>
  MX_CRC_Init();
 8000b04:	f000 fa60 	bl	8000fc8 <MX_CRC_Init>
  MX_DAC1_Init();
 8000b08:	f000 fa80 	bl	800100c <MX_DAC1_Init>
  MX_DMA2D_Init();
 8000b0c:	f000 faba 	bl	8001084 <MX_DMA2D_Init>
  MX_I2C1_Init();
 8000b10:	f000 fad6 	bl	80010c0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000b14:	f000 fb14 	bl	8001140 <MX_I2C2_Init>
  MX_LTDC_Init();
 8000b18:	f000 fb52 	bl	80011c0 <MX_LTDC_Init>
  MX_LIBJPEG_Init();
 8000b1c:	f00d fc78 	bl	800e410 <MX_LIBJPEG_Init>
  MX_OCTOSPI1_Init();
 8000b20:	f000 fbd0 	bl	80012c4 <MX_OCTOSPI1_Init>
  MX_OCTOSPI2_Init();
 8000b24:	f000 fc50 	bl	80013c8 <MX_OCTOSPI2_Init>
  MX_TIM1_Init();
 8000b28:	f000 fd06 	bl	8001538 <MX_TIM1_Init>
  MX_TIM23_Init();
 8000b2c:	f000 fd5a 	bl	80015e4 <MX_TIM23_Init>
  MX_UART4_Init();
 8000b30:	f000 fdae 	bl	8001690 <MX_UART4_Init>
  MX_TouchGFX_Init();
 8000b34:	f011 f8f1 	bl	8011d1a <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 8000b38:	f011 f8e8 	bl	8011d0c <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);//enable LCD
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b42:	481c      	ldr	r0, [pc, #112]	@ (8000bb4 <main+0x19c>)
 8000b44:	f005 ffba 	bl	8006abc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_15, GPIO_PIN_SET); //turn display backlight on
 8000b48:	2201      	movs	r2, #1
 8000b4a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b4e:	481a      	ldr	r0, [pc, #104]	@ (8000bb8 <main+0x1a0>)
 8000b50:	f005 ffb4 	bl	8006abc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET); //reset LCD
 8000b54:	2200      	movs	r2, #0
 8000b56:	2101      	movs	r1, #1
 8000b58:	4816      	ldr	r0, [pc, #88]	@ (8000bb4 <main+0x19c>)
 8000b5a:	f005 ffaf 	bl	8006abc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET); //reset LCD
 8000b5e:	2201      	movs	r2, #1
 8000b60:	2101      	movs	r1, #1
 8000b62:	4814      	ldr	r0, [pc, #80]	@ (8000bb4 <main+0x19c>)
 8000b64:	f005 ffaa 	bl	8006abc <HAL_GPIO_WritePin>
	HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3,SYSCFG_SWITCH_PC3_CLOSE); //connects PC3_C with PC3
 8000b68:	2100      	movs	r1, #0
 8000b6a:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8000b6e:	f003 fcf5 	bl	800455c <HAL_SYSCFG_AnalogSwitchConfig>
	//FTprobe = FT5336_Probe();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b72:	f00d fc99 	bl	800e4a8 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000b76:	4a11      	ldr	r2, [pc, #68]	@ (8000bbc <main+0x1a4>)
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4811      	ldr	r0, [pc, #68]	@ (8000bc0 <main+0x1a8>)
 8000b7c:	f00d fcde 	bl	800e53c <osThreadNew>
 8000b80:	4603      	mov	r3, r0
 8000b82:	4a10      	ldr	r2, [pc, #64]	@ (8000bc4 <main+0x1ac>)
 8000b84:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000b86:	4a10      	ldr	r2, [pc, #64]	@ (8000bc8 <main+0x1b0>)
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4810      	ldr	r0, [pc, #64]	@ (8000bcc <main+0x1b4>)
 8000b8c:	f00d fcd6 	bl	800e53c <osThreadNew>
 8000b90:	4603      	mov	r3, r0
 8000b92:	4a0f      	ldr	r2, [pc, #60]	@ (8000bd0 <main+0x1b8>)
 8000b94:	6013      	str	r3, [r2, #0]

  /* creation of TouchGFXTask */
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000b96:	4a0f      	ldr	r2, [pc, #60]	@ (8000bd4 <main+0x1bc>)
 8000b98:	2100      	movs	r1, #0
 8000b9a:	480f      	ldr	r0, [pc, #60]	@ (8000bd8 <main+0x1c0>)
 8000b9c:	f00d fcce 	bl	800e53c <osThreadNew>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	4a0e      	ldr	r2, [pc, #56]	@ (8000bdc <main+0x1c4>)
 8000ba4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000ba6:	f00d fca3 	bl	800e4f0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000baa:	bf00      	nop
 8000bac:	e7fd      	b.n	8000baa <main+0x192>
 8000bae:	bf00      	nop
 8000bb0:	e000ed00 	.word	0xe000ed00
 8000bb4:	58020c00 	.word	0x58020c00
 8000bb8:	58021800 	.word	0x58021800
 8000bbc:	0802be88 	.word	0x0802be88
 8000bc0:	080018d5 	.word	0x080018d5
 8000bc4:	24000820 	.word	0x24000820
 8000bc8:	0802beac 	.word	0x0802beac
 8000bcc:	080018e5 	.word	0x080018e5
 8000bd0:	24000824 	.word	0x24000824
 8000bd4:	0802bed0 	.word	0x0802bed0
 8000bd8:	08011d2b 	.word	0x08011d2b
 8000bdc:	24000828 	.word	0x24000828

08000be0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b09c      	sub	sp, #112	@ 0x70
 8000be4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bea:	224c      	movs	r2, #76	@ 0x4c
 8000bec:	2100      	movs	r1, #0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f029 fcea 	bl	802a5c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	2220      	movs	r2, #32
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f029 fce4 	bl	802a5c8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000c00:	2004      	movs	r0, #4
 8000c02:	f008 f871 	bl	8008ce8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c06:	2300      	movs	r3, #0
 8000c08:	603b      	str	r3, [r7, #0]
 8000c0a:	4b2d      	ldr	r3, [pc, #180]	@ (8000cc0 <SystemClock_Config+0xe0>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	4a2c      	ldr	r2, [pc, #176]	@ (8000cc0 <SystemClock_Config+0xe0>)
 8000c10:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c14:	6193      	str	r3, [r2, #24]
 8000c16:	4b2a      	ldr	r3, [pc, #168]	@ (8000cc0 <SystemClock_Config+0xe0>)
 8000c18:	699b      	ldr	r3, [r3, #24]
 8000c1a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c1e:	603b      	str	r3, [r7, #0]
 8000c20:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c22:	bf00      	nop
 8000c24:	4b26      	ldr	r3, [pc, #152]	@ (8000cc0 <SystemClock_Config+0xe0>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c30:	d1f8      	bne.n	8000c24 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000c32:	2303      	movs	r3, #3
 8000c34:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c36:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000c40:	2340      	movs	r3, #64	@ 0x40
 8000c42:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c44:	2302      	movs	r3, #2
 8000c46:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000c50:	232c      	movs	r3, #44	@ 0x2c
 8000c52:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000c54:	2301      	movs	r3, #1
 8000c56:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c60:	230c      	movs	r3, #12
 8000c62:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c64:	2300      	movs	r3, #0
 8000c66:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c70:	4618      	mov	r0, r3
 8000c72:	f008 f893 	bl	8008d9c <HAL_RCC_OscConfig>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000c7c:	f000 fed4 	bl	8001a28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c80:	233f      	movs	r3, #63	@ 0x3f
 8000c82:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c84:	2303      	movs	r3, #3
 8000c86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c8c:	2308      	movs	r3, #8
 8000c8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c90:	2340      	movs	r3, #64	@ 0x40
 8000c92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c94:	2340      	movs	r3, #64	@ 0x40
 8000c96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c9c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c9e:	2340      	movs	r3, #64	@ 0x40
 8000ca0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	2103      	movs	r1, #3
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f008 fc52 	bl	8009550 <HAL_RCC_ClockConfig>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000cb2:	f000 feb9 	bl	8001a28 <Error_Handler>
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	3770      	adds	r7, #112	@ 0x70
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	58024800 	.word	0x58024800

08000cc4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b0ae      	sub	sp, #184	@ 0xb8
 8000cc8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cca:	463b      	mov	r3, r7
 8000ccc:	22b8      	movs	r2, #184	@ 0xb8
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f029 fc79 	bl	802a5c8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI|RCC_PERIPHCLK_CKPER;
 8000cd6:	f04f 4202 	mov.w	r2, #2181038080	@ 0x82000000
 8000cda:	f04f 0300 	mov.w	r3, #0
 8000cde:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 8000ce2:	2305      	movs	r3, #5
 8000ce4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 8000ce6:	2350      	movs	r3, #80	@ 0x50
 8000ce8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000cea:	2302      	movs	r3, #2
 8000cec:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8000cf6:	2380      	movs	r3, #128	@ 0x80
 8000cf8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8000d02:	2320      	movs	r3, #32
 8000d04:	64fb      	str	r3, [r7, #76]	@ 0x4c
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8000d06:	2300      	movs	r3, #0
 8000d08:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d0a:	463b      	mov	r3, r7
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f008 ffed 	bl	8009cec <HAL_RCCEx_PeriphCLKConfig>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000d18:	f000 fe86 	bl	8001a28 <Error_Handler>
  }
}
 8000d1c:	bf00      	nop
 8000d1e:	37b8      	adds	r7, #184	@ 0xb8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08c      	sub	sp, #48	@ 0x30
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d36:	463b      	mov	r3, r7
 8000d38:	2224      	movs	r2, #36	@ 0x24
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f029 fc43 	bl	802a5c8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d42:	4b33      	ldr	r3, [pc, #204]	@ (8000e10 <MX_ADC1_Init+0xec>)
 8000d44:	4a33      	ldr	r2, [pc, #204]	@ (8000e14 <MX_ADC1_Init+0xf0>)
 8000d46:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000d48:	4b31      	ldr	r3, [pc, #196]	@ (8000e10 <MX_ADC1_Init+0xec>)
 8000d4a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000d4e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000d50:	4b2f      	ldr	r3, [pc, #188]	@ (8000e10 <MX_ADC1_Init+0xec>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d56:	4b2e      	ldr	r3, [pc, #184]	@ (8000e10 <MX_ADC1_Init+0xec>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d5c:	4b2c      	ldr	r3, [pc, #176]	@ (8000e10 <MX_ADC1_Init+0xec>)
 8000d5e:	2204      	movs	r2, #4
 8000d60:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d62:	4b2b      	ldr	r3, [pc, #172]	@ (8000e10 <MX_ADC1_Init+0xec>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d68:	4b29      	ldr	r3, [pc, #164]	@ (8000e10 <MX_ADC1_Init+0xec>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000d6e:	4b28      	ldr	r3, [pc, #160]	@ (8000e10 <MX_ADC1_Init+0xec>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d74:	4b26      	ldr	r3, [pc, #152]	@ (8000e10 <MX_ADC1_Init+0xec>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d7c:	4b24      	ldr	r3, [pc, #144]	@ (8000e10 <MX_ADC1_Init+0xec>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d82:	4b23      	ldr	r3, [pc, #140]	@ (8000e10 <MX_ADC1_Init+0xec>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000d88:	4b21      	ldr	r3, [pc, #132]	@ (8000e10 <MX_ADC1_Init+0xec>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d8e:	4b20      	ldr	r3, [pc, #128]	@ (8000e10 <MX_ADC1_Init+0xec>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d94:	4b1e      	ldr	r3, [pc, #120]	@ (8000e10 <MX_ADC1_Init+0xec>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000d9a:	4b1d      	ldr	r3, [pc, #116]	@ (8000e10 <MX_ADC1_Init+0xec>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8000da2:	4b1b      	ldr	r3, [pc, #108]	@ (8000e10 <MX_ADC1_Init+0xec>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000da8:	4819      	ldr	r0, [pc, #100]	@ (8000e10 <MX_ADC1_Init+0xec>)
 8000daa:	f003 fe33 	bl	8004a14 <HAL_ADC_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000db4:	f000 fe38 	bl	8001a28 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000db8:	2300      	movs	r3, #0
 8000dba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000dbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4813      	ldr	r0, [pc, #76]	@ (8000e10 <MX_ADC1_Init+0xec>)
 8000dc4:	f004 fe72 	bl	8005aac <HAL_ADCEx_MultiModeConfigChannel>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000dce:	f000 fe2b 	bl	8001a28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000dd2:	4b11      	ldr	r3, [pc, #68]	@ (8000e18 <MX_ADC1_Init+0xf4>)
 8000dd4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dd6:	2306      	movs	r3, #6
 8000dd8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dde:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000de2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000de4:	2304      	movs	r3, #4
 8000de6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000dec:	2300      	movs	r3, #0
 8000dee:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df2:	463b      	mov	r3, r7
 8000df4:	4619      	mov	r1, r3
 8000df6:	4806      	ldr	r0, [pc, #24]	@ (8000e10 <MX_ADC1_Init+0xec>)
 8000df8:	f004 f814 	bl	8004e24 <HAL_ADC_ConfigChannel>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000e02:	f000 fe11 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e06:	bf00      	nop
 8000e08:	3730      	adds	r7, #48	@ 0x30
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	240002fc 	.word	0x240002fc
 8000e14:	40022000 	.word	0x40022000
 8000e18:	08600004 	.word	0x08600004

08000e1c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08a      	sub	sp, #40	@ 0x28
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	2224      	movs	r2, #36	@ 0x24
 8000e26:	2100      	movs	r1, #0
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f029 fbcd 	bl	802a5c8 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000e2e:	4b2c      	ldr	r3, [pc, #176]	@ (8000ee0 <MX_ADC2_Init+0xc4>)
 8000e30:	4a2c      	ldr	r2, [pc, #176]	@ (8000ee4 <MX_ADC2_Init+0xc8>)
 8000e32:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000e34:	4b2a      	ldr	r3, [pc, #168]	@ (8000ee0 <MX_ADC2_Init+0xc4>)
 8000e36:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000e3a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000e3c:	4b28      	ldr	r3, [pc, #160]	@ (8000ee0 <MX_ADC2_Init+0xc4>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e42:	4b27      	ldr	r3, [pc, #156]	@ (8000ee0 <MX_ADC2_Init+0xc4>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e48:	4b25      	ldr	r3, [pc, #148]	@ (8000ee0 <MX_ADC2_Init+0xc4>)
 8000e4a:	2204      	movs	r2, #4
 8000e4c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000e4e:	4b24      	ldr	r3, [pc, #144]	@ (8000ee0 <MX_ADC2_Init+0xc4>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000e54:	4b22      	ldr	r3, [pc, #136]	@ (8000ee0 <MX_ADC2_Init+0xc4>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000e5a:	4b21      	ldr	r3, [pc, #132]	@ (8000ee0 <MX_ADC2_Init+0xc4>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e60:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee0 <MX_ADC2_Init+0xc4>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e68:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee0 <MX_ADC2_Init+0xc4>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee0 <MX_ADC2_Init+0xc4>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000e74:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee0 <MX_ADC2_Init+0xc4>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ee0 <MX_ADC2_Init+0xc4>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e80:	4b17      	ldr	r3, [pc, #92]	@ (8000ee0 <MX_ADC2_Init+0xc4>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000e86:	4b16      	ldr	r3, [pc, #88]	@ (8000ee0 <MX_ADC2_Init+0xc4>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8000e8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ee0 <MX_ADC2_Init+0xc4>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e94:	4812      	ldr	r0, [pc, #72]	@ (8000ee0 <MX_ADC2_Init+0xc4>)
 8000e96:	f003 fdbd 	bl	8004a14 <HAL_ADC_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8000ea0:	f000 fdc2 	bl	8001a28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000ea4:	4b10      	ldr	r3, [pc, #64]	@ (8000ee8 <MX_ADC2_Init+0xcc>)
 8000ea6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ea8:	2306      	movs	r3, #6
 8000eaa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000eb0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000eb4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4805      	ldr	r0, [pc, #20]	@ (8000ee0 <MX_ADC2_Init+0xc4>)
 8000eca:	f003 ffab 	bl	8004e24 <HAL_ADC_ConfigChannel>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_ADC2_Init+0xbc>
  {
    Error_Handler();
 8000ed4:	f000 fda8 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000ed8:	bf00      	nop
 8000eda:	3728      	adds	r7, #40	@ 0x28
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	2400036c 	.word	0x2400036c
 8000ee4:	40022100 	.word	0x40022100
 8000ee8:	08600004 	.word	0x08600004

08000eec <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	@ 0x28
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	2224      	movs	r2, #36	@ 0x24
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f029 fb65 	bl	802a5c8 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000efe:	4b30      	ldr	r3, [pc, #192]	@ (8000fc0 <MX_ADC3_Init+0xd4>)
 8000f00:	4a30      	ldr	r2, [pc, #192]	@ (8000fc4 <MX_ADC3_Init+0xd8>)
 8000f02:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f04:	4b2e      	ldr	r3, [pc, #184]	@ (8000fc0 <MX_ADC3_Init+0xd4>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000f0a:	4b2d      	ldr	r3, [pc, #180]	@ (8000fc0 <MX_ADC3_Init+0xd4>)
 8000f0c:	2208      	movs	r2, #8
 8000f0e:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000f10:	4b2b      	ldr	r3, [pc, #172]	@ (8000fc0 <MX_ADC3_Init+0xd4>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f16:	4b2a      	ldr	r3, [pc, #168]	@ (8000fc0 <MX_ADC3_Init+0xd4>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f1c:	4b28      	ldr	r3, [pc, #160]	@ (8000fc0 <MX_ADC3_Init+0xd4>)
 8000f1e:	2204      	movs	r2, #4
 8000f20:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000f22:	4b27      	ldr	r3, [pc, #156]	@ (8000fc0 <MX_ADC3_Init+0xd4>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000f28:	4b25      	ldr	r3, [pc, #148]	@ (8000fc0 <MX_ADC3_Init+0xd4>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000f2e:	4b24      	ldr	r3, [pc, #144]	@ (8000fc0 <MX_ADC3_Init+0xd4>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000f34:	4b22      	ldr	r3, [pc, #136]	@ (8000fc0 <MX_ADC3_Init+0xd4>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f3c:	4b20      	ldr	r3, [pc, #128]	@ (8000fc0 <MX_ADC3_Init+0xd4>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f42:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc0 <MX_ADC3_Init+0xd4>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000f48:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc0 <MX_ADC3_Init+0xd4>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000f50:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc0 <MX_ADC3_Init+0xd4>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000f56:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc0 <MX_ADC3_Init+0xd4>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f5c:	4b18      	ldr	r3, [pc, #96]	@ (8000fc0 <MX_ADC3_Init+0xd4>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000f62:	4b17      	ldr	r3, [pc, #92]	@ (8000fc0 <MX_ADC3_Init+0xd4>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000f68:	4b15      	ldr	r3, [pc, #84]	@ (8000fc0 <MX_ADC3_Init+0xd4>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 8000f70:	4b13      	ldr	r3, [pc, #76]	@ (8000fc0 <MX_ADC3_Init+0xd4>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000f76:	4812      	ldr	r0, [pc, #72]	@ (8000fc0 <MX_ADC3_Init+0xd4>)
 8000f78:	f003 fd4c 	bl	8004a14 <HAL_ADC_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 8000f82:	f000 fd51 	bl	8001a28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f86:	2301      	movs	r3, #1
 8000f88:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f8a:	2306      	movs	r3, #6
 8000f8c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f92:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000f96:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f98:	2304      	movs	r3, #4
 8000f9a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4805      	ldr	r0, [pc, #20]	@ (8000fc0 <MX_ADC3_Init+0xd4>)
 8000faa:	f003 ff3b 	bl	8004e24 <HAL_ADC_ConfigChannel>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 8000fb4:	f000 fd38 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000fb8:	bf00      	nop
 8000fba:	3728      	adds	r7, #40	@ 0x28
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	240003dc 	.word	0x240003dc
 8000fc4:	58026000 	.word	0x58026000

08000fc8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8001004 <MX_CRC_Init+0x3c>)
 8000fce:	4a0e      	ldr	r2, [pc, #56]	@ (8001008 <MX_CRC_Init+0x40>)
 8000fd0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <MX_CRC_Init+0x3c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8001004 <MX_CRC_Init+0x3c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000fde:	4b09      	ldr	r3, [pc, #36]	@ (8001004 <MX_CRC_Init+0x3c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000fe4:	4b07      	ldr	r3, [pc, #28]	@ (8001004 <MX_CRC_Init+0x3c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000fea:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <MX_CRC_Init+0x3c>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000ff0:	4804      	ldr	r0, [pc, #16]	@ (8001004 <MX_CRC_Init+0x3c>)
 8000ff2:	f004 ff95 	bl	8005f20 <HAL_CRC_Init>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000ffc:	f000 fd14 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}
 8001004:	2400044c 	.word	0x2400044c
 8001008:	58024c00 	.word	0x58024c00

0800100c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	@ 0x28
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	2224      	movs	r2, #36	@ 0x24
 8001016:	2100      	movs	r1, #0
 8001018:	4618      	mov	r0, r3
 800101a:	f029 fad5 	bl	802a5c8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800101e:	4b17      	ldr	r3, [pc, #92]	@ (800107c <MX_DAC1_Init+0x70>)
 8001020:	4a17      	ldr	r2, [pc, #92]	@ (8001080 <MX_DAC1_Init+0x74>)
 8001022:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001024:	4815      	ldr	r0, [pc, #84]	@ (800107c <MX_DAC1_Init+0x70>)
 8001026:	f005 f86d 	bl	8006104 <HAL_DAC_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001030:	f000 fcfa 	bl	8001a28 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001034:	2300      	movs	r3, #0
 8001036:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001038:	2300      	movs	r3, #0
 800103a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800103c:	2300      	movs	r3, #0
 800103e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001040:	2301      	movs	r3, #1
 8001042:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	2200      	movs	r2, #0
 800104c:	4619      	mov	r1, r3
 800104e:	480b      	ldr	r0, [pc, #44]	@ (800107c <MX_DAC1_Init+0x70>)
 8001050:	f005 f8da 	bl	8006208 <HAL_DAC_ConfigChannel>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800105a:	f000 fce5 	bl	8001a28 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	2210      	movs	r2, #16
 8001062:	4619      	mov	r1, r3
 8001064:	4805      	ldr	r0, [pc, #20]	@ (800107c <MX_DAC1_Init+0x70>)
 8001066:	f005 f8cf 	bl	8006208 <HAL_DAC_ConfigChannel>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8001070:	f000 fcda 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001074:	bf00      	nop
 8001076:	3728      	adds	r7, #40	@ 0x28
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	24000470 	.word	0x24000470
 8001080:	40007400 	.word	0x40007400

08001084 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001088:	4b0b      	ldr	r3, [pc, #44]	@ (80010b8 <MX_DMA2D_Init+0x34>)
 800108a:	4a0c      	ldr	r2, [pc, #48]	@ (80010bc <MX_DMA2D_Init+0x38>)
 800108c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 800108e:	4b0a      	ldr	r3, [pc, #40]	@ (80010b8 <MX_DMA2D_Init+0x34>)
 8001090:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001094:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8001096:	4b08      	ldr	r3, [pc, #32]	@ (80010b8 <MX_DMA2D_Init+0x34>)
 8001098:	2201      	movs	r2, #1
 800109a:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800109c:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <MX_DMA2D_Init+0x34>)
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80010a2:	4805      	ldr	r0, [pc, #20]	@ (80010b8 <MX_DMA2D_Init+0x34>)
 80010a4:	f005 f9fc 	bl	80064a0 <HAL_DMA2D_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
 80010ae:	f000 fcbb 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	24000484 	.word	0x24000484
 80010bc:	52001000 	.word	0x52001000

080010c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001134 <MX_I2C1_Init+0x74>)
 80010c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001138 <MX_I2C1_Init+0x78>)
 80010c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60404E72;
 80010ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001134 <MX_I2C1_Init+0x74>)
 80010cc:	4a1b      	ldr	r2, [pc, #108]	@ (800113c <MX_I2C1_Init+0x7c>)
 80010ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010d0:	4b18      	ldr	r3, [pc, #96]	@ (8001134 <MX_I2C1_Init+0x74>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010d6:	4b17      	ldr	r3, [pc, #92]	@ (8001134 <MX_I2C1_Init+0x74>)
 80010d8:	2201      	movs	r2, #1
 80010da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010dc:	4b15      	ldr	r3, [pc, #84]	@ (8001134 <MX_I2C1_Init+0x74>)
 80010de:	2200      	movs	r2, #0
 80010e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010e2:	4b14      	ldr	r3, [pc, #80]	@ (8001134 <MX_I2C1_Init+0x74>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010e8:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <MX_I2C1_Init+0x74>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ee:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <MX_I2C1_Init+0x74>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001134 <MX_I2C1_Init+0x74>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010fa:	480e      	ldr	r0, [pc, #56]	@ (8001134 <MX_I2C1_Init+0x74>)
 80010fc:	f005 fcf8 	bl	8006af0 <HAL_I2C_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001106:	f000 fc8f 	bl	8001a28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800110a:	2100      	movs	r1, #0
 800110c:	4809      	ldr	r0, [pc, #36]	@ (8001134 <MX_I2C1_Init+0x74>)
 800110e:	f005 fd8b 	bl	8006c28 <HAL_I2CEx_ConfigAnalogFilter>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001118:	f000 fc86 	bl	8001a28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800111c:	2100      	movs	r1, #0
 800111e:	4805      	ldr	r0, [pc, #20]	@ (8001134 <MX_I2C1_Init+0x74>)
 8001120:	f005 fdcd 	bl	8006cbe <HAL_I2CEx_ConfigDigitalFilter>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800112a:	f000 fc7d 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	240004ec 	.word	0x240004ec
 8001138:	40005400 	.word	0x40005400
 800113c:	60404e72 	.word	0x60404e72

08001140 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001144:	4b1b      	ldr	r3, [pc, #108]	@ (80011b4 <MX_I2C2_Init+0x74>)
 8001146:	4a1c      	ldr	r2, [pc, #112]	@ (80011b8 <MX_I2C2_Init+0x78>)
 8001148:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x60404E72;
 800114a:	4b1a      	ldr	r3, [pc, #104]	@ (80011b4 <MX_I2C2_Init+0x74>)
 800114c:	4a1b      	ldr	r2, [pc, #108]	@ (80011bc <MX_I2C2_Init+0x7c>)
 800114e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001150:	4b18      	ldr	r3, [pc, #96]	@ (80011b4 <MX_I2C2_Init+0x74>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001156:	4b17      	ldr	r3, [pc, #92]	@ (80011b4 <MX_I2C2_Init+0x74>)
 8001158:	2201      	movs	r2, #1
 800115a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800115c:	4b15      	ldr	r3, [pc, #84]	@ (80011b4 <MX_I2C2_Init+0x74>)
 800115e:	2200      	movs	r2, #0
 8001160:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001162:	4b14      	ldr	r3, [pc, #80]	@ (80011b4 <MX_I2C2_Init+0x74>)
 8001164:	2200      	movs	r2, #0
 8001166:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001168:	4b12      	ldr	r3, [pc, #72]	@ (80011b4 <MX_I2C2_Init+0x74>)
 800116a:	2200      	movs	r2, #0
 800116c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800116e:	4b11      	ldr	r3, [pc, #68]	@ (80011b4 <MX_I2C2_Init+0x74>)
 8001170:	2200      	movs	r2, #0
 8001172:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001174:	4b0f      	ldr	r3, [pc, #60]	@ (80011b4 <MX_I2C2_Init+0x74>)
 8001176:	2200      	movs	r2, #0
 8001178:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800117a:	480e      	ldr	r0, [pc, #56]	@ (80011b4 <MX_I2C2_Init+0x74>)
 800117c:	f005 fcb8 	bl	8006af0 <HAL_I2C_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001186:	f000 fc4f 	bl	8001a28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800118a:	2100      	movs	r1, #0
 800118c:	4809      	ldr	r0, [pc, #36]	@ (80011b4 <MX_I2C2_Init+0x74>)
 800118e:	f005 fd4b 	bl	8006c28 <HAL_I2CEx_ConfigAnalogFilter>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001198:	f000 fc46 	bl	8001a28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800119c:	2100      	movs	r1, #0
 800119e:	4805      	ldr	r0, [pc, #20]	@ (80011b4 <MX_I2C2_Init+0x74>)
 80011a0:	f005 fd8d 	bl	8006cbe <HAL_I2CEx_ConfigDigitalFilter>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80011aa:	f000 fc3d 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	24000540 	.word	0x24000540
 80011b8:	40005800 	.word	0x40005800
 80011bc:	60404e72 	.word	0x60404e72

080011c0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08e      	sub	sp, #56	@ 0x38
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	2234      	movs	r2, #52	@ 0x34
 80011ca:	2100      	movs	r1, #0
 80011cc:	4618      	mov	r0, r3
 80011ce:	f029 f9fb 	bl	802a5c8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80011d2:	4b3a      	ldr	r3, [pc, #232]	@ (80012bc <MX_LTDC_Init+0xfc>)
 80011d4:	4a3a      	ldr	r2, [pc, #232]	@ (80012c0 <MX_LTDC_Init+0x100>)
 80011d6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80011d8:	4b38      	ldr	r3, [pc, #224]	@ (80012bc <MX_LTDC_Init+0xfc>)
 80011da:	2200      	movs	r2, #0
 80011dc:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80011de:	4b37      	ldr	r3, [pc, #220]	@ (80012bc <MX_LTDC_Init+0xfc>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80011e4:	4b35      	ldr	r3, [pc, #212]	@ (80012bc <MX_LTDC_Init+0xfc>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80011ea:	4b34      	ldr	r3, [pc, #208]	@ (80012bc <MX_LTDC_Init+0xfc>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80011f0:	4b32      	ldr	r3, [pc, #200]	@ (80012bc <MX_LTDC_Init+0xfc>)
 80011f2:	2228      	movs	r2, #40	@ 0x28
 80011f4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80011f6:	4b31      	ldr	r3, [pc, #196]	@ (80012bc <MX_LTDC_Init+0xfc>)
 80011f8:	2209      	movs	r2, #9
 80011fa:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80011fc:	4b2f      	ldr	r3, [pc, #188]	@ (80012bc <MX_LTDC_Init+0xfc>)
 80011fe:	2235      	movs	r2, #53	@ 0x35
 8001200:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001202:	4b2e      	ldr	r3, [pc, #184]	@ (80012bc <MX_LTDC_Init+0xfc>)
 8001204:	220b      	movs	r2, #11
 8001206:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001208:	4b2c      	ldr	r3, [pc, #176]	@ (80012bc <MX_LTDC_Init+0xfc>)
 800120a:	f240 2215 	movw	r2, #533	@ 0x215
 800120e:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001210:	4b2a      	ldr	r3, [pc, #168]	@ (80012bc <MX_LTDC_Init+0xfc>)
 8001212:	f240 121b 	movw	r2, #283	@ 0x11b
 8001216:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8001218:	4b28      	ldr	r3, [pc, #160]	@ (80012bc <MX_LTDC_Init+0xfc>)
 800121a:	f240 2235 	movw	r2, #565	@ 0x235
 800121e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001220:	4b26      	ldr	r3, [pc, #152]	@ (80012bc <MX_LTDC_Init+0xfc>)
 8001222:	f240 121d 	movw	r2, #285	@ 0x11d
 8001226:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001228:	4b24      	ldr	r3, [pc, #144]	@ (80012bc <MX_LTDC_Init+0xfc>)
 800122a:	2200      	movs	r2, #0
 800122c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001230:	4b22      	ldr	r3, [pc, #136]	@ (80012bc <MX_LTDC_Init+0xfc>)
 8001232:	2200      	movs	r2, #0
 8001234:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001238:	4b20      	ldr	r3, [pc, #128]	@ (80012bc <MX_LTDC_Init+0xfc>)
 800123a:	2200      	movs	r2, #0
 800123c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001240:	481e      	ldr	r0, [pc, #120]	@ (80012bc <MX_LTDC_Init+0xfc>)
 8001242:	f005 fd89 	bl	8006d58 <HAL_LTDC_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800124c:	f000 fbec 	bl	8001a28 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001254:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001258:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800125e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001262:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8001264:	2301      	movs	r3, #1
 8001266:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001268:	23ff      	movs	r3, #255	@ 0xff
 800126a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001270:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001274:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001276:	2305      	movs	r3, #5
 8001278:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0x70000000;
 800127a:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800127e:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8001280:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001284:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8001286:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800128a:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	2200      	movs	r2, #0
 80012a2:	4619      	mov	r1, r3
 80012a4:	4805      	ldr	r0, [pc, #20]	@ (80012bc <MX_LTDC_Init+0xfc>)
 80012a6:	f005 fedf 	bl	8007068 <HAL_LTDC_ConfigLayer>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80012b0:	f000 fbba 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80012b4:	bf00      	nop
 80012b6:	3738      	adds	r7, #56	@ 0x38
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	24000594 	.word	0x24000594
 80012c0:	50001000 	.word	0x50001000

080012c4 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b088      	sub	sp, #32
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */
	BSP_OSPI_NOR_Init_t ospi_nor_int;
  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
 80012d8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80012da:	4b38      	ldr	r3, [pc, #224]	@ (80013bc <MX_OCTOSPI1_Init+0xf8>)
 80012dc:	4a38      	ldr	r2, [pc, #224]	@ (80013c0 <MX_OCTOSPI1_Init+0xfc>)
 80012de:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 4;
 80012e0:	4b36      	ldr	r3, [pc, #216]	@ (80013bc <MX_OCTOSPI1_Init+0xf8>)
 80012e2:	2204      	movs	r2, #4
 80012e4:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80012e6:	4b35      	ldr	r3, [pc, #212]	@ (80013bc <MX_OCTOSPI1_Init+0xf8>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 80012ec:	4b33      	ldr	r3, [pc, #204]	@ (80013bc <MX_OCTOSPI1_Init+0xf8>)
 80012ee:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80012f2:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 80012f4:	4b31      	ldr	r3, [pc, #196]	@ (80013bc <MX_OCTOSPI1_Init+0xf8>)
 80012f6:	2220      	movs	r2, #32
 80012f8:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 80012fa:	4b30      	ldr	r3, [pc, #192]	@ (80013bc <MX_OCTOSPI1_Init+0xf8>)
 80012fc:	2202      	movs	r2, #2
 80012fe:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001300:	4b2e      	ldr	r3, [pc, #184]	@ (80013bc <MX_OCTOSPI1_Init+0xf8>)
 8001302:	2200      	movs	r2, #0
 8001304:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001306:	4b2d      	ldr	r3, [pc, #180]	@ (80013bc <MX_OCTOSPI1_Init+0xf8>)
 8001308:	2200      	movs	r2, #0
 800130a:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800130c:	4b2b      	ldr	r3, [pc, #172]	@ (80013bc <MX_OCTOSPI1_Init+0xf8>)
 800130e:	2200      	movs	r2, #0
 8001310:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 2;
 8001312:	4b2a      	ldr	r3, [pc, #168]	@ (80013bc <MX_OCTOSPI1_Init+0xf8>)
 8001314:	2202      	movs	r2, #2
 8001316:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001318:	4b28      	ldr	r3, [pc, #160]	@ (80013bc <MX_OCTOSPI1_Init+0xf8>)
 800131a:	2200      	movs	r2, #0
 800131c:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800131e:	4b27      	ldr	r3, [pc, #156]	@ (80013bc <MX_OCTOSPI1_Init+0xf8>)
 8001320:	2200      	movs	r2, #0
 8001322:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8001324:	4b25      	ldr	r3, [pc, #148]	@ (80013bc <MX_OCTOSPI1_Init+0xf8>)
 8001326:	2200      	movs	r2, #0
 8001328:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800132a:	4b24      	ldr	r3, [pc, #144]	@ (80013bc <MX_OCTOSPI1_Init+0xf8>)
 800132c:	2208      	movs	r2, #8
 800132e:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 8001330:	4b22      	ldr	r3, [pc, #136]	@ (80013bc <MX_OCTOSPI1_Init+0xf8>)
 8001332:	2200      	movs	r2, #0
 8001334:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 8001336:	4b21      	ldr	r3, [pc, #132]	@ (80013bc <MX_OCTOSPI1_Init+0xf8>)
 8001338:	2200      	movs	r2, #0
 800133a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 800133c:	481f      	ldr	r0, [pc, #124]	@ (80013bc <MX_OCTOSPI1_Init+0xf8>)
 800133e:	f006 f8ff 	bl	8007540 <HAL_OSPI_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_OCTOSPI1_Init+0x88>
  {
    Error_Handler();
 8001348:	f000 fb6e 	bl	8001a28 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 800134c:	2301      	movs	r3, #1
 800134e:	607b      	str	r3, [r7, #4]
  sOspiManagerCfg.DQSPort = 1;
 8001350:	2301      	movs	r3, #1
 8001352:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.NCSPort = 1;
 8001354:	2301      	movs	r3, #1
 8001356:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8001358:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800135c:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 800135e:	4b19      	ldr	r3, [pc, #100]	@ (80013c4 <MX_OCTOSPI1_Init+0x100>)
 8001360:	617b      	str	r3, [r7, #20]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001368:	4619      	mov	r1, r3
 800136a:	4814      	ldr	r0, [pc, #80]	@ (80013bc <MX_OCTOSPI1_Init+0xf8>)
 800136c:	f006 fd68 	bl	8007e40 <HAL_OSPIM_Config>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_OCTOSPI1_Init+0xb6>
  {
    Error_Handler();
 8001376:	f000 fb57 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */
	HAL_OSPI_DeInit(&hospi1);
 800137a:	4810      	ldr	r0, [pc, #64]	@ (80013bc <MX_OCTOSPI1_Init+0xf8>)
 800137c:	f006 f99c 	bl	80076b8 <HAL_OSPI_DeInit>
	ospi_nor_int.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 8001380:	2301      	movs	r3, #1
 8001382:	773b      	strb	r3, [r7, #28]
	ospi_nor_int.TransferRate = BSP_OSPI_NOR_DTR_TRANSFER;
 8001384:	2301      	movs	r3, #1
 8001386:	777b      	strb	r3, [r7, #29]
	BSP_OSPI_NOR_DeInit(0);
 8001388:	2000      	movs	r0, #0
 800138a:	f002 fa2f 	bl	80037ec <BSP_OSPI_NOR_DeInit>
	if (BSP_OSPI_NOR_Init(0, &ospi_nor_int) != BSP_ERROR_NONE)
 800138e:	f107 031c 	add.w	r3, r7, #28
 8001392:	4619      	mov	r1, r3
 8001394:	2000      	movs	r0, #0
 8001396:	f002 f98b 	bl	80036b0 <BSP_OSPI_NOR_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_OCTOSPI1_Init+0xe0>
	{
		Error_Handler();
 80013a0:	f000 fb42 	bl	8001a28 <Error_Handler>
	}
	if (BSP_OSPI_NOR_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 80013a4:	2000      	movs	r0, #0
 80013a6:	f002 fab5 	bl	8003914 <BSP_OSPI_NOR_EnableMemoryMappedMode>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_OCTOSPI1_Init+0xf0>
	{
		Error_Handler();
 80013b0:	f000 fb3a 	bl	8001a28 <Error_Handler>
	}
  /* USER CODE END OCTOSPI1_Init 2 */

}
 80013b4:	bf00      	nop
 80013b6:	3720      	adds	r7, #32
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	2400063c 	.word	0x2400063c
 80013c0:	52005000 	.word	0x52005000
 80013c4:	01000001 	.word	0x01000001

080013c8 <MX_OCTOSPI2_Init>:
  * @brief OCTOSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI2_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b092      	sub	sp, #72	@ 0x48
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */
	BSP_OSPI_RAM_Init_t ospi_ram_init;
  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80013ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
 80013dc:	611a      	str	r2, [r3, #16]
 80013de:	615a      	str	r2, [r3, #20]
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 80013e0:	f107 031c 	add.w	r3, r7, #28
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */
	OSPI_HyperbusCmdTypeDef sCommand =
 80013ee:	f107 0308 	add.w	r3, r7, #8
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	611a      	str	r2, [r3, #16]
	{ 0 };
	OSPI_MemoryMappedTypeDef sMemMappedCfg =
 80013fe:	463b      	mov	r3, r7
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
	{ 0 };
  /* USER CODE END OCTOSPI2_Init 1 */
  /* OCTOSPI2 parameter configuration*/
  hospi2.Instance = OCTOSPI2;
 8001406:	4b48      	ldr	r3, [pc, #288]	@ (8001528 <MX_OCTOSPI2_Init+0x160>)
 8001408:	4a48      	ldr	r2, [pc, #288]	@ (800152c <MX_OCTOSPI2_Init+0x164>)
 800140a:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 4;
 800140c:	4b46      	ldr	r3, [pc, #280]	@ (8001528 <MX_OCTOSPI2_Init+0x160>)
 800140e:	2204      	movs	r2, #4
 8001410:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001412:	4b45      	ldr	r3, [pc, #276]	@ (8001528 <MX_OCTOSPI2_Init+0x160>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 8001418:	4b43      	ldr	r3, [pc, #268]	@ (8001528 <MX_OCTOSPI2_Init+0x160>)
 800141a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800141e:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 24;
 8001420:	4b41      	ldr	r3, [pc, #260]	@ (8001528 <MX_OCTOSPI2_Init+0x160>)
 8001422:	2218      	movs	r2, #24
 8001424:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 4;
 8001426:	4b40      	ldr	r3, [pc, #256]	@ (8001528 <MX_OCTOSPI2_Init+0x160>)
 8001428:	2204      	movs	r2, #4
 800142a:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 800142c:	4b3e      	ldr	r3, [pc, #248]	@ (8001528 <MX_OCTOSPI2_Init+0x160>)
 800142e:	2200      	movs	r2, #0
 8001430:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001432:	4b3d      	ldr	r3, [pc, #244]	@ (8001528 <MX_OCTOSPI2_Init+0x160>)
 8001434:	2200      	movs	r2, #0
 8001436:	61da      	str	r2, [r3, #28]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8001438:	4b3b      	ldr	r3, [pc, #236]	@ (8001528 <MX_OCTOSPI2_Init+0x160>)
 800143a:	2200      	movs	r2, #0
 800143c:	621a      	str	r2, [r3, #32]
  hospi2.Init.ClockPrescaler = 2;
 800143e:	4b3a      	ldr	r3, [pc, #232]	@ (8001528 <MX_OCTOSPI2_Init+0x160>)
 8001440:	2202      	movs	r2, #2
 8001442:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001444:	4b38      	ldr	r3, [pc, #224]	@ (8001528 <MX_OCTOSPI2_Init+0x160>)
 8001446:	2200      	movs	r2, #0
 8001448:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 800144a:	4b37      	ldr	r3, [pc, #220]	@ (8001528 <MX_OCTOSPI2_Init+0x160>)
 800144c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001450:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi2.Init.ChipSelectBoundary = 23;
 8001452:	4b35      	ldr	r3, [pc, #212]	@ (8001528 <MX_OCTOSPI2_Init+0x160>)
 8001454:	2217      	movs	r2, #23
 8001456:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 8001458:	4b33      	ldr	r3, [pc, #204]	@ (8001528 <MX_OCTOSPI2_Init+0x160>)
 800145a:	2200      	movs	r2, #0
 800145c:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi2.Init.MaxTran = 0;
 800145e:	4b32      	ldr	r3, [pc, #200]	@ (8001528 <MX_OCTOSPI2_Init+0x160>)
 8001460:	2200      	movs	r2, #0
 8001462:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi2.Init.Refresh = 400;
 8001464:	4b30      	ldr	r3, [pc, #192]	@ (8001528 <MX_OCTOSPI2_Init+0x160>)
 8001466:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800146a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 800146c:	482e      	ldr	r0, [pc, #184]	@ (8001528 <MX_OCTOSPI2_Init+0x160>)
 800146e:	f006 f867 	bl	8007540 <HAL_OSPI_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_OCTOSPI2_Init+0xb4>
  {
    Error_Handler();
 8001478:	f000 fad6 	bl	8001a28 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 2;
 800147c:	2302      	movs	r3, #2
 800147e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sOspiManagerCfg.DQSPort = 2;
 8001480:	2302      	movs	r3, #2
 8001482:	633b      	str	r3, [r7, #48]	@ 0x30
  sOspiManagerCfg.NCSPort = 2;
 8001484:	2302      	movs	r3, #2
 8001486:	637b      	str	r3, [r7, #52]	@ 0x34
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8001488:	4b29      	ldr	r3, [pc, #164]	@ (8001530 <MX_OCTOSPI2_Init+0x168>)
 800148a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 800148c:	4b29      	ldr	r3, [pc, #164]	@ (8001534 <MX_OCTOSPI2_Init+0x16c>)
 800148e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001490:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001494:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001498:	4619      	mov	r1, r3
 800149a:	4823      	ldr	r0, [pc, #140]	@ (8001528 <MX_OCTOSPI2_Init+0x160>)
 800149c:	f006 fcd0 	bl	8007e40 <HAL_OSPIM_Config>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_OCTOSPI2_Init+0xe2>
  {
    Error_Handler();
 80014a6:	f000 fabf 	bl	8001a28 <Error_Handler>
  }
  sHyperBusCfg.RWRecoveryTime = 3;
 80014aa:	2303      	movs	r3, #3
 80014ac:	61fb      	str	r3, [r7, #28]
  sHyperBusCfg.AccessTime = 6;
 80014ae:	2306      	movs	r3, #6
 80014b0:	623b      	str	r3, [r7, #32]
  sHyperBusCfg.WriteZeroLatency = HAL_OSPI_LATENCY_ON_WRITE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	627b      	str	r3, [r7, #36]	@ 0x24
  sHyperBusCfg.LatencyMode = HAL_OSPI_FIXED_LATENCY;
 80014b6:	2301      	movs	r3, #1
 80014b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80014ba:	f107 031c 	add.w	r3, r7, #28
 80014be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014c2:	4619      	mov	r1, r3
 80014c4:	4818      	ldr	r0, [pc, #96]	@ (8001528 <MX_OCTOSPI2_Init+0x160>)
 80014c6:	f006 f9ab 	bl	8007820 <HAL_OSPI_HyperbusCfg>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_OCTOSPI2_Init+0x10c>
  {
    Error_Handler();
 80014d0:	f000 faaa 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */
	sCommand.AddressSpace = HAL_OSPI_MEMORY_ADDRESS_SPACE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	60bb      	str	r3, [r7, #8]
	sCommand.AddressSize = HAL_OSPI_ADDRESS_32_BITS;
 80014d8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80014dc:	613b      	str	r3, [r7, #16]
	sCommand.DQSMode = HAL_OSPI_DQS_ENABLE;
 80014de:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80014e2:	61bb      	str	r3, [r7, #24]
	sCommand.Address = 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60fb      	str	r3, [r7, #12]
	sCommand.NbData = 1;
 80014e8:	2301      	movs	r3, #1
 80014ea:	617b      	str	r3, [r7, #20]

	if (HAL_OSPI_HyperbusCmd(&hospi2, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE)
 80014ec:	f107 0308 	add.w	r3, r7, #8
 80014f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014f4:	4619      	mov	r1, r3
 80014f6:	480c      	ldr	r0, [pc, #48]	@ (8001528 <MX_OCTOSPI2_Init+0x160>)
 80014f8:	f006 f9d1 	bl	800789e <HAL_OSPI_HyperbusCmd>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_OCTOSPI2_Init+0x13e>
			!= HAL_OK)
	{
		Error_Handler();
 8001502:	f000 fa91 	bl	8001a28 <Error_Handler>
	}

	sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8001506:	2300      	movs	r3, #0
 8001508:	603b      	str	r3, [r7, #0]

	if (HAL_OSPI_MemoryMapped(&hospi2, &sMemMappedCfg) != HAL_OK)
 800150a:	463b      	mov	r3, r7
 800150c:	4619      	mov	r1, r3
 800150e:	4806      	ldr	r0, [pc, #24]	@ (8001528 <MX_OCTOSPI2_Init+0x160>)
 8001510:	f006 fbc4 	bl	8007c9c <HAL_OSPI_MemoryMapped>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_OCTOSPI2_Init+0x156>
	{
		Error_Handler();
 800151a:	f000 fa85 	bl	8001a28 <Error_Handler>
	}
  /* USER CODE END OCTOSPI2_Init 2 */

}
 800151e:	bf00      	nop
 8001520:	3748      	adds	r7, #72	@ 0x48
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	24000698 	.word	0x24000698
 800152c:	5200a000 	.word	0x5200a000
 8001530:	00010002 	.word	0x00010002
 8001534:	01000002 	.word	0x01000002

08001538 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800153e:	f107 030c 	add.w	r3, r7, #12
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	609a      	str	r2, [r3, #8]
 800154a:	60da      	str	r2, [r3, #12]
 800154c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800154e:	463b      	mov	r3, r7
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001558:	4b20      	ldr	r3, [pc, #128]	@ (80015dc <MX_TIM1_Init+0xa4>)
 800155a:	4a21      	ldr	r2, [pc, #132]	@ (80015e0 <MX_TIM1_Init+0xa8>)
 800155c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800155e:	4b1f      	ldr	r3, [pc, #124]	@ (80015dc <MX_TIM1_Init+0xa4>)
 8001560:	2200      	movs	r2, #0
 8001562:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001564:	4b1d      	ldr	r3, [pc, #116]	@ (80015dc <MX_TIM1_Init+0xa4>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800156a:	4b1c      	ldr	r3, [pc, #112]	@ (80015dc <MX_TIM1_Init+0xa4>)
 800156c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001570:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001572:	4b1a      	ldr	r3, [pc, #104]	@ (80015dc <MX_TIM1_Init+0xa4>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001578:	4b18      	ldr	r3, [pc, #96]	@ (80015dc <MX_TIM1_Init+0xa4>)
 800157a:	2200      	movs	r2, #0
 800157c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800157e:	4b17      	ldr	r3, [pc, #92]	@ (80015dc <MX_TIM1_Init+0xa4>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001584:	4815      	ldr	r0, [pc, #84]	@ (80015dc <MX_TIM1_Init+0xa4>)
 8001586:	f00a ff97 	bl	800c4b8 <HAL_TIM_Base_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001590:	f000 fa4a 	bl	8001a28 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001594:	2300      	movs	r3, #0
 8001596:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001598:	2300      	movs	r3, #0
 800159a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800159c:	f107 030c 	add.w	r3, r7, #12
 80015a0:	4619      	mov	r1, r3
 80015a2:	480e      	ldr	r0, [pc, #56]	@ (80015dc <MX_TIM1_Init+0xa4>)
 80015a4:	f00b fa13 	bl	800c9ce <HAL_TIM_SlaveConfigSynchro>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80015ae:	f000 fa3b 	bl	8001a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b2:	2300      	movs	r3, #0
 80015b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015b6:	2300      	movs	r3, #0
 80015b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015be:	463b      	mov	r3, r7
 80015c0:	4619      	mov	r1, r3
 80015c2:	4806      	ldr	r0, [pc, #24]	@ (80015dc <MX_TIM1_Init+0xa4>)
 80015c4:	f00b fc8a 	bl	800cedc <HAL_TIMEx_MasterConfigSynchronization>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80015ce:	f000 fa2b 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80015d2:	bf00      	nop
 80015d4:	3720      	adds	r7, #32
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	240006f4 	.word	0x240006f4
 80015e0:	40010000 	.word	0x40010000

080015e4 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08c      	sub	sp, #48	@ 0x30
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015ea:	f107 030c 	add.w	r3, r7, #12
 80015ee:	2224      	movs	r2, #36	@ 0x24
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f028 ffe8 	bl	802a5c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f8:	463b      	mov	r3, r7
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8001602:	4b21      	ldr	r3, [pc, #132]	@ (8001688 <MX_TIM23_Init+0xa4>)
 8001604:	4a21      	ldr	r2, [pc, #132]	@ (800168c <MX_TIM23_Init+0xa8>)
 8001606:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 8001608:	4b1f      	ldr	r3, [pc, #124]	@ (8001688 <MX_TIM23_Init+0xa4>)
 800160a:	2200      	movs	r2, #0
 800160c:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 800160e:	4b1e      	ldr	r3, [pc, #120]	@ (8001688 <MX_TIM23_Init+0xa4>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 8001614:	4b1c      	ldr	r3, [pc, #112]	@ (8001688 <MX_TIM23_Init+0xa4>)
 8001616:	f04f 32ff 	mov.w	r2, #4294967295
 800161a:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800161c:	4b1a      	ldr	r3, [pc, #104]	@ (8001688 <MX_TIM23_Init+0xa4>)
 800161e:	2200      	movs	r2, #0
 8001620:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001622:	4b19      	ldr	r3, [pc, #100]	@ (8001688 <MX_TIM23_Init+0xa4>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001628:	2301      	movs	r3, #1
 800162a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800162c:	2300      	movs	r3, #0
 800162e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001630:	2301      	movs	r3, #1
 8001632:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001634:	2300      	movs	r3, #0
 8001636:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800163c:	2300      	movs	r3, #0
 800163e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001640:	2301      	movs	r3, #1
 8001642:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001644:	2300      	movs	r3, #0
 8001646:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 800164c:	f107 030c 	add.w	r3, r7, #12
 8001650:	4619      	mov	r1, r3
 8001652:	480d      	ldr	r0, [pc, #52]	@ (8001688 <MX_TIM23_Init+0xa4>)
 8001654:	f00b f80e 	bl	800c674 <HAL_TIM_Encoder_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM23_Init+0x7e>
  {
    Error_Handler();
 800165e:	f000 f9e3 	bl	8001a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001662:	2300      	movs	r3, #0
 8001664:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001666:	2300      	movs	r3, #0
 8001668:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 800166a:	463b      	mov	r3, r7
 800166c:	4619      	mov	r1, r3
 800166e:	4806      	ldr	r0, [pc, #24]	@ (8001688 <MX_TIM23_Init+0xa4>)
 8001670:	f00b fc34 	bl	800cedc <HAL_TIMEx_MasterConfigSynchronization>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM23_Init+0x9a>
  {
    Error_Handler();
 800167a:	f000 f9d5 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 800167e:	bf00      	nop
 8001680:	3730      	adds	r7, #48	@ 0x30
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	24000740 	.word	0x24000740
 800168c:	4000e000 	.word	0x4000e000

08001690 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001694:	4b22      	ldr	r3, [pc, #136]	@ (8001720 <MX_UART4_Init+0x90>)
 8001696:	4a23      	ldr	r2, [pc, #140]	@ (8001724 <MX_UART4_Init+0x94>)
 8001698:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800169a:	4b21      	ldr	r3, [pc, #132]	@ (8001720 <MX_UART4_Init+0x90>)
 800169c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016a0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80016a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001720 <MX_UART4_Init+0x90>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80016a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001720 <MX_UART4_Init+0x90>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80016ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001720 <MX_UART4_Init+0x90>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80016b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001720 <MX_UART4_Init+0x90>)
 80016b6:	220c      	movs	r2, #12
 80016b8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ba:	4b19      	ldr	r3, [pc, #100]	@ (8001720 <MX_UART4_Init+0x90>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c0:	4b17      	ldr	r3, [pc, #92]	@ (8001720 <MX_UART4_Init+0x90>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016c6:	4b16      	ldr	r3, [pc, #88]	@ (8001720 <MX_UART4_Init+0x90>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016cc:	4b14      	ldr	r3, [pc, #80]	@ (8001720 <MX_UART4_Init+0x90>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016d2:	4b13      	ldr	r3, [pc, #76]	@ (8001720 <MX_UART4_Init+0x90>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80016d8:	4811      	ldr	r0, [pc, #68]	@ (8001720 <MX_UART4_Init+0x90>)
 80016da:	f00b fcb9 	bl	800d050 <HAL_UART_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80016e4:	f000 f9a0 	bl	8001a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016e8:	2100      	movs	r1, #0
 80016ea:	480d      	ldr	r0, [pc, #52]	@ (8001720 <MX_UART4_Init+0x90>)
 80016ec:	f00c fdc5 	bl	800e27a <HAL_UARTEx_SetTxFifoThreshold>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80016f6:	f000 f997 	bl	8001a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016fa:	2100      	movs	r1, #0
 80016fc:	4808      	ldr	r0, [pc, #32]	@ (8001720 <MX_UART4_Init+0x90>)
 80016fe:	f00c fdfa 	bl	800e2f6 <HAL_UARTEx_SetRxFifoThreshold>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001708:	f000 f98e 	bl	8001a28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800170c:	4804      	ldr	r0, [pc, #16]	@ (8001720 <MX_UART4_Init+0x90>)
 800170e:	f00c fd7b 	bl	800e208 <HAL_UARTEx_DisableFifoMode>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001718:	f000 f986 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}
 8001720:	2400078c 	.word	0x2400078c
 8001724:	40004c00 	.word	0x40004c00

08001728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b090      	sub	sp, #64	@ 0x40
 800172c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	605a      	str	r2, [r3, #4]
 8001738:	609a      	str	r2, [r3, #8]
 800173a:	60da      	str	r2, [r3, #12]
 800173c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800173e:	4b62      	ldr	r3, [pc, #392]	@ (80018c8 <MX_GPIO_Init+0x1a0>)
 8001740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001744:	4a60      	ldr	r2, [pc, #384]	@ (80018c8 <MX_GPIO_Init+0x1a0>)
 8001746:	f043 0310 	orr.w	r3, r3, #16
 800174a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800174e:	4b5e      	ldr	r3, [pc, #376]	@ (80018c8 <MX_GPIO_Init+0x1a0>)
 8001750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001754:	f003 0310 	and.w	r3, r3, #16
 8001758:	62bb      	str	r3, [r7, #40]	@ 0x28
 800175a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800175c:	4b5a      	ldr	r3, [pc, #360]	@ (80018c8 <MX_GPIO_Init+0x1a0>)
 800175e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001762:	4a59      	ldr	r2, [pc, #356]	@ (80018c8 <MX_GPIO_Init+0x1a0>)
 8001764:	f043 0320 	orr.w	r3, r3, #32
 8001768:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800176c:	4b56      	ldr	r3, [pc, #344]	@ (80018c8 <MX_GPIO_Init+0x1a0>)
 800176e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001772:	f003 0320 	and.w	r3, r3, #32
 8001776:	627b      	str	r3, [r7, #36]	@ 0x24
 8001778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800177a:	4b53      	ldr	r3, [pc, #332]	@ (80018c8 <MX_GPIO_Init+0x1a0>)
 800177c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001780:	4a51      	ldr	r2, [pc, #324]	@ (80018c8 <MX_GPIO_Init+0x1a0>)
 8001782:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001786:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800178a:	4b4f      	ldr	r3, [pc, #316]	@ (80018c8 <MX_GPIO_Init+0x1a0>)
 800178c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001790:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001794:	623b      	str	r3, [r7, #32]
 8001796:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001798:	4b4b      	ldr	r3, [pc, #300]	@ (80018c8 <MX_GPIO_Init+0x1a0>)
 800179a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800179e:	4a4a      	ldr	r2, [pc, #296]	@ (80018c8 <MX_GPIO_Init+0x1a0>)
 80017a0:	f043 0304 	orr.w	r3, r3, #4
 80017a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017a8:	4b47      	ldr	r3, [pc, #284]	@ (80018c8 <MX_GPIO_Init+0x1a0>)
 80017aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	61fb      	str	r3, [r7, #28]
 80017b4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b6:	4b44      	ldr	r3, [pc, #272]	@ (80018c8 <MX_GPIO_Init+0x1a0>)
 80017b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017bc:	4a42      	ldr	r2, [pc, #264]	@ (80018c8 <MX_GPIO_Init+0x1a0>)
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017c6:	4b40      	ldr	r3, [pc, #256]	@ (80018c8 <MX_GPIO_Init+0x1a0>)
 80017c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	61bb      	str	r3, [r7, #24]
 80017d2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d4:	4b3c      	ldr	r3, [pc, #240]	@ (80018c8 <MX_GPIO_Init+0x1a0>)
 80017d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017da:	4a3b      	ldr	r2, [pc, #236]	@ (80018c8 <MX_GPIO_Init+0x1a0>)
 80017dc:	f043 0302 	orr.w	r3, r3, #2
 80017e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017e4:	4b38      	ldr	r3, [pc, #224]	@ (80018c8 <MX_GPIO_Init+0x1a0>)
 80017e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017f2:	4b35      	ldr	r3, [pc, #212]	@ (80018c8 <MX_GPIO_Init+0x1a0>)
 80017f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017f8:	4a33      	ldr	r2, [pc, #204]	@ (80018c8 <MX_GPIO_Init+0x1a0>)
 80017fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001802:	4b31      	ldr	r3, [pc, #196]	@ (80018c8 <MX_GPIO_Init+0x1a0>)
 8001804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001810:	4b2d      	ldr	r3, [pc, #180]	@ (80018c8 <MX_GPIO_Init+0x1a0>)
 8001812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001816:	4a2c      	ldr	r2, [pc, #176]	@ (80018c8 <MX_GPIO_Init+0x1a0>)
 8001818:	f043 0308 	orr.w	r3, r3, #8
 800181c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001820:	4b29      	ldr	r3, [pc, #164]	@ (80018c8 <MX_GPIO_Init+0x1a0>)
 8001822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001826:	f003 0308 	and.w	r3, r3, #8
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800182e:	4b26      	ldr	r3, [pc, #152]	@ (80018c8 <MX_GPIO_Init+0x1a0>)
 8001830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001834:	4a24      	ldr	r2, [pc, #144]	@ (80018c8 <MX_GPIO_Init+0x1a0>)
 8001836:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800183a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800183e:	4b22      	ldr	r3, [pc, #136]	@ (80018c8 <MX_GPIO_Init+0x1a0>)
 8001840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001844:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800184c:	4b1e      	ldr	r3, [pc, #120]	@ (80018c8 <MX_GPIO_Init+0x1a0>)
 800184e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001852:	4a1d      	ldr	r2, [pc, #116]	@ (80018c8 <MX_GPIO_Init+0x1a0>)
 8001854:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001858:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800185c:	4b1a      	ldr	r3, [pc, #104]	@ (80018c8 <MX_GPIO_Init+0x1a0>)
 800185e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001862:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_0, GPIO_PIN_RESET);
 800186a:	2200      	movs	r2, #0
 800186c:	f240 4101 	movw	r1, #1025	@ 0x401
 8001870:	4816      	ldr	r0, [pc, #88]	@ (80018cc <MX_GPIO_Init+0x1a4>)
 8001872:	f005 f923 	bl	8006abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_15, GPIO_PIN_RESET);
 8001876:	2200      	movs	r2, #0
 8001878:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800187c:	4814      	ldr	r0, [pc, #80]	@ (80018d0 <MX_GPIO_Init+0x1a8>)
 800187e:	f005 f91d 	bl	8006abc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD10 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_0;
 8001882:	f240 4301 	movw	r3, #1025	@ 0x401
 8001886:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001888:	2301      	movs	r3, #1
 800188a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001890:	2300      	movs	r3, #0
 8001892:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001894:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001898:	4619      	mov	r1, r3
 800189a:	480c      	ldr	r0, [pc, #48]	@ (80018cc <MX_GPIO_Init+0x1a4>)
 800189c:	f004 fe64 	bl	8006568 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80018a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80018a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a6:	2301      	movs	r3, #1
 80018a8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ae:	2300      	movs	r3, #0
 80018b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018b6:	4619      	mov	r1, r3
 80018b8:	4805      	ldr	r0, [pc, #20]	@ (80018d0 <MX_GPIO_Init+0x1a8>)
 80018ba:	f004 fe55 	bl	8006568 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018be:	bf00      	nop
 80018c0:	3740      	adds	r7, #64	@ 0x40
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	58024400 	.word	0x58024400
 80018cc:	58020c00 	.word	0x58020c00
 80018d0:	58021800 	.word	0x58021800

080018d4 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;)
	{
		osDelay(1);
 80018dc:	2001      	movs	r0, #1
 80018de:	f00c febf 	bl	800e660 <osDelay>
 80018e2:	e7fb      	b.n	80018dc <StartDefaultTask+0x8>

080018e4 <StartTask02>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	/* Infinite loop */
	for (;;)
	{

		if (counter < 100)
 80018ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001928 <StartTask02+0x44>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b63      	cmp	r3, #99	@ 0x63
 80018f2:	d80b      	bhi.n	800190c <StartTask02+0x28>
		{
			counter++;
 80018f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001928 <StartTask02+0x44>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	3301      	adds	r3, #1
 80018fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001928 <StartTask02+0x44>)
 80018fc:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_15,GPIO_PIN_SET);
 80018fe:	2201      	movs	r2, #1
 8001900:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001904:	4809      	ldr	r0, [pc, #36]	@ (800192c <StartTask02+0x48>)
 8001906:	f005 f8d9 	bl	8006abc <HAL_GPIO_WritePin>
 800190a:	e008      	b.n	800191e <StartTask02+0x3a>
		}
		else
		{
			counter = 0;
 800190c:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <StartTask02+0x44>)
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_15,GPIO_PIN_RESET);
 8001912:	2200      	movs	r2, #0
 8001914:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001918:	4804      	ldr	r0, [pc, #16]	@ (800192c <StartTask02+0x48>)
 800191a:	f005 f8cf 	bl	8006abc <HAL_GPIO_WritePin>
		}

		osDelay(20);
 800191e:	2014      	movs	r0, #20
 8001920:	f00c fe9e 	bl	800e660 <osDelay>
		if (counter < 100)
 8001924:	e7e2      	b.n	80018ec <StartTask02+0x8>
 8001926:	bf00      	nop
 8001928:	2400082c 	.word	0x2400082c
 800192c:	58021800 	.word	0x58021800

08001930 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001936:	463b      	mov	r3, r7
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001942:	f004 fa75 	bl	8005e30 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001946:	2301      	movs	r3, #1
 8001948:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800194a:	2300      	movs	r3, #0
 800194c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 800194e:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8001952:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8001954:	2312      	movs	r3, #18
 8001956:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001958:	2300      	movs	r3, #0
 800195a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800195c:	2300      	movs	r3, #0
 800195e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001960:	2303      	movs	r3, #3
 8001962:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001964:	2301      	movs	r3, #1
 8001966:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001968:	2300      	movs	r3, #0
 800196a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800196c:	2301      	movs	r3, #1
 800196e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001970:	2301      	movs	r3, #1
 8001972:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001974:	463b      	mov	r3, r7
 8001976:	4618      	mov	r0, r3
 8001978:	f004 fa92 	bl	8005ea0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800197c:	2301      	movs	r3, #1
 800197e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x70000000;
 8001980:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8001984:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8001986:	231c      	movs	r3, #28
 8001988:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800198a:	2300      	movs	r3, #0
 800198c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800198e:	2300      	movs	r3, #0
 8001990:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001992:	2300      	movs	r3, #0
 8001994:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001996:	463b      	mov	r3, r7
 8001998:	4618      	mov	r0, r3
 800199a:	f004 fa81 	bl	8005ea0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800199e:	2302      	movs	r3, #2
 80019a0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 80019a2:	2316      	movs	r3, #22
 80019a4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80019a6:	2303      	movs	r3, #3
 80019a8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80019aa:	2301      	movs	r3, #1
 80019ac:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80019ae:	2301      	movs	r3, #1
 80019b0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80019b2:	463b      	mov	r3, r7
 80019b4:	4618      	mov	r0, r3
 80019b6:	f004 fa73 	bl	8005ea0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 80019ba:	2303      	movs	r3, #3
 80019bc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 80019be:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 80019c2:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 80019c4:	231c      	movs	r3, #28
 80019c6:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80019c8:	2300      	movs	r3, #0
 80019ca:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80019cc:	2300      	movs	r3, #0
 80019ce:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80019d0:	2300      	movs	r3, #0
 80019d2:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80019d4:	463b      	mov	r3, r7
 80019d6:	4618      	mov	r0, r3
 80019d8:	f004 fa62 	bl	8005ea0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 80019dc:	2304      	movs	r3, #4
 80019de:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 80019e0:	2319      	movs	r3, #25
 80019e2:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80019e4:	2303      	movs	r3, #3
 80019e6:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80019e8:	2301      	movs	r3, #1
 80019ea:	73bb      	strb	r3, [r7, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80019ec:	463b      	mov	r3, r7
 80019ee:	4618      	mov	r0, r3
 80019f0:	f004 fa56 	bl	8005ea0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80019f4:	2004      	movs	r0, #4
 80019f6:	f004 fa33 	bl	8005e60 <HAL_MPU_Enable>

}
 80019fa:	bf00      	nop
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a04      	ldr	r2, [pc, #16]	@ (8001a24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d101      	bne.n	8001a1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a16:	f002 fd5d 	bl	80044d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40001000 	.word	0x40001000

08001a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a2c:	b672      	cpsid	i
}
 8001a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001a30:	bf00      	nop
 8001a32:	e7fd      	b.n	8001a30 <Error_Handler+0x8>

08001a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a6c <HAL_MspInit+0x38>)
 8001a3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a40:	4a0a      	ldr	r2, [pc, #40]	@ (8001a6c <HAL_MspInit+0x38>)
 8001a42:	f043 0302 	orr.w	r3, r3, #2
 8001a46:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001a4a:	4b08      	ldr	r3, [pc, #32]	@ (8001a6c <HAL_MspInit+0x38>)
 8001a4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	607b      	str	r3, [r7, #4]
 8001a56:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	210f      	movs	r1, #15
 8001a5c:	f06f 0001 	mvn.w	r0, #1
 8001a60:	f004 f9be 	bl	8005de0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a64:	bf00      	nop
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	58024400 	.word	0x58024400

08001a70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b0bc      	sub	sp, #240	@ 0xf0
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a88:	f107 0320 	add.w	r3, r7, #32
 8001a8c:	22b8      	movs	r2, #184	@ 0xb8
 8001a8e:	2100      	movs	r1, #0
 8001a90:	4618      	mov	r0, r3
 8001a92:	f028 fd99 	bl	802a5c8 <memset>
  if(hadc->Instance==ADC1)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a70      	ldr	r2, [pc, #448]	@ (8001c5c <HAL_ADC_MspInit+0x1ec>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d14b      	bne.n	8001b38 <HAL_ADC_MspInit+0xc8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001aa0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8001aac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ab0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ab4:	f107 0320 	add.w	r3, r7, #32
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f008 f917 	bl	8009cec <HAL_RCCEx_PeriphCLKConfig>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8001ac4:	f7ff ffb0 	bl	8001a28 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001ac8:	4b65      	ldr	r3, [pc, #404]	@ (8001c60 <HAL_ADC_MspInit+0x1f0>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	3301      	adds	r3, #1
 8001ace:	4a64      	ldr	r2, [pc, #400]	@ (8001c60 <HAL_ADC_MspInit+0x1f0>)
 8001ad0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001ad2:	4b63      	ldr	r3, [pc, #396]	@ (8001c60 <HAL_ADC_MspInit+0x1f0>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d10e      	bne.n	8001af8 <HAL_ADC_MspInit+0x88>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001ada:	4b62      	ldr	r3, [pc, #392]	@ (8001c64 <HAL_ADC_MspInit+0x1f4>)
 8001adc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001ae0:	4a60      	ldr	r2, [pc, #384]	@ (8001c64 <HAL_ADC_MspInit+0x1f4>)
 8001ae2:	f043 0320 	orr.w	r3, r3, #32
 8001ae6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001aea:	4b5e      	ldr	r3, [pc, #376]	@ (8001c64 <HAL_ADC_MspInit+0x1f4>)
 8001aec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001af0:	f003 0320 	and.w	r3, r3, #32
 8001af4:	61fb      	str	r3, [r7, #28]
 8001af6:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001af8:	4b5a      	ldr	r3, [pc, #360]	@ (8001c64 <HAL_ADC_MspInit+0x1f4>)
 8001afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001afe:	4a59      	ldr	r2, [pc, #356]	@ (8001c64 <HAL_ADC_MspInit+0x1f4>)
 8001b00:	f043 0320 	orr.w	r3, r3, #32
 8001b04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b08:	4b56      	ldr	r3, [pc, #344]	@ (8001c64 <HAL_ADC_MspInit+0x1f4>)
 8001b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b0e:	f003 0320 	and.w	r3, r3, #32
 8001b12:	61bb      	str	r3, [r7, #24]
 8001b14:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b16:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b2a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001b2e:	4619      	mov	r1, r3
 8001b30:	484d      	ldr	r0, [pc, #308]	@ (8001c68 <HAL_ADC_MspInit+0x1f8>)
 8001b32:	f004 fd19 	bl	8006568 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001b36:	e08d      	b.n	8001c54 <HAL_ADC_MspInit+0x1e4>
  else if(hadc->Instance==ADC2)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a4b      	ldr	r2, [pc, #300]	@ (8001c6c <HAL_ADC_MspInit+0x1fc>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d14b      	bne.n	8001bda <HAL_ADC_MspInit+0x16a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b42:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001b46:	f04f 0300 	mov.w	r3, #0
 8001b4a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8001b4e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b52:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b56:	f107 0320 	add.w	r3, r7, #32
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f008 f8c6 	bl	8009cec <HAL_RCCEx_PeriphCLKConfig>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_ADC_MspInit+0xfa>
      Error_Handler();
 8001b66:	f7ff ff5f 	bl	8001a28 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001b6a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c60 <HAL_ADC_MspInit+0x1f0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	4a3b      	ldr	r2, [pc, #236]	@ (8001c60 <HAL_ADC_MspInit+0x1f0>)
 8001b72:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001b74:	4b3a      	ldr	r3, [pc, #232]	@ (8001c60 <HAL_ADC_MspInit+0x1f0>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d10e      	bne.n	8001b9a <HAL_ADC_MspInit+0x12a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001b7c:	4b39      	ldr	r3, [pc, #228]	@ (8001c64 <HAL_ADC_MspInit+0x1f4>)
 8001b7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001b82:	4a38      	ldr	r2, [pc, #224]	@ (8001c64 <HAL_ADC_MspInit+0x1f4>)
 8001b84:	f043 0320 	orr.w	r3, r3, #32
 8001b88:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001b8c:	4b35      	ldr	r3, [pc, #212]	@ (8001c64 <HAL_ADC_MspInit+0x1f4>)
 8001b8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001b92:	f003 0320 	and.w	r3, r3, #32
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b9a:	4b32      	ldr	r3, [pc, #200]	@ (8001c64 <HAL_ADC_MspInit+0x1f4>)
 8001b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ba0:	4a30      	ldr	r2, [pc, #192]	@ (8001c64 <HAL_ADC_MspInit+0x1f4>)
 8001ba2:	f043 0320 	orr.w	r3, r3, #32
 8001ba6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001baa:	4b2e      	ldr	r3, [pc, #184]	@ (8001c64 <HAL_ADC_MspInit+0x1f4>)
 8001bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bb0:	f003 0320 	and.w	r3, r3, #32
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001bb8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bbc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bcc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4825      	ldr	r0, [pc, #148]	@ (8001c68 <HAL_ADC_MspInit+0x1f8>)
 8001bd4:	f004 fcc8 	bl	8006568 <HAL_GPIO_Init>
}
 8001bd8:	e03c      	b.n	8001c54 <HAL_ADC_MspInit+0x1e4>
  else if(hadc->Instance==ADC3)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a24      	ldr	r2, [pc, #144]	@ (8001c70 <HAL_ADC_MspInit+0x200>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d137      	bne.n	8001c54 <HAL_ADC_MspInit+0x1e4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001be4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001be8:	f04f 0300 	mov.w	r3, #0
 8001bec:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8001bf0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bf4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bf8:	f107 0320 	add.w	r3, r7, #32
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f008 f875 	bl	8009cec <HAL_RCCEx_PeriphCLKConfig>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <HAL_ADC_MspInit+0x19c>
      Error_Handler();
 8001c08:	f7ff ff0e 	bl	8001a28 <Error_Handler>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001c0c:	4b15      	ldr	r3, [pc, #84]	@ (8001c64 <HAL_ADC_MspInit+0x1f4>)
 8001c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c12:	4a14      	ldr	r2, [pc, #80]	@ (8001c64 <HAL_ADC_MspInit+0x1f4>)
 8001c14:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c1c:	4b11      	ldr	r3, [pc, #68]	@ (8001c64 <HAL_ADC_MspInit+0x1f4>)
 8001c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c22:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c64 <HAL_ADC_MspInit+0x1f4>)
 8001c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c30:	4a0c      	ldr	r2, [pc, #48]	@ (8001c64 <HAL_ADC_MspInit+0x1f4>)
 8001c32:	f043 0304 	orr.w	r3, r3, #4
 8001c36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c64 <HAL_ADC_MspInit+0x1f4>)
 8001c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	68bb      	ldr	r3, [r7, #8]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001c48:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8001c4c:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8001c50:	f002 fc84 	bl	800455c <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001c54:	bf00      	nop
 8001c56:	37f0      	adds	r7, #240	@ 0xf0
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40022000 	.word	0x40022000
 8001c60:	24000830 	.word	0x24000830
 8001c64:	58024400 	.word	0x58024400
 8001c68:	58021400 	.word	0x58021400
 8001c6c:	40022100 	.word	0x40022100
 8001c70:	58026000 	.word	0x58026000

08001c74 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a0b      	ldr	r2, [pc, #44]	@ (8001cb0 <HAL_CRC_MspInit+0x3c>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d10e      	bne.n	8001ca4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001c86:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb4 <HAL_CRC_MspInit+0x40>)
 8001c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c8c:	4a09      	ldr	r2, [pc, #36]	@ (8001cb4 <HAL_CRC_MspInit+0x40>)
 8001c8e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001c92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c96:	4b07      	ldr	r3, [pc, #28]	@ (8001cb4 <HAL_CRC_MspInit+0x40>)
 8001c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8001ca4:	bf00      	nop
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	58024c00 	.word	0x58024c00
 8001cb4:	58024400 	.word	0x58024400

08001cb8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08a      	sub	sp, #40	@ 0x28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc0:	f107 0314 	add.w	r3, r7, #20
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
 8001cce:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a1c      	ldr	r2, [pc, #112]	@ (8001d48 <HAL_DAC_MspInit+0x90>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d131      	bne.n	8001d3e <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001cda:	4b1c      	ldr	r3, [pc, #112]	@ (8001d4c <HAL_DAC_MspInit+0x94>)
 8001cdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ce0:	4a1a      	ldr	r2, [pc, #104]	@ (8001d4c <HAL_DAC_MspInit+0x94>)
 8001ce2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001ce6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001cea:	4b18      	ldr	r3, [pc, #96]	@ (8001d4c <HAL_DAC_MspInit+0x94>)
 8001cec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cf0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001cf4:	613b      	str	r3, [r7, #16]
 8001cf6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf8:	4b14      	ldr	r3, [pc, #80]	@ (8001d4c <HAL_DAC_MspInit+0x94>)
 8001cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cfe:	4a13      	ldr	r2, [pc, #76]	@ (8001d4c <HAL_DAC_MspInit+0x94>)
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d08:	4b10      	ldr	r3, [pc, #64]	@ (8001d4c <HAL_DAC_MspInit+0x94>)
 8001d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001d16:	2330      	movs	r3, #48	@ 0x30
 8001d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d22:	f107 0314 	add.w	r3, r7, #20
 8001d26:	4619      	mov	r1, r3
 8001d28:	4809      	ldr	r0, [pc, #36]	@ (8001d50 <HAL_DAC_MspInit+0x98>)
 8001d2a:	f004 fc1d 	bl	8006568 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	210f      	movs	r1, #15
 8001d32:	2036      	movs	r0, #54	@ 0x36
 8001d34:	f004 f854 	bl	8005de0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d38:	2036      	movs	r0, #54	@ 0x36
 8001d3a:	f004 f86b 	bl	8005e14 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001d3e:	bf00      	nop
 8001d40:	3728      	adds	r7, #40	@ 0x28
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40007400 	.word	0x40007400
 8001d4c:	58024400 	.word	0x58024400
 8001d50:	58020000 	.word	0x58020000

08001d54 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a0b      	ldr	r2, [pc, #44]	@ (8001d90 <HAL_DMA2D_MspInit+0x3c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d10e      	bne.n	8001d84 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001d66:	4b0b      	ldr	r3, [pc, #44]	@ (8001d94 <HAL_DMA2D_MspInit+0x40>)
 8001d68:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001d6c:	4a09      	ldr	r2, [pc, #36]	@ (8001d94 <HAL_DMA2D_MspInit+0x40>)
 8001d6e:	f043 0310 	orr.w	r3, r3, #16
 8001d72:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001d76:	4b07      	ldr	r3, [pc, #28]	@ (8001d94 <HAL_DMA2D_MspInit+0x40>)
 8001d78:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001d7c:	f003 0310 	and.w	r3, r3, #16
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001d84:	bf00      	nop
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	52001000 	.word	0x52001000
 8001d94:	58024400 	.word	0x58024400

08001d98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b0ba      	sub	sp, #232	@ 0xe8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001db0:	f107 0318 	add.w	r3, r7, #24
 8001db4:	22b8      	movs	r2, #184	@ 0xb8
 8001db6:	2100      	movs	r1, #0
 8001db8:	4618      	mov	r0, r3
 8001dba:	f028 fc05 	bl	802a5c8 <memset>
  if(hi2c->Instance==I2C1)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a4d      	ldr	r2, [pc, #308]	@ (8001ef8 <HAL_I2C_MspInit+0x160>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d146      	bne.n	8001e56 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001dc8:	f04f 0208 	mov.w	r2, #8
 8001dcc:	f04f 0300 	mov.w	r3, #0
 8001dd0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dda:	f107 0318 	add.w	r3, r7, #24
 8001dde:	4618      	mov	r0, r3
 8001de0:	f007 ff84 	bl	8009cec <HAL_RCCEx_PeriphCLKConfig>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001dea:	f7ff fe1d 	bl	8001a28 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dee:	4b43      	ldr	r3, [pc, #268]	@ (8001efc <HAL_I2C_MspInit+0x164>)
 8001df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001df4:	4a41      	ldr	r2, [pc, #260]	@ (8001efc <HAL_I2C_MspInit+0x164>)
 8001df6:	f043 0302 	orr.w	r3, r3, #2
 8001dfa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dfe:	4b3f      	ldr	r3, [pc, #252]	@ (8001efc <HAL_I2C_MspInit+0x164>)
 8001e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	617b      	str	r3, [r7, #20]
 8001e0a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e0c:	23c0      	movs	r3, #192	@ 0xc0
 8001e0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e12:	2312      	movs	r3, #18
 8001e14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e24:	2304      	movs	r3, #4
 8001e26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e2a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4833      	ldr	r0, [pc, #204]	@ (8001f00 <HAL_I2C_MspInit+0x168>)
 8001e32:	f004 fb99 	bl	8006568 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e36:	4b31      	ldr	r3, [pc, #196]	@ (8001efc <HAL_I2C_MspInit+0x164>)
 8001e38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e3c:	4a2f      	ldr	r2, [pc, #188]	@ (8001efc <HAL_I2C_MspInit+0x164>)
 8001e3e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e42:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e46:	4b2d      	ldr	r3, [pc, #180]	@ (8001efc <HAL_I2C_MspInit+0x164>)
 8001e48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e50:	613b      	str	r3, [r7, #16]
 8001e52:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001e54:	e04b      	b.n	8001eee <HAL_I2C_MspInit+0x156>
  else if(hi2c->Instance==I2C2)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a2a      	ldr	r2, [pc, #168]	@ (8001f04 <HAL_I2C_MspInit+0x16c>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d146      	bne.n	8001eee <HAL_I2C_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001e60:	f04f 0208 	mov.w	r2, #8
 8001e64:	f04f 0300 	mov.w	r3, #0
 8001e68:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e72:	f107 0318 	add.w	r3, r7, #24
 8001e76:	4618      	mov	r0, r3
 8001e78:	f007 ff38 	bl	8009cec <HAL_RCCEx_PeriphCLKConfig>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8001e82:	f7ff fdd1 	bl	8001a28 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e86:	4b1d      	ldr	r3, [pc, #116]	@ (8001efc <HAL_I2C_MspInit+0x164>)
 8001e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e8c:	4a1b      	ldr	r2, [pc, #108]	@ (8001efc <HAL_I2C_MspInit+0x164>)
 8001e8e:	f043 0302 	orr.w	r3, r3, #2
 8001e92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e96:	4b19      	ldr	r3, [pc, #100]	@ (8001efc <HAL_I2C_MspInit+0x164>)
 8001e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ea4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001ea8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eac:	2312      	movs	r3, #18
 8001eae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ebe:	2304      	movs	r3, #4
 8001ec0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ec8:	4619      	mov	r1, r3
 8001eca:	480d      	ldr	r0, [pc, #52]	@ (8001f00 <HAL_I2C_MspInit+0x168>)
 8001ecc:	f004 fb4c 	bl	8006568 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8001efc <HAL_I2C_MspInit+0x164>)
 8001ed2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ed6:	4a09      	ldr	r2, [pc, #36]	@ (8001efc <HAL_I2C_MspInit+0x164>)
 8001ed8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001edc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ee0:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <HAL_I2C_MspInit+0x164>)
 8001ee2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ee6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001eea:	60bb      	str	r3, [r7, #8]
 8001eec:	68bb      	ldr	r3, [r7, #8]
}
 8001eee:	bf00      	nop
 8001ef0:	37e8      	adds	r7, #232	@ 0xe8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40005400 	.word	0x40005400
 8001efc:	58024400 	.word	0x58024400
 8001f00:	58020400 	.word	0x58020400
 8001f04:	40005800 	.word	0x40005800

08001f08 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b0c0      	sub	sp, #256	@ 0x100
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f20:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001f24:	22b8      	movs	r2, #184	@ 0xb8
 8001f26:	2100      	movs	r1, #0
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f028 fb4d 	bl	802a5c8 <memset>
  if(hltdc->Instance==LTDC)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4ad9      	ldr	r2, [pc, #868]	@ (8002298 <HAL_LTDC_MspInit+0x390>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	f040 81d9 	bne.w	80022ec <HAL_LTDC_MspInit+0x3e4>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001f3a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001f3e:	f04f 0300 	mov.w	r3, #0
 8001f42:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 8001f46:	2319      	movs	r3, #25
 8001f48:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3N = 288;
 8001f4a:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001f4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001f50:	2302      	movs	r3, #2
 8001f52:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001f54:	2302      	movs	r3, #2
 8001f56:	667b      	str	r3, [r7, #100]	@ 0x64
    PeriphClkInitStruct.PLL3.PLL3R = 30;
 8001f58:	231e      	movs	r3, #30
 8001f5a:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001f60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f64:	673b      	str	r3, [r7, #112]	@ 0x70
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f6a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f007 febc 	bl	8009cec <HAL_RCCEx_PeriphCLKConfig>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <HAL_LTDC_MspInit+0x76>
    {
      Error_Handler();
 8001f7a:	f7ff fd55 	bl	8001a28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001f7e:	4bc7      	ldr	r3, [pc, #796]	@ (800229c <HAL_LTDC_MspInit+0x394>)
 8001f80:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001f84:	4ac5      	ldr	r2, [pc, #788]	@ (800229c <HAL_LTDC_MspInit+0x394>)
 8001f86:	f043 0308 	orr.w	r3, r3, #8
 8001f8a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8001f8e:	4bc3      	ldr	r3, [pc, #780]	@ (800229c <HAL_LTDC_MspInit+0x394>)
 8001f90:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001f94:	f003 0308 	and.w	r3, r3, #8
 8001f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f9c:	4bbf      	ldr	r3, [pc, #764]	@ (800229c <HAL_LTDC_MspInit+0x394>)
 8001f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fa2:	4abe      	ldr	r2, [pc, #760]	@ (800229c <HAL_LTDC_MspInit+0x394>)
 8001fa4:	f043 0310 	orr.w	r3, r3, #16
 8001fa8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fac:	4bbb      	ldr	r3, [pc, #748]	@ (800229c <HAL_LTDC_MspInit+0x394>)
 8001fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fb2:	f003 0310 	and.w	r3, r3, #16
 8001fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fba:	4bb8      	ldr	r3, [pc, #736]	@ (800229c <HAL_LTDC_MspInit+0x394>)
 8001fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fc0:	4ab6      	ldr	r2, [pc, #728]	@ (800229c <HAL_LTDC_MspInit+0x394>)
 8001fc2:	f043 0320 	orr.w	r3, r3, #32
 8001fc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fca:	4bb4      	ldr	r3, [pc, #720]	@ (800229c <HAL_LTDC_MspInit+0x394>)
 8001fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fd0:	f003 0320 	and.w	r3, r3, #32
 8001fd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd8:	4bb0      	ldr	r3, [pc, #704]	@ (800229c <HAL_LTDC_MspInit+0x394>)
 8001fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fde:	4aaf      	ldr	r2, [pc, #700]	@ (800229c <HAL_LTDC_MspInit+0x394>)
 8001fe0:	f043 0304 	orr.w	r3, r3, #4
 8001fe4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fe8:	4bac      	ldr	r3, [pc, #688]	@ (800229c <HAL_LTDC_MspInit+0x394>)
 8001fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fee:	f003 0304 	and.w	r3, r3, #4
 8001ff2:	623b      	str	r3, [r7, #32]
 8001ff4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff6:	4ba9      	ldr	r3, [pc, #676]	@ (800229c <HAL_LTDC_MspInit+0x394>)
 8001ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ffc:	4aa7      	ldr	r2, [pc, #668]	@ (800229c <HAL_LTDC_MspInit+0x394>)
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002006:	4ba5      	ldr	r3, [pc, #660]	@ (800229c <HAL_LTDC_MspInit+0x394>)
 8002008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	61fb      	str	r3, [r7, #28]
 8002012:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002014:	4ba1      	ldr	r3, [pc, #644]	@ (800229c <HAL_LTDC_MspInit+0x394>)
 8002016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800201a:	4aa0      	ldr	r2, [pc, #640]	@ (800229c <HAL_LTDC_MspInit+0x394>)
 800201c:	f043 0302 	orr.w	r3, r3, #2
 8002020:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002024:	4b9d      	ldr	r3, [pc, #628]	@ (800229c <HAL_LTDC_MspInit+0x394>)
 8002026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	61bb      	str	r3, [r7, #24]
 8002030:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002032:	4b9a      	ldr	r3, [pc, #616]	@ (800229c <HAL_LTDC_MspInit+0x394>)
 8002034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002038:	4a98      	ldr	r2, [pc, #608]	@ (800229c <HAL_LTDC_MspInit+0x394>)
 800203a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800203e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002042:	4b96      	ldr	r3, [pc, #600]	@ (800229c <HAL_LTDC_MspInit+0x394>)
 8002044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002048:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002050:	4b92      	ldr	r3, [pc, #584]	@ (800229c <HAL_LTDC_MspInit+0x394>)
 8002052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002056:	4a91      	ldr	r2, [pc, #580]	@ (800229c <HAL_LTDC_MspInit+0x394>)
 8002058:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800205c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002060:	4b8e      	ldr	r3, [pc, #568]	@ (800229c <HAL_LTDC_MspInit+0x394>)
 8002062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002066:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800206e:	4b8b      	ldr	r3, [pc, #556]	@ (800229c <HAL_LTDC_MspInit+0x394>)
 8002070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002074:	4a89      	ldr	r2, [pc, #548]	@ (800229c <HAL_LTDC_MspInit+0x394>)
 8002076:	f043 0308 	orr.w	r3, r3, #8
 800207a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800207e:	4b87      	ldr	r3, [pc, #540]	@ (800229c <HAL_LTDC_MspInit+0x394>)
 8002080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002084:	f003 0308 	and.w	r3, r3, #8
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800208c:	4b83      	ldr	r3, [pc, #524]	@ (800229c <HAL_LTDC_MspInit+0x394>)
 800208e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002092:	4a82      	ldr	r2, [pc, #520]	@ (800229c <HAL_LTDC_MspInit+0x394>)
 8002094:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002098:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800209c:	4b7f      	ldr	r3, [pc, #508]	@ (800229c <HAL_LTDC_MspInit+0x394>)
 800209e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020a6:	60bb      	str	r3, [r7, #8]
 80020a8:	68bb      	ldr	r3, [r7, #8]
    PA11     ------> LTDC_R4
    PD2     ------> LTDC_B7
    PG13     ------> LTDC_R0
    PB8     ------> LTDC_B6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_11
 80020aa:	f645 0370 	movw	r3, #22640	@ 0x5870
 80020ae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
                          |GPIO_PIN_12|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b2:	2302      	movs	r3, #2
 80020b4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020be:	2300      	movs	r3, #0
 80020c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020c4:	230e      	movs	r3, #14
 80020c6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020ca:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80020ce:	4619      	mov	r1, r3
 80020d0:	4873      	ldr	r0, [pc, #460]	@ (80022a0 <HAL_LTDC_MspInit+0x398>)
 80020d2:	f004 fa49 	bl	8006568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020da:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020de:	2302      	movs	r3, #2
 80020e0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ea:	2300      	movs	r3, #0
 80020ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020f0:	230e      	movs	r3, #14
 80020f2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020f6:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80020fa:	4619      	mov	r1, r3
 80020fc:	4869      	ldr	r0, [pc, #420]	@ (80022a4 <HAL_LTDC_MspInit+0x39c>)
 80020fe:	f004 fa33 	bl	8006568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002102:	2301      	movs	r3, #1
 8002104:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002108:	2302      	movs	r3, #2
 800210a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002114:	2300      	movs	r3, #0
 8002116:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 800211a:	230b      	movs	r3, #11
 800211c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002120:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002124:	4619      	mov	r1, r3
 8002126:	4860      	ldr	r0, [pc, #384]	@ (80022a8 <HAL_LTDC_MspInit+0x3a0>)
 8002128:	f004 fa1e 	bl	8006568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_9;
 800212c:	f240 2352 	movw	r3, #594	@ 0x252
 8002130:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002134:	2302      	movs	r3, #2
 8002136:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002140:	2300      	movs	r3, #0
 8002142:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002146:	230e      	movs	r3, #14
 8002148:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800214c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002150:	4619      	mov	r1, r3
 8002152:	4855      	ldr	r0, [pc, #340]	@ (80022a8 <HAL_LTDC_MspInit+0x3a0>)
 8002154:	f004 fa08 	bl	8006568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7
 8002158:	f640 638e 	movw	r3, #3726	@ 0xe8e
 800215c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002160:	2302      	movs	r3, #2
 8002162:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216c:	2300      	movs	r3, #0
 800216e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002172:	230e      	movs	r3, #14
 8002174:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002178:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800217c:	4619      	mov	r1, r3
 800217e:	484b      	ldr	r0, [pc, #300]	@ (80022ac <HAL_LTDC_MspInit+0x3a4>)
 8002180:	f004 f9f2 	bl	8006568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002184:	2303      	movs	r3, #3
 8002186:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218a:	2302      	movs	r3, #2
 800218c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002190:	2300      	movs	r3, #0
 8002192:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002196:	2300      	movs	r3, #0
 8002198:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800219c:	2309      	movs	r3, #9
 800219e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a2:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80021a6:	4619      	mov	r1, r3
 80021a8:	4841      	ldr	r0, [pc, #260]	@ (80022b0 <HAL_LTDC_MspInit+0x3a8>)
 80021aa:	f004 f9dd 	bl	8006568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8;
 80021ae:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 80021b2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b6:	2302      	movs	r3, #2
 80021b8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c2:	2300      	movs	r3, #0
 80021c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021c8:	230e      	movs	r3, #14
 80021ca:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ce:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80021d2:	4619      	mov	r1, r3
 80021d4:	4836      	ldr	r0, [pc, #216]	@ (80022b0 <HAL_LTDC_MspInit+0x3a8>)
 80021d6:	f004 f9c7 	bl	8006568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80021da:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80021de:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e2:	2302      	movs	r3, #2
 80021e4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ee:	2300      	movs	r3, #0
 80021f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021f4:	230e      	movs	r3, #14
 80021f6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80021fa:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80021fe:	4619      	mov	r1, r3
 8002200:	482c      	ldr	r0, [pc, #176]	@ (80022b4 <HAL_LTDC_MspInit+0x3ac>)
 8002202:	f004 f9b1 	bl	8006568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002206:	2302      	movs	r3, #2
 8002208:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220c:	2302      	movs	r3, #2
 800220e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	2300      	movs	r3, #0
 8002214:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002218:	2300      	movs	r3, #0
 800221a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800221e:	230e      	movs	r3, #14
 8002220:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002224:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002228:	4619      	mov	r1, r3
 800222a:	4823      	ldr	r0, [pc, #140]	@ (80022b8 <HAL_LTDC_MspInit+0x3b0>)
 800222c:	f004 f99c 	bl	8006568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002230:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002234:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002238:	2302      	movs	r3, #2
 800223a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002244:	2300      	movs	r3, #0
 8002246:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 800224a:	230d      	movs	r3, #13
 800224c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002250:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002254:	4619      	mov	r1, r3
 8002256:	4815      	ldr	r0, [pc, #84]	@ (80022ac <HAL_LTDC_MspInit+0x3a4>)
 8002258:	f004 f986 	bl	8006568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800225c:	2304      	movs	r3, #4
 800225e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002262:	2302      	movs	r3, #2
 8002264:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226e:	2300      	movs	r3, #0
 8002270:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002274:	2309      	movs	r3, #9
 8002276:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800227a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800227e:	4619      	mov	r1, r3
 8002280:	480e      	ldr	r0, [pc, #56]	@ (80022bc <HAL_LTDC_MspInit+0x3b4>)
 8002282:	f004 f971 	bl	8006568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002286:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800228a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228e:	2302      	movs	r3, #2
 8002290:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002294:	2300      	movs	r3, #0
 8002296:	e013      	b.n	80022c0 <HAL_LTDC_MspInit+0x3b8>
 8002298:	50001000 	.word	0x50001000
 800229c:	58024400 	.word	0x58024400
 80022a0:	58021000 	.word	0x58021000
 80022a4:	58021400 	.word	0x58021400
 80022a8:	58020800 	.word	0x58020800
 80022ac:	58020000 	.word	0x58020000
 80022b0:	58020400 	.word	0x58020400
 80022b4:	58022400 	.word	0x58022400
 80022b8:	58022800 	.word	0x58022800
 80022bc:	58020c00 	.word	0x58020c00
 80022c0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c4:	2300      	movs	r3, #0
 80022c6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022ca:	230e      	movs	r3, #14
 80022cc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022d0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80022d4:	4619      	mov	r1, r3
 80022d6:	4808      	ldr	r0, [pc, #32]	@ (80022f8 <HAL_LTDC_MspInit+0x3f0>)
 80022d8:	f004 f946 	bl	8006568 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80022dc:	2200      	movs	r2, #0
 80022de:	2105      	movs	r1, #5
 80022e0:	2058      	movs	r0, #88	@ 0x58
 80022e2:	f003 fd7d 	bl	8005de0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80022e6:	2058      	movs	r0, #88	@ 0x58
 80022e8:	f003 fd94 	bl	8005e14 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80022ec:	bf00      	nop
 80022ee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	58021800 	.word	0x58021800

080022fc <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b094      	sub	sp, #80	@ 0x50
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002304:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	60da      	str	r2, [r3, #12]
 8002312:	611a      	str	r2, [r3, #16]
  if(hospi->Instance==OCTOSPI1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a83      	ldr	r2, [pc, #524]	@ (8002528 <HAL_OSPI_MspInit+0x22c>)
 800231a:	4293      	cmp	r3, r2
 800231c:	f040 8116 	bne.w	800254c <HAL_OSPI_MspInit+0x250>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8002320:	4b82      	ldr	r3, [pc, #520]	@ (800252c <HAL_OSPI_MspInit+0x230>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	3301      	adds	r3, #1
 8002326:	4a81      	ldr	r2, [pc, #516]	@ (800252c <HAL_OSPI_MspInit+0x230>)
 8002328:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 800232a:	4b80      	ldr	r3, [pc, #512]	@ (800252c <HAL_OSPI_MspInit+0x230>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d10e      	bne.n	8002350 <HAL_OSPI_MspInit+0x54>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8002332:	4b7f      	ldr	r3, [pc, #508]	@ (8002530 <HAL_OSPI_MspInit+0x234>)
 8002334:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002338:	4a7d      	ldr	r2, [pc, #500]	@ (8002530 <HAL_OSPI_MspInit+0x234>)
 800233a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800233e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002342:	4b7b      	ldr	r3, [pc, #492]	@ (8002530 <HAL_OSPI_MspInit+0x234>)
 8002344:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002348:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800234c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800234e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8002350:	4b77      	ldr	r3, [pc, #476]	@ (8002530 <HAL_OSPI_MspInit+0x234>)
 8002352:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002356:	4a76      	ldr	r2, [pc, #472]	@ (8002530 <HAL_OSPI_MspInit+0x234>)
 8002358:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800235c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002360:	4b73      	ldr	r3, [pc, #460]	@ (8002530 <HAL_OSPI_MspInit+0x234>)
 8002362:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002366:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800236a:	637b      	str	r3, [r7, #52]	@ 0x34
 800236c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800236e:	4b70      	ldr	r3, [pc, #448]	@ (8002530 <HAL_OSPI_MspInit+0x234>)
 8002370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002374:	4a6e      	ldr	r2, [pc, #440]	@ (8002530 <HAL_OSPI_MspInit+0x234>)
 8002376:	f043 0310 	orr.w	r3, r3, #16
 800237a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800237e:	4b6c      	ldr	r3, [pc, #432]	@ (8002530 <HAL_OSPI_MspInit+0x234>)
 8002380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002384:	f003 0310 	and.w	r3, r3, #16
 8002388:	633b      	str	r3, [r7, #48]	@ 0x30
 800238a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800238c:	4b68      	ldr	r3, [pc, #416]	@ (8002530 <HAL_OSPI_MspInit+0x234>)
 800238e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002392:	4a67      	ldr	r2, [pc, #412]	@ (8002530 <HAL_OSPI_MspInit+0x234>)
 8002394:	f043 0320 	orr.w	r3, r3, #32
 8002398:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800239c:	4b64      	ldr	r3, [pc, #400]	@ (8002530 <HAL_OSPI_MspInit+0x234>)
 800239e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023a2:	f003 0320 	and.w	r3, r3, #32
 80023a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023aa:	4b61      	ldr	r3, [pc, #388]	@ (8002530 <HAL_OSPI_MspInit+0x234>)
 80023ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023b0:	4a5f      	ldr	r2, [pc, #380]	@ (8002530 <HAL_OSPI_MspInit+0x234>)
 80023b2:	f043 0304 	orr.w	r3, r3, #4
 80023b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023ba:	4b5d      	ldr	r3, [pc, #372]	@ (8002530 <HAL_OSPI_MspInit+0x234>)
 80023bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c8:	4b59      	ldr	r3, [pc, #356]	@ (8002530 <HAL_OSPI_MspInit+0x234>)
 80023ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023ce:	4a58      	ldr	r2, [pc, #352]	@ (8002530 <HAL_OSPI_MspInit+0x234>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023d8:	4b55      	ldr	r3, [pc, #340]	@ (8002530 <HAL_OSPI_MspInit+0x234>)
 80023da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80023e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e6:	4b52      	ldr	r3, [pc, #328]	@ (8002530 <HAL_OSPI_MspInit+0x234>)
 80023e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023ec:	4a50      	ldr	r2, [pc, #320]	@ (8002530 <HAL_OSPI_MspInit+0x234>)
 80023ee:	f043 0302 	orr.w	r3, r3, #2
 80023f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023f6:	4b4e      	ldr	r3, [pc, #312]	@ (8002530 <HAL_OSPI_MspInit+0x234>)
 80023f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	623b      	str	r3, [r7, #32]
 8002402:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002404:	4b4a      	ldr	r3, [pc, #296]	@ (8002530 <HAL_OSPI_MspInit+0x234>)
 8002406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800240a:	4a49      	ldr	r2, [pc, #292]	@ (8002530 <HAL_OSPI_MspInit+0x234>)
 800240c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002410:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002414:	4b46      	ldr	r3, [pc, #280]	@ (8002530 <HAL_OSPI_MspInit+0x234>)
 8002416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800241a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800241e:	61fb      	str	r3, [r7, #28]
 8002420:	69fb      	ldr	r3, [r7, #28]
    PE7     ------> OCTOSPIM_P1_IO4
    PE8     ------> OCTOSPIM_P1_IO5
    PE10     ------> OCTOSPIM_P1_IO7
    PG6     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002422:	2304      	movs	r3, #4
 8002424:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002426:	2302      	movs	r3, #2
 8002428:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242a:	2300      	movs	r3, #0
 800242c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800242e:	2303      	movs	r3, #3
 8002430:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8002432:	2309      	movs	r3, #9
 8002434:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002436:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800243a:	4619      	mov	r1, r3
 800243c:	483d      	ldr	r0, [pc, #244]	@ (8002534 <HAL_OSPI_MspInit+0x238>)
 800243e:	f004 f893 	bl	8006568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002442:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002446:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002448:	2302      	movs	r3, #2
 800244a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244c:	2300      	movs	r3, #0
 800244e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002450:	2303      	movs	r3, #3
 8002452:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8002454:	230a      	movs	r3, #10
 8002456:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002458:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800245c:	4619      	mov	r1, r3
 800245e:	4836      	ldr	r0, [pc, #216]	@ (8002538 <HAL_OSPI_MspInit+0x23c>)
 8002460:	f004 f882 	bl	8006568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002464:	2308      	movs	r3, #8
 8002466:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002468:	2302      	movs	r3, #2
 800246a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246c:	2300      	movs	r3, #0
 800246e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002470:	2303      	movs	r3, #3
 8002472:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF4_OCTOSPIM_P1;
 8002474:	2304      	movs	r3, #4
 8002476:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002478:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800247c:	4619      	mov	r1, r3
 800247e:	482f      	ldr	r0, [pc, #188]	@ (800253c <HAL_OSPI_MspInit+0x240>)
 8002480:	f004 f872 	bl	8006568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002484:	2340      	movs	r3, #64	@ 0x40
 8002486:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002488:	2302      	movs	r3, #2
 800248a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248c:	2300      	movs	r3, #0
 800248e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002490:	2303      	movs	r3, #3
 8002492:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF6_OCTOSPIM_P1;
 8002494:	2306      	movs	r3, #6
 8002496:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002498:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800249c:	4619      	mov	r1, r3
 800249e:	4828      	ldr	r0, [pc, #160]	@ (8002540 <HAL_OSPI_MspInit+0x244>)
 80024a0:	f004 f862 	bl	8006568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80024a4:	2320      	movs	r3, #32
 80024a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a8:	2302      	movs	r3, #2
 80024aa:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b0:	2303      	movs	r3, #3
 80024b2:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80024b4:	230a      	movs	r3, #10
 80024b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024b8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80024bc:	4619      	mov	r1, r3
 80024be:	481f      	ldr	r0, [pc, #124]	@ (800253c <HAL_OSPI_MspInit+0x240>)
 80024c0:	f004 f852 	bl	8006568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80024c4:	2304      	movs	r3, #4
 80024c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c8:	2302      	movs	r3, #2
 80024ca:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d0:	2303      	movs	r3, #3
 80024d2:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80024d4:	2309      	movs	r3, #9
 80024d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80024dc:	4619      	mov	r1, r3
 80024de:	4819      	ldr	r0, [pc, #100]	@ (8002544 <HAL_OSPI_MspInit+0x248>)
 80024e0:	f004 f842 	bl	8006568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 80024e4:	f44f 63b0 	mov.w	r3, #1408	@ 0x580
 80024e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ea:	2302      	movs	r3, #2
 80024ec:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f2:	2303      	movs	r3, #3
 80024f4:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80024f6:	230a      	movs	r3, #10
 80024f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024fa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80024fe:	4619      	mov	r1, r3
 8002500:	480c      	ldr	r0, [pc, #48]	@ (8002534 <HAL_OSPI_MspInit+0x238>)
 8002502:	f004 f831 	bl	8006568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002506:	2340      	movs	r3, #64	@ 0x40
 8002508:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250a:	2302      	movs	r3, #2
 800250c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250e:	2300      	movs	r3, #0
 8002510:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002512:	2303      	movs	r3, #3
 8002514:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8002516:	230a      	movs	r3, #10
 8002518:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800251a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800251e:	4619      	mov	r1, r3
 8002520:	4809      	ldr	r0, [pc, #36]	@ (8002548 <HAL_OSPI_MspInit+0x24c>)
 8002522:	f004 f821 	bl	8006568 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 8002526:	e08e      	b.n	8002646 <HAL_OSPI_MspInit+0x34a>
 8002528:	52005000 	.word	0x52005000
 800252c:	24000834 	.word	0x24000834
 8002530:	58024400 	.word	0x58024400
 8002534:	58021000 	.word	0x58021000
 8002538:	58021400 	.word	0x58021400
 800253c:	58020800 	.word	0x58020800
 8002540:	58020000 	.word	0x58020000
 8002544:	58020400 	.word	0x58020400
 8002548:	58021800 	.word	0x58021800
  else if(hospi->Instance==OCTOSPI2)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a3f      	ldr	r2, [pc, #252]	@ (8002650 <HAL_OSPI_MspInit+0x354>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d177      	bne.n	8002646 <HAL_OSPI_MspInit+0x34a>
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8002556:	4b3f      	ldr	r3, [pc, #252]	@ (8002654 <HAL_OSPI_MspInit+0x358>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	3301      	adds	r3, #1
 800255c:	4a3d      	ldr	r2, [pc, #244]	@ (8002654 <HAL_OSPI_MspInit+0x358>)
 800255e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 8002560:	4b3c      	ldr	r3, [pc, #240]	@ (8002654 <HAL_OSPI_MspInit+0x358>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d10e      	bne.n	8002586 <HAL_OSPI_MspInit+0x28a>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8002568:	4b3b      	ldr	r3, [pc, #236]	@ (8002658 <HAL_OSPI_MspInit+0x35c>)
 800256a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800256e:	4a3a      	ldr	r2, [pc, #232]	@ (8002658 <HAL_OSPI_MspInit+0x35c>)
 8002570:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002574:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002578:	4b37      	ldr	r3, [pc, #220]	@ (8002658 <HAL_OSPI_MspInit+0x35c>)
 800257a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800257e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002582:	61bb      	str	r3, [r7, #24]
 8002584:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8002586:	4b34      	ldr	r3, [pc, #208]	@ (8002658 <HAL_OSPI_MspInit+0x35c>)
 8002588:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800258c:	4a32      	ldr	r2, [pc, #200]	@ (8002658 <HAL_OSPI_MspInit+0x35c>)
 800258e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002592:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002596:	4b30      	ldr	r3, [pc, #192]	@ (8002658 <HAL_OSPI_MspInit+0x35c>)
 8002598:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800259c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80025a4:	4b2c      	ldr	r3, [pc, #176]	@ (8002658 <HAL_OSPI_MspInit+0x35c>)
 80025a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025aa:	4a2b      	ldr	r2, [pc, #172]	@ (8002658 <HAL_OSPI_MspInit+0x35c>)
 80025ac:	f043 0320 	orr.w	r3, r3, #32
 80025b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025b4:	4b28      	ldr	r3, [pc, #160]	@ (8002658 <HAL_OSPI_MspInit+0x35c>)
 80025b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025ba:	f003 0320 	and.w	r3, r3, #32
 80025be:	613b      	str	r3, [r7, #16]
 80025c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80025c2:	4b25      	ldr	r3, [pc, #148]	@ (8002658 <HAL_OSPI_MspInit+0x35c>)
 80025c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025c8:	4a23      	ldr	r2, [pc, #140]	@ (8002658 <HAL_OSPI_MspInit+0x35c>)
 80025ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025d2:	4b21      	ldr	r3, [pc, #132]	@ (8002658 <HAL_OSPI_MspInit+0x35c>)
 80025d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025dc:	60fb      	str	r3, [r7, #12]
 80025de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80025e0:	f241 031f 	movw	r3, #4127	@ 0x101f
 80025e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e6:	2302      	movs	r3, #2
 80025e8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ea:	2300      	movs	r3, #0
 80025ec:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ee:	2303      	movs	r3, #3
 80025f0:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 80025f2:	2309      	movs	r3, #9
 80025f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025f6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80025fa:	4619      	mov	r1, r3
 80025fc:	4817      	ldr	r0, [pc, #92]	@ (800265c <HAL_OSPI_MspInit+0x360>)
 80025fe:	f003 ffb3 	bl	8006568 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11;
 8002602:	f640 0303 	movw	r3, #2051	@ 0x803
 8002606:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002608:	2302      	movs	r3, #2
 800260a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260c:	2300      	movs	r3, #0
 800260e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002610:	2303      	movs	r3, #3
 8002612:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8002614:	2309      	movs	r3, #9
 8002616:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002618:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800261c:	4619      	mov	r1, r3
 800261e:	4810      	ldr	r0, [pc, #64]	@ (8002660 <HAL_OSPI_MspInit+0x364>)
 8002620:	f003 ffa2 	bl	8006568 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002624:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002628:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262a:	2302      	movs	r3, #2
 800262c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262e:	2300      	movs	r3, #0
 8002630:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002632:	2303      	movs	r3, #3
 8002634:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P2;
 8002636:	2303      	movs	r3, #3
 8002638:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800263a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800263e:	4619      	mov	r1, r3
 8002640:	4807      	ldr	r0, [pc, #28]	@ (8002660 <HAL_OSPI_MspInit+0x364>)
 8002642:	f003 ff91 	bl	8006568 <HAL_GPIO_Init>
}
 8002646:	bf00      	nop
 8002648:	3750      	adds	r7, #80	@ 0x50
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	5200a000 	.word	0x5200a000
 8002654:	24000834 	.word	0x24000834
 8002658:	58024400 	.word	0x58024400
 800265c:	58021400 	.word	0x58021400
 8002660:	58021800 	.word	0x58021800

08002664 <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a31      	ldr	r2, [pc, #196]	@ (8002738 <HAL_OSPI_MspDeInit+0xd4>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d133      	bne.n	80026de <HAL_OSPI_MspDeInit+0x7a>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    HAL_RCC_OCTOSPIM_CLK_ENABLED--;
 8002676:	4b31      	ldr	r3, [pc, #196]	@ (800273c <HAL_OSPI_MspDeInit+0xd8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	3b01      	subs	r3, #1
 800267c:	4a2f      	ldr	r2, [pc, #188]	@ (800273c <HAL_OSPI_MspDeInit+0xd8>)
 800267e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==0){
 8002680:	4b2e      	ldr	r3, [pc, #184]	@ (800273c <HAL_OSPI_MspDeInit+0xd8>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d107      	bne.n	8002698 <HAL_OSPI_MspDeInit+0x34>
      __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 8002688:	4b2d      	ldr	r3, [pc, #180]	@ (8002740 <HAL_OSPI_MspDeInit+0xdc>)
 800268a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800268e:	4a2c      	ldr	r2, [pc, #176]	@ (8002740 <HAL_OSPI_MspDeInit+0xdc>)
 8002690:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002694:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    }
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8002698:	4b29      	ldr	r3, [pc, #164]	@ (8002740 <HAL_OSPI_MspDeInit+0xdc>)
 800269a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800269e:	4a28      	ldr	r2, [pc, #160]	@ (8002740 <HAL_OSPI_MspDeInit+0xdc>)
 80026a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80026a4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    PE7     ------> OCTOSPIM_P1_IO4
    PE8     ------> OCTOSPIM_P1_IO5
    PE10     ------> OCTOSPIM_P1_IO7
    PG6     ------> OCTOSPIM_P1_NCS
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10);
 80026a8:	f240 5184 	movw	r1, #1412	@ 0x584
 80026ac:	4825      	ldr	r0, [pc, #148]	@ (8002744 <HAL_OSPI_MspDeInit+0xe0>)
 80026ae:	f004 f903 	bl	80068b8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_8|GPIO_PIN_9);
 80026b2:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80026b6:	4824      	ldr	r0, [pc, #144]	@ (8002748 <HAL_OSPI_MspDeInit+0xe4>)
 80026b8:	f004 f8fe 	bl	80068b8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_3|GPIO_PIN_5);
 80026bc:	2128      	movs	r1, #40	@ 0x28
 80026be:	4823      	ldr	r0, [pc, #140]	@ (800274c <HAL_OSPI_MspDeInit+0xe8>)
 80026c0:	f004 f8fa 	bl	80068b8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6);
 80026c4:	2140      	movs	r1, #64	@ 0x40
 80026c6:	4822      	ldr	r0, [pc, #136]	@ (8002750 <HAL_OSPI_MspDeInit+0xec>)
 80026c8:	f004 f8f6 	bl	80068b8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 80026cc:	2104      	movs	r1, #4
 80026ce:	4821      	ldr	r0, [pc, #132]	@ (8002754 <HAL_OSPI_MspDeInit+0xf0>)
 80026d0:	f004 f8f2 	bl	80068b8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_6);
 80026d4:	2140      	movs	r1, #64	@ 0x40
 80026d6:	4820      	ldr	r0, [pc, #128]	@ (8002758 <HAL_OSPI_MspDeInit+0xf4>)
 80026d8:	f004 f8ee 	bl	80068b8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN OCTOSPI2_MspDeInit 1 */

  /* USER CODE END OCTOSPI2_MspDeInit 1 */
  }

}
 80026dc:	e027      	b.n	800272e <HAL_OSPI_MspDeInit+0xca>
  else if(hospi->Instance==OCTOSPI2)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a1e      	ldr	r2, [pc, #120]	@ (800275c <HAL_OSPI_MspDeInit+0xf8>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d122      	bne.n	800272e <HAL_OSPI_MspDeInit+0xca>
    HAL_RCC_OCTOSPIM_CLK_ENABLED--;
 80026e8:	4b14      	ldr	r3, [pc, #80]	@ (800273c <HAL_OSPI_MspDeInit+0xd8>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	3b01      	subs	r3, #1
 80026ee:	4a13      	ldr	r2, [pc, #76]	@ (800273c <HAL_OSPI_MspDeInit+0xd8>)
 80026f0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==0){
 80026f2:	4b12      	ldr	r3, [pc, #72]	@ (800273c <HAL_OSPI_MspDeInit+0xd8>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d107      	bne.n	800270a <HAL_OSPI_MspDeInit+0xa6>
      __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 80026fa:	4b11      	ldr	r3, [pc, #68]	@ (8002740 <HAL_OSPI_MspDeInit+0xdc>)
 80026fc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002700:	4a0f      	ldr	r2, [pc, #60]	@ (8002740 <HAL_OSPI_MspDeInit+0xdc>)
 8002702:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002706:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    __HAL_RCC_OSPI2_CLK_DISABLE();
 800270a:	4b0d      	ldr	r3, [pc, #52]	@ (8002740 <HAL_OSPI_MspDeInit+0xdc>)
 800270c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002710:	4a0b      	ldr	r2, [pc, #44]	@ (8002740 <HAL_OSPI_MspDeInit+0xdc>)
 8002712:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8002716:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800271a:	f241 011f 	movw	r1, #4127	@ 0x101f
 800271e:	480a      	ldr	r0, [pc, #40]	@ (8002748 <HAL_OSPI_MspDeInit+0xe4>)
 8002720:	f004 f8ca 	bl	80068b8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8002724:	f641 4103 	movw	r1, #7171	@ 0x1c03
 8002728:	480b      	ldr	r0, [pc, #44]	@ (8002758 <HAL_OSPI_MspDeInit+0xf4>)
 800272a:	f004 f8c5 	bl	80068b8 <HAL_GPIO_DeInit>
}
 800272e:	bf00      	nop
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	52005000 	.word	0x52005000
 800273c:	24000834 	.word	0x24000834
 8002740:	58024400 	.word	0x58024400
 8002744:	58021000 	.word	0x58021000
 8002748:	58021400 	.word	0x58021400
 800274c:	58020800 	.word	0x58020800
 8002750:	58020000 	.word	0x58020000
 8002754:	58020400 	.word	0x58020400
 8002758:	58021800 	.word	0x58021800
 800275c:	5200a000 	.word	0x5200a000

08002760 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a0b      	ldr	r2, [pc, #44]	@ (800279c <HAL_TIM_Base_MspInit+0x3c>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d10e      	bne.n	8002790 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002772:	4b0b      	ldr	r3, [pc, #44]	@ (80027a0 <HAL_TIM_Base_MspInit+0x40>)
 8002774:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002778:	4a09      	ldr	r2, [pc, #36]	@ (80027a0 <HAL_TIM_Base_MspInit+0x40>)
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002782:	4b07      	ldr	r3, [pc, #28]	@ (80027a0 <HAL_TIM_Base_MspInit+0x40>)
 8002784:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	60fb      	str	r3, [r7, #12]
 800278e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002790:	bf00      	nop
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	40010000 	.word	0x40010000
 80027a0:	58024400 	.word	0x58024400

080027a4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08a      	sub	sp, #40	@ 0x28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ac:	f107 0314 	add.w	r3, r7, #20
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM23)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a1a      	ldr	r2, [pc, #104]	@ (800282c <HAL_TIM_Encoder_MspInit+0x88>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d12d      	bne.n	8002822 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM23_MspInit 0 */

  /* USER CODE END TIM23_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM23_CLK_ENABLE();
 80027c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002830 <HAL_TIM_Encoder_MspInit+0x8c>)
 80027c8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80027cc:	4a18      	ldr	r2, [pc, #96]	@ (8002830 <HAL_TIM_Encoder_MspInit+0x8c>)
 80027ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027d2:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80027d6:	4b16      	ldr	r3, [pc, #88]	@ (8002830 <HAL_TIM_Encoder_MspInit+0x8c>)
 80027d8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80027dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027e0:	613b      	str	r3, [r7, #16]
 80027e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80027e4:	4b12      	ldr	r3, [pc, #72]	@ (8002830 <HAL_TIM_Encoder_MspInit+0x8c>)
 80027e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027ea:	4a11      	ldr	r2, [pc, #68]	@ (8002830 <HAL_TIM_Encoder_MspInit+0x8c>)
 80027ec:	f043 0320 	orr.w	r3, r3, #32
 80027f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002830 <HAL_TIM_Encoder_MspInit+0x8c>)
 80027f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027fa:	f003 0320 	and.w	r3, r3, #32
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]
    /**TIM23 GPIO Configuration
    PF6     ------> TIM23_CH1
    PF7     ------> TIM23_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002802:	23c0      	movs	r3, #192	@ 0xc0
 8002804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002806:	2302      	movs	r3, #2
 8002808:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280a:	2300      	movs	r3, #0
 800280c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280e:	2300      	movs	r3, #0
 8002810:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8002812:	230d      	movs	r3, #13
 8002814:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002816:	f107 0314 	add.w	r3, r7, #20
 800281a:	4619      	mov	r1, r3
 800281c:	4805      	ldr	r0, [pc, #20]	@ (8002834 <HAL_TIM_Encoder_MspInit+0x90>)
 800281e:	f003 fea3 	bl	8006568 <HAL_GPIO_Init>

  /* USER CODE END TIM23_MspInit 1 */

  }

}
 8002822:	bf00      	nop
 8002824:	3728      	adds	r7, #40	@ 0x28
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	4000e000 	.word	0x4000e000
 8002830:	58024400 	.word	0x58024400
 8002834:	58021400 	.word	0x58021400

08002838 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b0ba      	sub	sp, #232	@ 0xe8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002840:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	605a      	str	r2, [r3, #4]
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	60da      	str	r2, [r3, #12]
 800284e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002850:	f107 0318 	add.w	r3, r7, #24
 8002854:	22b8      	movs	r2, #184	@ 0xb8
 8002856:	2100      	movs	r1, #0
 8002858:	4618      	mov	r0, r3
 800285a:	f027 feb5 	bl	802a5c8 <memset>
  if(huart->Instance==UART4)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a39      	ldr	r2, [pc, #228]	@ (8002948 <HAL_UART_MspInit+0x110>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d16a      	bne.n	800293e <HAL_UART_MspInit+0x106>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002868:	f04f 0202 	mov.w	r2, #2
 800286c:	f04f 0300 	mov.w	r3, #0
 8002870:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002874:	2300      	movs	r3, #0
 8002876:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800287a:	f107 0318 	add.w	r3, r7, #24
 800287e:	4618      	mov	r0, r3
 8002880:	f007 fa34 	bl	8009cec <HAL_RCCEx_PeriphCLKConfig>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800288a:	f7ff f8cd 	bl	8001a28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800288e:	4b2f      	ldr	r3, [pc, #188]	@ (800294c <HAL_UART_MspInit+0x114>)
 8002890:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002894:	4a2d      	ldr	r2, [pc, #180]	@ (800294c <HAL_UART_MspInit+0x114>)
 8002896:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800289a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800289e:	4b2b      	ldr	r3, [pc, #172]	@ (800294c <HAL_UART_MspInit+0x114>)
 80028a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028a8:	617b      	str	r3, [r7, #20]
 80028aa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ac:	4b27      	ldr	r3, [pc, #156]	@ (800294c <HAL_UART_MspInit+0x114>)
 80028ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028b2:	4a26      	ldr	r2, [pc, #152]	@ (800294c <HAL_UART_MspInit+0x114>)
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028bc:	4b23      	ldr	r3, [pc, #140]	@ (800294c <HAL_UART_MspInit+0x114>)
 80028be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	613b      	str	r3, [r7, #16]
 80028c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ca:	4b20      	ldr	r3, [pc, #128]	@ (800294c <HAL_UART_MspInit+0x114>)
 80028cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028d0:	4a1e      	ldr	r2, [pc, #120]	@ (800294c <HAL_UART_MspInit+0x114>)
 80028d2:	f043 0304 	orr.w	r3, r3, #4
 80028d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028da:	4b1c      	ldr	r3, [pc, #112]	@ (800294c <HAL_UART_MspInit+0x114>)
 80028dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80028e8:	2301      	movs	r3, #1
 80028ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ee:	2302      	movs	r3, #2
 80028f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fa:	2300      	movs	r3, #0
 80028fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002900:	2308      	movs	r3, #8
 8002902:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002906:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800290a:	4619      	mov	r1, r3
 800290c:	4810      	ldr	r0, [pc, #64]	@ (8002950 <HAL_UART_MspInit+0x118>)
 800290e:	f003 fe2b 	bl	8006568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002912:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002916:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291a:	2302      	movs	r3, #2
 800291c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002920:	2300      	movs	r3, #0
 8002922:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002926:	2300      	movs	r3, #0
 8002928:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800292c:	2308      	movs	r3, #8
 800292e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002932:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002936:	4619      	mov	r1, r3
 8002938:	4806      	ldr	r0, [pc, #24]	@ (8002954 <HAL_UART_MspInit+0x11c>)
 800293a:	f003 fe15 	bl	8006568 <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 800293e:	bf00      	nop
 8002940:	37e8      	adds	r7, #232	@ 0xe8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40004c00 	.word	0x40004c00
 800294c:	58024400 	.word	0x58024400
 8002950:	58020000 	.word	0x58020000
 8002954:	58020800 	.word	0x58020800

08002958 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b090      	sub	sp, #64	@ 0x40
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b0f      	cmp	r3, #15
 8002964:	d827      	bhi.n	80029b6 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002966:	2200      	movs	r2, #0
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	2036      	movs	r0, #54	@ 0x36
 800296c:	f003 fa38 	bl	8005de0 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002970:	2036      	movs	r0, #54	@ 0x36
 8002972:	f003 fa4f 	bl	8005e14 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8002976:	4a29      	ldr	r2, [pc, #164]	@ (8002a1c <HAL_InitTick+0xc4>)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800297c:	4b28      	ldr	r3, [pc, #160]	@ (8002a20 <HAL_InitTick+0xc8>)
 800297e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002982:	4a27      	ldr	r2, [pc, #156]	@ (8002a20 <HAL_InitTick+0xc8>)
 8002984:	f043 0310 	orr.w	r3, r3, #16
 8002988:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800298c:	4b24      	ldr	r3, [pc, #144]	@ (8002a20 <HAL_InitTick+0xc8>)
 800298e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002992:	f003 0310 	and.w	r3, r3, #16
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800299a:	f107 0210 	add.w	r2, r7, #16
 800299e:	f107 0314 	add.w	r3, r7, #20
 80029a2:	4611      	mov	r1, r2
 80029a4:	4618      	mov	r0, r3
 80029a6:	f007 f95f 	bl	8009c68 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80029aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80029ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d106      	bne.n	80029c2 <HAL_InitTick+0x6a>
 80029b4:	e001      	b.n	80029ba <HAL_InitTick+0x62>
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e02b      	b.n	8002a12 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80029ba:	f007 f929 	bl	8009c10 <HAL_RCC_GetPCLK1Freq>
 80029be:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80029c0:	e004      	b.n	80029cc <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80029c2:	f007 f925 	bl	8009c10 <HAL_RCC_GetPCLK1Freq>
 80029c6:	4603      	mov	r3, r0
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80029cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029ce:	4a15      	ldr	r2, [pc, #84]	@ (8002a24 <HAL_InitTick+0xcc>)
 80029d0:	fba2 2303 	umull	r2, r3, r2, r3
 80029d4:	0c9b      	lsrs	r3, r3, #18
 80029d6:	3b01      	subs	r3, #1
 80029d8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80029da:	4b13      	ldr	r3, [pc, #76]	@ (8002a28 <HAL_InitTick+0xd0>)
 80029dc:	4a13      	ldr	r2, [pc, #76]	@ (8002a2c <HAL_InitTick+0xd4>)
 80029de:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80029e0:	4b11      	ldr	r3, [pc, #68]	@ (8002a28 <HAL_InitTick+0xd0>)
 80029e2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80029e6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80029e8:	4a0f      	ldr	r2, [pc, #60]	@ (8002a28 <HAL_InitTick+0xd0>)
 80029ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029ec:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80029ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002a28 <HAL_InitTick+0xd0>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002a28 <HAL_InitTick+0xd0>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80029fa:	480b      	ldr	r0, [pc, #44]	@ (8002a28 <HAL_InitTick+0xd0>)
 80029fc:	f009 fd5c 	bl	800c4b8 <HAL_TIM_Base_Init>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d104      	bne.n	8002a10 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002a06:	4808      	ldr	r0, [pc, #32]	@ (8002a28 <HAL_InitTick+0xd0>)
 8002a08:	f009 fdae 	bl	800c568 <HAL_TIM_Base_Start_IT>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	e000      	b.n	8002a12 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3740      	adds	r7, #64	@ 0x40
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	2400000c 	.word	0x2400000c
 8002a20:	58024400 	.word	0x58024400
 8002a24:	431bde83 	.word	0x431bde83
 8002a28:	24000838 	.word	0x24000838
 8002a2c:	40001000 	.word	0x40001000

08002a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a34:	bf00      	nop
 8002a36:	e7fd      	b.n	8002a34 <NMI_Handler+0x4>

08002a38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a3c:	bf00      	nop
 8002a3e:	e7fd      	b.n	8002a3c <HardFault_Handler+0x4>

08002a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a44:	bf00      	nop
 8002a46:	e7fd      	b.n	8002a44 <MemManage_Handler+0x4>

08002a48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a4c:	bf00      	nop
 8002a4e:	e7fd      	b.n	8002a4c <BusFault_Handler+0x4>

08002a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a54:	bf00      	nop
 8002a56:	e7fd      	b.n	8002a54 <UsageFault_Handler+0x4>

08002a58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a5c:	bf00      	nop
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
	...

08002a68 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8002a6c:	4b06      	ldr	r3, [pc, #24]	@ (8002a88 <TIM6_DAC_IRQHandler+0x20>)
 8002a6e:	791b      	ldrb	r3, [r3, #4]
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d002      	beq.n	8002a7c <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8002a76:	4804      	ldr	r0, [pc, #16]	@ (8002a88 <TIM6_DAC_IRQHandler+0x20>)
 8002a78:	f003 fb66 	bl	8006148 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8002a7c:	4803      	ldr	r0, [pc, #12]	@ (8002a8c <TIM6_DAC_IRQHandler+0x24>)
 8002a7e:	f009 fe9f 	bl	800c7c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002a82:	bf00      	nop
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	24000470 	.word	0x24000470
 8002a8c:	24000838 	.word	0x24000838

08002a90 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002a94:	4802      	ldr	r0, [pc, #8]	@ (8002aa0 <LTDC_IRQHandler+0x10>)
 8002a96:	f004 fa2f 	bl	8006ef8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002a9a:	bf00      	nop
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	24000594 	.word	0x24000594

08002aa4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  return 1;
 8002aa8:	2301      	movs	r3, #1
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <_kill>:

int _kill(int pid, int sig)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002abe:	f027 fe7b 	bl	802a7b8 <__errno>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2216      	movs	r2, #22
 8002ac6:	601a      	str	r2, [r3, #0]
  return -1;
 8002ac8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3708      	adds	r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <_exit>:

void _exit (int status)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002adc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f7ff ffe7 	bl	8002ab4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ae6:	bf00      	nop
 8002ae8:	e7fd      	b.n	8002ae6 <_exit+0x12>

08002aea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b086      	sub	sp, #24
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	60f8      	str	r0, [r7, #12]
 8002af2:	60b9      	str	r1, [r7, #8]
 8002af4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]
 8002afa:	e00a      	b.n	8002b12 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002afc:	f3af 8000 	nop.w
 8002b00:	4601      	mov	r1, r0
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	1c5a      	adds	r2, r3, #1
 8002b06:	60ba      	str	r2, [r7, #8]
 8002b08:	b2ca      	uxtb	r2, r1
 8002b0a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	617b      	str	r3, [r7, #20]
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	dbf0      	blt.n	8002afc <_read+0x12>
  }

  return len;
 8002b1a:	687b      	ldr	r3, [r7, #4]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3718      	adds	r7, #24
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b30:	2300      	movs	r3, #0
 8002b32:	617b      	str	r3, [r7, #20]
 8002b34:	e009      	b.n	8002b4a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	1c5a      	adds	r2, r3, #1
 8002b3a:	60ba      	str	r2, [r7, #8]
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	3301      	adds	r3, #1
 8002b48:	617b      	str	r3, [r7, #20]
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	dbf1      	blt.n	8002b36 <_write+0x12>
  }
  return len;
 8002b52:	687b      	ldr	r3, [r7, #4]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3718      	adds	r7, #24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <_close>:

int _close(int file)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b84:	605a      	str	r2, [r3, #4]
  return 0;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <_isatty>:

int _isatty(int file)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b9c:	2301      	movs	r3, #1
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b085      	sub	sp, #20
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	60f8      	str	r0, [r7, #12]
 8002bb2:	60b9      	str	r1, [r7, #8]
 8002bb4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bcc:	4a14      	ldr	r2, [pc, #80]	@ (8002c20 <_sbrk+0x5c>)
 8002bce:	4b15      	ldr	r3, [pc, #84]	@ (8002c24 <_sbrk+0x60>)
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bd8:	4b13      	ldr	r3, [pc, #76]	@ (8002c28 <_sbrk+0x64>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d102      	bne.n	8002be6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002be0:	4b11      	ldr	r3, [pc, #68]	@ (8002c28 <_sbrk+0x64>)
 8002be2:	4a12      	ldr	r2, [pc, #72]	@ (8002c2c <_sbrk+0x68>)
 8002be4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002be6:	4b10      	ldr	r3, [pc, #64]	@ (8002c28 <_sbrk+0x64>)
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4413      	add	r3, r2
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d207      	bcs.n	8002c04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bf4:	f027 fde0 	bl	802a7b8 <__errno>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	220c      	movs	r2, #12
 8002bfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8002c02:	e009      	b.n	8002c18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c04:	4b08      	ldr	r3, [pc, #32]	@ (8002c28 <_sbrk+0x64>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c0a:	4b07      	ldr	r3, [pc, #28]	@ (8002c28 <_sbrk+0x64>)
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4413      	add	r3, r2
 8002c12:	4a05      	ldr	r2, [pc, #20]	@ (8002c28 <_sbrk+0x64>)
 8002c14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c16:	68fb      	ldr	r3, [r7, #12]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	24050000 	.word	0x24050000
 8002c24:	00000400 	.word	0x00000400
 8002c28:	24000884 	.word	0x24000884
 8002c2c:	24014878 	.word	0x24014878

08002c30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002c34:	4b32      	ldr	r3, [pc, #200]	@ (8002d00 <SystemInit+0xd0>)
 8002c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c3a:	4a31      	ldr	r2, [pc, #196]	@ (8002d00 <SystemInit+0xd0>)
 8002c3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002c44:	4b2f      	ldr	r3, [pc, #188]	@ (8002d04 <SystemInit+0xd4>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 030f 	and.w	r3, r3, #15
 8002c4c:	2b06      	cmp	r3, #6
 8002c4e:	d807      	bhi.n	8002c60 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002c50:	4b2c      	ldr	r3, [pc, #176]	@ (8002d04 <SystemInit+0xd4>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f023 030f 	bic.w	r3, r3, #15
 8002c58:	4a2a      	ldr	r2, [pc, #168]	@ (8002d04 <SystemInit+0xd4>)
 8002c5a:	f043 0307 	orr.w	r3, r3, #7
 8002c5e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002c60:	4b29      	ldr	r3, [pc, #164]	@ (8002d08 <SystemInit+0xd8>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a28      	ldr	r2, [pc, #160]	@ (8002d08 <SystemInit+0xd8>)
 8002c66:	f043 0301 	orr.w	r3, r3, #1
 8002c6a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002c6c:	4b26      	ldr	r3, [pc, #152]	@ (8002d08 <SystemInit+0xd8>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002c72:	4b25      	ldr	r3, [pc, #148]	@ (8002d08 <SystemInit+0xd8>)
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	4924      	ldr	r1, [pc, #144]	@ (8002d08 <SystemInit+0xd8>)
 8002c78:	4b24      	ldr	r3, [pc, #144]	@ (8002d0c <SystemInit+0xdc>)
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002c7e:	4b21      	ldr	r3, [pc, #132]	@ (8002d04 <SystemInit+0xd4>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d007      	beq.n	8002c9a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002d04 <SystemInit+0xd4>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f023 030f 	bic.w	r3, r3, #15
 8002c92:	4a1c      	ldr	r2, [pc, #112]	@ (8002d04 <SystemInit+0xd4>)
 8002c94:	f043 0307 	orr.w	r3, r3, #7
 8002c98:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002c9a:	4b1b      	ldr	r3, [pc, #108]	@ (8002d08 <SystemInit+0xd8>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002ca0:	4b19      	ldr	r3, [pc, #100]	@ (8002d08 <SystemInit+0xd8>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002ca6:	4b18      	ldr	r3, [pc, #96]	@ (8002d08 <SystemInit+0xd8>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002cac:	4b16      	ldr	r3, [pc, #88]	@ (8002d08 <SystemInit+0xd8>)
 8002cae:	4a18      	ldr	r2, [pc, #96]	@ (8002d10 <SystemInit+0xe0>)
 8002cb0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002cb2:	4b15      	ldr	r3, [pc, #84]	@ (8002d08 <SystemInit+0xd8>)
 8002cb4:	4a17      	ldr	r2, [pc, #92]	@ (8002d14 <SystemInit+0xe4>)
 8002cb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002cb8:	4b13      	ldr	r3, [pc, #76]	@ (8002d08 <SystemInit+0xd8>)
 8002cba:	4a17      	ldr	r2, [pc, #92]	@ (8002d18 <SystemInit+0xe8>)
 8002cbc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002cbe:	4b12      	ldr	r3, [pc, #72]	@ (8002d08 <SystemInit+0xd8>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002cc4:	4b10      	ldr	r3, [pc, #64]	@ (8002d08 <SystemInit+0xd8>)
 8002cc6:	4a14      	ldr	r2, [pc, #80]	@ (8002d18 <SystemInit+0xe8>)
 8002cc8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002cca:	4b0f      	ldr	r3, [pc, #60]	@ (8002d08 <SystemInit+0xd8>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002cd0:	4b0d      	ldr	r3, [pc, #52]	@ (8002d08 <SystemInit+0xd8>)
 8002cd2:	4a11      	ldr	r2, [pc, #68]	@ (8002d18 <SystemInit+0xe8>)
 8002cd4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8002d08 <SystemInit+0xd8>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8002d08 <SystemInit+0xd8>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a09      	ldr	r2, [pc, #36]	@ (8002d08 <SystemInit+0xd8>)
 8002ce2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ce6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002ce8:	4b07      	ldr	r3, [pc, #28]	@ (8002d08 <SystemInit+0xd8>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002cee:	4b0b      	ldr	r3, [pc, #44]	@ (8002d1c <SystemInit+0xec>)
 8002cf0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002cf4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002cf6:	bf00      	nop
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	e000ed00 	.word	0xe000ed00
 8002d04:	52002000 	.word	0x52002000
 8002d08:	58024400 	.word	0x58024400
 8002d0c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002d10:	02020200 	.word	0x02020200
 8002d14:	01ff0000 	.word	0x01ff0000
 8002d18:	01010280 	.word	0x01010280
 8002d1c:	52004000 	.word	0x52004000

08002d20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002d20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d58 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d24:	f7ff ff84 	bl	8002c30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d28:	480c      	ldr	r0, [pc, #48]	@ (8002d5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d2a:	490d      	ldr	r1, [pc, #52]	@ (8002d60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8002d64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d30:	e002      	b.n	8002d38 <LoopCopyDataInit>

08002d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d36:	3304      	adds	r3, #4

08002d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d3c:	d3f9      	bcc.n	8002d32 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d40:	4c0a      	ldr	r4, [pc, #40]	@ (8002d6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d44:	e001      	b.n	8002d4a <LoopFillZerobss>

08002d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d48:	3204      	adds	r2, #4

08002d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d4c:	d3fb      	bcc.n	8002d46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d4e:	f027 fd39 	bl	802a7c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d52:	f7fd fe61 	bl	8000a18 <main>
  bx  lr
 8002d56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d58:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002d5c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002d60:	240000e0 	.word	0x240000e0
  ldr r2, =_sidata
 8002d64:	0802d608 	.word	0x0802d608
  ldr r2, =_sbss
 8002d68:	240002e0 	.word	0x240002e0
  ldr r4, =_ebss
 8002d6c:	24014878 	.word	0x24014878

08002d70 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d70:	e7fe      	b.n	8002d70 <ADC3_IRQHandler>

08002d72 <MX25LM51245G_GetFlashInfo>:
  * @brief  Get Flash information
  * @param  pInfo pointer to information structure
  * @retval error status
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002d80:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002d88:	605a      	str	r2, [r3, #4]
  pInfo->EraseSectorsNumber     = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SECTOR_64K);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d90:	609a      	str	r2, [r3, #8]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002d98:	60da      	str	r2, [r3, #12]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002da0:	611a      	str	r2, [r3, #16]
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002da8:	615a      	str	r2, [r3, #20]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002db0:	619a      	str	r2, [r3, #24]
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002db8:	61da      	str	r2, [r3, #28]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002dc0:	621a      	str	r2, [r3, #32]

  return MX25LM51245G_OK;
 8002dc2:	2300      	movs	r3, #0
};
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <MX25LM51245G_AutoPollingMemReady>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b09c      	sub	sp, #112	@ 0x70
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	70fb      	strb	r3, [r7, #3]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef  s_command = {0};
 8002de0:	f107 0320 	add.w	r3, r7, #32
 8002de4:	2250      	movs	r2, #80	@ 0x50
 8002de6:	2100      	movs	r1, #0
 8002de8:	4618      	mov	r0, r3
 8002dea:	f027 fbed 	bl	802a5c8 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8002dee:	f107 030c 	add.w	r3, r7, #12
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	605a      	str	r2, [r3, #4]
 8002df8:	609a      	str	r2, [r3, #8]
 8002dfa:	60da      	str	r2, [r3, #12]
 8002dfc:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8002dfe:	78fb      	ldrb	r3, [r7, #3]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d105      	bne.n	8002e10 <MX25LM51245G_AutoPollingMemReady+0x40>
 8002e04:	78bb      	ldrb	r3, [r7, #2]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d102      	bne.n	8002e10 <MX25LM51245G_AutoPollingMemReady+0x40>
  {
    return MX25LM51245G_ERROR;
 8002e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e0e:	e088      	b.n	8002f22 <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8002e10:	2300      	movs	r3, #0
 8002e12:	623b      	str	r3, [r7, #32]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8002e14:	2300      	movs	r3, #0
 8002e16:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8002e18:	78fb      	ldrb	r3, [r7, #3]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <MX25LM51245G_AutoPollingMemReady+0x52>
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e000      	b.n	8002e24 <MX25LM51245G_AutoPollingMemReady+0x54>
 8002e22:	2304      	movs	r3, #4
 8002e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8002e26:	78bb      	ldrb	r3, [r7, #2]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d101      	bne.n	8002e30 <MX25LM51245G_AutoPollingMemReady+0x60>
 8002e2c:	2308      	movs	r3, #8
 8002e2e:	e000      	b.n	8002e32 <MX25LM51245G_AutoPollingMemReady+0x62>
 8002e30:	2300      	movs	r3, #0
 8002e32:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8002e34:	78fb      	ldrb	r3, [r7, #3]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <MX25LM51245G_AutoPollingMemReady+0x6e>
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	e000      	b.n	8002e40 <MX25LM51245G_AutoPollingMemReady+0x70>
 8002e3e:	2310      	movs	r3, #16
 8002e40:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8002e42:	78fb      	ldrb	r3, [r7, #3]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d101      	bne.n	8002e4c <MX25LM51245G_AutoPollingMemReady+0x7c>
 8002e48:	2305      	movs	r3, #5
 8002e4a:	e001      	b.n	8002e50 <MX25LM51245G_AutoPollingMemReady+0x80>
 8002e4c:	f240 53fa 	movw	r3, #1530	@ 0x5fa
 8002e50:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8002e52:	78fb      	ldrb	r3, [r7, #3]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <MX25LM51245G_AutoPollingMemReady+0x8c>
 8002e58:	2300      	movs	r3, #0
 8002e5a:	e001      	b.n	8002e60 <MX25LM51245G_AutoPollingMemReady+0x90>
 8002e5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8002e62:	78bb      	ldrb	r3, [r7, #2]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d102      	bne.n	8002e6e <MX25LM51245G_AutoPollingMemReady+0x9e>
 8002e68:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002e6c:	e000      	b.n	8002e70 <MX25LM51245G_AutoPollingMemReady+0xa0>
 8002e6e:	2300      	movs	r3, #0
 8002e70:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8002e72:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002e76:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.Address            = 0U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8002e80:	78fb      	ldrb	r3, [r7, #3]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d102      	bne.n	8002e8c <MX25LM51245G_AutoPollingMemReady+0xbc>
 8002e86:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e8a:	e001      	b.n	8002e90 <MX25LM51245G_AutoPollingMemReady+0xc0>
 8002e8c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002e90:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8002e92:	78bb      	ldrb	r3, [r7, #2]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d102      	bne.n	8002e9e <MX25LM51245G_AutoPollingMemReady+0xce>
 8002e98:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002e9c:	e000      	b.n	8002ea0 <MX25LM51245G_AutoPollingMemReady+0xd0>
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	663b      	str	r3, [r7, #96]	@ 0x60
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8002ea2:	78fb      	ldrb	r3, [r7, #3]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <MX25LM51245G_AutoPollingMemReady+0xdc>
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	e000      	b.n	8002eae <MX25LM51245G_AutoPollingMemReady+0xde>
 8002eac:	2305      	movs	r3, #5
 8002eae:	667b      	str	r3, [r7, #100]	@ 0x64
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8002eb0:	78bb      	ldrb	r3, [r7, #2]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d101      	bne.n	8002eba <MX25LM51245G_AutoPollingMemReady+0xea>
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	e000      	b.n	8002ebc <MX25LM51245G_AutoPollingMemReady+0xec>
 8002eba:	2301      	movs	r3, #1
 8002ebc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8002ebe:	78bb      	ldrb	r3, [r7, #2]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d102      	bne.n	8002eca <MX25LM51245G_AutoPollingMemReady+0xfa>
 8002ec4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002ec8:	e000      	b.n	8002ecc <MX25LM51245G_AutoPollingMemReady+0xfc>
 8002eca:	2300      	movs	r3, #0
 8002ecc:	66bb      	str	r3, [r7, #104]	@ 0x68
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  s_config.Match         = 0U;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60fb      	str	r3, [r7, #12]
  s_config.Mask          = MX25LM51245G_SR_WIP;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	613b      	str	r3, [r7, #16]
  s_config.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
  s_config.Interval      = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 8002ede:	2310      	movs	r3, #16
 8002ee0:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8002ee2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002ee6:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ee8:	f107 0320 	add.w	r3, r7, #32
 8002eec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f004 fc07 	bl	8007706 <HAL_OSPI_Command>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d002      	beq.n	8002f04 <MX25LM51245G_AutoPollingMemReady+0x134>
  {
    return MX25LM51245G_ERROR;
 8002efe:	f04f 33ff 	mov.w	r3, #4294967295
 8002f02:	e00e      	b.n	8002f22 <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f04:	f107 030c 	add.w	r3, r7, #12
 8002f08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f004 fe3c 	bl	8007b8c <HAL_OSPI_AutoPolling>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d002      	beq.n	8002f20 <MX25LM51245G_AutoPollingMemReady+0x150>
  {
    return MX25LM51245G_ERROR;
 8002f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f1e:	e000      	b.n	8002f22 <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  return MX25LM51245G_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3770      	adds	r7, #112	@ 0x70
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <MX25LM51245G_EnableSTRMemoryMappedMode>:
  * @param  Mode Interface mode
  * @param  AddressSize Address size
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableSTRMemoryMappedMode(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_AddressSize_t AddressSize)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b098      	sub	sp, #96	@ 0x60
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
 8002f32:	460b      	mov	r3, r1
 8002f34:	70fb      	strb	r3, [r7, #3]
 8002f36:	4613      	mov	r3, r2
 8002f38:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef      s_command = {0};
 8002f3a:	f107 0310 	add.w	r3, r7, #16
 8002f3e:	2250      	movs	r2, #80	@ 0x50
 8002f40:	2100      	movs	r1, #0
 8002f42:	4618      	mov	r0, r3
 8002f44:	f027 fb40 	bl	802a5c8 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8002f48:	f107 0308 	add.w	r3, r7, #8
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	605a      	str	r2, [r3, #4]

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 8002f52:	78fb      	ldrb	r3, [r7, #3]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d105      	bne.n	8002f64 <MX25LM51245G_EnableSTRMemoryMappedMode+0x3a>
 8002f58:	78bb      	ldrb	r3, [r7, #2]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d102      	bne.n	8002f64 <MX25LM51245G_EnableSTRMemoryMappedMode+0x3a>
  {
    return MX25LM51245G_ERROR;
 8002f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f62:	e088      	b.n	8003076 <MX25LM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8002f64:	2301      	movs	r3, #1
 8002f66:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8002f6c:	78fb      	ldrb	r3, [r7, #3]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <MX25LM51245G_EnableSTRMemoryMappedMode+0x4c>
 8002f72:	2301      	movs	r3, #1
 8002f74:	e000      	b.n	8002f78 <MX25LM51245G_EnableSTRMemoryMappedMode+0x4e>
 8002f76:	2304      	movs	r3, #4
 8002f78:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8002f7e:	78fb      	ldrb	r3, [r7, #3]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <MX25LM51245G_EnableSTRMemoryMappedMode+0x5e>
 8002f84:	2300      	movs	r3, #0
 8002f86:	e000      	b.n	8002f8a <MX25LM51245G_EnableSTRMemoryMappedMode+0x60>
 8002f88:	2310      	movs	r3, #16
 8002f8a:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8002f8c:	78fb      	ldrb	r3, [r7, #3]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d106      	bne.n	8002fa0 <MX25LM51245G_EnableSTRMemoryMappedMode+0x76>
 8002f92:	78bb      	ldrb	r3, [r7, #2]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <MX25LM51245G_EnableSTRMemoryMappedMode+0x72>
 8002f98:	230b      	movs	r3, #11
 8002f9a:	e003      	b.n	8002fa4 <MX25LM51245G_EnableSTRMemoryMappedMode+0x7a>
 8002f9c:	230c      	movs	r3, #12
 8002f9e:	e001      	b.n	8002fa4 <MX25LM51245G_EnableSTRMemoryMappedMode+0x7a>
 8002fa0:	f64e 4313 	movw	r3, #60435	@ 0xec13
 8002fa4:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8002fa6:	78fb      	ldrb	r3, [r7, #3]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d102      	bne.n	8002fb2 <MX25LM51245G_EnableSTRMemoryMappedMode+0x88>
 8002fac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002fb0:	e001      	b.n	8002fb6 <MX25LM51245G_EnableSTRMemoryMappedMode+0x8c>
 8002fb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8002fbc:	78bb      	ldrb	r3, [r7, #2]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d102      	bne.n	8002fc8 <MX25LM51245G_EnableSTRMemoryMappedMode+0x9e>
 8002fc2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002fc6:	e001      	b.n	8002fcc <MX25LM51245G_EnableSTRMemoryMappedMode+0xa2>
 8002fc8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002fcc:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8002fd2:	78fb      	ldrb	r3, [r7, #3]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d102      	bne.n	8002fde <MX25LM51245G_EnableSTRMemoryMappedMode+0xb4>
 8002fd8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002fdc:	e001      	b.n	8002fe2 <MX25LM51245G_EnableSTRMemoryMappedMode+0xb8>
 8002fde:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002fe2:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 8002fe8:	78fb      	ldrb	r3, [r7, #3]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <MX25LM51245G_EnableSTRMemoryMappedMode+0xc8>
 8002fee:	2308      	movs	r3, #8
 8002ff0:	e000      	b.n	8002ff4 <MX25LM51245G_EnableSTRMemoryMappedMode+0xca>
 8002ff2:	2306      	movs	r3, #6
 8002ff4:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* Send the read command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ffe:	f107 0310 	add.w	r3, r7, #16
 8003002:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003006:	4619      	mov	r1, r3
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f004 fb7c 	bl	8007706 <HAL_OSPI_Command>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d002      	beq.n	800301a <MX25LM51245G_EnableSTRMemoryMappedMode+0xf0>
  {
    return MX25LM51245G_ERROR;
 8003014:	f04f 33ff 	mov.w	r3, #4294967295
 8003018:	e02d      	b.n	8003076 <MX25LM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 800301a:	2302      	movs	r3, #2
 800301c:	613b      	str	r3, [r7, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 800301e:	78fb      	ldrb	r3, [r7, #3]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d106      	bne.n	8003032 <MX25LM51245G_EnableSTRMemoryMappedMode+0x108>
 8003024:	78bb      	ldrb	r3, [r7, #2]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <MX25LM51245G_EnableSTRMemoryMappedMode+0x104>
 800302a:	2302      	movs	r3, #2
 800302c:	e003      	b.n	8003036 <MX25LM51245G_EnableSTRMemoryMappedMode+0x10c>
 800302e:	2312      	movs	r3, #18
 8003030:	e001      	b.n	8003036 <MX25LM51245G_EnableSTRMemoryMappedMode+0x10c>
 8003032:	f241 23ed 	movw	r3, #4845	@ 0x12ed
 8003036:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles        = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Send the write command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800303c:	f107 0310 	add.w	r3, r7, #16
 8003040:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003044:	4619      	mov	r1, r3
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f004 fb5d 	bl	8007706 <HAL_OSPI_Command>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <MX25LM51245G_EnableSTRMemoryMappedMode+0x12e>
  {
    return MX25LM51245G_ERROR;
 8003052:	f04f 33ff 	mov.w	r3, #4294967295
 8003056:	e00e      	b.n	8003076 <MX25LM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8003058:	2300      	movs	r3, #0
 800305a:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 800305c:	f107 0308 	add.w	r3, r7, #8
 8003060:	4619      	mov	r1, r3
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f004 fe1a 	bl	8007c9c <HAL_OSPI_MemoryMapped>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d002      	beq.n	8003074 <MX25LM51245G_EnableSTRMemoryMappedMode+0x14a>
  {
    return MX25LM51245G_ERROR;
 800306e:	f04f 33ff 	mov.w	r3, #4294967295
 8003072:	e000      	b.n	8003076 <MX25LM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  return MX25LM51245G_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3760      	adds	r7, #96	@ 0x60
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <MX25LM51245G_EnableDTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableDTRMemoryMappedMode(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b098      	sub	sp, #96	@ 0x60
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
 8003086:	460b      	mov	r3, r1
 8003088:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  OSPI_RegularCmdTypeDef      s_command = {0};
 800308a:	f107 0310 	add.w	r3, r7, #16
 800308e:	2250      	movs	r2, #80	@ 0x50
 8003090:	2100      	movs	r1, #0
 8003092:	4618      	mov	r0, r3
 8003094:	f027 fa98 	bl	802a5c8 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8003098:	f107 0308 	add.w	r3, r7, #8
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	605a      	str	r2, [r3, #4]

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 80030a2:	2301      	movs	r3, #1
 80030a4:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80030a6:	2300      	movs	r3, #0
 80030a8:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 80030aa:	2304      	movs	r3, #4
 80030ac:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
 80030ae:	2308      	movs	r3, #8
 80030b0:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 80030b2:	2310      	movs	r3, #16
 80030b4:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 80030b6:	f64e 6311 	movw	r3, #60945	@ 0xee11
 80030ba:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 80030bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80030c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 80030c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80030c6:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80030c8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80030cc:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80030ce:	2300      	movs	r3, #0
 80030d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 80030d2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80030d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 80030d8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80030dc:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 80030de:	2306      	movs	r3, #6
 80030e0:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 80030e2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80030e6:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80030e8:	2300      	movs	r3, #0
 80030ea:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80030ec:	f107 0310 	add.w	r3, r7, #16
 80030f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030f4:	4619      	mov	r1, r3
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f004 fb05 	bl	8007706 <HAL_OSPI_Command>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d002      	beq.n	8003108 <MX25LM51245G_EnableDTRMemoryMappedMode+0x8a>
  {
    return MX25LM51245G_ERROR;
 8003102:	f04f 33ff 	mov.w	r3, #4294967295
 8003106:	e025      	b.n	8003154 <MX25LM51245G_EnableDTRMemoryMappedMode+0xd6>
  }

  /* Initialize the program command */
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 8003108:	2302      	movs	r3, #2
 800310a:	613b      	str	r3, [r7, #16]
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 800310c:	f241 23ed 	movw	r3, #4845	@ 0x12ed
 8003110:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles   = 0U;
 8003112:	2300      	movs	r3, #0
 8003114:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DQSMode       = HAL_OSPI_DQS_DISABLE;
 8003116:	2300      	movs	r3, #0
 8003118:	65bb      	str	r3, [r7, #88]	@ 0x58

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800311a:	f107 0310 	add.w	r3, r7, #16
 800311e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003122:	4619      	mov	r1, r3
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f004 faee 	bl	8007706 <HAL_OSPI_Command>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d002      	beq.n	8003136 <MX25LM51245G_EnableDTRMemoryMappedMode+0xb8>
  {
    return MX25LM51245G_ERROR;
 8003130:	f04f 33ff 	mov.w	r3, #4294967295
 8003134:	e00e      	b.n	8003154 <MX25LM51245G_EnableDTRMemoryMappedMode+0xd6>
  }
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8003136:	2300      	movs	r3, #0
 8003138:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 800313a:	f107 0308 	add.w	r3, r7, #8
 800313e:	4619      	mov	r1, r3
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f004 fdab 	bl	8007c9c <HAL_OSPI_MemoryMapped>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d002      	beq.n	8003152 <MX25LM51245G_EnableDTRMemoryMappedMode+0xd4>
  {
    return MX25LM51245G_ERROR;
 800314c:	f04f 33ff 	mov.w	r3, #4294967295
 8003150:	e000      	b.n	8003154 <MX25LM51245G_EnableDTRMemoryMappedMode+0xd6>
  }

  return MX25LM51245G_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3760      	adds	r7, #96	@ 0x60
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b09c      	sub	sp, #112	@ 0x70
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	460b      	mov	r3, r1
 8003166:	70fb      	strb	r3, [r7, #3]
 8003168:	4613      	mov	r3, r2
 800316a:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef     s_command = {0};
 800316c:	f107 0320 	add.w	r3, r7, #32
 8003170:	2250      	movs	r2, #80	@ 0x50
 8003172:	2100      	movs	r1, #0
 8003174:	4618      	mov	r0, r3
 8003176:	f027 fa27 	bl	802a5c8 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 800317a:	f107 030c 	add.w	r3, r7, #12
 800317e:	2200      	movs	r2, #0
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	605a      	str	r2, [r3, #4]
 8003184:	609a      	str	r2, [r3, #8]
 8003186:	60da      	str	r2, [r3, #12]
 8003188:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800318a:	78fb      	ldrb	r3, [r7, #3]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d105      	bne.n	800319c <MX25LM51245G_WriteEnable+0x40>
 8003190:	78bb      	ldrb	r3, [r7, #2]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d102      	bne.n	800319c <MX25LM51245G_WriteEnable+0x40>
  {
    return MX25LM51245G_ERROR;
 8003196:	f04f 33ff 	mov.w	r3, #4294967295
 800319a:	e0a6      	b.n	80032ea <MX25LM51245G_WriteEnable+0x18e>
  }

  /* Initialize the write enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800319c:	2300      	movs	r3, #0
 800319e:	623b      	str	r3, [r7, #32]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80031a0:	2300      	movs	r3, #0
 80031a2:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80031a4:	78fb      	ldrb	r3, [r7, #3]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <MX25LM51245G_WriteEnable+0x52>
 80031aa:	2301      	movs	r3, #1
 80031ac:	e000      	b.n	80031b0 <MX25LM51245G_WriteEnable+0x54>
 80031ae:	2304      	movs	r3, #4
 80031b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80031b2:	78bb      	ldrb	r3, [r7, #2]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d101      	bne.n	80031bc <MX25LM51245G_WriteEnable+0x60>
 80031b8:	2308      	movs	r3, #8
 80031ba:	e000      	b.n	80031be <MX25LM51245G_WriteEnable+0x62>
 80031bc:	2300      	movs	r3, #0
 80031be:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80031c0:	78fb      	ldrb	r3, [r7, #3]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <MX25LM51245G_WriteEnable+0x6e>
 80031c6:	2300      	movs	r3, #0
 80031c8:	e000      	b.n	80031cc <MX25LM51245G_WriteEnable+0x70>
 80031ca:	2310      	movs	r3, #16
 80031cc:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 80031ce:	78fb      	ldrb	r3, [r7, #3]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <MX25LM51245G_WriteEnable+0x7c>
 80031d4:	2306      	movs	r3, #6
 80031d6:	e001      	b.n	80031dc <MX25LM51245G_WriteEnable+0x80>
 80031d8:	f240 63f9 	movw	r3, #1785	@ 0x6f9
 80031dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80031de:	2300      	movs	r3, #0
 80031e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80031e2:	2300      	movs	r3, #0
 80031e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 80031e6:	2300      	movs	r3, #0
 80031e8:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.DummyCycles        = 0U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	667b      	str	r3, [r7, #100]	@ 0x64
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80031ee:	2300      	movs	r3, #0
 80031f0:	66bb      	str	r3, [r7, #104]	@ 0x68
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80031f2:	2300      	movs	r3, #0
 80031f4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80031f6:	f107 0320 	add.w	r3, r7, #32
 80031fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031fe:	4619      	mov	r1, r3
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f004 fa80 	bl	8007706 <HAL_OSPI_Command>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d002      	beq.n	8003212 <MX25LM51245G_WriteEnable+0xb6>
  {
    return MX25LM51245G_ERROR;
 800320c:	f04f 33ff 	mov.w	r3, #4294967295
 8003210:	e06b      	b.n	80032ea <MX25LM51245G_WriteEnable+0x18e>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8003212:	78fb      	ldrb	r3, [r7, #3]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <MX25LM51245G_WriteEnable+0xc0>
 8003218:	2305      	movs	r3, #5
 800321a:	e001      	b.n	8003220 <MX25LM51245G_WriteEnable+0xc4>
 800321c:	f240 53fa 	movw	r3, #1530	@ 0x5fa
 8003220:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8003222:	78fb      	ldrb	r3, [r7, #3]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <MX25LM51245G_WriteEnable+0xd0>
 8003228:	2300      	movs	r3, #0
 800322a:	e001      	b.n	8003230 <MX25LM51245G_WriteEnable+0xd4>
 800322c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003230:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8003232:	78bb      	ldrb	r3, [r7, #2]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d102      	bne.n	800323e <MX25LM51245G_WriteEnable+0xe2>
 8003238:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800323c:	e000      	b.n	8003240 <MX25LM51245G_WriteEnable+0xe4>
 800323e:	2300      	movs	r3, #0
 8003240:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.AddressSize    = HAL_OSPI_ADDRESS_32_BITS;
 8003242:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003246:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.Address        = 0U;
 8003248:	2300      	movs	r3, #0
 800324a:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800324c:	78fb      	ldrb	r3, [r7, #3]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d102      	bne.n	8003258 <MX25LM51245G_WriteEnable+0xfc>
 8003252:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003256:	e001      	b.n	800325c <MX25LM51245G_WriteEnable+0x100>
 8003258:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800325c:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800325e:	78bb      	ldrb	r3, [r7, #2]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d102      	bne.n	800326a <MX25LM51245G_WriteEnable+0x10e>
 8003264:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003268:	e000      	b.n	800326c <MX25LM51245G_WriteEnable+0x110>
 800326a:	2300      	movs	r3, #0
 800326c:	663b      	str	r3, [r7, #96]	@ 0x60
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800326e:	78fb      	ldrb	r3, [r7, #3]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <MX25LM51245G_WriteEnable+0x11c>
 8003274:	2300      	movs	r3, #0
 8003276:	e000      	b.n	800327a <MX25LM51245G_WriteEnable+0x11e>
 8003278:	2305      	movs	r3, #5
 800327a:	667b      	str	r3, [r7, #100]	@ 0x64
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800327c:	78bb      	ldrb	r3, [r7, #2]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d101      	bne.n	8003286 <MX25LM51245G_WriteEnable+0x12a>
 8003282:	2302      	movs	r3, #2
 8003284:	e000      	b.n	8003288 <MX25LM51245G_WriteEnable+0x12c>
 8003286:	2301      	movs	r3, #1
 8003288:	65fb      	str	r3, [r7, #92]	@ 0x5c
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800328a:	78bb      	ldrb	r3, [r7, #2]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d102      	bne.n	8003296 <MX25LM51245G_WriteEnable+0x13a>
 8003290:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003294:	e000      	b.n	8003298 <MX25LM51245G_WriteEnable+0x13c>
 8003296:	2300      	movs	r3, #0
 8003298:	66bb      	str	r3, [r7, #104]	@ 0x68

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800329a:	f107 0320 	add.w	r3, r7, #32
 800329e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032a2:	4619      	mov	r1, r3
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f004 fa2e 	bl	8007706 <HAL_OSPI_Command>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d002      	beq.n	80032b6 <MX25LM51245G_WriteEnable+0x15a>
  {
    return MX25LM51245G_ERROR;
 80032b0:	f04f 33ff 	mov.w	r3, #4294967295
 80032b4:	e019      	b.n	80032ea <MX25LM51245G_WriteEnable+0x18e>
  }

  s_config.Match           = 2U;
 80032b6:	2302      	movs	r3, #2
 80032b8:	60fb      	str	r3, [r7, #12]
  s_config.Mask            = 2U;
 80032ba:	2302      	movs	r3, #2
 80032bc:	613b      	str	r3, [r7, #16]
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 80032be:	2300      	movs	r3, #0
 80032c0:	617b      	str	r3, [r7, #20]
  s_config.Interval        = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 80032c2:	2310      	movs	r3, #16
 80032c4:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80032c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80032ca:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80032cc:	f107 030c 	add.w	r3, r7, #12
 80032d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032d4:	4619      	mov	r1, r3
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f004 fc58 	bl	8007b8c <HAL_OSPI_AutoPolling>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d002      	beq.n	80032e8 <MX25LM51245G_WriteEnable+0x18c>
  {
    return MX25LM51245G_ERROR;
 80032e2:	f04f 33ff 	mov.w	r3, #4294967295
 80032e6:	e000      	b.n	80032ea <MX25LM51245G_WriteEnable+0x18e>
  }

  return MX25LM51245G_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3770      	adds	r7, #112	@ 0x70
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <MX25LM51245G_WriteCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b098      	sub	sp, #96	@ 0x60
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	60f8      	str	r0, [r7, #12]
 80032fa:	607b      	str	r3, [r7, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	72fb      	strb	r3, [r7, #11]
 8003300:	4613      	mov	r3, r2
 8003302:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 8003304:	f107 0310 	add.w	r3, r7, #16
 8003308:	2250      	movs	r2, #80	@ 0x50
 800330a:	2100      	movs	r1, #0
 800330c:	4618      	mov	r0, r3
 800330e:	f027 f95b 	bl	802a5c8 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8003312:	7afb      	ldrb	r3, [r7, #11]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d105      	bne.n	8003324 <MX25LM51245G_WriteCfg2Register+0x32>
 8003318:	7abb      	ldrb	r3, [r7, #10]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d102      	bne.n	8003324 <MX25LM51245G_WriteCfg2Register+0x32>
  {
    return MX25LM51245G_ERROR;
 800331e:	f04f 33ff 	mov.w	r3, #4294967295
 8003322:	e077      	b.n	8003414 <MX25LM51245G_WriteCfg2Register+0x122>
  }

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8003324:	2300      	movs	r3, #0
 8003326:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800332c:	7afb      	ldrb	r3, [r7, #11]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <MX25LM51245G_WriteCfg2Register+0x44>
 8003332:	2301      	movs	r3, #1
 8003334:	e000      	b.n	8003338 <MX25LM51245G_WriteCfg2Register+0x46>
 8003336:	2304      	movs	r3, #4
 8003338:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800333a:	7abb      	ldrb	r3, [r7, #10]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d101      	bne.n	8003344 <MX25LM51245G_WriteCfg2Register+0x52>
 8003340:	2308      	movs	r3, #8
 8003342:	e000      	b.n	8003346 <MX25LM51245G_WriteCfg2Register+0x54>
 8003344:	2300      	movs	r3, #0
 8003346:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003348:	7afb      	ldrb	r3, [r7, #11]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <MX25LM51245G_WriteCfg2Register+0x60>
 800334e:	2300      	movs	r3, #0
 8003350:	e000      	b.n	8003354 <MX25LM51245G_WriteCfg2Register+0x62>
 8003352:	2310      	movs	r3, #16
 8003354:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 8003356:	7afb      	ldrb	r3, [r7, #11]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <MX25LM51245G_WriteCfg2Register+0x6e>
 800335c:	2372      	movs	r3, #114	@ 0x72
 800335e:	e001      	b.n	8003364 <MX25LM51245G_WriteCfg2Register+0x72>
 8003360:	f247 238d 	movw	r3, #29325	@ 0x728d
 8003364:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8003366:	7afb      	ldrb	r3, [r7, #11]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d102      	bne.n	8003372 <MX25LM51245G_WriteCfg2Register+0x80>
 800336c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003370:	e001      	b.n	8003376 <MX25LM51245G_WriteCfg2Register+0x84>
 8003372:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003376:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8003378:	7abb      	ldrb	r3, [r7, #10]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d102      	bne.n	8003384 <MX25LM51245G_WriteCfg2Register+0x92>
 800337e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003382:	e000      	b.n	8003386 <MX25LM51245G_WriteCfg2Register+0x94>
 8003384:	2300      	movs	r3, #0
 8003386:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8003388:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800338c:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.Address            = WriteAddr;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8003392:	2300      	movs	r3, #0
 8003394:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003396:	7afb      	ldrb	r3, [r7, #11]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d102      	bne.n	80033a2 <MX25LM51245G_WriteCfg2Register+0xb0>
 800339c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80033a0:	e001      	b.n	80033a6 <MX25LM51245G_WriteCfg2Register+0xb4>
 80033a2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80033a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80033a8:	7abb      	ldrb	r3, [r7, #10]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d102      	bne.n	80033b4 <MX25LM51245G_WriteCfg2Register+0xc2>
 80033ae:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80033b2:	e000      	b.n	80033b6 <MX25LM51245G_WriteCfg2Register+0xc4>
 80033b4:	2300      	movs	r3, #0
 80033b6:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DummyCycles        = 0U;
 80033b8:	2300      	movs	r3, #0
 80033ba:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 80033bc:	7afb      	ldrb	r3, [r7, #11]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d006      	beq.n	80033d0 <MX25LM51245G_WriteCfg2Register+0xde>
 80033c2:	7abb      	ldrb	r3, [r7, #10]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d101      	bne.n	80033cc <MX25LM51245G_WriteCfg2Register+0xda>
 80033c8:	2302      	movs	r3, #2
 80033ca:	e002      	b.n	80033d2 <MX25LM51245G_WriteCfg2Register+0xe0>
 80033cc:	2301      	movs	r3, #1
 80033ce:	e000      	b.n	80033d2 <MX25LM51245G_WriteCfg2Register+0xe0>
 80033d0:	2301      	movs	r3, #1
 80033d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80033d4:	2300      	movs	r3, #0
 80033d6:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80033d8:	2300      	movs	r3, #0
 80033da:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80033dc:	f107 0310 	add.w	r3, r7, #16
 80033e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033e4:	4619      	mov	r1, r3
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f004 f98d 	bl	8007706 <HAL_OSPI_Command>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d002      	beq.n	80033f8 <MX25LM51245G_WriteCfg2Register+0x106>
  {
    return MX25LM51245G_ERROR;
 80033f2:	f04f 33ff 	mov.w	r3, #4294967295
 80033f6:	e00d      	b.n	8003414 <MX25LM51245G_WriteCfg2Register+0x122>
  }

  if (HAL_OSPI_Transmit(Ctx, &Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80033f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033fc:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f004 faad 	bl	8007960 <HAL_OSPI_Transmit>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d002      	beq.n	8003412 <MX25LM51245G_WriteCfg2Register+0x120>
  {
    return MX25LM51245G_ERROR;
 800340c:	f04f 33ff 	mov.w	r3, #4294967295
 8003410:	e000      	b.n	8003414 <MX25LM51245G_WriteCfg2Register+0x122>
  }

  return MX25LM51245G_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3760      	adds	r7, #96	@ 0x60
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <MX25LM51245G_ReadCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b098      	sub	sp, #96	@ 0x60
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	607b      	str	r3, [r7, #4]
 8003426:	460b      	mov	r3, r1
 8003428:	72fb      	strb	r3, [r7, #11]
 800342a:	4613      	mov	r3, r2
 800342c:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 800342e:	f107 0310 	add.w	r3, r7, #16
 8003432:	2250      	movs	r2, #80	@ 0x50
 8003434:	2100      	movs	r1, #0
 8003436:	4618      	mov	r0, r3
 8003438:	f027 f8c6 	bl	802a5c8 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800343c:	7afb      	ldrb	r3, [r7, #11]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d105      	bne.n	800344e <MX25LM51245G_ReadCfg2Register+0x32>
 8003442:	7abb      	ldrb	r3, [r7, #10]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d102      	bne.n	800344e <MX25LM51245G_ReadCfg2Register+0x32>
  {
    return MX25LM51245G_ERROR;
 8003448:	f04f 33ff 	mov.w	r3, #4294967295
 800344c:	e07c      	b.n	8003548 <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800344e:	2300      	movs	r3, #0
 8003450:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8003452:	2300      	movs	r3, #0
 8003454:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003456:	7afb      	ldrb	r3, [r7, #11]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d101      	bne.n	8003460 <MX25LM51245G_ReadCfg2Register+0x44>
 800345c:	2301      	movs	r3, #1
 800345e:	e000      	b.n	8003462 <MX25LM51245G_ReadCfg2Register+0x46>
 8003460:	2304      	movs	r3, #4
 8003462:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003464:	7abb      	ldrb	r3, [r7, #10]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d101      	bne.n	800346e <MX25LM51245G_ReadCfg2Register+0x52>
 800346a:	2308      	movs	r3, #8
 800346c:	e000      	b.n	8003470 <MX25LM51245G_ReadCfg2Register+0x54>
 800346e:	2300      	movs	r3, #0
 8003470:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003472:	7afb      	ldrb	r3, [r7, #11]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <MX25LM51245G_ReadCfg2Register+0x60>
 8003478:	2300      	movs	r3, #0
 800347a:	e000      	b.n	800347e <MX25LM51245G_ReadCfg2Register+0x62>
 800347c:	2310      	movs	r3, #16
 800347e:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 8003480:	7afb      	ldrb	r3, [r7, #11]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <MX25LM51245G_ReadCfg2Register+0x6e>
 8003486:	2371      	movs	r3, #113	@ 0x71
 8003488:	e001      	b.n	800348e <MX25LM51245G_ReadCfg2Register+0x72>
 800348a:	f247 138e 	movw	r3, #29070	@ 0x718e
 800348e:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8003490:	7afb      	ldrb	r3, [r7, #11]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d102      	bne.n	800349c <MX25LM51245G_ReadCfg2Register+0x80>
 8003496:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800349a:	e001      	b.n	80034a0 <MX25LM51245G_ReadCfg2Register+0x84>
 800349c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80034a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80034a2:	7abb      	ldrb	r3, [r7, #10]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d102      	bne.n	80034ae <MX25LM51245G_ReadCfg2Register+0x92>
 80034a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80034ac:	e000      	b.n	80034b0 <MX25LM51245G_ReadCfg2Register+0x94>
 80034ae:	2300      	movs	r3, #0
 80034b0:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80034b2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80034b6:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.Address            = ReadAddr;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80034bc:	2300      	movs	r3, #0
 80034be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80034c0:	7afb      	ldrb	r3, [r7, #11]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d102      	bne.n	80034cc <MX25LM51245G_ReadCfg2Register+0xb0>
 80034c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80034ca:	e001      	b.n	80034d0 <MX25LM51245G_ReadCfg2Register+0xb4>
 80034cc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80034d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80034d2:	7abb      	ldrb	r3, [r7, #10]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d102      	bne.n	80034de <MX25LM51245G_ReadCfg2Register+0xc2>
 80034d8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80034dc:	e000      	b.n	80034e0 <MX25LM51245G_ReadCfg2Register+0xc4>
 80034de:	2300      	movs	r3, #0
 80034e0:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80034e2:	7afb      	ldrb	r3, [r7, #11]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <MX25LM51245G_ReadCfg2Register+0xd0>
 80034e8:	2300      	movs	r3, #0
 80034ea:	e000      	b.n	80034ee <MX25LM51245G_ReadCfg2Register+0xd2>
 80034ec:	2305      	movs	r3, #5
 80034ee:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80034f0:	7abb      	ldrb	r3, [r7, #10]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d101      	bne.n	80034fa <MX25LM51245G_ReadCfg2Register+0xde>
 80034f6:	2302      	movs	r3, #2
 80034f8:	e000      	b.n	80034fc <MX25LM51245G_ReadCfg2Register+0xe0>
 80034fa:	2301      	movs	r3, #1
 80034fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 80034fe:	7abb      	ldrb	r3, [r7, #10]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d102      	bne.n	800350a <MX25LM51245G_ReadCfg2Register+0xee>
 8003504:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003508:	e000      	b.n	800350c <MX25LM51245G_ReadCfg2Register+0xf0>
 800350a:	2300      	movs	r3, #0
 800350c:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800350e:	2300      	movs	r3, #0
 8003510:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003512:	f107 0310 	add.w	r3, r7, #16
 8003516:	f241 3288 	movw	r2, #5000	@ 0x1388
 800351a:	4619      	mov	r1, r3
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f004 f8f2 	bl	8007706 <HAL_OSPI_Command>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d002      	beq.n	800352e <MX25LM51245G_ReadCfg2Register+0x112>
  {
    return MX25LM51245G_ERROR;
 8003528:	f04f 33ff 	mov.w	r3, #4294967295
 800352c:	e00c      	b.n	8003548 <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800352e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003532:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f004 fa86 	bl	8007a46 <HAL_OSPI_Receive>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d002      	beq.n	8003546 <MX25LM51245G_ReadCfg2Register+0x12a>
  {
    return MX25LM51245G_ERROR;
 8003540:	f04f 33ff 	mov.w	r3, #4294967295
 8003544:	e000      	b.n	8003548 <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  return MX25LM51245G_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3760      	adds	r7, #96	@ 0x60
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b096      	sub	sp, #88	@ 0x58
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	460b      	mov	r3, r1
 800355a:	70fb      	strb	r3, [r7, #3]
 800355c:	4613      	mov	r3, r2
 800355e:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef s_command = {0};
 8003560:	f107 0308 	add.w	r3, r7, #8
 8003564:	2250      	movs	r2, #80	@ 0x50
 8003566:	2100      	movs	r1, #0
 8003568:	4618      	mov	r0, r3
 800356a:	f027 f82d 	bl	802a5c8 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800356e:	78fb      	ldrb	r3, [r7, #3]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d105      	bne.n	8003580 <MX25LM51245G_ResetEnable+0x30>
 8003574:	78bb      	ldrb	r3, [r7, #2]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d102      	bne.n	8003580 <MX25LM51245G_ResetEnable+0x30>
  {
    return MX25LM51245G_ERROR;
 800357a:	f04f 33ff 	mov.w	r3, #4294967295
 800357e:	e03b      	b.n	80035f8 <MX25LM51245G_ResetEnable+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8003580:	2300      	movs	r3, #0
 8003582:	60bb      	str	r3, [r7, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8003584:	2300      	movs	r3, #0
 8003586:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003588:	78fb      	ldrb	r3, [r7, #3]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <MX25LM51245G_ResetEnable+0x42>
 800358e:	2301      	movs	r3, #1
 8003590:	e000      	b.n	8003594 <MX25LM51245G_ResetEnable+0x44>
 8003592:	2304      	movs	r3, #4
 8003594:	617b      	str	r3, [r7, #20]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003596:	78bb      	ldrb	r3, [r7, #2]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d101      	bne.n	80035a0 <MX25LM51245G_ResetEnable+0x50>
 800359c:	2308      	movs	r3, #8
 800359e:	e000      	b.n	80035a2 <MX25LM51245G_ResetEnable+0x52>
 80035a0:	2300      	movs	r3, #0
 80035a2:	61fb      	str	r3, [r7, #28]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80035a4:	78fb      	ldrb	r3, [r7, #3]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <MX25LM51245G_ResetEnable+0x5e>
 80035aa:	2300      	movs	r3, #0
 80035ac:	e000      	b.n	80035b0 <MX25LM51245G_ResetEnable+0x60>
 80035ae:	2310      	movs	r3, #16
 80035b0:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 80035b2:	78fb      	ldrb	r3, [r7, #3]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <MX25LM51245G_ResetEnable+0x6c>
 80035b8:	2366      	movs	r3, #102	@ 0x66
 80035ba:	e001      	b.n	80035c0 <MX25LM51245G_ResetEnable+0x70>
 80035bc:	f246 6399 	movw	r3, #26265	@ 0x6699
 80035c0:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80035c2:	2300      	movs	r3, #0
 80035c4:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80035c6:	2300      	movs	r3, #0
 80035c8:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 80035ca:	2300      	movs	r3, #0
 80035cc:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DummyCycles        = 0U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80035d2:	2300      	movs	r3, #0
 80035d4:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80035d6:	2300      	movs	r3, #0
 80035d8:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80035da:	f107 0308 	add.w	r3, r7, #8
 80035de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035e2:	4619      	mov	r1, r3
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f004 f88e 	bl	8007706 <HAL_OSPI_Command>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d002      	beq.n	80035f6 <MX25LM51245G_ResetEnable+0xa6>
  {
    return MX25LM51245G_ERROR;
 80035f0:	f04f 33ff 	mov.w	r3, #4294967295
 80035f4:	e000      	b.n	80035f8 <MX25LM51245G_ResetEnable+0xa8>
  }

  return MX25LM51245G_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3758      	adds	r7, #88	@ 0x58
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b096      	sub	sp, #88	@ 0x58
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	460b      	mov	r3, r1
 800360a:	70fb      	strb	r3, [r7, #3]
 800360c:	4613      	mov	r3, r2
 800360e:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef s_command = {0};
 8003610:	f107 0308 	add.w	r3, r7, #8
 8003614:	2250      	movs	r2, #80	@ 0x50
 8003616:	2100      	movs	r1, #0
 8003618:	4618      	mov	r0, r3
 800361a:	f026 ffd5 	bl	802a5c8 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800361e:	78fb      	ldrb	r3, [r7, #3]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d105      	bne.n	8003630 <MX25LM51245G_ResetMemory+0x30>
 8003624:	78bb      	ldrb	r3, [r7, #2]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d102      	bne.n	8003630 <MX25LM51245G_ResetMemory+0x30>
  {
    return MX25LM51245G_ERROR;
 800362a:	f04f 33ff 	mov.w	r3, #4294967295
 800362e:	e03b      	b.n	80036a8 <MX25LM51245G_ResetMemory+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8003630:	2300      	movs	r3, #0
 8003632:	60bb      	str	r3, [r7, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8003634:	2300      	movs	r3, #0
 8003636:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003638:	78fb      	ldrb	r3, [r7, #3]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <MX25LM51245G_ResetMemory+0x42>
 800363e:	2301      	movs	r3, #1
 8003640:	e000      	b.n	8003644 <MX25LM51245G_ResetMemory+0x44>
 8003642:	2304      	movs	r3, #4
 8003644:	617b      	str	r3, [r7, #20]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003646:	78bb      	ldrb	r3, [r7, #2]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d101      	bne.n	8003650 <MX25LM51245G_ResetMemory+0x50>
 800364c:	2308      	movs	r3, #8
 800364e:	e000      	b.n	8003652 <MX25LM51245G_ResetMemory+0x52>
 8003650:	2300      	movs	r3, #0
 8003652:	61fb      	str	r3, [r7, #28]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003654:	78fb      	ldrb	r3, [r7, #3]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <MX25LM51245G_ResetMemory+0x5e>
 800365a:	2300      	movs	r3, #0
 800365c:	e000      	b.n	8003660 <MX25LM51245G_ResetMemory+0x60>
 800365e:	2310      	movs	r3, #16
 8003660:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 8003662:	78fb      	ldrb	r3, [r7, #3]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <MX25LM51245G_ResetMemory+0x6c>
 8003668:	2399      	movs	r3, #153	@ 0x99
 800366a:	e001      	b.n	8003670 <MX25LM51245G_ResetMemory+0x70>
 800366c:	f649 1366 	movw	r3, #39270	@ 0x9966
 8003670:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8003672:	2300      	movs	r3, #0
 8003674:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8003676:	2300      	movs	r3, #0
 8003678:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 800367a:	2300      	movs	r3, #0
 800367c:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DummyCycles        = 0U;
 800367e:	2300      	movs	r3, #0
 8003680:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8003682:	2300      	movs	r3, #0
 8003684:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8003686:	2300      	movs	r3, #0
 8003688:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800368a:	f107 0308 	add.w	r3, r7, #8
 800368e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003692:	4619      	mov	r1, r3
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f004 f836 	bl	8007706 <HAL_OSPI_Command>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d002      	beq.n	80036a6 <MX25LM51245G_ResetMemory+0xa6>
  {
    return MX25LM51245G_ERROR;
 80036a0:	f04f 33ff 	mov.w	r3, #4294967295
 80036a4:	e000      	b.n	80036a8 <MX25LM51245G_ResetMemory+0xa8>
  }

  return MX25LM51245G_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3758      	adds	r7, #88	@ 0x58
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <BSP_OSPI_NOR_Init>:
  * @param  Instance   OSPI Instance
  * @param  Init       OSPI Init structure
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_Init(uint32_t Instance, BSP_OSPI_NOR_Init_t *Init)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b094      	sub	sp, #80	@ 0x50
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  BSP_OSPI_NOR_Info_t pInfo;
  MX_OSPI_InitTypeDef ospi_config;

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d003      	beq.n	80036c8 <BSP_OSPI_NOR_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80036c0:	f06f 0301 	mvn.w	r3, #1
 80036c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036c6:	e087      	b.n	80037d8 <BSP_OSPI_NOR_Init+0x128>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 80036c8:	4a46      	ldr	r2, [pc, #280]	@ (80037e4 <BSP_OSPI_NOR_Init+0x134>)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d17f      	bne.n	80037d4 <BSP_OSPI_NOR_Init+0x124>
          return BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp OSPI initialization */
      OSPI_NOR_MspInit(&hospi_nor[Instance]);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	225c      	movs	r2, #92	@ 0x5c
 80036d8:	fb02 f303 	mul.w	r3, r2, r3
 80036dc:	4a42      	ldr	r2, [pc, #264]	@ (80037e8 <BSP_OSPI_NOR_Init+0x138>)
 80036de:	4413      	add	r3, r2
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 fa3d 	bl	8003b60 <OSPI_NOR_MspInit>
#endif /* USE_HAL_OSPI_REGISTER_CALLBACKS */

      /* Get Flash informations of one memory */
      (void)MX25LM51245G_GetFlashInfo(&pInfo);
 80036e6:	f107 031c 	add.w	r3, r7, #28
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7ff fb41 	bl	8002d72 <MX25LM51245G_GetFlashInfo>

      /* Fill config structure */
      ospi_config.ClockPrescaler = 2U;
 80036f0:	2302      	movs	r3, #2
 80036f2:	613b      	str	r3, [r7, #16]
      ospi_config.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036fa:	fa93 f3a3 	rbit	r3, r3
 80036fe:	643b      	str	r3, [r7, #64]	@ 0x40
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003700:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003702:	64bb      	str	r3, [r7, #72]	@ 0x48
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003704:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <BSP_OSPI_NOR_Init+0x5e>
  {
    return 32U;
 800370a:	2320      	movs	r3, #32
 800370c:	e003      	b.n	8003716 <BSP_OSPI_NOR_Init+0x66>
  }
  return __builtin_clz(value);
 800370e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003710:	fab3 f383 	clz	r3, r3
 8003714:	b2db      	uxtb	r3, r3
 8003716:	60fb      	str	r3, [r7, #12]
      ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8003718:	2300      	movs	r3, #0
 800371a:	617b      	str	r3, [r7, #20]
      ospi_config.TransferRate   = Init->TransferRate;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	785b      	ldrb	r3, [r3, #1]
 8003720:	61bb      	str	r3, [r7, #24]

      /* STM32 OSPI Clock configuration */
      if (MX_OSPI_ClockConfig(&hospi_nor[Instance]) != HAL_OK)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	225c      	movs	r2, #92	@ 0x5c
 8003726:	fb02 f303 	mul.w	r3, r2, r3
 800372a:	4a2f      	ldr	r2, [pc, #188]	@ (80037e8 <BSP_OSPI_NOR_Init+0x138>)
 800372c:	4413      	add	r3, r2
 800372e:	4618      	mov	r0, r3
 8003730:	f000 f9f0 	bl	8003b14 <MX_OSPI_ClockConfig>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <BSP_OSPI_NOR_Init+0x92>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 800373a:	f06f 0303 	mvn.w	r3, #3
 800373e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003740:	e04a      	b.n	80037d8 <BSP_OSPI_NOR_Init+0x128>
      }
       /* STM32 OSPI interface initialization */
      else if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_config) != HAL_OK)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	225c      	movs	r2, #92	@ 0x5c
 8003746:	fb02 f303 	mul.w	r3, r2, r3
 800374a:	4a27      	ldr	r2, [pc, #156]	@ (80037e8 <BSP_OSPI_NOR_Init+0x138>)
 800374c:	4413      	add	r3, r2
 800374e:	f107 020c 	add.w	r2, r7, #12
 8003752:	4611      	mov	r1, r2
 8003754:	4618      	mov	r0, r3
 8003756:	f000 f897 	bl	8003888 <MX_OSPI_NOR_Init>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d003      	beq.n	8003768 <BSP_OSPI_NOR_Init+0xb8>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8003760:	f06f 0303 	mvn.w	r3, #3
 8003764:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003766:	e037      	b.n	80037d8 <BSP_OSPI_NOR_Init+0x128>
      }
      /* OSPI memory reset */
      else if (OSPI_NOR_ResetMemory(Instance) != BSP_ERROR_NONE)
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 fba5 	bl	8003eb8 <OSPI_NOR_ResetMemory>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <BSP_OSPI_NOR_Init+0xcc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003774:	f06f 0304 	mvn.w	r3, #4
 8003778:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800377a:	e02d      	b.n	80037d8 <BSP_OSPI_NOR_Init+0x128>
      }
      /* Check if memory is ready */
      else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	225c      	movs	r2, #92	@ 0x5c
 8003780:	fb02 f303 	mul.w	r3, r2, r3
 8003784:	4a18      	ldr	r2, [pc, #96]	@ (80037e8 <BSP_OSPI_NOR_Init+0x138>)
 8003786:	1898      	adds	r0, r3, r2
 8003788:	4a16      	ldr	r2, [pc, #88]	@ (80037e4 <BSP_OSPI_NOR_Init+0x134>)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	4413      	add	r3, r2
 8003790:	7859      	ldrb	r1, [r3, #1]
 8003792:	4a14      	ldr	r2, [pc, #80]	@ (80037e4 <BSP_OSPI_NOR_Init+0x134>)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	4413      	add	r3, r2
 800379a:	789b      	ldrb	r3, [r3, #2]
 800379c:	461a      	mov	r2, r3
 800379e:	f7ff fb17 	bl	8002dd0 <MX25LM51245G_AutoPollingMemReady>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d003      	beq.n	80037b0 <BSP_OSPI_NOR_Init+0x100>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80037a8:	f06f 0304 	mvn.w	r3, #4
 80037ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037ae:	e013      	b.n	80037d8 <BSP_OSPI_NOR_Init+0x128>
      }
      /* Configure the memory */
      else if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	7819      	ldrb	r1, [r3, #0]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	785b      	ldrb	r3, [r3, #1]
 80037b8:	461a      	mov	r2, r3
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f934 	bl	8003a28 <BSP_OSPI_NOR_ConfigFlash>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <BSP_OSPI_NOR_Init+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80037c6:	f06f 0304 	mvn.w	r3, #4
 80037ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037cc:	e004      	b.n	80037d8 <BSP_OSPI_NOR_Init+0x128>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80037ce:	2300      	movs	r3, #0
 80037d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037d2:	e001      	b.n	80037d8 <BSP_OSPI_NOR_Init+0x128>
      }
    }
    else
    {
      ret = BSP_ERROR_NONE;
 80037d4:	2300      	movs	r3, #0
 80037d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  /* Return BSP status */
  return ret;
 80037d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3750      	adds	r7, #80	@ 0x50
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	240008e4 	.word	0x240008e4
 80037e8:	24000888 	.word	0x24000888

080037ec <BSP_OSPI_NOR_DeInit>:
  * @brief  De-Initializes the OSPI interface.
  * @param  Instance   OSPI Instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_DeInit(uint32_t Instance)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80037f4:	2300      	movs	r3, #0
 80037f6:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <BSP_OSPI_NOR_DeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80037fe:	f06f 0301 	mvn.w	r3, #1
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	e037      	b.n	8003876 <BSP_OSPI_NOR_DeInit+0x8a>
  }
  else
  {
    /* Disable Memory mapped mode */
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8003806:	4a1e      	ldr	r2, [pc, #120]	@ (8003880 <BSP_OSPI_NOR_DeInit+0x94>)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800380e:	2b02      	cmp	r3, #2
 8003810:	d108      	bne.n	8003824 <BSP_OSPI_NOR_DeInit+0x38>
    {
      if(BSP_OSPI_NOR_DisableMemoryMappedMode(Instance) != BSP_ERROR_NONE)
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f8d2 	bl	80039bc <BSP_OSPI_NOR_DisableMemoryMappedMode>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d002      	beq.n	8003824 <BSP_OSPI_NOR_DeInit+0x38>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800381e:	f06f 0304 	mvn.w	r3, #4
 8003822:	e029      	b.n	8003878 <BSP_OSPI_NOR_DeInit+0x8c>
      }
    }

    /* Set default Ospi_Nor_Ctx values */
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 8003824:	4a16      	ldr	r2, [pc, #88]	@ (8003880 <BSP_OSPI_NOR_DeInit+0x94>)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2100      	movs	r1, #0
 800382a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;
 800382e:	4a14      	ldr	r2, [pc, #80]	@ (8003880 <BSP_OSPI_NOR_DeInit+0x94>)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	4413      	add	r3, r2
 8003836:	2200      	movs	r2, #0
 8003838:	705a      	strb	r2, [r3, #1]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 800383a:	4a11      	ldr	r2, [pc, #68]	@ (8003880 <BSP_OSPI_NOR_DeInit+0x94>)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	4413      	add	r3, r2
 8003842:	2200      	movs	r2, #0
 8003844:	709a      	strb	r2, [r3, #2]

#if (USE_HAL_OSPI_REGISTER_CALLBACKS == 0)
    OSPI_NOR_MspDeInit(&hospi_nor[Instance]);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	225c      	movs	r2, #92	@ 0x5c
 800384a:	fb02 f303 	mul.w	r3, r2, r3
 800384e:	4a0d      	ldr	r2, [pc, #52]	@ (8003884 <BSP_OSPI_NOR_DeInit+0x98>)
 8003850:	4413      	add	r3, r2
 8003852:	4618      	mov	r0, r3
 8003854:	f000 fad6 	bl	8003e04 <OSPI_NOR_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS == 0) */

    /* Call the DeInit function to reset the driver */
    if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	225c      	movs	r2, #92	@ 0x5c
 800385c:	fb02 f303 	mul.w	r3, r2, r3
 8003860:	4a08      	ldr	r2, [pc, #32]	@ (8003884 <BSP_OSPI_NOR_DeInit+0x98>)
 8003862:	4413      	add	r3, r2
 8003864:	4618      	mov	r0, r3
 8003866:	f003 ff27 	bl	80076b8 <HAL_OSPI_DeInit>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d002      	beq.n	8003876 <BSP_OSPI_NOR_DeInit+0x8a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003870:	f06f 0303 	mvn.w	r3, #3
 8003874:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return BSP status */
  return ret;
 8003876:	68fb      	ldr	r3, [r7, #12]
}
 8003878:	4618      	mov	r0, r3
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	240008e4 	.word	0x240008e4
 8003884:	24000888 	.word	0x24000888

08003888 <MX_OSPI_NOR_Init>:
  * @param  hospi          OSPI handle
  * @param  Config         OSPI config structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_OSPI_NOR_Init(OSPI_HandleTypeDef *hospi, MX_OSPI_InitTypeDef *Config)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
    /* OctoSPI initialization */
  hospi->Instance = OCTOSPI1;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a1e      	ldr	r2, [pc, #120]	@ (8003910 <MX_OSPI_NOR_Init+0x88>)
 8003896:	601a      	str	r2, [r3, #0]

  hospi->Init.FifoThreshold      = 4;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2204      	movs	r2, #4
 800389c:	605a      	str	r2, [r3, #4]
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	609a      	str	r2, [r3, #8]
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	611a      	str	r2, [r3, #16]
  hospi->Init.ChipSelectHighTime = 2;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2202      	movs	r2, #2
 80038b0:	615a      	str	r2, [r3, #20]
  hospi->Init.FreeRunningClock   = HAL_OSPI_FREERUNCLK_DISABLE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	619a      	str	r2, [r3, #24]
  hospi->Init.ClockMode          = HAL_OSPI_CLOCK_MODE_0;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	61da      	str	r2, [r3, #28]
  hospi->Init.WrapSize           = HAL_OSPI_WRAP_NOT_SUPPORTED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	621a      	str	r2, [r3, #32]
  hospi->Init.ClockPrescaler     = Config->ClockPrescaler;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi->Init.SampleShifting     = Config->SampleShifting;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi->Init.ChipSelectBoundary = 0;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	631a      	str	r2, [r3, #48]	@ 0x30

  if (Config->TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d108      	bne.n	80038f4 <MX_OSPI_NOR_Init+0x6c>
  {
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80038e8:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038f0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80038f2:	e005      	b.n	8003900 <MX_OSPI_NOR_Init+0x78>
  }
  else
  {
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  return HAL_OSPI_Init(hospi);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f003 fe1d 	bl	8007540 <HAL_OSPI_Init>
 8003906:	4603      	mov	r3, r0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	52005000 	.word	0x52005000

08003914 <BSP_OSPI_NOR_EnableMemoryMappedMode>:
  * @brief  Configure the OSPI in memory-mapped mode
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_EnableMemoryMappedMode(uint32_t Instance)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800391c:	2300      	movs	r3, #0
 800391e:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003926:	f06f 0301 	mvn.w	r3, #1
 800392a:	60fb      	str	r3, [r7, #12]
 800392c:	e03d      	b.n	80039aa <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
  }
  else
  {
    if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 800392e:	4a21      	ldr	r2, [pc, #132]	@ (80039b4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	4413      	add	r3, r2
 8003936:	789b      	ldrb	r3, [r3, #2]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d11b      	bne.n	8003974 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x60>
    {
      if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	225c      	movs	r2, #92	@ 0x5c
 8003940:	fb02 f303 	mul.w	r3, r2, r3
 8003944:	4a1c      	ldr	r2, [pc, #112]	@ (80039b8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 8003946:	1898      	adds	r0, r3, r2
 8003948:	4a1a      	ldr	r2, [pc, #104]	@ (80039b4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	4413      	add	r3, r2
 8003950:	785b      	ldrb	r3, [r3, #1]
 8003952:	2201      	movs	r2, #1
 8003954:	4619      	mov	r1, r3
 8003956:	f7ff fae8 	bl	8002f2a <MX25LM51245G_EnableSTRMemoryMappedMode>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d003      	beq.n	8003968 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x54>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003960:	f06f 0304 	mvn.w	r3, #4
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	e020      	b.n	80039aa <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
      }
      else /* Update OSPI context if all operations are well done */
      {
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8003968:	4a12      	ldr	r2, [pc, #72]	@ (80039b4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2102      	movs	r1, #2
 800396e:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
 8003972:	e01a      	b.n	80039aa <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
      }
    }
    else
    {
      if(MX25LM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25LM51245G_OK)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	225c      	movs	r2, #92	@ 0x5c
 8003978:	fb02 f303 	mul.w	r3, r2, r3
 800397c:	4a0e      	ldr	r2, [pc, #56]	@ (80039b8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 800397e:	441a      	add	r2, r3
 8003980:	490c      	ldr	r1, [pc, #48]	@ (80039b4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	440b      	add	r3, r1
 8003988:	785b      	ldrb	r3, [r3, #1]
 800398a:	4619      	mov	r1, r3
 800398c:	4610      	mov	r0, r2
 800398e:	f7ff fb76 	bl	800307e <MX25LM51245G_EnableDTRMemoryMappedMode>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d003      	beq.n	80039a0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x8c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003998:	f06f 0304 	mvn.w	r3, #4
 800399c:	60fb      	str	r3, [r7, #12]
 800399e:	e004      	b.n	80039aa <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
      }
      else /* Update OSPI context if all operations are well done */
      {
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 80039a0:	4a04      	ldr	r2, [pc, #16]	@ (80039b4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2102      	movs	r1, #2
 80039a6:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      }
    }
  }

  /* Return BSP status */
  return ret;
 80039aa:	68fb      	ldr	r3, [r7, #12]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	240008e4 	.word	0x240008e4
 80039b8:	24000888 	.word	0x24000888

080039bc <BSP_OSPI_NOR_DisableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_DisableMemoryMappedMode(uint32_t Instance)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80039c4:	2300      	movs	r3, #0
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80039ce:	f06f 0301 	mvn.w	r3, #1
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	e01e      	b.n	8003a14 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
  }
  else
  {
    if(Ospi_Nor_Ctx[Instance].IsInitialized != OSPI_ACCESS_MMP)
 80039d6:	4a12      	ldr	r2, [pc, #72]	@ (8003a20 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x64>)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d003      	beq.n	80039ea <BSP_OSPI_NOR_DisableMemoryMappedMode+0x2e>
    {
      ret = BSP_ERROR_OSPI_MMP_UNLOCK_FAILURE;
 80039e2:	f06f 031a 	mvn.w	r3, #26
 80039e6:	60fb      	str	r3, [r7, #12]
 80039e8:	e014      	b.n	8003a14 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
    }/* Abort MMP back to indirect mode */
    else if(HAL_OSPI_Abort(&hospi_nor[Instance]) != HAL_OK)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	225c      	movs	r2, #92	@ 0x5c
 80039ee:	fb02 f303 	mul.w	r3, r2, r3
 80039f2:	4a0c      	ldr	r2, [pc, #48]	@ (8003a24 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x68>)
 80039f4:	4413      	add	r3, r2
 80039f6:	4618      	mov	r0, r3
 80039f8:	f004 f99e 	bl	8007d38 <HAL_OSPI_Abort>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <BSP_OSPI_NOR_DisableMemoryMappedMode+0x4e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003a02:	f06f 0303 	mvn.w	r3, #3
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	e004      	b.n	8003a14 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
    }
    else /* Update OSPI NOR context if all operations are well done */
    {
      /* Update OSPI context if all operations are well done */
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8003a0a:	4a05      	ldr	r2, [pc, #20]	@ (8003a20 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x64>)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2101      	movs	r1, #1
 8003a10:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    }
  }

  /* Return BSP status */
  return ret;
 8003a14:	68fb      	ldr	r3, [r7, #12]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	240008e4 	.word	0x240008e4
 8003a24:	24000888 	.word	0x24000888

08003a28 <BSP_OSPI_NOR_ConfigFlash>:
  * @param  Mode      OSPI mode
  * @param  Rate      OSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_ConfigFlash(uint32_t Instance, BSP_OSPI_NOR_Interface_t Mode, BSP_OSPI_NOR_Transfer_t Rate)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	460b      	mov	r3, r1
 8003a32:	70fb      	strb	r3, [r7, #3]
 8003a34:	4613      	mov	r3, r2
 8003a36:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <BSP_OSPI_NOR_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003a42:	f06f 0301 	mvn.w	r3, #1
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	e05d      	b.n	8003b06 <BSP_OSPI_NOR_ConfigFlash+0xde>
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8003a4a:	4a31      	ldr	r2, [pc, #196]	@ (8003b10 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d103      	bne.n	8003a5e <BSP_OSPI_NOR_ConfigFlash+0x36>
    {
      ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 8003a56:	f06f 0319 	mvn.w	r3, #25
 8003a5a:	60fb      	str	r3, [r7, #12]
 8003a5c:	e053      	b.n	8003b06 <BSP_OSPI_NOR_ConfigFlash+0xde>
    }
    else
    {
      /* Setup Flash interface ***************************************************/
      switch(Ospi_Nor_Ctx[Instance].InterfaceMode)
 8003a5e:	4a2c      	ldr	r2, [pc, #176]	@ (8003b10 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	4413      	add	r3, r2
 8003a66:	785b      	ldrb	r3, [r3, #1]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d125      	bne.n	8003ab8 <BSP_OSPI_NOR_ConfigFlash+0x90>
      {
      case BSP_OSPI_NOR_OPI_MODE :  /* 8-8-8 commands */
        if((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 8003a6c:	78fb      	ldrb	r3, [r7, #3]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d107      	bne.n	8003a82 <BSP_OSPI_NOR_ConfigFlash+0x5a>
 8003a72:	4a27      	ldr	r2, [pc, #156]	@ (8003b10 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	4413      	add	r3, r2
 8003a7a:	789b      	ldrb	r3, [r3, #2]
 8003a7c:	78ba      	ldrb	r2, [r7, #2]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d02a      	beq.n	8003ad8 <BSP_OSPI_NOR_ConfigFlash+0xb0>
        {
          /* Exit OPI mode */
          ret = OSPI_NOR_ExitOPIMode(Instance);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 fc3e 	bl	8004304 <OSPI_NOR_ExitOPIMode>
 8003a88:	60f8      	str	r0, [r7, #12]

          if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d123      	bne.n	8003ad8 <BSP_OSPI_NOR_ConfigFlash+0xb0>
 8003a90:	78fb      	ldrb	r3, [r7, #3]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d120      	bne.n	8003ad8 <BSP_OSPI_NOR_ConfigFlash+0xb0>
          {

            if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8003a96:	4a1e      	ldr	r2, [pc, #120]	@ (8003b10 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	4413      	add	r3, r2
 8003a9e:	789b      	ldrb	r3, [r3, #2]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d104      	bne.n	8003aae <BSP_OSPI_NOR_ConfigFlash+0x86>
            {
              /* Enter DTR OPI mode */
              ret = OSPI_NOR_EnterDOPIMode(Instance);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 fa9d 	bl	8003fe4 <OSPI_NOR_EnterDOPIMode>
 8003aaa:	60f8      	str	r0, [r7, #12]
              /* Enter STR OPI mode */
              ret = OSPI_NOR_EnterSOPIMode(Instance);
            }
          }
        }
        break;
 8003aac:	e014      	b.n	8003ad8 <BSP_OSPI_NOR_ConfigFlash+0xb0>
              ret = OSPI_NOR_EnterSOPIMode(Instance);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 fb72 	bl	8004198 <OSPI_NOR_EnterSOPIMode>
 8003ab4:	60f8      	str	r0, [r7, #12]
        break;
 8003ab6:	e00f      	b.n	8003ad8 <BSP_OSPI_NOR_ConfigFlash+0xb0>

      case BSP_OSPI_NOR_SPI_MODE :  /* 1-1-1 commands, Power on H/W default setting */
      default :
        if(Mode == BSP_OSPI_NOR_OPI_MODE)
 8003ab8:	78fb      	ldrb	r3, [r7, #3]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d10e      	bne.n	8003adc <BSP_OSPI_NOR_ConfigFlash+0xb4>
        {
          if(Rate == BSP_OSPI_NOR_STR_TRANSFER)
 8003abe:	78bb      	ldrb	r3, [r7, #2]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d104      	bne.n	8003ace <BSP_OSPI_NOR_ConfigFlash+0xa6>
          {
            /* Enter STR OPI mode */
            ret = OSPI_NOR_EnterSOPIMode(Instance);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 fb67 	bl	8004198 <OSPI_NOR_EnterSOPIMode>
 8003aca:	60f8      	str	r0, [r7, #12]
          {
            /* Enter DTR OPI mode */
            ret = OSPI_NOR_EnterDOPIMode(Instance);
          }
        }
        break;
 8003acc:	e006      	b.n	8003adc <BSP_OSPI_NOR_ConfigFlash+0xb4>
            ret = OSPI_NOR_EnterDOPIMode(Instance);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fa88 	bl	8003fe4 <OSPI_NOR_EnterDOPIMode>
 8003ad4:	60f8      	str	r0, [r7, #12]
        break;
 8003ad6:	e001      	b.n	8003adc <BSP_OSPI_NOR_ConfigFlash+0xb4>
        break;
 8003ad8:	bf00      	nop
 8003ada:	e000      	b.n	8003ade <BSP_OSPI_NOR_ConfigFlash+0xb6>
        break;
 8003adc:	bf00      	nop
      }

      /* Update OSPI context if all operations are well done */
      if(ret == BSP_ERROR_NONE)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d110      	bne.n	8003b06 <BSP_OSPI_NOR_ConfigFlash+0xde>
      {
        /* Update current status parameter *****************************************/
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8003ae4:	4a0a      	ldr	r2, [pc, #40]	@ (8003b10 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2101      	movs	r1, #1
 8003aea:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
        Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 8003aee:	4a08      	ldr	r2, [pc, #32]	@ (8003b10 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	4413      	add	r3, r2
 8003af6:	78fa      	ldrb	r2, [r7, #3]
 8003af8:	705a      	strb	r2, [r3, #1]
        Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 8003afa:	4a05      	ldr	r2, [pc, #20]	@ (8003b10 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	4413      	add	r3, r2
 8003b02:	78ba      	ldrb	r2, [r7, #2]
 8003b04:	709a      	strb	r2, [r3, #2]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8003b06:	68fb      	ldr	r3, [r7, #12]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	240008e4 	.word	0x240008e4

08003b14 <MX_OSPI_ClockConfig>:
  * @param  hospi  OSPI Handle
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_OSPI_ClockConfig(OSPI_HandleTypeDef *hospi)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b0b0      	sub	sp, #192	@ 0xc0
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* OSPI clock configuration */
  /* PLL2_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL2_VCO Output = PLL2_VCO Input * PLL3N = 400 Mhz */
  /* PLLOSPICLK = PLL2_VCO Output/PLL2R = 400/2 = 200 Mhz */
  /* OSPI clock frequency = PLLOSPICLK = 200 Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI ;
 8003b1c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b20:	f04f 0300 	mov.w	r3, #0
 8003b24:	e9c7 2302 	strd	r2, r3, [r7, #8]
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8003b28:	2320      	movs	r3, #32
 8003b2a:	657b      	str	r3, [r7, #84]	@ 0x54
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 8003b2c:	2305      	movs	r3, #5
 8003b2e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 8003b30:	2350      	movs	r3, #80	@ 0x50
 8003b32:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8003b34:	2305      	movs	r3, #5
 8003b36:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8003b38:	2302      	movs	r3, #2
 8003b3a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003b40:	2300      	movs	r3, #0
 8003b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8003b44:	2300      	movs	r3, #0
 8003b46:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	627b      	str	r3, [r7, #36]	@ 0x24

  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8003b4c:	f107 0308 	add.w	r3, r7, #8
 8003b50:	4618      	mov	r0, r3
 8003b52:	f006 f8cb 	bl	8009cec <HAL_RCCEx_PeriphCLKConfig>
 8003b56:	4603      	mov	r3, r0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	37c0      	adds	r7, #192	@ 0xc0
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <OSPI_NOR_MspInit>:
  * @brief  Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspInit(OSPI_HandleTypeDef *hospi)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b094      	sub	sp, #80	@ 0x50
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]

  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* Enable the OctoSPI memory interface clock */
  OSPI_NOR_CLK_ENABLE();
 8003b68:	4b9f      	ldr	r3, [pc, #636]	@ (8003de8 <OSPI_NOR_MspInit+0x288>)
 8003b6a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003b6e:	4a9e      	ldr	r2, [pc, #632]	@ (8003de8 <OSPI_NOR_MspInit+0x288>)
 8003b70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b74:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8003b78:	4b9b      	ldr	r3, [pc, #620]	@ (8003de8 <OSPI_NOR_MspInit+0x288>)
 8003b7a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003b7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

  /* Reset the OctoSPI memory interface */
  OSPI_NOR_FORCE_RESET();
 8003b86:	4b98      	ldr	r3, [pc, #608]	@ (8003de8 <OSPI_NOR_MspInit+0x288>)
 8003b88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b8a:	4a97      	ldr	r2, [pc, #604]	@ (8003de8 <OSPI_NOR_MspInit+0x288>)
 8003b8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b90:	67d3      	str	r3, [r2, #124]	@ 0x7c
  OSPI_NOR_RELEASE_RESET();
 8003b92:	4b95      	ldr	r3, [pc, #596]	@ (8003de8 <OSPI_NOR_MspInit+0x288>)
 8003b94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b96:	4a94      	ldr	r2, [pc, #592]	@ (8003de8 <OSPI_NOR_MspInit+0x288>)
 8003b98:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b9c:	67d3      	str	r3, [r2, #124]	@ 0x7c

  /* Enable GPIO clocks */
  OSPI_NOR_CLK_GPIO_CLK_ENABLE();
 8003b9e:	4b92      	ldr	r3, [pc, #584]	@ (8003de8 <OSPI_NOR_MspInit+0x288>)
 8003ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ba4:	4a90      	ldr	r2, [pc, #576]	@ (8003de8 <OSPI_NOR_MspInit+0x288>)
 8003ba6:	f043 0320 	orr.w	r3, r3, #32
 8003baa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003bae:	4b8e      	ldr	r3, [pc, #568]	@ (8003de8 <OSPI_NOR_MspInit+0x288>)
 8003bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003bb4:	f003 0320 	and.w	r3, r3, #32
 8003bb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
  OSPI_NOR_DQS_GPIO_CLK_ENABLE();
 8003bbc:	4b8a      	ldr	r3, [pc, #552]	@ (8003de8 <OSPI_NOR_MspInit+0x288>)
 8003bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003bc2:	4a89      	ldr	r2, [pc, #548]	@ (8003de8 <OSPI_NOR_MspInit+0x288>)
 8003bc4:	f043 0302 	orr.w	r3, r3, #2
 8003bc8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003bcc:	4b86      	ldr	r3, [pc, #536]	@ (8003de8 <OSPI_NOR_MspInit+0x288>)
 8003bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
  OSPI_NOR_CS_GPIO_CLK_ENABLE();
 8003bda:	4b83      	ldr	r3, [pc, #524]	@ (8003de8 <OSPI_NOR_MspInit+0x288>)
 8003bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003be0:	4a81      	ldr	r2, [pc, #516]	@ (8003de8 <OSPI_NOR_MspInit+0x288>)
 8003be2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003be6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003bea:	4b7f      	ldr	r3, [pc, #508]	@ (8003de8 <OSPI_NOR_MspInit+0x288>)
 8003bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  OSPI_NOR_D0_GPIO_CLK_ENABLE();
 8003bf8:	4b7b      	ldr	r3, [pc, #492]	@ (8003de8 <OSPI_NOR_MspInit+0x288>)
 8003bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003bfe:	4a7a      	ldr	r2, [pc, #488]	@ (8003de8 <OSPI_NOR_MspInit+0x288>)
 8003c00:	f043 0308 	orr.w	r3, r3, #8
 8003c04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003c08:	4b77      	ldr	r3, [pc, #476]	@ (8003de8 <OSPI_NOR_MspInit+0x288>)
 8003c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  OSPI_NOR_D1_GPIO_CLK_ENABLE();
 8003c16:	4b74      	ldr	r3, [pc, #464]	@ (8003de8 <OSPI_NOR_MspInit+0x288>)
 8003c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c1c:	4a72      	ldr	r2, [pc, #456]	@ (8003de8 <OSPI_NOR_MspInit+0x288>)
 8003c1e:	f043 0308 	orr.w	r3, r3, #8
 8003c22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003c26:	4b70      	ldr	r3, [pc, #448]	@ (8003de8 <OSPI_NOR_MspInit+0x288>)
 8003c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c2c:	f003 0308 	and.w	r3, r3, #8
 8003c30:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  OSPI_NOR_D2_GPIO_CLK_ENABLE();
 8003c34:	4b6c      	ldr	r3, [pc, #432]	@ (8003de8 <OSPI_NOR_MspInit+0x288>)
 8003c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c3a:	4a6b      	ldr	r2, [pc, #428]	@ (8003de8 <OSPI_NOR_MspInit+0x288>)
 8003c3c:	f043 0310 	orr.w	r3, r3, #16
 8003c40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003c44:	4b68      	ldr	r3, [pc, #416]	@ (8003de8 <OSPI_NOR_MspInit+0x288>)
 8003c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c4a:	f003 0310 	and.w	r3, r3, #16
 8003c4e:	623b      	str	r3, [r7, #32]
 8003c50:	6a3b      	ldr	r3, [r7, #32]
  OSPI_NOR_D3_GPIO_CLK_ENABLE();
 8003c52:	4b65      	ldr	r3, [pc, #404]	@ (8003de8 <OSPI_NOR_MspInit+0x288>)
 8003c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c58:	4a63      	ldr	r2, [pc, #396]	@ (8003de8 <OSPI_NOR_MspInit+0x288>)
 8003c5a:	f043 0308 	orr.w	r3, r3, #8
 8003c5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003c62:	4b61      	ldr	r3, [pc, #388]	@ (8003de8 <OSPI_NOR_MspInit+0x288>)
 8003c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c68:	f003 0308 	and.w	r3, r3, #8
 8003c6c:	61fb      	str	r3, [r7, #28]
 8003c6e:	69fb      	ldr	r3, [r7, #28]
  OSPI_NOR_D4_GPIO_CLK_ENABLE();
 8003c70:	4b5d      	ldr	r3, [pc, #372]	@ (8003de8 <OSPI_NOR_MspInit+0x288>)
 8003c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c76:	4a5c      	ldr	r2, [pc, #368]	@ (8003de8 <OSPI_NOR_MspInit+0x288>)
 8003c78:	f043 0308 	orr.w	r3, r3, #8
 8003c7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003c80:	4b59      	ldr	r3, [pc, #356]	@ (8003de8 <OSPI_NOR_MspInit+0x288>)
 8003c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c86:	f003 0308 	and.w	r3, r3, #8
 8003c8a:	61bb      	str	r3, [r7, #24]
 8003c8c:	69bb      	ldr	r3, [r7, #24]
  OSPI_NOR_D5_GPIO_CLK_ENABLE();
 8003c8e:	4b56      	ldr	r3, [pc, #344]	@ (8003de8 <OSPI_NOR_MspInit+0x288>)
 8003c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c94:	4a54      	ldr	r2, [pc, #336]	@ (8003de8 <OSPI_NOR_MspInit+0x288>)
 8003c96:	f043 0308 	orr.w	r3, r3, #8
 8003c9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003c9e:	4b52      	ldr	r3, [pc, #328]	@ (8003de8 <OSPI_NOR_MspInit+0x288>)
 8003ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ca4:	f003 0308 	and.w	r3, r3, #8
 8003ca8:	617b      	str	r3, [r7, #20]
 8003caa:	697b      	ldr	r3, [r7, #20]
  OSPI_NOR_D6_GPIO_CLK_ENABLE();
 8003cac:	4b4e      	ldr	r3, [pc, #312]	@ (8003de8 <OSPI_NOR_MspInit+0x288>)
 8003cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cb2:	4a4d      	ldr	r2, [pc, #308]	@ (8003de8 <OSPI_NOR_MspInit+0x288>)
 8003cb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cb8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003cbc:	4b4a      	ldr	r3, [pc, #296]	@ (8003de8 <OSPI_NOR_MspInit+0x288>)
 8003cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cc6:	613b      	str	r3, [r7, #16]
 8003cc8:	693b      	ldr	r3, [r7, #16]
  OSPI_NOR_D7_GPIO_CLK_ENABLE();
 8003cca:	4b47      	ldr	r3, [pc, #284]	@ (8003de8 <OSPI_NOR_MspInit+0x288>)
 8003ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cd0:	4a45      	ldr	r2, [pc, #276]	@ (8003de8 <OSPI_NOR_MspInit+0x288>)
 8003cd2:	f043 0308 	orr.w	r3, r3, #8
 8003cd6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003cda:	4b43      	ldr	r3, [pc, #268]	@ (8003de8 <OSPI_NOR_MspInit+0x288>)
 8003cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	60fb      	str	r3, [r7, #12]
 8003ce6:	68fb      	ldr	r3, [r7, #12]

  /* OctoSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_CS_PIN;
 8003ce8:	2340      	movs	r3, #64	@ 0x40
 8003cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8003cec:	2302      	movs	r3, #2
 8003cee:	643b      	str	r3, [r7, #64]	@ 0x40
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	647b      	str	r3, [r7, #68]	@ 0x44
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	64bb      	str	r3, [r7, #72]	@ 0x48
  GPIO_InitStruct.Alternate = OSPI_NOR_CS_PIN_AF;
 8003cf8:	230a      	movs	r3, #10
 8003cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
 8003cfc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003d00:	4619      	mov	r1, r3
 8003d02:	483a      	ldr	r0, [pc, #232]	@ (8003dec <OSPI_NOR_MspInit+0x28c>)
 8003d04:	f002 fc30 	bl	8006568 <HAL_GPIO_Init>

  /* OctoSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_DQS_PIN;
 8003d08:	2320      	movs	r3, #32
 8003d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	647b      	str	r3, [r7, #68]	@ 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_DQS_PIN_AF;
 8003d10:	230a      	movs	r3, #10
 8003d12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_DQS_GPIO_PORT, &GPIO_InitStruct);
 8003d14:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003d18:	4619      	mov	r1, r3
 8003d1a:	4835      	ldr	r0, [pc, #212]	@ (8003df0 <OSPI_NOR_MspInit+0x290>)
 8003d1c:	f002 fc24 	bl	8006568 <HAL_GPIO_Init>

  /* OctoSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_CLK_PIN;
 8003d20:	2304      	movs	r3, #4
 8003d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003d24:	2300      	movs	r3, #0
 8003d26:	647b      	str	r3, [r7, #68]	@ 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_CLK_PIN_AF;
 8003d28:	2309      	movs	r3, #9
 8003d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_CLK_GPIO_PORT, &GPIO_InitStruct);
 8003d2c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003d30:	4619      	mov	r1, r3
 8003d32:	4830      	ldr	r0, [pc, #192]	@ (8003df4 <OSPI_NOR_MspInit+0x294>)
 8003d34:	f002 fc18 	bl	8006568 <HAL_GPIO_Init>

  /* OctoSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D0_PIN;
 8003d38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D0_PIN_AF;
 8003d3e:	230a      	movs	r3, #10
 8003d40:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_D0_GPIO_PORT, &GPIO_InitStruct);
 8003d42:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003d46:	4619      	mov	r1, r3
 8003d48:	482b      	ldr	r0, [pc, #172]	@ (8003df8 <OSPI_NOR_MspInit+0x298>)
 8003d4a:	f002 fc0d 	bl	8006568 <HAL_GPIO_Init>

  /* OctoSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D1_PIN;
 8003d4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D1_PIN_AF;
 8003d54:	230a      	movs	r3, #10
 8003d56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_D1_GPIO_PORT, &GPIO_InitStruct);
 8003d58:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	4826      	ldr	r0, [pc, #152]	@ (8003df8 <OSPI_NOR_MspInit+0x298>)
 8003d60:	f002 fc02 	bl	8006568 <HAL_GPIO_Init>

  /* OctoSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D2_PIN;
 8003d64:	2304      	movs	r3, #4
 8003d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D2_PIN_AF;
 8003d68:	2309      	movs	r3, #9
 8003d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_D2_GPIO_PORT, &GPIO_InitStruct);
 8003d6c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003d70:	4619      	mov	r1, r3
 8003d72:	4822      	ldr	r0, [pc, #136]	@ (8003dfc <OSPI_NOR_MspInit+0x29c>)
 8003d74:	f002 fbf8 	bl	8006568 <HAL_GPIO_Init>

  /* OctoSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D3_PIN;
 8003d78:	2340      	movs	r3, #64	@ 0x40
 8003d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D3_PIN_AF;
 8003d7c:	2306      	movs	r3, #6
 8003d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_D3_GPIO_PORT, &GPIO_InitStruct);
 8003d80:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003d84:	4619      	mov	r1, r3
 8003d86:	481e      	ldr	r0, [pc, #120]	@ (8003e00 <OSPI_NOR_MspInit+0x2a0>)
 8003d88:	f002 fbee 	bl	8006568 <HAL_GPIO_Init>

  /* OctoSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D4_PIN;
 8003d8c:	2380      	movs	r3, #128	@ 0x80
 8003d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D4_PIN_AF;
 8003d90:	230a      	movs	r3, #10
 8003d92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_D4_GPIO_PORT, &GPIO_InitStruct);
 8003d94:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003d98:	4619      	mov	r1, r3
 8003d9a:	4818      	ldr	r0, [pc, #96]	@ (8003dfc <OSPI_NOR_MspInit+0x29c>)
 8003d9c:	f002 fbe4 	bl	8006568 <HAL_GPIO_Init>

  /* OctoSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D5_PIN;
 8003da0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D5_PIN_AF;
 8003da6:	230a      	movs	r3, #10
 8003da8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_D5_GPIO_PORT, &GPIO_InitStruct);
 8003daa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003dae:	4619      	mov	r1, r3
 8003db0:	4812      	ldr	r0, [pc, #72]	@ (8003dfc <OSPI_NOR_MspInit+0x29c>)
 8003db2:	f002 fbd9 	bl	8006568 <HAL_GPIO_Init>

  /* OctoSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D6_PIN;
 8003db6:	2308      	movs	r3, #8
 8003db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D6_PIN_AF;
 8003dba:	2304      	movs	r3, #4
 8003dbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_D6_GPIO_PORT, &GPIO_InitStruct);
 8003dbe:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	480a      	ldr	r0, [pc, #40]	@ (8003df0 <OSPI_NOR_MspInit+0x290>)
 8003dc6:	f002 fbcf 	bl	8006568 <HAL_GPIO_Init>

  /* OctoSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_NOR_D7_PIN;
 8003dca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_NOR_D7_PIN_AF;
 8003dd0:	230a      	movs	r3, #10
 8003dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_NOR_D7_GPIO_PORT, &GPIO_InitStruct);
 8003dd4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003dd8:	4619      	mov	r1, r3
 8003dda:	4808      	ldr	r0, [pc, #32]	@ (8003dfc <OSPI_NOR_MspInit+0x29c>)
 8003ddc:	f002 fbc4 	bl	8006568 <HAL_GPIO_Init>
}
 8003de0:	bf00      	nop
 8003de2:	3750      	adds	r7, #80	@ 0x50
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	58024400 	.word	0x58024400
 8003dec:	58021800 	.word	0x58021800
 8003df0:	58020800 	.word	0x58020800
 8003df4:	58020400 	.word	0x58020400
 8003df8:	58021400 	.word	0x58021400
 8003dfc:	58021000 	.word	0x58021000
 8003e00:	58020000 	.word	0x58020000

08003e04 <OSPI_NOR_MspDeInit>:
  * @brief  De-Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspDeInit(OSPI_HandleTypeDef *hospi)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* OctoSPI GPIO pins de-configuration  */
  HAL_GPIO_DeInit(OSPI_NOR_CLK_GPIO_PORT, OSPI_NOR_CLK_PIN);
 8003e0c:	2104      	movs	r1, #4
 8003e0e:	4823      	ldr	r0, [pc, #140]	@ (8003e9c <OSPI_NOR_MspDeInit+0x98>)
 8003e10:	f002 fd52 	bl	80068b8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_DQS_GPIO_PORT, OSPI_NOR_DQS_PIN);
 8003e14:	2120      	movs	r1, #32
 8003e16:	4822      	ldr	r0, [pc, #136]	@ (8003ea0 <OSPI_NOR_MspDeInit+0x9c>)
 8003e18:	f002 fd4e 	bl	80068b8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_CS_GPIO_PORT, OSPI_NOR_CS_PIN);
 8003e1c:	2140      	movs	r1, #64	@ 0x40
 8003e1e:	4821      	ldr	r0, [pc, #132]	@ (8003ea4 <OSPI_NOR_MspDeInit+0xa0>)
 8003e20:	f002 fd4a 	bl	80068b8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D0_GPIO_PORT, OSPI_NOR_D0_PIN);
 8003e24:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003e28:	481f      	ldr	r0, [pc, #124]	@ (8003ea8 <OSPI_NOR_MspDeInit+0xa4>)
 8003e2a:	f002 fd45 	bl	80068b8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D1_GPIO_PORT, OSPI_NOR_D1_PIN);
 8003e2e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003e32:	481d      	ldr	r0, [pc, #116]	@ (8003ea8 <OSPI_NOR_MspDeInit+0xa4>)
 8003e34:	f002 fd40 	bl	80068b8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D2_GPIO_PORT, OSPI_NOR_D2_PIN);
 8003e38:	2104      	movs	r1, #4
 8003e3a:	481c      	ldr	r0, [pc, #112]	@ (8003eac <OSPI_NOR_MspDeInit+0xa8>)
 8003e3c:	f002 fd3c 	bl	80068b8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D3_GPIO_PORT, OSPI_NOR_D3_PIN);
 8003e40:	2140      	movs	r1, #64	@ 0x40
 8003e42:	481b      	ldr	r0, [pc, #108]	@ (8003eb0 <OSPI_NOR_MspDeInit+0xac>)
 8003e44:	f002 fd38 	bl	80068b8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D4_GPIO_PORT, OSPI_NOR_D4_PIN);
 8003e48:	2180      	movs	r1, #128	@ 0x80
 8003e4a:	4818      	ldr	r0, [pc, #96]	@ (8003eac <OSPI_NOR_MspDeInit+0xa8>)
 8003e4c:	f002 fd34 	bl	80068b8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D5_GPIO_PORT, OSPI_NOR_D5_PIN);
 8003e50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003e54:	4815      	ldr	r0, [pc, #84]	@ (8003eac <OSPI_NOR_MspDeInit+0xa8>)
 8003e56:	f002 fd2f 	bl	80068b8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D6_GPIO_PORT, OSPI_NOR_D6_PIN);
 8003e5a:	2108      	movs	r1, #8
 8003e5c:	4810      	ldr	r0, [pc, #64]	@ (8003ea0 <OSPI_NOR_MspDeInit+0x9c>)
 8003e5e:	f002 fd2b 	bl	80068b8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D7_GPIO_PORT, OSPI_NOR_D7_PIN);
 8003e62:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003e66:	4811      	ldr	r0, [pc, #68]	@ (8003eac <OSPI_NOR_MspDeInit+0xa8>)
 8003e68:	f002 fd26 	bl	80068b8 <HAL_GPIO_DeInit>

  /* Reset the OctoSPI memory interface */
  OSPI_NOR_FORCE_RESET();
 8003e6c:	4b11      	ldr	r3, [pc, #68]	@ (8003eb4 <OSPI_NOR_MspDeInit+0xb0>)
 8003e6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e70:	4a10      	ldr	r2, [pc, #64]	@ (8003eb4 <OSPI_NOR_MspDeInit+0xb0>)
 8003e72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e76:	67d3      	str	r3, [r2, #124]	@ 0x7c
  OSPI_NOR_RELEASE_RESET();
 8003e78:	4b0e      	ldr	r3, [pc, #56]	@ (8003eb4 <OSPI_NOR_MspDeInit+0xb0>)
 8003e7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e7c:	4a0d      	ldr	r2, [pc, #52]	@ (8003eb4 <OSPI_NOR_MspDeInit+0xb0>)
 8003e7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e82:	67d3      	str	r3, [r2, #124]	@ 0x7c

  /* Disable the OctoSPI memory interface clock */
  OSPI_NOR_CLK_DISABLE();
 8003e84:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb4 <OSPI_NOR_MspDeInit+0xb0>)
 8003e86:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8003eb4 <OSPI_NOR_MspDeInit+0xb0>)
 8003e8c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e90:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
}
 8003e94:	bf00      	nop
 8003e96:	3708      	adds	r7, #8
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	58020400 	.word	0x58020400
 8003ea0:	58020800 	.word	0x58020800
 8003ea4:	58021800 	.word	0x58021800
 8003ea8:	58021400 	.word	0x58021400
 8003eac:	58021000 	.word	0x58021000
 8003eb0:	58020000 	.word	0x58020000
 8003eb4:	58024400 	.word	0x58024400

08003eb8 <OSPI_NOR_ResetMemory>:
  * @brief  This function reset the OSPI memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ResetMemory (uint32_t Instance)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <OSPI_NOR_ResetMemory+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003eca:	f06f 0301 	mvn.w	r3, #1
 8003ece:	60fb      	str	r3, [r7, #12]
 8003ed0:	e07f      	b.n	8003fd2 <OSPI_NOR_ResetMemory+0x11a>
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	225c      	movs	r2, #92	@ 0x5c
 8003ed6:	fb02 f303 	mul.w	r3, r2, r3
 8003eda:	4a40      	ldr	r2, [pc, #256]	@ (8003fdc <OSPI_NOR_ResetMemory+0x124>)
 8003edc:	4413      	add	r3, r2
 8003ede:	2200      	movs	r2, #0
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff fb34 	bl	8003550 <MX25LM51245G_ResetEnable>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <OSPI_NOR_ResetMemory+0x3e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003eee:	f06f 0304 	mvn.w	r3, #4
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	e06d      	b.n	8003fd2 <OSPI_NOR_ResetMemory+0x11a>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	225c      	movs	r2, #92	@ 0x5c
 8003efa:	fb02 f303 	mul.w	r3, r2, r3
 8003efe:	4a37      	ldr	r2, [pc, #220]	@ (8003fdc <OSPI_NOR_ResetMemory+0x124>)
 8003f00:	4413      	add	r3, r2
 8003f02:	2200      	movs	r2, #0
 8003f04:	2100      	movs	r1, #0
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7ff fb7a 	bl	8003600 <MX25LM51245G_ResetMemory>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <OSPI_NOR_ResetMemory+0x62>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003f12:	f06f 0304 	mvn.w	r3, #4
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	e05b      	b.n	8003fd2 <OSPI_NOR_ResetMemory+0x11a>
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	225c      	movs	r2, #92	@ 0x5c
 8003f1e:	fb02 f303 	mul.w	r3, r2, r3
 8003f22:	4a2e      	ldr	r2, [pc, #184]	@ (8003fdc <OSPI_NOR_ResetMemory+0x124>)
 8003f24:	4413      	add	r3, r2
 8003f26:	2200      	movs	r2, #0
 8003f28:	2101      	movs	r1, #1
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff fb10 	bl	8003550 <MX25LM51245G_ResetEnable>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <OSPI_NOR_ResetMemory+0x86>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003f36:	f06f 0304 	mvn.w	r3, #4
 8003f3a:	60fb      	str	r3, [r7, #12]
 8003f3c:	e049      	b.n	8003fd2 <OSPI_NOR_ResetMemory+0x11a>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	225c      	movs	r2, #92	@ 0x5c
 8003f42:	fb02 f303 	mul.w	r3, r2, r3
 8003f46:	4a25      	ldr	r2, [pc, #148]	@ (8003fdc <OSPI_NOR_ResetMemory+0x124>)
 8003f48:	4413      	add	r3, r2
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7ff fb56 	bl	8003600 <MX25LM51245G_ResetMemory>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <OSPI_NOR_ResetMemory+0xaa>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003f5a:	f06f 0304 	mvn.w	r3, #4
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	e037      	b.n	8003fd2 <OSPI_NOR_ResetMemory+0x11a>
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	225c      	movs	r2, #92	@ 0x5c
 8003f66:	fb02 f303 	mul.w	r3, r2, r3
 8003f6a:	4a1c      	ldr	r2, [pc, #112]	@ (8003fdc <OSPI_NOR_ResetMemory+0x124>)
 8003f6c:	4413      	add	r3, r2
 8003f6e:	2201      	movs	r2, #1
 8003f70:	2101      	movs	r1, #1
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7ff faec 	bl	8003550 <MX25LM51245G_ResetEnable>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <OSPI_NOR_ResetMemory+0xce>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003f7e:	f06f 0304 	mvn.w	r3, #4
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	e025      	b.n	8003fd2 <OSPI_NOR_ResetMemory+0x11a>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	225c      	movs	r2, #92	@ 0x5c
 8003f8a:	fb02 f303 	mul.w	r3, r2, r3
 8003f8e:	4a13      	ldr	r2, [pc, #76]	@ (8003fdc <OSPI_NOR_ResetMemory+0x124>)
 8003f90:	4413      	add	r3, r2
 8003f92:	2201      	movs	r2, #1
 8003f94:	2101      	movs	r1, #1
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7ff fb32 	bl	8003600 <MX25LM51245G_ResetMemory>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <OSPI_NOR_ResetMemory+0xf2>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003fa2:	f06f 0304 	mvn.w	r3, #4
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	e013      	b.n	8003fd2 <OSPI_NOR_ResetMemory+0x11a>
  }
  else
  {
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 8003faa:	4a0d      	ldr	r2, [pc, #52]	@ (8003fe0 <OSPI_NOR_ResetMemory+0x128>)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2101      	movs	r1, #1
 8003fb0:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;         /* After reset H/W back to SPI mode by default  */
 8003fb4:	4a0a      	ldr	r2, [pc, #40]	@ (8003fe0 <OSPI_NOR_ResetMemory+0x128>)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	4413      	add	r3, r2
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	705a      	strb	r2, [r3, #1]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;     /* After reset S/W setting to STR mode          */
 8003fc0:	4a07      	ldr	r2, [pc, #28]	@ (8003fe0 <OSPI_NOR_ResetMemory+0x128>)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	00db      	lsls	r3, r3, #3
 8003fc6:	4413      	add	r3, r2
 8003fc8:	2200      	movs	r2, #0
 8003fca:	709a      	strb	r2, [r3, #2]

    /* After SWreset CMD, wait in case SWReset occurred during erase operation */
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 8003fcc:	2064      	movs	r0, #100	@ 0x64
 8003fce:	f000 faa1 	bl	8004514 <HAL_Delay>
  }

  /* Return BSP status */
  return ret;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	24000888 	.word	0x24000888
 8003fe0:	240008e4 	.word	0x240008e4

08003fe4 <OSPI_NOR_EnterDOPIMode>:
  * @brief  This function enables the octal DTR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af02      	add	r7, sp, #8
 8003fea:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003fec:	2300      	movs	r3, #0
 8003fee:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <OSPI_NOR_EnterDOPIMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003ff6:	f06f 0301 	mvn.w	r3, #1
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	e0c3      	b.n	8004186 <OSPI_NOR_EnterDOPIMode+0x1a2>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	225c      	movs	r2, #92	@ 0x5c
 8004002:	fb02 f303 	mul.w	r3, r2, r3
 8004006:	4a62      	ldr	r2, [pc, #392]	@ (8004190 <OSPI_NOR_EnterDOPIMode+0x1ac>)
 8004008:	1898      	adds	r0, r3, r2
 800400a:	4a62      	ldr	r2, [pc, #392]	@ (8004194 <OSPI_NOR_EnterDOPIMode+0x1b0>)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	00db      	lsls	r3, r3, #3
 8004010:	4413      	add	r3, r2
 8004012:	7859      	ldrb	r1, [r3, #1]
 8004014:	4a5f      	ldr	r2, [pc, #380]	@ (8004194 <OSPI_NOR_EnterDOPIMode+0x1b0>)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	4413      	add	r3, r2
 800401c:	789b      	ldrb	r3, [r3, #2]
 800401e:	461a      	mov	r2, r3
 8004020:	f7ff f89c 	bl	800315c <MX25LM51245G_WriteEnable>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d003      	beq.n	8004032 <OSPI_NOR_EnterDOPIMode+0x4e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800402a:	f06f 0304 	mvn.w	r3, #4
 800402e:	60fb      	str	r3, [r7, #12]
 8004030:	e0a9      	b.n	8004186 <OSPI_NOR_EnterDOPIMode+0x1a2>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, CONF_OSPI_DUMMY_CYCLES) != MX25LM51245G_OK)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	225c      	movs	r2, #92	@ 0x5c
 8004036:	fb02 f303 	mul.w	r3, r2, r3
 800403a:	4a55      	ldr	r2, [pc, #340]	@ (8004190 <OSPI_NOR_EnterDOPIMode+0x1ac>)
 800403c:	1898      	adds	r0, r3, r2
 800403e:	4a55      	ldr	r2, [pc, #340]	@ (8004194 <OSPI_NOR_EnterDOPIMode+0x1b0>)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	4413      	add	r3, r2
 8004046:	7859      	ldrb	r1, [r3, #1]
 8004048:	4a52      	ldr	r2, [pc, #328]	@ (8004194 <OSPI_NOR_EnterDOPIMode+0x1b0>)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	4413      	add	r3, r2
 8004050:	789a      	ldrb	r2, [r3, #2]
 8004052:	2303      	movs	r3, #3
 8004054:	9300      	str	r3, [sp, #0]
 8004056:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800405a:	f7ff f94a 	bl	80032f2 <MX25LM51245G_WriteCfg2Register>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d003      	beq.n	800406c <OSPI_NOR_EnterDOPIMode+0x88>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004064:	f06f 0304 	mvn.w	r3, #4
 8004068:	60fb      	str	r3, [r7, #12]
 800406a:	e08c      	b.n	8004186 <OSPI_NOR_EnterDOPIMode+0x1a2>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	225c      	movs	r2, #92	@ 0x5c
 8004070:	fb02 f303 	mul.w	r3, r2, r3
 8004074:	4a46      	ldr	r2, [pc, #280]	@ (8004190 <OSPI_NOR_EnterDOPIMode+0x1ac>)
 8004076:	1898      	adds	r0, r3, r2
 8004078:	4a46      	ldr	r2, [pc, #280]	@ (8004194 <OSPI_NOR_EnterDOPIMode+0x1b0>)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	4413      	add	r3, r2
 8004080:	7859      	ldrb	r1, [r3, #1]
 8004082:	4a44      	ldr	r2, [pc, #272]	@ (8004194 <OSPI_NOR_EnterDOPIMode+0x1b0>)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	4413      	add	r3, r2
 800408a:	789b      	ldrb	r3, [r3, #2]
 800408c:	461a      	mov	r2, r3
 800408e:	f7ff f865 	bl	800315c <MX25LM51245G_WriteEnable>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d003      	beq.n	80040a0 <OSPI_NOR_EnterDOPIMode+0xbc>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004098:	f06f 0304 	mvn.w	r3, #4
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	e072      	b.n	8004186 <OSPI_NOR_EnterDOPIMode+0x1a2>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	225c      	movs	r2, #92	@ 0x5c
 80040a4:	fb02 f303 	mul.w	r3, r2, r3
 80040a8:	4a39      	ldr	r2, [pc, #228]	@ (8004190 <OSPI_NOR_EnterDOPIMode+0x1ac>)
 80040aa:	1898      	adds	r0, r3, r2
 80040ac:	4a39      	ldr	r2, [pc, #228]	@ (8004194 <OSPI_NOR_EnterDOPIMode+0x1b0>)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	4413      	add	r3, r2
 80040b4:	7859      	ldrb	r1, [r3, #1]
 80040b6:	4a37      	ldr	r2, [pc, #220]	@ (8004194 <OSPI_NOR_EnterDOPIMode+0x1b0>)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	4413      	add	r3, r2
 80040be:	789a      	ldrb	r2, [r3, #2]
 80040c0:	2302      	movs	r3, #2
 80040c2:	9300      	str	r3, [sp, #0]
 80040c4:	2300      	movs	r3, #0
 80040c6:	f7ff f914 	bl	80032f2 <MX25LM51245G_WriteCfg2Register>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d003      	beq.n	80040d8 <OSPI_NOR_EnterDOPIMode+0xf4>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80040d0:	f06f 0304 	mvn.w	r3, #4
 80040d4:	60fb      	str	r3, [r7, #12]
 80040d6:	e056      	b.n	8004186 <OSPI_NOR_EnterDOPIMode+0x1a2>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 80040d8:	2028      	movs	r0, #40	@ 0x28
 80040da:	f000 fa1b 	bl	8004514 <HAL_Delay>

    /* Reconfigure the memory type of the peripheral */
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 80040de:	4a2c      	ldr	r2, [pc, #176]	@ (8004190 <OSPI_NOR_EnterDOPIMode+0x1ac>)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	215c      	movs	r1, #92	@ 0x5c
 80040e4:	fb01 f303 	mul.w	r3, r1, r3
 80040e8:	4413      	add	r3, r2
 80040ea:	330c      	adds	r3, #12
 80040ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80040f0:	601a      	str	r2, [r3, #0]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 80040f2:	4a27      	ldr	r2, [pc, #156]	@ (8004190 <OSPI_NOR_EnterDOPIMode+0x1ac>)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	215c      	movs	r1, #92	@ 0x5c
 80040f8:	fb01 f303 	mul.w	r3, r1, r3
 80040fc:	4413      	add	r3, r2
 80040fe:	332c      	adds	r3, #44	@ 0x2c
 8004100:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004104:	601a      	str	r2, [r3, #0]
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	225c      	movs	r2, #92	@ 0x5c
 800410a:	fb02 f303 	mul.w	r3, r2, r3
 800410e:	4a20      	ldr	r2, [pc, #128]	@ (8004190 <OSPI_NOR_EnterDOPIMode+0x1ac>)
 8004110:	4413      	add	r3, r2
 8004112:	4618      	mov	r0, r3
 8004114:	f003 fa14 	bl	8007540 <HAL_OSPI_Init>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <OSPI_NOR_EnterDOPIMode+0x142>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800411e:	f06f 0303 	mvn.w	r3, #3
 8004122:	60fb      	str	r3, [r7, #12]
 8004124:	e02f      	b.n	8004186 <OSPI_NOR_EnterDOPIMode+0x1a2>
    }
    /* Check Flash busy ? */
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	225c      	movs	r2, #92	@ 0x5c
 800412a:	fb02 f303 	mul.w	r3, r2, r3
 800412e:	4a18      	ldr	r2, [pc, #96]	@ (8004190 <OSPI_NOR_EnterDOPIMode+0x1ac>)
 8004130:	4413      	add	r3, r2
 8004132:	2201      	movs	r2, #1
 8004134:	2101      	movs	r1, #1
 8004136:	4618      	mov	r0, r3
 8004138:	f7fe fe4a 	bl	8002dd0 <MX25LM51245G_AutoPollingMemReady>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <OSPI_NOR_EnterDOPIMode+0x166>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004142:	f06f 0304 	mvn.w	r3, #4
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	e01d      	b.n	8004186 <OSPI_NOR_EnterDOPIMode+0x1a2>
    }
    /* Check the configuration has been correctly done */
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	225c      	movs	r2, #92	@ 0x5c
 800414e:	fb02 f303 	mul.w	r3, r2, r3
 8004152:	4a0f      	ldr	r2, [pc, #60]	@ (8004190 <OSPI_NOR_EnterDOPIMode+0x1ac>)
 8004154:	1898      	adds	r0, r3, r2
 8004156:	f107 0308 	add.w	r3, r7, #8
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	2300      	movs	r3, #0
 800415e:	2201      	movs	r2, #1
 8004160:	2101      	movs	r1, #1
 8004162:	f7ff f95b 	bl	800341c <MX25LM51245G_ReadCfg2Register>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d003      	beq.n	8004174 <OSPI_NOR_EnterDOPIMode+0x190>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800416c:	f06f 0304 	mvn.w	r3, #4
 8004170:	60fb      	str	r3, [r7, #12]
 8004172:	e008      	b.n	8004186 <OSPI_NOR_EnterDOPIMode+0x1a2>
    }
    else if (reg[0] != MX25LM51245G_CR2_DOPI)
 8004174:	7a3b      	ldrb	r3, [r7, #8]
 8004176:	2b02      	cmp	r3, #2
 8004178:	d003      	beq.n	8004182 <OSPI_NOR_EnterDOPIMode+0x19e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800417a:	f06f 0304 	mvn.w	r3, #4
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	e001      	b.n	8004186 <OSPI_NOR_EnterDOPIMode+0x1a2>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8004182:	2300      	movs	r3, #0
 8004184:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return BSP status */
  return ret;
 8004186:	68fb      	ldr	r3, [r7, #12]
}
 8004188:	4618      	mov	r0, r3
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	24000888 	.word	0x24000888
 8004194:	240008e4 	.word	0x240008e4

08004198 <OSPI_NOR_EnterSOPIMode>:
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af02      	add	r7, sp, #8
 800419e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80041a0:	2300      	movs	r3, #0
 80041a2:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <OSPI_NOR_EnterSOPIMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80041aa:	f06f 0301 	mvn.w	r3, #1
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	e09f      	b.n	80042f2 <OSPI_NOR_EnterSOPIMode+0x15a>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	225c      	movs	r2, #92	@ 0x5c
 80041b6:	fb02 f303 	mul.w	r3, r2, r3
 80041ba:	4a50      	ldr	r2, [pc, #320]	@ (80042fc <OSPI_NOR_EnterSOPIMode+0x164>)
 80041bc:	1898      	adds	r0, r3, r2
 80041be:	4a50      	ldr	r2, [pc, #320]	@ (8004300 <OSPI_NOR_EnterSOPIMode+0x168>)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	4413      	add	r3, r2
 80041c6:	7859      	ldrb	r1, [r3, #1]
 80041c8:	4a4d      	ldr	r2, [pc, #308]	@ (8004300 <OSPI_NOR_EnterSOPIMode+0x168>)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	4413      	add	r3, r2
 80041d0:	789b      	ldrb	r3, [r3, #2]
 80041d2:	461a      	mov	r2, r3
 80041d4:	f7fe ffc2 	bl	800315c <MX25LM51245G_WriteEnable>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <OSPI_NOR_EnterSOPIMode+0x4e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80041de:	f06f 0304 	mvn.w	r3, #4
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	e085      	b.n	80042f2 <OSPI_NOR_EnterSOPIMode+0x15a>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, CONF_OSPI_DUMMY_CYCLES) != MX25LM51245G_OK)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	225c      	movs	r2, #92	@ 0x5c
 80041ea:	fb02 f303 	mul.w	r3, r2, r3
 80041ee:	4a43      	ldr	r2, [pc, #268]	@ (80042fc <OSPI_NOR_EnterSOPIMode+0x164>)
 80041f0:	1898      	adds	r0, r3, r2
 80041f2:	4a43      	ldr	r2, [pc, #268]	@ (8004300 <OSPI_NOR_EnterSOPIMode+0x168>)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	00db      	lsls	r3, r3, #3
 80041f8:	4413      	add	r3, r2
 80041fa:	7859      	ldrb	r1, [r3, #1]
 80041fc:	4a40      	ldr	r2, [pc, #256]	@ (8004300 <OSPI_NOR_EnterSOPIMode+0x168>)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	4413      	add	r3, r2
 8004204:	789a      	ldrb	r2, [r3, #2]
 8004206:	2303      	movs	r3, #3
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800420e:	f7ff f870 	bl	80032f2 <MX25LM51245G_WriteCfg2Register>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d003      	beq.n	8004220 <OSPI_NOR_EnterSOPIMode+0x88>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004218:	f06f 0304 	mvn.w	r3, #4
 800421c:	60fb      	str	r3, [r7, #12]
 800421e:	e068      	b.n	80042f2 <OSPI_NOR_EnterSOPIMode+0x15a>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	225c      	movs	r2, #92	@ 0x5c
 8004224:	fb02 f303 	mul.w	r3, r2, r3
 8004228:	4a34      	ldr	r2, [pc, #208]	@ (80042fc <OSPI_NOR_EnterSOPIMode+0x164>)
 800422a:	1898      	adds	r0, r3, r2
 800422c:	4a34      	ldr	r2, [pc, #208]	@ (8004300 <OSPI_NOR_EnterSOPIMode+0x168>)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	00db      	lsls	r3, r3, #3
 8004232:	4413      	add	r3, r2
 8004234:	7859      	ldrb	r1, [r3, #1]
 8004236:	4a32      	ldr	r2, [pc, #200]	@ (8004300 <OSPI_NOR_EnterSOPIMode+0x168>)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	4413      	add	r3, r2
 800423e:	789b      	ldrb	r3, [r3, #2]
 8004240:	461a      	mov	r2, r3
 8004242:	f7fe ff8b 	bl	800315c <MX25LM51245G_WriteEnable>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d003      	beq.n	8004254 <OSPI_NOR_EnterSOPIMode+0xbc>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800424c:	f06f 0304 	mvn.w	r3, #4
 8004250:	60fb      	str	r3, [r7, #12]
 8004252:	e04e      	b.n	80042f2 <OSPI_NOR_EnterSOPIMode+0x15a>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	225c      	movs	r2, #92	@ 0x5c
 8004258:	fb02 f303 	mul.w	r3, r2, r3
 800425c:	4a27      	ldr	r2, [pc, #156]	@ (80042fc <OSPI_NOR_EnterSOPIMode+0x164>)
 800425e:	1898      	adds	r0, r3, r2
 8004260:	4a27      	ldr	r2, [pc, #156]	@ (8004300 <OSPI_NOR_EnterSOPIMode+0x168>)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	00db      	lsls	r3, r3, #3
 8004266:	4413      	add	r3, r2
 8004268:	7859      	ldrb	r1, [r3, #1]
 800426a:	4a25      	ldr	r2, [pc, #148]	@ (8004300 <OSPI_NOR_EnterSOPIMode+0x168>)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	4413      	add	r3, r2
 8004272:	789a      	ldrb	r2, [r3, #2]
 8004274:	2301      	movs	r3, #1
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	2300      	movs	r3, #0
 800427a:	f7ff f83a 	bl	80032f2 <MX25LM51245G_WriteCfg2Register>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d003      	beq.n	800428c <OSPI_NOR_EnterSOPIMode+0xf4>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004284:	f06f 0304 	mvn.w	r3, #4
 8004288:	60fb      	str	r3, [r7, #12]
 800428a:	e032      	b.n	80042f2 <OSPI_NOR_EnterSOPIMode+0x15a>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 800428c:	2028      	movs	r0, #40	@ 0x28
 800428e:	f000 f941 	bl	8004514 <HAL_Delay>

    /* Check Flash busy ? */
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	225c      	movs	r2, #92	@ 0x5c
 8004296:	fb02 f303 	mul.w	r3, r2, r3
 800429a:	4a18      	ldr	r2, [pc, #96]	@ (80042fc <OSPI_NOR_EnterSOPIMode+0x164>)
 800429c:	4413      	add	r3, r2
 800429e:	2200      	movs	r2, #0
 80042a0:	2101      	movs	r1, #1
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7fe fd94 	bl	8002dd0 <MX25LM51245G_AutoPollingMemReady>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <OSPI_NOR_EnterSOPIMode+0x11e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80042ae:	f06f 0304 	mvn.w	r3, #4
 80042b2:	60fb      	str	r3, [r7, #12]
 80042b4:	e01d      	b.n	80042f2 <OSPI_NOR_EnterSOPIMode+0x15a>
    }
    /* Check the configuration has been correctly done */
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	225c      	movs	r2, #92	@ 0x5c
 80042ba:	fb02 f303 	mul.w	r3, r2, r3
 80042be:	4a0f      	ldr	r2, [pc, #60]	@ (80042fc <OSPI_NOR_EnterSOPIMode+0x164>)
 80042c0:	1898      	adds	r0, r3, r2
 80042c2:	f107 0308 	add.w	r3, r7, #8
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	2300      	movs	r3, #0
 80042ca:	2200      	movs	r2, #0
 80042cc:	2101      	movs	r1, #1
 80042ce:	f7ff f8a5 	bl	800341c <MX25LM51245G_ReadCfg2Register>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d003      	beq.n	80042e0 <OSPI_NOR_EnterSOPIMode+0x148>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80042d8:	f06f 0304 	mvn.w	r3, #4
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	e008      	b.n	80042f2 <OSPI_NOR_EnterSOPIMode+0x15a>
    }
    else if (reg[0] != MX25LM51245G_CR2_SOPI)
 80042e0:	7a3b      	ldrb	r3, [r7, #8]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d003      	beq.n	80042ee <OSPI_NOR_EnterSOPIMode+0x156>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80042e6:	f06f 0304 	mvn.w	r3, #4
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	e001      	b.n	80042f2 <OSPI_NOR_EnterSOPIMode+0x15a>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 80042ee:	2300      	movs	r3, #0
 80042f0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return BSP status */
  return ret;
 80042f2:	68fb      	ldr	r3, [r7, #12]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	24000888 	.word	0x24000888
 8004300:	240008e4 	.word	0x240008e4

08004304 <OSPI_NOR_ExitOPIMode>:
  * @brief  This function disables the octal DTR or STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ExitOPIMode (uint32_t Instance)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af02      	add	r7, sp, #8
 800430a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800430c:	2300      	movs	r3, #0
 800430e:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <OSPI_NOR_ExitOPIMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004316:	f06f 0301 	mvn.w	r3, #1
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	e094      	b.n	8004448 <OSPI_NOR_ExitOPIMode+0x144>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	225c      	movs	r2, #92	@ 0x5c
 8004322:	fb02 f303 	mul.w	r3, r2, r3
 8004326:	4a4b      	ldr	r2, [pc, #300]	@ (8004454 <OSPI_NOR_ExitOPIMode+0x150>)
 8004328:	1898      	adds	r0, r3, r2
 800432a:	4a4b      	ldr	r2, [pc, #300]	@ (8004458 <OSPI_NOR_ExitOPIMode+0x154>)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	4413      	add	r3, r2
 8004332:	7859      	ldrb	r1, [r3, #1]
 8004334:	4a48      	ldr	r2, [pc, #288]	@ (8004458 <OSPI_NOR_ExitOPIMode+0x154>)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	4413      	add	r3, r2
 800433c:	789b      	ldrb	r3, [r3, #2]
 800433e:	461a      	mov	r2, r3
 8004340:	f7fe ff0c 	bl	800315c <MX25LM51245G_WriteEnable>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <OSPI_NOR_ExitOPIMode+0x4e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800434a:	f06f 0304 	mvn.w	r3, #4
 800434e:	60fb      	str	r3, [r7, #12]
 8004350:	e07a      	b.n	8004448 <OSPI_NOR_ExitOPIMode+0x144>
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 8004352:	2300      	movs	r3, #0
 8004354:	723b      	strb	r3, [r7, #8]
    reg[1] = 0;
 8004356:	2300      	movs	r3, #0
 8004358:	727b      	strb	r3, [r7, #9]
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	225c      	movs	r2, #92	@ 0x5c
 800435e:	fb02 f303 	mul.w	r3, r2, r3
 8004362:	4a3c      	ldr	r2, [pc, #240]	@ (8004454 <OSPI_NOR_ExitOPIMode+0x150>)
 8004364:	1898      	adds	r0, r3, r2
 8004366:	4a3c      	ldr	r2, [pc, #240]	@ (8004458 <OSPI_NOR_ExitOPIMode+0x154>)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	4413      	add	r3, r2
 800436e:	7859      	ldrb	r1, [r3, #1]
 8004370:	4a39      	ldr	r2, [pc, #228]	@ (8004458 <OSPI_NOR_ExitOPIMode+0x154>)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	4413      	add	r3, r2
 8004378:	789a      	ldrb	r2, [r3, #2]
 800437a:	7a3b      	ldrb	r3, [r7, #8]
 800437c:	9300      	str	r3, [sp, #0]
 800437e:	2300      	movs	r3, #0
 8004380:	f7fe ffb7 	bl	80032f2 <MX25LM51245G_WriteCfg2Register>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <OSPI_NOR_ExitOPIMode+0x8e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800438a:	f06f 0304 	mvn.w	r3, #4
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	e05a      	b.n	8004448 <OSPI_NOR_ExitOPIMode+0x144>
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8004392:	2028      	movs	r0, #40	@ 0x28
 8004394:	f000 f8be 	bl	8004514 <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 8004398:	4a2f      	ldr	r2, [pc, #188]	@ (8004458 <OSPI_NOR_ExitOPIMode+0x154>)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	00db      	lsls	r3, r3, #3
 800439e:	4413      	add	r3, r2
 80043a0:	789b      	ldrb	r3, [r3, #2]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d120      	bne.n	80043e8 <OSPI_NOR_ExitOPIMode+0xe4>
      {
        /* Reconfigure the memory type of the peripheral */
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 80043a6:	4a2b      	ldr	r2, [pc, #172]	@ (8004454 <OSPI_NOR_ExitOPIMode+0x150>)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	215c      	movs	r1, #92	@ 0x5c
 80043ac:	fb01 f303 	mul.w	r3, r1, r3
 80043b0:	4413      	add	r3, r2
 80043b2:	330c      	adds	r3, #12
 80043b4:	2200      	movs	r2, #0
 80043b6:	601a      	str	r2, [r3, #0]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80043b8:	4a26      	ldr	r2, [pc, #152]	@ (8004454 <OSPI_NOR_ExitOPIMode+0x150>)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	215c      	movs	r1, #92	@ 0x5c
 80043be:	fb01 f303 	mul.w	r3, r1, r3
 80043c2:	4413      	add	r3, r2
 80043c4:	332c      	adds	r3, #44	@ 0x2c
 80043c6:	2200      	movs	r2, #0
 80043c8:	601a      	str	r2, [r3, #0]
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	225c      	movs	r2, #92	@ 0x5c
 80043ce:	fb02 f303 	mul.w	r3, r2, r3
 80043d2:	4a20      	ldr	r2, [pc, #128]	@ (8004454 <OSPI_NOR_ExitOPIMode+0x150>)
 80043d4:	4413      	add	r3, r2
 80043d6:	4618      	mov	r0, r3
 80043d8:	f003 f8b2 	bl	8007540 <HAL_OSPI_Init>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d002      	beq.n	80043e8 <OSPI_NOR_ExitOPIMode+0xe4>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 80043e2:	f06f 0303 	mvn.w	r3, #3
 80043e6:	60fb      	str	r3, [r7, #12]
        }
      }

      /* Check Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	225c      	movs	r2, #92	@ 0x5c
 80043ec:	fb02 f303 	mul.w	r3, r2, r3
 80043f0:	4a18      	ldr	r2, [pc, #96]	@ (8004454 <OSPI_NOR_ExitOPIMode+0x150>)
 80043f2:	4413      	add	r3, r2
 80043f4:	2200      	movs	r2, #0
 80043f6:	2100      	movs	r1, #0
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7fe fce9 	bl	8002dd0 <MX25LM51245G_AutoPollingMemReady>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <OSPI_NOR_ExitOPIMode+0x108>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004404:	f06f 0304 	mvn.w	r3, #4
 8004408:	60fb      	str	r3, [r7, #12]
 800440a:	e01d      	b.n	8004448 <OSPI_NOR_ExitOPIMode+0x144>
      }
      /* Check the configuration has been correctly done */
      else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	225c      	movs	r2, #92	@ 0x5c
 8004410:	fb02 f303 	mul.w	r3, r2, r3
 8004414:	4a0f      	ldr	r2, [pc, #60]	@ (8004454 <OSPI_NOR_ExitOPIMode+0x150>)
 8004416:	1898      	adds	r0, r3, r2
 8004418:	f107 0308 	add.w	r3, r7, #8
 800441c:	9300      	str	r3, [sp, #0]
 800441e:	2300      	movs	r3, #0
 8004420:	2200      	movs	r2, #0
 8004422:	2100      	movs	r1, #0
 8004424:	f7fe fffa 	bl	800341c <MX25LM51245G_ReadCfg2Register>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <OSPI_NOR_ExitOPIMode+0x132>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800442e:	f06f 0304 	mvn.w	r3, #4
 8004432:	60fb      	str	r3, [r7, #12]
 8004434:	e008      	b.n	8004448 <OSPI_NOR_ExitOPIMode+0x144>
      }
      else if (reg[0] != 0)
 8004436:	7a3b      	ldrb	r3, [r7, #8]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <OSPI_NOR_ExitOPIMode+0x140>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800443c:	f06f 0304 	mvn.w	r3, #4
 8004440:	60fb      	str	r3, [r7, #12]
 8004442:	e001      	b.n	8004448 <OSPI_NOR_ExitOPIMode+0x144>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004444:	2300      	movs	r3, #0
 8004446:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8004448:	68fb      	ldr	r3, [r7, #12]
}
 800444a:	4618      	mov	r0, r3
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	24000888 	.word	0x24000888
 8004458:	240008e4 	.word	0x240008e4

0800445c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004462:	2003      	movs	r0, #3
 8004464:	f001 fcb1 	bl	8005dca <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004468:	f005 fa28 	bl	80098bc <HAL_RCC_GetSysClockFreq>
 800446c:	4602      	mov	r2, r0
 800446e:	4b15      	ldr	r3, [pc, #84]	@ (80044c4 <HAL_Init+0x68>)
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	0a1b      	lsrs	r3, r3, #8
 8004474:	f003 030f 	and.w	r3, r3, #15
 8004478:	4913      	ldr	r1, [pc, #76]	@ (80044c8 <HAL_Init+0x6c>)
 800447a:	5ccb      	ldrb	r3, [r1, r3]
 800447c:	f003 031f 	and.w	r3, r3, #31
 8004480:	fa22 f303 	lsr.w	r3, r2, r3
 8004484:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004486:	4b0f      	ldr	r3, [pc, #60]	@ (80044c4 <HAL_Init+0x68>)
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	4a0e      	ldr	r2, [pc, #56]	@ (80044c8 <HAL_Init+0x6c>)
 8004490:	5cd3      	ldrb	r3, [r2, r3]
 8004492:	f003 031f 	and.w	r3, r3, #31
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	fa22 f303 	lsr.w	r3, r2, r3
 800449c:	4a0b      	ldr	r2, [pc, #44]	@ (80044cc <HAL_Init+0x70>)
 800449e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80044a0:	4a0b      	ldr	r2, [pc, #44]	@ (80044d0 <HAL_Init+0x74>)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80044a6:	200f      	movs	r0, #15
 80044a8:	f7fe fa56 	bl	8002958 <HAL_InitTick>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e002      	b.n	80044bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80044b6:	f7fd fabd 	bl	8001a34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	58024400 	.word	0x58024400
 80044c8:	0802bef4 	.word	0x0802bef4
 80044cc:	24000008 	.word	0x24000008
 80044d0:	24000004 	.word	0x24000004

080044d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80044d8:	4b06      	ldr	r3, [pc, #24]	@ (80044f4 <HAL_IncTick+0x20>)
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	461a      	mov	r2, r3
 80044de:	4b06      	ldr	r3, [pc, #24]	@ (80044f8 <HAL_IncTick+0x24>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4413      	add	r3, r2
 80044e4:	4a04      	ldr	r2, [pc, #16]	@ (80044f8 <HAL_IncTick+0x24>)
 80044e6:	6013      	str	r3, [r2, #0]
}
 80044e8:	bf00      	nop
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	24000010 	.word	0x24000010
 80044f8:	240008ec 	.word	0x240008ec

080044fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
  return uwTick;
 8004500:	4b03      	ldr	r3, [pc, #12]	@ (8004510 <HAL_GetTick+0x14>)
 8004502:	681b      	ldr	r3, [r3, #0]
}
 8004504:	4618      	mov	r0, r3
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	240008ec 	.word	0x240008ec

08004514 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800451c:	f7ff ffee 	bl	80044fc <HAL_GetTick>
 8004520:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800452c:	d005      	beq.n	800453a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800452e:	4b0a      	ldr	r3, [pc, #40]	@ (8004558 <HAL_Delay+0x44>)
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	461a      	mov	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4413      	add	r3, r2
 8004538:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800453a:	bf00      	nop
 800453c:	f7ff ffde 	bl	80044fc <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	429a      	cmp	r2, r3
 800454a:	d8f7      	bhi.n	800453c <HAL_Delay+0x28>
  {
  }
}
 800454c:	bf00      	nop
 800454e:	bf00      	nop
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	24000010 	.word	0x24000010

0800455c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8004566:	4b07      	ldr	r3, [pc, #28]	@ (8004584 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	43db      	mvns	r3, r3
 800456e:	401a      	ands	r2, r3
 8004570:	4904      	ldr	r1, [pc, #16]	@ (8004584 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	4313      	orrs	r3, r2
 8004576:	604b      	str	r3, [r1, #4]
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr
 8004584:	58000400 	.word	0x58000400

08004588 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	431a      	orrs	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	609a      	str	r2, [r3, #8]
}
 80045a2:	bf00      	nop
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr

080045ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b083      	sub	sp, #12
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
 80045b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	431a      	orrs	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	609a      	str	r2, [r3, #8]
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b087      	sub	sp, #28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
 80045fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	3360      	adds	r3, #96	@ 0x60
 8004602:	461a      	mov	r2, r3
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4413      	add	r3, r2
 800460a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4a10      	ldr	r2, [pc, #64]	@ (8004650 <LL_ADC_SetOffset+0x60>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d10b      	bne.n	800462c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	4313      	orrs	r3, r2
 8004622:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800462a:	e00b      	b.n	8004644 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	430b      	orrs	r3, r1
 800463e:	431a      	orrs	r2, r3
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	601a      	str	r2, [r3, #0]
}
 8004644:	bf00      	nop
 8004646:	371c      	adds	r7, #28
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	58026000 	.word	0x58026000

08004654 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	3360      	adds	r3, #96	@ 0x60
 8004662:	461a      	mov	r2, r3
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004674:	4618      	mov	r0, r3
 8004676:	3714      	adds	r7, #20
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	f003 031f 	and.w	r3, r3, #31
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	fa01 f303 	lsl.w	r3, r1, r3
 80046a0:	431a      	orrs	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	611a      	str	r2, [r3, #16]
}
 80046a6:	bf00      	nop
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
	...

080046b4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b087      	sub	sp, #28
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4a0c      	ldr	r2, [pc, #48]	@ (80046f4 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d00e      	beq.n	80046e6 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	3360      	adds	r3, #96	@ 0x60
 80046cc:	461a      	mov	r2, r3
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	4413      	add	r3, r2
 80046d4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	431a      	orrs	r2, r3
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	601a      	str	r2, [r3, #0]
  }
}
 80046e6:	bf00      	nop
 80046e8:	371c      	adds	r7, #28
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	58026000 	.word	0x58026000

080046f8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b087      	sub	sp, #28
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	4a0c      	ldr	r2, [pc, #48]	@ (8004738 <LL_ADC_SetOffsetSaturation+0x40>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d10e      	bne.n	800472a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	3360      	adds	r3, #96	@ 0x60
 8004710:	461a      	mov	r2, r3
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4413      	add	r3, r2
 8004718:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	431a      	orrs	r2, r3
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800472a:	bf00      	nop
 800472c:	371c      	adds	r7, #28
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	58026000 	.word	0x58026000

0800473c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800473c:	b480      	push	{r7}
 800473e:	b087      	sub	sp, #28
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	4a0c      	ldr	r2, [pc, #48]	@ (800477c <LL_ADC_SetOffsetSign+0x40>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d10e      	bne.n	800476e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	3360      	adds	r3, #96	@ 0x60
 8004754:	461a      	mov	r2, r3
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	4413      	add	r3, r2
 800475c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	431a      	orrs	r2, r3
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800476e:	bf00      	nop
 8004770:	371c      	adds	r7, #28
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	58026000 	.word	0x58026000

08004780 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004780:	b480      	push	{r7}
 8004782:	b087      	sub	sp, #28
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	3360      	adds	r3, #96	@ 0x60
 8004790:	461a      	mov	r2, r3
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	4a0c      	ldr	r2, [pc, #48]	@ (80047d0 <LL_ADC_SetOffsetState+0x50>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d108      	bne.n	80047b4 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	431a      	orrs	r2, r3
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80047b2:	e007      	b.n	80047c4 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	431a      	orrs	r2, r3
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	601a      	str	r2, [r3, #0]
}
 80047c4:	bf00      	nop
 80047c6:	371c      	adds	r7, #28
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr
 80047d0:	58026000 	.word	0x58026000

080047d4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b087      	sub	sp, #28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	3330      	adds	r3, #48	@ 0x30
 80047e4:	461a      	mov	r2, r3
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	0a1b      	lsrs	r3, r3, #8
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	f003 030c 	and.w	r3, r3, #12
 80047f0:	4413      	add	r3, r2
 80047f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	f003 031f 	and.w	r3, r3, #31
 80047fe:	211f      	movs	r1, #31
 8004800:	fa01 f303 	lsl.w	r3, r1, r3
 8004804:	43db      	mvns	r3, r3
 8004806:	401a      	ands	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	0e9b      	lsrs	r3, r3, #26
 800480c:	f003 011f 	and.w	r1, r3, #31
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	f003 031f 	and.w	r3, r3, #31
 8004816:	fa01 f303 	lsl.w	r3, r1, r3
 800481a:	431a      	orrs	r2, r3
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004820:	bf00      	nop
 8004822:	371c      	adds	r7, #28
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800482c:	b480      	push	{r7}
 800482e:	b087      	sub	sp, #28
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	3314      	adds	r3, #20
 800483c:	461a      	mov	r2, r3
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	0e5b      	lsrs	r3, r3, #25
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	f003 0304 	and.w	r3, r3, #4
 8004848:	4413      	add	r3, r2
 800484a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	0d1b      	lsrs	r3, r3, #20
 8004854:	f003 031f 	and.w	r3, r3, #31
 8004858:	2107      	movs	r1, #7
 800485a:	fa01 f303 	lsl.w	r3, r1, r3
 800485e:	43db      	mvns	r3, r3
 8004860:	401a      	ands	r2, r3
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	0d1b      	lsrs	r3, r3, #20
 8004866:	f003 031f 	and.w	r3, r3, #31
 800486a:	6879      	ldr	r1, [r7, #4]
 800486c:	fa01 f303 	lsl.w	r3, r1, r3
 8004870:	431a      	orrs	r2, r3
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004876:	bf00      	nop
 8004878:	371c      	adds	r7, #28
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
	...

08004884 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4a1a      	ldr	r2, [pc, #104]	@ (80048fc <LL_ADC_SetChannelSingleDiff+0x78>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d115      	bne.n	80048c4 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048a4:	43db      	mvns	r3, r3
 80048a6:	401a      	ands	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f003 0318 	and.w	r3, r3, #24
 80048ae:	4914      	ldr	r1, [pc, #80]	@ (8004900 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80048b0:	40d9      	lsrs	r1, r3
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	400b      	ands	r3, r1
 80048b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048ba:	431a      	orrs	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80048c2:	e014      	b.n	80048ee <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048d0:	43db      	mvns	r3, r3
 80048d2:	401a      	ands	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f003 0318 	and.w	r3, r3, #24
 80048da:	4909      	ldr	r1, [pc, #36]	@ (8004900 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80048dc:	40d9      	lsrs	r1, r3
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	400b      	ands	r3, r1
 80048e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048e6:	431a      	orrs	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 80048ee:	bf00      	nop
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	58026000 	.word	0x58026000
 8004900:	000fffff 	.word	0x000fffff

08004904 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	4b04      	ldr	r3, [pc, #16]	@ (8004924 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004912:	4013      	ands	r3, r2
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	6093      	str	r3, [r2, #8]
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr
 8004924:	5fffffc0 	.word	0x5fffffc0

08004928 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004938:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800493c:	d101      	bne.n	8004942 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800493e:	2301      	movs	r3, #1
 8004940:	e000      	b.n	8004944 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	4b05      	ldr	r3, [pc, #20]	@ (8004974 <LL_ADC_EnableInternalRegulator+0x24>)
 800495e:	4013      	ands	r3, r2
 8004960:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr
 8004974:	6fffffc0 	.word	0x6fffffc0

08004978 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004988:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800498c:	d101      	bne.n	8004992 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800498e:	2301      	movs	r3, #1
 8004990:	e000      	b.n	8004994 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d101      	bne.n	80049b8 <LL_ADC_IsEnabled+0x18>
 80049b4:	2301      	movs	r3, #1
 80049b6:	e000      	b.n	80049ba <LL_ADC_IsEnabled+0x1a>
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b083      	sub	sp, #12
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f003 0304 	and.w	r3, r3, #4
 80049d6:	2b04      	cmp	r3, #4
 80049d8:	d101      	bne.n	80049de <LL_ADC_REG_IsConversionOngoing+0x18>
 80049da:	2301      	movs	r3, #1
 80049dc:	e000      	b.n	80049e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f003 0308 	and.w	r3, r3, #8
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d101      	bne.n	8004a04 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004a00:	2301      	movs	r3, #1
 8004a02:	e000      	b.n	8004a06 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
	...

08004a14 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004a14:	b590      	push	{r4, r7, lr}
 8004a16:	b089      	sub	sp, #36	@ 0x24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004a20:	2300      	movs	r3, #0
 8004a22:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e1ee      	b.n	8004e0c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d109      	bne.n	8004a50 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f7fd f817 	bl	8001a70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7ff ff67 	bl	8004928 <LL_ADC_IsDeepPowerDownEnabled>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d004      	beq.n	8004a6a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7ff ff4d 	bl	8004904 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7ff ff82 	bl	8004978 <LL_ADC_IsInternalRegulatorEnabled>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d114      	bne.n	8004aa4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7ff ff66 	bl	8004950 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a84:	4b8e      	ldr	r3, [pc, #568]	@ (8004cc0 <HAL_ADC_Init+0x2ac>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	099b      	lsrs	r3, r3, #6
 8004a8a:	4a8e      	ldr	r2, [pc, #568]	@ (8004cc4 <HAL_ADC_Init+0x2b0>)
 8004a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a90:	099b      	lsrs	r3, r3, #6
 8004a92:	3301      	adds	r3, #1
 8004a94:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004a96:	e002      	b.n	8004a9e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1f9      	bne.n	8004a98 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7ff ff65 	bl	8004978 <LL_ADC_IsInternalRegulatorEnabled>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10d      	bne.n	8004ad0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ab8:	f043 0210 	orr.w	r2, r3, #16
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ac4:	f043 0201 	orr.w	r2, r3, #1
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff ff76 	bl	80049c6 <LL_ADC_REG_IsConversionOngoing>
 8004ada:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ae0:	f003 0310 	and.w	r3, r3, #16
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f040 8188 	bne.w	8004dfa <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f040 8184 	bne.w	8004dfa <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004af6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004afa:	f043 0202 	orr.w	r2, r3, #2
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7ff ff4a 	bl	80049a0 <LL_ADC_IsEnabled>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d136      	bne.n	8004b80 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a6c      	ldr	r2, [pc, #432]	@ (8004cc8 <HAL_ADC_Init+0x2b4>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d004      	beq.n	8004b26 <HAL_ADC_Init+0x112>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a6a      	ldr	r2, [pc, #424]	@ (8004ccc <HAL_ADC_Init+0x2b8>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d10e      	bne.n	8004b44 <HAL_ADC_Init+0x130>
 8004b26:	4868      	ldr	r0, [pc, #416]	@ (8004cc8 <HAL_ADC_Init+0x2b4>)
 8004b28:	f7ff ff3a 	bl	80049a0 <LL_ADC_IsEnabled>
 8004b2c:	4604      	mov	r4, r0
 8004b2e:	4867      	ldr	r0, [pc, #412]	@ (8004ccc <HAL_ADC_Init+0x2b8>)
 8004b30:	f7ff ff36 	bl	80049a0 <LL_ADC_IsEnabled>
 8004b34:	4603      	mov	r3, r0
 8004b36:	4323      	orrs	r3, r4
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	bf0c      	ite	eq
 8004b3c:	2301      	moveq	r3, #1
 8004b3e:	2300      	movne	r3, #0
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	e008      	b.n	8004b56 <HAL_ADC_Init+0x142>
 8004b44:	4862      	ldr	r0, [pc, #392]	@ (8004cd0 <HAL_ADC_Init+0x2bc>)
 8004b46:	f7ff ff2b 	bl	80049a0 <LL_ADC_IsEnabled>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	bf0c      	ite	eq
 8004b50:	2301      	moveq	r3, #1
 8004b52:	2300      	movne	r3, #0
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d012      	beq.n	8004b80 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a5a      	ldr	r2, [pc, #360]	@ (8004cc8 <HAL_ADC_Init+0x2b4>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d004      	beq.n	8004b6e <HAL_ADC_Init+0x15a>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a58      	ldr	r2, [pc, #352]	@ (8004ccc <HAL_ADC_Init+0x2b8>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d101      	bne.n	8004b72 <HAL_ADC_Init+0x15e>
 8004b6e:	4a59      	ldr	r2, [pc, #356]	@ (8004cd4 <HAL_ADC_Init+0x2c0>)
 8004b70:	e000      	b.n	8004b74 <HAL_ADC_Init+0x160>
 8004b72:	4a59      	ldr	r2, [pc, #356]	@ (8004cd8 <HAL_ADC_Init+0x2c4>)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	4619      	mov	r1, r3
 8004b7a:	4610      	mov	r0, r2
 8004b7c:	f7ff fd04 	bl	8004588 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a52      	ldr	r2, [pc, #328]	@ (8004cd0 <HAL_ADC_Init+0x2bc>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d129      	bne.n	8004bde <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	7e5b      	ldrb	r3, [r3, #25]
 8004b8e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004b94:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8004b9a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d013      	beq.n	8004bcc <HAL_ADC_Init+0x1b8>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	2b0c      	cmp	r3, #12
 8004baa:	d00d      	beq.n	8004bc8 <HAL_ADC_Init+0x1b4>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	2b1c      	cmp	r3, #28
 8004bb2:	d007      	beq.n	8004bc4 <HAL_ADC_Init+0x1b0>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	2b18      	cmp	r3, #24
 8004bba:	d101      	bne.n	8004bc0 <HAL_ADC_Init+0x1ac>
 8004bbc:	2318      	movs	r3, #24
 8004bbe:	e006      	b.n	8004bce <HAL_ADC_Init+0x1ba>
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	e004      	b.n	8004bce <HAL_ADC_Init+0x1ba>
 8004bc4:	2310      	movs	r3, #16
 8004bc6:	e002      	b.n	8004bce <HAL_ADC_Init+0x1ba>
 8004bc8:	2308      	movs	r3, #8
 8004bca:	e000      	b.n	8004bce <HAL_ADC_Init+0x1ba>
 8004bcc:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8004bce:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bd6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	61bb      	str	r3, [r7, #24]
 8004bdc:	e00e      	b.n	8004bfc <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	7e5b      	ldrb	r3, [r3, #25]
 8004be2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004be8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004bee:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bf6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d106      	bne.n	8004c14 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	045b      	lsls	r3, r3, #17
 8004c0e:	69ba      	ldr	r2, [r7, #24]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d009      	beq.n	8004c30 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c20:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c28:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a26      	ldr	r2, [pc, #152]	@ (8004cd0 <HAL_ADC_Init+0x2bc>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d115      	bne.n	8004c66 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68da      	ldr	r2, [r3, #12]
 8004c40:	4b26      	ldr	r3, [pc, #152]	@ (8004cdc <HAL_ADC_Init+0x2c8>)
 8004c42:	4013      	ands	r3, r2
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	6812      	ldr	r2, [r2, #0]
 8004c48:	69b9      	ldr	r1, [r7, #24]
 8004c4a:	430b      	orrs	r3, r1
 8004c4c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	430a      	orrs	r2, r1
 8004c62:	611a      	str	r2, [r3, #16]
 8004c64:	e009      	b.n	8004c7a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68da      	ldr	r2, [r3, #12]
 8004c6c:	4b1c      	ldr	r3, [pc, #112]	@ (8004ce0 <HAL_ADC_Init+0x2cc>)
 8004c6e:	4013      	ands	r3, r2
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	6812      	ldr	r2, [r2, #0]
 8004c74:	69b9      	ldr	r1, [r7, #24]
 8004c76:	430b      	orrs	r3, r1
 8004c78:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7ff fea1 	bl	80049c6 <LL_ADC_REG_IsConversionOngoing>
 8004c84:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7ff feae 	bl	80049ec <LL_ADC_INJ_IsConversionOngoing>
 8004c90:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f040 808e 	bne.w	8004db6 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f040 808a 	bne.w	8004db6 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8004cd0 <HAL_ADC_Init+0x2bc>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d11b      	bne.n	8004ce4 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	7e1b      	ldrb	r3, [r3, #24]
 8004cb0:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004cb8:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	61bb      	str	r3, [r7, #24]
 8004cbe:	e018      	b.n	8004cf2 <HAL_ADC_Init+0x2de>
 8004cc0:	24000004 	.word	0x24000004
 8004cc4:	053e2d63 	.word	0x053e2d63
 8004cc8:	40022000 	.word	0x40022000
 8004ccc:	40022100 	.word	0x40022100
 8004cd0:	58026000 	.word	0x58026000
 8004cd4:	40022300 	.word	0x40022300
 8004cd8:	58026300 	.word	0x58026300
 8004cdc:	fff04007 	.word	0xfff04007
 8004ce0:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	7e1b      	ldrb	r3, [r3, #24]
 8004ce8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68da      	ldr	r2, [r3, #12]
 8004cf8:	4b46      	ldr	r3, [pc, #280]	@ (8004e14 <HAL_ADC_Init+0x400>)
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6812      	ldr	r2, [r2, #0]
 8004d00:	69b9      	ldr	r1, [r7, #24]
 8004d02:	430b      	orrs	r3, r1
 8004d04:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d137      	bne.n	8004d80 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d14:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a3f      	ldr	r2, [pc, #252]	@ (8004e18 <HAL_ADC_Init+0x404>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d116      	bne.n	8004d4e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	691a      	ldr	r2, [r3, #16]
 8004d26:	4b3d      	ldr	r3, [pc, #244]	@ (8004e1c <HAL_ADC_Init+0x408>)
 8004d28:	4013      	ands	r3, r2
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004d32:	4311      	orrs	r1, r2
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004d38:	4311      	orrs	r1, r2
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	431a      	orrs	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0201 	orr.w	r2, r2, #1
 8004d4a:	611a      	str	r2, [r3, #16]
 8004d4c:	e020      	b.n	8004d90 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	691a      	ldr	r2, [r3, #16]
 8004d54:	4b32      	ldr	r3, [pc, #200]	@ (8004e20 <HAL_ADC_Init+0x40c>)
 8004d56:	4013      	ands	r3, r2
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004d5c:	3a01      	subs	r2, #1
 8004d5e:	0411      	lsls	r1, r2, #16
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004d64:	4311      	orrs	r1, r2
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004d6a:	4311      	orrs	r1, r2
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004d70:	430a      	orrs	r2, r1
 8004d72:	431a      	orrs	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f042 0201 	orr.w	r2, r2, #1
 8004d7c:	611a      	str	r2, [r3, #16]
 8004d7e:	e007      	b.n	8004d90 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	691a      	ldr	r2, [r3, #16]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f022 0201 	bic.w	r2, r2, #1
 8004d8e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a1b      	ldr	r2, [pc, #108]	@ (8004e18 <HAL_ADC_Init+0x404>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d002      	beq.n	8004db6 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 fd67 	bl	8005884 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d10c      	bne.n	8004dd8 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc4:	f023 010f 	bic.w	r1, r3, #15
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	69db      	ldr	r3, [r3, #28]
 8004dcc:	1e5a      	subs	r2, r3, #1
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	631a      	str	r2, [r3, #48]	@ 0x30
 8004dd6:	e007      	b.n	8004de8 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 020f 	bic.w	r2, r2, #15
 8004de6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dec:	f023 0303 	bic.w	r3, r3, #3
 8004df0:	f043 0201 	orr.w	r2, r3, #1
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	661a      	str	r2, [r3, #96]	@ 0x60
 8004df8:	e007      	b.n	8004e0a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dfe:	f043 0210 	orr.w	r2, r3, #16
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004e0a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3724      	adds	r7, #36	@ 0x24
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd90      	pop	{r4, r7, pc}
 8004e14:	ffffbffc 	.word	0xffffbffc
 8004e18:	58026000 	.word	0x58026000
 8004e1c:	fc00f81f 	.word	0xfc00f81f
 8004e20:	fc00f81e 	.word	0xfc00f81e

08004e24 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004e24:	b590      	push	{r4, r7, lr}
 8004e26:	b0b9      	sub	sp, #228	@ 0xe4
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004e34:	2300      	movs	r3, #0
 8004e36:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e3e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	4aab      	ldr	r2, [pc, #684]	@ (80050f4 <HAL_ADC_ConfigChannel+0x2d0>)
 8004e46:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d102      	bne.n	8004e58 <HAL_ADC_ConfigChannel+0x34>
 8004e52:	2302      	movs	r3, #2
 8004e54:	f000 bcfe 	b.w	8005854 <HAL_ADC_ConfigChannel+0xa30>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7ff fdae 	bl	80049c6 <LL_ADC_REG_IsConversionOngoing>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f040 84e2 	bne.w	8005836 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	db38      	blt.n	8004eec <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a9e      	ldr	r2, [pc, #632]	@ (80050f8 <HAL_ADC_ConfigChannel+0x2d4>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d033      	beq.n	8004eec <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d108      	bne.n	8004ea2 <HAL_ADC_ConfigChannel+0x7e>
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	0e9b      	lsrs	r3, r3, #26
 8004e96:	f003 031f 	and.w	r3, r3, #31
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea0:	e01d      	b.n	8004ede <HAL_ADC_ConfigChannel+0xba>
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eaa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004eae:	fa93 f3a3 	rbit	r3, r3
 8004eb2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  return result;
 8004eb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004eba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  if (value == 0U)
 8004ebe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <HAL_ADC_ConfigChannel+0xa6>
    return 32U;
 8004ec6:	2320      	movs	r3, #32
 8004ec8:	e004      	b.n	8004ed4 <HAL_ADC_ConfigChannel+0xb0>
  return __builtin_clz(value);
 8004eca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004ece:	fab3 f383 	clz	r3, r3
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	f003 031f 	and.w	r3, r3, #31
 8004ed8:	2201      	movs	r2, #1
 8004eda:	fa02 f303 	lsl.w	r3, r2, r3
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	6812      	ldr	r2, [r2, #0]
 8004ee2:	69d1      	ldr	r1, [r2, #28]
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	6812      	ldr	r2, [r2, #0]
 8004ee8:	430b      	orrs	r3, r1
 8004eea:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6818      	ldr	r0, [r3, #0]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	6859      	ldr	r1, [r3, #4]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	461a      	mov	r2, r3
 8004efa:	f7ff fc6b 	bl	80047d4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7ff fd5f 	bl	80049c6 <LL_ADC_REG_IsConversionOngoing>
 8004f08:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7ff fd6b 	bl	80049ec <LL_ADC_INJ_IsConversionOngoing>
 8004f16:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004f1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f040 8270 	bne.w	8005404 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004f24:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f040 826b 	bne.w	8005404 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6818      	ldr	r0, [r3, #0]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	6819      	ldr	r1, [r3, #0]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	f7ff fc76 	bl	800482c <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a6c      	ldr	r2, [pc, #432]	@ (80050f8 <HAL_ADC_ConfigChannel+0x2d4>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d10d      	bne.n	8004f66 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	695a      	ldr	r2, [r3, #20]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	08db      	lsrs	r3, r3, #3
 8004f56:	f003 0303 	and.w	r3, r3, #3
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004f64:	e032      	b.n	8004fcc <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004f66:	4b65      	ldr	r3, [pc, #404]	@ (80050fc <HAL_ADC_ConfigChannel+0x2d8>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004f6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f72:	d10b      	bne.n	8004f8c <HAL_ADC_ConfigChannel+0x168>
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	695a      	ldr	r2, [r3, #20]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	089b      	lsrs	r3, r3, #2
 8004f80:	f003 0307 	and.w	r3, r3, #7
 8004f84:	005b      	lsls	r3, r3, #1
 8004f86:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8a:	e01d      	b.n	8004fc8 <HAL_ADC_ConfigChannel+0x1a4>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	f003 0310 	and.w	r3, r3, #16
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10b      	bne.n	8004fb2 <HAL_ADC_ConfigChannel+0x18e>
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	695a      	ldr	r2, [r3, #20]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	089b      	lsrs	r3, r3, #2
 8004fa6:	f003 0307 	and.w	r3, r3, #7
 8004faa:	005b      	lsls	r3, r3, #1
 8004fac:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb0:	e00a      	b.n	8004fc8 <HAL_ADC_ConfigChannel+0x1a4>
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	695a      	ldr	r2, [r3, #20]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	089b      	lsrs	r3, r3, #2
 8004fbe:	f003 0304 	and.w	r3, r3, #4
 8004fc2:	005b      	lsls	r3, r3, #1
 8004fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	2b04      	cmp	r3, #4
 8004fd2:	d048      	beq.n	8005066 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6818      	ldr	r0, [r3, #0]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	6919      	ldr	r1, [r3, #16]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004fe4:	f7ff fb04 	bl	80045f0 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a42      	ldr	r2, [pc, #264]	@ (80050f8 <HAL_ADC_ConfigChannel+0x2d4>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d119      	bne.n	8005026 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6818      	ldr	r0, [r3, #0]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	6919      	ldr	r1, [r3, #16]
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	461a      	mov	r2, r3
 8005000:	f7ff fb9c 	bl	800473c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6818      	ldr	r0, [r3, #0]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	6919      	ldr	r1, [r3, #16]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d102      	bne.n	800501c <HAL_ADC_ConfigChannel+0x1f8>
 8005016:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800501a:	e000      	b.n	800501e <HAL_ADC_ConfigChannel+0x1fa>
 800501c:	2300      	movs	r3, #0
 800501e:	461a      	mov	r2, r3
 8005020:	f7ff fb6a 	bl	80046f8 <LL_ADC_SetOffsetSaturation>
 8005024:	e1ee      	b.n	8005404 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6818      	ldr	r0, [r3, #0]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	6919      	ldr	r1, [r3, #16]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005034:	2b01      	cmp	r3, #1
 8005036:	d102      	bne.n	800503e <HAL_ADC_ConfigChannel+0x21a>
 8005038:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800503c:	e000      	b.n	8005040 <HAL_ADC_ConfigChannel+0x21c>
 800503e:	2300      	movs	r3, #0
 8005040:	461a      	mov	r2, r3
 8005042:	f7ff fb37 	bl	80046b4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6818      	ldr	r0, [r3, #0]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	6919      	ldr	r1, [r3, #16]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	7e1b      	ldrb	r3, [r3, #24]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d102      	bne.n	800505c <HAL_ADC_ConfigChannel+0x238>
 8005056:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800505a:	e000      	b.n	800505e <HAL_ADC_ConfigChannel+0x23a>
 800505c:	2300      	movs	r3, #0
 800505e:	461a      	mov	r2, r3
 8005060:	f7ff fb0e 	bl	8004680 <LL_ADC_SetDataRightShift>
 8005064:	e1ce      	b.n	8005404 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a23      	ldr	r2, [pc, #140]	@ (80050f8 <HAL_ADC_ConfigChannel+0x2d4>)
 800506c:	4293      	cmp	r3, r2
 800506e:	f040 8181 	bne.w	8005374 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2100      	movs	r1, #0
 8005078:	4618      	mov	r0, r3
 800507a:	f7ff faeb 	bl	8004654 <LL_ADC_GetOffsetChannel>
 800507e:	4603      	mov	r3, r0
 8005080:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005084:	2b00      	cmp	r3, #0
 8005086:	d10a      	bne.n	800509e <HAL_ADC_ConfigChannel+0x27a>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2100      	movs	r1, #0
 800508e:	4618      	mov	r0, r3
 8005090:	f7ff fae0 	bl	8004654 <LL_ADC_GetOffsetChannel>
 8005094:	4603      	mov	r3, r0
 8005096:	0e9b      	lsrs	r3, r3, #26
 8005098:	f003 021f 	and.w	r2, r3, #31
 800509c:	e01e      	b.n	80050dc <HAL_ADC_ConfigChannel+0x2b8>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2100      	movs	r1, #0
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7ff fad5 	bl	8004654 <LL_ADC_GetOffsetChannel>
 80050aa:	4603      	mov	r3, r0
 80050ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80050b4:	fa93 f3a3 	rbit	r3, r3
 80050b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80050bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80050c0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 80050c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d101      	bne.n	80050d0 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 80050cc:	2320      	movs	r3, #32
 80050ce:	e004      	b.n	80050da <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 80050d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80050d4:	fab3 f383 	clz	r3, r3
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	461a      	mov	r2, r3
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d10b      	bne.n	8005100 <HAL_ADC_ConfigChannel+0x2dc>
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	0e9b      	lsrs	r3, r3, #26
 80050ee:	f003 031f 	and.w	r3, r3, #31
 80050f2:	e01e      	b.n	8005132 <HAL_ADC_ConfigChannel+0x30e>
 80050f4:	47ff0000 	.word	0x47ff0000
 80050f8:	58026000 	.word	0x58026000
 80050fc:	5c001000 	.word	0x5c001000
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005108:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800510c:	fa93 f3a3 	rbit	r3, r3
 8005110:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8005114:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005118:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800511c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8005124:	2320      	movs	r3, #32
 8005126:	e004      	b.n	8005132 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8005128:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800512c:	fab3 f383 	clz	r3, r3
 8005130:	b2db      	uxtb	r3, r3
 8005132:	429a      	cmp	r2, r3
 8005134:	d106      	bne.n	8005144 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2200      	movs	r2, #0
 800513c:	2100      	movs	r1, #0
 800513e:	4618      	mov	r0, r3
 8005140:	f7ff fb1e 	bl	8004780 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2101      	movs	r1, #1
 800514a:	4618      	mov	r0, r3
 800514c:	f7ff fa82 	bl	8004654 <LL_ADC_GetOffsetChannel>
 8005150:	4603      	mov	r3, r0
 8005152:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005156:	2b00      	cmp	r3, #0
 8005158:	d10a      	bne.n	8005170 <HAL_ADC_ConfigChannel+0x34c>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2101      	movs	r1, #1
 8005160:	4618      	mov	r0, r3
 8005162:	f7ff fa77 	bl	8004654 <LL_ADC_GetOffsetChannel>
 8005166:	4603      	mov	r3, r0
 8005168:	0e9b      	lsrs	r3, r3, #26
 800516a:	f003 021f 	and.w	r2, r3, #31
 800516e:	e01e      	b.n	80051ae <HAL_ADC_ConfigChannel+0x38a>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2101      	movs	r1, #1
 8005176:	4618      	mov	r0, r3
 8005178:	f7ff fa6c 	bl	8004654 <LL_ADC_GetOffsetChannel>
 800517c:	4603      	mov	r3, r0
 800517e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005182:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005186:	fa93 f3a3 	rbit	r3, r3
 800518a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800518e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005192:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8005196:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 800519e:	2320      	movs	r3, #32
 80051a0:	e004      	b.n	80051ac <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 80051a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80051a6:	fab3 f383 	clz	r3, r3
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	461a      	mov	r2, r3
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d105      	bne.n	80051c6 <HAL_ADC_ConfigChannel+0x3a2>
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	0e9b      	lsrs	r3, r3, #26
 80051c0:	f003 031f 	and.w	r3, r3, #31
 80051c4:	e018      	b.n	80051f8 <HAL_ADC_ConfigChannel+0x3d4>
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80051d2:	fa93 f3a3 	rbit	r3, r3
 80051d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80051da:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80051de:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80051e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 80051ea:	2320      	movs	r3, #32
 80051ec:	e004      	b.n	80051f8 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 80051ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80051f2:	fab3 f383 	clz	r3, r3
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d106      	bne.n	800520a <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2200      	movs	r2, #0
 8005202:	2101      	movs	r1, #1
 8005204:	4618      	mov	r0, r3
 8005206:	f7ff fabb 	bl	8004780 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2102      	movs	r1, #2
 8005210:	4618      	mov	r0, r3
 8005212:	f7ff fa1f 	bl	8004654 <LL_ADC_GetOffsetChannel>
 8005216:	4603      	mov	r3, r0
 8005218:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10a      	bne.n	8005236 <HAL_ADC_ConfigChannel+0x412>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2102      	movs	r1, #2
 8005226:	4618      	mov	r0, r3
 8005228:	f7ff fa14 	bl	8004654 <LL_ADC_GetOffsetChannel>
 800522c:	4603      	mov	r3, r0
 800522e:	0e9b      	lsrs	r3, r3, #26
 8005230:	f003 021f 	and.w	r2, r3, #31
 8005234:	e01e      	b.n	8005274 <HAL_ADC_ConfigChannel+0x450>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2102      	movs	r1, #2
 800523c:	4618      	mov	r0, r3
 800523e:	f7ff fa09 	bl	8004654 <LL_ADC_GetOffsetChannel>
 8005242:	4603      	mov	r3, r0
 8005244:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005248:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800524c:	fa93 f3a3 	rbit	r3, r3
 8005250:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8005254:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005258:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800525c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8005264:	2320      	movs	r3, #32
 8005266:	e004      	b.n	8005272 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8005268:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800526c:	fab3 f383 	clz	r3, r3
 8005270:	b2db      	uxtb	r3, r3
 8005272:	461a      	mov	r2, r3
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800527c:	2b00      	cmp	r3, #0
 800527e:	d105      	bne.n	800528c <HAL_ADC_ConfigChannel+0x468>
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	0e9b      	lsrs	r3, r3, #26
 8005286:	f003 031f 	and.w	r3, r3, #31
 800528a:	e014      	b.n	80052b6 <HAL_ADC_ConfigChannel+0x492>
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005292:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005294:	fa93 f3a3 	rbit	r3, r3
 8005298:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800529a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800529c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80052a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d101      	bne.n	80052ac <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80052a8:	2320      	movs	r3, #32
 80052aa:	e004      	b.n	80052b6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80052ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80052b0:	fab3 f383 	clz	r3, r3
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d106      	bne.n	80052c8 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2200      	movs	r2, #0
 80052c0:	2102      	movs	r1, #2
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7ff fa5c 	bl	8004780 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2103      	movs	r1, #3
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7ff f9c0 	bl	8004654 <LL_ADC_GetOffsetChannel>
 80052d4:	4603      	mov	r3, r0
 80052d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10a      	bne.n	80052f4 <HAL_ADC_ConfigChannel+0x4d0>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2103      	movs	r1, #3
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7ff f9b5 	bl	8004654 <LL_ADC_GetOffsetChannel>
 80052ea:	4603      	mov	r3, r0
 80052ec:	0e9b      	lsrs	r3, r3, #26
 80052ee:	f003 021f 	and.w	r2, r3, #31
 80052f2:	e017      	b.n	8005324 <HAL_ADC_ConfigChannel+0x500>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2103      	movs	r1, #3
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7ff f9aa 	bl	8004654 <LL_ADC_GetOffsetChannel>
 8005300:	4603      	mov	r3, r0
 8005302:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005304:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005306:	fa93 f3a3 	rbit	r3, r3
 800530a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800530c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800530e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8005310:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8005316:	2320      	movs	r3, #32
 8005318:	e003      	b.n	8005322 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 800531a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800531c:	fab3 f383 	clz	r3, r3
 8005320:	b2db      	uxtb	r3, r3
 8005322:	461a      	mov	r2, r3
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800532c:	2b00      	cmp	r3, #0
 800532e:	d105      	bne.n	800533c <HAL_ADC_ConfigChannel+0x518>
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	0e9b      	lsrs	r3, r3, #26
 8005336:	f003 031f 	and.w	r3, r3, #31
 800533a:	e011      	b.n	8005360 <HAL_ADC_ConfigChannel+0x53c>
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005342:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005344:	fa93 f3a3 	rbit	r3, r3
 8005348:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800534a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800534c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800534e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005350:	2b00      	cmp	r3, #0
 8005352:	d101      	bne.n	8005358 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8005354:	2320      	movs	r3, #32
 8005356:	e003      	b.n	8005360 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8005358:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800535a:	fab3 f383 	clz	r3, r3
 800535e:	b2db      	uxtb	r3, r3
 8005360:	429a      	cmp	r2, r3
 8005362:	d14f      	bne.n	8005404 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2200      	movs	r2, #0
 800536a:	2103      	movs	r1, #3
 800536c:	4618      	mov	r0, r3
 800536e:	f7ff fa07 	bl	8004780 <LL_ADC_SetOffsetState>
 8005372:	e047      	b.n	8005404 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800537a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	069b      	lsls	r3, r3, #26
 8005384:	429a      	cmp	r2, r3
 8005386:	d107      	bne.n	8005398 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005396:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800539e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	069b      	lsls	r3, r3, #26
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d107      	bne.n	80053bc <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80053ba:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80053c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	069b      	lsls	r3, r3, #26
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d107      	bne.n	80053e0 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80053de:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	069b      	lsls	r3, r3, #26
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d107      	bne.n	8005404 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005402:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4618      	mov	r0, r3
 800540a:	f7ff fac9 	bl	80049a0 <LL_ADC_IsEnabled>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	f040 8219 	bne.w	8005848 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6818      	ldr	r0, [r3, #0]
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	6819      	ldr	r1, [r3, #0]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	461a      	mov	r2, r3
 8005424:	f7ff fa2e 	bl	8004884 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	4aa1      	ldr	r2, [pc, #644]	@ (80056b4 <HAL_ADC_ConfigChannel+0x890>)
 800542e:	4293      	cmp	r3, r2
 8005430:	f040 812e 	bne.w	8005690 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005440:	2b00      	cmp	r3, #0
 8005442:	d10b      	bne.n	800545c <HAL_ADC_ConfigChannel+0x638>
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	0e9b      	lsrs	r3, r3, #26
 800544a:	3301      	adds	r3, #1
 800544c:	f003 031f 	and.w	r3, r3, #31
 8005450:	2b09      	cmp	r3, #9
 8005452:	bf94      	ite	ls
 8005454:	2301      	movls	r3, #1
 8005456:	2300      	movhi	r3, #0
 8005458:	b2db      	uxtb	r3, r3
 800545a:	e019      	b.n	8005490 <HAL_ADC_ConfigChannel+0x66c>
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005462:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005464:	fa93 f3a3 	rbit	r3, r3
 8005468:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800546a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800546c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800546e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8005474:	2320      	movs	r3, #32
 8005476:	e003      	b.n	8005480 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8005478:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800547a:	fab3 f383 	clz	r3, r3
 800547e:	b2db      	uxtb	r3, r3
 8005480:	3301      	adds	r3, #1
 8005482:	f003 031f 	and.w	r3, r3, #31
 8005486:	2b09      	cmp	r3, #9
 8005488:	bf94      	ite	ls
 800548a:	2301      	movls	r3, #1
 800548c:	2300      	movhi	r3, #0
 800548e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005490:	2b00      	cmp	r3, #0
 8005492:	d079      	beq.n	8005588 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800549c:	2b00      	cmp	r3, #0
 800549e:	d107      	bne.n	80054b0 <HAL_ADC_ConfigChannel+0x68c>
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	0e9b      	lsrs	r3, r3, #26
 80054a6:	3301      	adds	r3, #1
 80054a8:	069b      	lsls	r3, r3, #26
 80054aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80054ae:	e015      	b.n	80054dc <HAL_ADC_ConfigChannel+0x6b8>
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054b8:	fa93 f3a3 	rbit	r3, r3
 80054bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80054be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054c0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80054c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d101      	bne.n	80054cc <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 80054c8:	2320      	movs	r3, #32
 80054ca:	e003      	b.n	80054d4 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 80054cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054ce:	fab3 f383 	clz	r3, r3
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	3301      	adds	r3, #1
 80054d6:	069b      	lsls	r3, r3, #26
 80054d8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d109      	bne.n	80054fc <HAL_ADC_ConfigChannel+0x6d8>
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	0e9b      	lsrs	r3, r3, #26
 80054ee:	3301      	adds	r3, #1
 80054f0:	f003 031f 	and.w	r3, r3, #31
 80054f4:	2101      	movs	r1, #1
 80054f6:	fa01 f303 	lsl.w	r3, r1, r3
 80054fa:	e017      	b.n	800552c <HAL_ADC_ConfigChannel+0x708>
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005502:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005504:	fa93 f3a3 	rbit	r3, r3
 8005508:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800550a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800550c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800550e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8005514:	2320      	movs	r3, #32
 8005516:	e003      	b.n	8005520 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8005518:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800551a:	fab3 f383 	clz	r3, r3
 800551e:	b2db      	uxtb	r3, r3
 8005520:	3301      	adds	r3, #1
 8005522:	f003 031f 	and.w	r3, r3, #31
 8005526:	2101      	movs	r1, #1
 8005528:	fa01 f303 	lsl.w	r3, r1, r3
 800552c:	ea42 0103 	orr.w	r1, r2, r3
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10a      	bne.n	8005552 <HAL_ADC_ConfigChannel+0x72e>
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	0e9b      	lsrs	r3, r3, #26
 8005542:	3301      	adds	r3, #1
 8005544:	f003 021f 	and.w	r2, r3, #31
 8005548:	4613      	mov	r3, r2
 800554a:	005b      	lsls	r3, r3, #1
 800554c:	4413      	add	r3, r2
 800554e:	051b      	lsls	r3, r3, #20
 8005550:	e018      	b.n	8005584 <HAL_ADC_ConfigChannel+0x760>
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800555a:	fa93 f3a3 	rbit	r3, r3
 800555e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8005560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005562:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8005564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005566:	2b00      	cmp	r3, #0
 8005568:	d101      	bne.n	800556e <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 800556a:	2320      	movs	r3, #32
 800556c:	e003      	b.n	8005576 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 800556e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005570:	fab3 f383 	clz	r3, r3
 8005574:	b2db      	uxtb	r3, r3
 8005576:	3301      	adds	r3, #1
 8005578:	f003 021f 	and.w	r2, r3, #31
 800557c:	4613      	mov	r3, r2
 800557e:	005b      	lsls	r3, r3, #1
 8005580:	4413      	add	r3, r2
 8005582:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005584:	430b      	orrs	r3, r1
 8005586:	e07e      	b.n	8005686 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005590:	2b00      	cmp	r3, #0
 8005592:	d107      	bne.n	80055a4 <HAL_ADC_ConfigChannel+0x780>
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	0e9b      	lsrs	r3, r3, #26
 800559a:	3301      	adds	r3, #1
 800559c:	069b      	lsls	r3, r3, #26
 800559e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80055a2:	e015      	b.n	80055d0 <HAL_ADC_ConfigChannel+0x7ac>
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ac:	fa93 f3a3 	rbit	r3, r3
 80055b0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80055b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80055b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d101      	bne.n	80055c0 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 80055bc:	2320      	movs	r3, #32
 80055be:	e003      	b.n	80055c8 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 80055c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055c2:	fab3 f383 	clz	r3, r3
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	3301      	adds	r3, #1
 80055ca:	069b      	lsls	r3, r3, #26
 80055cc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d109      	bne.n	80055f0 <HAL_ADC_ConfigChannel+0x7cc>
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	0e9b      	lsrs	r3, r3, #26
 80055e2:	3301      	adds	r3, #1
 80055e4:	f003 031f 	and.w	r3, r3, #31
 80055e8:	2101      	movs	r1, #1
 80055ea:	fa01 f303 	lsl.w	r3, r1, r3
 80055ee:	e017      	b.n	8005620 <HAL_ADC_ConfigChannel+0x7fc>
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	fa93 f3a3 	rbit	r3, r3
 80055fc:	61bb      	str	r3, [r7, #24]
  return result;
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005602:	6a3b      	ldr	r3, [r7, #32]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d101      	bne.n	800560c <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8005608:	2320      	movs	r3, #32
 800560a:	e003      	b.n	8005614 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 800560c:	6a3b      	ldr	r3, [r7, #32]
 800560e:	fab3 f383 	clz	r3, r3
 8005612:	b2db      	uxtb	r3, r3
 8005614:	3301      	adds	r3, #1
 8005616:	f003 031f 	and.w	r3, r3, #31
 800561a:	2101      	movs	r1, #1
 800561c:	fa01 f303 	lsl.w	r3, r1, r3
 8005620:	ea42 0103 	orr.w	r1, r2, r3
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10d      	bne.n	800564c <HAL_ADC_ConfigChannel+0x828>
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	0e9b      	lsrs	r3, r3, #26
 8005636:	3301      	adds	r3, #1
 8005638:	f003 021f 	and.w	r2, r3, #31
 800563c:	4613      	mov	r3, r2
 800563e:	005b      	lsls	r3, r3, #1
 8005640:	4413      	add	r3, r2
 8005642:	3b1e      	subs	r3, #30
 8005644:	051b      	lsls	r3, r3, #20
 8005646:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800564a:	e01b      	b.n	8005684 <HAL_ADC_ConfigChannel+0x860>
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	fa93 f3a3 	rbit	r3, r3
 8005658:	60fb      	str	r3, [r7, #12]
  return result;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d101      	bne.n	8005668 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8005664:	2320      	movs	r3, #32
 8005666:	e003      	b.n	8005670 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	fab3 f383 	clz	r3, r3
 800566e:	b2db      	uxtb	r3, r3
 8005670:	3301      	adds	r3, #1
 8005672:	f003 021f 	and.w	r2, r3, #31
 8005676:	4613      	mov	r3, r2
 8005678:	005b      	lsls	r3, r3, #1
 800567a:	4413      	add	r3, r2
 800567c:	3b1e      	subs	r3, #30
 800567e:	051b      	lsls	r3, r3, #20
 8005680:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005684:	430b      	orrs	r3, r1
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	6892      	ldr	r2, [r2, #8]
 800568a:	4619      	mov	r1, r3
 800568c:	f7ff f8ce 	bl	800482c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	f280 80d7 	bge.w	8005848 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a06      	ldr	r2, [pc, #24]	@ (80056b8 <HAL_ADC_ConfigChannel+0x894>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d004      	beq.n	80056ae <HAL_ADC_ConfigChannel+0x88a>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a04      	ldr	r2, [pc, #16]	@ (80056bc <HAL_ADC_ConfigChannel+0x898>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d10a      	bne.n	80056c4 <HAL_ADC_ConfigChannel+0x8a0>
 80056ae:	4b04      	ldr	r3, [pc, #16]	@ (80056c0 <HAL_ADC_ConfigChannel+0x89c>)
 80056b0:	e009      	b.n	80056c6 <HAL_ADC_ConfigChannel+0x8a2>
 80056b2:	bf00      	nop
 80056b4:	47ff0000 	.word	0x47ff0000
 80056b8:	40022000 	.word	0x40022000
 80056bc:	40022100 	.word	0x40022100
 80056c0:	40022300 	.word	0x40022300
 80056c4:	4b65      	ldr	r3, [pc, #404]	@ (800585c <HAL_ADC_ConfigChannel+0xa38>)
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7fe ff84 	bl	80045d4 <LL_ADC_GetCommonPathInternalCh>
 80056cc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a62      	ldr	r2, [pc, #392]	@ (8005860 <HAL_ADC_ConfigChannel+0xa3c>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d004      	beq.n	80056e4 <HAL_ADC_ConfigChannel+0x8c0>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a61      	ldr	r2, [pc, #388]	@ (8005864 <HAL_ADC_ConfigChannel+0xa40>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d10e      	bne.n	8005702 <HAL_ADC_ConfigChannel+0x8de>
 80056e4:	485e      	ldr	r0, [pc, #376]	@ (8005860 <HAL_ADC_ConfigChannel+0xa3c>)
 80056e6:	f7ff f95b 	bl	80049a0 <LL_ADC_IsEnabled>
 80056ea:	4604      	mov	r4, r0
 80056ec:	485d      	ldr	r0, [pc, #372]	@ (8005864 <HAL_ADC_ConfigChannel+0xa40>)
 80056ee:	f7ff f957 	bl	80049a0 <LL_ADC_IsEnabled>
 80056f2:	4603      	mov	r3, r0
 80056f4:	4323      	orrs	r3, r4
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	bf0c      	ite	eq
 80056fa:	2301      	moveq	r3, #1
 80056fc:	2300      	movne	r3, #0
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	e008      	b.n	8005714 <HAL_ADC_ConfigChannel+0x8f0>
 8005702:	4859      	ldr	r0, [pc, #356]	@ (8005868 <HAL_ADC_ConfigChannel+0xa44>)
 8005704:	f7ff f94c 	bl	80049a0 <LL_ADC_IsEnabled>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	bf0c      	ite	eq
 800570e:	2301      	moveq	r3, #1
 8005710:	2300      	movne	r3, #0
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b00      	cmp	r3, #0
 8005716:	f000 8084 	beq.w	8005822 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a53      	ldr	r2, [pc, #332]	@ (800586c <HAL_ADC_ConfigChannel+0xa48>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d132      	bne.n	800578a <HAL_ADC_ConfigChannel+0x966>
 8005724:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005728:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d12c      	bne.n	800578a <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a4c      	ldr	r2, [pc, #304]	@ (8005868 <HAL_ADC_ConfigChannel+0xa44>)
 8005736:	4293      	cmp	r3, r2
 8005738:	f040 8086 	bne.w	8005848 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a47      	ldr	r2, [pc, #284]	@ (8005860 <HAL_ADC_ConfigChannel+0xa3c>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d004      	beq.n	8005750 <HAL_ADC_ConfigChannel+0x92c>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a46      	ldr	r2, [pc, #280]	@ (8005864 <HAL_ADC_ConfigChannel+0xa40>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d101      	bne.n	8005754 <HAL_ADC_ConfigChannel+0x930>
 8005750:	4a47      	ldr	r2, [pc, #284]	@ (8005870 <HAL_ADC_ConfigChannel+0xa4c>)
 8005752:	e000      	b.n	8005756 <HAL_ADC_ConfigChannel+0x932>
 8005754:	4a41      	ldr	r2, [pc, #260]	@ (800585c <HAL_ADC_ConfigChannel+0xa38>)
 8005756:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800575a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800575e:	4619      	mov	r1, r3
 8005760:	4610      	mov	r0, r2
 8005762:	f7fe ff24 	bl	80045ae <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005766:	4b43      	ldr	r3, [pc, #268]	@ (8005874 <HAL_ADC_ConfigChannel+0xa50>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	099b      	lsrs	r3, r3, #6
 800576c:	4a42      	ldr	r2, [pc, #264]	@ (8005878 <HAL_ADC_ConfigChannel+0xa54>)
 800576e:	fba2 2303 	umull	r2, r3, r2, r3
 8005772:	099b      	lsrs	r3, r3, #6
 8005774:	3301      	adds	r3, #1
 8005776:	005b      	lsls	r3, r3, #1
 8005778:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800577a:	e002      	b.n	8005782 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	3b01      	subs	r3, #1
 8005780:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1f9      	bne.n	800577c <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005788:	e05e      	b.n	8005848 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a3b      	ldr	r2, [pc, #236]	@ (800587c <HAL_ADC_ConfigChannel+0xa58>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d120      	bne.n	80057d6 <HAL_ADC_ConfigChannel+0x9b2>
 8005794:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005798:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d11a      	bne.n	80057d6 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a30      	ldr	r2, [pc, #192]	@ (8005868 <HAL_ADC_ConfigChannel+0xa44>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d14e      	bne.n	8005848 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a2c      	ldr	r2, [pc, #176]	@ (8005860 <HAL_ADC_ConfigChannel+0xa3c>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d004      	beq.n	80057be <HAL_ADC_ConfigChannel+0x99a>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a2a      	ldr	r2, [pc, #168]	@ (8005864 <HAL_ADC_ConfigChannel+0xa40>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d101      	bne.n	80057c2 <HAL_ADC_ConfigChannel+0x99e>
 80057be:	4a2c      	ldr	r2, [pc, #176]	@ (8005870 <HAL_ADC_ConfigChannel+0xa4c>)
 80057c0:	e000      	b.n	80057c4 <HAL_ADC_ConfigChannel+0x9a0>
 80057c2:	4a26      	ldr	r2, [pc, #152]	@ (800585c <HAL_ADC_ConfigChannel+0xa38>)
 80057c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80057c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057cc:	4619      	mov	r1, r3
 80057ce:	4610      	mov	r0, r2
 80057d0:	f7fe feed 	bl	80045ae <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80057d4:	e038      	b.n	8005848 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a29      	ldr	r2, [pc, #164]	@ (8005880 <HAL_ADC_ConfigChannel+0xa5c>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d133      	bne.n	8005848 <HAL_ADC_ConfigChannel+0xa24>
 80057e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80057e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d12d      	bne.n	8005848 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a1d      	ldr	r2, [pc, #116]	@ (8005868 <HAL_ADC_ConfigChannel+0xa44>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d128      	bne.n	8005848 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a19      	ldr	r2, [pc, #100]	@ (8005860 <HAL_ADC_ConfigChannel+0xa3c>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d004      	beq.n	800580a <HAL_ADC_ConfigChannel+0x9e6>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a17      	ldr	r2, [pc, #92]	@ (8005864 <HAL_ADC_ConfigChannel+0xa40>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d101      	bne.n	800580e <HAL_ADC_ConfigChannel+0x9ea>
 800580a:	4a19      	ldr	r2, [pc, #100]	@ (8005870 <HAL_ADC_ConfigChannel+0xa4c>)
 800580c:	e000      	b.n	8005810 <HAL_ADC_ConfigChannel+0x9ec>
 800580e:	4a13      	ldr	r2, [pc, #76]	@ (800585c <HAL_ADC_ConfigChannel+0xa38>)
 8005810:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005814:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005818:	4619      	mov	r1, r3
 800581a:	4610      	mov	r0, r2
 800581c:	f7fe fec7 	bl	80045ae <LL_ADC_SetCommonPathInternalCh>
 8005820:	e012      	b.n	8005848 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005826:	f043 0220 	orr.w	r2, r3, #32
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8005834:	e008      	b.n	8005848 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800583a:	f043 0220 	orr.w	r2, r3, #32
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005850:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8005854:	4618      	mov	r0, r3
 8005856:	37e4      	adds	r7, #228	@ 0xe4
 8005858:	46bd      	mov	sp, r7
 800585a:	bd90      	pop	{r4, r7, pc}
 800585c:	58026300 	.word	0x58026300
 8005860:	40022000 	.word	0x40022000
 8005864:	40022100 	.word	0x40022100
 8005868:	58026000 	.word	0x58026000
 800586c:	c7520000 	.word	0xc7520000
 8005870:	40022300 	.word	0x40022300
 8005874:	24000004 	.word	0x24000004
 8005878:	053e2d63 	.word	0x053e2d63
 800587c:	c3210000 	.word	0xc3210000
 8005880:	cb840000 	.word	0xcb840000

08005884 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a6c      	ldr	r2, [pc, #432]	@ (8005a44 <ADC_ConfigureBoostMode+0x1c0>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d004      	beq.n	80058a0 <ADC_ConfigureBoostMode+0x1c>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a6b      	ldr	r2, [pc, #428]	@ (8005a48 <ADC_ConfigureBoostMode+0x1c4>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d109      	bne.n	80058b4 <ADC_ConfigureBoostMode+0x30>
 80058a0:	4b6a      	ldr	r3, [pc, #424]	@ (8005a4c <ADC_ConfigureBoostMode+0x1c8>)
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	bf14      	ite	ne
 80058ac:	2301      	movne	r3, #1
 80058ae:	2300      	moveq	r3, #0
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	e008      	b.n	80058c6 <ADC_ConfigureBoostMode+0x42>
 80058b4:	4b66      	ldr	r3, [pc, #408]	@ (8005a50 <ADC_ConfigureBoostMode+0x1cc>)
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	bf14      	ite	ne
 80058c0:	2301      	movne	r3, #1
 80058c2:	2300      	moveq	r3, #0
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d01c      	beq.n	8005904 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80058ca:	f004 f971 	bl	8009bb0 <HAL_RCC_GetHCLKFreq>
 80058ce:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80058d8:	d010      	beq.n	80058fc <ADC_ConfigureBoostMode+0x78>
 80058da:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80058de:	d873      	bhi.n	80059c8 <ADC_ConfigureBoostMode+0x144>
 80058e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058e4:	d002      	beq.n	80058ec <ADC_ConfigureBoostMode+0x68>
 80058e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80058ea:	d16d      	bne.n	80059c8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	0c1b      	lsrs	r3, r3, #16
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f8:	60fb      	str	r3, [r7, #12]
        break;
 80058fa:	e068      	b.n	80059ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	089b      	lsrs	r3, r3, #2
 8005900:	60fb      	str	r3, [r7, #12]
        break;
 8005902:	e064      	b.n	80059ce <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005904:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8005908:	f04f 0100 	mov.w	r1, #0
 800590c:	f005 fb8e 	bl	800b02c <HAL_RCCEx_GetPeriphCLKFreq>
 8005910:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800591a:	d051      	beq.n	80059c0 <ADC_ConfigureBoostMode+0x13c>
 800591c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8005920:	d854      	bhi.n	80059cc <ADC_ConfigureBoostMode+0x148>
 8005922:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8005926:	d047      	beq.n	80059b8 <ADC_ConfigureBoostMode+0x134>
 8005928:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800592c:	d84e      	bhi.n	80059cc <ADC_ConfigureBoostMode+0x148>
 800592e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8005932:	d03d      	beq.n	80059b0 <ADC_ConfigureBoostMode+0x12c>
 8005934:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8005938:	d848      	bhi.n	80059cc <ADC_ConfigureBoostMode+0x148>
 800593a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800593e:	d033      	beq.n	80059a8 <ADC_ConfigureBoostMode+0x124>
 8005940:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005944:	d842      	bhi.n	80059cc <ADC_ConfigureBoostMode+0x148>
 8005946:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800594a:	d029      	beq.n	80059a0 <ADC_ConfigureBoostMode+0x11c>
 800594c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8005950:	d83c      	bhi.n	80059cc <ADC_ConfigureBoostMode+0x148>
 8005952:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005956:	d01a      	beq.n	800598e <ADC_ConfigureBoostMode+0x10a>
 8005958:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800595c:	d836      	bhi.n	80059cc <ADC_ConfigureBoostMode+0x148>
 800595e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005962:	d014      	beq.n	800598e <ADC_ConfigureBoostMode+0x10a>
 8005964:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005968:	d830      	bhi.n	80059cc <ADC_ConfigureBoostMode+0x148>
 800596a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800596e:	d00e      	beq.n	800598e <ADC_ConfigureBoostMode+0x10a>
 8005970:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005974:	d82a      	bhi.n	80059cc <ADC_ConfigureBoostMode+0x148>
 8005976:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800597a:	d008      	beq.n	800598e <ADC_ConfigureBoostMode+0x10a>
 800597c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005980:	d824      	bhi.n	80059cc <ADC_ConfigureBoostMode+0x148>
 8005982:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005986:	d002      	beq.n	800598e <ADC_ConfigureBoostMode+0x10a>
 8005988:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800598c:	d11e      	bne.n	80059cc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	0c9b      	lsrs	r3, r3, #18
 8005994:	005b      	lsls	r3, r3, #1
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	fbb2 f3f3 	udiv	r3, r2, r3
 800599c:	60fb      	str	r3, [r7, #12]
        break;
 800599e:	e016      	b.n	80059ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	091b      	lsrs	r3, r3, #4
 80059a4:	60fb      	str	r3, [r7, #12]
        break;
 80059a6:	e012      	b.n	80059ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	095b      	lsrs	r3, r3, #5
 80059ac:	60fb      	str	r3, [r7, #12]
        break;
 80059ae:	e00e      	b.n	80059ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	099b      	lsrs	r3, r3, #6
 80059b4:	60fb      	str	r3, [r7, #12]
        break;
 80059b6:	e00a      	b.n	80059ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	09db      	lsrs	r3, r3, #7
 80059bc:	60fb      	str	r3, [r7, #12]
        break;
 80059be:	e006      	b.n	80059ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	0a1b      	lsrs	r3, r3, #8
 80059c4:	60fb      	str	r3, [r7, #12]
        break;
 80059c6:	e002      	b.n	80059ce <ADC_ConfigureBoostMode+0x14a>
        break;
 80059c8:	bf00      	nop
 80059ca:	e000      	b.n	80059ce <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80059cc:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	085b      	lsrs	r3, r3, #1
 80059d2:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	4a1f      	ldr	r2, [pc, #124]	@ (8005a54 <ADC_ConfigureBoostMode+0x1d0>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d808      	bhi.n	80059ee <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	689a      	ldr	r2, [r3, #8]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80059ea:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80059ec:	e025      	b.n	8005a3a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	4a19      	ldr	r2, [pc, #100]	@ (8005a58 <ADC_ConfigureBoostMode+0x1d4>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d80a      	bhi.n	8005a0c <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a08:	609a      	str	r2, [r3, #8]
}
 8005a0a:	e016      	b.n	8005a3a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	4a13      	ldr	r2, [pc, #76]	@ (8005a5c <ADC_ConfigureBoostMode+0x1d8>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d80a      	bhi.n	8005a2a <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a26:	609a      	str	r2, [r3, #8]
}
 8005a28:	e007      	b.n	8005a3a <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	689a      	ldr	r2, [r3, #8]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8005a38:	609a      	str	r2, [r3, #8]
}
 8005a3a:	bf00      	nop
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	40022000 	.word	0x40022000
 8005a48:	40022100 	.word	0x40022100
 8005a4c:	40022300 	.word	0x40022300
 8005a50:	58026300 	.word	0x58026300
 8005a54:	005f5e10 	.word	0x005f5e10
 8005a58:	00bebc20 	.word	0x00bebc20
 8005a5c:	017d7840 	.word	0x017d7840

08005a60 <LL_ADC_IsEnabled>:
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f003 0301 	and.w	r3, r3, #1
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d101      	bne.n	8005a78 <LL_ADC_IsEnabled+0x18>
 8005a74:	2301      	movs	r3, #1
 8005a76:	e000      	b.n	8005a7a <LL_ADC_IsEnabled+0x1a>
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	370c      	adds	r7, #12
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <LL_ADC_REG_IsConversionOngoing>:
{
 8005a86:	b480      	push	{r7}
 8005a88:	b083      	sub	sp, #12
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f003 0304 	and.w	r3, r3, #4
 8005a96:	2b04      	cmp	r3, #4
 8005a98:	d101      	bne.n	8005a9e <LL_ADC_REG_IsConversionOngoing+0x18>
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e000      	b.n	8005aa0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005aac:	b590      	push	{r4, r7, lr}
 8005aae:	b0a3      	sub	sp, #140	@ 0x8c
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d101      	bne.n	8005aca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005ac6:	2302      	movs	r3, #2
 8005ac8:	e0c1      	b.n	8005c4e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a5e      	ldr	r2, [pc, #376]	@ (8005c58 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d102      	bne.n	8005aea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005ae4:	4b5d      	ldr	r3, [pc, #372]	@ (8005c5c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005ae6:	60fb      	str	r3, [r7, #12]
 8005ae8:	e001      	b.n	8005aee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005aea:	2300      	movs	r3, #0
 8005aec:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d10b      	bne.n	8005b0c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005af8:	f043 0220 	orr.w	r2, r3, #32
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e0a0      	b.n	8005c4e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7ff ffb9 	bl	8005a86 <LL_ADC_REG_IsConversionOngoing>
 8005b14:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f7ff ffb2 	bl	8005a86 <LL_ADC_REG_IsConversionOngoing>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f040 8081 	bne.w	8005c2c <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005b2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d17c      	bne.n	8005c2c <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a48      	ldr	r2, [pc, #288]	@ (8005c58 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d004      	beq.n	8005b46 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a46      	ldr	r2, [pc, #280]	@ (8005c5c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d101      	bne.n	8005b4a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8005b46:	4b46      	ldr	r3, [pc, #280]	@ (8005c60 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005b48:	e000      	b.n	8005b4c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8005b4a:	4b46      	ldr	r3, [pc, #280]	@ (8005c64 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005b4c:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d039      	beq.n	8005bca <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005b56:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	431a      	orrs	r2, r3
 8005b64:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005b66:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a3a      	ldr	r2, [pc, #232]	@ (8005c58 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d004      	beq.n	8005b7c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a39      	ldr	r2, [pc, #228]	@ (8005c5c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d10e      	bne.n	8005b9a <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8005b7c:	4836      	ldr	r0, [pc, #216]	@ (8005c58 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005b7e:	f7ff ff6f 	bl	8005a60 <LL_ADC_IsEnabled>
 8005b82:	4604      	mov	r4, r0
 8005b84:	4835      	ldr	r0, [pc, #212]	@ (8005c5c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005b86:	f7ff ff6b 	bl	8005a60 <LL_ADC_IsEnabled>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	4323      	orrs	r3, r4
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	bf0c      	ite	eq
 8005b92:	2301      	moveq	r3, #1
 8005b94:	2300      	movne	r3, #0
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	e008      	b.n	8005bac <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8005b9a:	4833      	ldr	r0, [pc, #204]	@ (8005c68 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005b9c:	f7ff ff60 	bl	8005a60 <LL_ADC_IsEnabled>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	bf0c      	ite	eq
 8005ba6:	2301      	moveq	r3, #1
 8005ba8:	2300      	movne	r3, #0
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d047      	beq.n	8005c40 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005bb0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005bb2:	689a      	ldr	r2, [r3, #8]
 8005bb4:	4b2d      	ldr	r3, [pc, #180]	@ (8005c6c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	683a      	ldr	r2, [r7, #0]
 8005bba:	6811      	ldr	r1, [r2, #0]
 8005bbc:	683a      	ldr	r2, [r7, #0]
 8005bbe:	6892      	ldr	r2, [r2, #8]
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005bc6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005bc8:	e03a      	b.n	8005c40 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005bca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005bd2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005bd4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a1f      	ldr	r2, [pc, #124]	@ (8005c58 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d004      	beq.n	8005bea <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a1d      	ldr	r2, [pc, #116]	@ (8005c5c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d10e      	bne.n	8005c08 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8005bea:	481b      	ldr	r0, [pc, #108]	@ (8005c58 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005bec:	f7ff ff38 	bl	8005a60 <LL_ADC_IsEnabled>
 8005bf0:	4604      	mov	r4, r0
 8005bf2:	481a      	ldr	r0, [pc, #104]	@ (8005c5c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005bf4:	f7ff ff34 	bl	8005a60 <LL_ADC_IsEnabled>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	4323      	orrs	r3, r4
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	bf0c      	ite	eq
 8005c00:	2301      	moveq	r3, #1
 8005c02:	2300      	movne	r3, #0
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	e008      	b.n	8005c1a <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8005c08:	4817      	ldr	r0, [pc, #92]	@ (8005c68 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005c0a:	f7ff ff29 	bl	8005a60 <LL_ADC_IsEnabled>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	bf0c      	ite	eq
 8005c14:	2301      	moveq	r3, #1
 8005c16:	2300      	movne	r3, #0
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d010      	beq.n	8005c40 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005c1e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005c20:	689a      	ldr	r2, [r3, #8]
 8005c22:	4b12      	ldr	r3, [pc, #72]	@ (8005c6c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005c24:	4013      	ands	r3, r2
 8005c26:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005c28:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005c2a:	e009      	b.n	8005c40 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c30:	f043 0220 	orr.w	r2, r3, #32
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8005c3e:	e000      	b.n	8005c42 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005c40:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005c4a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	378c      	adds	r7, #140	@ 0x8c
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd90      	pop	{r4, r7, pc}
 8005c56:	bf00      	nop
 8005c58:	40022000 	.word	0x40022000
 8005c5c:	40022100 	.word	0x40022100
 8005c60:	40022300 	.word	0x40022300
 8005c64:	58026300 	.word	0x58026300
 8005c68:	58026000 	.word	0x58026000
 8005c6c:	fffff0e0 	.word	0xfffff0e0

08005c70 <__NVIC_SetPriorityGrouping>:
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f003 0307 	and.w	r3, r3, #7
 8005c7e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c80:	4b0b      	ldr	r3, [pc, #44]	@ (8005cb0 <__NVIC_SetPriorityGrouping+0x40>)
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005c98:	4b06      	ldr	r3, [pc, #24]	@ (8005cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c9e:	4a04      	ldr	r2, [pc, #16]	@ (8005cb0 <__NVIC_SetPriorityGrouping+0x40>)
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	60d3      	str	r3, [r2, #12]
}
 8005ca4:	bf00      	nop
 8005ca6:	3714      	adds	r7, #20
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	e000ed00 	.word	0xe000ed00
 8005cb4:	05fa0000 	.word	0x05fa0000

08005cb8 <__NVIC_GetPriorityGrouping>:
{
 8005cb8:	b480      	push	{r7}
 8005cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005cbc:	4b04      	ldr	r3, [pc, #16]	@ (8005cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	0a1b      	lsrs	r3, r3, #8
 8005cc2:	f003 0307 	and.w	r3, r3, #7
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr
 8005cd0:	e000ed00 	.word	0xe000ed00

08005cd4 <__NVIC_EnableIRQ>:
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	4603      	mov	r3, r0
 8005cdc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005cde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	db0b      	blt.n	8005cfe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ce6:	88fb      	ldrh	r3, [r7, #6]
 8005ce8:	f003 021f 	and.w	r2, r3, #31
 8005cec:	4907      	ldr	r1, [pc, #28]	@ (8005d0c <__NVIC_EnableIRQ+0x38>)
 8005cee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005cf2:	095b      	lsrs	r3, r3, #5
 8005cf4:	2001      	movs	r0, #1
 8005cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8005cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005cfe:	bf00      	nop
 8005d00:	370c      	adds	r7, #12
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	e000e100 	.word	0xe000e100

08005d10 <__NVIC_SetPriority>:
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	4603      	mov	r3, r0
 8005d18:	6039      	str	r1, [r7, #0]
 8005d1a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005d1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	db0a      	blt.n	8005d3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	b2da      	uxtb	r2, r3
 8005d28:	490c      	ldr	r1, [pc, #48]	@ (8005d5c <__NVIC_SetPriority+0x4c>)
 8005d2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d2e:	0112      	lsls	r2, r2, #4
 8005d30:	b2d2      	uxtb	r2, r2
 8005d32:	440b      	add	r3, r1
 8005d34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005d38:	e00a      	b.n	8005d50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	b2da      	uxtb	r2, r3
 8005d3e:	4908      	ldr	r1, [pc, #32]	@ (8005d60 <__NVIC_SetPriority+0x50>)
 8005d40:	88fb      	ldrh	r3, [r7, #6]
 8005d42:	f003 030f 	and.w	r3, r3, #15
 8005d46:	3b04      	subs	r3, #4
 8005d48:	0112      	lsls	r2, r2, #4
 8005d4a:	b2d2      	uxtb	r2, r2
 8005d4c:	440b      	add	r3, r1
 8005d4e:	761a      	strb	r2, [r3, #24]
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr
 8005d5c:	e000e100 	.word	0xe000e100
 8005d60:	e000ed00 	.word	0xe000ed00

08005d64 <NVIC_EncodePriority>:
{
 8005d64:	b480      	push	{r7}
 8005d66:	b089      	sub	sp, #36	@ 0x24
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f003 0307 	and.w	r3, r3, #7
 8005d76:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	f1c3 0307 	rsb	r3, r3, #7
 8005d7e:	2b04      	cmp	r3, #4
 8005d80:	bf28      	it	cs
 8005d82:	2304      	movcs	r3, #4
 8005d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	3304      	adds	r3, #4
 8005d8a:	2b06      	cmp	r3, #6
 8005d8c:	d902      	bls.n	8005d94 <NVIC_EncodePriority+0x30>
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	3b03      	subs	r3, #3
 8005d92:	e000      	b.n	8005d96 <NVIC_EncodePriority+0x32>
 8005d94:	2300      	movs	r3, #0
 8005d96:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d98:	f04f 32ff 	mov.w	r2, #4294967295
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005da2:	43da      	mvns	r2, r3
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	401a      	ands	r2, r3
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005dac:	f04f 31ff 	mov.w	r1, #4294967295
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	fa01 f303 	lsl.w	r3, r1, r3
 8005db6:	43d9      	mvns	r1, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005dbc:	4313      	orrs	r3, r2
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3724      	adds	r7, #36	@ 0x24
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b082      	sub	sp, #8
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f7ff ff4c 	bl	8005c70 <__NVIC_SetPriorityGrouping>
}
 8005dd8:	bf00      	nop
 8005dda:	3708      	adds	r7, #8
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	4603      	mov	r3, r0
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
 8005dec:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005dee:	f7ff ff63 	bl	8005cb8 <__NVIC_GetPriorityGrouping>
 8005df2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	68b9      	ldr	r1, [r7, #8]
 8005df8:	6978      	ldr	r0, [r7, #20]
 8005dfa:	f7ff ffb3 	bl	8005d64 <NVIC_EncodePriority>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005e04:	4611      	mov	r1, r2
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7ff ff82 	bl	8005d10 <__NVIC_SetPriority>
}
 8005e0c:	bf00      	nop
 8005e0e:	3718      	adds	r7, #24
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7ff ff56 	bl	8005cd4 <__NVIC_EnableIRQ>
}
 8005e28:	bf00      	nop
 8005e2a:	3708      	adds	r7, #8
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005e30:	b480      	push	{r7}
 8005e32:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8005e34:	f3bf 8f5f 	dmb	sy
}
 8005e38:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005e3a:	4b07      	ldr	r3, [pc, #28]	@ (8005e58 <HAL_MPU_Disable+0x28>)
 8005e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e3e:	4a06      	ldr	r2, [pc, #24]	@ (8005e58 <HAL_MPU_Disable+0x28>)
 8005e40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e44:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8005e46:	4b05      	ldr	r3, [pc, #20]	@ (8005e5c <HAL_MPU_Disable+0x2c>)
 8005e48:	2200      	movs	r2, #0
 8005e4a:	605a      	str	r2, [r3, #4]
}
 8005e4c:	bf00      	nop
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	e000ed00 	.word	0xe000ed00
 8005e5c:	e000ed90 	.word	0xe000ed90

08005e60 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8005e68:	4a0b      	ldr	r2, [pc, #44]	@ (8005e98 <HAL_MPU_Enable+0x38>)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f043 0301 	orr.w	r3, r3, #1
 8005e70:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8005e72:	4b0a      	ldr	r3, [pc, #40]	@ (8005e9c <HAL_MPU_Enable+0x3c>)
 8005e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e76:	4a09      	ldr	r2, [pc, #36]	@ (8005e9c <HAL_MPU_Enable+0x3c>)
 8005e78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e7c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8005e7e:	f3bf 8f4f 	dsb	sy
}
 8005e82:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005e84:	f3bf 8f6f 	isb	sy
}
 8005e88:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8005e8a:	bf00      	nop
 8005e8c:	370c      	adds	r7, #12
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	e000ed90 	.word	0xe000ed90
 8005e9c:	e000ed00 	.word	0xe000ed00

08005ea0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	785a      	ldrb	r2, [r3, #1]
 8005eac:	4b1b      	ldr	r3, [pc, #108]	@ (8005f1c <HAL_MPU_ConfigRegion+0x7c>)
 8005eae:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8005eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8005f1c <HAL_MPU_ConfigRegion+0x7c>)
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	4a19      	ldr	r2, [pc, #100]	@ (8005f1c <HAL_MPU_ConfigRegion+0x7c>)
 8005eb6:	f023 0301 	bic.w	r3, r3, #1
 8005eba:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8005ebc:	4a17      	ldr	r2, [pc, #92]	@ (8005f1c <HAL_MPU_ConfigRegion+0x7c>)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	7b1b      	ldrb	r3, [r3, #12]
 8005ec8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	7adb      	ldrb	r3, [r3, #11]
 8005ece:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005ed0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	7a9b      	ldrb	r3, [r3, #10]
 8005ed6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005ed8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	7b5b      	ldrb	r3, [r3, #13]
 8005ede:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005ee0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	7b9b      	ldrb	r3, [r3, #14]
 8005ee6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005ee8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	7bdb      	ldrb	r3, [r3, #15]
 8005eee:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005ef0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	7a5b      	ldrb	r3, [r3, #9]
 8005ef6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005ef8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	7a1b      	ldrb	r3, [r3, #8]
 8005efe:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005f00:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	7812      	ldrb	r2, [r2, #0]
 8005f06:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005f08:	4a04      	ldr	r2, [pc, #16]	@ (8005f1c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005f0a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005f0c:	6113      	str	r3, [r2, #16]
}
 8005f0e:	bf00      	nop
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	e000ed90 	.word	0xe000ed90

08005f20 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d101      	bne.n	8005f32 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e054      	b.n	8005fdc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	7f5b      	ldrb	r3, [r3, #29]
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d105      	bne.n	8005f48 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7fb fe96 	bl	8001c74 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	791b      	ldrb	r3, [r3, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d10c      	bne.n	8005f70 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a22      	ldr	r2, [pc, #136]	@ (8005fe4 <HAL_CRC_Init+0xc4>)
 8005f5c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	689a      	ldr	r2, [r3, #8]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f022 0218 	bic.w	r2, r2, #24
 8005f6c:	609a      	str	r2, [r3, #8]
 8005f6e:	e00c      	b.n	8005f8a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6899      	ldr	r1, [r3, #8]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	461a      	mov	r2, r3
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 f834 	bl	8005fe8 <HAL_CRCEx_Polynomial_Set>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d001      	beq.n	8005f8a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e028      	b.n	8005fdc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	795b      	ldrb	r3, [r3, #5]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d105      	bne.n	8005f9e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f04f 32ff 	mov.w	r2, #4294967295
 8005f9a:	611a      	str	r2, [r3, #16]
 8005f9c:	e004      	b.n	8005fa8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	6912      	ldr	r2, [r2, #16]
 8005fa6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	695a      	ldr	r2, [r3, #20]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	430a      	orrs	r2, r1
 8005fbc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	699a      	ldr	r2, [r3, #24]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	430a      	orrs	r2, r1
 8005fd2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3708      	adds	r7, #8
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	04c11db7 	.word	0x04c11db7

08005fe8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b087      	sub	sp, #28
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005ff8:	231f      	movs	r3, #31
 8005ffa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	2b00      	cmp	r3, #0
 8006004:	d102      	bne.n	800600c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	75fb      	strb	r3, [r7, #23]
 800600a:	e063      	b.n	80060d4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800600c:	bf00      	nop
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	1e5a      	subs	r2, r3, #1
 8006012:	613a      	str	r2, [r7, #16]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d009      	beq.n	800602c <HAL_CRCEx_Polynomial_Set+0x44>
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	f003 031f 	and.w	r3, r3, #31
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	fa22 f303 	lsr.w	r3, r2, r3
 8006024:	f003 0301 	and.w	r3, r3, #1
 8006028:	2b00      	cmp	r3, #0
 800602a:	d0f0      	beq.n	800600e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2b18      	cmp	r3, #24
 8006030:	d846      	bhi.n	80060c0 <HAL_CRCEx_Polynomial_Set+0xd8>
 8006032:	a201      	add	r2, pc, #4	@ (adr r2, 8006038 <HAL_CRCEx_Polynomial_Set+0x50>)
 8006034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006038:	080060c7 	.word	0x080060c7
 800603c:	080060c1 	.word	0x080060c1
 8006040:	080060c1 	.word	0x080060c1
 8006044:	080060c1 	.word	0x080060c1
 8006048:	080060c1 	.word	0x080060c1
 800604c:	080060c1 	.word	0x080060c1
 8006050:	080060c1 	.word	0x080060c1
 8006054:	080060c1 	.word	0x080060c1
 8006058:	080060b5 	.word	0x080060b5
 800605c:	080060c1 	.word	0x080060c1
 8006060:	080060c1 	.word	0x080060c1
 8006064:	080060c1 	.word	0x080060c1
 8006068:	080060c1 	.word	0x080060c1
 800606c:	080060c1 	.word	0x080060c1
 8006070:	080060c1 	.word	0x080060c1
 8006074:	080060c1 	.word	0x080060c1
 8006078:	080060a9 	.word	0x080060a9
 800607c:	080060c1 	.word	0x080060c1
 8006080:	080060c1 	.word	0x080060c1
 8006084:	080060c1 	.word	0x080060c1
 8006088:	080060c1 	.word	0x080060c1
 800608c:	080060c1 	.word	0x080060c1
 8006090:	080060c1 	.word	0x080060c1
 8006094:	080060c1 	.word	0x080060c1
 8006098:	0800609d 	.word	0x0800609d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	2b06      	cmp	r3, #6
 80060a0:	d913      	bls.n	80060ca <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80060a6:	e010      	b.n	80060ca <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	2b07      	cmp	r3, #7
 80060ac:	d90f      	bls.n	80060ce <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80060b2:	e00c      	b.n	80060ce <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	2b0f      	cmp	r3, #15
 80060b8:	d90b      	bls.n	80060d2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80060be:	e008      	b.n	80060d2 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	75fb      	strb	r3, [r7, #23]
        break;
 80060c4:	e006      	b.n	80060d4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80060c6:	bf00      	nop
 80060c8:	e004      	b.n	80060d4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80060ca:	bf00      	nop
 80060cc:	e002      	b.n	80060d4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80060ce:	bf00      	nop
 80060d0:	e000      	b.n	80060d4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80060d2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80060d4:	7dfb      	ldrb	r3, [r7, #23]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10d      	bne.n	80060f6 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f023 0118 	bic.w	r1, r3, #24
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	430a      	orrs	r2, r1
 80060f4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80060f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	371c      	adds	r7, #28
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d101      	bne.n	8006116 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e014      	b.n	8006140 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	791b      	ldrb	r3, [r3, #4]
 800611a:	b2db      	uxtb	r3, r3
 800611c:	2b00      	cmp	r3, #0
 800611e:	d105      	bne.n	800612c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f7fb fdc6 	bl	8001cb8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2202      	movs	r2, #2
 8006130:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800615e:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d01d      	beq.n	80061a6 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d018      	beq.n	80061a6 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2204      	movs	r2, #4
 8006178:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	f043 0201 	orr.w	r2, r3, #1
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800618e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800619e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 f827 	bl	80061f4 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d01d      	beq.n	80061ec <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d018      	beq.n	80061ec <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2204      	movs	r2, #4
 80061be:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	f043 0202 	orr.w	r2, r3, #2
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80061d4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80061e4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 f950 	bl	800648c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80061ec:	bf00      	nop
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b08a      	sub	sp, #40	@ 0x28
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006214:	2300      	movs	r3, #0
 8006216:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d002      	beq.n	8006226 <HAL_DAC_ConfigChannel+0x1e>
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d101      	bne.n	800622a <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e12a      	b.n	8006480 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	795b      	ldrb	r3, [r3, #5]
 800622e:	2b01      	cmp	r3, #1
 8006230:	d101      	bne.n	8006236 <HAL_DAC_ConfigChannel+0x2e>
 8006232:	2302      	movs	r3, #2
 8006234:	e124      	b.n	8006480 <HAL_DAC_ConfigChannel+0x278>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2201      	movs	r2, #1
 800623a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2202      	movs	r2, #2
 8006240:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2b04      	cmp	r3, #4
 8006248:	d17a      	bne.n	8006340 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800624a:	f7fe f957 	bl	80044fc <HAL_GetTick>
 800624e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d13d      	bne.n	80062d2 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006256:	e018      	b.n	800628a <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006258:	f7fe f950 	bl	80044fc <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	2b01      	cmp	r3, #1
 8006264:	d911      	bls.n	800628a <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800626c:	4b86      	ldr	r3, [pc, #536]	@ (8006488 <HAL_DAC_ConfigChannel+0x280>)
 800626e:	4013      	ands	r3, r2
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00a      	beq.n	800628a <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	f043 0208 	orr.w	r2, r3, #8
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2203      	movs	r2, #3
 8006284:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e0fa      	b.n	8006480 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006290:	4b7d      	ldr	r3, [pc, #500]	@ (8006488 <HAL_DAC_ConfigChannel+0x280>)
 8006292:	4013      	ands	r3, r2
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1df      	bne.n	8006258 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	6992      	ldr	r2, [r2, #24]
 80062a0:	641a      	str	r2, [r3, #64]	@ 0x40
 80062a2:	e020      	b.n	80062e6 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80062a4:	f7fe f92a 	bl	80044fc <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d90f      	bls.n	80062d2 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	da0a      	bge.n	80062d2 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	f043 0208 	orr.w	r2, r3, #8
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2203      	movs	r2, #3
 80062cc:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e0d6      	b.n	8006480 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062d8:	2b00      	cmp	r3, #0
 80062da:	dbe3      	blt.n	80062a4 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68ba      	ldr	r2, [r7, #8]
 80062e2:	6992      	ldr	r2, [r2, #24]
 80062e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f003 0310 	and.w	r3, r3, #16
 80062f2:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80062f6:	fa01 f303 	lsl.w	r3, r1, r3
 80062fa:	43db      	mvns	r3, r3
 80062fc:	ea02 0103 	and.w	r1, r2, r3
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	69da      	ldr	r2, [r3, #28]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f003 0310 	and.w	r3, r3, #16
 800630a:	409a      	lsls	r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	430a      	orrs	r2, r1
 8006312:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f003 0310 	and.w	r3, r3, #16
 8006320:	21ff      	movs	r1, #255	@ 0xff
 8006322:	fa01 f303 	lsl.w	r3, r1, r3
 8006326:	43db      	mvns	r3, r3
 8006328:	ea02 0103 	and.w	r1, r2, r3
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	6a1a      	ldr	r2, [r3, #32]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f003 0310 	and.w	r3, r3, #16
 8006336:	409a      	lsls	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	430a      	orrs	r2, r1
 800633e:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d11d      	bne.n	8006384 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800634e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f003 0310 	and.w	r3, r3, #16
 8006356:	221f      	movs	r2, #31
 8006358:	fa02 f303 	lsl.w	r3, r2, r3
 800635c:	43db      	mvns	r3, r3
 800635e:	69ba      	ldr	r2, [r7, #24]
 8006360:	4013      	ands	r3, r2
 8006362:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	695b      	ldr	r3, [r3, #20]
 8006368:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f003 0310 	and.w	r3, r3, #16
 8006370:	697a      	ldr	r2, [r7, #20]
 8006372:	fa02 f303 	lsl.w	r3, r2, r3
 8006376:	69ba      	ldr	r2, [r7, #24]
 8006378:	4313      	orrs	r3, r2
 800637a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	69ba      	ldr	r2, [r7, #24]
 8006382:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800638a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f003 0310 	and.w	r3, r3, #16
 8006392:	2207      	movs	r2, #7
 8006394:	fa02 f303 	lsl.w	r3, r2, r3
 8006398:	43db      	mvns	r3, r3
 800639a:	69ba      	ldr	r2, [r7, #24]
 800639c:	4013      	ands	r3, r2
 800639e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d102      	bne.n	80063ae <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 80063a8:	2300      	movs	r3, #0
 80063aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80063ac:	e00f      	b.n	80063ce <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d102      	bne.n	80063bc <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80063b6:	2301      	movs	r3, #1
 80063b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80063ba:	e008      	b.n	80063ce <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d102      	bne.n	80063ca <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80063c4:	2301      	movs	r3, #1
 80063c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80063c8:	e001      	b.n	80063ce <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80063ca:	2300      	movs	r3, #0
 80063cc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063da:	4313      	orrs	r3, r2
 80063dc:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f003 0310 	and.w	r3, r3, #16
 80063e4:	697a      	ldr	r2, [r7, #20]
 80063e6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ea:	69ba      	ldr	r2, [r7, #24]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	69ba      	ldr	r2, [r7, #24]
 80063f6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6819      	ldr	r1, [r3, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f003 0310 	and.w	r3, r3, #16
 8006404:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006408:	fa02 f303 	lsl.w	r3, r2, r3
 800640c:	43da      	mvns	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	400a      	ands	r2, r1
 8006414:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f003 0310 	and.w	r3, r3, #16
 8006424:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8006428:	fa02 f303 	lsl.w	r3, r2, r3
 800642c:	43db      	mvns	r3, r3
 800642e:	69ba      	ldr	r2, [r7, #24]
 8006430:	4013      	ands	r3, r2
 8006432:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f003 0310 	and.w	r3, r3, #16
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	fa02 f303 	lsl.w	r3, r2, r3
 8006446:	69ba      	ldr	r2, [r7, #24]
 8006448:	4313      	orrs	r3, r2
 800644a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	69ba      	ldr	r2, [r7, #24]
 8006452:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	6819      	ldr	r1, [r3, #0]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f003 0310 	and.w	r3, r3, #16
 8006460:	22c0      	movs	r2, #192	@ 0xc0
 8006462:	fa02 f303 	lsl.w	r3, r2, r3
 8006466:	43da      	mvns	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	400a      	ands	r2, r1
 800646e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2201      	movs	r2, #1
 8006474:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800647c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8006480:	4618      	mov	r0, r3
 8006482:	3728      	adds	r7, #40	@ 0x28
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	20008000 	.word	0x20008000

0800648c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8006494:	bf00      	nop
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d101      	bne.n	80064b2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e04f      	b.n	8006552 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d106      	bne.n	80064cc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7fb fc44 	bl	8001d54 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2202      	movs	r2, #2
 80064d0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	4b20      	ldr	r3, [pc, #128]	@ (800655c <HAL_DMA2D_Init+0xbc>)
 80064dc:	4013      	ands	r3, r2
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	6851      	ldr	r1, [r2, #4]
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	69d2      	ldr	r2, [r2, #28]
 80064e6:	4311      	orrs	r1, r2
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	6812      	ldr	r2, [r2, #0]
 80064ec:	430b      	orrs	r3, r1
 80064ee:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064f6:	4b1a      	ldr	r3, [pc, #104]	@ (8006560 <HAL_DMA2D_Init+0xc0>)
 80064f8:	4013      	ands	r3, r2
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	6891      	ldr	r1, [r2, #8]
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	6992      	ldr	r2, [r2, #24]
 8006502:	4311      	orrs	r1, r2
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	6812      	ldr	r2, [r2, #0]
 8006508:	430b      	orrs	r3, r1
 800650a:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006512:	4b14      	ldr	r3, [pc, #80]	@ (8006564 <HAL_DMA2D_Init+0xc4>)
 8006514:	4013      	ands	r3, r2
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	68d1      	ldr	r1, [r2, #12]
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	6812      	ldr	r2, [r2, #0]
 800651e:	430b      	orrs	r3, r1
 8006520:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006528:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	051a      	lsls	r2, r3, #20
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	055b      	lsls	r3, r3, #21
 8006538:	431a      	orrs	r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	430a      	orrs	r2, r1
 8006540:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3708      	adds	r7, #8
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	fff8ffbf 	.word	0xfff8ffbf
 8006560:	fffffef8 	.word	0xfffffef8
 8006564:	ffff0000 	.word	0xffff0000

08006568 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006568:	b480      	push	{r7}
 800656a:	b089      	sub	sp, #36	@ 0x24
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006572:	2300      	movs	r3, #0
 8006574:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006576:	4b86      	ldr	r3, [pc, #536]	@ (8006790 <HAL_GPIO_Init+0x228>)
 8006578:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800657a:	e18c      	b.n	8006896 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	2101      	movs	r1, #1
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	fa01 f303 	lsl.w	r3, r1, r3
 8006588:	4013      	ands	r3, r2
 800658a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	2b00      	cmp	r3, #0
 8006590:	f000 817e 	beq.w	8006890 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	f003 0303 	and.w	r3, r3, #3
 800659c:	2b01      	cmp	r3, #1
 800659e:	d005      	beq.n	80065ac <HAL_GPIO_Init+0x44>
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	f003 0303 	and.w	r3, r3, #3
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d130      	bne.n	800660e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	005b      	lsls	r3, r3, #1
 80065b6:	2203      	movs	r2, #3
 80065b8:	fa02 f303 	lsl.w	r3, r2, r3
 80065bc:	43db      	mvns	r3, r3
 80065be:	69ba      	ldr	r2, [r7, #24]
 80065c0:	4013      	ands	r3, r2
 80065c2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	68da      	ldr	r2, [r3, #12]
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	005b      	lsls	r3, r3, #1
 80065cc:	fa02 f303 	lsl.w	r3, r2, r3
 80065d0:	69ba      	ldr	r2, [r7, #24]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	69ba      	ldr	r2, [r7, #24]
 80065da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80065e2:	2201      	movs	r2, #1
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	fa02 f303 	lsl.w	r3, r2, r3
 80065ea:	43db      	mvns	r3, r3
 80065ec:	69ba      	ldr	r2, [r7, #24]
 80065ee:	4013      	ands	r3, r2
 80065f0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	091b      	lsrs	r3, r3, #4
 80065f8:	f003 0201 	and.w	r2, r3, #1
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006602:	69ba      	ldr	r2, [r7, #24]
 8006604:	4313      	orrs	r3, r2
 8006606:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	69ba      	ldr	r2, [r7, #24]
 800660c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f003 0303 	and.w	r3, r3, #3
 8006616:	2b03      	cmp	r3, #3
 8006618:	d017      	beq.n	800664a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	005b      	lsls	r3, r3, #1
 8006624:	2203      	movs	r2, #3
 8006626:	fa02 f303 	lsl.w	r3, r2, r3
 800662a:	43db      	mvns	r3, r3
 800662c:	69ba      	ldr	r2, [r7, #24]
 800662e:	4013      	ands	r3, r2
 8006630:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	689a      	ldr	r2, [r3, #8]
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	005b      	lsls	r3, r3, #1
 800663a:	fa02 f303 	lsl.w	r3, r2, r3
 800663e:	69ba      	ldr	r2, [r7, #24]
 8006640:	4313      	orrs	r3, r2
 8006642:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	69ba      	ldr	r2, [r7, #24]
 8006648:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	f003 0303 	and.w	r3, r3, #3
 8006652:	2b02      	cmp	r3, #2
 8006654:	d123      	bne.n	800669e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	08da      	lsrs	r2, r3, #3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	3208      	adds	r2, #8
 800665e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006662:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	f003 0307 	and.w	r3, r3, #7
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	220f      	movs	r2, #15
 800666e:	fa02 f303 	lsl.w	r3, r2, r3
 8006672:	43db      	mvns	r3, r3
 8006674:	69ba      	ldr	r2, [r7, #24]
 8006676:	4013      	ands	r3, r2
 8006678:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	691a      	ldr	r2, [r3, #16]
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	f003 0307 	and.w	r3, r3, #7
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	fa02 f303 	lsl.w	r3, r2, r3
 800668a:	69ba      	ldr	r2, [r7, #24]
 800668c:	4313      	orrs	r3, r2
 800668e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	08da      	lsrs	r2, r3, #3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	3208      	adds	r2, #8
 8006698:	69b9      	ldr	r1, [r7, #24]
 800669a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	005b      	lsls	r3, r3, #1
 80066a8:	2203      	movs	r2, #3
 80066aa:	fa02 f303 	lsl.w	r3, r2, r3
 80066ae:	43db      	mvns	r3, r3
 80066b0:	69ba      	ldr	r2, [r7, #24]
 80066b2:	4013      	ands	r3, r2
 80066b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	f003 0203 	and.w	r2, r3, #3
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	005b      	lsls	r3, r3, #1
 80066c2:	fa02 f303 	lsl.w	r3, r2, r3
 80066c6:	69ba      	ldr	r2, [r7, #24]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	69ba      	ldr	r2, [r7, #24]
 80066d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	f000 80d8 	beq.w	8006890 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066e0:	4b2c      	ldr	r3, [pc, #176]	@ (8006794 <HAL_GPIO_Init+0x22c>)
 80066e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80066e6:	4a2b      	ldr	r2, [pc, #172]	@ (8006794 <HAL_GPIO_Init+0x22c>)
 80066e8:	f043 0302 	orr.w	r3, r3, #2
 80066ec:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80066f0:	4b28      	ldr	r3, [pc, #160]	@ (8006794 <HAL_GPIO_Init+0x22c>)
 80066f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80066f6:	f003 0302 	and.w	r3, r3, #2
 80066fa:	60fb      	str	r3, [r7, #12]
 80066fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80066fe:	4a26      	ldr	r2, [pc, #152]	@ (8006798 <HAL_GPIO_Init+0x230>)
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	089b      	lsrs	r3, r3, #2
 8006704:	3302      	adds	r3, #2
 8006706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800670a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	f003 0303 	and.w	r3, r3, #3
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	220f      	movs	r2, #15
 8006716:	fa02 f303 	lsl.w	r3, r2, r3
 800671a:	43db      	mvns	r3, r3
 800671c:	69ba      	ldr	r2, [r7, #24]
 800671e:	4013      	ands	r3, r2
 8006720:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a1d      	ldr	r2, [pc, #116]	@ (800679c <HAL_GPIO_Init+0x234>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d04a      	beq.n	80067c0 <HAL_GPIO_Init+0x258>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a1c      	ldr	r2, [pc, #112]	@ (80067a0 <HAL_GPIO_Init+0x238>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d02b      	beq.n	800678a <HAL_GPIO_Init+0x222>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a1b      	ldr	r2, [pc, #108]	@ (80067a4 <HAL_GPIO_Init+0x23c>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d025      	beq.n	8006786 <HAL_GPIO_Init+0x21e>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a1a      	ldr	r2, [pc, #104]	@ (80067a8 <HAL_GPIO_Init+0x240>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d01f      	beq.n	8006782 <HAL_GPIO_Init+0x21a>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a19      	ldr	r2, [pc, #100]	@ (80067ac <HAL_GPIO_Init+0x244>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d019      	beq.n	800677e <HAL_GPIO_Init+0x216>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a18      	ldr	r2, [pc, #96]	@ (80067b0 <HAL_GPIO_Init+0x248>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d013      	beq.n	800677a <HAL_GPIO_Init+0x212>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a17      	ldr	r2, [pc, #92]	@ (80067b4 <HAL_GPIO_Init+0x24c>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d00d      	beq.n	8006776 <HAL_GPIO_Init+0x20e>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a16      	ldr	r2, [pc, #88]	@ (80067b8 <HAL_GPIO_Init+0x250>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d007      	beq.n	8006772 <HAL_GPIO_Init+0x20a>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a15      	ldr	r2, [pc, #84]	@ (80067bc <HAL_GPIO_Init+0x254>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d101      	bne.n	800676e <HAL_GPIO_Init+0x206>
 800676a:	2309      	movs	r3, #9
 800676c:	e029      	b.n	80067c2 <HAL_GPIO_Init+0x25a>
 800676e:	230a      	movs	r3, #10
 8006770:	e027      	b.n	80067c2 <HAL_GPIO_Init+0x25a>
 8006772:	2307      	movs	r3, #7
 8006774:	e025      	b.n	80067c2 <HAL_GPIO_Init+0x25a>
 8006776:	2306      	movs	r3, #6
 8006778:	e023      	b.n	80067c2 <HAL_GPIO_Init+0x25a>
 800677a:	2305      	movs	r3, #5
 800677c:	e021      	b.n	80067c2 <HAL_GPIO_Init+0x25a>
 800677e:	2304      	movs	r3, #4
 8006780:	e01f      	b.n	80067c2 <HAL_GPIO_Init+0x25a>
 8006782:	2303      	movs	r3, #3
 8006784:	e01d      	b.n	80067c2 <HAL_GPIO_Init+0x25a>
 8006786:	2302      	movs	r3, #2
 8006788:	e01b      	b.n	80067c2 <HAL_GPIO_Init+0x25a>
 800678a:	2301      	movs	r3, #1
 800678c:	e019      	b.n	80067c2 <HAL_GPIO_Init+0x25a>
 800678e:	bf00      	nop
 8006790:	58000080 	.word	0x58000080
 8006794:	58024400 	.word	0x58024400
 8006798:	58000400 	.word	0x58000400
 800679c:	58020000 	.word	0x58020000
 80067a0:	58020400 	.word	0x58020400
 80067a4:	58020800 	.word	0x58020800
 80067a8:	58020c00 	.word	0x58020c00
 80067ac:	58021000 	.word	0x58021000
 80067b0:	58021400 	.word	0x58021400
 80067b4:	58021800 	.word	0x58021800
 80067b8:	58021c00 	.word	0x58021c00
 80067bc:	58022400 	.word	0x58022400
 80067c0:	2300      	movs	r3, #0
 80067c2:	69fa      	ldr	r2, [r7, #28]
 80067c4:	f002 0203 	and.w	r2, r2, #3
 80067c8:	0092      	lsls	r2, r2, #2
 80067ca:	4093      	lsls	r3, r2
 80067cc:	69ba      	ldr	r2, [r7, #24]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80067d2:	4938      	ldr	r1, [pc, #224]	@ (80068b4 <HAL_GPIO_Init+0x34c>)
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	089b      	lsrs	r3, r3, #2
 80067d8:	3302      	adds	r3, #2
 80067da:	69ba      	ldr	r2, [r7, #24]
 80067dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80067e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	43db      	mvns	r3, r3
 80067ec:	69ba      	ldr	r2, [r7, #24]
 80067ee:	4013      	ands	r3, r2
 80067f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d003      	beq.n	8006806 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80067fe:	69ba      	ldr	r2, [r7, #24]
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	4313      	orrs	r3, r2
 8006804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006806:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800680e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	43db      	mvns	r3, r3
 800681a:	69ba      	ldr	r2, [r7, #24]
 800681c:	4013      	ands	r3, r2
 800681e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006828:	2b00      	cmp	r3, #0
 800682a:	d003      	beq.n	8006834 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800682c:	69ba      	ldr	r2, [r7, #24]
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	4313      	orrs	r3, r2
 8006832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006834:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	43db      	mvns	r3, r3
 8006846:	69ba      	ldr	r2, [r7, #24]
 8006848:	4013      	ands	r3, r2
 800684a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006854:	2b00      	cmp	r3, #0
 8006856:	d003      	beq.n	8006860 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006858:	69ba      	ldr	r2, [r7, #24]
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	4313      	orrs	r3, r2
 800685e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	69ba      	ldr	r2, [r7, #24]
 8006864:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	43db      	mvns	r3, r3
 8006870:	69ba      	ldr	r2, [r7, #24]
 8006872:	4013      	ands	r3, r2
 8006874:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800687e:	2b00      	cmp	r3, #0
 8006880:	d003      	beq.n	800688a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8006882:	69ba      	ldr	r2, [r7, #24]
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	4313      	orrs	r3, r2
 8006888:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	69ba      	ldr	r2, [r7, #24]
 800688e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	3301      	adds	r3, #1
 8006894:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	fa22 f303 	lsr.w	r3, r2, r3
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f47f ae6b 	bne.w	800657c <HAL_GPIO_Init+0x14>
  }
}
 80068a6:	bf00      	nop
 80068a8:	bf00      	nop
 80068aa:	3724      	adds	r7, #36	@ 0x24
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr
 80068b4:	58000400 	.word	0x58000400

080068b8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b087      	sub	sp, #28
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80068c2:	2300      	movs	r3, #0
 80068c4:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80068c6:	4b72      	ldr	r3, [pc, #456]	@ (8006a90 <HAL_GPIO_DeInit+0x1d8>)
 80068c8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 80068ca:	e0d3      	b.n	8006a74 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 80068cc:	2201      	movs	r2, #1
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	fa02 f303 	lsl.w	r3, r2, r3
 80068d4:	683a      	ldr	r2, [r7, #0]
 80068d6:	4013      	ands	r3, r2
 80068d8:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f000 80c6 	beq.w	8006a6e <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 80068e2:	4a6c      	ldr	r2, [pc, #432]	@ (8006a94 <HAL_GPIO_DeInit+0x1dc>)
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	089b      	lsrs	r3, r3, #2
 80068e8:	3302      	adds	r3, #2
 80068ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068ee:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	f003 0303 	and.w	r3, r3, #3
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	220f      	movs	r2, #15
 80068fa:	fa02 f303 	lsl.w	r3, r2, r3
 80068fe:	68ba      	ldr	r2, [r7, #8]
 8006900:	4013      	ands	r3, r2
 8006902:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a64      	ldr	r2, [pc, #400]	@ (8006a98 <HAL_GPIO_DeInit+0x1e0>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d031      	beq.n	8006970 <HAL_GPIO_DeInit+0xb8>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a63      	ldr	r2, [pc, #396]	@ (8006a9c <HAL_GPIO_DeInit+0x1e4>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d02b      	beq.n	800696c <HAL_GPIO_DeInit+0xb4>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a62      	ldr	r2, [pc, #392]	@ (8006aa0 <HAL_GPIO_DeInit+0x1e8>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d025      	beq.n	8006968 <HAL_GPIO_DeInit+0xb0>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a61      	ldr	r2, [pc, #388]	@ (8006aa4 <HAL_GPIO_DeInit+0x1ec>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d01f      	beq.n	8006964 <HAL_GPIO_DeInit+0xac>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a60      	ldr	r2, [pc, #384]	@ (8006aa8 <HAL_GPIO_DeInit+0x1f0>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d019      	beq.n	8006960 <HAL_GPIO_DeInit+0xa8>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a5f      	ldr	r2, [pc, #380]	@ (8006aac <HAL_GPIO_DeInit+0x1f4>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d013      	beq.n	800695c <HAL_GPIO_DeInit+0xa4>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a5e      	ldr	r2, [pc, #376]	@ (8006ab0 <HAL_GPIO_DeInit+0x1f8>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d00d      	beq.n	8006958 <HAL_GPIO_DeInit+0xa0>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a5d      	ldr	r2, [pc, #372]	@ (8006ab4 <HAL_GPIO_DeInit+0x1fc>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d007      	beq.n	8006954 <HAL_GPIO_DeInit+0x9c>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a5c      	ldr	r2, [pc, #368]	@ (8006ab8 <HAL_GPIO_DeInit+0x200>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d101      	bne.n	8006950 <HAL_GPIO_DeInit+0x98>
 800694c:	2309      	movs	r3, #9
 800694e:	e010      	b.n	8006972 <HAL_GPIO_DeInit+0xba>
 8006950:	230a      	movs	r3, #10
 8006952:	e00e      	b.n	8006972 <HAL_GPIO_DeInit+0xba>
 8006954:	2307      	movs	r3, #7
 8006956:	e00c      	b.n	8006972 <HAL_GPIO_DeInit+0xba>
 8006958:	2306      	movs	r3, #6
 800695a:	e00a      	b.n	8006972 <HAL_GPIO_DeInit+0xba>
 800695c:	2305      	movs	r3, #5
 800695e:	e008      	b.n	8006972 <HAL_GPIO_DeInit+0xba>
 8006960:	2304      	movs	r3, #4
 8006962:	e006      	b.n	8006972 <HAL_GPIO_DeInit+0xba>
 8006964:	2303      	movs	r3, #3
 8006966:	e004      	b.n	8006972 <HAL_GPIO_DeInit+0xba>
 8006968:	2302      	movs	r3, #2
 800696a:	e002      	b.n	8006972 <HAL_GPIO_DeInit+0xba>
 800696c:	2301      	movs	r3, #1
 800696e:	e000      	b.n	8006972 <HAL_GPIO_DeInit+0xba>
 8006970:	2300      	movs	r3, #0
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	f002 0203 	and.w	r2, r2, #3
 8006978:	0092      	lsls	r2, r2, #2
 800697a:	4093      	lsls	r3, r2
 800697c:	68ba      	ldr	r2, [r7, #8]
 800697e:	429a      	cmp	r2, r3
 8006980:	d136      	bne.n	80069f0 <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	43db      	mvns	r3, r3
 800698a:	401a      	ands	r2, r3
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	685a      	ldr	r2, [r3, #4]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	43db      	mvns	r3, r3
 8006998:	401a      	ands	r2, r3
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800699e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069a2:	685a      	ldr	r2, [r3, #4]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	43db      	mvns	r3, r3
 80069a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069ac:	4013      	ands	r3, r2
 80069ae:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80069b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	43db      	mvns	r3, r3
 80069ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069be:	4013      	ands	r3, r2
 80069c0:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	f003 0303 	and.w	r3, r3, #3
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	220f      	movs	r2, #15
 80069cc:	fa02 f303 	lsl.w	r3, r2, r3
 80069d0:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80069d2:	4a30      	ldr	r2, [pc, #192]	@ (8006a94 <HAL_GPIO_DeInit+0x1dc>)
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	089b      	lsrs	r3, r3, #2
 80069d8:	3302      	adds	r3, #2
 80069da:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	43da      	mvns	r2, r3
 80069e2:	482c      	ldr	r0, [pc, #176]	@ (8006a94 <HAL_GPIO_DeInit+0x1dc>)
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	089b      	lsrs	r3, r3, #2
 80069e8:	400a      	ands	r2, r1
 80069ea:	3302      	adds	r3, #2
 80069ec:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	005b      	lsls	r3, r3, #1
 80069f8:	2103      	movs	r1, #3
 80069fa:	fa01 f303 	lsl.w	r3, r1, r3
 80069fe:	431a      	orrs	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	08da      	lsrs	r2, r3, #3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	3208      	adds	r2, #8
 8006a0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	f003 0307 	and.w	r3, r3, #7
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	220f      	movs	r2, #15
 8006a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1e:	43db      	mvns	r3, r3
 8006a20:	697a      	ldr	r2, [r7, #20]
 8006a22:	08d2      	lsrs	r2, r2, #3
 8006a24:	4019      	ands	r1, r3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	3208      	adds	r2, #8
 8006a2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	68da      	ldr	r2, [r3, #12]
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	005b      	lsls	r3, r3, #1
 8006a36:	2103      	movs	r1, #3
 8006a38:	fa01 f303 	lsl.w	r3, r1, r3
 8006a3c:	43db      	mvns	r3, r3
 8006a3e:	401a      	ands	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	685a      	ldr	r2, [r3, #4]
 8006a48:	2101      	movs	r1, #1
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a50:	43db      	mvns	r3, r3
 8006a52:	401a      	ands	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	689a      	ldr	r2, [r3, #8]
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	005b      	lsls	r3, r3, #1
 8006a60:	2103      	movs	r1, #3
 8006a62:	fa01 f303 	lsl.w	r3, r1, r3
 8006a66:	43db      	mvns	r3, r3
 8006a68:	401a      	ands	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	609a      	str	r2, [r3, #8]
    }

    position++;
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	3301      	adds	r3, #1
 8006a72:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8006a74:	683a      	ldr	r2, [r7, #0]
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	fa22 f303 	lsr.w	r3, r2, r3
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f47f af25 	bne.w	80068cc <HAL_GPIO_DeInit+0x14>
  }
}
 8006a82:	bf00      	nop
 8006a84:	bf00      	nop
 8006a86:	371c      	adds	r7, #28
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr
 8006a90:	58000080 	.word	0x58000080
 8006a94:	58000400 	.word	0x58000400
 8006a98:	58020000 	.word	0x58020000
 8006a9c:	58020400 	.word	0x58020400
 8006aa0:	58020800 	.word	0x58020800
 8006aa4:	58020c00 	.word	0x58020c00
 8006aa8:	58021000 	.word	0x58021000
 8006aac:	58021400 	.word	0x58021400
 8006ab0:	58021800 	.word	0x58021800
 8006ab4:	58021c00 	.word	0x58021c00
 8006ab8:	58022400 	.word	0x58022400

08006abc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	807b      	strh	r3, [r7, #2]
 8006ac8:	4613      	mov	r3, r2
 8006aca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006acc:	787b      	ldrb	r3, [r7, #1]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d003      	beq.n	8006ada <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006ad2:	887a      	ldrh	r2, [r7, #2]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006ad8:	e003      	b.n	8006ae2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006ada:	887b      	ldrh	r3, [r7, #2]
 8006adc:	041a      	lsls	r2, r3, #16
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	619a      	str	r2, [r3, #24]
}
 8006ae2:	bf00      	nop
 8006ae4:	370c      	adds	r7, #12
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
	...

08006af0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d101      	bne.n	8006b02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e08b      	b.n	8006c1a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d106      	bne.n	8006b1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f7fb f93e 	bl	8001d98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2224      	movs	r2, #36	@ 0x24
 8006b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f022 0201 	bic.w	r2, r2, #1
 8006b32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685a      	ldr	r2, [r3, #4]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006b40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	689a      	ldr	r2, [r3, #8]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006b50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d107      	bne.n	8006b6a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	689a      	ldr	r2, [r3, #8]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006b66:	609a      	str	r2, [r3, #8]
 8006b68:	e006      	b.n	8006b78 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	689a      	ldr	r2, [r3, #8]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006b76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	d108      	bne.n	8006b92 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	685a      	ldr	r2, [r3, #4]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b8e:	605a      	str	r2, [r3, #4]
 8006b90:	e007      	b.n	8006ba2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	685a      	ldr	r2, [r3, #4]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ba0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	6859      	ldr	r1, [r3, #4]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	4b1d      	ldr	r3, [pc, #116]	@ (8006c24 <HAL_I2C_Init+0x134>)
 8006bae:	430b      	orrs	r3, r1
 8006bb0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68da      	ldr	r2, [r3, #12]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006bc0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	691a      	ldr	r2, [r3, #16]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	695b      	ldr	r3, [r3, #20]
 8006bca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	699b      	ldr	r3, [r3, #24]
 8006bd2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	430a      	orrs	r2, r1
 8006bda:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	69d9      	ldr	r1, [r3, #28]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a1a      	ldr	r2, [r3, #32]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	430a      	orrs	r2, r1
 8006bea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f042 0201 	orr.w	r2, r2, #1
 8006bfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2220      	movs	r2, #32
 8006c06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3708      	adds	r7, #8
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	02008000 	.word	0x02008000

08006c28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2b20      	cmp	r3, #32
 8006c3c:	d138      	bne.n	8006cb0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d101      	bne.n	8006c4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006c48:	2302      	movs	r3, #2
 8006c4a:	e032      	b.n	8006cb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2224      	movs	r2, #36	@ 0x24
 8006c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f022 0201 	bic.w	r2, r2, #1
 8006c6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006c7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	6819      	ldr	r1, [r3, #0]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	683a      	ldr	r2, [r7, #0]
 8006c88:	430a      	orrs	r2, r1
 8006c8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f042 0201 	orr.w	r2, r2, #1
 8006c9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2220      	movs	r2, #32
 8006ca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006cac:	2300      	movs	r3, #0
 8006cae:	e000      	b.n	8006cb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006cb0:	2302      	movs	r3, #2
  }
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	370c      	adds	r7, #12
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr

08006cbe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006cbe:	b480      	push	{r7}
 8006cc0:	b085      	sub	sp, #20
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
 8006cc6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	2b20      	cmp	r3, #32
 8006cd2:	d139      	bne.n	8006d48 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d101      	bne.n	8006ce2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006cde:	2302      	movs	r3, #2
 8006ce0:	e033      	b.n	8006d4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2224      	movs	r2, #36	@ 0x24
 8006cee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f022 0201 	bic.w	r2, r2, #1
 8006d00:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006d10:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	021b      	lsls	r3, r3, #8
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f042 0201 	orr.w	r2, r2, #1
 8006d32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2220      	movs	r2, #32
 8006d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006d44:	2300      	movs	r3, #0
 8006d46:	e000      	b.n	8006d4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006d48:	2302      	movs	r3, #2
  }
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3714      	adds	r7, #20
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
	...

08006d58 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d101      	bne.n	8006d6a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e0bf      	b.n	8006eea <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d106      	bne.n	8006d84 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f7fb f8c2 	bl	8001f08 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2202      	movs	r2, #2
 8006d88:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	699a      	ldr	r2, [r3, #24]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8006d9a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	6999      	ldr	r1, [r3, #24]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	685a      	ldr	r2, [r3, #4]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006db0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	430a      	orrs	r2, r1
 8006dbe:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	6899      	ldr	r1, [r3, #8]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	4b4a      	ldr	r3, [pc, #296]	@ (8006ef4 <HAL_LTDC_Init+0x19c>)
 8006dcc:	400b      	ands	r3, r1
 8006dce:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	695b      	ldr	r3, [r3, #20]
 8006dd4:	041b      	lsls	r3, r3, #16
 8006dd6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	6899      	ldr	r1, [r3, #8]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	699a      	ldr	r2, [r3, #24]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	431a      	orrs	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	430a      	orrs	r2, r1
 8006dec:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	68d9      	ldr	r1, [r3, #12]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	4b3e      	ldr	r3, [pc, #248]	@ (8006ef4 <HAL_LTDC_Init+0x19c>)
 8006dfa:	400b      	ands	r3, r1
 8006dfc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	69db      	ldr	r3, [r3, #28]
 8006e02:	041b      	lsls	r3, r3, #16
 8006e04:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68d9      	ldr	r1, [r3, #12]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6a1a      	ldr	r2, [r3, #32]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	431a      	orrs	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	430a      	orrs	r2, r1
 8006e1a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	6919      	ldr	r1, [r3, #16]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	4b33      	ldr	r3, [pc, #204]	@ (8006ef4 <HAL_LTDC_Init+0x19c>)
 8006e28:	400b      	ands	r3, r1
 8006e2a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e30:	041b      	lsls	r3, r3, #16
 8006e32:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6919      	ldr	r1, [r3, #16]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	431a      	orrs	r2, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	430a      	orrs	r2, r1
 8006e48:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	6959      	ldr	r1, [r3, #20]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	4b27      	ldr	r3, [pc, #156]	@ (8006ef4 <HAL_LTDC_Init+0x19c>)
 8006e56:	400b      	ands	r3, r1
 8006e58:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e5e:	041b      	lsls	r3, r3, #16
 8006e60:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	6959      	ldr	r1, [r3, #20]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	431a      	orrs	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	430a      	orrs	r2, r1
 8006e76:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006e7e:	021b      	lsls	r3, r3, #8
 8006e80:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006e88:	041b      	lsls	r3, r3, #16
 8006e8a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8006e9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006ea2:	68ba      	ldr	r2, [r7, #8]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8006eae:	431a      	orrs	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	430a      	orrs	r2, r1
 8006eb6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f042 0206 	orr.w	r2, r2, #6
 8006ec6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	699a      	ldr	r2, [r3, #24]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f042 0201 	orr.w	r2, r2, #1
 8006ed6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3710      	adds	r7, #16
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	f000f800 	.word	0xf000f800

08006ef8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f06:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f0e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f003 0304 	and.w	r3, r3, #4
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d023      	beq.n	8006f62 <HAL_LTDC_IRQHandler+0x6a>
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	f003 0304 	and.w	r3, r3, #4
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d01e      	beq.n	8006f62 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f022 0204 	bic.w	r2, r2, #4
 8006f32:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2204      	movs	r2, #4
 8006f3a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006f42:	f043 0201 	orr.w	r2, r3, #1
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2204      	movs	r2, #4
 8006f50:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 f86f 	bl	8007040 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f003 0302 	and.w	r3, r3, #2
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d023      	beq.n	8006fb4 <HAL_LTDC_IRQHandler+0xbc>
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	f003 0302 	and.w	r3, r3, #2
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d01e      	beq.n	8006fb4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f022 0202 	bic.w	r2, r2, #2
 8006f84:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006f94:	f043 0202 	orr.w	r2, r3, #2
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2204      	movs	r2, #4
 8006fa2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 f846 	bl	8007040 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f003 0301 	and.w	r3, r3, #1
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d01b      	beq.n	8006ff6 <HAL_LTDC_IRQHandler+0xfe>
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	f003 0301 	and.w	r3, r3, #1
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d016      	beq.n	8006ff6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f022 0201 	bic.w	r2, r2, #1
 8006fd6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f010 f8bd 	bl	8017170 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f003 0308 	and.w	r3, r3, #8
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d01b      	beq.n	8007038 <HAL_LTDC_IRQHandler+0x140>
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	f003 0308 	and.w	r3, r3, #8
 8007006:	2b00      	cmp	r3, #0
 8007008:	d016      	beq.n	8007038 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f022 0208 	bic.w	r2, r2, #8
 8007018:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2208      	movs	r2, #8
 8007020:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2201      	movs	r2, #1
 8007026:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 f80e 	bl	8007054 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007038:	bf00      	nop
 800703a:	3710      	adds	r7, #16
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800705c:	bf00      	nop
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007068:	b5b0      	push	{r4, r5, r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800707a:	2b01      	cmp	r3, #1
 800707c:	d101      	bne.n	8007082 <HAL_LTDC_ConfigLayer+0x1a>
 800707e:	2302      	movs	r3, #2
 8007080:	e02c      	b.n	80070dc <HAL_LTDC_ConfigLayer+0x74>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2201      	movs	r2, #1
 8007086:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2202      	movs	r2, #2
 800708e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2134      	movs	r1, #52	@ 0x34
 8007098:	fb01 f303 	mul.w	r3, r1, r3
 800709c:	4413      	add	r3, r2
 800709e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	4614      	mov	r4, r2
 80070a6:	461d      	mov	r5, r3
 80070a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80070aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80070ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80070b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070b4:	682b      	ldr	r3, [r5, #0]
 80070b6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	68b9      	ldr	r1, [r7, #8]
 80070bc:	68f8      	ldr	r0, [r7, #12]
 80070be:	f000 f849 	bl	8007154 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2201      	movs	r2, #1
 80070c8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2201      	movs	r2, #1
 80070ce:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bdb0      	pop	{r4, r5, r7, pc}

080070e4 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d101      	bne.n	80070fc <HAL_LTDC_ProgramLineEvent+0x18>
 80070f8:	2302      	movs	r3, #2
 80070fa:	e023      	b.n	8007144 <HAL_LTDC_ProgramLineEvent+0x60>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2202      	movs	r2, #2
 8007108:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f022 0201 	bic.w	r2, r2, #1
 800711a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 800711c:	4a0c      	ldr	r2, [pc, #48]	@ (8007150 <HAL_LTDC_ProgramLineEvent+0x6c>)
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	6413      	str	r3, [r2, #64]	@ 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f042 0201 	orr.w	r2, r2, #1
 8007130:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2201      	movs	r2, #1
 8007136:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr
 8007150:	50001000 	.word	0x50001000

08007154 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007154:	b480      	push	{r7}
 8007156:	b089      	sub	sp, #36	@ 0x24
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	685a      	ldr	r2, [r3, #4]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	0c1b      	lsrs	r3, r3, #16
 800716c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007170:	4413      	add	r3, r2
 8007172:	041b      	lsls	r3, r3, #16
 8007174:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	461a      	mov	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	01db      	lsls	r3, r3, #7
 8007180:	4413      	add	r3, r2
 8007182:	3384      	adds	r3, #132	@ 0x84
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	6812      	ldr	r2, [r2, #0]
 800718a:	4611      	mov	r1, r2
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	01d2      	lsls	r2, r2, #7
 8007190:	440a      	add	r2, r1
 8007192:	3284      	adds	r2, #132	@ 0x84
 8007194:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007198:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	0c1b      	lsrs	r3, r3, #16
 80071a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80071aa:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80071ac:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4619      	mov	r1, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	01db      	lsls	r3, r3, #7
 80071b8:	440b      	add	r3, r1
 80071ba:	3384      	adds	r3, #132	@ 0x84
 80071bc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80071c2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	68da      	ldr	r2, [r3, #12]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071d2:	4413      	add	r3, r2
 80071d4:	041b      	lsls	r3, r3, #16
 80071d6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	461a      	mov	r2, r3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	01db      	lsls	r3, r3, #7
 80071e2:	4413      	add	r3, r2
 80071e4:	3384      	adds	r3, #132	@ 0x84
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	6812      	ldr	r2, [r2, #0]
 80071ec:	4611      	mov	r1, r2
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	01d2      	lsls	r2, r2, #7
 80071f2:	440a      	add	r2, r1
 80071f4:	3284      	adds	r2, #132	@ 0x84
 80071f6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80071fa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	689a      	ldr	r2, [r3, #8]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800720a:	4413      	add	r3, r2
 800720c:	1c5a      	adds	r2, r3, #1
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4619      	mov	r1, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	01db      	lsls	r3, r3, #7
 8007218:	440b      	add	r3, r1
 800721a:	3384      	adds	r3, #132	@ 0x84
 800721c:	4619      	mov	r1, r3
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	4313      	orrs	r3, r2
 8007222:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	461a      	mov	r2, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	01db      	lsls	r3, r3, #7
 800722e:	4413      	add	r3, r2
 8007230:	3384      	adds	r3, #132	@ 0x84
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	6812      	ldr	r2, [r2, #0]
 8007238:	4611      	mov	r1, r2
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	01d2      	lsls	r2, r2, #7
 800723e:	440a      	add	r2, r1
 8007240:	3284      	adds	r2, #132	@ 0x84
 8007242:	f023 0307 	bic.w	r3, r3, #7
 8007246:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	461a      	mov	r2, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	01db      	lsls	r3, r3, #7
 8007252:	4413      	add	r3, r2
 8007254:	3384      	adds	r3, #132	@ 0x84
 8007256:	461a      	mov	r2, r3
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007264:	021b      	lsls	r3, r3, #8
 8007266:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800726e:	041b      	lsls	r3, r3, #16
 8007270:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	699b      	ldr	r3, [r3, #24]
 8007276:	061b      	lsls	r3, r3, #24
 8007278:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	461a      	mov	r2, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	01db      	lsls	r3, r3, #7
 8007284:	4413      	add	r3, r2
 8007286:	3384      	adds	r3, #132	@ 0x84
 8007288:	699b      	ldr	r3, [r3, #24]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	461a      	mov	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	01db      	lsls	r3, r3, #7
 8007294:	4413      	add	r3, r2
 8007296:	3384      	adds	r3, #132	@ 0x84
 8007298:	461a      	mov	r2, r3
 800729a:	2300      	movs	r3, #0
 800729c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80072a4:	461a      	mov	r2, r3
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	431a      	orrs	r2, r3
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	431a      	orrs	r2, r3
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4619      	mov	r1, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	01db      	lsls	r3, r3, #7
 80072b8:	440b      	add	r3, r1
 80072ba:	3384      	adds	r3, #132	@ 0x84
 80072bc:	4619      	mov	r1, r3
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	461a      	mov	r2, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	01db      	lsls	r3, r3, #7
 80072ce:	4413      	add	r3, r2
 80072d0:	3384      	adds	r3, #132	@ 0x84
 80072d2:	695b      	ldr	r3, [r3, #20]
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	6812      	ldr	r2, [r2, #0]
 80072d8:	4611      	mov	r1, r2
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	01d2      	lsls	r2, r2, #7
 80072de:	440a      	add	r2, r1
 80072e0:	3284      	adds	r2, #132	@ 0x84
 80072e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80072e6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	461a      	mov	r2, r3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	01db      	lsls	r3, r3, #7
 80072f2:	4413      	add	r3, r2
 80072f4:	3384      	adds	r3, #132	@ 0x84
 80072f6:	461a      	mov	r2, r3
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	695b      	ldr	r3, [r3, #20]
 80072fc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	461a      	mov	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	01db      	lsls	r3, r3, #7
 8007308:	4413      	add	r3, r2
 800730a:	3384      	adds	r3, #132	@ 0x84
 800730c:	69da      	ldr	r2, [r3, #28]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4619      	mov	r1, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	01db      	lsls	r3, r3, #7
 8007318:	440b      	add	r3, r1
 800731a:	3384      	adds	r3, #132	@ 0x84
 800731c:	4619      	mov	r1, r3
 800731e:	4b58      	ldr	r3, [pc, #352]	@ (8007480 <LTDC_SetConfig+0x32c>)
 8007320:	4013      	ands	r3, r2
 8007322:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	69da      	ldr	r2, [r3, #28]
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	6a1b      	ldr	r3, [r3, #32]
 800732c:	68f9      	ldr	r1, [r7, #12]
 800732e:	6809      	ldr	r1, [r1, #0]
 8007330:	4608      	mov	r0, r1
 8007332:	6879      	ldr	r1, [r7, #4]
 8007334:	01c9      	lsls	r1, r1, #7
 8007336:	4401      	add	r1, r0
 8007338:	3184      	adds	r1, #132	@ 0x84
 800733a:	4313      	orrs	r3, r2
 800733c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	461a      	mov	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	01db      	lsls	r3, r3, #7
 8007348:	4413      	add	r3, r2
 800734a:	3384      	adds	r3, #132	@ 0x84
 800734c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	461a      	mov	r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	01db      	lsls	r3, r3, #7
 8007358:	4413      	add	r3, r2
 800735a:	3384      	adds	r3, #132	@ 0x84
 800735c:	461a      	mov	r2, r3
 800735e:	2300      	movs	r3, #0
 8007360:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	461a      	mov	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	01db      	lsls	r3, r3, #7
 800736c:	4413      	add	r3, r2
 800736e:	3384      	adds	r3, #132	@ 0x84
 8007370:	461a      	mov	r2, r3
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007376:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d102      	bne.n	8007386 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007380:	2304      	movs	r3, #4
 8007382:	61fb      	str	r3, [r7, #28]
 8007384:	e01b      	b.n	80073be <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	2b01      	cmp	r3, #1
 800738c:	d102      	bne.n	8007394 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800738e:	2303      	movs	r3, #3
 8007390:	61fb      	str	r3, [r7, #28]
 8007392:	e014      	b.n	80073be <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	2b04      	cmp	r3, #4
 800739a:	d00b      	beq.n	80073b4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	d007      	beq.n	80073b4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80073a8:	2b03      	cmp	r3, #3
 80073aa:	d003      	beq.n	80073b4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80073b0:	2b07      	cmp	r3, #7
 80073b2:	d102      	bne.n	80073ba <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80073b4:	2302      	movs	r3, #2
 80073b6:	61fb      	str	r3, [r7, #28]
 80073b8:	e001      	b.n	80073be <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80073ba:	2301      	movs	r3, #1
 80073bc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	461a      	mov	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	01db      	lsls	r3, r3, #7
 80073c8:	4413      	add	r3, r2
 80073ca:	3384      	adds	r3, #132	@ 0x84
 80073cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	6812      	ldr	r2, [r2, #0]
 80073d2:	4611      	mov	r1, r2
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	01d2      	lsls	r2, r2, #7
 80073d8:	440a      	add	r2, r1
 80073da:	3284      	adds	r2, #132	@ 0x84
 80073dc:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80073e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e6:	69fa      	ldr	r2, [r7, #28]
 80073e8:	fb02 f303 	mul.w	r3, r2, r3
 80073ec:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	6859      	ldr	r1, [r3, #4]
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	1acb      	subs	r3, r1, r3
 80073f8:	69f9      	ldr	r1, [r7, #28]
 80073fa:	fb01 f303 	mul.w	r3, r1, r3
 80073fe:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8007400:	68f9      	ldr	r1, [r7, #12]
 8007402:	6809      	ldr	r1, [r1, #0]
 8007404:	4608      	mov	r0, r1
 8007406:	6879      	ldr	r1, [r7, #4]
 8007408:	01c9      	lsls	r1, r1, #7
 800740a:	4401      	add	r1, r0
 800740c:	3184      	adds	r1, #132	@ 0x84
 800740e:	4313      	orrs	r3, r2
 8007410:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	461a      	mov	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	01db      	lsls	r3, r3, #7
 800741c:	4413      	add	r3, r2
 800741e:	3384      	adds	r3, #132	@ 0x84
 8007420:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4619      	mov	r1, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	01db      	lsls	r3, r3, #7
 800742c:	440b      	add	r3, r1
 800742e:	3384      	adds	r3, #132	@ 0x84
 8007430:	4619      	mov	r1, r3
 8007432:	4b14      	ldr	r3, [pc, #80]	@ (8007484 <LTDC_SetConfig+0x330>)
 8007434:	4013      	ands	r3, r2
 8007436:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	461a      	mov	r2, r3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	01db      	lsls	r3, r3, #7
 8007442:	4413      	add	r3, r2
 8007444:	3384      	adds	r3, #132	@ 0x84
 8007446:	461a      	mov	r2, r3
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800744c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	461a      	mov	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	01db      	lsls	r3, r3, #7
 8007458:	4413      	add	r3, r2
 800745a:	3384      	adds	r3, #132	@ 0x84
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68fa      	ldr	r2, [r7, #12]
 8007460:	6812      	ldr	r2, [r2, #0]
 8007462:	4611      	mov	r1, r2
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	01d2      	lsls	r2, r2, #7
 8007468:	440a      	add	r2, r1
 800746a:	3284      	adds	r2, #132	@ 0x84
 800746c:	f043 0301 	orr.w	r3, r3, #1
 8007470:	6013      	str	r3, [r2, #0]
}
 8007472:	bf00      	nop
 8007474:	3724      	adds	r7, #36	@ 0x24
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	fffff8f8 	.word	0xfffff8f8
 8007484:	fffff800 	.word	0xfffff800

08007488 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart =  HAL_GetTick();
 8007490:	f7fd f834 	bl	80044fc <HAL_GetTick>
 8007494:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d101      	bne.n	80074a0 <HAL_MDMA_Abort+0x18>
  {
    return HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	e04a      	b.n	8007536 <HAL_MDMA_Abort+0xae>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	2b02      	cmp	r3, #2
 80074aa:	d008      	beq.n	80074be <HAL_MDMA_Abort+0x36>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2280      	movs	r2, #128	@ 0x80
 80074b0:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e03b      	b.n	8007536 <HAL_MDMA_Abort+0xae>
  }
  else
  {
    /* Disable all the transfer interrupts */
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	68da      	ldr	r2, [r3, #12]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 80074cc:	60da      	str	r2, [r3, #12]

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68da      	ldr	r2, [r3, #12]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f022 0201 	bic.w	r2, r2, #1
 80074dc:	60da      	str	r2, [r3, #12]

    /* Check if the MDMA Channel is effectively disabled */
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80074de:	e016      	b.n	800750e <HAL_MDMA_Abort+0x86>
    {
      /* Check for the Timeout */
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80074e0:	f7fd f80c 	bl	80044fc <HAL_GetTick>
 80074e4:	4602      	mov	r2, r0
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	2b05      	cmp	r3, #5
 80074ec:	d90f      	bls.n	800750e <HAL_MDMA_Abort+0x86>
      {
        /* Update error code */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80074f2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the MDMA state */
        hmdma->State = HAL_MDMA_STATE_ERROR;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2203      	movs	r2, #3
 8007506:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e013      	b.n	8007536 <HAL_MDMA_Abort+0xae>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	f003 0301 	and.w	r3, r3, #1
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1e1      	bne.n	80074e0 <HAL_MDMA_Abort+0x58>
      }
    }

    /* Clear all interrupt flags */
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	221f      	movs	r2, #31
 8007522:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

  return HAL_OK;
 8007534:	2300      	movs	r3, #0
}
 8007536:	4618      	mov	r0, r3
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
	...

08007540 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b086      	sub	sp, #24
 8007544:	af02      	add	r7, sp, #8
 8007546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007548:	2300      	movs	r3, #0
 800754a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800754c:	f7fc ffd6 	bl	80044fc <HAL_GetTick>
 8007550:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d102      	bne.n	800755e <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	73fb      	strb	r3, [r7, #15]
 800755c:	e0a5      	b.n	80076aa <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007568:	2b00      	cmp	r3, #0
 800756a:	f040 809e 	bne.w	80076aa <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f7fa fec4 	bl	80022fc <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8007574:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 fc52 	bl	8007e22 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	689a      	ldr	r2, [r3, #8]
 8007584:	4b4b      	ldr	r3, [pc, #300]	@ (80076b4 <HAL_OSPI_Init+0x174>)
 8007586:	4013      	ands	r3, r2
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	68d1      	ldr	r1, [r2, #12]
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	6912      	ldr	r2, [r2, #16]
 8007590:	3a01      	subs	r2, #1
 8007592:	0412      	lsls	r2, r2, #16
 8007594:	4311      	orrs	r1, r2
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	6952      	ldr	r2, [r2, #20]
 800759a:	3a01      	subs	r2, #1
 800759c:	0212      	lsls	r2, r2, #8
 800759e:	4311      	orrs	r1, r2
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80075a4:	4311      	orrs	r1, r2
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	69d2      	ldr	r2, [r2, #28]
 80075aa:	4311      	orrs	r1, r2
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	6812      	ldr	r2, [r2, #0]
 80075b0:	430b      	orrs	r3, r1
 80075b2:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a1a      	ldr	r2, [r3, #32]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	430a      	orrs	r2, r1
 80075c8:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ce:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	430a      	orrs	r2, r1
 80075da:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80075e4:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	3b01      	subs	r3, #1
 80075f6:	021a      	lsls	r2, r3, #8
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	430a      	orrs	r2, r1
 80075fe:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007604:	9300      	str	r3, [sp, #0]
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	2200      	movs	r2, #0
 800760a:	2120      	movs	r1, #32
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f001 f8ff 	bl	8008810 <OSPI_WaitFlagStateUntilTimeout>
 8007612:	4603      	mov	r3, r0
 8007614:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8007616:	7bfb      	ldrb	r3, [r7, #15]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d146      	bne.n	80076aa <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800762a:	1e5a      	subs	r2, r3, #1
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	430a      	orrs	r2, r1
 8007632:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	689a      	ldr	r2, [r3, #8]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	430a      	orrs	r2, r1
 8007648:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8007652:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800765e:	431a      	orrs	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	430a      	orrs	r2, r1
 8007666:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f042 0201 	orr.w	r2, r2, #1
 8007678:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	699b      	ldr	r3, [r3, #24]
 800767e:	2b02      	cmp	r3, #2
 8007680:	d107      	bne.n	8007692 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	689a      	ldr	r2, [r3, #8]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f042 0202 	orr.w	r2, r2, #2
 8007690:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800769a:	d103      	bne.n	80076a4 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	651a      	str	r2, [r3, #80]	@ 0x50
 80076a2:	e002      	b.n	80076aa <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2202      	movs	r2, #2
 80076a8:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 80076aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3710      	adds	r7, #16
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	f8e0f8f4 	.word	0xf8e0f8f4

080076b8 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076c0:	2300      	movs	r3, #0
 80076c2:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d102      	bne.n	80076d0 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	73fb      	strb	r3, [r7, #15]
 80076ce:	e015      	b.n	80076fc <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
    /* Disable OctoSPI */
    __HAL_OSPI_DISABLE(hospi);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f022 0201 	bic.w	r2, r2, #1
 80076de:	601a      	str	r2, [r3, #0]

    /* Disable free running clock if needed : must be done after OSPI disable */
    CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	689a      	ldr	r2, [r3, #8]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f022 0202 	bic.w	r2, r2, #2
 80076ee:	609a      	str	r2, [r3, #8]

    /* DeInit the low level hardware */
    hospi->MspDeInitCallback(hospi);
#else
    /* De-initialize the low-level hardware */
    HAL_OSPI_MspDeInit(hospi);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f7fa ffb7 	bl	8002664 <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

    /* Reset the driver state */
    hospi->State = HAL_OSPI_STATE_RESET;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  return status;
 80076fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b08a      	sub	sp, #40	@ 0x28
 800770a:	af02      	add	r7, sp, #8
 800770c:	60f8      	str	r0, [r7, #12]
 800770e:	60b9      	str	r1, [r7, #8]
 8007710:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8007712:	f7fc fef3 	bl	80044fc <HAL_GetTick>
 8007716:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800771c:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007722:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	2b02      	cmp	r3, #2
 8007728:	d104      	bne.n	8007734 <HAL_OSPI_Command+0x2e>
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007732:	d115      	bne.n	8007760 <HAL_OSPI_Command+0x5a>
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	2b14      	cmp	r3, #20
 8007738:	d107      	bne.n	800774a <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2b02      	cmp	r3, #2
 8007740:	d00e      	beq.n	8007760 <HAL_OSPI_Command+0x5a>
                                                   || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	2b03      	cmp	r3, #3
 8007748:	d00a      	beq.n	8007760 <HAL_OSPI_Command+0x5a>
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	2b24      	cmp	r3, #36	@ 0x24
 800774e:	d15b      	bne.n	8007808 <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2b01      	cmp	r3, #1
 8007756:	d003      	beq.n	8007760 <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800775c:	2b03      	cmp	r3, #3
 800775e:	d153      	bne.n	8007808 <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	9300      	str	r3, [sp, #0]
 8007764:	69bb      	ldr	r3, [r7, #24]
 8007766:	2200      	movs	r2, #0
 8007768:	2120      	movs	r1, #32
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f001 f850 	bl	8008810 <OSPI_WaitFlagStateUntilTimeout>
 8007770:	4603      	mov	r3, r0
 8007772:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8007774:	7ffb      	ldrb	r3, [r7, #31]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d14c      	bne.n	8007814 <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8007780:	68b9      	ldr	r1, [r7, #8]
 8007782:	68f8      	ldr	r0, [r7, #12]
 8007784:	f001 f87c 	bl	8008880 <OSPI_ConfigCmd>
 8007788:	4603      	mov	r3, r0
 800778a:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800778c:	7ffb      	ldrb	r3, [r7, #31]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d140      	bne.n	8007814 <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007796:	2b00      	cmp	r3, #0
 8007798:	d10e      	bne.n	80077b8 <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	9300      	str	r3, [sp, #0]
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	2201      	movs	r2, #1
 80077a2:	2102      	movs	r1, #2
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f001 f833 	bl	8008810 <OSPI_WaitFlagStateUntilTimeout>
 80077aa:	4603      	mov	r3, r0
 80077ac:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	2202      	movs	r2, #2
 80077b4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 80077b6:	e02d      	b.n	8007814 <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d103      	bne.n	80077c8 <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2204      	movs	r2, #4
 80077c4:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80077c6:	e025      	b.n	8007814 <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d10b      	bne.n	80077e8 <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077d4:	2b24      	cmp	r3, #36	@ 0x24
 80077d6:	d103      	bne.n	80077e0 <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2204      	movs	r2, #4
 80077dc:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80077de:	e019      	b.n	8007814 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2214      	movs	r2, #20
 80077e4:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80077e6:	e015      	b.n	8007814 <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	d111      	bne.n	8007814 <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077f4:	2b14      	cmp	r3, #20
 80077f6:	d103      	bne.n	8007800 <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2204      	movs	r2, #4
 80077fc:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80077fe:	e009      	b.n	8007814 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2224      	movs	r2, #36	@ 0x24
 8007804:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8007806:	e005      	b.n	8007814 <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2210      	movs	r2, #16
 8007810:	655a      	str	r2, [r3, #84]	@ 0x54
 8007812:	e000      	b.n	8007816 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 8007814:	bf00      	nop
  }

  /* Return function status */
  return status;
 8007816:	7ffb      	ldrb	r3, [r7, #31]
}
 8007818:	4618      	mov	r0, r3
 800781a:	3720      	adds	r7, #32
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <HAL_OSPI_HyperbusCfg>:
  * @param  cfg     : Structure containing the Hyperbus configuration
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_HyperbusCfg(OSPI_HandleTypeDef *hospi, OSPI_HyperbusCfgTypeDef *cfg, uint32_t Timeout)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b08a      	sub	sp, #40	@ 0x28
 8007824:	af02      	add	r7, sp, #8
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800782c:	f7fc fe66 	bl	80044fc <HAL_GetTick>
 8007830:	61b8      	str	r0, [r7, #24]
  assert_param(IS_OSPI_ACCESS_TIME(cfg->AccessTime));
  assert_param(IS_OSPI_WRITE_ZERO_LATENCY(cfg->WriteZeroLatency));
  assert_param(IS_OSPI_LATENCY_MODE(cfg->LatencyMode));

  /* Check the state of the driver */
  state = hospi->State;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007836:	617b      	str	r3, [r7, #20]
  if ((state == HAL_OSPI_STATE_HYPERBUS_INIT) || (state == HAL_OSPI_STATE_READY))
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	2b01      	cmp	r3, #1
 800783c:	d002      	beq.n	8007844 <HAL_OSPI_HyperbusCfg+0x24>
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	2b02      	cmp	r3, #2
 8007842:	d122      	bne.n	800788a <HAL_OSPI_HyperbusCfg+0x6a>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	2200      	movs	r2, #0
 800784c:	2120      	movs	r1, #32
 800784e:	68f8      	ldr	r0, [r7, #12]
 8007850:	f000 ffde 	bl	8008810 <OSPI_WaitFlagStateUntilTimeout>
 8007854:	4603      	mov	r3, r0
 8007856:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8007858:	7ffb      	ldrb	r3, [r7, #31]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d11a      	bne.n	8007894 <HAL_OSPI_HyperbusCfg+0x74>
    {
      /* Configure Hyperbus configuration Latency register */
      WRITE_REG(hospi->Instance->HLCR, ((cfg->RWRecoveryTime << OCTOSPI_HLCR_TRWR_Pos) |
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	041a      	lsls	r2, r3, #16
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	021b      	lsls	r3, r3, #8
 800786a:	431a      	orrs	r2, r3
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	ea42 0103 	orr.w	r1, r2, r3
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	68da      	ldr	r2, [r3, #12]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	430a      	orrs	r2, r1
 800787e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
                                        (cfg->AccessTime << OCTOSPI_HLCR_TACC_Pos)     |
                                        cfg->WriteZeroLatency | cfg->LatencyMode));

      /* Update the state */
      hospi->State = HAL_OSPI_STATE_READY;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2202      	movs	r2, #2
 8007886:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8007888:	e004      	b.n	8007894 <HAL_OSPI_HyperbusCfg+0x74>
    }
  }
  else
  {
    status = HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2210      	movs	r2, #16
 8007892:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Return function status */
  return status;
 8007894:	7ffb      	ldrb	r3, [r7, #31]
}
 8007896:	4618      	mov	r0, r3
 8007898:	3720      	adds	r7, #32
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}

0800789e <HAL_OSPI_HyperbusCmd>:
  * @param  cmd     : Structure containing the Hyperbus command
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_HyperbusCmd(OSPI_HandleTypeDef *hospi, OSPI_HyperbusCmdTypeDef *cmd, uint32_t Timeout)
{
 800789e:	b580      	push	{r7, lr}
 80078a0:	b088      	sub	sp, #32
 80078a2:	af02      	add	r7, sp, #8
 80078a4:	60f8      	str	r0, [r7, #12]
 80078a6:	60b9      	str	r1, [r7, #8]
 80078a8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80078aa:	f7fc fe27 	bl	80044fc <HAL_GetTick>
 80078ae:	6138      	str	r0, [r7, #16]
  assert_param(IS_OSPI_ADDRESS_SIZE(cmd->AddressSize));
  assert_param(IS_OSPI_NUMBER_DATA(cmd->NbData));
  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));

  /* Check the state of the driver */
  if ((hospi->State == HAL_OSPI_STATE_READY) && (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS))
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078b4:	2b02      	cmp	r3, #2
 80078b6:	d149      	bne.n	800794c <HAL_OSPI_HyperbusCmd+0xae>
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80078c0:	d144      	bne.n	800794c <HAL_OSPI_HyperbusCmd+0xae>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	9300      	str	r3, [sp, #0]
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	2200      	movs	r2, #0
 80078ca:	2120      	movs	r1, #32
 80078cc:	68f8      	ldr	r0, [r7, #12]
 80078ce:	f000 ff9f 	bl	8008810 <OSPI_WaitFlagStateUntilTimeout>
 80078d2:	4603      	mov	r3, r0
 80078d4:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80078d6:	7dfb      	ldrb	r3, [r7, #23]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d13c      	bne.n	8007956 <HAL_OSPI_HyperbusCmd+0xb8>
    {
      /* Re-initialize the value of the functional mode */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80078ea:	601a      	str	r2, [r3, #0]

      /* Configure the address space in the DCR1 register */
      MODIFY_REG(hospi->Instance->DCR1, OCTOSPI_DCR1_MTYP_0, cmd->AddressSpace);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	430a      	orrs	r2, r1
 8007900:	609a      	str	r2, [r3, #8]

      /* Configure the CCR and WCCR registers with the address size and the following configuration :
         - DQS signal enabled (used as RWDS)
         - DTR mode enabled on address and data
         - address and data on 8 lines */
      WRITE_REG(hospi->Instance->CCR, (cmd->DQSMode | OCTOSPI_CCR_DDTR | OCTOSPI_CCR_DMODE_2 |
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	691a      	ldr	r2, [r3, #16]
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	431a      	orrs	r2, r3
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f042 220c 	orr.w	r2, r2, #201329664	@ 0xc000c00
 8007914:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
                                       cmd->AddressSize | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADMODE_2));
      WRITE_REG(hospi->Instance->WCCR, (cmd->DQSMode | OCTOSPI_WCCR_DDTR | OCTOSPI_WCCR_DMODE_2 |
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	691a      	ldr	r2, [r3, #16]
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	431a      	orrs	r2, r3
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f042 220c 	orr.w	r2, r2, #201329664	@ 0xc000c00
 800792a:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
                                        cmd->AddressSize | OCTOSPI_WCCR_ADDTR | OCTOSPI_WCCR_ADMODE_2));

      /* Configure the DLR register with the number of data */
      WRITE_REG(hospi->Instance->DLR, (cmd->NbData - 1U));
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	68da      	ldr	r2, [r3, #12]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	3a01      	subs	r2, #1
 8007938:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure the AR register with the address value */
      WRITE_REG(hospi->Instance->AR, cmd->Address);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	68ba      	ldr	r2, [r7, #8]
 8007940:	6852      	ldr	r2, [r2, #4]
 8007942:	649a      	str	r2, [r3, #72]	@ 0x48

      /* Update the state */
      hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2204      	movs	r2, #4
 8007948:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800794a:	e004      	b.n	8007956 <HAL_OSPI_HyperbusCmd+0xb8>
    }
  }
  else
  {
    status = HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2210      	movs	r2, #16
 8007954:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Return function status */
  return status;
 8007956:	7dfb      	ldrb	r3, [r7, #23]
}
 8007958:	4618      	mov	r0, r3
 800795a:	3718      	adds	r7, #24
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b08a      	sub	sp, #40	@ 0x28
 8007964:	af02      	add	r7, sp, #8
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800796c:	f7fc fdc6 	bl	80044fc <HAL_GetTick>
 8007970:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	3350      	adds	r3, #80	@ 0x50
 8007978:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d105      	bne.n	800798c <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2208      	movs	r2, #8
 8007988:	655a      	str	r2, [r3, #84]	@ 0x54
 800798a:	e057      	b.n	8007a3c <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007990:	2b04      	cmp	r3, #4
 8007992:	d14e      	bne.n	8007a32 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800799a:	1c5a      	adds	r2, r3, #1
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	68ba      	ldr	r2, [r7, #8]
 80079ac:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80079bc:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	9300      	str	r3, [sp, #0]
 80079c2:	69bb      	ldr	r3, [r7, #24]
 80079c4:	2201      	movs	r2, #1
 80079c6:	2104      	movs	r1, #4
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	f000 ff21 	bl	8008810 <OSPI_WaitFlagStateUntilTimeout>
 80079ce:	4603      	mov	r3, r0
 80079d0:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80079d2:	7ffb      	ldrb	r3, [r7, #31]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d113      	bne.n	8007a00 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079dc:	781a      	ldrb	r2, [r3, #0]
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079e6:	1c5a      	adds	r2, r3, #1
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079f0:	1e5a      	subs	r2, r3, #1
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	649a      	str	r2, [r3, #72]	@ 0x48
      } while (hospi->XferCount > 0U);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1df      	bne.n	80079be <HAL_OSPI_Transmit+0x5e>
 80079fe:	e000      	b.n	8007a02 <HAL_OSPI_Transmit+0xa2>
          break;
 8007a00:	bf00      	nop

      if (status == HAL_OK)
 8007a02:	7ffb      	ldrb	r3, [r7, #31]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d119      	bne.n	8007a3c <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	9300      	str	r3, [sp, #0]
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	2102      	movs	r1, #2
 8007a12:	68f8      	ldr	r0, [r7, #12]
 8007a14:	f000 fefc 	bl	8008810 <OSPI_WaitFlagStateUntilTimeout>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8007a1c:	7ffb      	ldrb	r3, [r7, #31]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d10c      	bne.n	8007a3c <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2202      	movs	r2, #2
 8007a28:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2202      	movs	r2, #2
 8007a2e:	651a      	str	r2, [r3, #80]	@ 0x50
 8007a30:	e004      	b.n	8007a3c <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2210      	movs	r2, #16
 8007a3a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 8007a3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3720      	adds	r7, #32
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b08c      	sub	sp, #48	@ 0x30
 8007a4a:	af02      	add	r7, sp, #8
 8007a4c:	60f8      	str	r0, [r7, #12]
 8007a4e:	60b9      	str	r1, [r7, #8]
 8007a50:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007a52:	f7fc fd53 	bl	80044fc <HAL_GetTick>
 8007a56:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	3350      	adds	r3, #80	@ 0x50
 8007a5e:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a66:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8007a70:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d106      	bne.n	8007a86 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2208      	movs	r2, #8
 8007a82:	655a      	str	r2, [r3, #84]	@ 0x54
 8007a84:	e07c      	b.n	8007b80 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a8a:	2b04      	cmp	r3, #4
 8007a8c:	d172      	bne.n	8007b74 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a94:	1c5a      	adds	r2, r3, #1
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	68ba      	ldr	r2, [r7, #8]
 8007aa6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8007aba:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007ac4:	d104      	bne.n	8007ad0 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	69ba      	ldr	r2, [r7, #24]
 8007acc:	649a      	str	r2, [r3, #72]	@ 0x48
 8007ace:	e011      	b.n	8007af4 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8007ad8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d004      	beq.n	8007aea <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	69ba      	ldr	r2, [r7, #24]
 8007ae6:	649a      	str	r2, [r3, #72]	@ 0x48
 8007ae8:	e004      	b.n	8007af4 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	697a      	ldr	r2, [r7, #20]
 8007af0:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	9300      	str	r3, [sp, #0]
 8007af8:	6a3b      	ldr	r3, [r7, #32]
 8007afa:	2201      	movs	r2, #1
 8007afc:	2106      	movs	r1, #6
 8007afe:	68f8      	ldr	r0, [r7, #12]
 8007b00:	f000 fe86 	bl	8008810 <OSPI_WaitFlagStateUntilTimeout>
 8007b04:	4603      	mov	r3, r0
 8007b06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
 8007b0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d114      	bne.n	8007b3c <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b16:	69fa      	ldr	r2, [r7, #28]
 8007b18:	7812      	ldrb	r2, [r2, #0]
 8007b1a:	b2d2      	uxtb	r2, r2
 8007b1c:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b22:	1c5a      	adds	r2, r3, #1
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b2c:	1e5a      	subs	r2, r3, #1
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	649a      	str	r2, [r3, #72]	@ 0x48
      } while (hospi->XferCount > 0U);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1dc      	bne.n	8007af4 <HAL_OSPI_Receive+0xae>
 8007b3a:	e000      	b.n	8007b3e <HAL_OSPI_Receive+0xf8>
          break;
 8007b3c:	bf00      	nop

      if (status == HAL_OK)
 8007b3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d11c      	bne.n	8007b80 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	9300      	str	r3, [sp, #0]
 8007b4a:	6a3b      	ldr	r3, [r7, #32]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	2102      	movs	r1, #2
 8007b50:	68f8      	ldr	r0, [r7, #12]
 8007b52:	f000 fe5d 	bl	8008810 <OSPI_WaitFlagStateUntilTimeout>
 8007b56:	4603      	mov	r3, r0
 8007b58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
 8007b5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d10d      	bne.n	8007b80 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2202      	movs	r2, #2
 8007b6a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2202      	movs	r2, #2
 8007b70:	651a      	str	r2, [r3, #80]	@ 0x50
 8007b72:	e005      	b.n	8007b80 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2210      	movs	r2, #16
 8007b7e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 8007b80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3728      	adds	r7, #40	@ 0x28
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <HAL_OSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b08a      	sub	sp, #40	@ 0x28
 8007b90:	af02      	add	r7, sp, #8
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007b98:	f7fc fcb0 	bl	80044fc <HAL_GetTick>
 8007b9c:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ba4:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8007bae:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP(cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL(cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bb4:	2b04      	cmp	r3, #4
 8007bb6:	d164      	bne.n	8007c82 <HAL_OSPI_AutoPolling+0xf6>
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007bc0:	d15f      	bne.n	8007c82 <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	9300      	str	r3, [sp, #0]
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	2120      	movs	r1, #32
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f000 fe1f 	bl	8008810 <OSPI_WaitFlagStateUntilTimeout>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8007bd6:	7ffb      	ldrb	r3, [r7, #31]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d158      	bne.n	8007c8e <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG(hospi->Instance->PSMAR, cfg->Match);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	68ba      	ldr	r2, [r7, #8]
 8007be2:	6812      	ldr	r2, [r2, #0]
 8007be4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      WRITE_REG(hospi->Instance->PSMKR, cfg->Mask);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68ba      	ldr	r2, [r7, #8]
 8007bee:	6852      	ldr	r2, [r2, #4]
 8007bf0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      WRITE_REG(hospi->Instance->PIR,   cfg->Interval);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68ba      	ldr	r2, [r7, #8]
 8007bfa:	6912      	ldr	r2, [r2, #16]
 8007bfc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f023 5243 	bic.w	r2, r3, #817889280	@ 0x30c00000
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	6899      	ldr	r1, [r3, #8]
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	430b      	orrs	r3, r1
 8007c14:	431a      	orrs	r2, r3
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8007c1e:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007c28:	d104      	bne.n	8007c34 <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	697a      	ldr	r2, [r7, #20]
 8007c30:	649a      	str	r2, [r3, #72]	@ 0x48
 8007c32:	e011      	b.n	8007c58 <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8007c3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d004      	beq.n	8007c4e <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	697a      	ldr	r2, [r7, #20]
 8007c4a:	649a      	str	r2, [r3, #72]	@ 0x48
 8007c4c:	e004      	b.n	8007c58 <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	693a      	ldr	r2, [r7, #16]
 8007c54:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	69bb      	ldr	r3, [r7, #24]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	2108      	movs	r1, #8
 8007c62:	68f8      	ldr	r0, [r7, #12]
 8007c64:	f000 fdd4 	bl	8008810 <OSPI_WaitFlagStateUntilTimeout>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8007c6c:	7ffb      	ldrb	r3, [r7, #31]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d10d      	bne.n	8007c8e <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2208      	movs	r2, #8
 8007c78:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2202      	movs	r2, #2
 8007c7e:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8007c80:	e005      	b.n	8007c8e <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2210      	movs	r2, #16
 8007c8a:	655a      	str	r2, [r3, #84]	@ 0x54
 8007c8c:	e000      	b.n	8007c90 <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 8007c8e:	bf00      	nop
  }

  /* Return function status */
  return status;
 8007c90:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3720      	adds	r7, #32
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
	...

08007c9c <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b086      	sub	sp, #24
 8007ca0:	af02      	add	r7, sp, #8
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007ca6:	f7fc fc29 	bl	80044fc <HAL_GetTick>
 8007caa:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cb0:	2b04      	cmp	r3, #4
 8007cb2:	d134      	bne.n	8007d1e <HAL_OSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cb8:	9300      	str	r3, [sp, #0]
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	2120      	movs	r1, #32
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 fda5 	bl	8008810 <OSPI_WaitFlagStateUntilTimeout>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8007cca:	7bfb      	ldrb	r3, [r7, #15]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d12b      	bne.n	8007d28 <HAL_OSPI_MemoryMapped+0x8c>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2288      	movs	r2, #136	@ 0x88
 8007cd4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2b08      	cmp	r3, #8
 8007cdc:	d111      	bne.n	8007d02 <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	683a      	ldr	r2, [r7, #0]
 8007ce4:	6852      	ldr	r2, [r2, #4]
 8007ce6:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2210      	movs	r2, #16
 8007cf0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8007d00:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	4b0a      	ldr	r3, [pc, #40]	@ (8007d34 <HAL_OSPI_MemoryMapped+0x98>)
 8007d0a:	4013      	ands	r3, r2
 8007d0c:	683a      	ldr	r2, [r7, #0]
 8007d0e:	6812      	ldr	r2, [r2, #0]
 8007d10:	431a      	orrs	r2, r3
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
 8007d1a:	601a      	str	r2, [r3, #0]
 8007d1c:	e004      	b.n	8007d28 <HAL_OSPI_MemoryMapped+0x8c>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2210      	movs	r2, #16
 8007d26:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Return function status */
  return status;
 8007d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	cffffff7 	.word	0xcffffff7

08007d38 <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b088      	sub	sp, #32
 8007d3c:	af02      	add	r7, sp, #8
 8007d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d40:	2300      	movs	r3, #0
 8007d42:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8007d44:	f7fc fbda 	bl	80044fc <HAL_GetTick>
 8007d48:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d4e:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f003 0308 	and.w	r3, r3, #8
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d104      	bne.n	8007d64 <HAL_OSPI_Abort+0x2c>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f003 0304 	and.w	r3, r3, #4
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d052      	beq.n	8007e0a <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f003 0304 	and.w	r3, r3, #4
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d014      	beq.n	8007d9c <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f022 0204 	bic.w	r2, r2, #4
 8007d80:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_MDMA_Abort(hospi->hmdma);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7ff fb7e 	bl	8007488 <HAL_MDMA_Abort>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8007d90:	7dfb      	ldrb	r3, [r7, #23]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d002      	beq.n	8007d9c <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2204      	movs	r2, #4
 8007d9a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	6a1b      	ldr	r3, [r3, #32]
 8007da2:	f003 0320 	and.w	r3, r3, #32
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d02b      	beq.n	8007e02 <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f042 0202 	orr.w	r2, r2, #2
 8007db8:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dbe:	9300      	str	r3, [sp, #0]
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	2102      	movs	r1, #2
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 fd22 	bl	8008810 <OSPI_WaitFlagStateUntilTimeout>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8007dd0:	7dfb      	ldrb	r3, [r7, #23]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d11f      	bne.n	8007e16 <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2202      	movs	r2, #2
 8007ddc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007de2:	9300      	str	r3, [sp, #0]
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	2200      	movs	r2, #0
 8007de8:	2120      	movs	r1, #32
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 fd10 	bl	8008810 <OSPI_WaitFlagStateUntilTimeout>
 8007df0:	4603      	mov	r3, r0
 8007df2:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8007df4:	7dfb      	ldrb	r3, [r7, #23]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d10d      	bne.n	8007e16 <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2202      	movs	r2, #2
 8007dfe:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8007e00:	e009      	b.n	8007e16 <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2202      	movs	r2, #2
 8007e06:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8007e08:	e005      	b.n	8007e16 <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2210      	movs	r2, #16
 8007e12:	655a      	str	r2, [r3, #84]	@ 0x54
 8007e14:	e000      	b.n	8007e18 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8007e16:	bf00      	nop
  }

  /* Return function status */
  return status;
 8007e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3718      	adds	r7, #24
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8007e22:	b480      	push	{r7}
 8007e24:	b083      	sub	sp, #12
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
 8007e2a:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	683a      	ldr	r2, [r7, #0]
 8007e30:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 8007e32:	2300      	movs	r3, #0
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b094      	sub	sp, #80	@ 0x50
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8007e52:	2300      	movs	r3, #0
 8007e54:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a9d      	ldr	r2, [pc, #628]	@ (80080d4 <HAL_OSPIM_Config+0x294>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d105      	bne.n	8007e6e <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8007e62:	2300      	movs	r3, #0
 8007e64:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 8007e66:	2301      	movs	r3, #1
 8007e68:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8007e6c:	e004      	b.n	8007e78 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 8007e72:	2300      	movs	r3, #0
 8007e74:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8007e78:	2300      	movs	r3, #0
 8007e7a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007e7e:	e01d      	b.n	8007ebc <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8007e80:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007e84:	3301      	adds	r3, #1
 8007e86:	b2d8      	uxtb	r0, r3
 8007e88:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8007e8c:	f107 0114 	add.w	r1, r7, #20
 8007e90:	4613      	mov	r3, r2
 8007e92:	005b      	lsls	r3, r3, #1
 8007e94:	4413      	add	r3, r2
 8007e96:	00db      	lsls	r3, r3, #3
 8007e98:	440b      	add	r3, r1
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	f000 fe6a 	bl	8008b74 <OSPIM_GetConfig>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d005      	beq.n	8007eb2 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2208      	movs	r2, #8
 8007eb0:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8007eb2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007ebc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d9dd      	bls.n	8007e80 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8007ec4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	f040 8495 	bne.w	80087f8 <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8007ece:	4b81      	ldr	r3, [pc, #516]	@ (80080d4 <HAL_OSPIM_Config+0x294>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 0301 	and.w	r3, r3, #1
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00b      	beq.n	8007ef2 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8007eda:	4b7e      	ldr	r3, [pc, #504]	@ (80080d4 <HAL_OSPIM_Config+0x294>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a7d      	ldr	r2, [pc, #500]	@ (80080d4 <HAL_OSPIM_Config+0x294>)
 8007ee0:	f023 0301 	bic.w	r3, r3, #1
 8007ee4:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8007ee6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8007eea:	f043 0301 	orr.w	r3, r3, #1
 8007eee:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8007ef2:	4b79      	ldr	r3, [pc, #484]	@ (80080d8 <HAL_OSPIM_Config+0x298>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f003 0301 	and.w	r3, r3, #1
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d00b      	beq.n	8007f16 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8007efe:	4b76      	ldr	r3, [pc, #472]	@ (80080d8 <HAL_OSPIM_Config+0x298>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a75      	ldr	r2, [pc, #468]	@ (80080d8 <HAL_OSPIM_Config+0x298>)
 8007f04:	f023 0301 	bic.w	r3, r3, #1
 8007f08:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8007f0a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8007f0e:	f043 0302 	orr.w	r3, r3, #2
 8007f12:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8007f16:	4971      	ldr	r1, [pc, #452]	@ (80080dc <HAL_OSPIM_Config+0x29c>)
 8007f18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f1a:	4613      	mov	r3, r2
 8007f1c:	005b      	lsls	r3, r3, #1
 8007f1e:	4413      	add	r3, r2
 8007f20:	00db      	lsls	r3, r3, #3
 8007f22:	3350      	adds	r3, #80	@ 0x50
 8007f24:	443b      	add	r3, r7
 8007f26:	3b34      	subs	r3, #52	@ 0x34
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	440b      	add	r3, r1
 8007f30:	6859      	ldr	r1, [r3, #4]
 8007f32:	486a      	ldr	r0, [pc, #424]	@ (80080dc <HAL_OSPIM_Config+0x29c>)
 8007f34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f36:	4613      	mov	r3, r2
 8007f38:	005b      	lsls	r3, r3, #1
 8007f3a:	4413      	add	r3, r2
 8007f3c:	00db      	lsls	r3, r3, #3
 8007f3e:	3350      	adds	r3, #80	@ 0x50
 8007f40:	443b      	add	r3, r7
 8007f42:	3b34      	subs	r3, #52	@ 0x34
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	3b01      	subs	r3, #1
 8007f48:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	4403      	add	r3, r0
 8007f50:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8007f52:	4b62      	ldr	r3, [pc, #392]	@ (80080dc <HAL_OSPIM_Config+0x29c>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 0301 	and.w	r3, r3, #1
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	f000 80c0 	beq.w	80080e0 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8007f60:	4b5e      	ldr	r3, [pc, #376]	@ (80080dc <HAL_OSPIM_Config+0x29c>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a5d      	ldr	r2, [pc, #372]	@ (80080dc <HAL_OSPIM_Config+0x29c>)
 8007f66:	f023 0301 	bic.w	r3, r3, #1
 8007f6a:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8007f6c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	f040 8162 	bne.w	800823a <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8007f76:	4959      	ldr	r1, [pc, #356]	@ (80080dc <HAL_OSPIM_Config+0x29c>)
 8007f78:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007f7c:	4613      	mov	r3, r2
 8007f7e:	005b      	lsls	r3, r3, #1
 8007f80:	4413      	add	r3, r2
 8007f82:	00db      	lsls	r3, r3, #3
 8007f84:	3350      	adds	r3, #80	@ 0x50
 8007f86:	443b      	add	r3, r7
 8007f88:	3b3c      	subs	r3, #60	@ 0x3c
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	3b01      	subs	r3, #1
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	440b      	add	r3, r1
 8007f92:	6859      	ldr	r1, [r3, #4]
 8007f94:	4851      	ldr	r0, [pc, #324]	@ (80080dc <HAL_OSPIM_Config+0x29c>)
 8007f96:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	005b      	lsls	r3, r3, #1
 8007f9e:	4413      	add	r3, r2
 8007fa0:	00db      	lsls	r3, r3, #3
 8007fa2:	3350      	adds	r3, #80	@ 0x50
 8007fa4:	443b      	add	r3, r7
 8007fa6:	3b3c      	subs	r3, #60	@ 0x3c
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	3b01      	subs	r3, #1
 8007fac:	f041 0202 	orr.w	r2, r1, #2
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	4403      	add	r3, r0
 8007fb4:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8007fb6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007fba:	4613      	mov	r3, r2
 8007fbc:	005b      	lsls	r3, r3, #1
 8007fbe:	4413      	add	r3, r2
 8007fc0:	00db      	lsls	r3, r3, #3
 8007fc2:	3350      	adds	r3, #80	@ 0x50
 8007fc4:	443b      	add	r3, r7
 8007fc6:	3b38      	subs	r3, #56	@ 0x38
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d01f      	beq.n	800800e <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8007fce:	4943      	ldr	r1, [pc, #268]	@ (80080dc <HAL_OSPIM_Config+0x29c>)
 8007fd0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	005b      	lsls	r3, r3, #1
 8007fd8:	4413      	add	r3, r2
 8007fda:	00db      	lsls	r3, r3, #3
 8007fdc:	3350      	adds	r3, #80	@ 0x50
 8007fde:	443b      	add	r3, r7
 8007fe0:	3b38      	subs	r3, #56	@ 0x38
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	3b01      	subs	r3, #1
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	440b      	add	r3, r1
 8007fea:	6859      	ldr	r1, [r3, #4]
 8007fec:	483b      	ldr	r0, [pc, #236]	@ (80080dc <HAL_OSPIM_Config+0x29c>)
 8007fee:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	005b      	lsls	r3, r3, #1
 8007ff6:	4413      	add	r3, r2
 8007ff8:	00db      	lsls	r3, r3, #3
 8007ffa:	3350      	adds	r3, #80	@ 0x50
 8007ffc:	443b      	add	r3, r7
 8007ffe:	3b38      	subs	r3, #56	@ 0x38
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	3b01      	subs	r3, #1
 8008004:	f041 0220 	orr.w	r2, r1, #32
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	4403      	add	r3, r0
 800800c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800800e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8008012:	4613      	mov	r3, r2
 8008014:	005b      	lsls	r3, r3, #1
 8008016:	4413      	add	r3, r2
 8008018:	00db      	lsls	r3, r3, #3
 800801a:	3350      	adds	r3, #80	@ 0x50
 800801c:	443b      	add	r3, r7
 800801e:	3b30      	subs	r3, #48	@ 0x30
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d023      	beq.n	800806e <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8008026:	492d      	ldr	r1, [pc, #180]	@ (80080dc <HAL_OSPIM_Config+0x29c>)
 8008028:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800802c:	4613      	mov	r3, r2
 800802e:	005b      	lsls	r3, r3, #1
 8008030:	4413      	add	r3, r2
 8008032:	00db      	lsls	r3, r3, #3
 8008034:	3350      	adds	r3, #80	@ 0x50
 8008036:	443b      	add	r3, r7
 8008038:	3b30      	subs	r3, #48	@ 0x30
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	3b01      	subs	r3, #1
 800803e:	f003 0301 	and.w	r3, r3, #1
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	440b      	add	r3, r1
 8008046:	6859      	ldr	r1, [r3, #4]
 8008048:	4824      	ldr	r0, [pc, #144]	@ (80080dc <HAL_OSPIM_Config+0x29c>)
 800804a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800804e:	4613      	mov	r3, r2
 8008050:	005b      	lsls	r3, r3, #1
 8008052:	4413      	add	r3, r2
 8008054:	00db      	lsls	r3, r3, #3
 8008056:	3350      	adds	r3, #80	@ 0x50
 8008058:	443b      	add	r3, r7
 800805a:	3b30      	subs	r3, #48	@ 0x30
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	3b01      	subs	r3, #1
 8008060:	f003 0301 	and.w	r3, r3, #1
 8008064:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	4403      	add	r3, r0
 800806c:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800806e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8008072:	4613      	mov	r3, r2
 8008074:	005b      	lsls	r3, r3, #1
 8008076:	4413      	add	r3, r2
 8008078:	00db      	lsls	r3, r3, #3
 800807a:	3350      	adds	r3, #80	@ 0x50
 800807c:	443b      	add	r3, r7
 800807e:	3b2c      	subs	r3, #44	@ 0x2c
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	f000 80d9 	beq.w	800823a <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8008088:	4914      	ldr	r1, [pc, #80]	@ (80080dc <HAL_OSPIM_Config+0x29c>)
 800808a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800808e:	4613      	mov	r3, r2
 8008090:	005b      	lsls	r3, r3, #1
 8008092:	4413      	add	r3, r2
 8008094:	00db      	lsls	r3, r3, #3
 8008096:	3350      	adds	r3, #80	@ 0x50
 8008098:	443b      	add	r3, r7
 800809a:	3b2c      	subs	r3, #44	@ 0x2c
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	3b01      	subs	r3, #1
 80080a0:	f003 0301 	and.w	r3, r3, #1
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	440b      	add	r3, r1
 80080a8:	6859      	ldr	r1, [r3, #4]
 80080aa:	480c      	ldr	r0, [pc, #48]	@ (80080dc <HAL_OSPIM_Config+0x29c>)
 80080ac:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80080b0:	4613      	mov	r3, r2
 80080b2:	005b      	lsls	r3, r3, #1
 80080b4:	4413      	add	r3, r2
 80080b6:	00db      	lsls	r3, r3, #3
 80080b8:	3350      	adds	r3, #80	@ 0x50
 80080ba:	443b      	add	r3, r7
 80080bc:	3b2c      	subs	r3, #44	@ 0x2c
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	3b01      	subs	r3, #1
 80080c2:	f003 0301 	and.w	r3, r3, #1
 80080c6:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	4403      	add	r3, r0
 80080ce:	605a      	str	r2, [r3, #4]
 80080d0:	e0b3      	b.n	800823a <HAL_OSPIM_Config+0x3fa>
 80080d2:	bf00      	nop
 80080d4:	52005000 	.word	0x52005000
 80080d8:	5200a000 	.word	0x5200a000
 80080dc:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 80080e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80080e2:	4613      	mov	r3, r2
 80080e4:	005b      	lsls	r3, r3, #1
 80080e6:	4413      	add	r3, r2
 80080e8:	00db      	lsls	r3, r3, #3
 80080ea:	3350      	adds	r3, #80	@ 0x50
 80080ec:	443b      	add	r3, r7
 80080ee:	3b3c      	subs	r3, #60	@ 0x3c
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	f000 80a1 	beq.w	800823a <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80080f8:	4993      	ldr	r1, [pc, #588]	@ (8008348 <HAL_OSPIM_Config+0x508>)
 80080fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80080fc:	4613      	mov	r3, r2
 80080fe:	005b      	lsls	r3, r3, #1
 8008100:	4413      	add	r3, r2
 8008102:	00db      	lsls	r3, r3, #3
 8008104:	3350      	adds	r3, #80	@ 0x50
 8008106:	443b      	add	r3, r7
 8008108:	3b3c      	subs	r3, #60	@ 0x3c
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	3b01      	subs	r3, #1
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	440b      	add	r3, r1
 8008112:	6859      	ldr	r1, [r3, #4]
 8008114:	488c      	ldr	r0, [pc, #560]	@ (8008348 <HAL_OSPIM_Config+0x508>)
 8008116:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008118:	4613      	mov	r3, r2
 800811a:	005b      	lsls	r3, r3, #1
 800811c:	4413      	add	r3, r2
 800811e:	00db      	lsls	r3, r3, #3
 8008120:	3350      	adds	r3, #80	@ 0x50
 8008122:	443b      	add	r3, r7
 8008124:	3b3c      	subs	r3, #60	@ 0x3c
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	3b01      	subs	r3, #1
 800812a:	f021 0201 	bic.w	r2, r1, #1
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	4403      	add	r3, r0
 8008132:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8008134:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008136:	4613      	mov	r3, r2
 8008138:	005b      	lsls	r3, r3, #1
 800813a:	4413      	add	r3, r2
 800813c:	00db      	lsls	r3, r3, #3
 800813e:	3350      	adds	r3, #80	@ 0x50
 8008140:	443b      	add	r3, r7
 8008142:	3b38      	subs	r3, #56	@ 0x38
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d01d      	beq.n	8008186 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800814a:	497f      	ldr	r1, [pc, #508]	@ (8008348 <HAL_OSPIM_Config+0x508>)
 800814c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800814e:	4613      	mov	r3, r2
 8008150:	005b      	lsls	r3, r3, #1
 8008152:	4413      	add	r3, r2
 8008154:	00db      	lsls	r3, r3, #3
 8008156:	3350      	adds	r3, #80	@ 0x50
 8008158:	443b      	add	r3, r7
 800815a:	3b38      	subs	r3, #56	@ 0x38
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	3b01      	subs	r3, #1
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	440b      	add	r3, r1
 8008164:	6859      	ldr	r1, [r3, #4]
 8008166:	4878      	ldr	r0, [pc, #480]	@ (8008348 <HAL_OSPIM_Config+0x508>)
 8008168:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800816a:	4613      	mov	r3, r2
 800816c:	005b      	lsls	r3, r3, #1
 800816e:	4413      	add	r3, r2
 8008170:	00db      	lsls	r3, r3, #3
 8008172:	3350      	adds	r3, #80	@ 0x50
 8008174:	443b      	add	r3, r7
 8008176:	3b38      	subs	r3, #56	@ 0x38
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	3b01      	subs	r3, #1
 800817c:	f021 0210 	bic.w	r2, r1, #16
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	4403      	add	r3, r0
 8008184:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8008186:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008188:	4613      	mov	r3, r2
 800818a:	005b      	lsls	r3, r3, #1
 800818c:	4413      	add	r3, r2
 800818e:	00db      	lsls	r3, r3, #3
 8008190:	3350      	adds	r3, #80	@ 0x50
 8008192:	443b      	add	r3, r7
 8008194:	3b30      	subs	r3, #48	@ 0x30
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d021      	beq.n	80081e0 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800819c:	496a      	ldr	r1, [pc, #424]	@ (8008348 <HAL_OSPIM_Config+0x508>)
 800819e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80081a0:	4613      	mov	r3, r2
 80081a2:	005b      	lsls	r3, r3, #1
 80081a4:	4413      	add	r3, r2
 80081a6:	00db      	lsls	r3, r3, #3
 80081a8:	3350      	adds	r3, #80	@ 0x50
 80081aa:	443b      	add	r3, r7
 80081ac:	3b30      	subs	r3, #48	@ 0x30
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	3b01      	subs	r3, #1
 80081b2:	f003 0301 	and.w	r3, r3, #1
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	440b      	add	r3, r1
 80081ba:	6859      	ldr	r1, [r3, #4]
 80081bc:	4862      	ldr	r0, [pc, #392]	@ (8008348 <HAL_OSPIM_Config+0x508>)
 80081be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80081c0:	4613      	mov	r3, r2
 80081c2:	005b      	lsls	r3, r3, #1
 80081c4:	4413      	add	r3, r2
 80081c6:	00db      	lsls	r3, r3, #3
 80081c8:	3350      	adds	r3, #80	@ 0x50
 80081ca:	443b      	add	r3, r7
 80081cc:	3b30      	subs	r3, #48	@ 0x30
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	3b01      	subs	r3, #1
 80081d2:	f003 0301 	and.w	r3, r3, #1
 80081d6:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	4403      	add	r3, r0
 80081de:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80081e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80081e2:	4613      	mov	r3, r2
 80081e4:	005b      	lsls	r3, r3, #1
 80081e6:	4413      	add	r3, r2
 80081e8:	00db      	lsls	r3, r3, #3
 80081ea:	3350      	adds	r3, #80	@ 0x50
 80081ec:	443b      	add	r3, r7
 80081ee:	3b2c      	subs	r3, #44	@ 0x2c
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d021      	beq.n	800823a <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80081f6:	4954      	ldr	r1, [pc, #336]	@ (8008348 <HAL_OSPIM_Config+0x508>)
 80081f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80081fa:	4613      	mov	r3, r2
 80081fc:	005b      	lsls	r3, r3, #1
 80081fe:	4413      	add	r3, r2
 8008200:	00db      	lsls	r3, r3, #3
 8008202:	3350      	adds	r3, #80	@ 0x50
 8008204:	443b      	add	r3, r7
 8008206:	3b2c      	subs	r3, #44	@ 0x2c
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	3b01      	subs	r3, #1
 800820c:	f003 0301 	and.w	r3, r3, #1
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	440b      	add	r3, r1
 8008214:	6859      	ldr	r1, [r3, #4]
 8008216:	484c      	ldr	r0, [pc, #304]	@ (8008348 <HAL_OSPIM_Config+0x508>)
 8008218:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800821a:	4613      	mov	r3, r2
 800821c:	005b      	lsls	r3, r3, #1
 800821e:	4413      	add	r3, r2
 8008220:	00db      	lsls	r3, r3, #3
 8008222:	3350      	adds	r3, #80	@ 0x50
 8008224:	443b      	add	r3, r7
 8008226:	3b2c      	subs	r3, #44	@ 0x2c
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	3b01      	subs	r3, #1
 800822c:	f003 0301 	and.w	r3, r3, #1
 8008230:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	4403      	add	r3, r0
 8008238:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	6819      	ldr	r1, [r3, #0]
 800823e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8008242:	4613      	mov	r3, r2
 8008244:	005b      	lsls	r3, r3, #1
 8008246:	4413      	add	r3, r2
 8008248:	00db      	lsls	r3, r3, #3
 800824a:	3350      	adds	r3, #80	@ 0x50
 800824c:	443b      	add	r3, r7
 800824e:	3b3c      	subs	r3, #60	@ 0x3c
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4299      	cmp	r1, r3
 8008254:	d038      	beq.n	80082c8 <HAL_OSPIM_Config+0x488>
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	6859      	ldr	r1, [r3, #4]
 800825a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800825e:	4613      	mov	r3, r2
 8008260:	005b      	lsls	r3, r3, #1
 8008262:	4413      	add	r3, r2
 8008264:	00db      	lsls	r3, r3, #3
 8008266:	3350      	adds	r3, #80	@ 0x50
 8008268:	443b      	add	r3, r7
 800826a:	3b38      	subs	r3, #56	@ 0x38
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4299      	cmp	r1, r3
 8008270:	d02a      	beq.n	80082c8 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	6899      	ldr	r1, [r3, #8]
 8008276:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800827a:	4613      	mov	r3, r2
 800827c:	005b      	lsls	r3, r3, #1
 800827e:	4413      	add	r3, r2
 8008280:	00db      	lsls	r3, r3, #3
 8008282:	3350      	adds	r3, #80	@ 0x50
 8008284:	443b      	add	r3, r7
 8008286:	3b34      	subs	r3, #52	@ 0x34
 8008288:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800828a:	4299      	cmp	r1, r3
 800828c:	d01c      	beq.n	80082c8 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	68d9      	ldr	r1, [r3, #12]
 8008292:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8008296:	4613      	mov	r3, r2
 8008298:	005b      	lsls	r3, r3, #1
 800829a:	4413      	add	r3, r2
 800829c:	00db      	lsls	r3, r3, #3
 800829e:	3350      	adds	r3, #80	@ 0x50
 80082a0:	443b      	add	r3, r7
 80082a2:	3b30      	subs	r3, #48	@ 0x30
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4299      	cmp	r1, r3
 80082a8:	d00e      	beq.n	80082c8 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	6919      	ldr	r1, [r3, #16]
 80082ae:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80082b2:	4613      	mov	r3, r2
 80082b4:	005b      	lsls	r3, r3, #1
 80082b6:	4413      	add	r3, r2
 80082b8:	00db      	lsls	r3, r3, #3
 80082ba:	3350      	adds	r3, #80	@ 0x50
 80082bc:	443b      	add	r3, r7
 80082be:	3b2c      	subs	r3, #44	@ 0x2c
 80082c0:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80082c2:	4299      	cmp	r1, r3
 80082c4:	f040 810e 	bne.w	80084e4 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	6819      	ldr	r1, [r3, #0]
 80082cc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80082d0:	4613      	mov	r3, r2
 80082d2:	005b      	lsls	r3, r3, #1
 80082d4:	4413      	add	r3, r2
 80082d6:	00db      	lsls	r3, r3, #3
 80082d8:	3350      	adds	r3, #80	@ 0x50
 80082da:	443b      	add	r3, r7
 80082dc:	3b3c      	subs	r3, #60	@ 0x3c
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4299      	cmp	r1, r3
 80082e2:	d133      	bne.n	800834c <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	6859      	ldr	r1, [r3, #4]
 80082e8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80082ec:	4613      	mov	r3, r2
 80082ee:	005b      	lsls	r3, r3, #1
 80082f0:	4413      	add	r3, r2
 80082f2:	00db      	lsls	r3, r3, #3
 80082f4:	3350      	adds	r3, #80	@ 0x50
 80082f6:	443b      	add	r3, r7
 80082f8:	3b38      	subs	r3, #56	@ 0x38
 80082fa:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 80082fc:	4299      	cmp	r1, r3
 80082fe:	d125      	bne.n	800834c <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	68d9      	ldr	r1, [r3, #12]
 8008304:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8008308:	4613      	mov	r3, r2
 800830a:	005b      	lsls	r3, r3, #1
 800830c:	4413      	add	r3, r2
 800830e:	00db      	lsls	r3, r3, #3
 8008310:	3350      	adds	r3, #80	@ 0x50
 8008312:	443b      	add	r3, r7
 8008314:	3b30      	subs	r3, #48	@ 0x30
 8008316:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8008318:	4299      	cmp	r1, r3
 800831a:	d117      	bne.n	800834c <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	6919      	ldr	r1, [r3, #16]
 8008320:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8008324:	4613      	mov	r3, r2
 8008326:	005b      	lsls	r3, r3, #1
 8008328:	4413      	add	r3, r2
 800832a:	00db      	lsls	r3, r3, #3
 800832c:	3350      	adds	r3, #80	@ 0x50
 800832e:	443b      	add	r3, r7
 8008330:	3b2c      	subs	r3, #44	@ 0x2c
 8008332:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8008334:	4299      	cmp	r1, r3
 8008336:	d109      	bne.n	800834c <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8008338:	4b03      	ldr	r3, [pc, #12]	@ (8008348 <HAL_OSPIM_Config+0x508>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a02      	ldr	r2, [pc, #8]	@ (8008348 <HAL_OSPIM_Config+0x508>)
 800833e:	f043 0301 	orr.w	r3, r3, #1
 8008342:	6013      	str	r3, [r2, #0]
 8008344:	e0ce      	b.n	80084e4 <HAL_OSPIM_Config+0x6a4>
 8008346:	bf00      	nop
 8008348:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800834c:	49bb      	ldr	r1, [pc, #748]	@ (800863c <HAL_OSPIM_Config+0x7fc>)
 800834e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8008352:	4613      	mov	r3, r2
 8008354:	005b      	lsls	r3, r3, #1
 8008356:	4413      	add	r3, r2
 8008358:	00db      	lsls	r3, r3, #3
 800835a:	3350      	adds	r3, #80	@ 0x50
 800835c:	443b      	add	r3, r7
 800835e:	3b3c      	subs	r3, #60	@ 0x3c
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	3b01      	subs	r3, #1
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	440b      	add	r3, r1
 8008368:	6859      	ldr	r1, [r3, #4]
 800836a:	48b4      	ldr	r0, [pc, #720]	@ (800863c <HAL_OSPIM_Config+0x7fc>)
 800836c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8008370:	4613      	mov	r3, r2
 8008372:	005b      	lsls	r3, r3, #1
 8008374:	4413      	add	r3, r2
 8008376:	00db      	lsls	r3, r3, #3
 8008378:	3350      	adds	r3, #80	@ 0x50
 800837a:	443b      	add	r3, r7
 800837c:	3b3c      	subs	r3, #60	@ 0x3c
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	3b01      	subs	r3, #1
 8008382:	f021 0201 	bic.w	r2, r1, #1
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	4403      	add	r3, r0
 800838a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800838c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8008390:	4613      	mov	r3, r2
 8008392:	005b      	lsls	r3, r3, #1
 8008394:	4413      	add	r3, r2
 8008396:	00db      	lsls	r3, r3, #3
 8008398:	3350      	adds	r3, #80	@ 0x50
 800839a:	443b      	add	r3, r7
 800839c:	3b38      	subs	r3, #56	@ 0x38
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d01f      	beq.n	80083e4 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80083a4:	49a5      	ldr	r1, [pc, #660]	@ (800863c <HAL_OSPIM_Config+0x7fc>)
 80083a6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80083aa:	4613      	mov	r3, r2
 80083ac:	005b      	lsls	r3, r3, #1
 80083ae:	4413      	add	r3, r2
 80083b0:	00db      	lsls	r3, r3, #3
 80083b2:	3350      	adds	r3, #80	@ 0x50
 80083b4:	443b      	add	r3, r7
 80083b6:	3b38      	subs	r3, #56	@ 0x38
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	3b01      	subs	r3, #1
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	440b      	add	r3, r1
 80083c0:	6859      	ldr	r1, [r3, #4]
 80083c2:	489e      	ldr	r0, [pc, #632]	@ (800863c <HAL_OSPIM_Config+0x7fc>)
 80083c4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80083c8:	4613      	mov	r3, r2
 80083ca:	005b      	lsls	r3, r3, #1
 80083cc:	4413      	add	r3, r2
 80083ce:	00db      	lsls	r3, r3, #3
 80083d0:	3350      	adds	r3, #80	@ 0x50
 80083d2:	443b      	add	r3, r7
 80083d4:	3b38      	subs	r3, #56	@ 0x38
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	3b01      	subs	r3, #1
 80083da:	f021 0210 	bic.w	r2, r1, #16
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	4403      	add	r3, r0
 80083e2:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80083e4:	4995      	ldr	r1, [pc, #596]	@ (800863c <HAL_OSPIM_Config+0x7fc>)
 80083e6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80083ea:	4613      	mov	r3, r2
 80083ec:	005b      	lsls	r3, r3, #1
 80083ee:	4413      	add	r3, r2
 80083f0:	00db      	lsls	r3, r3, #3
 80083f2:	3350      	adds	r3, #80	@ 0x50
 80083f4:	443b      	add	r3, r7
 80083f6:	3b34      	subs	r3, #52	@ 0x34
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	3b01      	subs	r3, #1
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	440b      	add	r3, r1
 8008400:	6859      	ldr	r1, [r3, #4]
 8008402:	488e      	ldr	r0, [pc, #568]	@ (800863c <HAL_OSPIM_Config+0x7fc>)
 8008404:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8008408:	4613      	mov	r3, r2
 800840a:	005b      	lsls	r3, r3, #1
 800840c:	4413      	add	r3, r2
 800840e:	00db      	lsls	r3, r3, #3
 8008410:	3350      	adds	r3, #80	@ 0x50
 8008412:	443b      	add	r3, r7
 8008414:	3b34      	subs	r3, #52	@ 0x34
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	3b01      	subs	r3, #1
 800841a:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	4403      	add	r3, r0
 8008422:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8008424:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8008428:	4613      	mov	r3, r2
 800842a:	005b      	lsls	r3, r3, #1
 800842c:	4413      	add	r3, r2
 800842e:	00db      	lsls	r3, r3, #3
 8008430:	3350      	adds	r3, #80	@ 0x50
 8008432:	443b      	add	r3, r7
 8008434:	3b30      	subs	r3, #48	@ 0x30
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d023      	beq.n	8008484 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800843c:	497f      	ldr	r1, [pc, #508]	@ (800863c <HAL_OSPIM_Config+0x7fc>)
 800843e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8008442:	4613      	mov	r3, r2
 8008444:	005b      	lsls	r3, r3, #1
 8008446:	4413      	add	r3, r2
 8008448:	00db      	lsls	r3, r3, #3
 800844a:	3350      	adds	r3, #80	@ 0x50
 800844c:	443b      	add	r3, r7
 800844e:	3b30      	subs	r3, #48	@ 0x30
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	3b01      	subs	r3, #1
 8008454:	f003 0301 	and.w	r3, r3, #1
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	440b      	add	r3, r1
 800845c:	6859      	ldr	r1, [r3, #4]
 800845e:	4877      	ldr	r0, [pc, #476]	@ (800863c <HAL_OSPIM_Config+0x7fc>)
 8008460:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8008464:	4613      	mov	r3, r2
 8008466:	005b      	lsls	r3, r3, #1
 8008468:	4413      	add	r3, r2
 800846a:	00db      	lsls	r3, r3, #3
 800846c:	3350      	adds	r3, #80	@ 0x50
 800846e:	443b      	add	r3, r7
 8008470:	3b30      	subs	r3, #48	@ 0x30
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	3b01      	subs	r3, #1
 8008476:	f003 0301 	and.w	r3, r3, #1
 800847a:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	4403      	add	r3, r0
 8008482:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8008484:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8008488:	4613      	mov	r3, r2
 800848a:	005b      	lsls	r3, r3, #1
 800848c:	4413      	add	r3, r2
 800848e:	00db      	lsls	r3, r3, #3
 8008490:	3350      	adds	r3, #80	@ 0x50
 8008492:	443b      	add	r3, r7
 8008494:	3b2c      	subs	r3, #44	@ 0x2c
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d023      	beq.n	80084e4 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800849c:	4967      	ldr	r1, [pc, #412]	@ (800863c <HAL_OSPIM_Config+0x7fc>)
 800849e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80084a2:	4613      	mov	r3, r2
 80084a4:	005b      	lsls	r3, r3, #1
 80084a6:	4413      	add	r3, r2
 80084a8:	00db      	lsls	r3, r3, #3
 80084aa:	3350      	adds	r3, #80	@ 0x50
 80084ac:	443b      	add	r3, r7
 80084ae:	3b2c      	subs	r3, #44	@ 0x2c
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	3b01      	subs	r3, #1
 80084b4:	f003 0301 	and.w	r3, r3, #1
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	440b      	add	r3, r1
 80084bc:	6859      	ldr	r1, [r3, #4]
 80084be:	485f      	ldr	r0, [pc, #380]	@ (800863c <HAL_OSPIM_Config+0x7fc>)
 80084c0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80084c4:	4613      	mov	r3, r2
 80084c6:	005b      	lsls	r3, r3, #1
 80084c8:	4413      	add	r3, r2
 80084ca:	00db      	lsls	r3, r3, #3
 80084cc:	3350      	adds	r3, #80	@ 0x50
 80084ce:	443b      	add	r3, r7
 80084d0:	3b2c      	subs	r3, #44	@ 0x2c
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	3b01      	subs	r3, #1
 80084d6:	f003 0301 	and.w	r3, r3, #1
 80084da:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	4403      	add	r3, r0
 80084e2:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80084e4:	4a55      	ldr	r2, [pc, #340]	@ (800863c <HAL_OSPIM_Config+0x7fc>)
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	3b01      	subs	r3, #1
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	4413      	add	r3, r2
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80084f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084f8:	025b      	lsls	r3, r3, #9
 80084fa:	431a      	orrs	r2, r3
 80084fc:	494f      	ldr	r1, [pc, #316]	@ (800863c <HAL_OSPIM_Config+0x7fc>)
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	3b01      	subs	r3, #1
 8008504:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	440b      	add	r3, r1
 800850c:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	695b      	ldr	r3, [r3, #20]
 8008512:	1e5a      	subs	r2, r3, #1
 8008514:	4b49      	ldr	r3, [pc, #292]	@ (800863c <HAL_OSPIM_Config+0x7fc>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	0c1b      	lsrs	r3, r3, #16
 800851a:	b2db      	uxtb	r3, r3
 800851c:	429a      	cmp	r2, r3
 800851e:	d90a      	bls.n	8008536 <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8008520:	4b46      	ldr	r3, [pc, #280]	@ (800863c <HAL_OSPIM_Config+0x7fc>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	695b      	ldr	r3, [r3, #20]
 800852c:	3b01      	subs	r3, #1
 800852e:	041b      	lsls	r3, r3, #16
 8008530:	4942      	ldr	r1, [pc, #264]	@ (800863c <HAL_OSPIM_Config+0x7fc>)
 8008532:	4313      	orrs	r3, r2
 8008534:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8008536:	4b41      	ldr	r3, [pc, #260]	@ (800863c <HAL_OSPIM_Config+0x7fc>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f003 0301 	and.w	r3, r3, #1
 800853e:	2b00      	cmp	r3, #0
 8008540:	f000 809a 	beq.w	8008678 <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8008544:	4a3d      	ldr	r2, [pc, #244]	@ (800863c <HAL_OSPIM_Config+0x7fc>)
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	3b01      	subs	r3, #1
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	4413      	add	r3, r2
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	f023 0203 	bic.w	r2, r3, #3
 8008556:	4939      	ldr	r1, [pc, #228]	@ (800863c <HAL_OSPIM_Config+0x7fc>)
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	3b01      	subs	r3, #1
 800855e:	f042 0201 	orr.w	r2, r2, #1
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	440b      	add	r3, r1
 8008566:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d011      	beq.n	8008594 <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8008570:	4a32      	ldr	r2, [pc, #200]	@ (800863c <HAL_OSPIM_Config+0x7fc>)
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	3b01      	subs	r3, #1
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	4413      	add	r3, r2
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008582:	492e      	ldr	r1, [pc, #184]	@ (800863c <HAL_OSPIM_Config+0x7fc>)
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	3b01      	subs	r3, #1
 800858a:	f042 0210 	orr.w	r2, r2, #16
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	440b      	add	r3, r1
 8008592:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800859c:	2b00      	cmp	r3, #0
 800859e:	d016      	beq.n	80085ce <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80085a0:	4a26      	ldr	r2, [pc, #152]	@ (800863c <HAL_OSPIM_Config+0x7fc>)
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	3b01      	subs	r3, #1
 80085a8:	f003 0301 	and.w	r3, r3, #1
 80085ac:	009b      	lsls	r3, r3, #2
 80085ae:	4413      	add	r3, r2
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80085b6:	4921      	ldr	r1, [pc, #132]	@ (800863c <HAL_OSPIM_Config+0x7fc>)
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	3b01      	subs	r3, #1
 80085be:	f003 0301 	and.w	r3, r3, #1
 80085c2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	440b      	add	r3, r1
 80085ca:	605a      	str	r2, [r3, #4]
 80085cc:	e019      	b.n	8008602 <HAL_OSPIM_Config+0x7c2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d015      	beq.n	8008602 <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80085d6:	4a19      	ldr	r2, [pc, #100]	@ (800863c <HAL_OSPIM_Config+0x7fc>)
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	3b01      	subs	r3, #1
 80085de:	f003 0301 	and.w	r3, r3, #1
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	4413      	add	r3, r2
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80085ec:	4913      	ldr	r1, [pc, #76]	@ (800863c <HAL_OSPIM_Config+0x7fc>)
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	68db      	ldr	r3, [r3, #12]
 80085f2:	3b01      	subs	r3, #1
 80085f4:	f003 0301 	and.w	r3, r3, #1
 80085f8:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	440b      	add	r3, r1
 8008600:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	691b      	ldr	r3, [r3, #16]
 8008606:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800860a:	2b00      	cmp	r3, #0
 800860c:	d018      	beq.n	8008640 <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800860e:	4a0b      	ldr	r2, [pc, #44]	@ (800863c <HAL_OSPIM_Config+0x7fc>)
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	691b      	ldr	r3, [r3, #16]
 8008614:	3b01      	subs	r3, #1
 8008616:	f003 0301 	and.w	r3, r3, #1
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	4413      	add	r3, r2
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8008624:	4905      	ldr	r1, [pc, #20]	@ (800863c <HAL_OSPIM_Config+0x7fc>)
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	691b      	ldr	r3, [r3, #16]
 800862a:	3b01      	subs	r3, #1
 800862c:	f003 0301 	and.w	r3, r3, #1
 8008630:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	440b      	add	r3, r1
 8008638:	605a      	str	r2, [r3, #4]
 800863a:	e0c5      	b.n	80087c8 <HAL_OSPIM_Config+0x988>
 800863c:	5200b400 	.word	0x5200b400
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	691b      	ldr	r3, [r3, #16]
 8008644:	2b00      	cmp	r3, #0
 8008646:	f000 80bf 	beq.w	80087c8 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800864a:	4a6e      	ldr	r2, [pc, #440]	@ (8008804 <HAL_OSPIM_Config+0x9c4>)
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	691b      	ldr	r3, [r3, #16]
 8008650:	3b01      	subs	r3, #1
 8008652:	f003 0301 	and.w	r3, r3, #1
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	4413      	add	r3, r2
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8008660:	4968      	ldr	r1, [pc, #416]	@ (8008804 <HAL_OSPIM_Config+0x9c4>)
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	691b      	ldr	r3, [r3, #16]
 8008666:	3b01      	subs	r3, #1
 8008668:	f003 0301 	and.w	r3, r3, #1
 800866c:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	440b      	add	r3, r1
 8008674:	605a      	str	r2, [r3, #4]
 8008676:	e0a7      	b.n	80087c8 <HAL_OSPIM_Config+0x988>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8008678:	4a62      	ldr	r2, [pc, #392]	@ (8008804 <HAL_OSPIM_Config+0x9c4>)
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	3b01      	subs	r3, #1
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	4413      	add	r3, r2
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	f023 0203 	bic.w	r2, r3, #3
 800868a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800868c:	005b      	lsls	r3, r3, #1
 800868e:	431a      	orrs	r2, r3
 8008690:	495c      	ldr	r1, [pc, #368]	@ (8008804 <HAL_OSPIM_Config+0x9c4>)
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	3b01      	subs	r3, #1
 8008698:	f042 0201 	orr.w	r2, r2, #1
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	440b      	add	r3, r1
 80086a0:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d014      	beq.n	80086d4 <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80086aa:	4a56      	ldr	r2, [pc, #344]	@ (8008804 <HAL_OSPIM_Config+0x9c4>)
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	3b01      	subs	r3, #1
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	4413      	add	r3, r2
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80086bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086be:	015b      	lsls	r3, r3, #5
 80086c0:	431a      	orrs	r2, r3
 80086c2:	4950      	ldr	r1, [pc, #320]	@ (8008804 <HAL_OSPIM_Config+0x9c4>)
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	3b01      	subs	r3, #1
 80086ca:	f042 0210 	orr.w	r2, r2, #16
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	440b      	add	r3, r1
 80086d2:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d019      	beq.n	8008714 <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80086e0:	4a48      	ldr	r2, [pc, #288]	@ (8008804 <HAL_OSPIM_Config+0x9c4>)
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	68db      	ldr	r3, [r3, #12]
 80086e6:	3b01      	subs	r3, #1
 80086e8:	f003 0301 	and.w	r3, r3, #1
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	4413      	add	r3, r2
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80086f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086f8:	049b      	lsls	r3, r3, #18
 80086fa:	431a      	orrs	r2, r3
 80086fc:	4941      	ldr	r1, [pc, #260]	@ (8008804 <HAL_OSPIM_Config+0x9c4>)
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	68db      	ldr	r3, [r3, #12]
 8008702:	3b01      	subs	r3, #1
 8008704:	f003 0301 	and.w	r3, r3, #1
 8008708:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	440b      	add	r3, r1
 8008710:	605a      	str	r2, [r3, #4]
 8008712:	e01c      	b.n	800874e <HAL_OSPIM_Config+0x90e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d018      	beq.n	800874e <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800871c:	4a39      	ldr	r2, [pc, #228]	@ (8008804 <HAL_OSPIM_Config+0x9c4>)
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	3b01      	subs	r3, #1
 8008724:	f003 0301 	and.w	r3, r3, #1
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	4413      	add	r3, r2
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8008732:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008734:	069b      	lsls	r3, r3, #26
 8008736:	431a      	orrs	r2, r3
 8008738:	4932      	ldr	r1, [pc, #200]	@ (8008804 <HAL_OSPIM_Config+0x9c4>)
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	68db      	ldr	r3, [r3, #12]
 800873e:	3b01      	subs	r3, #1
 8008740:	f003 0301 	and.w	r3, r3, #1
 8008744:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	440b      	add	r3, r1
 800874c:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	691b      	ldr	r3, [r3, #16]
 8008752:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008756:	2b00      	cmp	r3, #0
 8008758:	d019      	beq.n	800878e <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800875a:	4a2a      	ldr	r2, [pc, #168]	@ (8008804 <HAL_OSPIM_Config+0x9c4>)
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	691b      	ldr	r3, [r3, #16]
 8008760:	3b01      	subs	r3, #1
 8008762:	f003 0301 	and.w	r3, r3, #1
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	4413      	add	r3, r2
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8008770:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008772:	049b      	lsls	r3, r3, #18
 8008774:	431a      	orrs	r2, r3
 8008776:	4923      	ldr	r1, [pc, #140]	@ (8008804 <HAL_OSPIM_Config+0x9c4>)
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	691b      	ldr	r3, [r3, #16]
 800877c:	3b01      	subs	r3, #1
 800877e:	f003 0301 	and.w	r3, r3, #1
 8008782:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	440b      	add	r3, r1
 800878a:	605a      	str	r2, [r3, #4]
 800878c:	e01c      	b.n	80087c8 <HAL_OSPIM_Config+0x988>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	691b      	ldr	r3, [r3, #16]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d018      	beq.n	80087c8 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8008796:	4a1b      	ldr	r2, [pc, #108]	@ (8008804 <HAL_OSPIM_Config+0x9c4>)
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	691b      	ldr	r3, [r3, #16]
 800879c:	3b01      	subs	r3, #1
 800879e:	f003 0301 	and.w	r3, r3, #1
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	4413      	add	r3, r2
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80087ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087ae:	069b      	lsls	r3, r3, #26
 80087b0:	431a      	orrs	r2, r3
 80087b2:	4914      	ldr	r1, [pc, #80]	@ (8008804 <HAL_OSPIM_Config+0x9c4>)
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	691b      	ldr	r3, [r3, #16]
 80087b8:	3b01      	subs	r3, #1
 80087ba:	f003 0301 	and.w	r3, r3, #1
 80087be:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	440b      	add	r3, r1
 80087c6:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80087c8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80087cc:	f003 0301 	and.w	r3, r3, #1
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d005      	beq.n	80087e0 <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80087d4:	4b0c      	ldr	r3, [pc, #48]	@ (8008808 <HAL_OSPIM_Config+0x9c8>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a0b      	ldr	r2, [pc, #44]	@ (8008808 <HAL_OSPIM_Config+0x9c8>)
 80087da:	f043 0301 	orr.w	r3, r3, #1
 80087de:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 80087e0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80087e4:	f003 0302 	and.w	r3, r3, #2
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d005      	beq.n	80087f8 <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80087ec:	4b07      	ldr	r3, [pc, #28]	@ (800880c <HAL_OSPIM_Config+0x9cc>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a06      	ldr	r2, [pc, #24]	@ (800880c <HAL_OSPIM_Config+0x9cc>)
 80087f2:	f043 0301 	orr.w	r3, r3, #1
 80087f6:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 80087f8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3750      	adds	r7, #80	@ 0x50
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}
 8008804:	5200b400 	.word	0x5200b400
 8008808:	52005000 	.word	0x52005000
 800880c:	5200a000 	.word	0x5200a000

08008810 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	60b9      	str	r1, [r7, #8]
 800881a:	603b      	str	r3, [r7, #0]
 800881c:	4613      	mov	r3, r2
 800881e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8008820:	e01a      	b.n	8008858 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008828:	d016      	beq.n	8008858 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800882a:	f7fb fe67 	bl	80044fc <HAL_GetTick>
 800882e:	4602      	mov	r2, r0
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	1ad3      	subs	r3, r2, r3
 8008834:	69ba      	ldr	r2, [r7, #24]
 8008836:	429a      	cmp	r2, r3
 8008838:	d302      	bcc.n	8008840 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800883a:	69bb      	ldr	r3, [r7, #24]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d10b      	bne.n	8008858 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008846:	651a      	str	r2, [r3, #80]	@ 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800884c:	f043 0201 	orr.w	r2, r3, #1
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8008854:	2301      	movs	r3, #1
 8008856:	e00e      	b.n	8008876 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	6a1a      	ldr	r2, [r3, #32]
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	4013      	ands	r3, r2
 8008862:	2b00      	cmp	r3, #0
 8008864:	bf14      	ite	ne
 8008866:	2301      	movne	r3, #1
 8008868:	2300      	moveq	r3, #0
 800886a:	b2db      	uxtb	r3, r3
 800886c:	461a      	mov	r2, r3
 800886e:	79fb      	ldrb	r3, [r7, #7]
 8008870:	429a      	cmp	r2, r3
 8008872:	d1d6      	bne.n	8008822 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008874:	2300      	movs	r3, #0
}
 8008876:	4618      	mov	r0, r3
 8008878:	3710      	adds	r7, #16
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
	...

08008880 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8008880:	b480      	push	{r7}
 8008882:	b089      	sub	sp, #36	@ 0x24
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800888a:	2300      	movs	r3, #0
 800888c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800889c:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d10a      	bne.n	80088bc <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	685a      	ldr	r2, [r3, #4]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	430a      	orrs	r2, r1
 80088ba:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2b02      	cmp	r3, #2
 80088c2:	d114      	bne.n	80088ee <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80088cc:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80088d6:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 80088e0:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80088ea:	60fb      	str	r3, [r7, #12]
 80088ec:	e02c      	b.n	8008948 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	2b03      	cmp	r3, #3
 80088f4:	d114      	bne.n	8008920 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80088fe:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8008908:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008912:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800891c:	60fb      	str	r3, [r7, #12]
 800891e:	e013      	b.n	8008948 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8008928:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8008932:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800893c:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8008946:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008950:	431a      	orrs	r2, r3
 8008952:	69bb      	ldr	r3, [r7, #24]
 8008954:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800895a:	2b00      	cmp	r3, #0
 800895c:	d012      	beq.n	8008984 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8008966:	69bb      	ldr	r3, [r7, #24]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008976:	4319      	orrs	r1, r3
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800897c:	430b      	orrs	r3, r1
 800897e:	431a      	orrs	r2, r3
 8008980:	69bb      	ldr	r3, [r7, #24]
 8008982:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f023 021f 	bic.w	r2, r3, #31
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008990:	431a      	orrs	r2, r3
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800899a:	2b00      	cmp	r3, #0
 800899c:	d009      	beq.n	80089b2 <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d105      	bne.n	80089b2 <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	3a01      	subs	r2, #1
 80089b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	68db      	ldr	r3, [r3, #12]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	f000 8095 	beq.w	8008ae6 <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	69db      	ldr	r3, [r3, #28]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d053      	beq.n	8008a6c <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d01e      	beq.n	8008a0a <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80089cc:	69bb      	ldr	r3, [r7, #24]
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	4b64      	ldr	r3, [pc, #400]	@ (8008b64 <OSPI_ConfigCmd+0x2e4>)
 80089d2:	4013      	ands	r3, r2
 80089d4:	683a      	ldr	r2, [r7, #0]
 80089d6:	68d1      	ldr	r1, [r2, #12]
 80089d8:	683a      	ldr	r2, [r7, #0]
 80089da:	6952      	ldr	r2, [r2, #20]
 80089dc:	4311      	orrs	r1, r2
 80089de:	683a      	ldr	r2, [r7, #0]
 80089e0:	6912      	ldr	r2, [r2, #16]
 80089e2:	4311      	orrs	r1, r2
 80089e4:	683a      	ldr	r2, [r7, #0]
 80089e6:	69d2      	ldr	r2, [r2, #28]
 80089e8:	4311      	orrs	r1, r2
 80089ea:	683a      	ldr	r2, [r7, #0]
 80089ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80089ee:	4311      	orrs	r1, r2
 80089f0:	683a      	ldr	r2, [r7, #0]
 80089f2:	6a12      	ldr	r2, [r2, #32]
 80089f4:	4311      	orrs	r1, r2
 80089f6:	683a      	ldr	r2, [r7, #0]
 80089f8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80089fa:	4311      	orrs	r1, r2
 80089fc:	683a      	ldr	r2, [r7, #0]
 80089fe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8008a00:	430a      	orrs	r2, r1
 8008a02:	431a      	orrs	r2, r3
 8008a04:	69bb      	ldr	r3, [r7, #24]
 8008a06:	601a      	str	r2, [r3, #0]
 8008a08:	e026      	b.n	8008a58 <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8008a0a:	69bb      	ldr	r3, [r7, #24]
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	4b56      	ldr	r3, [pc, #344]	@ (8008b68 <OSPI_ConfigCmd+0x2e8>)
 8008a10:	4013      	ands	r3, r2
 8008a12:	683a      	ldr	r2, [r7, #0]
 8008a14:	68d1      	ldr	r1, [r2, #12]
 8008a16:	683a      	ldr	r2, [r7, #0]
 8008a18:	6952      	ldr	r2, [r2, #20]
 8008a1a:	4311      	orrs	r1, r2
 8008a1c:	683a      	ldr	r2, [r7, #0]
 8008a1e:	6912      	ldr	r2, [r2, #16]
 8008a20:	4311      	orrs	r1, r2
 8008a22:	683a      	ldr	r2, [r7, #0]
 8008a24:	69d2      	ldr	r2, [r2, #28]
 8008a26:	4311      	orrs	r1, r2
 8008a28:	683a      	ldr	r2, [r7, #0]
 8008a2a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008a2c:	4311      	orrs	r1, r2
 8008a2e:	683a      	ldr	r2, [r7, #0]
 8008a30:	6a12      	ldr	r2, [r2, #32]
 8008a32:	430a      	orrs	r2, r1
 8008a34:	431a      	orrs	r2, r3
 8008a36:	69bb      	ldr	r3, [r7, #24]
 8008a38:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a42:	d109      	bne.n	8008a58 <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8008a48:	2b08      	cmp	r3, #8
 8008a4a:	d105      	bne.n	8008a58 <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8008a4c:	69bb      	ldr	r3, [r7, #24]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008a54:	69bb      	ldr	r3, [r7, #24]
 8008a56:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	689a      	ldr	r2, [r3, #8]
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	683a      	ldr	r2, [r7, #0]
 8008a66:	6992      	ldr	r2, [r2, #24]
 8008a68:	649a      	str	r2, [r3, #72]	@ 0x48
 8008a6a:	e074      	b.n	8008b56 <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d015      	beq.n	8008aa0 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8008a74:	69bb      	ldr	r3, [r7, #24]
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	4b3c      	ldr	r3, [pc, #240]	@ (8008b6c <OSPI_ConfigCmd+0x2ec>)
 8008a7a:	4013      	ands	r3, r2
 8008a7c:	683a      	ldr	r2, [r7, #0]
 8008a7e:	68d1      	ldr	r1, [r2, #12]
 8008a80:	683a      	ldr	r2, [r7, #0]
 8008a82:	6952      	ldr	r2, [r2, #20]
 8008a84:	4311      	orrs	r1, r2
 8008a86:	683a      	ldr	r2, [r7, #0]
 8008a88:	6912      	ldr	r2, [r2, #16]
 8008a8a:	4311      	orrs	r1, r2
 8008a8c:	683a      	ldr	r2, [r7, #0]
 8008a8e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008a90:	4311      	orrs	r1, r2
 8008a92:	683a      	ldr	r2, [r7, #0]
 8008a94:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8008a96:	430a      	orrs	r2, r1
 8008a98:	431a      	orrs	r2, r3
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	601a      	str	r2, [r3, #0]
 8008a9e:	e01d      	b.n	8008adc <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	68d9      	ldr	r1, [r3, #12]
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	695b      	ldr	r3, [r3, #20]
 8008ab0:	4319      	orrs	r1, r3
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	691b      	ldr	r3, [r3, #16]
 8008ab6:	430b      	orrs	r3, r1
 8008ab8:	431a      	orrs	r2, r3
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ac2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ac6:	d109      	bne.n	8008adc <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8008acc:	2b08      	cmp	r3, #8
 8008ace:	d105      	bne.n	8008adc <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8008ad0:	69bb      	ldr	r3, [r7, #24]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	689a      	ldr	r2, [r3, #8]
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	601a      	str	r2, [r3, #0]
 8008ae4:	e037      	b.n	8008b56 <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	69db      	ldr	r3, [r3, #28]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d02e      	beq.n	8008b4c <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d015      	beq.n	8008b22 <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8008af6:	69bb      	ldr	r3, [r7, #24]
 8008af8:	681a      	ldr	r2, [r3, #0]
 8008afa:	4b1d      	ldr	r3, [pc, #116]	@ (8008b70 <OSPI_ConfigCmd+0x2f0>)
 8008afc:	4013      	ands	r3, r2
 8008afe:	683a      	ldr	r2, [r7, #0]
 8008b00:	69d1      	ldr	r1, [r2, #28]
 8008b02:	683a      	ldr	r2, [r7, #0]
 8008b04:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008b06:	4311      	orrs	r1, r2
 8008b08:	683a      	ldr	r2, [r7, #0]
 8008b0a:	6a12      	ldr	r2, [r2, #32]
 8008b0c:	4311      	orrs	r1, r2
 8008b0e:	683a      	ldr	r2, [r7, #0]
 8008b10:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008b12:	4311      	orrs	r1, r2
 8008b14:	683a      	ldr	r2, [r7, #0]
 8008b16:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8008b18:	430a      	orrs	r2, r1
 8008b1a:	431a      	orrs	r2, r3
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	601a      	str	r2, [r3, #0]
 8008b20:	e00e      	b.n	8008b40 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	69d9      	ldr	r1, [r3, #28]
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b32:	4319      	orrs	r1, r3
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	6a1b      	ldr	r3, [r3, #32]
 8008b38:	430b      	orrs	r3, r1
 8008b3a:	431a      	orrs	r2, r3
 8008b3c:	69bb      	ldr	r3, [r7, #24]
 8008b3e:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	683a      	ldr	r2, [r7, #0]
 8008b46:	6992      	ldr	r2, [r2, #24]
 8008b48:	649a      	str	r2, [r3, #72]	@ 0x48
 8008b4a:	e004      	b.n	8008b56 <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2208      	movs	r2, #8
 8008b54:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 8008b56:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3724      	adds	r7, #36	@ 0x24
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr
 8008b64:	f0ffc0c0 	.word	0xf0ffc0c0
 8008b68:	ffffc0c0 	.word	0xffffc0c0
 8008b6c:	f0ffffc0 	.word	0xf0ffffc0
 8008b70:	f0ffc0ff 	.word	0xf0ffc0ff

08008b74 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b087      	sub	sp, #28
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	6039      	str	r1, [r7, #0]
 8008b7e:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8008b80:	2300      	movs	r3, #0
 8008b82:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8008b84:	2300      	movs	r3, #0
 8008b86:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8008b88:	79fb      	ldrb	r3, [r7, #7]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d005      	beq.n	8008b9a <OSPIM_GetConfig+0x26>
 8008b8e:	79fb      	ldrb	r3, [r7, #7]
 8008b90:	2b02      	cmp	r3, #2
 8008b92:	d802      	bhi.n	8008b9a <OSPIM_GetConfig+0x26>
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d102      	bne.n	8008ba0 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	75fb      	strb	r3, [r7, #23]
 8008b9e:	e098      	b.n	8008cd2 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8008bbe:	79fb      	ldrb	r3, [r7, #7]
 8008bc0:	2b02      	cmp	r3, #2
 8008bc2:	d10b      	bne.n	8008bdc <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8008bc4:	4b46      	ldr	r3, [pc, #280]	@ (8008ce0 <OSPIM_GetConfig+0x16c>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f003 0301 	and.w	r3, r3, #1
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d102      	bne.n	8008bd6 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8008bd0:	4b44      	ldr	r3, [pc, #272]	@ (8008ce4 <OSPIM_GetConfig+0x170>)
 8008bd2:	613b      	str	r3, [r7, #16]
 8008bd4:	e002      	b.n	8008bdc <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8008bd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008bda:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8008bdc:	2300      	movs	r3, #0
 8008bde:	60fb      	str	r3, [r7, #12]
 8008be0:	e074      	b.n	8008ccc <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8008be2:	4a3f      	ldr	r2, [pc, #252]	@ (8008ce0 <OSPIM_GetConfig+0x16c>)
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	4413      	add	r3, r2
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	f003 0301 	and.w	r3, r3, #1
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d00a      	beq.n	8008c0e <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8008bf8:	68ba      	ldr	r2, [r7, #8]
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	4053      	eors	r3, r2
 8008bfe:	f003 0302 	and.w	r3, r3, #2
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d103      	bne.n	8008c0e <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	1c5a      	adds	r2, r3, #1
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	f003 0310 	and.w	r3, r3, #16
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d00a      	beq.n	8008c2e <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8008c18:	68ba      	ldr	r2, [r7, #8]
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	4053      	eors	r3, r2
 8008c1e:	f003 0320 	and.w	r3, r3, #32
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d103      	bne.n	8008c2e <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	1c5a      	adds	r2, r3, #1
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d00a      	beq.n	8008c4e <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8008c38:	68ba      	ldr	r2, [r7, #8]
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	4053      	eors	r3, r2
 8008c3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d103      	bne.n	8008c4e <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	1c5a      	adds	r2, r3, #1
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d018      	beq.n	8008c8a <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8008c58:	68ba      	ldr	r2, [r7, #8]
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	4053      	eors	r3, r2
 8008c5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d111      	bne.n	8008c8a <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d106      	bne.n	8008c7e <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	3301      	adds	r3, #1
 8008c74:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	60da      	str	r2, [r3, #12]
 8008c7c:	e005      	b.n	8008c8a <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	3301      	adds	r3, #1
 8008c82:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d018      	beq.n	8008cc6 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8008c94:	68ba      	ldr	r2, [r7, #8]
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	4053      	eors	r3, r2
 8008c9a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d111      	bne.n	8008cc6 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d106      	bne.n	8008cba <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	3301      	adds	r3, #1
 8008cb0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	611a      	str	r2, [r3, #16]
 8008cb8:	e005      	b.n	8008cc6 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	3301      	adds	r3, #1
 8008cca:	60fb      	str	r3, [r7, #12]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d987      	bls.n	8008be2 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8008cd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	371c      	adds	r7, #28
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr
 8008ce0:	5200b400 	.word	0x5200b400
 8008ce4:	04040222 	.word	0x04040222

08008ce8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8008cf0:	4b29      	ldr	r3, [pc, #164]	@ (8008d98 <HAL_PWREx_ConfigSupply+0xb0>)
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	f003 0307 	and.w	r3, r3, #7
 8008cf8:	2b06      	cmp	r3, #6
 8008cfa:	d00a      	beq.n	8008d12 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008cfc:	4b26      	ldr	r3, [pc, #152]	@ (8008d98 <HAL_PWREx_ConfigSupply+0xb0>)
 8008cfe:	68db      	ldr	r3, [r3, #12]
 8008d00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d001      	beq.n	8008d0e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	e03f      	b.n	8008d8e <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	e03d      	b.n	8008d8e <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008d12:	4b21      	ldr	r3, [pc, #132]	@ (8008d98 <HAL_PWREx_ConfigSupply+0xb0>)
 8008d14:	68db      	ldr	r3, [r3, #12]
 8008d16:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8008d1a:	491f      	ldr	r1, [pc, #124]	@ (8008d98 <HAL_PWREx_ConfigSupply+0xb0>)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008d22:	f7fb fbeb 	bl	80044fc <HAL_GetTick>
 8008d26:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008d28:	e009      	b.n	8008d3e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008d2a:	f7fb fbe7 	bl	80044fc <HAL_GetTick>
 8008d2e:	4602      	mov	r2, r0
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	1ad3      	subs	r3, r2, r3
 8008d34:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008d38:	d901      	bls.n	8008d3e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e027      	b.n	8008d8e <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008d3e:	4b16      	ldr	r3, [pc, #88]	@ (8008d98 <HAL_PWREx_ConfigSupply+0xb0>)
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008d46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d4a:	d1ee      	bne.n	8008d2a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2b1e      	cmp	r3, #30
 8008d50:	d008      	beq.n	8008d64 <HAL_PWREx_ConfigSupply+0x7c>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d56:	d005      	beq.n	8008d64 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2b1d      	cmp	r3, #29
 8008d5c:	d002      	beq.n	8008d64 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2b2d      	cmp	r3, #45	@ 0x2d
 8008d62:	d113      	bne.n	8008d8c <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8008d64:	f7fb fbca 	bl	80044fc <HAL_GetTick>
 8008d68:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008d6a:	e009      	b.n	8008d80 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008d6c:	f7fb fbc6 	bl	80044fc <HAL_GetTick>
 8008d70:	4602      	mov	r2, r0
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	1ad3      	subs	r3, r2, r3
 8008d76:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008d7a:	d901      	bls.n	8008d80 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	e006      	b.n	8008d8e <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008d80:	4b05      	ldr	r3, [pc, #20]	@ (8008d98 <HAL_PWREx_ConfigSupply+0xb0>)
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	f003 0311 	and.w	r3, r3, #17
 8008d88:	2b11      	cmp	r3, #17
 8008d8a:	d1ef      	bne.n	8008d6c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008d8c:	2300      	movs	r3, #0
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3710      	adds	r7, #16
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	58024800 	.word	0x58024800

08008d9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b08c      	sub	sp, #48	@ 0x30
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d101      	bne.n	8008dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	e3c8      	b.n	8009540 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f003 0301 	and.w	r3, r3, #1
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	f000 8087 	beq.w	8008eca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008dbc:	4b88      	ldr	r3, [pc, #544]	@ (8008fe0 <HAL_RCC_OscConfig+0x244>)
 8008dbe:	691b      	ldr	r3, [r3, #16]
 8008dc0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008dc6:	4b86      	ldr	r3, [pc, #536]	@ (8008fe0 <HAL_RCC_OscConfig+0x244>)
 8008dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dca:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dce:	2b10      	cmp	r3, #16
 8008dd0:	d007      	beq.n	8008de2 <HAL_RCC_OscConfig+0x46>
 8008dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dd4:	2b18      	cmp	r3, #24
 8008dd6:	d110      	bne.n	8008dfa <HAL_RCC_OscConfig+0x5e>
 8008dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dda:	f003 0303 	and.w	r3, r3, #3
 8008dde:	2b02      	cmp	r3, #2
 8008de0:	d10b      	bne.n	8008dfa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008de2:	4b7f      	ldr	r3, [pc, #508]	@ (8008fe0 <HAL_RCC_OscConfig+0x244>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d06c      	beq.n	8008ec8 <HAL_RCC_OscConfig+0x12c>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d168      	bne.n	8008ec8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008df6:	2301      	movs	r3, #1
 8008df8:	e3a2      	b.n	8009540 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e02:	d106      	bne.n	8008e12 <HAL_RCC_OscConfig+0x76>
 8008e04:	4b76      	ldr	r3, [pc, #472]	@ (8008fe0 <HAL_RCC_OscConfig+0x244>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a75      	ldr	r2, [pc, #468]	@ (8008fe0 <HAL_RCC_OscConfig+0x244>)
 8008e0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e0e:	6013      	str	r3, [r2, #0]
 8008e10:	e02e      	b.n	8008e70 <HAL_RCC_OscConfig+0xd4>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d10c      	bne.n	8008e34 <HAL_RCC_OscConfig+0x98>
 8008e1a:	4b71      	ldr	r3, [pc, #452]	@ (8008fe0 <HAL_RCC_OscConfig+0x244>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a70      	ldr	r2, [pc, #448]	@ (8008fe0 <HAL_RCC_OscConfig+0x244>)
 8008e20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e24:	6013      	str	r3, [r2, #0]
 8008e26:	4b6e      	ldr	r3, [pc, #440]	@ (8008fe0 <HAL_RCC_OscConfig+0x244>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4a6d      	ldr	r2, [pc, #436]	@ (8008fe0 <HAL_RCC_OscConfig+0x244>)
 8008e2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008e30:	6013      	str	r3, [r2, #0]
 8008e32:	e01d      	b.n	8008e70 <HAL_RCC_OscConfig+0xd4>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008e3c:	d10c      	bne.n	8008e58 <HAL_RCC_OscConfig+0xbc>
 8008e3e:	4b68      	ldr	r3, [pc, #416]	@ (8008fe0 <HAL_RCC_OscConfig+0x244>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a67      	ldr	r2, [pc, #412]	@ (8008fe0 <HAL_RCC_OscConfig+0x244>)
 8008e44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008e48:	6013      	str	r3, [r2, #0]
 8008e4a:	4b65      	ldr	r3, [pc, #404]	@ (8008fe0 <HAL_RCC_OscConfig+0x244>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a64      	ldr	r2, [pc, #400]	@ (8008fe0 <HAL_RCC_OscConfig+0x244>)
 8008e50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e54:	6013      	str	r3, [r2, #0]
 8008e56:	e00b      	b.n	8008e70 <HAL_RCC_OscConfig+0xd4>
 8008e58:	4b61      	ldr	r3, [pc, #388]	@ (8008fe0 <HAL_RCC_OscConfig+0x244>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a60      	ldr	r2, [pc, #384]	@ (8008fe0 <HAL_RCC_OscConfig+0x244>)
 8008e5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e62:	6013      	str	r3, [r2, #0]
 8008e64:	4b5e      	ldr	r3, [pc, #376]	@ (8008fe0 <HAL_RCC_OscConfig+0x244>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a5d      	ldr	r2, [pc, #372]	@ (8008fe0 <HAL_RCC_OscConfig+0x244>)
 8008e6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008e6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d013      	beq.n	8008ea0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e78:	f7fb fb40 	bl	80044fc <HAL_GetTick>
 8008e7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008e7e:	e008      	b.n	8008e92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e80:	f7fb fb3c 	bl	80044fc <HAL_GetTick>
 8008e84:	4602      	mov	r2, r0
 8008e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e88:	1ad3      	subs	r3, r2, r3
 8008e8a:	2b64      	cmp	r3, #100	@ 0x64
 8008e8c:	d901      	bls.n	8008e92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008e8e:	2303      	movs	r3, #3
 8008e90:	e356      	b.n	8009540 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008e92:	4b53      	ldr	r3, [pc, #332]	@ (8008fe0 <HAL_RCC_OscConfig+0x244>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d0f0      	beq.n	8008e80 <HAL_RCC_OscConfig+0xe4>
 8008e9e:	e014      	b.n	8008eca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ea0:	f7fb fb2c 	bl	80044fc <HAL_GetTick>
 8008ea4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008ea6:	e008      	b.n	8008eba <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ea8:	f7fb fb28 	bl	80044fc <HAL_GetTick>
 8008eac:	4602      	mov	r2, r0
 8008eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb0:	1ad3      	subs	r3, r2, r3
 8008eb2:	2b64      	cmp	r3, #100	@ 0x64
 8008eb4:	d901      	bls.n	8008eba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008eb6:	2303      	movs	r3, #3
 8008eb8:	e342      	b.n	8009540 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008eba:	4b49      	ldr	r3, [pc, #292]	@ (8008fe0 <HAL_RCC_OscConfig+0x244>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d1f0      	bne.n	8008ea8 <HAL_RCC_OscConfig+0x10c>
 8008ec6:	e000      	b.n	8008eca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ec8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f003 0302 	and.w	r3, r3, #2
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	f000 808c 	beq.w	8008ff0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ed8:	4b41      	ldr	r3, [pc, #260]	@ (8008fe0 <HAL_RCC_OscConfig+0x244>)
 8008eda:	691b      	ldr	r3, [r3, #16]
 8008edc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ee0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008ee2:	4b3f      	ldr	r3, [pc, #252]	@ (8008fe0 <HAL_RCC_OscConfig+0x244>)
 8008ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ee6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008ee8:	6a3b      	ldr	r3, [r7, #32]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d007      	beq.n	8008efe <HAL_RCC_OscConfig+0x162>
 8008eee:	6a3b      	ldr	r3, [r7, #32]
 8008ef0:	2b18      	cmp	r3, #24
 8008ef2:	d137      	bne.n	8008f64 <HAL_RCC_OscConfig+0x1c8>
 8008ef4:	69fb      	ldr	r3, [r7, #28]
 8008ef6:	f003 0303 	and.w	r3, r3, #3
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d132      	bne.n	8008f64 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008efe:	4b38      	ldr	r3, [pc, #224]	@ (8008fe0 <HAL_RCC_OscConfig+0x244>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f003 0304 	and.w	r3, r3, #4
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d005      	beq.n	8008f16 <HAL_RCC_OscConfig+0x17a>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	68db      	ldr	r3, [r3, #12]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d101      	bne.n	8008f16 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008f12:	2301      	movs	r3, #1
 8008f14:	e314      	b.n	8009540 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008f16:	4b32      	ldr	r3, [pc, #200]	@ (8008fe0 <HAL_RCC_OscConfig+0x244>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f023 0219 	bic.w	r2, r3, #25
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	68db      	ldr	r3, [r3, #12]
 8008f22:	492f      	ldr	r1, [pc, #188]	@ (8008fe0 <HAL_RCC_OscConfig+0x244>)
 8008f24:	4313      	orrs	r3, r2
 8008f26:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f28:	f7fb fae8 	bl	80044fc <HAL_GetTick>
 8008f2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f2e:	e008      	b.n	8008f42 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f30:	f7fb fae4 	bl	80044fc <HAL_GetTick>
 8008f34:	4602      	mov	r2, r0
 8008f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f38:	1ad3      	subs	r3, r2, r3
 8008f3a:	2b02      	cmp	r3, #2
 8008f3c:	d901      	bls.n	8008f42 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8008f3e:	2303      	movs	r3, #3
 8008f40:	e2fe      	b.n	8009540 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f42:	4b27      	ldr	r3, [pc, #156]	@ (8008fe0 <HAL_RCC_OscConfig+0x244>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f003 0304 	and.w	r3, r3, #4
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d0f0      	beq.n	8008f30 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f4e:	4b24      	ldr	r3, [pc, #144]	@ (8008fe0 <HAL_RCC_OscConfig+0x244>)
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	691b      	ldr	r3, [r3, #16]
 8008f5a:	061b      	lsls	r3, r3, #24
 8008f5c:	4920      	ldr	r1, [pc, #128]	@ (8008fe0 <HAL_RCC_OscConfig+0x244>)
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f62:	e045      	b.n	8008ff0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d026      	beq.n	8008fba <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008f6c:	4b1c      	ldr	r3, [pc, #112]	@ (8008fe0 <HAL_RCC_OscConfig+0x244>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f023 0219 	bic.w	r2, r3, #25
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	68db      	ldr	r3, [r3, #12]
 8008f78:	4919      	ldr	r1, [pc, #100]	@ (8008fe0 <HAL_RCC_OscConfig+0x244>)
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f7e:	f7fb fabd 	bl	80044fc <HAL_GetTick>
 8008f82:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f84:	e008      	b.n	8008f98 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f86:	f7fb fab9 	bl	80044fc <HAL_GetTick>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f8e:	1ad3      	subs	r3, r2, r3
 8008f90:	2b02      	cmp	r3, #2
 8008f92:	d901      	bls.n	8008f98 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008f94:	2303      	movs	r3, #3
 8008f96:	e2d3      	b.n	8009540 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f98:	4b11      	ldr	r3, [pc, #68]	@ (8008fe0 <HAL_RCC_OscConfig+0x244>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f003 0304 	and.w	r3, r3, #4
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d0f0      	beq.n	8008f86 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8008fe0 <HAL_RCC_OscConfig+0x244>)
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	691b      	ldr	r3, [r3, #16]
 8008fb0:	061b      	lsls	r3, r3, #24
 8008fb2:	490b      	ldr	r1, [pc, #44]	@ (8008fe0 <HAL_RCC_OscConfig+0x244>)
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	604b      	str	r3, [r1, #4]
 8008fb8:	e01a      	b.n	8008ff0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008fba:	4b09      	ldr	r3, [pc, #36]	@ (8008fe0 <HAL_RCC_OscConfig+0x244>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a08      	ldr	r2, [pc, #32]	@ (8008fe0 <HAL_RCC_OscConfig+0x244>)
 8008fc0:	f023 0301 	bic.w	r3, r3, #1
 8008fc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fc6:	f7fb fa99 	bl	80044fc <HAL_GetTick>
 8008fca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008fcc:	e00a      	b.n	8008fe4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008fce:	f7fb fa95 	bl	80044fc <HAL_GetTick>
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fd6:	1ad3      	subs	r3, r2, r3
 8008fd8:	2b02      	cmp	r3, #2
 8008fda:	d903      	bls.n	8008fe4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008fdc:	2303      	movs	r3, #3
 8008fde:	e2af      	b.n	8009540 <HAL_RCC_OscConfig+0x7a4>
 8008fe0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008fe4:	4b96      	ldr	r3, [pc, #600]	@ (8009240 <HAL_RCC_OscConfig+0x4a4>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f003 0304 	and.w	r3, r3, #4
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d1ee      	bne.n	8008fce <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f003 0310 	and.w	r3, r3, #16
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d06a      	beq.n	80090d2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ffc:	4b90      	ldr	r3, [pc, #576]	@ (8009240 <HAL_RCC_OscConfig+0x4a4>)
 8008ffe:	691b      	ldr	r3, [r3, #16]
 8009000:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009004:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009006:	4b8e      	ldr	r3, [pc, #568]	@ (8009240 <HAL_RCC_OscConfig+0x4a4>)
 8009008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800900a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	2b08      	cmp	r3, #8
 8009010:	d007      	beq.n	8009022 <HAL_RCC_OscConfig+0x286>
 8009012:	69bb      	ldr	r3, [r7, #24]
 8009014:	2b18      	cmp	r3, #24
 8009016:	d11b      	bne.n	8009050 <HAL_RCC_OscConfig+0x2b4>
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	f003 0303 	and.w	r3, r3, #3
 800901e:	2b01      	cmp	r3, #1
 8009020:	d116      	bne.n	8009050 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009022:	4b87      	ldr	r3, [pc, #540]	@ (8009240 <HAL_RCC_OscConfig+0x4a4>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800902a:	2b00      	cmp	r3, #0
 800902c:	d005      	beq.n	800903a <HAL_RCC_OscConfig+0x29e>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	69db      	ldr	r3, [r3, #28]
 8009032:	2b80      	cmp	r3, #128	@ 0x80
 8009034:	d001      	beq.n	800903a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009036:	2301      	movs	r3, #1
 8009038:	e282      	b.n	8009540 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800903a:	4b81      	ldr	r3, [pc, #516]	@ (8009240 <HAL_RCC_OscConfig+0x4a4>)
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6a1b      	ldr	r3, [r3, #32]
 8009046:	061b      	lsls	r3, r3, #24
 8009048:	497d      	ldr	r1, [pc, #500]	@ (8009240 <HAL_RCC_OscConfig+0x4a4>)
 800904a:	4313      	orrs	r3, r2
 800904c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800904e:	e040      	b.n	80090d2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	69db      	ldr	r3, [r3, #28]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d023      	beq.n	80090a0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009058:	4b79      	ldr	r3, [pc, #484]	@ (8009240 <HAL_RCC_OscConfig+0x4a4>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a78      	ldr	r2, [pc, #480]	@ (8009240 <HAL_RCC_OscConfig+0x4a4>)
 800905e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009062:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009064:	f7fb fa4a 	bl	80044fc <HAL_GetTick>
 8009068:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800906a:	e008      	b.n	800907e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800906c:	f7fb fa46 	bl	80044fc <HAL_GetTick>
 8009070:	4602      	mov	r2, r0
 8009072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009074:	1ad3      	subs	r3, r2, r3
 8009076:	2b02      	cmp	r3, #2
 8009078:	d901      	bls.n	800907e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800907a:	2303      	movs	r3, #3
 800907c:	e260      	b.n	8009540 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800907e:	4b70      	ldr	r3, [pc, #448]	@ (8009240 <HAL_RCC_OscConfig+0x4a4>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009086:	2b00      	cmp	r3, #0
 8009088:	d0f0      	beq.n	800906c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800908a:	4b6d      	ldr	r3, [pc, #436]	@ (8009240 <HAL_RCC_OscConfig+0x4a4>)
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6a1b      	ldr	r3, [r3, #32]
 8009096:	061b      	lsls	r3, r3, #24
 8009098:	4969      	ldr	r1, [pc, #420]	@ (8009240 <HAL_RCC_OscConfig+0x4a4>)
 800909a:	4313      	orrs	r3, r2
 800909c:	60cb      	str	r3, [r1, #12]
 800909e:	e018      	b.n	80090d2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80090a0:	4b67      	ldr	r3, [pc, #412]	@ (8009240 <HAL_RCC_OscConfig+0x4a4>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a66      	ldr	r2, [pc, #408]	@ (8009240 <HAL_RCC_OscConfig+0x4a4>)
 80090a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090ac:	f7fb fa26 	bl	80044fc <HAL_GetTick>
 80090b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80090b2:	e008      	b.n	80090c6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80090b4:	f7fb fa22 	bl	80044fc <HAL_GetTick>
 80090b8:	4602      	mov	r2, r0
 80090ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090bc:	1ad3      	subs	r3, r2, r3
 80090be:	2b02      	cmp	r3, #2
 80090c0:	d901      	bls.n	80090c6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80090c2:	2303      	movs	r3, #3
 80090c4:	e23c      	b.n	8009540 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80090c6:	4b5e      	ldr	r3, [pc, #376]	@ (8009240 <HAL_RCC_OscConfig+0x4a4>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d1f0      	bne.n	80090b4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f003 0308 	and.w	r3, r3, #8
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d036      	beq.n	800914c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	695b      	ldr	r3, [r3, #20]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d019      	beq.n	800911a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80090e6:	4b56      	ldr	r3, [pc, #344]	@ (8009240 <HAL_RCC_OscConfig+0x4a4>)
 80090e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090ea:	4a55      	ldr	r2, [pc, #340]	@ (8009240 <HAL_RCC_OscConfig+0x4a4>)
 80090ec:	f043 0301 	orr.w	r3, r3, #1
 80090f0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090f2:	f7fb fa03 	bl	80044fc <HAL_GetTick>
 80090f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80090f8:	e008      	b.n	800910c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80090fa:	f7fb f9ff 	bl	80044fc <HAL_GetTick>
 80090fe:	4602      	mov	r2, r0
 8009100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009102:	1ad3      	subs	r3, r2, r3
 8009104:	2b02      	cmp	r3, #2
 8009106:	d901      	bls.n	800910c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009108:	2303      	movs	r3, #3
 800910a:	e219      	b.n	8009540 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800910c:	4b4c      	ldr	r3, [pc, #304]	@ (8009240 <HAL_RCC_OscConfig+0x4a4>)
 800910e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009110:	f003 0302 	and.w	r3, r3, #2
 8009114:	2b00      	cmp	r3, #0
 8009116:	d0f0      	beq.n	80090fa <HAL_RCC_OscConfig+0x35e>
 8009118:	e018      	b.n	800914c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800911a:	4b49      	ldr	r3, [pc, #292]	@ (8009240 <HAL_RCC_OscConfig+0x4a4>)
 800911c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800911e:	4a48      	ldr	r2, [pc, #288]	@ (8009240 <HAL_RCC_OscConfig+0x4a4>)
 8009120:	f023 0301 	bic.w	r3, r3, #1
 8009124:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009126:	f7fb f9e9 	bl	80044fc <HAL_GetTick>
 800912a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800912c:	e008      	b.n	8009140 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800912e:	f7fb f9e5 	bl	80044fc <HAL_GetTick>
 8009132:	4602      	mov	r2, r0
 8009134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009136:	1ad3      	subs	r3, r2, r3
 8009138:	2b02      	cmp	r3, #2
 800913a:	d901      	bls.n	8009140 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800913c:	2303      	movs	r3, #3
 800913e:	e1ff      	b.n	8009540 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009140:	4b3f      	ldr	r3, [pc, #252]	@ (8009240 <HAL_RCC_OscConfig+0x4a4>)
 8009142:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009144:	f003 0302 	and.w	r3, r3, #2
 8009148:	2b00      	cmp	r3, #0
 800914a:	d1f0      	bne.n	800912e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f003 0320 	and.w	r3, r3, #32
 8009154:	2b00      	cmp	r3, #0
 8009156:	d036      	beq.n	80091c6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	699b      	ldr	r3, [r3, #24]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d019      	beq.n	8009194 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009160:	4b37      	ldr	r3, [pc, #220]	@ (8009240 <HAL_RCC_OscConfig+0x4a4>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a36      	ldr	r2, [pc, #216]	@ (8009240 <HAL_RCC_OscConfig+0x4a4>)
 8009166:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800916a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800916c:	f7fb f9c6 	bl	80044fc <HAL_GetTick>
 8009170:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009172:	e008      	b.n	8009186 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009174:	f7fb f9c2 	bl	80044fc <HAL_GetTick>
 8009178:	4602      	mov	r2, r0
 800917a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800917c:	1ad3      	subs	r3, r2, r3
 800917e:	2b02      	cmp	r3, #2
 8009180:	d901      	bls.n	8009186 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009182:	2303      	movs	r3, #3
 8009184:	e1dc      	b.n	8009540 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009186:	4b2e      	ldr	r3, [pc, #184]	@ (8009240 <HAL_RCC_OscConfig+0x4a4>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800918e:	2b00      	cmp	r3, #0
 8009190:	d0f0      	beq.n	8009174 <HAL_RCC_OscConfig+0x3d8>
 8009192:	e018      	b.n	80091c6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009194:	4b2a      	ldr	r3, [pc, #168]	@ (8009240 <HAL_RCC_OscConfig+0x4a4>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a29      	ldr	r2, [pc, #164]	@ (8009240 <HAL_RCC_OscConfig+0x4a4>)
 800919a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800919e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80091a0:	f7fb f9ac 	bl	80044fc <HAL_GetTick>
 80091a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80091a6:	e008      	b.n	80091ba <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80091a8:	f7fb f9a8 	bl	80044fc <HAL_GetTick>
 80091ac:	4602      	mov	r2, r0
 80091ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b0:	1ad3      	subs	r3, r2, r3
 80091b2:	2b02      	cmp	r3, #2
 80091b4:	d901      	bls.n	80091ba <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80091b6:	2303      	movs	r3, #3
 80091b8:	e1c2      	b.n	8009540 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80091ba:	4b21      	ldr	r3, [pc, #132]	@ (8009240 <HAL_RCC_OscConfig+0x4a4>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d1f0      	bne.n	80091a8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f003 0304 	and.w	r3, r3, #4
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	f000 8086 	beq.w	80092e0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80091d4:	4b1b      	ldr	r3, [pc, #108]	@ (8009244 <HAL_RCC_OscConfig+0x4a8>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a1a      	ldr	r2, [pc, #104]	@ (8009244 <HAL_RCC_OscConfig+0x4a8>)
 80091da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80091de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80091e0:	f7fb f98c 	bl	80044fc <HAL_GetTick>
 80091e4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80091e6:	e008      	b.n	80091fa <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80091e8:	f7fb f988 	bl	80044fc <HAL_GetTick>
 80091ec:	4602      	mov	r2, r0
 80091ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091f0:	1ad3      	subs	r3, r2, r3
 80091f2:	2b64      	cmp	r3, #100	@ 0x64
 80091f4:	d901      	bls.n	80091fa <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80091f6:	2303      	movs	r3, #3
 80091f8:	e1a2      	b.n	8009540 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80091fa:	4b12      	ldr	r3, [pc, #72]	@ (8009244 <HAL_RCC_OscConfig+0x4a8>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009202:	2b00      	cmp	r3, #0
 8009204:	d0f0      	beq.n	80091e8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	2b01      	cmp	r3, #1
 800920c:	d106      	bne.n	800921c <HAL_RCC_OscConfig+0x480>
 800920e:	4b0c      	ldr	r3, [pc, #48]	@ (8009240 <HAL_RCC_OscConfig+0x4a4>)
 8009210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009212:	4a0b      	ldr	r2, [pc, #44]	@ (8009240 <HAL_RCC_OscConfig+0x4a4>)
 8009214:	f043 0301 	orr.w	r3, r3, #1
 8009218:	6713      	str	r3, [r2, #112]	@ 0x70
 800921a:	e032      	b.n	8009282 <HAL_RCC_OscConfig+0x4e6>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d111      	bne.n	8009248 <HAL_RCC_OscConfig+0x4ac>
 8009224:	4b06      	ldr	r3, [pc, #24]	@ (8009240 <HAL_RCC_OscConfig+0x4a4>)
 8009226:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009228:	4a05      	ldr	r2, [pc, #20]	@ (8009240 <HAL_RCC_OscConfig+0x4a4>)
 800922a:	f023 0301 	bic.w	r3, r3, #1
 800922e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009230:	4b03      	ldr	r3, [pc, #12]	@ (8009240 <HAL_RCC_OscConfig+0x4a4>)
 8009232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009234:	4a02      	ldr	r2, [pc, #8]	@ (8009240 <HAL_RCC_OscConfig+0x4a4>)
 8009236:	f023 0304 	bic.w	r3, r3, #4
 800923a:	6713      	str	r3, [r2, #112]	@ 0x70
 800923c:	e021      	b.n	8009282 <HAL_RCC_OscConfig+0x4e6>
 800923e:	bf00      	nop
 8009240:	58024400 	.word	0x58024400
 8009244:	58024800 	.word	0x58024800
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	2b05      	cmp	r3, #5
 800924e:	d10c      	bne.n	800926a <HAL_RCC_OscConfig+0x4ce>
 8009250:	4b83      	ldr	r3, [pc, #524]	@ (8009460 <HAL_RCC_OscConfig+0x6c4>)
 8009252:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009254:	4a82      	ldr	r2, [pc, #520]	@ (8009460 <HAL_RCC_OscConfig+0x6c4>)
 8009256:	f043 0304 	orr.w	r3, r3, #4
 800925a:	6713      	str	r3, [r2, #112]	@ 0x70
 800925c:	4b80      	ldr	r3, [pc, #512]	@ (8009460 <HAL_RCC_OscConfig+0x6c4>)
 800925e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009260:	4a7f      	ldr	r2, [pc, #508]	@ (8009460 <HAL_RCC_OscConfig+0x6c4>)
 8009262:	f043 0301 	orr.w	r3, r3, #1
 8009266:	6713      	str	r3, [r2, #112]	@ 0x70
 8009268:	e00b      	b.n	8009282 <HAL_RCC_OscConfig+0x4e6>
 800926a:	4b7d      	ldr	r3, [pc, #500]	@ (8009460 <HAL_RCC_OscConfig+0x6c4>)
 800926c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800926e:	4a7c      	ldr	r2, [pc, #496]	@ (8009460 <HAL_RCC_OscConfig+0x6c4>)
 8009270:	f023 0301 	bic.w	r3, r3, #1
 8009274:	6713      	str	r3, [r2, #112]	@ 0x70
 8009276:	4b7a      	ldr	r3, [pc, #488]	@ (8009460 <HAL_RCC_OscConfig+0x6c4>)
 8009278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800927a:	4a79      	ldr	r2, [pc, #484]	@ (8009460 <HAL_RCC_OscConfig+0x6c4>)
 800927c:	f023 0304 	bic.w	r3, r3, #4
 8009280:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	689b      	ldr	r3, [r3, #8]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d015      	beq.n	80092b6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800928a:	f7fb f937 	bl	80044fc <HAL_GetTick>
 800928e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009290:	e00a      	b.n	80092a8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009292:	f7fb f933 	bl	80044fc <HAL_GetTick>
 8009296:	4602      	mov	r2, r0
 8009298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800929a:	1ad3      	subs	r3, r2, r3
 800929c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d901      	bls.n	80092a8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80092a4:	2303      	movs	r3, #3
 80092a6:	e14b      	b.n	8009540 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80092a8:	4b6d      	ldr	r3, [pc, #436]	@ (8009460 <HAL_RCC_OscConfig+0x6c4>)
 80092aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092ac:	f003 0302 	and.w	r3, r3, #2
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d0ee      	beq.n	8009292 <HAL_RCC_OscConfig+0x4f6>
 80092b4:	e014      	b.n	80092e0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092b6:	f7fb f921 	bl	80044fc <HAL_GetTick>
 80092ba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80092bc:	e00a      	b.n	80092d4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092be:	f7fb f91d 	bl	80044fc <HAL_GetTick>
 80092c2:	4602      	mov	r2, r0
 80092c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092c6:	1ad3      	subs	r3, r2, r3
 80092c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d901      	bls.n	80092d4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80092d0:	2303      	movs	r3, #3
 80092d2:	e135      	b.n	8009540 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80092d4:	4b62      	ldr	r3, [pc, #392]	@ (8009460 <HAL_RCC_OscConfig+0x6c4>)
 80092d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092d8:	f003 0302 	and.w	r3, r3, #2
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d1ee      	bne.n	80092be <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	f000 812a 	beq.w	800953e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80092ea:	4b5d      	ldr	r3, [pc, #372]	@ (8009460 <HAL_RCC_OscConfig+0x6c4>)
 80092ec:	691b      	ldr	r3, [r3, #16]
 80092ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80092f2:	2b18      	cmp	r3, #24
 80092f4:	f000 80ba 	beq.w	800946c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092fc:	2b02      	cmp	r3, #2
 80092fe:	f040 8095 	bne.w	800942c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009302:	4b57      	ldr	r3, [pc, #348]	@ (8009460 <HAL_RCC_OscConfig+0x6c4>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a56      	ldr	r2, [pc, #344]	@ (8009460 <HAL_RCC_OscConfig+0x6c4>)
 8009308:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800930c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800930e:	f7fb f8f5 	bl	80044fc <HAL_GetTick>
 8009312:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009314:	e008      	b.n	8009328 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009316:	f7fb f8f1 	bl	80044fc <HAL_GetTick>
 800931a:	4602      	mov	r2, r0
 800931c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800931e:	1ad3      	subs	r3, r2, r3
 8009320:	2b02      	cmp	r3, #2
 8009322:	d901      	bls.n	8009328 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009324:	2303      	movs	r3, #3
 8009326:	e10b      	b.n	8009540 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009328:	4b4d      	ldr	r3, [pc, #308]	@ (8009460 <HAL_RCC_OscConfig+0x6c4>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009330:	2b00      	cmp	r3, #0
 8009332:	d1f0      	bne.n	8009316 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009334:	4b4a      	ldr	r3, [pc, #296]	@ (8009460 <HAL_RCC_OscConfig+0x6c4>)
 8009336:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009338:	4b4a      	ldr	r3, [pc, #296]	@ (8009464 <HAL_RCC_OscConfig+0x6c8>)
 800933a:	4013      	ands	r3, r2
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009344:	0112      	lsls	r2, r2, #4
 8009346:	430a      	orrs	r2, r1
 8009348:	4945      	ldr	r1, [pc, #276]	@ (8009460 <HAL_RCC_OscConfig+0x6c4>)
 800934a:	4313      	orrs	r3, r2
 800934c:	628b      	str	r3, [r1, #40]	@ 0x28
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009352:	3b01      	subs	r3, #1
 8009354:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800935c:	3b01      	subs	r3, #1
 800935e:	025b      	lsls	r3, r3, #9
 8009360:	b29b      	uxth	r3, r3
 8009362:	431a      	orrs	r2, r3
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009368:	3b01      	subs	r3, #1
 800936a:	041b      	lsls	r3, r3, #16
 800936c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009370:	431a      	orrs	r2, r3
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009376:	3b01      	subs	r3, #1
 8009378:	061b      	lsls	r3, r3, #24
 800937a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800937e:	4938      	ldr	r1, [pc, #224]	@ (8009460 <HAL_RCC_OscConfig+0x6c4>)
 8009380:	4313      	orrs	r3, r2
 8009382:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009384:	4b36      	ldr	r3, [pc, #216]	@ (8009460 <HAL_RCC_OscConfig+0x6c4>)
 8009386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009388:	4a35      	ldr	r2, [pc, #212]	@ (8009460 <HAL_RCC_OscConfig+0x6c4>)
 800938a:	f023 0301 	bic.w	r3, r3, #1
 800938e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009390:	4b33      	ldr	r3, [pc, #204]	@ (8009460 <HAL_RCC_OscConfig+0x6c4>)
 8009392:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009394:	4b34      	ldr	r3, [pc, #208]	@ (8009468 <HAL_RCC_OscConfig+0x6cc>)
 8009396:	4013      	ands	r3, r2
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800939c:	00d2      	lsls	r2, r2, #3
 800939e:	4930      	ldr	r1, [pc, #192]	@ (8009460 <HAL_RCC_OscConfig+0x6c4>)
 80093a0:	4313      	orrs	r3, r2
 80093a2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80093a4:	4b2e      	ldr	r3, [pc, #184]	@ (8009460 <HAL_RCC_OscConfig+0x6c4>)
 80093a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093a8:	f023 020c 	bic.w	r2, r3, #12
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093b0:	492b      	ldr	r1, [pc, #172]	@ (8009460 <HAL_RCC_OscConfig+0x6c4>)
 80093b2:	4313      	orrs	r3, r2
 80093b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80093b6:	4b2a      	ldr	r3, [pc, #168]	@ (8009460 <HAL_RCC_OscConfig+0x6c4>)
 80093b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093ba:	f023 0202 	bic.w	r2, r3, #2
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093c2:	4927      	ldr	r1, [pc, #156]	@ (8009460 <HAL_RCC_OscConfig+0x6c4>)
 80093c4:	4313      	orrs	r3, r2
 80093c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80093c8:	4b25      	ldr	r3, [pc, #148]	@ (8009460 <HAL_RCC_OscConfig+0x6c4>)
 80093ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093cc:	4a24      	ldr	r2, [pc, #144]	@ (8009460 <HAL_RCC_OscConfig+0x6c4>)
 80093ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80093d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093d4:	4b22      	ldr	r3, [pc, #136]	@ (8009460 <HAL_RCC_OscConfig+0x6c4>)
 80093d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093d8:	4a21      	ldr	r2, [pc, #132]	@ (8009460 <HAL_RCC_OscConfig+0x6c4>)
 80093da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80093de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80093e0:	4b1f      	ldr	r3, [pc, #124]	@ (8009460 <HAL_RCC_OscConfig+0x6c4>)
 80093e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093e4:	4a1e      	ldr	r2, [pc, #120]	@ (8009460 <HAL_RCC_OscConfig+0x6c4>)
 80093e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80093ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80093ec:	4b1c      	ldr	r3, [pc, #112]	@ (8009460 <HAL_RCC_OscConfig+0x6c4>)
 80093ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093f0:	4a1b      	ldr	r2, [pc, #108]	@ (8009460 <HAL_RCC_OscConfig+0x6c4>)
 80093f2:	f043 0301 	orr.w	r3, r3, #1
 80093f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80093f8:	4b19      	ldr	r3, [pc, #100]	@ (8009460 <HAL_RCC_OscConfig+0x6c4>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a18      	ldr	r2, [pc, #96]	@ (8009460 <HAL_RCC_OscConfig+0x6c4>)
 80093fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009402:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009404:	f7fb f87a 	bl	80044fc <HAL_GetTick>
 8009408:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800940a:	e008      	b.n	800941e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800940c:	f7fb f876 	bl	80044fc <HAL_GetTick>
 8009410:	4602      	mov	r2, r0
 8009412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009414:	1ad3      	subs	r3, r2, r3
 8009416:	2b02      	cmp	r3, #2
 8009418:	d901      	bls.n	800941e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800941a:	2303      	movs	r3, #3
 800941c:	e090      	b.n	8009540 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800941e:	4b10      	ldr	r3, [pc, #64]	@ (8009460 <HAL_RCC_OscConfig+0x6c4>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009426:	2b00      	cmp	r3, #0
 8009428:	d0f0      	beq.n	800940c <HAL_RCC_OscConfig+0x670>
 800942a:	e088      	b.n	800953e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800942c:	4b0c      	ldr	r3, [pc, #48]	@ (8009460 <HAL_RCC_OscConfig+0x6c4>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a0b      	ldr	r2, [pc, #44]	@ (8009460 <HAL_RCC_OscConfig+0x6c4>)
 8009432:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009436:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009438:	f7fb f860 	bl	80044fc <HAL_GetTick>
 800943c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800943e:	e008      	b.n	8009452 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009440:	f7fb f85c 	bl	80044fc <HAL_GetTick>
 8009444:	4602      	mov	r2, r0
 8009446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009448:	1ad3      	subs	r3, r2, r3
 800944a:	2b02      	cmp	r3, #2
 800944c:	d901      	bls.n	8009452 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800944e:	2303      	movs	r3, #3
 8009450:	e076      	b.n	8009540 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009452:	4b03      	ldr	r3, [pc, #12]	@ (8009460 <HAL_RCC_OscConfig+0x6c4>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800945a:	2b00      	cmp	r3, #0
 800945c:	d1f0      	bne.n	8009440 <HAL_RCC_OscConfig+0x6a4>
 800945e:	e06e      	b.n	800953e <HAL_RCC_OscConfig+0x7a2>
 8009460:	58024400 	.word	0x58024400
 8009464:	fffffc0c 	.word	0xfffffc0c
 8009468:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800946c:	4b36      	ldr	r3, [pc, #216]	@ (8009548 <HAL_RCC_OscConfig+0x7ac>)
 800946e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009470:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009472:	4b35      	ldr	r3, [pc, #212]	@ (8009548 <HAL_RCC_OscConfig+0x7ac>)
 8009474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009476:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800947c:	2b01      	cmp	r3, #1
 800947e:	d031      	beq.n	80094e4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	f003 0203 	and.w	r2, r3, #3
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800948a:	429a      	cmp	r2, r3
 800948c:	d12a      	bne.n	80094e4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	091b      	lsrs	r3, r3, #4
 8009492:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800949a:	429a      	cmp	r2, r3
 800949c:	d122      	bne.n	80094e4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d11a      	bne.n	80094e4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	0a5b      	lsrs	r3, r3, #9
 80094b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094ba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80094bc:	429a      	cmp	r2, r3
 80094be:	d111      	bne.n	80094e4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	0c1b      	lsrs	r3, r3, #16
 80094c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d108      	bne.n	80094e4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	0e1b      	lsrs	r3, r3, #24
 80094d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094de:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d001      	beq.n	80094e8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80094e4:	2301      	movs	r3, #1
 80094e6:	e02b      	b.n	8009540 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80094e8:	4b17      	ldr	r3, [pc, #92]	@ (8009548 <HAL_RCC_OscConfig+0x7ac>)
 80094ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094ec:	08db      	lsrs	r3, r3, #3
 80094ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80094f2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094f8:	693a      	ldr	r2, [r7, #16]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d01f      	beq.n	800953e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80094fe:	4b12      	ldr	r3, [pc, #72]	@ (8009548 <HAL_RCC_OscConfig+0x7ac>)
 8009500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009502:	4a11      	ldr	r2, [pc, #68]	@ (8009548 <HAL_RCC_OscConfig+0x7ac>)
 8009504:	f023 0301 	bic.w	r3, r3, #1
 8009508:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800950a:	f7fa fff7 	bl	80044fc <HAL_GetTick>
 800950e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009510:	bf00      	nop
 8009512:	f7fa fff3 	bl	80044fc <HAL_GetTick>
 8009516:	4602      	mov	r2, r0
 8009518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800951a:	4293      	cmp	r3, r2
 800951c:	d0f9      	beq.n	8009512 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800951e:	4b0a      	ldr	r3, [pc, #40]	@ (8009548 <HAL_RCC_OscConfig+0x7ac>)
 8009520:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009522:	4b0a      	ldr	r3, [pc, #40]	@ (800954c <HAL_RCC_OscConfig+0x7b0>)
 8009524:	4013      	ands	r3, r2
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800952a:	00d2      	lsls	r2, r2, #3
 800952c:	4906      	ldr	r1, [pc, #24]	@ (8009548 <HAL_RCC_OscConfig+0x7ac>)
 800952e:	4313      	orrs	r3, r2
 8009530:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009532:	4b05      	ldr	r3, [pc, #20]	@ (8009548 <HAL_RCC_OscConfig+0x7ac>)
 8009534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009536:	4a04      	ldr	r2, [pc, #16]	@ (8009548 <HAL_RCC_OscConfig+0x7ac>)
 8009538:	f043 0301 	orr.w	r3, r3, #1
 800953c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800953e:	2300      	movs	r3, #0
}
 8009540:	4618      	mov	r0, r3
 8009542:	3730      	adds	r7, #48	@ 0x30
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}
 8009548:	58024400 	.word	0x58024400
 800954c:	ffff0007 	.word	0xffff0007

08009550 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b086      	sub	sp, #24
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d101      	bne.n	8009564 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009560:	2301      	movs	r3, #1
 8009562:	e19c      	b.n	800989e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009564:	4b8a      	ldr	r3, [pc, #552]	@ (8009790 <HAL_RCC_ClockConfig+0x240>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f003 030f 	and.w	r3, r3, #15
 800956c:	683a      	ldr	r2, [r7, #0]
 800956e:	429a      	cmp	r2, r3
 8009570:	d910      	bls.n	8009594 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009572:	4b87      	ldr	r3, [pc, #540]	@ (8009790 <HAL_RCC_ClockConfig+0x240>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f023 020f 	bic.w	r2, r3, #15
 800957a:	4985      	ldr	r1, [pc, #532]	@ (8009790 <HAL_RCC_ClockConfig+0x240>)
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	4313      	orrs	r3, r2
 8009580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009582:	4b83      	ldr	r3, [pc, #524]	@ (8009790 <HAL_RCC_ClockConfig+0x240>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f003 030f 	and.w	r3, r3, #15
 800958a:	683a      	ldr	r2, [r7, #0]
 800958c:	429a      	cmp	r2, r3
 800958e:	d001      	beq.n	8009594 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009590:	2301      	movs	r3, #1
 8009592:	e184      	b.n	800989e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f003 0304 	and.w	r3, r3, #4
 800959c:	2b00      	cmp	r3, #0
 800959e:	d010      	beq.n	80095c2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	691a      	ldr	r2, [r3, #16]
 80095a4:	4b7b      	ldr	r3, [pc, #492]	@ (8009794 <HAL_RCC_ClockConfig+0x244>)
 80095a6:	699b      	ldr	r3, [r3, #24]
 80095a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d908      	bls.n	80095c2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80095b0:	4b78      	ldr	r3, [pc, #480]	@ (8009794 <HAL_RCC_ClockConfig+0x244>)
 80095b2:	699b      	ldr	r3, [r3, #24]
 80095b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	691b      	ldr	r3, [r3, #16]
 80095bc:	4975      	ldr	r1, [pc, #468]	@ (8009794 <HAL_RCC_ClockConfig+0x244>)
 80095be:	4313      	orrs	r3, r2
 80095c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f003 0308 	and.w	r3, r3, #8
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d010      	beq.n	80095f0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	695a      	ldr	r2, [r3, #20]
 80095d2:	4b70      	ldr	r3, [pc, #448]	@ (8009794 <HAL_RCC_ClockConfig+0x244>)
 80095d4:	69db      	ldr	r3, [r3, #28]
 80095d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80095da:	429a      	cmp	r2, r3
 80095dc:	d908      	bls.n	80095f0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80095de:	4b6d      	ldr	r3, [pc, #436]	@ (8009794 <HAL_RCC_ClockConfig+0x244>)
 80095e0:	69db      	ldr	r3, [r3, #28]
 80095e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	695b      	ldr	r3, [r3, #20]
 80095ea:	496a      	ldr	r1, [pc, #424]	@ (8009794 <HAL_RCC_ClockConfig+0x244>)
 80095ec:	4313      	orrs	r3, r2
 80095ee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f003 0310 	and.w	r3, r3, #16
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d010      	beq.n	800961e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	699a      	ldr	r2, [r3, #24]
 8009600:	4b64      	ldr	r3, [pc, #400]	@ (8009794 <HAL_RCC_ClockConfig+0x244>)
 8009602:	69db      	ldr	r3, [r3, #28]
 8009604:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009608:	429a      	cmp	r2, r3
 800960a:	d908      	bls.n	800961e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800960c:	4b61      	ldr	r3, [pc, #388]	@ (8009794 <HAL_RCC_ClockConfig+0x244>)
 800960e:	69db      	ldr	r3, [r3, #28]
 8009610:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	699b      	ldr	r3, [r3, #24]
 8009618:	495e      	ldr	r1, [pc, #376]	@ (8009794 <HAL_RCC_ClockConfig+0x244>)
 800961a:	4313      	orrs	r3, r2
 800961c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f003 0320 	and.w	r3, r3, #32
 8009626:	2b00      	cmp	r3, #0
 8009628:	d010      	beq.n	800964c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	69da      	ldr	r2, [r3, #28]
 800962e:	4b59      	ldr	r3, [pc, #356]	@ (8009794 <HAL_RCC_ClockConfig+0x244>)
 8009630:	6a1b      	ldr	r3, [r3, #32]
 8009632:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009636:	429a      	cmp	r2, r3
 8009638:	d908      	bls.n	800964c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800963a:	4b56      	ldr	r3, [pc, #344]	@ (8009794 <HAL_RCC_ClockConfig+0x244>)
 800963c:	6a1b      	ldr	r3, [r3, #32]
 800963e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	69db      	ldr	r3, [r3, #28]
 8009646:	4953      	ldr	r1, [pc, #332]	@ (8009794 <HAL_RCC_ClockConfig+0x244>)
 8009648:	4313      	orrs	r3, r2
 800964a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f003 0302 	and.w	r3, r3, #2
 8009654:	2b00      	cmp	r3, #0
 8009656:	d010      	beq.n	800967a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	68da      	ldr	r2, [r3, #12]
 800965c:	4b4d      	ldr	r3, [pc, #308]	@ (8009794 <HAL_RCC_ClockConfig+0x244>)
 800965e:	699b      	ldr	r3, [r3, #24]
 8009660:	f003 030f 	and.w	r3, r3, #15
 8009664:	429a      	cmp	r2, r3
 8009666:	d908      	bls.n	800967a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009668:	4b4a      	ldr	r3, [pc, #296]	@ (8009794 <HAL_RCC_ClockConfig+0x244>)
 800966a:	699b      	ldr	r3, [r3, #24]
 800966c:	f023 020f 	bic.w	r2, r3, #15
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	4947      	ldr	r1, [pc, #284]	@ (8009794 <HAL_RCC_ClockConfig+0x244>)
 8009676:	4313      	orrs	r3, r2
 8009678:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f003 0301 	and.w	r3, r3, #1
 8009682:	2b00      	cmp	r3, #0
 8009684:	d055      	beq.n	8009732 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009686:	4b43      	ldr	r3, [pc, #268]	@ (8009794 <HAL_RCC_ClockConfig+0x244>)
 8009688:	699b      	ldr	r3, [r3, #24]
 800968a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	689b      	ldr	r3, [r3, #8]
 8009692:	4940      	ldr	r1, [pc, #256]	@ (8009794 <HAL_RCC_ClockConfig+0x244>)
 8009694:	4313      	orrs	r3, r2
 8009696:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	2b02      	cmp	r3, #2
 800969e:	d107      	bne.n	80096b0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80096a0:	4b3c      	ldr	r3, [pc, #240]	@ (8009794 <HAL_RCC_ClockConfig+0x244>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d121      	bne.n	80096f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80096ac:	2301      	movs	r3, #1
 80096ae:	e0f6      	b.n	800989e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	2b03      	cmp	r3, #3
 80096b6:	d107      	bne.n	80096c8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80096b8:	4b36      	ldr	r3, [pc, #216]	@ (8009794 <HAL_RCC_ClockConfig+0x244>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d115      	bne.n	80096f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80096c4:	2301      	movs	r3, #1
 80096c6:	e0ea      	b.n	800989e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	d107      	bne.n	80096e0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80096d0:	4b30      	ldr	r3, [pc, #192]	@ (8009794 <HAL_RCC_ClockConfig+0x244>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d109      	bne.n	80096f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80096dc:	2301      	movs	r3, #1
 80096de:	e0de      	b.n	800989e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80096e0:	4b2c      	ldr	r3, [pc, #176]	@ (8009794 <HAL_RCC_ClockConfig+0x244>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f003 0304 	and.w	r3, r3, #4
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d101      	bne.n	80096f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80096ec:	2301      	movs	r3, #1
 80096ee:	e0d6      	b.n	800989e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80096f0:	4b28      	ldr	r3, [pc, #160]	@ (8009794 <HAL_RCC_ClockConfig+0x244>)
 80096f2:	691b      	ldr	r3, [r3, #16]
 80096f4:	f023 0207 	bic.w	r2, r3, #7
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	4925      	ldr	r1, [pc, #148]	@ (8009794 <HAL_RCC_ClockConfig+0x244>)
 80096fe:	4313      	orrs	r3, r2
 8009700:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009702:	f7fa fefb 	bl	80044fc <HAL_GetTick>
 8009706:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009708:	e00a      	b.n	8009720 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800970a:	f7fa fef7 	bl	80044fc <HAL_GetTick>
 800970e:	4602      	mov	r2, r0
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	1ad3      	subs	r3, r2, r3
 8009714:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009718:	4293      	cmp	r3, r2
 800971a:	d901      	bls.n	8009720 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800971c:	2303      	movs	r3, #3
 800971e:	e0be      	b.n	800989e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009720:	4b1c      	ldr	r3, [pc, #112]	@ (8009794 <HAL_RCC_ClockConfig+0x244>)
 8009722:	691b      	ldr	r3, [r3, #16]
 8009724:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	00db      	lsls	r3, r3, #3
 800972e:	429a      	cmp	r2, r3
 8009730:	d1eb      	bne.n	800970a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f003 0302 	and.w	r3, r3, #2
 800973a:	2b00      	cmp	r3, #0
 800973c:	d010      	beq.n	8009760 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	68da      	ldr	r2, [r3, #12]
 8009742:	4b14      	ldr	r3, [pc, #80]	@ (8009794 <HAL_RCC_ClockConfig+0x244>)
 8009744:	699b      	ldr	r3, [r3, #24]
 8009746:	f003 030f 	and.w	r3, r3, #15
 800974a:	429a      	cmp	r2, r3
 800974c:	d208      	bcs.n	8009760 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800974e:	4b11      	ldr	r3, [pc, #68]	@ (8009794 <HAL_RCC_ClockConfig+0x244>)
 8009750:	699b      	ldr	r3, [r3, #24]
 8009752:	f023 020f 	bic.w	r2, r3, #15
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	68db      	ldr	r3, [r3, #12]
 800975a:	490e      	ldr	r1, [pc, #56]	@ (8009794 <HAL_RCC_ClockConfig+0x244>)
 800975c:	4313      	orrs	r3, r2
 800975e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009760:	4b0b      	ldr	r3, [pc, #44]	@ (8009790 <HAL_RCC_ClockConfig+0x240>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f003 030f 	and.w	r3, r3, #15
 8009768:	683a      	ldr	r2, [r7, #0]
 800976a:	429a      	cmp	r2, r3
 800976c:	d214      	bcs.n	8009798 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800976e:	4b08      	ldr	r3, [pc, #32]	@ (8009790 <HAL_RCC_ClockConfig+0x240>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f023 020f 	bic.w	r2, r3, #15
 8009776:	4906      	ldr	r1, [pc, #24]	@ (8009790 <HAL_RCC_ClockConfig+0x240>)
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	4313      	orrs	r3, r2
 800977c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800977e:	4b04      	ldr	r3, [pc, #16]	@ (8009790 <HAL_RCC_ClockConfig+0x240>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f003 030f 	and.w	r3, r3, #15
 8009786:	683a      	ldr	r2, [r7, #0]
 8009788:	429a      	cmp	r2, r3
 800978a:	d005      	beq.n	8009798 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800978c:	2301      	movs	r3, #1
 800978e:	e086      	b.n	800989e <HAL_RCC_ClockConfig+0x34e>
 8009790:	52002000 	.word	0x52002000
 8009794:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f003 0304 	and.w	r3, r3, #4
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d010      	beq.n	80097c6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	691a      	ldr	r2, [r3, #16]
 80097a8:	4b3f      	ldr	r3, [pc, #252]	@ (80098a8 <HAL_RCC_ClockConfig+0x358>)
 80097aa:	699b      	ldr	r3, [r3, #24]
 80097ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d208      	bcs.n	80097c6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80097b4:	4b3c      	ldr	r3, [pc, #240]	@ (80098a8 <HAL_RCC_ClockConfig+0x358>)
 80097b6:	699b      	ldr	r3, [r3, #24]
 80097b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	691b      	ldr	r3, [r3, #16]
 80097c0:	4939      	ldr	r1, [pc, #228]	@ (80098a8 <HAL_RCC_ClockConfig+0x358>)
 80097c2:	4313      	orrs	r3, r2
 80097c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f003 0308 	and.w	r3, r3, #8
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d010      	beq.n	80097f4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	695a      	ldr	r2, [r3, #20]
 80097d6:	4b34      	ldr	r3, [pc, #208]	@ (80098a8 <HAL_RCC_ClockConfig+0x358>)
 80097d8:	69db      	ldr	r3, [r3, #28]
 80097da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80097de:	429a      	cmp	r2, r3
 80097e0:	d208      	bcs.n	80097f4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80097e2:	4b31      	ldr	r3, [pc, #196]	@ (80098a8 <HAL_RCC_ClockConfig+0x358>)
 80097e4:	69db      	ldr	r3, [r3, #28]
 80097e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	695b      	ldr	r3, [r3, #20]
 80097ee:	492e      	ldr	r1, [pc, #184]	@ (80098a8 <HAL_RCC_ClockConfig+0x358>)
 80097f0:	4313      	orrs	r3, r2
 80097f2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f003 0310 	and.w	r3, r3, #16
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d010      	beq.n	8009822 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	699a      	ldr	r2, [r3, #24]
 8009804:	4b28      	ldr	r3, [pc, #160]	@ (80098a8 <HAL_RCC_ClockConfig+0x358>)
 8009806:	69db      	ldr	r3, [r3, #28]
 8009808:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800980c:	429a      	cmp	r2, r3
 800980e:	d208      	bcs.n	8009822 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009810:	4b25      	ldr	r3, [pc, #148]	@ (80098a8 <HAL_RCC_ClockConfig+0x358>)
 8009812:	69db      	ldr	r3, [r3, #28]
 8009814:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	699b      	ldr	r3, [r3, #24]
 800981c:	4922      	ldr	r1, [pc, #136]	@ (80098a8 <HAL_RCC_ClockConfig+0x358>)
 800981e:	4313      	orrs	r3, r2
 8009820:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f003 0320 	and.w	r3, r3, #32
 800982a:	2b00      	cmp	r3, #0
 800982c:	d010      	beq.n	8009850 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	69da      	ldr	r2, [r3, #28]
 8009832:	4b1d      	ldr	r3, [pc, #116]	@ (80098a8 <HAL_RCC_ClockConfig+0x358>)
 8009834:	6a1b      	ldr	r3, [r3, #32]
 8009836:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800983a:	429a      	cmp	r2, r3
 800983c:	d208      	bcs.n	8009850 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800983e:	4b1a      	ldr	r3, [pc, #104]	@ (80098a8 <HAL_RCC_ClockConfig+0x358>)
 8009840:	6a1b      	ldr	r3, [r3, #32]
 8009842:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	69db      	ldr	r3, [r3, #28]
 800984a:	4917      	ldr	r1, [pc, #92]	@ (80098a8 <HAL_RCC_ClockConfig+0x358>)
 800984c:	4313      	orrs	r3, r2
 800984e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009850:	f000 f834 	bl	80098bc <HAL_RCC_GetSysClockFreq>
 8009854:	4602      	mov	r2, r0
 8009856:	4b14      	ldr	r3, [pc, #80]	@ (80098a8 <HAL_RCC_ClockConfig+0x358>)
 8009858:	699b      	ldr	r3, [r3, #24]
 800985a:	0a1b      	lsrs	r3, r3, #8
 800985c:	f003 030f 	and.w	r3, r3, #15
 8009860:	4912      	ldr	r1, [pc, #72]	@ (80098ac <HAL_RCC_ClockConfig+0x35c>)
 8009862:	5ccb      	ldrb	r3, [r1, r3]
 8009864:	f003 031f 	and.w	r3, r3, #31
 8009868:	fa22 f303 	lsr.w	r3, r2, r3
 800986c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800986e:	4b0e      	ldr	r3, [pc, #56]	@ (80098a8 <HAL_RCC_ClockConfig+0x358>)
 8009870:	699b      	ldr	r3, [r3, #24]
 8009872:	f003 030f 	and.w	r3, r3, #15
 8009876:	4a0d      	ldr	r2, [pc, #52]	@ (80098ac <HAL_RCC_ClockConfig+0x35c>)
 8009878:	5cd3      	ldrb	r3, [r2, r3]
 800987a:	f003 031f 	and.w	r3, r3, #31
 800987e:	693a      	ldr	r2, [r7, #16]
 8009880:	fa22 f303 	lsr.w	r3, r2, r3
 8009884:	4a0a      	ldr	r2, [pc, #40]	@ (80098b0 <HAL_RCC_ClockConfig+0x360>)
 8009886:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009888:	4a0a      	ldr	r2, [pc, #40]	@ (80098b4 <HAL_RCC_ClockConfig+0x364>)
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800988e:	4b0a      	ldr	r3, [pc, #40]	@ (80098b8 <HAL_RCC_ClockConfig+0x368>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4618      	mov	r0, r3
 8009894:	f7f9 f860 	bl	8002958 <HAL_InitTick>
 8009898:	4603      	mov	r3, r0
 800989a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800989c:	7bfb      	ldrb	r3, [r7, #15]
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3718      	adds	r7, #24
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	58024400 	.word	0x58024400
 80098ac:	0802bef4 	.word	0x0802bef4
 80098b0:	24000008 	.word	0x24000008
 80098b4:	24000004 	.word	0x24000004
 80098b8:	2400000c 	.word	0x2400000c

080098bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80098bc:	b480      	push	{r7}
 80098be:	b089      	sub	sp, #36	@ 0x24
 80098c0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80098c2:	4bb3      	ldr	r3, [pc, #716]	@ (8009b90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098c4:	691b      	ldr	r3, [r3, #16]
 80098c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80098ca:	2b18      	cmp	r3, #24
 80098cc:	f200 8155 	bhi.w	8009b7a <HAL_RCC_GetSysClockFreq+0x2be>
 80098d0:	a201      	add	r2, pc, #4	@ (adr r2, 80098d8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80098d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d6:	bf00      	nop
 80098d8:	0800993d 	.word	0x0800993d
 80098dc:	08009b7b 	.word	0x08009b7b
 80098e0:	08009b7b 	.word	0x08009b7b
 80098e4:	08009b7b 	.word	0x08009b7b
 80098e8:	08009b7b 	.word	0x08009b7b
 80098ec:	08009b7b 	.word	0x08009b7b
 80098f0:	08009b7b 	.word	0x08009b7b
 80098f4:	08009b7b 	.word	0x08009b7b
 80098f8:	08009963 	.word	0x08009963
 80098fc:	08009b7b 	.word	0x08009b7b
 8009900:	08009b7b 	.word	0x08009b7b
 8009904:	08009b7b 	.word	0x08009b7b
 8009908:	08009b7b 	.word	0x08009b7b
 800990c:	08009b7b 	.word	0x08009b7b
 8009910:	08009b7b 	.word	0x08009b7b
 8009914:	08009b7b 	.word	0x08009b7b
 8009918:	08009969 	.word	0x08009969
 800991c:	08009b7b 	.word	0x08009b7b
 8009920:	08009b7b 	.word	0x08009b7b
 8009924:	08009b7b 	.word	0x08009b7b
 8009928:	08009b7b 	.word	0x08009b7b
 800992c:	08009b7b 	.word	0x08009b7b
 8009930:	08009b7b 	.word	0x08009b7b
 8009934:	08009b7b 	.word	0x08009b7b
 8009938:	0800996f 	.word	0x0800996f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800993c:	4b94      	ldr	r3, [pc, #592]	@ (8009b90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f003 0320 	and.w	r3, r3, #32
 8009944:	2b00      	cmp	r3, #0
 8009946:	d009      	beq.n	800995c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009948:	4b91      	ldr	r3, [pc, #580]	@ (8009b90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	08db      	lsrs	r3, r3, #3
 800994e:	f003 0303 	and.w	r3, r3, #3
 8009952:	4a90      	ldr	r2, [pc, #576]	@ (8009b94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009954:	fa22 f303 	lsr.w	r3, r2, r3
 8009958:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800995a:	e111      	b.n	8009b80 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800995c:	4b8d      	ldr	r3, [pc, #564]	@ (8009b94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800995e:	61bb      	str	r3, [r7, #24]
      break;
 8009960:	e10e      	b.n	8009b80 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009962:	4b8d      	ldr	r3, [pc, #564]	@ (8009b98 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009964:	61bb      	str	r3, [r7, #24]
      break;
 8009966:	e10b      	b.n	8009b80 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009968:	4b8c      	ldr	r3, [pc, #560]	@ (8009b9c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800996a:	61bb      	str	r3, [r7, #24]
      break;
 800996c:	e108      	b.n	8009b80 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800996e:	4b88      	ldr	r3, [pc, #544]	@ (8009b90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009972:	f003 0303 	and.w	r3, r3, #3
 8009976:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009978:	4b85      	ldr	r3, [pc, #532]	@ (8009b90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800997a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800997c:	091b      	lsrs	r3, r3, #4
 800997e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009982:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009984:	4b82      	ldr	r3, [pc, #520]	@ (8009b90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009988:	f003 0301 	and.w	r3, r3, #1
 800998c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800998e:	4b80      	ldr	r3, [pc, #512]	@ (8009b90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009992:	08db      	lsrs	r3, r3, #3
 8009994:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009998:	68fa      	ldr	r2, [r7, #12]
 800999a:	fb02 f303 	mul.w	r3, r2, r3
 800999e:	ee07 3a90 	vmov	s15, r3
 80099a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099a6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	f000 80e1 	beq.w	8009b74 <HAL_RCC_GetSysClockFreq+0x2b8>
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	2b02      	cmp	r3, #2
 80099b6:	f000 8083 	beq.w	8009ac0 <HAL_RCC_GetSysClockFreq+0x204>
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	2b02      	cmp	r3, #2
 80099be:	f200 80a1 	bhi.w	8009b04 <HAL_RCC_GetSysClockFreq+0x248>
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d003      	beq.n	80099d0 <HAL_RCC_GetSysClockFreq+0x114>
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	2b01      	cmp	r3, #1
 80099cc:	d056      	beq.n	8009a7c <HAL_RCC_GetSysClockFreq+0x1c0>
 80099ce:	e099      	b.n	8009b04 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099d0:	4b6f      	ldr	r3, [pc, #444]	@ (8009b90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f003 0320 	and.w	r3, r3, #32
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d02d      	beq.n	8009a38 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80099dc:	4b6c      	ldr	r3, [pc, #432]	@ (8009b90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	08db      	lsrs	r3, r3, #3
 80099e2:	f003 0303 	and.w	r3, r3, #3
 80099e6:	4a6b      	ldr	r2, [pc, #428]	@ (8009b94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80099e8:	fa22 f303 	lsr.w	r3, r2, r3
 80099ec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	ee07 3a90 	vmov	s15, r3
 80099f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	ee07 3a90 	vmov	s15, r3
 80099fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a06:	4b62      	ldr	r3, [pc, #392]	@ (8009b90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a0e:	ee07 3a90 	vmov	s15, r3
 8009a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a16:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a1a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009ba0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a32:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009a36:	e087      	b.n	8009b48 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	ee07 3a90 	vmov	s15, r3
 8009a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a42:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009ba4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a4a:	4b51      	ldr	r3, [pc, #324]	@ (8009b90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a52:	ee07 3a90 	vmov	s15, r3
 8009a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a5e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009ba0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009a7a:	e065      	b.n	8009b48 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	ee07 3a90 	vmov	s15, r3
 8009a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a86:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009ba8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a8e:	4b40      	ldr	r3, [pc, #256]	@ (8009b90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a96:	ee07 3a90 	vmov	s15, r3
 8009a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009aa2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009ba0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009aae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009abe:	e043      	b.n	8009b48 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	ee07 3a90 	vmov	s15, r3
 8009ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aca:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009bac <HAL_RCC_GetSysClockFreq+0x2f0>
 8009ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ad2:	4b2f      	ldr	r3, [pc, #188]	@ (8009b90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ada:	ee07 3a90 	vmov	s15, r3
 8009ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ae2:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ae6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009ba0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009af2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009afe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009b02:	e021      	b.n	8009b48 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	ee07 3a90 	vmov	s15, r3
 8009b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b0e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009ba8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b16:	4b1e      	ldr	r3, [pc, #120]	@ (8009b90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b1e:	ee07 3a90 	vmov	s15, r3
 8009b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b26:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b2a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009ba0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009b46:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009b48:	4b11      	ldr	r3, [pc, #68]	@ (8009b90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b4c:	0a5b      	lsrs	r3, r3, #9
 8009b4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b52:	3301      	adds	r3, #1
 8009b54:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	ee07 3a90 	vmov	s15, r3
 8009b5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009b60:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b6c:	ee17 3a90 	vmov	r3, s15
 8009b70:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009b72:	e005      	b.n	8009b80 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009b74:	2300      	movs	r3, #0
 8009b76:	61bb      	str	r3, [r7, #24]
      break;
 8009b78:	e002      	b.n	8009b80 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009b7a:	4b07      	ldr	r3, [pc, #28]	@ (8009b98 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009b7c:	61bb      	str	r3, [r7, #24]
      break;
 8009b7e:	bf00      	nop
  }

  return sysclockfreq;
 8009b80:	69bb      	ldr	r3, [r7, #24]
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3724      	adds	r7, #36	@ 0x24
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr
 8009b8e:	bf00      	nop
 8009b90:	58024400 	.word	0x58024400
 8009b94:	03d09000 	.word	0x03d09000
 8009b98:	003d0900 	.word	0x003d0900
 8009b9c:	017d7840 	.word	0x017d7840
 8009ba0:	46000000 	.word	0x46000000
 8009ba4:	4c742400 	.word	0x4c742400
 8009ba8:	4a742400 	.word	0x4a742400
 8009bac:	4bbebc20 	.word	0x4bbebc20

08009bb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b082      	sub	sp, #8
 8009bb4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009bb6:	f7ff fe81 	bl	80098bc <HAL_RCC_GetSysClockFreq>
 8009bba:	4602      	mov	r2, r0
 8009bbc:	4b10      	ldr	r3, [pc, #64]	@ (8009c00 <HAL_RCC_GetHCLKFreq+0x50>)
 8009bbe:	699b      	ldr	r3, [r3, #24]
 8009bc0:	0a1b      	lsrs	r3, r3, #8
 8009bc2:	f003 030f 	and.w	r3, r3, #15
 8009bc6:	490f      	ldr	r1, [pc, #60]	@ (8009c04 <HAL_RCC_GetHCLKFreq+0x54>)
 8009bc8:	5ccb      	ldrb	r3, [r1, r3]
 8009bca:	f003 031f 	and.w	r3, r3, #31
 8009bce:	fa22 f303 	lsr.w	r3, r2, r3
 8009bd2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8009c00 <HAL_RCC_GetHCLKFreq+0x50>)
 8009bd6:	699b      	ldr	r3, [r3, #24]
 8009bd8:	f003 030f 	and.w	r3, r3, #15
 8009bdc:	4a09      	ldr	r2, [pc, #36]	@ (8009c04 <HAL_RCC_GetHCLKFreq+0x54>)
 8009bde:	5cd3      	ldrb	r3, [r2, r3]
 8009be0:	f003 031f 	and.w	r3, r3, #31
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	fa22 f303 	lsr.w	r3, r2, r3
 8009bea:	4a07      	ldr	r2, [pc, #28]	@ (8009c08 <HAL_RCC_GetHCLKFreq+0x58>)
 8009bec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009bee:	4a07      	ldr	r2, [pc, #28]	@ (8009c0c <HAL_RCC_GetHCLKFreq+0x5c>)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009bf4:	4b04      	ldr	r3, [pc, #16]	@ (8009c08 <HAL_RCC_GetHCLKFreq+0x58>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3708      	adds	r7, #8
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}
 8009c00:	58024400 	.word	0x58024400
 8009c04:	0802bef4 	.word	0x0802bef4
 8009c08:	24000008 	.word	0x24000008
 8009c0c:	24000004 	.word	0x24000004

08009c10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009c14:	f7ff ffcc 	bl	8009bb0 <HAL_RCC_GetHCLKFreq>
 8009c18:	4602      	mov	r2, r0
 8009c1a:	4b06      	ldr	r3, [pc, #24]	@ (8009c34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009c1c:	69db      	ldr	r3, [r3, #28]
 8009c1e:	091b      	lsrs	r3, r3, #4
 8009c20:	f003 0307 	and.w	r3, r3, #7
 8009c24:	4904      	ldr	r1, [pc, #16]	@ (8009c38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009c26:	5ccb      	ldrb	r3, [r1, r3]
 8009c28:	f003 031f 	and.w	r3, r3, #31
 8009c2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	58024400 	.word	0x58024400
 8009c38:	0802bef4 	.word	0x0802bef4

08009c3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009c40:	f7ff ffb6 	bl	8009bb0 <HAL_RCC_GetHCLKFreq>
 8009c44:	4602      	mov	r2, r0
 8009c46:	4b06      	ldr	r3, [pc, #24]	@ (8009c60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009c48:	69db      	ldr	r3, [r3, #28]
 8009c4a:	0a1b      	lsrs	r3, r3, #8
 8009c4c:	f003 0307 	and.w	r3, r3, #7
 8009c50:	4904      	ldr	r1, [pc, #16]	@ (8009c64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009c52:	5ccb      	ldrb	r3, [r1, r3]
 8009c54:	f003 031f 	and.w	r3, r3, #31
 8009c58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	bd80      	pop	{r7, pc}
 8009c60:	58024400 	.word	0x58024400
 8009c64:	0802bef4 	.word	0x0802bef4

08009c68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b083      	sub	sp, #12
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	223f      	movs	r2, #63	@ 0x3f
 8009c76:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009c78:	4b1a      	ldr	r3, [pc, #104]	@ (8009ce4 <HAL_RCC_GetClockConfig+0x7c>)
 8009c7a:	691b      	ldr	r3, [r3, #16]
 8009c7c:	f003 0207 	and.w	r2, r3, #7
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8009c84:	4b17      	ldr	r3, [pc, #92]	@ (8009ce4 <HAL_RCC_GetClockConfig+0x7c>)
 8009c86:	699b      	ldr	r3, [r3, #24]
 8009c88:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8009c90:	4b14      	ldr	r3, [pc, #80]	@ (8009ce4 <HAL_RCC_GetClockConfig+0x7c>)
 8009c92:	699b      	ldr	r3, [r3, #24]
 8009c94:	f003 020f 	and.w	r2, r3, #15
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009c9c:	4b11      	ldr	r3, [pc, #68]	@ (8009ce4 <HAL_RCC_GetClockConfig+0x7c>)
 8009c9e:	699b      	ldr	r3, [r3, #24]
 8009ca0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8009ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8009ce4 <HAL_RCC_GetClockConfig+0x7c>)
 8009caa:	69db      	ldr	r3, [r3, #28]
 8009cac:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8009ce4 <HAL_RCC_GetClockConfig+0x7c>)
 8009cb6:	69db      	ldr	r3, [r3, #28]
 8009cb8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009cc0:	4b08      	ldr	r3, [pc, #32]	@ (8009ce4 <HAL_RCC_GetClockConfig+0x7c>)
 8009cc2:	6a1b      	ldr	r3, [r3, #32]
 8009cc4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009ccc:	4b06      	ldr	r3, [pc, #24]	@ (8009ce8 <HAL_RCC_GetClockConfig+0x80>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f003 020f 	and.w	r2, r3, #15
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	601a      	str	r2, [r3, #0]
}
 8009cd8:	bf00      	nop
 8009cda:	370c      	adds	r7, #12
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr
 8009ce4:	58024400 	.word	0x58024400
 8009ce8:	52002000 	.word	0x52002000

08009cec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009cec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009cf0:	b0c6      	sub	sp, #280	@ 0x118
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009cfe:	2300      	movs	r3, #0
 8009d00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009d10:	2500      	movs	r5, #0
 8009d12:	ea54 0305 	orrs.w	r3, r4, r5
 8009d16:	d049      	beq.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d1e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009d22:	d02f      	beq.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009d24:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009d28:	d828      	bhi.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009d2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009d2e:	d01a      	beq.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009d30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009d34:	d822      	bhi.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d003      	beq.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009d3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d3e:	d007      	beq.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009d40:	e01c      	b.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d42:	4bab      	ldr	r3, [pc, #684]	@ (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d46:	4aaa      	ldr	r2, [pc, #680]	@ (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009d48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009d4e:	e01a      	b.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d54:	3308      	adds	r3, #8
 8009d56:	2102      	movs	r1, #2
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f002 fa49 	bl	800c1f0 <RCCEx_PLL2_Config>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009d64:	e00f      	b.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d6a:	3328      	adds	r3, #40	@ 0x28
 8009d6c:	2102      	movs	r1, #2
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f002 faf0 	bl	800c354 <RCCEx_PLL3_Config>
 8009d74:	4603      	mov	r3, r0
 8009d76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009d7a:	e004      	b.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009d82:	e000      	b.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009d84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d10a      	bne.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009d8e:	4b98      	ldr	r3, [pc, #608]	@ (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009d90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d92:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d9c:	4a94      	ldr	r2, [pc, #592]	@ (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009d9e:	430b      	orrs	r3, r1
 8009da0:	6513      	str	r3, [r2, #80]	@ 0x50
 8009da2:	e003      	b.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009da4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009da8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009db8:	f04f 0900 	mov.w	r9, #0
 8009dbc:	ea58 0309 	orrs.w	r3, r8, r9
 8009dc0:	d047      	beq.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dc8:	2b04      	cmp	r3, #4
 8009dca:	d82a      	bhi.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009dcc:	a201      	add	r2, pc, #4	@ (adr r2, 8009dd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd2:	bf00      	nop
 8009dd4:	08009de9 	.word	0x08009de9
 8009dd8:	08009df7 	.word	0x08009df7
 8009ddc:	08009e0d 	.word	0x08009e0d
 8009de0:	08009e2b 	.word	0x08009e2b
 8009de4:	08009e2b 	.word	0x08009e2b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009de8:	4b81      	ldr	r3, [pc, #516]	@ (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dec:	4a80      	ldr	r2, [pc, #512]	@ (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009dee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009df2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009df4:	e01a      	b.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dfa:	3308      	adds	r3, #8
 8009dfc:	2100      	movs	r1, #0
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f002 f9f6 	bl	800c1f0 <RCCEx_PLL2_Config>
 8009e04:	4603      	mov	r3, r0
 8009e06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e0a:	e00f      	b.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e10:	3328      	adds	r3, #40	@ 0x28
 8009e12:	2100      	movs	r1, #0
 8009e14:	4618      	mov	r0, r3
 8009e16:	f002 fa9d 	bl	800c354 <RCCEx_PLL3_Config>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e20:	e004      	b.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e22:	2301      	movs	r3, #1
 8009e24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009e28:	e000      	b.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009e2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d10a      	bne.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009e34:	4b6e      	ldr	r3, [pc, #440]	@ (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009e36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e38:	f023 0107 	bic.w	r1, r3, #7
 8009e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e42:	4a6b      	ldr	r2, [pc, #428]	@ (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009e44:	430b      	orrs	r3, r1
 8009e46:	6513      	str	r3, [r2, #80]	@ 0x50
 8009e48:	e003      	b.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e4e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e5a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8009e5e:	f04f 0b00 	mov.w	fp, #0
 8009e62:	ea5a 030b 	orrs.w	r3, sl, fp
 8009e66:	d05b      	beq.n	8009f20 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009e70:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009e74:	d03b      	beq.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0x202>
 8009e76:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009e7a:	d834      	bhi.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009e7c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009e80:	d037      	beq.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009e82:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009e86:	d82e      	bhi.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009e88:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009e8c:	d033      	beq.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8009e8e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009e92:	d828      	bhi.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009e94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009e98:	d01a      	beq.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8009e9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009e9e:	d822      	bhi.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d003      	beq.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8009ea4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009ea8:	d007      	beq.n	8009eba <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8009eaa:	e01c      	b.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009eac:	4b50      	ldr	r3, [pc, #320]	@ (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eb0:	4a4f      	ldr	r2, [pc, #316]	@ (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009eb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009eb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009eb8:	e01e      	b.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ebe:	3308      	adds	r3, #8
 8009ec0:	2100      	movs	r1, #0
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f002 f994 	bl	800c1f0 <RCCEx_PLL2_Config>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009ece:	e013      	b.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ed4:	3328      	adds	r3, #40	@ 0x28
 8009ed6:	2100      	movs	r1, #0
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f002 fa3b 	bl	800c354 <RCCEx_PLL3_Config>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009ee4:	e008      	b.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009eec:	e004      	b.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009eee:	bf00      	nop
 8009ef0:	e002      	b.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009ef2:	bf00      	nop
 8009ef4:	e000      	b.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009ef6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ef8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d10b      	bne.n	8009f18 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009f00:	4b3b      	ldr	r3, [pc, #236]	@ (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f04:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8009f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009f10:	4a37      	ldr	r2, [pc, #220]	@ (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f12:	430b      	orrs	r3, r1
 8009f14:	6593      	str	r3, [r2, #88]	@ 0x58
 8009f16:	e003      	b.n	8009f20 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f28:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009f2c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009f30:	2300      	movs	r3, #0
 8009f32:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009f36:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8009f3a:	460b      	mov	r3, r1
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	d05d      	beq.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f44:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009f48:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009f4c:	d03b      	beq.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009f4e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009f52:	d834      	bhi.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009f54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009f58:	d037      	beq.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009f5a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009f5e:	d82e      	bhi.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009f60:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009f64:	d033      	beq.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8009f66:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009f6a:	d828      	bhi.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009f6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009f70:	d01a      	beq.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8009f72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009f76:	d822      	bhi.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d003      	beq.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009f7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009f80:	d007      	beq.n	8009f92 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009f82:	e01c      	b.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f84:	4b1a      	ldr	r3, [pc, #104]	@ (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f88:	4a19      	ldr	r2, [pc, #100]	@ (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f90:	e01e      	b.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f96:	3308      	adds	r3, #8
 8009f98:	2100      	movs	r1, #0
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f002 f928 	bl	800c1f0 <RCCEx_PLL2_Config>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009fa6:	e013      	b.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fac:	3328      	adds	r3, #40	@ 0x28
 8009fae:	2100      	movs	r1, #0
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f002 f9cf 	bl	800c354 <RCCEx_PLL3_Config>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009fbc:	e008      	b.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009fc4:	e004      	b.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009fc6:	bf00      	nop
 8009fc8:	e002      	b.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009fca:	bf00      	nop
 8009fcc:	e000      	b.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009fce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d10d      	bne.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009fd8:	4b05      	ldr	r3, [pc, #20]	@ (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fdc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fe4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009fe8:	4a01      	ldr	r2, [pc, #4]	@ (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009fea:	430b      	orrs	r3, r1
 8009fec:	6593      	str	r3, [r2, #88]	@ 0x58
 8009fee:	e005      	b.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x310>
 8009ff0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ff4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ff8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a004:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800a008:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a00c:	2300      	movs	r3, #0
 800a00e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a012:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a016:	460b      	mov	r3, r1
 800a018:	4313      	orrs	r3, r2
 800a01a:	d03a      	beq.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800a01c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a022:	2b30      	cmp	r3, #48	@ 0x30
 800a024:	d01f      	beq.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800a026:	2b30      	cmp	r3, #48	@ 0x30
 800a028:	d819      	bhi.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a02a:	2b20      	cmp	r3, #32
 800a02c:	d00c      	beq.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a02e:	2b20      	cmp	r3, #32
 800a030:	d815      	bhi.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a032:	2b00      	cmp	r3, #0
 800a034:	d019      	beq.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a036:	2b10      	cmp	r3, #16
 800a038:	d111      	bne.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a03a:	4baa      	ldr	r3, [pc, #680]	@ (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a03c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a03e:	4aa9      	ldr	r2, [pc, #676]	@ (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a040:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a044:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a046:	e011      	b.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a04c:	3308      	adds	r3, #8
 800a04e:	2102      	movs	r1, #2
 800a050:	4618      	mov	r0, r3
 800a052:	f002 f8cd 	bl	800c1f0 <RCCEx_PLL2_Config>
 800a056:	4603      	mov	r3, r0
 800a058:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a05c:	e006      	b.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a05e:	2301      	movs	r3, #1
 800a060:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a064:	e002      	b.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a066:	bf00      	nop
 800a068:	e000      	b.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a06a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a06c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a070:	2b00      	cmp	r3, #0
 800a072:	d10a      	bne.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a074:	4b9b      	ldr	r3, [pc, #620]	@ (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a076:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a078:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800a07c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a082:	4a98      	ldr	r2, [pc, #608]	@ (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a084:	430b      	orrs	r3, r1
 800a086:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a088:	e003      	b.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a08a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a08e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a092:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a09e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a0a8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a0ac:	460b      	mov	r3, r1
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	d051      	beq.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a0b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a0b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a0bc:	d035      	beq.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800a0be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a0c2:	d82e      	bhi.n	800a122 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a0c4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a0c8:	d031      	beq.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0x442>
 800a0ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a0ce:	d828      	bhi.n	800a122 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a0d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a0d4:	d01a      	beq.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0x420>
 800a0d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a0da:	d822      	bhi.n	800a122 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d003      	beq.n	800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800a0e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a0e4:	d007      	beq.n	800a0f6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800a0e6:	e01c      	b.n	800a122 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0e8:	4b7e      	ldr	r3, [pc, #504]	@ (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a0ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0ec:	4a7d      	ldr	r2, [pc, #500]	@ (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a0ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a0f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a0f4:	e01c      	b.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a0f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0fa:	3308      	adds	r3, #8
 800a0fc:	2100      	movs	r1, #0
 800a0fe:	4618      	mov	r0, r3
 800a100:	f002 f876 	bl	800c1f0 <RCCEx_PLL2_Config>
 800a104:	4603      	mov	r3, r0
 800a106:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a10a:	e011      	b.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a10c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a110:	3328      	adds	r3, #40	@ 0x28
 800a112:	2100      	movs	r1, #0
 800a114:	4618      	mov	r0, r3
 800a116:	f002 f91d 	bl	800c354 <RCCEx_PLL3_Config>
 800a11a:	4603      	mov	r3, r0
 800a11c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a120:	e006      	b.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a122:	2301      	movs	r3, #1
 800a124:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a128:	e002      	b.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a12a:	bf00      	nop
 800a12c:	e000      	b.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a12e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a130:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a134:	2b00      	cmp	r3, #0
 800a136:	d10a      	bne.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a138:	4b6a      	ldr	r3, [pc, #424]	@ (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a13a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a13c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a140:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a146:	4a67      	ldr	r2, [pc, #412]	@ (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a148:	430b      	orrs	r3, r1
 800a14a:	6513      	str	r3, [r2, #80]	@ 0x50
 800a14c:	e003      	b.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a14e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a152:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a156:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a15e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a162:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a166:	2300      	movs	r3, #0
 800a168:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a16c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a170:	460b      	mov	r3, r1
 800a172:	4313      	orrs	r3, r2
 800a174:	d053      	beq.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a176:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a17a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a17c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a180:	d033      	beq.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800a182:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a186:	d82c      	bhi.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a188:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a18c:	d02f      	beq.n	800a1ee <HAL_RCCEx_PeriphCLKConfig+0x502>
 800a18e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a192:	d826      	bhi.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a194:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a198:	d02b      	beq.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800a19a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a19e:	d820      	bhi.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a1a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1a4:	d012      	beq.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800a1a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1aa:	d81a      	bhi.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d022      	beq.n	800a1f6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800a1b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1b4:	d115      	bne.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a1b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1ba:	3308      	adds	r3, #8
 800a1bc:	2101      	movs	r1, #1
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f002 f816 	bl	800c1f0 <RCCEx_PLL2_Config>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a1ca:	e015      	b.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a1cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1d0:	3328      	adds	r3, #40	@ 0x28
 800a1d2:	2101      	movs	r1, #1
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f002 f8bd 	bl	800c354 <RCCEx_PLL3_Config>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a1e0:	e00a      	b.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a1e8:	e006      	b.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a1ea:	bf00      	nop
 800a1ec:	e004      	b.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a1ee:	bf00      	nop
 800a1f0:	e002      	b.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a1f2:	bf00      	nop
 800a1f4:	e000      	b.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a1f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d10a      	bne.n	800a216 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a200:	4b38      	ldr	r3, [pc, #224]	@ (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a202:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a204:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a208:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a20c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a20e:	4a35      	ldr	r2, [pc, #212]	@ (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a210:	430b      	orrs	r3, r1
 800a212:	6513      	str	r3, [r2, #80]	@ 0x50
 800a214:	e003      	b.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a216:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a21a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a21e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a226:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a22a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a22e:	2300      	movs	r3, #0
 800a230:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a234:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a238:	460b      	mov	r3, r1
 800a23a:	4313      	orrs	r3, r2
 800a23c:	d058      	beq.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a23e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a242:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a246:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a24a:	d033      	beq.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800a24c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a250:	d82c      	bhi.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a252:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a256:	d02f      	beq.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800a258:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a25c:	d826      	bhi.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a25e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a262:	d02b      	beq.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800a264:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a268:	d820      	bhi.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a26a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a26e:	d012      	beq.n	800a296 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800a270:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a274:	d81a      	bhi.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a276:	2b00      	cmp	r3, #0
 800a278:	d022      	beq.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a27a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a27e:	d115      	bne.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a280:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a284:	3308      	adds	r3, #8
 800a286:	2101      	movs	r1, #1
 800a288:	4618      	mov	r0, r3
 800a28a:	f001 ffb1 	bl	800c1f0 <RCCEx_PLL2_Config>
 800a28e:	4603      	mov	r3, r0
 800a290:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a294:	e015      	b.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a296:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a29a:	3328      	adds	r3, #40	@ 0x28
 800a29c:	2101      	movs	r1, #1
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f002 f858 	bl	800c354 <RCCEx_PLL3_Config>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a2aa:	e00a      	b.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a2b2:	e006      	b.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a2b4:	bf00      	nop
 800a2b6:	e004      	b.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a2b8:	bf00      	nop
 800a2ba:	e002      	b.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a2bc:	bf00      	nop
 800a2be:	e000      	b.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a2c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d10e      	bne.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a2ca:	4b06      	ldr	r3, [pc, #24]	@ (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a2cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2ce:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a2d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a2da:	4a02      	ldr	r2, [pc, #8]	@ (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a2dc:	430b      	orrs	r3, r1
 800a2de:	6593      	str	r3, [r2, #88]	@ 0x58
 800a2e0:	e006      	b.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800a2e2:	bf00      	nop
 800a2e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a2ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a2f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800a2fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a300:	2300      	movs	r3, #0
 800a302:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a306:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800a30a:	460b      	mov	r3, r1
 800a30c:	4313      	orrs	r3, r2
 800a30e:	d037      	beq.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a314:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a316:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a31a:	d00e      	beq.n	800a33a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800a31c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a320:	d816      	bhi.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800a322:	2b00      	cmp	r3, #0
 800a324:	d018      	beq.n	800a358 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800a326:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a32a:	d111      	bne.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a32c:	4bc4      	ldr	r3, [pc, #784]	@ (800a640 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a32e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a330:	4ac3      	ldr	r2, [pc, #780]	@ (800a640 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a332:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a336:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a338:	e00f      	b.n	800a35a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a33a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a33e:	3308      	adds	r3, #8
 800a340:	2101      	movs	r1, #1
 800a342:	4618      	mov	r0, r3
 800a344:	f001 ff54 	bl	800c1f0 <RCCEx_PLL2_Config>
 800a348:	4603      	mov	r3, r0
 800a34a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a34e:	e004      	b.n	800a35a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a350:	2301      	movs	r3, #1
 800a352:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a356:	e000      	b.n	800a35a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800a358:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a35a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d10a      	bne.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a362:	4bb7      	ldr	r3, [pc, #732]	@ (800a640 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a364:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a366:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a36a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a36e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a370:	4ab3      	ldr	r2, [pc, #716]	@ (800a640 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a372:	430b      	orrs	r3, r1
 800a374:	6513      	str	r3, [r2, #80]	@ 0x50
 800a376:	e003      	b.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a378:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a37c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a388:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a38c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a390:	2300      	movs	r3, #0
 800a392:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a396:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a39a:	460b      	mov	r3, r1
 800a39c:	4313      	orrs	r3, r2
 800a39e:	d039      	beq.n	800a414 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a3a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a3a6:	2b03      	cmp	r3, #3
 800a3a8:	d81c      	bhi.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800a3aa:	a201      	add	r2, pc, #4	@ (adr r2, 800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800a3ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3b0:	0800a3ed 	.word	0x0800a3ed
 800a3b4:	0800a3c1 	.word	0x0800a3c1
 800a3b8:	0800a3cf 	.word	0x0800a3cf
 800a3bc:	0800a3ed 	.word	0x0800a3ed
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3c0:	4b9f      	ldr	r3, [pc, #636]	@ (800a640 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a3c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3c4:	4a9e      	ldr	r2, [pc, #632]	@ (800a640 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a3c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a3ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a3cc:	e00f      	b.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a3ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3d2:	3308      	adds	r3, #8
 800a3d4:	2102      	movs	r1, #2
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f001 ff0a 	bl	800c1f0 <RCCEx_PLL2_Config>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a3e2:	e004      	b.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a3ea:	e000      	b.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800a3ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d10a      	bne.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a3f6:	4b92      	ldr	r3, [pc, #584]	@ (800a640 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a3f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3fa:	f023 0103 	bic.w	r1, r3, #3
 800a3fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a402:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a404:	4a8e      	ldr	r2, [pc, #568]	@ (800a640 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a406:	430b      	orrs	r3, r1
 800a408:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a40a:	e003      	b.n	800a414 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a40c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a410:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a414:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a420:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a424:	2300      	movs	r3, #0
 800a426:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a42a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a42e:	460b      	mov	r3, r1
 800a430:	4313      	orrs	r3, r2
 800a432:	f000 8099 	beq.w	800a568 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a436:	4b83      	ldr	r3, [pc, #524]	@ (800a644 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	4a82      	ldr	r2, [pc, #520]	@ (800a644 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a43c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a440:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a442:	f7fa f85b 	bl	80044fc <HAL_GetTick>
 800a446:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a44a:	e00b      	b.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a44c:	f7fa f856 	bl	80044fc <HAL_GetTick>
 800a450:	4602      	mov	r2, r0
 800a452:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a456:	1ad3      	subs	r3, r2, r3
 800a458:	2b64      	cmp	r3, #100	@ 0x64
 800a45a:	d903      	bls.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800a45c:	2303      	movs	r3, #3
 800a45e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a462:	e005      	b.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a464:	4b77      	ldr	r3, [pc, #476]	@ (800a644 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d0ed      	beq.n	800a44c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800a470:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a474:	2b00      	cmp	r3, #0
 800a476:	d173      	bne.n	800a560 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a478:	4b71      	ldr	r3, [pc, #452]	@ (800a640 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a47a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a47c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a480:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a484:	4053      	eors	r3, r2
 800a486:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d015      	beq.n	800a4ba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a48e:	4b6c      	ldr	r3, [pc, #432]	@ (800a640 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a492:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a496:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a49a:	4b69      	ldr	r3, [pc, #420]	@ (800a640 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a49c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a49e:	4a68      	ldr	r2, [pc, #416]	@ (800a640 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a4a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a4a4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a4a6:	4b66      	ldr	r3, [pc, #408]	@ (800a640 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a4a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4aa:	4a65      	ldr	r2, [pc, #404]	@ (800a640 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a4ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a4b0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a4b2:	4a63      	ldr	r2, [pc, #396]	@ (800a640 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a4b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4b8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a4ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a4c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4c6:	d118      	bne.n	800a4fa <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4c8:	f7fa f818 	bl	80044fc <HAL_GetTick>
 800a4cc:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a4d0:	e00d      	b.n	800a4ee <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a4d2:	f7fa f813 	bl	80044fc <HAL_GetTick>
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a4dc:	1ad2      	subs	r2, r2, r3
 800a4de:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a4e2:	429a      	cmp	r2, r3
 800a4e4:	d903      	bls.n	800a4ee <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800a4e6:	2303      	movs	r3, #3
 800a4e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800a4ec:	e005      	b.n	800a4fa <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a4ee:	4b54      	ldr	r3, [pc, #336]	@ (800a640 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a4f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4f2:	f003 0302 	and.w	r3, r3, #2
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d0eb      	beq.n	800a4d2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800a4fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d129      	bne.n	800a556 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a502:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a506:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a50a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a50e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a512:	d10e      	bne.n	800a532 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800a514:	4b4a      	ldr	r3, [pc, #296]	@ (800a640 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a516:	691b      	ldr	r3, [r3, #16]
 800a518:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800a51c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a520:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a524:	091a      	lsrs	r2, r3, #4
 800a526:	4b48      	ldr	r3, [pc, #288]	@ (800a648 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a528:	4013      	ands	r3, r2
 800a52a:	4a45      	ldr	r2, [pc, #276]	@ (800a640 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a52c:	430b      	orrs	r3, r1
 800a52e:	6113      	str	r3, [r2, #16]
 800a530:	e005      	b.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0x852>
 800a532:	4b43      	ldr	r3, [pc, #268]	@ (800a640 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a534:	691b      	ldr	r3, [r3, #16]
 800a536:	4a42      	ldr	r2, [pc, #264]	@ (800a640 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a538:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a53c:	6113      	str	r3, [r2, #16]
 800a53e:	4b40      	ldr	r3, [pc, #256]	@ (800a640 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a540:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a542:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a546:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a54a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a54e:	4a3c      	ldr	r2, [pc, #240]	@ (800a640 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a550:	430b      	orrs	r3, r1
 800a552:	6713      	str	r3, [r2, #112]	@ 0x70
 800a554:	e008      	b.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a556:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a55a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800a55e:	e003      	b.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a560:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a564:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a570:	f002 0301 	and.w	r3, r2, #1
 800a574:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a578:	2300      	movs	r3, #0
 800a57a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a57e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800a582:	460b      	mov	r3, r1
 800a584:	4313      	orrs	r3, r2
 800a586:	f000 808f 	beq.w	800a6a8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a58a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a58e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a590:	2b28      	cmp	r3, #40	@ 0x28
 800a592:	d871      	bhi.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800a594:	a201      	add	r2, pc, #4	@ (adr r2, 800a59c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800a596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a59a:	bf00      	nop
 800a59c:	0800a681 	.word	0x0800a681
 800a5a0:	0800a679 	.word	0x0800a679
 800a5a4:	0800a679 	.word	0x0800a679
 800a5a8:	0800a679 	.word	0x0800a679
 800a5ac:	0800a679 	.word	0x0800a679
 800a5b0:	0800a679 	.word	0x0800a679
 800a5b4:	0800a679 	.word	0x0800a679
 800a5b8:	0800a679 	.word	0x0800a679
 800a5bc:	0800a64d 	.word	0x0800a64d
 800a5c0:	0800a679 	.word	0x0800a679
 800a5c4:	0800a679 	.word	0x0800a679
 800a5c8:	0800a679 	.word	0x0800a679
 800a5cc:	0800a679 	.word	0x0800a679
 800a5d0:	0800a679 	.word	0x0800a679
 800a5d4:	0800a679 	.word	0x0800a679
 800a5d8:	0800a679 	.word	0x0800a679
 800a5dc:	0800a663 	.word	0x0800a663
 800a5e0:	0800a679 	.word	0x0800a679
 800a5e4:	0800a679 	.word	0x0800a679
 800a5e8:	0800a679 	.word	0x0800a679
 800a5ec:	0800a679 	.word	0x0800a679
 800a5f0:	0800a679 	.word	0x0800a679
 800a5f4:	0800a679 	.word	0x0800a679
 800a5f8:	0800a679 	.word	0x0800a679
 800a5fc:	0800a681 	.word	0x0800a681
 800a600:	0800a679 	.word	0x0800a679
 800a604:	0800a679 	.word	0x0800a679
 800a608:	0800a679 	.word	0x0800a679
 800a60c:	0800a679 	.word	0x0800a679
 800a610:	0800a679 	.word	0x0800a679
 800a614:	0800a679 	.word	0x0800a679
 800a618:	0800a679 	.word	0x0800a679
 800a61c:	0800a681 	.word	0x0800a681
 800a620:	0800a679 	.word	0x0800a679
 800a624:	0800a679 	.word	0x0800a679
 800a628:	0800a679 	.word	0x0800a679
 800a62c:	0800a679 	.word	0x0800a679
 800a630:	0800a679 	.word	0x0800a679
 800a634:	0800a679 	.word	0x0800a679
 800a638:	0800a679 	.word	0x0800a679
 800a63c:	0800a681 	.word	0x0800a681
 800a640:	58024400 	.word	0x58024400
 800a644:	58024800 	.word	0x58024800
 800a648:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a64c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a650:	3308      	adds	r3, #8
 800a652:	2101      	movs	r1, #1
 800a654:	4618      	mov	r0, r3
 800a656:	f001 fdcb 	bl	800c1f0 <RCCEx_PLL2_Config>
 800a65a:	4603      	mov	r3, r0
 800a65c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a660:	e00f      	b.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a662:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a666:	3328      	adds	r3, #40	@ 0x28
 800a668:	2101      	movs	r1, #1
 800a66a:	4618      	mov	r0, r3
 800a66c:	f001 fe72 	bl	800c354 <RCCEx_PLL3_Config>
 800a670:	4603      	mov	r3, r0
 800a672:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a676:	e004      	b.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a678:	2301      	movs	r3, #1
 800a67a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a67e:	e000      	b.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800a680:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a682:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a686:	2b00      	cmp	r3, #0
 800a688:	d10a      	bne.n	800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a68a:	4bbf      	ldr	r3, [pc, #764]	@ (800a988 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a68c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a68e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800a692:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a696:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a698:	4abb      	ldr	r2, [pc, #748]	@ (800a988 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a69a:	430b      	orrs	r3, r1
 800a69c:	6553      	str	r3, [r2, #84]	@ 0x54
 800a69e:	e003      	b.n	800a6a8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a6a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a6a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b0:	f002 0302 	and.w	r3, r2, #2
 800a6b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a6be:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a6c2:	460b      	mov	r3, r1
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	d041      	beq.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a6c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a6ce:	2b05      	cmp	r3, #5
 800a6d0:	d824      	bhi.n	800a71c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800a6d2:	a201      	add	r2, pc, #4	@ (adr r2, 800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800a6d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6d8:	0800a725 	.word	0x0800a725
 800a6dc:	0800a6f1 	.word	0x0800a6f1
 800a6e0:	0800a707 	.word	0x0800a707
 800a6e4:	0800a725 	.word	0x0800a725
 800a6e8:	0800a725 	.word	0x0800a725
 800a6ec:	0800a725 	.word	0x0800a725
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a6f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6f4:	3308      	adds	r3, #8
 800a6f6:	2101      	movs	r1, #1
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f001 fd79 	bl	800c1f0 <RCCEx_PLL2_Config>
 800a6fe:	4603      	mov	r3, r0
 800a700:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a704:	e00f      	b.n	800a726 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a706:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a70a:	3328      	adds	r3, #40	@ 0x28
 800a70c:	2101      	movs	r1, #1
 800a70e:	4618      	mov	r0, r3
 800a710:	f001 fe20 	bl	800c354 <RCCEx_PLL3_Config>
 800a714:	4603      	mov	r3, r0
 800a716:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a71a:	e004      	b.n	800a726 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a71c:	2301      	movs	r3, #1
 800a71e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a722:	e000      	b.n	800a726 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800a724:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a726:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d10a      	bne.n	800a744 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a72e:	4b96      	ldr	r3, [pc, #600]	@ (800a988 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a732:	f023 0107 	bic.w	r1, r3, #7
 800a736:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a73a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a73c:	4a92      	ldr	r2, [pc, #584]	@ (800a988 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a73e:	430b      	orrs	r3, r1
 800a740:	6553      	str	r3, [r2, #84]	@ 0x54
 800a742:	e003      	b.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a744:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a748:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a74c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a754:	f002 0304 	and.w	r3, r2, #4
 800a758:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a75c:	2300      	movs	r3, #0
 800a75e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a762:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a766:	460b      	mov	r3, r1
 800a768:	4313      	orrs	r3, r2
 800a76a:	d044      	beq.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a76c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a770:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a774:	2b05      	cmp	r3, #5
 800a776:	d825      	bhi.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800a778:	a201      	add	r2, pc, #4	@ (adr r2, 800a780 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800a77a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a77e:	bf00      	nop
 800a780:	0800a7cd 	.word	0x0800a7cd
 800a784:	0800a799 	.word	0x0800a799
 800a788:	0800a7af 	.word	0x0800a7af
 800a78c:	0800a7cd 	.word	0x0800a7cd
 800a790:	0800a7cd 	.word	0x0800a7cd
 800a794:	0800a7cd 	.word	0x0800a7cd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a798:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a79c:	3308      	adds	r3, #8
 800a79e:	2101      	movs	r1, #1
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f001 fd25 	bl	800c1f0 <RCCEx_PLL2_Config>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a7ac:	e00f      	b.n	800a7ce <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a7ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7b2:	3328      	adds	r3, #40	@ 0x28
 800a7b4:	2101      	movs	r1, #1
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f001 fdcc 	bl	800c354 <RCCEx_PLL3_Config>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a7c2:	e004      	b.n	800a7ce <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a7ca:	e000      	b.n	800a7ce <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800a7cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d10b      	bne.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a7d6:	4b6c      	ldr	r3, [pc, #432]	@ (800a988 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a7d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7da:	f023 0107 	bic.w	r1, r3, #7
 800a7de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7e6:	4a68      	ldr	r2, [pc, #416]	@ (800a988 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a7e8:	430b      	orrs	r3, r1
 800a7ea:	6593      	str	r3, [r2, #88]	@ 0x58
 800a7ec:	e003      	b.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a7f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a7f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fe:	f002 0320 	and.w	r3, r2, #32
 800a802:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a806:	2300      	movs	r3, #0
 800a808:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a80c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a810:	460b      	mov	r3, r1
 800a812:	4313      	orrs	r3, r2
 800a814:	d055      	beq.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a816:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a81a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a81e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a822:	d033      	beq.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800a824:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a828:	d82c      	bhi.n	800a884 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a82a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a82e:	d02f      	beq.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800a830:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a834:	d826      	bhi.n	800a884 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a836:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a83a:	d02b      	beq.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800a83c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a840:	d820      	bhi.n	800a884 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a842:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a846:	d012      	beq.n	800a86e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800a848:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a84c:	d81a      	bhi.n	800a884 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d022      	beq.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800a852:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a856:	d115      	bne.n	800a884 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a85c:	3308      	adds	r3, #8
 800a85e:	2100      	movs	r1, #0
 800a860:	4618      	mov	r0, r3
 800a862:	f001 fcc5 	bl	800c1f0 <RCCEx_PLL2_Config>
 800a866:	4603      	mov	r3, r0
 800a868:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a86c:	e015      	b.n	800a89a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a86e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a872:	3328      	adds	r3, #40	@ 0x28
 800a874:	2102      	movs	r1, #2
 800a876:	4618      	mov	r0, r3
 800a878:	f001 fd6c 	bl	800c354 <RCCEx_PLL3_Config>
 800a87c:	4603      	mov	r3, r0
 800a87e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a882:	e00a      	b.n	800a89a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a884:	2301      	movs	r3, #1
 800a886:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a88a:	e006      	b.n	800a89a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a88c:	bf00      	nop
 800a88e:	e004      	b.n	800a89a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a890:	bf00      	nop
 800a892:	e002      	b.n	800a89a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a894:	bf00      	nop
 800a896:	e000      	b.n	800a89a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a898:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a89a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d10b      	bne.n	800a8ba <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a8a2:	4b39      	ldr	r3, [pc, #228]	@ (800a988 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a8a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8a6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a8aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a8b2:	4a35      	ldr	r2, [pc, #212]	@ (800a988 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a8b4:	430b      	orrs	r3, r1
 800a8b6:	6553      	str	r3, [r2, #84]	@ 0x54
 800a8b8:	e003      	b.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a8be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a8c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ca:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a8ce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a8d8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a8dc:	460b      	mov	r3, r1
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	d058      	beq.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a8e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a8ea:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a8ee:	d033      	beq.n	800a958 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800a8f0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a8f4:	d82c      	bhi.n	800a950 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a8f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8fa:	d02f      	beq.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a8fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a900:	d826      	bhi.n	800a950 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a902:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a906:	d02b      	beq.n	800a960 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800a908:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a90c:	d820      	bhi.n	800a950 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a90e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a912:	d012      	beq.n	800a93a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800a914:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a918:	d81a      	bhi.n	800a950 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d022      	beq.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a91e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a922:	d115      	bne.n	800a950 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a924:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a928:	3308      	adds	r3, #8
 800a92a:	2100      	movs	r1, #0
 800a92c:	4618      	mov	r0, r3
 800a92e:	f001 fc5f 	bl	800c1f0 <RCCEx_PLL2_Config>
 800a932:	4603      	mov	r3, r0
 800a934:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a938:	e015      	b.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a93a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a93e:	3328      	adds	r3, #40	@ 0x28
 800a940:	2102      	movs	r1, #2
 800a942:	4618      	mov	r0, r3
 800a944:	f001 fd06 	bl	800c354 <RCCEx_PLL3_Config>
 800a948:	4603      	mov	r3, r0
 800a94a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a94e:	e00a      	b.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a950:	2301      	movs	r3, #1
 800a952:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a956:	e006      	b.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a958:	bf00      	nop
 800a95a:	e004      	b.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a95c:	bf00      	nop
 800a95e:	e002      	b.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a960:	bf00      	nop
 800a962:	e000      	b.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a964:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a966:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d10e      	bne.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a96e:	4b06      	ldr	r3, [pc, #24]	@ (800a988 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a972:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a97a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a97e:	4a02      	ldr	r2, [pc, #8]	@ (800a988 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a980:	430b      	orrs	r3, r1
 800a982:	6593      	str	r3, [r2, #88]	@ 0x58
 800a984:	e006      	b.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800a986:	bf00      	nop
 800a988:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a98c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a990:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a99c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a9a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a9aa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a9ae:	460b      	mov	r3, r1
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	d055      	beq.n	800aa60 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a9b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a9bc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a9c0:	d033      	beq.n	800aa2a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800a9c2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a9c6:	d82c      	bhi.n	800aa22 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a9c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a9cc:	d02f      	beq.n	800aa2e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800a9ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a9d2:	d826      	bhi.n	800aa22 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a9d4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a9d8:	d02b      	beq.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800a9da:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a9de:	d820      	bhi.n	800aa22 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a9e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a9e4:	d012      	beq.n	800aa0c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800a9e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a9ea:	d81a      	bhi.n	800aa22 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d022      	beq.n	800aa36 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800a9f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a9f4:	d115      	bne.n	800aa22 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a9f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9fa:	3308      	adds	r3, #8
 800a9fc:	2100      	movs	r1, #0
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f001 fbf6 	bl	800c1f0 <RCCEx_PLL2_Config>
 800aa04:	4603      	mov	r3, r0
 800aa06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800aa0a:	e015      	b.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa10:	3328      	adds	r3, #40	@ 0x28
 800aa12:	2102      	movs	r1, #2
 800aa14:	4618      	mov	r0, r3
 800aa16:	f001 fc9d 	bl	800c354 <RCCEx_PLL3_Config>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800aa20:	e00a      	b.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa22:	2301      	movs	r3, #1
 800aa24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800aa28:	e006      	b.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800aa2a:	bf00      	nop
 800aa2c:	e004      	b.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800aa2e:	bf00      	nop
 800aa30:	e002      	b.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800aa32:	bf00      	nop
 800aa34:	e000      	b.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800aa36:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d10b      	bne.n	800aa58 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800aa40:	4ba0      	ldr	r3, [pc, #640]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aa42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa44:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800aa48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aa50:	4a9c      	ldr	r2, [pc, #624]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aa52:	430b      	orrs	r3, r1
 800aa54:	6593      	str	r3, [r2, #88]	@ 0x58
 800aa56:	e003      	b.n	800aa60 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800aa60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa68:	f002 0308 	and.w	r3, r2, #8
 800aa6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800aa70:	2300      	movs	r3, #0
 800aa72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800aa76:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800aa7a:	460b      	mov	r3, r1
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	d01e      	beq.n	800aabe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800aa80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa8c:	d10c      	bne.n	800aaa8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aa8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa92:	3328      	adds	r3, #40	@ 0x28
 800aa94:	2102      	movs	r1, #2
 800aa96:	4618      	mov	r0, r3
 800aa98:	f001 fc5c 	bl	800c354 <RCCEx_PLL3_Config>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d002      	beq.n	800aaa8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800aaa8:	4b86      	ldr	r3, [pc, #536]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aaaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aaac:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800aab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aab4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aab8:	4a82      	ldr	r2, [pc, #520]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aaba:	430b      	orrs	r3, r1
 800aabc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800aabe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac6:	f002 0310 	and.w	r3, r2, #16
 800aaca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800aace:	2300      	movs	r3, #0
 800aad0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800aad4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800aad8:	460b      	mov	r3, r1
 800aada:	4313      	orrs	r3, r2
 800aadc:	d01e      	beq.n	800ab1c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800aade:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aae2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aae6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aaea:	d10c      	bne.n	800ab06 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aaec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aaf0:	3328      	adds	r3, #40	@ 0x28
 800aaf2:	2102      	movs	r1, #2
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f001 fc2d 	bl	800c354 <RCCEx_PLL3_Config>
 800aafa:	4603      	mov	r3, r0
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d002      	beq.n	800ab06 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800ab00:	2301      	movs	r3, #1
 800ab02:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ab06:	4b6f      	ldr	r3, [pc, #444]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab0a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ab0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ab16:	4a6b      	ldr	r2, [pc, #428]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab18:	430b      	orrs	r3, r1
 800ab1a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ab1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab24:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800ab28:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ab2e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800ab32:	460b      	mov	r3, r1
 800ab34:	4313      	orrs	r3, r2
 800ab36:	d03e      	beq.n	800abb6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800ab38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ab40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab44:	d022      	beq.n	800ab8c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800ab46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab4a:	d81b      	bhi.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d003      	beq.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800ab50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab54:	d00b      	beq.n	800ab6e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800ab56:	e015      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab5c:	3308      	adds	r3, #8
 800ab5e:	2100      	movs	r1, #0
 800ab60:	4618      	mov	r0, r3
 800ab62:	f001 fb45 	bl	800c1f0 <RCCEx_PLL2_Config>
 800ab66:	4603      	mov	r3, r0
 800ab68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ab6c:	e00f      	b.n	800ab8e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ab6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab72:	3328      	adds	r3, #40	@ 0x28
 800ab74:	2102      	movs	r1, #2
 800ab76:	4618      	mov	r0, r3
 800ab78:	f001 fbec 	bl	800c354 <RCCEx_PLL3_Config>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ab82:	e004      	b.n	800ab8e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab84:	2301      	movs	r3, #1
 800ab86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ab8a:	e000      	b.n	800ab8e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800ab8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d10b      	bne.n	800abae <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ab96:	4b4b      	ldr	r3, [pc, #300]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab9a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800ab9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aba2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800aba6:	4a47      	ldr	r2, [pc, #284]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aba8:	430b      	orrs	r3, r1
 800abaa:	6593      	str	r3, [r2, #88]	@ 0x58
 800abac:	e003      	b.n	800abb6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800abb2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800abb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abbe:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800abc2:	673b      	str	r3, [r7, #112]	@ 0x70
 800abc4:	2300      	movs	r3, #0
 800abc6:	677b      	str	r3, [r7, #116]	@ 0x74
 800abc8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800abcc:	460b      	mov	r3, r1
 800abce:	4313      	orrs	r3, r2
 800abd0:	d03b      	beq.n	800ac4a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800abd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800abda:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800abde:	d01f      	beq.n	800ac20 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800abe0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800abe4:	d818      	bhi.n	800ac18 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800abe6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800abea:	d003      	beq.n	800abf4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800abec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800abf0:	d007      	beq.n	800ac02 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800abf2:	e011      	b.n	800ac18 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abf4:	4b33      	ldr	r3, [pc, #204]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800abf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abf8:	4a32      	ldr	r2, [pc, #200]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800abfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800abfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ac00:	e00f      	b.n	800ac22 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ac02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac06:	3328      	adds	r3, #40	@ 0x28
 800ac08:	2101      	movs	r1, #1
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f001 fba2 	bl	800c354 <RCCEx_PLL3_Config>
 800ac10:	4603      	mov	r3, r0
 800ac12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800ac16:	e004      	b.n	800ac22 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ac1e:	e000      	b.n	800ac22 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800ac20:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d10b      	bne.n	800ac42 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ac2a:	4b26      	ldr	r3, [pc, #152]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac2e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ac32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac3a:	4a22      	ldr	r2, [pc, #136]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac3c:	430b      	orrs	r3, r1
 800ac3e:	6553      	str	r3, [r2, #84]	@ 0x54
 800ac40:	e003      	b.n	800ac4a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ac46:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ac4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac52:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800ac56:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ac58:	2300      	movs	r3, #0
 800ac5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ac5c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800ac60:	460b      	mov	r3, r1
 800ac62:	4313      	orrs	r3, r2
 800ac64:	d034      	beq.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ac66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d003      	beq.n	800ac78 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800ac70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac74:	d007      	beq.n	800ac86 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800ac76:	e011      	b.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac78:	4b12      	ldr	r3, [pc, #72]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac7c:	4a11      	ldr	r2, [pc, #68]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ac82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ac84:	e00e      	b.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ac86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac8a:	3308      	adds	r3, #8
 800ac8c:	2102      	movs	r1, #2
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f001 faae 	bl	800c1f0 <RCCEx_PLL2_Config>
 800ac94:	4603      	mov	r3, r0
 800ac96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ac9a:	e003      	b.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800aca2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aca4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d10d      	bne.n	800acc8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800acac:	4b05      	ldr	r3, [pc, #20]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800acae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800acb0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800acb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acba:	4a02      	ldr	r2, [pc, #8]	@ (800acc4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800acbc:	430b      	orrs	r3, r1
 800acbe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800acc0:	e006      	b.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800acc2:	bf00      	nop
 800acc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800accc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800acd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800acdc:	663b      	str	r3, [r7, #96]	@ 0x60
 800acde:	2300      	movs	r3, #0
 800ace0:	667b      	str	r3, [r7, #100]	@ 0x64
 800ace2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800ace6:	460b      	mov	r3, r1
 800ace8:	4313      	orrs	r3, r2
 800acea:	d00c      	beq.n	800ad06 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800acec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acf0:	3328      	adds	r3, #40	@ 0x28
 800acf2:	2102      	movs	r1, #2
 800acf4:	4618      	mov	r0, r3
 800acf6:	f001 fb2d 	bl	800c354 <RCCEx_PLL3_Config>
 800acfa:	4603      	mov	r3, r0
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d002      	beq.n	800ad06 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800ad00:	2301      	movs	r3, #1
 800ad02:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ad06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800ad12:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ad14:	2300      	movs	r3, #0
 800ad16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ad18:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	d036      	beq.n	800ad90 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ad22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ad28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad2c:	d018      	beq.n	800ad60 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800ad2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad32:	d811      	bhi.n	800ad58 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800ad34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad38:	d014      	beq.n	800ad64 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800ad3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad3e:	d80b      	bhi.n	800ad58 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d011      	beq.n	800ad68 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800ad44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad48:	d106      	bne.n	800ad58 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad4a:	4bb7      	ldr	r3, [pc, #732]	@ (800b028 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ad4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad4e:	4ab6      	ldr	r2, [pc, #728]	@ (800b028 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ad50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ad54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800ad56:	e008      	b.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad58:	2301      	movs	r3, #1
 800ad5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ad5e:	e004      	b.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800ad60:	bf00      	nop
 800ad62:	e002      	b.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800ad64:	bf00      	nop
 800ad66:	e000      	b.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800ad68:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d10a      	bne.n	800ad88 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ad72:	4bad      	ldr	r3, [pc, #692]	@ (800b028 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ad74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad76:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ad7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ad80:	4aa9      	ldr	r2, [pc, #676]	@ (800b028 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ad82:	430b      	orrs	r3, r1
 800ad84:	6553      	str	r3, [r2, #84]	@ 0x54
 800ad86:	e003      	b.n	800ad90 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ad8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ad90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad98:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800ad9c:	653b      	str	r3, [r7, #80]	@ 0x50
 800ad9e:	2300      	movs	r3, #0
 800ada0:	657b      	str	r3, [r7, #84]	@ 0x54
 800ada2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800ada6:	460b      	mov	r3, r1
 800ada8:	4313      	orrs	r3, r2
 800adaa:	d009      	beq.n	800adc0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800adac:	4b9e      	ldr	r3, [pc, #632]	@ (800b028 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800adae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800adb0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800adb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800adba:	4a9b      	ldr	r2, [pc, #620]	@ (800b028 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800adbc:	430b      	orrs	r3, r1
 800adbe:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800adc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800adcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800adce:	2300      	movs	r3, #0
 800add0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800add2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800add6:	460b      	mov	r3, r1
 800add8:	4313      	orrs	r3, r2
 800adda:	d009      	beq.n	800adf0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800addc:	4b92      	ldr	r3, [pc, #584]	@ (800b028 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800adde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ade0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800ade4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ade8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800adea:	4a8f      	ldr	r2, [pc, #572]	@ (800b028 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800adec:	430b      	orrs	r3, r1
 800adee:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800adf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800adfc:	643b      	str	r3, [r7, #64]	@ 0x40
 800adfe:	2300      	movs	r3, #0
 800ae00:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae02:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800ae06:	460b      	mov	r3, r1
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	d00e      	beq.n	800ae2a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ae0c:	4b86      	ldr	r3, [pc, #536]	@ (800b028 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae0e:	691b      	ldr	r3, [r3, #16]
 800ae10:	4a85      	ldr	r2, [pc, #532]	@ (800b028 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae12:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ae16:	6113      	str	r3, [r2, #16]
 800ae18:	4b83      	ldr	r3, [pc, #524]	@ (800b028 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae1a:	6919      	ldr	r1, [r3, #16]
 800ae1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae20:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ae24:	4a80      	ldr	r2, [pc, #512]	@ (800b028 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae26:	430b      	orrs	r3, r1
 800ae28:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ae2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae32:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800ae36:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ae38:	2300      	movs	r3, #0
 800ae3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae3c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800ae40:	460b      	mov	r3, r1
 800ae42:	4313      	orrs	r3, r2
 800ae44:	d009      	beq.n	800ae5a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ae46:	4b78      	ldr	r3, [pc, #480]	@ (800b028 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae4a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800ae4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae54:	4a74      	ldr	r2, [pc, #464]	@ (800b028 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae56:	430b      	orrs	r3, r1
 800ae58:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ae5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae62:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800ae66:	633b      	str	r3, [r7, #48]	@ 0x30
 800ae68:	2300      	movs	r3, #0
 800ae6a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae6c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800ae70:	460b      	mov	r3, r1
 800ae72:	4313      	orrs	r3, r2
 800ae74:	d00a      	beq.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ae76:	4b6c      	ldr	r3, [pc, #432]	@ (800b028 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae7a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800ae7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae86:	4a68      	ldr	r2, [pc, #416]	@ (800b028 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae88:	430b      	orrs	r3, r1
 800ae8a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ae8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae94:	2100      	movs	r1, #0
 800ae96:	62b9      	str	r1, [r7, #40]	@ 0x28
 800ae98:	f003 0301 	and.w	r3, r3, #1
 800ae9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ae9e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800aea2:	460b      	mov	r3, r1
 800aea4:	4313      	orrs	r3, r2
 800aea6:	d011      	beq.n	800aecc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aeac:	3308      	adds	r3, #8
 800aeae:	2100      	movs	r1, #0
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f001 f99d 	bl	800c1f0 <RCCEx_PLL2_Config>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800aebc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d003      	beq.n	800aecc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aec4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aec8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800aecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed4:	2100      	movs	r1, #0
 800aed6:	6239      	str	r1, [r7, #32]
 800aed8:	f003 0302 	and.w	r3, r3, #2
 800aedc:	627b      	str	r3, [r7, #36]	@ 0x24
 800aede:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800aee2:	460b      	mov	r3, r1
 800aee4:	4313      	orrs	r3, r2
 800aee6:	d011      	beq.n	800af0c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aeec:	3308      	adds	r3, #8
 800aeee:	2101      	movs	r1, #1
 800aef0:	4618      	mov	r0, r3
 800aef2:	f001 f97d 	bl	800c1f0 <RCCEx_PLL2_Config>
 800aef6:	4603      	mov	r3, r0
 800aef8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800aefc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af00:	2b00      	cmp	r3, #0
 800af02:	d003      	beq.n	800af0c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800af0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af14:	2100      	movs	r1, #0
 800af16:	61b9      	str	r1, [r7, #24]
 800af18:	f003 0304 	and.w	r3, r3, #4
 800af1c:	61fb      	str	r3, [r7, #28]
 800af1e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800af22:	460b      	mov	r3, r1
 800af24:	4313      	orrs	r3, r2
 800af26:	d011      	beq.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800af28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af2c:	3308      	adds	r3, #8
 800af2e:	2102      	movs	r1, #2
 800af30:	4618      	mov	r0, r3
 800af32:	f001 f95d 	bl	800c1f0 <RCCEx_PLL2_Config>
 800af36:	4603      	mov	r3, r0
 800af38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800af3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af40:	2b00      	cmp	r3, #0
 800af42:	d003      	beq.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800af4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af54:	2100      	movs	r1, #0
 800af56:	6139      	str	r1, [r7, #16]
 800af58:	f003 0308 	and.w	r3, r3, #8
 800af5c:	617b      	str	r3, [r7, #20]
 800af5e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800af62:	460b      	mov	r3, r1
 800af64:	4313      	orrs	r3, r2
 800af66:	d011      	beq.n	800af8c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af6c:	3328      	adds	r3, #40	@ 0x28
 800af6e:	2100      	movs	r1, #0
 800af70:	4618      	mov	r0, r3
 800af72:	f001 f9ef 	bl	800c354 <RCCEx_PLL3_Config>
 800af76:	4603      	mov	r3, r0
 800af78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800af7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af80:	2b00      	cmp	r3, #0
 800af82:	d003      	beq.n	800af8c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800af8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af94:	2100      	movs	r1, #0
 800af96:	60b9      	str	r1, [r7, #8]
 800af98:	f003 0310 	and.w	r3, r3, #16
 800af9c:	60fb      	str	r3, [r7, #12]
 800af9e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800afa2:	460b      	mov	r3, r1
 800afa4:	4313      	orrs	r3, r2
 800afa6:	d011      	beq.n	800afcc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800afa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afac:	3328      	adds	r3, #40	@ 0x28
 800afae:	2101      	movs	r1, #1
 800afb0:	4618      	mov	r0, r3
 800afb2:	f001 f9cf 	bl	800c354 <RCCEx_PLL3_Config>
 800afb6:	4603      	mov	r3, r0
 800afb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800afbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d003      	beq.n	800afcc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800afc8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800afcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd4:	2100      	movs	r1, #0
 800afd6:	6039      	str	r1, [r7, #0]
 800afd8:	f003 0320 	and.w	r3, r3, #32
 800afdc:	607b      	str	r3, [r7, #4]
 800afde:	e9d7 1200 	ldrd	r1, r2, [r7]
 800afe2:	460b      	mov	r3, r1
 800afe4:	4313      	orrs	r3, r2
 800afe6:	d011      	beq.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800afe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afec:	3328      	adds	r3, #40	@ 0x28
 800afee:	2102      	movs	r1, #2
 800aff0:	4618      	mov	r0, r3
 800aff2:	f001 f9af 	bl	800c354 <RCCEx_PLL3_Config>
 800aff6:	4603      	mov	r3, r0
 800aff8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800affc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b000:	2b00      	cmp	r3, #0
 800b002:	d003      	beq.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b004:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b008:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800b00c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800b010:	2b00      	cmp	r3, #0
 800b012:	d101      	bne.n	800b018 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800b014:	2300      	movs	r3, #0
 800b016:	e000      	b.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800b018:	2301      	movs	r3, #1
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800b020:	46bd      	mov	sp, r7
 800b022:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b026:	bf00      	nop
 800b028:	58024400 	.word	0x58024400

0800b02c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b090      	sub	sp, #64	@ 0x40
 800b030:	af00      	add	r7, sp, #0
 800b032:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b036:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b03a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800b03e:	430b      	orrs	r3, r1
 800b040:	f040 8094 	bne.w	800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b044:	4b9b      	ldr	r3, [pc, #620]	@ (800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b046:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b048:	f003 0307 	and.w	r3, r3, #7
 800b04c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b04e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b050:	2b04      	cmp	r3, #4
 800b052:	f200 8087 	bhi.w	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b056:	a201      	add	r2, pc, #4	@ (adr r2, 800b05c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b05c:	0800b071 	.word	0x0800b071
 800b060:	0800b099 	.word	0x0800b099
 800b064:	0800b0c1 	.word	0x0800b0c1
 800b068:	0800b15d 	.word	0x0800b15d
 800b06c:	0800b0e9 	.word	0x0800b0e9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b070:	4b90      	ldr	r3, [pc, #576]	@ (800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b078:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b07c:	d108      	bne.n	800b090 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b07e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b082:	4618      	mov	r0, r3
 800b084:	f000 ff62 	bl	800bf4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b08a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b08c:	f000 bc93 	b.w	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b090:	2300      	movs	r3, #0
 800b092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b094:	f000 bc8f 	b.w	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b098:	4b86      	ldr	r3, [pc, #536]	@ (800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b0a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b0a4:	d108      	bne.n	800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0a6:	f107 0318 	add.w	r3, r7, #24
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f000 fca6 	bl	800b9fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b0b0:	69bb      	ldr	r3, [r7, #24]
 800b0b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0b4:	f000 bc7f 	b.w	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0bc:	f000 bc7b 	b.w	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b0c0:	4b7c      	ldr	r3, [pc, #496]	@ (800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b0c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b0cc:	d108      	bne.n	800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0ce:	f107 030c 	add.w	r3, r7, #12
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f000 fde6 	bl	800bca4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0dc:	f000 bc6b 	b.w	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0e4:	f000 bc67 	b.w	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b0e8:	4b72      	ldr	r3, [pc, #456]	@ (800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b0ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b0ec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b0f0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b0f2:	4b70      	ldr	r3, [pc, #448]	@ (800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f003 0304 	and.w	r3, r3, #4
 800b0fa:	2b04      	cmp	r3, #4
 800b0fc:	d10c      	bne.n	800b118 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b0fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b100:	2b00      	cmp	r3, #0
 800b102:	d109      	bne.n	800b118 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b104:	4b6b      	ldr	r3, [pc, #428]	@ (800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	08db      	lsrs	r3, r3, #3
 800b10a:	f003 0303 	and.w	r3, r3, #3
 800b10e:	4a6a      	ldr	r2, [pc, #424]	@ (800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b110:	fa22 f303 	lsr.w	r3, r2, r3
 800b114:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b116:	e01f      	b.n	800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b118:	4b66      	ldr	r3, [pc, #408]	@ (800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b120:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b124:	d106      	bne.n	800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b128:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b12c:	d102      	bne.n	800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b12e:	4b63      	ldr	r3, [pc, #396]	@ (800b2bc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b130:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b132:	e011      	b.n	800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b134:	4b5f      	ldr	r3, [pc, #380]	@ (800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b13c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b140:	d106      	bne.n	800b150 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b144:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b148:	d102      	bne.n	800b150 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b14a:	4b5d      	ldr	r3, [pc, #372]	@ (800b2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b14c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b14e:	e003      	b.n	800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b150:	2300      	movs	r3, #0
 800b152:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b154:	f000 bc2f 	b.w	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b158:	f000 bc2d 	b.w	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b15c:	4b59      	ldr	r3, [pc, #356]	@ (800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b15e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b160:	f000 bc29 	b.w	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b164:	2300      	movs	r3, #0
 800b166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b168:	f000 bc25 	b.w	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b16c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b170:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800b174:	430b      	orrs	r3, r1
 800b176:	f040 80a7 	bne.w	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b17a:	4b4e      	ldr	r3, [pc, #312]	@ (800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b17c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b17e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800b182:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b186:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b18a:	d054      	beq.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800b18c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b18e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b192:	f200 808b 	bhi.w	800b2ac <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b198:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b19c:	f000 8083 	beq.w	800b2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800b1a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1a2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b1a6:	f200 8081 	bhi.w	800b2ac <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b1aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b1b0:	d02f      	beq.n	800b212 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b1b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b1b8:	d878      	bhi.n	800b2ac <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b1ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d004      	beq.n	800b1ca <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800b1c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b1c6:	d012      	beq.n	800b1ee <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800b1c8:	e070      	b.n	800b2ac <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b1ca:	4b3a      	ldr	r3, [pc, #232]	@ (800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b1d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b1d6:	d107      	bne.n	800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b1d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f000 feb5 	bl	800bf4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b1e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1e6:	e3e6      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1ec:	e3e3      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b1ee:	4b31      	ldr	r3, [pc, #196]	@ (800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b1f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b1fa:	d107      	bne.n	800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1fc:	f107 0318 	add.w	r3, r7, #24
 800b200:	4618      	mov	r0, r3
 800b202:	f000 fbfb 	bl	800b9fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b206:	69bb      	ldr	r3, [r7, #24]
 800b208:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b20a:	e3d4      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b20c:	2300      	movs	r3, #0
 800b20e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b210:	e3d1      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b212:	4b28      	ldr	r3, [pc, #160]	@ (800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b21a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b21e:	d107      	bne.n	800b230 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b220:	f107 030c 	add.w	r3, r7, #12
 800b224:	4618      	mov	r0, r3
 800b226:	f000 fd3d 	bl	800bca4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b22e:	e3c2      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b230:	2300      	movs	r3, #0
 800b232:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b234:	e3bf      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b236:	4b1f      	ldr	r3, [pc, #124]	@ (800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b23a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b23e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b240:	4b1c      	ldr	r3, [pc, #112]	@ (800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f003 0304 	and.w	r3, r3, #4
 800b248:	2b04      	cmp	r3, #4
 800b24a:	d10c      	bne.n	800b266 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800b24c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d109      	bne.n	800b266 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b252:	4b18      	ldr	r3, [pc, #96]	@ (800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	08db      	lsrs	r3, r3, #3
 800b258:	f003 0303 	and.w	r3, r3, #3
 800b25c:	4a16      	ldr	r2, [pc, #88]	@ (800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b25e:	fa22 f303 	lsr.w	r3, r2, r3
 800b262:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b264:	e01e      	b.n	800b2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b266:	4b13      	ldr	r3, [pc, #76]	@ (800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b26e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b272:	d106      	bne.n	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800b274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b276:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b27a:	d102      	bne.n	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b27c:	4b0f      	ldr	r3, [pc, #60]	@ (800b2bc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b27e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b280:	e010      	b.n	800b2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b282:	4b0c      	ldr	r3, [pc, #48]	@ (800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b28a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b28e:	d106      	bne.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800b290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b292:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b296:	d102      	bne.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b298:	4b09      	ldr	r3, [pc, #36]	@ (800b2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b29a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b29c:	e002      	b.n	800b2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b2a2:	e388      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b2a4:	e387      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b2a6:	4b07      	ldr	r3, [pc, #28]	@ (800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b2a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2aa:	e384      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2b0:	e381      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b2b2:	bf00      	nop
 800b2b4:	58024400 	.word	0x58024400
 800b2b8:	03d09000 	.word	0x03d09000
 800b2bc:	003d0900 	.word	0x003d0900
 800b2c0:	017d7840 	.word	0x017d7840
 800b2c4:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b2c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2cc:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800b2d0:	430b      	orrs	r3, r1
 800b2d2:	f040 809c 	bne.w	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b2d6:	4b9e      	ldr	r3, [pc, #632]	@ (800b550 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b2d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b2da:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800b2de:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b2e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b2e6:	d054      	beq.n	800b392 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800b2e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b2ee:	f200 808b 	bhi.w	800b408 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2f4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b2f8:	f000 8083 	beq.w	800b402 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800b2fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2fe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b302:	f200 8081 	bhi.w	800b408 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b308:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b30c:	d02f      	beq.n	800b36e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800b30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b310:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b314:	d878      	bhi.n	800b408 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d004      	beq.n	800b326 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800b31c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b31e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b322:	d012      	beq.n	800b34a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800b324:	e070      	b.n	800b408 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b326:	4b8a      	ldr	r3, [pc, #552]	@ (800b550 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b32e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b332:	d107      	bne.n	800b344 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b334:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b338:	4618      	mov	r0, r3
 800b33a:	f000 fe07 	bl	800bf4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b33e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b340:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b342:	e338      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b344:	2300      	movs	r3, #0
 800b346:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b348:	e335      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b34a:	4b81      	ldr	r3, [pc, #516]	@ (800b550 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b352:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b356:	d107      	bne.n	800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b358:	f107 0318 	add.w	r3, r7, #24
 800b35c:	4618      	mov	r0, r3
 800b35e:	f000 fb4d 	bl	800b9fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b362:	69bb      	ldr	r3, [r7, #24]
 800b364:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b366:	e326      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b368:	2300      	movs	r3, #0
 800b36a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b36c:	e323      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b36e:	4b78      	ldr	r3, [pc, #480]	@ (800b550 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b376:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b37a:	d107      	bne.n	800b38c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b37c:	f107 030c 	add.w	r3, r7, #12
 800b380:	4618      	mov	r0, r3
 800b382:	f000 fc8f 	bl	800bca4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b38a:	e314      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b38c:	2300      	movs	r3, #0
 800b38e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b390:	e311      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b392:	4b6f      	ldr	r3, [pc, #444]	@ (800b550 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b396:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b39a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b39c:	4b6c      	ldr	r3, [pc, #432]	@ (800b550 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f003 0304 	and.w	r3, r3, #4
 800b3a4:	2b04      	cmp	r3, #4
 800b3a6:	d10c      	bne.n	800b3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800b3a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d109      	bne.n	800b3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b3ae:	4b68      	ldr	r3, [pc, #416]	@ (800b550 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	08db      	lsrs	r3, r3, #3
 800b3b4:	f003 0303 	and.w	r3, r3, #3
 800b3b8:	4a66      	ldr	r2, [pc, #408]	@ (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b3ba:	fa22 f303 	lsr.w	r3, r2, r3
 800b3be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3c0:	e01e      	b.n	800b400 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b3c2:	4b63      	ldr	r3, [pc, #396]	@ (800b550 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b3ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b3ce:	d106      	bne.n	800b3de <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800b3d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b3d6:	d102      	bne.n	800b3de <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b3d8:	4b5f      	ldr	r3, [pc, #380]	@ (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b3da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3dc:	e010      	b.n	800b400 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b3de:	4b5c      	ldr	r3, [pc, #368]	@ (800b550 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b3e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b3ea:	d106      	bne.n	800b3fa <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800b3ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b3f2:	d102      	bne.n	800b3fa <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b3f4:	4b59      	ldr	r3, [pc, #356]	@ (800b55c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b3f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3f8:	e002      	b.n	800b400 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b3fe:	e2da      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b400:	e2d9      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b402:	4b57      	ldr	r3, [pc, #348]	@ (800b560 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b404:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b406:	e2d6      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b408:	2300      	movs	r3, #0
 800b40a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b40c:	e2d3      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b40e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b412:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800b416:	430b      	orrs	r3, r1
 800b418:	f040 80a7 	bne.w	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b41c:	4b4c      	ldr	r3, [pc, #304]	@ (800b550 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b41e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b420:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b424:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b428:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b42c:	d055      	beq.n	800b4da <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800b42e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b430:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b434:	f200 8096 	bhi.w	800b564 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b43a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b43e:	f000 8084 	beq.w	800b54a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800b442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b444:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b448:	f200 808c 	bhi.w	800b564 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b44c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b44e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b452:	d030      	beq.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800b454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b456:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b45a:	f200 8083 	bhi.w	800b564 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b45e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b460:	2b00      	cmp	r3, #0
 800b462:	d004      	beq.n	800b46e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800b464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b466:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b46a:	d012      	beq.n	800b492 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800b46c:	e07a      	b.n	800b564 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b46e:	4b38      	ldr	r3, [pc, #224]	@ (800b550 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b476:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b47a:	d107      	bne.n	800b48c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b47c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b480:	4618      	mov	r0, r3
 800b482:	f000 fd63 	bl	800bf4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b488:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b48a:	e294      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b48c:	2300      	movs	r3, #0
 800b48e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b490:	e291      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b492:	4b2f      	ldr	r3, [pc, #188]	@ (800b550 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b49a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b49e:	d107      	bne.n	800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4a0:	f107 0318 	add.w	r3, r7, #24
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f000 faa9 	bl	800b9fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b4aa:	69bb      	ldr	r3, [r7, #24]
 800b4ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4ae:	e282      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4b4:	e27f      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b4b6:	4b26      	ldr	r3, [pc, #152]	@ (800b550 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b4be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b4c2:	d107      	bne.n	800b4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b4c4:	f107 030c 	add.w	r3, r7, #12
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f000 fbeb 	bl	800bca4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4d2:	e270      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4d8:	e26d      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b4da:	4b1d      	ldr	r3, [pc, #116]	@ (800b550 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b4dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b4de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b4e2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b4e4:	4b1a      	ldr	r3, [pc, #104]	@ (800b550 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f003 0304 	and.w	r3, r3, #4
 800b4ec:	2b04      	cmp	r3, #4
 800b4ee:	d10c      	bne.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800b4f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d109      	bne.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4f6:	4b16      	ldr	r3, [pc, #88]	@ (800b550 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	08db      	lsrs	r3, r3, #3
 800b4fc:	f003 0303 	and.w	r3, r3, #3
 800b500:	4a14      	ldr	r2, [pc, #80]	@ (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b502:	fa22 f303 	lsr.w	r3, r2, r3
 800b506:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b508:	e01e      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b50a:	4b11      	ldr	r3, [pc, #68]	@ (800b550 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b512:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b516:	d106      	bne.n	800b526 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800b518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b51a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b51e:	d102      	bne.n	800b526 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b520:	4b0d      	ldr	r3, [pc, #52]	@ (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b522:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b524:	e010      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b526:	4b0a      	ldr	r3, [pc, #40]	@ (800b550 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b52e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b532:	d106      	bne.n	800b542 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800b534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b536:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b53a:	d102      	bne.n	800b542 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b53c:	4b07      	ldr	r3, [pc, #28]	@ (800b55c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b53e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b540:	e002      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b542:	2300      	movs	r3, #0
 800b544:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b546:	e236      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b548:	e235      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b54a:	4b05      	ldr	r3, [pc, #20]	@ (800b560 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b54c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b54e:	e232      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b550:	58024400 	.word	0x58024400
 800b554:	03d09000 	.word	0x03d09000
 800b558:	003d0900 	.word	0x003d0900
 800b55c:	017d7840 	.word	0x017d7840
 800b560:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800b564:	2300      	movs	r3, #0
 800b566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b568:	e225      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b56a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b56e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800b572:	430b      	orrs	r3, r1
 800b574:	f040 8085 	bne.w	800b682 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b578:	4b9c      	ldr	r3, [pc, #624]	@ (800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b57a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b57c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b580:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800b582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b584:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b588:	d06b      	beq.n	800b662 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800b58a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b58c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b590:	d874      	bhi.n	800b67c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b594:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b598:	d056      	beq.n	800b648 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800b59a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b59c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b5a0:	d86c      	bhi.n	800b67c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b5a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5a4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b5a8:	d03b      	beq.n	800b622 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800b5aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5ac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b5b0:	d864      	bhi.n	800b67c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b5b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b5b8:	d021      	beq.n	800b5fe <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800b5ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b5c0:	d85c      	bhi.n	800b67c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b5c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d004      	beq.n	800b5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800b5c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b5ce:	d004      	beq.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800b5d0:	e054      	b.n	800b67c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b5d2:	f7fe fb1d 	bl	8009c10 <HAL_RCC_GetPCLK1Freq>
 800b5d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b5d8:	e1ed      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b5da:	4b84      	ldr	r3, [pc, #528]	@ (800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b5e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b5e6:	d107      	bne.n	800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5e8:	f107 0318 	add.w	r3, r7, #24
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f000 fa05 	bl	800b9fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b5f2:	69fb      	ldr	r3, [r7, #28]
 800b5f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5f6:	e1de      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5fc:	e1db      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b5fe:	4b7b      	ldr	r3, [pc, #492]	@ (800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b606:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b60a:	d107      	bne.n	800b61c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b60c:	f107 030c 	add.w	r3, r7, #12
 800b610:	4618      	mov	r0, r3
 800b612:	f000 fb47 	bl	800bca4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b61a:	e1cc      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b61c:	2300      	movs	r3, #0
 800b61e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b620:	e1c9      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b622:	4b72      	ldr	r3, [pc, #456]	@ (800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f003 0304 	and.w	r3, r3, #4
 800b62a:	2b04      	cmp	r3, #4
 800b62c:	d109      	bne.n	800b642 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b62e:	4b6f      	ldr	r3, [pc, #444]	@ (800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	08db      	lsrs	r3, r3, #3
 800b634:	f003 0303 	and.w	r3, r3, #3
 800b638:	4a6d      	ldr	r2, [pc, #436]	@ (800b7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b63a:	fa22 f303 	lsr.w	r3, r2, r3
 800b63e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b640:	e1b9      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b642:	2300      	movs	r3, #0
 800b644:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b646:	e1b6      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b648:	4b68      	ldr	r3, [pc, #416]	@ (800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b650:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b654:	d102      	bne.n	800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800b656:	4b67      	ldr	r3, [pc, #412]	@ (800b7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b658:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b65a:	e1ac      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b65c:	2300      	movs	r3, #0
 800b65e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b660:	e1a9      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b662:	4b62      	ldr	r3, [pc, #392]	@ (800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b66a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b66e:	d102      	bne.n	800b676 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800b670:	4b61      	ldr	r3, [pc, #388]	@ (800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b674:	e19f      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b676:	2300      	movs	r3, #0
 800b678:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b67a:	e19c      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b67c:	2300      	movs	r3, #0
 800b67e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b680:	e199      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b682:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b686:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800b68a:	430b      	orrs	r3, r1
 800b68c:	d173      	bne.n	800b776 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b68e:	4b57      	ldr	r3, [pc, #348]	@ (800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b692:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b696:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b69a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b69e:	d02f      	beq.n	800b700 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800b6a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b6a6:	d863      	bhi.n	800b770 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800b6a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d004      	beq.n	800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800b6ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b6b4:	d012      	beq.n	800b6dc <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800b6b6:	e05b      	b.n	800b770 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b6b8:	4b4c      	ldr	r3, [pc, #304]	@ (800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b6c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b6c4:	d107      	bne.n	800b6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6c6:	f107 0318 	add.w	r3, r7, #24
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f000 f996 	bl	800b9fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b6d0:	69bb      	ldr	r3, [r7, #24]
 800b6d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6d4:	e16f      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6da:	e16c      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b6dc:	4b43      	ldr	r3, [pc, #268]	@ (800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b6e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b6e8:	d107      	bne.n	800b6fa <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b6ea:	f107 030c 	add.w	r3, r7, #12
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f000 fad8 	bl	800bca4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6f8:	e15d      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6fe:	e15a      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b700:	4b3a      	ldr	r3, [pc, #232]	@ (800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b704:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b708:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b70a:	4b38      	ldr	r3, [pc, #224]	@ (800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f003 0304 	and.w	r3, r3, #4
 800b712:	2b04      	cmp	r3, #4
 800b714:	d10c      	bne.n	800b730 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800b716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d109      	bne.n	800b730 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b71c:	4b33      	ldr	r3, [pc, #204]	@ (800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	08db      	lsrs	r3, r3, #3
 800b722:	f003 0303 	and.w	r3, r3, #3
 800b726:	4a32      	ldr	r2, [pc, #200]	@ (800b7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b728:	fa22 f303 	lsr.w	r3, r2, r3
 800b72c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b72e:	e01e      	b.n	800b76e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b730:	4b2e      	ldr	r3, [pc, #184]	@ (800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b738:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b73c:	d106      	bne.n	800b74c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800b73e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b740:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b744:	d102      	bne.n	800b74c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b746:	4b2b      	ldr	r3, [pc, #172]	@ (800b7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b748:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b74a:	e010      	b.n	800b76e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b74c:	4b27      	ldr	r3, [pc, #156]	@ (800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b754:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b758:	d106      	bne.n	800b768 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800b75a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b75c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b760:	d102      	bne.n	800b768 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b762:	4b25      	ldr	r3, [pc, #148]	@ (800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b764:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b766:	e002      	b.n	800b76e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b768:	2300      	movs	r3, #0
 800b76a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b76c:	e123      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b76e:	e122      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b770:	2300      	movs	r3, #0
 800b772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b774:	e11f      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b776:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b77a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800b77e:	430b      	orrs	r3, r1
 800b780:	d13c      	bne.n	800b7fc <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b782:	4b1a      	ldr	r3, [pc, #104]	@ (800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b786:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b78a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b78c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d004      	beq.n	800b79c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800b792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b794:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b798:	d012      	beq.n	800b7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800b79a:	e023      	b.n	800b7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b79c:	4b13      	ldr	r3, [pc, #76]	@ (800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b7a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b7a8:	d107      	bne.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b7aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f000 fbcc 	bl	800bf4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b7b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7b8:	e0fd      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7be:	e0fa      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b7c0:	4b0a      	ldr	r3, [pc, #40]	@ (800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b7c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b7cc:	d107      	bne.n	800b7de <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7ce:	f107 0318 	add.w	r3, r7, #24
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	f000 f912 	bl	800b9fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b7d8:	6a3b      	ldr	r3, [r7, #32]
 800b7da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7dc:	e0eb      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7e2:	e0e8      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7e8:	e0e5      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b7ea:	bf00      	nop
 800b7ec:	58024400 	.word	0x58024400
 800b7f0:	03d09000 	.word	0x03d09000
 800b7f4:	003d0900 	.word	0x003d0900
 800b7f8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b7fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b800:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800b804:	430b      	orrs	r3, r1
 800b806:	f040 8085 	bne.w	800b914 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b80a:	4b6d      	ldr	r3, [pc, #436]	@ (800b9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b80c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b80e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800b812:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b816:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b81a:	d06b      	beq.n	800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800b81c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b81e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b822:	d874      	bhi.n	800b90e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b826:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b82a:	d056      	beq.n	800b8da <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800b82c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b82e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b832:	d86c      	bhi.n	800b90e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b836:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b83a:	d03b      	beq.n	800b8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800b83c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b83e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b842:	d864      	bhi.n	800b90e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b846:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b84a:	d021      	beq.n	800b890 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800b84c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b84e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b852:	d85c      	bhi.n	800b90e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b856:	2b00      	cmp	r3, #0
 800b858:	d004      	beq.n	800b864 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800b85a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b85c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b860:	d004      	beq.n	800b86c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800b862:	e054      	b.n	800b90e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b864:	f000 f8b4 	bl	800b9d0 <HAL_RCCEx_GetD3PCLK1Freq>
 800b868:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b86a:	e0a4      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b86c:	4b54      	ldr	r3, [pc, #336]	@ (800b9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b874:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b878:	d107      	bne.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b87a:	f107 0318 	add.w	r3, r7, #24
 800b87e:	4618      	mov	r0, r3
 800b880:	f000 f8bc 	bl	800b9fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b884:	69fb      	ldr	r3, [r7, #28]
 800b886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b888:	e095      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b88a:	2300      	movs	r3, #0
 800b88c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b88e:	e092      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b890:	4b4b      	ldr	r3, [pc, #300]	@ (800b9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b898:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b89c:	d107      	bne.n	800b8ae <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b89e:	f107 030c 	add.w	r3, r7, #12
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f000 f9fe 	bl	800bca4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b8a8:	693b      	ldr	r3, [r7, #16]
 800b8aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8ac:	e083      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8b2:	e080      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b8b4:	4b42      	ldr	r3, [pc, #264]	@ (800b9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f003 0304 	and.w	r3, r3, #4
 800b8bc:	2b04      	cmp	r3, #4
 800b8be:	d109      	bne.n	800b8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b8c0:	4b3f      	ldr	r3, [pc, #252]	@ (800b9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	08db      	lsrs	r3, r3, #3
 800b8c6:	f003 0303 	and.w	r3, r3, #3
 800b8ca:	4a3e      	ldr	r2, [pc, #248]	@ (800b9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800b8cc:	fa22 f303 	lsr.w	r3, r2, r3
 800b8d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8d2:	e070      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8d8:	e06d      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b8da:	4b39      	ldr	r3, [pc, #228]	@ (800b9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b8e6:	d102      	bne.n	800b8ee <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800b8e8:	4b37      	ldr	r3, [pc, #220]	@ (800b9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b8ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8ec:	e063      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8f2:	e060      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b8f4:	4b32      	ldr	r3, [pc, #200]	@ (800b9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b8fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b900:	d102      	bne.n	800b908 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800b902:	4b32      	ldr	r3, [pc, #200]	@ (800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b904:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b906:	e056      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b908:	2300      	movs	r3, #0
 800b90a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b90c:	e053      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b90e:	2300      	movs	r3, #0
 800b910:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b912:	e050      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b914:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b918:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800b91c:	430b      	orrs	r3, r1
 800b91e:	d148      	bne.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b920:	4b27      	ldr	r3, [pc, #156]	@ (800b9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b922:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b924:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b928:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b92a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b92c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b930:	d02a      	beq.n	800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800b932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b934:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b938:	d838      	bhi.n	800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800b93a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d004      	beq.n	800b94a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800b940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b942:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b946:	d00d      	beq.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800b948:	e030      	b.n	800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b94a:	4b1d      	ldr	r3, [pc, #116]	@ (800b9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b952:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b956:	d102      	bne.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800b958:	4b1c      	ldr	r3, [pc, #112]	@ (800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b95a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b95c:	e02b      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b95e:	2300      	movs	r3, #0
 800b960:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b962:	e028      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b964:	4b16      	ldr	r3, [pc, #88]	@ (800b9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b96c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b970:	d107      	bne.n	800b982 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b972:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b976:	4618      	mov	r0, r3
 800b978:	f000 fae8 	bl	800bf4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b97c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b97e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b980:	e019      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b982:	2300      	movs	r3, #0
 800b984:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b986:	e016      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b988:	4b0d      	ldr	r3, [pc, #52]	@ (800b9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b990:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b994:	d107      	bne.n	800b9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b996:	f107 0318 	add.w	r3, r7, #24
 800b99a:	4618      	mov	r0, r3
 800b99c:	f000 f82e 	bl	800b9fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b9a0:	69fb      	ldr	r3, [r7, #28]
 800b9a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9a4:	e007      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9aa:	e004      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9b0:	e001      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800b9b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3740      	adds	r7, #64	@ 0x40
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}
 800b9c0:	58024400 	.word	0x58024400
 800b9c4:	03d09000 	.word	0x03d09000
 800b9c8:	003d0900 	.word	0x003d0900
 800b9cc:	017d7840 	.word	0x017d7840

0800b9d0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b9d4:	f7fe f8ec 	bl	8009bb0 <HAL_RCC_GetHCLKFreq>
 800b9d8:	4602      	mov	r2, r0
 800b9da:	4b06      	ldr	r3, [pc, #24]	@ (800b9f4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b9dc:	6a1b      	ldr	r3, [r3, #32]
 800b9de:	091b      	lsrs	r3, r3, #4
 800b9e0:	f003 0307 	and.w	r3, r3, #7
 800b9e4:	4904      	ldr	r1, [pc, #16]	@ (800b9f8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b9e6:	5ccb      	ldrb	r3, [r1, r3]
 800b9e8:	f003 031f 	and.w	r3, r3, #31
 800b9ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	bd80      	pop	{r7, pc}
 800b9f4:	58024400 	.word	0x58024400
 800b9f8:	0802bef4 	.word	0x0802bef4

0800b9fc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b089      	sub	sp, #36	@ 0x24
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ba04:	4ba1      	ldr	r3, [pc, #644]	@ (800bc8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba08:	f003 0303 	and.w	r3, r3, #3
 800ba0c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ba0e:	4b9f      	ldr	r3, [pc, #636]	@ (800bc8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba12:	0b1b      	lsrs	r3, r3, #12
 800ba14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ba18:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ba1a:	4b9c      	ldr	r3, [pc, #624]	@ (800bc8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba1e:	091b      	lsrs	r3, r3, #4
 800ba20:	f003 0301 	and.w	r3, r3, #1
 800ba24:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ba26:	4b99      	ldr	r3, [pc, #612]	@ (800bc8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba2a:	08db      	lsrs	r3, r3, #3
 800ba2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ba30:	693a      	ldr	r2, [r7, #16]
 800ba32:	fb02 f303 	mul.w	r3, r2, r3
 800ba36:	ee07 3a90 	vmov	s15, r3
 800ba3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba3e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	f000 8111 	beq.w	800bc6c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ba4a:	69bb      	ldr	r3, [r7, #24]
 800ba4c:	2b02      	cmp	r3, #2
 800ba4e:	f000 8083 	beq.w	800bb58 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ba52:	69bb      	ldr	r3, [r7, #24]
 800ba54:	2b02      	cmp	r3, #2
 800ba56:	f200 80a1 	bhi.w	800bb9c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ba5a:	69bb      	ldr	r3, [r7, #24]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d003      	beq.n	800ba68 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ba60:	69bb      	ldr	r3, [r7, #24]
 800ba62:	2b01      	cmp	r3, #1
 800ba64:	d056      	beq.n	800bb14 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ba66:	e099      	b.n	800bb9c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba68:	4b88      	ldr	r3, [pc, #544]	@ (800bc8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f003 0320 	and.w	r3, r3, #32
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d02d      	beq.n	800bad0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ba74:	4b85      	ldr	r3, [pc, #532]	@ (800bc8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	08db      	lsrs	r3, r3, #3
 800ba7a:	f003 0303 	and.w	r3, r3, #3
 800ba7e:	4a84      	ldr	r2, [pc, #528]	@ (800bc90 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ba80:	fa22 f303 	lsr.w	r3, r2, r3
 800ba84:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	ee07 3a90 	vmov	s15, r3
 800ba8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	ee07 3a90 	vmov	s15, r3
 800ba96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba9e:	4b7b      	ldr	r3, [pc, #492]	@ (800bc8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800baa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800baa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800baa6:	ee07 3a90 	vmov	s15, r3
 800baaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800baae:	ed97 6a03 	vldr	s12, [r7, #12]
 800bab2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bc94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800baba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800babe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800baca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bace:	e087      	b.n	800bbe0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	ee07 3a90 	vmov	s15, r3
 800bad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bada:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bc98 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bae2:	4b6a      	ldr	r3, [pc, #424]	@ (800bc8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800baea:	ee07 3a90 	vmov	s15, r3
 800baee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800baf2:	ed97 6a03 	vldr	s12, [r7, #12]
 800baf6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800bc94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bafa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bafe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb12:	e065      	b.n	800bbe0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	ee07 3a90 	vmov	s15, r3
 800bb1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb1e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bc9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bb22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb26:	4b59      	ldr	r3, [pc, #356]	@ (800bc8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb2e:	ee07 3a90 	vmov	s15, r3
 800bb32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb36:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb3a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800bc94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bb3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb56:	e043      	b.n	800bbe0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	ee07 3a90 	vmov	s15, r3
 800bb5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb62:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bb66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb6a:	4b48      	ldr	r3, [pc, #288]	@ (800bc8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb72:	ee07 3a90 	vmov	s15, r3
 800bb76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb7a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb7e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800bc94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bb82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb9a:	e021      	b.n	800bbe0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb9c:	697b      	ldr	r3, [r7, #20]
 800bb9e:	ee07 3a90 	vmov	s15, r3
 800bba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bba6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bc9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bbaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbae:	4b37      	ldr	r3, [pc, #220]	@ (800bc8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbb6:	ee07 3a90 	vmov	s15, r3
 800bbba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbbe:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbc2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bc94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bbc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bbd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbde:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bbe0:	4b2a      	ldr	r3, [pc, #168]	@ (800bc8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbe4:	0a5b      	lsrs	r3, r3, #9
 800bbe6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bbea:	ee07 3a90 	vmov	s15, r3
 800bbee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbf2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bbf6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bbfa:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc06:	ee17 2a90 	vmov	r2, s15
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bc0e:	4b1f      	ldr	r3, [pc, #124]	@ (800bc8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc12:	0c1b      	lsrs	r3, r3, #16
 800bc14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc18:	ee07 3a90 	vmov	s15, r3
 800bc1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc20:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bc24:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc28:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc34:	ee17 2a90 	vmov	r2, s15
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800bc3c:	4b13      	ldr	r3, [pc, #76]	@ (800bc8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc40:	0e1b      	lsrs	r3, r3, #24
 800bc42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc46:	ee07 3a90 	vmov	s15, r3
 800bc4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bc52:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc56:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc62:	ee17 2a90 	vmov	r2, s15
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bc6a:	e008      	b.n	800bc7e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2200      	movs	r2, #0
 800bc76:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	609a      	str	r2, [r3, #8]
}
 800bc7e:	bf00      	nop
 800bc80:	3724      	adds	r7, #36	@ 0x24
 800bc82:	46bd      	mov	sp, r7
 800bc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc88:	4770      	bx	lr
 800bc8a:	bf00      	nop
 800bc8c:	58024400 	.word	0x58024400
 800bc90:	03d09000 	.word	0x03d09000
 800bc94:	46000000 	.word	0x46000000
 800bc98:	4c742400 	.word	0x4c742400
 800bc9c:	4a742400 	.word	0x4a742400
 800bca0:	4bbebc20 	.word	0x4bbebc20

0800bca4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b089      	sub	sp, #36	@ 0x24
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bcac:	4ba1      	ldr	r3, [pc, #644]	@ (800bf34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bcae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcb0:	f003 0303 	and.w	r3, r3, #3
 800bcb4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800bcb6:	4b9f      	ldr	r3, [pc, #636]	@ (800bf34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bcb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcba:	0d1b      	lsrs	r3, r3, #20
 800bcbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bcc0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bcc2:	4b9c      	ldr	r3, [pc, #624]	@ (800bf34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bcc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcc6:	0a1b      	lsrs	r3, r3, #8
 800bcc8:	f003 0301 	and.w	r3, r3, #1
 800bccc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bcce:	4b99      	ldr	r3, [pc, #612]	@ (800bf34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bcd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bcd2:	08db      	lsrs	r3, r3, #3
 800bcd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bcd8:	693a      	ldr	r2, [r7, #16]
 800bcda:	fb02 f303 	mul.w	r3, r2, r3
 800bcde:	ee07 3a90 	vmov	s15, r3
 800bce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bce6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	f000 8111 	beq.w	800bf14 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bcf2:	69bb      	ldr	r3, [r7, #24]
 800bcf4:	2b02      	cmp	r3, #2
 800bcf6:	f000 8083 	beq.w	800be00 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bcfa:	69bb      	ldr	r3, [r7, #24]
 800bcfc:	2b02      	cmp	r3, #2
 800bcfe:	f200 80a1 	bhi.w	800be44 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bd02:	69bb      	ldr	r3, [r7, #24]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d003      	beq.n	800bd10 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bd08:	69bb      	ldr	r3, [r7, #24]
 800bd0a:	2b01      	cmp	r3, #1
 800bd0c:	d056      	beq.n	800bdbc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bd0e:	e099      	b.n	800be44 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bd10:	4b88      	ldr	r3, [pc, #544]	@ (800bf34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f003 0320 	and.w	r3, r3, #32
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d02d      	beq.n	800bd78 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bd1c:	4b85      	ldr	r3, [pc, #532]	@ (800bf34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	08db      	lsrs	r3, r3, #3
 800bd22:	f003 0303 	and.w	r3, r3, #3
 800bd26:	4a84      	ldr	r2, [pc, #528]	@ (800bf38 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bd28:	fa22 f303 	lsr.w	r3, r2, r3
 800bd2c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	ee07 3a90 	vmov	s15, r3
 800bd34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	ee07 3a90 	vmov	s15, r3
 800bd3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd46:	4b7b      	ldr	r3, [pc, #492]	@ (800bf34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd4e:	ee07 3a90 	vmov	s15, r3
 800bd52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd56:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd5a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bf3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bd5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd72:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bd76:	e087      	b.n	800be88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	ee07 3a90 	vmov	s15, r3
 800bd7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd82:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bf40 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bd86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd8a:	4b6a      	ldr	r3, [pc, #424]	@ (800bf34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd92:	ee07 3a90 	vmov	s15, r3
 800bd96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd9a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd9e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800bf3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bda2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bda6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bdae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bdba:	e065      	b.n	800be88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	ee07 3a90 	vmov	s15, r3
 800bdc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdc6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bf44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bdca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdce:	4b59      	ldr	r3, [pc, #356]	@ (800bf34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdd6:	ee07 3a90 	vmov	s15, r3
 800bdda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdde:	ed97 6a03 	vldr	s12, [r7, #12]
 800bde2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800bf3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bde6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bdf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bdfe:	e043      	b.n	800be88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	ee07 3a90 	vmov	s15, r3
 800be06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be0a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bf48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800be0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be12:	4b48      	ldr	r3, [pc, #288]	@ (800bf34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be1a:	ee07 3a90 	vmov	s15, r3
 800be1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be22:	ed97 6a03 	vldr	s12, [r7, #12]
 800be26:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800bf3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800be2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be42:	e021      	b.n	800be88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	ee07 3a90 	vmov	s15, r3
 800be4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be4e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bf44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800be52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be56:	4b37      	ldr	r3, [pc, #220]	@ (800bf34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be5e:	ee07 3a90 	vmov	s15, r3
 800be62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be66:	ed97 6a03 	vldr	s12, [r7, #12]
 800be6a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bf3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800be6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be86:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800be88:	4b2a      	ldr	r3, [pc, #168]	@ (800bf34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be8c:	0a5b      	lsrs	r3, r3, #9
 800be8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be92:	ee07 3a90 	vmov	s15, r3
 800be96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800be9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bea2:	edd7 6a07 	vldr	s13, [r7, #28]
 800bea6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800beaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800beae:	ee17 2a90 	vmov	r2, s15
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800beb6:	4b1f      	ldr	r3, [pc, #124]	@ (800bf34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800beb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800beba:	0c1b      	lsrs	r3, r3, #16
 800bebc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bec0:	ee07 3a90 	vmov	s15, r3
 800bec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bec8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800becc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bed0:	edd7 6a07 	vldr	s13, [r7, #28]
 800bed4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bed8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bedc:	ee17 2a90 	vmov	r2, s15
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800bee4:	4b13      	ldr	r3, [pc, #76]	@ (800bf34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bee8:	0e1b      	lsrs	r3, r3, #24
 800beea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800beee:	ee07 3a90 	vmov	s15, r3
 800bef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bef6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800befa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800befe:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf0a:	ee17 2a90 	vmov	r2, s15
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bf12:	e008      	b.n	800bf26 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2200      	movs	r2, #0
 800bf18:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2200      	movs	r2, #0
 800bf24:	609a      	str	r2, [r3, #8]
}
 800bf26:	bf00      	nop
 800bf28:	3724      	adds	r7, #36	@ 0x24
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf30:	4770      	bx	lr
 800bf32:	bf00      	nop
 800bf34:	58024400 	.word	0x58024400
 800bf38:	03d09000 	.word	0x03d09000
 800bf3c:	46000000 	.word	0x46000000
 800bf40:	4c742400 	.word	0x4c742400
 800bf44:	4a742400 	.word	0x4a742400
 800bf48:	4bbebc20 	.word	0x4bbebc20

0800bf4c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b089      	sub	sp, #36	@ 0x24
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bf54:	4ba0      	ldr	r3, [pc, #640]	@ (800c1d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf58:	f003 0303 	and.w	r3, r3, #3
 800bf5c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800bf5e:	4b9e      	ldr	r3, [pc, #632]	@ (800c1d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf62:	091b      	lsrs	r3, r3, #4
 800bf64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bf68:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bf6a:	4b9b      	ldr	r3, [pc, #620]	@ (800c1d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf6e:	f003 0301 	and.w	r3, r3, #1
 800bf72:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bf74:	4b98      	ldr	r3, [pc, #608]	@ (800c1d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf78:	08db      	lsrs	r3, r3, #3
 800bf7a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bf7e:	693a      	ldr	r2, [r7, #16]
 800bf80:	fb02 f303 	mul.w	r3, r2, r3
 800bf84:	ee07 3a90 	vmov	s15, r3
 800bf88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf8c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bf90:	697b      	ldr	r3, [r7, #20]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	f000 8111 	beq.w	800c1ba <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800bf98:	69bb      	ldr	r3, [r7, #24]
 800bf9a:	2b02      	cmp	r3, #2
 800bf9c:	f000 8083 	beq.w	800c0a6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800bfa0:	69bb      	ldr	r3, [r7, #24]
 800bfa2:	2b02      	cmp	r3, #2
 800bfa4:	f200 80a1 	bhi.w	800c0ea <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800bfa8:	69bb      	ldr	r3, [r7, #24]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d003      	beq.n	800bfb6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800bfae:	69bb      	ldr	r3, [r7, #24]
 800bfb0:	2b01      	cmp	r3, #1
 800bfb2:	d056      	beq.n	800c062 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800bfb4:	e099      	b.n	800c0ea <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bfb6:	4b88      	ldr	r3, [pc, #544]	@ (800c1d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f003 0320 	and.w	r3, r3, #32
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d02d      	beq.n	800c01e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bfc2:	4b85      	ldr	r3, [pc, #532]	@ (800c1d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	08db      	lsrs	r3, r3, #3
 800bfc8:	f003 0303 	and.w	r3, r3, #3
 800bfcc:	4a83      	ldr	r2, [pc, #524]	@ (800c1dc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800bfce:	fa22 f303 	lsr.w	r3, r2, r3
 800bfd2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	ee07 3a90 	vmov	s15, r3
 800bfda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfde:	697b      	ldr	r3, [r7, #20]
 800bfe0:	ee07 3a90 	vmov	s15, r3
 800bfe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfe8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfec:	4b7a      	ldr	r3, [pc, #488]	@ (800c1d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bfee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bff4:	ee07 3a90 	vmov	s15, r3
 800bff8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bffc:	ed97 6a03 	vldr	s12, [r7, #12]
 800c000:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800c1e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c004:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c008:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c00c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c010:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c014:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c018:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c01c:	e087      	b.n	800c12e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c01e:	697b      	ldr	r3, [r7, #20]
 800c020:	ee07 3a90 	vmov	s15, r3
 800c024:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c028:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800c1e4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c02c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c030:	4b69      	ldr	r3, [pc, #420]	@ (800c1d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c038:	ee07 3a90 	vmov	s15, r3
 800c03c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c040:	ed97 6a03 	vldr	s12, [r7, #12]
 800c044:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800c1e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c048:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c04c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c050:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c054:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c058:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c05c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c060:	e065      	b.n	800c12e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	ee07 3a90 	vmov	s15, r3
 800c068:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c06c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800c1e8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c070:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c074:	4b58      	ldr	r3, [pc, #352]	@ (800c1d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c078:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c07c:	ee07 3a90 	vmov	s15, r3
 800c080:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c084:	ed97 6a03 	vldr	s12, [r7, #12]
 800c088:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800c1e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c08c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c090:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c094:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c098:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c09c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c0a4:	e043      	b.n	800c12e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c0a6:	697b      	ldr	r3, [r7, #20]
 800c0a8:	ee07 3a90 	vmov	s15, r3
 800c0ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0b0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800c1ec <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c0b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0b8:	4b47      	ldr	r3, [pc, #284]	@ (800c1d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0c0:	ee07 3a90 	vmov	s15, r3
 800c0c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0c8:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0cc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800c1e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c0d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c0e8:	e021      	b.n	800c12e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	ee07 3a90 	vmov	s15, r3
 800c0f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0f4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800c1e4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c0f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0fc:	4b36      	ldr	r3, [pc, #216]	@ (800c1d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c104:	ee07 3a90 	vmov	s15, r3
 800c108:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c10c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c110:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800c1e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c114:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c118:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c11c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c120:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c124:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c128:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c12c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c12e:	4b2a      	ldr	r3, [pc, #168]	@ (800c1d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c132:	0a5b      	lsrs	r3, r3, #9
 800c134:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c138:	ee07 3a90 	vmov	s15, r3
 800c13c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c140:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c144:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c148:	edd7 6a07 	vldr	s13, [r7, #28]
 800c14c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c150:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c154:	ee17 2a90 	vmov	r2, s15
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c15c:	4b1e      	ldr	r3, [pc, #120]	@ (800c1d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c15e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c160:	0c1b      	lsrs	r3, r3, #16
 800c162:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c166:	ee07 3a90 	vmov	s15, r3
 800c16a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c16e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c172:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c176:	edd7 6a07 	vldr	s13, [r7, #28]
 800c17a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c17e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c182:	ee17 2a90 	vmov	r2, s15
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c18a:	4b13      	ldr	r3, [pc, #76]	@ (800c1d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c18c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c18e:	0e1b      	lsrs	r3, r3, #24
 800c190:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c194:	ee07 3a90 	vmov	s15, r3
 800c198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c19c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c1a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c1a4:	edd7 6a07 	vldr	s13, [r7, #28]
 800c1a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1b0:	ee17 2a90 	vmov	r2, s15
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c1b8:	e008      	b.n	800c1cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2200      	movs	r2, #0
 800c1be:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	609a      	str	r2, [r3, #8]
}
 800c1cc:	bf00      	nop
 800c1ce:	3724      	adds	r7, #36	@ 0x24
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d6:	4770      	bx	lr
 800c1d8:	58024400 	.word	0x58024400
 800c1dc:	03d09000 	.word	0x03d09000
 800c1e0:	46000000 	.word	0x46000000
 800c1e4:	4c742400 	.word	0x4c742400
 800c1e8:	4a742400 	.word	0x4a742400
 800c1ec:	4bbebc20 	.word	0x4bbebc20

0800c1f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b084      	sub	sp, #16
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
 800c1f8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c1fe:	4b53      	ldr	r3, [pc, #332]	@ (800c34c <RCCEx_PLL2_Config+0x15c>)
 800c200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c202:	f003 0303 	and.w	r3, r3, #3
 800c206:	2b03      	cmp	r3, #3
 800c208:	d101      	bne.n	800c20e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c20a:	2301      	movs	r3, #1
 800c20c:	e099      	b.n	800c342 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c20e:	4b4f      	ldr	r3, [pc, #316]	@ (800c34c <RCCEx_PLL2_Config+0x15c>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	4a4e      	ldr	r2, [pc, #312]	@ (800c34c <RCCEx_PLL2_Config+0x15c>)
 800c214:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c218:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c21a:	f7f8 f96f 	bl	80044fc <HAL_GetTick>
 800c21e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c220:	e008      	b.n	800c234 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c222:	f7f8 f96b 	bl	80044fc <HAL_GetTick>
 800c226:	4602      	mov	r2, r0
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	1ad3      	subs	r3, r2, r3
 800c22c:	2b02      	cmp	r3, #2
 800c22e:	d901      	bls.n	800c234 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c230:	2303      	movs	r3, #3
 800c232:	e086      	b.n	800c342 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c234:	4b45      	ldr	r3, [pc, #276]	@ (800c34c <RCCEx_PLL2_Config+0x15c>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d1f0      	bne.n	800c222 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c240:	4b42      	ldr	r3, [pc, #264]	@ (800c34c <RCCEx_PLL2_Config+0x15c>)
 800c242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c244:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	031b      	lsls	r3, r3, #12
 800c24e:	493f      	ldr	r1, [pc, #252]	@ (800c34c <RCCEx_PLL2_Config+0x15c>)
 800c250:	4313      	orrs	r3, r2
 800c252:	628b      	str	r3, [r1, #40]	@ 0x28
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	685b      	ldr	r3, [r3, #4]
 800c258:	3b01      	subs	r3, #1
 800c25a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	689b      	ldr	r3, [r3, #8]
 800c262:	3b01      	subs	r3, #1
 800c264:	025b      	lsls	r3, r3, #9
 800c266:	b29b      	uxth	r3, r3
 800c268:	431a      	orrs	r2, r3
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	68db      	ldr	r3, [r3, #12]
 800c26e:	3b01      	subs	r3, #1
 800c270:	041b      	lsls	r3, r3, #16
 800c272:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c276:	431a      	orrs	r2, r3
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	691b      	ldr	r3, [r3, #16]
 800c27c:	3b01      	subs	r3, #1
 800c27e:	061b      	lsls	r3, r3, #24
 800c280:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c284:	4931      	ldr	r1, [pc, #196]	@ (800c34c <RCCEx_PLL2_Config+0x15c>)
 800c286:	4313      	orrs	r3, r2
 800c288:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c28a:	4b30      	ldr	r3, [pc, #192]	@ (800c34c <RCCEx_PLL2_Config+0x15c>)
 800c28c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c28e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	695b      	ldr	r3, [r3, #20]
 800c296:	492d      	ldr	r1, [pc, #180]	@ (800c34c <RCCEx_PLL2_Config+0x15c>)
 800c298:	4313      	orrs	r3, r2
 800c29a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c29c:	4b2b      	ldr	r3, [pc, #172]	@ (800c34c <RCCEx_PLL2_Config+0x15c>)
 800c29e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2a0:	f023 0220 	bic.w	r2, r3, #32
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	699b      	ldr	r3, [r3, #24]
 800c2a8:	4928      	ldr	r1, [pc, #160]	@ (800c34c <RCCEx_PLL2_Config+0x15c>)
 800c2aa:	4313      	orrs	r3, r2
 800c2ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c2ae:	4b27      	ldr	r3, [pc, #156]	@ (800c34c <RCCEx_PLL2_Config+0x15c>)
 800c2b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2b2:	4a26      	ldr	r2, [pc, #152]	@ (800c34c <RCCEx_PLL2_Config+0x15c>)
 800c2b4:	f023 0310 	bic.w	r3, r3, #16
 800c2b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c2ba:	4b24      	ldr	r3, [pc, #144]	@ (800c34c <RCCEx_PLL2_Config+0x15c>)
 800c2bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c2be:	4b24      	ldr	r3, [pc, #144]	@ (800c350 <RCCEx_PLL2_Config+0x160>)
 800c2c0:	4013      	ands	r3, r2
 800c2c2:	687a      	ldr	r2, [r7, #4]
 800c2c4:	69d2      	ldr	r2, [r2, #28]
 800c2c6:	00d2      	lsls	r2, r2, #3
 800c2c8:	4920      	ldr	r1, [pc, #128]	@ (800c34c <RCCEx_PLL2_Config+0x15c>)
 800c2ca:	4313      	orrs	r3, r2
 800c2cc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c2ce:	4b1f      	ldr	r3, [pc, #124]	@ (800c34c <RCCEx_PLL2_Config+0x15c>)
 800c2d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2d2:	4a1e      	ldr	r2, [pc, #120]	@ (800c34c <RCCEx_PLL2_Config+0x15c>)
 800c2d4:	f043 0310 	orr.w	r3, r3, #16
 800c2d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d106      	bne.n	800c2ee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c2e0:	4b1a      	ldr	r3, [pc, #104]	@ (800c34c <RCCEx_PLL2_Config+0x15c>)
 800c2e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2e4:	4a19      	ldr	r2, [pc, #100]	@ (800c34c <RCCEx_PLL2_Config+0x15c>)
 800c2e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c2ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c2ec:	e00f      	b.n	800c30e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	2b01      	cmp	r3, #1
 800c2f2:	d106      	bne.n	800c302 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c2f4:	4b15      	ldr	r3, [pc, #84]	@ (800c34c <RCCEx_PLL2_Config+0x15c>)
 800c2f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2f8:	4a14      	ldr	r2, [pc, #80]	@ (800c34c <RCCEx_PLL2_Config+0x15c>)
 800c2fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c2fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c300:	e005      	b.n	800c30e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c302:	4b12      	ldr	r3, [pc, #72]	@ (800c34c <RCCEx_PLL2_Config+0x15c>)
 800c304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c306:	4a11      	ldr	r2, [pc, #68]	@ (800c34c <RCCEx_PLL2_Config+0x15c>)
 800c308:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c30c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c30e:	4b0f      	ldr	r3, [pc, #60]	@ (800c34c <RCCEx_PLL2_Config+0x15c>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	4a0e      	ldr	r2, [pc, #56]	@ (800c34c <RCCEx_PLL2_Config+0x15c>)
 800c314:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c318:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c31a:	f7f8 f8ef 	bl	80044fc <HAL_GetTick>
 800c31e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c320:	e008      	b.n	800c334 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c322:	f7f8 f8eb 	bl	80044fc <HAL_GetTick>
 800c326:	4602      	mov	r2, r0
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	1ad3      	subs	r3, r2, r3
 800c32c:	2b02      	cmp	r3, #2
 800c32e:	d901      	bls.n	800c334 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c330:	2303      	movs	r3, #3
 800c332:	e006      	b.n	800c342 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c334:	4b05      	ldr	r3, [pc, #20]	@ (800c34c <RCCEx_PLL2_Config+0x15c>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d0f0      	beq.n	800c322 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c340:	7bfb      	ldrb	r3, [r7, #15]
}
 800c342:	4618      	mov	r0, r3
 800c344:	3710      	adds	r7, #16
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}
 800c34a:	bf00      	nop
 800c34c:	58024400 	.word	0x58024400
 800c350:	ffff0007 	.word	0xffff0007

0800c354 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b084      	sub	sp, #16
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
 800c35c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c35e:	2300      	movs	r3, #0
 800c360:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c362:	4b53      	ldr	r3, [pc, #332]	@ (800c4b0 <RCCEx_PLL3_Config+0x15c>)
 800c364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c366:	f003 0303 	and.w	r3, r3, #3
 800c36a:	2b03      	cmp	r3, #3
 800c36c:	d101      	bne.n	800c372 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c36e:	2301      	movs	r3, #1
 800c370:	e099      	b.n	800c4a6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c372:	4b4f      	ldr	r3, [pc, #316]	@ (800c4b0 <RCCEx_PLL3_Config+0x15c>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4a4e      	ldr	r2, [pc, #312]	@ (800c4b0 <RCCEx_PLL3_Config+0x15c>)
 800c378:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c37c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c37e:	f7f8 f8bd 	bl	80044fc <HAL_GetTick>
 800c382:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c384:	e008      	b.n	800c398 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c386:	f7f8 f8b9 	bl	80044fc <HAL_GetTick>
 800c38a:	4602      	mov	r2, r0
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	1ad3      	subs	r3, r2, r3
 800c390:	2b02      	cmp	r3, #2
 800c392:	d901      	bls.n	800c398 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c394:	2303      	movs	r3, #3
 800c396:	e086      	b.n	800c4a6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c398:	4b45      	ldr	r3, [pc, #276]	@ (800c4b0 <RCCEx_PLL3_Config+0x15c>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d1f0      	bne.n	800c386 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c3a4:	4b42      	ldr	r3, [pc, #264]	@ (800c4b0 <RCCEx_PLL3_Config+0x15c>)
 800c3a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3a8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	051b      	lsls	r3, r3, #20
 800c3b2:	493f      	ldr	r1, [pc, #252]	@ (800c4b0 <RCCEx_PLL3_Config+0x15c>)
 800c3b4:	4313      	orrs	r3, r2
 800c3b6:	628b      	str	r3, [r1, #40]	@ 0x28
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	685b      	ldr	r3, [r3, #4]
 800c3bc:	3b01      	subs	r3, #1
 800c3be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	689b      	ldr	r3, [r3, #8]
 800c3c6:	3b01      	subs	r3, #1
 800c3c8:	025b      	lsls	r3, r3, #9
 800c3ca:	b29b      	uxth	r3, r3
 800c3cc:	431a      	orrs	r2, r3
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	68db      	ldr	r3, [r3, #12]
 800c3d2:	3b01      	subs	r3, #1
 800c3d4:	041b      	lsls	r3, r3, #16
 800c3d6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c3da:	431a      	orrs	r2, r3
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	691b      	ldr	r3, [r3, #16]
 800c3e0:	3b01      	subs	r3, #1
 800c3e2:	061b      	lsls	r3, r3, #24
 800c3e4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c3e8:	4931      	ldr	r1, [pc, #196]	@ (800c4b0 <RCCEx_PLL3_Config+0x15c>)
 800c3ea:	4313      	orrs	r3, r2
 800c3ec:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c3ee:	4b30      	ldr	r3, [pc, #192]	@ (800c4b0 <RCCEx_PLL3_Config+0x15c>)
 800c3f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3f2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	695b      	ldr	r3, [r3, #20]
 800c3fa:	492d      	ldr	r1, [pc, #180]	@ (800c4b0 <RCCEx_PLL3_Config+0x15c>)
 800c3fc:	4313      	orrs	r3, r2
 800c3fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c400:	4b2b      	ldr	r3, [pc, #172]	@ (800c4b0 <RCCEx_PLL3_Config+0x15c>)
 800c402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c404:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	699b      	ldr	r3, [r3, #24]
 800c40c:	4928      	ldr	r1, [pc, #160]	@ (800c4b0 <RCCEx_PLL3_Config+0x15c>)
 800c40e:	4313      	orrs	r3, r2
 800c410:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c412:	4b27      	ldr	r3, [pc, #156]	@ (800c4b0 <RCCEx_PLL3_Config+0x15c>)
 800c414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c416:	4a26      	ldr	r2, [pc, #152]	@ (800c4b0 <RCCEx_PLL3_Config+0x15c>)
 800c418:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c41c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c41e:	4b24      	ldr	r3, [pc, #144]	@ (800c4b0 <RCCEx_PLL3_Config+0x15c>)
 800c420:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c422:	4b24      	ldr	r3, [pc, #144]	@ (800c4b4 <RCCEx_PLL3_Config+0x160>)
 800c424:	4013      	ands	r3, r2
 800c426:	687a      	ldr	r2, [r7, #4]
 800c428:	69d2      	ldr	r2, [r2, #28]
 800c42a:	00d2      	lsls	r2, r2, #3
 800c42c:	4920      	ldr	r1, [pc, #128]	@ (800c4b0 <RCCEx_PLL3_Config+0x15c>)
 800c42e:	4313      	orrs	r3, r2
 800c430:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c432:	4b1f      	ldr	r3, [pc, #124]	@ (800c4b0 <RCCEx_PLL3_Config+0x15c>)
 800c434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c436:	4a1e      	ldr	r2, [pc, #120]	@ (800c4b0 <RCCEx_PLL3_Config+0x15c>)
 800c438:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c43c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d106      	bne.n	800c452 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c444:	4b1a      	ldr	r3, [pc, #104]	@ (800c4b0 <RCCEx_PLL3_Config+0x15c>)
 800c446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c448:	4a19      	ldr	r2, [pc, #100]	@ (800c4b0 <RCCEx_PLL3_Config+0x15c>)
 800c44a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c44e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c450:	e00f      	b.n	800c472 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	2b01      	cmp	r3, #1
 800c456:	d106      	bne.n	800c466 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c458:	4b15      	ldr	r3, [pc, #84]	@ (800c4b0 <RCCEx_PLL3_Config+0x15c>)
 800c45a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c45c:	4a14      	ldr	r2, [pc, #80]	@ (800c4b0 <RCCEx_PLL3_Config+0x15c>)
 800c45e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c462:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c464:	e005      	b.n	800c472 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c466:	4b12      	ldr	r3, [pc, #72]	@ (800c4b0 <RCCEx_PLL3_Config+0x15c>)
 800c468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c46a:	4a11      	ldr	r2, [pc, #68]	@ (800c4b0 <RCCEx_PLL3_Config+0x15c>)
 800c46c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c470:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c472:	4b0f      	ldr	r3, [pc, #60]	@ (800c4b0 <RCCEx_PLL3_Config+0x15c>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	4a0e      	ldr	r2, [pc, #56]	@ (800c4b0 <RCCEx_PLL3_Config+0x15c>)
 800c478:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c47c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c47e:	f7f8 f83d 	bl	80044fc <HAL_GetTick>
 800c482:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c484:	e008      	b.n	800c498 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c486:	f7f8 f839 	bl	80044fc <HAL_GetTick>
 800c48a:	4602      	mov	r2, r0
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	1ad3      	subs	r3, r2, r3
 800c490:	2b02      	cmp	r3, #2
 800c492:	d901      	bls.n	800c498 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c494:	2303      	movs	r3, #3
 800c496:	e006      	b.n	800c4a6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c498:	4b05      	ldr	r3, [pc, #20]	@ (800c4b0 <RCCEx_PLL3_Config+0x15c>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d0f0      	beq.n	800c486 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c4a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3710      	adds	r7, #16
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}
 800c4ae:	bf00      	nop
 800c4b0:	58024400 	.word	0x58024400
 800c4b4:	ffff0007 	.word	0xffff0007

0800c4b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b082      	sub	sp, #8
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d101      	bne.n	800c4ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	e049      	b.n	800c55e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c4d0:	b2db      	uxtb	r3, r3
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d106      	bne.n	800c4e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f7f6 f93e 	bl	8002760 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2202      	movs	r2, #2
 800c4e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681a      	ldr	r2, [r3, #0]
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	3304      	adds	r3, #4
 800c4f4:	4619      	mov	r1, r3
 800c4f6:	4610      	mov	r0, r2
 800c4f8:	f000 fad4 	bl	800caa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2201      	movs	r2, #1
 800c500:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2201      	movs	r2, #1
 800c508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2201      	movs	r2, #1
 800c510:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2201      	movs	r2, #1
 800c518:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2201      	movs	r2, #1
 800c520:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2201      	movs	r2, #1
 800c528:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2201      	movs	r2, #1
 800c530:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2201      	movs	r2, #1
 800c538:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2201      	movs	r2, #1
 800c540:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2201      	movs	r2, #1
 800c548:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2201      	movs	r2, #1
 800c550:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2201      	movs	r2, #1
 800c558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c55c:	2300      	movs	r3, #0
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3708      	adds	r7, #8
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}
	...

0800c568 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c568:	b480      	push	{r7}
 800c56a:	b085      	sub	sp, #20
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c576:	b2db      	uxtb	r3, r3
 800c578:	2b01      	cmp	r3, #1
 800c57a:	d001      	beq.n	800c580 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c57c:	2301      	movs	r3, #1
 800c57e:	e05e      	b.n	800c63e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2202      	movs	r2, #2
 800c584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	68da      	ldr	r2, [r3, #12]
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f042 0201 	orr.w	r2, r2, #1
 800c596:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	4a2b      	ldr	r2, [pc, #172]	@ (800c64c <HAL_TIM_Base_Start_IT+0xe4>)
 800c59e:	4293      	cmp	r3, r2
 800c5a0:	d02c      	beq.n	800c5fc <HAL_TIM_Base_Start_IT+0x94>
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c5aa:	d027      	beq.n	800c5fc <HAL_TIM_Base_Start_IT+0x94>
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	4a27      	ldr	r2, [pc, #156]	@ (800c650 <HAL_TIM_Base_Start_IT+0xe8>)
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	d022      	beq.n	800c5fc <HAL_TIM_Base_Start_IT+0x94>
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	4a26      	ldr	r2, [pc, #152]	@ (800c654 <HAL_TIM_Base_Start_IT+0xec>)
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d01d      	beq.n	800c5fc <HAL_TIM_Base_Start_IT+0x94>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	4a24      	ldr	r2, [pc, #144]	@ (800c658 <HAL_TIM_Base_Start_IT+0xf0>)
 800c5c6:	4293      	cmp	r3, r2
 800c5c8:	d018      	beq.n	800c5fc <HAL_TIM_Base_Start_IT+0x94>
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	4a23      	ldr	r2, [pc, #140]	@ (800c65c <HAL_TIM_Base_Start_IT+0xf4>)
 800c5d0:	4293      	cmp	r3, r2
 800c5d2:	d013      	beq.n	800c5fc <HAL_TIM_Base_Start_IT+0x94>
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	4a21      	ldr	r2, [pc, #132]	@ (800c660 <HAL_TIM_Base_Start_IT+0xf8>)
 800c5da:	4293      	cmp	r3, r2
 800c5dc:	d00e      	beq.n	800c5fc <HAL_TIM_Base_Start_IT+0x94>
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	4a20      	ldr	r2, [pc, #128]	@ (800c664 <HAL_TIM_Base_Start_IT+0xfc>)
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	d009      	beq.n	800c5fc <HAL_TIM_Base_Start_IT+0x94>
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	4a1e      	ldr	r2, [pc, #120]	@ (800c668 <HAL_TIM_Base_Start_IT+0x100>)
 800c5ee:	4293      	cmp	r3, r2
 800c5f0:	d004      	beq.n	800c5fc <HAL_TIM_Base_Start_IT+0x94>
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	4a1d      	ldr	r2, [pc, #116]	@ (800c66c <HAL_TIM_Base_Start_IT+0x104>)
 800c5f8:	4293      	cmp	r3, r2
 800c5fa:	d115      	bne.n	800c628 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	689a      	ldr	r2, [r3, #8]
 800c602:	4b1b      	ldr	r3, [pc, #108]	@ (800c670 <HAL_TIM_Base_Start_IT+0x108>)
 800c604:	4013      	ands	r3, r2
 800c606:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	2b06      	cmp	r3, #6
 800c60c:	d015      	beq.n	800c63a <HAL_TIM_Base_Start_IT+0xd2>
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c614:	d011      	beq.n	800c63a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	681a      	ldr	r2, [r3, #0]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	f042 0201 	orr.w	r2, r2, #1
 800c624:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c626:	e008      	b.n	800c63a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	681a      	ldr	r2, [r3, #0]
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	f042 0201 	orr.w	r2, r2, #1
 800c636:	601a      	str	r2, [r3, #0]
 800c638:	e000      	b.n	800c63c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c63a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c63c:	2300      	movs	r3, #0
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3714      	adds	r7, #20
 800c642:	46bd      	mov	sp, r7
 800c644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c648:	4770      	bx	lr
 800c64a:	bf00      	nop
 800c64c:	40010000 	.word	0x40010000
 800c650:	40000400 	.word	0x40000400
 800c654:	40000800 	.word	0x40000800
 800c658:	40000c00 	.word	0x40000c00
 800c65c:	40010400 	.word	0x40010400
 800c660:	40001800 	.word	0x40001800
 800c664:	40014000 	.word	0x40014000
 800c668:	4000e000 	.word	0x4000e000
 800c66c:	4000e400 	.word	0x4000e400
 800c670:	00010007 	.word	0x00010007

0800c674 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b086      	sub	sp, #24
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
 800c67c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d101      	bne.n	800c688 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c684:	2301      	movs	r3, #1
 800c686:	e08f      	b.n	800c7a8 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c68e:	b2db      	uxtb	r3, r3
 800c690:	2b00      	cmp	r3, #0
 800c692:	d106      	bne.n	800c6a2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2200      	movs	r2, #0
 800c698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	f7f6 f881 	bl	80027a4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2202      	movs	r2, #2
 800c6a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	6899      	ldr	r1, [r3, #8]
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681a      	ldr	r2, [r3, #0]
 800c6b4:	4b3e      	ldr	r3, [pc, #248]	@ (800c7b0 <HAL_TIM_Encoder_Init+0x13c>)
 800c6b6:	400b      	ands	r3, r1
 800c6b8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681a      	ldr	r2, [r3, #0]
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	3304      	adds	r3, #4
 800c6c2:	4619      	mov	r1, r3
 800c6c4:	4610      	mov	r0, r2
 800c6c6:	f000 f9ed 	bl	800caa4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	689b      	ldr	r3, [r3, #8]
 800c6d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	699b      	ldr	r3, [r3, #24]
 800c6d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	6a1b      	ldr	r3, [r3, #32]
 800c6e0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	697a      	ldr	r2, [r7, #20]
 800c6e8:	4313      	orrs	r3, r2
 800c6ea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c6ec:	693a      	ldr	r2, [r7, #16]
 800c6ee:	4b31      	ldr	r3, [pc, #196]	@ (800c7b4 <HAL_TIM_Encoder_Init+0x140>)
 800c6f0:	4013      	ands	r3, r2
 800c6f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	689a      	ldr	r2, [r3, #8]
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	699b      	ldr	r3, [r3, #24]
 800c6fc:	021b      	lsls	r3, r3, #8
 800c6fe:	4313      	orrs	r3, r2
 800c700:	693a      	ldr	r2, [r7, #16]
 800c702:	4313      	orrs	r3, r2
 800c704:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c706:	693a      	ldr	r2, [r7, #16]
 800c708:	4b2b      	ldr	r3, [pc, #172]	@ (800c7b8 <HAL_TIM_Encoder_Init+0x144>)
 800c70a:	4013      	ands	r3, r2
 800c70c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c70e:	693a      	ldr	r2, [r7, #16]
 800c710:	4b2a      	ldr	r3, [pc, #168]	@ (800c7bc <HAL_TIM_Encoder_Init+0x148>)
 800c712:	4013      	ands	r3, r2
 800c714:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	68da      	ldr	r2, [r3, #12]
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	69db      	ldr	r3, [r3, #28]
 800c71e:	021b      	lsls	r3, r3, #8
 800c720:	4313      	orrs	r3, r2
 800c722:	693a      	ldr	r2, [r7, #16]
 800c724:	4313      	orrs	r3, r2
 800c726:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	691b      	ldr	r3, [r3, #16]
 800c72c:	011a      	lsls	r2, r3, #4
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	6a1b      	ldr	r3, [r3, #32]
 800c732:	031b      	lsls	r3, r3, #12
 800c734:	4313      	orrs	r3, r2
 800c736:	693a      	ldr	r2, [r7, #16]
 800c738:	4313      	orrs	r3, r2
 800c73a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800c742:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800c74a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	685a      	ldr	r2, [r3, #4]
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	695b      	ldr	r3, [r3, #20]
 800c754:	011b      	lsls	r3, r3, #4
 800c756:	4313      	orrs	r3, r2
 800c758:	68fa      	ldr	r2, [r7, #12]
 800c75a:	4313      	orrs	r3, r2
 800c75c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	697a      	ldr	r2, [r7, #20]
 800c764:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	693a      	ldr	r2, [r7, #16]
 800c76c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	68fa      	ldr	r2, [r7, #12]
 800c774:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	2201      	movs	r2, #1
 800c77a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2201      	movs	r2, #1
 800c782:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2201      	movs	r2, #1
 800c78a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2201      	movs	r2, #1
 800c792:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2201      	movs	r2, #1
 800c79a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2201      	movs	r2, #1
 800c7a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c7a6:	2300      	movs	r3, #0
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3718      	adds	r7, #24
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}
 800c7b0:	fffebff8 	.word	0xfffebff8
 800c7b4:	fffffcfc 	.word	0xfffffcfc
 800c7b8:	fffff3f3 	.word	0xfffff3f3
 800c7bc:	ffff0f0f 	.word	0xffff0f0f

0800c7c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b084      	sub	sp, #16
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	68db      	ldr	r3, [r3, #12]
 800c7ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	691b      	ldr	r3, [r3, #16]
 800c7d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	f003 0302 	and.w	r3, r3, #2
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d020      	beq.n	800c824 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	f003 0302 	and.w	r3, r3, #2
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d01b      	beq.n	800c824 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	f06f 0202 	mvn.w	r2, #2
 800c7f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	2201      	movs	r2, #1
 800c7fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	699b      	ldr	r3, [r3, #24]
 800c802:	f003 0303 	and.w	r3, r3, #3
 800c806:	2b00      	cmp	r3, #0
 800c808:	d003      	beq.n	800c812 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f000 f92b 	bl	800ca66 <HAL_TIM_IC_CaptureCallback>
 800c810:	e005      	b.n	800c81e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f000 f91d 	bl	800ca52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f000 f92e 	bl	800ca7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	2200      	movs	r2, #0
 800c822:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	f003 0304 	and.w	r3, r3, #4
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d020      	beq.n	800c870 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	f003 0304 	and.w	r3, r3, #4
 800c834:	2b00      	cmp	r3, #0
 800c836:	d01b      	beq.n	800c870 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f06f 0204 	mvn.w	r2, #4
 800c840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2202      	movs	r2, #2
 800c846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	699b      	ldr	r3, [r3, #24]
 800c84e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c852:	2b00      	cmp	r3, #0
 800c854:	d003      	beq.n	800c85e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	f000 f905 	bl	800ca66 <HAL_TIM_IC_CaptureCallback>
 800c85c:	e005      	b.n	800c86a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f000 f8f7 	bl	800ca52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	f000 f908 	bl	800ca7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2200      	movs	r2, #0
 800c86e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	f003 0308 	and.w	r3, r3, #8
 800c876:	2b00      	cmp	r3, #0
 800c878:	d020      	beq.n	800c8bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	f003 0308 	and.w	r3, r3, #8
 800c880:	2b00      	cmp	r3, #0
 800c882:	d01b      	beq.n	800c8bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	f06f 0208 	mvn.w	r2, #8
 800c88c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2204      	movs	r2, #4
 800c892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	69db      	ldr	r3, [r3, #28]
 800c89a:	f003 0303 	and.w	r3, r3, #3
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d003      	beq.n	800c8aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	f000 f8df 	bl	800ca66 <HAL_TIM_IC_CaptureCallback>
 800c8a8:	e005      	b.n	800c8b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f000 f8d1 	bl	800ca52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f000 f8e2 	bl	800ca7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	f003 0310 	and.w	r3, r3, #16
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d020      	beq.n	800c908 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	f003 0310 	and.w	r3, r3, #16
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d01b      	beq.n	800c908 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	f06f 0210 	mvn.w	r2, #16
 800c8d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2208      	movs	r2, #8
 800c8de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	69db      	ldr	r3, [r3, #28]
 800c8e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d003      	beq.n	800c8f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f000 f8b9 	bl	800ca66 <HAL_TIM_IC_CaptureCallback>
 800c8f4:	e005      	b.n	800c902 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	f000 f8ab 	bl	800ca52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f000 f8bc 	bl	800ca7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2200      	movs	r2, #0
 800c906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	f003 0301 	and.w	r3, r3, #1
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d00c      	beq.n	800c92c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	f003 0301 	and.w	r3, r3, #1
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d007      	beq.n	800c92c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	f06f 0201 	mvn.w	r2, #1
 800c924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f7f5 f86c 	bl	8001a04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c932:	2b00      	cmp	r3, #0
 800c934:	d104      	bne.n	800c940 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d00c      	beq.n	800c95a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c946:	2b00      	cmp	r3, #0
 800c948:	d007      	beq.n	800c95a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c952:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f000 fb67 	bl	800d028 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c960:	2b00      	cmp	r3, #0
 800c962:	d00c      	beq.n	800c97e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d007      	beq.n	800c97e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c976:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f000 fb5f 	bl	800d03c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c984:	2b00      	cmp	r3, #0
 800c986:	d00c      	beq.n	800c9a2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d007      	beq.n	800c9a2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c99a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f000 f876 	bl	800ca8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	f003 0320 	and.w	r3, r3, #32
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d00c      	beq.n	800c9c6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	f003 0320 	and.w	r3, r3, #32
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d007      	beq.n	800c9c6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	f06f 0220 	mvn.w	r2, #32
 800c9be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f000 fb27 	bl	800d014 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c9c6:	bf00      	nop
 800c9c8:	3710      	adds	r7, #16
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}

0800c9ce <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800c9ce:	b580      	push	{r7, lr}
 800c9d0:	b082      	sub	sp, #8
 800c9d2:	af00      	add	r7, sp, #0
 800c9d4:	6078      	str	r0, [r7, #4]
 800c9d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c9de:	2b01      	cmp	r3, #1
 800c9e0:	d101      	bne.n	800c9e6 <HAL_TIM_SlaveConfigSynchro+0x18>
 800c9e2:	2302      	movs	r3, #2
 800c9e4:	e031      	b.n	800ca4a <HAL_TIM_SlaveConfigSynchro+0x7c>
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2201      	movs	r2, #1
 800c9ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2202      	movs	r2, #2
 800c9f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800c9f6:	6839      	ldr	r1, [r7, #0]
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	f000 f905 	bl	800cc08 <TIM_SlaveTimer_SetConfig>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d009      	beq.n	800ca18 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2201      	movs	r2, #1
 800ca08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2200      	movs	r2, #0
 800ca10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800ca14:	2301      	movs	r3, #1
 800ca16:	e018      	b.n	800ca4a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	68da      	ldr	r2, [r3, #12]
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ca26:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	68da      	ldr	r2, [r3, #12]
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800ca36:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2201      	movs	r2, #1
 800ca3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2200      	movs	r2, #0
 800ca44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ca48:	2300      	movs	r3, #0
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	3708      	adds	r7, #8
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}

0800ca52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ca52:	b480      	push	{r7}
 800ca54:	b083      	sub	sp, #12
 800ca56:	af00      	add	r7, sp, #0
 800ca58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ca5a:	bf00      	nop
 800ca5c:	370c      	adds	r7, #12
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca64:	4770      	bx	lr

0800ca66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ca66:	b480      	push	{r7}
 800ca68:	b083      	sub	sp, #12
 800ca6a:	af00      	add	r7, sp, #0
 800ca6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ca6e:	bf00      	nop
 800ca70:	370c      	adds	r7, #12
 800ca72:	46bd      	mov	sp, r7
 800ca74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca78:	4770      	bx	lr

0800ca7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ca7a:	b480      	push	{r7}
 800ca7c:	b083      	sub	sp, #12
 800ca7e:	af00      	add	r7, sp, #0
 800ca80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ca82:	bf00      	nop
 800ca84:	370c      	adds	r7, #12
 800ca86:	46bd      	mov	sp, r7
 800ca88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8c:	4770      	bx	lr

0800ca8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ca8e:	b480      	push	{r7}
 800ca90:	b083      	sub	sp, #12
 800ca92:	af00      	add	r7, sp, #0
 800ca94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ca96:	bf00      	nop
 800ca98:	370c      	adds	r7, #12
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa0:	4770      	bx	lr
	...

0800caa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800caa4:	b480      	push	{r7}
 800caa6:	b085      	sub	sp, #20
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
 800caac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	4a4a      	ldr	r2, [pc, #296]	@ (800cbe0 <TIM_Base_SetConfig+0x13c>)
 800cab8:	4293      	cmp	r3, r2
 800caba:	d013      	beq.n	800cae4 <TIM_Base_SetConfig+0x40>
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cac2:	d00f      	beq.n	800cae4 <TIM_Base_SetConfig+0x40>
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	4a47      	ldr	r2, [pc, #284]	@ (800cbe4 <TIM_Base_SetConfig+0x140>)
 800cac8:	4293      	cmp	r3, r2
 800caca:	d00b      	beq.n	800cae4 <TIM_Base_SetConfig+0x40>
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	4a46      	ldr	r2, [pc, #280]	@ (800cbe8 <TIM_Base_SetConfig+0x144>)
 800cad0:	4293      	cmp	r3, r2
 800cad2:	d007      	beq.n	800cae4 <TIM_Base_SetConfig+0x40>
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	4a45      	ldr	r2, [pc, #276]	@ (800cbec <TIM_Base_SetConfig+0x148>)
 800cad8:	4293      	cmp	r3, r2
 800cada:	d003      	beq.n	800cae4 <TIM_Base_SetConfig+0x40>
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	4a44      	ldr	r2, [pc, #272]	@ (800cbf0 <TIM_Base_SetConfig+0x14c>)
 800cae0:	4293      	cmp	r3, r2
 800cae2:	d108      	bne.n	800caf6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800caea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	685b      	ldr	r3, [r3, #4]
 800caf0:	68fa      	ldr	r2, [r7, #12]
 800caf2:	4313      	orrs	r3, r2
 800caf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	4a39      	ldr	r2, [pc, #228]	@ (800cbe0 <TIM_Base_SetConfig+0x13c>)
 800cafa:	4293      	cmp	r3, r2
 800cafc:	d027      	beq.n	800cb4e <TIM_Base_SetConfig+0xaa>
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb04:	d023      	beq.n	800cb4e <TIM_Base_SetConfig+0xaa>
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	4a36      	ldr	r2, [pc, #216]	@ (800cbe4 <TIM_Base_SetConfig+0x140>)
 800cb0a:	4293      	cmp	r3, r2
 800cb0c:	d01f      	beq.n	800cb4e <TIM_Base_SetConfig+0xaa>
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	4a35      	ldr	r2, [pc, #212]	@ (800cbe8 <TIM_Base_SetConfig+0x144>)
 800cb12:	4293      	cmp	r3, r2
 800cb14:	d01b      	beq.n	800cb4e <TIM_Base_SetConfig+0xaa>
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	4a34      	ldr	r2, [pc, #208]	@ (800cbec <TIM_Base_SetConfig+0x148>)
 800cb1a:	4293      	cmp	r3, r2
 800cb1c:	d017      	beq.n	800cb4e <TIM_Base_SetConfig+0xaa>
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	4a33      	ldr	r2, [pc, #204]	@ (800cbf0 <TIM_Base_SetConfig+0x14c>)
 800cb22:	4293      	cmp	r3, r2
 800cb24:	d013      	beq.n	800cb4e <TIM_Base_SetConfig+0xaa>
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	4a32      	ldr	r2, [pc, #200]	@ (800cbf4 <TIM_Base_SetConfig+0x150>)
 800cb2a:	4293      	cmp	r3, r2
 800cb2c:	d00f      	beq.n	800cb4e <TIM_Base_SetConfig+0xaa>
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	4a31      	ldr	r2, [pc, #196]	@ (800cbf8 <TIM_Base_SetConfig+0x154>)
 800cb32:	4293      	cmp	r3, r2
 800cb34:	d00b      	beq.n	800cb4e <TIM_Base_SetConfig+0xaa>
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	4a30      	ldr	r2, [pc, #192]	@ (800cbfc <TIM_Base_SetConfig+0x158>)
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d007      	beq.n	800cb4e <TIM_Base_SetConfig+0xaa>
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	4a2f      	ldr	r2, [pc, #188]	@ (800cc00 <TIM_Base_SetConfig+0x15c>)
 800cb42:	4293      	cmp	r3, r2
 800cb44:	d003      	beq.n	800cb4e <TIM_Base_SetConfig+0xaa>
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	4a2e      	ldr	r2, [pc, #184]	@ (800cc04 <TIM_Base_SetConfig+0x160>)
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	d108      	bne.n	800cb60 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cb54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	68db      	ldr	r3, [r3, #12]
 800cb5a:	68fa      	ldr	r2, [r7, #12]
 800cb5c:	4313      	orrs	r3, r2
 800cb5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	695b      	ldr	r3, [r3, #20]
 800cb6a:	4313      	orrs	r3, r2
 800cb6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	68fa      	ldr	r2, [r7, #12]
 800cb72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	689a      	ldr	r2, [r3, #8]
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	681a      	ldr	r2, [r3, #0]
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	4a16      	ldr	r2, [pc, #88]	@ (800cbe0 <TIM_Base_SetConfig+0x13c>)
 800cb88:	4293      	cmp	r3, r2
 800cb8a:	d00f      	beq.n	800cbac <TIM_Base_SetConfig+0x108>
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	4a18      	ldr	r2, [pc, #96]	@ (800cbf0 <TIM_Base_SetConfig+0x14c>)
 800cb90:	4293      	cmp	r3, r2
 800cb92:	d00b      	beq.n	800cbac <TIM_Base_SetConfig+0x108>
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	4a17      	ldr	r2, [pc, #92]	@ (800cbf4 <TIM_Base_SetConfig+0x150>)
 800cb98:	4293      	cmp	r3, r2
 800cb9a:	d007      	beq.n	800cbac <TIM_Base_SetConfig+0x108>
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	4a16      	ldr	r2, [pc, #88]	@ (800cbf8 <TIM_Base_SetConfig+0x154>)
 800cba0:	4293      	cmp	r3, r2
 800cba2:	d003      	beq.n	800cbac <TIM_Base_SetConfig+0x108>
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	4a15      	ldr	r2, [pc, #84]	@ (800cbfc <TIM_Base_SetConfig+0x158>)
 800cba8:	4293      	cmp	r3, r2
 800cbaa:	d103      	bne.n	800cbb4 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	691a      	ldr	r2, [r3, #16]
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2201      	movs	r2, #1
 800cbb8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	691b      	ldr	r3, [r3, #16]
 800cbbe:	f003 0301 	and.w	r3, r3, #1
 800cbc2:	2b01      	cmp	r3, #1
 800cbc4:	d105      	bne.n	800cbd2 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	691b      	ldr	r3, [r3, #16]
 800cbca:	f023 0201 	bic.w	r2, r3, #1
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	611a      	str	r2, [r3, #16]
  }
}
 800cbd2:	bf00      	nop
 800cbd4:	3714      	adds	r7, #20
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbdc:	4770      	bx	lr
 800cbde:	bf00      	nop
 800cbe0:	40010000 	.word	0x40010000
 800cbe4:	40000400 	.word	0x40000400
 800cbe8:	40000800 	.word	0x40000800
 800cbec:	40000c00 	.word	0x40000c00
 800cbf0:	40010400 	.word	0x40010400
 800cbf4:	40014000 	.word	0x40014000
 800cbf8:	40014400 	.word	0x40014400
 800cbfc:	40014800 	.word	0x40014800
 800cc00:	4000e000 	.word	0x4000e000
 800cc04:	4000e400 	.word	0x4000e400

0800cc08 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b086      	sub	sp, #24
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
 800cc10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cc12:	2300      	movs	r3, #0
 800cc14:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	689b      	ldr	r3, [r3, #8]
 800cc1c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cc1e:	693a      	ldr	r2, [r7, #16]
 800cc20:	4b65      	ldr	r3, [pc, #404]	@ (800cdb8 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800cc22:	4013      	ands	r3, r2
 800cc24:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	685b      	ldr	r3, [r3, #4]
 800cc2a:	693a      	ldr	r2, [r7, #16]
 800cc2c:	4313      	orrs	r3, r2
 800cc2e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800cc30:	693a      	ldr	r2, [r7, #16]
 800cc32:	4b62      	ldr	r3, [pc, #392]	@ (800cdbc <TIM_SlaveTimer_SetConfig+0x1b4>)
 800cc34:	4013      	ands	r3, r2
 800cc36:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	693a      	ldr	r2, [r7, #16]
 800cc3e:	4313      	orrs	r3, r2
 800cc40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	693a      	ldr	r2, [r7, #16]
 800cc48:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	685b      	ldr	r3, [r3, #4]
 800cc4e:	4a5c      	ldr	r2, [pc, #368]	@ (800cdc0 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800cc50:	4293      	cmp	r3, r2
 800cc52:	f000 80ab 	beq.w	800cdac <TIM_SlaveTimer_SetConfig+0x1a4>
 800cc56:	4a5a      	ldr	r2, [pc, #360]	@ (800cdc0 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800cc58:	4293      	cmp	r3, r2
 800cc5a:	f200 80a4 	bhi.w	800cda6 <TIM_SlaveTimer_SetConfig+0x19e>
 800cc5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cc62:	f000 80a3 	beq.w	800cdac <TIM_SlaveTimer_SetConfig+0x1a4>
 800cc66:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cc6a:	f200 809c 	bhi.w	800cda6 <TIM_SlaveTimer_SetConfig+0x19e>
 800cc6e:	4a55      	ldr	r2, [pc, #340]	@ (800cdc4 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800cc70:	4293      	cmp	r3, r2
 800cc72:	f000 809b 	beq.w	800cdac <TIM_SlaveTimer_SetConfig+0x1a4>
 800cc76:	4a53      	ldr	r2, [pc, #332]	@ (800cdc4 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800cc78:	4293      	cmp	r3, r2
 800cc7a:	f200 8094 	bhi.w	800cda6 <TIM_SlaveTimer_SetConfig+0x19e>
 800cc7e:	4a52      	ldr	r2, [pc, #328]	@ (800cdc8 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800cc80:	4293      	cmp	r3, r2
 800cc82:	f000 8093 	beq.w	800cdac <TIM_SlaveTimer_SetConfig+0x1a4>
 800cc86:	4a50      	ldr	r2, [pc, #320]	@ (800cdc8 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800cc88:	4293      	cmp	r3, r2
 800cc8a:	f200 808c 	bhi.w	800cda6 <TIM_SlaveTimer_SetConfig+0x19e>
 800cc8e:	4a4f      	ldr	r2, [pc, #316]	@ (800cdcc <TIM_SlaveTimer_SetConfig+0x1c4>)
 800cc90:	4293      	cmp	r3, r2
 800cc92:	f000 808b 	beq.w	800cdac <TIM_SlaveTimer_SetConfig+0x1a4>
 800cc96:	4a4d      	ldr	r2, [pc, #308]	@ (800cdcc <TIM_SlaveTimer_SetConfig+0x1c4>)
 800cc98:	4293      	cmp	r3, r2
 800cc9a:	f200 8084 	bhi.w	800cda6 <TIM_SlaveTimer_SetConfig+0x19e>
 800cc9e:	4a4c      	ldr	r2, [pc, #304]	@ (800cdd0 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800cca0:	4293      	cmp	r3, r2
 800cca2:	f000 8083 	beq.w	800cdac <TIM_SlaveTimer_SetConfig+0x1a4>
 800cca6:	4a4a      	ldr	r2, [pc, #296]	@ (800cdd0 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800cca8:	4293      	cmp	r3, r2
 800ccaa:	d87c      	bhi.n	800cda6 <TIM_SlaveTimer_SetConfig+0x19e>
 800ccac:	4a49      	ldr	r2, [pc, #292]	@ (800cdd4 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	d07c      	beq.n	800cdac <TIM_SlaveTimer_SetConfig+0x1a4>
 800ccb2:	4a48      	ldr	r2, [pc, #288]	@ (800cdd4 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	d876      	bhi.n	800cda6 <TIM_SlaveTimer_SetConfig+0x19e>
 800ccb8:	4a47      	ldr	r2, [pc, #284]	@ (800cdd8 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800ccba:	4293      	cmp	r3, r2
 800ccbc:	d076      	beq.n	800cdac <TIM_SlaveTimer_SetConfig+0x1a4>
 800ccbe:	4a46      	ldr	r2, [pc, #280]	@ (800cdd8 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800ccc0:	4293      	cmp	r3, r2
 800ccc2:	d870      	bhi.n	800cda6 <TIM_SlaveTimer_SetConfig+0x19e>
 800ccc4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ccc8:	d070      	beq.n	800cdac <TIM_SlaveTimer_SetConfig+0x1a4>
 800ccca:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ccce:	d86a      	bhi.n	800cda6 <TIM_SlaveTimer_SetConfig+0x19e>
 800ccd0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ccd4:	d06a      	beq.n	800cdac <TIM_SlaveTimer_SetConfig+0x1a4>
 800ccd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ccda:	d864      	bhi.n	800cda6 <TIM_SlaveTimer_SetConfig+0x19e>
 800ccdc:	2b70      	cmp	r3, #112	@ 0x70
 800ccde:	d01a      	beq.n	800cd16 <TIM_SlaveTimer_SetConfig+0x10e>
 800cce0:	2b70      	cmp	r3, #112	@ 0x70
 800cce2:	d860      	bhi.n	800cda6 <TIM_SlaveTimer_SetConfig+0x19e>
 800cce4:	2b60      	cmp	r3, #96	@ 0x60
 800cce6:	d054      	beq.n	800cd92 <TIM_SlaveTimer_SetConfig+0x18a>
 800cce8:	2b60      	cmp	r3, #96	@ 0x60
 800ccea:	d85c      	bhi.n	800cda6 <TIM_SlaveTimer_SetConfig+0x19e>
 800ccec:	2b50      	cmp	r3, #80	@ 0x50
 800ccee:	d046      	beq.n	800cd7e <TIM_SlaveTimer_SetConfig+0x176>
 800ccf0:	2b50      	cmp	r3, #80	@ 0x50
 800ccf2:	d858      	bhi.n	800cda6 <TIM_SlaveTimer_SetConfig+0x19e>
 800ccf4:	2b40      	cmp	r3, #64	@ 0x40
 800ccf6:	d019      	beq.n	800cd2c <TIM_SlaveTimer_SetConfig+0x124>
 800ccf8:	2b40      	cmp	r3, #64	@ 0x40
 800ccfa:	d854      	bhi.n	800cda6 <TIM_SlaveTimer_SetConfig+0x19e>
 800ccfc:	2b30      	cmp	r3, #48	@ 0x30
 800ccfe:	d055      	beq.n	800cdac <TIM_SlaveTimer_SetConfig+0x1a4>
 800cd00:	2b30      	cmp	r3, #48	@ 0x30
 800cd02:	d850      	bhi.n	800cda6 <TIM_SlaveTimer_SetConfig+0x19e>
 800cd04:	2b20      	cmp	r3, #32
 800cd06:	d051      	beq.n	800cdac <TIM_SlaveTimer_SetConfig+0x1a4>
 800cd08:	2b20      	cmp	r3, #32
 800cd0a:	d84c      	bhi.n	800cda6 <TIM_SlaveTimer_SetConfig+0x19e>
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d04d      	beq.n	800cdac <TIM_SlaveTimer_SetConfig+0x1a4>
 800cd10:	2b10      	cmp	r3, #16
 800cd12:	d04b      	beq.n	800cdac <TIM_SlaveTimer_SetConfig+0x1a4>
 800cd14:	e047      	b.n	800cda6 <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800cd26:	f000 f8b8 	bl	800ce9a <TIM_ETR_SetConfig>
      break;
 800cd2a:	e040      	b.n	800cdae <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	2b05      	cmp	r3, #5
 800cd32:	d101      	bne.n	800cd38 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 800cd34:	2301      	movs	r3, #1
 800cd36:	e03b      	b.n	800cdb0 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	6a1b      	ldr	r3, [r3, #32]
 800cd3e:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	6a1a      	ldr	r2, [r3, #32]
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	f022 0201 	bic.w	r2, r2, #1
 800cd4e:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	699b      	ldr	r3, [r3, #24]
 800cd56:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cd5e:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	691b      	ldr	r3, [r3, #16]
 800cd64:	011b      	lsls	r3, r3, #4
 800cd66:	68ba      	ldr	r2, [r7, #8]
 800cd68:	4313      	orrs	r3, r2
 800cd6a:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	68ba      	ldr	r2, [r7, #8]
 800cd72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	68fa      	ldr	r2, [r7, #12]
 800cd7a:	621a      	str	r2, [r3, #32]
      break;
 800cd7c:	e017      	b.n	800cdae <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cd8a:	461a      	mov	r2, r3
 800cd8c:	f000 f826 	bl	800cddc <TIM_TI1_ConfigInputStage>
      break;
 800cd90:	e00d      	b.n	800cdae <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cd9e:	461a      	mov	r2, r3
 800cda0:	f000 f84b 	bl	800ce3a <TIM_TI2_ConfigInputStage>
      break;
 800cda4:	e003      	b.n	800cdae <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800cda6:	2301      	movs	r3, #1
 800cda8:	75fb      	strb	r3, [r7, #23]
      break;
 800cdaa:	e000      	b.n	800cdae <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 800cdac:	bf00      	nop
  }

  return status;
 800cdae:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	3718      	adds	r7, #24
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bd80      	pop	{r7, pc}
 800cdb8:	ffcfff8f 	.word	0xffcfff8f
 800cdbc:	fffefff8 	.word	0xfffefff8
 800cdc0:	00200010 	.word	0x00200010
 800cdc4:	00100070 	.word	0x00100070
 800cdc8:	00100060 	.word	0x00100060
 800cdcc:	00100050 	.word	0x00100050
 800cdd0:	00100040 	.word	0x00100040
 800cdd4:	00100030 	.word	0x00100030
 800cdd8:	00100020 	.word	0x00100020

0800cddc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cddc:	b480      	push	{r7}
 800cdde:	b087      	sub	sp, #28
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	60f8      	str	r0, [r7, #12]
 800cde4:	60b9      	str	r1, [r7, #8]
 800cde6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	6a1b      	ldr	r3, [r3, #32]
 800cdec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	6a1b      	ldr	r3, [r3, #32]
 800cdf2:	f023 0201 	bic.w	r2, r3, #1
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	699b      	ldr	r3, [r3, #24]
 800cdfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ce00:	693b      	ldr	r3, [r7, #16]
 800ce02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ce06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	011b      	lsls	r3, r3, #4
 800ce0c:	693a      	ldr	r2, [r7, #16]
 800ce0e:	4313      	orrs	r3, r2
 800ce10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	f023 030a 	bic.w	r3, r3, #10
 800ce18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ce1a:	697a      	ldr	r2, [r7, #20]
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	4313      	orrs	r3, r2
 800ce20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	693a      	ldr	r2, [r7, #16]
 800ce26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	697a      	ldr	r2, [r7, #20]
 800ce2c:	621a      	str	r2, [r3, #32]
}
 800ce2e:	bf00      	nop
 800ce30:	371c      	adds	r7, #28
 800ce32:	46bd      	mov	sp, r7
 800ce34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce38:	4770      	bx	lr

0800ce3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ce3a:	b480      	push	{r7}
 800ce3c:	b087      	sub	sp, #28
 800ce3e:	af00      	add	r7, sp, #0
 800ce40:	60f8      	str	r0, [r7, #12]
 800ce42:	60b9      	str	r1, [r7, #8]
 800ce44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	6a1b      	ldr	r3, [r3, #32]
 800ce4a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	6a1b      	ldr	r3, [r3, #32]
 800ce50:	f023 0210 	bic.w	r2, r3, #16
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	699b      	ldr	r3, [r3, #24]
 800ce5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ce64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	031b      	lsls	r3, r3, #12
 800ce6a:	693a      	ldr	r2, [r7, #16]
 800ce6c:	4313      	orrs	r3, r2
 800ce6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ce70:	697b      	ldr	r3, [r7, #20]
 800ce72:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ce76:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ce78:	68bb      	ldr	r3, [r7, #8]
 800ce7a:	011b      	lsls	r3, r3, #4
 800ce7c:	697a      	ldr	r2, [r7, #20]
 800ce7e:	4313      	orrs	r3, r2
 800ce80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	693a      	ldr	r2, [r7, #16]
 800ce86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	697a      	ldr	r2, [r7, #20]
 800ce8c:	621a      	str	r2, [r3, #32]
}
 800ce8e:	bf00      	nop
 800ce90:	371c      	adds	r7, #28
 800ce92:	46bd      	mov	sp, r7
 800ce94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce98:	4770      	bx	lr

0800ce9a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ce9a:	b480      	push	{r7}
 800ce9c:	b087      	sub	sp, #28
 800ce9e:	af00      	add	r7, sp, #0
 800cea0:	60f8      	str	r0, [r7, #12]
 800cea2:	60b9      	str	r1, [r7, #8]
 800cea4:	607a      	str	r2, [r7, #4]
 800cea6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	689b      	ldr	r3, [r3, #8]
 800ceac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ceb4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	021a      	lsls	r2, r3, #8
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	431a      	orrs	r2, r3
 800cebe:	68bb      	ldr	r3, [r7, #8]
 800cec0:	4313      	orrs	r3, r2
 800cec2:	697a      	ldr	r2, [r7, #20]
 800cec4:	4313      	orrs	r3, r2
 800cec6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	697a      	ldr	r2, [r7, #20]
 800cecc:	609a      	str	r2, [r3, #8]
}
 800cece:	bf00      	nop
 800ced0:	371c      	adds	r7, #28
 800ced2:	46bd      	mov	sp, r7
 800ced4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced8:	4770      	bx	lr
	...

0800cedc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cedc:	b480      	push	{r7}
 800cede:	b085      	sub	sp, #20
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
 800cee4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ceec:	2b01      	cmp	r3, #1
 800ceee:	d101      	bne.n	800cef4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cef0:	2302      	movs	r3, #2
 800cef2:	e077      	b.n	800cfe4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2201      	movs	r2, #1
 800cef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2202      	movs	r2, #2
 800cf00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	685b      	ldr	r3, [r3, #4]
 800cf0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	689b      	ldr	r3, [r3, #8]
 800cf12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	4a35      	ldr	r2, [pc, #212]	@ (800cff0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cf1a:	4293      	cmp	r3, r2
 800cf1c:	d004      	beq.n	800cf28 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	4a34      	ldr	r2, [pc, #208]	@ (800cff4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cf24:	4293      	cmp	r3, r2
 800cf26:	d108      	bne.n	800cf3a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800cf2e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	685b      	ldr	r3, [r3, #4]
 800cf34:	68fa      	ldr	r2, [r7, #12]
 800cf36:	4313      	orrs	r3, r2
 800cf38:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cf40:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	68fa      	ldr	r2, [r7, #12]
 800cf48:	4313      	orrs	r3, r2
 800cf4a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	68fa      	ldr	r2, [r7, #12]
 800cf52:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	4a25      	ldr	r2, [pc, #148]	@ (800cff0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	d02c      	beq.n	800cfb8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf66:	d027      	beq.n	800cfb8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	4a22      	ldr	r2, [pc, #136]	@ (800cff8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800cf6e:	4293      	cmp	r3, r2
 800cf70:	d022      	beq.n	800cfb8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	4a21      	ldr	r2, [pc, #132]	@ (800cffc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800cf78:	4293      	cmp	r3, r2
 800cf7a:	d01d      	beq.n	800cfb8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	4a1f      	ldr	r2, [pc, #124]	@ (800d000 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800cf82:	4293      	cmp	r3, r2
 800cf84:	d018      	beq.n	800cfb8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	4a1a      	ldr	r2, [pc, #104]	@ (800cff4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cf8c:	4293      	cmp	r3, r2
 800cf8e:	d013      	beq.n	800cfb8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	4a1b      	ldr	r2, [pc, #108]	@ (800d004 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800cf96:	4293      	cmp	r3, r2
 800cf98:	d00e      	beq.n	800cfb8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	4a1a      	ldr	r2, [pc, #104]	@ (800d008 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800cfa0:	4293      	cmp	r3, r2
 800cfa2:	d009      	beq.n	800cfb8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	4a18      	ldr	r2, [pc, #96]	@ (800d00c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800cfaa:	4293      	cmp	r3, r2
 800cfac:	d004      	beq.n	800cfb8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	4a17      	ldr	r2, [pc, #92]	@ (800d010 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800cfb4:	4293      	cmp	r3, r2
 800cfb6:	d10c      	bne.n	800cfd2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cfb8:	68bb      	ldr	r3, [r7, #8]
 800cfba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cfbe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	689b      	ldr	r3, [r3, #8]
 800cfc4:	68ba      	ldr	r2, [r7, #8]
 800cfc6:	4313      	orrs	r3, r2
 800cfc8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	68ba      	ldr	r2, [r7, #8]
 800cfd0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2201      	movs	r2, #1
 800cfd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2200      	movs	r2, #0
 800cfde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cfe2:	2300      	movs	r3, #0
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	3714      	adds	r7, #20
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfee:	4770      	bx	lr
 800cff0:	40010000 	.word	0x40010000
 800cff4:	40010400 	.word	0x40010400
 800cff8:	40000400 	.word	0x40000400
 800cffc:	40000800 	.word	0x40000800
 800d000:	40000c00 	.word	0x40000c00
 800d004:	40001800 	.word	0x40001800
 800d008:	40014000 	.word	0x40014000
 800d00c:	4000e000 	.word	0x4000e000
 800d010:	4000e400 	.word	0x4000e400

0800d014 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d014:	b480      	push	{r7}
 800d016:	b083      	sub	sp, #12
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d01c:	bf00      	nop
 800d01e:	370c      	adds	r7, #12
 800d020:	46bd      	mov	sp, r7
 800d022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d026:	4770      	bx	lr

0800d028 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d028:	b480      	push	{r7}
 800d02a:	b083      	sub	sp, #12
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d030:	bf00      	nop
 800d032:	370c      	adds	r7, #12
 800d034:	46bd      	mov	sp, r7
 800d036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03a:	4770      	bx	lr

0800d03c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d03c:	b480      	push	{r7}
 800d03e:	b083      	sub	sp, #12
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d044:	bf00      	nop
 800d046:	370c      	adds	r7, #12
 800d048:	46bd      	mov	sp, r7
 800d04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04e:	4770      	bx	lr

0800d050 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b082      	sub	sp, #8
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d101      	bne.n	800d062 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d05e:	2301      	movs	r3, #1
 800d060:	e042      	b.n	800d0e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d106      	bne.n	800d07a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2200      	movs	r2, #0
 800d070:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f7f5 fbdf 	bl	8002838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2224      	movs	r2, #36	@ 0x24
 800d07e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	681a      	ldr	r2, [r3, #0]
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	f022 0201 	bic.w	r2, r2, #1
 800d090:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d096:	2b00      	cmp	r3, #0
 800d098:	d002      	beq.n	800d0a0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f000 fe94 	bl	800ddc8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d0a0:	6878      	ldr	r0, [r7, #4]
 800d0a2:	f000 f825 	bl	800d0f0 <UART_SetConfig>
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	2b01      	cmp	r3, #1
 800d0aa:	d101      	bne.n	800d0b0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	e01b      	b.n	800d0e8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	685a      	ldr	r2, [r3, #4]
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d0be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	689a      	ldr	r2, [r3, #8]
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d0ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	681a      	ldr	r2, [r3, #0]
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	f042 0201 	orr.w	r2, r2, #1
 800d0de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f000 ff13 	bl	800df0c <UART_CheckIdleState>
 800d0e6:	4603      	mov	r3, r0
}
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	3708      	adds	r7, #8
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd80      	pop	{r7, pc}

0800d0f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d0f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d0f4:	b092      	sub	sp, #72	@ 0x48
 800d0f6:	af00      	add	r7, sp, #0
 800d0f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d100:	697b      	ldr	r3, [r7, #20]
 800d102:	689a      	ldr	r2, [r3, #8]
 800d104:	697b      	ldr	r3, [r7, #20]
 800d106:	691b      	ldr	r3, [r3, #16]
 800d108:	431a      	orrs	r2, r3
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	695b      	ldr	r3, [r3, #20]
 800d10e:	431a      	orrs	r2, r3
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	69db      	ldr	r3, [r3, #28]
 800d114:	4313      	orrs	r3, r2
 800d116:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d118:	697b      	ldr	r3, [r7, #20]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	681a      	ldr	r2, [r3, #0]
 800d11e:	4bbe      	ldr	r3, [pc, #760]	@ (800d418 <UART_SetConfig+0x328>)
 800d120:	4013      	ands	r3, r2
 800d122:	697a      	ldr	r2, [r7, #20]
 800d124:	6812      	ldr	r2, [r2, #0]
 800d126:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d128:	430b      	orrs	r3, r1
 800d12a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d12c:	697b      	ldr	r3, [r7, #20]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	685b      	ldr	r3, [r3, #4]
 800d132:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	68da      	ldr	r2, [r3, #12]
 800d13a:	697b      	ldr	r3, [r7, #20]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	430a      	orrs	r2, r1
 800d140:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d142:	697b      	ldr	r3, [r7, #20]
 800d144:	699b      	ldr	r3, [r3, #24]
 800d146:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d148:	697b      	ldr	r3, [r7, #20]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	4ab3      	ldr	r2, [pc, #716]	@ (800d41c <UART_SetConfig+0x32c>)
 800d14e:	4293      	cmp	r3, r2
 800d150:	d004      	beq.n	800d15c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d152:	697b      	ldr	r3, [r7, #20]
 800d154:	6a1b      	ldr	r3, [r3, #32]
 800d156:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d158:	4313      	orrs	r3, r2
 800d15a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d15c:	697b      	ldr	r3, [r7, #20]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	689a      	ldr	r2, [r3, #8]
 800d162:	4baf      	ldr	r3, [pc, #700]	@ (800d420 <UART_SetConfig+0x330>)
 800d164:	4013      	ands	r3, r2
 800d166:	697a      	ldr	r2, [r7, #20]
 800d168:	6812      	ldr	r2, [r2, #0]
 800d16a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d16c:	430b      	orrs	r3, r1
 800d16e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d170:	697b      	ldr	r3, [r7, #20]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d176:	f023 010f 	bic.w	r1, r3, #15
 800d17a:	697b      	ldr	r3, [r7, #20]
 800d17c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d17e:	697b      	ldr	r3, [r7, #20]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	430a      	orrs	r2, r1
 800d184:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d186:	697b      	ldr	r3, [r7, #20]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	4aa6      	ldr	r2, [pc, #664]	@ (800d424 <UART_SetConfig+0x334>)
 800d18c:	4293      	cmp	r3, r2
 800d18e:	d177      	bne.n	800d280 <UART_SetConfig+0x190>
 800d190:	4ba5      	ldr	r3, [pc, #660]	@ (800d428 <UART_SetConfig+0x338>)
 800d192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d194:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d198:	2b28      	cmp	r3, #40	@ 0x28
 800d19a:	d86d      	bhi.n	800d278 <UART_SetConfig+0x188>
 800d19c:	a201      	add	r2, pc, #4	@ (adr r2, 800d1a4 <UART_SetConfig+0xb4>)
 800d19e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1a2:	bf00      	nop
 800d1a4:	0800d249 	.word	0x0800d249
 800d1a8:	0800d279 	.word	0x0800d279
 800d1ac:	0800d279 	.word	0x0800d279
 800d1b0:	0800d279 	.word	0x0800d279
 800d1b4:	0800d279 	.word	0x0800d279
 800d1b8:	0800d279 	.word	0x0800d279
 800d1bc:	0800d279 	.word	0x0800d279
 800d1c0:	0800d279 	.word	0x0800d279
 800d1c4:	0800d251 	.word	0x0800d251
 800d1c8:	0800d279 	.word	0x0800d279
 800d1cc:	0800d279 	.word	0x0800d279
 800d1d0:	0800d279 	.word	0x0800d279
 800d1d4:	0800d279 	.word	0x0800d279
 800d1d8:	0800d279 	.word	0x0800d279
 800d1dc:	0800d279 	.word	0x0800d279
 800d1e0:	0800d279 	.word	0x0800d279
 800d1e4:	0800d259 	.word	0x0800d259
 800d1e8:	0800d279 	.word	0x0800d279
 800d1ec:	0800d279 	.word	0x0800d279
 800d1f0:	0800d279 	.word	0x0800d279
 800d1f4:	0800d279 	.word	0x0800d279
 800d1f8:	0800d279 	.word	0x0800d279
 800d1fc:	0800d279 	.word	0x0800d279
 800d200:	0800d279 	.word	0x0800d279
 800d204:	0800d261 	.word	0x0800d261
 800d208:	0800d279 	.word	0x0800d279
 800d20c:	0800d279 	.word	0x0800d279
 800d210:	0800d279 	.word	0x0800d279
 800d214:	0800d279 	.word	0x0800d279
 800d218:	0800d279 	.word	0x0800d279
 800d21c:	0800d279 	.word	0x0800d279
 800d220:	0800d279 	.word	0x0800d279
 800d224:	0800d269 	.word	0x0800d269
 800d228:	0800d279 	.word	0x0800d279
 800d22c:	0800d279 	.word	0x0800d279
 800d230:	0800d279 	.word	0x0800d279
 800d234:	0800d279 	.word	0x0800d279
 800d238:	0800d279 	.word	0x0800d279
 800d23c:	0800d279 	.word	0x0800d279
 800d240:	0800d279 	.word	0x0800d279
 800d244:	0800d271 	.word	0x0800d271
 800d248:	2301      	movs	r3, #1
 800d24a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d24e:	e326      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d250:	2304      	movs	r3, #4
 800d252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d256:	e322      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d258:	2308      	movs	r3, #8
 800d25a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d25e:	e31e      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d260:	2310      	movs	r3, #16
 800d262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d266:	e31a      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d268:	2320      	movs	r3, #32
 800d26a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d26e:	e316      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d270:	2340      	movs	r3, #64	@ 0x40
 800d272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d276:	e312      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d278:	2380      	movs	r3, #128	@ 0x80
 800d27a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d27e:	e30e      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d280:	697b      	ldr	r3, [r7, #20]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	4a69      	ldr	r2, [pc, #420]	@ (800d42c <UART_SetConfig+0x33c>)
 800d286:	4293      	cmp	r3, r2
 800d288:	d130      	bne.n	800d2ec <UART_SetConfig+0x1fc>
 800d28a:	4b67      	ldr	r3, [pc, #412]	@ (800d428 <UART_SetConfig+0x338>)
 800d28c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d28e:	f003 0307 	and.w	r3, r3, #7
 800d292:	2b05      	cmp	r3, #5
 800d294:	d826      	bhi.n	800d2e4 <UART_SetConfig+0x1f4>
 800d296:	a201      	add	r2, pc, #4	@ (adr r2, 800d29c <UART_SetConfig+0x1ac>)
 800d298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d29c:	0800d2b5 	.word	0x0800d2b5
 800d2a0:	0800d2bd 	.word	0x0800d2bd
 800d2a4:	0800d2c5 	.word	0x0800d2c5
 800d2a8:	0800d2cd 	.word	0x0800d2cd
 800d2ac:	0800d2d5 	.word	0x0800d2d5
 800d2b0:	0800d2dd 	.word	0x0800d2dd
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2ba:	e2f0      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d2bc:	2304      	movs	r3, #4
 800d2be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2c2:	e2ec      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d2c4:	2308      	movs	r3, #8
 800d2c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2ca:	e2e8      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d2cc:	2310      	movs	r3, #16
 800d2ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2d2:	e2e4      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d2d4:	2320      	movs	r3, #32
 800d2d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2da:	e2e0      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d2dc:	2340      	movs	r3, #64	@ 0x40
 800d2de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2e2:	e2dc      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d2e4:	2380      	movs	r3, #128	@ 0x80
 800d2e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2ea:	e2d8      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d2ec:	697b      	ldr	r3, [r7, #20]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	4a4f      	ldr	r2, [pc, #316]	@ (800d430 <UART_SetConfig+0x340>)
 800d2f2:	4293      	cmp	r3, r2
 800d2f4:	d130      	bne.n	800d358 <UART_SetConfig+0x268>
 800d2f6:	4b4c      	ldr	r3, [pc, #304]	@ (800d428 <UART_SetConfig+0x338>)
 800d2f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d2fa:	f003 0307 	and.w	r3, r3, #7
 800d2fe:	2b05      	cmp	r3, #5
 800d300:	d826      	bhi.n	800d350 <UART_SetConfig+0x260>
 800d302:	a201      	add	r2, pc, #4	@ (adr r2, 800d308 <UART_SetConfig+0x218>)
 800d304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d308:	0800d321 	.word	0x0800d321
 800d30c:	0800d329 	.word	0x0800d329
 800d310:	0800d331 	.word	0x0800d331
 800d314:	0800d339 	.word	0x0800d339
 800d318:	0800d341 	.word	0x0800d341
 800d31c:	0800d349 	.word	0x0800d349
 800d320:	2300      	movs	r3, #0
 800d322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d326:	e2ba      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d328:	2304      	movs	r3, #4
 800d32a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d32e:	e2b6      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d330:	2308      	movs	r3, #8
 800d332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d336:	e2b2      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d338:	2310      	movs	r3, #16
 800d33a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d33e:	e2ae      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d340:	2320      	movs	r3, #32
 800d342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d346:	e2aa      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d348:	2340      	movs	r3, #64	@ 0x40
 800d34a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d34e:	e2a6      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d350:	2380      	movs	r3, #128	@ 0x80
 800d352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d356:	e2a2      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d358:	697b      	ldr	r3, [r7, #20]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	4a35      	ldr	r2, [pc, #212]	@ (800d434 <UART_SetConfig+0x344>)
 800d35e:	4293      	cmp	r3, r2
 800d360:	d130      	bne.n	800d3c4 <UART_SetConfig+0x2d4>
 800d362:	4b31      	ldr	r3, [pc, #196]	@ (800d428 <UART_SetConfig+0x338>)
 800d364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d366:	f003 0307 	and.w	r3, r3, #7
 800d36a:	2b05      	cmp	r3, #5
 800d36c:	d826      	bhi.n	800d3bc <UART_SetConfig+0x2cc>
 800d36e:	a201      	add	r2, pc, #4	@ (adr r2, 800d374 <UART_SetConfig+0x284>)
 800d370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d374:	0800d38d 	.word	0x0800d38d
 800d378:	0800d395 	.word	0x0800d395
 800d37c:	0800d39d 	.word	0x0800d39d
 800d380:	0800d3a5 	.word	0x0800d3a5
 800d384:	0800d3ad 	.word	0x0800d3ad
 800d388:	0800d3b5 	.word	0x0800d3b5
 800d38c:	2300      	movs	r3, #0
 800d38e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d392:	e284      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d394:	2304      	movs	r3, #4
 800d396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d39a:	e280      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d39c:	2308      	movs	r3, #8
 800d39e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3a2:	e27c      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d3a4:	2310      	movs	r3, #16
 800d3a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3aa:	e278      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d3ac:	2320      	movs	r3, #32
 800d3ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3b2:	e274      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d3b4:	2340      	movs	r3, #64	@ 0x40
 800d3b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3ba:	e270      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d3bc:	2380      	movs	r3, #128	@ 0x80
 800d3be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3c2:	e26c      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d3c4:	697b      	ldr	r3, [r7, #20]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	4a1b      	ldr	r2, [pc, #108]	@ (800d438 <UART_SetConfig+0x348>)
 800d3ca:	4293      	cmp	r3, r2
 800d3cc:	d142      	bne.n	800d454 <UART_SetConfig+0x364>
 800d3ce:	4b16      	ldr	r3, [pc, #88]	@ (800d428 <UART_SetConfig+0x338>)
 800d3d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d3d2:	f003 0307 	and.w	r3, r3, #7
 800d3d6:	2b05      	cmp	r3, #5
 800d3d8:	d838      	bhi.n	800d44c <UART_SetConfig+0x35c>
 800d3da:	a201      	add	r2, pc, #4	@ (adr r2, 800d3e0 <UART_SetConfig+0x2f0>)
 800d3dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3e0:	0800d3f9 	.word	0x0800d3f9
 800d3e4:	0800d401 	.word	0x0800d401
 800d3e8:	0800d409 	.word	0x0800d409
 800d3ec:	0800d411 	.word	0x0800d411
 800d3f0:	0800d43d 	.word	0x0800d43d
 800d3f4:	0800d445 	.word	0x0800d445
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3fe:	e24e      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d400:	2304      	movs	r3, #4
 800d402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d406:	e24a      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d408:	2308      	movs	r3, #8
 800d40a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d40e:	e246      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d410:	2310      	movs	r3, #16
 800d412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d416:	e242      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d418:	cfff69f3 	.word	0xcfff69f3
 800d41c:	58000c00 	.word	0x58000c00
 800d420:	11fff4ff 	.word	0x11fff4ff
 800d424:	40011000 	.word	0x40011000
 800d428:	58024400 	.word	0x58024400
 800d42c:	40004400 	.word	0x40004400
 800d430:	40004800 	.word	0x40004800
 800d434:	40004c00 	.word	0x40004c00
 800d438:	40005000 	.word	0x40005000
 800d43c:	2320      	movs	r3, #32
 800d43e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d442:	e22c      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d444:	2340      	movs	r3, #64	@ 0x40
 800d446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d44a:	e228      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d44c:	2380      	movs	r3, #128	@ 0x80
 800d44e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d452:	e224      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d454:	697b      	ldr	r3, [r7, #20]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	4ab1      	ldr	r2, [pc, #708]	@ (800d720 <UART_SetConfig+0x630>)
 800d45a:	4293      	cmp	r3, r2
 800d45c:	d176      	bne.n	800d54c <UART_SetConfig+0x45c>
 800d45e:	4bb1      	ldr	r3, [pc, #708]	@ (800d724 <UART_SetConfig+0x634>)
 800d460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d462:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d466:	2b28      	cmp	r3, #40	@ 0x28
 800d468:	d86c      	bhi.n	800d544 <UART_SetConfig+0x454>
 800d46a:	a201      	add	r2, pc, #4	@ (adr r2, 800d470 <UART_SetConfig+0x380>)
 800d46c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d470:	0800d515 	.word	0x0800d515
 800d474:	0800d545 	.word	0x0800d545
 800d478:	0800d545 	.word	0x0800d545
 800d47c:	0800d545 	.word	0x0800d545
 800d480:	0800d545 	.word	0x0800d545
 800d484:	0800d545 	.word	0x0800d545
 800d488:	0800d545 	.word	0x0800d545
 800d48c:	0800d545 	.word	0x0800d545
 800d490:	0800d51d 	.word	0x0800d51d
 800d494:	0800d545 	.word	0x0800d545
 800d498:	0800d545 	.word	0x0800d545
 800d49c:	0800d545 	.word	0x0800d545
 800d4a0:	0800d545 	.word	0x0800d545
 800d4a4:	0800d545 	.word	0x0800d545
 800d4a8:	0800d545 	.word	0x0800d545
 800d4ac:	0800d545 	.word	0x0800d545
 800d4b0:	0800d525 	.word	0x0800d525
 800d4b4:	0800d545 	.word	0x0800d545
 800d4b8:	0800d545 	.word	0x0800d545
 800d4bc:	0800d545 	.word	0x0800d545
 800d4c0:	0800d545 	.word	0x0800d545
 800d4c4:	0800d545 	.word	0x0800d545
 800d4c8:	0800d545 	.word	0x0800d545
 800d4cc:	0800d545 	.word	0x0800d545
 800d4d0:	0800d52d 	.word	0x0800d52d
 800d4d4:	0800d545 	.word	0x0800d545
 800d4d8:	0800d545 	.word	0x0800d545
 800d4dc:	0800d545 	.word	0x0800d545
 800d4e0:	0800d545 	.word	0x0800d545
 800d4e4:	0800d545 	.word	0x0800d545
 800d4e8:	0800d545 	.word	0x0800d545
 800d4ec:	0800d545 	.word	0x0800d545
 800d4f0:	0800d535 	.word	0x0800d535
 800d4f4:	0800d545 	.word	0x0800d545
 800d4f8:	0800d545 	.word	0x0800d545
 800d4fc:	0800d545 	.word	0x0800d545
 800d500:	0800d545 	.word	0x0800d545
 800d504:	0800d545 	.word	0x0800d545
 800d508:	0800d545 	.word	0x0800d545
 800d50c:	0800d545 	.word	0x0800d545
 800d510:	0800d53d 	.word	0x0800d53d
 800d514:	2301      	movs	r3, #1
 800d516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d51a:	e1c0      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d51c:	2304      	movs	r3, #4
 800d51e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d522:	e1bc      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d524:	2308      	movs	r3, #8
 800d526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d52a:	e1b8      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d52c:	2310      	movs	r3, #16
 800d52e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d532:	e1b4      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d534:	2320      	movs	r3, #32
 800d536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d53a:	e1b0      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d53c:	2340      	movs	r3, #64	@ 0x40
 800d53e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d542:	e1ac      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d544:	2380      	movs	r3, #128	@ 0x80
 800d546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d54a:	e1a8      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d54c:	697b      	ldr	r3, [r7, #20]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	4a75      	ldr	r2, [pc, #468]	@ (800d728 <UART_SetConfig+0x638>)
 800d552:	4293      	cmp	r3, r2
 800d554:	d130      	bne.n	800d5b8 <UART_SetConfig+0x4c8>
 800d556:	4b73      	ldr	r3, [pc, #460]	@ (800d724 <UART_SetConfig+0x634>)
 800d558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d55a:	f003 0307 	and.w	r3, r3, #7
 800d55e:	2b05      	cmp	r3, #5
 800d560:	d826      	bhi.n	800d5b0 <UART_SetConfig+0x4c0>
 800d562:	a201      	add	r2, pc, #4	@ (adr r2, 800d568 <UART_SetConfig+0x478>)
 800d564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d568:	0800d581 	.word	0x0800d581
 800d56c:	0800d589 	.word	0x0800d589
 800d570:	0800d591 	.word	0x0800d591
 800d574:	0800d599 	.word	0x0800d599
 800d578:	0800d5a1 	.word	0x0800d5a1
 800d57c:	0800d5a9 	.word	0x0800d5a9
 800d580:	2300      	movs	r3, #0
 800d582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d586:	e18a      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d588:	2304      	movs	r3, #4
 800d58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d58e:	e186      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d590:	2308      	movs	r3, #8
 800d592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d596:	e182      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d598:	2310      	movs	r3, #16
 800d59a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d59e:	e17e      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d5a0:	2320      	movs	r3, #32
 800d5a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5a6:	e17a      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d5a8:	2340      	movs	r3, #64	@ 0x40
 800d5aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5ae:	e176      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d5b0:	2380      	movs	r3, #128	@ 0x80
 800d5b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5b6:	e172      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d5b8:	697b      	ldr	r3, [r7, #20]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	4a5b      	ldr	r2, [pc, #364]	@ (800d72c <UART_SetConfig+0x63c>)
 800d5be:	4293      	cmp	r3, r2
 800d5c0:	d130      	bne.n	800d624 <UART_SetConfig+0x534>
 800d5c2:	4b58      	ldr	r3, [pc, #352]	@ (800d724 <UART_SetConfig+0x634>)
 800d5c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d5c6:	f003 0307 	and.w	r3, r3, #7
 800d5ca:	2b05      	cmp	r3, #5
 800d5cc:	d826      	bhi.n	800d61c <UART_SetConfig+0x52c>
 800d5ce:	a201      	add	r2, pc, #4	@ (adr r2, 800d5d4 <UART_SetConfig+0x4e4>)
 800d5d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5d4:	0800d5ed 	.word	0x0800d5ed
 800d5d8:	0800d5f5 	.word	0x0800d5f5
 800d5dc:	0800d5fd 	.word	0x0800d5fd
 800d5e0:	0800d605 	.word	0x0800d605
 800d5e4:	0800d60d 	.word	0x0800d60d
 800d5e8:	0800d615 	.word	0x0800d615
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5f2:	e154      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d5f4:	2304      	movs	r3, #4
 800d5f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5fa:	e150      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d5fc:	2308      	movs	r3, #8
 800d5fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d602:	e14c      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d604:	2310      	movs	r3, #16
 800d606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d60a:	e148      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d60c:	2320      	movs	r3, #32
 800d60e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d612:	e144      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d614:	2340      	movs	r3, #64	@ 0x40
 800d616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d61a:	e140      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d61c:	2380      	movs	r3, #128	@ 0x80
 800d61e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d622:	e13c      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d624:	697b      	ldr	r3, [r7, #20]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	4a41      	ldr	r2, [pc, #260]	@ (800d730 <UART_SetConfig+0x640>)
 800d62a:	4293      	cmp	r3, r2
 800d62c:	f040 8082 	bne.w	800d734 <UART_SetConfig+0x644>
 800d630:	4b3c      	ldr	r3, [pc, #240]	@ (800d724 <UART_SetConfig+0x634>)
 800d632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d634:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d638:	2b28      	cmp	r3, #40	@ 0x28
 800d63a:	d86d      	bhi.n	800d718 <UART_SetConfig+0x628>
 800d63c:	a201      	add	r2, pc, #4	@ (adr r2, 800d644 <UART_SetConfig+0x554>)
 800d63e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d642:	bf00      	nop
 800d644:	0800d6e9 	.word	0x0800d6e9
 800d648:	0800d719 	.word	0x0800d719
 800d64c:	0800d719 	.word	0x0800d719
 800d650:	0800d719 	.word	0x0800d719
 800d654:	0800d719 	.word	0x0800d719
 800d658:	0800d719 	.word	0x0800d719
 800d65c:	0800d719 	.word	0x0800d719
 800d660:	0800d719 	.word	0x0800d719
 800d664:	0800d6f1 	.word	0x0800d6f1
 800d668:	0800d719 	.word	0x0800d719
 800d66c:	0800d719 	.word	0x0800d719
 800d670:	0800d719 	.word	0x0800d719
 800d674:	0800d719 	.word	0x0800d719
 800d678:	0800d719 	.word	0x0800d719
 800d67c:	0800d719 	.word	0x0800d719
 800d680:	0800d719 	.word	0x0800d719
 800d684:	0800d6f9 	.word	0x0800d6f9
 800d688:	0800d719 	.word	0x0800d719
 800d68c:	0800d719 	.word	0x0800d719
 800d690:	0800d719 	.word	0x0800d719
 800d694:	0800d719 	.word	0x0800d719
 800d698:	0800d719 	.word	0x0800d719
 800d69c:	0800d719 	.word	0x0800d719
 800d6a0:	0800d719 	.word	0x0800d719
 800d6a4:	0800d701 	.word	0x0800d701
 800d6a8:	0800d719 	.word	0x0800d719
 800d6ac:	0800d719 	.word	0x0800d719
 800d6b0:	0800d719 	.word	0x0800d719
 800d6b4:	0800d719 	.word	0x0800d719
 800d6b8:	0800d719 	.word	0x0800d719
 800d6bc:	0800d719 	.word	0x0800d719
 800d6c0:	0800d719 	.word	0x0800d719
 800d6c4:	0800d709 	.word	0x0800d709
 800d6c8:	0800d719 	.word	0x0800d719
 800d6cc:	0800d719 	.word	0x0800d719
 800d6d0:	0800d719 	.word	0x0800d719
 800d6d4:	0800d719 	.word	0x0800d719
 800d6d8:	0800d719 	.word	0x0800d719
 800d6dc:	0800d719 	.word	0x0800d719
 800d6e0:	0800d719 	.word	0x0800d719
 800d6e4:	0800d711 	.word	0x0800d711
 800d6e8:	2301      	movs	r3, #1
 800d6ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6ee:	e0d6      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d6f0:	2304      	movs	r3, #4
 800d6f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6f6:	e0d2      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d6f8:	2308      	movs	r3, #8
 800d6fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6fe:	e0ce      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d700:	2310      	movs	r3, #16
 800d702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d706:	e0ca      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d708:	2320      	movs	r3, #32
 800d70a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d70e:	e0c6      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d710:	2340      	movs	r3, #64	@ 0x40
 800d712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d716:	e0c2      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d718:	2380      	movs	r3, #128	@ 0x80
 800d71a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d71e:	e0be      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d720:	40011400 	.word	0x40011400
 800d724:	58024400 	.word	0x58024400
 800d728:	40007800 	.word	0x40007800
 800d72c:	40007c00 	.word	0x40007c00
 800d730:	40011800 	.word	0x40011800
 800d734:	697b      	ldr	r3, [r7, #20]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	4aad      	ldr	r2, [pc, #692]	@ (800d9f0 <UART_SetConfig+0x900>)
 800d73a:	4293      	cmp	r3, r2
 800d73c:	d176      	bne.n	800d82c <UART_SetConfig+0x73c>
 800d73e:	4bad      	ldr	r3, [pc, #692]	@ (800d9f4 <UART_SetConfig+0x904>)
 800d740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d742:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d746:	2b28      	cmp	r3, #40	@ 0x28
 800d748:	d86c      	bhi.n	800d824 <UART_SetConfig+0x734>
 800d74a:	a201      	add	r2, pc, #4	@ (adr r2, 800d750 <UART_SetConfig+0x660>)
 800d74c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d750:	0800d7f5 	.word	0x0800d7f5
 800d754:	0800d825 	.word	0x0800d825
 800d758:	0800d825 	.word	0x0800d825
 800d75c:	0800d825 	.word	0x0800d825
 800d760:	0800d825 	.word	0x0800d825
 800d764:	0800d825 	.word	0x0800d825
 800d768:	0800d825 	.word	0x0800d825
 800d76c:	0800d825 	.word	0x0800d825
 800d770:	0800d7fd 	.word	0x0800d7fd
 800d774:	0800d825 	.word	0x0800d825
 800d778:	0800d825 	.word	0x0800d825
 800d77c:	0800d825 	.word	0x0800d825
 800d780:	0800d825 	.word	0x0800d825
 800d784:	0800d825 	.word	0x0800d825
 800d788:	0800d825 	.word	0x0800d825
 800d78c:	0800d825 	.word	0x0800d825
 800d790:	0800d805 	.word	0x0800d805
 800d794:	0800d825 	.word	0x0800d825
 800d798:	0800d825 	.word	0x0800d825
 800d79c:	0800d825 	.word	0x0800d825
 800d7a0:	0800d825 	.word	0x0800d825
 800d7a4:	0800d825 	.word	0x0800d825
 800d7a8:	0800d825 	.word	0x0800d825
 800d7ac:	0800d825 	.word	0x0800d825
 800d7b0:	0800d80d 	.word	0x0800d80d
 800d7b4:	0800d825 	.word	0x0800d825
 800d7b8:	0800d825 	.word	0x0800d825
 800d7bc:	0800d825 	.word	0x0800d825
 800d7c0:	0800d825 	.word	0x0800d825
 800d7c4:	0800d825 	.word	0x0800d825
 800d7c8:	0800d825 	.word	0x0800d825
 800d7cc:	0800d825 	.word	0x0800d825
 800d7d0:	0800d815 	.word	0x0800d815
 800d7d4:	0800d825 	.word	0x0800d825
 800d7d8:	0800d825 	.word	0x0800d825
 800d7dc:	0800d825 	.word	0x0800d825
 800d7e0:	0800d825 	.word	0x0800d825
 800d7e4:	0800d825 	.word	0x0800d825
 800d7e8:	0800d825 	.word	0x0800d825
 800d7ec:	0800d825 	.word	0x0800d825
 800d7f0:	0800d81d 	.word	0x0800d81d
 800d7f4:	2301      	movs	r3, #1
 800d7f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7fa:	e050      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d7fc:	2304      	movs	r3, #4
 800d7fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d802:	e04c      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d804:	2308      	movs	r3, #8
 800d806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d80a:	e048      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d80c:	2310      	movs	r3, #16
 800d80e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d812:	e044      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d814:	2320      	movs	r3, #32
 800d816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d81a:	e040      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d81c:	2340      	movs	r3, #64	@ 0x40
 800d81e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d822:	e03c      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d824:	2380      	movs	r3, #128	@ 0x80
 800d826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d82a:	e038      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d82c:	697b      	ldr	r3, [r7, #20]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	4a71      	ldr	r2, [pc, #452]	@ (800d9f8 <UART_SetConfig+0x908>)
 800d832:	4293      	cmp	r3, r2
 800d834:	d130      	bne.n	800d898 <UART_SetConfig+0x7a8>
 800d836:	4b6f      	ldr	r3, [pc, #444]	@ (800d9f4 <UART_SetConfig+0x904>)
 800d838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d83a:	f003 0307 	and.w	r3, r3, #7
 800d83e:	2b05      	cmp	r3, #5
 800d840:	d826      	bhi.n	800d890 <UART_SetConfig+0x7a0>
 800d842:	a201      	add	r2, pc, #4	@ (adr r2, 800d848 <UART_SetConfig+0x758>)
 800d844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d848:	0800d861 	.word	0x0800d861
 800d84c:	0800d869 	.word	0x0800d869
 800d850:	0800d871 	.word	0x0800d871
 800d854:	0800d879 	.word	0x0800d879
 800d858:	0800d881 	.word	0x0800d881
 800d85c:	0800d889 	.word	0x0800d889
 800d860:	2302      	movs	r3, #2
 800d862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d866:	e01a      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d868:	2304      	movs	r3, #4
 800d86a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d86e:	e016      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d870:	2308      	movs	r3, #8
 800d872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d876:	e012      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d878:	2310      	movs	r3, #16
 800d87a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d87e:	e00e      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d880:	2320      	movs	r3, #32
 800d882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d886:	e00a      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d888:	2340      	movs	r3, #64	@ 0x40
 800d88a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d88e:	e006      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d890:	2380      	movs	r3, #128	@ 0x80
 800d892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d896:	e002      	b.n	800d89e <UART_SetConfig+0x7ae>
 800d898:	2380      	movs	r3, #128	@ 0x80
 800d89a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d89e:	697b      	ldr	r3, [r7, #20]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	4a55      	ldr	r2, [pc, #340]	@ (800d9f8 <UART_SetConfig+0x908>)
 800d8a4:	4293      	cmp	r3, r2
 800d8a6:	f040 80f8 	bne.w	800da9a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d8aa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d8ae:	2b20      	cmp	r3, #32
 800d8b0:	dc46      	bgt.n	800d940 <UART_SetConfig+0x850>
 800d8b2:	2b02      	cmp	r3, #2
 800d8b4:	db75      	blt.n	800d9a2 <UART_SetConfig+0x8b2>
 800d8b6:	3b02      	subs	r3, #2
 800d8b8:	2b1e      	cmp	r3, #30
 800d8ba:	d872      	bhi.n	800d9a2 <UART_SetConfig+0x8b2>
 800d8bc:	a201      	add	r2, pc, #4	@ (adr r2, 800d8c4 <UART_SetConfig+0x7d4>)
 800d8be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8c2:	bf00      	nop
 800d8c4:	0800d947 	.word	0x0800d947
 800d8c8:	0800d9a3 	.word	0x0800d9a3
 800d8cc:	0800d94f 	.word	0x0800d94f
 800d8d0:	0800d9a3 	.word	0x0800d9a3
 800d8d4:	0800d9a3 	.word	0x0800d9a3
 800d8d8:	0800d9a3 	.word	0x0800d9a3
 800d8dc:	0800d95f 	.word	0x0800d95f
 800d8e0:	0800d9a3 	.word	0x0800d9a3
 800d8e4:	0800d9a3 	.word	0x0800d9a3
 800d8e8:	0800d9a3 	.word	0x0800d9a3
 800d8ec:	0800d9a3 	.word	0x0800d9a3
 800d8f0:	0800d9a3 	.word	0x0800d9a3
 800d8f4:	0800d9a3 	.word	0x0800d9a3
 800d8f8:	0800d9a3 	.word	0x0800d9a3
 800d8fc:	0800d96f 	.word	0x0800d96f
 800d900:	0800d9a3 	.word	0x0800d9a3
 800d904:	0800d9a3 	.word	0x0800d9a3
 800d908:	0800d9a3 	.word	0x0800d9a3
 800d90c:	0800d9a3 	.word	0x0800d9a3
 800d910:	0800d9a3 	.word	0x0800d9a3
 800d914:	0800d9a3 	.word	0x0800d9a3
 800d918:	0800d9a3 	.word	0x0800d9a3
 800d91c:	0800d9a3 	.word	0x0800d9a3
 800d920:	0800d9a3 	.word	0x0800d9a3
 800d924:	0800d9a3 	.word	0x0800d9a3
 800d928:	0800d9a3 	.word	0x0800d9a3
 800d92c:	0800d9a3 	.word	0x0800d9a3
 800d930:	0800d9a3 	.word	0x0800d9a3
 800d934:	0800d9a3 	.word	0x0800d9a3
 800d938:	0800d9a3 	.word	0x0800d9a3
 800d93c:	0800d995 	.word	0x0800d995
 800d940:	2b40      	cmp	r3, #64	@ 0x40
 800d942:	d02a      	beq.n	800d99a <UART_SetConfig+0x8aa>
 800d944:	e02d      	b.n	800d9a2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d946:	f7fe f843 	bl	800b9d0 <HAL_RCCEx_GetD3PCLK1Freq>
 800d94a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d94c:	e02f      	b.n	800d9ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d94e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d952:	4618      	mov	r0, r3
 800d954:	f7fe f852 	bl	800b9fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d95a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d95c:	e027      	b.n	800d9ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d95e:	f107 0318 	add.w	r3, r7, #24
 800d962:	4618      	mov	r0, r3
 800d964:	f7fe f99e 	bl	800bca4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d968:	69fb      	ldr	r3, [r7, #28]
 800d96a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d96c:	e01f      	b.n	800d9ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d96e:	4b21      	ldr	r3, [pc, #132]	@ (800d9f4 <UART_SetConfig+0x904>)
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	f003 0320 	and.w	r3, r3, #32
 800d976:	2b00      	cmp	r3, #0
 800d978:	d009      	beq.n	800d98e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d97a:	4b1e      	ldr	r3, [pc, #120]	@ (800d9f4 <UART_SetConfig+0x904>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	08db      	lsrs	r3, r3, #3
 800d980:	f003 0303 	and.w	r3, r3, #3
 800d984:	4a1d      	ldr	r2, [pc, #116]	@ (800d9fc <UART_SetConfig+0x90c>)
 800d986:	fa22 f303 	lsr.w	r3, r2, r3
 800d98a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d98c:	e00f      	b.n	800d9ae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d98e:	4b1b      	ldr	r3, [pc, #108]	@ (800d9fc <UART_SetConfig+0x90c>)
 800d990:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d992:	e00c      	b.n	800d9ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d994:	4b1a      	ldr	r3, [pc, #104]	@ (800da00 <UART_SetConfig+0x910>)
 800d996:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d998:	e009      	b.n	800d9ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d99a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d99e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d9a0:	e005      	b.n	800d9ae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d9ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d9ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	f000 81ee 	beq.w	800dd92 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d9b6:	697b      	ldr	r3, [r7, #20]
 800d9b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9ba:	4a12      	ldr	r2, [pc, #72]	@ (800da04 <UART_SetConfig+0x914>)
 800d9bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d9c0:	461a      	mov	r2, r3
 800d9c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d9c8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d9ca:	697b      	ldr	r3, [r7, #20]
 800d9cc:	685a      	ldr	r2, [r3, #4]
 800d9ce:	4613      	mov	r3, r2
 800d9d0:	005b      	lsls	r3, r3, #1
 800d9d2:	4413      	add	r3, r2
 800d9d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d9d6:	429a      	cmp	r2, r3
 800d9d8:	d305      	bcc.n	800d9e6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d9da:	697b      	ldr	r3, [r7, #20]
 800d9dc:	685b      	ldr	r3, [r3, #4]
 800d9de:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d9e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d9e2:	429a      	cmp	r2, r3
 800d9e4:	d910      	bls.n	800da08 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800d9e6:	2301      	movs	r3, #1
 800d9e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d9ec:	e1d1      	b.n	800dd92 <UART_SetConfig+0xca2>
 800d9ee:	bf00      	nop
 800d9f0:	40011c00 	.word	0x40011c00
 800d9f4:	58024400 	.word	0x58024400
 800d9f8:	58000c00 	.word	0x58000c00
 800d9fc:	03d09000 	.word	0x03d09000
 800da00:	003d0900 	.word	0x003d0900
 800da04:	0802bf04 	.word	0x0802bf04
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800da08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da0a:	2200      	movs	r2, #0
 800da0c:	60bb      	str	r3, [r7, #8]
 800da0e:	60fa      	str	r2, [r7, #12]
 800da10:	697b      	ldr	r3, [r7, #20]
 800da12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da14:	4ac0      	ldr	r2, [pc, #768]	@ (800dd18 <UART_SetConfig+0xc28>)
 800da16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da1a:	b29b      	uxth	r3, r3
 800da1c:	2200      	movs	r2, #0
 800da1e:	603b      	str	r3, [r7, #0]
 800da20:	607a      	str	r2, [r7, #4]
 800da22:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800da2a:	f7f2 fe7d 	bl	8000728 <__aeabi_uldivmod>
 800da2e:	4602      	mov	r2, r0
 800da30:	460b      	mov	r3, r1
 800da32:	4610      	mov	r0, r2
 800da34:	4619      	mov	r1, r3
 800da36:	f04f 0200 	mov.w	r2, #0
 800da3a:	f04f 0300 	mov.w	r3, #0
 800da3e:	020b      	lsls	r3, r1, #8
 800da40:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800da44:	0202      	lsls	r2, r0, #8
 800da46:	6979      	ldr	r1, [r7, #20]
 800da48:	6849      	ldr	r1, [r1, #4]
 800da4a:	0849      	lsrs	r1, r1, #1
 800da4c:	2000      	movs	r0, #0
 800da4e:	460c      	mov	r4, r1
 800da50:	4605      	mov	r5, r0
 800da52:	eb12 0804 	adds.w	r8, r2, r4
 800da56:	eb43 0905 	adc.w	r9, r3, r5
 800da5a:	697b      	ldr	r3, [r7, #20]
 800da5c:	685b      	ldr	r3, [r3, #4]
 800da5e:	2200      	movs	r2, #0
 800da60:	469a      	mov	sl, r3
 800da62:	4693      	mov	fp, r2
 800da64:	4652      	mov	r2, sl
 800da66:	465b      	mov	r3, fp
 800da68:	4640      	mov	r0, r8
 800da6a:	4649      	mov	r1, r9
 800da6c:	f7f2 fe5c 	bl	8000728 <__aeabi_uldivmod>
 800da70:	4602      	mov	r2, r0
 800da72:	460b      	mov	r3, r1
 800da74:	4613      	mov	r3, r2
 800da76:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800da78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800da7e:	d308      	bcc.n	800da92 <UART_SetConfig+0x9a2>
 800da80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800da86:	d204      	bcs.n	800da92 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800da88:	697b      	ldr	r3, [r7, #20]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800da8e:	60da      	str	r2, [r3, #12]
 800da90:	e17f      	b.n	800dd92 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800da92:	2301      	movs	r3, #1
 800da94:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800da98:	e17b      	b.n	800dd92 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800da9a:	697b      	ldr	r3, [r7, #20]
 800da9c:	69db      	ldr	r3, [r3, #28]
 800da9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800daa2:	f040 80bd 	bne.w	800dc20 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800daa6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800daaa:	2b20      	cmp	r3, #32
 800daac:	dc48      	bgt.n	800db40 <UART_SetConfig+0xa50>
 800daae:	2b00      	cmp	r3, #0
 800dab0:	db7b      	blt.n	800dbaa <UART_SetConfig+0xaba>
 800dab2:	2b20      	cmp	r3, #32
 800dab4:	d879      	bhi.n	800dbaa <UART_SetConfig+0xaba>
 800dab6:	a201      	add	r2, pc, #4	@ (adr r2, 800dabc <UART_SetConfig+0x9cc>)
 800dab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dabc:	0800db47 	.word	0x0800db47
 800dac0:	0800db4f 	.word	0x0800db4f
 800dac4:	0800dbab 	.word	0x0800dbab
 800dac8:	0800dbab 	.word	0x0800dbab
 800dacc:	0800db57 	.word	0x0800db57
 800dad0:	0800dbab 	.word	0x0800dbab
 800dad4:	0800dbab 	.word	0x0800dbab
 800dad8:	0800dbab 	.word	0x0800dbab
 800dadc:	0800db67 	.word	0x0800db67
 800dae0:	0800dbab 	.word	0x0800dbab
 800dae4:	0800dbab 	.word	0x0800dbab
 800dae8:	0800dbab 	.word	0x0800dbab
 800daec:	0800dbab 	.word	0x0800dbab
 800daf0:	0800dbab 	.word	0x0800dbab
 800daf4:	0800dbab 	.word	0x0800dbab
 800daf8:	0800dbab 	.word	0x0800dbab
 800dafc:	0800db77 	.word	0x0800db77
 800db00:	0800dbab 	.word	0x0800dbab
 800db04:	0800dbab 	.word	0x0800dbab
 800db08:	0800dbab 	.word	0x0800dbab
 800db0c:	0800dbab 	.word	0x0800dbab
 800db10:	0800dbab 	.word	0x0800dbab
 800db14:	0800dbab 	.word	0x0800dbab
 800db18:	0800dbab 	.word	0x0800dbab
 800db1c:	0800dbab 	.word	0x0800dbab
 800db20:	0800dbab 	.word	0x0800dbab
 800db24:	0800dbab 	.word	0x0800dbab
 800db28:	0800dbab 	.word	0x0800dbab
 800db2c:	0800dbab 	.word	0x0800dbab
 800db30:	0800dbab 	.word	0x0800dbab
 800db34:	0800dbab 	.word	0x0800dbab
 800db38:	0800dbab 	.word	0x0800dbab
 800db3c:	0800db9d 	.word	0x0800db9d
 800db40:	2b40      	cmp	r3, #64	@ 0x40
 800db42:	d02e      	beq.n	800dba2 <UART_SetConfig+0xab2>
 800db44:	e031      	b.n	800dbaa <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800db46:	f7fc f863 	bl	8009c10 <HAL_RCC_GetPCLK1Freq>
 800db4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800db4c:	e033      	b.n	800dbb6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800db4e:	f7fc f875 	bl	8009c3c <HAL_RCC_GetPCLK2Freq>
 800db52:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800db54:	e02f      	b.n	800dbb6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800db56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800db5a:	4618      	mov	r0, r3
 800db5c:	f7fd ff4e 	bl	800b9fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800db60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db64:	e027      	b.n	800dbb6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800db66:	f107 0318 	add.w	r3, r7, #24
 800db6a:	4618      	mov	r0, r3
 800db6c:	f7fe f89a 	bl	800bca4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800db70:	69fb      	ldr	r3, [r7, #28]
 800db72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db74:	e01f      	b.n	800dbb6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800db76:	4b69      	ldr	r3, [pc, #420]	@ (800dd1c <UART_SetConfig+0xc2c>)
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	f003 0320 	and.w	r3, r3, #32
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d009      	beq.n	800db96 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800db82:	4b66      	ldr	r3, [pc, #408]	@ (800dd1c <UART_SetConfig+0xc2c>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	08db      	lsrs	r3, r3, #3
 800db88:	f003 0303 	and.w	r3, r3, #3
 800db8c:	4a64      	ldr	r2, [pc, #400]	@ (800dd20 <UART_SetConfig+0xc30>)
 800db8e:	fa22 f303 	lsr.w	r3, r2, r3
 800db92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800db94:	e00f      	b.n	800dbb6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800db96:	4b62      	ldr	r3, [pc, #392]	@ (800dd20 <UART_SetConfig+0xc30>)
 800db98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db9a:	e00c      	b.n	800dbb6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800db9c:	4b61      	ldr	r3, [pc, #388]	@ (800dd24 <UART_SetConfig+0xc34>)
 800db9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dba0:	e009      	b.n	800dbb6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dba2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dba8:	e005      	b.n	800dbb6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800dbaa:	2300      	movs	r3, #0
 800dbac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800dbae:	2301      	movs	r3, #1
 800dbb0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800dbb4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800dbb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	f000 80ea 	beq.w	800dd92 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbc2:	4a55      	ldr	r2, [pc, #340]	@ (800dd18 <UART_SetConfig+0xc28>)
 800dbc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dbc8:	461a      	mov	r2, r3
 800dbca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbcc:	fbb3 f3f2 	udiv	r3, r3, r2
 800dbd0:	005a      	lsls	r2, r3, #1
 800dbd2:	697b      	ldr	r3, [r7, #20]
 800dbd4:	685b      	ldr	r3, [r3, #4]
 800dbd6:	085b      	lsrs	r3, r3, #1
 800dbd8:	441a      	add	r2, r3
 800dbda:	697b      	ldr	r3, [r7, #20]
 800dbdc:	685b      	ldr	r3, [r3, #4]
 800dbde:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbe2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dbe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbe6:	2b0f      	cmp	r3, #15
 800dbe8:	d916      	bls.n	800dc18 <UART_SetConfig+0xb28>
 800dbea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dbf0:	d212      	bcs.n	800dc18 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dbf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbf4:	b29b      	uxth	r3, r3
 800dbf6:	f023 030f 	bic.w	r3, r3, #15
 800dbfa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dbfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbfe:	085b      	lsrs	r3, r3, #1
 800dc00:	b29b      	uxth	r3, r3
 800dc02:	f003 0307 	and.w	r3, r3, #7
 800dc06:	b29a      	uxth	r2, r3
 800dc08:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800dc0a:	4313      	orrs	r3, r2
 800dc0c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800dc0e:	697b      	ldr	r3, [r7, #20]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800dc14:	60da      	str	r2, [r3, #12]
 800dc16:	e0bc      	b.n	800dd92 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800dc18:	2301      	movs	r3, #1
 800dc1a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800dc1e:	e0b8      	b.n	800dd92 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800dc20:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800dc24:	2b20      	cmp	r3, #32
 800dc26:	dc4b      	bgt.n	800dcc0 <UART_SetConfig+0xbd0>
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	f2c0 8087 	blt.w	800dd3c <UART_SetConfig+0xc4c>
 800dc2e:	2b20      	cmp	r3, #32
 800dc30:	f200 8084 	bhi.w	800dd3c <UART_SetConfig+0xc4c>
 800dc34:	a201      	add	r2, pc, #4	@ (adr r2, 800dc3c <UART_SetConfig+0xb4c>)
 800dc36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc3a:	bf00      	nop
 800dc3c:	0800dcc7 	.word	0x0800dcc7
 800dc40:	0800dccf 	.word	0x0800dccf
 800dc44:	0800dd3d 	.word	0x0800dd3d
 800dc48:	0800dd3d 	.word	0x0800dd3d
 800dc4c:	0800dcd7 	.word	0x0800dcd7
 800dc50:	0800dd3d 	.word	0x0800dd3d
 800dc54:	0800dd3d 	.word	0x0800dd3d
 800dc58:	0800dd3d 	.word	0x0800dd3d
 800dc5c:	0800dce7 	.word	0x0800dce7
 800dc60:	0800dd3d 	.word	0x0800dd3d
 800dc64:	0800dd3d 	.word	0x0800dd3d
 800dc68:	0800dd3d 	.word	0x0800dd3d
 800dc6c:	0800dd3d 	.word	0x0800dd3d
 800dc70:	0800dd3d 	.word	0x0800dd3d
 800dc74:	0800dd3d 	.word	0x0800dd3d
 800dc78:	0800dd3d 	.word	0x0800dd3d
 800dc7c:	0800dcf7 	.word	0x0800dcf7
 800dc80:	0800dd3d 	.word	0x0800dd3d
 800dc84:	0800dd3d 	.word	0x0800dd3d
 800dc88:	0800dd3d 	.word	0x0800dd3d
 800dc8c:	0800dd3d 	.word	0x0800dd3d
 800dc90:	0800dd3d 	.word	0x0800dd3d
 800dc94:	0800dd3d 	.word	0x0800dd3d
 800dc98:	0800dd3d 	.word	0x0800dd3d
 800dc9c:	0800dd3d 	.word	0x0800dd3d
 800dca0:	0800dd3d 	.word	0x0800dd3d
 800dca4:	0800dd3d 	.word	0x0800dd3d
 800dca8:	0800dd3d 	.word	0x0800dd3d
 800dcac:	0800dd3d 	.word	0x0800dd3d
 800dcb0:	0800dd3d 	.word	0x0800dd3d
 800dcb4:	0800dd3d 	.word	0x0800dd3d
 800dcb8:	0800dd3d 	.word	0x0800dd3d
 800dcbc:	0800dd2f 	.word	0x0800dd2f
 800dcc0:	2b40      	cmp	r3, #64	@ 0x40
 800dcc2:	d037      	beq.n	800dd34 <UART_SetConfig+0xc44>
 800dcc4:	e03a      	b.n	800dd3c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dcc6:	f7fb ffa3 	bl	8009c10 <HAL_RCC_GetPCLK1Freq>
 800dcca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dccc:	e03c      	b.n	800dd48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dcce:	f7fb ffb5 	bl	8009c3c <HAL_RCC_GetPCLK2Freq>
 800dcd2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dcd4:	e038      	b.n	800dd48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dcd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f7fd fe8e 	bl	800b9fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dce4:	e030      	b.n	800dd48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dce6:	f107 0318 	add.w	r3, r7, #24
 800dcea:	4618      	mov	r0, r3
 800dcec:	f7fd ffda 	bl	800bca4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dcf0:	69fb      	ldr	r3, [r7, #28]
 800dcf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dcf4:	e028      	b.n	800dd48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dcf6:	4b09      	ldr	r3, [pc, #36]	@ (800dd1c <UART_SetConfig+0xc2c>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	f003 0320 	and.w	r3, r3, #32
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d012      	beq.n	800dd28 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dd02:	4b06      	ldr	r3, [pc, #24]	@ (800dd1c <UART_SetConfig+0xc2c>)
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	08db      	lsrs	r3, r3, #3
 800dd08:	f003 0303 	and.w	r3, r3, #3
 800dd0c:	4a04      	ldr	r2, [pc, #16]	@ (800dd20 <UART_SetConfig+0xc30>)
 800dd0e:	fa22 f303 	lsr.w	r3, r2, r3
 800dd12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dd14:	e018      	b.n	800dd48 <UART_SetConfig+0xc58>
 800dd16:	bf00      	nop
 800dd18:	0802bf04 	.word	0x0802bf04
 800dd1c:	58024400 	.word	0x58024400
 800dd20:	03d09000 	.word	0x03d09000
 800dd24:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800dd28:	4b24      	ldr	r3, [pc, #144]	@ (800ddbc <UART_SetConfig+0xccc>)
 800dd2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd2c:	e00c      	b.n	800dd48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dd2e:	4b24      	ldr	r3, [pc, #144]	@ (800ddc0 <UART_SetConfig+0xcd0>)
 800dd30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd32:	e009      	b.n	800dd48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dd34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dd38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd3a:	e005      	b.n	800dd48 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800dd40:	2301      	movs	r3, #1
 800dd42:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800dd46:	bf00      	nop
    }

    if (pclk != 0U)
 800dd48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d021      	beq.n	800dd92 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dd4e:	697b      	ldr	r3, [r7, #20]
 800dd50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd52:	4a1c      	ldr	r2, [pc, #112]	@ (800ddc4 <UART_SetConfig+0xcd4>)
 800dd54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dd58:	461a      	mov	r2, r3
 800dd5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd5c:	fbb3 f2f2 	udiv	r2, r3, r2
 800dd60:	697b      	ldr	r3, [r7, #20]
 800dd62:	685b      	ldr	r3, [r3, #4]
 800dd64:	085b      	lsrs	r3, r3, #1
 800dd66:	441a      	add	r2, r3
 800dd68:	697b      	ldr	r3, [r7, #20]
 800dd6a:	685b      	ldr	r3, [r3, #4]
 800dd6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd70:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dd72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd74:	2b0f      	cmp	r3, #15
 800dd76:	d909      	bls.n	800dd8c <UART_SetConfig+0xc9c>
 800dd78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dd7e:	d205      	bcs.n	800dd8c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800dd80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd82:	b29a      	uxth	r2, r3
 800dd84:	697b      	ldr	r3, [r7, #20]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	60da      	str	r2, [r3, #12]
 800dd8a:	e002      	b.n	800dd92 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800dd92:	697b      	ldr	r3, [r7, #20]
 800dd94:	2201      	movs	r2, #1
 800dd96:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800dd9a:	697b      	ldr	r3, [r7, #20]
 800dd9c:	2201      	movs	r2, #1
 800dd9e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dda2:	697b      	ldr	r3, [r7, #20]
 800dda4:	2200      	movs	r2, #0
 800dda6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800dda8:	697b      	ldr	r3, [r7, #20]
 800ddaa:	2200      	movs	r2, #0
 800ddac:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ddae:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	3748      	adds	r7, #72	@ 0x48
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ddbc:	03d09000 	.word	0x03d09000
 800ddc0:	003d0900 	.word	0x003d0900
 800ddc4:	0802bf04 	.word	0x0802bf04

0800ddc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ddc8:	b480      	push	{r7}
 800ddca:	b083      	sub	sp, #12
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddd4:	f003 0308 	and.w	r3, r3, #8
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d00a      	beq.n	800ddf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	685b      	ldr	r3, [r3, #4]
 800dde2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	430a      	orrs	r2, r1
 800ddf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddf6:	f003 0301 	and.w	r3, r3, #1
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d00a      	beq.n	800de14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	685b      	ldr	r3, [r3, #4]
 800de04:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	430a      	orrs	r2, r1
 800de12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de18:	f003 0302 	and.w	r3, r3, #2
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d00a      	beq.n	800de36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	685b      	ldr	r3, [r3, #4]
 800de26:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	430a      	orrs	r2, r1
 800de34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de3a:	f003 0304 	and.w	r3, r3, #4
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d00a      	beq.n	800de58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	685b      	ldr	r3, [r3, #4]
 800de48:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	430a      	orrs	r2, r1
 800de56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de5c:	f003 0310 	and.w	r3, r3, #16
 800de60:	2b00      	cmp	r3, #0
 800de62:	d00a      	beq.n	800de7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	689b      	ldr	r3, [r3, #8]
 800de6a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	430a      	orrs	r2, r1
 800de78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de7e:	f003 0320 	and.w	r3, r3, #32
 800de82:	2b00      	cmp	r3, #0
 800de84:	d00a      	beq.n	800de9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	689b      	ldr	r3, [r3, #8]
 800de8c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	430a      	orrs	r2, r1
 800de9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dea0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d01a      	beq.n	800dede <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	685b      	ldr	r3, [r3, #4]
 800deae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	430a      	orrs	r2, r1
 800debc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dec2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dec6:	d10a      	bne.n	800dede <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	685b      	ldr	r3, [r3, #4]
 800dece:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	430a      	orrs	r2, r1
 800dedc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d00a      	beq.n	800df00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	685b      	ldr	r3, [r3, #4]
 800def0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	430a      	orrs	r2, r1
 800defe:	605a      	str	r2, [r3, #4]
  }
}
 800df00:	bf00      	nop
 800df02:	370c      	adds	r7, #12
 800df04:	46bd      	mov	sp, r7
 800df06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0a:	4770      	bx	lr

0800df0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b098      	sub	sp, #96	@ 0x60
 800df10:	af02      	add	r7, sp, #8
 800df12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	2200      	movs	r2, #0
 800df18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800df1c:	f7f6 faee 	bl	80044fc <HAL_GetTick>
 800df20:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	f003 0308 	and.w	r3, r3, #8
 800df2c:	2b08      	cmp	r3, #8
 800df2e:	d12f      	bne.n	800df90 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800df30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800df34:	9300      	str	r3, [sp, #0]
 800df36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800df38:	2200      	movs	r2, #0
 800df3a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800df3e:	6878      	ldr	r0, [r7, #4]
 800df40:	f000 f88e 	bl	800e060 <UART_WaitOnFlagUntilTimeout>
 800df44:	4603      	mov	r3, r0
 800df46:	2b00      	cmp	r3, #0
 800df48:	d022      	beq.n	800df90 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df52:	e853 3f00 	ldrex	r3, [r3]
 800df56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800df58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800df5e:	653b      	str	r3, [r7, #80]	@ 0x50
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	461a      	mov	r2, r3
 800df66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df68:	647b      	str	r3, [r7, #68]	@ 0x44
 800df6a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800df6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800df70:	e841 2300 	strex	r3, r2, [r1]
 800df74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800df76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d1e6      	bne.n	800df4a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2220      	movs	r2, #32
 800df80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	2200      	movs	r2, #0
 800df88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800df8c:	2303      	movs	r3, #3
 800df8e:	e063      	b.n	800e058 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	f003 0304 	and.w	r3, r3, #4
 800df9a:	2b04      	cmp	r3, #4
 800df9c:	d149      	bne.n	800e032 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800df9e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800dfa2:	9300      	str	r3, [sp, #0]
 800dfa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800dfac:	6878      	ldr	r0, [r7, #4]
 800dfae:	f000 f857 	bl	800e060 <UART_WaitOnFlagUntilTimeout>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d03c      	beq.n	800e032 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfc0:	e853 3f00 	ldrex	r3, [r3]
 800dfc4:	623b      	str	r3, [r7, #32]
   return(result);
 800dfc6:	6a3b      	ldr	r3, [r7, #32]
 800dfc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dfcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	461a      	mov	r2, r3
 800dfd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dfd6:	633b      	str	r3, [r7, #48]	@ 0x30
 800dfd8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dfdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dfde:	e841 2300 	strex	r3, r2, [r1]
 800dfe2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dfe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d1e6      	bne.n	800dfb8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	3308      	adds	r3, #8
 800dff0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dff2:	693b      	ldr	r3, [r7, #16]
 800dff4:	e853 3f00 	ldrex	r3, [r3]
 800dff8:	60fb      	str	r3, [r7, #12]
   return(result);
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	f023 0301 	bic.w	r3, r3, #1
 800e000:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	3308      	adds	r3, #8
 800e008:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e00a:	61fa      	str	r2, [r7, #28]
 800e00c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e00e:	69b9      	ldr	r1, [r7, #24]
 800e010:	69fa      	ldr	r2, [r7, #28]
 800e012:	e841 2300 	strex	r3, r2, [r1]
 800e016:	617b      	str	r3, [r7, #20]
   return(result);
 800e018:	697b      	ldr	r3, [r7, #20]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d1e5      	bne.n	800dfea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	2220      	movs	r2, #32
 800e022:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	2200      	movs	r2, #0
 800e02a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e02e:	2303      	movs	r3, #3
 800e030:	e012      	b.n	800e058 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	2220      	movs	r2, #32
 800e036:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	2220      	movs	r2, #32
 800e03e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	2200      	movs	r2, #0
 800e046:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2200      	movs	r2, #0
 800e04c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	2200      	movs	r2, #0
 800e052:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e056:	2300      	movs	r3, #0
}
 800e058:	4618      	mov	r0, r3
 800e05a:	3758      	adds	r7, #88	@ 0x58
 800e05c:	46bd      	mov	sp, r7
 800e05e:	bd80      	pop	{r7, pc}

0800e060 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b084      	sub	sp, #16
 800e064:	af00      	add	r7, sp, #0
 800e066:	60f8      	str	r0, [r7, #12]
 800e068:	60b9      	str	r1, [r7, #8]
 800e06a:	603b      	str	r3, [r7, #0]
 800e06c:	4613      	mov	r3, r2
 800e06e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e070:	e04f      	b.n	800e112 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e072:	69bb      	ldr	r3, [r7, #24]
 800e074:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e078:	d04b      	beq.n	800e112 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e07a:	f7f6 fa3f 	bl	80044fc <HAL_GetTick>
 800e07e:	4602      	mov	r2, r0
 800e080:	683b      	ldr	r3, [r7, #0]
 800e082:	1ad3      	subs	r3, r2, r3
 800e084:	69ba      	ldr	r2, [r7, #24]
 800e086:	429a      	cmp	r2, r3
 800e088:	d302      	bcc.n	800e090 <UART_WaitOnFlagUntilTimeout+0x30>
 800e08a:	69bb      	ldr	r3, [r7, #24]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d101      	bne.n	800e094 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e090:	2303      	movs	r3, #3
 800e092:	e04e      	b.n	800e132 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	f003 0304 	and.w	r3, r3, #4
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d037      	beq.n	800e112 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e0a2:	68bb      	ldr	r3, [r7, #8]
 800e0a4:	2b80      	cmp	r3, #128	@ 0x80
 800e0a6:	d034      	beq.n	800e112 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e0a8:	68bb      	ldr	r3, [r7, #8]
 800e0aa:	2b40      	cmp	r3, #64	@ 0x40
 800e0ac:	d031      	beq.n	800e112 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	69db      	ldr	r3, [r3, #28]
 800e0b4:	f003 0308 	and.w	r3, r3, #8
 800e0b8:	2b08      	cmp	r3, #8
 800e0ba:	d110      	bne.n	800e0de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	2208      	movs	r2, #8
 800e0c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e0c4:	68f8      	ldr	r0, [r7, #12]
 800e0c6:	f000 f839 	bl	800e13c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	2208      	movs	r2, #8
 800e0ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e0da:	2301      	movs	r3, #1
 800e0dc:	e029      	b.n	800e132 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	69db      	ldr	r3, [r3, #28]
 800e0e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e0e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e0ec:	d111      	bne.n	800e112 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e0f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e0f8:	68f8      	ldr	r0, [r7, #12]
 800e0fa:	f000 f81f 	bl	800e13c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	2220      	movs	r2, #32
 800e102:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	2200      	movs	r2, #0
 800e10a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e10e:	2303      	movs	r3, #3
 800e110:	e00f      	b.n	800e132 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	69da      	ldr	r2, [r3, #28]
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	4013      	ands	r3, r2
 800e11c:	68ba      	ldr	r2, [r7, #8]
 800e11e:	429a      	cmp	r2, r3
 800e120:	bf0c      	ite	eq
 800e122:	2301      	moveq	r3, #1
 800e124:	2300      	movne	r3, #0
 800e126:	b2db      	uxtb	r3, r3
 800e128:	461a      	mov	r2, r3
 800e12a:	79fb      	ldrb	r3, [r7, #7]
 800e12c:	429a      	cmp	r2, r3
 800e12e:	d0a0      	beq.n	800e072 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e130:	2300      	movs	r3, #0
}
 800e132:	4618      	mov	r0, r3
 800e134:	3710      	adds	r7, #16
 800e136:	46bd      	mov	sp, r7
 800e138:	bd80      	pop	{r7, pc}
	...

0800e13c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e13c:	b480      	push	{r7}
 800e13e:	b095      	sub	sp, #84	@ 0x54
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e14a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e14c:	e853 3f00 	ldrex	r3, [r3]
 800e150:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e154:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e158:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	461a      	mov	r2, r3
 800e160:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e162:	643b      	str	r3, [r7, #64]	@ 0x40
 800e164:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e166:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e168:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e16a:	e841 2300 	strex	r3, r2, [r1]
 800e16e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e172:	2b00      	cmp	r3, #0
 800e174:	d1e6      	bne.n	800e144 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	3308      	adds	r3, #8
 800e17c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e17e:	6a3b      	ldr	r3, [r7, #32]
 800e180:	e853 3f00 	ldrex	r3, [r3]
 800e184:	61fb      	str	r3, [r7, #28]
   return(result);
 800e186:	69fa      	ldr	r2, [r7, #28]
 800e188:	4b1e      	ldr	r3, [pc, #120]	@ (800e204 <UART_EndRxTransfer+0xc8>)
 800e18a:	4013      	ands	r3, r2
 800e18c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	3308      	adds	r3, #8
 800e194:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e196:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e198:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e19a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e19c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e19e:	e841 2300 	strex	r3, r2, [r1]
 800e1a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e1a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d1e5      	bne.n	800e176 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e1ae:	2b01      	cmp	r3, #1
 800e1b0:	d118      	bne.n	800e1e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	e853 3f00 	ldrex	r3, [r3]
 800e1be:	60bb      	str	r3, [r7, #8]
   return(result);
 800e1c0:	68bb      	ldr	r3, [r7, #8]
 800e1c2:	f023 0310 	bic.w	r3, r3, #16
 800e1c6:	647b      	str	r3, [r7, #68]	@ 0x44
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	461a      	mov	r2, r3
 800e1ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1d0:	61bb      	str	r3, [r7, #24]
 800e1d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1d4:	6979      	ldr	r1, [r7, #20]
 800e1d6:	69ba      	ldr	r2, [r7, #24]
 800e1d8:	e841 2300 	strex	r3, r2, [r1]
 800e1dc:	613b      	str	r3, [r7, #16]
   return(result);
 800e1de:	693b      	ldr	r3, [r7, #16]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d1e6      	bne.n	800e1b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	2220      	movs	r2, #32
 800e1e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e1f8:	bf00      	nop
 800e1fa:	3754      	adds	r7, #84	@ 0x54
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e202:	4770      	bx	lr
 800e204:	effffffe 	.word	0xeffffffe

0800e208 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e208:	b480      	push	{r7}
 800e20a:	b085      	sub	sp, #20
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e216:	2b01      	cmp	r3, #1
 800e218:	d101      	bne.n	800e21e <HAL_UARTEx_DisableFifoMode+0x16>
 800e21a:	2302      	movs	r3, #2
 800e21c:	e027      	b.n	800e26e <HAL_UARTEx_DisableFifoMode+0x66>
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	2201      	movs	r2, #1
 800e222:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2224      	movs	r2, #36	@ 0x24
 800e22a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	681a      	ldr	r2, [r3, #0]
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	f022 0201 	bic.w	r2, r2, #1
 800e244:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e24c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	2200      	movs	r2, #0
 800e252:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	68fa      	ldr	r2, [r7, #12]
 800e25a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2220      	movs	r2, #32
 800e260:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	2200      	movs	r2, #0
 800e268:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e26c:	2300      	movs	r3, #0
}
 800e26e:	4618      	mov	r0, r3
 800e270:	3714      	adds	r7, #20
 800e272:	46bd      	mov	sp, r7
 800e274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e278:	4770      	bx	lr

0800e27a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e27a:	b580      	push	{r7, lr}
 800e27c:	b084      	sub	sp, #16
 800e27e:	af00      	add	r7, sp, #0
 800e280:	6078      	str	r0, [r7, #4]
 800e282:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e28a:	2b01      	cmp	r3, #1
 800e28c:	d101      	bne.n	800e292 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e28e:	2302      	movs	r3, #2
 800e290:	e02d      	b.n	800e2ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	2201      	movs	r2, #1
 800e296:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	2224      	movs	r2, #36	@ 0x24
 800e29e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	681a      	ldr	r2, [r3, #0]
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	f022 0201 	bic.w	r2, r2, #1
 800e2b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	689b      	ldr	r3, [r3, #8]
 800e2c0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	683a      	ldr	r2, [r7, #0]
 800e2ca:	430a      	orrs	r2, r1
 800e2cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e2ce:	6878      	ldr	r0, [r7, #4]
 800e2d0:	f000 f850 	bl	800e374 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	68fa      	ldr	r2, [r7, #12]
 800e2da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	2220      	movs	r2, #32
 800e2e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e2ec:	2300      	movs	r3, #0
}
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	3710      	adds	r7, #16
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bd80      	pop	{r7, pc}

0800e2f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e2f6:	b580      	push	{r7, lr}
 800e2f8:	b084      	sub	sp, #16
 800e2fa:	af00      	add	r7, sp, #0
 800e2fc:	6078      	str	r0, [r7, #4]
 800e2fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e306:	2b01      	cmp	r3, #1
 800e308:	d101      	bne.n	800e30e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e30a:	2302      	movs	r3, #2
 800e30c:	e02d      	b.n	800e36a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	2201      	movs	r2, #1
 800e312:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	2224      	movs	r2, #36	@ 0x24
 800e31a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	681a      	ldr	r2, [r3, #0]
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	f022 0201 	bic.w	r2, r2, #1
 800e334:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	689b      	ldr	r3, [r3, #8]
 800e33c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	683a      	ldr	r2, [r7, #0]
 800e346:	430a      	orrs	r2, r1
 800e348:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	f000 f812 	bl	800e374 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	68fa      	ldr	r2, [r7, #12]
 800e356:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	2220      	movs	r2, #32
 800e35c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2200      	movs	r2, #0
 800e364:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e368:	2300      	movs	r3, #0
}
 800e36a:	4618      	mov	r0, r3
 800e36c:	3710      	adds	r7, #16
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}
	...

0800e374 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e374:	b480      	push	{r7}
 800e376:	b085      	sub	sp, #20
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e380:	2b00      	cmp	r3, #0
 800e382:	d108      	bne.n	800e396 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	2201      	movs	r2, #1
 800e388:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2201      	movs	r2, #1
 800e390:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e394:	e031      	b.n	800e3fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e396:	2310      	movs	r3, #16
 800e398:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e39a:	2310      	movs	r3, #16
 800e39c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	689b      	ldr	r3, [r3, #8]
 800e3a4:	0e5b      	lsrs	r3, r3, #25
 800e3a6:	b2db      	uxtb	r3, r3
 800e3a8:	f003 0307 	and.w	r3, r3, #7
 800e3ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	689b      	ldr	r3, [r3, #8]
 800e3b4:	0f5b      	lsrs	r3, r3, #29
 800e3b6:	b2db      	uxtb	r3, r3
 800e3b8:	f003 0307 	and.w	r3, r3, #7
 800e3bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e3be:	7bbb      	ldrb	r3, [r7, #14]
 800e3c0:	7b3a      	ldrb	r2, [r7, #12]
 800e3c2:	4911      	ldr	r1, [pc, #68]	@ (800e408 <UARTEx_SetNbDataToProcess+0x94>)
 800e3c4:	5c8a      	ldrb	r2, [r1, r2]
 800e3c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e3ca:	7b3a      	ldrb	r2, [r7, #12]
 800e3cc:	490f      	ldr	r1, [pc, #60]	@ (800e40c <UARTEx_SetNbDataToProcess+0x98>)
 800e3ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e3d0:	fb93 f3f2 	sdiv	r3, r3, r2
 800e3d4:	b29a      	uxth	r2, r3
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e3dc:	7bfb      	ldrb	r3, [r7, #15]
 800e3de:	7b7a      	ldrb	r2, [r7, #13]
 800e3e0:	4909      	ldr	r1, [pc, #36]	@ (800e408 <UARTEx_SetNbDataToProcess+0x94>)
 800e3e2:	5c8a      	ldrb	r2, [r1, r2]
 800e3e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e3e8:	7b7a      	ldrb	r2, [r7, #13]
 800e3ea:	4908      	ldr	r1, [pc, #32]	@ (800e40c <UARTEx_SetNbDataToProcess+0x98>)
 800e3ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e3ee:	fb93 f3f2 	sdiv	r3, r3, r2
 800e3f2:	b29a      	uxth	r2, r3
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e3fa:	bf00      	nop
 800e3fc:	3714      	adds	r7, #20
 800e3fe:	46bd      	mov	sp, r7
 800e400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e404:	4770      	bx	lr
 800e406:	bf00      	nop
 800e408:	0802bf1c 	.word	0x0802bf1c
 800e40c:	0802bf24 	.word	0x0802bf24

0800e410 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 800e410:	b480      	push	{r7}
 800e412:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 800e414:	bf00      	nop
 800e416:	46bd      	mov	sp, r7
 800e418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41c:	4770      	bx	lr
	...

0800e420 <__NVIC_SetPriority>:
{
 800e420:	b480      	push	{r7}
 800e422:	b083      	sub	sp, #12
 800e424:	af00      	add	r7, sp, #0
 800e426:	4603      	mov	r3, r0
 800e428:	6039      	str	r1, [r7, #0]
 800e42a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800e42c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e430:	2b00      	cmp	r3, #0
 800e432:	db0a      	blt.n	800e44a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	b2da      	uxtb	r2, r3
 800e438:	490c      	ldr	r1, [pc, #48]	@ (800e46c <__NVIC_SetPriority+0x4c>)
 800e43a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e43e:	0112      	lsls	r2, r2, #4
 800e440:	b2d2      	uxtb	r2, r2
 800e442:	440b      	add	r3, r1
 800e444:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800e448:	e00a      	b.n	800e460 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e44a:	683b      	ldr	r3, [r7, #0]
 800e44c:	b2da      	uxtb	r2, r3
 800e44e:	4908      	ldr	r1, [pc, #32]	@ (800e470 <__NVIC_SetPriority+0x50>)
 800e450:	88fb      	ldrh	r3, [r7, #6]
 800e452:	f003 030f 	and.w	r3, r3, #15
 800e456:	3b04      	subs	r3, #4
 800e458:	0112      	lsls	r2, r2, #4
 800e45a:	b2d2      	uxtb	r2, r2
 800e45c:	440b      	add	r3, r1
 800e45e:	761a      	strb	r2, [r3, #24]
}
 800e460:	bf00      	nop
 800e462:	370c      	adds	r7, #12
 800e464:	46bd      	mov	sp, r7
 800e466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46a:	4770      	bx	lr
 800e46c:	e000e100 	.word	0xe000e100
 800e470:	e000ed00 	.word	0xe000ed00

0800e474 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e474:	b580      	push	{r7, lr}
 800e476:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800e478:	4b05      	ldr	r3, [pc, #20]	@ (800e490 <SysTick_Handler+0x1c>)
 800e47a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e47c:	f002 fac8 	bl	8010a10 <xTaskGetSchedulerState>
 800e480:	4603      	mov	r3, r0
 800e482:	2b01      	cmp	r3, #1
 800e484:	d001      	beq.n	800e48a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800e486:	f003 f9bf 	bl	8011808 <xPortSysTickHandler>
  }
}
 800e48a:	bf00      	nop
 800e48c:	bd80      	pop	{r7, pc}
 800e48e:	bf00      	nop
 800e490:	e000e010 	.word	0xe000e010

0800e494 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e494:	b580      	push	{r7, lr}
 800e496:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800e498:	2100      	movs	r1, #0
 800e49a:	f06f 0004 	mvn.w	r0, #4
 800e49e:	f7ff ffbf 	bl	800e420 <__NVIC_SetPriority>
#endif
}
 800e4a2:	bf00      	nop
 800e4a4:	bd80      	pop	{r7, pc}
	...

0800e4a8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e4a8:	b480      	push	{r7}
 800e4aa:	b083      	sub	sp, #12
 800e4ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e4ae:	f3ef 8305 	mrs	r3, IPSR
 800e4b2:	603b      	str	r3, [r7, #0]
  return(result);
 800e4b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d003      	beq.n	800e4c2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800e4ba:	f06f 0305 	mvn.w	r3, #5
 800e4be:	607b      	str	r3, [r7, #4]
 800e4c0:	e00c      	b.n	800e4dc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e4c2:	4b0a      	ldr	r3, [pc, #40]	@ (800e4ec <osKernelInitialize+0x44>)
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d105      	bne.n	800e4d6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e4ca:	4b08      	ldr	r3, [pc, #32]	@ (800e4ec <osKernelInitialize+0x44>)
 800e4cc:	2201      	movs	r2, #1
 800e4ce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	607b      	str	r3, [r7, #4]
 800e4d4:	e002      	b.n	800e4dc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800e4d6:	f04f 33ff 	mov.w	r3, #4294967295
 800e4da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e4dc:	687b      	ldr	r3, [r7, #4]
}
 800e4de:	4618      	mov	r0, r3
 800e4e0:	370c      	adds	r7, #12
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e8:	4770      	bx	lr
 800e4ea:	bf00      	nop
 800e4ec:	240008f0 	.word	0x240008f0

0800e4f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b082      	sub	sp, #8
 800e4f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e4f6:	f3ef 8305 	mrs	r3, IPSR
 800e4fa:	603b      	str	r3, [r7, #0]
  return(result);
 800e4fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d003      	beq.n	800e50a <osKernelStart+0x1a>
    stat = osErrorISR;
 800e502:	f06f 0305 	mvn.w	r3, #5
 800e506:	607b      	str	r3, [r7, #4]
 800e508:	e010      	b.n	800e52c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e50a:	4b0b      	ldr	r3, [pc, #44]	@ (800e538 <osKernelStart+0x48>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	2b01      	cmp	r3, #1
 800e510:	d109      	bne.n	800e526 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e512:	f7ff ffbf 	bl	800e494 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e516:	4b08      	ldr	r3, [pc, #32]	@ (800e538 <osKernelStart+0x48>)
 800e518:	2202      	movs	r2, #2
 800e51a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e51c:	f001 fe14 	bl	8010148 <vTaskStartScheduler>
      stat = osOK;
 800e520:	2300      	movs	r3, #0
 800e522:	607b      	str	r3, [r7, #4]
 800e524:	e002      	b.n	800e52c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800e526:	f04f 33ff 	mov.w	r3, #4294967295
 800e52a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e52c:	687b      	ldr	r3, [r7, #4]
}
 800e52e:	4618      	mov	r0, r3
 800e530:	3708      	adds	r7, #8
 800e532:	46bd      	mov	sp, r7
 800e534:	bd80      	pop	{r7, pc}
 800e536:	bf00      	nop
 800e538:	240008f0 	.word	0x240008f0

0800e53c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b08e      	sub	sp, #56	@ 0x38
 800e540:	af04      	add	r7, sp, #16
 800e542:	60f8      	str	r0, [r7, #12]
 800e544:	60b9      	str	r1, [r7, #8]
 800e546:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e548:	2300      	movs	r3, #0
 800e54a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e54c:	f3ef 8305 	mrs	r3, IPSR
 800e550:	617b      	str	r3, [r7, #20]
  return(result);
 800e552:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800e554:	2b00      	cmp	r3, #0
 800e556:	d17e      	bne.n	800e656 <osThreadNew+0x11a>
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d07b      	beq.n	800e656 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800e55e:	2380      	movs	r3, #128	@ 0x80
 800e560:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800e562:	2318      	movs	r3, #24
 800e564:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800e566:	2300      	movs	r3, #0
 800e568:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800e56a:	f04f 33ff 	mov.w	r3, #4294967295
 800e56e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d045      	beq.n	800e602 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d002      	beq.n	800e584 <osThreadNew+0x48>
        name = attr->name;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	699b      	ldr	r3, [r3, #24]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d002      	beq.n	800e592 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	699b      	ldr	r3, [r3, #24]
 800e590:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e592:	69fb      	ldr	r3, [r7, #28]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d008      	beq.n	800e5aa <osThreadNew+0x6e>
 800e598:	69fb      	ldr	r3, [r7, #28]
 800e59a:	2b38      	cmp	r3, #56	@ 0x38
 800e59c:	d805      	bhi.n	800e5aa <osThreadNew+0x6e>
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	685b      	ldr	r3, [r3, #4]
 800e5a2:	f003 0301 	and.w	r3, r3, #1
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d001      	beq.n	800e5ae <osThreadNew+0x72>
        return (NULL);
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	e054      	b.n	800e658 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	695b      	ldr	r3, [r3, #20]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d003      	beq.n	800e5be <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	695b      	ldr	r3, [r3, #20]
 800e5ba:	089b      	lsrs	r3, r3, #2
 800e5bc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	689b      	ldr	r3, [r3, #8]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d00e      	beq.n	800e5e4 <osThreadNew+0xa8>
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	68db      	ldr	r3, [r3, #12]
 800e5ca:	2ba7      	cmp	r3, #167	@ 0xa7
 800e5cc:	d90a      	bls.n	800e5e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d006      	beq.n	800e5e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	695b      	ldr	r3, [r3, #20]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d002      	beq.n	800e5e4 <osThreadNew+0xa8>
        mem = 1;
 800e5de:	2301      	movs	r3, #1
 800e5e0:	61bb      	str	r3, [r7, #24]
 800e5e2:	e010      	b.n	800e606 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	689b      	ldr	r3, [r3, #8]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d10c      	bne.n	800e606 <osThreadNew+0xca>
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	68db      	ldr	r3, [r3, #12]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d108      	bne.n	800e606 <osThreadNew+0xca>
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	691b      	ldr	r3, [r3, #16]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d104      	bne.n	800e606 <osThreadNew+0xca>
          mem = 0;
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	61bb      	str	r3, [r7, #24]
 800e600:	e001      	b.n	800e606 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800e602:	2300      	movs	r3, #0
 800e604:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e606:	69bb      	ldr	r3, [r7, #24]
 800e608:	2b01      	cmp	r3, #1
 800e60a:	d110      	bne.n	800e62e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e610:	687a      	ldr	r2, [r7, #4]
 800e612:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e614:	9202      	str	r2, [sp, #8]
 800e616:	9301      	str	r3, [sp, #4]
 800e618:	69fb      	ldr	r3, [r7, #28]
 800e61a:	9300      	str	r3, [sp, #0]
 800e61c:	68bb      	ldr	r3, [r7, #8]
 800e61e:	6a3a      	ldr	r2, [r7, #32]
 800e620:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e622:	68f8      	ldr	r0, [r7, #12]
 800e624:	f001 fb9c 	bl	800fd60 <xTaskCreateStatic>
 800e628:	4603      	mov	r3, r0
 800e62a:	613b      	str	r3, [r7, #16]
 800e62c:	e013      	b.n	800e656 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800e62e:	69bb      	ldr	r3, [r7, #24]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d110      	bne.n	800e656 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e634:	6a3b      	ldr	r3, [r7, #32]
 800e636:	b29a      	uxth	r2, r3
 800e638:	f107 0310 	add.w	r3, r7, #16
 800e63c:	9301      	str	r3, [sp, #4]
 800e63e:	69fb      	ldr	r3, [r7, #28]
 800e640:	9300      	str	r3, [sp, #0]
 800e642:	68bb      	ldr	r3, [r7, #8]
 800e644:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e646:	68f8      	ldr	r0, [r7, #12]
 800e648:	f001 fbea 	bl	800fe20 <xTaskCreate>
 800e64c:	4603      	mov	r3, r0
 800e64e:	2b01      	cmp	r3, #1
 800e650:	d001      	beq.n	800e656 <osThreadNew+0x11a>
            hTask = NULL;
 800e652:	2300      	movs	r3, #0
 800e654:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e656:	693b      	ldr	r3, [r7, #16]
}
 800e658:	4618      	mov	r0, r3
 800e65a:	3728      	adds	r7, #40	@ 0x28
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd80      	pop	{r7, pc}

0800e660 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800e660:	b580      	push	{r7, lr}
 800e662:	b084      	sub	sp, #16
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e668:	f3ef 8305 	mrs	r3, IPSR
 800e66c:	60bb      	str	r3, [r7, #8]
  return(result);
 800e66e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e670:	2b00      	cmp	r3, #0
 800e672:	d003      	beq.n	800e67c <osDelay+0x1c>
    stat = osErrorISR;
 800e674:	f06f 0305 	mvn.w	r3, #5
 800e678:	60fb      	str	r3, [r7, #12]
 800e67a:	e007      	b.n	800e68c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800e67c:	2300      	movs	r3, #0
 800e67e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d002      	beq.n	800e68c <osDelay+0x2c>
      vTaskDelay(ticks);
 800e686:	6878      	ldr	r0, [r7, #4]
 800e688:	f001 fd28 	bl	80100dc <vTaskDelay>
    }
  }

  return (stat);
 800e68c:	68fb      	ldr	r3, [r7, #12]
}
 800e68e:	4618      	mov	r0, r3
 800e690:	3710      	adds	r7, #16
 800e692:	46bd      	mov	sp, r7
 800e694:	bd80      	pop	{r7, pc}

0800e696 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800e696:	b580      	push	{r7, lr}
 800e698:	b08a      	sub	sp, #40	@ 0x28
 800e69a:	af02      	add	r7, sp, #8
 800e69c:	60f8      	str	r0, [r7, #12]
 800e69e:	60b9      	str	r1, [r7, #8]
 800e6a0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e6a6:	f3ef 8305 	mrs	r3, IPSR
 800e6aa:	613b      	str	r3, [r7, #16]
  return(result);
 800e6ac:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d175      	bne.n	800e79e <osSemaphoreNew+0x108>
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d072      	beq.n	800e79e <osSemaphoreNew+0x108>
 800e6b8:	68ba      	ldr	r2, [r7, #8]
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	d86e      	bhi.n	800e79e <osSemaphoreNew+0x108>
    mem = -1;
 800e6c0:	f04f 33ff 	mov.w	r3, #4294967295
 800e6c4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d015      	beq.n	800e6f8 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	689b      	ldr	r3, [r3, #8]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d006      	beq.n	800e6e2 <osSemaphoreNew+0x4c>
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	68db      	ldr	r3, [r3, #12]
 800e6d8:	2b4f      	cmp	r3, #79	@ 0x4f
 800e6da:	d902      	bls.n	800e6e2 <osSemaphoreNew+0x4c>
        mem = 1;
 800e6dc:	2301      	movs	r3, #1
 800e6de:	61bb      	str	r3, [r7, #24]
 800e6e0:	e00c      	b.n	800e6fc <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	689b      	ldr	r3, [r3, #8]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d108      	bne.n	800e6fc <osSemaphoreNew+0x66>
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	68db      	ldr	r3, [r3, #12]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d104      	bne.n	800e6fc <osSemaphoreNew+0x66>
          mem = 0;
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	61bb      	str	r3, [r7, #24]
 800e6f6:	e001      	b.n	800e6fc <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800e6fc:	69bb      	ldr	r3, [r7, #24]
 800e6fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e702:	d04c      	beq.n	800e79e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	2b01      	cmp	r3, #1
 800e708:	d128      	bne.n	800e75c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800e70a:	69bb      	ldr	r3, [r7, #24]
 800e70c:	2b01      	cmp	r3, #1
 800e70e:	d10a      	bne.n	800e726 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	689b      	ldr	r3, [r3, #8]
 800e714:	2203      	movs	r2, #3
 800e716:	9200      	str	r2, [sp, #0]
 800e718:	2200      	movs	r2, #0
 800e71a:	2100      	movs	r1, #0
 800e71c:	2001      	movs	r0, #1
 800e71e:	f000 fb5d 	bl	800eddc <xQueueGenericCreateStatic>
 800e722:	61f8      	str	r0, [r7, #28]
 800e724:	e005      	b.n	800e732 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800e726:	2203      	movs	r2, #3
 800e728:	2100      	movs	r1, #0
 800e72a:	2001      	movs	r0, #1
 800e72c:	f000 fbd3 	bl	800eed6 <xQueueGenericCreate>
 800e730:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800e732:	69fb      	ldr	r3, [r7, #28]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d022      	beq.n	800e77e <osSemaphoreNew+0xe8>
 800e738:	68bb      	ldr	r3, [r7, #8]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d01f      	beq.n	800e77e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e73e:	2300      	movs	r3, #0
 800e740:	2200      	movs	r2, #0
 800e742:	2100      	movs	r1, #0
 800e744:	69f8      	ldr	r0, [r7, #28]
 800e746:	f000 fc93 	bl	800f070 <xQueueGenericSend>
 800e74a:	4603      	mov	r3, r0
 800e74c:	2b01      	cmp	r3, #1
 800e74e:	d016      	beq.n	800e77e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800e750:	69f8      	ldr	r0, [r7, #28]
 800e752:	f001 f931 	bl	800f9b8 <vQueueDelete>
            hSemaphore = NULL;
 800e756:	2300      	movs	r3, #0
 800e758:	61fb      	str	r3, [r7, #28]
 800e75a:	e010      	b.n	800e77e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800e75c:	69bb      	ldr	r3, [r7, #24]
 800e75e:	2b01      	cmp	r3, #1
 800e760:	d108      	bne.n	800e774 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	689b      	ldr	r3, [r3, #8]
 800e766:	461a      	mov	r2, r3
 800e768:	68b9      	ldr	r1, [r7, #8]
 800e76a:	68f8      	ldr	r0, [r7, #12]
 800e76c:	f000 fc11 	bl	800ef92 <xQueueCreateCountingSemaphoreStatic>
 800e770:	61f8      	str	r0, [r7, #28]
 800e772:	e004      	b.n	800e77e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800e774:	68b9      	ldr	r1, [r7, #8]
 800e776:	68f8      	ldr	r0, [r7, #12]
 800e778:	f000 fc44 	bl	800f004 <xQueueCreateCountingSemaphore>
 800e77c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800e77e:	69fb      	ldr	r3, [r7, #28]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d00c      	beq.n	800e79e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d003      	beq.n	800e792 <osSemaphoreNew+0xfc>
          name = attr->name;
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	617b      	str	r3, [r7, #20]
 800e790:	e001      	b.n	800e796 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800e792:	2300      	movs	r3, #0
 800e794:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800e796:	6979      	ldr	r1, [r7, #20]
 800e798:	69f8      	ldr	r0, [r7, #28]
 800e79a:	f001 fa59 	bl	800fc50 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800e79e:	69fb      	ldr	r3, [r7, #28]
}
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	3720      	adds	r7, #32
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	bd80      	pop	{r7, pc}

0800e7a8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b086      	sub	sp, #24
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
 800e7b0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800e7ba:	693b      	ldr	r3, [r7, #16]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d103      	bne.n	800e7c8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800e7c0:	f06f 0303 	mvn.w	r3, #3
 800e7c4:	617b      	str	r3, [r7, #20]
 800e7c6:	e039      	b.n	800e83c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e7c8:	f3ef 8305 	mrs	r3, IPSR
 800e7cc:	60fb      	str	r3, [r7, #12]
  return(result);
 800e7ce:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d022      	beq.n	800e81a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800e7d4:	683b      	ldr	r3, [r7, #0]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d003      	beq.n	800e7e2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800e7da:	f06f 0303 	mvn.w	r3, #3
 800e7de:	617b      	str	r3, [r7, #20]
 800e7e0:	e02c      	b.n	800e83c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800e7e6:	f107 0308 	add.w	r3, r7, #8
 800e7ea:	461a      	mov	r2, r3
 800e7ec:	2100      	movs	r1, #0
 800e7ee:	6938      	ldr	r0, [r7, #16]
 800e7f0:	f001 f860 	bl	800f8b4 <xQueueReceiveFromISR>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	2b01      	cmp	r3, #1
 800e7f8:	d003      	beq.n	800e802 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800e7fa:	f06f 0302 	mvn.w	r3, #2
 800e7fe:	617b      	str	r3, [r7, #20]
 800e800:	e01c      	b.n	800e83c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d019      	beq.n	800e83c <osSemaphoreAcquire+0x94>
 800e808:	4b0f      	ldr	r3, [pc, #60]	@ (800e848 <osSemaphoreAcquire+0xa0>)
 800e80a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e80e:	601a      	str	r2, [r3, #0]
 800e810:	f3bf 8f4f 	dsb	sy
 800e814:	f3bf 8f6f 	isb	sy
 800e818:	e010      	b.n	800e83c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800e81a:	6839      	ldr	r1, [r7, #0]
 800e81c:	6938      	ldr	r0, [r7, #16]
 800e81e:	f000 ff39 	bl	800f694 <xQueueSemaphoreTake>
 800e822:	4603      	mov	r3, r0
 800e824:	2b01      	cmp	r3, #1
 800e826:	d009      	beq.n	800e83c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d003      	beq.n	800e836 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800e82e:	f06f 0301 	mvn.w	r3, #1
 800e832:	617b      	str	r3, [r7, #20]
 800e834:	e002      	b.n	800e83c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800e836:	f06f 0302 	mvn.w	r3, #2
 800e83a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800e83c:	697b      	ldr	r3, [r7, #20]
}
 800e83e:	4618      	mov	r0, r3
 800e840:	3718      	adds	r7, #24
 800e842:	46bd      	mov	sp, r7
 800e844:	bd80      	pop	{r7, pc}
 800e846:	bf00      	nop
 800e848:	e000ed04 	.word	0xe000ed04

0800e84c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b086      	sub	sp, #24
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e858:	2300      	movs	r3, #0
 800e85a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800e85c:	693b      	ldr	r3, [r7, #16]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d103      	bne.n	800e86a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800e862:	f06f 0303 	mvn.w	r3, #3
 800e866:	617b      	str	r3, [r7, #20]
 800e868:	e02c      	b.n	800e8c4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e86a:	f3ef 8305 	mrs	r3, IPSR
 800e86e:	60fb      	str	r3, [r7, #12]
  return(result);
 800e870:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800e872:	2b00      	cmp	r3, #0
 800e874:	d01a      	beq.n	800e8ac <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800e876:	2300      	movs	r3, #0
 800e878:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e87a:	f107 0308 	add.w	r3, r7, #8
 800e87e:	4619      	mov	r1, r3
 800e880:	6938      	ldr	r0, [r7, #16]
 800e882:	f000 fd95 	bl	800f3b0 <xQueueGiveFromISR>
 800e886:	4603      	mov	r3, r0
 800e888:	2b01      	cmp	r3, #1
 800e88a:	d003      	beq.n	800e894 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800e88c:	f06f 0302 	mvn.w	r3, #2
 800e890:	617b      	str	r3, [r7, #20]
 800e892:	e017      	b.n	800e8c4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800e894:	68bb      	ldr	r3, [r7, #8]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d014      	beq.n	800e8c4 <osSemaphoreRelease+0x78>
 800e89a:	4b0d      	ldr	r3, [pc, #52]	@ (800e8d0 <osSemaphoreRelease+0x84>)
 800e89c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e8a0:	601a      	str	r2, [r3, #0]
 800e8a2:	f3bf 8f4f 	dsb	sy
 800e8a6:	f3bf 8f6f 	isb	sy
 800e8aa:	e00b      	b.n	800e8c4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	2100      	movs	r1, #0
 800e8b2:	6938      	ldr	r0, [r7, #16]
 800e8b4:	f000 fbdc 	bl	800f070 <xQueueGenericSend>
 800e8b8:	4603      	mov	r3, r0
 800e8ba:	2b01      	cmp	r3, #1
 800e8bc:	d002      	beq.n	800e8c4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800e8be:	f06f 0302 	mvn.w	r3, #2
 800e8c2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800e8c4:	697b      	ldr	r3, [r7, #20]
}
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	3718      	adds	r7, #24
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	bd80      	pop	{r7, pc}
 800e8ce:	bf00      	nop
 800e8d0:	e000ed04 	.word	0xe000ed04

0800e8d4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b08a      	sub	sp, #40	@ 0x28
 800e8d8:	af02      	add	r7, sp, #8
 800e8da:	60f8      	str	r0, [r7, #12]
 800e8dc:	60b9      	str	r1, [r7, #8]
 800e8de:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e8e4:	f3ef 8305 	mrs	r3, IPSR
 800e8e8:	613b      	str	r3, [r7, #16]
  return(result);
 800e8ea:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d15f      	bne.n	800e9b0 <osMessageQueueNew+0xdc>
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d05c      	beq.n	800e9b0 <osMessageQueueNew+0xdc>
 800e8f6:	68bb      	ldr	r3, [r7, #8]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d059      	beq.n	800e9b0 <osMessageQueueNew+0xdc>
    mem = -1;
 800e8fc:	f04f 33ff 	mov.w	r3, #4294967295
 800e900:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d029      	beq.n	800e95c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	689b      	ldr	r3, [r3, #8]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d012      	beq.n	800e936 <osMessageQueueNew+0x62>
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	68db      	ldr	r3, [r3, #12]
 800e914:	2b4f      	cmp	r3, #79	@ 0x4f
 800e916:	d90e      	bls.n	800e936 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d00a      	beq.n	800e936 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	695a      	ldr	r2, [r3, #20]
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	68b9      	ldr	r1, [r7, #8]
 800e928:	fb01 f303 	mul.w	r3, r1, r3
 800e92c:	429a      	cmp	r2, r3
 800e92e:	d302      	bcc.n	800e936 <osMessageQueueNew+0x62>
        mem = 1;
 800e930:	2301      	movs	r3, #1
 800e932:	61bb      	str	r3, [r7, #24]
 800e934:	e014      	b.n	800e960 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	689b      	ldr	r3, [r3, #8]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d110      	bne.n	800e960 <osMessageQueueNew+0x8c>
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	68db      	ldr	r3, [r3, #12]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d10c      	bne.n	800e960 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d108      	bne.n	800e960 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	695b      	ldr	r3, [r3, #20]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d104      	bne.n	800e960 <osMessageQueueNew+0x8c>
          mem = 0;
 800e956:	2300      	movs	r3, #0
 800e958:	61bb      	str	r3, [r7, #24]
 800e95a:	e001      	b.n	800e960 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800e95c:	2300      	movs	r3, #0
 800e95e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e960:	69bb      	ldr	r3, [r7, #24]
 800e962:	2b01      	cmp	r3, #1
 800e964:	d10b      	bne.n	800e97e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	691a      	ldr	r2, [r3, #16]
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	689b      	ldr	r3, [r3, #8]
 800e96e:	2100      	movs	r1, #0
 800e970:	9100      	str	r1, [sp, #0]
 800e972:	68b9      	ldr	r1, [r7, #8]
 800e974:	68f8      	ldr	r0, [r7, #12]
 800e976:	f000 fa31 	bl	800eddc <xQueueGenericCreateStatic>
 800e97a:	61f8      	str	r0, [r7, #28]
 800e97c:	e008      	b.n	800e990 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800e97e:	69bb      	ldr	r3, [r7, #24]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d105      	bne.n	800e990 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800e984:	2200      	movs	r2, #0
 800e986:	68b9      	ldr	r1, [r7, #8]
 800e988:	68f8      	ldr	r0, [r7, #12]
 800e98a:	f000 faa4 	bl	800eed6 <xQueueGenericCreate>
 800e98e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800e990:	69fb      	ldr	r3, [r7, #28]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d00c      	beq.n	800e9b0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d003      	beq.n	800e9a4 <osMessageQueueNew+0xd0>
        name = attr->name;
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	617b      	str	r3, [r7, #20]
 800e9a2:	e001      	b.n	800e9a8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800e9a8:	6979      	ldr	r1, [r7, #20]
 800e9aa:	69f8      	ldr	r0, [r7, #28]
 800e9ac:	f001 f950 	bl	800fc50 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800e9b0:	69fb      	ldr	r3, [r7, #28]
}
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	3720      	adds	r7, #32
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	bd80      	pop	{r7, pc}
	...

0800e9bc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b088      	sub	sp, #32
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	60f8      	str	r0, [r7, #12]
 800e9c4:	60b9      	str	r1, [r7, #8]
 800e9c6:	603b      	str	r3, [r7, #0]
 800e9c8:	4613      	mov	r3, r2
 800e9ca:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e9d4:	f3ef 8305 	mrs	r3, IPSR
 800e9d8:	617b      	str	r3, [r7, #20]
  return(result);
 800e9da:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d028      	beq.n	800ea32 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e9e0:	69bb      	ldr	r3, [r7, #24]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d005      	beq.n	800e9f2 <osMessageQueuePut+0x36>
 800e9e6:	68bb      	ldr	r3, [r7, #8]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d002      	beq.n	800e9f2 <osMessageQueuePut+0x36>
 800e9ec:	683b      	ldr	r3, [r7, #0]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d003      	beq.n	800e9fa <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800e9f2:	f06f 0303 	mvn.w	r3, #3
 800e9f6:	61fb      	str	r3, [r7, #28]
 800e9f8:	e038      	b.n	800ea6c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800e9fe:	f107 0210 	add.w	r2, r7, #16
 800ea02:	2300      	movs	r3, #0
 800ea04:	68b9      	ldr	r1, [r7, #8]
 800ea06:	69b8      	ldr	r0, [r7, #24]
 800ea08:	f000 fc34 	bl	800f274 <xQueueGenericSendFromISR>
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	2b01      	cmp	r3, #1
 800ea10:	d003      	beq.n	800ea1a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800ea12:	f06f 0302 	mvn.w	r3, #2
 800ea16:	61fb      	str	r3, [r7, #28]
 800ea18:	e028      	b.n	800ea6c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800ea1a:	693b      	ldr	r3, [r7, #16]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d025      	beq.n	800ea6c <osMessageQueuePut+0xb0>
 800ea20:	4b15      	ldr	r3, [pc, #84]	@ (800ea78 <osMessageQueuePut+0xbc>)
 800ea22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea26:	601a      	str	r2, [r3, #0]
 800ea28:	f3bf 8f4f 	dsb	sy
 800ea2c:	f3bf 8f6f 	isb	sy
 800ea30:	e01c      	b.n	800ea6c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ea32:	69bb      	ldr	r3, [r7, #24]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d002      	beq.n	800ea3e <osMessageQueuePut+0x82>
 800ea38:	68bb      	ldr	r3, [r7, #8]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d103      	bne.n	800ea46 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800ea3e:	f06f 0303 	mvn.w	r3, #3
 800ea42:	61fb      	str	r3, [r7, #28]
 800ea44:	e012      	b.n	800ea6c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ea46:	2300      	movs	r3, #0
 800ea48:	683a      	ldr	r2, [r7, #0]
 800ea4a:	68b9      	ldr	r1, [r7, #8]
 800ea4c:	69b8      	ldr	r0, [r7, #24]
 800ea4e:	f000 fb0f 	bl	800f070 <xQueueGenericSend>
 800ea52:	4603      	mov	r3, r0
 800ea54:	2b01      	cmp	r3, #1
 800ea56:	d009      	beq.n	800ea6c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800ea58:	683b      	ldr	r3, [r7, #0]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d003      	beq.n	800ea66 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800ea5e:	f06f 0301 	mvn.w	r3, #1
 800ea62:	61fb      	str	r3, [r7, #28]
 800ea64:	e002      	b.n	800ea6c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800ea66:	f06f 0302 	mvn.w	r3, #2
 800ea6a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ea6c:	69fb      	ldr	r3, [r7, #28]
}
 800ea6e:	4618      	mov	r0, r3
 800ea70:	3720      	adds	r7, #32
 800ea72:	46bd      	mov	sp, r7
 800ea74:	bd80      	pop	{r7, pc}
 800ea76:	bf00      	nop
 800ea78:	e000ed04 	.word	0xe000ed04

0800ea7c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b088      	sub	sp, #32
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	60f8      	str	r0, [r7, #12]
 800ea84:	60b9      	str	r1, [r7, #8]
 800ea86:	607a      	str	r2, [r7, #4]
 800ea88:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ea8e:	2300      	movs	r3, #0
 800ea90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea92:	f3ef 8305 	mrs	r3, IPSR
 800ea96:	617b      	str	r3, [r7, #20]
  return(result);
 800ea98:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d028      	beq.n	800eaf0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ea9e:	69bb      	ldr	r3, [r7, #24]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d005      	beq.n	800eab0 <osMessageQueueGet+0x34>
 800eaa4:	68bb      	ldr	r3, [r7, #8]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d002      	beq.n	800eab0 <osMessageQueueGet+0x34>
 800eaaa:	683b      	ldr	r3, [r7, #0]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d003      	beq.n	800eab8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800eab0:	f06f 0303 	mvn.w	r3, #3
 800eab4:	61fb      	str	r3, [r7, #28]
 800eab6:	e037      	b.n	800eb28 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800eab8:	2300      	movs	r3, #0
 800eaba:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800eabc:	f107 0310 	add.w	r3, r7, #16
 800eac0:	461a      	mov	r2, r3
 800eac2:	68b9      	ldr	r1, [r7, #8]
 800eac4:	69b8      	ldr	r0, [r7, #24]
 800eac6:	f000 fef5 	bl	800f8b4 <xQueueReceiveFromISR>
 800eaca:	4603      	mov	r3, r0
 800eacc:	2b01      	cmp	r3, #1
 800eace:	d003      	beq.n	800ead8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800ead0:	f06f 0302 	mvn.w	r3, #2
 800ead4:	61fb      	str	r3, [r7, #28]
 800ead6:	e027      	b.n	800eb28 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800ead8:	693b      	ldr	r3, [r7, #16]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d024      	beq.n	800eb28 <osMessageQueueGet+0xac>
 800eade:	4b15      	ldr	r3, [pc, #84]	@ (800eb34 <osMessageQueueGet+0xb8>)
 800eae0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eae4:	601a      	str	r2, [r3, #0]
 800eae6:	f3bf 8f4f 	dsb	sy
 800eaea:	f3bf 8f6f 	isb	sy
 800eaee:	e01b      	b.n	800eb28 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800eaf0:	69bb      	ldr	r3, [r7, #24]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d002      	beq.n	800eafc <osMessageQueueGet+0x80>
 800eaf6:	68bb      	ldr	r3, [r7, #8]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d103      	bne.n	800eb04 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800eafc:	f06f 0303 	mvn.w	r3, #3
 800eb00:	61fb      	str	r3, [r7, #28]
 800eb02:	e011      	b.n	800eb28 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800eb04:	683a      	ldr	r2, [r7, #0]
 800eb06:	68b9      	ldr	r1, [r7, #8]
 800eb08:	69b8      	ldr	r0, [r7, #24]
 800eb0a:	f000 fce1 	bl	800f4d0 <xQueueReceive>
 800eb0e:	4603      	mov	r3, r0
 800eb10:	2b01      	cmp	r3, #1
 800eb12:	d009      	beq.n	800eb28 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800eb14:	683b      	ldr	r3, [r7, #0]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d003      	beq.n	800eb22 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800eb1a:	f06f 0301 	mvn.w	r3, #1
 800eb1e:	61fb      	str	r3, [r7, #28]
 800eb20:	e002      	b.n	800eb28 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800eb22:	f06f 0302 	mvn.w	r3, #2
 800eb26:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800eb28:	69fb      	ldr	r3, [r7, #28]
}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	3720      	adds	r7, #32
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bd80      	pop	{r7, pc}
 800eb32:	bf00      	nop
 800eb34:	e000ed04 	.word	0xe000ed04

0800eb38 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800eb38:	b480      	push	{r7}
 800eb3a:	b085      	sub	sp, #20
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	60f8      	str	r0, [r7, #12]
 800eb40:	60b9      	str	r1, [r7, #8]
 800eb42:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	4a07      	ldr	r2, [pc, #28]	@ (800eb64 <vApplicationGetIdleTaskMemory+0x2c>)
 800eb48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800eb4a:	68bb      	ldr	r3, [r7, #8]
 800eb4c:	4a06      	ldr	r2, [pc, #24]	@ (800eb68 <vApplicationGetIdleTaskMemory+0x30>)
 800eb4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2280      	movs	r2, #128	@ 0x80
 800eb54:	601a      	str	r2, [r3, #0]
}
 800eb56:	bf00      	nop
 800eb58:	3714      	adds	r7, #20
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb60:	4770      	bx	lr
 800eb62:	bf00      	nop
 800eb64:	240008f4 	.word	0x240008f4
 800eb68:	2400099c 	.word	0x2400099c

0800eb6c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800eb6c:	b480      	push	{r7}
 800eb6e:	b085      	sub	sp, #20
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	60f8      	str	r0, [r7, #12]
 800eb74:	60b9      	str	r1, [r7, #8]
 800eb76:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	4a07      	ldr	r2, [pc, #28]	@ (800eb98 <vApplicationGetTimerTaskMemory+0x2c>)
 800eb7c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	4a06      	ldr	r2, [pc, #24]	@ (800eb9c <vApplicationGetTimerTaskMemory+0x30>)
 800eb82:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800eb8a:	601a      	str	r2, [r3, #0]
}
 800eb8c:	bf00      	nop
 800eb8e:	3714      	adds	r7, #20
 800eb90:	46bd      	mov	sp, r7
 800eb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb96:	4770      	bx	lr
 800eb98:	24000b9c 	.word	0x24000b9c
 800eb9c:	24000c44 	.word	0x24000c44

0800eba0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800eba0:	b480      	push	{r7}
 800eba2:	b083      	sub	sp, #12
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	f103 0208 	add.w	r2, r3, #8
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	f04f 32ff 	mov.w	r2, #4294967295
 800ebb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	f103 0208 	add.w	r2, r3, #8
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	f103 0208 	add.w	r2, r3, #8
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ebd4:	bf00      	nop
 800ebd6:	370c      	adds	r7, #12
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebde:	4770      	bx	lr

0800ebe0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ebe0:	b480      	push	{r7}
 800ebe2:	b083      	sub	sp, #12
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2200      	movs	r2, #0
 800ebec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ebee:	bf00      	nop
 800ebf0:	370c      	adds	r7, #12
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf8:	4770      	bx	lr

0800ebfa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ebfa:	b480      	push	{r7}
 800ebfc:	b085      	sub	sp, #20
 800ebfe:	af00      	add	r7, sp, #0
 800ec00:	6078      	str	r0, [r7, #4]
 800ec02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	685b      	ldr	r3, [r3, #4]
 800ec08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	68fa      	ldr	r2, [r7, #12]
 800ec0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	689a      	ldr	r2, [r3, #8]
 800ec14:	683b      	ldr	r3, [r7, #0]
 800ec16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	689b      	ldr	r3, [r3, #8]
 800ec1c:	683a      	ldr	r2, [r7, #0]
 800ec1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	683a      	ldr	r2, [r7, #0]
 800ec24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	687a      	ldr	r2, [r7, #4]
 800ec2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	1c5a      	adds	r2, r3, #1
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	601a      	str	r2, [r3, #0]
}
 800ec36:	bf00      	nop
 800ec38:	3714      	adds	r7, #20
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec40:	4770      	bx	lr

0800ec42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ec42:	b480      	push	{r7}
 800ec44:	b085      	sub	sp, #20
 800ec46:	af00      	add	r7, sp, #0
 800ec48:	6078      	str	r0, [r7, #4]
 800ec4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ec4c:	683b      	ldr	r3, [r7, #0]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ec52:	68bb      	ldr	r3, [r7, #8]
 800ec54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec58:	d103      	bne.n	800ec62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	691b      	ldr	r3, [r3, #16]
 800ec5e:	60fb      	str	r3, [r7, #12]
 800ec60:	e00c      	b.n	800ec7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	3308      	adds	r3, #8
 800ec66:	60fb      	str	r3, [r7, #12]
 800ec68:	e002      	b.n	800ec70 <vListInsert+0x2e>
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	685b      	ldr	r3, [r3, #4]
 800ec6e:	60fb      	str	r3, [r7, #12]
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	685b      	ldr	r3, [r3, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	68ba      	ldr	r2, [r7, #8]
 800ec78:	429a      	cmp	r2, r3
 800ec7a:	d2f6      	bcs.n	800ec6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	685a      	ldr	r2, [r3, #4]
 800ec80:	683b      	ldr	r3, [r7, #0]
 800ec82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	685b      	ldr	r3, [r3, #4]
 800ec88:	683a      	ldr	r2, [r7, #0]
 800ec8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	68fa      	ldr	r2, [r7, #12]
 800ec90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	683a      	ldr	r2, [r7, #0]
 800ec96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ec98:	683b      	ldr	r3, [r7, #0]
 800ec9a:	687a      	ldr	r2, [r7, #4]
 800ec9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	1c5a      	adds	r2, r3, #1
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	601a      	str	r2, [r3, #0]
}
 800eca8:	bf00      	nop
 800ecaa:	3714      	adds	r7, #20
 800ecac:	46bd      	mov	sp, r7
 800ecae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb2:	4770      	bx	lr

0800ecb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ecb4:	b480      	push	{r7}
 800ecb6:	b085      	sub	sp, #20
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	691b      	ldr	r3, [r3, #16]
 800ecc0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	685b      	ldr	r3, [r3, #4]
 800ecc6:	687a      	ldr	r2, [r7, #4]
 800ecc8:	6892      	ldr	r2, [r2, #8]
 800ecca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	689b      	ldr	r3, [r3, #8]
 800ecd0:	687a      	ldr	r2, [r7, #4]
 800ecd2:	6852      	ldr	r2, [r2, #4]
 800ecd4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	685b      	ldr	r3, [r3, #4]
 800ecda:	687a      	ldr	r2, [r7, #4]
 800ecdc:	429a      	cmp	r2, r3
 800ecde:	d103      	bne.n	800ece8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	689a      	ldr	r2, [r3, #8]
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	2200      	movs	r2, #0
 800ecec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	1e5a      	subs	r2, r3, #1
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	681b      	ldr	r3, [r3, #0]
}
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	3714      	adds	r7, #20
 800ed00:	46bd      	mov	sp, r7
 800ed02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed06:	4770      	bx	lr

0800ed08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b084      	sub	sp, #16
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
 800ed10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d10b      	bne.n	800ed34 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ed1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed20:	f383 8811 	msr	BASEPRI, r3
 800ed24:	f3bf 8f6f 	isb	sy
 800ed28:	f3bf 8f4f 	dsb	sy
 800ed2c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ed2e:	bf00      	nop
 800ed30:	bf00      	nop
 800ed32:	e7fd      	b.n	800ed30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ed34:	f002 fcd8 	bl	80116e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	681a      	ldr	r2, [r3, #0]
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ed40:	68f9      	ldr	r1, [r7, #12]
 800ed42:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ed44:	fb01 f303 	mul.w	r3, r1, r3
 800ed48:	441a      	add	r2, r3
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	2200      	movs	r2, #0
 800ed52:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	681a      	ldr	r2, [r3, #0]
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	681a      	ldr	r2, [r3, #0]
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ed64:	3b01      	subs	r3, #1
 800ed66:	68f9      	ldr	r1, [r7, #12]
 800ed68:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ed6a:	fb01 f303 	mul.w	r3, r1, r3
 800ed6e:	441a      	add	r2, r3
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	22ff      	movs	r2, #255	@ 0xff
 800ed78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	22ff      	movs	r2, #255	@ 0xff
 800ed80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d114      	bne.n	800edb4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	691b      	ldr	r3, [r3, #16]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d01a      	beq.n	800edc8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	3310      	adds	r3, #16
 800ed96:	4618      	mov	r0, r3
 800ed98:	f001 fc74 	bl	8010684 <xTaskRemoveFromEventList>
 800ed9c:	4603      	mov	r3, r0
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d012      	beq.n	800edc8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800eda2:	4b0d      	ldr	r3, [pc, #52]	@ (800edd8 <xQueueGenericReset+0xd0>)
 800eda4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eda8:	601a      	str	r2, [r3, #0]
 800edaa:	f3bf 8f4f 	dsb	sy
 800edae:	f3bf 8f6f 	isb	sy
 800edb2:	e009      	b.n	800edc8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	3310      	adds	r3, #16
 800edb8:	4618      	mov	r0, r3
 800edba:	f7ff fef1 	bl	800eba0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	3324      	adds	r3, #36	@ 0x24
 800edc2:	4618      	mov	r0, r3
 800edc4:	f7ff feec 	bl	800eba0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800edc8:	f002 fcc0 	bl	801174c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800edcc:	2301      	movs	r3, #1
}
 800edce:	4618      	mov	r0, r3
 800edd0:	3710      	adds	r7, #16
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}
 800edd6:	bf00      	nop
 800edd8:	e000ed04 	.word	0xe000ed04

0800eddc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b08e      	sub	sp, #56	@ 0x38
 800ede0:	af02      	add	r7, sp, #8
 800ede2:	60f8      	str	r0, [r7, #12]
 800ede4:	60b9      	str	r1, [r7, #8]
 800ede6:	607a      	str	r2, [r7, #4]
 800ede8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d10b      	bne.n	800ee08 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800edf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edf4:	f383 8811 	msr	BASEPRI, r3
 800edf8:	f3bf 8f6f 	isb	sy
 800edfc:	f3bf 8f4f 	dsb	sy
 800ee00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ee02:	bf00      	nop
 800ee04:	bf00      	nop
 800ee06:	e7fd      	b.n	800ee04 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d10b      	bne.n	800ee26 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800ee0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee12:	f383 8811 	msr	BASEPRI, r3
 800ee16:	f3bf 8f6f 	isb	sy
 800ee1a:	f3bf 8f4f 	dsb	sy
 800ee1e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ee20:	bf00      	nop
 800ee22:	bf00      	nop
 800ee24:	e7fd      	b.n	800ee22 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d002      	beq.n	800ee32 <xQueueGenericCreateStatic+0x56>
 800ee2c:	68bb      	ldr	r3, [r7, #8]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d001      	beq.n	800ee36 <xQueueGenericCreateStatic+0x5a>
 800ee32:	2301      	movs	r3, #1
 800ee34:	e000      	b.n	800ee38 <xQueueGenericCreateStatic+0x5c>
 800ee36:	2300      	movs	r3, #0
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d10b      	bne.n	800ee54 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800ee3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee40:	f383 8811 	msr	BASEPRI, r3
 800ee44:	f3bf 8f6f 	isb	sy
 800ee48:	f3bf 8f4f 	dsb	sy
 800ee4c:	623b      	str	r3, [r7, #32]
}
 800ee4e:	bf00      	nop
 800ee50:	bf00      	nop
 800ee52:	e7fd      	b.n	800ee50 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d102      	bne.n	800ee60 <xQueueGenericCreateStatic+0x84>
 800ee5a:	68bb      	ldr	r3, [r7, #8]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d101      	bne.n	800ee64 <xQueueGenericCreateStatic+0x88>
 800ee60:	2301      	movs	r3, #1
 800ee62:	e000      	b.n	800ee66 <xQueueGenericCreateStatic+0x8a>
 800ee64:	2300      	movs	r3, #0
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d10b      	bne.n	800ee82 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800ee6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee6e:	f383 8811 	msr	BASEPRI, r3
 800ee72:	f3bf 8f6f 	isb	sy
 800ee76:	f3bf 8f4f 	dsb	sy
 800ee7a:	61fb      	str	r3, [r7, #28]
}
 800ee7c:	bf00      	nop
 800ee7e:	bf00      	nop
 800ee80:	e7fd      	b.n	800ee7e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ee82:	2350      	movs	r3, #80	@ 0x50
 800ee84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ee86:	697b      	ldr	r3, [r7, #20]
 800ee88:	2b50      	cmp	r3, #80	@ 0x50
 800ee8a:	d00b      	beq.n	800eea4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800ee8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee90:	f383 8811 	msr	BASEPRI, r3
 800ee94:	f3bf 8f6f 	isb	sy
 800ee98:	f3bf 8f4f 	dsb	sy
 800ee9c:	61bb      	str	r3, [r7, #24]
}
 800ee9e:	bf00      	nop
 800eea0:	bf00      	nop
 800eea2:	e7fd      	b.n	800eea0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800eea4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800eea6:	683b      	ldr	r3, [r7, #0]
 800eea8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800eeaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d00d      	beq.n	800eecc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800eeb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eeb2:	2201      	movs	r2, #1
 800eeb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800eeb8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800eebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eebe:	9300      	str	r3, [sp, #0]
 800eec0:	4613      	mov	r3, r2
 800eec2:	687a      	ldr	r2, [r7, #4]
 800eec4:	68b9      	ldr	r1, [r7, #8]
 800eec6:	68f8      	ldr	r0, [r7, #12]
 800eec8:	f000 f840 	bl	800ef4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800eecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800eece:	4618      	mov	r0, r3
 800eed0:	3730      	adds	r7, #48	@ 0x30
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd80      	pop	{r7, pc}

0800eed6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800eed6:	b580      	push	{r7, lr}
 800eed8:	b08a      	sub	sp, #40	@ 0x28
 800eeda:	af02      	add	r7, sp, #8
 800eedc:	60f8      	str	r0, [r7, #12]
 800eede:	60b9      	str	r1, [r7, #8]
 800eee0:	4613      	mov	r3, r2
 800eee2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d10b      	bne.n	800ef02 <xQueueGenericCreate+0x2c>
	__asm volatile
 800eeea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eeee:	f383 8811 	msr	BASEPRI, r3
 800eef2:	f3bf 8f6f 	isb	sy
 800eef6:	f3bf 8f4f 	dsb	sy
 800eefa:	613b      	str	r3, [r7, #16]
}
 800eefc:	bf00      	nop
 800eefe:	bf00      	nop
 800ef00:	e7fd      	b.n	800eefe <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	68ba      	ldr	r2, [r7, #8]
 800ef06:	fb02 f303 	mul.w	r3, r2, r3
 800ef0a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ef0c:	69fb      	ldr	r3, [r7, #28]
 800ef0e:	3350      	adds	r3, #80	@ 0x50
 800ef10:	4618      	mov	r0, r3
 800ef12:	f002 fd0b 	bl	801192c <pvPortMalloc>
 800ef16:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ef18:	69bb      	ldr	r3, [r7, #24]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d011      	beq.n	800ef42 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ef1e:	69bb      	ldr	r3, [r7, #24]
 800ef20:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ef22:	697b      	ldr	r3, [r7, #20]
 800ef24:	3350      	adds	r3, #80	@ 0x50
 800ef26:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ef28:	69bb      	ldr	r3, [r7, #24]
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ef30:	79fa      	ldrb	r2, [r7, #7]
 800ef32:	69bb      	ldr	r3, [r7, #24]
 800ef34:	9300      	str	r3, [sp, #0]
 800ef36:	4613      	mov	r3, r2
 800ef38:	697a      	ldr	r2, [r7, #20]
 800ef3a:	68b9      	ldr	r1, [r7, #8]
 800ef3c:	68f8      	ldr	r0, [r7, #12]
 800ef3e:	f000 f805 	bl	800ef4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ef42:	69bb      	ldr	r3, [r7, #24]
	}
 800ef44:	4618      	mov	r0, r3
 800ef46:	3720      	adds	r7, #32
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd80      	pop	{r7, pc}

0800ef4c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b084      	sub	sp, #16
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	60f8      	str	r0, [r7, #12]
 800ef54:	60b9      	str	r1, [r7, #8]
 800ef56:	607a      	str	r2, [r7, #4]
 800ef58:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ef5a:	68bb      	ldr	r3, [r7, #8]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d103      	bne.n	800ef68 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ef60:	69bb      	ldr	r3, [r7, #24]
 800ef62:	69ba      	ldr	r2, [r7, #24]
 800ef64:	601a      	str	r2, [r3, #0]
 800ef66:	e002      	b.n	800ef6e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ef68:	69bb      	ldr	r3, [r7, #24]
 800ef6a:	687a      	ldr	r2, [r7, #4]
 800ef6c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ef6e:	69bb      	ldr	r3, [r7, #24]
 800ef70:	68fa      	ldr	r2, [r7, #12]
 800ef72:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ef74:	69bb      	ldr	r3, [r7, #24]
 800ef76:	68ba      	ldr	r2, [r7, #8]
 800ef78:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ef7a:	2101      	movs	r1, #1
 800ef7c:	69b8      	ldr	r0, [r7, #24]
 800ef7e:	f7ff fec3 	bl	800ed08 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ef82:	69bb      	ldr	r3, [r7, #24]
 800ef84:	78fa      	ldrb	r2, [r7, #3]
 800ef86:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ef8a:	bf00      	nop
 800ef8c:	3710      	adds	r7, #16
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	bd80      	pop	{r7, pc}

0800ef92 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800ef92:	b580      	push	{r7, lr}
 800ef94:	b08a      	sub	sp, #40	@ 0x28
 800ef96:	af02      	add	r7, sp, #8
 800ef98:	60f8      	str	r0, [r7, #12]
 800ef9a:	60b9      	str	r1, [r7, #8]
 800ef9c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d10b      	bne.n	800efbc <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800efa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efa8:	f383 8811 	msr	BASEPRI, r3
 800efac:	f3bf 8f6f 	isb	sy
 800efb0:	f3bf 8f4f 	dsb	sy
 800efb4:	61bb      	str	r3, [r7, #24]
}
 800efb6:	bf00      	nop
 800efb8:	bf00      	nop
 800efba:	e7fd      	b.n	800efb8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800efbc:	68ba      	ldr	r2, [r7, #8]
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	429a      	cmp	r2, r3
 800efc2:	d90b      	bls.n	800efdc <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800efc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efc8:	f383 8811 	msr	BASEPRI, r3
 800efcc:	f3bf 8f6f 	isb	sy
 800efd0:	f3bf 8f4f 	dsb	sy
 800efd4:	617b      	str	r3, [r7, #20]
}
 800efd6:	bf00      	nop
 800efd8:	bf00      	nop
 800efda:	e7fd      	b.n	800efd8 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800efdc:	2302      	movs	r3, #2
 800efde:	9300      	str	r3, [sp, #0]
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	2200      	movs	r2, #0
 800efe4:	2100      	movs	r1, #0
 800efe6:	68f8      	ldr	r0, [r7, #12]
 800efe8:	f7ff fef8 	bl	800eddc <xQueueGenericCreateStatic>
 800efec:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800efee:	69fb      	ldr	r3, [r7, #28]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d002      	beq.n	800effa <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800eff4:	69fb      	ldr	r3, [r7, #28]
 800eff6:	68ba      	ldr	r2, [r7, #8]
 800eff8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800effa:	69fb      	ldr	r3, [r7, #28]
	}
 800effc:	4618      	mov	r0, r3
 800effe:	3720      	adds	r7, #32
 800f000:	46bd      	mov	sp, r7
 800f002:	bd80      	pop	{r7, pc}

0800f004 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800f004:	b580      	push	{r7, lr}
 800f006:	b086      	sub	sp, #24
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
 800f00c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d10b      	bne.n	800f02c <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800f014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f018:	f383 8811 	msr	BASEPRI, r3
 800f01c:	f3bf 8f6f 	isb	sy
 800f020:	f3bf 8f4f 	dsb	sy
 800f024:	613b      	str	r3, [r7, #16]
}
 800f026:	bf00      	nop
 800f028:	bf00      	nop
 800f02a:	e7fd      	b.n	800f028 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f02c:	683a      	ldr	r2, [r7, #0]
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	429a      	cmp	r2, r3
 800f032:	d90b      	bls.n	800f04c <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800f034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f038:	f383 8811 	msr	BASEPRI, r3
 800f03c:	f3bf 8f6f 	isb	sy
 800f040:	f3bf 8f4f 	dsb	sy
 800f044:	60fb      	str	r3, [r7, #12]
}
 800f046:	bf00      	nop
 800f048:	bf00      	nop
 800f04a:	e7fd      	b.n	800f048 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f04c:	2202      	movs	r2, #2
 800f04e:	2100      	movs	r1, #0
 800f050:	6878      	ldr	r0, [r7, #4]
 800f052:	f7ff ff40 	bl	800eed6 <xQueueGenericCreate>
 800f056:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800f058:	697b      	ldr	r3, [r7, #20]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d002      	beq.n	800f064 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f05e:	697b      	ldr	r3, [r7, #20]
 800f060:	683a      	ldr	r2, [r7, #0]
 800f062:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f064:	697b      	ldr	r3, [r7, #20]
	}
 800f066:	4618      	mov	r0, r3
 800f068:	3718      	adds	r7, #24
 800f06a:	46bd      	mov	sp, r7
 800f06c:	bd80      	pop	{r7, pc}
	...

0800f070 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b08e      	sub	sp, #56	@ 0x38
 800f074:	af00      	add	r7, sp, #0
 800f076:	60f8      	str	r0, [r7, #12]
 800f078:	60b9      	str	r1, [r7, #8]
 800f07a:	607a      	str	r2, [r7, #4]
 800f07c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f07e:	2300      	movs	r3, #0
 800f080:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800f086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d10b      	bne.n	800f0a4 <xQueueGenericSend+0x34>
	__asm volatile
 800f08c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f090:	f383 8811 	msr	BASEPRI, r3
 800f094:	f3bf 8f6f 	isb	sy
 800f098:	f3bf 8f4f 	dsb	sy
 800f09c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f09e:	bf00      	nop
 800f0a0:	bf00      	nop
 800f0a2:	e7fd      	b.n	800f0a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f0a4:	68bb      	ldr	r3, [r7, #8]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d103      	bne.n	800f0b2 <xQueueGenericSend+0x42>
 800f0aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d101      	bne.n	800f0b6 <xQueueGenericSend+0x46>
 800f0b2:	2301      	movs	r3, #1
 800f0b4:	e000      	b.n	800f0b8 <xQueueGenericSend+0x48>
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d10b      	bne.n	800f0d4 <xQueueGenericSend+0x64>
	__asm volatile
 800f0bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0c0:	f383 8811 	msr	BASEPRI, r3
 800f0c4:	f3bf 8f6f 	isb	sy
 800f0c8:	f3bf 8f4f 	dsb	sy
 800f0cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f0ce:	bf00      	nop
 800f0d0:	bf00      	nop
 800f0d2:	e7fd      	b.n	800f0d0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	2b02      	cmp	r3, #2
 800f0d8:	d103      	bne.n	800f0e2 <xQueueGenericSend+0x72>
 800f0da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f0de:	2b01      	cmp	r3, #1
 800f0e0:	d101      	bne.n	800f0e6 <xQueueGenericSend+0x76>
 800f0e2:	2301      	movs	r3, #1
 800f0e4:	e000      	b.n	800f0e8 <xQueueGenericSend+0x78>
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d10b      	bne.n	800f104 <xQueueGenericSend+0x94>
	__asm volatile
 800f0ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0f0:	f383 8811 	msr	BASEPRI, r3
 800f0f4:	f3bf 8f6f 	isb	sy
 800f0f8:	f3bf 8f4f 	dsb	sy
 800f0fc:	623b      	str	r3, [r7, #32]
}
 800f0fe:	bf00      	nop
 800f100:	bf00      	nop
 800f102:	e7fd      	b.n	800f100 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f104:	f001 fc84 	bl	8010a10 <xTaskGetSchedulerState>
 800f108:	4603      	mov	r3, r0
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d102      	bne.n	800f114 <xQueueGenericSend+0xa4>
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d101      	bne.n	800f118 <xQueueGenericSend+0xa8>
 800f114:	2301      	movs	r3, #1
 800f116:	e000      	b.n	800f11a <xQueueGenericSend+0xaa>
 800f118:	2300      	movs	r3, #0
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d10b      	bne.n	800f136 <xQueueGenericSend+0xc6>
	__asm volatile
 800f11e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f122:	f383 8811 	msr	BASEPRI, r3
 800f126:	f3bf 8f6f 	isb	sy
 800f12a:	f3bf 8f4f 	dsb	sy
 800f12e:	61fb      	str	r3, [r7, #28]
}
 800f130:	bf00      	nop
 800f132:	bf00      	nop
 800f134:	e7fd      	b.n	800f132 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f136:	f002 fad7 	bl	80116e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f13a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f13c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f13e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f142:	429a      	cmp	r2, r3
 800f144:	d302      	bcc.n	800f14c <xQueueGenericSend+0xdc>
 800f146:	683b      	ldr	r3, [r7, #0]
 800f148:	2b02      	cmp	r3, #2
 800f14a:	d129      	bne.n	800f1a0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f14c:	683a      	ldr	r2, [r7, #0]
 800f14e:	68b9      	ldr	r1, [r7, #8]
 800f150:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f152:	f000 fc6d 	bl	800fa30 <prvCopyDataToQueue>
 800f156:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f15a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d010      	beq.n	800f182 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f162:	3324      	adds	r3, #36	@ 0x24
 800f164:	4618      	mov	r0, r3
 800f166:	f001 fa8d 	bl	8010684 <xTaskRemoveFromEventList>
 800f16a:	4603      	mov	r3, r0
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d013      	beq.n	800f198 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f170:	4b3f      	ldr	r3, [pc, #252]	@ (800f270 <xQueueGenericSend+0x200>)
 800f172:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f176:	601a      	str	r2, [r3, #0]
 800f178:	f3bf 8f4f 	dsb	sy
 800f17c:	f3bf 8f6f 	isb	sy
 800f180:	e00a      	b.n	800f198 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f184:	2b00      	cmp	r3, #0
 800f186:	d007      	beq.n	800f198 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f188:	4b39      	ldr	r3, [pc, #228]	@ (800f270 <xQueueGenericSend+0x200>)
 800f18a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f18e:	601a      	str	r2, [r3, #0]
 800f190:	f3bf 8f4f 	dsb	sy
 800f194:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f198:	f002 fad8 	bl	801174c <vPortExitCritical>
				return pdPASS;
 800f19c:	2301      	movs	r3, #1
 800f19e:	e063      	b.n	800f268 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d103      	bne.n	800f1ae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f1a6:	f002 fad1 	bl	801174c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	e05c      	b.n	800f268 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f1ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d106      	bne.n	800f1c2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f1b4:	f107 0314 	add.w	r3, r7, #20
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	f001 fac7 	bl	801074c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f1be:	2301      	movs	r3, #1
 800f1c0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f1c2:	f002 fac3 	bl	801174c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f1c6:	f001 f82f 	bl	8010228 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f1ca:	f002 fa8d 	bl	80116e8 <vPortEnterCritical>
 800f1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f1d4:	b25b      	sxtb	r3, r3
 800f1d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1da:	d103      	bne.n	800f1e4 <xQueueGenericSend+0x174>
 800f1dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1de:	2200      	movs	r2, #0
 800f1e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f1e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f1ea:	b25b      	sxtb	r3, r3
 800f1ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1f0:	d103      	bne.n	800f1fa <xQueueGenericSend+0x18a>
 800f1f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1f4:	2200      	movs	r2, #0
 800f1f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f1fa:	f002 faa7 	bl	801174c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f1fe:	1d3a      	adds	r2, r7, #4
 800f200:	f107 0314 	add.w	r3, r7, #20
 800f204:	4611      	mov	r1, r2
 800f206:	4618      	mov	r0, r3
 800f208:	f001 fab6 	bl	8010778 <xTaskCheckForTimeOut>
 800f20c:	4603      	mov	r3, r0
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d124      	bne.n	800f25c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f212:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f214:	f000 fd04 	bl	800fc20 <prvIsQueueFull>
 800f218:	4603      	mov	r3, r0
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d018      	beq.n	800f250 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f21e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f220:	3310      	adds	r3, #16
 800f222:	687a      	ldr	r2, [r7, #4]
 800f224:	4611      	mov	r1, r2
 800f226:	4618      	mov	r0, r3
 800f228:	f001 f9da 	bl	80105e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f22c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f22e:	f000 fc8f 	bl	800fb50 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f232:	f001 f807 	bl	8010244 <xTaskResumeAll>
 800f236:	4603      	mov	r3, r0
 800f238:	2b00      	cmp	r3, #0
 800f23a:	f47f af7c 	bne.w	800f136 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800f23e:	4b0c      	ldr	r3, [pc, #48]	@ (800f270 <xQueueGenericSend+0x200>)
 800f240:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f244:	601a      	str	r2, [r3, #0]
 800f246:	f3bf 8f4f 	dsb	sy
 800f24a:	f3bf 8f6f 	isb	sy
 800f24e:	e772      	b.n	800f136 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f250:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f252:	f000 fc7d 	bl	800fb50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f256:	f000 fff5 	bl	8010244 <xTaskResumeAll>
 800f25a:	e76c      	b.n	800f136 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f25c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f25e:	f000 fc77 	bl	800fb50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f262:	f000 ffef 	bl	8010244 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f266:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f268:	4618      	mov	r0, r3
 800f26a:	3738      	adds	r7, #56	@ 0x38
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bd80      	pop	{r7, pc}
 800f270:	e000ed04 	.word	0xe000ed04

0800f274 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b090      	sub	sp, #64	@ 0x40
 800f278:	af00      	add	r7, sp, #0
 800f27a:	60f8      	str	r0, [r7, #12]
 800f27c:	60b9      	str	r1, [r7, #8]
 800f27e:	607a      	str	r2, [r7, #4]
 800f280:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800f286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d10b      	bne.n	800f2a4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800f28c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f290:	f383 8811 	msr	BASEPRI, r3
 800f294:	f3bf 8f6f 	isb	sy
 800f298:	f3bf 8f4f 	dsb	sy
 800f29c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f29e:	bf00      	nop
 800f2a0:	bf00      	nop
 800f2a2:	e7fd      	b.n	800f2a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f2a4:	68bb      	ldr	r3, [r7, #8]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d103      	bne.n	800f2b2 <xQueueGenericSendFromISR+0x3e>
 800f2aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d101      	bne.n	800f2b6 <xQueueGenericSendFromISR+0x42>
 800f2b2:	2301      	movs	r3, #1
 800f2b4:	e000      	b.n	800f2b8 <xQueueGenericSendFromISR+0x44>
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d10b      	bne.n	800f2d4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800f2bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2c0:	f383 8811 	msr	BASEPRI, r3
 800f2c4:	f3bf 8f6f 	isb	sy
 800f2c8:	f3bf 8f4f 	dsb	sy
 800f2cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f2ce:	bf00      	nop
 800f2d0:	bf00      	nop
 800f2d2:	e7fd      	b.n	800f2d0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f2d4:	683b      	ldr	r3, [r7, #0]
 800f2d6:	2b02      	cmp	r3, #2
 800f2d8:	d103      	bne.n	800f2e2 <xQueueGenericSendFromISR+0x6e>
 800f2da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f2de:	2b01      	cmp	r3, #1
 800f2e0:	d101      	bne.n	800f2e6 <xQueueGenericSendFromISR+0x72>
 800f2e2:	2301      	movs	r3, #1
 800f2e4:	e000      	b.n	800f2e8 <xQueueGenericSendFromISR+0x74>
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d10b      	bne.n	800f304 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800f2ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2f0:	f383 8811 	msr	BASEPRI, r3
 800f2f4:	f3bf 8f6f 	isb	sy
 800f2f8:	f3bf 8f4f 	dsb	sy
 800f2fc:	623b      	str	r3, [r7, #32]
}
 800f2fe:	bf00      	nop
 800f300:	bf00      	nop
 800f302:	e7fd      	b.n	800f300 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f304:	f002 fad0 	bl	80118a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f308:	f3ef 8211 	mrs	r2, BASEPRI
 800f30c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f310:	f383 8811 	msr	BASEPRI, r3
 800f314:	f3bf 8f6f 	isb	sy
 800f318:	f3bf 8f4f 	dsb	sy
 800f31c:	61fa      	str	r2, [r7, #28]
 800f31e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f320:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f322:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f326:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f32a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f32c:	429a      	cmp	r2, r3
 800f32e:	d302      	bcc.n	800f336 <xQueueGenericSendFromISR+0xc2>
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	2b02      	cmp	r3, #2
 800f334:	d12f      	bne.n	800f396 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f338:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f33c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f344:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f346:	683a      	ldr	r2, [r7, #0]
 800f348:	68b9      	ldr	r1, [r7, #8]
 800f34a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f34c:	f000 fb70 	bl	800fa30 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f350:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800f354:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f358:	d112      	bne.n	800f380 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f35a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f35c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d016      	beq.n	800f390 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f364:	3324      	adds	r3, #36	@ 0x24
 800f366:	4618      	mov	r0, r3
 800f368:	f001 f98c 	bl	8010684 <xTaskRemoveFromEventList>
 800f36c:	4603      	mov	r3, r0
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d00e      	beq.n	800f390 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d00b      	beq.n	800f390 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2201      	movs	r2, #1
 800f37c:	601a      	str	r2, [r3, #0]
 800f37e:	e007      	b.n	800f390 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f380:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800f384:	3301      	adds	r3, #1
 800f386:	b2db      	uxtb	r3, r3
 800f388:	b25a      	sxtb	r2, r3
 800f38a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f38c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800f390:	2301      	movs	r3, #1
 800f392:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800f394:	e001      	b.n	800f39a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f396:	2300      	movs	r3, #0
 800f398:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f39a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f39c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f39e:	697b      	ldr	r3, [r7, #20]
 800f3a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f3a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f3a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	3740      	adds	r7, #64	@ 0x40
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd80      	pop	{r7, pc}

0800f3b0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	b08e      	sub	sp, #56	@ 0x38
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
 800f3b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800f3be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d10b      	bne.n	800f3dc <xQueueGiveFromISR+0x2c>
	__asm volatile
 800f3c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3c8:	f383 8811 	msr	BASEPRI, r3
 800f3cc:	f3bf 8f6f 	isb	sy
 800f3d0:	f3bf 8f4f 	dsb	sy
 800f3d4:	623b      	str	r3, [r7, #32]
}
 800f3d6:	bf00      	nop
 800f3d8:	bf00      	nop
 800f3da:	e7fd      	b.n	800f3d8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f3dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d00b      	beq.n	800f3fc <xQueueGiveFromISR+0x4c>
	__asm volatile
 800f3e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3e8:	f383 8811 	msr	BASEPRI, r3
 800f3ec:	f3bf 8f6f 	isb	sy
 800f3f0:	f3bf 8f4f 	dsb	sy
 800f3f4:	61fb      	str	r3, [r7, #28]
}
 800f3f6:	bf00      	nop
 800f3f8:	bf00      	nop
 800f3fa:	e7fd      	b.n	800f3f8 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800f3fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d103      	bne.n	800f40c <xQueueGiveFromISR+0x5c>
 800f404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f406:	689b      	ldr	r3, [r3, #8]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d101      	bne.n	800f410 <xQueueGiveFromISR+0x60>
 800f40c:	2301      	movs	r3, #1
 800f40e:	e000      	b.n	800f412 <xQueueGiveFromISR+0x62>
 800f410:	2300      	movs	r3, #0
 800f412:	2b00      	cmp	r3, #0
 800f414:	d10b      	bne.n	800f42e <xQueueGiveFromISR+0x7e>
	__asm volatile
 800f416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f41a:	f383 8811 	msr	BASEPRI, r3
 800f41e:	f3bf 8f6f 	isb	sy
 800f422:	f3bf 8f4f 	dsb	sy
 800f426:	61bb      	str	r3, [r7, #24]
}
 800f428:	bf00      	nop
 800f42a:	bf00      	nop
 800f42c:	e7fd      	b.n	800f42a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f42e:	f002 fa3b 	bl	80118a8 <vPortValidateInterruptPriority>
	__asm volatile
 800f432:	f3ef 8211 	mrs	r2, BASEPRI
 800f436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f43a:	f383 8811 	msr	BASEPRI, r3
 800f43e:	f3bf 8f6f 	isb	sy
 800f442:	f3bf 8f4f 	dsb	sy
 800f446:	617a      	str	r2, [r7, #20]
 800f448:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800f44a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f44c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f44e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f452:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800f454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f456:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f458:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f45a:	429a      	cmp	r2, r3
 800f45c:	d22b      	bcs.n	800f4b6 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f45e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f460:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f464:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f46a:	1c5a      	adds	r2, r3, #1
 800f46c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f46e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f470:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f474:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f478:	d112      	bne.n	800f4a0 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f47a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f47c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d016      	beq.n	800f4b0 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f484:	3324      	adds	r3, #36	@ 0x24
 800f486:	4618      	mov	r0, r3
 800f488:	f001 f8fc 	bl	8010684 <xTaskRemoveFromEventList>
 800f48c:	4603      	mov	r3, r0
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d00e      	beq.n	800f4b0 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f492:	683b      	ldr	r3, [r7, #0]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d00b      	beq.n	800f4b0 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f498:	683b      	ldr	r3, [r7, #0]
 800f49a:	2201      	movs	r2, #1
 800f49c:	601a      	str	r2, [r3, #0]
 800f49e:	e007      	b.n	800f4b0 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f4a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f4a4:	3301      	adds	r3, #1
 800f4a6:	b2db      	uxtb	r3, r3
 800f4a8:	b25a      	sxtb	r2, r3
 800f4aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800f4b0:	2301      	movs	r3, #1
 800f4b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800f4b4:	e001      	b.n	800f4ba <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800f4ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4bc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	f383 8811 	msr	BASEPRI, r3
}
 800f4c4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f4c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	3738      	adds	r7, #56	@ 0x38
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	bd80      	pop	{r7, pc}

0800f4d0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b08c      	sub	sp, #48	@ 0x30
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	60f8      	str	r0, [r7, #12]
 800f4d8:	60b9      	str	r1, [r7, #8]
 800f4da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f4dc:	2300      	movs	r3, #0
 800f4de:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f4e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d10b      	bne.n	800f502 <xQueueReceive+0x32>
	__asm volatile
 800f4ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4ee:	f383 8811 	msr	BASEPRI, r3
 800f4f2:	f3bf 8f6f 	isb	sy
 800f4f6:	f3bf 8f4f 	dsb	sy
 800f4fa:	623b      	str	r3, [r7, #32]
}
 800f4fc:	bf00      	nop
 800f4fe:	bf00      	nop
 800f500:	e7fd      	b.n	800f4fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f502:	68bb      	ldr	r3, [r7, #8]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d103      	bne.n	800f510 <xQueueReceive+0x40>
 800f508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f50a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d101      	bne.n	800f514 <xQueueReceive+0x44>
 800f510:	2301      	movs	r3, #1
 800f512:	e000      	b.n	800f516 <xQueueReceive+0x46>
 800f514:	2300      	movs	r3, #0
 800f516:	2b00      	cmp	r3, #0
 800f518:	d10b      	bne.n	800f532 <xQueueReceive+0x62>
	__asm volatile
 800f51a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f51e:	f383 8811 	msr	BASEPRI, r3
 800f522:	f3bf 8f6f 	isb	sy
 800f526:	f3bf 8f4f 	dsb	sy
 800f52a:	61fb      	str	r3, [r7, #28]
}
 800f52c:	bf00      	nop
 800f52e:	bf00      	nop
 800f530:	e7fd      	b.n	800f52e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f532:	f001 fa6d 	bl	8010a10 <xTaskGetSchedulerState>
 800f536:	4603      	mov	r3, r0
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d102      	bne.n	800f542 <xQueueReceive+0x72>
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d101      	bne.n	800f546 <xQueueReceive+0x76>
 800f542:	2301      	movs	r3, #1
 800f544:	e000      	b.n	800f548 <xQueueReceive+0x78>
 800f546:	2300      	movs	r3, #0
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d10b      	bne.n	800f564 <xQueueReceive+0x94>
	__asm volatile
 800f54c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f550:	f383 8811 	msr	BASEPRI, r3
 800f554:	f3bf 8f6f 	isb	sy
 800f558:	f3bf 8f4f 	dsb	sy
 800f55c:	61bb      	str	r3, [r7, #24]
}
 800f55e:	bf00      	nop
 800f560:	bf00      	nop
 800f562:	e7fd      	b.n	800f560 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f564:	f002 f8c0 	bl	80116e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f56a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f56c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f56e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f570:	2b00      	cmp	r3, #0
 800f572:	d01f      	beq.n	800f5b4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f574:	68b9      	ldr	r1, [r7, #8]
 800f576:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f578:	f000 fac4 	bl	800fb04 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f57c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f57e:	1e5a      	subs	r2, r3, #1
 800f580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f582:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f586:	691b      	ldr	r3, [r3, #16]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d00f      	beq.n	800f5ac <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f58c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f58e:	3310      	adds	r3, #16
 800f590:	4618      	mov	r0, r3
 800f592:	f001 f877 	bl	8010684 <xTaskRemoveFromEventList>
 800f596:	4603      	mov	r3, r0
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d007      	beq.n	800f5ac <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f59c:	4b3c      	ldr	r3, [pc, #240]	@ (800f690 <xQueueReceive+0x1c0>)
 800f59e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f5a2:	601a      	str	r2, [r3, #0]
 800f5a4:	f3bf 8f4f 	dsb	sy
 800f5a8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f5ac:	f002 f8ce 	bl	801174c <vPortExitCritical>
				return pdPASS;
 800f5b0:	2301      	movs	r3, #1
 800f5b2:	e069      	b.n	800f688 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d103      	bne.n	800f5c2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f5ba:	f002 f8c7 	bl	801174c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f5be:	2300      	movs	r3, #0
 800f5c0:	e062      	b.n	800f688 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f5c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d106      	bne.n	800f5d6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f5c8:	f107 0310 	add.w	r3, r7, #16
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f001 f8bd 	bl	801074c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f5d2:	2301      	movs	r3, #1
 800f5d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f5d6:	f002 f8b9 	bl	801174c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f5da:	f000 fe25 	bl	8010228 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f5de:	f002 f883 	bl	80116e8 <vPortEnterCritical>
 800f5e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f5e8:	b25b      	sxtb	r3, r3
 800f5ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5ee:	d103      	bne.n	800f5f8 <xQueueReceive+0x128>
 800f5f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f5f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f5fe:	b25b      	sxtb	r3, r3
 800f600:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f604:	d103      	bne.n	800f60e <xQueueReceive+0x13e>
 800f606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f608:	2200      	movs	r2, #0
 800f60a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f60e:	f002 f89d 	bl	801174c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f612:	1d3a      	adds	r2, r7, #4
 800f614:	f107 0310 	add.w	r3, r7, #16
 800f618:	4611      	mov	r1, r2
 800f61a:	4618      	mov	r0, r3
 800f61c:	f001 f8ac 	bl	8010778 <xTaskCheckForTimeOut>
 800f620:	4603      	mov	r3, r0
 800f622:	2b00      	cmp	r3, #0
 800f624:	d123      	bne.n	800f66e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f626:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f628:	f000 fae4 	bl	800fbf4 <prvIsQueueEmpty>
 800f62c:	4603      	mov	r3, r0
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d017      	beq.n	800f662 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f634:	3324      	adds	r3, #36	@ 0x24
 800f636:	687a      	ldr	r2, [r7, #4]
 800f638:	4611      	mov	r1, r2
 800f63a:	4618      	mov	r0, r3
 800f63c:	f000 ffd0 	bl	80105e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f640:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f642:	f000 fa85 	bl	800fb50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f646:	f000 fdfd 	bl	8010244 <xTaskResumeAll>
 800f64a:	4603      	mov	r3, r0
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d189      	bne.n	800f564 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800f650:	4b0f      	ldr	r3, [pc, #60]	@ (800f690 <xQueueReceive+0x1c0>)
 800f652:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f656:	601a      	str	r2, [r3, #0]
 800f658:	f3bf 8f4f 	dsb	sy
 800f65c:	f3bf 8f6f 	isb	sy
 800f660:	e780      	b.n	800f564 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f662:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f664:	f000 fa74 	bl	800fb50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f668:	f000 fdec 	bl	8010244 <xTaskResumeAll>
 800f66c:	e77a      	b.n	800f564 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f66e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f670:	f000 fa6e 	bl	800fb50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f674:	f000 fde6 	bl	8010244 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f678:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f67a:	f000 fabb 	bl	800fbf4 <prvIsQueueEmpty>
 800f67e:	4603      	mov	r3, r0
 800f680:	2b00      	cmp	r3, #0
 800f682:	f43f af6f 	beq.w	800f564 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f686:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f688:	4618      	mov	r0, r3
 800f68a:	3730      	adds	r7, #48	@ 0x30
 800f68c:	46bd      	mov	sp, r7
 800f68e:	bd80      	pop	{r7, pc}
 800f690:	e000ed04 	.word	0xe000ed04

0800f694 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f694:	b580      	push	{r7, lr}
 800f696:	b08e      	sub	sp, #56	@ 0x38
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
 800f69c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f69e:	2300      	movs	r3, #0
 800f6a0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f6aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d10b      	bne.n	800f6c8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800f6b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6b4:	f383 8811 	msr	BASEPRI, r3
 800f6b8:	f3bf 8f6f 	isb	sy
 800f6bc:	f3bf 8f4f 	dsb	sy
 800f6c0:	623b      	str	r3, [r7, #32]
}
 800f6c2:	bf00      	nop
 800f6c4:	bf00      	nop
 800f6c6:	e7fd      	b.n	800f6c4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f6c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d00b      	beq.n	800f6e8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800f6d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6d4:	f383 8811 	msr	BASEPRI, r3
 800f6d8:	f3bf 8f6f 	isb	sy
 800f6dc:	f3bf 8f4f 	dsb	sy
 800f6e0:	61fb      	str	r3, [r7, #28]
}
 800f6e2:	bf00      	nop
 800f6e4:	bf00      	nop
 800f6e6:	e7fd      	b.n	800f6e4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f6e8:	f001 f992 	bl	8010a10 <xTaskGetSchedulerState>
 800f6ec:	4603      	mov	r3, r0
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d102      	bne.n	800f6f8 <xQueueSemaphoreTake+0x64>
 800f6f2:	683b      	ldr	r3, [r7, #0]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d101      	bne.n	800f6fc <xQueueSemaphoreTake+0x68>
 800f6f8:	2301      	movs	r3, #1
 800f6fa:	e000      	b.n	800f6fe <xQueueSemaphoreTake+0x6a>
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d10b      	bne.n	800f71a <xQueueSemaphoreTake+0x86>
	__asm volatile
 800f702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f706:	f383 8811 	msr	BASEPRI, r3
 800f70a:	f3bf 8f6f 	isb	sy
 800f70e:	f3bf 8f4f 	dsb	sy
 800f712:	61bb      	str	r3, [r7, #24]
}
 800f714:	bf00      	nop
 800f716:	bf00      	nop
 800f718:	e7fd      	b.n	800f716 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f71a:	f001 ffe5 	bl	80116e8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f71e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f722:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f726:	2b00      	cmp	r3, #0
 800f728:	d024      	beq.n	800f774 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f72a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f72c:	1e5a      	subs	r2, r3, #1
 800f72e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f730:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d104      	bne.n	800f744 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f73a:	f001 fae3 	bl	8010d04 <pvTaskIncrementMutexHeldCount>
 800f73e:	4602      	mov	r2, r0
 800f740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f742:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f746:	691b      	ldr	r3, [r3, #16]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d00f      	beq.n	800f76c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f74c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f74e:	3310      	adds	r3, #16
 800f750:	4618      	mov	r0, r3
 800f752:	f000 ff97 	bl	8010684 <xTaskRemoveFromEventList>
 800f756:	4603      	mov	r3, r0
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d007      	beq.n	800f76c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f75c:	4b54      	ldr	r3, [pc, #336]	@ (800f8b0 <xQueueSemaphoreTake+0x21c>)
 800f75e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f762:	601a      	str	r2, [r3, #0]
 800f764:	f3bf 8f4f 	dsb	sy
 800f768:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f76c:	f001 ffee 	bl	801174c <vPortExitCritical>
				return pdPASS;
 800f770:	2301      	movs	r3, #1
 800f772:	e098      	b.n	800f8a6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f774:	683b      	ldr	r3, [r7, #0]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d112      	bne.n	800f7a0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f77a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d00b      	beq.n	800f798 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800f780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f784:	f383 8811 	msr	BASEPRI, r3
 800f788:	f3bf 8f6f 	isb	sy
 800f78c:	f3bf 8f4f 	dsb	sy
 800f790:	617b      	str	r3, [r7, #20]
}
 800f792:	bf00      	nop
 800f794:	bf00      	nop
 800f796:	e7fd      	b.n	800f794 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f798:	f001 ffd8 	bl	801174c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f79c:	2300      	movs	r3, #0
 800f79e:	e082      	b.n	800f8a6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f7a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d106      	bne.n	800f7b4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f7a6:	f107 030c 	add.w	r3, r7, #12
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	f000 ffce 	bl	801074c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f7b0:	2301      	movs	r3, #1
 800f7b2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f7b4:	f001 ffca 	bl	801174c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f7b8:	f000 fd36 	bl	8010228 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f7bc:	f001 ff94 	bl	80116e8 <vPortEnterCritical>
 800f7c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7c2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f7c6:	b25b      	sxtb	r3, r3
 800f7c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7cc:	d103      	bne.n	800f7d6 <xQueueSemaphoreTake+0x142>
 800f7ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f7d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f7dc:	b25b      	sxtb	r3, r3
 800f7de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7e2:	d103      	bne.n	800f7ec <xQueueSemaphoreTake+0x158>
 800f7e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f7ec:	f001 ffae 	bl	801174c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f7f0:	463a      	mov	r2, r7
 800f7f2:	f107 030c 	add.w	r3, r7, #12
 800f7f6:	4611      	mov	r1, r2
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	f000 ffbd 	bl	8010778 <xTaskCheckForTimeOut>
 800f7fe:	4603      	mov	r3, r0
 800f800:	2b00      	cmp	r3, #0
 800f802:	d132      	bne.n	800f86a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f804:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f806:	f000 f9f5 	bl	800fbf4 <prvIsQueueEmpty>
 800f80a:	4603      	mov	r3, r0
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d026      	beq.n	800f85e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d109      	bne.n	800f82c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800f818:	f001 ff66 	bl	80116e8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f81c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f81e:	689b      	ldr	r3, [r3, #8]
 800f820:	4618      	mov	r0, r3
 800f822:	f001 f913 	bl	8010a4c <xTaskPriorityInherit>
 800f826:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800f828:	f001 ff90 	bl	801174c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f82c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f82e:	3324      	adds	r3, #36	@ 0x24
 800f830:	683a      	ldr	r2, [r7, #0]
 800f832:	4611      	mov	r1, r2
 800f834:	4618      	mov	r0, r3
 800f836:	f000 fed3 	bl	80105e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f83a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f83c:	f000 f988 	bl	800fb50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f840:	f000 fd00 	bl	8010244 <xTaskResumeAll>
 800f844:	4603      	mov	r3, r0
 800f846:	2b00      	cmp	r3, #0
 800f848:	f47f af67 	bne.w	800f71a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800f84c:	4b18      	ldr	r3, [pc, #96]	@ (800f8b0 <xQueueSemaphoreTake+0x21c>)
 800f84e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f852:	601a      	str	r2, [r3, #0]
 800f854:	f3bf 8f4f 	dsb	sy
 800f858:	f3bf 8f6f 	isb	sy
 800f85c:	e75d      	b.n	800f71a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f85e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f860:	f000 f976 	bl	800fb50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f864:	f000 fcee 	bl	8010244 <xTaskResumeAll>
 800f868:	e757      	b.n	800f71a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f86a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f86c:	f000 f970 	bl	800fb50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f870:	f000 fce8 	bl	8010244 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f874:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f876:	f000 f9bd 	bl	800fbf4 <prvIsQueueEmpty>
 800f87a:	4603      	mov	r3, r0
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	f43f af4c 	beq.w	800f71a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f884:	2b00      	cmp	r3, #0
 800f886:	d00d      	beq.n	800f8a4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800f888:	f001 ff2e 	bl	80116e8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f88c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f88e:	f000 f8b7 	bl	800fa00 <prvGetDisinheritPriorityAfterTimeout>
 800f892:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f896:	689b      	ldr	r3, [r3, #8]
 800f898:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f89a:	4618      	mov	r0, r3
 800f89c:	f001 f9ae 	bl	8010bfc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f8a0:	f001 ff54 	bl	801174c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f8a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	3738      	adds	r7, #56	@ 0x38
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	bd80      	pop	{r7, pc}
 800f8ae:	bf00      	nop
 800f8b0:	e000ed04 	.word	0xe000ed04

0800f8b4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b08e      	sub	sp, #56	@ 0x38
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	60f8      	str	r0, [r7, #12]
 800f8bc:	60b9      	str	r1, [r7, #8]
 800f8be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800f8c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d10b      	bne.n	800f8e2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800f8ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8ce:	f383 8811 	msr	BASEPRI, r3
 800f8d2:	f3bf 8f6f 	isb	sy
 800f8d6:	f3bf 8f4f 	dsb	sy
 800f8da:	623b      	str	r3, [r7, #32]
}
 800f8dc:	bf00      	nop
 800f8de:	bf00      	nop
 800f8e0:	e7fd      	b.n	800f8de <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f8e2:	68bb      	ldr	r3, [r7, #8]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d103      	bne.n	800f8f0 <xQueueReceiveFromISR+0x3c>
 800f8e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d101      	bne.n	800f8f4 <xQueueReceiveFromISR+0x40>
 800f8f0:	2301      	movs	r3, #1
 800f8f2:	e000      	b.n	800f8f6 <xQueueReceiveFromISR+0x42>
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d10b      	bne.n	800f912 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800f8fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8fe:	f383 8811 	msr	BASEPRI, r3
 800f902:	f3bf 8f6f 	isb	sy
 800f906:	f3bf 8f4f 	dsb	sy
 800f90a:	61fb      	str	r3, [r7, #28]
}
 800f90c:	bf00      	nop
 800f90e:	bf00      	nop
 800f910:	e7fd      	b.n	800f90e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f912:	f001 ffc9 	bl	80118a8 <vPortValidateInterruptPriority>
	__asm volatile
 800f916:	f3ef 8211 	mrs	r2, BASEPRI
 800f91a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f91e:	f383 8811 	msr	BASEPRI, r3
 800f922:	f3bf 8f6f 	isb	sy
 800f926:	f3bf 8f4f 	dsb	sy
 800f92a:	61ba      	str	r2, [r7, #24]
 800f92c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f92e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f930:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f936:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d02f      	beq.n	800f99e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f93e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f940:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f944:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f948:	68b9      	ldr	r1, [r7, #8]
 800f94a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f94c:	f000 f8da 	bl	800fb04 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f952:	1e5a      	subs	r2, r3, #1
 800f954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f956:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f958:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f95c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f960:	d112      	bne.n	800f988 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f964:	691b      	ldr	r3, [r3, #16]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d016      	beq.n	800f998 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f96a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f96c:	3310      	adds	r3, #16
 800f96e:	4618      	mov	r0, r3
 800f970:	f000 fe88 	bl	8010684 <xTaskRemoveFromEventList>
 800f974:	4603      	mov	r3, r0
 800f976:	2b00      	cmp	r3, #0
 800f978:	d00e      	beq.n	800f998 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d00b      	beq.n	800f998 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	2201      	movs	r2, #1
 800f984:	601a      	str	r2, [r3, #0]
 800f986:	e007      	b.n	800f998 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f988:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f98c:	3301      	adds	r3, #1
 800f98e:	b2db      	uxtb	r3, r3
 800f990:	b25a      	sxtb	r2, r3
 800f992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f994:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800f998:	2301      	movs	r3, #1
 800f99a:	637b      	str	r3, [r7, #52]	@ 0x34
 800f99c:	e001      	b.n	800f9a2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800f99e:	2300      	movs	r3, #0
 800f9a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800f9a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f9a6:	693b      	ldr	r3, [r7, #16]
 800f9a8:	f383 8811 	msr	BASEPRI, r3
}
 800f9ac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f9ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	3738      	adds	r7, #56	@ 0x38
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	bd80      	pop	{r7, pc}

0800f9b8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b084      	sub	sp, #16
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d10b      	bne.n	800f9e2 <vQueueDelete+0x2a>
	__asm volatile
 800f9ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9ce:	f383 8811 	msr	BASEPRI, r3
 800f9d2:	f3bf 8f6f 	isb	sy
 800f9d6:	f3bf 8f4f 	dsb	sy
 800f9da:	60bb      	str	r3, [r7, #8]
}
 800f9dc:	bf00      	nop
 800f9de:	bf00      	nop
 800f9e0:	e7fd      	b.n	800f9de <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800f9e2:	68f8      	ldr	r0, [r7, #12]
 800f9e4:	f000 f95e 	bl	800fca4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d102      	bne.n	800f9f8 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800f9f2:	68f8      	ldr	r0, [r7, #12]
 800f9f4:	f002 f868 	bl	8011ac8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800f9f8:	bf00      	nop
 800f9fa:	3710      	adds	r7, #16
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	bd80      	pop	{r7, pc}

0800fa00 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800fa00:	b480      	push	{r7}
 800fa02:	b085      	sub	sp, #20
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d006      	beq.n	800fa1e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800fa1a:	60fb      	str	r3, [r7, #12]
 800fa1c:	e001      	b.n	800fa22 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800fa1e:	2300      	movs	r3, #0
 800fa20:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800fa22:	68fb      	ldr	r3, [r7, #12]
	}
 800fa24:	4618      	mov	r0, r3
 800fa26:	3714      	adds	r7, #20
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2e:	4770      	bx	lr

0800fa30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b086      	sub	sp, #24
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	60f8      	str	r0, [r7, #12]
 800fa38:	60b9      	str	r1, [r7, #8]
 800fa3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d10d      	bne.n	800fa6a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d14d      	bne.n	800faf2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	689b      	ldr	r3, [r3, #8]
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	f001 f85e 	bl	8010b1c <xTaskPriorityDisinherit>
 800fa60:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	2200      	movs	r2, #0
 800fa66:	609a      	str	r2, [r3, #8]
 800fa68:	e043      	b.n	800faf2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d119      	bne.n	800faa4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	6858      	ldr	r0, [r3, #4]
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa78:	461a      	mov	r2, r3
 800fa7a:	68b9      	ldr	r1, [r7, #8]
 800fa7c:	f01a fec9 	bl	802a812 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	685a      	ldr	r2, [r3, #4]
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa88:	441a      	add	r2, r3
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	685a      	ldr	r2, [r3, #4]
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	689b      	ldr	r3, [r3, #8]
 800fa96:	429a      	cmp	r2, r3
 800fa98:	d32b      	bcc.n	800faf2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	681a      	ldr	r2, [r3, #0]
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	605a      	str	r2, [r3, #4]
 800faa2:	e026      	b.n	800faf2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	68d8      	ldr	r0, [r3, #12]
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800faac:	461a      	mov	r2, r3
 800faae:	68b9      	ldr	r1, [r7, #8]
 800fab0:	f01a feaf 	bl	802a812 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	68da      	ldr	r2, [r3, #12]
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fabc:	425b      	negs	r3, r3
 800fabe:	441a      	add	r2, r3
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	68da      	ldr	r2, [r3, #12]
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	429a      	cmp	r2, r3
 800face:	d207      	bcs.n	800fae0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	689a      	ldr	r2, [r3, #8]
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fad8:	425b      	negs	r3, r3
 800fada:	441a      	add	r2, r3
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	2b02      	cmp	r3, #2
 800fae4:	d105      	bne.n	800faf2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fae6:	693b      	ldr	r3, [r7, #16]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d002      	beq.n	800faf2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800faec:	693b      	ldr	r3, [r7, #16]
 800faee:	3b01      	subs	r3, #1
 800faf0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800faf2:	693b      	ldr	r3, [r7, #16]
 800faf4:	1c5a      	adds	r2, r3, #1
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800fafa:	697b      	ldr	r3, [r7, #20]
}
 800fafc:	4618      	mov	r0, r3
 800fafe:	3718      	adds	r7, #24
 800fb00:	46bd      	mov	sp, r7
 800fb02:	bd80      	pop	{r7, pc}

0800fb04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b082      	sub	sp, #8
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
 800fb0c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d018      	beq.n	800fb48 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	68da      	ldr	r2, [r3, #12]
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb1e:	441a      	add	r2, r3
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	68da      	ldr	r2, [r3, #12]
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	689b      	ldr	r3, [r3, #8]
 800fb2c:	429a      	cmp	r2, r3
 800fb2e:	d303      	bcc.n	800fb38 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	681a      	ldr	r2, [r3, #0]
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	68d9      	ldr	r1, [r3, #12]
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb40:	461a      	mov	r2, r3
 800fb42:	6838      	ldr	r0, [r7, #0]
 800fb44:	f01a fe65 	bl	802a812 <memcpy>
	}
}
 800fb48:	bf00      	nop
 800fb4a:	3708      	adds	r7, #8
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	bd80      	pop	{r7, pc}

0800fb50 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b084      	sub	sp, #16
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800fb58:	f001 fdc6 	bl	80116e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fb62:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fb64:	e011      	b.n	800fb8a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d012      	beq.n	800fb94 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	3324      	adds	r3, #36	@ 0x24
 800fb72:	4618      	mov	r0, r3
 800fb74:	f000 fd86 	bl	8010684 <xTaskRemoveFromEventList>
 800fb78:	4603      	mov	r3, r0
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d001      	beq.n	800fb82 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800fb7e:	f000 fe5f 	bl	8010840 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800fb82:	7bfb      	ldrb	r3, [r7, #15]
 800fb84:	3b01      	subs	r3, #1
 800fb86:	b2db      	uxtb	r3, r3
 800fb88:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fb8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	dce9      	bgt.n	800fb66 <prvUnlockQueue+0x16>
 800fb92:	e000      	b.n	800fb96 <prvUnlockQueue+0x46>
					break;
 800fb94:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	22ff      	movs	r2, #255	@ 0xff
 800fb9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800fb9e:	f001 fdd5 	bl	801174c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800fba2:	f001 fda1 	bl	80116e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fbac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fbae:	e011      	b.n	800fbd4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	691b      	ldr	r3, [r3, #16]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d012      	beq.n	800fbde <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	3310      	adds	r3, #16
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	f000 fd61 	bl	8010684 <xTaskRemoveFromEventList>
 800fbc2:	4603      	mov	r3, r0
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d001      	beq.n	800fbcc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800fbc8:	f000 fe3a 	bl	8010840 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800fbcc:	7bbb      	ldrb	r3, [r7, #14]
 800fbce:	3b01      	subs	r3, #1
 800fbd0:	b2db      	uxtb	r3, r3
 800fbd2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fbd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	dce9      	bgt.n	800fbb0 <prvUnlockQueue+0x60>
 800fbdc:	e000      	b.n	800fbe0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800fbde:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	22ff      	movs	r2, #255	@ 0xff
 800fbe4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800fbe8:	f001 fdb0 	bl	801174c <vPortExitCritical>
}
 800fbec:	bf00      	nop
 800fbee:	3710      	adds	r7, #16
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	bd80      	pop	{r7, pc}

0800fbf4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b084      	sub	sp, #16
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fbfc:	f001 fd74 	bl	80116e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d102      	bne.n	800fc0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800fc08:	2301      	movs	r3, #1
 800fc0a:	60fb      	str	r3, [r7, #12]
 800fc0c:	e001      	b.n	800fc12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800fc0e:	2300      	movs	r3, #0
 800fc10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fc12:	f001 fd9b 	bl	801174c <vPortExitCritical>

	return xReturn;
 800fc16:	68fb      	ldr	r3, [r7, #12]
}
 800fc18:	4618      	mov	r0, r3
 800fc1a:	3710      	adds	r7, #16
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	bd80      	pop	{r7, pc}

0800fc20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800fc20:	b580      	push	{r7, lr}
 800fc22:	b084      	sub	sp, #16
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fc28:	f001 fd5e 	bl	80116e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc34:	429a      	cmp	r2, r3
 800fc36:	d102      	bne.n	800fc3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800fc38:	2301      	movs	r3, #1
 800fc3a:	60fb      	str	r3, [r7, #12]
 800fc3c:	e001      	b.n	800fc42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800fc3e:	2300      	movs	r3, #0
 800fc40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fc42:	f001 fd83 	bl	801174c <vPortExitCritical>

	return xReturn;
 800fc46:	68fb      	ldr	r3, [r7, #12]
}
 800fc48:	4618      	mov	r0, r3
 800fc4a:	3710      	adds	r7, #16
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	bd80      	pop	{r7, pc}

0800fc50 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800fc50:	b480      	push	{r7}
 800fc52:	b085      	sub	sp, #20
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	6078      	str	r0, [r7, #4]
 800fc58:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	60fb      	str	r3, [r7, #12]
 800fc5e:	e014      	b.n	800fc8a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800fc60:	4a0f      	ldr	r2, [pc, #60]	@ (800fca0 <vQueueAddToRegistry+0x50>)
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d10b      	bne.n	800fc84 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800fc6c:	490c      	ldr	r1, [pc, #48]	@ (800fca0 <vQueueAddToRegistry+0x50>)
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	683a      	ldr	r2, [r7, #0]
 800fc72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800fc76:	4a0a      	ldr	r2, [pc, #40]	@ (800fca0 <vQueueAddToRegistry+0x50>)
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	00db      	lsls	r3, r3, #3
 800fc7c:	4413      	add	r3, r2
 800fc7e:	687a      	ldr	r2, [r7, #4]
 800fc80:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800fc82:	e006      	b.n	800fc92 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	3301      	adds	r3, #1
 800fc88:	60fb      	str	r3, [r7, #12]
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	2b07      	cmp	r3, #7
 800fc8e:	d9e7      	bls.n	800fc60 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800fc90:	bf00      	nop
 800fc92:	bf00      	nop
 800fc94:	3714      	adds	r7, #20
 800fc96:	46bd      	mov	sp, r7
 800fc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9c:	4770      	bx	lr
 800fc9e:	bf00      	nop
 800fca0:	24001044 	.word	0x24001044

0800fca4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800fca4:	b480      	push	{r7}
 800fca6:	b085      	sub	sp, #20
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fcac:	2300      	movs	r3, #0
 800fcae:	60fb      	str	r3, [r7, #12]
 800fcb0:	e016      	b.n	800fce0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800fcb2:	4a10      	ldr	r2, [pc, #64]	@ (800fcf4 <vQueueUnregisterQueue+0x50>)
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	00db      	lsls	r3, r3, #3
 800fcb8:	4413      	add	r3, r2
 800fcba:	685b      	ldr	r3, [r3, #4]
 800fcbc:	687a      	ldr	r2, [r7, #4]
 800fcbe:	429a      	cmp	r2, r3
 800fcc0:	d10b      	bne.n	800fcda <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800fcc2:	4a0c      	ldr	r2, [pc, #48]	@ (800fcf4 <vQueueUnregisterQueue+0x50>)
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	2100      	movs	r1, #0
 800fcc8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800fccc:	4a09      	ldr	r2, [pc, #36]	@ (800fcf4 <vQueueUnregisterQueue+0x50>)
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	00db      	lsls	r3, r3, #3
 800fcd2:	4413      	add	r3, r2
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	605a      	str	r2, [r3, #4]
				break;
 800fcd8:	e006      	b.n	800fce8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	3301      	adds	r3, #1
 800fcde:	60fb      	str	r3, [r7, #12]
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	2b07      	cmp	r3, #7
 800fce4:	d9e5      	bls.n	800fcb2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800fce6:	bf00      	nop
 800fce8:	bf00      	nop
 800fcea:	3714      	adds	r7, #20
 800fcec:	46bd      	mov	sp, r7
 800fcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf2:	4770      	bx	lr
 800fcf4:	24001044 	.word	0x24001044

0800fcf8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b086      	sub	sp, #24
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	60f8      	str	r0, [r7, #12]
 800fd00:	60b9      	str	r1, [r7, #8]
 800fd02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800fd08:	f001 fcee 	bl	80116e8 <vPortEnterCritical>
 800fd0c:	697b      	ldr	r3, [r7, #20]
 800fd0e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fd12:	b25b      	sxtb	r3, r3
 800fd14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd18:	d103      	bne.n	800fd22 <vQueueWaitForMessageRestricted+0x2a>
 800fd1a:	697b      	ldr	r3, [r7, #20]
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fd22:	697b      	ldr	r3, [r7, #20]
 800fd24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fd28:	b25b      	sxtb	r3, r3
 800fd2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd2e:	d103      	bne.n	800fd38 <vQueueWaitForMessageRestricted+0x40>
 800fd30:	697b      	ldr	r3, [r7, #20]
 800fd32:	2200      	movs	r2, #0
 800fd34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fd38:	f001 fd08 	bl	801174c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800fd3c:	697b      	ldr	r3, [r7, #20]
 800fd3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d106      	bne.n	800fd52 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800fd44:	697b      	ldr	r3, [r7, #20]
 800fd46:	3324      	adds	r3, #36	@ 0x24
 800fd48:	687a      	ldr	r2, [r7, #4]
 800fd4a:	68b9      	ldr	r1, [r7, #8]
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	f000 fc6d 	bl	801062c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800fd52:	6978      	ldr	r0, [r7, #20]
 800fd54:	f7ff fefc 	bl	800fb50 <prvUnlockQueue>
	}
 800fd58:	bf00      	nop
 800fd5a:	3718      	adds	r7, #24
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	bd80      	pop	{r7, pc}

0800fd60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800fd60:	b580      	push	{r7, lr}
 800fd62:	b08e      	sub	sp, #56	@ 0x38
 800fd64:	af04      	add	r7, sp, #16
 800fd66:	60f8      	str	r0, [r7, #12]
 800fd68:	60b9      	str	r1, [r7, #8]
 800fd6a:	607a      	str	r2, [r7, #4]
 800fd6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800fd6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d10b      	bne.n	800fd8c <xTaskCreateStatic+0x2c>
	__asm volatile
 800fd74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd78:	f383 8811 	msr	BASEPRI, r3
 800fd7c:	f3bf 8f6f 	isb	sy
 800fd80:	f3bf 8f4f 	dsb	sy
 800fd84:	623b      	str	r3, [r7, #32]
}
 800fd86:	bf00      	nop
 800fd88:	bf00      	nop
 800fd8a:	e7fd      	b.n	800fd88 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800fd8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d10b      	bne.n	800fdaa <xTaskCreateStatic+0x4a>
	__asm volatile
 800fd92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd96:	f383 8811 	msr	BASEPRI, r3
 800fd9a:	f3bf 8f6f 	isb	sy
 800fd9e:	f3bf 8f4f 	dsb	sy
 800fda2:	61fb      	str	r3, [r7, #28]
}
 800fda4:	bf00      	nop
 800fda6:	bf00      	nop
 800fda8:	e7fd      	b.n	800fda6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800fdaa:	23a8      	movs	r3, #168	@ 0xa8
 800fdac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800fdae:	693b      	ldr	r3, [r7, #16]
 800fdb0:	2ba8      	cmp	r3, #168	@ 0xa8
 800fdb2:	d00b      	beq.n	800fdcc <xTaskCreateStatic+0x6c>
	__asm volatile
 800fdb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdb8:	f383 8811 	msr	BASEPRI, r3
 800fdbc:	f3bf 8f6f 	isb	sy
 800fdc0:	f3bf 8f4f 	dsb	sy
 800fdc4:	61bb      	str	r3, [r7, #24]
}
 800fdc6:	bf00      	nop
 800fdc8:	bf00      	nop
 800fdca:	e7fd      	b.n	800fdc8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800fdcc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800fdce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d01e      	beq.n	800fe12 <xTaskCreateStatic+0xb2>
 800fdd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d01b      	beq.n	800fe12 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fdda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fddc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800fdde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fde0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fde2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800fde4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fde6:	2202      	movs	r2, #2
 800fde8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800fdec:	2300      	movs	r3, #0
 800fdee:	9303      	str	r3, [sp, #12]
 800fdf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdf2:	9302      	str	r3, [sp, #8]
 800fdf4:	f107 0314 	add.w	r3, r7, #20
 800fdf8:	9301      	str	r3, [sp, #4]
 800fdfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdfc:	9300      	str	r3, [sp, #0]
 800fdfe:	683b      	ldr	r3, [r7, #0]
 800fe00:	687a      	ldr	r2, [r7, #4]
 800fe02:	68b9      	ldr	r1, [r7, #8]
 800fe04:	68f8      	ldr	r0, [r7, #12]
 800fe06:	f000 f851 	bl	800feac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fe0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fe0c:	f000 f8f6 	bl	800fffc <prvAddNewTaskToReadyList>
 800fe10:	e001      	b.n	800fe16 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800fe12:	2300      	movs	r3, #0
 800fe14:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800fe16:	697b      	ldr	r3, [r7, #20]
	}
 800fe18:	4618      	mov	r0, r3
 800fe1a:	3728      	adds	r7, #40	@ 0x28
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	bd80      	pop	{r7, pc}

0800fe20 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b08c      	sub	sp, #48	@ 0x30
 800fe24:	af04      	add	r7, sp, #16
 800fe26:	60f8      	str	r0, [r7, #12]
 800fe28:	60b9      	str	r1, [r7, #8]
 800fe2a:	603b      	str	r3, [r7, #0]
 800fe2c:	4613      	mov	r3, r2
 800fe2e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fe30:	88fb      	ldrh	r3, [r7, #6]
 800fe32:	009b      	lsls	r3, r3, #2
 800fe34:	4618      	mov	r0, r3
 800fe36:	f001 fd79 	bl	801192c <pvPortMalloc>
 800fe3a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fe3c:	697b      	ldr	r3, [r7, #20]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d00e      	beq.n	800fe60 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fe42:	20a8      	movs	r0, #168	@ 0xa8
 800fe44:	f001 fd72 	bl	801192c <pvPortMalloc>
 800fe48:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fe4a:	69fb      	ldr	r3, [r7, #28]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d003      	beq.n	800fe58 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fe50:	69fb      	ldr	r3, [r7, #28]
 800fe52:	697a      	ldr	r2, [r7, #20]
 800fe54:	631a      	str	r2, [r3, #48]	@ 0x30
 800fe56:	e005      	b.n	800fe64 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fe58:	6978      	ldr	r0, [r7, #20]
 800fe5a:	f001 fe35 	bl	8011ac8 <vPortFree>
 800fe5e:	e001      	b.n	800fe64 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fe60:	2300      	movs	r3, #0
 800fe62:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fe64:	69fb      	ldr	r3, [r7, #28]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d017      	beq.n	800fe9a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fe6a:	69fb      	ldr	r3, [r7, #28]
 800fe6c:	2200      	movs	r2, #0
 800fe6e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fe72:	88fa      	ldrh	r2, [r7, #6]
 800fe74:	2300      	movs	r3, #0
 800fe76:	9303      	str	r3, [sp, #12]
 800fe78:	69fb      	ldr	r3, [r7, #28]
 800fe7a:	9302      	str	r3, [sp, #8]
 800fe7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe7e:	9301      	str	r3, [sp, #4]
 800fe80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe82:	9300      	str	r3, [sp, #0]
 800fe84:	683b      	ldr	r3, [r7, #0]
 800fe86:	68b9      	ldr	r1, [r7, #8]
 800fe88:	68f8      	ldr	r0, [r7, #12]
 800fe8a:	f000 f80f 	bl	800feac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fe8e:	69f8      	ldr	r0, [r7, #28]
 800fe90:	f000 f8b4 	bl	800fffc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fe94:	2301      	movs	r3, #1
 800fe96:	61bb      	str	r3, [r7, #24]
 800fe98:	e002      	b.n	800fea0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fe9a:	f04f 33ff 	mov.w	r3, #4294967295
 800fe9e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fea0:	69bb      	ldr	r3, [r7, #24]
	}
 800fea2:	4618      	mov	r0, r3
 800fea4:	3720      	adds	r7, #32
 800fea6:	46bd      	mov	sp, r7
 800fea8:	bd80      	pop	{r7, pc}
	...

0800feac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800feac:	b580      	push	{r7, lr}
 800feae:	b088      	sub	sp, #32
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	60f8      	str	r0, [r7, #12]
 800feb4:	60b9      	str	r1, [r7, #8]
 800feb6:	607a      	str	r2, [r7, #4]
 800feb8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800feba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800febc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	009b      	lsls	r3, r3, #2
 800fec2:	461a      	mov	r2, r3
 800fec4:	21a5      	movs	r1, #165	@ 0xa5
 800fec6:	f01a fb7f 	bl	802a5c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800feca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fecc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fece:	6879      	ldr	r1, [r7, #4]
 800fed0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800fed4:	440b      	add	r3, r1
 800fed6:	009b      	lsls	r3, r3, #2
 800fed8:	4413      	add	r3, r2
 800feda:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fedc:	69bb      	ldr	r3, [r7, #24]
 800fede:	f023 0307 	bic.w	r3, r3, #7
 800fee2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fee4:	69bb      	ldr	r3, [r7, #24]
 800fee6:	f003 0307 	and.w	r3, r3, #7
 800feea:	2b00      	cmp	r3, #0
 800feec:	d00b      	beq.n	800ff06 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800feee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fef2:	f383 8811 	msr	BASEPRI, r3
 800fef6:	f3bf 8f6f 	isb	sy
 800fefa:	f3bf 8f4f 	dsb	sy
 800fefe:	617b      	str	r3, [r7, #20]
}
 800ff00:	bf00      	nop
 800ff02:	bf00      	nop
 800ff04:	e7fd      	b.n	800ff02 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ff06:	68bb      	ldr	r3, [r7, #8]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d01f      	beq.n	800ff4c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	61fb      	str	r3, [r7, #28]
 800ff10:	e012      	b.n	800ff38 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ff12:	68ba      	ldr	r2, [r7, #8]
 800ff14:	69fb      	ldr	r3, [r7, #28]
 800ff16:	4413      	add	r3, r2
 800ff18:	7819      	ldrb	r1, [r3, #0]
 800ff1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ff1c:	69fb      	ldr	r3, [r7, #28]
 800ff1e:	4413      	add	r3, r2
 800ff20:	3334      	adds	r3, #52	@ 0x34
 800ff22:	460a      	mov	r2, r1
 800ff24:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ff26:	68ba      	ldr	r2, [r7, #8]
 800ff28:	69fb      	ldr	r3, [r7, #28]
 800ff2a:	4413      	add	r3, r2
 800ff2c:	781b      	ldrb	r3, [r3, #0]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d006      	beq.n	800ff40 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ff32:	69fb      	ldr	r3, [r7, #28]
 800ff34:	3301      	adds	r3, #1
 800ff36:	61fb      	str	r3, [r7, #28]
 800ff38:	69fb      	ldr	r3, [r7, #28]
 800ff3a:	2b0f      	cmp	r3, #15
 800ff3c:	d9e9      	bls.n	800ff12 <prvInitialiseNewTask+0x66>
 800ff3e:	e000      	b.n	800ff42 <prvInitialiseNewTask+0x96>
			{
				break;
 800ff40:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ff42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff44:	2200      	movs	r2, #0
 800ff46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ff4a:	e003      	b.n	800ff54 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ff4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff4e:	2200      	movs	r2, #0
 800ff50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ff54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff56:	2b37      	cmp	r3, #55	@ 0x37
 800ff58:	d901      	bls.n	800ff5e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ff5a:	2337      	movs	r3, #55	@ 0x37
 800ff5c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ff5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ff62:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ff64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ff68:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ff6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff6c:	2200      	movs	r2, #0
 800ff6e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ff70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff72:	3304      	adds	r3, #4
 800ff74:	4618      	mov	r0, r3
 800ff76:	f7fe fe33 	bl	800ebe0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ff7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff7c:	3318      	adds	r3, #24
 800ff7e:	4618      	mov	r0, r3
 800ff80:	f7fe fe2e 	bl	800ebe0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ff84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ff88:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff8c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ff90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff92:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ff94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ff98:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ff9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ffa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ffaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffac:	3354      	adds	r3, #84	@ 0x54
 800ffae:	224c      	movs	r2, #76	@ 0x4c
 800ffb0:	2100      	movs	r1, #0
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	f01a fb08 	bl	802a5c8 <memset>
 800ffb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffba:	4a0d      	ldr	r2, [pc, #52]	@ (800fff0 <prvInitialiseNewTask+0x144>)
 800ffbc:	659a      	str	r2, [r3, #88]	@ 0x58
 800ffbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffc0:	4a0c      	ldr	r2, [pc, #48]	@ (800fff4 <prvInitialiseNewTask+0x148>)
 800ffc2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800ffc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffc6:	4a0c      	ldr	r2, [pc, #48]	@ (800fff8 <prvInitialiseNewTask+0x14c>)
 800ffc8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ffca:	683a      	ldr	r2, [r7, #0]
 800ffcc:	68f9      	ldr	r1, [r7, #12]
 800ffce:	69b8      	ldr	r0, [r7, #24]
 800ffd0:	f001 fa5a 	bl	8011488 <pxPortInitialiseStack>
 800ffd4:	4602      	mov	r2, r0
 800ffd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffd8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ffda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d002      	beq.n	800ffe6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ffe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffe2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ffe4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ffe6:	bf00      	nop
 800ffe8:	3720      	adds	r7, #32
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd80      	pop	{r7, pc}
 800ffee:	bf00      	nop
 800fff0:	2401459c 	.word	0x2401459c
 800fff4:	24014604 	.word	0x24014604
 800fff8:	2401466c 	.word	0x2401466c

0800fffc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b082      	sub	sp, #8
 8010000:	af00      	add	r7, sp, #0
 8010002:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010004:	f001 fb70 	bl	80116e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010008:	4b2d      	ldr	r3, [pc, #180]	@ (80100c0 <prvAddNewTaskToReadyList+0xc4>)
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	3301      	adds	r3, #1
 801000e:	4a2c      	ldr	r2, [pc, #176]	@ (80100c0 <prvAddNewTaskToReadyList+0xc4>)
 8010010:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010012:	4b2c      	ldr	r3, [pc, #176]	@ (80100c4 <prvAddNewTaskToReadyList+0xc8>)
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d109      	bne.n	801002e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801001a:	4a2a      	ldr	r2, [pc, #168]	@ (80100c4 <prvAddNewTaskToReadyList+0xc8>)
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010020:	4b27      	ldr	r3, [pc, #156]	@ (80100c0 <prvAddNewTaskToReadyList+0xc4>)
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	2b01      	cmp	r3, #1
 8010026:	d110      	bne.n	801004a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010028:	f000 fc2e 	bl	8010888 <prvInitialiseTaskLists>
 801002c:	e00d      	b.n	801004a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801002e:	4b26      	ldr	r3, [pc, #152]	@ (80100c8 <prvAddNewTaskToReadyList+0xcc>)
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	2b00      	cmp	r3, #0
 8010034:	d109      	bne.n	801004a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010036:	4b23      	ldr	r3, [pc, #140]	@ (80100c4 <prvAddNewTaskToReadyList+0xc8>)
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010040:	429a      	cmp	r2, r3
 8010042:	d802      	bhi.n	801004a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010044:	4a1f      	ldr	r2, [pc, #124]	@ (80100c4 <prvAddNewTaskToReadyList+0xc8>)
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801004a:	4b20      	ldr	r3, [pc, #128]	@ (80100cc <prvAddNewTaskToReadyList+0xd0>)
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	3301      	adds	r3, #1
 8010050:	4a1e      	ldr	r2, [pc, #120]	@ (80100cc <prvAddNewTaskToReadyList+0xd0>)
 8010052:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010054:	4b1d      	ldr	r3, [pc, #116]	@ (80100cc <prvAddNewTaskToReadyList+0xd0>)
 8010056:	681a      	ldr	r2, [r3, #0]
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010060:	4b1b      	ldr	r3, [pc, #108]	@ (80100d0 <prvAddNewTaskToReadyList+0xd4>)
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	429a      	cmp	r2, r3
 8010066:	d903      	bls.n	8010070 <prvAddNewTaskToReadyList+0x74>
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801006c:	4a18      	ldr	r2, [pc, #96]	@ (80100d0 <prvAddNewTaskToReadyList+0xd4>)
 801006e:	6013      	str	r3, [r2, #0]
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010074:	4613      	mov	r3, r2
 8010076:	009b      	lsls	r3, r3, #2
 8010078:	4413      	add	r3, r2
 801007a:	009b      	lsls	r3, r3, #2
 801007c:	4a15      	ldr	r2, [pc, #84]	@ (80100d4 <prvAddNewTaskToReadyList+0xd8>)
 801007e:	441a      	add	r2, r3
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	3304      	adds	r3, #4
 8010084:	4619      	mov	r1, r3
 8010086:	4610      	mov	r0, r2
 8010088:	f7fe fdb7 	bl	800ebfa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801008c:	f001 fb5e 	bl	801174c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010090:	4b0d      	ldr	r3, [pc, #52]	@ (80100c8 <prvAddNewTaskToReadyList+0xcc>)
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d00e      	beq.n	80100b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010098:	4b0a      	ldr	r3, [pc, #40]	@ (80100c4 <prvAddNewTaskToReadyList+0xc8>)
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100a2:	429a      	cmp	r2, r3
 80100a4:	d207      	bcs.n	80100b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80100a6:	4b0c      	ldr	r3, [pc, #48]	@ (80100d8 <prvAddNewTaskToReadyList+0xdc>)
 80100a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80100ac:	601a      	str	r2, [r3, #0]
 80100ae:	f3bf 8f4f 	dsb	sy
 80100b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80100b6:	bf00      	nop
 80100b8:	3708      	adds	r7, #8
 80100ba:	46bd      	mov	sp, r7
 80100bc:	bd80      	pop	{r7, pc}
 80100be:	bf00      	nop
 80100c0:	24001558 	.word	0x24001558
 80100c4:	24001084 	.word	0x24001084
 80100c8:	24001564 	.word	0x24001564
 80100cc:	24001574 	.word	0x24001574
 80100d0:	24001560 	.word	0x24001560
 80100d4:	24001088 	.word	0x24001088
 80100d8:	e000ed04 	.word	0xe000ed04

080100dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80100dc:	b580      	push	{r7, lr}
 80100de:	b084      	sub	sp, #16
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80100e4:	2300      	movs	r3, #0
 80100e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d018      	beq.n	8010120 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80100ee:	4b14      	ldr	r3, [pc, #80]	@ (8010140 <vTaskDelay+0x64>)
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d00b      	beq.n	801010e <vTaskDelay+0x32>
	__asm volatile
 80100f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100fa:	f383 8811 	msr	BASEPRI, r3
 80100fe:	f3bf 8f6f 	isb	sy
 8010102:	f3bf 8f4f 	dsb	sy
 8010106:	60bb      	str	r3, [r7, #8]
}
 8010108:	bf00      	nop
 801010a:	bf00      	nop
 801010c:	e7fd      	b.n	801010a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801010e:	f000 f88b 	bl	8010228 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010112:	2100      	movs	r1, #0
 8010114:	6878      	ldr	r0, [r7, #4]
 8010116:	f000 fe09 	bl	8010d2c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801011a:	f000 f893 	bl	8010244 <xTaskResumeAll>
 801011e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d107      	bne.n	8010136 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8010126:	4b07      	ldr	r3, [pc, #28]	@ (8010144 <vTaskDelay+0x68>)
 8010128:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801012c:	601a      	str	r2, [r3, #0]
 801012e:	f3bf 8f4f 	dsb	sy
 8010132:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010136:	bf00      	nop
 8010138:	3710      	adds	r7, #16
 801013a:	46bd      	mov	sp, r7
 801013c:	bd80      	pop	{r7, pc}
 801013e:	bf00      	nop
 8010140:	24001580 	.word	0x24001580
 8010144:	e000ed04 	.word	0xe000ed04

08010148 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010148:	b580      	push	{r7, lr}
 801014a:	b08a      	sub	sp, #40	@ 0x28
 801014c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801014e:	2300      	movs	r3, #0
 8010150:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010152:	2300      	movs	r3, #0
 8010154:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010156:	463a      	mov	r2, r7
 8010158:	1d39      	adds	r1, r7, #4
 801015a:	f107 0308 	add.w	r3, r7, #8
 801015e:	4618      	mov	r0, r3
 8010160:	f7fe fcea 	bl	800eb38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010164:	6839      	ldr	r1, [r7, #0]
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	68ba      	ldr	r2, [r7, #8]
 801016a:	9202      	str	r2, [sp, #8]
 801016c:	9301      	str	r3, [sp, #4]
 801016e:	2300      	movs	r3, #0
 8010170:	9300      	str	r3, [sp, #0]
 8010172:	2300      	movs	r3, #0
 8010174:	460a      	mov	r2, r1
 8010176:	4924      	ldr	r1, [pc, #144]	@ (8010208 <vTaskStartScheduler+0xc0>)
 8010178:	4824      	ldr	r0, [pc, #144]	@ (801020c <vTaskStartScheduler+0xc4>)
 801017a:	f7ff fdf1 	bl	800fd60 <xTaskCreateStatic>
 801017e:	4603      	mov	r3, r0
 8010180:	4a23      	ldr	r2, [pc, #140]	@ (8010210 <vTaskStartScheduler+0xc8>)
 8010182:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010184:	4b22      	ldr	r3, [pc, #136]	@ (8010210 <vTaskStartScheduler+0xc8>)
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d002      	beq.n	8010192 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801018c:	2301      	movs	r3, #1
 801018e:	617b      	str	r3, [r7, #20]
 8010190:	e001      	b.n	8010196 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010192:	2300      	movs	r3, #0
 8010194:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010196:	697b      	ldr	r3, [r7, #20]
 8010198:	2b01      	cmp	r3, #1
 801019a:	d102      	bne.n	80101a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801019c:	f000 fe1a 	bl	8010dd4 <xTimerCreateTimerTask>
 80101a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80101a2:	697b      	ldr	r3, [r7, #20]
 80101a4:	2b01      	cmp	r3, #1
 80101a6:	d11b      	bne.n	80101e0 <vTaskStartScheduler+0x98>
	__asm volatile
 80101a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101ac:	f383 8811 	msr	BASEPRI, r3
 80101b0:	f3bf 8f6f 	isb	sy
 80101b4:	f3bf 8f4f 	dsb	sy
 80101b8:	613b      	str	r3, [r7, #16]
}
 80101ba:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80101bc:	4b15      	ldr	r3, [pc, #84]	@ (8010214 <vTaskStartScheduler+0xcc>)
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	3354      	adds	r3, #84	@ 0x54
 80101c2:	4a15      	ldr	r2, [pc, #84]	@ (8010218 <vTaskStartScheduler+0xd0>)
 80101c4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80101c6:	4b15      	ldr	r3, [pc, #84]	@ (801021c <vTaskStartScheduler+0xd4>)
 80101c8:	f04f 32ff 	mov.w	r2, #4294967295
 80101cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80101ce:	4b14      	ldr	r3, [pc, #80]	@ (8010220 <vTaskStartScheduler+0xd8>)
 80101d0:	2201      	movs	r2, #1
 80101d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80101d4:	4b13      	ldr	r3, [pc, #76]	@ (8010224 <vTaskStartScheduler+0xdc>)
 80101d6:	2200      	movs	r2, #0
 80101d8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80101da:	f001 f9e1 	bl	80115a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80101de:	e00f      	b.n	8010200 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80101e0:	697b      	ldr	r3, [r7, #20]
 80101e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101e6:	d10b      	bne.n	8010200 <vTaskStartScheduler+0xb8>
	__asm volatile
 80101e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101ec:	f383 8811 	msr	BASEPRI, r3
 80101f0:	f3bf 8f6f 	isb	sy
 80101f4:	f3bf 8f4f 	dsb	sy
 80101f8:	60fb      	str	r3, [r7, #12]
}
 80101fa:	bf00      	nop
 80101fc:	bf00      	nop
 80101fe:	e7fd      	b.n	80101fc <vTaskStartScheduler+0xb4>
}
 8010200:	bf00      	nop
 8010202:	3718      	adds	r7, #24
 8010204:	46bd      	mov	sp, r7
 8010206:	bd80      	pop	{r7, pc}
 8010208:	0802b1c0 	.word	0x0802b1c0
 801020c:	08010859 	.word	0x08010859
 8010210:	2400157c 	.word	0x2400157c
 8010214:	24001084 	.word	0x24001084
 8010218:	2400008c 	.word	0x2400008c
 801021c:	24001578 	.word	0x24001578
 8010220:	24001564 	.word	0x24001564
 8010224:	2400155c 	.word	0x2400155c

08010228 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010228:	b480      	push	{r7}
 801022a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801022c:	4b04      	ldr	r3, [pc, #16]	@ (8010240 <vTaskSuspendAll+0x18>)
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	3301      	adds	r3, #1
 8010232:	4a03      	ldr	r2, [pc, #12]	@ (8010240 <vTaskSuspendAll+0x18>)
 8010234:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010236:	bf00      	nop
 8010238:	46bd      	mov	sp, r7
 801023a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023e:	4770      	bx	lr
 8010240:	24001580 	.word	0x24001580

08010244 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010244:	b580      	push	{r7, lr}
 8010246:	b084      	sub	sp, #16
 8010248:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801024a:	2300      	movs	r3, #0
 801024c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801024e:	2300      	movs	r3, #0
 8010250:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010252:	4b42      	ldr	r3, [pc, #264]	@ (801035c <xTaskResumeAll+0x118>)
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d10b      	bne.n	8010272 <xTaskResumeAll+0x2e>
	__asm volatile
 801025a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801025e:	f383 8811 	msr	BASEPRI, r3
 8010262:	f3bf 8f6f 	isb	sy
 8010266:	f3bf 8f4f 	dsb	sy
 801026a:	603b      	str	r3, [r7, #0]
}
 801026c:	bf00      	nop
 801026e:	bf00      	nop
 8010270:	e7fd      	b.n	801026e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010272:	f001 fa39 	bl	80116e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010276:	4b39      	ldr	r3, [pc, #228]	@ (801035c <xTaskResumeAll+0x118>)
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	3b01      	subs	r3, #1
 801027c:	4a37      	ldr	r2, [pc, #220]	@ (801035c <xTaskResumeAll+0x118>)
 801027e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010280:	4b36      	ldr	r3, [pc, #216]	@ (801035c <xTaskResumeAll+0x118>)
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d162      	bne.n	801034e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010288:	4b35      	ldr	r3, [pc, #212]	@ (8010360 <xTaskResumeAll+0x11c>)
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d05e      	beq.n	801034e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010290:	e02f      	b.n	80102f2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010292:	4b34      	ldr	r3, [pc, #208]	@ (8010364 <xTaskResumeAll+0x120>)
 8010294:	68db      	ldr	r3, [r3, #12]
 8010296:	68db      	ldr	r3, [r3, #12]
 8010298:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	3318      	adds	r3, #24
 801029e:	4618      	mov	r0, r3
 80102a0:	f7fe fd08 	bl	800ecb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	3304      	adds	r3, #4
 80102a8:	4618      	mov	r0, r3
 80102aa:	f7fe fd03 	bl	800ecb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80102b2:	4b2d      	ldr	r3, [pc, #180]	@ (8010368 <xTaskResumeAll+0x124>)
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	429a      	cmp	r2, r3
 80102b8:	d903      	bls.n	80102c2 <xTaskResumeAll+0x7e>
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102be:	4a2a      	ldr	r2, [pc, #168]	@ (8010368 <xTaskResumeAll+0x124>)
 80102c0:	6013      	str	r3, [r2, #0]
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80102c6:	4613      	mov	r3, r2
 80102c8:	009b      	lsls	r3, r3, #2
 80102ca:	4413      	add	r3, r2
 80102cc:	009b      	lsls	r3, r3, #2
 80102ce:	4a27      	ldr	r2, [pc, #156]	@ (801036c <xTaskResumeAll+0x128>)
 80102d0:	441a      	add	r2, r3
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	3304      	adds	r3, #4
 80102d6:	4619      	mov	r1, r3
 80102d8:	4610      	mov	r0, r2
 80102da:	f7fe fc8e 	bl	800ebfa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80102e2:	4b23      	ldr	r3, [pc, #140]	@ (8010370 <xTaskResumeAll+0x12c>)
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102e8:	429a      	cmp	r2, r3
 80102ea:	d302      	bcc.n	80102f2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80102ec:	4b21      	ldr	r3, [pc, #132]	@ (8010374 <xTaskResumeAll+0x130>)
 80102ee:	2201      	movs	r2, #1
 80102f0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80102f2:	4b1c      	ldr	r3, [pc, #112]	@ (8010364 <xTaskResumeAll+0x120>)
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d1cb      	bne.n	8010292 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d001      	beq.n	8010304 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010300:	f000 fb66 	bl	80109d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010304:	4b1c      	ldr	r3, [pc, #112]	@ (8010378 <xTaskResumeAll+0x134>)
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d010      	beq.n	8010332 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010310:	f000 f846 	bl	80103a0 <xTaskIncrementTick>
 8010314:	4603      	mov	r3, r0
 8010316:	2b00      	cmp	r3, #0
 8010318:	d002      	beq.n	8010320 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 801031a:	4b16      	ldr	r3, [pc, #88]	@ (8010374 <xTaskResumeAll+0x130>)
 801031c:	2201      	movs	r2, #1
 801031e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	3b01      	subs	r3, #1
 8010324:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d1f1      	bne.n	8010310 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 801032c:	4b12      	ldr	r3, [pc, #72]	@ (8010378 <xTaskResumeAll+0x134>)
 801032e:	2200      	movs	r2, #0
 8010330:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010332:	4b10      	ldr	r3, [pc, #64]	@ (8010374 <xTaskResumeAll+0x130>)
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d009      	beq.n	801034e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801033a:	2301      	movs	r3, #1
 801033c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801033e:	4b0f      	ldr	r3, [pc, #60]	@ (801037c <xTaskResumeAll+0x138>)
 8010340:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010344:	601a      	str	r2, [r3, #0]
 8010346:	f3bf 8f4f 	dsb	sy
 801034a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801034e:	f001 f9fd 	bl	801174c <vPortExitCritical>

	return xAlreadyYielded;
 8010352:	68bb      	ldr	r3, [r7, #8]
}
 8010354:	4618      	mov	r0, r3
 8010356:	3710      	adds	r7, #16
 8010358:	46bd      	mov	sp, r7
 801035a:	bd80      	pop	{r7, pc}
 801035c:	24001580 	.word	0x24001580
 8010360:	24001558 	.word	0x24001558
 8010364:	24001518 	.word	0x24001518
 8010368:	24001560 	.word	0x24001560
 801036c:	24001088 	.word	0x24001088
 8010370:	24001084 	.word	0x24001084
 8010374:	2400156c 	.word	0x2400156c
 8010378:	24001568 	.word	0x24001568
 801037c:	e000ed04 	.word	0xe000ed04

08010380 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010380:	b480      	push	{r7}
 8010382:	b083      	sub	sp, #12
 8010384:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010386:	4b05      	ldr	r3, [pc, #20]	@ (801039c <xTaskGetTickCount+0x1c>)
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801038c:	687b      	ldr	r3, [r7, #4]
}
 801038e:	4618      	mov	r0, r3
 8010390:	370c      	adds	r7, #12
 8010392:	46bd      	mov	sp, r7
 8010394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010398:	4770      	bx	lr
 801039a:	bf00      	nop
 801039c:	2400155c 	.word	0x2400155c

080103a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80103a0:	b580      	push	{r7, lr}
 80103a2:	b086      	sub	sp, #24
 80103a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80103a6:	2300      	movs	r3, #0
 80103a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80103aa:	4b4f      	ldr	r3, [pc, #316]	@ (80104e8 <xTaskIncrementTick+0x148>)
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	f040 8090 	bne.w	80104d4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80103b4:	4b4d      	ldr	r3, [pc, #308]	@ (80104ec <xTaskIncrementTick+0x14c>)
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	3301      	adds	r3, #1
 80103ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80103bc:	4a4b      	ldr	r2, [pc, #300]	@ (80104ec <xTaskIncrementTick+0x14c>)
 80103be:	693b      	ldr	r3, [r7, #16]
 80103c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80103c2:	693b      	ldr	r3, [r7, #16]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d121      	bne.n	801040c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80103c8:	4b49      	ldr	r3, [pc, #292]	@ (80104f0 <xTaskIncrementTick+0x150>)
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d00b      	beq.n	80103ea <xTaskIncrementTick+0x4a>
	__asm volatile
 80103d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103d6:	f383 8811 	msr	BASEPRI, r3
 80103da:	f3bf 8f6f 	isb	sy
 80103de:	f3bf 8f4f 	dsb	sy
 80103e2:	603b      	str	r3, [r7, #0]
}
 80103e4:	bf00      	nop
 80103e6:	bf00      	nop
 80103e8:	e7fd      	b.n	80103e6 <xTaskIncrementTick+0x46>
 80103ea:	4b41      	ldr	r3, [pc, #260]	@ (80104f0 <xTaskIncrementTick+0x150>)
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	60fb      	str	r3, [r7, #12]
 80103f0:	4b40      	ldr	r3, [pc, #256]	@ (80104f4 <xTaskIncrementTick+0x154>)
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	4a3e      	ldr	r2, [pc, #248]	@ (80104f0 <xTaskIncrementTick+0x150>)
 80103f6:	6013      	str	r3, [r2, #0]
 80103f8:	4a3e      	ldr	r2, [pc, #248]	@ (80104f4 <xTaskIncrementTick+0x154>)
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	6013      	str	r3, [r2, #0]
 80103fe:	4b3e      	ldr	r3, [pc, #248]	@ (80104f8 <xTaskIncrementTick+0x158>)
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	3301      	adds	r3, #1
 8010404:	4a3c      	ldr	r2, [pc, #240]	@ (80104f8 <xTaskIncrementTick+0x158>)
 8010406:	6013      	str	r3, [r2, #0]
 8010408:	f000 fae2 	bl	80109d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801040c:	4b3b      	ldr	r3, [pc, #236]	@ (80104fc <xTaskIncrementTick+0x15c>)
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	693a      	ldr	r2, [r7, #16]
 8010412:	429a      	cmp	r2, r3
 8010414:	d349      	bcc.n	80104aa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010416:	4b36      	ldr	r3, [pc, #216]	@ (80104f0 <xTaskIncrementTick+0x150>)
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d104      	bne.n	801042a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010420:	4b36      	ldr	r3, [pc, #216]	@ (80104fc <xTaskIncrementTick+0x15c>)
 8010422:	f04f 32ff 	mov.w	r2, #4294967295
 8010426:	601a      	str	r2, [r3, #0]
					break;
 8010428:	e03f      	b.n	80104aa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801042a:	4b31      	ldr	r3, [pc, #196]	@ (80104f0 <xTaskIncrementTick+0x150>)
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	68db      	ldr	r3, [r3, #12]
 8010430:	68db      	ldr	r3, [r3, #12]
 8010432:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010434:	68bb      	ldr	r3, [r7, #8]
 8010436:	685b      	ldr	r3, [r3, #4]
 8010438:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801043a:	693a      	ldr	r2, [r7, #16]
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	429a      	cmp	r2, r3
 8010440:	d203      	bcs.n	801044a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010442:	4a2e      	ldr	r2, [pc, #184]	@ (80104fc <xTaskIncrementTick+0x15c>)
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010448:	e02f      	b.n	80104aa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801044a:	68bb      	ldr	r3, [r7, #8]
 801044c:	3304      	adds	r3, #4
 801044e:	4618      	mov	r0, r3
 8010450:	f7fe fc30 	bl	800ecb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010454:	68bb      	ldr	r3, [r7, #8]
 8010456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010458:	2b00      	cmp	r3, #0
 801045a:	d004      	beq.n	8010466 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801045c:	68bb      	ldr	r3, [r7, #8]
 801045e:	3318      	adds	r3, #24
 8010460:	4618      	mov	r0, r3
 8010462:	f7fe fc27 	bl	800ecb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010466:	68bb      	ldr	r3, [r7, #8]
 8010468:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801046a:	4b25      	ldr	r3, [pc, #148]	@ (8010500 <xTaskIncrementTick+0x160>)
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	429a      	cmp	r2, r3
 8010470:	d903      	bls.n	801047a <xTaskIncrementTick+0xda>
 8010472:	68bb      	ldr	r3, [r7, #8]
 8010474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010476:	4a22      	ldr	r2, [pc, #136]	@ (8010500 <xTaskIncrementTick+0x160>)
 8010478:	6013      	str	r3, [r2, #0]
 801047a:	68bb      	ldr	r3, [r7, #8]
 801047c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801047e:	4613      	mov	r3, r2
 8010480:	009b      	lsls	r3, r3, #2
 8010482:	4413      	add	r3, r2
 8010484:	009b      	lsls	r3, r3, #2
 8010486:	4a1f      	ldr	r2, [pc, #124]	@ (8010504 <xTaskIncrementTick+0x164>)
 8010488:	441a      	add	r2, r3
 801048a:	68bb      	ldr	r3, [r7, #8]
 801048c:	3304      	adds	r3, #4
 801048e:	4619      	mov	r1, r3
 8010490:	4610      	mov	r0, r2
 8010492:	f7fe fbb2 	bl	800ebfa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010496:	68bb      	ldr	r3, [r7, #8]
 8010498:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801049a:	4b1b      	ldr	r3, [pc, #108]	@ (8010508 <xTaskIncrementTick+0x168>)
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104a0:	429a      	cmp	r2, r3
 80104a2:	d3b8      	bcc.n	8010416 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80104a4:	2301      	movs	r3, #1
 80104a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80104a8:	e7b5      	b.n	8010416 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80104aa:	4b17      	ldr	r3, [pc, #92]	@ (8010508 <xTaskIncrementTick+0x168>)
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80104b0:	4914      	ldr	r1, [pc, #80]	@ (8010504 <xTaskIncrementTick+0x164>)
 80104b2:	4613      	mov	r3, r2
 80104b4:	009b      	lsls	r3, r3, #2
 80104b6:	4413      	add	r3, r2
 80104b8:	009b      	lsls	r3, r3, #2
 80104ba:	440b      	add	r3, r1
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	2b01      	cmp	r3, #1
 80104c0:	d901      	bls.n	80104c6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80104c2:	2301      	movs	r3, #1
 80104c4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80104c6:	4b11      	ldr	r3, [pc, #68]	@ (801050c <xTaskIncrementTick+0x16c>)
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d007      	beq.n	80104de <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80104ce:	2301      	movs	r3, #1
 80104d0:	617b      	str	r3, [r7, #20]
 80104d2:	e004      	b.n	80104de <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80104d4:	4b0e      	ldr	r3, [pc, #56]	@ (8010510 <xTaskIncrementTick+0x170>)
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	3301      	adds	r3, #1
 80104da:	4a0d      	ldr	r2, [pc, #52]	@ (8010510 <xTaskIncrementTick+0x170>)
 80104dc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80104de:	697b      	ldr	r3, [r7, #20]
}
 80104e0:	4618      	mov	r0, r3
 80104e2:	3718      	adds	r7, #24
 80104e4:	46bd      	mov	sp, r7
 80104e6:	bd80      	pop	{r7, pc}
 80104e8:	24001580 	.word	0x24001580
 80104ec:	2400155c 	.word	0x2400155c
 80104f0:	24001510 	.word	0x24001510
 80104f4:	24001514 	.word	0x24001514
 80104f8:	24001570 	.word	0x24001570
 80104fc:	24001578 	.word	0x24001578
 8010500:	24001560 	.word	0x24001560
 8010504:	24001088 	.word	0x24001088
 8010508:	24001084 	.word	0x24001084
 801050c:	2400156c 	.word	0x2400156c
 8010510:	24001568 	.word	0x24001568

08010514 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010514:	b480      	push	{r7}
 8010516:	b085      	sub	sp, #20
 8010518:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801051a:	4b2b      	ldr	r3, [pc, #172]	@ (80105c8 <vTaskSwitchContext+0xb4>)
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d003      	beq.n	801052a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010522:	4b2a      	ldr	r3, [pc, #168]	@ (80105cc <vTaskSwitchContext+0xb8>)
 8010524:	2201      	movs	r2, #1
 8010526:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010528:	e047      	b.n	80105ba <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 801052a:	4b28      	ldr	r3, [pc, #160]	@ (80105cc <vTaskSwitchContext+0xb8>)
 801052c:	2200      	movs	r2, #0
 801052e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010530:	4b27      	ldr	r3, [pc, #156]	@ (80105d0 <vTaskSwitchContext+0xbc>)
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	60fb      	str	r3, [r7, #12]
 8010536:	e011      	b.n	801055c <vTaskSwitchContext+0x48>
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d10b      	bne.n	8010556 <vTaskSwitchContext+0x42>
	__asm volatile
 801053e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010542:	f383 8811 	msr	BASEPRI, r3
 8010546:	f3bf 8f6f 	isb	sy
 801054a:	f3bf 8f4f 	dsb	sy
 801054e:	607b      	str	r3, [r7, #4]
}
 8010550:	bf00      	nop
 8010552:	bf00      	nop
 8010554:	e7fd      	b.n	8010552 <vTaskSwitchContext+0x3e>
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	3b01      	subs	r3, #1
 801055a:	60fb      	str	r3, [r7, #12]
 801055c:	491d      	ldr	r1, [pc, #116]	@ (80105d4 <vTaskSwitchContext+0xc0>)
 801055e:	68fa      	ldr	r2, [r7, #12]
 8010560:	4613      	mov	r3, r2
 8010562:	009b      	lsls	r3, r3, #2
 8010564:	4413      	add	r3, r2
 8010566:	009b      	lsls	r3, r3, #2
 8010568:	440b      	add	r3, r1
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d0e3      	beq.n	8010538 <vTaskSwitchContext+0x24>
 8010570:	68fa      	ldr	r2, [r7, #12]
 8010572:	4613      	mov	r3, r2
 8010574:	009b      	lsls	r3, r3, #2
 8010576:	4413      	add	r3, r2
 8010578:	009b      	lsls	r3, r3, #2
 801057a:	4a16      	ldr	r2, [pc, #88]	@ (80105d4 <vTaskSwitchContext+0xc0>)
 801057c:	4413      	add	r3, r2
 801057e:	60bb      	str	r3, [r7, #8]
 8010580:	68bb      	ldr	r3, [r7, #8]
 8010582:	685b      	ldr	r3, [r3, #4]
 8010584:	685a      	ldr	r2, [r3, #4]
 8010586:	68bb      	ldr	r3, [r7, #8]
 8010588:	605a      	str	r2, [r3, #4]
 801058a:	68bb      	ldr	r3, [r7, #8]
 801058c:	685a      	ldr	r2, [r3, #4]
 801058e:	68bb      	ldr	r3, [r7, #8]
 8010590:	3308      	adds	r3, #8
 8010592:	429a      	cmp	r2, r3
 8010594:	d104      	bne.n	80105a0 <vTaskSwitchContext+0x8c>
 8010596:	68bb      	ldr	r3, [r7, #8]
 8010598:	685b      	ldr	r3, [r3, #4]
 801059a:	685a      	ldr	r2, [r3, #4]
 801059c:	68bb      	ldr	r3, [r7, #8]
 801059e:	605a      	str	r2, [r3, #4]
 80105a0:	68bb      	ldr	r3, [r7, #8]
 80105a2:	685b      	ldr	r3, [r3, #4]
 80105a4:	68db      	ldr	r3, [r3, #12]
 80105a6:	4a0c      	ldr	r2, [pc, #48]	@ (80105d8 <vTaskSwitchContext+0xc4>)
 80105a8:	6013      	str	r3, [r2, #0]
 80105aa:	4a09      	ldr	r2, [pc, #36]	@ (80105d0 <vTaskSwitchContext+0xbc>)
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80105b0:	4b09      	ldr	r3, [pc, #36]	@ (80105d8 <vTaskSwitchContext+0xc4>)
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	3354      	adds	r3, #84	@ 0x54
 80105b6:	4a09      	ldr	r2, [pc, #36]	@ (80105dc <vTaskSwitchContext+0xc8>)
 80105b8:	6013      	str	r3, [r2, #0]
}
 80105ba:	bf00      	nop
 80105bc:	3714      	adds	r7, #20
 80105be:	46bd      	mov	sp, r7
 80105c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c4:	4770      	bx	lr
 80105c6:	bf00      	nop
 80105c8:	24001580 	.word	0x24001580
 80105cc:	2400156c 	.word	0x2400156c
 80105d0:	24001560 	.word	0x24001560
 80105d4:	24001088 	.word	0x24001088
 80105d8:	24001084 	.word	0x24001084
 80105dc:	2400008c 	.word	0x2400008c

080105e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b084      	sub	sp, #16
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
 80105e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d10b      	bne.n	8010608 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80105f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105f4:	f383 8811 	msr	BASEPRI, r3
 80105f8:	f3bf 8f6f 	isb	sy
 80105fc:	f3bf 8f4f 	dsb	sy
 8010600:	60fb      	str	r3, [r7, #12]
}
 8010602:	bf00      	nop
 8010604:	bf00      	nop
 8010606:	e7fd      	b.n	8010604 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010608:	4b07      	ldr	r3, [pc, #28]	@ (8010628 <vTaskPlaceOnEventList+0x48>)
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	3318      	adds	r3, #24
 801060e:	4619      	mov	r1, r3
 8010610:	6878      	ldr	r0, [r7, #4]
 8010612:	f7fe fb16 	bl	800ec42 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010616:	2101      	movs	r1, #1
 8010618:	6838      	ldr	r0, [r7, #0]
 801061a:	f000 fb87 	bl	8010d2c <prvAddCurrentTaskToDelayedList>
}
 801061e:	bf00      	nop
 8010620:	3710      	adds	r7, #16
 8010622:	46bd      	mov	sp, r7
 8010624:	bd80      	pop	{r7, pc}
 8010626:	bf00      	nop
 8010628:	24001084 	.word	0x24001084

0801062c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801062c:	b580      	push	{r7, lr}
 801062e:	b086      	sub	sp, #24
 8010630:	af00      	add	r7, sp, #0
 8010632:	60f8      	str	r0, [r7, #12]
 8010634:	60b9      	str	r1, [r7, #8]
 8010636:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d10b      	bne.n	8010656 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 801063e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010642:	f383 8811 	msr	BASEPRI, r3
 8010646:	f3bf 8f6f 	isb	sy
 801064a:	f3bf 8f4f 	dsb	sy
 801064e:	617b      	str	r3, [r7, #20]
}
 8010650:	bf00      	nop
 8010652:	bf00      	nop
 8010654:	e7fd      	b.n	8010652 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010656:	4b0a      	ldr	r3, [pc, #40]	@ (8010680 <vTaskPlaceOnEventListRestricted+0x54>)
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	3318      	adds	r3, #24
 801065c:	4619      	mov	r1, r3
 801065e:	68f8      	ldr	r0, [r7, #12]
 8010660:	f7fe facb 	bl	800ebfa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d002      	beq.n	8010670 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 801066a:	f04f 33ff 	mov.w	r3, #4294967295
 801066e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010670:	6879      	ldr	r1, [r7, #4]
 8010672:	68b8      	ldr	r0, [r7, #8]
 8010674:	f000 fb5a 	bl	8010d2c <prvAddCurrentTaskToDelayedList>
	}
 8010678:	bf00      	nop
 801067a:	3718      	adds	r7, #24
 801067c:	46bd      	mov	sp, r7
 801067e:	bd80      	pop	{r7, pc}
 8010680:	24001084 	.word	0x24001084

08010684 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010684:	b580      	push	{r7, lr}
 8010686:	b086      	sub	sp, #24
 8010688:	af00      	add	r7, sp, #0
 801068a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	68db      	ldr	r3, [r3, #12]
 8010690:	68db      	ldr	r3, [r3, #12]
 8010692:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010694:	693b      	ldr	r3, [r7, #16]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d10b      	bne.n	80106b2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 801069a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801069e:	f383 8811 	msr	BASEPRI, r3
 80106a2:	f3bf 8f6f 	isb	sy
 80106a6:	f3bf 8f4f 	dsb	sy
 80106aa:	60fb      	str	r3, [r7, #12]
}
 80106ac:	bf00      	nop
 80106ae:	bf00      	nop
 80106b0:	e7fd      	b.n	80106ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80106b2:	693b      	ldr	r3, [r7, #16]
 80106b4:	3318      	adds	r3, #24
 80106b6:	4618      	mov	r0, r3
 80106b8:	f7fe fafc 	bl	800ecb4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80106bc:	4b1d      	ldr	r3, [pc, #116]	@ (8010734 <xTaskRemoveFromEventList+0xb0>)
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d11d      	bne.n	8010700 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80106c4:	693b      	ldr	r3, [r7, #16]
 80106c6:	3304      	adds	r3, #4
 80106c8:	4618      	mov	r0, r3
 80106ca:	f7fe faf3 	bl	800ecb4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80106ce:	693b      	ldr	r3, [r7, #16]
 80106d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80106d2:	4b19      	ldr	r3, [pc, #100]	@ (8010738 <xTaskRemoveFromEventList+0xb4>)
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	429a      	cmp	r2, r3
 80106d8:	d903      	bls.n	80106e2 <xTaskRemoveFromEventList+0x5e>
 80106da:	693b      	ldr	r3, [r7, #16]
 80106dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106de:	4a16      	ldr	r2, [pc, #88]	@ (8010738 <xTaskRemoveFromEventList+0xb4>)
 80106e0:	6013      	str	r3, [r2, #0]
 80106e2:	693b      	ldr	r3, [r7, #16]
 80106e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80106e6:	4613      	mov	r3, r2
 80106e8:	009b      	lsls	r3, r3, #2
 80106ea:	4413      	add	r3, r2
 80106ec:	009b      	lsls	r3, r3, #2
 80106ee:	4a13      	ldr	r2, [pc, #76]	@ (801073c <xTaskRemoveFromEventList+0xb8>)
 80106f0:	441a      	add	r2, r3
 80106f2:	693b      	ldr	r3, [r7, #16]
 80106f4:	3304      	adds	r3, #4
 80106f6:	4619      	mov	r1, r3
 80106f8:	4610      	mov	r0, r2
 80106fa:	f7fe fa7e 	bl	800ebfa <vListInsertEnd>
 80106fe:	e005      	b.n	801070c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010700:	693b      	ldr	r3, [r7, #16]
 8010702:	3318      	adds	r3, #24
 8010704:	4619      	mov	r1, r3
 8010706:	480e      	ldr	r0, [pc, #56]	@ (8010740 <xTaskRemoveFromEventList+0xbc>)
 8010708:	f7fe fa77 	bl	800ebfa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801070c:	693b      	ldr	r3, [r7, #16]
 801070e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010710:	4b0c      	ldr	r3, [pc, #48]	@ (8010744 <xTaskRemoveFromEventList+0xc0>)
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010716:	429a      	cmp	r2, r3
 8010718:	d905      	bls.n	8010726 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801071a:	2301      	movs	r3, #1
 801071c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801071e:	4b0a      	ldr	r3, [pc, #40]	@ (8010748 <xTaskRemoveFromEventList+0xc4>)
 8010720:	2201      	movs	r2, #1
 8010722:	601a      	str	r2, [r3, #0]
 8010724:	e001      	b.n	801072a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8010726:	2300      	movs	r3, #0
 8010728:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801072a:	697b      	ldr	r3, [r7, #20]
}
 801072c:	4618      	mov	r0, r3
 801072e:	3718      	adds	r7, #24
 8010730:	46bd      	mov	sp, r7
 8010732:	bd80      	pop	{r7, pc}
 8010734:	24001580 	.word	0x24001580
 8010738:	24001560 	.word	0x24001560
 801073c:	24001088 	.word	0x24001088
 8010740:	24001518 	.word	0x24001518
 8010744:	24001084 	.word	0x24001084
 8010748:	2400156c 	.word	0x2400156c

0801074c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801074c:	b480      	push	{r7}
 801074e:	b083      	sub	sp, #12
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010754:	4b06      	ldr	r3, [pc, #24]	@ (8010770 <vTaskInternalSetTimeOutState+0x24>)
 8010756:	681a      	ldr	r2, [r3, #0]
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801075c:	4b05      	ldr	r3, [pc, #20]	@ (8010774 <vTaskInternalSetTimeOutState+0x28>)
 801075e:	681a      	ldr	r2, [r3, #0]
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	605a      	str	r2, [r3, #4]
}
 8010764:	bf00      	nop
 8010766:	370c      	adds	r7, #12
 8010768:	46bd      	mov	sp, r7
 801076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801076e:	4770      	bx	lr
 8010770:	24001570 	.word	0x24001570
 8010774:	2400155c 	.word	0x2400155c

08010778 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b088      	sub	sp, #32
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
 8010780:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d10b      	bne.n	80107a0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8010788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801078c:	f383 8811 	msr	BASEPRI, r3
 8010790:	f3bf 8f6f 	isb	sy
 8010794:	f3bf 8f4f 	dsb	sy
 8010798:	613b      	str	r3, [r7, #16]
}
 801079a:	bf00      	nop
 801079c:	bf00      	nop
 801079e:	e7fd      	b.n	801079c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80107a0:	683b      	ldr	r3, [r7, #0]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d10b      	bne.n	80107be <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80107a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107aa:	f383 8811 	msr	BASEPRI, r3
 80107ae:	f3bf 8f6f 	isb	sy
 80107b2:	f3bf 8f4f 	dsb	sy
 80107b6:	60fb      	str	r3, [r7, #12]
}
 80107b8:	bf00      	nop
 80107ba:	bf00      	nop
 80107bc:	e7fd      	b.n	80107ba <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80107be:	f000 ff93 	bl	80116e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80107c2:	4b1d      	ldr	r3, [pc, #116]	@ (8010838 <xTaskCheckForTimeOut+0xc0>)
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	685b      	ldr	r3, [r3, #4]
 80107cc:	69ba      	ldr	r2, [r7, #24]
 80107ce:	1ad3      	subs	r3, r2, r3
 80107d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80107d2:	683b      	ldr	r3, [r7, #0]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107da:	d102      	bne.n	80107e2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80107dc:	2300      	movs	r3, #0
 80107de:	61fb      	str	r3, [r7, #28]
 80107e0:	e023      	b.n	801082a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	681a      	ldr	r2, [r3, #0]
 80107e6:	4b15      	ldr	r3, [pc, #84]	@ (801083c <xTaskCheckForTimeOut+0xc4>)
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	429a      	cmp	r2, r3
 80107ec:	d007      	beq.n	80107fe <xTaskCheckForTimeOut+0x86>
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	685b      	ldr	r3, [r3, #4]
 80107f2:	69ba      	ldr	r2, [r7, #24]
 80107f4:	429a      	cmp	r2, r3
 80107f6:	d302      	bcc.n	80107fe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80107f8:	2301      	movs	r3, #1
 80107fa:	61fb      	str	r3, [r7, #28]
 80107fc:	e015      	b.n	801082a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80107fe:	683b      	ldr	r3, [r7, #0]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	697a      	ldr	r2, [r7, #20]
 8010804:	429a      	cmp	r2, r3
 8010806:	d20b      	bcs.n	8010820 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010808:	683b      	ldr	r3, [r7, #0]
 801080a:	681a      	ldr	r2, [r3, #0]
 801080c:	697b      	ldr	r3, [r7, #20]
 801080e:	1ad2      	subs	r2, r2, r3
 8010810:	683b      	ldr	r3, [r7, #0]
 8010812:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010814:	6878      	ldr	r0, [r7, #4]
 8010816:	f7ff ff99 	bl	801074c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801081a:	2300      	movs	r3, #0
 801081c:	61fb      	str	r3, [r7, #28]
 801081e:	e004      	b.n	801082a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8010820:	683b      	ldr	r3, [r7, #0]
 8010822:	2200      	movs	r2, #0
 8010824:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010826:	2301      	movs	r3, #1
 8010828:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801082a:	f000 ff8f 	bl	801174c <vPortExitCritical>

	return xReturn;
 801082e:	69fb      	ldr	r3, [r7, #28]
}
 8010830:	4618      	mov	r0, r3
 8010832:	3720      	adds	r7, #32
 8010834:	46bd      	mov	sp, r7
 8010836:	bd80      	pop	{r7, pc}
 8010838:	2400155c 	.word	0x2400155c
 801083c:	24001570 	.word	0x24001570

08010840 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010840:	b480      	push	{r7}
 8010842:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010844:	4b03      	ldr	r3, [pc, #12]	@ (8010854 <vTaskMissedYield+0x14>)
 8010846:	2201      	movs	r2, #1
 8010848:	601a      	str	r2, [r3, #0]
}
 801084a:	bf00      	nop
 801084c:	46bd      	mov	sp, r7
 801084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010852:	4770      	bx	lr
 8010854:	2400156c 	.word	0x2400156c

08010858 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010858:	b580      	push	{r7, lr}
 801085a:	b082      	sub	sp, #8
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010860:	f000 f852 	bl	8010908 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010864:	4b06      	ldr	r3, [pc, #24]	@ (8010880 <prvIdleTask+0x28>)
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	2b01      	cmp	r3, #1
 801086a:	d9f9      	bls.n	8010860 <prvIdleTask+0x8>
			{
				taskYIELD();
 801086c:	4b05      	ldr	r3, [pc, #20]	@ (8010884 <prvIdleTask+0x2c>)
 801086e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010872:	601a      	str	r2, [r3, #0]
 8010874:	f3bf 8f4f 	dsb	sy
 8010878:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801087c:	e7f0      	b.n	8010860 <prvIdleTask+0x8>
 801087e:	bf00      	nop
 8010880:	24001088 	.word	0x24001088
 8010884:	e000ed04 	.word	0xe000ed04

08010888 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010888:	b580      	push	{r7, lr}
 801088a:	b082      	sub	sp, #8
 801088c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801088e:	2300      	movs	r3, #0
 8010890:	607b      	str	r3, [r7, #4]
 8010892:	e00c      	b.n	80108ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010894:	687a      	ldr	r2, [r7, #4]
 8010896:	4613      	mov	r3, r2
 8010898:	009b      	lsls	r3, r3, #2
 801089a:	4413      	add	r3, r2
 801089c:	009b      	lsls	r3, r3, #2
 801089e:	4a12      	ldr	r2, [pc, #72]	@ (80108e8 <prvInitialiseTaskLists+0x60>)
 80108a0:	4413      	add	r3, r2
 80108a2:	4618      	mov	r0, r3
 80108a4:	f7fe f97c 	bl	800eba0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	3301      	adds	r3, #1
 80108ac:	607b      	str	r3, [r7, #4]
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	2b37      	cmp	r3, #55	@ 0x37
 80108b2:	d9ef      	bls.n	8010894 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80108b4:	480d      	ldr	r0, [pc, #52]	@ (80108ec <prvInitialiseTaskLists+0x64>)
 80108b6:	f7fe f973 	bl	800eba0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80108ba:	480d      	ldr	r0, [pc, #52]	@ (80108f0 <prvInitialiseTaskLists+0x68>)
 80108bc:	f7fe f970 	bl	800eba0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80108c0:	480c      	ldr	r0, [pc, #48]	@ (80108f4 <prvInitialiseTaskLists+0x6c>)
 80108c2:	f7fe f96d 	bl	800eba0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80108c6:	480c      	ldr	r0, [pc, #48]	@ (80108f8 <prvInitialiseTaskLists+0x70>)
 80108c8:	f7fe f96a 	bl	800eba0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80108cc:	480b      	ldr	r0, [pc, #44]	@ (80108fc <prvInitialiseTaskLists+0x74>)
 80108ce:	f7fe f967 	bl	800eba0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80108d2:	4b0b      	ldr	r3, [pc, #44]	@ (8010900 <prvInitialiseTaskLists+0x78>)
 80108d4:	4a05      	ldr	r2, [pc, #20]	@ (80108ec <prvInitialiseTaskLists+0x64>)
 80108d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80108d8:	4b0a      	ldr	r3, [pc, #40]	@ (8010904 <prvInitialiseTaskLists+0x7c>)
 80108da:	4a05      	ldr	r2, [pc, #20]	@ (80108f0 <prvInitialiseTaskLists+0x68>)
 80108dc:	601a      	str	r2, [r3, #0]
}
 80108de:	bf00      	nop
 80108e0:	3708      	adds	r7, #8
 80108e2:	46bd      	mov	sp, r7
 80108e4:	bd80      	pop	{r7, pc}
 80108e6:	bf00      	nop
 80108e8:	24001088 	.word	0x24001088
 80108ec:	240014e8 	.word	0x240014e8
 80108f0:	240014fc 	.word	0x240014fc
 80108f4:	24001518 	.word	0x24001518
 80108f8:	2400152c 	.word	0x2400152c
 80108fc:	24001544 	.word	0x24001544
 8010900:	24001510 	.word	0x24001510
 8010904:	24001514 	.word	0x24001514

08010908 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010908:	b580      	push	{r7, lr}
 801090a:	b082      	sub	sp, #8
 801090c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801090e:	e019      	b.n	8010944 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010910:	f000 feea 	bl	80116e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010914:	4b10      	ldr	r3, [pc, #64]	@ (8010958 <prvCheckTasksWaitingTermination+0x50>)
 8010916:	68db      	ldr	r3, [r3, #12]
 8010918:	68db      	ldr	r3, [r3, #12]
 801091a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	3304      	adds	r3, #4
 8010920:	4618      	mov	r0, r3
 8010922:	f7fe f9c7 	bl	800ecb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010926:	4b0d      	ldr	r3, [pc, #52]	@ (801095c <prvCheckTasksWaitingTermination+0x54>)
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	3b01      	subs	r3, #1
 801092c:	4a0b      	ldr	r2, [pc, #44]	@ (801095c <prvCheckTasksWaitingTermination+0x54>)
 801092e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010930:	4b0b      	ldr	r3, [pc, #44]	@ (8010960 <prvCheckTasksWaitingTermination+0x58>)
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	3b01      	subs	r3, #1
 8010936:	4a0a      	ldr	r2, [pc, #40]	@ (8010960 <prvCheckTasksWaitingTermination+0x58>)
 8010938:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801093a:	f000 ff07 	bl	801174c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801093e:	6878      	ldr	r0, [r7, #4]
 8010940:	f000 f810 	bl	8010964 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010944:	4b06      	ldr	r3, [pc, #24]	@ (8010960 <prvCheckTasksWaitingTermination+0x58>)
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	2b00      	cmp	r3, #0
 801094a:	d1e1      	bne.n	8010910 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801094c:	bf00      	nop
 801094e:	bf00      	nop
 8010950:	3708      	adds	r7, #8
 8010952:	46bd      	mov	sp, r7
 8010954:	bd80      	pop	{r7, pc}
 8010956:	bf00      	nop
 8010958:	2400152c 	.word	0x2400152c
 801095c:	24001558 	.word	0x24001558
 8010960:	24001540 	.word	0x24001540

08010964 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010964:	b580      	push	{r7, lr}
 8010966:	b084      	sub	sp, #16
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	3354      	adds	r3, #84	@ 0x54
 8010970:	4618      	mov	r0, r3
 8010972:	f019 fe71 	bl	802a658 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 801097c:	2b00      	cmp	r3, #0
 801097e:	d108      	bne.n	8010992 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010984:	4618      	mov	r0, r3
 8010986:	f001 f89f 	bl	8011ac8 <vPortFree>
				vPortFree( pxTCB );
 801098a:	6878      	ldr	r0, [r7, #4]
 801098c:	f001 f89c 	bl	8011ac8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010990:	e019      	b.n	80109c6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8010998:	2b01      	cmp	r3, #1
 801099a:	d103      	bne.n	80109a4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801099c:	6878      	ldr	r0, [r7, #4]
 801099e:	f001 f893 	bl	8011ac8 <vPortFree>
	}
 80109a2:	e010      	b.n	80109c6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80109aa:	2b02      	cmp	r3, #2
 80109ac:	d00b      	beq.n	80109c6 <prvDeleteTCB+0x62>
	__asm volatile
 80109ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109b2:	f383 8811 	msr	BASEPRI, r3
 80109b6:	f3bf 8f6f 	isb	sy
 80109ba:	f3bf 8f4f 	dsb	sy
 80109be:	60fb      	str	r3, [r7, #12]
}
 80109c0:	bf00      	nop
 80109c2:	bf00      	nop
 80109c4:	e7fd      	b.n	80109c2 <prvDeleteTCB+0x5e>
	}
 80109c6:	bf00      	nop
 80109c8:	3710      	adds	r7, #16
 80109ca:	46bd      	mov	sp, r7
 80109cc:	bd80      	pop	{r7, pc}
	...

080109d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80109d0:	b480      	push	{r7}
 80109d2:	b083      	sub	sp, #12
 80109d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80109d6:	4b0c      	ldr	r3, [pc, #48]	@ (8010a08 <prvResetNextTaskUnblockTime+0x38>)
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d104      	bne.n	80109ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80109e0:	4b0a      	ldr	r3, [pc, #40]	@ (8010a0c <prvResetNextTaskUnblockTime+0x3c>)
 80109e2:	f04f 32ff 	mov.w	r2, #4294967295
 80109e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80109e8:	e008      	b.n	80109fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80109ea:	4b07      	ldr	r3, [pc, #28]	@ (8010a08 <prvResetNextTaskUnblockTime+0x38>)
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	68db      	ldr	r3, [r3, #12]
 80109f0:	68db      	ldr	r3, [r3, #12]
 80109f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	685b      	ldr	r3, [r3, #4]
 80109f8:	4a04      	ldr	r2, [pc, #16]	@ (8010a0c <prvResetNextTaskUnblockTime+0x3c>)
 80109fa:	6013      	str	r3, [r2, #0]
}
 80109fc:	bf00      	nop
 80109fe:	370c      	adds	r7, #12
 8010a00:	46bd      	mov	sp, r7
 8010a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a06:	4770      	bx	lr
 8010a08:	24001510 	.word	0x24001510
 8010a0c:	24001578 	.word	0x24001578

08010a10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010a10:	b480      	push	{r7}
 8010a12:	b083      	sub	sp, #12
 8010a14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010a16:	4b0b      	ldr	r3, [pc, #44]	@ (8010a44 <xTaskGetSchedulerState+0x34>)
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d102      	bne.n	8010a24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010a1e:	2301      	movs	r3, #1
 8010a20:	607b      	str	r3, [r7, #4]
 8010a22:	e008      	b.n	8010a36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010a24:	4b08      	ldr	r3, [pc, #32]	@ (8010a48 <xTaskGetSchedulerState+0x38>)
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d102      	bne.n	8010a32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010a2c:	2302      	movs	r3, #2
 8010a2e:	607b      	str	r3, [r7, #4]
 8010a30:	e001      	b.n	8010a36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010a32:	2300      	movs	r3, #0
 8010a34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010a36:	687b      	ldr	r3, [r7, #4]
	}
 8010a38:	4618      	mov	r0, r3
 8010a3a:	370c      	adds	r7, #12
 8010a3c:	46bd      	mov	sp, r7
 8010a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a42:	4770      	bx	lr
 8010a44:	24001564 	.word	0x24001564
 8010a48:	24001580 	.word	0x24001580

08010a4c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	b084      	sub	sp, #16
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010a58:	2300      	movs	r3, #0
 8010a5a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d051      	beq.n	8010b06 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010a62:	68bb      	ldr	r3, [r7, #8]
 8010a64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a66:	4b2a      	ldr	r3, [pc, #168]	@ (8010b10 <xTaskPriorityInherit+0xc4>)
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a6c:	429a      	cmp	r2, r3
 8010a6e:	d241      	bcs.n	8010af4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010a70:	68bb      	ldr	r3, [r7, #8]
 8010a72:	699b      	ldr	r3, [r3, #24]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	db06      	blt.n	8010a86 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010a78:	4b25      	ldr	r3, [pc, #148]	@ (8010b10 <xTaskPriorityInherit+0xc4>)
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a7e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010a82:	68bb      	ldr	r3, [r7, #8]
 8010a84:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010a86:	68bb      	ldr	r3, [r7, #8]
 8010a88:	6959      	ldr	r1, [r3, #20]
 8010a8a:	68bb      	ldr	r3, [r7, #8]
 8010a8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a8e:	4613      	mov	r3, r2
 8010a90:	009b      	lsls	r3, r3, #2
 8010a92:	4413      	add	r3, r2
 8010a94:	009b      	lsls	r3, r3, #2
 8010a96:	4a1f      	ldr	r2, [pc, #124]	@ (8010b14 <xTaskPriorityInherit+0xc8>)
 8010a98:	4413      	add	r3, r2
 8010a9a:	4299      	cmp	r1, r3
 8010a9c:	d122      	bne.n	8010ae4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010a9e:	68bb      	ldr	r3, [r7, #8]
 8010aa0:	3304      	adds	r3, #4
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	f7fe f906 	bl	800ecb4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010aa8:	4b19      	ldr	r3, [pc, #100]	@ (8010b10 <xTaskPriorityInherit+0xc4>)
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010aae:	68bb      	ldr	r3, [r7, #8]
 8010ab0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010ab2:	68bb      	ldr	r3, [r7, #8]
 8010ab4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ab6:	4b18      	ldr	r3, [pc, #96]	@ (8010b18 <xTaskPriorityInherit+0xcc>)
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	429a      	cmp	r2, r3
 8010abc:	d903      	bls.n	8010ac6 <xTaskPriorityInherit+0x7a>
 8010abe:	68bb      	ldr	r3, [r7, #8]
 8010ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ac2:	4a15      	ldr	r2, [pc, #84]	@ (8010b18 <xTaskPriorityInherit+0xcc>)
 8010ac4:	6013      	str	r3, [r2, #0]
 8010ac6:	68bb      	ldr	r3, [r7, #8]
 8010ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010aca:	4613      	mov	r3, r2
 8010acc:	009b      	lsls	r3, r3, #2
 8010ace:	4413      	add	r3, r2
 8010ad0:	009b      	lsls	r3, r3, #2
 8010ad2:	4a10      	ldr	r2, [pc, #64]	@ (8010b14 <xTaskPriorityInherit+0xc8>)
 8010ad4:	441a      	add	r2, r3
 8010ad6:	68bb      	ldr	r3, [r7, #8]
 8010ad8:	3304      	adds	r3, #4
 8010ada:	4619      	mov	r1, r3
 8010adc:	4610      	mov	r0, r2
 8010ade:	f7fe f88c 	bl	800ebfa <vListInsertEnd>
 8010ae2:	e004      	b.n	8010aee <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8010b10 <xTaskPriorityInherit+0xc4>)
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010aea:	68bb      	ldr	r3, [r7, #8]
 8010aec:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010aee:	2301      	movs	r3, #1
 8010af0:	60fb      	str	r3, [r7, #12]
 8010af2:	e008      	b.n	8010b06 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010af4:	68bb      	ldr	r3, [r7, #8]
 8010af6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010af8:	4b05      	ldr	r3, [pc, #20]	@ (8010b10 <xTaskPriorityInherit+0xc4>)
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010afe:	429a      	cmp	r2, r3
 8010b00:	d201      	bcs.n	8010b06 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010b02:	2301      	movs	r3, #1
 8010b04:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010b06:	68fb      	ldr	r3, [r7, #12]
	}
 8010b08:	4618      	mov	r0, r3
 8010b0a:	3710      	adds	r7, #16
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	bd80      	pop	{r7, pc}
 8010b10:	24001084 	.word	0x24001084
 8010b14:	24001088 	.word	0x24001088
 8010b18:	24001560 	.word	0x24001560

08010b1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010b1c:	b580      	push	{r7, lr}
 8010b1e:	b086      	sub	sp, #24
 8010b20:	af00      	add	r7, sp, #0
 8010b22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010b28:	2300      	movs	r3, #0
 8010b2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d058      	beq.n	8010be4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010b32:	4b2f      	ldr	r3, [pc, #188]	@ (8010bf0 <xTaskPriorityDisinherit+0xd4>)
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	693a      	ldr	r2, [r7, #16]
 8010b38:	429a      	cmp	r2, r3
 8010b3a:	d00b      	beq.n	8010b54 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8010b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b40:	f383 8811 	msr	BASEPRI, r3
 8010b44:	f3bf 8f6f 	isb	sy
 8010b48:	f3bf 8f4f 	dsb	sy
 8010b4c:	60fb      	str	r3, [r7, #12]
}
 8010b4e:	bf00      	nop
 8010b50:	bf00      	nop
 8010b52:	e7fd      	b.n	8010b50 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010b54:	693b      	ldr	r3, [r7, #16]
 8010b56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d10b      	bne.n	8010b74 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8010b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b60:	f383 8811 	msr	BASEPRI, r3
 8010b64:	f3bf 8f6f 	isb	sy
 8010b68:	f3bf 8f4f 	dsb	sy
 8010b6c:	60bb      	str	r3, [r7, #8]
}
 8010b6e:	bf00      	nop
 8010b70:	bf00      	nop
 8010b72:	e7fd      	b.n	8010b70 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8010b74:	693b      	ldr	r3, [r7, #16]
 8010b76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010b78:	1e5a      	subs	r2, r3, #1
 8010b7a:	693b      	ldr	r3, [r7, #16]
 8010b7c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010b7e:	693b      	ldr	r3, [r7, #16]
 8010b80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010b82:	693b      	ldr	r3, [r7, #16]
 8010b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010b86:	429a      	cmp	r2, r3
 8010b88:	d02c      	beq.n	8010be4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010b8a:	693b      	ldr	r3, [r7, #16]
 8010b8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d128      	bne.n	8010be4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010b92:	693b      	ldr	r3, [r7, #16]
 8010b94:	3304      	adds	r3, #4
 8010b96:	4618      	mov	r0, r3
 8010b98:	f7fe f88c 	bl	800ecb4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010b9c:	693b      	ldr	r3, [r7, #16]
 8010b9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010ba0:	693b      	ldr	r3, [r7, #16]
 8010ba2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010ba4:	693b      	ldr	r3, [r7, #16]
 8010ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ba8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010bac:	693b      	ldr	r3, [r7, #16]
 8010bae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010bb0:	693b      	ldr	r3, [r7, #16]
 8010bb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8010bf4 <xTaskPriorityDisinherit+0xd8>)
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	429a      	cmp	r2, r3
 8010bba:	d903      	bls.n	8010bc4 <xTaskPriorityDisinherit+0xa8>
 8010bbc:	693b      	ldr	r3, [r7, #16]
 8010bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010bc0:	4a0c      	ldr	r2, [pc, #48]	@ (8010bf4 <xTaskPriorityDisinherit+0xd8>)
 8010bc2:	6013      	str	r3, [r2, #0]
 8010bc4:	693b      	ldr	r3, [r7, #16]
 8010bc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010bc8:	4613      	mov	r3, r2
 8010bca:	009b      	lsls	r3, r3, #2
 8010bcc:	4413      	add	r3, r2
 8010bce:	009b      	lsls	r3, r3, #2
 8010bd0:	4a09      	ldr	r2, [pc, #36]	@ (8010bf8 <xTaskPriorityDisinherit+0xdc>)
 8010bd2:	441a      	add	r2, r3
 8010bd4:	693b      	ldr	r3, [r7, #16]
 8010bd6:	3304      	adds	r3, #4
 8010bd8:	4619      	mov	r1, r3
 8010bda:	4610      	mov	r0, r2
 8010bdc:	f7fe f80d 	bl	800ebfa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010be0:	2301      	movs	r3, #1
 8010be2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010be4:	697b      	ldr	r3, [r7, #20]
	}
 8010be6:	4618      	mov	r0, r3
 8010be8:	3718      	adds	r7, #24
 8010bea:	46bd      	mov	sp, r7
 8010bec:	bd80      	pop	{r7, pc}
 8010bee:	bf00      	nop
 8010bf0:	24001084 	.word	0x24001084
 8010bf4:	24001560 	.word	0x24001560
 8010bf8:	24001088 	.word	0x24001088

08010bfc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	b088      	sub	sp, #32
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	6078      	str	r0, [r7, #4]
 8010c04:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010c0a:	2301      	movs	r3, #1
 8010c0c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d06c      	beq.n	8010cee <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010c14:	69bb      	ldr	r3, [r7, #24]
 8010c16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d10b      	bne.n	8010c34 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8010c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c20:	f383 8811 	msr	BASEPRI, r3
 8010c24:	f3bf 8f6f 	isb	sy
 8010c28:	f3bf 8f4f 	dsb	sy
 8010c2c:	60fb      	str	r3, [r7, #12]
}
 8010c2e:	bf00      	nop
 8010c30:	bf00      	nop
 8010c32:	e7fd      	b.n	8010c30 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010c34:	69bb      	ldr	r3, [r7, #24]
 8010c36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010c38:	683a      	ldr	r2, [r7, #0]
 8010c3a:	429a      	cmp	r2, r3
 8010c3c:	d902      	bls.n	8010c44 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010c3e:	683b      	ldr	r3, [r7, #0]
 8010c40:	61fb      	str	r3, [r7, #28]
 8010c42:	e002      	b.n	8010c4a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010c44:	69bb      	ldr	r3, [r7, #24]
 8010c46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010c48:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010c4a:	69bb      	ldr	r3, [r7, #24]
 8010c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c4e:	69fa      	ldr	r2, [r7, #28]
 8010c50:	429a      	cmp	r2, r3
 8010c52:	d04c      	beq.n	8010cee <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010c54:	69bb      	ldr	r3, [r7, #24]
 8010c56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010c58:	697a      	ldr	r2, [r7, #20]
 8010c5a:	429a      	cmp	r2, r3
 8010c5c:	d147      	bne.n	8010cee <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010c5e:	4b26      	ldr	r3, [pc, #152]	@ (8010cf8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	69ba      	ldr	r2, [r7, #24]
 8010c64:	429a      	cmp	r2, r3
 8010c66:	d10b      	bne.n	8010c80 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8010c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c6c:	f383 8811 	msr	BASEPRI, r3
 8010c70:	f3bf 8f6f 	isb	sy
 8010c74:	f3bf 8f4f 	dsb	sy
 8010c78:	60bb      	str	r3, [r7, #8]
}
 8010c7a:	bf00      	nop
 8010c7c:	bf00      	nop
 8010c7e:	e7fd      	b.n	8010c7c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010c80:	69bb      	ldr	r3, [r7, #24]
 8010c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c84:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010c86:	69bb      	ldr	r3, [r7, #24]
 8010c88:	69fa      	ldr	r2, [r7, #28]
 8010c8a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010c8c:	69bb      	ldr	r3, [r7, #24]
 8010c8e:	699b      	ldr	r3, [r3, #24]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	db04      	blt.n	8010c9e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c94:	69fb      	ldr	r3, [r7, #28]
 8010c96:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010c9a:	69bb      	ldr	r3, [r7, #24]
 8010c9c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010c9e:	69bb      	ldr	r3, [r7, #24]
 8010ca0:	6959      	ldr	r1, [r3, #20]
 8010ca2:	693a      	ldr	r2, [r7, #16]
 8010ca4:	4613      	mov	r3, r2
 8010ca6:	009b      	lsls	r3, r3, #2
 8010ca8:	4413      	add	r3, r2
 8010caa:	009b      	lsls	r3, r3, #2
 8010cac:	4a13      	ldr	r2, [pc, #76]	@ (8010cfc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010cae:	4413      	add	r3, r2
 8010cb0:	4299      	cmp	r1, r3
 8010cb2:	d11c      	bne.n	8010cee <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010cb4:	69bb      	ldr	r3, [r7, #24]
 8010cb6:	3304      	adds	r3, #4
 8010cb8:	4618      	mov	r0, r3
 8010cba:	f7fd fffb 	bl	800ecb4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010cbe:	69bb      	ldr	r3, [r7, #24]
 8010cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8010d00 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	429a      	cmp	r2, r3
 8010cc8:	d903      	bls.n	8010cd2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8010cca:	69bb      	ldr	r3, [r7, #24]
 8010ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010cce:	4a0c      	ldr	r2, [pc, #48]	@ (8010d00 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8010cd0:	6013      	str	r3, [r2, #0]
 8010cd2:	69bb      	ldr	r3, [r7, #24]
 8010cd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010cd6:	4613      	mov	r3, r2
 8010cd8:	009b      	lsls	r3, r3, #2
 8010cda:	4413      	add	r3, r2
 8010cdc:	009b      	lsls	r3, r3, #2
 8010cde:	4a07      	ldr	r2, [pc, #28]	@ (8010cfc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010ce0:	441a      	add	r2, r3
 8010ce2:	69bb      	ldr	r3, [r7, #24]
 8010ce4:	3304      	adds	r3, #4
 8010ce6:	4619      	mov	r1, r3
 8010ce8:	4610      	mov	r0, r2
 8010cea:	f7fd ff86 	bl	800ebfa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010cee:	bf00      	nop
 8010cf0:	3720      	adds	r7, #32
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	bd80      	pop	{r7, pc}
 8010cf6:	bf00      	nop
 8010cf8:	24001084 	.word	0x24001084
 8010cfc:	24001088 	.word	0x24001088
 8010d00:	24001560 	.word	0x24001560

08010d04 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010d04:	b480      	push	{r7}
 8010d06:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010d08:	4b07      	ldr	r3, [pc, #28]	@ (8010d28 <pvTaskIncrementMutexHeldCount+0x24>)
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d004      	beq.n	8010d1a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010d10:	4b05      	ldr	r3, [pc, #20]	@ (8010d28 <pvTaskIncrementMutexHeldCount+0x24>)
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010d16:	3201      	adds	r2, #1
 8010d18:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8010d1a:	4b03      	ldr	r3, [pc, #12]	@ (8010d28 <pvTaskIncrementMutexHeldCount+0x24>)
 8010d1c:	681b      	ldr	r3, [r3, #0]
	}
 8010d1e:	4618      	mov	r0, r3
 8010d20:	46bd      	mov	sp, r7
 8010d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d26:	4770      	bx	lr
 8010d28:	24001084 	.word	0x24001084

08010d2c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010d2c:	b580      	push	{r7, lr}
 8010d2e:	b084      	sub	sp, #16
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	6078      	str	r0, [r7, #4]
 8010d34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010d36:	4b21      	ldr	r3, [pc, #132]	@ (8010dbc <prvAddCurrentTaskToDelayedList+0x90>)
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010d3c:	4b20      	ldr	r3, [pc, #128]	@ (8010dc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	3304      	adds	r3, #4
 8010d42:	4618      	mov	r0, r3
 8010d44:	f7fd ffb6 	bl	800ecb4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d4e:	d10a      	bne.n	8010d66 <prvAddCurrentTaskToDelayedList+0x3a>
 8010d50:	683b      	ldr	r3, [r7, #0]
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d007      	beq.n	8010d66 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010d56:	4b1a      	ldr	r3, [pc, #104]	@ (8010dc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	3304      	adds	r3, #4
 8010d5c:	4619      	mov	r1, r3
 8010d5e:	4819      	ldr	r0, [pc, #100]	@ (8010dc4 <prvAddCurrentTaskToDelayedList+0x98>)
 8010d60:	f7fd ff4b 	bl	800ebfa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010d64:	e026      	b.n	8010db4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010d66:	68fa      	ldr	r2, [r7, #12]
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	4413      	add	r3, r2
 8010d6c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010d6e:	4b14      	ldr	r3, [pc, #80]	@ (8010dc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	68ba      	ldr	r2, [r7, #8]
 8010d74:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010d76:	68ba      	ldr	r2, [r7, #8]
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	429a      	cmp	r2, r3
 8010d7c:	d209      	bcs.n	8010d92 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010d7e:	4b12      	ldr	r3, [pc, #72]	@ (8010dc8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010d80:	681a      	ldr	r2, [r3, #0]
 8010d82:	4b0f      	ldr	r3, [pc, #60]	@ (8010dc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	3304      	adds	r3, #4
 8010d88:	4619      	mov	r1, r3
 8010d8a:	4610      	mov	r0, r2
 8010d8c:	f7fd ff59 	bl	800ec42 <vListInsert>
}
 8010d90:	e010      	b.n	8010db4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010d92:	4b0e      	ldr	r3, [pc, #56]	@ (8010dcc <prvAddCurrentTaskToDelayedList+0xa0>)
 8010d94:	681a      	ldr	r2, [r3, #0]
 8010d96:	4b0a      	ldr	r3, [pc, #40]	@ (8010dc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	3304      	adds	r3, #4
 8010d9c:	4619      	mov	r1, r3
 8010d9e:	4610      	mov	r0, r2
 8010da0:	f7fd ff4f 	bl	800ec42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010da4:	4b0a      	ldr	r3, [pc, #40]	@ (8010dd0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	68ba      	ldr	r2, [r7, #8]
 8010daa:	429a      	cmp	r2, r3
 8010dac:	d202      	bcs.n	8010db4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010dae:	4a08      	ldr	r2, [pc, #32]	@ (8010dd0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010db0:	68bb      	ldr	r3, [r7, #8]
 8010db2:	6013      	str	r3, [r2, #0]
}
 8010db4:	bf00      	nop
 8010db6:	3710      	adds	r7, #16
 8010db8:	46bd      	mov	sp, r7
 8010dba:	bd80      	pop	{r7, pc}
 8010dbc:	2400155c 	.word	0x2400155c
 8010dc0:	24001084 	.word	0x24001084
 8010dc4:	24001544 	.word	0x24001544
 8010dc8:	24001514 	.word	0x24001514
 8010dcc:	24001510 	.word	0x24001510
 8010dd0:	24001578 	.word	0x24001578

08010dd4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010dd4:	b580      	push	{r7, lr}
 8010dd6:	b08a      	sub	sp, #40	@ 0x28
 8010dd8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010dda:	2300      	movs	r3, #0
 8010ddc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010dde:	f000 fb13 	bl	8011408 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010de2:	4b1d      	ldr	r3, [pc, #116]	@ (8010e58 <xTimerCreateTimerTask+0x84>)
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d021      	beq.n	8010e2e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010dea:	2300      	movs	r3, #0
 8010dec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010dee:	2300      	movs	r3, #0
 8010df0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010df2:	1d3a      	adds	r2, r7, #4
 8010df4:	f107 0108 	add.w	r1, r7, #8
 8010df8:	f107 030c 	add.w	r3, r7, #12
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	f7fd feb5 	bl	800eb6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010e02:	6879      	ldr	r1, [r7, #4]
 8010e04:	68bb      	ldr	r3, [r7, #8]
 8010e06:	68fa      	ldr	r2, [r7, #12]
 8010e08:	9202      	str	r2, [sp, #8]
 8010e0a:	9301      	str	r3, [sp, #4]
 8010e0c:	2302      	movs	r3, #2
 8010e0e:	9300      	str	r3, [sp, #0]
 8010e10:	2300      	movs	r3, #0
 8010e12:	460a      	mov	r2, r1
 8010e14:	4911      	ldr	r1, [pc, #68]	@ (8010e5c <xTimerCreateTimerTask+0x88>)
 8010e16:	4812      	ldr	r0, [pc, #72]	@ (8010e60 <xTimerCreateTimerTask+0x8c>)
 8010e18:	f7fe ffa2 	bl	800fd60 <xTaskCreateStatic>
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	4a11      	ldr	r2, [pc, #68]	@ (8010e64 <xTimerCreateTimerTask+0x90>)
 8010e20:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010e22:	4b10      	ldr	r3, [pc, #64]	@ (8010e64 <xTimerCreateTimerTask+0x90>)
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d001      	beq.n	8010e2e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010e2a:	2301      	movs	r3, #1
 8010e2c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010e2e:	697b      	ldr	r3, [r7, #20]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d10b      	bne.n	8010e4c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8010e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e38:	f383 8811 	msr	BASEPRI, r3
 8010e3c:	f3bf 8f6f 	isb	sy
 8010e40:	f3bf 8f4f 	dsb	sy
 8010e44:	613b      	str	r3, [r7, #16]
}
 8010e46:	bf00      	nop
 8010e48:	bf00      	nop
 8010e4a:	e7fd      	b.n	8010e48 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010e4c:	697b      	ldr	r3, [r7, #20]
}
 8010e4e:	4618      	mov	r0, r3
 8010e50:	3718      	adds	r7, #24
 8010e52:	46bd      	mov	sp, r7
 8010e54:	bd80      	pop	{r7, pc}
 8010e56:	bf00      	nop
 8010e58:	240015b4 	.word	0x240015b4
 8010e5c:	0802b1c8 	.word	0x0802b1c8
 8010e60:	08010fa1 	.word	0x08010fa1
 8010e64:	240015b8 	.word	0x240015b8

08010e68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	b08a      	sub	sp, #40	@ 0x28
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	60f8      	str	r0, [r7, #12]
 8010e70:	60b9      	str	r1, [r7, #8]
 8010e72:	607a      	str	r2, [r7, #4]
 8010e74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010e76:	2300      	movs	r3, #0
 8010e78:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d10b      	bne.n	8010e98 <xTimerGenericCommand+0x30>
	__asm volatile
 8010e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e84:	f383 8811 	msr	BASEPRI, r3
 8010e88:	f3bf 8f6f 	isb	sy
 8010e8c:	f3bf 8f4f 	dsb	sy
 8010e90:	623b      	str	r3, [r7, #32]
}
 8010e92:	bf00      	nop
 8010e94:	bf00      	nop
 8010e96:	e7fd      	b.n	8010e94 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010e98:	4b19      	ldr	r3, [pc, #100]	@ (8010f00 <xTimerGenericCommand+0x98>)
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d02a      	beq.n	8010ef6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010ea0:	68bb      	ldr	r3, [r7, #8]
 8010ea2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010eac:	68bb      	ldr	r3, [r7, #8]
 8010eae:	2b05      	cmp	r3, #5
 8010eb0:	dc18      	bgt.n	8010ee4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010eb2:	f7ff fdad 	bl	8010a10 <xTaskGetSchedulerState>
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	2b02      	cmp	r3, #2
 8010eba:	d109      	bne.n	8010ed0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010ebc:	4b10      	ldr	r3, [pc, #64]	@ (8010f00 <xTimerGenericCommand+0x98>)
 8010ebe:	6818      	ldr	r0, [r3, #0]
 8010ec0:	f107 0110 	add.w	r1, r7, #16
 8010ec4:	2300      	movs	r3, #0
 8010ec6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010ec8:	f7fe f8d2 	bl	800f070 <xQueueGenericSend>
 8010ecc:	6278      	str	r0, [r7, #36]	@ 0x24
 8010ece:	e012      	b.n	8010ef6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8010f00 <xTimerGenericCommand+0x98>)
 8010ed2:	6818      	ldr	r0, [r3, #0]
 8010ed4:	f107 0110 	add.w	r1, r7, #16
 8010ed8:	2300      	movs	r3, #0
 8010eda:	2200      	movs	r2, #0
 8010edc:	f7fe f8c8 	bl	800f070 <xQueueGenericSend>
 8010ee0:	6278      	str	r0, [r7, #36]	@ 0x24
 8010ee2:	e008      	b.n	8010ef6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010ee4:	4b06      	ldr	r3, [pc, #24]	@ (8010f00 <xTimerGenericCommand+0x98>)
 8010ee6:	6818      	ldr	r0, [r3, #0]
 8010ee8:	f107 0110 	add.w	r1, r7, #16
 8010eec:	2300      	movs	r3, #0
 8010eee:	683a      	ldr	r2, [r7, #0]
 8010ef0:	f7fe f9c0 	bl	800f274 <xQueueGenericSendFromISR>
 8010ef4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010ef8:	4618      	mov	r0, r3
 8010efa:	3728      	adds	r7, #40	@ 0x28
 8010efc:	46bd      	mov	sp, r7
 8010efe:	bd80      	pop	{r7, pc}
 8010f00:	240015b4 	.word	0x240015b4

08010f04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010f04:	b580      	push	{r7, lr}
 8010f06:	b088      	sub	sp, #32
 8010f08:	af02      	add	r7, sp, #8
 8010f0a:	6078      	str	r0, [r7, #4]
 8010f0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f0e:	4b23      	ldr	r3, [pc, #140]	@ (8010f9c <prvProcessExpiredTimer+0x98>)
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	68db      	ldr	r3, [r3, #12]
 8010f14:	68db      	ldr	r3, [r3, #12]
 8010f16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010f18:	697b      	ldr	r3, [r7, #20]
 8010f1a:	3304      	adds	r3, #4
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	f7fd fec9 	bl	800ecb4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010f22:	697b      	ldr	r3, [r7, #20]
 8010f24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010f28:	f003 0304 	and.w	r3, r3, #4
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d023      	beq.n	8010f78 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010f30:	697b      	ldr	r3, [r7, #20]
 8010f32:	699a      	ldr	r2, [r3, #24]
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	18d1      	adds	r1, r2, r3
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	683a      	ldr	r2, [r7, #0]
 8010f3c:	6978      	ldr	r0, [r7, #20]
 8010f3e:	f000 f8d5 	bl	80110ec <prvInsertTimerInActiveList>
 8010f42:	4603      	mov	r3, r0
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d020      	beq.n	8010f8a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010f48:	2300      	movs	r3, #0
 8010f4a:	9300      	str	r3, [sp, #0]
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	687a      	ldr	r2, [r7, #4]
 8010f50:	2100      	movs	r1, #0
 8010f52:	6978      	ldr	r0, [r7, #20]
 8010f54:	f7ff ff88 	bl	8010e68 <xTimerGenericCommand>
 8010f58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010f5a:	693b      	ldr	r3, [r7, #16]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d114      	bne.n	8010f8a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8010f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f64:	f383 8811 	msr	BASEPRI, r3
 8010f68:	f3bf 8f6f 	isb	sy
 8010f6c:	f3bf 8f4f 	dsb	sy
 8010f70:	60fb      	str	r3, [r7, #12]
}
 8010f72:	bf00      	nop
 8010f74:	bf00      	nop
 8010f76:	e7fd      	b.n	8010f74 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010f78:	697b      	ldr	r3, [r7, #20]
 8010f7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010f7e:	f023 0301 	bic.w	r3, r3, #1
 8010f82:	b2da      	uxtb	r2, r3
 8010f84:	697b      	ldr	r3, [r7, #20]
 8010f86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010f8a:	697b      	ldr	r3, [r7, #20]
 8010f8c:	6a1b      	ldr	r3, [r3, #32]
 8010f8e:	6978      	ldr	r0, [r7, #20]
 8010f90:	4798      	blx	r3
}
 8010f92:	bf00      	nop
 8010f94:	3718      	adds	r7, #24
 8010f96:	46bd      	mov	sp, r7
 8010f98:	bd80      	pop	{r7, pc}
 8010f9a:	bf00      	nop
 8010f9c:	240015ac 	.word	0x240015ac

08010fa0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b084      	sub	sp, #16
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010fa8:	f107 0308 	add.w	r3, r7, #8
 8010fac:	4618      	mov	r0, r3
 8010fae:	f000 f859 	bl	8011064 <prvGetNextExpireTime>
 8010fb2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010fb4:	68bb      	ldr	r3, [r7, #8]
 8010fb6:	4619      	mov	r1, r3
 8010fb8:	68f8      	ldr	r0, [r7, #12]
 8010fba:	f000 f805 	bl	8010fc8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010fbe:	f000 f8d7 	bl	8011170 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010fc2:	bf00      	nop
 8010fc4:	e7f0      	b.n	8010fa8 <prvTimerTask+0x8>
	...

08010fc8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b084      	sub	sp, #16
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	6078      	str	r0, [r7, #4]
 8010fd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010fd2:	f7ff f929 	bl	8010228 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010fd6:	f107 0308 	add.w	r3, r7, #8
 8010fda:	4618      	mov	r0, r3
 8010fdc:	f000 f866 	bl	80110ac <prvSampleTimeNow>
 8010fe0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010fe2:	68bb      	ldr	r3, [r7, #8]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d130      	bne.n	801104a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010fe8:	683b      	ldr	r3, [r7, #0]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d10a      	bne.n	8011004 <prvProcessTimerOrBlockTask+0x3c>
 8010fee:	687a      	ldr	r2, [r7, #4]
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	429a      	cmp	r2, r3
 8010ff4:	d806      	bhi.n	8011004 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010ff6:	f7ff f925 	bl	8010244 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010ffa:	68f9      	ldr	r1, [r7, #12]
 8010ffc:	6878      	ldr	r0, [r7, #4]
 8010ffe:	f7ff ff81 	bl	8010f04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011002:	e024      	b.n	801104e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011004:	683b      	ldr	r3, [r7, #0]
 8011006:	2b00      	cmp	r3, #0
 8011008:	d008      	beq.n	801101c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801100a:	4b13      	ldr	r3, [pc, #76]	@ (8011058 <prvProcessTimerOrBlockTask+0x90>)
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	2b00      	cmp	r3, #0
 8011012:	d101      	bne.n	8011018 <prvProcessTimerOrBlockTask+0x50>
 8011014:	2301      	movs	r3, #1
 8011016:	e000      	b.n	801101a <prvProcessTimerOrBlockTask+0x52>
 8011018:	2300      	movs	r3, #0
 801101a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801101c:	4b0f      	ldr	r3, [pc, #60]	@ (801105c <prvProcessTimerOrBlockTask+0x94>)
 801101e:	6818      	ldr	r0, [r3, #0]
 8011020:	687a      	ldr	r2, [r7, #4]
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	1ad3      	subs	r3, r2, r3
 8011026:	683a      	ldr	r2, [r7, #0]
 8011028:	4619      	mov	r1, r3
 801102a:	f7fe fe65 	bl	800fcf8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801102e:	f7ff f909 	bl	8010244 <xTaskResumeAll>
 8011032:	4603      	mov	r3, r0
 8011034:	2b00      	cmp	r3, #0
 8011036:	d10a      	bne.n	801104e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011038:	4b09      	ldr	r3, [pc, #36]	@ (8011060 <prvProcessTimerOrBlockTask+0x98>)
 801103a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801103e:	601a      	str	r2, [r3, #0]
 8011040:	f3bf 8f4f 	dsb	sy
 8011044:	f3bf 8f6f 	isb	sy
}
 8011048:	e001      	b.n	801104e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801104a:	f7ff f8fb 	bl	8010244 <xTaskResumeAll>
}
 801104e:	bf00      	nop
 8011050:	3710      	adds	r7, #16
 8011052:	46bd      	mov	sp, r7
 8011054:	bd80      	pop	{r7, pc}
 8011056:	bf00      	nop
 8011058:	240015b0 	.word	0x240015b0
 801105c:	240015b4 	.word	0x240015b4
 8011060:	e000ed04 	.word	0xe000ed04

08011064 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011064:	b480      	push	{r7}
 8011066:	b085      	sub	sp, #20
 8011068:	af00      	add	r7, sp, #0
 801106a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801106c:	4b0e      	ldr	r3, [pc, #56]	@ (80110a8 <prvGetNextExpireTime+0x44>)
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d101      	bne.n	801107a <prvGetNextExpireTime+0x16>
 8011076:	2201      	movs	r2, #1
 8011078:	e000      	b.n	801107c <prvGetNextExpireTime+0x18>
 801107a:	2200      	movs	r2, #0
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	2b00      	cmp	r3, #0
 8011086:	d105      	bne.n	8011094 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011088:	4b07      	ldr	r3, [pc, #28]	@ (80110a8 <prvGetNextExpireTime+0x44>)
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	68db      	ldr	r3, [r3, #12]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	60fb      	str	r3, [r7, #12]
 8011092:	e001      	b.n	8011098 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011094:	2300      	movs	r3, #0
 8011096:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011098:	68fb      	ldr	r3, [r7, #12]
}
 801109a:	4618      	mov	r0, r3
 801109c:	3714      	adds	r7, #20
 801109e:	46bd      	mov	sp, r7
 80110a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a4:	4770      	bx	lr
 80110a6:	bf00      	nop
 80110a8:	240015ac 	.word	0x240015ac

080110ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80110ac:	b580      	push	{r7, lr}
 80110ae:	b084      	sub	sp, #16
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80110b4:	f7ff f964 	bl	8010380 <xTaskGetTickCount>
 80110b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80110ba:	4b0b      	ldr	r3, [pc, #44]	@ (80110e8 <prvSampleTimeNow+0x3c>)
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	68fa      	ldr	r2, [r7, #12]
 80110c0:	429a      	cmp	r2, r3
 80110c2:	d205      	bcs.n	80110d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80110c4:	f000 f93a 	bl	801133c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	2201      	movs	r2, #1
 80110cc:	601a      	str	r2, [r3, #0]
 80110ce:	e002      	b.n	80110d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	2200      	movs	r2, #0
 80110d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80110d6:	4a04      	ldr	r2, [pc, #16]	@ (80110e8 <prvSampleTimeNow+0x3c>)
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80110dc:	68fb      	ldr	r3, [r7, #12]
}
 80110de:	4618      	mov	r0, r3
 80110e0:	3710      	adds	r7, #16
 80110e2:	46bd      	mov	sp, r7
 80110e4:	bd80      	pop	{r7, pc}
 80110e6:	bf00      	nop
 80110e8:	240015bc 	.word	0x240015bc

080110ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b086      	sub	sp, #24
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	60f8      	str	r0, [r7, #12]
 80110f4:	60b9      	str	r1, [r7, #8]
 80110f6:	607a      	str	r2, [r7, #4]
 80110f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80110fa:	2300      	movs	r3, #0
 80110fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	68ba      	ldr	r2, [r7, #8]
 8011102:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	68fa      	ldr	r2, [r7, #12]
 8011108:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801110a:	68ba      	ldr	r2, [r7, #8]
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	429a      	cmp	r2, r3
 8011110:	d812      	bhi.n	8011138 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011112:	687a      	ldr	r2, [r7, #4]
 8011114:	683b      	ldr	r3, [r7, #0]
 8011116:	1ad2      	subs	r2, r2, r3
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	699b      	ldr	r3, [r3, #24]
 801111c:	429a      	cmp	r2, r3
 801111e:	d302      	bcc.n	8011126 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011120:	2301      	movs	r3, #1
 8011122:	617b      	str	r3, [r7, #20]
 8011124:	e01b      	b.n	801115e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011126:	4b10      	ldr	r3, [pc, #64]	@ (8011168 <prvInsertTimerInActiveList+0x7c>)
 8011128:	681a      	ldr	r2, [r3, #0]
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	3304      	adds	r3, #4
 801112e:	4619      	mov	r1, r3
 8011130:	4610      	mov	r0, r2
 8011132:	f7fd fd86 	bl	800ec42 <vListInsert>
 8011136:	e012      	b.n	801115e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011138:	687a      	ldr	r2, [r7, #4]
 801113a:	683b      	ldr	r3, [r7, #0]
 801113c:	429a      	cmp	r2, r3
 801113e:	d206      	bcs.n	801114e <prvInsertTimerInActiveList+0x62>
 8011140:	68ba      	ldr	r2, [r7, #8]
 8011142:	683b      	ldr	r3, [r7, #0]
 8011144:	429a      	cmp	r2, r3
 8011146:	d302      	bcc.n	801114e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011148:	2301      	movs	r3, #1
 801114a:	617b      	str	r3, [r7, #20]
 801114c:	e007      	b.n	801115e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801114e:	4b07      	ldr	r3, [pc, #28]	@ (801116c <prvInsertTimerInActiveList+0x80>)
 8011150:	681a      	ldr	r2, [r3, #0]
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	3304      	adds	r3, #4
 8011156:	4619      	mov	r1, r3
 8011158:	4610      	mov	r0, r2
 801115a:	f7fd fd72 	bl	800ec42 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801115e:	697b      	ldr	r3, [r7, #20]
}
 8011160:	4618      	mov	r0, r3
 8011162:	3718      	adds	r7, #24
 8011164:	46bd      	mov	sp, r7
 8011166:	bd80      	pop	{r7, pc}
 8011168:	240015b0 	.word	0x240015b0
 801116c:	240015ac 	.word	0x240015ac

08011170 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011170:	b580      	push	{r7, lr}
 8011172:	b08e      	sub	sp, #56	@ 0x38
 8011174:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011176:	e0ce      	b.n	8011316 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	2b00      	cmp	r3, #0
 801117c:	da19      	bge.n	80111b2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801117e:	1d3b      	adds	r3, r7, #4
 8011180:	3304      	adds	r3, #4
 8011182:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011186:	2b00      	cmp	r3, #0
 8011188:	d10b      	bne.n	80111a2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 801118a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801118e:	f383 8811 	msr	BASEPRI, r3
 8011192:	f3bf 8f6f 	isb	sy
 8011196:	f3bf 8f4f 	dsb	sy
 801119a:	61fb      	str	r3, [r7, #28]
}
 801119c:	bf00      	nop
 801119e:	bf00      	nop
 80111a0:	e7fd      	b.n	801119e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80111a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80111a8:	6850      	ldr	r0, [r2, #4]
 80111aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80111ac:	6892      	ldr	r2, [r2, #8]
 80111ae:	4611      	mov	r1, r2
 80111b0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	f2c0 80ae 	blt.w	8011316 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80111be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111c0:	695b      	ldr	r3, [r3, #20]
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d004      	beq.n	80111d0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80111c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111c8:	3304      	adds	r3, #4
 80111ca:	4618      	mov	r0, r3
 80111cc:	f7fd fd72 	bl	800ecb4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80111d0:	463b      	mov	r3, r7
 80111d2:	4618      	mov	r0, r3
 80111d4:	f7ff ff6a 	bl	80110ac <prvSampleTimeNow>
 80111d8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	2b09      	cmp	r3, #9
 80111de:	f200 8097 	bhi.w	8011310 <prvProcessReceivedCommands+0x1a0>
 80111e2:	a201      	add	r2, pc, #4	@ (adr r2, 80111e8 <prvProcessReceivedCommands+0x78>)
 80111e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111e8:	08011211 	.word	0x08011211
 80111ec:	08011211 	.word	0x08011211
 80111f0:	08011211 	.word	0x08011211
 80111f4:	08011287 	.word	0x08011287
 80111f8:	0801129b 	.word	0x0801129b
 80111fc:	080112e7 	.word	0x080112e7
 8011200:	08011211 	.word	0x08011211
 8011204:	08011211 	.word	0x08011211
 8011208:	08011287 	.word	0x08011287
 801120c:	0801129b 	.word	0x0801129b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011212:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011216:	f043 0301 	orr.w	r3, r3, #1
 801121a:	b2da      	uxtb	r2, r3
 801121c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801121e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011222:	68ba      	ldr	r2, [r7, #8]
 8011224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011226:	699b      	ldr	r3, [r3, #24]
 8011228:	18d1      	adds	r1, r2, r3
 801122a:	68bb      	ldr	r3, [r7, #8]
 801122c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801122e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011230:	f7ff ff5c 	bl	80110ec <prvInsertTimerInActiveList>
 8011234:	4603      	mov	r3, r0
 8011236:	2b00      	cmp	r3, #0
 8011238:	d06c      	beq.n	8011314 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801123a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801123c:	6a1b      	ldr	r3, [r3, #32]
 801123e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011240:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011244:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011248:	f003 0304 	and.w	r3, r3, #4
 801124c:	2b00      	cmp	r3, #0
 801124e:	d061      	beq.n	8011314 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011250:	68ba      	ldr	r2, [r7, #8]
 8011252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011254:	699b      	ldr	r3, [r3, #24]
 8011256:	441a      	add	r2, r3
 8011258:	2300      	movs	r3, #0
 801125a:	9300      	str	r3, [sp, #0]
 801125c:	2300      	movs	r3, #0
 801125e:	2100      	movs	r1, #0
 8011260:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011262:	f7ff fe01 	bl	8010e68 <xTimerGenericCommand>
 8011266:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011268:	6a3b      	ldr	r3, [r7, #32]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d152      	bne.n	8011314 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 801126e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011272:	f383 8811 	msr	BASEPRI, r3
 8011276:	f3bf 8f6f 	isb	sy
 801127a:	f3bf 8f4f 	dsb	sy
 801127e:	61bb      	str	r3, [r7, #24]
}
 8011280:	bf00      	nop
 8011282:	bf00      	nop
 8011284:	e7fd      	b.n	8011282 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011288:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801128c:	f023 0301 	bic.w	r3, r3, #1
 8011290:	b2da      	uxtb	r2, r3
 8011292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011294:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8011298:	e03d      	b.n	8011316 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801129a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801129c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80112a0:	f043 0301 	orr.w	r3, r3, #1
 80112a4:	b2da      	uxtb	r2, r3
 80112a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80112ac:	68ba      	ldr	r2, [r7, #8]
 80112ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112b0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80112b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112b4:	699b      	ldr	r3, [r3, #24]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d10b      	bne.n	80112d2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80112ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112be:	f383 8811 	msr	BASEPRI, r3
 80112c2:	f3bf 8f6f 	isb	sy
 80112c6:	f3bf 8f4f 	dsb	sy
 80112ca:	617b      	str	r3, [r7, #20]
}
 80112cc:	bf00      	nop
 80112ce:	bf00      	nop
 80112d0:	e7fd      	b.n	80112ce <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80112d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112d4:	699a      	ldr	r2, [r3, #24]
 80112d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112d8:	18d1      	adds	r1, r2, r3
 80112da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80112de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80112e0:	f7ff ff04 	bl	80110ec <prvInsertTimerInActiveList>
					break;
 80112e4:	e017      	b.n	8011316 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80112e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80112ec:	f003 0302 	and.w	r3, r3, #2
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d103      	bne.n	80112fc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80112f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80112f6:	f000 fbe7 	bl	8011ac8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80112fa:	e00c      	b.n	8011316 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80112fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011302:	f023 0301 	bic.w	r3, r3, #1
 8011306:	b2da      	uxtb	r2, r3
 8011308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801130a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801130e:	e002      	b.n	8011316 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8011310:	bf00      	nop
 8011312:	e000      	b.n	8011316 <prvProcessReceivedCommands+0x1a6>
					break;
 8011314:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011316:	4b08      	ldr	r3, [pc, #32]	@ (8011338 <prvProcessReceivedCommands+0x1c8>)
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	1d39      	adds	r1, r7, #4
 801131c:	2200      	movs	r2, #0
 801131e:	4618      	mov	r0, r3
 8011320:	f7fe f8d6 	bl	800f4d0 <xQueueReceive>
 8011324:	4603      	mov	r3, r0
 8011326:	2b00      	cmp	r3, #0
 8011328:	f47f af26 	bne.w	8011178 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 801132c:	bf00      	nop
 801132e:	bf00      	nop
 8011330:	3730      	adds	r7, #48	@ 0x30
 8011332:	46bd      	mov	sp, r7
 8011334:	bd80      	pop	{r7, pc}
 8011336:	bf00      	nop
 8011338:	240015b4 	.word	0x240015b4

0801133c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801133c:	b580      	push	{r7, lr}
 801133e:	b088      	sub	sp, #32
 8011340:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011342:	e049      	b.n	80113d8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011344:	4b2e      	ldr	r3, [pc, #184]	@ (8011400 <prvSwitchTimerLists+0xc4>)
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	68db      	ldr	r3, [r3, #12]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801134e:	4b2c      	ldr	r3, [pc, #176]	@ (8011400 <prvSwitchTimerLists+0xc4>)
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	68db      	ldr	r3, [r3, #12]
 8011354:	68db      	ldr	r3, [r3, #12]
 8011356:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	3304      	adds	r3, #4
 801135c:	4618      	mov	r0, r3
 801135e:	f7fd fca9 	bl	800ecb4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	6a1b      	ldr	r3, [r3, #32]
 8011366:	68f8      	ldr	r0, [r7, #12]
 8011368:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011370:	f003 0304 	and.w	r3, r3, #4
 8011374:	2b00      	cmp	r3, #0
 8011376:	d02f      	beq.n	80113d8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	699b      	ldr	r3, [r3, #24]
 801137c:	693a      	ldr	r2, [r7, #16]
 801137e:	4413      	add	r3, r2
 8011380:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011382:	68ba      	ldr	r2, [r7, #8]
 8011384:	693b      	ldr	r3, [r7, #16]
 8011386:	429a      	cmp	r2, r3
 8011388:	d90e      	bls.n	80113a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	68ba      	ldr	r2, [r7, #8]
 801138e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	68fa      	ldr	r2, [r7, #12]
 8011394:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011396:	4b1a      	ldr	r3, [pc, #104]	@ (8011400 <prvSwitchTimerLists+0xc4>)
 8011398:	681a      	ldr	r2, [r3, #0]
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	3304      	adds	r3, #4
 801139e:	4619      	mov	r1, r3
 80113a0:	4610      	mov	r0, r2
 80113a2:	f7fd fc4e 	bl	800ec42 <vListInsert>
 80113a6:	e017      	b.n	80113d8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80113a8:	2300      	movs	r3, #0
 80113aa:	9300      	str	r3, [sp, #0]
 80113ac:	2300      	movs	r3, #0
 80113ae:	693a      	ldr	r2, [r7, #16]
 80113b0:	2100      	movs	r1, #0
 80113b2:	68f8      	ldr	r0, [r7, #12]
 80113b4:	f7ff fd58 	bl	8010e68 <xTimerGenericCommand>
 80113b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d10b      	bne.n	80113d8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80113c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113c4:	f383 8811 	msr	BASEPRI, r3
 80113c8:	f3bf 8f6f 	isb	sy
 80113cc:	f3bf 8f4f 	dsb	sy
 80113d0:	603b      	str	r3, [r7, #0]
}
 80113d2:	bf00      	nop
 80113d4:	bf00      	nop
 80113d6:	e7fd      	b.n	80113d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80113d8:	4b09      	ldr	r3, [pc, #36]	@ (8011400 <prvSwitchTimerLists+0xc4>)
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d1b0      	bne.n	8011344 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80113e2:	4b07      	ldr	r3, [pc, #28]	@ (8011400 <prvSwitchTimerLists+0xc4>)
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80113e8:	4b06      	ldr	r3, [pc, #24]	@ (8011404 <prvSwitchTimerLists+0xc8>)
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	4a04      	ldr	r2, [pc, #16]	@ (8011400 <prvSwitchTimerLists+0xc4>)
 80113ee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80113f0:	4a04      	ldr	r2, [pc, #16]	@ (8011404 <prvSwitchTimerLists+0xc8>)
 80113f2:	697b      	ldr	r3, [r7, #20]
 80113f4:	6013      	str	r3, [r2, #0]
}
 80113f6:	bf00      	nop
 80113f8:	3718      	adds	r7, #24
 80113fa:	46bd      	mov	sp, r7
 80113fc:	bd80      	pop	{r7, pc}
 80113fe:	bf00      	nop
 8011400:	240015ac 	.word	0x240015ac
 8011404:	240015b0 	.word	0x240015b0

08011408 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011408:	b580      	push	{r7, lr}
 801140a:	b082      	sub	sp, #8
 801140c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801140e:	f000 f96b 	bl	80116e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011412:	4b15      	ldr	r3, [pc, #84]	@ (8011468 <prvCheckForValidListAndQueue+0x60>)
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d120      	bne.n	801145c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801141a:	4814      	ldr	r0, [pc, #80]	@ (801146c <prvCheckForValidListAndQueue+0x64>)
 801141c:	f7fd fbc0 	bl	800eba0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011420:	4813      	ldr	r0, [pc, #76]	@ (8011470 <prvCheckForValidListAndQueue+0x68>)
 8011422:	f7fd fbbd 	bl	800eba0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011426:	4b13      	ldr	r3, [pc, #76]	@ (8011474 <prvCheckForValidListAndQueue+0x6c>)
 8011428:	4a10      	ldr	r2, [pc, #64]	@ (801146c <prvCheckForValidListAndQueue+0x64>)
 801142a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801142c:	4b12      	ldr	r3, [pc, #72]	@ (8011478 <prvCheckForValidListAndQueue+0x70>)
 801142e:	4a10      	ldr	r2, [pc, #64]	@ (8011470 <prvCheckForValidListAndQueue+0x68>)
 8011430:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011432:	2300      	movs	r3, #0
 8011434:	9300      	str	r3, [sp, #0]
 8011436:	4b11      	ldr	r3, [pc, #68]	@ (801147c <prvCheckForValidListAndQueue+0x74>)
 8011438:	4a11      	ldr	r2, [pc, #68]	@ (8011480 <prvCheckForValidListAndQueue+0x78>)
 801143a:	2110      	movs	r1, #16
 801143c:	200a      	movs	r0, #10
 801143e:	f7fd fccd 	bl	800eddc <xQueueGenericCreateStatic>
 8011442:	4603      	mov	r3, r0
 8011444:	4a08      	ldr	r2, [pc, #32]	@ (8011468 <prvCheckForValidListAndQueue+0x60>)
 8011446:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011448:	4b07      	ldr	r3, [pc, #28]	@ (8011468 <prvCheckForValidListAndQueue+0x60>)
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d005      	beq.n	801145c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011450:	4b05      	ldr	r3, [pc, #20]	@ (8011468 <prvCheckForValidListAndQueue+0x60>)
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	490b      	ldr	r1, [pc, #44]	@ (8011484 <prvCheckForValidListAndQueue+0x7c>)
 8011456:	4618      	mov	r0, r3
 8011458:	f7fe fbfa 	bl	800fc50 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801145c:	f000 f976 	bl	801174c <vPortExitCritical>
}
 8011460:	bf00      	nop
 8011462:	46bd      	mov	sp, r7
 8011464:	bd80      	pop	{r7, pc}
 8011466:	bf00      	nop
 8011468:	240015b4 	.word	0x240015b4
 801146c:	24001584 	.word	0x24001584
 8011470:	24001598 	.word	0x24001598
 8011474:	240015ac 	.word	0x240015ac
 8011478:	240015b0 	.word	0x240015b0
 801147c:	24001660 	.word	0x24001660
 8011480:	240015c0 	.word	0x240015c0
 8011484:	0802b1d0 	.word	0x0802b1d0

08011488 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011488:	b480      	push	{r7}
 801148a:	b085      	sub	sp, #20
 801148c:	af00      	add	r7, sp, #0
 801148e:	60f8      	str	r0, [r7, #12]
 8011490:	60b9      	str	r1, [r7, #8]
 8011492:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	3b04      	subs	r3, #4
 8011498:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80114a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	3b04      	subs	r3, #4
 80114a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80114a8:	68bb      	ldr	r3, [r7, #8]
 80114aa:	f023 0201 	bic.w	r2, r3, #1
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	3b04      	subs	r3, #4
 80114b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80114b8:	4a0c      	ldr	r2, [pc, #48]	@ (80114ec <pxPortInitialiseStack+0x64>)
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	3b14      	subs	r3, #20
 80114c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80114c4:	687a      	ldr	r2, [r7, #4]
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	3b04      	subs	r3, #4
 80114ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	f06f 0202 	mvn.w	r2, #2
 80114d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	3b20      	subs	r3, #32
 80114dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80114de:	68fb      	ldr	r3, [r7, #12]
}
 80114e0:	4618      	mov	r0, r3
 80114e2:	3714      	adds	r7, #20
 80114e4:	46bd      	mov	sp, r7
 80114e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ea:	4770      	bx	lr
 80114ec:	080114f1 	.word	0x080114f1

080114f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80114f0:	b480      	push	{r7}
 80114f2:	b085      	sub	sp, #20
 80114f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80114f6:	2300      	movs	r3, #0
 80114f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80114fa:	4b13      	ldr	r3, [pc, #76]	@ (8011548 <prvTaskExitError+0x58>)
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011502:	d00b      	beq.n	801151c <prvTaskExitError+0x2c>
	__asm volatile
 8011504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011508:	f383 8811 	msr	BASEPRI, r3
 801150c:	f3bf 8f6f 	isb	sy
 8011510:	f3bf 8f4f 	dsb	sy
 8011514:	60fb      	str	r3, [r7, #12]
}
 8011516:	bf00      	nop
 8011518:	bf00      	nop
 801151a:	e7fd      	b.n	8011518 <prvTaskExitError+0x28>
	__asm volatile
 801151c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011520:	f383 8811 	msr	BASEPRI, r3
 8011524:	f3bf 8f6f 	isb	sy
 8011528:	f3bf 8f4f 	dsb	sy
 801152c:	60bb      	str	r3, [r7, #8]
}
 801152e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011530:	bf00      	nop
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d0fc      	beq.n	8011532 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011538:	bf00      	nop
 801153a:	bf00      	nop
 801153c:	3714      	adds	r7, #20
 801153e:	46bd      	mov	sp, r7
 8011540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011544:	4770      	bx	lr
 8011546:	bf00      	nop
 8011548:	24000014 	.word	0x24000014
 801154c:	00000000 	.word	0x00000000

08011550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011550:	4b07      	ldr	r3, [pc, #28]	@ (8011570 <pxCurrentTCBConst2>)
 8011552:	6819      	ldr	r1, [r3, #0]
 8011554:	6808      	ldr	r0, [r1, #0]
 8011556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801155a:	f380 8809 	msr	PSP, r0
 801155e:	f3bf 8f6f 	isb	sy
 8011562:	f04f 0000 	mov.w	r0, #0
 8011566:	f380 8811 	msr	BASEPRI, r0
 801156a:	4770      	bx	lr
 801156c:	f3af 8000 	nop.w

08011570 <pxCurrentTCBConst2>:
 8011570:	24001084 	.word	0x24001084
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011574:	bf00      	nop
 8011576:	bf00      	nop

08011578 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011578:	4808      	ldr	r0, [pc, #32]	@ (801159c <prvPortStartFirstTask+0x24>)
 801157a:	6800      	ldr	r0, [r0, #0]
 801157c:	6800      	ldr	r0, [r0, #0]
 801157e:	f380 8808 	msr	MSP, r0
 8011582:	f04f 0000 	mov.w	r0, #0
 8011586:	f380 8814 	msr	CONTROL, r0
 801158a:	b662      	cpsie	i
 801158c:	b661      	cpsie	f
 801158e:	f3bf 8f4f 	dsb	sy
 8011592:	f3bf 8f6f 	isb	sy
 8011596:	df00      	svc	0
 8011598:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801159a:	bf00      	nop
 801159c:	e000ed08 	.word	0xe000ed08

080115a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80115a0:	b580      	push	{r7, lr}
 80115a2:	b086      	sub	sp, #24
 80115a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80115a6:	4b47      	ldr	r3, [pc, #284]	@ (80116c4 <xPortStartScheduler+0x124>)
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	4a47      	ldr	r2, [pc, #284]	@ (80116c8 <xPortStartScheduler+0x128>)
 80115ac:	4293      	cmp	r3, r2
 80115ae:	d10b      	bne.n	80115c8 <xPortStartScheduler+0x28>
	__asm volatile
 80115b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115b4:	f383 8811 	msr	BASEPRI, r3
 80115b8:	f3bf 8f6f 	isb	sy
 80115bc:	f3bf 8f4f 	dsb	sy
 80115c0:	613b      	str	r3, [r7, #16]
}
 80115c2:	bf00      	nop
 80115c4:	bf00      	nop
 80115c6:	e7fd      	b.n	80115c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80115c8:	4b3e      	ldr	r3, [pc, #248]	@ (80116c4 <xPortStartScheduler+0x124>)
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	4a3f      	ldr	r2, [pc, #252]	@ (80116cc <xPortStartScheduler+0x12c>)
 80115ce:	4293      	cmp	r3, r2
 80115d0:	d10b      	bne.n	80115ea <xPortStartScheduler+0x4a>
	__asm volatile
 80115d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115d6:	f383 8811 	msr	BASEPRI, r3
 80115da:	f3bf 8f6f 	isb	sy
 80115de:	f3bf 8f4f 	dsb	sy
 80115e2:	60fb      	str	r3, [r7, #12]
}
 80115e4:	bf00      	nop
 80115e6:	bf00      	nop
 80115e8:	e7fd      	b.n	80115e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80115ea:	4b39      	ldr	r3, [pc, #228]	@ (80116d0 <xPortStartScheduler+0x130>)
 80115ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80115ee:	697b      	ldr	r3, [r7, #20]
 80115f0:	781b      	ldrb	r3, [r3, #0]
 80115f2:	b2db      	uxtb	r3, r3
 80115f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80115f6:	697b      	ldr	r3, [r7, #20]
 80115f8:	22ff      	movs	r2, #255	@ 0xff
 80115fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80115fc:	697b      	ldr	r3, [r7, #20]
 80115fe:	781b      	ldrb	r3, [r3, #0]
 8011600:	b2db      	uxtb	r3, r3
 8011602:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011604:	78fb      	ldrb	r3, [r7, #3]
 8011606:	b2db      	uxtb	r3, r3
 8011608:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801160c:	b2da      	uxtb	r2, r3
 801160e:	4b31      	ldr	r3, [pc, #196]	@ (80116d4 <xPortStartScheduler+0x134>)
 8011610:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011612:	4b31      	ldr	r3, [pc, #196]	@ (80116d8 <xPortStartScheduler+0x138>)
 8011614:	2207      	movs	r2, #7
 8011616:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011618:	e009      	b.n	801162e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801161a:	4b2f      	ldr	r3, [pc, #188]	@ (80116d8 <xPortStartScheduler+0x138>)
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	3b01      	subs	r3, #1
 8011620:	4a2d      	ldr	r2, [pc, #180]	@ (80116d8 <xPortStartScheduler+0x138>)
 8011622:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011624:	78fb      	ldrb	r3, [r7, #3]
 8011626:	b2db      	uxtb	r3, r3
 8011628:	005b      	lsls	r3, r3, #1
 801162a:	b2db      	uxtb	r3, r3
 801162c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801162e:	78fb      	ldrb	r3, [r7, #3]
 8011630:	b2db      	uxtb	r3, r3
 8011632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011636:	2b80      	cmp	r3, #128	@ 0x80
 8011638:	d0ef      	beq.n	801161a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801163a:	4b27      	ldr	r3, [pc, #156]	@ (80116d8 <xPortStartScheduler+0x138>)
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	f1c3 0307 	rsb	r3, r3, #7
 8011642:	2b04      	cmp	r3, #4
 8011644:	d00b      	beq.n	801165e <xPortStartScheduler+0xbe>
	__asm volatile
 8011646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801164a:	f383 8811 	msr	BASEPRI, r3
 801164e:	f3bf 8f6f 	isb	sy
 8011652:	f3bf 8f4f 	dsb	sy
 8011656:	60bb      	str	r3, [r7, #8]
}
 8011658:	bf00      	nop
 801165a:	bf00      	nop
 801165c:	e7fd      	b.n	801165a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801165e:	4b1e      	ldr	r3, [pc, #120]	@ (80116d8 <xPortStartScheduler+0x138>)
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	021b      	lsls	r3, r3, #8
 8011664:	4a1c      	ldr	r2, [pc, #112]	@ (80116d8 <xPortStartScheduler+0x138>)
 8011666:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011668:	4b1b      	ldr	r3, [pc, #108]	@ (80116d8 <xPortStartScheduler+0x138>)
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011670:	4a19      	ldr	r2, [pc, #100]	@ (80116d8 <xPortStartScheduler+0x138>)
 8011672:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	b2da      	uxtb	r2, r3
 8011678:	697b      	ldr	r3, [r7, #20]
 801167a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801167c:	4b17      	ldr	r3, [pc, #92]	@ (80116dc <xPortStartScheduler+0x13c>)
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	4a16      	ldr	r2, [pc, #88]	@ (80116dc <xPortStartScheduler+0x13c>)
 8011682:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8011686:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011688:	4b14      	ldr	r3, [pc, #80]	@ (80116dc <xPortStartScheduler+0x13c>)
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	4a13      	ldr	r2, [pc, #76]	@ (80116dc <xPortStartScheduler+0x13c>)
 801168e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8011692:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011694:	f000 f8da 	bl	801184c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011698:	4b11      	ldr	r3, [pc, #68]	@ (80116e0 <xPortStartScheduler+0x140>)
 801169a:	2200      	movs	r2, #0
 801169c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801169e:	f000 f8f9 	bl	8011894 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80116a2:	4b10      	ldr	r3, [pc, #64]	@ (80116e4 <xPortStartScheduler+0x144>)
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	4a0f      	ldr	r2, [pc, #60]	@ (80116e4 <xPortStartScheduler+0x144>)
 80116a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80116ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80116ae:	f7ff ff63 	bl	8011578 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80116b2:	f7fe ff2f 	bl	8010514 <vTaskSwitchContext>
	prvTaskExitError();
 80116b6:	f7ff ff1b 	bl	80114f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80116ba:	2300      	movs	r3, #0
}
 80116bc:	4618      	mov	r0, r3
 80116be:	3718      	adds	r7, #24
 80116c0:	46bd      	mov	sp, r7
 80116c2:	bd80      	pop	{r7, pc}
 80116c4:	e000ed00 	.word	0xe000ed00
 80116c8:	410fc271 	.word	0x410fc271
 80116cc:	410fc270 	.word	0x410fc270
 80116d0:	e000e400 	.word	0xe000e400
 80116d4:	240016b0 	.word	0x240016b0
 80116d8:	240016b4 	.word	0x240016b4
 80116dc:	e000ed20 	.word	0xe000ed20
 80116e0:	24000014 	.word	0x24000014
 80116e4:	e000ef34 	.word	0xe000ef34

080116e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80116e8:	b480      	push	{r7}
 80116ea:	b083      	sub	sp, #12
 80116ec:	af00      	add	r7, sp, #0
	__asm volatile
 80116ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116f2:	f383 8811 	msr	BASEPRI, r3
 80116f6:	f3bf 8f6f 	isb	sy
 80116fa:	f3bf 8f4f 	dsb	sy
 80116fe:	607b      	str	r3, [r7, #4]
}
 8011700:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011702:	4b10      	ldr	r3, [pc, #64]	@ (8011744 <vPortEnterCritical+0x5c>)
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	3301      	adds	r3, #1
 8011708:	4a0e      	ldr	r2, [pc, #56]	@ (8011744 <vPortEnterCritical+0x5c>)
 801170a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801170c:	4b0d      	ldr	r3, [pc, #52]	@ (8011744 <vPortEnterCritical+0x5c>)
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	2b01      	cmp	r3, #1
 8011712:	d110      	bne.n	8011736 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011714:	4b0c      	ldr	r3, [pc, #48]	@ (8011748 <vPortEnterCritical+0x60>)
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	b2db      	uxtb	r3, r3
 801171a:	2b00      	cmp	r3, #0
 801171c:	d00b      	beq.n	8011736 <vPortEnterCritical+0x4e>
	__asm volatile
 801171e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011722:	f383 8811 	msr	BASEPRI, r3
 8011726:	f3bf 8f6f 	isb	sy
 801172a:	f3bf 8f4f 	dsb	sy
 801172e:	603b      	str	r3, [r7, #0]
}
 8011730:	bf00      	nop
 8011732:	bf00      	nop
 8011734:	e7fd      	b.n	8011732 <vPortEnterCritical+0x4a>
	}
}
 8011736:	bf00      	nop
 8011738:	370c      	adds	r7, #12
 801173a:	46bd      	mov	sp, r7
 801173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011740:	4770      	bx	lr
 8011742:	bf00      	nop
 8011744:	24000014 	.word	0x24000014
 8011748:	e000ed04 	.word	0xe000ed04

0801174c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801174c:	b480      	push	{r7}
 801174e:	b083      	sub	sp, #12
 8011750:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011752:	4b12      	ldr	r3, [pc, #72]	@ (801179c <vPortExitCritical+0x50>)
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d10b      	bne.n	8011772 <vPortExitCritical+0x26>
	__asm volatile
 801175a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801175e:	f383 8811 	msr	BASEPRI, r3
 8011762:	f3bf 8f6f 	isb	sy
 8011766:	f3bf 8f4f 	dsb	sy
 801176a:	607b      	str	r3, [r7, #4]
}
 801176c:	bf00      	nop
 801176e:	bf00      	nop
 8011770:	e7fd      	b.n	801176e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011772:	4b0a      	ldr	r3, [pc, #40]	@ (801179c <vPortExitCritical+0x50>)
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	3b01      	subs	r3, #1
 8011778:	4a08      	ldr	r2, [pc, #32]	@ (801179c <vPortExitCritical+0x50>)
 801177a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801177c:	4b07      	ldr	r3, [pc, #28]	@ (801179c <vPortExitCritical+0x50>)
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	2b00      	cmp	r3, #0
 8011782:	d105      	bne.n	8011790 <vPortExitCritical+0x44>
 8011784:	2300      	movs	r3, #0
 8011786:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011788:	683b      	ldr	r3, [r7, #0]
 801178a:	f383 8811 	msr	BASEPRI, r3
}
 801178e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011790:	bf00      	nop
 8011792:	370c      	adds	r7, #12
 8011794:	46bd      	mov	sp, r7
 8011796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801179a:	4770      	bx	lr
 801179c:	24000014 	.word	0x24000014

080117a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80117a0:	f3ef 8009 	mrs	r0, PSP
 80117a4:	f3bf 8f6f 	isb	sy
 80117a8:	4b15      	ldr	r3, [pc, #84]	@ (8011800 <pxCurrentTCBConst>)
 80117aa:	681a      	ldr	r2, [r3, #0]
 80117ac:	f01e 0f10 	tst.w	lr, #16
 80117b0:	bf08      	it	eq
 80117b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80117b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117ba:	6010      	str	r0, [r2, #0]
 80117bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80117c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80117c4:	f380 8811 	msr	BASEPRI, r0
 80117c8:	f3bf 8f4f 	dsb	sy
 80117cc:	f3bf 8f6f 	isb	sy
 80117d0:	f7fe fea0 	bl	8010514 <vTaskSwitchContext>
 80117d4:	f04f 0000 	mov.w	r0, #0
 80117d8:	f380 8811 	msr	BASEPRI, r0
 80117dc:	bc09      	pop	{r0, r3}
 80117de:	6819      	ldr	r1, [r3, #0]
 80117e0:	6808      	ldr	r0, [r1, #0]
 80117e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117e6:	f01e 0f10 	tst.w	lr, #16
 80117ea:	bf08      	it	eq
 80117ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80117f0:	f380 8809 	msr	PSP, r0
 80117f4:	f3bf 8f6f 	isb	sy
 80117f8:	4770      	bx	lr
 80117fa:	bf00      	nop
 80117fc:	f3af 8000 	nop.w

08011800 <pxCurrentTCBConst>:
 8011800:	24001084 	.word	0x24001084
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011804:	bf00      	nop
 8011806:	bf00      	nop

08011808 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011808:	b580      	push	{r7, lr}
 801180a:	b082      	sub	sp, #8
 801180c:	af00      	add	r7, sp, #0
	__asm volatile
 801180e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011812:	f383 8811 	msr	BASEPRI, r3
 8011816:	f3bf 8f6f 	isb	sy
 801181a:	f3bf 8f4f 	dsb	sy
 801181e:	607b      	str	r3, [r7, #4]
}
 8011820:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011822:	f7fe fdbd 	bl	80103a0 <xTaskIncrementTick>
 8011826:	4603      	mov	r3, r0
 8011828:	2b00      	cmp	r3, #0
 801182a:	d003      	beq.n	8011834 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801182c:	4b06      	ldr	r3, [pc, #24]	@ (8011848 <xPortSysTickHandler+0x40>)
 801182e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011832:	601a      	str	r2, [r3, #0]
 8011834:	2300      	movs	r3, #0
 8011836:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011838:	683b      	ldr	r3, [r7, #0]
 801183a:	f383 8811 	msr	BASEPRI, r3
}
 801183e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011840:	bf00      	nop
 8011842:	3708      	adds	r7, #8
 8011844:	46bd      	mov	sp, r7
 8011846:	bd80      	pop	{r7, pc}
 8011848:	e000ed04 	.word	0xe000ed04

0801184c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801184c:	b480      	push	{r7}
 801184e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011850:	4b0b      	ldr	r3, [pc, #44]	@ (8011880 <vPortSetupTimerInterrupt+0x34>)
 8011852:	2200      	movs	r2, #0
 8011854:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011856:	4b0b      	ldr	r3, [pc, #44]	@ (8011884 <vPortSetupTimerInterrupt+0x38>)
 8011858:	2200      	movs	r2, #0
 801185a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801185c:	4b0a      	ldr	r3, [pc, #40]	@ (8011888 <vPortSetupTimerInterrupt+0x3c>)
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	4a0a      	ldr	r2, [pc, #40]	@ (801188c <vPortSetupTimerInterrupt+0x40>)
 8011862:	fba2 2303 	umull	r2, r3, r2, r3
 8011866:	099b      	lsrs	r3, r3, #6
 8011868:	4a09      	ldr	r2, [pc, #36]	@ (8011890 <vPortSetupTimerInterrupt+0x44>)
 801186a:	3b01      	subs	r3, #1
 801186c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801186e:	4b04      	ldr	r3, [pc, #16]	@ (8011880 <vPortSetupTimerInterrupt+0x34>)
 8011870:	2207      	movs	r2, #7
 8011872:	601a      	str	r2, [r3, #0]
}
 8011874:	bf00      	nop
 8011876:	46bd      	mov	sp, r7
 8011878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187c:	4770      	bx	lr
 801187e:	bf00      	nop
 8011880:	e000e010 	.word	0xe000e010
 8011884:	e000e018 	.word	0xe000e018
 8011888:	24000004 	.word	0x24000004
 801188c:	10624dd3 	.word	0x10624dd3
 8011890:	e000e014 	.word	0xe000e014

08011894 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011894:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80118a4 <vPortEnableVFP+0x10>
 8011898:	6801      	ldr	r1, [r0, #0]
 801189a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801189e:	6001      	str	r1, [r0, #0]
 80118a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80118a2:	bf00      	nop
 80118a4:	e000ed88 	.word	0xe000ed88

080118a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80118a8:	b480      	push	{r7}
 80118aa:	b085      	sub	sp, #20
 80118ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80118ae:	f3ef 8305 	mrs	r3, IPSR
 80118b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	2b0f      	cmp	r3, #15
 80118b8:	d915      	bls.n	80118e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80118ba:	4a18      	ldr	r2, [pc, #96]	@ (801191c <vPortValidateInterruptPriority+0x74>)
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	4413      	add	r3, r2
 80118c0:	781b      	ldrb	r3, [r3, #0]
 80118c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80118c4:	4b16      	ldr	r3, [pc, #88]	@ (8011920 <vPortValidateInterruptPriority+0x78>)
 80118c6:	781b      	ldrb	r3, [r3, #0]
 80118c8:	7afa      	ldrb	r2, [r7, #11]
 80118ca:	429a      	cmp	r2, r3
 80118cc:	d20b      	bcs.n	80118e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80118ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118d2:	f383 8811 	msr	BASEPRI, r3
 80118d6:	f3bf 8f6f 	isb	sy
 80118da:	f3bf 8f4f 	dsb	sy
 80118de:	607b      	str	r3, [r7, #4]
}
 80118e0:	bf00      	nop
 80118e2:	bf00      	nop
 80118e4:	e7fd      	b.n	80118e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80118e6:	4b0f      	ldr	r3, [pc, #60]	@ (8011924 <vPortValidateInterruptPriority+0x7c>)
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80118ee:	4b0e      	ldr	r3, [pc, #56]	@ (8011928 <vPortValidateInterruptPriority+0x80>)
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	429a      	cmp	r2, r3
 80118f4:	d90b      	bls.n	801190e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80118f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118fa:	f383 8811 	msr	BASEPRI, r3
 80118fe:	f3bf 8f6f 	isb	sy
 8011902:	f3bf 8f4f 	dsb	sy
 8011906:	603b      	str	r3, [r7, #0]
}
 8011908:	bf00      	nop
 801190a:	bf00      	nop
 801190c:	e7fd      	b.n	801190a <vPortValidateInterruptPriority+0x62>
	}
 801190e:	bf00      	nop
 8011910:	3714      	adds	r7, #20
 8011912:	46bd      	mov	sp, r7
 8011914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011918:	4770      	bx	lr
 801191a:	bf00      	nop
 801191c:	e000e3f0 	.word	0xe000e3f0
 8011920:	240016b0 	.word	0x240016b0
 8011924:	e000ed0c 	.word	0xe000ed0c
 8011928:	240016b4 	.word	0x240016b4

0801192c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801192c:	b580      	push	{r7, lr}
 801192e:	b08a      	sub	sp, #40	@ 0x28
 8011930:	af00      	add	r7, sp, #0
 8011932:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011934:	2300      	movs	r3, #0
 8011936:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011938:	f7fe fc76 	bl	8010228 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801193c:	4b5c      	ldr	r3, [pc, #368]	@ (8011ab0 <pvPortMalloc+0x184>)
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	2b00      	cmp	r3, #0
 8011942:	d101      	bne.n	8011948 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011944:	f000 f924 	bl	8011b90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011948:	4b5a      	ldr	r3, [pc, #360]	@ (8011ab4 <pvPortMalloc+0x188>)
 801194a:	681a      	ldr	r2, [r3, #0]
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	4013      	ands	r3, r2
 8011950:	2b00      	cmp	r3, #0
 8011952:	f040 8095 	bne.w	8011a80 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d01e      	beq.n	801199a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801195c:	2208      	movs	r2, #8
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	4413      	add	r3, r2
 8011962:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	f003 0307 	and.w	r3, r3, #7
 801196a:	2b00      	cmp	r3, #0
 801196c:	d015      	beq.n	801199a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	f023 0307 	bic.w	r3, r3, #7
 8011974:	3308      	adds	r3, #8
 8011976:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	f003 0307 	and.w	r3, r3, #7
 801197e:	2b00      	cmp	r3, #0
 8011980:	d00b      	beq.n	801199a <pvPortMalloc+0x6e>
	__asm volatile
 8011982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011986:	f383 8811 	msr	BASEPRI, r3
 801198a:	f3bf 8f6f 	isb	sy
 801198e:	f3bf 8f4f 	dsb	sy
 8011992:	617b      	str	r3, [r7, #20]
}
 8011994:	bf00      	nop
 8011996:	bf00      	nop
 8011998:	e7fd      	b.n	8011996 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	2b00      	cmp	r3, #0
 801199e:	d06f      	beq.n	8011a80 <pvPortMalloc+0x154>
 80119a0:	4b45      	ldr	r3, [pc, #276]	@ (8011ab8 <pvPortMalloc+0x18c>)
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	687a      	ldr	r2, [r7, #4]
 80119a6:	429a      	cmp	r2, r3
 80119a8:	d86a      	bhi.n	8011a80 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80119aa:	4b44      	ldr	r3, [pc, #272]	@ (8011abc <pvPortMalloc+0x190>)
 80119ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80119ae:	4b43      	ldr	r3, [pc, #268]	@ (8011abc <pvPortMalloc+0x190>)
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80119b4:	e004      	b.n	80119c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80119b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80119ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80119c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119c2:	685b      	ldr	r3, [r3, #4]
 80119c4:	687a      	ldr	r2, [r7, #4]
 80119c6:	429a      	cmp	r2, r3
 80119c8:	d903      	bls.n	80119d2 <pvPortMalloc+0xa6>
 80119ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d1f1      	bne.n	80119b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80119d2:	4b37      	ldr	r3, [pc, #220]	@ (8011ab0 <pvPortMalloc+0x184>)
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80119d8:	429a      	cmp	r2, r3
 80119da:	d051      	beq.n	8011a80 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80119dc:	6a3b      	ldr	r3, [r7, #32]
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	2208      	movs	r2, #8
 80119e2:	4413      	add	r3, r2
 80119e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80119e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119e8:	681a      	ldr	r2, [r3, #0]
 80119ea:	6a3b      	ldr	r3, [r7, #32]
 80119ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80119ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119f0:	685a      	ldr	r2, [r3, #4]
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	1ad2      	subs	r2, r2, r3
 80119f6:	2308      	movs	r3, #8
 80119f8:	005b      	lsls	r3, r3, #1
 80119fa:	429a      	cmp	r2, r3
 80119fc:	d920      	bls.n	8011a40 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80119fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	4413      	add	r3, r2
 8011a04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011a06:	69bb      	ldr	r3, [r7, #24]
 8011a08:	f003 0307 	and.w	r3, r3, #7
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d00b      	beq.n	8011a28 <pvPortMalloc+0xfc>
	__asm volatile
 8011a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a14:	f383 8811 	msr	BASEPRI, r3
 8011a18:	f3bf 8f6f 	isb	sy
 8011a1c:	f3bf 8f4f 	dsb	sy
 8011a20:	613b      	str	r3, [r7, #16]
}
 8011a22:	bf00      	nop
 8011a24:	bf00      	nop
 8011a26:	e7fd      	b.n	8011a24 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a2a:	685a      	ldr	r2, [r3, #4]
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	1ad2      	subs	r2, r2, r3
 8011a30:	69bb      	ldr	r3, [r7, #24]
 8011a32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a36:	687a      	ldr	r2, [r7, #4]
 8011a38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011a3a:	69b8      	ldr	r0, [r7, #24]
 8011a3c:	f000 f90c 	bl	8011c58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011a40:	4b1d      	ldr	r3, [pc, #116]	@ (8011ab8 <pvPortMalloc+0x18c>)
 8011a42:	681a      	ldr	r2, [r3, #0]
 8011a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a46:	685b      	ldr	r3, [r3, #4]
 8011a48:	1ad3      	subs	r3, r2, r3
 8011a4a:	4a1b      	ldr	r2, [pc, #108]	@ (8011ab8 <pvPortMalloc+0x18c>)
 8011a4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8011ab8 <pvPortMalloc+0x18c>)
 8011a50:	681a      	ldr	r2, [r3, #0]
 8011a52:	4b1b      	ldr	r3, [pc, #108]	@ (8011ac0 <pvPortMalloc+0x194>)
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	429a      	cmp	r2, r3
 8011a58:	d203      	bcs.n	8011a62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011a5a:	4b17      	ldr	r3, [pc, #92]	@ (8011ab8 <pvPortMalloc+0x18c>)
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	4a18      	ldr	r2, [pc, #96]	@ (8011ac0 <pvPortMalloc+0x194>)
 8011a60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a64:	685a      	ldr	r2, [r3, #4]
 8011a66:	4b13      	ldr	r3, [pc, #76]	@ (8011ab4 <pvPortMalloc+0x188>)
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	431a      	orrs	r2, r3
 8011a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a72:	2200      	movs	r2, #0
 8011a74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011a76:	4b13      	ldr	r3, [pc, #76]	@ (8011ac4 <pvPortMalloc+0x198>)
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	3301      	adds	r3, #1
 8011a7c:	4a11      	ldr	r2, [pc, #68]	@ (8011ac4 <pvPortMalloc+0x198>)
 8011a7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011a80:	f7fe fbe0 	bl	8010244 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011a84:	69fb      	ldr	r3, [r7, #28]
 8011a86:	f003 0307 	and.w	r3, r3, #7
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d00b      	beq.n	8011aa6 <pvPortMalloc+0x17a>
	__asm volatile
 8011a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a92:	f383 8811 	msr	BASEPRI, r3
 8011a96:	f3bf 8f6f 	isb	sy
 8011a9a:	f3bf 8f4f 	dsb	sy
 8011a9e:	60fb      	str	r3, [r7, #12]
}
 8011aa0:	bf00      	nop
 8011aa2:	bf00      	nop
 8011aa4:	e7fd      	b.n	8011aa2 <pvPortMalloc+0x176>
	return pvReturn;
 8011aa6:	69fb      	ldr	r3, [r7, #28]
}
 8011aa8:	4618      	mov	r0, r3
 8011aaa:	3728      	adds	r7, #40	@ 0x28
 8011aac:	46bd      	mov	sp, r7
 8011aae:	bd80      	pop	{r7, pc}
 8011ab0:	24012830 	.word	0x24012830
 8011ab4:	24012844 	.word	0x24012844
 8011ab8:	24012834 	.word	0x24012834
 8011abc:	24012828 	.word	0x24012828
 8011ac0:	24012838 	.word	0x24012838
 8011ac4:	2401283c 	.word	0x2401283c

08011ac8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	b086      	sub	sp, #24
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d04f      	beq.n	8011b7a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011ada:	2308      	movs	r3, #8
 8011adc:	425b      	negs	r3, r3
 8011ade:	697a      	ldr	r2, [r7, #20]
 8011ae0:	4413      	add	r3, r2
 8011ae2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011ae4:	697b      	ldr	r3, [r7, #20]
 8011ae6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011ae8:	693b      	ldr	r3, [r7, #16]
 8011aea:	685a      	ldr	r2, [r3, #4]
 8011aec:	4b25      	ldr	r3, [pc, #148]	@ (8011b84 <vPortFree+0xbc>)
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	4013      	ands	r3, r2
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d10b      	bne.n	8011b0e <vPortFree+0x46>
	__asm volatile
 8011af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011afa:	f383 8811 	msr	BASEPRI, r3
 8011afe:	f3bf 8f6f 	isb	sy
 8011b02:	f3bf 8f4f 	dsb	sy
 8011b06:	60fb      	str	r3, [r7, #12]
}
 8011b08:	bf00      	nop
 8011b0a:	bf00      	nop
 8011b0c:	e7fd      	b.n	8011b0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011b0e:	693b      	ldr	r3, [r7, #16]
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d00b      	beq.n	8011b2e <vPortFree+0x66>
	__asm volatile
 8011b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b1a:	f383 8811 	msr	BASEPRI, r3
 8011b1e:	f3bf 8f6f 	isb	sy
 8011b22:	f3bf 8f4f 	dsb	sy
 8011b26:	60bb      	str	r3, [r7, #8]
}
 8011b28:	bf00      	nop
 8011b2a:	bf00      	nop
 8011b2c:	e7fd      	b.n	8011b2a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011b2e:	693b      	ldr	r3, [r7, #16]
 8011b30:	685a      	ldr	r2, [r3, #4]
 8011b32:	4b14      	ldr	r3, [pc, #80]	@ (8011b84 <vPortFree+0xbc>)
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	4013      	ands	r3, r2
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d01e      	beq.n	8011b7a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011b3c:	693b      	ldr	r3, [r7, #16]
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d11a      	bne.n	8011b7a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011b44:	693b      	ldr	r3, [r7, #16]
 8011b46:	685a      	ldr	r2, [r3, #4]
 8011b48:	4b0e      	ldr	r3, [pc, #56]	@ (8011b84 <vPortFree+0xbc>)
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	43db      	mvns	r3, r3
 8011b4e:	401a      	ands	r2, r3
 8011b50:	693b      	ldr	r3, [r7, #16]
 8011b52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011b54:	f7fe fb68 	bl	8010228 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011b58:	693b      	ldr	r3, [r7, #16]
 8011b5a:	685a      	ldr	r2, [r3, #4]
 8011b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8011b88 <vPortFree+0xc0>)
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	4413      	add	r3, r2
 8011b62:	4a09      	ldr	r2, [pc, #36]	@ (8011b88 <vPortFree+0xc0>)
 8011b64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011b66:	6938      	ldr	r0, [r7, #16]
 8011b68:	f000 f876 	bl	8011c58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011b6c:	4b07      	ldr	r3, [pc, #28]	@ (8011b8c <vPortFree+0xc4>)
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	3301      	adds	r3, #1
 8011b72:	4a06      	ldr	r2, [pc, #24]	@ (8011b8c <vPortFree+0xc4>)
 8011b74:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011b76:	f7fe fb65 	bl	8010244 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011b7a:	bf00      	nop
 8011b7c:	3718      	adds	r7, #24
 8011b7e:	46bd      	mov	sp, r7
 8011b80:	bd80      	pop	{r7, pc}
 8011b82:	bf00      	nop
 8011b84:	24012844 	.word	0x24012844
 8011b88:	24012834 	.word	0x24012834
 8011b8c:	24012840 	.word	0x24012840

08011b90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011b90:	b480      	push	{r7}
 8011b92:	b085      	sub	sp, #20
 8011b94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011b96:	4b29      	ldr	r3, [pc, #164]	@ (8011c3c <prvHeapInit+0xac>)
 8011b98:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011b9a:	4b29      	ldr	r3, [pc, #164]	@ (8011c40 <prvHeapInit+0xb0>)
 8011b9c:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	f003 0307 	and.w	r3, r3, #7
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d00c      	beq.n	8011bc2 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	3307      	adds	r3, #7
 8011bac:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	f023 0307 	bic.w	r3, r3, #7
 8011bb4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011bb6:	68ba      	ldr	r2, [r7, #8]
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	1ad3      	subs	r3, r2, r3
 8011bbc:	4a20      	ldr	r2, [pc, #128]	@ (8011c40 <prvHeapInit+0xb0>)
 8011bbe:	4413      	add	r3, r2
 8011bc0:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011bc6:	4a1f      	ldr	r2, [pc, #124]	@ (8011c44 <prvHeapInit+0xb4>)
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8011c44 <prvHeapInit+0xb4>)
 8011bce:	2200      	movs	r2, #0
 8011bd0:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	68ba      	ldr	r2, [r7, #8]
 8011bd6:	4413      	add	r3, r2
 8011bd8:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011bda:	2208      	movs	r2, #8
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	1a9b      	subs	r3, r3, r2
 8011be0:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	f023 0307 	bic.w	r3, r3, #7
 8011be8:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	4a16      	ldr	r2, [pc, #88]	@ (8011c48 <prvHeapInit+0xb8>)
 8011bee:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011bf0:	4b15      	ldr	r3, [pc, #84]	@ (8011c48 <prvHeapInit+0xb8>)
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	2200      	movs	r2, #0
 8011bf6:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011bf8:	4b13      	ldr	r3, [pc, #76]	@ (8011c48 <prvHeapInit+0xb8>)
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	2200      	movs	r2, #0
 8011bfe:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011c04:	683b      	ldr	r3, [r7, #0]
 8011c06:	68fa      	ldr	r2, [r7, #12]
 8011c08:	1ad2      	subs	r2, r2, r3
 8011c0a:	683b      	ldr	r3, [r7, #0]
 8011c0c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8011c48 <prvHeapInit+0xb8>)
 8011c10:	681a      	ldr	r2, [r3, #0]
 8011c12:	683b      	ldr	r3, [r7, #0]
 8011c14:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011c16:	683b      	ldr	r3, [r7, #0]
 8011c18:	685b      	ldr	r3, [r3, #4]
 8011c1a:	4a0c      	ldr	r2, [pc, #48]	@ (8011c4c <prvHeapInit+0xbc>)
 8011c1c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011c1e:	683b      	ldr	r3, [r7, #0]
 8011c20:	685b      	ldr	r3, [r3, #4]
 8011c22:	4a0b      	ldr	r2, [pc, #44]	@ (8011c50 <prvHeapInit+0xc0>)
 8011c24:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011c26:	4b0b      	ldr	r3, [pc, #44]	@ (8011c54 <prvHeapInit+0xc4>)
 8011c28:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8011c2c:	601a      	str	r2, [r3, #0]
}
 8011c2e:	bf00      	nop
 8011c30:	3714      	adds	r7, #20
 8011c32:	46bd      	mov	sp, r7
 8011c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c38:	4770      	bx	lr
 8011c3a:	bf00      	nop
 8011c3c:	00011170 	.word	0x00011170
 8011c40:	240016b8 	.word	0x240016b8
 8011c44:	24012828 	.word	0x24012828
 8011c48:	24012830 	.word	0x24012830
 8011c4c:	24012838 	.word	0x24012838
 8011c50:	24012834 	.word	0x24012834
 8011c54:	24012844 	.word	0x24012844

08011c58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011c58:	b480      	push	{r7}
 8011c5a:	b085      	sub	sp, #20
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011c60:	4b28      	ldr	r3, [pc, #160]	@ (8011d04 <prvInsertBlockIntoFreeList+0xac>)
 8011c62:	60fb      	str	r3, [r7, #12]
 8011c64:	e002      	b.n	8011c6c <prvInsertBlockIntoFreeList+0x14>
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	60fb      	str	r3, [r7, #12]
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	687a      	ldr	r2, [r7, #4]
 8011c72:	429a      	cmp	r2, r3
 8011c74:	d8f7      	bhi.n	8011c66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	685b      	ldr	r3, [r3, #4]
 8011c7e:	68ba      	ldr	r2, [r7, #8]
 8011c80:	4413      	add	r3, r2
 8011c82:	687a      	ldr	r2, [r7, #4]
 8011c84:	429a      	cmp	r2, r3
 8011c86:	d108      	bne.n	8011c9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	685a      	ldr	r2, [r3, #4]
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	685b      	ldr	r3, [r3, #4]
 8011c90:	441a      	add	r2, r3
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	685b      	ldr	r3, [r3, #4]
 8011ca2:	68ba      	ldr	r2, [r7, #8]
 8011ca4:	441a      	add	r2, r3
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	429a      	cmp	r2, r3
 8011cac:	d118      	bne.n	8011ce0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	681a      	ldr	r2, [r3, #0]
 8011cb2:	4b15      	ldr	r3, [pc, #84]	@ (8011d08 <prvInsertBlockIntoFreeList+0xb0>)
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	429a      	cmp	r2, r3
 8011cb8:	d00d      	beq.n	8011cd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	685a      	ldr	r2, [r3, #4]
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	685b      	ldr	r3, [r3, #4]
 8011cc4:	441a      	add	r2, r3
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	681a      	ldr	r2, [r3, #0]
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	601a      	str	r2, [r3, #0]
 8011cd4:	e008      	b.n	8011ce8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8011d08 <prvInsertBlockIntoFreeList+0xb0>)
 8011cd8:	681a      	ldr	r2, [r3, #0]
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	601a      	str	r2, [r3, #0]
 8011cde:	e003      	b.n	8011ce8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	681a      	ldr	r2, [r3, #0]
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011ce8:	68fa      	ldr	r2, [r7, #12]
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	429a      	cmp	r2, r3
 8011cee:	d002      	beq.n	8011cf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	687a      	ldr	r2, [r7, #4]
 8011cf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011cf6:	bf00      	nop
 8011cf8:	3714      	adds	r7, #20
 8011cfa:	46bd      	mov	sp, r7
 8011cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d00:	4770      	bx	lr
 8011d02:	bf00      	nop
 8011d04:	24012828 	.word	0x24012828
 8011d08:	24012830 	.word	0x24012830

08011d0c <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 8011d0c:	b480      	push	{r7}
 8011d0e:	af00      	add	r7, sp, #0
}
 8011d10:	bf00      	nop
 8011d12:	46bd      	mov	sp, r7
 8011d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d18:	4770      	bx	lr

08011d1a <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8011d1a:	b580      	push	{r7, lr}
 8011d1c:	af00      	add	r7, sp, #0
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 8011d1e:	f004 fa5f 	bl	80161e0 <touchgfx_components_init>
    touchgfx_init();
 8011d22:	f004 fa2b 	bl	801617c <touchgfx_init>
}
 8011d26:	bf00      	nop
 8011d28:	bd80      	pop	{r7, pc}

08011d2a <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void* argument)
{
 8011d2a:	b580      	push	{r7, lr}
 8011d2c:	b082      	sub	sp, #8
 8011d2e:	af00      	add	r7, sp, #0
 8011d30:	6078      	str	r0, [r7, #4]
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 8011d32:	f004 fa5d 	bl	80161f0 <touchgfx_taskEntry>
}
 8011d36:	bf00      	nop
 8011d38:	3708      	adds	r7, #8
 8011d3a:	46bd      	mov	sp, r7
 8011d3c:	bd80      	pop	{r7, pc}
	...

08011d40 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8011d40:	b480      	push	{r7}
 8011d42:	b083      	sub	sp, #12
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	6078      	str	r0, [r7, #4]
    {
 8011d48:	4a04      	ldr	r2, [pc, #16]	@ (8011d5c <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	601a      	str	r2, [r3, #0]
    }
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	4618      	mov	r0, r3
 8011d52:	370c      	adds	r7, #12
 8011d54:	46bd      	mov	sp, r7
 8011d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d5a:	4770      	bx	lr
 8011d5c:	0802bf48 	.word	0x0802bf48

08011d60 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8011d60:	b580      	push	{r7, lr}
 8011d62:	b082      	sub	sp, #8
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	6078      	str	r0, [r7, #4]
    }
 8011d68:	6878      	ldr	r0, [r7, #4]
 8011d6a:	f7ff ffe9 	bl	8011d40 <_ZN8touchgfx12FontProviderD1Ev>
 8011d6e:	2104      	movs	r1, #4
 8011d70:	6878      	ldr	r0, [r7, #4]
 8011d72:	f017 fe14 	bl	802999e <_ZdlPvj>
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	4618      	mov	r0, r3
 8011d7a:	3708      	adds	r7, #8
 8011d7c:	46bd      	mov	sp, r7
 8011d7e:	bd80      	pop	{r7, pc}

08011d80 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8011d80:	b580      	push	{r7, lr}
 8011d82:	b082      	sub	sp, #8
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	6078      	str	r0, [r7, #4]
 8011d88:	460b      	mov	r3, r1
 8011d8a:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8011d8c:	887b      	ldrh	r3, [r7, #2]
 8011d8e:	2b02      	cmp	r3, #2
 8011d90:	d010      	beq.n	8011db4 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 8011d92:	2b02      	cmp	r3, #2
 8011d94:	dc13      	bgt.n	8011dbe <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d002      	beq.n	8011da0 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 8011d9a:	2b01      	cmp	r3, #1
 8011d9c:	d005      	beq.n	8011daa <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 8011d9e:	e00e      	b.n	8011dbe <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8011da0:	f002 fbb8 	bl	8014514 <_ZN17TypedTextDatabase8getFontsEv>
 8011da4:	4603      	mov	r3, r0
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	e00a      	b.n	8011dc0 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8011daa:	f002 fbb3 	bl	8014514 <_ZN17TypedTextDatabase8getFontsEv>
 8011dae:	4603      	mov	r3, r0
 8011db0:	685b      	ldr	r3, [r3, #4]
 8011db2:	e005      	b.n	8011dc0 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8011db4:	f002 fbae 	bl	8014514 <_ZN17TypedTextDatabase8getFontsEv>
 8011db8:	4603      	mov	r3, r0
 8011dba:	689b      	ldr	r3, [r3, #8]
 8011dbc:	e000      	b.n	8011dc0 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 8011dbe:	2300      	movs	r3, #0
    }
}
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	3708      	adds	r7, #8
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	bd80      	pop	{r7, pc}

08011dc8 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8011dc8:	b580      	push	{r7, lr}
 8011dca:	b082      	sub	sp, #8
 8011dcc:	af00      	add	r7, sp, #0
 8011dce:	6078      	str	r0, [r7, #4]
 8011dd0:	4a05      	ldr	r2, [pc, #20]	@ (8011de8 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	601a      	str	r2, [r3, #0]
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	4618      	mov	r0, r3
 8011dda:	f7ff ffb1 	bl	8011d40 <_ZN8touchgfx12FontProviderD1Ev>
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	4618      	mov	r0, r3
 8011de2:	3708      	adds	r7, #8
 8011de4:	46bd      	mov	sp, r7
 8011de6:	bd80      	pop	{r7, pc}
 8011de8:	0802bf34 	.word	0x0802bf34

08011dec <_ZN23ApplicationFontProviderD0Ev>:
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b082      	sub	sp, #8
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	6078      	str	r0, [r7, #4]
 8011df4:	6878      	ldr	r0, [r7, #4]
 8011df6:	f7ff ffe7 	bl	8011dc8 <_ZN23ApplicationFontProviderD1Ev>
 8011dfa:	2104      	movs	r1, #4
 8011dfc:	6878      	ldr	r0, [r7, #4]
 8011dfe:	f017 fdce 	bl	802999e <_ZdlPvj>
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	4618      	mov	r0, r3
 8011e06:	3708      	adds	r7, #8
 8011e08:	46bd      	mov	sp, r7
 8011e0a:	bd80      	pop	{r7, pc}

08011e0c <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8011e0c:	b480      	push	{r7}
 8011e0e:	b083      	sub	sp, #12
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	6078      	str	r0, [r7, #4]
    {
 8011e14:	4a04      	ldr	r2, [pc, #16]	@ (8011e28 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	601a      	str	r2, [r3, #0]
    }
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	370c      	adds	r7, #12
 8011e20:	46bd      	mov	sp, r7
 8011e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e26:	4770      	bx	lr
 8011e28:	0802c2dc 	.word	0x0802c2dc

08011e2c <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b082      	sub	sp, #8
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	6078      	str	r0, [r7, #4]
    }
 8011e34:	6878      	ldr	r0, [r7, #4]
 8011e36:	f7ff ffe9 	bl	8011e0c <_ZN8touchgfx4FontD1Ev>
 8011e3a:	2114      	movs	r1, #20
 8011e3c:	6878      	ldr	r0, [r7, #4]
 8011e3e:	f017 fdae 	bl	802999e <_ZdlPvj>
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	4618      	mov	r0, r3
 8011e46:	3708      	adds	r7, #8
 8011e48:	46bd      	mov	sp, r7
 8011e4a:	bd80      	pop	{r7, pc}

08011e4c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8011e4c:	b590      	push	{r4, r7, lr}
 8011e4e:	b087      	sub	sp, #28
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	6078      	str	r0, [r7, #4]
 8011e54:	460b      	mov	r3, r1
 8011e56:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8011e58:	887b      	ldrh	r3, [r7, #2]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d101      	bne.n	8011e62 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8011e5e:	2300      	movs	r3, #0
 8011e60:	e010      	b.n	8011e84 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8011e62:	2300      	movs	r3, #0
 8011e64:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8011e66:	2300      	movs	r3, #0
 8011e68:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	3308      	adds	r3, #8
 8011e70:	681c      	ldr	r4, [r3, #0]
 8011e72:	f107 030f 	add.w	r3, r7, #15
 8011e76:	f107 0210 	add.w	r2, r7, #16
 8011e7a:	8879      	ldrh	r1, [r7, #2]
 8011e7c:	6878      	ldr	r0, [r7, #4]
 8011e7e:	47a0      	blx	r4
 8011e80:	6178      	str	r0, [r7, #20]
        return glyph;
 8011e82:	697b      	ldr	r3, [r7, #20]
    }
 8011e84:	4618      	mov	r0, r3
 8011e86:	371c      	adds	r7, #28
 8011e88:	46bd      	mov	sp, r7
 8011e8a:	bd90      	pop	{r4, r7, pc}

08011e8c <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8011e8c:	b480      	push	{r7}
 8011e8e:	b083      	sub	sp, #12
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	89db      	ldrh	r3, [r3, #14]
    }
 8011e98:	4618      	mov	r0, r3
 8011e9a:	370c      	adds	r7, #12
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea2:	4770      	bx	lr

08011ea4 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8011ea4:	b480      	push	{r7}
 8011ea6:	b083      	sub	sp, #12
 8011ea8:	af00      	add	r7, sp, #0
 8011eaa:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	8a1b      	ldrh	r3, [r3, #16]
    }
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	370c      	adds	r7, #12
 8011eb4:	46bd      	mov	sp, r7
 8011eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eba:	4770      	bx	lr

08011ebc <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 8011ebc:	b480      	push	{r7}
 8011ebe:	b083      	sub	sp, #12
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	88db      	ldrh	r3, [r3, #6]
    }
 8011ec8:	4618      	mov	r0, r3
 8011eca:	370c      	adds	r7, #12
 8011ecc:	46bd      	mov	sp, r7
 8011ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed2:	4770      	bx	lr

08011ed4 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 8011ed4:	b480      	push	{r7}
 8011ed6:	b083      	sub	sp, #12
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	889b      	ldrh	r3, [r3, #4]
    }
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	370c      	adds	r7, #12
 8011ee4:	46bd      	mov	sp, r7
 8011ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eea:	4770      	bx	lr

08011eec <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8011eec:	b480      	push	{r7}
 8011eee:	b083      	sub	sp, #12
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	7a9b      	ldrb	r3, [r3, #10]
 8011ef8:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8011efc:	b2db      	uxtb	r3, r3
    }
 8011efe:	4618      	mov	r0, r3
 8011f00:	370c      	adds	r7, #12
 8011f02:	46bd      	mov	sp, r7
 8011f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f08:	4770      	bx	lr

08011f0a <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8011f0a:	b480      	push	{r7}
 8011f0c:	b083      	sub	sp, #12
 8011f0e:	af00      	add	r7, sp, #0
 8011f10:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	7a9b      	ldrb	r3, [r3, #10]
 8011f16:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8011f1a:	b2db      	uxtb	r3, r3
    }
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	370c      	adds	r7, #12
 8011f20:	46bd      	mov	sp, r7
 8011f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f26:	4770      	bx	lr

08011f28 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
    /**
     * Returns true if this Font is vector based. Default is false.
     *
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
 8011f28:	b480      	push	{r7}
 8011f2a:	b083      	sub	sp, #12
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	6078      	str	r0, [r7, #4]
    {
        return false;
 8011f30:	2300      	movs	r3, #0
    }
 8011f32:	4618      	mov	r0, r3
 8011f34:	370c      	adds	r7, #12
 8011f36:	46bd      	mov	sp, r7
 8011f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f3c:	4770      	bx	lr

08011f3e <_ZNK8touchgfx4Font14getScaleFactorEv>:
    /**
     * Returns the scale factor
     *
     * @return The scale factor
     */
    virtual float getScaleFactor() const
 8011f3e:	b480      	push	{r7}
 8011f40:	b083      	sub	sp, #12
 8011f42:	af00      	add	r7, sp, #0
 8011f44:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8011f46:	f04f 0300 	mov.w	r3, #0
 8011f4a:	ee07 3a90 	vmov	s15, r3
    }
 8011f4e:	eeb0 0a67 	vmov.f32	s0, s15
 8011f52:	370c      	adds	r7, #12
 8011f54:	46bd      	mov	sp, r7
 8011f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f5a:	4770      	bx	lr

08011f5c <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	b082      	sub	sp, #8
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	6078      	str	r0, [r7, #4]
 8011f64:	4a05      	ldr	r2, [pc, #20]	@ (8011f7c <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	601a      	str	r2, [r3, #0]
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	f7ff ff4d 	bl	8011e0c <_ZN8touchgfx4FontD1Ev>
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	4618      	mov	r0, r3
 8011f76:	3708      	adds	r7, #8
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	bd80      	pop	{r7, pc}
 8011f7c:	0802cef8 	.word	0x0802cef8

08011f80 <_ZN8touchgfx9ConstFontD0Ev>:
 8011f80:	b580      	push	{r7, lr}
 8011f82:	b082      	sub	sp, #8
 8011f84:	af00      	add	r7, sp, #0
 8011f86:	6078      	str	r0, [r7, #4]
 8011f88:	6878      	ldr	r0, [r7, #4]
 8011f8a:	f7ff ffe7 	bl	8011f5c <_ZN8touchgfx9ConstFontD1Ev>
 8011f8e:	211c      	movs	r1, #28
 8011f90:	6878      	ldr	r0, [r7, #4]
 8011f92:	f017 fd04 	bl	802999e <_ZdlPvj>
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	4618      	mov	r0, r3
 8011f9a:	3708      	adds	r7, #8
 8011f9c:	46bd      	mov	sp, r7
 8011f9e:	bd80      	pop	{r7, pc}

08011fa0 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 8011fa0:	b580      	push	{r7, lr}
 8011fa2:	b082      	sub	sp, #8
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	6078      	str	r0, [r7, #4]
 8011fa8:	4a05      	ldr	r2, [pc, #20]	@ (8011fc0 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	601a      	str	r2, [r3, #0]
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	4618      	mov	r0, r3
 8011fb2:	f7ff ffd3 	bl	8011f5c <_ZN8touchgfx9ConstFontD1Ev>
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	4618      	mov	r0, r3
 8011fba:	3708      	adds	r7, #8
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	bd80      	pop	{r7, pc}
 8011fc0:	0802bf5c 	.word	0x0802bf5c

08011fc4 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	b082      	sub	sp, #8
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	6078      	str	r0, [r7, #4]
 8011fcc:	6878      	ldr	r0, [r7, #4]
 8011fce:	f7ff ffe7 	bl	8011fa0 <_ZN8touchgfx13GeneratedFontD1Ev>
 8011fd2:	212c      	movs	r1, #44	@ 0x2c
 8011fd4:	6878      	ldr	r0, [r7, #4]
 8011fd6:	f017 fce2 	bl	802999e <_ZdlPvj>
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	4618      	mov	r0, r3
 8011fde:	3708      	adds	r7, #8
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	bd80      	pop	{r7, pc}

08011fe4 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 8011fe4:	b480      	push	{r7}
 8011fe6:	b083      	sub	sp, #12
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 8011ff0:	4618      	mov	r0, r3
 8011ff2:	370c      	adds	r7, #12
 8011ff4:	46bd      	mov	sp, r7
 8011ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ffa:	4770      	bx	lr

08011ffc <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8011ffc:	b480      	push	{r7}
 8011ffe:	b083      	sub	sp, #12
 8012000:	af00      	add	r7, sp, #0
 8012002:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    }
 8012008:	4618      	mov	r0, r3
 801200a:	370c      	adds	r7, #12
 801200c:	46bd      	mov	sp, r7
 801200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012012:	4770      	bx	lr

08012014 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
#include <fonts/GeneratedFont.hpp>
#include <math.h>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8012014:	b580      	push	{r7, lr}
 8012016:	b08e      	sub	sp, #56	@ 0x38
 8012018:	af0a      	add	r7, sp, #40	@ 0x28
 801201a:	60f8      	str	r0, [r7, #12]
 801201c:	60b9      	str	r1, [r7, #8]
 801201e:	4611      	mov	r1, r2
 8012020:	461a      	mov	r2, r3
 8012022:	460b      	mov	r3, r1
 8012024:	80fb      	strh	r3, [r7, #6]
 8012026:	4613      	mov	r3, r2
 8012028:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 801202a:	68f8      	ldr	r0, [r7, #12]
 801202c:	88b9      	ldrh	r1, [r7, #4]
 801202e:	88fa      	ldrh	r2, [r7, #6]
 8012030:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8012034:	9308      	str	r3, [sp, #32]
 8012036:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012038:	9307      	str	r3, [sp, #28]
 801203a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 801203e:	9306      	str	r3, [sp, #24]
 8012040:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8012044:	9305      	str	r3, [sp, #20]
 8012046:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801204a:	9304      	str	r3, [sp, #16]
 801204c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012050:	9303      	str	r3, [sp, #12]
 8012052:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012056:	9302      	str	r3, [sp, #8]
 8012058:	7f3b      	ldrb	r3, [r7, #28]
 801205a:	9301      	str	r3, [sp, #4]
 801205c:	8b3b      	ldrh	r3, [r7, #24]
 801205e:	9300      	str	r3, [sp, #0]
 8012060:	460b      	mov	r3, r1
 8012062:	68b9      	ldr	r1, [r7, #8]
 8012064:	f00b fad4 	bl	801d610 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8012068:	4a09      	ldr	r2, [pc, #36]	@ (8012090 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012072:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012078:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801207e:	625a      	str	r2, [r3, #36]	@ 0x24
      arabicTable(formsTable)
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012084:	629a      	str	r2, [r3, #40]	@ 0x28
{
}
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	4618      	mov	r0, r3
 801208a:	3710      	adds	r7, #16
 801208c:	46bd      	mov	sp, r7
 801208e:	bd80      	pop	{r7, pc}
 8012090:	0802bf5c 	.word	0x0802bf5c

08012094 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8012094:	b480      	push	{r7}
 8012096:	b085      	sub	sp, #20
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
 801209c:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	69db      	ldr	r3, [r3, #28]
 80120a2:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 80120a4:	683b      	ldr	r3, [r7, #0]
 80120a6:	889b      	ldrh	r3, [r3, #4]
 80120a8:	0adb      	lsrs	r3, r3, #11
 80120aa:	b29b      	uxth	r3, r3
 80120ac:	009b      	lsls	r3, r3, #2
 80120ae:	68fa      	ldr	r2, [r7, #12]
 80120b0:	4413      	add	r3, r2
 80120b2:	681a      	ldr	r2, [r3, #0]
 80120b4:	683b      	ldr	r3, [r7, #0]
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	4413      	add	r3, r2
}
 80120ba:	4618      	mov	r0, r3
 80120bc:	3714      	adds	r7, #20
 80120be:	46bd      	mov	sp, r7
 80120c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c4:	4770      	bx	lr

080120c6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 80120c6:	b480      	push	{r7}
 80120c8:	b089      	sub	sp, #36	@ 0x24
 80120ca:	af00      	add	r7, sp, #0
 80120cc:	60f8      	str	r0, [r7, #12]
 80120ce:	460b      	mov	r3, r1
 80120d0:	607a      	str	r2, [r7, #4]
 80120d2:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d003      	beq.n	80120e2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	7b1b      	ldrb	r3, [r3, #12]
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d101      	bne.n	80120e6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 80120e2:	2300      	movs	r3, #0
 80120e4:	e031      	b.n	801214a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	6a1a      	ldr	r2, [r3, #32]
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 80120ee:	697b      	ldr	r3, [r7, #20]
 80120f0:	7b5b      	ldrb	r3, [r3, #13]
 80120f2:	021b      	lsls	r3, r3, #8
 80120f4:	b21b      	sxth	r3, r3
 80120f6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80120fa:	b219      	sxth	r1, r3
 80120fc:	697b      	ldr	r3, [r7, #20]
 80120fe:	7adb      	ldrb	r3, [r3, #11]
 8012100:	b21b      	sxth	r3, r3
 8012102:	430b      	orrs	r3, r1
 8012104:	b21b      	sxth	r3, r3
 8012106:	b29b      	uxth	r3, r3
 8012108:	009b      	lsls	r3, r3, #2
 801210a:	4413      	add	r3, r2
 801210c:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	7b1b      	ldrb	r3, [r3, #12]
 8012112:	837b      	strh	r3, [r7, #26]
 8012114:	e013      	b.n	801213e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x78>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8012116:	69fb      	ldr	r3, [r7, #28]
 8012118:	881b      	ldrh	r3, [r3, #0]
 801211a:	897a      	ldrh	r2, [r7, #10]
 801211c:	429a      	cmp	r2, r3
 801211e:	d103      	bne.n	8012128 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x62>
        {
            return kerndata->distance;
 8012120:	69fb      	ldr	r3, [r7, #28]
 8012122:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8012126:	e010      	b.n	801214a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8012128:	69fb      	ldr	r3, [r7, #28]
 801212a:	881b      	ldrh	r3, [r3, #0]
 801212c:	897a      	ldrh	r2, [r7, #10]
 801212e:	429a      	cmp	r2, r3
 8012130:	d309      	bcc.n	8012146 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8012132:	8b7b      	ldrh	r3, [r7, #26]
 8012134:	3b01      	subs	r3, #1
 8012136:	837b      	strh	r3, [r7, #26]
 8012138:	69fb      	ldr	r3, [r7, #28]
 801213a:	3304      	adds	r3, #4
 801213c:	61fb      	str	r3, [r7, #28]
 801213e:	8b7b      	ldrh	r3, [r7, #26]
 8012140:	2b00      	cmp	r3, #0
 8012142:	d1e8      	bne.n	8012116 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x50>
 8012144:	e000      	b.n	8012148 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        {
            break;
 8012146:	bf00      	nop
        }
    }
    return 0;
 8012148:	2300      	movs	r3, #0
}
 801214a:	4618      	mov	r0, r3
 801214c:	3724      	adds	r7, #36	@ 0x24
 801214e:	46bd      	mov	sp, r7
 8012150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012154:	4770      	bx	lr
	...

08012158 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8012158:	b580      	push	{r7, lr}
 801215a:	af00      	add	r7, sp, #0
 801215c:	4801      	ldr	r0, [pc, #4]	@ (8012164 <__tcf_0+0xc>)
 801215e:	f7ff ff1f 	bl	8011fa0 <_ZN8touchgfx13GeneratedFontD1Ev>
 8012162:	bd80      	pop	{r7, pc}
 8012164:	24012848 	.word	0x24012848

08012168 <_Z23getFont_verdana_10_4bppv>:
{
 8012168:	b580      	push	{r7, lr}
 801216a:	b08e      	sub	sp, #56	@ 0x38
 801216c:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 801216e:	4b21      	ldr	r3, [pc, #132]	@ (80121f4 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	f3bf 8f5b 	dmb	ish
 8012176:	f003 0301 	and.w	r3, r3, #1
 801217a:	2b00      	cmp	r3, #0
 801217c:	bf0c      	ite	eq
 801217e:	2301      	moveq	r3, #1
 8012180:	2300      	movne	r3, #0
 8012182:	b2db      	uxtb	r3, r3
 8012184:	2b00      	cmp	r3, #0
 8012186:	d030      	beq.n	80121ea <_Z23getFont_verdana_10_4bppv+0x82>
 8012188:	481a      	ldr	r0, [pc, #104]	@ (80121f4 <_Z23getFont_verdana_10_4bppv+0x8c>)
 801218a:	f017 fc0a 	bl	80299a2 <__cxa_guard_acquire>
 801218e:	4603      	mov	r3, r0
 8012190:	2b00      	cmp	r3, #0
 8012192:	bf14      	ite	ne
 8012194:	2301      	movne	r3, #1
 8012196:	2300      	moveq	r3, #0
 8012198:	b2db      	uxtb	r3, r3
 801219a:	2b00      	cmp	r3, #0
 801219c:	d025      	beq.n	80121ea <_Z23getFont_verdana_10_4bppv+0x82>
 801219e:	2300      	movs	r3, #0
 80121a0:	930c      	str	r3, [sp, #48]	@ 0x30
 80121a2:	2300      	movs	r3, #0
 80121a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80121a6:	2300      	movs	r3, #0
 80121a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80121aa:	233f      	movs	r3, #63	@ 0x3f
 80121ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80121ae:	4b12      	ldr	r3, [pc, #72]	@ (80121f8 <_Z23getFont_verdana_10_4bppv+0x90>)
 80121b0:	9308      	str	r3, [sp, #32]
 80121b2:	4b12      	ldr	r3, [pc, #72]	@ (80121fc <_Z23getFont_verdana_10_4bppv+0x94>)
 80121b4:	9307      	str	r3, [sp, #28]
 80121b6:	2300      	movs	r3, #0
 80121b8:	9306      	str	r3, [sp, #24]
 80121ba:	2300      	movs	r3, #0
 80121bc:	9305      	str	r3, [sp, #20]
 80121be:	2301      	movs	r3, #1
 80121c0:	9304      	str	r3, [sp, #16]
 80121c2:	2304      	movs	r3, #4
 80121c4:	9303      	str	r3, [sp, #12]
 80121c6:	2300      	movs	r3, #0
 80121c8:	9302      	str	r3, [sp, #8]
 80121ca:	2300      	movs	r3, #0
 80121cc:	9301      	str	r3, [sp, #4]
 80121ce:	230a      	movs	r3, #10
 80121d0:	9300      	str	r3, [sp, #0]
 80121d2:	230a      	movs	r3, #10
 80121d4:	2201      	movs	r2, #1
 80121d6:	490a      	ldr	r1, [pc, #40]	@ (8012200 <_Z23getFont_verdana_10_4bppv+0x98>)
 80121d8:	480a      	ldr	r0, [pc, #40]	@ (8012204 <_Z23getFont_verdana_10_4bppv+0x9c>)
 80121da:	f7ff ff1b 	bl	8012014 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80121de:	480a      	ldr	r0, [pc, #40]	@ (8012208 <_Z23getFont_verdana_10_4bppv+0xa0>)
 80121e0:	f017 ff74 	bl	802a0cc <atexit>
 80121e4:	4803      	ldr	r0, [pc, #12]	@ (80121f4 <_Z23getFont_verdana_10_4bppv+0x8c>)
 80121e6:	f017 fbe8 	bl	80299ba <__cxa_guard_release>
    return verdana_10_4bpp;
 80121ea:	4b06      	ldr	r3, [pc, #24]	@ (8012204 <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 80121ec:	4618      	mov	r0, r3
 80121ee:	46bd      	mov	sp, r7
 80121f0:	bd80      	pop	{r7, pc}
 80121f2:	bf00      	nop
 80121f4:	24012874 	.word	0x24012874
 80121f8:	0802d5bc 	.word	0x0802d5bc
 80121fc:	0802d5c8 	.word	0x0802d5c8
 8012200:	0802d58c 	.word	0x0802d58c
 8012204:	24012848 	.word	0x24012848
 8012208:	08012159 	.word	0x08012159

0801220c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 801220c:	b580      	push	{r7, lr}
 801220e:	af00      	add	r7, sp, #0
 8012210:	4801      	ldr	r0, [pc, #4]	@ (8012218 <__tcf_0+0xc>)
 8012212:	f7ff fec5 	bl	8011fa0 <_ZN8touchgfx13GeneratedFontD1Ev>
 8012216:	bd80      	pop	{r7, pc}
 8012218:	24012878 	.word	0x24012878

0801221c <_Z23getFont_verdana_20_4bppv>:
{
 801221c:	b580      	push	{r7, lr}
 801221e:	b08e      	sub	sp, #56	@ 0x38
 8012220:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8012222:	4b21      	ldr	r3, [pc, #132]	@ (80122a8 <_Z23getFont_verdana_20_4bppv+0x8c>)
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	f3bf 8f5b 	dmb	ish
 801222a:	f003 0301 	and.w	r3, r3, #1
 801222e:	2b00      	cmp	r3, #0
 8012230:	bf0c      	ite	eq
 8012232:	2301      	moveq	r3, #1
 8012234:	2300      	movne	r3, #0
 8012236:	b2db      	uxtb	r3, r3
 8012238:	2b00      	cmp	r3, #0
 801223a:	d030      	beq.n	801229e <_Z23getFont_verdana_20_4bppv+0x82>
 801223c:	481a      	ldr	r0, [pc, #104]	@ (80122a8 <_Z23getFont_verdana_20_4bppv+0x8c>)
 801223e:	f017 fbb0 	bl	80299a2 <__cxa_guard_acquire>
 8012242:	4603      	mov	r3, r0
 8012244:	2b00      	cmp	r3, #0
 8012246:	bf14      	ite	ne
 8012248:	2301      	movne	r3, #1
 801224a:	2300      	moveq	r3, #0
 801224c:	b2db      	uxtb	r3, r3
 801224e:	2b00      	cmp	r3, #0
 8012250:	d025      	beq.n	801229e <_Z23getFont_verdana_20_4bppv+0x82>
 8012252:	2300      	movs	r3, #0
 8012254:	930c      	str	r3, [sp, #48]	@ 0x30
 8012256:	2300      	movs	r3, #0
 8012258:	930b      	str	r3, [sp, #44]	@ 0x2c
 801225a:	2300      	movs	r3, #0
 801225c:	930a      	str	r3, [sp, #40]	@ 0x28
 801225e:	233f      	movs	r3, #63	@ 0x3f
 8012260:	9309      	str	r3, [sp, #36]	@ 0x24
 8012262:	4b12      	ldr	r3, [pc, #72]	@ (80122ac <_Z23getFont_verdana_20_4bppv+0x90>)
 8012264:	9308      	str	r3, [sp, #32]
 8012266:	4b12      	ldr	r3, [pc, #72]	@ (80122b0 <_Z23getFont_verdana_20_4bppv+0x94>)
 8012268:	9307      	str	r3, [sp, #28]
 801226a:	2300      	movs	r3, #0
 801226c:	9306      	str	r3, [sp, #24]
 801226e:	2300      	movs	r3, #0
 8012270:	9305      	str	r3, [sp, #20]
 8012272:	2301      	movs	r3, #1
 8012274:	9304      	str	r3, [sp, #16]
 8012276:	2304      	movs	r3, #4
 8012278:	9303      	str	r3, [sp, #12]
 801227a:	2300      	movs	r3, #0
 801227c:	9302      	str	r3, [sp, #8]
 801227e:	2300      	movs	r3, #0
 8012280:	9301      	str	r3, [sp, #4]
 8012282:	2314      	movs	r3, #20
 8012284:	9300      	str	r3, [sp, #0]
 8012286:	2314      	movs	r3, #20
 8012288:	2201      	movs	r2, #1
 801228a:	490a      	ldr	r1, [pc, #40]	@ (80122b4 <_Z23getFont_verdana_20_4bppv+0x98>)
 801228c:	480a      	ldr	r0, [pc, #40]	@ (80122b8 <_Z23getFont_verdana_20_4bppv+0x9c>)
 801228e:	f7ff fec1 	bl	8012014 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8012292:	480a      	ldr	r0, [pc, #40]	@ (80122bc <_Z23getFont_verdana_20_4bppv+0xa0>)
 8012294:	f017 ff1a 	bl	802a0cc <atexit>
 8012298:	4803      	ldr	r0, [pc, #12]	@ (80122a8 <_Z23getFont_verdana_20_4bppv+0x8c>)
 801229a:	f017 fb8e 	bl	80299ba <__cxa_guard_release>
    return verdana_20_4bpp;
 801229e:	4b06      	ldr	r3, [pc, #24]	@ (80122b8 <_Z23getFont_verdana_20_4bppv+0x9c>)
}
 80122a0:	4618      	mov	r0, r3
 80122a2:	46bd      	mov	sp, r7
 80122a4:	bd80      	pop	{r7, pc}
 80122a6:	bf00      	nop
 80122a8:	240128a4 	.word	0x240128a4
 80122ac:	0802d5c0 	.word	0x0802d5c0
 80122b0:	0802d5cc 	.word	0x0802d5cc
 80122b4:	0802d59c 	.word	0x0802d59c
 80122b8:	24012878 	.word	0x24012878
 80122bc:	0801220d 	.word	0x0801220d

080122c0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80122c0:	b580      	push	{r7, lr}
 80122c2:	af00      	add	r7, sp, #0
 80122c4:	4801      	ldr	r0, [pc, #4]	@ (80122cc <__tcf_0+0xc>)
 80122c6:	f7ff fe6b 	bl	8011fa0 <_ZN8touchgfx13GeneratedFontD1Ev>
 80122ca:	bd80      	pop	{r7, pc}
 80122cc:	240128a8 	.word	0x240128a8

080122d0 <_Z23getFont_verdana_40_4bppv>:
{
 80122d0:	b580      	push	{r7, lr}
 80122d2:	b08e      	sub	sp, #56	@ 0x38
 80122d4:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80122d6:	4b21      	ldr	r3, [pc, #132]	@ (801235c <_Z23getFont_verdana_40_4bppv+0x8c>)
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	f3bf 8f5b 	dmb	ish
 80122de:	f003 0301 	and.w	r3, r3, #1
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	bf0c      	ite	eq
 80122e6:	2301      	moveq	r3, #1
 80122e8:	2300      	movne	r3, #0
 80122ea:	b2db      	uxtb	r3, r3
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d030      	beq.n	8012352 <_Z23getFont_verdana_40_4bppv+0x82>
 80122f0:	481a      	ldr	r0, [pc, #104]	@ (801235c <_Z23getFont_verdana_40_4bppv+0x8c>)
 80122f2:	f017 fb56 	bl	80299a2 <__cxa_guard_acquire>
 80122f6:	4603      	mov	r3, r0
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	bf14      	ite	ne
 80122fc:	2301      	movne	r3, #1
 80122fe:	2300      	moveq	r3, #0
 8012300:	b2db      	uxtb	r3, r3
 8012302:	2b00      	cmp	r3, #0
 8012304:	d025      	beq.n	8012352 <_Z23getFont_verdana_40_4bppv+0x82>
 8012306:	2300      	movs	r3, #0
 8012308:	930c      	str	r3, [sp, #48]	@ 0x30
 801230a:	2300      	movs	r3, #0
 801230c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801230e:	2300      	movs	r3, #0
 8012310:	930a      	str	r3, [sp, #40]	@ 0x28
 8012312:	233f      	movs	r3, #63	@ 0x3f
 8012314:	9309      	str	r3, [sp, #36]	@ 0x24
 8012316:	4b12      	ldr	r3, [pc, #72]	@ (8012360 <_Z23getFont_verdana_40_4bppv+0x90>)
 8012318:	9308      	str	r3, [sp, #32]
 801231a:	4b12      	ldr	r3, [pc, #72]	@ (8012364 <_Z23getFont_verdana_40_4bppv+0x94>)
 801231c:	9307      	str	r3, [sp, #28]
 801231e:	2300      	movs	r3, #0
 8012320:	9306      	str	r3, [sp, #24]
 8012322:	2300      	movs	r3, #0
 8012324:	9305      	str	r3, [sp, #20]
 8012326:	2301      	movs	r3, #1
 8012328:	9304      	str	r3, [sp, #16]
 801232a:	2304      	movs	r3, #4
 801232c:	9303      	str	r3, [sp, #12]
 801232e:	2300      	movs	r3, #0
 8012330:	9302      	str	r3, [sp, #8]
 8012332:	2300      	movs	r3, #0
 8012334:	9301      	str	r3, [sp, #4]
 8012336:	2328      	movs	r3, #40	@ 0x28
 8012338:	9300      	str	r3, [sp, #0]
 801233a:	2328      	movs	r3, #40	@ 0x28
 801233c:	2201      	movs	r2, #1
 801233e:	490a      	ldr	r1, [pc, #40]	@ (8012368 <_Z23getFont_verdana_40_4bppv+0x98>)
 8012340:	480a      	ldr	r0, [pc, #40]	@ (801236c <_Z23getFont_verdana_40_4bppv+0x9c>)
 8012342:	f7ff fe67 	bl	8012014 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8012346:	480a      	ldr	r0, [pc, #40]	@ (8012370 <_Z23getFont_verdana_40_4bppv+0xa0>)
 8012348:	f017 fec0 	bl	802a0cc <atexit>
 801234c:	4803      	ldr	r0, [pc, #12]	@ (801235c <_Z23getFont_verdana_40_4bppv+0x8c>)
 801234e:	f017 fb34 	bl	80299ba <__cxa_guard_release>
    return verdana_40_4bpp;
 8012352:	4b06      	ldr	r3, [pc, #24]	@ (801236c <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 8012354:	4618      	mov	r0, r3
 8012356:	46bd      	mov	sp, r7
 8012358:	bd80      	pop	{r7, pc}
 801235a:	bf00      	nop
 801235c:	240128d4 	.word	0x240128d4
 8012360:	0802d5c4 	.word	0x0802d5c4
 8012364:	0802d5d0 	.word	0x0802d5d0
 8012368:	0802d5ac 	.word	0x0802d5ac
 801236c:	240128a8 	.word	0x240128a8
 8012370:	080122c1 	.word	0x080122c1

08012374 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>:
/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */
#include <touchgfx/VectorFontRendererImpl.hpp>

void touchgfx::VectorFontRendererImpl::getVectorFontBuffers(float*& pointArray, int& pointArraySize, uint8_t*& commandArray, int& commandArraySize)
{
 8012374:	b480      	push	{r7}
 8012376:	b085      	sub	sp, #20
 8012378:	af00      	add	r7, sp, #0
 801237a:	60f8      	str	r0, [r7, #12]
 801237c:	60b9      	str	r1, [r7, #8]
 801237e:	607a      	str	r2, [r7, #4]
 8012380:	603b      	str	r3, [r7, #0]
    pointArray = 0;
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	2200      	movs	r2, #0
 8012386:	601a      	str	r2, [r3, #0]
    pointArraySize = 0;
 8012388:	68bb      	ldr	r3, [r7, #8]
 801238a:	2200      	movs	r2, #0
 801238c:	601a      	str	r2, [r3, #0]
    commandArray = 0;
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	2200      	movs	r2, #0
 8012392:	601a      	str	r2, [r3, #0]
    commandArraySize = 0;
 8012394:	683b      	ldr	r3, [r7, #0]
 8012396:	2200      	movs	r2, #0
 8012398:	601a      	str	r2, [r3, #0]
}
 801239a:	bf00      	nop
 801239c:	3714      	adds	r7, #20
 801239e:	46bd      	mov	sp, r7
 80123a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a4:	4770      	bx	lr

080123a6 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80123a6:	b480      	push	{r7}
 80123a8:	b083      	sub	sp, #12
 80123aa:	af00      	add	r7, sp, #0
 80123ac:	6078      	str	r0, [r7, #4]
 80123ae:	6039      	str	r1, [r7, #0]
 80123b0:	683b      	ldr	r3, [r7, #0]
 80123b2:	4618      	mov	r0, r3
 80123b4:	370c      	adds	r7, #12
 80123b6:	46bd      	mov	sp, r7
 80123b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123bc:	4770      	bx	lr

080123be <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80123be:	b480      	push	{r7}
 80123c0:	b083      	sub	sp, #12
 80123c2:	af00      	add	r7, sp, #0
 80123c4:	6078      	str	r0, [r7, #4]
 80123c6:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80123c8:	bf00      	nop
 80123ca:	370c      	adds	r7, #12
 80123cc:	46bd      	mov	sp, r7
 80123ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d2:	4770      	bx	lr

080123d4 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 80123d4:	b480      	push	{r7}
 80123d6:	b083      	sub	sp, #12
 80123d8:	af00      	add	r7, sp, #0
 80123da:	6078      	str	r0, [r7, #4]
 80123dc:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80123de:	bf00      	nop
 80123e0:	370c      	adds	r7, #12
 80123e2:	46bd      	mov	sp, r7
 80123e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e8:	4770      	bx	lr

080123ea <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 80123ea:	b480      	push	{r7}
 80123ec:	b083      	sub	sp, #12
 80123ee:	af00      	add	r7, sp, #0
 80123f0:	6078      	str	r0, [r7, #4]
 80123f2:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80123f4:	bf00      	nop
 80123f6:	370c      	adds	r7, #12
 80123f8:	46bd      	mov	sp, r7
 80123fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123fe:	4770      	bx	lr

08012400 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8012400:	b480      	push	{r7}
 8012402:	b083      	sub	sp, #12
 8012404:	af00      	add	r7, sp, #0
 8012406:	6078      	str	r0, [r7, #4]
 8012408:	460b      	mov	r3, r1
 801240a:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 801240c:	bf00      	nop
 801240e:	370c      	adds	r7, #12
 8012410:	46bd      	mov	sp, r7
 8012412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012416:	4770      	bx	lr

08012418 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8012418:	b480      	push	{r7}
 801241a:	b083      	sub	sp, #12
 801241c:	af00      	add	r7, sp, #0
 801241e:	6078      	str	r0, [r7, #4]
    {
    }
 8012420:	bf00      	nop
 8012422:	370c      	adds	r7, #12
 8012424:	46bd      	mov	sp, r7
 8012426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801242a:	4770      	bx	lr

0801242c <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 801242c:	b480      	push	{r7}
 801242e:	b083      	sub	sp, #12
 8012430:	af00      	add	r7, sp, #0
 8012432:	6078      	str	r0, [r7, #4]
    {
    }
 8012434:	bf00      	nop
 8012436:	370c      	adds	r7, #12
 8012438:	46bd      	mov	sp, r7
 801243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801243e:	4770      	bx	lr

08012440 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8012440:	b480      	push	{r7}
 8012442:	b083      	sub	sp, #12
 8012444:	af00      	add	r7, sp, #0
 8012446:	6078      	str	r0, [r7, #4]
    {
 8012448:	4a04      	ldr	r2, [pc, #16]	@ (801245c <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	601a      	str	r2, [r3, #0]
    }
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	4618      	mov	r0, r3
 8012452:	370c      	adds	r7, #12
 8012454:	46bd      	mov	sp, r7
 8012456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801245a:	4770      	bx	lr
 801245c:	0802c0e4 	.word	0x0802c0e4

08012460 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8012460:	b580      	push	{r7, lr}
 8012462:	b082      	sub	sp, #8
 8012464:	af00      	add	r7, sp, #0
 8012466:	6078      	str	r0, [r7, #4]
    }
 8012468:	6878      	ldr	r0, [r7, #4]
 801246a:	f7ff ffe9 	bl	8012440 <_ZN8touchgfx15UIEventListenerD1Ev>
 801246e:	2104      	movs	r1, #4
 8012470:	6878      	ldr	r0, [r7, #4]
 8012472:	f017 fa94 	bl	802999e <_ZdlPvj>
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	4618      	mov	r0, r3
 801247a:	3708      	adds	r7, #8
 801247c:	46bd      	mov	sp, r7
 801247e:	bd80      	pop	{r7, pc}

08012480 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 8012480:	b480      	push	{r7}
 8012482:	b083      	sub	sp, #12
 8012484:	af00      	add	r7, sp, #0
 8012486:	6078      	str	r0, [r7, #4]
    {
    }
 8012488:	bf00      	nop
 801248a:	370c      	adds	r7, #12
 801248c:	46bd      	mov	sp, r7
 801248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012492:	4770      	bx	lr

08012494 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8012494:	b480      	push	{r7}
 8012496:	b083      	sub	sp, #12
 8012498:	af00      	add	r7, sp, #0
 801249a:	6078      	str	r0, [r7, #4]
 801249c:	460b      	mov	r3, r1
 801249e:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 80124a0:	bf00      	nop
 80124a2:	370c      	adds	r7, #12
 80124a4:	46bd      	mov	sp, r7
 80124a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124aa:	4770      	bx	lr

080124ac <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 80124ac:	b480      	push	{r7}
 80124ae:	b083      	sub	sp, #12
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	6078      	str	r0, [r7, #4]
 80124b4:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	683a      	ldr	r2, [r7, #0]
 80124ba:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 80124be:	6810      	ldr	r0, [r2, #0]
 80124c0:	6851      	ldr	r1, [r2, #4]
 80124c2:	c303      	stmia	r3!, {r0, r1}
    }
 80124c4:	bf00      	nop
 80124c6:	370c      	adds	r7, #12
 80124c8:	46bd      	mov	sp, r7
 80124ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ce:	4770      	bx	lr

080124d0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 80124d0:	b580      	push	{r7, lr}
 80124d2:	b082      	sub	sp, #8
 80124d4:	af00      	add	r7, sp, #0
 80124d6:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	3304      	adds	r3, #4
 80124dc:	4618      	mov	r0, r3
 80124de:	f009 fc7a 	bl	801bdd6 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 80124e2:	bf00      	nop
 80124e4:	3708      	adds	r7, #8
 80124e6:	46bd      	mov	sp, r7
 80124e8:	bd80      	pop	{r7, pc}
	...

080124ec <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 80124ec:	b480      	push	{r7}
 80124ee:	b083      	sub	sp, #12
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	6078      	str	r0, [r7, #4]
    {
 80124f4:	4a04      	ldr	r2, [pc, #16]	@ (8012508 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	601a      	str	r2, [r3, #0]
    }
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	4618      	mov	r0, r3
 80124fe:	370c      	adds	r7, #12
 8012500:	46bd      	mov	sp, r7
 8012502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012506:	4770      	bx	lr
 8012508:	0802c0cc 	.word	0x0802c0cc

0801250c <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 801250c:	b580      	push	{r7, lr}
 801250e:	b082      	sub	sp, #8
 8012510:	af00      	add	r7, sp, #0
 8012512:	6078      	str	r0, [r7, #4]
    }
 8012514:	6878      	ldr	r0, [r7, #4]
 8012516:	f7ff ffe9 	bl	80124ec <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 801251a:	2104      	movs	r1, #4
 801251c:	6878      	ldr	r0, [r7, #4]
 801251e:	f017 fa3e 	bl	802999e <_ZdlPvj>
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	4618      	mov	r0, r3
 8012526:	3708      	adds	r7, #8
 8012528:	46bd      	mov	sp, r7
 801252a:	bd80      	pop	{r7, pc}

0801252c <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 801252c:	b480      	push	{r7}
 801252e:	af00      	add	r7, sp, #0
    {
        return instance;
 8012530:	4b03      	ldr	r3, [pc, #12]	@ (8012540 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8012532:	681b      	ldr	r3, [r3, #0]
    }
 8012534:	4618      	mov	r0, r3
 8012536:	46bd      	mov	sp, r7
 8012538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801253c:	4770      	bx	lr
 801253e:	bf00      	nop
 8012540:	24013b58 	.word	0x24013b58

08012544 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 8012544:	b480      	push	{r7}
 8012546:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8012548:	4b0b      	ldr	r3, [pc, #44]	@ (8012578 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8012550:	2b00      	cmp	r3, #0
 8012552:	d008      	beq.n	8012566 <_ZN8touchgfx3HAL3lcdEv+0x22>
 8012554:	4b08      	ldr	r3, [pc, #32]	@ (8012578 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801255a:	2b00      	cmp	r3, #0
 801255c:	d003      	beq.n	8012566 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 801255e:	4b06      	ldr	r3, [pc, #24]	@ (8012578 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012564:	e002      	b.n	801256c <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 8012566:	4b04      	ldr	r3, [pc, #16]	@ (8012578 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	689b      	ldr	r3, [r3, #8]
    }
 801256c:	4618      	mov	r0, r3
 801256e:	46bd      	mov	sp, r7
 8012570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012574:	4770      	bx	lr
 8012576:	bf00      	nop
 8012578:	24013b58 	.word	0x24013b58

0801257c <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 801257c:	b480      	push	{r7}
 801257e:	b083      	sub	sp, #12
 8012580:	af00      	add	r7, sp, #0
 8012582:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8012584:	4a07      	ldr	r2, [pc, #28]	@ (80125a4 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	601a      	str	r2, [r3, #0]
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	2200      	movs	r2, #0
 801258e:	605a      	str	r2, [r3, #4]
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	2200      	movs	r2, #0
 8012594:	721a      	strb	r2, [r3, #8]
    {
    }
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	4618      	mov	r0, r3
 801259a:	370c      	adds	r7, #12
 801259c:	46bd      	mov	sp, r7
 801259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a2:	4770      	bx	lr
 80125a4:	0802c0a8 	.word	0x0802c0a8

080125a8 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 80125a8:	b480      	push	{r7}
 80125aa:	b083      	sub	sp, #12
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	6078      	str	r0, [r7, #4]
    {
 80125b0:	4a04      	ldr	r2, [pc, #16]	@ (80125c4 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	601a      	str	r2, [r3, #0]
    }
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	4618      	mov	r0, r3
 80125ba:	370c      	adds	r7, #12
 80125bc:	46bd      	mov	sp, r7
 80125be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c2:	4770      	bx	lr
 80125c4:	0802c0a8 	.word	0x0802c0a8

080125c8 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 80125c8:	b580      	push	{r7, lr}
 80125ca:	b082      	sub	sp, #8
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	6078      	str	r0, [r7, #4]
    }
 80125d0:	6878      	ldr	r0, [r7, #4]
 80125d2:	f7ff ffe9 	bl	80125a8 <_ZN8touchgfx10TransitionD1Ev>
 80125d6:	210c      	movs	r1, #12
 80125d8:	6878      	ldr	r0, [r7, #4]
 80125da:	f017 f9e0 	bl	802999e <_ZdlPvj>
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	4618      	mov	r0, r3
 80125e2:	3708      	adds	r7, #8
 80125e4:	46bd      	mov	sp, r7
 80125e6:	bd80      	pop	{r7, pc}

080125e8 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 80125e8:	b480      	push	{r7}
 80125ea:	b083      	sub	sp, #12
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	6078      	str	r0, [r7, #4]
    {
    }
 80125f0:	bf00      	nop
 80125f2:	370c      	adds	r7, #12
 80125f4:	46bd      	mov	sp, r7
 80125f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125fa:	4770      	bx	lr

080125fc <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 80125fc:	b480      	push	{r7}
 80125fe:	b083      	sub	sp, #12
 8012600:	af00      	add	r7, sp, #0
 8012602:	6078      	str	r0, [r7, #4]
    {
    }
 8012604:	bf00      	nop
 8012606:	370c      	adds	r7, #12
 8012608:	46bd      	mov	sp, r7
 801260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801260e:	4770      	bx	lr

08012610 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8012610:	b480      	push	{r7}
 8012612:	b083      	sub	sp, #12
 8012614:	af00      	add	r7, sp, #0
 8012616:	6078      	str	r0, [r7, #4]
    {
    }
 8012618:	bf00      	nop
 801261a:	370c      	adds	r7, #12
 801261c:	46bd      	mov	sp, r7
 801261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012622:	4770      	bx	lr

08012624 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8012624:	b580      	push	{r7, lr}
 8012626:	b082      	sub	sp, #8
 8012628:	af00      	add	r7, sp, #0
 801262a:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 801262c:	f009 fbae 	bl	801bd8c <_ZN8touchgfx11Application11getInstanceEv>
 8012630:	4603      	mov	r3, r0
 8012632:	681a      	ldr	r2, [r3, #0]
 8012634:	323c      	adds	r2, #60	@ 0x3c
 8012636:	6812      	ldr	r2, [r2, #0]
 8012638:	4618      	mov	r0, r3
 801263a:	4790      	blx	r2
    }
 801263c:	bf00      	nop
 801263e:	3708      	adds	r7, #8
 8012640:	46bd      	mov	sp, r7
 8012642:	bd80      	pop	{r7, pc}

08012644 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8012644:	b480      	push	{r7}
 8012646:	b083      	sub	sp, #12
 8012648:	af00      	add	r7, sp, #0
 801264a:	6078      	str	r0, [r7, #4]
 801264c:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	683a      	ldr	r2, [r7, #0]
 8012652:	605a      	str	r2, [r3, #4]
    }
 8012654:	bf00      	nop
 8012656:	370c      	adds	r7, #12
 8012658:	46bd      	mov	sp, r7
 801265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801265e:	4770      	bx	lr

08012660 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8012660:	b580      	push	{r7, lr}
 8012662:	b082      	sub	sp, #8
 8012664:	af00      	add	r7, sp, #0
 8012666:	6078      	str	r0, [r7, #4]
 8012668:	4a05      	ldr	r2, [pc, #20]	@ (8012680 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	601a      	str	r2, [r3, #0]
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	4618      	mov	r0, r3
 8012672:	f7ff fee5 	bl	8012440 <_ZN8touchgfx15UIEventListenerD1Ev>
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	4618      	mov	r0, r3
 801267a:	3708      	adds	r7, #8
 801267c:	46bd      	mov	sp, r7
 801267e:	bd80      	pop	{r7, pc}
 8012680:	0802ce28 	.word	0x0802ce28

08012684 <_ZN8touchgfx11ApplicationD0Ev>:
 8012684:	b580      	push	{r7, lr}
 8012686:	b082      	sub	sp, #8
 8012688:	af00      	add	r7, sp, #0
 801268a:	6078      	str	r0, [r7, #4]
 801268c:	6878      	ldr	r0, [r7, #4]
 801268e:	f7ff ffe7 	bl	8012660 <_ZN8touchgfx11ApplicationD1Ev>
 8012692:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 8012696:	6878      	ldr	r0, [r7, #4]
 8012698:	f017 f981 	bl	802999e <_ZdlPvj>
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	4618      	mov	r0, r3
 80126a0:	3708      	adds	r7, #8
 80126a2:	46bd      	mov	sp, r7
 80126a4:	bd80      	pop	{r7, pc}
	...

080126a8 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 80126a8:	b580      	push	{r7, lr}
 80126aa:	b082      	sub	sp, #8
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	4618      	mov	r0, r3
 80126b4:	f009 fc30 	bl	801bf18 <_ZN8touchgfx11ApplicationC1Ev>
 80126b8:	4a09      	ldr	r2, [pc, #36]	@ (80126e0 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	601a      	str	r2, [r3, #0]
        : currentPresenter(0),
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	2200      	movs	r2, #0
 80126c2:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
          pendingScreenTransitionCallback(0)
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	2200      	movs	r2, #0
 80126ca:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    {
        instance = this;
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	4a04      	ldr	r2, [pc, #16]	@ (80126e4 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 80126d2:	6013      	str	r3, [r2, #0]
    }
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	4618      	mov	r0, r3
 80126d8:	3708      	adds	r7, #8
 80126da:	46bd      	mov	sp, r7
 80126dc:	bd80      	pop	{r7, pc}
 80126de:	bf00      	nop
 80126e0:	0802c054 	.word	0x0802c054
 80126e4:	24013bac 	.word	0x24013bac

080126e8 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 80126e8:	b580      	push	{r7, lr}
 80126ea:	b082      	sub	sp, #8
 80126ec:	af00      	add	r7, sp, #0
 80126ee:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 80126f0:	6878      	ldr	r0, [r7, #4]
 80126f2:	f000 f804 	bl	80126fe <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 80126f6:	bf00      	nop
 80126f8:	3708      	adds	r7, #8
 80126fa:	46bd      	mov	sp, r7
 80126fc:	bd80      	pop	{r7, pc}

080126fe <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 80126fe:	b580      	push	{r7, lr}
 8012700:	b082      	sub	sp, #8
 8012702:	af00      	add	r7, sp, #0
 8012704:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 801270c:	2b00      	cmp	r3, #0
 801270e:	d00f      	beq.n	8012730 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	330c      	adds	r3, #12
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	4610      	mov	r0, r2
 8012724:	4798      	blx	r3
 8012726:	4603      	mov	r3, r0
 8012728:	2b00      	cmp	r3, #0
 801272a:	d001      	beq.n	8012730 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 801272c:	2301      	movs	r3, #1
 801272e:	e000      	b.n	8012732 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8012730:	2300      	movs	r3, #0
 8012732:	2b00      	cmp	r3, #0
 8012734:	d00e      	beq.n	8012754 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	3308      	adds	r3, #8
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	4610      	mov	r0, r2
 801274a:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	2200      	movs	r2, #0
 8012750:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        }
    }
 8012754:	bf00      	nop
 8012756:	3708      	adds	r7, #8
 8012758:	46bd      	mov	sp, r7
 801275a:	bd80      	pop	{r7, pc}

0801275c <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 801275c:	b480      	push	{r7}
 801275e:	b083      	sub	sp, #12
 8012760:	af00      	add	r7, sp, #0
 8012762:	6078      	str	r0, [r7, #4]
 8012764:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	683a      	ldr	r2, [r7, #0]
 801276a:	601a      	str	r2, [r3, #0]
    }
 801276c:	bf00      	nop
 801276e:	370c      	adds	r7, #12
 8012770:	46bd      	mov	sp, r7
 8012772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012776:	4770      	bx	lr

08012778 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8012778:	b580      	push	{r7, lr}
 801277a:	b082      	sub	sp, #8
 801277c:	af00      	add	r7, sp, #0
 801277e:	6078      	str	r0, [r7, #4]
 8012780:	4a05      	ldr	r2, [pc, #20]	@ (8012798 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	601a      	str	r2, [r3, #0]
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	4618      	mov	r0, r3
 801278a:	f7ff ff69 	bl	8012660 <_ZN8touchgfx11ApplicationD1Ev>
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	4618      	mov	r0, r3
 8012792:	3708      	adds	r7, #8
 8012794:	46bd      	mov	sp, r7
 8012796:	bd80      	pop	{r7, pc}
 8012798:	0802c054 	.word	0x0802c054

0801279c <_ZN8touchgfx14MVPApplicationD0Ev>:
 801279c:	b580      	push	{r7, lr}
 801279e:	b082      	sub	sp, #8
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	6078      	str	r0, [r7, #4]
 80127a4:	6878      	ldr	r0, [r7, #4]
 80127a6:	f7ff ffe7 	bl	8012778 <_ZN8touchgfx14MVPApplicationD1Ev>
 80127aa:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 80127ae:	6878      	ldr	r0, [r7, #4]
 80127b0:	f017 f8f5 	bl	802999e <_ZdlPvj>
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	4618      	mov	r0, r3
 80127b8:	3708      	adds	r7, #8
 80127ba:	46bd      	mov	sp, r7
 80127bc:	bd80      	pop	{r7, pc}
	...

080127c0 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80127c0:	b580      	push	{r7, lr}
 80127c2:	b082      	sub	sp, #8
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	6078      	str	r0, [r7, #4]
 80127c8:	4a08      	ldr	r2, [pc, #32]	@ (80127ec <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	601a      	str	r2, [r3, #0]
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80127d4:	4618      	mov	r0, r3
 80127d6:	f000 fc63 	bl	80130a0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	4618      	mov	r0, r3
 80127de:	f7ff ffcb 	bl	8012778 <_ZN8touchgfx14MVPApplicationD1Ev>
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	4618      	mov	r0, r3
 80127e6:	3708      	adds	r7, #8
 80127e8:	46bd      	mov	sp, r7
 80127ea:	bd80      	pop	{r7, pc}
 80127ec:	0802bfe8 	.word	0x0802bfe8

080127f0 <_ZN23FrontendApplicationBaseD0Ev>:
 80127f0:	b580      	push	{r7, lr}
 80127f2:	b082      	sub	sp, #8
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	6078      	str	r0, [r7, #4]
 80127f8:	6878      	ldr	r0, [r7, #4]
 80127fa:	f7ff ffe1 	bl	80127c0 <_ZN23FrontendApplicationBaseD1Ev>
 80127fe:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8012802:	6878      	ldr	r0, [r7, #4]
 8012804:	f017 f8cb 	bl	802999e <_ZdlPvj>
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	4618      	mov	r0, r3
 801280c:	3708      	adds	r7, #8
 801280e:	46bd      	mov	sp, r7
 8012810:	bd80      	pop	{r7, pc}

08012812 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 8012812:	b580      	push	{r7, lr}
 8012814:	b082      	sub	sp, #8
 8012816:	af00      	add	r7, sp, #0
 8012818:	6078      	str	r0, [r7, #4]
    {
        gotoscreenScreenNoTransition();
 801281a:	6878      	ldr	r0, [r7, #4]
 801281c:	f000 f886 	bl	801292c <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 8012820:	bf00      	nop
 8012822:	3708      	adds	r7, #8
 8012824:	46bd      	mov	sp, r7
 8012826:	bd80      	pop	{r7, pc}

08012828 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8012828:	b480      	push	{r7}
 801282a:	b083      	sub	sp, #12
 801282c:	af00      	add	r7, sp, #0
 801282e:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	2201      	movs	r2, #1
 8012834:	721a      	strb	r2, [r3, #8]
    }
 8012836:	bf00      	nop
 8012838:	370c      	adds	r7, #12
 801283a:	46bd      	mov	sp, r7
 801283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012840:	4770      	bx	lr

08012842 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 8012842:	b480      	push	{r7}
 8012844:	b083      	sub	sp, #12
 8012846:	af00      	add	r7, sp, #0
 8012848:	6078      	str	r0, [r7, #4]
 801284a:	6039      	str	r1, [r7, #0]
    {
        model = m;
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	683a      	ldr	r2, [r7, #0]
 8012850:	605a      	str	r2, [r3, #4]
    }
 8012852:	bf00      	nop
 8012854:	370c      	adds	r7, #12
 8012856:	46bd      	mov	sp, r7
 8012858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801285c:	4770      	bx	lr
	...

08012860 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8012860:	b580      	push	{r7, lr}
 8012862:	b084      	sub	sp, #16
 8012864:	af00      	add	r7, sp, #0
 8012866:	60f8      	str	r0, [r7, #12]
 8012868:	60b9      	str	r1, [r7, #8]
 801286a:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	4618      	mov	r0, r3
 8012870:	f7ff ff1a 	bl	80126a8 <_ZN8touchgfx14MVPApplicationC1Ev>
 8012874:	4a18      	ldr	r2, [pc, #96]	@ (80128d8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x78>)
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8012880:	4618      	mov	r0, r3
 8012882:	f000 f8ef 	bl	8012a64 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	687a      	ldr	r2, [r7, #4]
 801288a:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
      model(m)
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	68ba      	ldr	r2, [r7, #8]
 8012892:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8012896:	f7ff fe49 	bl	801252c <_ZN8touchgfx3HAL11getInstanceEv>
 801289a:	4603      	mov	r3, r0
 801289c:	681a      	ldr	r2, [r3, #0]
 801289e:	3208      	adds	r2, #8
 80128a0:	6812      	ldr	r2, [r2, #0]
 80128a2:	2100      	movs	r1, #0
 80128a4:	4618      	mov	r0, r3
 80128a6:	4790      	blx	r2
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 80128a8:	f7ff fe4c 	bl	8012544 <_ZN8touchgfx3HAL3lcdEv>
 80128ac:	4603      	mov	r3, r0
 80128ae:	4618      	mov	r0, r3
 80128b0:	f011 fa09 	bl	8023cc6 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 80128b4:	f7ff fe46 	bl	8012544 <_ZN8touchgfx3HAL3lcdEv>
 80128b8:	4603      	mov	r3, r0
 80128ba:	4618      	mov	r0, r3
 80128bc:	f011 fa7a 	bl	8023db4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 80128c0:	f7ff fe40 	bl	8012544 <_ZN8touchgfx3HAL3lcdEv>
 80128c4:	4603      	mov	r3, r0
 80128c6:	4618      	mov	r0, r3
 80128c8:	f011 fa80 	bl	8023dcc <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>
}
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	4618      	mov	r0, r3
 80128d0:	3710      	adds	r7, #16
 80128d2:	46bd      	mov	sp, r7
 80128d4:	bd80      	pop	{r7, pc}
 80128d6:	bf00      	nop
 80128d8:	0802bfe8 	.word	0x0802bfe8

080128dc <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 80128dc:	b480      	push	{r7}
 80128de:	b083      	sub	sp, #12
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	6078      	str	r0, [r7, #4]
 80128e4:	6039      	str	r1, [r7, #0]
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	4618      	mov	r0, r3
 80128ea:	370c      	adds	r7, #12
 80128ec:	46bd      	mov	sp, r7
 80128ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f2:	4770      	bx	lr

080128f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80128f4:	b580      	push	{r7, lr}
 80128f6:	b082      	sub	sp, #8
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	6078      	str	r0, [r7, #4]
 80128fc:	6039      	str	r1, [r7, #0]
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	683a      	ldr	r2, [r7, #0]
 8012902:	4611      	mov	r1, r2
 8012904:	4618      	mov	r0, r3
 8012906:	f7ff ffe9 	bl	80128dc <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 801290a:	683b      	ldr	r3, [r7, #0]
 801290c:	685a      	ldr	r2, [r3, #4]
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	605a      	str	r2, [r3, #4]
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	683a      	ldr	r2, [r7, #0]
 8012916:	3308      	adds	r3, #8
 8012918:	3208      	adds	r2, #8
 801291a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801291e:	e883 0003 	stmia.w	r3, {r0, r1}
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	4618      	mov	r0, r3
 8012926:	3708      	adds	r7, #8
 8012928:	46bd      	mov	sp, r7
 801292a:	bd80      	pop	{r7, pc}

0801292c <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>:
 */

// screen

void FrontendApplicationBase::gotoscreenScreenNoTransition()
{
 801292c:	b590      	push	{r4, r7, lr}
 801292e:	b089      	sub	sp, #36	@ 0x24
 8012930:	af00      	add	r7, sp, #0
 8012932:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoscreenScreenNoTransitionImpl);
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	f503 74a2 	add.w	r4, r3, #324	@ 0x144
 801293a:	4b10      	ldr	r3, [pc, #64]	@ (801297c <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv+0x50>)
 801293c:	61bb      	str	r3, [r7, #24]
 801293e:	2300      	movs	r3, #0
 8012940:	61fb      	str	r3, [r7, #28]
 8012942:	f107 0008 	add.w	r0, r7, #8
 8012946:	f107 0318 	add.w	r3, r7, #24
 801294a:	cb0c      	ldmia	r3, {r2, r3}
 801294c:	6879      	ldr	r1, [r7, #4]
 801294e:	f000 f8a5 	bl	8012a9c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8012952:	f107 0308 	add.w	r3, r7, #8
 8012956:	4619      	mov	r1, r3
 8012958:	4620      	mov	r0, r4
 801295a:	f7ff ffcb 	bl	80128f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 801295e:	f107 0308 	add.w	r3, r7, #8
 8012962:	4618      	mov	r0, r3
 8012964:	f000 fb9c 	bl	80130a0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
}
 8012974:	bf00      	nop
 8012976:	3724      	adds	r7, #36	@ 0x24
 8012978:	46bd      	mov	sp, r7
 801297a:	bd90      	pop	{r4, r7, pc}
 801297c:	08012981 	.word	0x08012981

08012980 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoscreenScreenNoTransitionImpl()
{
 8012980:	b580      	push	{r7, lr}
 8012982:	b084      	sub	sp, #16
 8012984:	af02      	add	r7, sp, #8
 8012986:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	f503 719e 	add.w	r1, r3, #316	@ 0x13c
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8012994:	461a      	mov	r2, r3
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 801299c:	9300      	str	r3, [sp, #0]
 801299e:	4b04      	ldr	r3, [pc, #16]	@ (80129b0 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x30>)
 80129a0:	4804      	ldr	r0, [pc, #16]	@ (80129b4 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x34>)
 80129a2:	f000 f8ad 	bl	8012b00 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80129a6:	bf00      	nop
 80129a8:	3708      	adds	r7, #8
 80129aa:	46bd      	mov	sp, r7
 80129ac:	bd80      	pop	{r7, pc}
 80129ae:	bf00      	nop
 80129b0:	24013ba0 	.word	0x24013ba0
 80129b4:	24013b9c 	.word	0x24013b9c

080129b8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 80129b8:	b590      	push	{r4, r7, lr}
 80129ba:	b089      	sub	sp, #36	@ 0x24
 80129bc:	af00      	add	r7, sp, #0
 80129be:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	f503 74a2 	add.w	r4, r3, #324	@ 0x144
 80129c6:	4b10      	ldr	r3, [pc, #64]	@ (8012a08 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 80129c8:	61bb      	str	r3, [r7, #24]
 80129ca:	2300      	movs	r3, #0
 80129cc:	61fb      	str	r3, [r7, #28]
 80129ce:	f107 0008 	add.w	r0, r7, #8
 80129d2:	f107 0318 	add.w	r3, r7, #24
 80129d6:	cb0c      	ldmia	r3, {r2, r3}
 80129d8:	6879      	ldr	r1, [r7, #4]
 80129da:	f000 f85f 	bl	8012a9c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80129de:	f107 0308 	add.w	r3, r7, #8
 80129e2:	4619      	mov	r1, r3
 80129e4:	4620      	mov	r0, r4
 80129e6:	f7ff ff85 	bl	80128f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80129ea:	f107 0308 	add.w	r3, r7, #8
 80129ee:	4618      	mov	r0, r3
 80129f0:	f000 fb56 	bl	80130a0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
}
 8012a00:	bf00      	nop
 8012a02:	3724      	adds	r7, #36	@ 0x24
 8012a04:	46bd      	mov	sp, r7
 8012a06:	bd90      	pop	{r4, r7, pc}
 8012a08:	08012a0d 	.word	0x08012a0d

08012a0c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	b084      	sub	sp, #16
 8012a10:	af02      	add	r7, sp, #8
 8012a12:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	f503 719e 	add.w	r1, r3, #316	@ 0x13c
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8012a20:	461a      	mov	r2, r3
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8012a28:	9300      	str	r3, [sp, #0]
 8012a2a:	4b04      	ldr	r3, [pc, #16]	@ (8012a3c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 8012a2c:	4804      	ldr	r0, [pc, #16]	@ (8012a40 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 8012a2e:	f000 f981 	bl	8012d34 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8012a32:	bf00      	nop
 8012a34:	3708      	adds	r7, #8
 8012a36:	46bd      	mov	sp, r7
 8012a38:	bd80      	pop	{r7, pc}
 8012a3a:	bf00      	nop
 8012a3c:	24013ba0 	.word	0x24013ba0
 8012a40:	24013b9c 	.word	0x24013b9c

08012a44 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8012a44:	b480      	push	{r7}
 8012a46:	b083      	sub	sp, #12
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	6078      	str	r0, [r7, #4]
 8012a4c:	4a04      	ldr	r2, [pc, #16]	@ (8012a60 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	601a      	str	r2, [r3, #0]
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	4618      	mov	r0, r3
 8012a56:	370c      	adds	r7, #12
 8012a58:	46bd      	mov	sp, r7
 8012a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a5e:	4770      	bx	lr
 8012a60:	0802c0cc 	.word	0x0802c0cc

08012a64 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 8012a64:	b580      	push	{r7, lr}
 8012a66:	b082      	sub	sp, #8
 8012a68:	af00      	add	r7, sp, #0
 8012a6a:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	4618      	mov	r0, r3
 8012a70:	f7ff ffe8 	bl	8012a44 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8012a74:	4a08      	ldr	r2, [pc, #32]	@ (8012a98 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	601a      	str	r2, [r3, #0]
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	2200      	movs	r2, #0
 8012a7e:	605a      	str	r2, [r3, #4]
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	2200      	movs	r2, #0
 8012a84:	609a      	str	r2, [r3, #8]
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	2200      	movs	r2, #0
 8012a8a:	60da      	str	r2, [r3, #12]
    {
    }
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	4618      	mov	r0, r3
 8012a90:	3708      	adds	r7, #8
 8012a92:	46bd      	mov	sp, r7
 8012a94:	bd80      	pop	{r7, pc}
 8012a96:	bf00      	nop
 8012a98:	0802c03c 	.word	0x0802c03c

08012a9c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 8012a9c:	b580      	push	{r7, lr}
 8012a9e:	b084      	sub	sp, #16
 8012aa0:	af00      	add	r7, sp, #0
 8012aa2:	60f8      	str	r0, [r7, #12]
 8012aa4:	60b9      	str	r1, [r7, #8]
 8012aa6:	4639      	mov	r1, r7
 8012aa8:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	4618      	mov	r0, r3
 8012ab0:	f7ff ffc8 	bl	8012a44 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8012ab4:	4a08      	ldr	r2, [pc, #32]	@ (8012ad8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	601a      	str	r2, [r3, #0]
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	68ba      	ldr	r2, [r7, #8]
 8012abe:	605a      	str	r2, [r3, #4]
 8012ac0:	68fb      	ldr	r3, [r7, #12]
 8012ac2:	3308      	adds	r3, #8
 8012ac4:	463a      	mov	r2, r7
 8012ac6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012aca:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	3710      	adds	r7, #16
 8012ad4:	46bd      	mov	sp, r7
 8012ad6:	bd80      	pop	{r7, pc}
 8012ad8:	0802c03c 	.word	0x0802c03c

08012adc <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8012adc:	b580      	push	{r7, lr}
 8012ade:	b082      	sub	sp, #8
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	6078      	str	r0, [r7, #4]
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	4618      	mov	r0, r3
 8012ae8:	f7ff fd48 	bl	801257c <_ZN8touchgfx10TransitionC1Ev>
 8012aec:	4a03      	ldr	r2, [pc, #12]	@ (8012afc <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	601a      	str	r2, [r3, #0]
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	4618      	mov	r0, r3
 8012af6:	3708      	adds	r7, #8
 8012af8:	46bd      	mov	sp, r7
 8012afa:	bd80      	pop	{r7, pc}
 8012afc:	0802bfc4 	.word	0x0802bfc4

08012b00 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8012b00:	b590      	push	{r4, r7, lr}
 8012b02:	b08f      	sub	sp, #60	@ 0x3c
 8012b04:	af00      	add	r7, sp, #0
 8012b06:	60f8      	str	r0, [r7, #12]
 8012b08:	60b9      	str	r1, [r7, #8]
 8012b0a:	607a      	str	r2, [r7, #4]
 8012b0c:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	689a      	ldr	r2, [r3, #8]
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	689b      	ldr	r3, [r3, #8]
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	3320      	adds	r3, #32
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	4610      	mov	r0, r2
 8012b1e:	4798      	blx	r3
 8012b20:	4603      	mov	r3, r0
 8012b22:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8012b26:	d205      	bcs.n	8012b34 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8012b28:	4b7d      	ldr	r3, [pc, #500]	@ (8012d20 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8012b2a:	4a7e      	ldr	r2, [pc, #504]	@ (8012d24 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8012b2c:	21a3      	movs	r1, #163	@ 0xa3
 8012b2e:	487e      	ldr	r0, [pc, #504]	@ (8012d28 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8012b30:	f017 faae 	bl	802a090 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	685a      	ldr	r2, [r3, #4]
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	685b      	ldr	r3, [r3, #4]
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	3320      	adds	r3, #32
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	4610      	mov	r0, r2
 8012b44:	4798      	blx	r3
 8012b46:	4603      	mov	r3, r0
 8012b48:	2b0f      	cmp	r3, #15
 8012b4a:	d805      	bhi.n	8012b58 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 8012b4c:	4b77      	ldr	r3, [pc, #476]	@ (8012d2c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8012b4e:	4a75      	ldr	r2, [pc, #468]	@ (8012d24 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8012b50:	21a4      	movs	r1, #164	@ 0xa4
 8012b52:	4875      	ldr	r0, [pc, #468]	@ (8012d28 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8012b54:	f017 fa9c 	bl	802a090 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	68da      	ldr	r2, [r3, #12]
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	68db      	ldr	r3, [r3, #12]
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	3320      	adds	r3, #32
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	4610      	mov	r0, r2
 8012b68:	4798      	blx	r3
 8012b6a:	4603      	mov	r3, r0
 8012b6c:	2b0b      	cmp	r3, #11
 8012b6e:	d805      	bhi.n	8012b7c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
 8012b70:	4b6f      	ldr	r3, [pc, #444]	@ (8012d30 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8012b72:	4a6c      	ldr	r2, [pc, #432]	@ (8012d24 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8012b74:	21a5      	movs	r1, #165	@ 0xa5
 8012b76:	486c      	ldr	r0, [pc, #432]	@ (8012d28 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8012b78:	f017 fa8a 	bl	802a090 <__assert_func>
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012b80:	68bb      	ldr	r3, [r7, #8]
 8012b82:	627b      	str	r3, [r7, #36]	@ 0x24
 8012b84:	683b      	ldr	r3, [r7, #0]
 8012b86:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8012b88:	f009 f900 	bl	801bd8c <_ZN8touchgfx11Application11getInstanceEv>
 8012b8c:	4603      	mov	r3, r0
 8012b8e:	4618      	mov	r0, r3
 8012b90:	f7ff fc9e 	bl	80124d0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8012b94:	6a3b      	ldr	r3, [r7, #32]
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d008      	beq.n	8012bae <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xae>
        (*currentTrans)->tearDown();
 8012b9c:	6a3b      	ldr	r3, [r7, #32]
 8012b9e:	681a      	ldr	r2, [r3, #0]
 8012ba0:	6a3b      	ldr	r3, [r7, #32]
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	330c      	adds	r3, #12
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	4610      	mov	r0, r2
 8012bac:	4798      	blx	r3
    if (*currentTrans)
 8012bae:	6a3b      	ldr	r3, [r7, #32]
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d007      	beq.n	8012bc6 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc6>
        (*currentTrans)->~Transition();
 8012bb6:	6a3b      	ldr	r3, [r7, #32]
 8012bb8:	681a      	ldr	r2, [r3, #0]
 8012bba:	6a3b      	ldr	r3, [r7, #32]
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	4610      	mov	r0, r2
 8012bc4:	4798      	blx	r3
    if (*currentScreen)
 8012bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d008      	beq.n	8012be0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
        (*currentScreen)->tearDownScreen();
 8012bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bd0:	681a      	ldr	r2, [r3, #0]
 8012bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	3314      	adds	r3, #20
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	4610      	mov	r0, r2
 8012bde:	4798      	blx	r3
    if (*currentPresenter)
 8012be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d008      	beq.n	8012bfa <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfa>
        (*currentPresenter)->deactivate();
 8012be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bea:	681a      	ldr	r2, [r3, #0]
 8012bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	3304      	adds	r3, #4
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	4610      	mov	r0, r2
 8012bf8:	4798      	blx	r3
    if (*currentScreen)
 8012bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d007      	beq.n	8012c12 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x112>
        (*currentScreen)->~Screen();
 8012c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c04:	681a      	ldr	r2, [r3, #0]
 8012c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	4610      	mov	r0, r2
 8012c10:	4798      	blx	r3
    if (*currentPresenter)
 8012c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d008      	beq.n	8012c2c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
        (*currentPresenter)->~Presenter();
 8012c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c1c:	681a      	ldr	r2, [r3, #0]
 8012c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	3308      	adds	r3, #8
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	4610      	mov	r0, r2
 8012c2a:	4798      	blx	r3
}
 8012c2c:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	68db      	ldr	r3, [r3, #12]
 8012c32:	2100      	movs	r1, #0
 8012c34:	4618      	mov	r0, r3
 8012c36:	f000 f995 	bl	8012f64 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8012c3a:	4603      	mov	r3, r0
 8012c3c:	4619      	mov	r1, r3
 8012c3e:	200c      	movs	r0, #12
 8012c40:	f7ff fbb1 	bl	80123a6 <_ZnwjPv>
 8012c44:	4604      	mov	r4, r0
 8012c46:	4620      	mov	r0, r4
 8012c48:	f7ff ff48 	bl	8012adc <_ZN8touchgfx12NoTransitionC1Ev>
 8012c4c:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	689b      	ldr	r3, [r3, #8]
 8012c52:	2100      	movs	r1, #0
 8012c54:	4618      	mov	r0, r3
 8012c56:	f000 f998 	bl	8012f8a <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 8012c5a:	4603      	mov	r3, r0
 8012c5c:	4619      	mov	r1, r3
 8012c5e:	f44f 709a 	mov.w	r0, #308	@ 0x134
 8012c62:	f7ff fba0 	bl	80123a6 <_ZnwjPv>
 8012c66:	4604      	mov	r4, r0
 8012c68:	4620      	mov	r0, r4
 8012c6a:	f001 fea3 	bl	80149b4 <_ZN10screenViewC1Ev>
 8012c6e:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	685b      	ldr	r3, [r3, #4]
 8012c74:	2100      	movs	r1, #0
 8012c76:	4618      	mov	r0, r3
 8012c78:	f000 f99a 	bl	8012fb0 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 8012c7c:	4603      	mov	r3, r0
 8012c7e:	4619      	mov	r1, r3
 8012c80:	2010      	movs	r0, #16
 8012c82:	f7ff fb90 	bl	80123a6 <_ZnwjPv>
 8012c86:	4604      	mov	r4, r0
 8012c88:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8012c8a:	4620      	mov	r0, r4
 8012c8c:	f001 fe3a 	bl	8014904 <_ZN15screenPresenterC1ER10screenView>
 8012c90:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 8012c92:	683b      	ldr	r3, [r7, #0]
 8012c94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012c96:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8012c98:	68bb      	ldr	r3, [r7, #8]
 8012c9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012c9c:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012ca2:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8012ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d002      	beq.n	8012cb0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 8012caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cac:	3304      	adds	r3, #4
 8012cae:	e000      	b.n	8012cb2 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 8012cb0:	2300      	movs	r3, #0
 8012cb2:	4619      	mov	r1, r3
 8012cb4:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8012cb6:	f7ff fd51 	bl	801275c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8012cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cbc:	3304      	adds	r3, #4
 8012cbe:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8012cc0:	4618      	mov	r0, r3
 8012cc2:	f7ff fdbe 	bl	8012842 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8012cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cc8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012cca:	4618      	mov	r0, r3
 8012ccc:	f000 f983 	bl	8012fd6 <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 8012cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cd2:	61fb      	str	r3, [r7, #28]
 8012cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cd6:	61bb      	str	r3, [r7, #24]
 8012cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012cda:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8012cdc:	69fb      	ldr	r3, [r7, #28]
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	330c      	adds	r3, #12
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	69f8      	ldr	r0, [r7, #28]
 8012ce6:	4798      	blx	r3
    newPresenter->activate();
 8012ce8:	69bb      	ldr	r3, [r7, #24]
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	69b8      	ldr	r0, [r7, #24]
 8012cf0:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8012cf2:	6979      	ldr	r1, [r7, #20]
 8012cf4:	69f8      	ldr	r0, [r7, #28]
 8012cf6:	f00b f829 	bl	801dd4c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8012cfa:	697b      	ldr	r3, [r7, #20]
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	3310      	adds	r3, #16
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	6978      	ldr	r0, [r7, #20]
 8012d04:	4798      	blx	r3
    newTransition->invalidate();
 8012d06:	697b      	ldr	r3, [r7, #20]
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	3314      	adds	r3, #20
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	6978      	ldr	r0, [r7, #20]
 8012d10:	4798      	blx	r3
}
 8012d12:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8012d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8012d16:	4618      	mov	r0, r3
 8012d18:	373c      	adds	r7, #60	@ 0x3c
 8012d1a:	46bd      	mov	sp, r7
 8012d1c:	bd90      	pop	{r4, r7, pc}
 8012d1e:	bf00      	nop
 8012d20:	0802b1d8 	.word	0x0802b1d8
 8012d24:	0802b268 	.word	0x0802b268
 8012d28:	0802b338 	.word	0x0802b338
 8012d2c:	0802b37c 	.word	0x0802b37c
 8012d30:	0802b420 	.word	0x0802b420

08012d34 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8012d34:	b590      	push	{r4, r7, lr}
 8012d36:	b08f      	sub	sp, #60	@ 0x3c
 8012d38:	af00      	add	r7, sp, #0
 8012d3a:	60f8      	str	r0, [r7, #12]
 8012d3c:	60b9      	str	r1, [r7, #8]
 8012d3e:	607a      	str	r2, [r7, #4]
 8012d40:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	689a      	ldr	r2, [r3, #8]
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	689b      	ldr	r3, [r3, #8]
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	3320      	adds	r3, #32
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	4610      	mov	r0, r2
 8012d52:	4798      	blx	r3
 8012d54:	4603      	mov	r3, r0
 8012d56:	2bdb      	cmp	r3, #219	@ 0xdb
 8012d58:	d805      	bhi.n	8012d66 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 8012d5a:	4b7d      	ldr	r3, [pc, #500]	@ (8012f50 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x21c>)
 8012d5c:	4a7d      	ldr	r2, [pc, #500]	@ (8012f54 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8012d5e:	21a3      	movs	r1, #163	@ 0xa3
 8012d60:	487d      	ldr	r0, [pc, #500]	@ (8012f58 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8012d62:	f017 f995 	bl	802a090 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	685a      	ldr	r2, [r3, #4]
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	685b      	ldr	r3, [r3, #4]
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	3320      	adds	r3, #32
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	4610      	mov	r0, r2
 8012d76:	4798      	blx	r3
 8012d78:	4603      	mov	r3, r0
 8012d7a:	2b0f      	cmp	r3, #15
 8012d7c:	d805      	bhi.n	8012d8a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x56>
 8012d7e:	4b77      	ldr	r3, [pc, #476]	@ (8012f5c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8012d80:	4a74      	ldr	r2, [pc, #464]	@ (8012f54 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8012d82:	21a4      	movs	r1, #164	@ 0xa4
 8012d84:	4874      	ldr	r0, [pc, #464]	@ (8012f58 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8012d86:	f017 f983 	bl	802a090 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	68da      	ldr	r2, [r3, #12]
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	68db      	ldr	r3, [r3, #12]
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	3320      	adds	r3, #32
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	4610      	mov	r0, r2
 8012d9a:	4798      	blx	r3
 8012d9c:	4603      	mov	r3, r0
 8012d9e:	2b0b      	cmp	r3, #11
 8012da0:	d805      	bhi.n	8012dae <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7a>
 8012da2:	4b6f      	ldr	r3, [pc, #444]	@ (8012f60 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8012da4:	4a6b      	ldr	r2, [pc, #428]	@ (8012f54 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8012da6:	21a5      	movs	r1, #165	@ 0xa5
 8012da8:	486b      	ldr	r0, [pc, #428]	@ (8012f58 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8012daa:	f017 f971 	bl	802a090 <__assert_func>
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012db2:	68bb      	ldr	r3, [r7, #8]
 8012db4:	627b      	str	r3, [r7, #36]	@ 0x24
 8012db6:	683b      	ldr	r3, [r7, #0]
 8012db8:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8012dba:	f008 ffe7 	bl	801bd8c <_ZN8touchgfx11Application11getInstanceEv>
 8012dbe:	4603      	mov	r3, r0
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	f7ff fb85 	bl	80124d0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8012dc6:	6a3b      	ldr	r3, [r7, #32]
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d008      	beq.n	8012de0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xac>
        (*currentTrans)->tearDown();
 8012dce:	6a3b      	ldr	r3, [r7, #32]
 8012dd0:	681a      	ldr	r2, [r3, #0]
 8012dd2:	6a3b      	ldr	r3, [r7, #32]
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	330c      	adds	r3, #12
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	4610      	mov	r0, r2
 8012dde:	4798      	blx	r3
    if (*currentTrans)
 8012de0:	6a3b      	ldr	r3, [r7, #32]
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d007      	beq.n	8012df8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc4>
        (*currentTrans)->~Transition();
 8012de8:	6a3b      	ldr	r3, [r7, #32]
 8012dea:	681a      	ldr	r2, [r3, #0]
 8012dec:	6a3b      	ldr	r3, [r7, #32]
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	4610      	mov	r0, r2
 8012df6:	4798      	blx	r3
    if (*currentScreen)
 8012df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d008      	beq.n	8012e12 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xde>
        (*currentScreen)->tearDownScreen();
 8012e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e02:	681a      	ldr	r2, [r3, #0]
 8012e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	3314      	adds	r3, #20
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	4610      	mov	r0, r2
 8012e10:	4798      	blx	r3
    if (*currentPresenter)
 8012e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d008      	beq.n	8012e2c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xf8>
        (*currentPresenter)->deactivate();
 8012e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e1c:	681a      	ldr	r2, [r3, #0]
 8012e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	3304      	adds	r3, #4
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	4610      	mov	r0, r2
 8012e2a:	4798      	blx	r3
    if (*currentScreen)
 8012e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d007      	beq.n	8012e44 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x110>
        (*currentScreen)->~Screen();
 8012e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e36:	681a      	ldr	r2, [r3, #0]
 8012e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	4610      	mov	r0, r2
 8012e42:	4798      	blx	r3
    if (*currentPresenter)
 8012e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d008      	beq.n	8012e5e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12a>
        (*currentPresenter)->~Presenter();
 8012e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e4e:	681a      	ldr	r2, [r3, #0]
 8012e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	3308      	adds	r3, #8
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	4610      	mov	r0, r2
 8012e5c:	4798      	blx	r3
}
 8012e5e:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	68db      	ldr	r3, [r3, #12]
 8012e64:	2100      	movs	r1, #0
 8012e66:	4618      	mov	r0, r3
 8012e68:	f000 f87c 	bl	8012f64 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8012e6c:	4603      	mov	r3, r0
 8012e6e:	4619      	mov	r1, r3
 8012e70:	200c      	movs	r0, #12
 8012e72:	f7ff fa98 	bl	80123a6 <_ZnwjPv>
 8012e76:	4604      	mov	r4, r0
 8012e78:	4620      	mov	r0, r4
 8012e7a:	f7ff fe2f 	bl	8012adc <_ZN8touchgfx12NoTransitionC1Ev>
 8012e7e:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	689b      	ldr	r3, [r3, #8]
 8012e84:	2100      	movs	r1, #0
 8012e86:	4618      	mov	r0, r3
 8012e88:	f000 f8b3 	bl	8012ff2 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 8012e8c:	4603      	mov	r3, r0
 8012e8e:	4619      	mov	r1, r3
 8012e90:	20dc      	movs	r0, #220	@ 0xdc
 8012e92:	f7ff fa88 	bl	80123a6 <_ZnwjPv>
 8012e96:	4604      	mov	r4, r0
 8012e98:	4620      	mov	r0, r4
 8012e9a:	f001 fcd5 	bl	8014848 <_ZN11Screen1ViewC1Ev>
 8012e9e:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	685b      	ldr	r3, [r3, #4]
 8012ea4:	2100      	movs	r1, #0
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	f000 f8b6 	bl	8013018 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 8012eac:	4603      	mov	r3, r0
 8012eae:	4619      	mov	r1, r3
 8012eb0:	2010      	movs	r0, #16
 8012eb2:	f7ff fa78 	bl	80123a6 <_ZnwjPv>
 8012eb6:	4604      	mov	r4, r0
 8012eb8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8012eba:	4620      	mov	r0, r4
 8012ebc:	f001 fc6e 	bl	801479c <_ZN16Screen1PresenterC1ER11Screen1View>
 8012ec0:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 8012ec2:	683b      	ldr	r3, [r7, #0]
 8012ec4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012ec6:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8012ec8:	68bb      	ldr	r3, [r7, #8]
 8012eca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012ecc:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012ed2:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8012ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d002      	beq.n	8012ee0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ac>
 8012eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012edc:	3304      	adds	r3, #4
 8012ede:	e000      	b.n	8012ee2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ae>
 8012ee0:	2300      	movs	r3, #0
 8012ee2:	4619      	mov	r1, r3
 8012ee4:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8012ee6:	f7ff fc39 	bl	801275c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8012eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012eec:	3304      	adds	r3, #4
 8012eee:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8012ef0:	4618      	mov	r0, r3
 8012ef2:	f7ff fca6 	bl	8012842 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8012ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ef8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012efa:	4618      	mov	r0, r3
 8012efc:	f000 f89f 	bl	801303e <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 8012f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f02:	61fb      	str	r3, [r7, #28]
 8012f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f06:	61bb      	str	r3, [r7, #24]
 8012f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012f0a:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8012f0c:	69fb      	ldr	r3, [r7, #28]
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	330c      	adds	r3, #12
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	69f8      	ldr	r0, [r7, #28]
 8012f16:	4798      	blx	r3
    newPresenter->activate();
 8012f18:	69bb      	ldr	r3, [r7, #24]
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	69b8      	ldr	r0, [r7, #24]
 8012f20:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8012f22:	6979      	ldr	r1, [r7, #20]
 8012f24:	69f8      	ldr	r0, [r7, #28]
 8012f26:	f00a ff11 	bl	801dd4c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8012f2a:	697b      	ldr	r3, [r7, #20]
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	3310      	adds	r3, #16
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	6978      	ldr	r0, [r7, #20]
 8012f34:	4798      	blx	r3
    newTransition->invalidate();
 8012f36:	697b      	ldr	r3, [r7, #20]
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	3314      	adds	r3, #20
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	6978      	ldr	r0, [r7, #20]
 8012f40:	4798      	blx	r3
}
 8012f42:	bf00      	nop
    return newPresenter;
 8012f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8012f46:	4618      	mov	r0, r3
 8012f48:	373c      	adds	r7, #60	@ 0x3c
 8012f4a:	46bd      	mov	sp, r7
 8012f4c:	bd90      	pop	{r4, r7, pc}
 8012f4e:	bf00      	nop
 8012f50:	0802b1d8 	.word	0x0802b1d8
 8012f54:	0802b4c4 	.word	0x0802b4c4
 8012f58:	0802b338 	.word	0x0802b338
 8012f5c:	0802b37c 	.word	0x0802b37c
 8012f60:	0802b420 	.word	0x0802b420

08012f64 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8012f64:	b580      	push	{r7, lr}
 8012f66:	b082      	sub	sp, #8
 8012f68:	af00      	add	r7, sp, #0
 8012f6a:	6078      	str	r0, [r7, #4]
 8012f6c:	460b      	mov	r3, r1
 8012f6e:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	3324      	adds	r3, #36	@ 0x24
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	887a      	ldrh	r2, [r7, #2]
 8012f7a:	4611      	mov	r1, r2
 8012f7c:	6878      	ldr	r0, [r7, #4]
 8012f7e:	4798      	blx	r3
 8012f80:	4603      	mov	r3, r0
    }
 8012f82:	4618      	mov	r0, r3
 8012f84:	3708      	adds	r7, #8
 8012f86:	46bd      	mov	sp, r7
 8012f88:	bd80      	pop	{r7, pc}

08012f8a <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>:
    T& at(const uint16_t index)
 8012f8a:	b580      	push	{r7, lr}
 8012f8c:	b082      	sub	sp, #8
 8012f8e:	af00      	add	r7, sp, #0
 8012f90:	6078      	str	r0, [r7, #4]
 8012f92:	460b      	mov	r3, r1
 8012f94:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	3324      	adds	r3, #36	@ 0x24
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	887a      	ldrh	r2, [r7, #2]
 8012fa0:	4611      	mov	r1, r2
 8012fa2:	6878      	ldr	r0, [r7, #4]
 8012fa4:	4798      	blx	r3
 8012fa6:	4603      	mov	r3, r0
    }
 8012fa8:	4618      	mov	r0, r3
 8012faa:	3708      	adds	r7, #8
 8012fac:	46bd      	mov	sp, r7
 8012fae:	bd80      	pop	{r7, pc}

08012fb0 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>:
    T& at(const uint16_t index)
 8012fb0:	b580      	push	{r7, lr}
 8012fb2:	b082      	sub	sp, #8
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	6078      	str	r0, [r7, #4]
 8012fb8:	460b      	mov	r3, r1
 8012fba:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	681b      	ldr	r3, [r3, #0]
 8012fc0:	3324      	adds	r3, #36	@ 0x24
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	887a      	ldrh	r2, [r7, #2]
 8012fc6:	4611      	mov	r1, r2
 8012fc8:	6878      	ldr	r0, [r7, #4]
 8012fca:	4798      	blx	r3
 8012fcc:	4603      	mov	r3, r0
    }
 8012fce:	4618      	mov	r0, r3
 8012fd0:	3708      	adds	r7, #8
 8012fd2:	46bd      	mov	sp, r7
 8012fd4:	bd80      	pop	{r7, pc}

08012fd6 <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 8012fd6:	b480      	push	{r7}
 8012fd8:	b083      	sub	sp, #12
 8012fda:	af00      	add	r7, sp, #0
 8012fdc:	6078      	str	r0, [r7, #4]
 8012fde:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	683a      	ldr	r2, [r7, #0]
 8012fe4:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 8012fe6:	bf00      	nop
 8012fe8:	370c      	adds	r7, #12
 8012fea:	46bd      	mov	sp, r7
 8012fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff0:	4770      	bx	lr

08012ff2 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 8012ff2:	b580      	push	{r7, lr}
 8012ff4:	b082      	sub	sp, #8
 8012ff6:	af00      	add	r7, sp, #0
 8012ff8:	6078      	str	r0, [r7, #4]
 8012ffa:	460b      	mov	r3, r1
 8012ffc:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	3324      	adds	r3, #36	@ 0x24
 8013004:	681b      	ldr	r3, [r3, #0]
 8013006:	887a      	ldrh	r2, [r7, #2]
 8013008:	4611      	mov	r1, r2
 801300a:	6878      	ldr	r0, [r7, #4]
 801300c:	4798      	blx	r3
 801300e:	4603      	mov	r3, r0
    }
 8013010:	4618      	mov	r0, r3
 8013012:	3708      	adds	r7, #8
 8013014:	46bd      	mov	sp, r7
 8013016:	bd80      	pop	{r7, pc}

08013018 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 8013018:	b580      	push	{r7, lr}
 801301a:	b082      	sub	sp, #8
 801301c:	af00      	add	r7, sp, #0
 801301e:	6078      	str	r0, [r7, #4]
 8013020:	460b      	mov	r3, r1
 8013022:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	3324      	adds	r3, #36	@ 0x24
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	887a      	ldrh	r2, [r7, #2]
 801302e:	4611      	mov	r1, r2
 8013030:	6878      	ldr	r0, [r7, #4]
 8013032:	4798      	blx	r3
 8013034:	4603      	mov	r3, r0
    }
 8013036:	4618      	mov	r0, r3
 8013038:	3708      	adds	r7, #8
 801303a:	46bd      	mov	sp, r7
 801303c:	bd80      	pop	{r7, pc}

0801303e <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
    void bind(T& newPresenter)
 801303e:	b480      	push	{r7}
 8013040:	b083      	sub	sp, #12
 8013042:	af00      	add	r7, sp, #0
 8013044:	6078      	str	r0, [r7, #4]
 8013046:	6039      	str	r1, [r7, #0]
        presenter = &newPresenter;
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	683a      	ldr	r2, [r7, #0]
 801304c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 801304e:	bf00      	nop
 8013050:	370c      	adds	r7, #12
 8013052:	46bd      	mov	sp, r7
 8013054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013058:	4770      	bx	lr
	...

0801305c <_ZN8touchgfx12NoTransitionD1Ev>:
 801305c:	b580      	push	{r7, lr}
 801305e:	b082      	sub	sp, #8
 8013060:	af00      	add	r7, sp, #0
 8013062:	6078      	str	r0, [r7, #4]
 8013064:	4a05      	ldr	r2, [pc, #20]	@ (801307c <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	601a      	str	r2, [r3, #0]
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	4618      	mov	r0, r3
 801306e:	f7ff fa9b 	bl	80125a8 <_ZN8touchgfx10TransitionD1Ev>
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	4618      	mov	r0, r3
 8013076:	3708      	adds	r7, #8
 8013078:	46bd      	mov	sp, r7
 801307a:	bd80      	pop	{r7, pc}
 801307c:	0802bfc4 	.word	0x0802bfc4

08013080 <_ZN8touchgfx12NoTransitionD0Ev>:
 8013080:	b580      	push	{r7, lr}
 8013082:	b082      	sub	sp, #8
 8013084:	af00      	add	r7, sp, #0
 8013086:	6078      	str	r0, [r7, #4]
 8013088:	6878      	ldr	r0, [r7, #4]
 801308a:	f7ff ffe7 	bl	801305c <_ZN8touchgfx12NoTransitionD1Ev>
 801308e:	210c      	movs	r1, #12
 8013090:	6878      	ldr	r0, [r7, #4]
 8013092:	f016 fc84 	bl	802999e <_ZdlPvj>
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	4618      	mov	r0, r3
 801309a:	3708      	adds	r7, #8
 801309c:	46bd      	mov	sp, r7
 801309e:	bd80      	pop	{r7, pc}

080130a0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80130a0:	b580      	push	{r7, lr}
 80130a2:	b082      	sub	sp, #8
 80130a4:	af00      	add	r7, sp, #0
 80130a6:	6078      	str	r0, [r7, #4]
 80130a8:	4a05      	ldr	r2, [pc, #20]	@ (80130c0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	601a      	str	r2, [r3, #0]
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	4618      	mov	r0, r3
 80130b2:	f7ff fa1b 	bl	80124ec <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	4618      	mov	r0, r3
 80130ba:	3708      	adds	r7, #8
 80130bc:	46bd      	mov	sp, r7
 80130be:	bd80      	pop	{r7, pc}
 80130c0:	0802c03c 	.word	0x0802c03c

080130c4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 80130c4:	b580      	push	{r7, lr}
 80130c6:	b082      	sub	sp, #8
 80130c8:	af00      	add	r7, sp, #0
 80130ca:	6078      	str	r0, [r7, #4]
 80130cc:	6878      	ldr	r0, [r7, #4]
 80130ce:	f7ff ffe7 	bl	80130a0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80130d2:	2110      	movs	r1, #16
 80130d4:	6878      	ldr	r0, [r7, #4]
 80130d6:	f016 fc62 	bl	802999e <_ZdlPvj>
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	4618      	mov	r0, r3
 80130de:	3708      	adds	r7, #8
 80130e0:	46bd      	mov	sp, r7
 80130e2:	bd80      	pop	{r7, pc}

080130e4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80130e4:	b580      	push	{r7, lr}
 80130e6:	b082      	sub	sp, #8
 80130e8:	af00      	add	r7, sp, #0
 80130ea:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	685b      	ldr	r3, [r3, #4]
 80130f0:	687a      	ldr	r2, [r7, #4]
 80130f2:	68d2      	ldr	r2, [r2, #12]
 80130f4:	1052      	asrs	r2, r2, #1
 80130f6:	1899      	adds	r1, r3, r2
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	68db      	ldr	r3, [r3, #12]
 80130fc:	f003 0301 	and.w	r3, r3, #1
 8013100:	2b00      	cmp	r3, #0
 8013102:	d102      	bne.n	801310a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	689b      	ldr	r3, [r3, #8]
 8013108:	e00a      	b.n	8013120 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	685b      	ldr	r3, [r3, #4]
 801310e:	687a      	ldr	r2, [r7, #4]
 8013110:	68d2      	ldr	r2, [r2, #12]
 8013112:	1052      	asrs	r2, r2, #1
 8013114:	4413      	add	r3, r2
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	687a      	ldr	r2, [r7, #4]
 801311a:	6892      	ldr	r2, [r2, #8]
 801311c:	4413      	add	r3, r2
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	4608      	mov	r0, r1
 8013122:	4798      	blx	r3
    }
 8013124:	bf00      	nop
 8013126:	3708      	adds	r7, #8
 8013128:	46bd      	mov	sp, r7
 801312a:	bd80      	pop	{r7, pc}

0801312c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 801312c:	b480      	push	{r7}
 801312e:	b083      	sub	sp, #12
 8013130:	af00      	add	r7, sp, #0
 8013132:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	685b      	ldr	r3, [r3, #4]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d010      	beq.n	801315e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	689b      	ldr	r3, [r3, #8]
 8013140:	2b00      	cmp	r3, #0
 8013142:	d107      	bne.n	8013154 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	68db      	ldr	r3, [r3, #12]
 8013148:	f003 0301 	and.w	r3, r3, #1
 801314c:	2b00      	cmp	r3, #0
 801314e:	d101      	bne.n	8013154 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8013150:	2301      	movs	r3, #1
 8013152:	e000      	b.n	8013156 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8013154:	2300      	movs	r3, #0
 8013156:	2b01      	cmp	r3, #1
 8013158:	d001      	beq.n	801315e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 801315a:	2301      	movs	r3, #1
 801315c:	e000      	b.n	8013160 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 801315e:	2300      	movs	r3, #0
    }
 8013160:	4618      	mov	r0, r3
 8013162:	370c      	adds	r7, #12
 8013164:	46bd      	mov	sp, r7
 8013166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801316a:	4770      	bx	lr

0801316c <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFromRGB
     */
    colortype(uint32_t col)
 801316c:	b480      	push	{r7}
 801316e:	b083      	sub	sp, #12
 8013170:	af00      	add	r7, sp, #0
 8013172:	6078      	str	r0, [r7, #4]
 8013174:	6039      	str	r1, [r7, #0]
        : color(col)
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	683a      	ldr	r2, [r7, #0]
 801317a:	601a      	str	r2, [r3, #0]
    {
    }
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	4618      	mov	r0, r3
 8013180:	370c      	adds	r7, #12
 8013182:	46bd      	mov	sp, r7
 8013184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013188:	4770      	bx	lr

0801318a <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 801318a:	b480      	push	{r7}
 801318c:	b083      	sub	sp, #12
 801318e:	af00      	add	r7, sp, #0
 8013190:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	2200      	movs	r2, #0
 8013196:	801a      	strh	r2, [r3, #0]
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	2200      	movs	r2, #0
 801319c:	805a      	strh	r2, [r3, #2]
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	2200      	movs	r2, #0
 80131a2:	809a      	strh	r2, [r3, #4]
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	2200      	movs	r2, #0
 80131a8:	80da      	strh	r2, [r3, #6]
    {
    }
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	4618      	mov	r0, r3
 80131ae:	370c      	adds	r7, #12
 80131b0:	46bd      	mov	sp, r7
 80131b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131b6:	4770      	bx	lr

080131b8 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 80131b8:	b480      	push	{r7}
 80131ba:	b083      	sub	sp, #12
 80131bc:	af00      	add	r7, sp, #0
 80131be:	6078      	str	r0, [r7, #4]
 80131c0:	460b      	mov	r3, r1
 80131c2:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	887a      	ldrh	r2, [r7, #2]
 80131c8:	801a      	strh	r2, [r3, #0]
    {
    }
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	4618      	mov	r0, r3
 80131ce:	370c      	adds	r7, #12
 80131d0:	46bd      	mov	sp, r7
 80131d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d6:	4770      	bx	lr

080131d8 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 80131d8:	b580      	push	{r7, lr}
 80131da:	b082      	sub	sp, #8
 80131dc:	af00      	add	r7, sp, #0
 80131de:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 80131e0:	4a14      	ldr	r2, [pc, #80]	@ (8013234 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	601a      	str	r2, [r3, #0]
        : rect(),
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	3304      	adds	r3, #4
 80131ea:	4618      	mov	r0, r3
 80131ec:	f7ff ffcd 	bl	801318a <_ZN8touchgfx4RectC1Ev>
          cachedVisibleRect(),
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	330c      	adds	r3, #12
 80131f4:	4618      	mov	r0, r3
 80131f6:	f7ff ffc8 	bl	801318a <_ZN8touchgfx4RectC1Ev>
          parent(0),
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	2200      	movs	r2, #0
 80131fe:	615a      	str	r2, [r3, #20]
          nextSibling(0),
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	2200      	movs	r2, #0
 8013204:	619a      	str	r2, [r3, #24]
          nextDrawChainElement(0),
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	2200      	movs	r2, #0
 801320a:	61da      	str	r2, [r3, #28]
          cachedAbsX(0),
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	2200      	movs	r2, #0
 8013210:	841a      	strh	r2, [r3, #32]
          cachedAbsY(0),
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	2200      	movs	r2, #0
 8013216:	845a      	strh	r2, [r3, #34]	@ 0x22
          touchable(false),
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	2200      	movs	r2, #0
 801321c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          visible(true)
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	2201      	movs	r2, #1
 8013224:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    {
    }
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	4618      	mov	r0, r3
 801322c:	3708      	adds	r7, #8
 801322e:	46bd      	mov	sp, r7
 8013230:	bd80      	pop	{r7, pc}
 8013232:	bf00      	nop
 8013234:	0802ce7c 	.word	0x0802ce7c

08013238 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8013238:	b480      	push	{r7}
 801323a:	b083      	sub	sp, #12
 801323c:	af00      	add	r7, sp, #0
 801323e:	6078      	str	r0, [r7, #4]
    {
 8013240:	4a04      	ldr	r2, [pc, #16]	@ (8013254 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	601a      	str	r2, [r3, #0]
    }
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	4618      	mov	r0, r3
 801324a:	370c      	adds	r7, #12
 801324c:	46bd      	mov	sp, r7
 801324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013252:	4770      	bx	lr
 8013254:	0802ce7c 	.word	0x0802ce7c

08013258 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8013258:	b580      	push	{r7, lr}
 801325a:	b082      	sub	sp, #8
 801325c:	af00      	add	r7, sp, #0
 801325e:	6078      	str	r0, [r7, #4]
    }
 8013260:	6878      	ldr	r0, [r7, #4]
 8013262:	f7ff ffe9 	bl	8013238 <_ZN8touchgfx8DrawableD1Ev>
 8013266:	2128      	movs	r1, #40	@ 0x28
 8013268:	6878      	ldr	r0, [r7, #4]
 801326a:	f016 fb98 	bl	802999e <_ZdlPvj>
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	4618      	mov	r0, r3
 8013272:	3708      	adds	r7, #8
 8013274:	46bd      	mov	sp, r7
 8013276:	bd80      	pop	{r7, pc}

08013278 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 8013278:	b580      	push	{r7, lr}
 801327a:	b082      	sub	sp, #8
 801327c:	af00      	add	r7, sp, #0
 801327e:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8013286:	2b00      	cmp	r3, #0
 8013288:	d005      	beq.n	8013296 <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	3314      	adds	r3, #20
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	6878      	ldr	r0, [r7, #4]
 8013294:	4798      	blx	r3
        }
    }
 8013296:	bf00      	nop
 8013298:	3708      	adds	r7, #8
 801329a:	46bd      	mov	sp, r7
 801329c:	bd80      	pop	{r7, pc}

0801329e <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 801329e:	b480      	push	{r7}
 80132a0:	b083      	sub	sp, #12
 80132a2:	af00      	add	r7, sp, #0
 80132a4:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80132a6:	2300      	movs	r3, #0
    }
 80132a8:	4618      	mov	r0, r3
 80132aa:	370c      	adds	r7, #12
 80132ac:	46bd      	mov	sp, r7
 80132ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b2:	4770      	bx	lr

080132b4 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80132b4:	b580      	push	{r7, lr}
 80132b6:	b084      	sub	sp, #16
 80132b8:	af00      	add	r7, sp, #0
 80132ba:	60f8      	str	r0, [r7, #12]
 80132bc:	4608      	mov	r0, r1
 80132be:	4611      	mov	r1, r2
 80132c0:	461a      	mov	r2, r3
 80132c2:	4603      	mov	r3, r0
 80132c4:	817b      	strh	r3, [r7, #10]
 80132c6:	460b      	mov	r3, r1
 80132c8:	813b      	strh	r3, [r7, #8]
 80132ca:	4613      	mov	r3, r2
 80132cc:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 80132ce:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80132d2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80132d6:	4619      	mov	r1, r3
 80132d8:	68f8      	ldr	r0, [r7, #12]
 80132da:	f000 f82a 	bl	8013332 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 80132de:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80132e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80132e6:	4619      	mov	r1, r3
 80132e8:	68f8      	ldr	r0, [r7, #12]
 80132ea:	f000 f87e 	bl	80133ea <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 80132ee:	bf00      	nop
 80132f0:	3710      	adds	r7, #16
 80132f2:	46bd      	mov	sp, r7
 80132f4:	bd80      	pop	{r7, pc}

080132f6 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 80132f6:	b480      	push	{r7}
 80132f8:	b083      	sub	sp, #12
 80132fa:	af00      	add	r7, sp, #0
 80132fc:	6078      	str	r0, [r7, #4]
 80132fe:	460b      	mov	r3, r1
 8013300:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	887a      	ldrh	r2, [r7, #2]
 8013306:	809a      	strh	r2, [r3, #4]
    }
 8013308:	bf00      	nop
 801330a:	370c      	adds	r7, #12
 801330c:	46bd      	mov	sp, r7
 801330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013312:	4770      	bx	lr

08013314 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8013314:	b480      	push	{r7}
 8013316:	b083      	sub	sp, #12
 8013318:	af00      	add	r7, sp, #0
 801331a:	6078      	str	r0, [r7, #4]
 801331c:	460b      	mov	r3, r1
 801331e:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	887a      	ldrh	r2, [r7, #2]
 8013324:	80da      	strh	r2, [r3, #6]
    }
 8013326:	bf00      	nop
 8013328:	370c      	adds	r7, #12
 801332a:	46bd      	mov	sp, r7
 801332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013330:	4770      	bx	lr

08013332 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 8013332:	b580      	push	{r7, lr}
 8013334:	b082      	sub	sp, #8
 8013336:	af00      	add	r7, sp, #0
 8013338:	6078      	str	r0, [r7, #4]
 801333a:	460b      	mov	r3, r1
 801333c:	807b      	strh	r3, [r7, #2]
 801333e:	4613      	mov	r3, r2
 8013340:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	3330      	adds	r3, #48	@ 0x30
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801334e:	4611      	mov	r1, r2
 8013350:	6878      	ldr	r0, [r7, #4]
 8013352:	4798      	blx	r3
        setY(y);
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	3334      	adds	r3, #52	@ 0x34
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8013360:	4611      	mov	r1, r2
 8013362:	6878      	ldr	r0, [r7, #4]
 8013364:	4798      	blx	r3
    }
 8013366:	bf00      	nop
 8013368:	3708      	adds	r7, #8
 801336a:	46bd      	mov	sp, r7
 801336c:	bd80      	pop	{r7, pc}

0801336e <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 801336e:	b480      	push	{r7}
 8013370:	b083      	sub	sp, #12
 8013372:	af00      	add	r7, sp, #0
 8013374:	6078      	str	r0, [r7, #4]
 8013376:	460b      	mov	r3, r1
 8013378:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	887a      	ldrh	r2, [r7, #2]
 801337e:	811a      	strh	r2, [r3, #8]
    }
 8013380:	bf00      	nop
 8013382:	370c      	adds	r7, #12
 8013384:	46bd      	mov	sp, r7
 8013386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801338a:	4770      	bx	lr

0801338c <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 801338c:	b480      	push	{r7}
 801338e:	b083      	sub	sp, #12
 8013390:	af00      	add	r7, sp, #0
 8013392:	6078      	str	r0, [r7, #4]
 8013394:	460b      	mov	r3, r1
 8013396:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	887a      	ldrh	r2, [r7, #2]
 801339c:	815a      	strh	r2, [r3, #10]
    }
 801339e:	bf00      	nop
 80133a0:	370c      	adds	r7, #12
 80133a2:	46bd      	mov	sp, r7
 80133a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133a8:	4770      	bx	lr

080133aa <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 80133aa:	b480      	push	{r7}
 80133ac:	b083      	sub	sp, #12
 80133ae:	af00      	add	r7, sp, #0
 80133b0:	6078      	str	r0, [r7, #4]
    {
    }
 80133b2:	bf00      	nop
 80133b4:	370c      	adds	r7, #12
 80133b6:	46bd      	mov	sp, r7
 80133b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133bc:	4770      	bx	lr

080133be <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80133be:	b480      	push	{r7}
 80133c0:	b083      	sub	sp, #12
 80133c2:	af00      	add	r7, sp, #0
 80133c4:	6078      	str	r0, [r7, #4]
 80133c6:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80133c8:	bf00      	nop
 80133ca:	370c      	adds	r7, #12
 80133cc:	46bd      	mov	sp, r7
 80133ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d2:	4770      	bx	lr

080133d4 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 80133d4:	b480      	push	{r7}
 80133d6:	b083      	sub	sp, #12
 80133d8:	af00      	add	r7, sp, #0
 80133da:	6078      	str	r0, [r7, #4]
 80133dc:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80133de:	bf00      	nop
 80133e0:	370c      	adds	r7, #12
 80133e2:	46bd      	mov	sp, r7
 80133e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133e8:	4770      	bx	lr

080133ea <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 80133ea:	b580      	push	{r7, lr}
 80133ec:	b082      	sub	sp, #8
 80133ee:	af00      	add	r7, sp, #0
 80133f0:	6078      	str	r0, [r7, #4]
 80133f2:	460b      	mov	r3, r1
 80133f4:	807b      	strh	r3, [r7, #2]
 80133f6:	4613      	mov	r3, r2
 80133f8:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	3338      	adds	r3, #56	@ 0x38
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8013406:	4611      	mov	r1, r2
 8013408:	6878      	ldr	r0, [r7, #4]
 801340a:	4798      	blx	r3
        setHeight(height);
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	333c      	adds	r3, #60	@ 0x3c
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	f9b7 2000 	ldrsh.w	r2, [r7]
 8013418:	4611      	mov	r1, r2
 801341a:	6878      	ldr	r0, [r7, #4]
 801341c:	4798      	blx	r3
    }
 801341e:	bf00      	nop
 8013420:	3708      	adds	r7, #8
 8013422:	46bd      	mov	sp, r7
 8013424:	bd80      	pop	{r7, pc}

08013426 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8013426:	b480      	push	{r7}
 8013428:	b083      	sub	sp, #12
 801342a:	af00      	add	r7, sp, #0
 801342c:	6078      	str	r0, [r7, #4]
 801342e:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8013430:	bf00      	nop
 8013432:	370c      	adds	r7, #12
 8013434:	46bd      	mov	sp, r7
 8013436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801343a:	4770      	bx	lr

0801343c <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 801343c:	b480      	push	{r7}
 801343e:	b083      	sub	sp, #12
 8013440:	af00      	add	r7, sp, #0
 8013442:	6078      	str	r0, [r7, #4]
    {
    }
 8013444:	bf00      	nop
 8013446:	370c      	adds	r7, #12
 8013448:	46bd      	mov	sp, r7
 801344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801344e:	4770      	bx	lr

08013450 <_ZN8touchgfx8Drawable12setTouchableEb>:
    /**
     * Controls whether this Drawable receives touch events or not.
     *
     * @param  touch If true it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 8013450:	b480      	push	{r7}
 8013452:	b083      	sub	sp, #12
 8013454:	af00      	add	r7, sp, #0
 8013456:	6078      	str	r0, [r7, #4]
 8013458:	460b      	mov	r3, r1
 801345a:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	78fa      	ldrb	r2, [r7, #3]
 8013460:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
 8013464:	bf00      	nop
 8013466:	370c      	adds	r7, #12
 8013468:	46bd      	mov	sp, r7
 801346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801346e:	4770      	bx	lr

08013470 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8013470:	b480      	push	{r7}
 8013472:	b083      	sub	sp, #12
 8013474:	af00      	add	r7, sp, #0
 8013476:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
    }
 801347e:	4618      	mov	r0, r3
 8013480:	370c      	adds	r7, #12
 8013482:	46bd      	mov	sp, r7
 8013484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013488:	4770      	bx	lr

0801348a <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 801348a:	b480      	push	{r7}
 801348c:	b083      	sub	sp, #12
 801348e:	af00      	add	r7, sp, #0
 8013490:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
    }
 8013498:	4618      	mov	r0, r3
 801349a:	370c      	adds	r7, #12
 801349c:	46bd      	mov	sp, r7
 801349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134a2:	4770      	bx	lr

080134a4 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 80134a4:	b580      	push	{r7, lr}
 80134a6:	b082      	sub	sp, #8
 80134a8:	af00      	add	r7, sp, #0
 80134aa:	6078      	str	r0, [r7, #4]
 80134ac:	460b      	mov	r3, r1
 80134ae:	807b      	strh	r3, [r7, #2]
 80134b0:	4613      	mov	r3, r2
 80134b2:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	3354      	adds	r3, #84	@ 0x54
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	8879      	ldrh	r1, [r7, #2]
 80134be:	687a      	ldr	r2, [r7, #4]
 80134c0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80134c4:	b292      	uxth	r2, r2
 80134c6:	1a8a      	subs	r2, r1, r2
 80134c8:	b292      	uxth	r2, r2
 80134ca:	b210      	sxth	r0, r2
 80134cc:	8839      	ldrh	r1, [r7, #0]
 80134ce:	687a      	ldr	r2, [r7, #4]
 80134d0:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80134d4:	b292      	uxth	r2, r2
 80134d6:	1a8a      	subs	r2, r1, r2
 80134d8:	b292      	uxth	r2, r2
 80134da:	b212      	sxth	r2, r2
 80134dc:	4601      	mov	r1, r0
 80134de:	6878      	ldr	r0, [r7, #4]
 80134e0:	4798      	blx	r3
    }
 80134e2:	bf00      	nop
 80134e4:	3708      	adds	r7, #8
 80134e6:	46bd      	mov	sp, r7
 80134e8:	bd80      	pop	{r7, pc}

080134ea <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 80134ea:	b480      	push	{r7}
 80134ec:	b083      	sub	sp, #12
 80134ee:	af00      	add	r7, sp, #0
 80134f0:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80134f8:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013500:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013508:	845a      	strh	r2, [r3, #34]	@ 0x22
    }
 801350a:	bf00      	nop
 801350c:	370c      	adds	r7, #12
 801350e:	46bd      	mov	sp, r7
 8013510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013514:	4770      	bx	lr

08013516 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8013516:	b580      	push	{r7, lr}
 8013518:	b084      	sub	sp, #16
 801351a:	af00      	add	r7, sp, #0
 801351c:	60f8      	str	r0, [r7, #12]
 801351e:	60b9      	str	r1, [r7, #8]
 8013520:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 8013522:	68f8      	ldr	r0, [r7, #12]
 8013524:	f7ff ffe1 	bl	80134ea <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	681a      	ldr	r2, [r3, #0]
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	68fa      	ldr	r2, [r7, #12]
 8013534:	601a      	str	r2, [r3, #0]
    }
 8013536:	bf00      	nop
 8013538:	3710      	adds	r7, #16
 801353a:	46bd      	mov	sp, r7
 801353c:	bd80      	pop	{r7, pc}

0801353e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 801353e:	b580      	push	{r7, lr}
 8013540:	b084      	sub	sp, #16
 8013542:	af00      	add	r7, sp, #0
 8013544:	60f8      	str	r0, [r7, #12]
 8013546:	607b      	str	r3, [r7, #4]
 8013548:	460b      	mov	r3, r1
 801354a:	817b      	strh	r3, [r7, #10]
 801354c:	4613      	mov	r3, r2
 801354e:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	4618      	mov	r0, r3
 8013554:	f7ff ff8c 	bl	8013470 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8013558:	4603      	mov	r3, r0
 801355a:	2b00      	cmp	r3, #0
 801355c:	d008      	beq.n	8013570 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	4618      	mov	r0, r3
 8013562:	f7ff ff92 	bl	801348a <_ZNK8touchgfx8Drawable11isTouchableEv>
 8013566:	4603      	mov	r3, r0
 8013568:	2b00      	cmp	r3, #0
 801356a:	d001      	beq.n	8013570 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 801356c:	2301      	movs	r3, #1
 801356e:	e000      	b.n	8013572 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8013570:	2300      	movs	r3, #0
 8013572:	2b00      	cmp	r3, #0
 8013574:	d002      	beq.n	801357c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8013576:	68fa      	ldr	r2, [r7, #12]
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	601a      	str	r2, [r3, #0]
        }
    }
 801357c:	bf00      	nop
 801357e:	3710      	adds	r7, #16
 8013580:	46bd      	mov	sp, r7
 8013582:	bd80      	pop	{r7, pc}

08013584 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8013584:	b580      	push	{r7, lr}
 8013586:	b082      	sub	sp, #8
 8013588:	af00      	add	r7, sp, #0
 801358a:	6078      	str	r0, [r7, #4]
    {
 801358c:	4a06      	ldr	r2, [pc, #24]	@ (80135a8 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	601a      	str	r2, [r3, #0]
    }
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	3304      	adds	r3, #4
 8013596:	4618      	mov	r0, r3
 8013598:	f000 fb12 	bl	8013bc0 <_ZN8touchgfx9ContainerD1Ev>
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	4618      	mov	r0, r3
 80135a0:	3708      	adds	r7, #8
 80135a2:	46bd      	mov	sp, r7
 80135a4:	bd80      	pop	{r7, pc}
 80135a6:	bf00      	nop
 80135a8:	0802cf9c 	.word	0x0802cf9c

080135ac <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 80135ac:	b580      	push	{r7, lr}
 80135ae:	b082      	sub	sp, #8
 80135b0:	af00      	add	r7, sp, #0
 80135b2:	6078      	str	r0, [r7, #4]
    }
 80135b4:	6878      	ldr	r0, [r7, #4]
 80135b6:	f7ff ffe5 	bl	8013584 <_ZN8touchgfx6ScreenD1Ev>
 80135ba:	213c      	movs	r1, #60	@ 0x3c
 80135bc:	6878      	ldr	r0, [r7, #4]
 80135be:	f016 f9ee 	bl	802999e <_ZdlPvj>
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	4618      	mov	r0, r3
 80135c6:	3708      	adds	r7, #8
 80135c8:	46bd      	mov	sp, r7
 80135ca:	bd80      	pop	{r7, pc}

080135cc <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 80135cc:	b480      	push	{r7}
 80135ce:	b083      	sub	sp, #12
 80135d0:	af00      	add	r7, sp, #0
 80135d2:	6078      	str	r0, [r7, #4]
    {
    }
 80135d4:	bf00      	nop
 80135d6:	370c      	adds	r7, #12
 80135d8:	46bd      	mov	sp, r7
 80135da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135de:	4770      	bx	lr

080135e0 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 80135e0:	b480      	push	{r7}
 80135e2:	b083      	sub	sp, #12
 80135e4:	af00      	add	r7, sp, #0
 80135e6:	6078      	str	r0, [r7, #4]
    {
    }
 80135e8:	bf00      	nop
 80135ea:	370c      	adds	r7, #12
 80135ec:	46bd      	mov	sp, r7
 80135ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135f2:	4770      	bx	lr

080135f4 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 80135f4:	b480      	push	{r7}
 80135f6:	b083      	sub	sp, #12
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	6078      	str	r0, [r7, #4]
    {
    }
 80135fc:	bf00      	nop
 80135fe:	370c      	adds	r7, #12
 8013600:	46bd      	mov	sp, r7
 8013602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013606:	4770      	bx	lr

08013608 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8013608:	b480      	push	{r7}
 801360a:	b083      	sub	sp, #12
 801360c:	af00      	add	r7, sp, #0
 801360e:	6078      	str	r0, [r7, #4]
    {
    }
 8013610:	bf00      	nop
 8013612:	370c      	adds	r7, #12
 8013614:	46bd      	mov	sp, r7
 8013616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801361a:	4770      	bx	lr

0801361c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 801361c:	b480      	push	{r7}
 801361e:	b083      	sub	sp, #12
 8013620:	af00      	add	r7, sp, #0
 8013622:	6078      	str	r0, [r7, #4]
 8013624:	460b      	mov	r3, r1
 8013626:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 8013628:	bf00      	nop
 801362a:	370c      	adds	r7, #12
 801362c:	46bd      	mov	sp, r7
 801362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013632:	4770      	bx	lr

08013634 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8013634:	b580      	push	{r7, lr}
 8013636:	b082      	sub	sp, #8
 8013638:	af00      	add	r7, sp, #0
 801363a:	6078      	str	r0, [r7, #4]
 801363c:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	3304      	adds	r3, #4
 8013642:	6839      	ldr	r1, [r7, #0]
 8013644:	4618      	mov	r0, r3
 8013646:	f003 febb 	bl	80173c0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 801364a:	bf00      	nop
 801364c:	3708      	adds	r7, #8
 801364e:	46bd      	mov	sp, r7
 8013650:	bd80      	pop	{r7, pc}
	...

08013654 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 8013654:	b580      	push	{r7, lr}
 8013656:	b082      	sub	sp, #8
 8013658:	af00      	add	r7, sp, #0
 801365a:	6078      	str	r0, [r7, #4]
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	4618      	mov	r0, r3
 8013660:	f7ff fdba 	bl	80131d8 <_ZN8touchgfx8DrawableC1Ev>
 8013664:	4a03      	ldr	r2, [pc, #12]	@ (8013674 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	601a      	str	r2, [r3, #0]
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	4618      	mov	r0, r3
 801366e:	3708      	adds	r7, #8
 8013670:	46bd      	mov	sp, r7
 8013672:	bd80      	pop	{r7, pc}
 8013674:	0802c1a4 	.word	0x0802c1a4

08013678 <_ZN8touchgfx6WidgetD1Ev>:
 8013678:	b580      	push	{r7, lr}
 801367a:	b082      	sub	sp, #8
 801367c:	af00      	add	r7, sp, #0
 801367e:	6078      	str	r0, [r7, #4]
 8013680:	4a05      	ldr	r2, [pc, #20]	@ (8013698 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	601a      	str	r2, [r3, #0]
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	4618      	mov	r0, r3
 801368a:	f7ff fdd5 	bl	8013238 <_ZN8touchgfx8DrawableD1Ev>
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	4618      	mov	r0, r3
 8013692:	3708      	adds	r7, #8
 8013694:	46bd      	mov	sp, r7
 8013696:	bd80      	pop	{r7, pc}
 8013698:	0802c1a4 	.word	0x0802c1a4

0801369c <_ZN8touchgfx6WidgetD0Ev>:
 801369c:	b580      	push	{r7, lr}
 801369e:	b082      	sub	sp, #8
 80136a0:	af00      	add	r7, sp, #0
 80136a2:	6078      	str	r0, [r7, #4]
 80136a4:	6878      	ldr	r0, [r7, #4]
 80136a6:	f7ff ffe7 	bl	8013678 <_ZN8touchgfx6WidgetD1Ev>
 80136aa:	2128      	movs	r1, #40	@ 0x28
 80136ac:	6878      	ldr	r0, [r7, #4]
 80136ae:	f016 f976 	bl	802999e <_ZdlPvj>
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	4618      	mov	r0, r3
 80136b6:	3708      	adds	r7, #8
 80136b8:	46bd      	mov	sp, r7
 80136ba:	bd80      	pop	{r7, pc}

080136bc <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 80136bc:	b580      	push	{r7, lr}
 80136be:	b082      	sub	sp, #8
 80136c0:	af00      	add	r7, sp, #0
 80136c2:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	4618      	mov	r0, r3
 80136c8:	2326      	movs	r3, #38	@ 0x26
 80136ca:	461a      	mov	r2, r3
 80136cc:	2100      	movs	r1, #0
 80136ce:	f016 ff7b 	bl	802a5c8 <memset>
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	4618      	mov	r0, r3
 80136d6:	f7ff ffbd 	bl	8013654 <_ZN8touchgfx6WidgetC1Ev>
 80136da:	4a09      	ldr	r2, [pc, #36]	@ (8013700 <_ZN8touchgfx3BoxC1Ev+0x44>)
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	601a      	str	r2, [r3, #0]
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	22ff      	movs	r2, #255	@ 0xff
 80136e4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	3328      	adds	r3, #40	@ 0x28
 80136ec:	2100      	movs	r1, #0
 80136ee:	4618      	mov	r0, r3
 80136f0:	f7ff fd3c 	bl	801316c <_ZN8touchgfx9colortypeC1Em>
    {
    }
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	4618      	mov	r0, r3
 80136f8:	3708      	adds	r7, #8
 80136fa:	46bd      	mov	sp, r7
 80136fc:	bd80      	pop	{r7, pc}
 80136fe:	bf00      	nop
 8013700:	0802cce4 	.word	0x0802cce4

08013704 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 8013704:	b480      	push	{r7}
 8013706:	b083      	sub	sp, #12
 8013708:	af00      	add	r7, sp, #0
 801370a:	6078      	str	r0, [r7, #4]
 801370c:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	683a      	ldr	r2, [r7, #0]
 8013712:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 8013714:	bf00      	nop
 8013716:	370c      	adds	r7, #12
 8013718:	46bd      	mov	sp, r7
 801371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801371e:	4770      	bx	lr

08013720 <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 8013720:	b580      	push	{r7, lr}
 8013722:	b082      	sub	sp, #8
 8013724:	af00      	add	r7, sp, #0
 8013726:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	4618      	mov	r0, r3
 801372c:	2326      	movs	r3, #38	@ 0x26
 801372e:	461a      	mov	r2, r3
 8013730:	2100      	movs	r1, #0
 8013732:	f016 ff49 	bl	802a5c8 <memset>
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	4618      	mov	r0, r3
 801373a:	f7ff ff8b 	bl	8013654 <_ZN8touchgfx6WidgetC1Ev>
 801373e:	4a0a      	ldr	r2, [pc, #40]	@ (8013768 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	601a      	str	r2, [r3, #0]
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	2200      	movs	r2, #0
 8013748:	629a      	str	r2, [r3, #40]	@ 0x28
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	2200      	movs	r2, #0
 801374e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    {
        setTouchable(true);
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	2101      	movs	r1, #1
 8013756:	4618      	mov	r0, r3
 8013758:	f7ff fe7a 	bl	8013450 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	4618      	mov	r0, r3
 8013760:	3708      	adds	r7, #8
 8013762:	46bd      	mov	sp, r7
 8013764:	bd80      	pop	{r7, pc}
 8013766:	bf00      	nop
 8013768:	0802cc74 	.word	0x0802cc74

0801376c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 801376c:	b480      	push	{r7}
 801376e:	b083      	sub	sp, #12
 8013770:	af00      	add	r7, sp, #0
 8013772:	6078      	str	r0, [r7, #4]
 8013774:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	683a      	ldr	r2, [r7, #0]
 801377a:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 801377c:	bf00      	nop
 801377e:	370c      	adds	r7, #12
 8013780:	46bd      	mov	sp, r7
 8013782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013786:	4770      	bx	lr

08013788 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 8013788:	b580      	push	{r7, lr}
 801378a:	b082      	sub	sp, #8
 801378c:	af00      	add	r7, sp, #0
 801378e:	6078      	str	r0, [r7, #4]
 8013790:	4a05      	ldr	r2, [pc, #20]	@ (80137a8 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	601a      	str	r2, [r3, #0]
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	4618      	mov	r0, r3
 801379a:	f7ff ff6d 	bl	8013678 <_ZN8touchgfx6WidgetD1Ev>
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	4618      	mov	r0, r3
 80137a2:	3708      	adds	r7, #8
 80137a4:	46bd      	mov	sp, r7
 80137a6:	bd80      	pop	{r7, pc}
 80137a8:	0802cc74 	.word	0x0802cc74

080137ac <_ZN8touchgfx14AbstractButtonD0Ev>:
 80137ac:	b580      	push	{r7, lr}
 80137ae:	b082      	sub	sp, #8
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	6078      	str	r0, [r7, #4]
 80137b4:	6878      	ldr	r0, [r7, #4]
 80137b6:	f7ff ffe7 	bl	8013788 <_ZN8touchgfx14AbstractButtonD1Ev>
 80137ba:	2130      	movs	r1, #48	@ 0x30
 80137bc:	6878      	ldr	r0, [r7, #4]
 80137be:	f016 f8ee 	bl	802999e <_ZdlPvj>
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	4618      	mov	r0, r3
 80137c6:	3708      	adds	r7, #8
 80137c8:	46bd      	mov	sp, r7
 80137ca:	bd80      	pop	{r7, pc}

080137cc <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 80137cc:	b580      	push	{r7, lr}
 80137ce:	b082      	sub	sp, #8
 80137d0:	af00      	add	r7, sp, #0
 80137d2:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	4618      	mov	r0, r3
 80137d8:	f7ff ffa2 	bl	8013720 <_ZN8touchgfx14AbstractButtonC1Ev>
 80137dc:	4a0c      	ldr	r2, [pc, #48]	@ (8013810 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	601a      	str	r2, [r3, #0]
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	332e      	adds	r3, #46	@ 0x2e
 80137e6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80137ea:	4618      	mov	r0, r3
 80137ec:	f7ff fce4 	bl	80131b8 <_ZN8touchgfx6BitmapC1Et>
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	3330      	adds	r3, #48	@ 0x30
 80137f4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80137f8:	4618      	mov	r0, r3
 80137fa:	f7ff fcdd 	bl	80131b8 <_ZN8touchgfx6BitmapC1Et>
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	22ff      	movs	r2, #255	@ 0xff
 8013802:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    {
    }
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	4618      	mov	r0, r3
 801380a:	3708      	adds	r7, #8
 801380c:	46bd      	mov	sp, r7
 801380e:	bd80      	pop	{r7, pc}
 8013810:	0802cd4c 	.word	0x0802cd4c

08013814 <_ZN15Screen1ViewBase11applicationEv>:
    Screen1ViewBase();
    virtual ~Screen1ViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 8013814:	b580      	push	{r7, lr}
 8013816:	b082      	sub	sp, #8
 8013818:	af00      	add	r7, sp, #0
 801381a:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 801381c:	f008 fab6 	bl	801bd8c <_ZN8touchgfx11Application11getInstanceEv>
 8013820:	4603      	mov	r3, r0
    }
 8013822:	4618      	mov	r0, r3
 8013824:	3708      	adds	r7, #8
 8013826:	46bd      	mov	sp, r7
 8013828:	bd80      	pop	{r7, pc}
	...

0801382c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 801382c:	b580      	push	{r7, lr}
 801382e:	b082      	sub	sp, #8
 8013830:	af00      	add	r7, sp, #0
 8013832:	6078      	str	r0, [r7, #4]
 8013834:	4a05      	ldr	r2, [pc, #20]	@ (801384c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	601a      	str	r2, [r3, #0]
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	4618      	mov	r0, r3
 801383e:	f7ff fea1 	bl	8013584 <_ZN8touchgfx6ScreenD1Ev>
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	4618      	mov	r0, r3
 8013846:	3708      	adds	r7, #8
 8013848:	46bd      	mov	sp, r7
 801384a:	bd80      	pop	{r7, pc}
 801384c:	0802c158 	.word	0x0802c158

08013850 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 8013850:	b580      	push	{r7, lr}
 8013852:	b082      	sub	sp, #8
 8013854:	af00      	add	r7, sp, #0
 8013856:	6078      	str	r0, [r7, #4]
 8013858:	6878      	ldr	r0, [r7, #4]
 801385a:	f7ff ffe7 	bl	801382c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 801385e:	2140      	movs	r1, #64	@ 0x40
 8013860:	6878      	ldr	r0, [r7, #4]
 8013862:	f016 f89c 	bl	802999e <_ZdlPvj>
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	4618      	mov	r0, r3
 801386a:	3708      	adds	r7, #8
 801386c:	46bd      	mov	sp, r7
 801386e:	bd80      	pop	{r7, pc}

08013870 <_ZN15Screen1ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>

Screen1ViewBase::Screen1ViewBase() :
 8013870:	b590      	push	{r4, r7, lr}
 8013872:	b08d      	sub	sp, #52	@ 0x34
 8013874:	af02      	add	r7, sp, #8
 8013876:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	4618      	mov	r0, r3
 801387c:	f000 f918 	bl	8013ab0 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 8013880:	4a5e      	ldr	r2, [pc, #376]	@ (80139fc <_ZN15Screen1ViewBaseC1Ev+0x18c>)
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	601a      	str	r2, [r3, #0]
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	3340      	adds	r3, #64	@ 0x40
 801388a:	4618      	mov	r0, r3
 801388c:	f7ff ff16 	bl	80136bc <_ZN8touchgfx3BoxC1Ev>
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	336c      	adds	r3, #108	@ 0x6c
 8013894:	4618      	mov	r0, r3
 8013896:	f7ff ff11 	bl	80136bc <_ZN8touchgfx3BoxC1Ev>
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	3398      	adds	r3, #152	@ 0x98
 801389e:	4618      	mov	r0, r3
 80138a0:	f7ff ff94 	bl	80137cc <_ZN8touchgfx6ButtonC1Ev>
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	f103 00cc 	add.w	r0, r3, #204	@ 0xcc
 80138aa:	4b55      	ldr	r3, [pc, #340]	@ (8013a00 <_ZN15Screen1ViewBaseC1Ev+0x190>)
 80138ac:	60bb      	str	r3, [r7, #8]
 80138ae:	2300      	movs	r3, #0
 80138b0:	60fb      	str	r3, [r7, #12]
 80138b2:	f107 0308 	add.w	r3, r7, #8
 80138b6:	cb0c      	ldmia	r3, {r2, r3}
 80138b8:	6879      	ldr	r1, [r7, #4]
 80138ba:	f000 f91f 	bl	8013afc <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{
    __background.setPosition(0, 0, 480, 272);
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 80138c4:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80138c8:	9300      	str	r3, [sp, #0]
 80138ca:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80138ce:	2200      	movs	r2, #0
 80138d0:	2100      	movs	r1, #0
 80138d2:	f7ff fcef 	bl	80132b4 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 80138dc:	2300      	movs	r3, #0
 80138de:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 80138e2:	2300      	movs	r3, #0
 80138e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80138e8:	2300      	movs	r3, #0
 80138ea:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80138ee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80138f2:	041a      	lsls	r2, r3, #16
 80138f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80138f8:	021b      	lsls	r3, r3, #8
 80138fa:	431a      	orrs	r2, r3
 80138fc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8013900:	4313      	orrs	r3, r2
 8013902:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8013906:	f107 031c 	add.w	r3, r7, #28
 801390a:	4611      	mov	r1, r2
 801390c:	4618      	mov	r0, r3
 801390e:	f7ff fc2d 	bl	801316c <_ZN8touchgfx9colortypeC1Em>
 8013912:	69fb      	ldr	r3, [r7, #28]
 8013914:	4619      	mov	r1, r3
 8013916:	4620      	mov	r0, r4
 8013918:	f7ff fef4 	bl	8013704 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 801391c:	687a      	ldr	r2, [r7, #4]
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	3340      	adds	r3, #64	@ 0x40
 8013922:	4619      	mov	r1, r3
 8013924:	4610      	mov	r0, r2
 8013926:	f7ff fe85 	bl	8013634 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    box1.setPosition(0, 0, 480, 272);
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8013930:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8013934:	9300      	str	r3, [sp, #0]
 8013936:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 801393a:	2200      	movs	r2, #0
 801393c:	2100      	movs	r1, #0
 801393e:	f7ff fcb9 	bl	80132b4 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(230, 14, 14));
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8013948:	23e6      	movs	r3, #230	@ 0xe6
 801394a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801394e:	230e      	movs	r3, #14
 8013950:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8013954:	230e      	movs	r3, #14
 8013956:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 801395a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801395e:	041a      	lsls	r2, r3, #16
 8013960:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013964:	021b      	lsls	r3, r3, #8
 8013966:	431a      	orrs	r2, r3
 8013968:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 801396c:	4313      	orrs	r3, r2
 801396e:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8013972:	f107 0318 	add.w	r3, r7, #24
 8013976:	4611      	mov	r1, r2
 8013978:	4618      	mov	r0, r3
 801397a:	f7ff fbf7 	bl	801316c <_ZN8touchgfx9colortypeC1Em>
 801397e:	69bb      	ldr	r3, [r7, #24]
 8013980:	4619      	mov	r1, r3
 8013982:	4620      	mov	r0, r4
 8013984:	f7ff febe 	bl	8013704 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(box1);
 8013988:	687a      	ldr	r2, [r7, #4]
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	336c      	adds	r3, #108	@ 0x6c
 801398e:	4619      	mov	r1, r3
 8013990:	4610      	mov	r0, r2
 8013992:	f7ff fe4f 	bl	8013634 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    button1.setXY(185, 111);
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	3398      	adds	r3, #152	@ 0x98
 801399a:	226f      	movs	r2, #111	@ 0x6f
 801399c:	21b9      	movs	r1, #185	@ 0xb9
 801399e:	4618      	mov	r0, r3
 80139a0:	f7ff fcc7 	bl	8013332 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUND_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUND_ACTIVE_ID));
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	f103 0498 	add.w	r4, r3, #152	@ 0x98
 80139aa:	f107 0310 	add.w	r3, r7, #16
 80139ae:	2102      	movs	r1, #2
 80139b0:	4618      	mov	r0, r3
 80139b2:	f7ff fc01 	bl	80131b8 <_ZN8touchgfx6BitmapC1Et>
 80139b6:	f107 0314 	add.w	r3, r7, #20
 80139ba:	2103      	movs	r1, #3
 80139bc:	4618      	mov	r0, r3
 80139be:	f7ff fbfb 	bl	80131b8 <_ZN8touchgfx6BitmapC1Et>
 80139c2:	f107 0214 	add.w	r2, r7, #20
 80139c6:	f107 0310 	add.w	r3, r7, #16
 80139ca:	4619      	mov	r1, r3
 80139cc:	4620      	mov	r0, r4
 80139ce:	f006 fa6f 	bl	8019eb0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	f103 0298 	add.w	r2, r3, #152	@ 0x98
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	33cc      	adds	r3, #204	@ 0xcc
 80139dc:	4619      	mov	r1, r3
 80139de:	4610      	mov	r0, r2
 80139e0:	f7ff fec4 	bl	801376c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    add(button1);
 80139e4:	687a      	ldr	r2, [r7, #4]
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	3398      	adds	r3, #152	@ 0x98
 80139ea:	4619      	mov	r1, r3
 80139ec:	4610      	mov	r0, r2
 80139ee:	f7ff fe21 	bl	8013634 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	4618      	mov	r0, r3
 80139f6:	372c      	adds	r7, #44	@ 0x2c
 80139f8:	46bd      	mov	sp, r7
 80139fa:	bd90      	pop	{r4, r7, pc}
 80139fc:	0802c10c 	.word	0x0802c10c
 8013a00:	08013a85 	.word	0x08013a85

08013a04 <_ZN15Screen1ViewBaseD1Ev>:

Screen1ViewBase::~Screen1ViewBase()
 8013a04:	b580      	push	{r7, lr}
 8013a06:	b082      	sub	sp, #8
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	6078      	str	r0, [r7, #4]
 8013a0c:	4a0f      	ldr	r2, [pc, #60]	@ (8013a4c <_ZN15Screen1ViewBaseD1Ev+0x48>)
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	601a      	str	r2, [r3, #0]
{

}
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	33cc      	adds	r3, #204	@ 0xcc
 8013a16:	4618      	mov	r0, r3
 8013a18:	f000 f8b0 	bl	8013b7c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	3398      	adds	r3, #152	@ 0x98
 8013a20:	4618      	mov	r0, r3
 8013a22:	f000 f911 	bl	8013c48 <_ZN8touchgfx6ButtonD1Ev>
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	336c      	adds	r3, #108	@ 0x6c
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	f000 f8ea 	bl	8013c04 <_ZN8touchgfx3BoxD1Ev>
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	3340      	adds	r3, #64	@ 0x40
 8013a34:	4618      	mov	r0, r3
 8013a36:	f000 f8e5 	bl	8013c04 <_ZN8touchgfx3BoxD1Ev>
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	4618      	mov	r0, r3
 8013a3e:	f7ff fef5 	bl	801382c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	4618      	mov	r0, r3
 8013a46:	3708      	adds	r7, #8
 8013a48:	46bd      	mov	sp, r7
 8013a4a:	bd80      	pop	{r7, pc}
 8013a4c:	0802c10c 	.word	0x0802c10c

08013a50 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 8013a50:	b580      	push	{r7, lr}
 8013a52:	b082      	sub	sp, #8
 8013a54:	af00      	add	r7, sp, #0
 8013a56:	6078      	str	r0, [r7, #4]
}
 8013a58:	6878      	ldr	r0, [r7, #4]
 8013a5a:	f7ff ffd3 	bl	8013a04 <_ZN15Screen1ViewBaseD1Ev>
 8013a5e:	21dc      	movs	r1, #220	@ 0xdc
 8013a60:	6878      	ldr	r0, [r7, #4]
 8013a62:	f015 ff9c 	bl	802999e <_ZdlPvj>
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	4618      	mov	r0, r3
 8013a6a:	3708      	adds	r7, #8
 8013a6c:	46bd      	mov	sp, r7
 8013a6e:	bd80      	pop	{r7, pc}

08013a70 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 8013a70:	b480      	push	{r7}
 8013a72:	b083      	sub	sp, #12
 8013a74:	af00      	add	r7, sp, #0
 8013a76:	6078      	str	r0, [r7, #4]

}
 8013a78:	bf00      	nop
 8013a7a:	370c      	adds	r7, #12
 8013a7c:	46bd      	mov	sp, r7
 8013a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a82:	4770      	bx	lr

08013a84 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8013a84:	b580      	push	{r7, lr}
 8013a86:	b082      	sub	sp, #8
 8013a88:	af00      	add	r7, sp, #0
 8013a8a:	6078      	str	r0, [r7, #4]
 8013a8c:	6039      	str	r1, [r7, #0]
    if (&src == &button1)
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	3398      	adds	r3, #152	@ 0x98
 8013a92:	683a      	ldr	r2, [r7, #0]
 8013a94:	429a      	cmp	r2, r3
 8013a96:	d106      	bne.n	8013aa6 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When button1 clicked change screen to screen
        //Go to screen with no screen transition
        application().gotoscreenScreenNoTransition();
 8013a98:	6878      	ldr	r0, [r7, #4]
 8013a9a:	f7ff febb 	bl	8013814 <_ZN15Screen1ViewBase11applicationEv>
 8013a9e:	4603      	mov	r3, r0
 8013aa0:	4618      	mov	r0, r3
 8013aa2:	f7fe ff43 	bl	801292c <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
}
 8013aa6:	bf00      	nop
 8013aa8:	3708      	adds	r7, #8
 8013aaa:	46bd      	mov	sp, r7
 8013aac:	bd80      	pop	{r7, pc}
	...

08013ab0 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 8013ab0:	b580      	push	{r7, lr}
 8013ab2:	b082      	sub	sp, #8
 8013ab4:	af00      	add	r7, sp, #0
 8013ab6:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	4618      	mov	r0, r3
 8013abc:	f009 ff9a 	bl	801d9f4 <_ZN8touchgfx6ScreenC1Ev>
 8013ac0:	4a05      	ldr	r2, [pc, #20]	@ (8013ad8 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	601a      	str	r2, [r3, #0]
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	2200      	movs	r2, #0
 8013aca:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	4618      	mov	r0, r3
 8013ad0:	3708      	adds	r7, #8
 8013ad2:	46bd      	mov	sp, r7
 8013ad4:	bd80      	pop	{r7, pc}
 8013ad6:	bf00      	nop
 8013ad8:	0802c158 	.word	0x0802c158

08013adc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8013adc:	b480      	push	{r7}
 8013ade:	b083      	sub	sp, #12
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	6078      	str	r0, [r7, #4]
 8013ae4:	4a04      	ldr	r2, [pc, #16]	@ (8013af8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	601a      	str	r2, [r3, #0]
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	4618      	mov	r0, r3
 8013aee:	370c      	adds	r7, #12
 8013af0:	46bd      	mov	sp, r7
 8013af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af6:	4770      	bx	lr
 8013af8:	0802c18c 	.word	0x0802c18c

08013afc <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 8013afc:	b580      	push	{r7, lr}
 8013afe:	b084      	sub	sp, #16
 8013b00:	af00      	add	r7, sp, #0
 8013b02:	60f8      	str	r0, [r7, #12]
 8013b04:	60b9      	str	r1, [r7, #8]
 8013b06:	4639      	mov	r1, r7
 8013b08:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	4618      	mov	r0, r3
 8013b10:	f7ff ffe4 	bl	8013adc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8013b14:	4a08      	ldr	r2, [pc, #32]	@ (8013b38 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	601a      	str	r2, [r3, #0]
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	68ba      	ldr	r2, [r7, #8]
 8013b1e:	605a      	str	r2, [r3, #4]
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	3308      	adds	r3, #8
 8013b24:	463a      	mov	r2, r7
 8013b26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013b2a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	4618      	mov	r0, r3
 8013b32:	3710      	adds	r7, #16
 8013b34:	46bd      	mov	sp, r7
 8013b36:	bd80      	pop	{r7, pc}
 8013b38:	0802c140 	.word	0x0802c140

08013b3c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 8013b3c:	b480      	push	{r7}
 8013b3e:	b083      	sub	sp, #12
 8013b40:	af00      	add	r7, sp, #0
 8013b42:	6078      	str	r0, [r7, #4]
    }
 8013b44:	4a04      	ldr	r2, [pc, #16]	@ (8013b58 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	601a      	str	r2, [r3, #0]
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	370c      	adds	r7, #12
 8013b50:	46bd      	mov	sp, r7
 8013b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b56:	4770      	bx	lr
 8013b58:	0802c18c 	.word	0x0802c18c

08013b5c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 8013b5c:	b580      	push	{r7, lr}
 8013b5e:	b082      	sub	sp, #8
 8013b60:	af00      	add	r7, sp, #0
 8013b62:	6078      	str	r0, [r7, #4]
    }
 8013b64:	6878      	ldr	r0, [r7, #4]
 8013b66:	f7ff ffe9 	bl	8013b3c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8013b6a:	2104      	movs	r1, #4
 8013b6c:	6878      	ldr	r0, [r7, #4]
 8013b6e:	f015 ff16 	bl	802999e <_ZdlPvj>
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	4618      	mov	r0, r3
 8013b76:	3708      	adds	r7, #8
 8013b78:	46bd      	mov	sp, r7
 8013b7a:	bd80      	pop	{r7, pc}

08013b7c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8013b7c:	b580      	push	{r7, lr}
 8013b7e:	b082      	sub	sp, #8
 8013b80:	af00      	add	r7, sp, #0
 8013b82:	6078      	str	r0, [r7, #4]
 8013b84:	4a05      	ldr	r2, [pc, #20]	@ (8013b9c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	601a      	str	r2, [r3, #0]
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	4618      	mov	r0, r3
 8013b8e:	f7ff ffd5 	bl	8013b3c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	4618      	mov	r0, r3
 8013b96:	3708      	adds	r7, #8
 8013b98:	46bd      	mov	sp, r7
 8013b9a:	bd80      	pop	{r7, pc}
 8013b9c:	0802c140 	.word	0x0802c140

08013ba0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8013ba0:	b580      	push	{r7, lr}
 8013ba2:	b082      	sub	sp, #8
 8013ba4:	af00      	add	r7, sp, #0
 8013ba6:	6078      	str	r0, [r7, #4]
 8013ba8:	6878      	ldr	r0, [r7, #4]
 8013baa:	f7ff ffe7 	bl	8013b7c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8013bae:	2110      	movs	r1, #16
 8013bb0:	6878      	ldr	r0, [r7, #4]
 8013bb2:	f015 fef4 	bl	802999e <_ZdlPvj>
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	4618      	mov	r0, r3
 8013bba:	3708      	adds	r7, #8
 8013bbc:	46bd      	mov	sp, r7
 8013bbe:	bd80      	pop	{r7, pc}

08013bc0 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 8013bc0:	b580      	push	{r7, lr}
 8013bc2:	b082      	sub	sp, #8
 8013bc4:	af00      	add	r7, sp, #0
 8013bc6:	6078      	str	r0, [r7, #4]
 8013bc8:	4a05      	ldr	r2, [pc, #20]	@ (8013be0 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	601a      	str	r2, [r3, #0]
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	4618      	mov	r0, r3
 8013bd2:	f7ff fb31 	bl	8013238 <_ZN8touchgfx8DrawableD1Ev>
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	4618      	mov	r0, r3
 8013bda:	3708      	adds	r7, #8
 8013bdc:	46bd      	mov	sp, r7
 8013bde:	bd80      	pop	{r7, pc}
 8013be0:	0802c95c 	.word	0x0802c95c

08013be4 <_ZN8touchgfx9ContainerD0Ev>:
 8013be4:	b580      	push	{r7, lr}
 8013be6:	b082      	sub	sp, #8
 8013be8:	af00      	add	r7, sp, #0
 8013bea:	6078      	str	r0, [r7, #4]
 8013bec:	6878      	ldr	r0, [r7, #4]
 8013bee:	f7ff ffe7 	bl	8013bc0 <_ZN8touchgfx9ContainerD1Ev>
 8013bf2:	212c      	movs	r1, #44	@ 0x2c
 8013bf4:	6878      	ldr	r0, [r7, #4]
 8013bf6:	f015 fed2 	bl	802999e <_ZdlPvj>
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	3708      	adds	r7, #8
 8013c00:	46bd      	mov	sp, r7
 8013c02:	bd80      	pop	{r7, pc}

08013c04 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8013c04:	b580      	push	{r7, lr}
 8013c06:	b082      	sub	sp, #8
 8013c08:	af00      	add	r7, sp, #0
 8013c0a:	6078      	str	r0, [r7, #4]
 8013c0c:	4a05      	ldr	r2, [pc, #20]	@ (8013c24 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	601a      	str	r2, [r3, #0]
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	4618      	mov	r0, r3
 8013c16:	f7ff fd2f 	bl	8013678 <_ZN8touchgfx6WidgetD1Ev>
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	3708      	adds	r7, #8
 8013c20:	46bd      	mov	sp, r7
 8013c22:	bd80      	pop	{r7, pc}
 8013c24:	0802cce4 	.word	0x0802cce4

08013c28 <_ZN8touchgfx3BoxD0Ev>:
 8013c28:	b580      	push	{r7, lr}
 8013c2a:	b082      	sub	sp, #8
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	6078      	str	r0, [r7, #4]
 8013c30:	6878      	ldr	r0, [r7, #4]
 8013c32:	f7ff ffe7 	bl	8013c04 <_ZN8touchgfx3BoxD1Ev>
 8013c36:	212c      	movs	r1, #44	@ 0x2c
 8013c38:	6878      	ldr	r0, [r7, #4]
 8013c3a:	f015 feb0 	bl	802999e <_ZdlPvj>
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	4618      	mov	r0, r3
 8013c42:	3708      	adds	r7, #8
 8013c44:	46bd      	mov	sp, r7
 8013c46:	bd80      	pop	{r7, pc}

08013c48 <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 8013c48:	b580      	push	{r7, lr}
 8013c4a:	b082      	sub	sp, #8
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	6078      	str	r0, [r7, #4]
 8013c50:	4a05      	ldr	r2, [pc, #20]	@ (8013c68 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	601a      	str	r2, [r3, #0]
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	4618      	mov	r0, r3
 8013c5a:	f7ff fd95 	bl	8013788 <_ZN8touchgfx14AbstractButtonD1Ev>
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	4618      	mov	r0, r3
 8013c62:	3708      	adds	r7, #8
 8013c64:	46bd      	mov	sp, r7
 8013c66:	bd80      	pop	{r7, pc}
 8013c68:	0802cd4c 	.word	0x0802cd4c

08013c6c <_ZN8touchgfx6ButtonD0Ev>:
 8013c6c:	b580      	push	{r7, lr}
 8013c6e:	b082      	sub	sp, #8
 8013c70:	af00      	add	r7, sp, #0
 8013c72:	6078      	str	r0, [r7, #4]
 8013c74:	6878      	ldr	r0, [r7, #4]
 8013c76:	f7ff ffe7 	bl	8013c48 <_ZN8touchgfx6ButtonD1Ev>
 8013c7a:	2134      	movs	r1, #52	@ 0x34
 8013c7c:	6878      	ldr	r0, [r7, #4]
 8013c7e:	f015 fe8e 	bl	802999e <_ZdlPvj>
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	4618      	mov	r0, r3
 8013c86:	3708      	adds	r7, #8
 8013c88:	46bd      	mov	sp, r7
 8013c8a:	bd80      	pop	{r7, pc}

08013c8c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8013c8c:	b580      	push	{r7, lr}
 8013c8e:	b082      	sub	sp, #8
 8013c90:	af00      	add	r7, sp, #0
 8013c92:	6078      	str	r0, [r7, #4]
 8013c94:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	685b      	ldr	r3, [r3, #4]
 8013c9a:	687a      	ldr	r2, [r7, #4]
 8013c9c:	68d2      	ldr	r2, [r2, #12]
 8013c9e:	1052      	asrs	r2, r2, #1
 8013ca0:	1898      	adds	r0, r3, r2
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	68db      	ldr	r3, [r3, #12]
 8013ca6:	f003 0301 	and.w	r3, r3, #1
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d102      	bne.n	8013cb4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	689b      	ldr	r3, [r3, #8]
 8013cb2:	e00a      	b.n	8013cca <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	685b      	ldr	r3, [r3, #4]
 8013cb8:	687a      	ldr	r2, [r7, #4]
 8013cba:	68d2      	ldr	r2, [r2, #12]
 8013cbc:	1052      	asrs	r2, r2, #1
 8013cbe:	4413      	add	r3, r2
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	687a      	ldr	r2, [r7, #4]
 8013cc4:	6892      	ldr	r2, [r2, #8]
 8013cc6:	4413      	add	r3, r2
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	6839      	ldr	r1, [r7, #0]
 8013ccc:	4798      	blx	r3
    }
 8013cce:	bf00      	nop
 8013cd0:	3708      	adds	r7, #8
 8013cd2:	46bd      	mov	sp, r7
 8013cd4:	bd80      	pop	{r7, pc}

08013cd6 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8013cd6:	b480      	push	{r7}
 8013cd8:	b083      	sub	sp, #12
 8013cda:	af00      	add	r7, sp, #0
 8013cdc:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	685b      	ldr	r3, [r3, #4]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d010      	beq.n	8013d08 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	689b      	ldr	r3, [r3, #8]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d107      	bne.n	8013cfe <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	68db      	ldr	r3, [r3, #12]
 8013cf2:	f003 0301 	and.w	r3, r3, #1
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d101      	bne.n	8013cfe <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8013cfa:	2301      	movs	r3, #1
 8013cfc:	e000      	b.n	8013d00 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8013cfe:	2300      	movs	r3, #0
 8013d00:	2b01      	cmp	r3, #1
 8013d02:	d001      	beq.n	8013d08 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8013d04:	2301      	movs	r3, #1
 8013d06:	e000      	b.n	8013d0a <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8013d08:	2300      	movs	r3, #0
    }
 8013d0a:	4618      	mov	r0, r3
 8013d0c:	370c      	adds	r7, #12
 8013d0e:	46bd      	mov	sp, r7
 8013d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d14:	4770      	bx	lr

08013d16 <_ZN14screenViewBase11applicationEv>:
    screenViewBase();
    virtual ~screenViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 8013d16:	b580      	push	{r7, lr}
 8013d18:	b082      	sub	sp, #8
 8013d1a:	af00      	add	r7, sp, #0
 8013d1c:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8013d1e:	f008 f835 	bl	801bd8c <_ZN8touchgfx11Application11getInstanceEv>
 8013d22:	4603      	mov	r3, r0
    }
 8013d24:	4618      	mov	r0, r3
 8013d26:	3708      	adds	r7, #8
 8013d28:	46bd      	mov	sp, r7
 8013d2a:	bd80      	pop	{r7, pc}

08013d2c <_ZN8touchgfx4ViewI15screenPresenterED1Ev>:
class View : public Screen
 8013d2c:	b580      	push	{r7, lr}
 8013d2e:	b082      	sub	sp, #8
 8013d30:	af00      	add	r7, sp, #0
 8013d32:	6078      	str	r0, [r7, #4]
 8013d34:	4a05      	ldr	r2, [pc, #20]	@ (8013d4c <_ZN8touchgfx4ViewI15screenPresenterED1Ev+0x20>)
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	601a      	str	r2, [r3, #0]
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	4618      	mov	r0, r3
 8013d3e:	f7ff fc21 	bl	8013584 <_ZN8touchgfx6ScreenD1Ev>
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	4618      	mov	r0, r3
 8013d46:	3708      	adds	r7, #8
 8013d48:	46bd      	mov	sp, r7
 8013d4a:	bd80      	pop	{r7, pc}
 8013d4c:	0802c258 	.word	0x0802c258

08013d50 <_ZN8touchgfx4ViewI15screenPresenterED0Ev>:
 8013d50:	b580      	push	{r7, lr}
 8013d52:	b082      	sub	sp, #8
 8013d54:	af00      	add	r7, sp, #0
 8013d56:	6078      	str	r0, [r7, #4]
 8013d58:	6878      	ldr	r0, [r7, #4]
 8013d5a:	f7ff ffe7 	bl	8013d2c <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 8013d5e:	2140      	movs	r1, #64	@ 0x40
 8013d60:	6878      	ldr	r0, [r7, #4]
 8013d62:	f015 fe1c 	bl	802999e <_ZdlPvj>
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	4618      	mov	r0, r3
 8013d6a:	3708      	adds	r7, #8
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	bd80      	pop	{r7, pc}

08013d70 <_ZN14screenViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen_screen/screenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>

screenViewBase::screenViewBase() :
 8013d70:	b590      	push	{r4, r7, lr}
 8013d72:	b091      	sub	sp, #68	@ 0x44
 8013d74:	af02      	add	r7, sp, #8
 8013d76:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &screenViewBase::buttonCallbackHandler)
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	4618      	mov	r0, r3
 8013d7c:	f000 f998 	bl	80140b0 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>
 8013d80:	4a98      	ldr	r2, [pc, #608]	@ (8013fe4 <_ZN14screenViewBaseC1Ev+0x274>)
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	601a      	str	r2, [r3, #0]
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	3340      	adds	r3, #64	@ 0x40
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	f7ff fc96 	bl	80136bc <_ZN8touchgfx3BoxC1Ev>
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	336c      	adds	r3, #108	@ 0x6c
 8013d94:	4618      	mov	r0, r3
 8013d96:	f7ff fc91 	bl	80136bc <_ZN8touchgfx3BoxC1Ev>
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	3398      	adds	r3, #152	@ 0x98
 8013d9e:	4618      	mov	r0, r3
 8013da0:	f7ff fc8c 	bl	80136bc <_ZN8touchgfx3BoxC1Ev>
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	33c4      	adds	r3, #196	@ 0xc4
 8013da8:	4618      	mov	r0, r3
 8013daa:	f7ff fc87 	bl	80136bc <_ZN8touchgfx3BoxC1Ev>
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	33f0      	adds	r3, #240	@ 0xf0
 8013db2:	4618      	mov	r0, r3
 8013db4:	f7ff fd0a 	bl	80137cc <_ZN8touchgfx6ButtonC1Ev>
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	f503 7092 	add.w	r0, r3, #292	@ 0x124
 8013dbe:	4b8a      	ldr	r3, [pc, #552]	@ (8013fe8 <_ZN14screenViewBaseC1Ev+0x278>)
 8013dc0:	60fb      	str	r3, [r7, #12]
 8013dc2:	2300      	movs	r3, #0
 8013dc4:	613b      	str	r3, [r7, #16]
 8013dc6:	f107 030c 	add.w	r3, r7, #12
 8013dca:	cb0c      	ldmia	r3, {r2, r3}
 8013dcc:	6879      	ldr	r1, [r7, #4]
 8013dce:	f000 f985 	bl	80140dc <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{
    __background.setPosition(0, 0, 480, 272);
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8013dd8:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8013ddc:	9300      	str	r3, [sp, #0]
 8013dde:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8013de2:	2200      	movs	r2, #0
 8013de4:	2100      	movs	r1, #0
 8013de6:	f7ff fa65 	bl	80132b4 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8013df0:	2300      	movs	r3, #0
 8013df2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8013df6:	2300      	movs	r3, #0
 8013df8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8013dfc:	2300      	movs	r3, #0
 8013dfe:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8013e02:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8013e06:	041a      	lsls	r2, r3, #16
 8013e08:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8013e0c:	021b      	lsls	r3, r3, #8
 8013e0e:	431a      	orrs	r2, r3
 8013e10:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8013e14:	4313      	orrs	r3, r2
 8013e16:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8013e1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8013e1e:	4611      	mov	r1, r2
 8013e20:	4618      	mov	r0, r3
 8013e22:	f7ff f9a3 	bl	801316c <_ZN8touchgfx9colortypeC1Em>
 8013e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e28:	4619      	mov	r1, r3
 8013e2a:	4620      	mov	r0, r4
 8013e2c:	f7ff fc6a 	bl	8013704 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 8013e30:	687a      	ldr	r2, [r7, #4]
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	3340      	adds	r3, #64	@ 0x40
 8013e36:	4619      	mov	r1, r3
 8013e38:	4610      	mov	r0, r2
 8013e3a:	f7ff fbfb 	bl	8013634 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    box1.setPosition(0, 0, 480, 77);
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8013e44:	234d      	movs	r3, #77	@ 0x4d
 8013e46:	9300      	str	r3, [sp, #0]
 8013e48:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8013e4c:	2200      	movs	r2, #0
 8013e4e:	2100      	movs	r1, #0
 8013e50:	f7ff fa30 	bl	80132b4 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(224, 240, 55));
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8013e5a:	23e0      	movs	r3, #224	@ 0xe0
 8013e5c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8013e60:	23f0      	movs	r3, #240	@ 0xf0
 8013e62:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8013e66:	2337      	movs	r3, #55	@ 0x37
 8013e68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8013e6c:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8013e70:	041a      	lsls	r2, r3, #16
 8013e72:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8013e76:	021b      	lsls	r3, r3, #8
 8013e78:	431a      	orrs	r2, r3
 8013e7a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013e7e:	4313      	orrs	r3, r2
 8013e80:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8013e84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013e88:	4611      	mov	r1, r2
 8013e8a:	4618      	mov	r0, r3
 8013e8c:	f7ff f96e 	bl	801316c <_ZN8touchgfx9colortypeC1Em>
 8013e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e92:	4619      	mov	r1, r3
 8013e94:	4620      	mov	r0, r4
 8013e96:	f7ff fc35 	bl	8013704 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(box1);
 8013e9a:	687a      	ldr	r2, [r7, #4]
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	336c      	adds	r3, #108	@ 0x6c
 8013ea0:	4619      	mov	r1, r3
 8013ea2:	4610      	mov	r0, r2
 8013ea4:	f7ff fbc6 	bl	8013634 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    box1_1.setPosition(0, 195, 480, 77);
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	f103 0098 	add.w	r0, r3, #152	@ 0x98
 8013eae:	234d      	movs	r3, #77	@ 0x4d
 8013eb0:	9300      	str	r3, [sp, #0]
 8013eb2:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8013eb6:	22c3      	movs	r2, #195	@ 0xc3
 8013eb8:	2100      	movs	r1, #0
 8013eba:	f7ff f9fb 	bl	80132b4 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1_1.setColor(touchgfx::Color::getColorFromRGB(55, 240, 206));
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	f103 0498 	add.w	r4, r3, #152	@ 0x98
 8013ec4:	2337      	movs	r3, #55	@ 0x37
 8013ec6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8013eca:	23f0      	movs	r3, #240	@ 0xf0
 8013ecc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8013ed0:	23ce      	movs	r3, #206	@ 0xce
 8013ed2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8013ed6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8013eda:	041a      	lsls	r2, r3, #16
 8013edc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013ee0:	021b      	lsls	r3, r3, #8
 8013ee2:	431a      	orrs	r2, r3
 8013ee4:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8013ee8:	4313      	orrs	r3, r2
 8013eea:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8013eee:	f107 0320 	add.w	r3, r7, #32
 8013ef2:	4611      	mov	r1, r2
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	f7ff f939 	bl	801316c <_ZN8touchgfx9colortypeC1Em>
 8013efa:	6a3b      	ldr	r3, [r7, #32]
 8013efc:	4619      	mov	r1, r3
 8013efe:	4620      	mov	r0, r4
 8013f00:	f7ff fc00 	bl	8013704 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(box1_1);
 8013f04:	687a      	ldr	r2, [r7, #4]
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	3398      	adds	r3, #152	@ 0x98
 8013f0a:	4619      	mov	r1, r3
 8013f0c:	4610      	mov	r0, r2
 8013f0e:	f7ff fb91 	bl	8013634 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    box2.setPosition(0, 77, 480, 118);
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	f103 00c4 	add.w	r0, r3, #196	@ 0xc4
 8013f18:	2376      	movs	r3, #118	@ 0x76
 8013f1a:	9300      	str	r3, [sp, #0]
 8013f1c:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8013f20:	224d      	movs	r2, #77	@ 0x4d
 8013f22:	2100      	movs	r1, #0
 8013f24:	f7ff f9c6 	bl	80132b4 <_ZN8touchgfx8Drawable11setPositionEssss>
    box2.setColor(touchgfx::Color::getColorFromRGB(49, 232, 64));
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	f103 04c4 	add.w	r4, r3, #196	@ 0xc4
 8013f2e:	2331      	movs	r3, #49	@ 0x31
 8013f30:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8013f34:	23e8      	movs	r3, #232	@ 0xe8
 8013f36:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8013f3a:	2340      	movs	r3, #64	@ 0x40
 8013f3c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8013f40:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013f44:	041a      	lsls	r2, r3, #16
 8013f46:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8013f4a:	021b      	lsls	r3, r3, #8
 8013f4c:	431a      	orrs	r2, r3
 8013f4e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8013f52:	4313      	orrs	r3, r2
 8013f54:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8013f58:	f107 031c 	add.w	r3, r7, #28
 8013f5c:	4611      	mov	r1, r2
 8013f5e:	4618      	mov	r0, r3
 8013f60:	f7ff f904 	bl	801316c <_ZN8touchgfx9colortypeC1Em>
 8013f64:	69fb      	ldr	r3, [r7, #28]
 8013f66:	4619      	mov	r1, r3
 8013f68:	4620      	mov	r0, r4
 8013f6a:	f7ff fbcb 	bl	8013704 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(box2);
 8013f6e:	687a      	ldr	r2, [r7, #4]
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	33c4      	adds	r3, #196	@ 0xc4
 8013f74:	4619      	mov	r1, r3
 8013f76:	4610      	mov	r0, r2
 8013f78:	f7ff fb5c 	bl	8013634 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    button1.setXY(120, 111);
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	33f0      	adds	r3, #240	@ 0xf0
 8013f80:	226f      	movs	r2, #111	@ 0x6f
 8013f82:	2178      	movs	r1, #120	@ 0x78
 8013f84:	4618      	mov	r0, r3
 8013f86:	f7ff f9d4 	bl	8013332 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUND_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUND_ACTIVE_ID));
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	f103 04f0 	add.w	r4, r3, #240	@ 0xf0
 8013f90:	f107 0314 	add.w	r3, r7, #20
 8013f94:	2100      	movs	r1, #0
 8013f96:	4618      	mov	r0, r3
 8013f98:	f7ff f90e 	bl	80131b8 <_ZN8touchgfx6BitmapC1Et>
 8013f9c:	f107 0318 	add.w	r3, r7, #24
 8013fa0:	2101      	movs	r1, #1
 8013fa2:	4618      	mov	r0, r3
 8013fa4:	f7ff f908 	bl	80131b8 <_ZN8touchgfx6BitmapC1Et>
 8013fa8:	f107 0218 	add.w	r2, r7, #24
 8013fac:	f107 0314 	add.w	r3, r7, #20
 8013fb0:	4619      	mov	r1, r3
 8013fb2:	4620      	mov	r0, r4
 8013fb4:	f005 ff7c 	bl	8019eb0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	f103 02f0 	add.w	r2, r3, #240	@ 0xf0
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8013fc4:	4619      	mov	r1, r3
 8013fc6:	4610      	mov	r0, r2
 8013fc8:	f7ff fbd0 	bl	801376c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    add(button1);
 8013fcc:	687a      	ldr	r2, [r7, #4]
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	33f0      	adds	r3, #240	@ 0xf0
 8013fd2:	4619      	mov	r1, r3
 8013fd4:	4610      	mov	r0, r2
 8013fd6:	f7ff fb2d 	bl	8013634 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	4618      	mov	r0, r3
 8013fde:	373c      	adds	r7, #60	@ 0x3c
 8013fe0:	46bd      	mov	sp, r7
 8013fe2:	bd90      	pop	{r4, r7, pc}
 8013fe4:	0802c20c 	.word	0x0802c20c
 8013fe8:	08014087 	.word	0x08014087

08013fec <_ZN14screenViewBaseD1Ev>:

screenViewBase::~screenViewBase()
 8013fec:	b580      	push	{r7, lr}
 8013fee:	b082      	sub	sp, #8
 8013ff0:	af00      	add	r7, sp, #0
 8013ff2:	6078      	str	r0, [r7, #4]
 8013ff4:	4a15      	ldr	r2, [pc, #84]	@ (801404c <_ZN14screenViewBaseD1Ev+0x60>)
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	601a      	str	r2, [r3, #0]
{

}
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8014000:	4618      	mov	r0, r3
 8014002:	f000 f88b 	bl	801411c <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	33f0      	adds	r3, #240	@ 0xf0
 801400a:	4618      	mov	r0, r3
 801400c:	f7ff fe1c 	bl	8013c48 <_ZN8touchgfx6ButtonD1Ev>
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	33c4      	adds	r3, #196	@ 0xc4
 8014014:	4618      	mov	r0, r3
 8014016:	f7ff fdf5 	bl	8013c04 <_ZN8touchgfx3BoxD1Ev>
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	3398      	adds	r3, #152	@ 0x98
 801401e:	4618      	mov	r0, r3
 8014020:	f7ff fdf0 	bl	8013c04 <_ZN8touchgfx3BoxD1Ev>
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	336c      	adds	r3, #108	@ 0x6c
 8014028:	4618      	mov	r0, r3
 801402a:	f7ff fdeb 	bl	8013c04 <_ZN8touchgfx3BoxD1Ev>
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	3340      	adds	r3, #64	@ 0x40
 8014032:	4618      	mov	r0, r3
 8014034:	f7ff fde6 	bl	8013c04 <_ZN8touchgfx3BoxD1Ev>
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	4618      	mov	r0, r3
 801403c:	f7ff fe76 	bl	8013d2c <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	4618      	mov	r0, r3
 8014044:	3708      	adds	r7, #8
 8014046:	46bd      	mov	sp, r7
 8014048:	bd80      	pop	{r7, pc}
 801404a:	bf00      	nop
 801404c:	0802c20c 	.word	0x0802c20c

08014050 <_ZN14screenViewBaseD0Ev>:
screenViewBase::~screenViewBase()
 8014050:	b580      	push	{r7, lr}
 8014052:	b082      	sub	sp, #8
 8014054:	af00      	add	r7, sp, #0
 8014056:	6078      	str	r0, [r7, #4]
}
 8014058:	6878      	ldr	r0, [r7, #4]
 801405a:	f7ff ffc7 	bl	8013fec <_ZN14screenViewBaseD1Ev>
 801405e:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8014062:	6878      	ldr	r0, [r7, #4]
 8014064:	f015 fc9b 	bl	802999e <_ZdlPvj>
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	4618      	mov	r0, r3
 801406c:	3708      	adds	r7, #8
 801406e:	46bd      	mov	sp, r7
 8014070:	bd80      	pop	{r7, pc}

08014072 <_ZN14screenViewBase11setupScreenEv>:

void screenViewBase::setupScreen()
{
 8014072:	b480      	push	{r7}
 8014074:	b083      	sub	sp, #12
 8014076:	af00      	add	r7, sp, #0
 8014078:	6078      	str	r0, [r7, #4]

}
 801407a:	bf00      	nop
 801407c:	370c      	adds	r7, #12
 801407e:	46bd      	mov	sp, r7
 8014080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014084:	4770      	bx	lr

08014086 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void screenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8014086:	b580      	push	{r7, lr}
 8014088:	b082      	sub	sp, #8
 801408a:	af00      	add	r7, sp, #0
 801408c:	6078      	str	r0, [r7, #4]
 801408e:	6039      	str	r1, [r7, #0]
    if (&src == &button1)
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	33f0      	adds	r3, #240	@ 0xf0
 8014094:	683a      	ldr	r2, [r7, #0]
 8014096:	429a      	cmp	r2, r3
 8014098:	d106      	bne.n	80140a8 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When button1 clicked change screen to Screen1
        //Go to Screen1 with no screen transition
        application().gotoScreen1ScreenNoTransition();
 801409a:	6878      	ldr	r0, [r7, #4]
 801409c:	f7ff fe3b 	bl	8013d16 <_ZN14screenViewBase11applicationEv>
 80140a0:	4603      	mov	r3, r0
 80140a2:	4618      	mov	r0, r3
 80140a4:	f7fe fc88 	bl	80129b8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
}
 80140a8:	bf00      	nop
 80140aa:	3708      	adds	r7, #8
 80140ac:	46bd      	mov	sp, r7
 80140ae:	bd80      	pop	{r7, pc}

080140b0 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>:
    View()
 80140b0:	b580      	push	{r7, lr}
 80140b2:	b082      	sub	sp, #8
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	6078      	str	r0, [r7, #4]
        : presenter(0)
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	4618      	mov	r0, r3
 80140bc:	f009 fc9a 	bl	801d9f4 <_ZN8touchgfx6ScreenC1Ev>
 80140c0:	4a05      	ldr	r2, [pc, #20]	@ (80140d8 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev+0x28>)
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	601a      	str	r2, [r3, #0]
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	2200      	movs	r2, #0
 80140ca:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	4618      	mov	r0, r3
 80140d0:	3708      	adds	r7, #8
 80140d2:	46bd      	mov	sp, r7
 80140d4:	bd80      	pop	{r7, pc}
 80140d6:	bf00      	nop
 80140d8:	0802c258 	.word	0x0802c258

080140dc <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 80140dc:	b580      	push	{r7, lr}
 80140de:	b084      	sub	sp, #16
 80140e0:	af00      	add	r7, sp, #0
 80140e2:	60f8      	str	r0, [r7, #12]
 80140e4:	60b9      	str	r1, [r7, #8]
 80140e6:	4639      	mov	r1, r7
 80140e8:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	4618      	mov	r0, r3
 80140f0:	f7ff fcf4 	bl	8013adc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 80140f4:	4a08      	ldr	r2, [pc, #32]	@ (8014118 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	601a      	str	r2, [r3, #0]
 80140fa:	68fb      	ldr	r3, [r7, #12]
 80140fc:	68ba      	ldr	r2, [r7, #8]
 80140fe:	605a      	str	r2, [r3, #4]
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	3308      	adds	r3, #8
 8014104:	463a      	mov	r2, r7
 8014106:	e892 0003 	ldmia.w	r2, {r0, r1}
 801410a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801410e:	68fb      	ldr	r3, [r7, #12]
 8014110:	4618      	mov	r0, r3
 8014112:	3710      	adds	r7, #16
 8014114:	46bd      	mov	sp, r7
 8014116:	bd80      	pop	{r7, pc}
 8014118:	0802c240 	.word	0x0802c240

0801411c <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 801411c:	b580      	push	{r7, lr}
 801411e:	b082      	sub	sp, #8
 8014120:	af00      	add	r7, sp, #0
 8014122:	6078      	str	r0, [r7, #4]
 8014124:	4a05      	ldr	r2, [pc, #20]	@ (801413c <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	601a      	str	r2, [r3, #0]
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	4618      	mov	r0, r3
 801412e:	f7ff fd05 	bl	8013b3c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	4618      	mov	r0, r3
 8014136:	3708      	adds	r7, #8
 8014138:	46bd      	mov	sp, r7
 801413a:	bd80      	pop	{r7, pc}
 801413c:	0802c240 	.word	0x0802c240

08014140 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8014140:	b580      	push	{r7, lr}
 8014142:	b082      	sub	sp, #8
 8014144:	af00      	add	r7, sp, #0
 8014146:	6078      	str	r0, [r7, #4]
 8014148:	6878      	ldr	r0, [r7, #4]
 801414a:	f7ff ffe7 	bl	801411c <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801414e:	2110      	movs	r1, #16
 8014150:	6878      	ldr	r0, [r7, #4]
 8014152:	f015 fc24 	bl	802999e <_ZdlPvj>
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	4618      	mov	r0, r3
 801415a:	3708      	adds	r7, #8
 801415c:	46bd      	mov	sp, r7
 801415e:	bd80      	pop	{r7, pc}

08014160 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8014160:	b580      	push	{r7, lr}
 8014162:	b082      	sub	sp, #8
 8014164:	af00      	add	r7, sp, #0
 8014166:	6078      	str	r0, [r7, #4]
 8014168:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	685b      	ldr	r3, [r3, #4]
 801416e:	687a      	ldr	r2, [r7, #4]
 8014170:	68d2      	ldr	r2, [r2, #12]
 8014172:	1052      	asrs	r2, r2, #1
 8014174:	1898      	adds	r0, r3, r2
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	68db      	ldr	r3, [r3, #12]
 801417a:	f003 0301 	and.w	r3, r3, #1
 801417e:	2b00      	cmp	r3, #0
 8014180:	d102      	bne.n	8014188 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	689b      	ldr	r3, [r3, #8]
 8014186:	e00a      	b.n	801419e <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	685b      	ldr	r3, [r3, #4]
 801418c:	687a      	ldr	r2, [r7, #4]
 801418e:	68d2      	ldr	r2, [r2, #12]
 8014190:	1052      	asrs	r2, r2, #1
 8014192:	4413      	add	r3, r2
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	687a      	ldr	r2, [r7, #4]
 8014198:	6892      	ldr	r2, [r2, #8]
 801419a:	4413      	add	r3, r2
 801419c:	681b      	ldr	r3, [r3, #0]
 801419e:	6839      	ldr	r1, [r7, #0]
 80141a0:	4798      	blx	r3
    }
 80141a2:	bf00      	nop
 80141a4:	3708      	adds	r7, #8
 80141a6:	46bd      	mov	sp, r7
 80141a8:	bd80      	pop	{r7, pc}

080141aa <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80141aa:	b480      	push	{r7}
 80141ac:	b083      	sub	sp, #12
 80141ae:	af00      	add	r7, sp, #0
 80141b0:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	685b      	ldr	r3, [r3, #4]
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d010      	beq.n	80141dc <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	689b      	ldr	r3, [r3, #8]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d107      	bne.n	80141d2 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	68db      	ldr	r3, [r3, #12]
 80141c6:	f003 0301 	and.w	r3, r3, #1
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d101      	bne.n	80141d2 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80141ce:	2301      	movs	r3, #1
 80141d0:	e000      	b.n	80141d4 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 80141d2:	2300      	movs	r3, #0
 80141d4:	2b01      	cmp	r3, #1
 80141d6:	d001      	beq.n	80141dc <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80141d8:	2301      	movs	r3, #1
 80141da:	e000      	b.n	80141de <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 80141dc:	2300      	movs	r3, #0
    }
 80141de:	4618      	mov	r0, r3
 80141e0:	370c      	adds	r7, #12
 80141e2:	46bd      	mov	sp, r7
 80141e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e8:	4770      	bx	lr
	...

080141ec <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 80141ec:	b480      	push	{r7}
 80141ee:	af00      	add	r7, sp, #0
    return bitmap_database;
 80141f0:	4b02      	ldr	r3, [pc, #8]	@ (80141fc <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 80141f2:	4618      	mov	r0, r3
 80141f4:	46bd      	mov	sp, r7
 80141f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141fa:	4770      	bx	lr
 80141fc:	0802c284 	.word	0x0802c284

08014200 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8014200:	b480      	push	{r7}
 8014202:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8014204:	2304      	movs	r3, #4
}
 8014206:	4618      	mov	r0, r3
 8014208:	46bd      	mov	sp, r7
 801420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801420e:	4770      	bx	lr

08014210 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8014210:	b480      	push	{r7}
 8014212:	b085      	sub	sp, #20
 8014214:	af00      	add	r7, sp, #0
 8014216:	60f8      	str	r0, [r7, #12]
 8014218:	460b      	mov	r3, r1
 801421a:	607a      	str	r2, [r7, #4]
 801421c:	817b      	strh	r3, [r7, #10]
        return 0;
 801421e:	2300      	movs	r3, #0
    }
 8014220:	4618      	mov	r0, r3
 8014222:	3714      	adds	r7, #20
 8014224:	46bd      	mov	sp, r7
 8014226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801422a:	4770      	bx	lr

0801422c <_ZNK8touchgfx4Font12getGSUBTableEv>:
    virtual const uint16_t* getGSUBTable() const
 801422c:	b480      	push	{r7}
 801422e:	b083      	sub	sp, #12
 8014230:	af00      	add	r7, sp, #0
 8014232:	6078      	str	r0, [r7, #4]
        return 0;
 8014234:	2300      	movs	r3, #0
    }
 8014236:	4618      	mov	r0, r3
 8014238:	370c      	adds	r7, #12
 801423a:	46bd      	mov	sp, r7
 801423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014240:	4770      	bx	lr

08014242 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8014242:	b480      	push	{r7}
 8014244:	b083      	sub	sp, #12
 8014246:	af00      	add	r7, sp, #0
 8014248:	6078      	str	r0, [r7, #4]
        return 0;
 801424a:	2300      	movs	r3, #0
    }
 801424c:	4618      	mov	r0, r3
 801424e:	370c      	adds	r7, #12
 8014250:	46bd      	mov	sp, r7
 8014252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014256:	4770      	bx	lr

08014258 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8014258:	b480      	push	{r7}
 801425a:	b085      	sub	sp, #20
 801425c:	af00      	add	r7, sp, #0
 801425e:	60f8      	str	r0, [r7, #12]
 8014260:	60b9      	str	r1, [r7, #8]
 8014262:	4613      	mov	r3, r2
 8014264:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 8014266:	4a07      	ldr	r2, [pc, #28]	@ (8014284 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8014268:	68fb      	ldr	r3, [r7, #12]
 801426a:	6013      	str	r3, [r2, #0]
        fonts = f;
 801426c:	4a06      	ldr	r2, [pc, #24]	@ (8014288 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 801426e:	68bb      	ldr	r3, [r7, #8]
 8014270:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8014272:	4a06      	ldr	r2, [pc, #24]	@ (801428c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8014274:	88fb      	ldrh	r3, [r7, #6]
 8014276:	8013      	strh	r3, [r2, #0]
    }
 8014278:	bf00      	nop
 801427a:	3714      	adds	r7, #20
 801427c:	46bd      	mov	sp, r7
 801427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014282:	4770      	bx	lr
 8014284:	24013bb0 	.word	0x24013bb0
 8014288:	24013bb8 	.word	0x24013bb8
 801428c:	24013bb4 	.word	0x24013bb4

08014290 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8014290:	b40e      	push	{r1, r2, r3}
 8014292:	b580      	push	{r7, lr}
 8014294:	b085      	sub	sp, #20
 8014296:	af00      	add	r7, sp, #0
 8014298:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 801429a:	f107 0320 	add.w	r3, r7, #32
 801429e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80142a0:	68bb      	ldr	r3, [r7, #8]
 80142a2:	69fa      	ldr	r2, [r7, #28]
 80142a4:	2100      	movs	r1, #0
 80142a6:	6878      	ldr	r0, [r7, #4]
 80142a8:	f008 fcbe 	bl	801cc28 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80142ac:	4603      	mov	r3, r0
 80142ae:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80142b0:	89fb      	ldrh	r3, [r7, #14]
}
 80142b2:	4618      	mov	r0, r3
 80142b4:	3714      	adds	r7, #20
 80142b6:	46bd      	mov	sp, r7
 80142b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80142bc:	b003      	add	sp, #12
 80142be:	4770      	bx	lr

080142c0 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80142c0:	b40c      	push	{r2, r3}
 80142c2:	b580      	push	{r7, lr}
 80142c4:	b084      	sub	sp, #16
 80142c6:	af00      	add	r7, sp, #0
 80142c8:	6078      	str	r0, [r7, #4]
 80142ca:	460b      	mov	r3, r1
 80142cc:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 80142ce:	f107 031c 	add.w	r3, r7, #28
 80142d2:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80142d4:	78f9      	ldrb	r1, [r7, #3]
 80142d6:	68bb      	ldr	r3, [r7, #8]
 80142d8:	69ba      	ldr	r2, [r7, #24]
 80142da:	6878      	ldr	r0, [r7, #4]
 80142dc:	f008 fca4 	bl	801cc28 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80142e0:	4603      	mov	r3, r0
 80142e2:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80142e4:	89fb      	ldrh	r3, [r7, #14]
}
 80142e6:	4618      	mov	r0, r3
 80142e8:	3710      	adds	r7, #16
 80142ea:	46bd      	mov	sp, r7
 80142ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80142f0:	b002      	add	sp, #8
 80142f2:	4770      	bx	lr

080142f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 80142f4:	b580      	push	{r7, lr}
 80142f6:	b08a      	sub	sp, #40	@ 0x28
 80142f8:	af00      	add	r7, sp, #0
 80142fa:	6078      	str	r0, [r7, #4]
 80142fc:	460b      	mov	r3, r1
 80142fe:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014304:	2b00      	cmp	r3, #0
 8014306:	d016      	beq.n	8014336 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	3322      	adds	r3, #34	@ 0x22
 801430c:	627b      	str	r3, [r7, #36]	@ 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 801430e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014310:	8adb      	ldrh	r3, [r3, #22]
 8014312:	2b00      	cmp	r3, #0
 8014314:	d105      	bne.n	8014322 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8014316:	4b43      	ldr	r3, [pc, #268]	@ (8014424 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8014318:	4a43      	ldr	r2, [pc, #268]	@ (8014428 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 801431a:	21c5      	movs	r1, #197	@ 0xc5
 801431c:	4843      	ldr	r0, [pc, #268]	@ (801442c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 801431e:	f015 feb7 	bl	802a090 <__assert_func>
            return buffer[pos];
 8014322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014324:	8a9b      	ldrh	r3, [r3, #20]
 8014326:	461a      	mov	r2, r3
 8014328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801432a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801432e:	2b00      	cmp	r3, #0
 8014330:	d001      	beq.n	8014336 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8014332:	2301      	movs	r3, #1
 8014334:	e000      	b.n	8014338 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8014336:	2300      	movs	r3, #0
 8014338:	2b00      	cmp	r3, #0
 801433a:	d06a      	beq.n	8014412 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 801433c:	6878      	ldr	r0, [r7, #4]
 801433e:	f00a f9d1 	bl	801e6e4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	3322      	adds	r3, #34	@ 0x22
 8014346:	623b      	str	r3, [r7, #32]
 8014348:	2301      	movs	r3, #1
 801434a:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 801434c:	6a3b      	ldr	r3, [r7, #32]
 801434e:	8adb      	ldrh	r3, [r3, #22]
 8014350:	8bfa      	ldrh	r2, [r7, #30]
 8014352:	429a      	cmp	r2, r3
 8014354:	d305      	bcc.n	8014362 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8014356:	4b36      	ldr	r3, [pc, #216]	@ (8014430 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8014358:	4a36      	ldr	r2, [pc, #216]	@ (8014434 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 801435a:	21cb      	movs	r1, #203	@ 0xcb
 801435c:	4833      	ldr	r0, [pc, #204]	@ (801442c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 801435e:	f015 fe97 	bl	802a090 <__assert_func>
            const uint16_t index = pos + offset;
 8014362:	6a3b      	ldr	r3, [r7, #32]
 8014364:	8a9a      	ldrh	r2, [r3, #20]
 8014366:	8bfb      	ldrh	r3, [r7, #30]
 8014368:	4413      	add	r3, r2
 801436a:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 801436c:	8bbb      	ldrh	r3, [r7, #28]
 801436e:	2b09      	cmp	r3, #9
 8014370:	d801      	bhi.n	8014376 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8014372:	8bbb      	ldrh	r3, [r7, #28]
 8014374:	e001      	b.n	801437a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8014376:	8bbb      	ldrh	r3, [r7, #28]
 8014378:	3b0a      	subs	r3, #10
 801437a:	6a3a      	ldr	r2, [r7, #32]
 801437c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014380:	f640 123f 	movw	r2, #2367	@ 0x93f
 8014384:	4293      	cmp	r3, r2
 8014386:	bf0c      	ite	eq
 8014388:	2301      	moveq	r3, #1
 801438a:	2300      	movne	r3, #0
 801438c:	b2db      	uxtb	r3, r3
 801438e:	2b00      	cmp	r3, #0
 8014390:	d03f      	beq.n	8014412 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	3322      	adds	r3, #34	@ 0x22
 8014396:	687a      	ldr	r2, [r7, #4]
 8014398:	3222      	adds	r2, #34	@ 0x22
 801439a:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 801439c:	68ba      	ldr	r2, [r7, #8]
 801439e:	8ad2      	ldrh	r2, [r2, #22]
 80143a0:	2a00      	cmp	r2, #0
 80143a2:	d105      	bne.n	80143b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 80143a4:	4b1f      	ldr	r3, [pc, #124]	@ (8014424 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80143a6:	4a20      	ldr	r2, [pc, #128]	@ (8014428 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80143a8:	21c5      	movs	r1, #197	@ 0xc5
 80143aa:	4820      	ldr	r0, [pc, #128]	@ (801442c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80143ac:	f015 fe70 	bl	802a090 <__assert_func>
            return buffer[pos];
 80143b0:	68ba      	ldr	r2, [r7, #8]
 80143b2:	8a92      	ldrh	r2, [r2, #20]
 80143b4:	4611      	mov	r1, r2
 80143b6:	68ba      	ldr	r2, [r7, #8]
 80143b8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80143bc:	613b      	str	r3, [r7, #16]
 80143be:	4613      	mov	r3, r2
 80143c0:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 80143c2:	693b      	ldr	r3, [r7, #16]
 80143c4:	8adb      	ldrh	r3, [r3, #22]
 80143c6:	2b01      	cmp	r3, #1
 80143c8:	d806      	bhi.n	80143d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 80143ca:	4b1b      	ldr	r3, [pc, #108]	@ (8014438 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 80143cc:	4a1b      	ldr	r2, [pc, #108]	@ (801443c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 80143ce:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 80143d2:	4816      	ldr	r0, [pc, #88]	@ (801442c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80143d4:	f015 fe5c 	bl	802a090 <__assert_func>
            const uint16_t index = pos + 1;
 80143d8:	693b      	ldr	r3, [r7, #16]
 80143da:	8a9b      	ldrh	r3, [r3, #20]
 80143dc:	3301      	adds	r3, #1
 80143de:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 80143e0:	89bb      	ldrh	r3, [r7, #12]
 80143e2:	2b09      	cmp	r3, #9
 80143e4:	d801      	bhi.n	80143ea <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 80143e6:	89bb      	ldrh	r3, [r7, #12]
 80143e8:	e000      	b.n	80143ec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 80143ea:	2300      	movs	r3, #0
 80143ec:	693a      	ldr	r2, [r7, #16]
 80143ee:	89f9      	ldrh	r1, [r7, #14]
 80143f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 80143f4:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	3322      	adds	r3, #34	@ 0x22
 80143fa:	61bb      	str	r3, [r7, #24]
 80143fc:	f640 133f 	movw	r3, #2367	@ 0x93f
 8014400:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8014402:	69bb      	ldr	r3, [r7, #24]
 8014404:	8a9b      	ldrh	r3, [r3, #20]
 8014406:	4619      	mov	r1, r3
 8014408:	69bb      	ldr	r3, [r7, #24]
 801440a:	8afa      	ldrh	r2, [r7, #22]
 801440c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8014410:	bf00      	nop
        }
    }
    return getNextChar();
 8014412:	6878      	ldr	r0, [r7, #4]
 8014414:	f00a f868 	bl	801e4e8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8014418:	4603      	mov	r3, r0
}
 801441a:	4618      	mov	r0, r3
 801441c:	3728      	adds	r7, #40	@ 0x28
 801441e:	46bd      	mov	sp, r7
 8014420:	bd80      	pop	{r7, pc}
 8014422:	bf00      	nop
 8014424:	0802b598 	.word	0x0802b598
 8014428:	0802b5a4 	.word	0x0802b5a4
 801442c:	0802b650 	.word	0x0802b650
 8014430:	0802b698 	.word	0x0802b698
 8014434:	0802b6a8 	.word	0x0802b6a8
 8014438:	0802b77c 	.word	0x0802b77c
 801443c:	0802b788 	.word	0x0802b788

08014440 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8014440:	b580      	push	{r7, lr}
 8014442:	b082      	sub	sp, #8
 8014444:	af00      	add	r7, sp, #0
 8014446:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8014448:	6878      	ldr	r0, [r7, #4]
 801444a:	f00a f816 	bl	801e47a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 801444e:	bf00      	nop
 8014450:	3708      	adds	r7, #8
 8014452:	46bd      	mov	sp, r7
 8014454:	bd80      	pop	{r7, pc}
	...

08014458 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8014458:	b590      	push	{r4, r7, lr}
 801445a:	b085      	sub	sp, #20
 801445c:	af00      	add	r7, sp, #0
 801445e:	4603      	mov	r3, r0
 8014460:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8014462:	2300      	movs	r3, #0
 8014464:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8014466:	88fb      	ldrh	r3, [r7, #6]
 8014468:	2b00      	cmp	r3, #0
 801446a:	d127      	bne.n	80144bc <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 801446c:	88fb      	ldrh	r3, [r7, #6]
 801446e:	4a1e      	ldr	r2, [pc, #120]	@ (80144e8 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8014470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014474:	2b00      	cmp	r3, #0
 8014476:	d016      	beq.n	80144a6 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8014478:	88fb      	ldrh	r3, [r7, #6]
 801447a:	4a1b      	ldr	r2, [pc, #108]	@ (80144e8 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 801447c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014480:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8014482:	68bb      	ldr	r3, [r7, #8]
 8014484:	681b      	ldr	r3, [r3, #0]
 8014486:	68ba      	ldr	r2, [r7, #8]
 8014488:	4413      	add	r3, r2
 801448a:	4a18      	ldr	r2, [pc, #96]	@ (80144ec <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 801448c:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 801448e:	68bb      	ldr	r3, [r7, #8]
 8014490:	685b      	ldr	r3, [r3, #4]
 8014492:	68ba      	ldr	r2, [r7, #8]
 8014494:	4413      	add	r3, r2
 8014496:	4a16      	ldr	r2, [pc, #88]	@ (80144f0 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8014498:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 801449a:	68bb      	ldr	r3, [r7, #8]
 801449c:	689b      	ldr	r3, [r3, #8]
 801449e:	68ba      	ldr	r2, [r7, #8]
 80144a0:	4413      	add	r3, r2
 80144a2:	60fb      	str	r3, [r7, #12]
 80144a4:	e00a      	b.n	80144bc <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 80144a6:	4b11      	ldr	r3, [pc, #68]	@ (80144ec <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80144a8:	4a12      	ldr	r2, [pc, #72]	@ (80144f4 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 80144aa:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80144ac:	4a12      	ldr	r2, [pc, #72]	@ (80144f8 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 80144ae:	4b10      	ldr	r3, [pc, #64]	@ (80144f0 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80144b0:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80144b2:	88fb      	ldrh	r3, [r7, #6]
 80144b4:	4a11      	ldr	r2, [pc, #68]	@ (80144fc <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 80144b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80144ba:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d00d      	beq.n	80144de <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 80144c2:	4a0f      	ldr	r2, [pc, #60]	@ (8014500 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 80144c4:	88fb      	ldrh	r3, [r7, #6]
 80144c6:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80144c8:	f000 f824 	bl	8014514 <_ZN17TypedTextDatabase8getFontsEv>
 80144cc:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80144ce:	f000 f819 	bl	8014504 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 80144d2:	4603      	mov	r3, r0
 80144d4:	461a      	mov	r2, r3
 80144d6:	4621      	mov	r1, r4
 80144d8:	68f8      	ldr	r0, [r7, #12]
 80144da:	f7ff febd 	bl	8014258 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 80144de:	bf00      	nop
 80144e0:	3714      	adds	r7, #20
 80144e2:	46bd      	mov	sp, r7
 80144e4:	bd90      	pop	{r4, r7, pc}
 80144e6:	bf00      	nop
 80144e8:	240128d8 	.word	0x240128d8
 80144ec:	240128e0 	.word	0x240128e0
 80144f0:	240128e4 	.word	0x240128e4
 80144f4:	0802d5d8 	.word	0x0802d5d8
 80144f8:	0802d5d4 	.word	0x0802d5d4
 80144fc:	0802d5e0 	.word	0x0802d5e0
 8014500:	240128dc 	.word	0x240128dc

08014504 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8014504:	b480      	push	{r7}
 8014506:	af00      	add	r7, sp, #0
    return 0;
 8014508:	2300      	movs	r3, #0
}
 801450a:	4618      	mov	r0, r3
 801450c:	46bd      	mov	sp, r7
 801450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014512:	4770      	bx	lr

08014514 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8014514:	b480      	push	{r7}
 8014516:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8014518:	4b02      	ldr	r3, [pc, #8]	@ (8014524 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 801451a:	4618      	mov	r0, r3
 801451c:	46bd      	mov	sp, r7
 801451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014522:	4770      	bx	lr
 8014524:	240128e8 	.word	0x240128e8

08014528 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8014528:	b580      	push	{r7, lr}
 801452a:	b082      	sub	sp, #8
 801452c:	af00      	add	r7, sp, #0
 801452e:	6078      	str	r0, [r7, #4]
 8014530:	6039      	str	r1, [r7, #0]
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	2b01      	cmp	r3, #1
 8014536:	d113      	bne.n	8014560 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8014538:	683b      	ldr	r3, [r7, #0]
 801453a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801453e:	4293      	cmp	r3, r2
 8014540:	d10e      	bne.n	8014560 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 8014542:	f7fd fe6b 	bl	801221c <_Z23getFont_verdana_20_4bppv>
 8014546:	4603      	mov	r3, r0
};
 8014548:	4a07      	ldr	r2, [pc, #28]	@ (8014568 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 801454a:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 801454c:	f7fd fec0 	bl	80122d0 <_Z23getFont_verdana_40_4bppv>
 8014550:	4603      	mov	r3, r0
};
 8014552:	4a05      	ldr	r2, [pc, #20]	@ (8014568 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8014554:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 8014556:	f7fd fe07 	bl	8012168 <_Z23getFont_verdana_10_4bppv>
 801455a:	4603      	mov	r3, r0
};
 801455c:	4a02      	ldr	r2, [pc, #8]	@ (8014568 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 801455e:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 8014560:	bf00      	nop
 8014562:	3708      	adds	r7, #8
 8014564:	46bd      	mov	sp, r7
 8014566:	bd80      	pop	{r7, pc}
 8014568:	240128e8 	.word	0x240128e8

0801456c <_GLOBAL__sub_I_touchgfx_fonts>:
 801456c:	b580      	push	{r7, lr}
 801456e:	af00      	add	r7, sp, #0
 8014570:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8014574:	2001      	movs	r0, #1
 8014576:	f7ff ffd7 	bl	8014528 <_Z41__static_initialization_and_destruction_0ii>
 801457a:	bd80      	pop	{r7, pc}

0801457c <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 801457c:	b580      	push	{r7, lr}
 801457e:	b082      	sub	sp, #8
 8014580:	af00      	add	r7, sp, #0
 8014582:	6078      	str	r0, [r7, #4]
 8014584:	4a05      	ldr	r2, [pc, #20]	@ (801459c <_ZN19FrontendApplicationD1Ev+0x20>)
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	601a      	str	r2, [r3, #0]
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	4618      	mov	r0, r3
 801458e:	f7fe f917 	bl	80127c0 <_ZN23FrontendApplicationBaseD1Ev>
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	4618      	mov	r0, r3
 8014596:	3708      	adds	r7, #8
 8014598:	46bd      	mov	sp, r7
 801459a:	bd80      	pop	{r7, pc}
 801459c:	0802c340 	.word	0x0802c340

080145a0 <_ZN19FrontendApplicationD0Ev>:
 80145a0:	b580      	push	{r7, lr}
 80145a2:	b082      	sub	sp, #8
 80145a4:	af00      	add	r7, sp, #0
 80145a6:	6078      	str	r0, [r7, #4]
 80145a8:	6878      	ldr	r0, [r7, #4]
 80145aa:	f7ff ffe7 	bl	801457c <_ZN19FrontendApplicationD1Ev>
 80145ae:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 80145b2:	6878      	ldr	r0, [r7, #4]
 80145b4:	f015 f9f3 	bl	802999e <_ZdlPvj>
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	4618      	mov	r0, r3
 80145bc:	3708      	adds	r7, #8
 80145be:	46bd      	mov	sp, r7
 80145c0:	bd80      	pop	{r7, pc}

080145c2 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80145c2:	b580      	push	{r7, lr}
 80145c4:	b082      	sub	sp, #8
 80145c6:	af00      	add	r7, sp, #0
 80145c8:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 80145d0:	4618      	mov	r0, r3
 80145d2:	f000 f82d 	bl	8014630 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	4618      	mov	r0, r3
 80145da:	f007 fc59 	bl	801be90 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 80145de:	bf00      	nop
 80145e0:	3708      	adds	r7, #8
 80145e2:	46bd      	mov	sp, r7
 80145e4:	bd80      	pop	{r7, pc}
	...

080145e8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80145e8:	b580      	push	{r7, lr}
 80145ea:	b084      	sub	sp, #16
 80145ec:	af00      	add	r7, sp, #0
 80145ee:	60f8      	str	r0, [r7, #12]
 80145f0:	60b9      	str	r1, [r7, #8]
 80145f2:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 80145f4:	68fb      	ldr	r3, [r7, #12]
 80145f6:	687a      	ldr	r2, [r7, #4]
 80145f8:	68b9      	ldr	r1, [r7, #8]
 80145fa:	4618      	mov	r0, r3
 80145fc:	f7fe f930 	bl	8012860 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8014600:	4a03      	ldr	r2, [pc, #12]	@ (8014610 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	601a      	str	r2, [r3, #0]
{

}
 8014606:	68fb      	ldr	r3, [r7, #12]
 8014608:	4618      	mov	r0, r3
 801460a:	3710      	adds	r7, #16
 801460c:	46bd      	mov	sp, r7
 801460e:	bd80      	pop	{r7, pc}
 8014610:	0802c340 	.word	0x0802c340

08014614 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8014614:	b480      	push	{r7}
 8014616:	b083      	sub	sp, #12
 8014618:	af00      	add	r7, sp, #0
 801461a:	6078      	str	r0, [r7, #4]
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	2200      	movs	r2, #0
 8014620:	601a      	str	r2, [r3, #0]
{

}
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	4618      	mov	r0, r3
 8014626:	370c      	adds	r7, #12
 8014628:	46bd      	mov	sp, r7
 801462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801462e:	4770      	bx	lr

08014630 <_ZN5Model4tickEv>:

void Model::tick()
{
 8014630:	b480      	push	{r7}
 8014632:	b083      	sub	sp, #12
 8014634:	af00      	add	r7, sp, #0
 8014636:	6078      	str	r0, [r7, #4]

}
 8014638:	bf00      	nop
 801463a:	370c      	adds	r7, #12
 801463c:	46bd      	mov	sp, r7
 801463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014642:	4770      	bx	lr

08014644 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8014644:	b480      	push	{r7}
 8014646:	b083      	sub	sp, #12
 8014648:	af00      	add	r7, sp, #0
 801464a:	6078      	str	r0, [r7, #4]
    {
    }
 801464c:	bf00      	nop
 801464e:	370c      	adds	r7, #12
 8014650:	46bd      	mov	sp, r7
 8014652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014656:	4770      	bx	lr

08014658 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8014658:	b480      	push	{r7}
 801465a:	b083      	sub	sp, #12
 801465c:	af00      	add	r7, sp, #0
 801465e:	6078      	str	r0, [r7, #4]
    {
    }
 8014660:	bf00      	nop
 8014662:	370c      	adds	r7, #12
 8014664:	46bd      	mov	sp, r7
 8014666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801466a:	4770      	bx	lr

0801466c <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 801466c:	b480      	push	{r7}
 801466e:	b083      	sub	sp, #12
 8014670:	af00      	add	r7, sp, #0
 8014672:	6078      	str	r0, [r7, #4]
    {
 8014674:	4a04      	ldr	r2, [pc, #16]	@ (8014688 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	601a      	str	r2, [r3, #0]
    }
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	4618      	mov	r0, r3
 801467e:	370c      	adds	r7, #12
 8014680:	46bd      	mov	sp, r7
 8014682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014686:	4770      	bx	lr
 8014688:	0802c3cc 	.word	0x0802c3cc

0801468c <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 801468c:	b580      	push	{r7, lr}
 801468e:	b082      	sub	sp, #8
 8014690:	af00      	add	r7, sp, #0
 8014692:	6078      	str	r0, [r7, #4]
    }
 8014694:	6878      	ldr	r0, [r7, #4]
 8014696:	f7ff ffe9 	bl	801466c <_ZN8touchgfx9PresenterD1Ev>
 801469a:	2104      	movs	r1, #4
 801469c:	6878      	ldr	r0, [r7, #4]
 801469e:	f015 f97e 	bl	802999e <_ZdlPvj>
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	4618      	mov	r0, r3
 80146a6:	3708      	adds	r7, #8
 80146a8:	46bd      	mov	sp, r7
 80146aa:	bd80      	pop	{r7, pc}

080146ac <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 80146ac:	b480      	push	{r7}
 80146ae:	b083      	sub	sp, #12
 80146b0:	af00      	add	r7, sp, #0
 80146b2:	6078      	str	r0, [r7, #4]
    {
 80146b4:	4a04      	ldr	r2, [pc, #16]	@ (80146c8 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	601a      	str	r2, [r3, #0]
    }
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	4618      	mov	r0, r3
 80146be:	370c      	adds	r7, #12
 80146c0:	46bd      	mov	sp, r7
 80146c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146c6:	4770      	bx	lr
 80146c8:	0802c3cc 	.word	0x0802c3cc

080146cc <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 80146cc:	b480      	push	{r7}
 80146ce:	b083      	sub	sp, #12
 80146d0:	af00      	add	r7, sp, #0
 80146d2:	6078      	str	r0, [r7, #4]
 80146d4:	4a06      	ldr	r2, [pc, #24]	@ (80146f0 <_ZN13ModelListenerC1Ev+0x24>)
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	601a      	str	r2, [r3, #0]
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	2200      	movs	r2, #0
 80146de:	605a      	str	r2, [r3, #4]
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	4618      	mov	r0, r3
 80146e4:	370c      	adds	r7, #12
 80146e6:	46bd      	mov	sp, r7
 80146e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ec:	4770      	bx	lr
 80146ee:	bf00      	nop
 80146f0:	0802c3bc 	.word	0x0802c3bc

080146f4 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 80146f4:	b480      	push	{r7}
 80146f6:	b083      	sub	sp, #12
 80146f8:	af00      	add	r7, sp, #0
 80146fa:	6078      	str	r0, [r7, #4]
 80146fc:	4a04      	ldr	r2, [pc, #16]	@ (8014710 <_ZN13ModelListenerD1Ev+0x1c>)
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	601a      	str	r2, [r3, #0]
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	4618      	mov	r0, r3
 8014706:	370c      	adds	r7, #12
 8014708:	46bd      	mov	sp, r7
 801470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801470e:	4770      	bx	lr
 8014710:	0802c3bc 	.word	0x0802c3bc

08014714 <_ZN13ModelListenerD0Ev>:
 8014714:	b580      	push	{r7, lr}
 8014716:	b082      	sub	sp, #8
 8014718:	af00      	add	r7, sp, #0
 801471a:	6078      	str	r0, [r7, #4]
 801471c:	6878      	ldr	r0, [r7, #4]
 801471e:	f7ff ffe9 	bl	80146f4 <_ZN13ModelListenerD1Ev>
 8014722:	2108      	movs	r1, #8
 8014724:	6878      	ldr	r0, [r7, #4]
 8014726:	f015 f93a 	bl	802999e <_ZdlPvj>
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	4618      	mov	r0, r3
 801472e:	3708      	adds	r7, #8
 8014730:	46bd      	mov	sp, r7
 8014732:	bd80      	pop	{r7, pc}

08014734 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {}
 8014734:	b580      	push	{r7, lr}
 8014736:	b082      	sub	sp, #8
 8014738:	af00      	add	r7, sp, #0
 801473a:	6078      	str	r0, [r7, #4]
 801473c:	4a09      	ldr	r2, [pc, #36]	@ (8014764 <_ZN16Screen1PresenterD1Ev+0x30>)
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	601a      	str	r2, [r3, #0]
 8014742:	4a09      	ldr	r2, [pc, #36]	@ (8014768 <_ZN16Screen1PresenterD1Ev+0x34>)
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	605a      	str	r2, [r3, #4]
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	3304      	adds	r3, #4
 801474c:	4618      	mov	r0, r3
 801474e:	f7ff ffd1 	bl	80146f4 <_ZN13ModelListenerD1Ev>
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	4618      	mov	r0, r3
 8014756:	f7ff ff89 	bl	801466c <_ZN8touchgfx9PresenterD1Ev>
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	4618      	mov	r0, r3
 801475e:	3708      	adds	r7, #8
 8014760:	46bd      	mov	sp, r7
 8014762:	bd80      	pop	{r7, pc}
 8014764:	0802c394 	.word	0x0802c394
 8014768:	0802c3ac 	.word	0x0802c3ac

0801476c <_ZThn4_N16Screen1PresenterD1Ev>:
 801476c:	f1a0 0004 	sub.w	r0, r0, #4
 8014770:	e7e0      	b.n	8014734 <_ZN16Screen1PresenterD1Ev>
 8014772:	bf00      	nop

08014774 <_ZN16Screen1PresenterD0Ev>:
 8014774:	b580      	push	{r7, lr}
 8014776:	b082      	sub	sp, #8
 8014778:	af00      	add	r7, sp, #0
 801477a:	6078      	str	r0, [r7, #4]
 801477c:	6878      	ldr	r0, [r7, #4]
 801477e:	f7ff ffd9 	bl	8014734 <_ZN16Screen1PresenterD1Ev>
 8014782:	2110      	movs	r1, #16
 8014784:	6878      	ldr	r0, [r7, #4]
 8014786:	f015 f90a 	bl	802999e <_ZdlPvj>
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	4618      	mov	r0, r3
 801478e:	3708      	adds	r7, #8
 8014790:	46bd      	mov	sp, r7
 8014792:	bd80      	pop	{r7, pc}

08014794 <_ZThn4_N16Screen1PresenterD0Ev>:
 8014794:	f1a0 0004 	sub.w	r0, r0, #4
 8014798:	e7ec      	b.n	8014774 <_ZN16Screen1PresenterD0Ev>
	...

0801479c <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 801479c:	b580      	push	{r7, lr}
 801479e:	b082      	sub	sp, #8
 80147a0:	af00      	add	r7, sp, #0
 80147a2:	6078      	str	r0, [r7, #4]
 80147a4:	6039      	str	r1, [r7, #0]
    : view(v)
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	4618      	mov	r0, r3
 80147aa:	f7ff ff7f 	bl	80146ac <_ZN8touchgfx9PresenterC1Ev>
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	3304      	adds	r3, #4
 80147b2:	4618      	mov	r0, r3
 80147b4:	f7ff ff8a 	bl	80146cc <_ZN13ModelListenerC1Ev>
 80147b8:	4a06      	ldr	r2, [pc, #24]	@ (80147d4 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	601a      	str	r2, [r3, #0]
 80147be:	4a06      	ldr	r2, [pc, #24]	@ (80147d8 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	605a      	str	r2, [r3, #4]
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	683a      	ldr	r2, [r7, #0]
 80147c8:	60da      	str	r2, [r3, #12]
{

}
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	4618      	mov	r0, r3
 80147ce:	3708      	adds	r7, #8
 80147d0:	46bd      	mov	sp, r7
 80147d2:	bd80      	pop	{r7, pc}
 80147d4:	0802c394 	.word	0x0802c394
 80147d8:	0802c3ac 	.word	0x0802c3ac

080147dc <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 80147dc:	b480      	push	{r7}
 80147de:	b083      	sub	sp, #12
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	6078      	str	r0, [r7, #4]

}
 80147e4:	bf00      	nop
 80147e6:	370c      	adds	r7, #12
 80147e8:	46bd      	mov	sp, r7
 80147ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ee:	4770      	bx	lr

080147f0 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 80147f0:	b480      	push	{r7}
 80147f2:	b083      	sub	sp, #12
 80147f4:	af00      	add	r7, sp, #0
 80147f6:	6078      	str	r0, [r7, #4]

}
 80147f8:	bf00      	nop
 80147fa:	370c      	adds	r7, #12
 80147fc:	46bd      	mov	sp, r7
 80147fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014802:	4770      	bx	lr

08014804 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8014804:	b580      	push	{r7, lr}
 8014806:	b082      	sub	sp, #8
 8014808:	af00      	add	r7, sp, #0
 801480a:	6078      	str	r0, [r7, #4]
 801480c:	4a05      	ldr	r2, [pc, #20]	@ (8014824 <_ZN11Screen1ViewD1Ev+0x20>)
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	601a      	str	r2, [r3, #0]
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	4618      	mov	r0, r3
 8014816:	f7ff f8f5 	bl	8013a04 <_ZN15Screen1ViewBaseD1Ev>
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	4618      	mov	r0, r3
 801481e:	3708      	adds	r7, #8
 8014820:	46bd      	mov	sp, r7
 8014822:	bd80      	pop	{r7, pc}
 8014824:	0802c3e4 	.word	0x0802c3e4

08014828 <_ZN11Screen1ViewD0Ev>:
 8014828:	b580      	push	{r7, lr}
 801482a:	b082      	sub	sp, #8
 801482c:	af00      	add	r7, sp, #0
 801482e:	6078      	str	r0, [r7, #4]
 8014830:	6878      	ldr	r0, [r7, #4]
 8014832:	f7ff ffe7 	bl	8014804 <_ZN11Screen1ViewD1Ev>
 8014836:	21dc      	movs	r1, #220	@ 0xdc
 8014838:	6878      	ldr	r0, [r7, #4]
 801483a:	f015 f8b0 	bl	802999e <_ZdlPvj>
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	4618      	mov	r0, r3
 8014842:	3708      	adds	r7, #8
 8014844:	46bd      	mov	sp, r7
 8014846:	bd80      	pop	{r7, pc}

08014848 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 8014848:	b580      	push	{r7, lr}
 801484a:	b082      	sub	sp, #8
 801484c:	af00      	add	r7, sp, #0
 801484e:	6078      	str	r0, [r7, #4]
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	4618      	mov	r0, r3
 8014854:	f7ff f80c 	bl	8013870 <_ZN15Screen1ViewBaseC1Ev>
 8014858:	4a03      	ldr	r2, [pc, #12]	@ (8014868 <_ZN11Screen1ViewC1Ev+0x20>)
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	601a      	str	r2, [r3, #0]
{

}
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	4618      	mov	r0, r3
 8014862:	3708      	adds	r7, #8
 8014864:	46bd      	mov	sp, r7
 8014866:	bd80      	pop	{r7, pc}
 8014868:	0802c3e4 	.word	0x0802c3e4

0801486c <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 801486c:	b580      	push	{r7, lr}
 801486e:	b082      	sub	sp, #8
 8014870:	af00      	add	r7, sp, #0
 8014872:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	4618      	mov	r0, r3
 8014878:	f7ff f8fa 	bl	8013a70 <_ZN15Screen1ViewBase11setupScreenEv>
}
 801487c:	bf00      	nop
 801487e:	3708      	adds	r7, #8
 8014880:	46bd      	mov	sp, r7
 8014882:	bd80      	pop	{r7, pc}

08014884 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 8014884:	b580      	push	{r7, lr}
 8014886:	b082      	sub	sp, #8
 8014888:	af00      	add	r7, sp, #0
 801488a:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	4618      	mov	r0, r3
 8014890:	f7fe feb0 	bl	80135f4 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8014894:	bf00      	nop
 8014896:	3708      	adds	r7, #8
 8014898:	46bd      	mov	sp, r7
 801489a:	bd80      	pop	{r7, pc}

0801489c <_ZN15screenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~screenPresenter() {}
 801489c:	b580      	push	{r7, lr}
 801489e:	b082      	sub	sp, #8
 80148a0:	af00      	add	r7, sp, #0
 80148a2:	6078      	str	r0, [r7, #4]
 80148a4:	4a09      	ldr	r2, [pc, #36]	@ (80148cc <_ZN15screenPresenterD1Ev+0x30>)
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	601a      	str	r2, [r3, #0]
 80148aa:	4a09      	ldr	r2, [pc, #36]	@ (80148d0 <_ZN15screenPresenterD1Ev+0x34>)
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	605a      	str	r2, [r3, #4]
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	3304      	adds	r3, #4
 80148b4:	4618      	mov	r0, r3
 80148b6:	f7ff ff1d 	bl	80146f4 <_ZN13ModelListenerD1Ev>
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	4618      	mov	r0, r3
 80148be:	f7ff fed5 	bl	801466c <_ZN8touchgfx9PresenterD1Ev>
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	4618      	mov	r0, r3
 80148c6:	3708      	adds	r7, #8
 80148c8:	46bd      	mov	sp, r7
 80148ca:	bd80      	pop	{r7, pc}
 80148cc:	0802c418 	.word	0x0802c418
 80148d0:	0802c430 	.word	0x0802c430

080148d4 <_ZThn4_N15screenPresenterD1Ev>:
 80148d4:	f1a0 0004 	sub.w	r0, r0, #4
 80148d8:	e7e0      	b.n	801489c <_ZN15screenPresenterD1Ev>
 80148da:	bf00      	nop

080148dc <_ZN15screenPresenterD0Ev>:
 80148dc:	b580      	push	{r7, lr}
 80148de:	b082      	sub	sp, #8
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	6078      	str	r0, [r7, #4]
 80148e4:	6878      	ldr	r0, [r7, #4]
 80148e6:	f7ff ffd9 	bl	801489c <_ZN15screenPresenterD1Ev>
 80148ea:	2110      	movs	r1, #16
 80148ec:	6878      	ldr	r0, [r7, #4]
 80148ee:	f015 f856 	bl	802999e <_ZdlPvj>
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	4618      	mov	r0, r3
 80148f6:	3708      	adds	r7, #8
 80148f8:	46bd      	mov	sp, r7
 80148fa:	bd80      	pop	{r7, pc}

080148fc <_ZThn4_N15screenPresenterD0Ev>:
 80148fc:	f1a0 0004 	sub.w	r0, r0, #4
 8014900:	e7ec      	b.n	80148dc <_ZN15screenPresenterD0Ev>
	...

08014904 <_ZN15screenPresenterC1ER10screenView>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

screenPresenter::screenPresenter(screenView& v)
 8014904:	b580      	push	{r7, lr}
 8014906:	b082      	sub	sp, #8
 8014908:	af00      	add	r7, sp, #0
 801490a:	6078      	str	r0, [r7, #4]
 801490c:	6039      	str	r1, [r7, #0]
    : view(v)
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	4618      	mov	r0, r3
 8014912:	f7ff fecb 	bl	80146ac <_ZN8touchgfx9PresenterC1Ev>
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	3304      	adds	r3, #4
 801491a:	4618      	mov	r0, r3
 801491c:	f7ff fed6 	bl	80146cc <_ZN13ModelListenerC1Ev>
 8014920:	4a06      	ldr	r2, [pc, #24]	@ (801493c <_ZN15screenPresenterC1ER10screenView+0x38>)
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	601a      	str	r2, [r3, #0]
 8014926:	4a06      	ldr	r2, [pc, #24]	@ (8014940 <_ZN15screenPresenterC1ER10screenView+0x3c>)
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	605a      	str	r2, [r3, #4]
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	683a      	ldr	r2, [r7, #0]
 8014930:	60da      	str	r2, [r3, #12]
{

}
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	4618      	mov	r0, r3
 8014936:	3708      	adds	r7, #8
 8014938:	46bd      	mov	sp, r7
 801493a:	bd80      	pop	{r7, pc}
 801493c:	0802c418 	.word	0x0802c418
 8014940:	0802c430 	.word	0x0802c430

08014944 <_ZN15screenPresenter8activateEv>:

void screenPresenter::activate()
{
 8014944:	b480      	push	{r7}
 8014946:	b083      	sub	sp, #12
 8014948:	af00      	add	r7, sp, #0
 801494a:	6078      	str	r0, [r7, #4]

}
 801494c:	bf00      	nop
 801494e:	370c      	adds	r7, #12
 8014950:	46bd      	mov	sp, r7
 8014952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014956:	4770      	bx	lr

08014958 <_ZN15screenPresenter10deactivateEv>:

void screenPresenter::deactivate()
{
 8014958:	b480      	push	{r7}
 801495a:	b083      	sub	sp, #12
 801495c:	af00      	add	r7, sp, #0
 801495e:	6078      	str	r0, [r7, #4]

}
 8014960:	bf00      	nop
 8014962:	370c      	adds	r7, #12
 8014964:	46bd      	mov	sp, r7
 8014966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801496a:	4770      	bx	lr

0801496c <_ZN10screenViewD1Ev>:

class screenView : public screenViewBase
{
public:
    screenView();
    virtual ~screenView() {}
 801496c:	b580      	push	{r7, lr}
 801496e:	b082      	sub	sp, #8
 8014970:	af00      	add	r7, sp, #0
 8014972:	6078      	str	r0, [r7, #4]
 8014974:	4a05      	ldr	r2, [pc, #20]	@ (801498c <_ZN10screenViewD1Ev+0x20>)
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	601a      	str	r2, [r3, #0]
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	4618      	mov	r0, r3
 801497e:	f7ff fb35 	bl	8013fec <_ZN14screenViewBaseD1Ev>
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	4618      	mov	r0, r3
 8014986:	3708      	adds	r7, #8
 8014988:	46bd      	mov	sp, r7
 801498a:	bd80      	pop	{r7, pc}
 801498c:	0802c440 	.word	0x0802c440

08014990 <_ZN10screenViewD0Ev>:
 8014990:	b580      	push	{r7, lr}
 8014992:	b082      	sub	sp, #8
 8014994:	af00      	add	r7, sp, #0
 8014996:	6078      	str	r0, [r7, #4]
 8014998:	6878      	ldr	r0, [r7, #4]
 801499a:	f7ff ffe7 	bl	801496c <_ZN10screenViewD1Ev>
 801499e:	f44f 719a 	mov.w	r1, #308	@ 0x134
 80149a2:	6878      	ldr	r0, [r7, #4]
 80149a4:	f014 fffb 	bl	802999e <_ZdlPvj>
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	4618      	mov	r0, r3
 80149ac:	3708      	adds	r7, #8
 80149ae:	46bd      	mov	sp, r7
 80149b0:	bd80      	pop	{r7, pc}
	...

080149b4 <_ZN10screenViewC1Ev>:
#include <gui/screen_screen/screenView.hpp>

screenView::screenView()
 80149b4:	b580      	push	{r7, lr}
 80149b6:	b082      	sub	sp, #8
 80149b8:	af00      	add	r7, sp, #0
 80149ba:	6078      	str	r0, [r7, #4]
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	4618      	mov	r0, r3
 80149c0:	f7ff f9d6 	bl	8013d70 <_ZN14screenViewBaseC1Ev>
 80149c4:	4a03      	ldr	r2, [pc, #12]	@ (80149d4 <_ZN10screenViewC1Ev+0x20>)
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	601a      	str	r2, [r3, #0]
{

}
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	4618      	mov	r0, r3
 80149ce:	3708      	adds	r7, #8
 80149d0:	46bd      	mov	sp, r7
 80149d2:	bd80      	pop	{r7, pc}
 80149d4:	0802c440 	.word	0x0802c440

080149d8 <_ZN10screenView11setupScreenEv>:

void screenView::setupScreen()
{
 80149d8:	b580      	push	{r7, lr}
 80149da:	b082      	sub	sp, #8
 80149dc:	af00      	add	r7, sp, #0
 80149de:	6078      	str	r0, [r7, #4]
    screenViewBase::setupScreen();
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	4618      	mov	r0, r3
 80149e4:	f7ff fb45 	bl	8014072 <_ZN14screenViewBase11setupScreenEv>
}
 80149e8:	bf00      	nop
 80149ea:	3708      	adds	r7, #8
 80149ec:	46bd      	mov	sp, r7
 80149ee:	bd80      	pop	{r7, pc}

080149f0 <_ZN10screenView14tearDownScreenEv>:

void screenView::tearDownScreen()
{
 80149f0:	b580      	push	{r7, lr}
 80149f2:	b082      	sub	sp, #8
 80149f4:	af00      	add	r7, sp, #0
 80149f6:	6078      	str	r0, [r7, #4]
    screenViewBase::tearDownScreen();
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	4618      	mov	r0, r3
 80149fc:	f7fe fdfa 	bl	80135f4 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8014a00:	bf00      	nop
 8014a02:	3708      	adds	r7, #8
 8014a04:	46bd      	mov	sp, r7
 8014a06:	bd80      	pop	{r7, pc}

08014a08 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8014a08:	b480      	push	{r7}
 8014a0a:	b083      	sub	sp, #12
 8014a0c:	af00      	add	r7, sp, #0
 8014a0e:	6078      	str	r0, [r7, #4]
    {
 8014a10:	4a04      	ldr	r2, [pc, #16]	@ (8014a24 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	601a      	str	r2, [r3, #0]
    }
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	4618      	mov	r0, r3
 8014a1a:	370c      	adds	r7, #12
 8014a1c:	46bd      	mov	sp, r7
 8014a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a22:	4770      	bx	lr
 8014a24:	0802c48c 	.word	0x0802c48c

08014a28 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8014a28:	b580      	push	{r7, lr}
 8014a2a:	b082      	sub	sp, #8
 8014a2c:	af00      	add	r7, sp, #0
 8014a2e:	6078      	str	r0, [r7, #4]
    }
 8014a30:	6878      	ldr	r0, [r7, #4]
 8014a32:	f7ff ffe9 	bl	8014a08 <_ZN8touchgfx15TouchControllerD1Ev>
 8014a36:	2104      	movs	r1, #4
 8014a38:	6878      	ldr	r0, [r7, #4]
 8014a3a:	f014 ffb0 	bl	802999e <_ZdlPvj>
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	4618      	mov	r0, r3
 8014a42:	3708      	adds	r7, #8
 8014a44:	46bd      	mov	sp, r7
 8014a46:	bd80      	pop	{r7, pc}

08014a48 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8014a48:	b480      	push	{r7}
 8014a4a:	b083      	sub	sp, #12
 8014a4c:	af00      	add	r7, sp, #0
 8014a4e:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8014a50:	bf00      	nop
 8014a52:	370c      	adds	r7, #12
 8014a54:	46bd      	mov	sp, r7
 8014a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a5a:	4770      	bx	lr

08014a5c <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8014a5c:	b480      	push	{r7}
 8014a5e:	b085      	sub	sp, #20
 8014a60:	af00      	add	r7, sp, #0
 8014a62:	60f8      	str	r0, [r7, #12]
 8014a64:	60b9      	str	r1, [r7, #8]
 8014a66:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8014a68:	2300      	movs	r3, #0
}
 8014a6a:	4618      	mov	r0, r3
 8014a6c:	3714      	adds	r7, #20
 8014a6e:	46bd      	mov	sp, r7
 8014a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a74:	4770      	bx	lr
	...

08014a78 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8014a78:	b580      	push	{r7, lr}
 8014a7a:	b082      	sub	sp, #8
 8014a7c:	af00      	add	r7, sp, #0
 8014a7e:	6078      	str	r0, [r7, #4]
 8014a80:	4a05      	ldr	r2, [pc, #20]	@ (8014a98 <_ZN20STM32TouchControllerD1Ev+0x20>)
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	601a      	str	r2, [r3, #0]
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	4618      	mov	r0, r3
 8014a8a:	f7ff ffbd 	bl	8014a08 <_ZN8touchgfx15TouchControllerD1Ev>
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	4618      	mov	r0, r3
 8014a92:	3708      	adds	r7, #8
 8014a94:	46bd      	mov	sp, r7
 8014a96:	bd80      	pop	{r7, pc}
 8014a98:	0802c474 	.word	0x0802c474

08014a9c <_ZN20STM32TouchControllerD0Ev>:
 8014a9c:	b580      	push	{r7, lr}
 8014a9e:	b082      	sub	sp, #8
 8014aa0:	af00      	add	r7, sp, #0
 8014aa2:	6078      	str	r0, [r7, #4]
 8014aa4:	6878      	ldr	r0, [r7, #4]
 8014aa6:	f7ff ffe7 	bl	8014a78 <_ZN20STM32TouchControllerD1Ev>
 8014aaa:	2104      	movs	r1, #4
 8014aac:	6878      	ldr	r0, [r7, #4]
 8014aae:	f014 ff76 	bl	802999e <_ZdlPvj>
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	4618      	mov	r0, r3
 8014ab6:	3708      	adds	r7, #8
 8014ab8:	46bd      	mov	sp, r7
 8014aba:	bd80      	pop	{r7, pc}

08014abc <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 8014abc:	b480      	push	{r7}
 8014abe:	af00      	add	r7, sp, #0

}
 8014ac0:	bf00      	nop
 8014ac2:	46bd      	mov	sp, r7
 8014ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac8:	4770      	bx	lr
	...

08014acc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8014acc:	b480      	push	{r7}
 8014ace:	b083      	sub	sp, #12
 8014ad0:	af00      	add	r7, sp, #0
 8014ad2:	4603      	mov	r3, r0
 8014ad4:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8014ad6:	79fb      	ldrb	r3, [r7, #7]
 8014ad8:	2b03      	cmp	r3, #3
 8014ada:	d80c      	bhi.n	8014af6 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 8014adc:	a201      	add	r2, pc, #4	@ (adr r2, 8014ae4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 8014ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ae2:	bf00      	nop
 8014ae4:	08014af5 	.word	0x08014af5
 8014ae8:	08014af5 	.word	0x08014af5
 8014aec:	08014af5 	.word	0x08014af5
 8014af0:	08014af5 	.word	0x08014af5
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 8014af4:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 8014af6:	bf00      	nop
 8014af8:	370c      	adds	r7, #12
 8014afa:	46bd      	mov	sp, r7
 8014afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b00:	4770      	bx	lr
 8014b02:	bf00      	nop

08014b04 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8014b04:	b480      	push	{r7}
 8014b06:	b083      	sub	sp, #12
 8014b08:	af00      	add	r7, sp, #0
 8014b0a:	4603      	mov	r3, r0
 8014b0c:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8014b0e:	79fb      	ldrb	r3, [r7, #7]
 8014b10:	2b03      	cmp	r3, #3
 8014b12:	d80c      	bhi.n	8014b2e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 8014b14:	a201      	add	r2, pc, #4	@ (adr r2, 8014b1c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 8014b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b1a:	bf00      	nop
 8014b1c:	08014b2d 	.word	0x08014b2d
 8014b20:	08014b2d 	.word	0x08014b2d
 8014b24:	08014b2d 	.word	0x08014b2d
 8014b28:	08014b2d 	.word	0x08014b2d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 8014b2c:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 8014b2e:	bf00      	nop
 8014b30:	370c      	adds	r7, #12
 8014b32:	46bd      	mov	sp, r7
 8014b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b38:	4770      	bx	lr
 8014b3a:	bf00      	nop

08014b3c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8014b3c:	b480      	push	{r7}
 8014b3e:	b083      	sub	sp, #12
 8014b40:	af00      	add	r7, sp, #0
 8014b42:	4603      	mov	r3, r0
 8014b44:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8014b46:	79fb      	ldrb	r3, [r7, #7]
 8014b48:	2b03      	cmp	r3, #3
 8014b4a:	d80c      	bhi.n	8014b66 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 8014b4c:	a201      	add	r2, pc, #4	@ (adr r2, 8014b54 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 8014b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b52:	bf00      	nop
 8014b54:	08014b65 	.word	0x08014b65
 8014b58:	08014b65 	.word	0x08014b65
 8014b5c:	08014b65 	.word	0x08014b65
 8014b60:	08014b65 	.word	0x08014b65
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 8014b64:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 8014b66:	bf00      	nop
 8014b68:	370c      	adds	r7, #12
 8014b6a:	46bd      	mov	sp, r7
 8014b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b70:	4770      	bx	lr
 8014b72:	bf00      	nop

08014b74 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8014b74:	b480      	push	{r7}
 8014b76:	b083      	sub	sp, #12
 8014b78:	af00      	add	r7, sp, #0
 8014b7a:	6078      	str	r0, [r7, #4]
    {
 8014b7c:	4a04      	ldr	r2, [pc, #16]	@ (8014b90 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	601a      	str	r2, [r3, #0]
    }
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	4618      	mov	r0, r3
 8014b86:	370c      	adds	r7, #12
 8014b88:	46bd      	mov	sp, r7
 8014b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b8e:	4770      	bx	lr
 8014b90:	0802c9f8 	.word	0x0802c9f8

08014b94 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8014b94:	b580      	push	{r7, lr}
 8014b96:	b082      	sub	sp, #8
 8014b98:	af00      	add	r7, sp, #0
 8014b9a:	6078      	str	r0, [r7, #4]
    }
 8014b9c:	6878      	ldr	r0, [r7, #4]
 8014b9e:	f7ff ffe9 	bl	8014b74 <_ZN8touchgfx3HALD1Ev>
 8014ba2:	217c      	movs	r1, #124	@ 0x7c
 8014ba4:	6878      	ldr	r0, [r7, #4]
 8014ba6:	f014 fefa 	bl	802999e <_ZdlPvj>
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	4618      	mov	r0, r3
 8014bae:	3708      	adds	r7, #8
 8014bb0:	46bd      	mov	sp, r7
 8014bb2:	bd80      	pop	{r7, pc}

08014bb4 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8014bb4:	b480      	push	{r7}
 8014bb6:	b083      	sub	sp, #12
 8014bb8:	af00      	add	r7, sp, #0
 8014bba:	6078      	str	r0, [r7, #4]
 8014bbc:	460b      	mov	r3, r1
 8014bbe:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	78fa      	ldrb	r2, [r7, #3]
 8014bc4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	2201      	movs	r2, #1
 8014bcc:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    }
 8014bd0:	bf00      	nop
 8014bd2:	370c      	adds	r7, #12
 8014bd4:	46bd      	mov	sp, r7
 8014bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bda:	4770      	bx	lr

08014bdc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8014bdc:	b580      	push	{r7, lr}
 8014bde:	b082      	sub	sp, #8
 8014be0:	af00      	add	r7, sp, #0
 8014be2:	6078      	str	r0, [r7, #4]
 8014be4:	460b      	mov	r3, r1
 8014be6:	807b      	strh	r3, [r7, #2]
 8014be8:	4613      	mov	r3, r2
 8014bea:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8014bec:	4b0c      	ldr	r3, [pc, #48]	@ (8014c20 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 8014bee:	881b      	ldrh	r3, [r3, #0]
 8014bf0:	887a      	ldrh	r2, [r7, #2]
 8014bf2:	429a      	cmp	r2, r3
 8014bf4:	d304      	bcc.n	8014c00 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 8014bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8014c24 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8014bf8:	881b      	ldrh	r3, [r3, #0]
 8014bfa:	883a      	ldrh	r2, [r7, #0]
 8014bfc:	429a      	cmp	r2, r3
 8014bfe:	d205      	bcs.n	8014c0c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8014c00:	4b09      	ldr	r3, [pc, #36]	@ (8014c28 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 8014c02:	4a0a      	ldr	r2, [pc, #40]	@ (8014c2c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8014c04:	219e      	movs	r1, #158	@ 0x9e
 8014c06:	480a      	ldr	r0, [pc, #40]	@ (8014c30 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8014c08:	f015 fa42 	bl	802a090 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8014c0c:	4a09      	ldr	r2, [pc, #36]	@ (8014c34 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 8014c0e:	887b      	ldrh	r3, [r7, #2]
 8014c10:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8014c12:	4a09      	ldr	r2, [pc, #36]	@ (8014c38 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8014c14:	883b      	ldrh	r3, [r7, #0]
 8014c16:	8013      	strh	r3, [r2, #0]
    }
 8014c18:	bf00      	nop
 8014c1a:	3708      	adds	r7, #8
 8014c1c:	46bd      	mov	sp, r7
 8014c1e:	bd80      	pop	{r7, pc}
 8014c20:	24013b4c 	.word	0x24013b4c
 8014c24:	24013b4e 	.word	0x24013b4e
 8014c28:	0802b83c 	.word	0x0802b83c
 8014c2c:	0802b8a0 	.word	0x0802b8a0
 8014c30:	0802b8e4 	.word	0x0802b8e4
 8014c34:	24013b52 	.word	0x24013b52
 8014c38:	24013b54 	.word	0x24013b54

08014c3c <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8014c3c:	b580      	push	{r7, lr}
 8014c3e:	b082      	sub	sp, #8
 8014c40:	af00      	add	r7, sp, #0
 8014c42:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d009      	beq.n	8014c62 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	685a      	ldr	r2, [r3, #4]
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	685b      	ldr	r3, [r3, #4]
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	4610      	mov	r0, r2
 8014c5c:	4798      	blx	r3
 8014c5e:	4603      	mov	r3, r0
 8014c60:	e000      	b.n	8014c64 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 8014c62:	2300      	movs	r3, #0
    }
 8014c64:	4618      	mov	r0, r3
 8014c66:	3708      	adds	r7, #8
 8014c68:	46bd      	mov	sp, r7
 8014c6a:	bd80      	pop	{r7, pc}

08014c6c <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8014c6c:	b580      	push	{r7, lr}
 8014c6e:	b082      	sub	sp, #8
 8014c70:	af00      	add	r7, sp, #0
 8014c72:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8014c74:	6878      	ldr	r0, [r7, #4]
 8014c76:	f003 fbd3 	bl	8018420 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	33ac      	adds	r3, #172	@ 0xac
 8014c80:	681b      	ldr	r3, [r3, #0]
 8014c82:	6878      	ldr	r0, [r7, #4]
 8014c84:	4798      	blx	r3
    }
 8014c86:	bf00      	nop
 8014c88:	3708      	adds	r7, #8
 8014c8a:	46bd      	mov	sp, r7
 8014c8c:	bd80      	pop	{r7, pc}

08014c8e <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8014c8e:	b480      	push	{r7}
 8014c90:	b083      	sub	sp, #12
 8014c92:	af00      	add	r7, sp, #0
 8014c94:	6078      	str	r0, [r7, #4]
 8014c96:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 8014c98:	2300      	movs	r3, #0
    }
 8014c9a:	4618      	mov	r0, r3
 8014c9c:	370c      	adds	r7, #12
 8014c9e:	46bd      	mov	sp, r7
 8014ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ca4:	4770      	bx	lr
	...

08014ca8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8014ca8:	b580      	push	{r7, lr}
 8014caa:	b084      	sub	sp, #16
 8014cac:	af00      	add	r7, sp, #0
 8014cae:	60f8      	str	r0, [r7, #12]
 8014cb0:	60b9      	str	r1, [r7, #8]
 8014cb2:	607a      	str	r2, [r7, #4]
 8014cb4:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8014cb6:	68bb      	ldr	r3, [r7, #8]
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d106      	bne.n	8014cca <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8014cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8014cfc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 8014cbe:	4a10      	ldr	r2, [pc, #64]	@ (8014d00 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 8014cc0:	f240 21d2 	movw	r1, #722	@ 0x2d2
 8014cc4:	480f      	ldr	r0, [pc, #60]	@ (8014d04 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8014cc6:	f015 f9e3 	bl	802a090 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	68ba      	ldr	r2, [r7, #8]
 8014cce:	63da      	str	r2, [r3, #60]	@ 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	687a      	ldr	r2, [r7, #4]
 8014cd4:	641a      	str	r2, [r3, #64]	@ 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	bf14      	ite	ne
 8014cdc:	2301      	movne	r3, #1
 8014cde:	2300      	moveq	r3, #0
 8014ce0:	b2da      	uxtb	r2, r3
 8014ce2:	4b09      	ldr	r3, [pc, #36]	@ (8014d08 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8014ce4:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	338c      	adds	r3, #140	@ 0x8c
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	6839      	ldr	r1, [r7, #0]
 8014cf0:	68f8      	ldr	r0, [r7, #12]
 8014cf2:	4798      	blx	r3
    }
 8014cf4:	bf00      	nop
 8014cf6:	3710      	adds	r7, #16
 8014cf8:	46bd      	mov	sp, r7
 8014cfa:	bd80      	pop	{r7, pc}
 8014cfc:	0802b928 	.word	0x0802b928
 8014d00:	0802b960 	.word	0x0802b960
 8014d04:	0802b8e4 	.word	0x0802b8e4
 8014d08:	24013b56 	.word	0x24013b56

08014d0c <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 8014d0c:	b480      	push	{r7}
 8014d0e:	b083      	sub	sp, #12
 8014d10:	af00      	add	r7, sp, #0
 8014d12:	6078      	str	r0, [r7, #4]
 8014d14:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	683a      	ldr	r2, [r7, #0]
 8014d1a:	645a      	str	r2, [r3, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8014d1c:	683b      	ldr	r3, [r7, #0]
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	bf14      	ite	ne
 8014d22:	2301      	movne	r3, #1
 8014d24:	2300      	moveq	r3, #0
 8014d26:	b2da      	uxtb	r2, r3
 8014d28:	4b03      	ldr	r3, [pc, #12]	@ (8014d38 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 8014d2a:	701a      	strb	r2, [r3, #0]
    }
 8014d2c:	bf00      	nop
 8014d2e:	370c      	adds	r7, #12
 8014d30:	46bd      	mov	sp, r7
 8014d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d36:	4770      	bx	lr
 8014d38:	24013b57 	.word	0x24013b57

08014d3c <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8014d3c:	b480      	push	{r7}
 8014d3e:	b083      	sub	sp, #12
 8014d40:	af00      	add	r7, sp, #0
 8014d42:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8014d44:	2300      	movs	r3, #0
    }
 8014d46:	4618      	mov	r0, r3
 8014d48:	370c      	adds	r7, #12
 8014d4a:	46bd      	mov	sp, r7
 8014d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d50:	4770      	bx	lr

08014d52 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8014d52:	b580      	push	{r7, lr}
 8014d54:	b082      	sub	sp, #8
 8014d56:	af00      	add	r7, sp, #0
 8014d58:	6078      	str	r0, [r7, #4]
 8014d5a:	460b      	mov	r3, r1
 8014d5c:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d004      	beq.n	8014d70 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014d6a:	887a      	ldrh	r2, [r7, #2]
 8014d6c:	4610      	mov	r0, r2
 8014d6e:	4798      	blx	r3
        }
    }
 8014d70:	bf00      	nop
 8014d72:	3708      	adds	r7, #8
 8014d74:	46bd      	mov	sp, r7
 8014d76:	bd80      	pop	{r7, pc}

08014d78 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 8014d78:	b480      	push	{r7}
 8014d7a:	b083      	sub	sp, #12
 8014d7c:	af00      	add	r7, sp, #0
 8014d7e:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 8014d80:	f64f 73ff 	movw	r3, #65535	@ 0xffff
    }
 8014d84:	4618      	mov	r0, r3
 8014d86:	370c      	adds	r7, #12
 8014d88:	46bd      	mov	sp, r7
 8014d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d8e:	4770      	bx	lr

08014d90 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8014d90:	b580      	push	{r7, lr}
 8014d92:	b082      	sub	sp, #8
 8014d94:	af00      	add	r7, sp, #0
 8014d96:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	685a      	ldr	r2, [r3, #4]
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	685b      	ldr	r3, [r3, #4]
 8014da0:	681b      	ldr	r3, [r3, #0]
 8014da2:	3318      	adds	r3, #24
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	4610      	mov	r0, r2
 8014da8:	4798      	blx	r3
 8014daa:	4603      	mov	r3, r0
    }
 8014dac:	4618      	mov	r0, r3
 8014dae:	3708      	adds	r7, #8
 8014db0:	46bd      	mov	sp, r7
 8014db2:	bd80      	pop	{r7, pc}

08014db4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8014db4:	b480      	push	{r7}
 8014db6:	b085      	sub	sp, #20
 8014db8:	af00      	add	r7, sp, #0
 8014dba:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	f893 2078 	ldrb.w	r2, [r3, #120]	@ 0x78
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8014dc8:	429a      	cmp	r2, r3
 8014dca:	d011      	beq.n	8014df0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8014dcc:	4b14      	ldr	r3, [pc, #80]	@ (8014e20 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8014dce:	781b      	ldrb	r3, [r3, #0]
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d11e      	bne.n	8014e12 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8014dd4:	4b13      	ldr	r3, [pc, #76]	@ (8014e24 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8014dd6:	881b      	ldrh	r3, [r3, #0]
 8014dd8:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8014dda:	4b13      	ldr	r3, [pc, #76]	@ (8014e28 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8014ddc:	881a      	ldrh	r2, [r3, #0]
 8014dde:	4b11      	ldr	r3, [pc, #68]	@ (8014e24 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8014de0:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 8014de2:	4a11      	ldr	r2, [pc, #68]	@ (8014e28 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8014de4:	89bb      	ldrh	r3, [r7, #12]
 8014de6:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8014de8:	4b0d      	ldr	r3, [pc, #52]	@ (8014e20 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8014dea:	2201      	movs	r2, #1
 8014dec:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8014dee:	e010      	b.n	8014e12 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8014df0:	4b0b      	ldr	r3, [pc, #44]	@ (8014e20 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8014df2:	781b      	ldrb	r3, [r3, #0]
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d00c      	beq.n	8014e12 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8014df8:	4b0a      	ldr	r3, [pc, #40]	@ (8014e24 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8014dfa:	881b      	ldrh	r3, [r3, #0]
 8014dfc:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8014dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8014e28 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8014e00:	881a      	ldrh	r2, [r3, #0]
 8014e02:	4b08      	ldr	r3, [pc, #32]	@ (8014e24 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8014e04:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8014e06:	4a08      	ldr	r2, [pc, #32]	@ (8014e28 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8014e08:	89fb      	ldrh	r3, [r7, #14]
 8014e0a:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8014e0c:	4b04      	ldr	r3, [pc, #16]	@ (8014e20 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8014e0e:	2200      	movs	r2, #0
 8014e10:	701a      	strb	r2, [r3, #0]
    }
 8014e12:	bf00      	nop
 8014e14:	3714      	adds	r7, #20
 8014e16:	46bd      	mov	sp, r7
 8014e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e1c:	4770      	bx	lr
 8014e1e:	bf00      	nop
 8014e20:	24013b50 	.word	0x24013b50
 8014e24:	24013b4e 	.word	0x24013b4e
 8014e28:	24013b4c 	.word	0x24013b4c

08014e2c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8014e2c:	b580      	push	{r7, lr}
 8014e2e:	b082      	sub	sp, #8
 8014e30:	af00      	add	r7, sp, #0
 8014e32:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	4618      	mov	r0, r3
 8014e38:	f002 fd50 	bl	80178dc <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8014e3c:	bf00      	nop
 8014e3e:	3708      	adds	r7, #8
 8014e40:	46bd      	mov	sp, r7
 8014e42:	bd80      	pop	{r7, pc}

08014e44 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8014e44:	b580      	push	{r7, lr}
 8014e46:	b082      	sub	sp, #8
 8014e48:	af00      	add	r7, sp, #0
 8014e4a:	6078      	str	r0, [r7, #4]
 8014e4c:	4a05      	ldr	r2, [pc, #20]	@ (8014e64 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	601a      	str	r2, [r3, #0]
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	4618      	mov	r0, r3
 8014e56:	f7ff fe8d 	bl	8014b74 <_ZN8touchgfx3HALD1Ev>
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	4618      	mov	r0, r3
 8014e5e:	3708      	adds	r7, #8
 8014e60:	46bd      	mov	sp, r7
 8014e62:	bd80      	pop	{r7, pc}
 8014e64:	0802c810 	.word	0x0802c810

08014e68 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8014e68:	b580      	push	{r7, lr}
 8014e6a:	b082      	sub	sp, #8
 8014e6c:	af00      	add	r7, sp, #0
 8014e6e:	6078      	str	r0, [r7, #4]
 8014e70:	6878      	ldr	r0, [r7, #4]
 8014e72:	f7ff ffe7 	bl	8014e44 <_ZN20TouchGFXGeneratedHALD1Ev>
 8014e76:	217c      	movs	r1, #124	@ 0x7c
 8014e78:	6878      	ldr	r0, [r7, #4]
 8014e7a:	f014 fd90 	bl	802999e <_ZdlPvj>
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	4618      	mov	r0, r3
 8014e82:	3708      	adds	r7, #8
 8014e84:	46bd      	mov	sp, r7
 8014e86:	bd80      	pop	{r7, pc}

08014e88 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8014e88:	b580      	push	{r7, lr}
 8014e8a:	b082      	sub	sp, #8
 8014e8c:	af00      	add	r7, sp, #0
 8014e8e:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	4618      	mov	r0, r3
 8014e94:	f7ff ffca 	bl	8014e2c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8014e98:	bf00      	nop
 8014e9a:	3708      	adds	r7, #8
 8014e9c:	46bd      	mov	sp, r7
 8014e9e:	bd80      	pop	{r7, pc}

08014ea0 <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8014ea0:	b580      	push	{r7, lr}
 8014ea2:	b082      	sub	sp, #8
 8014ea4:	af00      	add	r7, sp, #0
 8014ea6:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	4618      	mov	r0, r3
 8014eac:	f001 ffe0 	bl	8016e70 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8014eb0:	bf00      	nop
 8014eb2:	3708      	adds	r7, #8
 8014eb4:	46bd      	mov	sp, r7
 8014eb6:	bd80      	pop	{r7, pc}

08014eb8 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8014eb8:	b580      	push	{r7, lr}
 8014eba:	b082      	sub	sp, #8
 8014ebc:	af00      	add	r7, sp, #0
 8014ebe:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	4618      	mov	r0, r3
 8014ec4:	f002 f86c 	bl	8016fa0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8014ec8:	4603      	mov	r3, r0
}
 8014eca:	4618      	mov	r0, r3
 8014ecc:	3708      	adds	r7, #8
 8014ece:	46bd      	mov	sp, r7
 8014ed0:	bd80      	pop	{r7, pc}

08014ed2 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8014ed2:	b580      	push	{r7, lr}
 8014ed4:	b082      	sub	sp, #8
 8014ed6:	af00      	add	r7, sp, #0
 8014ed8:	6078      	str	r0, [r7, #4]
 8014eda:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	6839      	ldr	r1, [r7, #0]
 8014ee0:	4618      	mov	r0, r3
 8014ee2:	f002 f86b 	bl	8016fbc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8014ee6:	bf00      	nop
 8014ee8:	3708      	adds	r7, #8
 8014eea:	46bd      	mov	sp, r7
 8014eec:	bd80      	pop	{r7, pc}

08014eee <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8014eee:	b580      	push	{r7, lr}
 8014ef0:	b082      	sub	sp, #8
 8014ef2:	af00      	add	r7, sp, #0
 8014ef4:	6078      	str	r0, [r7, #4]
 8014ef6:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate the start address of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	6839      	ldr	r1, [r7, #0]
 8014efc:	4618      	mov	r0, r3
 8014efe:	f002 f873 	bl	8016fe8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8014f02:	bf00      	nop
 8014f04:	3708      	adds	r7, #8
 8014f06:	46bd      	mov	sp, r7
 8014f08:	bd80      	pop	{r7, pc}

08014f0a <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8014f0a:	b580      	push	{r7, lr}
 8014f0c:	b084      	sub	sp, #16
 8014f0e:	af00      	add	r7, sp, #0
 8014f10:	60f8      	str	r0, [r7, #12]
 8014f12:	60b9      	str	r1, [r7, #8]
 8014f14:	607a      	str	r2, [r7, #4]
 8014f16:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8014f18:	68f8      	ldr	r0, [r7, #12]
 8014f1a:	683b      	ldr	r3, [r7, #0]
 8014f1c:	687a      	ldr	r2, [r7, #4]
 8014f1e:	68b9      	ldr	r1, [r7, #8]
 8014f20:	f002 f870 	bl	8017004 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8014f24:	4603      	mov	r3, r0
}
 8014f26:	4618      	mov	r0, r3
 8014f28:	3710      	adds	r7, #16
 8014f2a:	46bd      	mov	sp, r7
 8014f2c:	bd80      	pop	{r7, pc}

08014f2e <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8014f2e:	b580      	push	{r7, lr}
 8014f30:	b082      	sub	sp, #8
 8014f32:	af00      	add	r7, sp, #0
 8014f34:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	4618      	mov	r0, r3
 8014f3a:	f001 ffbd 	bl	8016eb8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8014f3e:	bf00      	nop
 8014f40:	3708      	adds	r7, #8
 8014f42:	46bd      	mov	sp, r7
 8014f44:	bd80      	pop	{r7, pc}

08014f46 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8014f46:	b580      	push	{r7, lr}
 8014f48:	b082      	sub	sp, #8
 8014f4a:	af00      	add	r7, sp, #0
 8014f4c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	4618      	mov	r0, r3
 8014f52:	f001 ffc1 	bl	8016ed8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8014f56:	bf00      	nop
 8014f58:	3708      	adds	r7, #8
 8014f5a:	46bd      	mov	sp, r7
 8014f5c:	bd80      	pop	{r7, pc}

08014f5e <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8014f5e:	b580      	push	{r7, lr}
 8014f60:	b082      	sub	sp, #8
 8014f62:	af00      	add	r7, sp, #0
 8014f64:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	4618      	mov	r0, r3
 8014f6a:	f001 ffc3 	bl	8016ef4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8014f6e:	bf00      	nop
 8014f70:	3708      	adds	r7, #8
 8014f72:	46bd      	mov	sp, r7
 8014f74:	bd80      	pop	{r7, pc}

08014f76 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8014f76:	b580      	push	{r7, lr}
 8014f78:	b082      	sub	sp, #8
 8014f7a:	af00      	add	r7, sp, #0
 8014f7c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	4618      	mov	r0, r3
 8014f82:	f001 ffc5 	bl	8016f10 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8014f86:	bf00      	nop
 8014f88:	3708      	adds	r7, #8
 8014f8a:	46bd      	mov	sp, r7
 8014f8c:	bd80      	pop	{r7, pc}

08014f8e <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 8014f8e:	b580      	push	{r7, lr}
 8014f90:	b082      	sub	sp, #8
 8014f92:	af00      	add	r7, sp, #0
 8014f94:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	4618      	mov	r0, r3
 8014f9a:	f001 ffe7 	bl	8016f6c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 8014f9e:	4603      	mov	r3, r0
}
 8014fa0:	4618      	mov	r0, r3
 8014fa2:	3708      	adds	r7, #8
 8014fa4:	46bd      	mov	sp, r7
 8014fa6:	bd80      	pop	{r7, pc}

08014fa8 <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 8014fa8:	b580      	push	{r7, lr}
 8014faa:	b082      	sub	sp, #8
 8014fac:	af00      	add	r7, sp, #0
 8014fae:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	4618      	mov	r0, r3
 8014fb4:	f001 ffe7 	bl	8016f86 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 8014fb8:	bf00      	nop
 8014fba:	3708      	adds	r7, #8
 8014fbc:	46bd      	mov	sp, r7
 8014fbe:	bd80      	pop	{r7, pc}

08014fc0 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8014fc0:	b580      	push	{r7, lr}
 8014fc2:	b082      	sub	sp, #8
 8014fc4:	af00      	add	r7, sp, #0
 8014fc6:	6078      	str	r0, [r7, #4]
 8014fc8:	4a05      	ldr	r2, [pc, #20]	@ (8014fe0 <_ZN11TouchGFXHALD1Ev+0x20>)
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	601a      	str	r2, [r3, #0]
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	4618      	mov	r0, r3
 8014fd2:	f7ff ff37 	bl	8014e44 <_ZN20TouchGFXGeneratedHALD1Ev>
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	4618      	mov	r0, r3
 8014fda:	3708      	adds	r7, #8
 8014fdc:	46bd      	mov	sp, r7
 8014fde:	bd80      	pop	{r7, pc}
 8014fe0:	0802c4a4 	.word	0x0802c4a4

08014fe4 <_ZN11TouchGFXHALD0Ev>:
 8014fe4:	b580      	push	{r7, lr}
 8014fe6:	b082      	sub	sp, #8
 8014fe8:	af00      	add	r7, sp, #0
 8014fea:	6078      	str	r0, [r7, #4]
 8014fec:	6878      	ldr	r0, [r7, #4]
 8014fee:	f7ff ffe7 	bl	8014fc0 <_ZN11TouchGFXHALD1Ev>
 8014ff2:	217c      	movs	r1, #124	@ 0x7c
 8014ff4:	6878      	ldr	r0, [r7, #4]
 8014ff6:	f014 fcd2 	bl	802999e <_ZdlPvj>
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	3708      	adds	r7, #8
 8015000:	46bd      	mov	sp, r7
 8015002:	bd80      	pop	{r7, pc}

08015004 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8015004:	b580      	push	{r7, lr}
 8015006:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8015008:	2200      	movs	r2, #0
 801500a:	2101      	movs	r1, #1
 801500c:	2001      	movs	r0, #1
 801500e:	f7f9 fb42 	bl	800e696 <osSemaphoreNew>
 8015012:	4603      	mov	r3, r0
 8015014:	4a0f      	ldr	r2, [pc, #60]	@ (8015054 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8015016:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8015018:	4b0e      	ldr	r3, [pc, #56]	@ (8015054 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	2b00      	cmp	r3, #0
 801501e:	d105      	bne.n	801502c <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8015020:	4b0d      	ldr	r3, [pc, #52]	@ (8015058 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8015022:	4a0e      	ldr	r2, [pc, #56]	@ (801505c <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8015024:	2128      	movs	r1, #40	@ 0x28
 8015026:	480e      	ldr	r0, [pc, #56]	@ (8015060 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8015028:	f015 f832 	bl	802a090 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 801502c:	2200      	movs	r2, #0
 801502e:	2104      	movs	r1, #4
 8015030:	2001      	movs	r0, #1
 8015032:	f7f9 fc4f 	bl	800e8d4 <osMessageQueueNew>
 8015036:	4603      	mov	r3, r0
 8015038:	4a0a      	ldr	r2, [pc, #40]	@ (8015064 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 801503a:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 801503c:	4b09      	ldr	r3, [pc, #36]	@ (8015064 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	2b00      	cmp	r3, #0
 8015042:	d105      	bne.n	8015050 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8015044:	4b08      	ldr	r3, [pc, #32]	@ (8015068 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8015046:	4a05      	ldr	r2, [pc, #20]	@ (801505c <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8015048:	212c      	movs	r1, #44	@ 0x2c
 801504a:	4805      	ldr	r0, [pc, #20]	@ (8015060 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 801504c:	f015 f820 	bl	802a090 <__assert_func>
}
 8015050:	bf00      	nop
 8015052:	bd80      	pop	{r7, pc}
 8015054:	240128f4 	.word	0x240128f4
 8015058:	0802b9b0 	.word	0x0802b9b0
 801505c:	0802b9fc 	.word	0x0802b9fc
 8015060:	0802ba2c 	.word	0x0802ba2c
 8015064:	240128f8 	.word	0x240128f8
 8015068:	0802ba58 	.word	0x0802ba58

0801506c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 801506c:	b580      	push	{r7, lr}
 801506e:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8015070:	4b04      	ldr	r3, [pc, #16]	@ (8015084 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	f04f 31ff 	mov.w	r1, #4294967295
 8015078:	4618      	mov	r0, r3
 801507a:	f7f9 fb95 	bl	800e7a8 <osSemaphoreAcquire>
}
 801507e:	bf00      	nop
 8015080:	bd80      	pop	{r7, pc}
 8015082:	bf00      	nop
 8015084:	240128f4 	.word	0x240128f4

08015088 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8015088:	b580      	push	{r7, lr}
 801508a:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 801508c:	4b03      	ldr	r3, [pc, #12]	@ (801509c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 801508e:	681b      	ldr	r3, [r3, #0]
 8015090:	4618      	mov	r0, r3
 8015092:	f7f9 fbdb 	bl	800e84c <osSemaphoreRelease>
}
 8015096:	bf00      	nop
 8015098:	bd80      	pop	{r7, pc}
 801509a:	bf00      	nop
 801509c:	240128f4 	.word	0x240128f4

080150a0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 80150a0:	b580      	push	{r7, lr}
 80150a2:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 80150a4:	4b03      	ldr	r3, [pc, #12]	@ (80150b4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 80150a6:	681b      	ldr	r3, [r3, #0]
 80150a8:	2100      	movs	r1, #0
 80150aa:	4618      	mov	r0, r3
 80150ac:	f7f9 fb7c 	bl	800e7a8 <osSemaphoreAcquire>
}
 80150b0:	bf00      	nop
 80150b2:	bd80      	pop	{r7, pc}
 80150b4:	240128f4 	.word	0x240128f4

080150b8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 80150b8:	b580      	push	{r7, lr}
 80150ba:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 80150bc:	4b03      	ldr	r3, [pc, #12]	@ (80150cc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 80150be:	681b      	ldr	r3, [r3, #0]
 80150c0:	4618      	mov	r0, r3
 80150c2:	f7f9 fbc3 	bl	800e84c <osSemaphoreRelease>
}
 80150c6:	bf00      	nop
 80150c8:	bd80      	pop	{r7, pc}
 80150ca:	bf00      	nop
 80150cc:	240128f4 	.word	0x240128f4

080150d0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 80150d0:	b580      	push	{r7, lr}
 80150d2:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 80150d4:	4b04      	ldr	r3, [pc, #16]	@ (80150e8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 80150d6:	6818      	ldr	r0, [r3, #0]
 80150d8:	2300      	movs	r3, #0
 80150da:	2200      	movs	r2, #0
 80150dc:	4903      	ldr	r1, [pc, #12]	@ (80150ec <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 80150de:	f7f9 fc6d 	bl	800e9bc <osMessageQueuePut>
}
 80150e2:	bf00      	nop
 80150e4:	bd80      	pop	{r7, pc}
 80150e6:	bf00      	nop
 80150e8:	240128f8 	.word	0x240128f8
 80150ec:	24000018 	.word	0x24000018

080150f0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 80150f0:	b580      	push	{r7, lr}
 80150f2:	b082      	sub	sp, #8
 80150f4:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 80150f6:	4b09      	ldr	r3, [pc, #36]	@ (801511c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80150f8:	6818      	ldr	r0, [r3, #0]
 80150fa:	1d39      	adds	r1, r7, #4
 80150fc:	2300      	movs	r3, #0
 80150fe:	2200      	movs	r2, #0
 8015100:	f7f9 fcbc 	bl	800ea7c <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8015104:	4b05      	ldr	r3, [pc, #20]	@ (801511c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8015106:	6818      	ldr	r0, [r3, #0]
 8015108:	1d39      	adds	r1, r7, #4
 801510a:	f04f 33ff 	mov.w	r3, #4294967295
 801510e:	2200      	movs	r2, #0
 8015110:	f7f9 fcb4 	bl	800ea7c <osMessageQueueGet>
}
 8015114:	bf00      	nop
 8015116:	3708      	adds	r7, #8
 8015118:	46bd      	mov	sp, r7
 801511a:	bd80      	pop	{r7, pc}
 801511c:	240128f8 	.word	0x240128f8

08015120 <__NVIC_DisableIRQ>:
{
 8015120:	b480      	push	{r7}
 8015122:	b083      	sub	sp, #12
 8015124:	af00      	add	r7, sp, #0
 8015126:	4603      	mov	r3, r0
 8015128:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801512a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801512e:	2b00      	cmp	r3, #0
 8015130:	db12      	blt.n	8015158 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015132:	88fb      	ldrh	r3, [r7, #6]
 8015134:	f003 021f 	and.w	r2, r3, #31
 8015138:	490a      	ldr	r1, [pc, #40]	@ (8015164 <__NVIC_DisableIRQ+0x44>)
 801513a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801513e:	095b      	lsrs	r3, r3, #5
 8015140:	2001      	movs	r0, #1
 8015142:	fa00 f202 	lsl.w	r2, r0, r2
 8015146:	3320      	adds	r3, #32
 8015148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 801514c:	f3bf 8f4f 	dsb	sy
}
 8015150:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8015152:	f3bf 8f6f 	isb	sy
}
 8015156:	bf00      	nop
}
 8015158:	bf00      	nop
 801515a:	370c      	adds	r7, #12
 801515c:	46bd      	mov	sp, r7
 801515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015162:	4770      	bx	lr
 8015164:	e000e100 	.word	0xe000e100

08015168 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 8015168:	b480      	push	{r7}
 801516a:	b083      	sub	sp, #12
 801516c:	af00      	add	r7, sp, #0
 801516e:	6078      	str	r0, [r7, #4]
        : color(0)
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	2200      	movs	r2, #0
 8015174:	601a      	str	r2, [r3, #0]
    }
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	4618      	mov	r0, r3
 801517a:	370c      	adds	r7, #12
 801517c:	46bd      	mov	sp, r7
 801517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015182:	4770      	bx	lr

08015184 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 8015184:	b480      	push	{r7}
 8015186:	b083      	sub	sp, #12
 8015188:	af00      	add	r7, sp, #0
 801518a:	6078      	str	r0, [r7, #4]
        return color;
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	681b      	ldr	r3, [r3, #0]
    }
 8015190:	4618      	mov	r0, r3
 8015192:	370c      	adds	r7, #12
 8015194:	46bd      	mov	sp, r7
 8015196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801519a:	4770      	bx	lr

0801519c <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 801519c:	b480      	push	{r7}
 801519e:	b083      	sub	sp, #12
 80151a0:	af00      	add	r7, sp, #0
 80151a2:	6078      	str	r0, [r7, #4]
    {
 80151a4:	4a04      	ldr	r2, [pc, #16]	@ (80151b8 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	601a      	str	r2, [r3, #0]
    }
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	4618      	mov	r0, r3
 80151ae:	370c      	adds	r7, #12
 80151b0:	46bd      	mov	sp, r7
 80151b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151b6:	4770      	bx	lr
 80151b8:	0802c5cc 	.word	0x0802c5cc

080151bc <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 80151bc:	b580      	push	{r7, lr}
 80151be:	b082      	sub	sp, #8
 80151c0:	af00      	add	r7, sp, #0
 80151c2:	6078      	str	r0, [r7, #4]
    }
 80151c4:	6878      	ldr	r0, [r7, #4]
 80151c6:	f7ff ffe9 	bl	801519c <_ZN8touchgfx9DMA_QueueD1Ev>
 80151ca:	2104      	movs	r1, #4
 80151cc:	6878      	ldr	r0, [r7, #4]
 80151ce:	f014 fbe6 	bl	802999e <_ZdlPvj>
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	4618      	mov	r0, r3
 80151d6:	3708      	adds	r7, #8
 80151d8:	46bd      	mov	sp, r7
 80151da:	bd80      	pop	{r7, pc}

080151dc <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 80151dc:	b580      	push	{r7, lr}
 80151de:	b082      	sub	sp, #8
 80151e0:	af00      	add	r7, sp, #0
 80151e2:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	681b      	ldr	r3, [r3, #0]
 80151e8:	3344      	adds	r3, #68	@ 0x44
 80151ea:	681b      	ldr	r3, [r3, #0]
 80151ec:	6878      	ldr	r0, [r7, #4]
 80151ee:	4798      	blx	r3
    }
 80151f0:	bf00      	nop
 80151f2:	3708      	adds	r7, #8
 80151f4:	46bd      	mov	sp, r7
 80151f6:	bd80      	pop	{r7, pc}

080151f8 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 80151f8:	b480      	push	{r7}
 80151fa:	b083      	sub	sp, #12
 80151fc:	af00      	add	r7, sp, #0
 80151fe:	6078      	str	r0, [r7, #4]
    {
 8015200:	4a04      	ldr	r2, [pc, #16]	@ (8015214 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	601a      	str	r2, [r3, #0]
    }
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	4618      	mov	r0, r3
 801520a:	370c      	adds	r7, #12
 801520c:	46bd      	mov	sp, r7
 801520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015212:	4770      	bx	lr
 8015214:	0802cad0 	.word	0x0802cad0

08015218 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8015218:	b580      	push	{r7, lr}
 801521a:	b082      	sub	sp, #8
 801521c:	af00      	add	r7, sp, #0
 801521e:	6078      	str	r0, [r7, #4]
    }
 8015220:	6878      	ldr	r0, [r7, #4]
 8015222:	f7ff ffe9 	bl	80151f8 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8015226:	210c      	movs	r1, #12
 8015228:	6878      	ldr	r0, [r7, #4]
 801522a:	f014 fbb8 	bl	802999e <_ZdlPvj>
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	4618      	mov	r0, r3
 8015232:	3708      	adds	r7, #8
 8015234:	46bd      	mov	sp, r7
 8015236:	bd80      	pop	{r7, pc}

08015238 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8015238:	b480      	push	{r7}
 801523a:	b083      	sub	sp, #12
 801523c:	af00      	add	r7, sp, #0
 801523e:	6078      	str	r0, [r7, #4]
 8015240:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8015242:	4a09      	ldr	r2, [pc, #36]	@ (8015268 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	601a      	str	r2, [r3, #0]
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	683a      	ldr	r2, [r7, #0]
 801524c:	605a      	str	r2, [r3, #4]
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	2200      	movs	r2, #0
 8015252:	721a      	strb	r2, [r3, #8]
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	2200      	movs	r2, #0
 8015258:	725a      	strb	r2, [r3, #9]
    {
    }
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	4618      	mov	r0, r3
 801525e:	370c      	adds	r7, #12
 8015260:	46bd      	mov	sp, r7
 8015262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015266:	4770      	bx	lr
 8015268:	0802cad0 	.word	0x0802cad0

0801526c <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 801526c:	b480      	push	{r7}
 801526e:	b083      	sub	sp, #12
 8015270:	af00      	add	r7, sp, #0
 8015272:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8015274:	2301      	movs	r3, #1
    }
 8015276:	4618      	mov	r0, r3
 8015278:	370c      	adds	r7, #12
 801527a:	46bd      	mov	sp, r7
 801527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015280:	4770      	bx	lr

08015282 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8015282:	b580      	push	{r7, lr}
 8015284:	b082      	sub	sp, #8
 8015286:	af00      	add	r7, sp, #0
 8015288:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 801528a:	687a      	ldr	r2, [r7, #4]
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	681b      	ldr	r3, [r3, #0]
 8015290:	3328      	adds	r3, #40	@ 0x28
 8015292:	681b      	ldr	r3, [r3, #0]
 8015294:	4610      	mov	r0, r2
 8015296:	4798      	blx	r3
    }
 8015298:	bf00      	nop
 801529a:	3708      	adds	r7, #8
 801529c:	46bd      	mov	sp, r7
 801529e:	bd80      	pop	{r7, pc}

080152a0 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 80152a0:	b580      	push	{r7, lr}
 80152a2:	b082      	sub	sp, #8
 80152a4:	af00      	add	r7, sp, #0
 80152a6:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	685a      	ldr	r2, [r3, #4]
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	685b      	ldr	r3, [r3, #4]
 80152b0:	681b      	ldr	r3, [r3, #0]
 80152b2:	3314      	adds	r3, #20
 80152b4:	681b      	ldr	r3, [r3, #0]
 80152b6:	4610      	mov	r0, r2
 80152b8:	4798      	blx	r3
    }
 80152ba:	bf00      	nop
 80152bc:	3708      	adds	r7, #8
 80152be:	46bd      	mov	sp, r7
 80152c0:	bd80      	pop	{r7, pc}
	...

080152c4 <DMA2D_IRQHandler>:
    const uint16_t size;
    const uint32_t* const data;
} clutData_t;

extern "C" void DMA2D_IRQHandler()
{
 80152c4:	b580      	push	{r7, lr}
 80152c6:	af00      	add	r7, sp, #0
    /* Transfer Complete Interrupt management ************************************/
    if ((READ_REG(DMA2D->ISR) & DMA2D_FLAG_TC) != RESET)
 80152c8:	4b13      	ldr	r3, [pc, #76]	@ (8015318 <DMA2D_IRQHandler+0x54>)
 80152ca:	685b      	ldr	r3, [r3, #4]
 80152cc:	f003 0302 	and.w	r3, r3, #2
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	bf14      	ite	ne
 80152d4:	2301      	movne	r3, #1
 80152d6:	2300      	moveq	r3, #0
 80152d8:	b2db      	uxtb	r3, r3
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d019      	beq.n	8015312 <DMA2D_IRQHandler+0x4e>
    {
        /* Verify Transfer Complete Interrupt */
        if ((READ_REG(DMA2D->CR) & DMA2D_IT_TC) != RESET)
 80152de:	4b0e      	ldr	r3, [pc, #56]	@ (8015318 <DMA2D_IRQHandler+0x54>)
 80152e0:	681b      	ldr	r3, [r3, #0]
 80152e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	bf14      	ite	ne
 80152ea:	2301      	movne	r3, #1
 80152ec:	2300      	moveq	r3, #0
 80152ee:	b2db      	uxtb	r3, r3
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d00e      	beq.n	8015312 <DMA2D_IRQHandler+0x4e>
        {
            /* Disable the transfer complete interrupt */
            DMA2D->CR &= ~(DMA2D_IT_TC);
 80152f4:	4b08      	ldr	r3, [pc, #32]	@ (8015318 <DMA2D_IRQHandler+0x54>)
 80152f6:	681b      	ldr	r3, [r3, #0]
 80152f8:	4a07      	ldr	r2, [pc, #28]	@ (8015318 <DMA2D_IRQHandler+0x54>)
 80152fa:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80152fe:	6013      	str	r3, [r2, #0]

            /* Clear the transfer complete flag */
            DMA2D->IFCR = (DMA2D_FLAG_TC);
 8015300:	4b05      	ldr	r3, [pc, #20]	@ (8015318 <DMA2D_IRQHandler+0x54>)
 8015302:	2202      	movs	r2, #2
 8015304:	609a      	str	r2, [r3, #8]

            /* Signal DMA queue of execution complete */
            touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8015306:	f7fd f911 	bl	801252c <_ZN8touchgfx3HAL11getInstanceEv>
 801530a:	4603      	mov	r3, r0
 801530c:	4618      	mov	r0, r3
 801530e:	f7ff ffc7 	bl	80152a0 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
        }
    }
}
 8015312:	bf00      	nop
 8015314:	bd80      	pop	{r7, pc}
 8015316:	bf00      	nop
 8015318:	52001000 	.word	0x52001000

0801531c <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 801531c:	b580      	push	{r7, lr}
 801531e:	b082      	sub	sp, #8
 8015320:	af00      	add	r7, sp, #0
 8015322:	6078      	str	r0, [r7, #4]
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	330c      	adds	r3, #12
 8015328:	4618      	mov	r0, r3
 801532a:	f7ff ff1d 	bl	8015168 <_ZN8touchgfx9colortypeC1Ev>
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	4618      	mov	r0, r3
 8015332:	3708      	adds	r7, #8
 8015334:	46bd      	mov	sp, r7
 8015336:	bd80      	pop	{r7, pc}

08015338 <_ZN8STM32DMAC1Ev>:

STM32DMA::STM32DMA()
 8015338:	b5b0      	push	{r4, r5, r7, lr}
 801533a:	b082      	sub	sp, #8
 801533c:	af00      	add	r7, sp, #0
 801533e:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8015340:	687a      	ldr	r2, [r7, #4]
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	330c      	adds	r3, #12
 8015346:	4619      	mov	r1, r3
 8015348:	4610      	mov	r0, r2
 801534a:	f7ff ff75 	bl	8015238 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 801534e:	4a0e      	ldr	r2, [pc, #56]	@ (8015388 <_ZN8STM32DMAC1Ev+0x50>)
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	601a      	str	r2, [r3, #0]
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	f103 000c 	add.w	r0, r3, #12
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	3320      	adds	r3, #32
 801535e:	2260      	movs	r2, #96	@ 0x60
 8015360:	4619      	mov	r1, r3
 8015362:	f003 f9b1 	bl	80186c8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	3320      	adds	r3, #32
 801536a:	245f      	movs	r4, #95	@ 0x5f
 801536c:	461d      	mov	r5, r3
 801536e:	e004      	b.n	801537a <_ZN8STM32DMAC1Ev+0x42>
 8015370:	4628      	mov	r0, r5
 8015372:	f7ff ffd3 	bl	801531c <_ZN8touchgfx6BlitOpC1Ev>
 8015376:	3c01      	subs	r4, #1
 8015378:	3524      	adds	r5, #36	@ 0x24
 801537a:	2c00      	cmp	r4, #0
 801537c:	daf8      	bge.n	8015370 <_ZN8STM32DMAC1Ev+0x38>
{
}
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	4618      	mov	r0, r3
 8015382:	3708      	adds	r7, #8
 8015384:	46bd      	mov	sp, r7
 8015386:	bdb0      	pop	{r4, r5, r7, pc}
 8015388:	0802c57c 	.word	0x0802c57c

0801538c <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 801538c:	b580      	push	{r7, lr}
 801538e:	b082      	sub	sp, #8
 8015390:	af00      	add	r7, sp, #0
 8015392:	6078      	str	r0, [r7, #4]
 8015394:	4a09      	ldr	r2, [pc, #36]	@ (80153bc <_ZN8STM32DMAD1Ev+0x30>)
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 801539a:	205a      	movs	r0, #90	@ 0x5a
 801539c:	f7ff fec0 	bl	8015120 <__NVIC_DisableIRQ>
}
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	330c      	adds	r3, #12
 80153a4:	4618      	mov	r0, r3
 80153a6:	f000 fbdd 	bl	8015b64 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	4618      	mov	r0, r3
 80153ae:	f7ff ff23 	bl	80151f8 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	4618      	mov	r0, r3
 80153b6:	3708      	adds	r7, #8
 80153b8:	46bd      	mov	sp, r7
 80153ba:	bd80      	pop	{r7, pc}
 80153bc:	0802c57c 	.word	0x0802c57c

080153c0 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 80153c0:	b580      	push	{r7, lr}
 80153c2:	b082      	sub	sp, #8
 80153c4:	af00      	add	r7, sp, #0
 80153c6:	6078      	str	r0, [r7, #4]
}
 80153c8:	6878      	ldr	r0, [r7, #4]
 80153ca:	f7ff ffdf 	bl	801538c <_ZN8STM32DMAD1Ev>
 80153ce:	f44f 615a 	mov.w	r1, #3488	@ 0xda0
 80153d2:	6878      	ldr	r0, [r7, #4]
 80153d4:	f014 fae3 	bl	802999e <_ZdlPvj>
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	4618      	mov	r0, r3
 80153dc:	3708      	adds	r7, #8
 80153de:	46bd      	mov	sp, r7
 80153e0:	bd80      	pop	{r7, pc}
	...

080153e4 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 80153e4:	b580      	push	{r7, lr}
 80153e6:	b084      	sub	sp, #16
 80153e8:	af00      	add	r7, sp, #0
 80153ea:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80153ec:	4b13      	ldr	r3, [pc, #76]	@ (801543c <_ZN8STM32DMA10initializeEv+0x58>)
 80153ee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80153f2:	4a12      	ldr	r2, [pc, #72]	@ (801543c <_ZN8STM32DMA10initializeEv+0x58>)
 80153f4:	f043 0310 	orr.w	r3, r3, #16
 80153f8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80153fc:	4b0f      	ldr	r3, [pc, #60]	@ (801543c <_ZN8STM32DMA10initializeEv+0x58>)
 80153fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8015402:	f003 0310 	and.w	r3, r3, #16
 8015406:	60fb      	str	r3, [r7, #12]
 8015408:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 801540a:	4b0c      	ldr	r3, [pc, #48]	@ (801543c <_ZN8STM32DMA10initializeEv+0x58>)
 801540c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801540e:	4a0b      	ldr	r2, [pc, #44]	@ (801543c <_ZN8STM32DMA10initializeEv+0x58>)
 8015410:	f043 0310 	orr.w	r3, r3, #16
 8015414:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8015416:	4b09      	ldr	r3, [pc, #36]	@ (801543c <_ZN8STM32DMA10initializeEv+0x58>)
 8015418:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801541a:	4a08      	ldr	r2, [pc, #32]	@ (801543c <_ZN8STM32DMA10initializeEv+0x58>)
 801541c:	f023 0310 	bic.w	r3, r3, #16
 8015420:	67d3      	str	r3, [r2, #124]	@ 0x7c

    /* Enable DMA2D global Interrupt */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8015422:	2200      	movs	r2, #0
 8015424:	2105      	movs	r1, #5
 8015426:	205a      	movs	r0, #90	@ 0x5a
 8015428:	f7f0 fcda 	bl	8005de0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 801542c:	205a      	movs	r0, #90	@ 0x5a
 801542e:	f7f0 fcf1 	bl	8005e14 <HAL_NVIC_EnableIRQ>
}
 8015432:	bf00      	nop
 8015434:	3710      	adds	r7, #16
 8015436:	46bd      	mov	sp, r7
 8015438:	bd80      	pop	{r7, pc}
 801543a:	bf00      	nop
 801543c:	58024400 	.word	0x58024400

08015440 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8015440:	b580      	push	{r7, lr}
 8015442:	b084      	sub	sp, #16
 8015444:	af00      	add	r7, sp, #0
 8015446:	6078      	str	r0, [r7, #4]
 8015448:	460b      	mov	r3, r1
 801544a:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 801544c:	2300      	movs	r3, #0
 801544e:	60fb      	str	r3, [r7, #12]

    switch (format)
 8015450:	78fb      	ldrb	r3, [r7, #3]
 8015452:	2b0b      	cmp	r3, #11
 8015454:	d826      	bhi.n	80154a4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 8015456:	a201      	add	r2, pc, #4	@ (adr r2, 801545c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8015458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801545c:	08015499 	.word	0x08015499
 8015460:	08015493 	.word	0x08015493
 8015464:	0801548d 	.word	0x0801548d
 8015468:	080154a5 	.word	0x080154a5
 801546c:	080154a5 	.word	0x080154a5
 8015470:	080154a5 	.word	0x080154a5
 8015474:	080154a5 	.word	0x080154a5
 8015478:	0801549f 	.word	0x0801549f
 801547c:	0801549f 	.word	0x0801549f
 8015480:	0801549f 	.word	0x0801549f
 8015484:	0801549f 	.word	0x0801549f
 8015488:	0801549f 	.word	0x0801549f
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 801548c:	2300      	movs	r3, #0
 801548e:	60fb      	str	r3, [r7, #12]
        break;
 8015490:	e00e      	b.n	80154b0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8015492:	2301      	movs	r3, #1
 8015494:	60fb      	str	r3, [r7, #12]
        break;
 8015496:	e00b      	b.n	80154b0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8015498:	2302      	movs	r3, #2
 801549a:	60fb      	str	r3, [r7, #12]
        break;
 801549c:	e008      	b.n	80154b0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 801549e:	2305      	movs	r3, #5
 80154a0:	60fb      	str	r3, [r7, #12]
        break;
 80154a2:	e005      	b.n	80154b0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 80154a4:	4b05      	ldr	r3, [pc, #20]	@ (80154bc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 80154a6:	4a06      	ldr	r2, [pc, #24]	@ (80154c0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 80154a8:	216b      	movs	r1, #107	@ 0x6b
 80154aa:	4806      	ldr	r0, [pc, #24]	@ (80154c4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 80154ac:	f014 fdf0 	bl	802a090 <__assert_func>
        break;
    }

    return dma2dColorMode;
 80154b0:	68fb      	ldr	r3, [r7, #12]
}
 80154b2:	4618      	mov	r0, r3
 80154b4:	3710      	adds	r7, #16
 80154b6:	46bd      	mov	sp, r7
 80154b8:	bd80      	pop	{r7, pc}
 80154ba:	bf00      	nop
 80154bc:	0802ba9c 	.word	0x0802ba9c
 80154c0:	0802bab8 	.word	0x0802bab8
 80154c4:	0802bb04 	.word	0x0802bb04

080154c8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 80154c8:	b580      	push	{r7, lr}
 80154ca:	b084      	sub	sp, #16
 80154cc:	af00      	add	r7, sp, #0
 80154ce:	6078      	str	r0, [r7, #4]
 80154d0:	460b      	mov	r3, r1
 80154d2:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80154d4:	2300      	movs	r3, #0
 80154d6:	60fb      	str	r3, [r7, #12]

    switch (format)
 80154d8:	78fb      	ldrb	r3, [r7, #3]
 80154da:	2b0a      	cmp	r3, #10
 80154dc:	d821      	bhi.n	8015522 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 80154de:	a201      	add	r2, pc, #4	@ (adr r2, 80154e4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 80154e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80154e4:	0801551d 	.word	0x0801551d
 80154e8:	08015517 	.word	0x08015517
 80154ec:	08015511 	.word	0x08015511
 80154f0:	08015523 	.word	0x08015523
 80154f4:	08015523 	.word	0x08015523
 80154f8:	08015523 	.word	0x08015523
 80154fc:	08015523 	.word	0x08015523
 8015500:	08015517 	.word	0x08015517
 8015504:	08015517 	.word	0x08015517
 8015508:	08015517 	.word	0x08015517
 801550c:	08015517 	.word	0x08015517
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8015510:	2300      	movs	r3, #0
 8015512:	60fb      	str	r3, [r7, #12]
        break;
 8015514:	e00b      	b.n	801552e <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8015516:	2301      	movs	r3, #1
 8015518:	60fb      	str	r3, [r7, #12]
        break;
 801551a:	e008      	b.n	801552e <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 801551c:	2302      	movs	r3, #2
 801551e:	60fb      	str	r3, [r7, #12]
        break;
 8015520:	e005      	b.n	801552e <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8015522:	4b05      	ldr	r3, [pc, #20]	@ (8015538 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8015524:	4a05      	ldr	r2, [pc, #20]	@ (801553c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8015526:	218c      	movs	r1, #140	@ 0x8c
 8015528:	4805      	ldr	r0, [pc, #20]	@ (8015540 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 801552a:	f014 fdb1 	bl	802a090 <__assert_func>
        break;
    }

    return dma2dColorMode;
 801552e:	68fb      	ldr	r3, [r7, #12]
}
 8015530:	4618      	mov	r0, r3
 8015532:	3710      	adds	r7, #16
 8015534:	46bd      	mov	sp, r7
 8015536:	bd80      	pop	{r7, pc}
 8015538:	0802ba9c 	.word	0x0802ba9c
 801553c:	0802bb30 	.word	0x0802bb30
 8015540:	0802bb04 	.word	0x0802bb04

08015544 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8015544:	b480      	push	{r7}
 8015546:	b083      	sub	sp, #12
 8015548:	af00      	add	r7, sp, #0
 801554a:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 801554c:	f240 33ef 	movw	r3, #1007	@ 0x3ef
}
 8015550:	4618      	mov	r0, r3
 8015552:	370c      	adds	r7, #12
 8015554:	46bd      	mov	sp, r7
 8015556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801555a:	4770      	bx	lr

0801555c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 801555c:	b590      	push	{r4, r7, lr}
 801555e:	b089      	sub	sp, #36	@ 0x24
 8015560:	af00      	add	r7, sp, #0
 8015562:	6078      	str	r0, [r7, #4]
 8015564:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8015566:	683b      	ldr	r3, [r7, #0]
 8015568:	7f5b      	ldrb	r3, [r3, #29]
 801556a:	4619      	mov	r1, r3
 801556c:	6878      	ldr	r0, [r7, #4]
 801556e:	f7ff ff67 	bl	8015440 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8015572:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8015574:	683b      	ldr	r3, [r7, #0]
 8015576:	7f9b      	ldrb	r3, [r3, #30]
 8015578:	4619      	mov	r1, r3
 801557a:	6878      	ldr	r0, [r7, #4]
 801557c:	f7ff ff60 	bl	8015440 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8015580:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8015582:	683b      	ldr	r3, [r7, #0]
 8015584:	7f9b      	ldrb	r3, [r3, #30]
 8015586:	4619      	mov	r1, r3
 8015588:	6878      	ldr	r0, [r7, #4]
 801558a:	f7ff ff9d 	bl	80154c8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 801558e:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8015590:	683b      	ldr	r3, [r7, #0]
 8015592:	8b5b      	ldrh	r3, [r3, #26]
 8015594:	461a      	mov	r2, r3
 8015596:	683b      	ldr	r3, [r7, #0]
 8015598:	8a9b      	ldrh	r3, [r3, #20]
 801559a:	1ad2      	subs	r2, r2, r3
 801559c:	4b94      	ldr	r3, [pc, #592]	@ (80157f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801559e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80155a0:	683b      	ldr	r3, [r7, #0]
 80155a2:	8b5b      	ldrh	r3, [r3, #26]
 80155a4:	461a      	mov	r2, r3
 80155a6:	683b      	ldr	r3, [r7, #0]
 80155a8:	8a9b      	ldrh	r3, [r3, #20]
 80155aa:	1ad2      	subs	r2, r2, r3
 80155ac:	4b90      	ldr	r3, [pc, #576]	@ (80157f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80155ae:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80155b0:	683b      	ldr	r3, [r7, #0]
 80155b2:	8b1b      	ldrh	r3, [r3, #24]
 80155b4:	461a      	mov	r2, r3
 80155b6:	683b      	ldr	r3, [r7, #0]
 80155b8:	8a9b      	ldrh	r3, [r3, #20]
 80155ba:	1ad2      	subs	r2, r2, r3
 80155bc:	4b8c      	ldr	r3, [pc, #560]	@ (80157f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80155be:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80155c0:	4a8b      	ldr	r2, [pc, #556]	@ (80157f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80155c2:	693b      	ldr	r3, [r7, #16]
 80155c4:	6353      	str	r3, [r2, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80155c6:	683b      	ldr	r3, [r7, #0]
 80155c8:	8adb      	ldrh	r3, [r3, #22]
 80155ca:	461a      	mov	r2, r3
 80155cc:	683b      	ldr	r3, [r7, #0]
 80155ce:	8a9b      	ldrh	r3, [r3, #20]
 80155d0:	041b      	lsls	r3, r3, #16
 80155d2:	431a      	orrs	r2, r3
 80155d4:	4b86      	ldr	r3, [pc, #536]	@ (80157f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80155d6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80155d8:	683b      	ldr	r3, [r7, #0]
 80155da:	691a      	ldr	r2, [r3, #16]
 80155dc:	4b84      	ldr	r3, [pc, #528]	@ (80157f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80155de:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80155e0:	683b      	ldr	r3, [r7, #0]
 80155e2:	685a      	ldr	r2, [r3, #4]
 80155e4:	4b82      	ldr	r3, [pc, #520]	@ (80157f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80155e6:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 80155e8:	683b      	ldr	r3, [r7, #0]
 80155ea:	681b      	ldr	r3, [r3, #0]
 80155ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80155f0:	d036      	beq.n	8015660 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x104>
 80155f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80155f6:	f200 80de 	bhi.w	80157b6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x25a>
 80155fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80155fe:	d015      	beq.n	801562c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8015600:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015604:	f200 80d7 	bhi.w	80157b6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x25a>
 8015608:	2b80      	cmp	r3, #128	@ 0x80
 801560a:	d043      	beq.n	8015694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>
 801560c:	2b80      	cmp	r3, #128	@ 0x80
 801560e:	f200 80d2 	bhi.w	80157b6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x25a>
 8015612:	2b40      	cmp	r3, #64	@ 0x40
 8015614:	f000 80bb 	beq.w	801578e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
 8015618:	2b40      	cmp	r3, #64	@ 0x40
 801561a:	f200 80cc 	bhi.w	80157b6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x25a>
 801561e:	2b04      	cmp	r3, #4
 8015620:	f000 80a1 	beq.w	8015766 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20a>
 8015624:	2b20      	cmp	r3, #32
 8015626:	f000 80b2 	beq.w	801578e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
 801562a:	e0c4      	b.n	80157b6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x25a>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801562c:	683b      	ldr	r3, [r7, #0]
 801562e:	7f1b      	ldrb	r3, [r3, #28]
 8015630:	061a      	lsls	r2, r3, #24
 8015632:	496f      	ldr	r1, [pc, #444]	@ (80157f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8015634:	4b6f      	ldr	r3, [pc, #444]	@ (80157f4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8015636:	4313      	orrs	r3, r2
 8015638:	61cb      	str	r3, [r1, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 801563a:	683b      	ldr	r3, [r7, #0]
 801563c:	330c      	adds	r3, #12
 801563e:	4c6c      	ldr	r4, [pc, #432]	@ (80157f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8015640:	4618      	mov	r0, r3
 8015642:	f7ff fd9f 	bl	8015184 <_ZNK8touchgfx9colortypecvmEv>
 8015646:	4603      	mov	r3, r0
 8015648:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801564a:	4a69      	ldr	r2, [pc, #420]	@ (80157f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801564c:	697b      	ldr	r3, [r7, #20]
 801564e:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8015650:	683b      	ldr	r3, [r7, #0]
 8015652:	691a      	ldr	r2, [r3, #16]
 8015654:	4b66      	ldr	r3, [pc, #408]	@ (80157f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8015656:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8015658:	4b65      	ldr	r3, [pc, #404]	@ (80157f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801565a:	4a67      	ldr	r2, [pc, #412]	@ (80157f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801565c:	601a      	str	r2, [r3, #0]
        break;
 801565e:	e0c2      	b.n	80157e6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28a>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8015660:	683b      	ldr	r3, [r7, #0]
 8015662:	7f1b      	ldrb	r3, [r3, #28]
 8015664:	061a      	lsls	r2, r3, #24
 8015666:	4962      	ldr	r1, [pc, #392]	@ (80157f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8015668:	4b64      	ldr	r3, [pc, #400]	@ (80157fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801566a:	4313      	orrs	r3, r2
 801566c:	61cb      	str	r3, [r1, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 801566e:	683b      	ldr	r3, [r7, #0]
 8015670:	330c      	adds	r3, #12
 8015672:	4c5f      	ldr	r4, [pc, #380]	@ (80157f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8015674:	4618      	mov	r0, r3
 8015676:	f7ff fd85 	bl	8015184 <_ZNK8touchgfx9colortypecvmEv>
 801567a:	4603      	mov	r3, r0
 801567c:	6223      	str	r3, [r4, #32]
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801567e:	4a5c      	ldr	r2, [pc, #368]	@ (80157f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8015680:	697b      	ldr	r3, [r7, #20]
 8015682:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8015684:	683b      	ldr	r3, [r7, #0]
 8015686:	691a      	ldr	r2, [r3, #16]
 8015688:	4b59      	ldr	r3, [pc, #356]	@ (80157f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801568a:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 801568c:	4b58      	ldr	r3, [pc, #352]	@ (80157f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801568e:	4a5a      	ldr	r2, [pc, #360]	@ (80157f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8015690:	601a      	str	r2, [r3, #0]
        break;
 8015692:	e0a8      	b.n	80157e6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28a>
    case BLIT_OP_COPY_L8:
        {
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8015694:	683b      	ldr	r3, [r7, #0]
 8015696:	689b      	ldr	r3, [r3, #8]
 8015698:	60fb      	str	r3, [r7, #12]
            bool blend = true;
 801569a:	2301      	movs	r3, #1
 801569c:	77fb      	strb	r3, [r7, #31]

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801569e:	683b      	ldr	r3, [r7, #0]
 80156a0:	7f1b      	ldrb	r3, [r3, #28]
 80156a2:	061a      	lsls	r2, r3, #24
 80156a4:	69bb      	ldr	r3, [r7, #24]
 80156a6:	4313      	orrs	r3, r2
 80156a8:	4a51      	ldr	r2, [pc, #324]	@ (80157f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80156aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80156ae:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80156b0:	4a4f      	ldr	r2, [pc, #316]	@ (80157f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80156b2:	697b      	ldr	r3, [r7, #20]
 80156b4:	6253      	str	r3, [r2, #36]	@ 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80156b6:	683b      	ldr	r3, [r7, #0]
 80156b8:	691a      	ldr	r2, [r3, #16]
 80156ba:	4b4d      	ldr	r3, [pc, #308]	@ (80157f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80156bc:	615a      	str	r2, [r3, #20]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 80156be:	68fb      	ldr	r3, [r7, #12]
 80156c0:	1d1a      	adds	r2, r3, #4
 80156c2:	4b4b      	ldr	r3, [pc, #300]	@ (80157f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80156c4:	62da      	str	r2, [r3, #44]	@ 0x2c

            switch ((Bitmap::ClutFormat)palette->format)
 80156c6:	68fb      	ldr	r3, [r7, #12]
 80156c8:	881b      	ldrh	r3, [r3, #0]
 80156ca:	b2db      	uxtb	r3, r3
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d002      	beq.n	80156d6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x17a>
 80156d0:	2b01      	cmp	r3, #1
 80156d2:	d00d      	beq.n	80156f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x194>
 80156d4:	e020      	b.n	8015718 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80156d6:	4b46      	ldr	r3, [pc, #280]	@ (80157f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80156d8:	69da      	ldr	r2, [r3, #28]
 80156da:	4b49      	ldr	r3, [pc, #292]	@ (8015800 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80156dc:	4013      	ands	r3, r2
 80156de:	68fa      	ldr	r2, [r7, #12]
 80156e0:	8852      	ldrh	r2, [r2, #2]
 80156e2:	3a01      	subs	r2, #1
 80156e4:	0212      	lsls	r2, r2, #8
 80156e6:	4611      	mov	r1, r2
 80156e8:	4a41      	ldr	r2, [pc, #260]	@ (80157f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80156ea:	430b      	orrs	r3, r1
 80156ec:	61d3      	str	r3, [r2, #28]
                break;
 80156ee:	e01a      	b.n	8015726 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if (blitOp.alpha == 255)
 80156f0:	683b      	ldr	r3, [r7, #0]
 80156f2:	7f1b      	ldrb	r3, [r3, #28]
 80156f4:	2bff      	cmp	r3, #255	@ 0xff
 80156f6:	d101      	bne.n	80156fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a0>
                {
                    blend = false;
 80156f8:	2300      	movs	r3, #0
 80156fa:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80156fc:	4b3c      	ldr	r3, [pc, #240]	@ (80157f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80156fe:	69da      	ldr	r2, [r3, #28]
 8015700:	4b3f      	ldr	r3, [pc, #252]	@ (8015800 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8015702:	4013      	ands	r3, r2
 8015704:	68fa      	ldr	r2, [r7, #12]
 8015706:	8852      	ldrh	r2, [r2, #2]
 8015708:	3a01      	subs	r2, #1
 801570a:	0212      	lsls	r2, r2, #8
 801570c:	4313      	orrs	r3, r2
 801570e:	4a38      	ldr	r2, [pc, #224]	@ (80157f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8015710:	f043 0310 	orr.w	r3, r3, #16
 8015714:	61d3      	str	r3, [r2, #28]
                break;
 8015716:	e006      	b.n	8015726 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 8015718:	4b3a      	ldr	r3, [pc, #232]	@ (8015804 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 801571a:	4a3b      	ldr	r2, [pc, #236]	@ (8015808 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 801571c:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8015720:	483a      	ldr	r0, [pc, #232]	@ (801580c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 8015722:	f014 fcb5 	bl	802a090 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8015726:	4b32      	ldr	r3, [pc, #200]	@ (80157f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8015728:	69db      	ldr	r3, [r3, #28]
 801572a:	4a31      	ldr	r2, [pc, #196]	@ (80157f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801572c:	f043 0320 	orr.w	r3, r3, #32
 8015730:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8015732:	bf00      	nop
 8015734:	4b2e      	ldr	r3, [pc, #184]	@ (80157f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8015736:	69db      	ldr	r3, [r3, #28]
 8015738:	f003 0320 	and.w	r3, r3, #32
 801573c:	2b00      	cmp	r3, #0
 801573e:	bf14      	ite	ne
 8015740:	2301      	movne	r3, #1
 8015742:	2300      	moveq	r3, #0
 8015744:	b2db      	uxtb	r3, r3
 8015746:	2b00      	cmp	r3, #0
 8015748:	d1f4      	bne.n	8015734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 801574a:	4b29      	ldr	r3, [pc, #164]	@ (80157f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801574c:	2210      	movs	r2, #16
 801574e:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if (blend)
 8015750:	7ffb      	ldrb	r3, [r7, #31]
 8015752:	2b00      	cmp	r3, #0
 8015754:	d003      	beq.n	801575e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x202>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8015756:	4b26      	ldr	r3, [pc, #152]	@ (80157f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8015758:	4a27      	ldr	r2, [pc, #156]	@ (80157f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801575a:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
            }
        }
        break;
 801575c:	e043      	b.n	80157e6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28a>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 801575e:	4b24      	ldr	r3, [pc, #144]	@ (80157f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8015760:	4a2b      	ldr	r2, [pc, #172]	@ (8015810 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 8015762:	601a      	str	r2, [r3, #0]
        break;
 8015764:	e03f      	b.n	80157e6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28a>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8015766:	683b      	ldr	r3, [r7, #0]
 8015768:	7f1b      	ldrb	r3, [r3, #28]
 801576a:	061a      	lsls	r2, r3, #24
 801576c:	69bb      	ldr	r3, [r7, #24]
 801576e:	4313      	orrs	r3, r2
 8015770:	4a1f      	ldr	r2, [pc, #124]	@ (80157f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8015772:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8015776:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8015778:	4a1d      	ldr	r2, [pc, #116]	@ (80157f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801577a:	697b      	ldr	r3, [r7, #20]
 801577c:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801577e:	683b      	ldr	r3, [r7, #0]
 8015780:	691a      	ldr	r2, [r3, #16]
 8015782:	4b1b      	ldr	r3, [pc, #108]	@ (80157f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8015784:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8015786:	4b1a      	ldr	r3, [pc, #104]	@ (80157f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8015788:	4a1b      	ldr	r2, [pc, #108]	@ (80157f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801578a:	601a      	str	r2, [r3, #0]
        break;
 801578c:	e02b      	b.n	80157e6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28a>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801578e:	683b      	ldr	r3, [r7, #0]
 8015790:	7f1b      	ldrb	r3, [r3, #28]
 8015792:	061a      	lsls	r2, r3, #24
 8015794:	69bb      	ldr	r3, [r7, #24]
 8015796:	4313      	orrs	r3, r2
 8015798:	4a15      	ldr	r2, [pc, #84]	@ (80157f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801579a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801579e:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80157a0:	4a13      	ldr	r2, [pc, #76]	@ (80157f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80157a2:	697b      	ldr	r3, [r7, #20]
 80157a4:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80157a6:	683b      	ldr	r3, [r7, #0]
 80157a8:	691a      	ldr	r2, [r3, #16]
 80157aa:	4b11      	ldr	r3, [pc, #68]	@ (80157f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80157ac:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 80157ae:	4b10      	ldr	r3, [pc, #64]	@ (80157f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80157b0:	4a11      	ldr	r2, [pc, #68]	@ (80157f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80157b2:	601a      	str	r2, [r3, #0]
        break;
 80157b4:	e017      	b.n	80157e6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28a>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80157b6:	683b      	ldr	r3, [r7, #0]
 80157b8:	7f1b      	ldrb	r3, [r3, #28]
 80157ba:	061a      	lsls	r2, r3, #24
 80157bc:	69bb      	ldr	r3, [r7, #24]
 80157be:	4313      	orrs	r3, r2
 80157c0:	4a0b      	ldr	r2, [pc, #44]	@ (80157f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80157c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80157c6:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 80157c8:	683b      	ldr	r3, [r7, #0]
 80157ca:	7f5a      	ldrb	r2, [r3, #29]
 80157cc:	683b      	ldr	r3, [r7, #0]
 80157ce:	7f9b      	ldrb	r3, [r3, #30]
 80157d0:	429a      	cmp	r2, r3
 80157d2:	d003      	beq.n	80157dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x280>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 80157d4:	4b06      	ldr	r3, [pc, #24]	@ (80157f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80157d6:	4a0e      	ldr	r2, [pc, #56]	@ (8015810 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 80157d8:	601a      	str	r2, [r3, #0]
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
        }

        break;
 80157da:	e003      	b.n	80157e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 80157dc:	4b04      	ldr	r3, [pc, #16]	@ (80157f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80157de:	f242 3201 	movw	r2, #8961	@ 0x2301
 80157e2:	601a      	str	r2, [r3, #0]
        break;
 80157e4:	bf00      	nop
    }
}
 80157e6:	bf00      	nop
 80157e8:	3724      	adds	r7, #36	@ 0x24
 80157ea:	46bd      	mov	sp, r7
 80157ec:	bd90      	pop	{r4, r7, pc}
 80157ee:	bf00      	nop
 80157f0:	52001000 	.word	0x52001000
 80157f4:	0002000a 	.word	0x0002000a
 80157f8:	00022301 	.word	0x00022301
 80157fc:	00020009 	.word	0x00020009
 8015800:	ffff00ef 	.word	0xffff00ef
 8015804:	0802bb7c 	.word	0x0802bb7c
 8015808:	0802bb98 	.word	0x0802bb98
 801580c:	0802bb04 	.word	0x0802bb04
 8015810:	00012301 	.word	0x00012301

08015814 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8015814:	b590      	push	{r4, r7, lr}
 8015816:	b085      	sub	sp, #20
 8015818:	af00      	add	r7, sp, #0
 801581a:	6078      	str	r0, [r7, #4]
 801581c:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 801581e:	683b      	ldr	r3, [r7, #0]
 8015820:	7f9b      	ldrb	r3, [r3, #30]
 8015822:	4619      	mov	r1, r3
 8015824:	6878      	ldr	r0, [r7, #4]
 8015826:	f7ff fe4f 	bl	80154c8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 801582a:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 801582c:	4a2f      	ldr	r2, [pc, #188]	@ (80158ec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 801582e:	68fb      	ldr	r3, [r7, #12]
 8015830:	6353      	str	r3, [r2, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8015832:	683b      	ldr	r3, [r7, #0]
 8015834:	8adb      	ldrh	r3, [r3, #22]
 8015836:	461a      	mov	r2, r3
 8015838:	683b      	ldr	r3, [r7, #0]
 801583a:	8a9b      	ldrh	r3, [r3, #20]
 801583c:	041b      	lsls	r3, r3, #16
 801583e:	431a      	orrs	r2, r3
 8015840:	4b2a      	ldr	r3, [pc, #168]	@ (80158ec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8015842:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8015844:	683b      	ldr	r3, [r7, #0]
 8015846:	691a      	ldr	r2, [r3, #16]
 8015848:	4b28      	ldr	r3, [pc, #160]	@ (80158ec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 801584a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 801584c:	683b      	ldr	r3, [r7, #0]
 801584e:	8b5b      	ldrh	r3, [r3, #26]
 8015850:	461a      	mov	r2, r3
 8015852:	683b      	ldr	r3, [r7, #0]
 8015854:	8a9b      	ldrh	r3, [r3, #20]
 8015856:	1ad2      	subs	r2, r2, r3
 8015858:	4b24      	ldr	r3, [pc, #144]	@ (80158ec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 801585a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 801585c:	683b      	ldr	r3, [r7, #0]
 801585e:	681b      	ldr	r3, [r3, #0]
 8015860:	2b08      	cmp	r3, #8
 8015862:	d12d      	bne.n	80158c0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xac>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8015864:	683b      	ldr	r3, [r7, #0]
 8015866:	8b5b      	ldrh	r3, [r3, #26]
 8015868:	461a      	mov	r2, r3
 801586a:	683b      	ldr	r3, [r7, #0]
 801586c:	8a9b      	ldrh	r3, [r3, #20]
 801586e:	1ad2      	subs	r2, r2, r3
 8015870:	4b1e      	ldr	r3, [pc, #120]	@ (80158ec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8015872:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8015874:	683b      	ldr	r3, [r7, #0]
 8015876:	8b5b      	ldrh	r3, [r3, #26]
 8015878:	461a      	mov	r2, r3
 801587a:	683b      	ldr	r3, [r7, #0]
 801587c:	8a9b      	ldrh	r3, [r3, #20]
 801587e:	1ad2      	subs	r2, r2, r3
 8015880:	4b1a      	ldr	r3, [pc, #104]	@ (80158ec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8015882:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8015884:	4a19      	ldr	r2, [pc, #100]	@ (80158ec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 801588a:	683b      	ldr	r3, [r7, #0]
 801588c:	7f1b      	ldrb	r3, [r3, #28]
 801588e:	061a      	lsls	r2, r3, #24
 8015890:	4916      	ldr	r1, [pc, #88]	@ (80158ec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8015892:	4b17      	ldr	r3, [pc, #92]	@ (80158f0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 8015894:	4313      	orrs	r3, r2
 8015896:	61cb      	str	r3, [r1, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8015898:	683b      	ldr	r3, [r7, #0]
 801589a:	330c      	adds	r3, #12
 801589c:	4c13      	ldr	r4, [pc, #76]	@ (80158ec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 801589e:	4618      	mov	r0, r3
 80158a0:	f7ff fc70 	bl	8015184 <_ZNK8touchgfx9colortypecvmEv>
 80158a4:	4603      	mov	r3, r0
 80158a6:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80158a8:	683b      	ldr	r3, [r7, #0]
 80158aa:	691a      	ldr	r2, [r3, #16]
 80158ac:	4b0f      	ldr	r3, [pc, #60]	@ (80158ec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80158ae:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80158b0:	683b      	ldr	r3, [r7, #0]
 80158b2:	691a      	ldr	r2, [r3, #16]
 80158b4:	4b0d      	ldr	r3, [pc, #52]	@ (80158ec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80158b6:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND | DMA2D_IT_CE | DMA2D_IT_TE));
 80158b8:	4b0c      	ldr	r3, [pc, #48]	@ (80158ec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80158ba:	4a0e      	ldr	r2, [pc, #56]	@ (80158f4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe0>)
 80158bc:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
    }
}
 80158be:	e010      	b.n	80158e2 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xce>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 80158c0:	4a0a      	ldr	r2, [pc, #40]	@ (80158ec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 80158c6:	4b09      	ldr	r3, [pc, #36]	@ (80158ec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80158c8:	2200      	movs	r2, #0
 80158ca:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 80158cc:	683b      	ldr	r3, [r7, #0]
 80158ce:	330c      	adds	r3, #12
 80158d0:	4c06      	ldr	r4, [pc, #24]	@ (80158ec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80158d2:	4618      	mov	r0, r3
 80158d4:	f7ff fc56 	bl	8015184 <_ZNK8touchgfx9colortypecvmEv>
 80158d8:	4603      	mov	r3, r0
 80158da:	63a3      	str	r3, [r4, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 80158dc:	4b03      	ldr	r3, [pc, #12]	@ (80158ec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80158de:	4a06      	ldr	r2, [pc, #24]	@ (80158f8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe4>)
 80158e0:	601a      	str	r2, [r3, #0]
}
 80158e2:	bf00      	nop
 80158e4:	3714      	adds	r7, #20
 80158e6:	46bd      	mov	sp, r7
 80158e8:	bd90      	pop	{r4, r7, pc}
 80158ea:	bf00      	nop
 80158ec:	52001000 	.word	0x52001000
 80158f0:	00010009 	.word	0x00010009
 80158f4:	00022301 	.word	0x00022301
 80158f8:	00032301 	.word	0x00032301

080158fc <_ZN8touchgfx5paint8tearDownEv>:
 * @fn void tearDown();
 *
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
 80158fc:	b480      	push	{r7}
 80158fe:	af00      	add	r7, sp, #0
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8015900:	bf00      	nop
 8015902:	4b09      	ldr	r3, [pc, #36]	@ (8015928 <_ZN8touchgfx5paint8tearDownEv+0x2c>)
 8015904:	681b      	ldr	r3, [r3, #0]
 8015906:	f003 0301 	and.w	r3, r3, #1
 801590a:	2b00      	cmp	r3, #0
 801590c:	bf14      	ite	ne
 801590e:	2301      	movne	r3, #1
 8015910:	2300      	moveq	r3, #0
 8015912:	b2db      	uxtb	r3, r3
 8015914:	2b00      	cmp	r3, #0
 8015916:	d1f4      	bne.n	8015902 <_ZN8touchgfx5paint8tearDownEv+0x6>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8015918:	4b03      	ldr	r3, [pc, #12]	@ (8015928 <_ZN8touchgfx5paint8tearDownEv+0x2c>)
 801591a:	2223      	movs	r2, #35	@ 0x23
 801591c:	609a      	str	r2, [r3, #8]
}
 801591e:	bf00      	nop
 8015920:	46bd      	mov	sp, r7
 8015922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015926:	4770      	bx	lr
 8015928:	52001000 	.word	0x52001000

0801592c <_ZN8touchgfx5paint9flushLineEPmi>:
/** Flushes a line of pixels in the data cache if used.
 *
 * @brief Flushes decoded RGB pixels when rendering compressed images
 */
void flushLine(uint32_t* addr, int sizebytes)
{
 801592c:	b480      	push	{r7}
 801592e:	b087      	sub	sp, #28
 8015930:	af00      	add	r7, sp, #0
 8015932:	6078      	str	r0, [r7, #4]
 8015934:	6039      	str	r1, [r7, #0]
    // This funciton is used when decompressing RGB images to flush
    // the currently decoded pixels in the cache to allow the DMA2D
    // to blend the pixels correcly.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8015936:	4b1b      	ldr	r3, [pc, #108]	@ (80159a4 <_ZN8touchgfx5paint9flushLineEPmi+0x78>)
 8015938:	695b      	ldr	r3, [r3, #20]
 801593a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801593e:	2b00      	cmp	r3, #0
 8015940:	bf14      	ite	ne
 8015942:	2301      	movne	r3, #1
 8015944:	2300      	moveq	r3, #0
 8015946:	b2db      	uxtb	r3, r3
 8015948:	2b00      	cmp	r3, #0
 801594a:	d025      	beq.n	8015998 <_ZN8touchgfx5paint9flushLineEPmi+0x6c>
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	617b      	str	r3, [r7, #20]
 8015950:	683b      	ldr	r3, [r7, #0]
 8015952:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8015954:	693b      	ldr	r3, [r7, #16]
 8015956:	2b00      	cmp	r3, #0
 8015958:	dd1d      	ble.n	8015996 <_ZN8touchgfx5paint9flushLineEPmi+0x6a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 801595a:	697b      	ldr	r3, [r7, #20]
 801595c:	f003 021f 	and.w	r2, r3, #31
 8015960:	693b      	ldr	r3, [r7, #16]
 8015962:	4413      	add	r3, r2
 8015964:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8015966:	697b      	ldr	r3, [r7, #20]
 8015968:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 801596a:	f3bf 8f4f 	dsb	sy
}
 801596e:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8015970:	4a0c      	ldr	r2, [pc, #48]	@ (80159a4 <_ZN8touchgfx5paint9flushLineEPmi+0x78>)
 8015972:	68bb      	ldr	r3, [r7, #8]
 8015974:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8015978:	68bb      	ldr	r3, [r7, #8]
 801597a:	3320      	adds	r3, #32
 801597c:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 801597e:	68fb      	ldr	r3, [r7, #12]
 8015980:	3b20      	subs	r3, #32
 8015982:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	2b00      	cmp	r3, #0
 8015988:	dcf2      	bgt.n	8015970 <_ZN8touchgfx5paint9flushLineEPmi+0x44>
  __ASM volatile ("dsb 0xF":::"memory");
 801598a:	f3bf 8f4f 	dsb	sy
}
 801598e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8015990:	f3bf 8f6f 	isb	sy
}
 8015994:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8015996:	bf00      	nop
    {
        SCB_CleanDCache_by_Addr(addr, sizebytes);
    }
}
 8015998:	bf00      	nop
 801599a:	371c      	adds	r7, #28
 801599c:	46bd      	mov	sp, r7
 801599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159a2:	4770      	bx	lr
 80159a4:	e000ed00 	.word	0xe000ed00

080159a8 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>:
 *
 * @brief Renders Canvas Widget chunks using DMA.
 * This functions will not generate an interrupt, and will not affect the DMA queue.
 */
void lineFromColor(uint8_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha)
{
 80159a8:	b480      	push	{r7}
 80159aa:	b085      	sub	sp, #20
 80159ac:	af00      	add	r7, sp, #0
 80159ae:	60f8      	str	r0, [r7, #12]
 80159b0:	60b9      	str	r1, [r7, #8]
 80159b2:	607a      	str	r2, [r7, #4]
 80159b4:	70fb      	strb	r3, [r7, #3]
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 80159b6:	bf00      	nop
 80159b8:	4b21      	ldr	r3, [pc, #132]	@ (8015a40 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x98>)
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	f003 0301 	and.w	r3, r3, #1
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	bf14      	ite	ne
 80159c4:	2301      	movne	r3, #1
 80159c6:	2300      	moveq	r3, #0
 80159c8:	b2db      	uxtb	r3, r3
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d1f4      	bne.n	80159b8 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x10>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80159ce:	4b1c      	ldr	r3, [pc, #112]	@ (8015a40 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x98>)
 80159d0:	2223      	movs	r2, #35	@ 0x23
 80159d2:	609a      	str	r2, [r3, #8]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80159d4:	4b1a      	ldr	r3, [pc, #104]	@ (8015a40 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x98>)
 80159d6:	2201      	movs	r2, #1
 80159d8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80159da:	68bb      	ldr	r3, [r7, #8]
 80159dc:	041b      	lsls	r3, r3, #16
 80159de:	4a18      	ldr	r2, [pc, #96]	@ (8015a40 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x98>)
 80159e0:	f043 0301 	orr.w	r3, r3, #1
 80159e4:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 80159e6:	4a16      	ldr	r2, [pc, #88]	@ (8015a40 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x98>)
 80159e8:	68fb      	ldr	r3, [r7, #12]
 80159ea:	63d3      	str	r3, [r2, #60]	@ 0x3c

    if (alpha < 0xFF)
 80159ec:	78fb      	ldrb	r3, [r7, #3]
 80159ee:	2bff      	cmp	r3, #255	@ 0xff
 80159f0:	d017      	beq.n	8015a22 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x7a>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80159f2:	4b13      	ldr	r3, [pc, #76]	@ (8015a40 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x98>)
 80159f4:	2201      	movs	r2, #1
 80159f6:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80159f8:	78fb      	ldrb	r3, [r7, #3]
 80159fa:	061a      	lsls	r2, r3, #24
 80159fc:	4910      	ldr	r1, [pc, #64]	@ (8015a40 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x98>)
 80159fe:	4b11      	ldr	r3, [pc, #68]	@ (8015a44 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x9c>)
 8015a00:	4313      	orrs	r3, r2
 8015a02:	61cb      	str	r3, [r1, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8015a04:	4a0e      	ldr	r2, [pc, #56]	@ (8015a40 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x98>)
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8015a0c:	6213      	str	r3, [r2, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8015a0e:	4a0c      	ldr	r2, [pc, #48]	@ (8015a40 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x98>)
 8015a10:	68fb      	ldr	r3, [r7, #12]
 8015a12:	6153      	str	r3, [r2, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 8015a14:	4a0a      	ldr	r2, [pc, #40]	@ (8015a40 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x98>)
 8015a16:	68fb      	ldr	r3, [r7, #12]
 8015a18:	60d3      	str	r3, [r2, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8015a1a:	4b09      	ldr	r3, [pc, #36]	@ (8015a40 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x98>)
 8015a1c:	4a0a      	ldr	r2, [pc, #40]	@ (8015a48 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0xa0>)
 8015a1e:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, color);

        /* Start DMA2D */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
    }
}
 8015a20:	e008      	b.n	8015a34 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x8c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8015a22:	4b07      	ldr	r3, [pc, #28]	@ (8015a40 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x98>)
 8015a24:	2201      	movs	r2, #1
 8015a26:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->OCOLR, color);
 8015a28:	4a05      	ldr	r2, [pc, #20]	@ (8015a40 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x98>)
 8015a2a:	687b      	ldr	r3, [r7, #4]
 8015a2c:	6393      	str	r3, [r2, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8015a2e:	4b04      	ldr	r3, [pc, #16]	@ (8015a40 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x98>)
 8015a30:	4a06      	ldr	r2, [pc, #24]	@ (8015a4c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0xa4>)
 8015a32:	601a      	str	r2, [r3, #0]
}
 8015a34:	bf00      	nop
 8015a36:	3714      	adds	r7, #20
 8015a38:	46bd      	mov	sp, r7
 8015a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a3e:	4770      	bx	lr
 8015a40:	52001000 	.word	0x52001000
 8015a44:	00010009 	.word	0x00010009
 8015a48:	00020001 	.word	0x00020001
 8015a4c:	00030001 	.word	0x00030001

08015a50 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>:

void lineFromRGB888(uint8_t* const ptr, const uint8_t* const data, const unsigned count, const uint8_t alpha)
{
 8015a50:	b480      	push	{r7}
 8015a52:	b085      	sub	sp, #20
 8015a54:	af00      	add	r7, sp, #0
 8015a56:	60f8      	str	r0, [r7, #12]
 8015a58:	60b9      	str	r1, [r7, #8]
 8015a5a:	607a      	str	r2, [r7, #4]
 8015a5c:	70fb      	strb	r3, [r7, #3]
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8015a5e:	bf00      	nop
 8015a60:	4b1f      	ldr	r3, [pc, #124]	@ (8015ae0 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x90>)
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	f003 0301 	and.w	r3, r3, #1
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	bf14      	ite	ne
 8015a6c:	2301      	movne	r3, #1
 8015a6e:	2300      	moveq	r3, #0
 8015a70:	b2db      	uxtb	r3, r3
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d1f4      	bne.n	8015a60 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x10>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8015a76:	4b1a      	ldr	r3, [pc, #104]	@ (8015ae0 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x90>)
 8015a78:	2223      	movs	r2, #35	@ 0x23
 8015a7a:	609a      	str	r2, [r3, #8]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8015a7c:	4b18      	ldr	r3, [pc, #96]	@ (8015ae0 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x90>)
 8015a7e:	2201      	movs	r2, #1
 8015a80:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	041b      	lsls	r3, r3, #16
 8015a86:	4a16      	ldr	r2, [pc, #88]	@ (8015ae0 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x90>)
 8015a88:	f043 0301 	orr.w	r3, r3, #1
 8015a8c:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8015a8e:	4a14      	ldr	r2, [pc, #80]	@ (8015ae0 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x90>)
 8015a90:	68fb      	ldr	r3, [r7, #12]
 8015a92:	63d3      	str	r3, [r2, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8015a94:	4a12      	ldr	r2, [pc, #72]	@ (8015ae0 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x90>)
 8015a96:	68bb      	ldr	r3, [r7, #8]
 8015a98:	60d3      	str	r3, [r2, #12]

    if (alpha < 0xFF)
 8015a9a:	78fb      	ldrb	r3, [r7, #3]
 8015a9c:	2bff      	cmp	r3, #255	@ 0xff
 8015a9e:	d00f      	beq.n	8015ac0 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x70>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8015aa0:	78fb      	ldrb	r3, [r7, #3]
 8015aa2:	061a      	lsls	r2, r3, #24
 8015aa4:	490e      	ldr	r1, [pc, #56]	@ (8015ae0 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x90>)
 8015aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8015ae4 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x94>)
 8015aa8:	4313      	orrs	r3, r2
 8015aaa:	61cb      	str	r3, [r1, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8015aac:	4b0c      	ldr	r3, [pc, #48]	@ (8015ae0 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x90>)
 8015aae:	2201      	movs	r2, #1
 8015ab0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8015ab2:	4a0b      	ldr	r2, [pc, #44]	@ (8015ae0 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x90>)
 8015ab4:	68fb      	ldr	r3, [r7, #12]
 8015ab6:	6153      	str	r3, [r2, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8015ab8:	4b09      	ldr	r3, [pc, #36]	@ (8015ae0 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x90>)
 8015aba:	4a0a      	ldr	r2, [pc, #40]	@ (8015ae4 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x94>)
 8015abc:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));

        /* Start DMA2D : M2M Mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
    }
}
 8015abe:	e008      	b.n	8015ad2 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x82>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8015ac0:	78fb      	ldrb	r3, [r7, #3]
 8015ac2:	061a      	lsls	r2, r3, #24
 8015ac4:	4906      	ldr	r1, [pc, #24]	@ (8015ae0 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x90>)
 8015ac6:	4b07      	ldr	r3, [pc, #28]	@ (8015ae4 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x94>)
 8015ac8:	4313      	orrs	r3, r2
 8015aca:	61cb      	str	r3, [r1, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 8015acc:	4b04      	ldr	r3, [pc, #16]	@ (8015ae0 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x90>)
 8015ace:	2201      	movs	r2, #1
 8015ad0:	601a      	str	r2, [r3, #0]
}
 8015ad2:	bf00      	nop
 8015ad4:	3714      	adds	r7, #20
 8015ad6:	46bd      	mov	sp, r7
 8015ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015adc:	4770      	bx	lr
 8015ade:	bf00      	nop
 8015ae0:	52001000 	.word	0x52001000
 8015ae4:	00020001 	.word	0x00020001

08015ae8 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>:

void lineFromARGB8888(uint8_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 8015ae8:	b480      	push	{r7}
 8015aea:	b085      	sub	sp, #20
 8015aec:	af00      	add	r7, sp, #0
 8015aee:	60f8      	str	r0, [r7, #12]
 8015af0:	60b9      	str	r1, [r7, #8]
 8015af2:	607a      	str	r2, [r7, #4]
 8015af4:	70fb      	strb	r3, [r7, #3]
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8015af6:	bf00      	nop
 8015af8:	4b18      	ldr	r3, [pc, #96]	@ (8015b5c <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x74>)
 8015afa:	681b      	ldr	r3, [r3, #0]
 8015afc:	f003 0301 	and.w	r3, r3, #1
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	bf14      	ite	ne
 8015b04:	2301      	movne	r3, #1
 8015b06:	2300      	moveq	r3, #0
 8015b08:	b2db      	uxtb	r3, r3
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d1f4      	bne.n	8015af8 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x10>
    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8015b0e:	4b13      	ldr	r3, [pc, #76]	@ (8015b5c <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x74>)
 8015b10:	2223      	movs	r2, #35	@ 0x23
 8015b12:	609a      	str	r2, [r3, #8]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8015b14:	4b11      	ldr	r3, [pc, #68]	@ (8015b5c <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x74>)
 8015b16:	2201      	movs	r2, #1
 8015b18:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	041b      	lsls	r3, r3, #16
 8015b1e:	4a0f      	ldr	r2, [pc, #60]	@ (8015b5c <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x74>)
 8015b20:	f043 0301 	orr.w	r3, r3, #1
 8015b24:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8015b26:	4a0d      	ldr	r2, [pc, #52]	@ (8015b5c <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x74>)
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	63d3      	str	r3, [r2, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8015b2c:	4a0b      	ldr	r2, [pc, #44]	@ (8015b5c <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x74>)
 8015b2e:	68bb      	ldr	r3, [r7, #8]
 8015b30:	60d3      	str	r3, [r2, #12]

    /* Set DMA2D color mode and alpha mode */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8015b32:	78fb      	ldrb	r3, [r7, #3]
 8015b34:	061b      	lsls	r3, r3, #24
 8015b36:	4a09      	ldr	r2, [pc, #36]	@ (8015b5c <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x74>)
 8015b38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8015b3c:	61d3      	str	r3, [r2, #28]

    /* Write DMA2D BGPFCCR register */
    WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8015b3e:	4b07      	ldr	r3, [pc, #28]	@ (8015b5c <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x74>)
 8015b40:	2201      	movs	r2, #1
 8015b42:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Configure DMA2D Stream source2 address */
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8015b44:	4a05      	ldr	r2, [pc, #20]	@ (8015b5c <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x74>)
 8015b46:	68fb      	ldr	r3, [r7, #12]
 8015b48:	6153      	str	r3, [r2, #20]

    /* Set DMA2D mode */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8015b4a:	4b04      	ldr	r3, [pc, #16]	@ (8015b5c <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x74>)
 8015b4c:	4a04      	ldr	r2, [pc, #16]	@ (8015b60 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x78>)
 8015b4e:	601a      	str	r2, [r3, #0]
}
 8015b50:	bf00      	nop
 8015b52:	3714      	adds	r7, #20
 8015b54:	46bd      	mov	sp, r7
 8015b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b5a:	4770      	bx	lr
 8015b5c:	52001000 	.word	0x52001000
 8015b60:	00020001 	.word	0x00020001

08015b64 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8015b64:	b580      	push	{r7, lr}
 8015b66:	b082      	sub	sp, #8
 8015b68:	af00      	add	r7, sp, #0
 8015b6a:	6078      	str	r0, [r7, #4]
 8015b6c:	4a05      	ldr	r2, [pc, #20]	@ (8015b84 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	601a      	str	r2, [r3, #0]
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	4618      	mov	r0, r3
 8015b76:	f7ff fb11 	bl	801519c <_ZN8touchgfx9DMA_QueueD1Ev>
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	4618      	mov	r0, r3
 8015b7e:	3708      	adds	r7, #8
 8015b80:	46bd      	mov	sp, r7
 8015b82:	bd80      	pop	{r7, pc}
 8015b84:	0802cb20 	.word	0x0802cb20

08015b88 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8015b88:	b580      	push	{r7, lr}
 8015b8a:	b082      	sub	sp, #8
 8015b8c:	af00      	add	r7, sp, #0
 8015b8e:	6078      	str	r0, [r7, #4]
 8015b90:	6878      	ldr	r0, [r7, #4]
 8015b92:	f7ff ffe7 	bl	8015b64 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8015b96:	2114      	movs	r1, #20
 8015b98:	6878      	ldr	r0, [r7, #4]
 8015b9a:	f013 ff00 	bl	802999e <_ZdlPvj>
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	4618      	mov	r0, r3
 8015ba2:	3708      	adds	r7, #8
 8015ba4:	46bd      	mov	sp, r7
 8015ba6:	bd80      	pop	{r7, pc}

08015ba8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8015ba8:	b480      	push	{r7}
 8015baa:	b083      	sub	sp, #12
 8015bac:	af00      	add	r7, sp, #0
 8015bae:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8015bb0:	4a04      	ldr	r2, [pc, #16]	@ (8015bc4 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	6013      	str	r3, [r2, #0]
    }
 8015bb6:	bf00      	nop
 8015bb8:	370c      	adds	r7, #12
 8015bba:	46bd      	mov	sp, r7
 8015bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bc0:	4770      	bx	lr
 8015bc2:	bf00      	nop
 8015bc4:	24013bbc 	.word	0x24013bbc

08015bc8 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8015bc8:	b480      	push	{r7}
 8015bca:	b085      	sub	sp, #20
 8015bcc:	af00      	add	r7, sp, #0
 8015bce:	60f8      	str	r0, [r7, #12]
 8015bd0:	60b9      	str	r1, [r7, #8]
 8015bd2:	607a      	str	r2, [r7, #4]
 8015bd4:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8015bd6:	4a0b      	ldr	r2, [pc, #44]	@ (8015c04 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8015bd8:	68fb      	ldr	r3, [r7, #12]
 8015bda:	601a      	str	r2, [r3, #0]
        : presenterStorage(pres),
 8015bdc:	68fb      	ldr	r3, [r7, #12]
 8015bde:	68ba      	ldr	r2, [r7, #8]
 8015be0:	605a      	str	r2, [r3, #4]
          screenStorage(scr),
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	687a      	ldr	r2, [r7, #4]
 8015be6:	609a      	str	r2, [r3, #8]
          transitionStorage(tra),
 8015be8:	68fb      	ldr	r3, [r7, #12]
 8015bea:	683a      	ldr	r2, [r7, #0]
 8015bec:	60da      	str	r2, [r3, #12]
          frontendApplication(app)
 8015bee:	68fb      	ldr	r3, [r7, #12]
 8015bf0:	69ba      	ldr	r2, [r7, #24]
 8015bf2:	611a      	str	r2, [r3, #16]
    {
    }
 8015bf4:	68fb      	ldr	r3, [r7, #12]
 8015bf6:	4618      	mov	r0, r3
 8015bf8:	3714      	adds	r7, #20
 8015bfa:	46bd      	mov	sp, r7
 8015bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c00:	4770      	bx	lr
 8015c02:	bf00      	nop
 8015c04:	0802c6c8 	.word	0x0802c6c8

08015c08 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8015c08:	b480      	push	{r7}
 8015c0a:	b083      	sub	sp, #12
 8015c0c:	af00      	add	r7, sp, #0
 8015c0e:	6078      	str	r0, [r7, #4]
    {
 8015c10:	4a04      	ldr	r2, [pc, #16]	@ (8015c24 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	601a      	str	r2, [r3, #0]
    }
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	4618      	mov	r0, r3
 8015c1a:	370c      	adds	r7, #12
 8015c1c:	46bd      	mov	sp, r7
 8015c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c22:	4770      	bx	lr
 8015c24:	0802c6c8 	.word	0x0802c6c8

08015c28 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8015c28:	b580      	push	{r7, lr}
 8015c2a:	b082      	sub	sp, #8
 8015c2c:	af00      	add	r7, sp, #0
 8015c2e:	6078      	str	r0, [r7, #4]
    }
 8015c30:	6878      	ldr	r0, [r7, #4]
 8015c32:	f7ff ffe9 	bl	8015c08 <_ZN8touchgfx7MVPHeapD1Ev>
 8015c36:	2114      	movs	r1, #20
 8015c38:	6878      	ldr	r0, [r7, #4]
 8015c3a:	f013 feb0 	bl	802999e <_ZdlPvj>
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	4618      	mov	r0, r3
 8015c42:	3708      	adds	r7, #8
 8015c44:	46bd      	mov	sp, r7
 8015c46:	bd80      	pop	{r7, pc}

08015c48 <_ZN8touchgfx18VectorFontRendererD1Ev>:
 */
class VectorFontRenderer
{
public:
    /** Virtual destructor. */
    virtual ~VectorFontRenderer()
 8015c48:	b480      	push	{r7}
 8015c4a:	b083      	sub	sp, #12
 8015c4c:	af00      	add	r7, sp, #0
 8015c4e:	6078      	str	r0, [r7, #4]
    {
 8015c50:	4a04      	ldr	r2, [pc, #16]	@ (8015c64 <_ZN8touchgfx18VectorFontRendererD1Ev+0x1c>)
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	601a      	str	r2, [r3, #0]
    }
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	4618      	mov	r0, r3
 8015c5a:	370c      	adds	r7, #12
 8015c5c:	46bd      	mov	sp, r7
 8015c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c62:	4770      	bx	lr
 8015c64:	0802c6b4 	.word	0x0802c6b4

08015c68 <_ZN8touchgfx18VectorFontRendererD0Ev>:
    virtual ~VectorFontRenderer()
 8015c68:	b580      	push	{r7, lr}
 8015c6a:	b082      	sub	sp, #8
 8015c6c:	af00      	add	r7, sp, #0
 8015c6e:	6078      	str	r0, [r7, #4]
    }
 8015c70:	6878      	ldr	r0, [r7, #4]
 8015c72:	f7ff ffe9 	bl	8015c48 <_ZN8touchgfx18VectorFontRendererD1Ev>
 8015c76:	2104      	movs	r1, #4
 8015c78:	6878      	ldr	r0, [r7, #4]
 8015c7a:	f013 fe90 	bl	802999e <_ZdlPvj>
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	4618      	mov	r0, r3
 8015c82:	3708      	adds	r7, #8
 8015c84:	46bd      	mov	sp, r7
 8015c86:	bd80      	pop	{r7, pc}

08015c88 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0), vectorFontRenderer(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8015c88:	b480      	push	{r7}
 8015c8a:	b083      	sub	sp, #12
 8015c8c:	af00      	add	r7, sp, #0
 8015c8e:	6078      	str	r0, [r7, #4]
    {
 8015c90:	4a04      	ldr	r2, [pc, #16]	@ (8015ca4 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	601a      	str	r2, [r3, #0]
    }
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	4618      	mov	r0, r3
 8015c9a:	370c      	adds	r7, #12
 8015c9c:	46bd      	mov	sp, r7
 8015c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ca2:	4770      	bx	lr
 8015ca4:	0802cdd0 	.word	0x0802cdd0

08015ca8 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8015ca8:	b580      	push	{r7, lr}
 8015caa:	b082      	sub	sp, #8
 8015cac:	af00      	add	r7, sp, #0
 8015cae:	6078      	str	r0, [r7, #4]
    }
 8015cb0:	6878      	ldr	r0, [r7, #4]
 8015cb2:	f7ff ffe9 	bl	8015c88 <_ZN8touchgfx3LCDD1Ev>
 8015cb6:	210c      	movs	r1, #12
 8015cb8:	6878      	ldr	r0, [r7, #4]
 8015cba:	f013 fe70 	bl	802999e <_ZdlPvj>
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	4618      	mov	r0, r3
 8015cc2:	3708      	adds	r7, #8
 8015cc4:	46bd      	mov	sp, r7
 8015cc6:	bd80      	pop	{r7, pc}

08015cc8 <_ZN8touchgfx3LCD21setVectorFontRendererEPNS_18VectorFontRendererE>:
    /**
     * Set the vector font renderer
     *
     * @param renderer  The renderer to be used by LCD when dealing with vector fonts.
     */
    void setVectorFontRenderer(VectorFontRenderer* renderer)
 8015cc8:	b480      	push	{r7}
 8015cca:	b083      	sub	sp, #12
 8015ccc:	af00      	add	r7, sp, #0
 8015cce:	6078      	str	r0, [r7, #4]
 8015cd0:	6039      	str	r1, [r7, #0]
    {
        vectorFontRenderer = renderer;
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	683a      	ldr	r2, [r7, #0]
 8015cd6:	609a      	str	r2, [r3, #8]
    }
 8015cd8:	bf00      	nop
 8015cda:	370c      	adds	r7, #12
 8015cdc:	46bd      	mov	sp, r7
 8015cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ce2:	4770      	bx	lr

08015ce4 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8015ce4:	b480      	push	{r7}
 8015ce6:	b083      	sub	sp, #12
 8015ce8:	af00      	add	r7, sp, #0
 8015cea:	6078      	str	r0, [r7, #4]
            : startX(0),
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	2200      	movs	r2, #0
 8015cf0:	801a      	strh	r2, [r3, #0]
              startY(0),
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	2200      	movs	r2, #0
 8015cf6:	805a      	strh	r2, [r3, #2]
              downX(0),
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	2200      	movs	r2, #0
 8015cfc:	809a      	strh	r2, [r3, #4]
              downY(0),
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	2200      	movs	r2, #0
 8015d02:	80da      	strh	r2, [r3, #6]
              tickCount(0),
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	2200      	movs	r2, #0
 8015d08:	811a      	strh	r2, [r3, #8]
              velocityX(0),
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	2200      	movs	r2, #0
 8015d0e:	815a      	strh	r2, [r3, #10]
              velocityY(0),
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	2200      	movs	r2, #0
 8015d14:	819a      	strh	r2, [r3, #12]
              inProgress(false)
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	2200      	movs	r2, #0
 8015d1a:	739a      	strb	r2, [r3, #14]
        {
        }
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	4618      	mov	r0, r3
 8015d20:	370c      	adds	r7, #12
 8015d22:	46bd      	mov	sp, r7
 8015d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d28:	4770      	bx	lr

08015d2a <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8015d2a:	b580      	push	{r7, lr}
 8015d2c:	b082      	sub	sp, #8
 8015d2e:	af00      	add	r7, sp, #0
 8015d30:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	4618      	mov	r0, r3
 8015d36:	f7ff ffd5 	bl	8015ce4 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	2200      	movs	r2, #0
 8015d3e:	611a      	str	r2, [r3, #16]
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	2200      	movs	r2, #0
 8015d44:	829a      	strh	r2, [r3, #20]
    {
    }
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	4618      	mov	r0, r3
 8015d4a:	3708      	adds	r7, #8
 8015d4c:	46bd      	mov	sp, r7
 8015d4e:	bd80      	pop	{r7, pc}

08015d50 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8015d50:	b580      	push	{r7, lr}
 8015d52:	b084      	sub	sp, #16
 8015d54:	af00      	add	r7, sp, #0
 8015d56:	60f8      	str	r0, [r7, #12]
 8015d58:	60b9      	str	r1, [r7, #8]
 8015d5a:	607a      	str	r2, [r7, #4]
 8015d5c:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8015d5e:	4a55      	ldr	r2, [pc, #340]	@ (8015eb4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	601a      	str	r2, [r3, #0]
        : dma(dmaInterface),
 8015d64:	68fb      	ldr	r3, [r7, #12]
 8015d66:	68ba      	ldr	r2, [r7, #8]
 8015d68:	605a      	str	r2, [r3, #4]
          lcdRef(display),
 8015d6a:	68fb      	ldr	r3, [r7, #12]
 8015d6c:	687a      	ldr	r2, [r7, #4]
 8015d6e:	609a      	str	r2, [r3, #8]
          touchController(touchCtrl),
 8015d70:	68fb      	ldr	r3, [r7, #12]
 8015d72:	683a      	ldr	r2, [r7, #0]
 8015d74:	60da      	str	r2, [r3, #12]
          mcuInstrumentation(0),
 8015d76:	68fb      	ldr	r3, [r7, #12]
 8015d78:	2200      	movs	r2, #0
 8015d7a:	611a      	str	r2, [r3, #16]
          buttonController(0),
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	2200      	movs	r2, #0
 8015d80:	615a      	str	r2, [r3, #20]
          frameBufferAllocator(0),
 8015d82:	68fb      	ldr	r3, [r7, #12]
 8015d84:	2200      	movs	r2, #0
 8015d86:	619a      	str	r2, [r3, #24]
          gestures(),
 8015d88:	68fb      	ldr	r3, [r7, #12]
 8015d8a:	331c      	adds	r3, #28
 8015d8c:	4618      	mov	r0, r3
 8015d8e:	f7ff ffcc 	bl	8015d2a <_ZN8touchgfx8GesturesC1Ev>
          nativeDisplayOrientation(ORIENTATION_LANDSCAPE),
 8015d92:	68fb      	ldr	r3, [r7, #12]
 8015d94:	2200      	movs	r2, #0
 8015d96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          taskDelayFunc(0),
 8015d9a:	68fb      	ldr	r3, [r7, #12]
 8015d9c:	2200      	movs	r2, #0
 8015d9e:	639a      	str	r2, [r3, #56]	@ 0x38
          frameBuffer0(0),
 8015da0:	68fb      	ldr	r3, [r7, #12]
 8015da2:	2200      	movs	r2, #0
 8015da4:	63da      	str	r2, [r3, #60]	@ 0x3c
          frameBuffer1(0),
 8015da6:	68fb      	ldr	r3, [r7, #12]
 8015da8:	2200      	movs	r2, #0
 8015daa:	641a      	str	r2, [r3, #64]	@ 0x40
          frameBuffer2(0),
 8015dac:	68fb      	ldr	r3, [r7, #12]
 8015dae:	2200      	movs	r2, #0
 8015db0:	645a      	str	r2, [r3, #68]	@ 0x44
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8015db2:	68fb      	ldr	r3, [r7, #12]
 8015db4:	2200      	movs	r2, #0
 8015db6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
          fingerSize(1),
 8015dba:	68fb      	ldr	r3, [r7, #12]
 8015dbc:	2201      	movs	r2, #1
 8015dbe:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
          lockDMAToPorch(false),
 8015dc2:	68fb      	ldr	r3, [r7, #12]
 8015dc4:	2200      	movs	r2, #0
 8015dc6:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
          frameBufferUpdatedThisFrame(false),
 8015dca:	68fb      	ldr	r3, [r7, #12]
 8015dcc:	2200      	movs	r2, #0
 8015dce:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
          auxiliaryLCD(0),
 8015dd2:	68fb      	ldr	r3, [r7, #12]
 8015dd4:	2200      	movs	r2, #0
 8015dd6:	64da      	str	r2, [r3, #76]	@ 0x4c
          partialFrameBufferRect(),
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	3350      	adds	r3, #80	@ 0x50
 8015ddc:	4618      	mov	r0, r3
 8015dde:	f7fd f9d4 	bl	801318a <_ZN8touchgfx4RectC1Ev>
          useAuxiliaryLCD(false),
 8015de2:	68fb      	ldr	r3, [r7, #12]
 8015de4:	2200      	movs	r2, #0
 8015de6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
          listener(0),
 8015dea:	68fb      	ldr	r3, [r7, #12]
 8015dec:	2200      	movs	r2, #0
 8015dee:	65da      	str	r2, [r3, #92]	@ 0x5c
          lastX(0),
 8015df0:	68fb      	ldr	r3, [r7, #12]
 8015df2:	2200      	movs	r2, #0
 8015df4:	661a      	str	r2, [r3, #96]	@ 0x60
          lastY(0),
 8015df6:	68fb      	ldr	r3, [r7, #12]
 8015df8:	2200      	movs	r2, #0
 8015dfa:	665a      	str	r2, [r3, #100]	@ 0x64
          touchSampleRate(1),
 8015dfc:	68fb      	ldr	r3, [r7, #12]
 8015dfe:	2201      	movs	r2, #1
 8015e00:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
          mcuLoadPct(0),
 8015e04:	68fb      	ldr	r3, [r7, #12]
 8015e06:	2200      	movs	r2, #0
 8015e08:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
          vSyncCnt(0),
 8015e0c:	68fb      	ldr	r3, [r7, #12]
 8015e0e:	2200      	movs	r2, #0
 8015e10:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
          vSyncForFrame(1),
 8015e14:	68fb      	ldr	r3, [r7, #12]
 8015e16:	2201      	movs	r2, #1
 8015e18:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
          vSyncCompensationEnabled(false),
 8015e1c:	68fb      	ldr	r3, [r7, #12]
 8015e1e:	2200      	movs	r2, #0
 8015e20:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
          clientDirty(false),
 8015e24:	68fb      	ldr	r3, [r7, #12]
 8015e26:	2200      	movs	r2, #0
 8015e28:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
          swapRequested(false),
 8015e2c:	68fb      	ldr	r3, [r7, #12]
 8015e2e:	2200      	movs	r2, #0
 8015e30:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
          lastTouched(false),
 8015e34:	68fb      	ldr	r3, [r7, #12]
 8015e36:	2200      	movs	r2, #0
 8015e38:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
          updateMCULoad(0),
 8015e3c:	68fb      	ldr	r3, [r7, #12]
 8015e3e:	2200      	movs	r2, #0
 8015e40:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
          cc_begin(0),
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	2200      	movs	r2, #0
 8015e48:	675a      	str	r2, [r3, #116]	@ 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8015e4a:	68fb      	ldr	r3, [r7, #12]
 8015e4c:	2200      	movs	r2, #0
 8015e4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
          displayOrientationChangeRequested(false),
 8015e52:	68fb      	ldr	r3, [r7, #12]
 8015e54:	2200      	movs	r2, #0
 8015e56:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
          useDMAAcceleration(true),
 8015e5a:	68fb      	ldr	r3, [r7, #12]
 8015e5c:	2201      	movs	r2, #1
 8015e5e:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
          lastRenderMethod(HARDWARE)
 8015e62:	68fb      	ldr	r3, [r7, #12]
 8015e64:	2201      	movs	r2, #1
 8015e66:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
        instance = this;
 8015e6a:	4a13      	ldr	r2, [pc, #76]	@ (8015eb8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8015e6c:	68fb      	ldr	r3, [r7, #12]
 8015e6e:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8015e70:	4a12      	ldr	r2, [pc, #72]	@ (8015ebc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8015e72:	8b3b      	ldrh	r3, [r7, #24]
 8015e74:	8013      	strh	r3, [r2, #0]
 8015e76:	4b11      	ldr	r3, [pc, #68]	@ (8015ebc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8015e78:	881a      	ldrh	r2, [r3, #0]
 8015e7a:	4b11      	ldr	r3, [pc, #68]	@ (8015ec0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8015e7c:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8015e7e:	4a11      	ldr	r2, [pc, #68]	@ (8015ec4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8015e80:	8bbb      	ldrh	r3, [r7, #28]
 8015e82:	8013      	strh	r3, [r2, #0]
 8015e84:	4b0f      	ldr	r3, [pc, #60]	@ (8015ec4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8015e86:	881a      	ldrh	r2, [r3, #0]
 8015e88:	4b0f      	ldr	r3, [pc, #60]	@ (8015ec8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8015e8a:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8015e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8015ecc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8015e8e:	2200      	movs	r2, #0
 8015e90:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8015e92:	8b3a      	ldrh	r2, [r7, #24]
 8015e94:	8bbb      	ldrh	r3, [r7, #28]
 8015e96:	429a      	cmp	r2, r3
 8015e98:	bf34      	ite	cc
 8015e9a:	2301      	movcc	r3, #1
 8015e9c:	2300      	movcs	r3, #0
 8015e9e:	b2db      	uxtb	r3, r3
 8015ea0:	461a      	mov	r2, r3
 8015ea2:	68fb      	ldr	r3, [r7, #12]
 8015ea4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
 8015ea8:	68fb      	ldr	r3, [r7, #12]
 8015eaa:	4618      	mov	r0, r3
 8015eac:	3710      	adds	r7, #16
 8015eae:	46bd      	mov	sp, r7
 8015eb0:	bd80      	pop	{r7, pc}
 8015eb2:	bf00      	nop
 8015eb4:	0802c9f8 	.word	0x0802c9f8
 8015eb8:	24013b58 	.word	0x24013b58
 8015ebc:	24013b4c 	.word	0x24013b4c
 8015ec0:	24013b52 	.word	0x24013b52
 8015ec4:	24013b4e 	.word	0x24013b4e
 8015ec8:	24013b54 	.word	0x24013b54
 8015ecc:	24013b50 	.word	0x24013b50

08015ed0 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8015ed0:	b580      	push	{r7, lr}
 8015ed2:	b082      	sub	sp, #8
 8015ed4:	af00      	add	r7, sp, #0
 8015ed6:	6078      	str	r0, [r7, #4]
 8015ed8:	6039      	str	r1, [r7, #0]
    {
        app.gotoscreenScreenNoTransition();
 8015eda:	683b      	ldr	r3, [r7, #0]
 8015edc:	4618      	mov	r0, r3
 8015ede:	f7fc fd25 	bl	801292c <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 8015ee2:	bf00      	nop
 8015ee4:	3708      	adds	r7, #8
 8015ee6:	46bd      	mov	sp, r7
 8015ee8:	bd80      	pop	{r7, pc}
	...

08015eec <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8015eec:	b580      	push	{r7, lr}
 8015eee:	b086      	sub	sp, #24
 8015ef0:	af02      	add	r7, sp, #8
 8015ef2:	60f8      	str	r0, [r7, #12]
 8015ef4:	60b9      	str	r1, [r7, #8]
 8015ef6:	607a      	str	r2, [r7, #4]
 8015ef8:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8015efa:	68f8      	ldr	r0, [r7, #12]
 8015efc:	69bb      	ldr	r3, [r7, #24]
 8015efe:	9300      	str	r3, [sp, #0]
 8015f00:	683b      	ldr	r3, [r7, #0]
 8015f02:	687a      	ldr	r2, [r7, #4]
 8015f04:	68b9      	ldr	r1, [r7, #8]
 8015f06:	f7ff fe5f 	bl	8015bc8 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8015f0a:	4a04      	ldr	r2, [pc, #16]	@ (8015f1c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8015f0c:	68fb      	ldr	r3, [r7, #12]
 8015f0e:	601a      	str	r2, [r3, #0]
    {

    }
 8015f10:	68fb      	ldr	r3, [r7, #12]
 8015f12:	4618      	mov	r0, r3
 8015f14:	3710      	adds	r7, #16
 8015f16:	46bd      	mov	sp, r7
 8015f18:	bd80      	pop	{r7, pc}
 8015f1a:	bf00      	nop
 8015f1c:	0802c6a0 	.word	0x0802c6a0

08015f20 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8015f20:	b580      	push	{r7, lr}
 8015f22:	af00      	add	r7, sp, #0
 8015f24:	4801      	ldr	r0, [pc, #4]	@ (8015f2c <__tcf_0+0xc>)
 8015f26:	f000 f96d 	bl	8016204 <_ZN12FrontendHeapD1Ev>
 8015f2a:	bd80      	pop	{r7, pc}
 8015f2c:	240128fc 	.word	0x240128fc

08015f30 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8015f30:	b580      	push	{r7, lr}
 8015f32:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8015f34:	4b11      	ldr	r3, [pc, #68]	@ (8015f7c <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	f3bf 8f5b 	dmb	ish
 8015f3c:	f003 0301 	and.w	r3, r3, #1
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	bf0c      	ite	eq
 8015f44:	2301      	moveq	r3, #1
 8015f46:	2300      	movne	r3, #0
 8015f48:	b2db      	uxtb	r3, r3
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d013      	beq.n	8015f76 <_ZN12FrontendHeap11getInstanceEv+0x46>
 8015f4e:	480b      	ldr	r0, [pc, #44]	@ (8015f7c <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8015f50:	f013 fd27 	bl	80299a2 <__cxa_guard_acquire>
 8015f54:	4603      	mov	r3, r0
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	bf14      	ite	ne
 8015f5a:	2301      	movne	r3, #1
 8015f5c:	2300      	moveq	r3, #0
 8015f5e:	b2db      	uxtb	r3, r3
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	d008      	beq.n	8015f76 <_ZN12FrontendHeap11getInstanceEv+0x46>
 8015f64:	4806      	ldr	r0, [pc, #24]	@ (8015f80 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8015f66:	f000 f867 	bl	8016038 <_ZN12FrontendHeapC1Ev>
 8015f6a:	4806      	ldr	r0, [pc, #24]	@ (8015f84 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8015f6c:	f014 f8ae 	bl	802a0cc <atexit>
 8015f70:	4802      	ldr	r0, [pc, #8]	@ (8015f7c <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8015f72:	f013 fd22 	bl	80299ba <__cxa_guard_release>
        return instance;
 8015f76:	4b02      	ldr	r3, [pc, #8]	@ (8015f80 <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 8015f78:	4618      	mov	r0, r3
 8015f7a:	bd80      	pop	{r7, pc}
 8015f7c:	24012bd8 	.word	0x24012bd8
 8015f80:	240128fc 	.word	0x240128fc
 8015f84:	08015f21 	.word	0x08015f21

08015f88 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8015f88:	b580      	push	{r7, lr}
 8015f8a:	b082      	sub	sp, #8
 8015f8c:	af00      	add	r7, sp, #0
 8015f8e:	6078      	str	r0, [r7, #4]
 8015f90:	4a05      	ldr	r2, [pc, #20]	@ (8015fa8 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	601a      	str	r2, [r3, #0]
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	4618      	mov	r0, r3
 8015f9a:	f7ff fe35 	bl	8015c08 <_ZN8touchgfx7MVPHeapD1Ev>
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	4618      	mov	r0, r3
 8015fa2:	3708      	adds	r7, #8
 8015fa4:	46bd      	mov	sp, r7
 8015fa6:	bd80      	pop	{r7, pc}
 8015fa8:	0802c6a0 	.word	0x0802c6a0

08015fac <_ZN16FrontendHeapBaseD0Ev>:
 8015fac:	b580      	push	{r7, lr}
 8015fae:	b082      	sub	sp, #8
 8015fb0:	af00      	add	r7, sp, #0
 8015fb2:	6078      	str	r0, [r7, #4]
 8015fb4:	6878      	ldr	r0, [r7, #4]
 8015fb6:	f7ff ffe7 	bl	8015f88 <_ZN16FrontendHeapBaseD1Ev>
 8015fba:	2114      	movs	r1, #20
 8015fbc:	6878      	ldr	r0, [r7, #4]
 8015fbe:	f013 fcee 	bl	802999e <_ZdlPvj>
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	4618      	mov	r0, r3
 8015fc6:	3708      	adds	r7, #8
 8015fc8:	46bd      	mov	sp, r7
 8015fca:	bd80      	pop	{r7, pc}

08015fcc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8015fcc:	b580      	push	{r7, lr}
 8015fce:	b082      	sub	sp, #8
 8015fd0:	af00      	add	r7, sp, #0
 8015fd2:	6078      	str	r0, [r7, #4]
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	4618      	mov	r0, r3
 8015fd8:	f001 f9de 	bl	8017398 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8015fdc:	4a03      	ldr	r2, [pc, #12]	@ (8015fec <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	601a      	str	r2, [r3, #0]
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	4618      	mov	r0, r3
 8015fe6:	3708      	adds	r7, #8
 8015fe8:	46bd      	mov	sp, r7
 8015fea:	bd80      	pop	{r7, pc}
 8015fec:	0802c66c 	.word	0x0802c66c

08015ff0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8015ff0:	b580      	push	{r7, lr}
 8015ff2:	b082      	sub	sp, #8
 8015ff4:	af00      	add	r7, sp, #0
 8015ff6:	6078      	str	r0, [r7, #4]
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	4618      	mov	r0, r3
 8015ffc:	f001 f9cc 	bl	8017398 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8016000:	4a03      	ldr	r2, [pc, #12]	@ (8016010 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	601a      	str	r2, [r3, #0]
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	4618      	mov	r0, r3
 801600a:	3708      	adds	r7, #8
 801600c:	46bd      	mov	sp, r7
 801600e:	bd80      	pop	{r7, pc}
 8016010:	0802c638 	.word	0x0802c638

08016014 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8016014:	b580      	push	{r7, lr}
 8016016:	b082      	sub	sp, #8
 8016018:	af00      	add	r7, sp, #0
 801601a:	6078      	str	r0, [r7, #4]
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	4618      	mov	r0, r3
 8016020:	f001 f9ba 	bl	8017398 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8016024:	4a03      	ldr	r2, [pc, #12]	@ (8016034 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	601a      	str	r2, [r3, #0]
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	4618      	mov	r0, r3
 801602e:	3708      	adds	r7, #8
 8016030:	46bd      	mov	sp, r7
 8016032:	bd80      	pop	{r7, pc}
 8016034:	0802c604 	.word	0x0802c604

08016038 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8016038:	b590      	push	{r4, r7, lr}
 801603a:	b085      	sub	sp, #20
 801603c:	af02      	add	r7, sp, #8
 801603e:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8016040:	6878      	ldr	r0, [r7, #4]
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	f103 0114 	add.w	r1, r3, #20
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	f503 74b4 	add.w	r4, r3, #360	@ 0x168
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
                     app(model, *this)
 801605a:	9300      	str	r3, [sp, #0]
 801605c:	4623      	mov	r3, r4
 801605e:	f7ff ff45 	bl	8015eec <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8016062:	4a18      	ldr	r2, [pc, #96]	@ (80160c4 <_ZN12FrontendHeapC1Ev+0x8c>)
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	601a      	str	r2, [r3, #0]
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	3314      	adds	r3, #20
 801606c:	4618      	mov	r0, r3
 801606e:	f7ff ffad 	bl	8015fcc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	332c      	adds	r3, #44	@ 0x2c
 8016076:	4618      	mov	r0, r3
 8016078:	f7ff ffba 	bl	8015ff0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8016082:	4618      	mov	r0, r3
 8016084:	f7ff ffc6 	bl	8016014 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 801608e:	4618      	mov	r0, r3
 8016090:	f7fe fac0 	bl	8014614 <_ZN5ModelC1Ev>
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	f503 70c0 	add.w	r0, r3, #384	@ 0x180
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 80160a0:	687a      	ldr	r2, [r7, #4]
 80160a2:	4619      	mov	r1, r3
 80160a4:	f7fe faa0 	bl	80145e8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 80160a8:	687a      	ldr	r2, [r7, #4]
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80160b0:	4619      	mov	r1, r3
 80160b2:	4610      	mov	r0, r2
 80160b4:	f7ff ff0c 	bl	8015ed0 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	4618      	mov	r0, r3
 80160bc:	370c      	adds	r7, #12
 80160be:	46bd      	mov	sp, r7
 80160c0:	bd90      	pop	{r4, r7, pc}
 80160c2:	bf00      	nop
 80160c4:	0802c5f0 	.word	0x0802c5f0

080160c8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 80160c8:	b580      	push	{r7, lr}
 80160ca:	b086      	sub	sp, #24
 80160cc:	af02      	add	r7, sp, #8
 80160ce:	60f8      	str	r0, [r7, #12]
 80160d0:	60b9      	str	r1, [r7, #8]
 80160d2:	607a      	str	r2, [r7, #4]
 80160d4:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 80160d6:	68f8      	ldr	r0, [r7, #12]
 80160d8:	8bbb      	ldrh	r3, [r7, #28]
 80160da:	9301      	str	r3, [sp, #4]
 80160dc:	8b3b      	ldrh	r3, [r7, #24]
 80160de:	9300      	str	r3, [sp, #0]
 80160e0:	683b      	ldr	r3, [r7, #0]
 80160e2:	687a      	ldr	r2, [r7, #4]
 80160e4:	68b9      	ldr	r1, [r7, #8]
 80160e6:	f7ff fe33 	bl	8015d50 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80160ea:	4a04      	ldr	r2, [pc, #16]	@ (80160fc <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	601a      	str	r2, [r3, #0]
    }
 80160f0:	68fb      	ldr	r3, [r7, #12]
 80160f2:	4618      	mov	r0, r3
 80160f4:	3710      	adds	r7, #16
 80160f6:	46bd      	mov	sp, r7
 80160f8:	bd80      	pop	{r7, pc}
 80160fa:	bf00      	nop
 80160fc:	0802c810 	.word	0x0802c810

08016100 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8016100:	b580      	push	{r7, lr}
 8016102:	b086      	sub	sp, #24
 8016104:	af02      	add	r7, sp, #8
 8016106:	60f8      	str	r0, [r7, #12]
 8016108:	60b9      	str	r1, [r7, #8]
 801610a:	607a      	str	r2, [r7, #4]
 801610c:	603b      	str	r3, [r7, #0]
 801610e:	68f8      	ldr	r0, [r7, #12]
 8016110:	8bbb      	ldrh	r3, [r7, #28]
 8016112:	9301      	str	r3, [sp, #4]
 8016114:	8b3b      	ldrh	r3, [r7, #24]
 8016116:	9300      	str	r3, [sp, #0]
 8016118:	683b      	ldr	r3, [r7, #0]
 801611a:	687a      	ldr	r2, [r7, #4]
 801611c:	68b9      	ldr	r1, [r7, #8]
 801611e:	f7ff ffd3 	bl	80160c8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8016122:	4a04      	ldr	r2, [pc, #16]	@ (8016134 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	601a      	str	r2, [r3, #0]
    }
 8016128:	68fb      	ldr	r3, [r7, #12]
 801612a:	4618      	mov	r0, r3
 801612c:	3710      	adds	r7, #16
 801612e:	46bd      	mov	sp, r7
 8016130:	bd80      	pop	{r7, pc}
 8016132:	bf00      	nop
 8016134:	0802c4a4 	.word	0x0802c4a4

08016138 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8016138:	b480      	push	{r7}
 801613a:	b083      	sub	sp, #12
 801613c:	af00      	add	r7, sp, #0
 801613e:	6078      	str	r0, [r7, #4]
 8016140:	4a04      	ldr	r2, [pc, #16]	@ (8016154 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	601a      	str	r2, [r3, #0]
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	4618      	mov	r0, r3
 801614a:	370c      	adds	r7, #12
 801614c:	46bd      	mov	sp, r7
 801614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016152:	4770      	bx	lr
 8016154:	0802c48c 	.word	0x0802c48c

08016158 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8016158:	b580      	push	{r7, lr}
 801615a:	b082      	sub	sp, #8
 801615c:	af00      	add	r7, sp, #0
 801615e:	6078      	str	r0, [r7, #4]
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	4618      	mov	r0, r3
 8016164:	f7ff ffe8 	bl	8016138 <_ZN8touchgfx15TouchControllerC1Ev>
 8016168:	4a03      	ldr	r2, [pc, #12]	@ (8016178 <_ZN20STM32TouchControllerC1Ev+0x20>)
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	601a      	str	r2, [r3, #0]
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	4618      	mov	r0, r3
 8016172:	3708      	adds	r7, #8
 8016174:	46bd      	mov	sp, r7
 8016176:	bd80      	pop	{r7, pc}
 8016178:	0802c474 	.word	0x0802c474

0801617c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 801617c:	b590      	push	{r4, r7, lr}
 801617e:	b085      	sub	sp, #20
 8016180:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8016182:	f7fe f833 	bl	80141ec <_ZN14BitmapDatabase11getInstanceEv>
 8016186:	4604      	mov	r4, r0
 8016188:	f7fe f83a 	bl	8014200 <_ZN14BitmapDatabase15getInstanceSizeEv>
 801618c:	4603      	mov	r3, r0
 801618e:	4619      	mov	r1, r3
 8016190:	2300      	movs	r3, #0
 8016192:	9300      	str	r3, [sp, #0]
 8016194:	2300      	movs	r3, #0
 8016196:	2200      	movs	r2, #0
 8016198:	4620      	mov	r0, r4
 801619a:	f008 fe33 	bl	801ee04 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 801619e:	480b      	ldr	r0, [pc, #44]	@ (80161cc <touchgfx_init+0x50>)
 80161a0:	f7ff fd02 	bl	8015ba8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 80161a4:	2000      	movs	r0, #0
 80161a6:	f7fe f957 	bl	8014458 <_ZN8touchgfx5Texts11setLanguageEt>

    display.setVectorFontRenderer(&vectorFontRenderer);
 80161aa:	4909      	ldr	r1, [pc, #36]	@ (80161d0 <touchgfx_init+0x54>)
 80161ac:	4809      	ldr	r0, [pc, #36]	@ (80161d4 <touchgfx_init+0x58>)
 80161ae:	f7ff fd8b 	bl	8015cc8 <_ZN8touchgfx3LCD21setVectorFontRendererEPNS_18VectorFontRendererE>

    FontManager::setFontProvider(&fontProvider);
 80161b2:	4809      	ldr	r0, [pc, #36]	@ (80161d8 <touchgfx_init+0x5c>)
 80161b4:	f008 fcd2 	bl	801eb5c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 80161b8:	f7ff feba 	bl	8015f30 <_ZN12FrontendHeap11getInstanceEv>
 80161bc:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80161be:	4807      	ldr	r0, [pc, #28]	@ (80161dc <touchgfx_init+0x60>)
 80161c0:	f7fe fe6e 	bl	8014ea0 <_ZN11TouchGFXHAL10initializeEv>
}
 80161c4:	bf00      	nop
 80161c6:	370c      	adds	r7, #12
 80161c8:	46bd      	mov	sp, r7
 80161ca:	bd90      	pop	{r4, r7, pc}
 80161cc:	24013a08 	.word	0x24013a08
 80161d0:	240139ec 	.word	0x240139ec
 80161d4:	24013980 	.word	0x24013980
 80161d8:	2400001c 	.word	0x2400001c
 80161dc:	24013a0c 	.word	0x24013a0c

080161e0 <touchgfx_components_init>:

void touchgfx_components_init()
{
 80161e0:	b480      	push	{r7}
 80161e2:	af00      	add	r7, sp, #0
}
 80161e4:	bf00      	nop
 80161e6:	46bd      	mov	sp, r7
 80161e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ec:	4770      	bx	lr
	...

080161f0 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 80161f0:	b580      	push	{r7, lr}
 80161f2:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80161f4:	4802      	ldr	r0, [pc, #8]	@ (8016200 <touchgfx_taskEntry+0x10>)
 80161f6:	f001 fbda 	bl	80179ae <_ZN8touchgfx3HAL9taskEntryEv>
}
 80161fa:	bf00      	nop
 80161fc:	bd80      	pop	{r7, pc}
 80161fe:	bf00      	nop
 8016200:	24013a0c 	.word	0x24013a0c

08016204 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8016204:	b580      	push	{r7, lr}
 8016206:	b082      	sub	sp, #8
 8016208:	af00      	add	r7, sp, #0
 801620a:	6078      	str	r0, [r7, #4]
 801620c:	4a10      	ldr	r2, [pc, #64]	@ (8016250 <_ZN12FrontendHeapD1Ev+0x4c>)
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	601a      	str	r2, [r3, #0]
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8016218:	4618      	mov	r0, r3
 801621a:	f7fe f9af 	bl	801457c <_ZN19FrontendApplicationD1Ev>
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8016224:	4618      	mov	r0, r3
 8016226:	f000 f827 	bl	8016278 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	332c      	adds	r3, #44	@ 0x2c
 801622e:	4618      	mov	r0, r3
 8016230:	f000 f844 	bl	80162bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	3314      	adds	r3, #20
 8016238:	4618      	mov	r0, r3
 801623a:	f000 f863 	bl	8016304 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	4618      	mov	r0, r3
 8016242:	f7ff fea1 	bl	8015f88 <_ZN16FrontendHeapBaseD1Ev>
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	4618      	mov	r0, r3
 801624a:	3708      	adds	r7, #8
 801624c:	46bd      	mov	sp, r7
 801624e:	bd80      	pop	{r7, pc}
 8016250:	0802c5f0 	.word	0x0802c5f0

08016254 <_ZN12FrontendHeapD0Ev>:
 8016254:	b580      	push	{r7, lr}
 8016256:	b082      	sub	sp, #8
 8016258:	af00      	add	r7, sp, #0
 801625a:	6078      	str	r0, [r7, #4]
 801625c:	6878      	ldr	r0, [r7, #4]
 801625e:	f7ff ffd1 	bl	8016204 <_ZN12FrontendHeapD1Ev>
 8016262:	f44f 7137 	mov.w	r1, #732	@ 0x2dc
 8016266:	6878      	ldr	r0, [r7, #4]
 8016268:	f013 fb99 	bl	802999e <_ZdlPvj>
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	4618      	mov	r0, r3
 8016270:	3708      	adds	r7, #8
 8016272:	46bd      	mov	sp, r7
 8016274:	bd80      	pop	{r7, pc}
	...

08016278 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8016278:	b580      	push	{r7, lr}
 801627a:	b082      	sub	sp, #8
 801627c:	af00      	add	r7, sp, #0
 801627e:	6078      	str	r0, [r7, #4]
 8016280:	4a05      	ldr	r2, [pc, #20]	@ (8016298 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	601a      	str	r2, [r3, #0]
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	4618      	mov	r0, r3
 801628a:	f001 f884 	bl	8017396 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	4618      	mov	r0, r3
 8016292:	3708      	adds	r7, #8
 8016294:	46bd      	mov	sp, r7
 8016296:	bd80      	pop	{r7, pc}
 8016298:	0802c604 	.word	0x0802c604

0801629c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 801629c:	b580      	push	{r7, lr}
 801629e:	b082      	sub	sp, #8
 80162a0:	af00      	add	r7, sp, #0
 80162a2:	6078      	str	r0, [r7, #4]
 80162a4:	6878      	ldr	r0, [r7, #4]
 80162a6:	f7ff ffe7 	bl	8016278 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80162aa:	2114      	movs	r1, #20
 80162ac:	6878      	ldr	r0, [r7, #4]
 80162ae:	f013 fb76 	bl	802999e <_ZdlPvj>
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	4618      	mov	r0, r3
 80162b6:	3708      	adds	r7, #8
 80162b8:	46bd      	mov	sp, r7
 80162ba:	bd80      	pop	{r7, pc}

080162bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80162bc:	b580      	push	{r7, lr}
 80162be:	b082      	sub	sp, #8
 80162c0:	af00      	add	r7, sp, #0
 80162c2:	6078      	str	r0, [r7, #4]
 80162c4:	4a05      	ldr	r2, [pc, #20]	@ (80162dc <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	601a      	str	r2, [r3, #0]
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	4618      	mov	r0, r3
 80162ce:	f001 f862 	bl	8017396 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	4618      	mov	r0, r3
 80162d6:	3708      	adds	r7, #8
 80162d8:	46bd      	mov	sp, r7
 80162da:	bd80      	pop	{r7, pc}
 80162dc:	0802c638 	.word	0x0802c638

080162e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80162e0:	b580      	push	{r7, lr}
 80162e2:	b082      	sub	sp, #8
 80162e4:	af00      	add	r7, sp, #0
 80162e6:	6078      	str	r0, [r7, #4]
 80162e8:	6878      	ldr	r0, [r7, #4]
 80162ea:	f7ff ffe7 	bl	80162bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80162ee:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 80162f2:	6878      	ldr	r0, [r7, #4]
 80162f4:	f013 fb53 	bl	802999e <_ZdlPvj>
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	4618      	mov	r0, r3
 80162fc:	3708      	adds	r7, #8
 80162fe:	46bd      	mov	sp, r7
 8016300:	bd80      	pop	{r7, pc}
	...

08016304 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8016304:	b580      	push	{r7, lr}
 8016306:	b082      	sub	sp, #8
 8016308:	af00      	add	r7, sp, #0
 801630a:	6078      	str	r0, [r7, #4]
 801630c:	4a05      	ldr	r2, [pc, #20]	@ (8016324 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	601a      	str	r2, [r3, #0]
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	4618      	mov	r0, r3
 8016316:	f001 f83e 	bl	8017396 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	4618      	mov	r0, r3
 801631e:	3708      	adds	r7, #8
 8016320:	46bd      	mov	sp, r7
 8016322:	bd80      	pop	{r7, pc}
 8016324:	0802c66c 	.word	0x0802c66c

08016328 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8016328:	b580      	push	{r7, lr}
 801632a:	b082      	sub	sp, #8
 801632c:	af00      	add	r7, sp, #0
 801632e:	6078      	str	r0, [r7, #4]
 8016330:	6878      	ldr	r0, [r7, #4]
 8016332:	f7ff ffe7 	bl	8016304 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8016336:	2118      	movs	r1, #24
 8016338:	6878      	ldr	r0, [r7, #4]
 801633a:	f013 fb30 	bl	802999e <_ZdlPvj>
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	4618      	mov	r0, r3
 8016342:	3708      	adds	r7, #8
 8016344:	46bd      	mov	sp, r7
 8016346:	bd80      	pop	{r7, pc}

08016348 <_ZN8touchgfx22VectorFontRendererImplD1Ev>:
namespace touchgfx
{
/**
 * Implementation of the VectorFontRenderer interface
 */
class VectorFontRendererImpl : public VectorFontRenderer
 8016348:	b580      	push	{r7, lr}
 801634a:	b082      	sub	sp, #8
 801634c:	af00      	add	r7, sp, #0
 801634e:	6078      	str	r0, [r7, #4]
 8016350:	4a05      	ldr	r2, [pc, #20]	@ (8016368 <_ZN8touchgfx22VectorFontRendererImplD1Ev+0x20>)
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	601a      	str	r2, [r3, #0]
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	4618      	mov	r0, r3
 801635a:	f7ff fc75 	bl	8015c48 <_ZN8touchgfx18VectorFontRendererD1Ev>
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	4618      	mov	r0, r3
 8016362:	3708      	adds	r7, #8
 8016364:	46bd      	mov	sp, r7
 8016366:	bd80      	pop	{r7, pc}
 8016368:	0802cee4 	.word	0x0802cee4

0801636c <_ZN8touchgfx22VectorFontRendererImplD0Ev>:
 801636c:	b580      	push	{r7, lr}
 801636e:	b082      	sub	sp, #8
 8016370:	af00      	add	r7, sp, #0
 8016372:	6078      	str	r0, [r7, #4]
 8016374:	6878      	ldr	r0, [r7, #4]
 8016376:	f7ff ffe7 	bl	8016348 <_ZN8touchgfx22VectorFontRendererImplD1Ev>
 801637a:	211c      	movs	r1, #28
 801637c:	6878      	ldr	r0, [r7, #4]
 801637e:	f013 fb0e 	bl	802999e <_ZdlPvj>
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	4618      	mov	r0, r3
 8016386:	3708      	adds	r7, #8
 8016388:	46bd      	mov	sp, r7
 801638a:	bd80      	pop	{r7, pc}

0801638c <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 801638c:	b580      	push	{r7, lr}
 801638e:	b082      	sub	sp, #8
 8016390:	af00      	add	r7, sp, #0
 8016392:	6078      	str	r0, [r7, #4]
 8016394:	4a05      	ldr	r2, [pc, #20]	@ (80163ac <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	601a      	str	r2, [r3, #0]
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	4618      	mov	r0, r3
 801639e:	f7ff fc73 	bl	8015c88 <_ZN8touchgfx3LCDD1Ev>
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	4618      	mov	r0, r3
 80163a6:	3708      	adds	r7, #8
 80163a8:	46bd      	mov	sp, r7
 80163aa:	bd80      	pop	{r7, pc}
 80163ac:	0802d1c0 	.word	0x0802d1c0

080163b0 <_ZN8touchgfx8LCD24bppD0Ev>:
 80163b0:	b580      	push	{r7, lr}
 80163b2:	b082      	sub	sp, #8
 80163b4:	af00      	add	r7, sp, #0
 80163b6:	6078      	str	r0, [r7, #4]
 80163b8:	6878      	ldr	r0, [r7, #4]
 80163ba:	f7ff ffe7 	bl	801638c <_ZN8touchgfx8LCD24bppD1Ev>
 80163be:	216c      	movs	r1, #108	@ 0x6c
 80163c0:	6878      	ldr	r0, [r7, #4]
 80163c2:	f013 faec 	bl	802999e <_ZdlPvj>
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	4618      	mov	r0, r3
 80163ca:	3708      	adds	r7, #8
 80163cc:	46bd      	mov	sp, r7
 80163ce:	bd80      	pop	{r7, pc}

080163d0 <_Z41__static_initialization_and_destruction_0ii>:
 80163d0:	b580      	push	{r7, lr}
 80163d2:	b084      	sub	sp, #16
 80163d4:	af02      	add	r7, sp, #8
 80163d6:	6078      	str	r0, [r7, #4]
 80163d8:	6039      	str	r1, [r7, #0]
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	2b01      	cmp	r3, #1
 80163de:	d11c      	bne.n	801641a <_Z41__static_initialization_and_destruction_0ii+0x4a>
 80163e0:	683b      	ldr	r3, [r7, #0]
 80163e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80163e6:	4293      	cmp	r3, r2
 80163e8:	d117      	bne.n	801641a <_Z41__static_initialization_and_destruction_0ii+0x4a>
static STM32TouchController tc;
 80163ea:	481b      	ldr	r0, [pc, #108]	@ (8016458 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80163ec:	f7ff feb4 	bl	8016158 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 80163f0:	481a      	ldr	r0, [pc, #104]	@ (801645c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80163f2:	f7fe ffa1 	bl	8015338 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 80163f6:	481a      	ldr	r0, [pc, #104]	@ (8016460 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80163f8:	f00c fb64 	bl	8022ac4 <_ZN8touchgfx8LCD24bppC1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 80163fc:	4819      	ldr	r0, [pc, #100]	@ (8016464 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80163fe:	f006 fdeb 	bl	801cfd8 <_ZN8touchgfx22VectorFontRendererImplC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8016402:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8016406:	9301      	str	r3, [sp, #4]
 8016408:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 801640c:	9300      	str	r3, [sp, #0]
 801640e:	4b12      	ldr	r3, [pc, #72]	@ (8016458 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8016410:	4a13      	ldr	r2, [pc, #76]	@ (8016460 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8016412:	4912      	ldr	r1, [pc, #72]	@ (801645c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8016414:	4814      	ldr	r0, [pc, #80]	@ (8016468 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8016416:	f7ff fe73 	bl	8016100 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	2b00      	cmp	r3, #0
 801641e:	d116      	bne.n	801644e <_Z41__static_initialization_and_destruction_0ii+0x7e>
 8016420:	683b      	ldr	r3, [r7, #0]
 8016422:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016426:	4293      	cmp	r3, r2
 8016428:	d111      	bne.n	801644e <_Z41__static_initialization_and_destruction_0ii+0x7e>
 801642a:	480f      	ldr	r0, [pc, #60]	@ (8016468 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 801642c:	f7fe fdc8 	bl	8014fc0 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8016430:	480e      	ldr	r0, [pc, #56]	@ (801646c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8016432:	f7fb fcc9 	bl	8011dc8 <_ZN23ApplicationFontProviderD1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 8016436:	480b      	ldr	r0, [pc, #44]	@ (8016464 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8016438:	f7ff ff86 	bl	8016348 <_ZN8touchgfx22VectorFontRendererImplD1Ev>
static LCD24bpp display;
 801643c:	4808      	ldr	r0, [pc, #32]	@ (8016460 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 801643e:	f7ff ffa5 	bl	801638c <_ZN8touchgfx8LCD24bppD1Ev>
static STM32DMA dma;
 8016442:	4806      	ldr	r0, [pc, #24]	@ (801645c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8016444:	f7fe ffa2 	bl	801538c <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8016448:	4803      	ldr	r0, [pc, #12]	@ (8016458 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 801644a:	f7fe fb15 	bl	8014a78 <_ZN20STM32TouchControllerD1Ev>
}
 801644e:	bf00      	nop
 8016450:	3708      	adds	r7, #8
 8016452:	46bd      	mov	sp, r7
 8016454:	bd80      	pop	{r7, pc}
 8016456:	bf00      	nop
 8016458:	24012bdc 	.word	0x24012bdc
 801645c:	24012be0 	.word	0x24012be0
 8016460:	24013980 	.word	0x24013980
 8016464:	240139ec 	.word	0x240139ec
 8016468:	24013a0c 	.word	0x24013a0c
 801646c:	2400001c 	.word	0x2400001c

08016470 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8016470:	b480      	push	{r7}
 8016472:	b083      	sub	sp, #12
 8016474:	af00      	add	r7, sp, #0
 8016476:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8016478:	2301      	movs	r3, #1
    }
 801647a:	4618      	mov	r0, r3
 801647c:	370c      	adds	r7, #12
 801647e:	46bd      	mov	sp, r7
 8016480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016484:	4770      	bx	lr

08016486 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8016486:	b480      	push	{r7}
 8016488:	b083      	sub	sp, #12
 801648a:	af00      	add	r7, sp, #0
 801648c:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 801648e:	230c      	movs	r3, #12
    }
 8016490:	4618      	mov	r0, r3
 8016492:	370c      	adds	r7, #12
 8016494:	46bd      	mov	sp, r7
 8016496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801649a:	4770      	bx	lr

0801649c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 801649c:	b480      	push	{r7}
 801649e:	b083      	sub	sp, #12
 80164a0:	af00      	add	r7, sp, #0
 80164a2:	6078      	str	r0, [r7, #4]
 80164a4:	460b      	mov	r3, r1
 80164a6:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80164a8:	887a      	ldrh	r2, [r7, #2]
 80164aa:	4613      	mov	r3, r2
 80164ac:	005b      	lsls	r3, r3, #1
 80164ae:	4413      	add	r3, r2
 80164b0:	009b      	lsls	r3, r3, #2
 80164b2:	3308      	adds	r3, #8
 80164b4:	687a      	ldr	r2, [r7, #4]
 80164b6:	4413      	add	r3, r2
    }
 80164b8:	4618      	mov	r0, r3
 80164ba:	370c      	adds	r7, #12
 80164bc:	46bd      	mov	sp, r7
 80164be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164c2:	4770      	bx	lr

080164c4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 80164c4:	b480      	push	{r7}
 80164c6:	b083      	sub	sp, #12
 80164c8:	af00      	add	r7, sp, #0
 80164ca:	6078      	str	r0, [r7, #4]
 80164cc:	460b      	mov	r3, r1
 80164ce:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80164d0:	887a      	ldrh	r2, [r7, #2]
 80164d2:	4613      	mov	r3, r2
 80164d4:	005b      	lsls	r3, r3, #1
 80164d6:	4413      	add	r3, r2
 80164d8:	009b      	lsls	r3, r3, #2
 80164da:	3308      	adds	r3, #8
 80164dc:	687a      	ldr	r2, [r7, #4]
 80164de:	4413      	add	r3, r2
    }
 80164e0:	4618      	mov	r0, r3
 80164e2:	370c      	adds	r7, #12
 80164e4:	46bd      	mov	sp, r7
 80164e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ea:	4770      	bx	lr

080164ec <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80164ec:	b480      	push	{r7}
 80164ee:	b083      	sub	sp, #12
 80164f0:	af00      	add	r7, sp, #0
 80164f2:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80164f4:	2301      	movs	r3, #1
    }
 80164f6:	4618      	mov	r0, r3
 80164f8:	370c      	adds	r7, #12
 80164fa:	46bd      	mov	sp, r7
 80164fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016500:	4770      	bx	lr

08016502 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8016502:	b480      	push	{r7}
 8016504:	b083      	sub	sp, #12
 8016506:	af00      	add	r7, sp, #0
 8016508:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 801650a:	f44f 739a 	mov.w	r3, #308	@ 0x134
    }
 801650e:	4618      	mov	r0, r3
 8016510:	370c      	adds	r7, #12
 8016512:	46bd      	mov	sp, r7
 8016514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016518:	4770      	bx	lr

0801651a <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801651a:	b480      	push	{r7}
 801651c:	b083      	sub	sp, #12
 801651e:	af00      	add	r7, sp, #0
 8016520:	6078      	str	r0, [r7, #4]
 8016522:	460b      	mov	r3, r1
 8016524:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8016526:	887b      	ldrh	r3, [r7, #2]
 8016528:	f44f 729a 	mov.w	r2, #308	@ 0x134
 801652c:	fb02 f303 	mul.w	r3, r2, r3
 8016530:	3308      	adds	r3, #8
 8016532:	687a      	ldr	r2, [r7, #4]
 8016534:	4413      	add	r3, r2
    }
 8016536:	4618      	mov	r0, r3
 8016538:	370c      	adds	r7, #12
 801653a:	46bd      	mov	sp, r7
 801653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016540:	4770      	bx	lr

08016542 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8016542:	b480      	push	{r7}
 8016544:	b083      	sub	sp, #12
 8016546:	af00      	add	r7, sp, #0
 8016548:	6078      	str	r0, [r7, #4]
 801654a:	460b      	mov	r3, r1
 801654c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801654e:	887b      	ldrh	r3, [r7, #2]
 8016550:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8016554:	fb02 f303 	mul.w	r3, r2, r3
 8016558:	3308      	adds	r3, #8
 801655a:	687a      	ldr	r2, [r7, #4]
 801655c:	4413      	add	r3, r2
    }
 801655e:	4618      	mov	r0, r3
 8016560:	370c      	adds	r7, #12
 8016562:	46bd      	mov	sp, r7
 8016564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016568:	4770      	bx	lr

0801656a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801656a:	b480      	push	{r7}
 801656c:	b083      	sub	sp, #12
 801656e:	af00      	add	r7, sp, #0
 8016570:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8016572:	2301      	movs	r3, #1
    }
 8016574:	4618      	mov	r0, r3
 8016576:	370c      	adds	r7, #12
 8016578:	46bd      	mov	sp, r7
 801657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801657e:	4770      	bx	lr

08016580 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8016580:	b480      	push	{r7}
 8016582:	b083      	sub	sp, #12
 8016584:	af00      	add	r7, sp, #0
 8016586:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8016588:	2310      	movs	r3, #16
    }
 801658a:	4618      	mov	r0, r3
 801658c:	370c      	adds	r7, #12
 801658e:	46bd      	mov	sp, r7
 8016590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016594:	4770      	bx	lr

08016596 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8016596:	b480      	push	{r7}
 8016598:	b083      	sub	sp, #12
 801659a:	af00      	add	r7, sp, #0
 801659c:	6078      	str	r0, [r7, #4]
 801659e:	460b      	mov	r3, r1
 80165a0:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80165a2:	887b      	ldrh	r3, [r7, #2]
 80165a4:	011b      	lsls	r3, r3, #4
 80165a6:	3308      	adds	r3, #8
 80165a8:	687a      	ldr	r2, [r7, #4]
 80165aa:	4413      	add	r3, r2
    }
 80165ac:	4618      	mov	r0, r3
 80165ae:	370c      	adds	r7, #12
 80165b0:	46bd      	mov	sp, r7
 80165b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165b6:	4770      	bx	lr

080165b8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80165b8:	b480      	push	{r7}
 80165ba:	b083      	sub	sp, #12
 80165bc:	af00      	add	r7, sp, #0
 80165be:	6078      	str	r0, [r7, #4]
 80165c0:	460b      	mov	r3, r1
 80165c2:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80165c4:	887b      	ldrh	r3, [r7, #2]
 80165c6:	011b      	lsls	r3, r3, #4
 80165c8:	3308      	adds	r3, #8
 80165ca:	687a      	ldr	r2, [r7, #4]
 80165cc:	4413      	add	r3, r2
    }
 80165ce:	4618      	mov	r0, r3
 80165d0:	370c      	adds	r7, #12
 80165d2:	46bd      	mov	sp, r7
 80165d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165d8:	4770      	bx	lr

080165da <_GLOBAL__sub_I_touchgfx_init>:
 80165da:	b580      	push	{r7, lr}
 80165dc:	af00      	add	r7, sp, #0
 80165de:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80165e2:	2001      	movs	r0, #1
 80165e4:	f7ff fef4 	bl	80163d0 <_Z41__static_initialization_and_destruction_0ii>
 80165e8:	bd80      	pop	{r7, pc}

080165ea <_GLOBAL__sub_D_touchgfx_init>:
 80165ea:	b580      	push	{r7, lr}
 80165ec:	af00      	add	r7, sp, #0
 80165ee:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80165f2:	2000      	movs	r0, #0
 80165f4:	f7ff feec 	bl	80163d0 <_Z41__static_initialization_and_destruction_0ii>
 80165f8:	bd80      	pop	{r7, pc}

080165fa <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 80165fa:	b480      	push	{r7}
 80165fc:	b085      	sub	sp, #20
 80165fe:	af00      	add	r7, sp, #0
 8016600:	60f8      	str	r0, [r7, #12]
 8016602:	4608      	mov	r0, r1
 8016604:	4611      	mov	r1, r2
 8016606:	461a      	mov	r2, r3
 8016608:	4603      	mov	r3, r0
 801660a:	817b      	strh	r3, [r7, #10]
 801660c:	460b      	mov	r3, r1
 801660e:	813b      	strh	r3, [r7, #8]
 8016610:	4613      	mov	r3, r2
 8016612:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8016614:	68fb      	ldr	r3, [r7, #12]
 8016616:	897a      	ldrh	r2, [r7, #10]
 8016618:	801a      	strh	r2, [r3, #0]
 801661a:	68fb      	ldr	r3, [r7, #12]
 801661c:	893a      	ldrh	r2, [r7, #8]
 801661e:	805a      	strh	r2, [r3, #2]
 8016620:	68fb      	ldr	r3, [r7, #12]
 8016622:	88fa      	ldrh	r2, [r7, #6]
 8016624:	809a      	strh	r2, [r3, #4]
 8016626:	68fb      	ldr	r3, [r7, #12]
 8016628:	8b3a      	ldrh	r2, [r7, #24]
 801662a:	80da      	strh	r2, [r3, #6]
    {
    }
 801662c:	68fb      	ldr	r3, [r7, #12]
 801662e:	4618      	mov	r0, r3
 8016630:	3714      	adds	r7, #20
 8016632:	46bd      	mov	sp, r7
 8016634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016638:	4770      	bx	lr

0801663a <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 801663a:	b480      	push	{r7}
 801663c:	b083      	sub	sp, #12
 801663e:	af00      	add	r7, sp, #0
 8016640:	6078      	str	r0, [r7, #4]
        return rect.width;
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 8016648:	4618      	mov	r0, r3
 801664a:	370c      	adds	r7, #12
 801664c:	46bd      	mov	sp, r7
 801664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016652:	4770      	bx	lr

08016654 <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 8016654:	b480      	push	{r7}
 8016656:	b083      	sub	sp, #12
 8016658:	af00      	add	r7, sp, #0
 801665a:	6078      	str	r0, [r7, #4]
        return rect.height;
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 8016662:	4618      	mov	r0, r3
 8016664:	370c      	adds	r7, #12
 8016666:	46bd      	mov	sp, r7
 8016668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801666c:	4770      	bx	lr
	...

08016670 <_ZN8touchgfx14VectorRendererD1Ev>:
 */
class VectorRenderer
{
public:
    /** Virtual destructor. */
    virtual ~VectorRenderer()
 8016670:	b480      	push	{r7}
 8016672:	b083      	sub	sp, #12
 8016674:	af00      	add	r7, sp, #0
 8016676:	6078      	str	r0, [r7, #4]
    {
 8016678:	4a04      	ldr	r2, [pc, #16]	@ (801668c <_ZN8touchgfx14VectorRendererD1Ev+0x1c>)
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	601a      	str	r2, [r3, #0]
    }
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	4618      	mov	r0, r3
 8016682:	370c      	adds	r7, #12
 8016684:	46bd      	mov	sp, r7
 8016686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801668a:	4770      	bx	lr
 801668c:	0802c8e8 	.word	0x0802c8e8

08016690 <_ZN8touchgfx14VectorRendererD0Ev>:
    virtual ~VectorRenderer()
 8016690:	b580      	push	{r7, lr}
 8016692:	b082      	sub	sp, #8
 8016694:	af00      	add	r7, sp, #0
 8016696:	6078      	str	r0, [r7, #4]
    }
 8016698:	6878      	ldr	r0, [r7, #4]
 801669a:	f7ff ffe9 	bl	8016670 <_ZN8touchgfx14VectorRendererD1Ev>
 801669e:	2104      	movs	r1, #4
 80166a0:	6878      	ldr	r0, [r7, #4]
 80166a2:	f013 f97c 	bl	802999e <_ZdlPvj>
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	4618      	mov	r0, r3
 80166aa:	3708      	adds	r7, #8
 80166ac:	46bd      	mov	sp, r7
 80166ae:	bd80      	pop	{r7, pc}

080166b0 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 80166b0:	b580      	push	{r7, lr}
 80166b2:	b082      	sub	sp, #8
 80166b4:	af00      	add	r7, sp, #0
 80166b6:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	681b      	ldr	r3, [r3, #0]
 80166bc:	3320      	adds	r3, #32
 80166be:	681b      	ldr	r3, [r3, #0]
 80166c0:	6878      	ldr	r0, [r7, #4]
 80166c2:	4798      	blx	r3
    }
 80166c4:	bf00      	nop
 80166c6:	3708      	adds	r7, #8
 80166c8:	46bd      	mov	sp, r7
 80166ca:	bd80      	pop	{r7, pc}

080166cc <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 80166cc:	b480      	push	{r7}
 80166ce:	b083      	sub	sp, #12
 80166d0:	af00      	add	r7, sp, #0
 80166d2:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 80166da:	3301      	adds	r3, #1
 80166dc:	b2da      	uxtb	r2, r3
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
    }
 80166e4:	bf00      	nop
 80166e6:	370c      	adds	r7, #12
 80166e8:	46bd      	mov	sp, r7
 80166ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166ee:	4770      	bx	lr

080166f0 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    LCD* getAuxiliaryLCD()
 80166f0:	b480      	push	{r7}
 80166f2:	b083      	sub	sp, #12
 80166f4:	af00      	add	r7, sp, #0
 80166f6:	6078      	str	r0, [r7, #4]
        return auxiliaryLCD;
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    }
 80166fc:	4618      	mov	r0, r3
 80166fe:	370c      	adds	r7, #12
 8016700:	46bd      	mov	sp, r7
 8016702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016706:	4770      	bx	lr

08016708 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>:
    /**
     * Constructor.
     *
     * @param  color (Optional) The color to use in the painter.
     */
    AbstractPainterColor(colortype color = 0)
 8016708:	b580      	push	{r7, lr}
 801670a:	b082      	sub	sp, #8
 801670c:	af00      	add	r7, sp, #0
 801670e:	6078      	str	r0, [r7, #4]
 8016710:	6039      	str	r1, [r7, #0]
    {
 8016712:	4a08      	ldr	r2, [pc, #32]	@ (8016734 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE+0x2c>)
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	601a      	str	r2, [r3, #0]
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	3304      	adds	r3, #4
 801671c:	4618      	mov	r0, r3
 801671e:	f7fe fd23 	bl	8015168 <_ZN8touchgfx9colortypeC1Ev>
        setColor(color);
 8016722:	6839      	ldr	r1, [r7, #0]
 8016724:	6878      	ldr	r0, [r7, #4]
 8016726:	f000 f827 	bl	8016778 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
    }
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	4618      	mov	r0, r3
 801672e:	3708      	adds	r7, #8
 8016730:	46bd      	mov	sp, r7
 8016732:	bd80      	pop	{r7, pc}
 8016734:	0802c7fc 	.word	0x0802c7fc

08016738 <_ZN8touchgfx20AbstractPainterColorD1Ev>:

    /** Destructor */
    virtual ~AbstractPainterColor()
 8016738:	b480      	push	{r7}
 801673a:	b083      	sub	sp, #12
 801673c:	af00      	add	r7, sp, #0
 801673e:	6078      	str	r0, [r7, #4]
    {
 8016740:	4a04      	ldr	r2, [pc, #16]	@ (8016754 <_ZN8touchgfx20AbstractPainterColorD1Ev+0x1c>)
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	601a      	str	r2, [r3, #0]
    }
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	4618      	mov	r0, r3
 801674a:	370c      	adds	r7, #12
 801674c:	46bd      	mov	sp, r7
 801674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016752:	4770      	bx	lr
 8016754:	0802c7fc 	.word	0x0802c7fc

08016758 <_ZN8touchgfx20AbstractPainterColorD0Ev>:
    virtual ~AbstractPainterColor()
 8016758:	b580      	push	{r7, lr}
 801675a:	b082      	sub	sp, #8
 801675c:	af00      	add	r7, sp, #0
 801675e:	6078      	str	r0, [r7, #4]
    }
 8016760:	6878      	ldr	r0, [r7, #4]
 8016762:	f7ff ffe9 	bl	8016738 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 8016766:	2108      	movs	r1, #8
 8016768:	6878      	ldr	r0, [r7, #4]
 801676a:	f013 f918 	bl	802999e <_ZdlPvj>
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	4618      	mov	r0, r3
 8016772:	3708      	adds	r7, #8
 8016774:	46bd      	mov	sp, r7
 8016776:	bd80      	pop	{r7, pc}

08016778 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>:
    /**
     * Sets color to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
 8016778:	b480      	push	{r7}
 801677a:	b083      	sub	sp, #12
 801677c:	af00      	add	r7, sp, #0
 801677e:	6078      	str	r0, [r7, #4]
 8016780:	6039      	str	r1, [r7, #0]
    {
        painterColor = color;
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	683a      	ldr	r2, [r7, #0]
 8016786:	605a      	str	r2, [r3, #4]
    }
 8016788:	bf00      	nop
 801678a:	370c      	adds	r7, #12
 801678c:	46bd      	mov	sp, r7
 801678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016792:	4770      	bx	lr

08016794 <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 8016794:	b480      	push	{r7}
 8016796:	b083      	sub	sp, #12
 8016798:	af00      	add	r7, sp, #0
 801679a:	6078      	str	r0, [r7, #4]
        : widgetWidth(0)
 801679c:	4a06      	ldr	r2, [pc, #24]	@ (80167b8 <_ZN8touchgfx15AbstractPainterC1Ev+0x24>)
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	601a      	str	r2, [r3, #0]
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	2200      	movs	r2, #0
 80167a6:	809a      	strh	r2, [r3, #4]
    {
    }
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	4618      	mov	r0, r3
 80167ac:	370c      	adds	r7, #12
 80167ae:	46bd      	mov	sp, r7
 80167b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167b4:	4770      	bx	lr
 80167b6:	bf00      	nop
 80167b8:	0802c7dc 	.word	0x0802c7dc

080167bc <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 80167bc:	b480      	push	{r7}
 80167be:	b083      	sub	sp, #12
 80167c0:	af00      	add	r7, sp, #0
 80167c2:	6078      	str	r0, [r7, #4]
    {
 80167c4:	4a04      	ldr	r2, [pc, #16]	@ (80167d8 <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	601a      	str	r2, [r3, #0]
    }
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	4618      	mov	r0, r3
 80167ce:	370c      	adds	r7, #12
 80167d0:	46bd      	mov	sp, r7
 80167d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167d6:	4770      	bx	lr
 80167d8:	0802c7dc 	.word	0x0802c7dc

080167dc <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 80167dc:	b580      	push	{r7, lr}
 80167de:	b082      	sub	sp, #8
 80167e0:	af00      	add	r7, sp, #0
 80167e2:	6078      	str	r0, [r7, #4]
    }
 80167e4:	6878      	ldr	r0, [r7, #4]
 80167e6:	f7ff ffe9 	bl	80167bc <_ZN8touchgfx15AbstractPainterD1Ev>
 80167ea:	2108      	movs	r1, #8
 80167ec:	6878      	ldr	r0, [r7, #4]
 80167ee:	f013 f8d6 	bl	802999e <_ZdlPvj>
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	4618      	mov	r0, r3
 80167f6:	3708      	adds	r7, #8
 80167f8:	46bd      	mov	sp, r7
 80167fa:	bd80      	pop	{r7, pc}

080167fc <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * HARDWARE if the painter uses hardware based drawing,
     * SOFTWARE otherwise. Relevant on platforms using DCACHE.
     *
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
 80167fc:	b480      	push	{r7}
 80167fe:	b083      	sub	sp, #12
 8016800:	af00      	add	r7, sp, #0
 8016802:	6078      	str	r0, [r7, #4]
    {
        return HAL::SOFTWARE;
 8016804:	2300      	movs	r3, #0
    }
 8016806:	4618      	mov	r0, r3
 8016808:	370c      	adds	r7, #12
 801680a:	46bd      	mov	sp, r7
 801680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016810:	4770      	bx	lr

08016812 <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @return True if the painter is ready to paint, false otherwise.
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
 8016812:	b480      	push	{r7}
 8016814:	b083      	sub	sp, #12
 8016816:	af00      	add	r7, sp, #0
 8016818:	6078      	str	r0, [r7, #4]
 801681a:	6039      	str	r1, [r7, #0]
    {
        widgetWidth = widgetRect.width;
 801681c:	683b      	ldr	r3, [r7, #0]
 801681e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	809a      	strh	r2, [r3, #4]
        return true;
 8016826:	2301      	movs	r3, #1
    }
 8016828:	4618      	mov	r0, r3
 801682a:	370c      	adds	r7, #12
 801682c:	46bd      	mov	sp, r7
 801682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016832:	4770      	bx	lr

08016834 <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * This function is called after all paint operation have finished. This allows the painter to
     * close down dma queues etc. This happens after the last scan line segment has been drawn.
     *
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
 8016834:	b480      	push	{r7}
 8016836:	b083      	sub	sp, #12
 8016838:	af00      	add	r7, sp, #0
 801683a:	6078      	str	r0, [r7, #4]
    {
        return;
 801683c:	bf00      	nop
    }
 801683e:	370c      	adds	r7, #12
 8016840:	46bd      	mov	sp, r7
 8016842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016846:	4770      	bx	lr

08016848 <_ZN8touchgfx29AbstractPainterLinearGradientC1Ev>:
 */
class AbstractPainterLinearGradient : public AbstractPainter
{
public:
    /** Constructor. */
    AbstractPainterLinearGradient()
 8016848:	b580      	push	{r7, lr}
 801684a:	b082      	sub	sp, #8
 801684c:	af00      	add	r7, sp, #0
 801684e:	6078      	str	r0, [r7, #4]
        : AbstractPainter(),
          coord0(0), coord1(100), texture(0), isSolid(false), isVertical(false), isHorizontal(false), clSlope(0.0f), clOffset(0.0f), horizontalDistance(0.0f), deltaColor(0.0f)
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	4618      	mov	r0, r3
 8016854:	f7ff ff9e 	bl	8016794 <_ZN8touchgfx15AbstractPainterC1Ev>
 8016858:	4a14      	ldr	r2, [pc, #80]	@ (80168ac <_ZN8touchgfx29AbstractPainterLinearGradientC1Ev+0x64>)
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	601a      	str	r2, [r3, #0]
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	2200      	movs	r2, #0
 8016862:	80da      	strh	r2, [r3, #6]
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	2264      	movs	r2, #100	@ 0x64
 8016868:	811a      	strh	r2, [r3, #8]
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	2200      	movs	r2, #0
 801686e:	60da      	str	r2, [r3, #12]
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	2200      	movs	r2, #0
 8016874:	741a      	strb	r2, [r3, #16]
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	2200      	movs	r2, #0
 801687a:	745a      	strb	r2, [r3, #17]
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	2200      	movs	r2, #0
 8016880:	749a      	strb	r2, [r3, #18]
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	f04f 0200 	mov.w	r2, #0
 8016888:	615a      	str	r2, [r3, #20]
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	f04f 0200 	mov.w	r2, #0
 8016890:	619a      	str	r2, [r3, #24]
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	f04f 0200 	mov.w	r2, #0
 8016898:	61da      	str	r2, [r3, #28]
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	f04f 0200 	mov.w	r2, #0
 80168a0:	621a      	str	r2, [r3, #32]
    {
    }
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	4618      	mov	r0, r3
 80168a6:	3708      	adds	r7, #8
 80168a8:	46bd      	mov	sp, r7
 80168aa:	bd80      	pop	{r7, pc}
 80168ac:	0802c7bc 	.word	0x0802c7bc

080168b0 <_ZN8touchgfx29AbstractPainterLinearGradientD1Ev>:

    /** Destructor */
    virtual ~AbstractPainterLinearGradient()
 80168b0:	b580      	push	{r7, lr}
 80168b2:	b082      	sub	sp, #8
 80168b4:	af00      	add	r7, sp, #0
 80168b6:	6078      	str	r0, [r7, #4]
    {
 80168b8:	4a05      	ldr	r2, [pc, #20]	@ (80168d0 <_ZN8touchgfx29AbstractPainterLinearGradientD1Ev+0x20>)
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	601a      	str	r2, [r3, #0]
    }
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	4618      	mov	r0, r3
 80168c2:	f7ff ff7b 	bl	80167bc <_ZN8touchgfx15AbstractPainterD1Ev>
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	4618      	mov	r0, r3
 80168ca:	3708      	adds	r7, #8
 80168cc:	46bd      	mov	sp, r7
 80168ce:	bd80      	pop	{r7, pc}
 80168d0:	0802c7bc 	.word	0x0802c7bc

080168d4 <_ZN8touchgfx29AbstractPainterLinearGradientD0Ev>:
    virtual ~AbstractPainterLinearGradient()
 80168d4:	b580      	push	{r7, lr}
 80168d6:	b082      	sub	sp, #8
 80168d8:	af00      	add	r7, sp, #0
 80168da:	6078      	str	r0, [r7, #4]
    }
 80168dc:	6878      	ldr	r0, [r7, #4]
 80168de:	f7ff ffe7 	bl	80168b0 <_ZN8touchgfx29AbstractPainterLinearGradientD1Ev>
 80168e2:	2124      	movs	r1, #36	@ 0x24
 80168e4:	6878      	ldr	r0, [r7, #4]
 80168e6:	f013 f85a 	bl	802999e <_ZdlPvj>
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	4618      	mov	r0, r3
 80168ee:	3708      	adds	r7, #8
 80168f0:	46bd      	mov	sp, r7
 80168f2:	bd80      	pop	{r7, pc}

080168f4 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    {
        return canvasPainter;
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
 80168f4:	b480      	push	{r7}
 80168f6:	b083      	sub	sp, #12
 80168f8:	af00      	add	r7, sp, #0
 80168fa:	6078      	str	r0, [r7, #4]
 80168fc:	460b      	mov	r3, r1
 80168fe:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	78fa      	ldrb	r2, [r7, #3]
 8016904:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    }
 8016908:	bf00      	nop
 801690a:	370c      	adds	r7, #12
 801690c:	46bd      	mov	sp, r7
 801690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016912:	4770      	bx	lr

08016914 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
 8016914:	b480      	push	{r7}
 8016916:	b083      	sub	sp, #12
 8016918:	af00      	add	r7, sp, #0
 801691a:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
    }
 8016922:	4618      	mov	r0, r3
 8016924:	370c      	adds	r7, #12
 8016926:	46bd      	mov	sp, r7
 8016928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801692c:	4770      	bx	lr

0801692e <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 801692e:	b590      	push	{r4, r7, lr}
 8016930:	b085      	sub	sp, #20
 8016932:	af02      	add	r7, sp, #8
 8016934:	6078      	str	r0, [r7, #4]
 8016936:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, getWidth(), getHeight());
 8016938:	683b      	ldr	r3, [r7, #0]
 801693a:	4618      	mov	r0, r3
 801693c:	f7ff fe7d 	bl	801663a <_ZNK8touchgfx8Drawable8getWidthEv>
 8016940:	4603      	mov	r3, r0
 8016942:	461c      	mov	r4, r3
 8016944:	683b      	ldr	r3, [r7, #0]
 8016946:	4618      	mov	r0, r3
 8016948:	f7ff fe84 	bl	8016654 <_ZNK8touchgfx8Drawable9getHeightEv>
 801694c:	4603      	mov	r3, r0
 801694e:	9300      	str	r3, [sp, #0]
 8016950:	4623      	mov	r3, r4
 8016952:	2200      	movs	r2, #0
 8016954:	2100      	movs	r1, #0
 8016956:	6878      	ldr	r0, [r7, #4]
 8016958:	f7ff fe4f 	bl	80165fa <_ZN8touchgfx4RectC1Essss>
    }
 801695c:	6878      	ldr	r0, [r7, #4]
 801695e:	370c      	adds	r7, #12
 8016960:	46bd      	mov	sp, r7
 8016962:	bd90      	pop	{r4, r7, pc}

08016964 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
     * @see draw
     *
     * @note Function draw() might fail for some horizontal lines due to memory constraints. These
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
 8016964:	b580      	push	{r7, lr}
 8016966:	b082      	sub	sp, #8
 8016968:	af00      	add	r7, sp, #0
 801696a:	6078      	str	r0, [r7, #4]
 801696c:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 801696e:	6878      	ldr	r0, [r7, #4]
 8016970:	f7fc fc0b 	bl	801318a <_ZN8touchgfx4RectC1Ev>
    }
 8016974:	6878      	ldr	r0, [r7, #4]
 8016976:	3708      	adds	r7, #8
 8016978:	46bd      	mov	sp, r7
 801697a:	bd80      	pop	{r7, pc}

0801697c <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 801697c:	b580      	push	{r7, lr}
 801697e:	b084      	sub	sp, #16
 8016980:	af00      	add	r7, sp, #0
 8016982:	6078      	str	r0, [r7, #4]
        : AbstractPainter()
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	4618      	mov	r0, r3
 8016988:	f7ff ff04 	bl	8016794 <_ZN8touchgfx15AbstractPainterC1Ev>
 801698c:	4a26      	ldr	r2, [pc, #152]	@ (8016a28 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xac>)
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	601a      	str	r2, [r3, #0]
 8016992:	2301      	movs	r3, #1
 8016994:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8016996:	f7fb fdd5 	bl	8012544 <_ZN8touchgfx3HAL3lcdEv>
 801699a:	4603      	mov	r3, r0
 801699c:	681a      	ldr	r2, [r3, #0]
 801699e:	322c      	adds	r2, #44	@ 0x2c
 80169a0:	6812      	ldr	r2, [r2, #0]
 80169a2:	4618      	mov	r0, r3
 80169a4:	4790      	blx	r2
 80169a6:	4603      	mov	r3, r0
 80169a8:	461a      	mov	r2, r3
 80169aa:	7bfb      	ldrb	r3, [r7, #15]
 80169ac:	4293      	cmp	r3, r2
 80169ae:	bf0c      	ite	eq
 80169b0:	2301      	moveq	r3, #1
 80169b2:	2300      	movne	r3, #0
 80169b4:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 80169b6:	f7fb fdb9 	bl	801252c <_ZN8touchgfx3HAL11getInstanceEv>
 80169ba:	4603      	mov	r3, r0
 80169bc:	4618      	mov	r0, r3
 80169be:	f7ff fe97 	bl	80166f0 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 80169c2:	4603      	mov	r3, r0
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	bf14      	ite	ne
 80169c8:	2301      	movne	r3, #1
 80169ca:	2300      	moveq	r3, #0
 80169cc:	b2db      	uxtb	r3, r3
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d01b      	beq.n	8016a0a <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x8e>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 80169d2:	f7fb fdab 	bl	801252c <_ZN8touchgfx3HAL11getInstanceEv>
 80169d6:	4603      	mov	r3, r0
 80169d8:	4618      	mov	r0, r3
 80169da:	f7ff fe89 	bl	80166f0 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 80169de:	4603      	mov	r3, r0
 80169e0:	681a      	ldr	r2, [r3, #0]
 80169e2:	322c      	adds	r2, #44	@ 0x2c
 80169e4:	6812      	ldr	r2, [r2, #0]
 80169e6:	4618      	mov	r0, r3
 80169e8:	4790      	blx	r2
 80169ea:	4603      	mov	r3, r0
 80169ec:	461a      	mov	r2, r3
 80169ee:	7bfb      	ldrb	r3, [r7, #15]
 80169f0:	4293      	cmp	r3, r2
 80169f2:	bf0c      	ite	eq
 80169f4:	2301      	moveq	r3, #1
 80169f6:	2300      	movne	r3, #0
 80169f8:	b2da      	uxtb	r2, r3
 80169fa:	7bbb      	ldrb	r3, [r7, #14]
 80169fc:	4313      	orrs	r3, r2
 80169fe:	b2db      	uxtb	r3, r3
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	bf14      	ite	ne
 8016a04:	2301      	movne	r3, #1
 8016a06:	2300      	moveq	r3, #0
 8016a08:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 8016a0a:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d105      	bne.n	8016a1c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xa0>
 8016a10:	4b06      	ldr	r3, [pc, #24]	@ (8016a2c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb0>)
 8016a12:	4a07      	ldr	r2, [pc, #28]	@ (8016a30 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb4>)
 8016a14:	2127      	movs	r1, #39	@ 0x27
 8016a16:	4807      	ldr	r0, [pc, #28]	@ (8016a34 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb8>)
 8016a18:	f013 fb3a 	bl	802a090 <__assert_func>
    }
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	4618      	mov	r0, r3
 8016a20:	3710      	adds	r7, #16
 8016a22:	46bd      	mov	sp, r7
 8016a24:	bd80      	pop	{r7, pc}
 8016a26:	bf00      	nop
 8016a28:	0802c79c 	.word	0x0802c79c
 8016a2c:	0802bd4c 	.word	0x0802bd4c
 8016a30:	0802bdac 	.word	0x0802bdac
 8016a34:	0802bde8 	.word	0x0802bde8

08016a38 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
class AbstractPainterRGB888 : public AbstractPainter
 8016a38:	b580      	push	{r7, lr}
 8016a3a:	b082      	sub	sp, #8
 8016a3c:	af00      	add	r7, sp, #0
 8016a3e:	6078      	str	r0, [r7, #4]
 8016a40:	4a05      	ldr	r2, [pc, #20]	@ (8016a58 <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	601a      	str	r2, [r3, #0]
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	4618      	mov	r0, r3
 8016a4a:	f7ff feb7 	bl	80167bc <_ZN8touchgfx15AbstractPainterD1Ev>
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	4618      	mov	r0, r3
 8016a52:	3708      	adds	r7, #8
 8016a54:	46bd      	mov	sp, r7
 8016a56:	bd80      	pop	{r7, pc}
 8016a58:	0802c79c 	.word	0x0802c79c

08016a5c <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 8016a5c:	b580      	push	{r7, lr}
 8016a5e:	b082      	sub	sp, #8
 8016a60:	af00      	add	r7, sp, #0
 8016a62:	6078      	str	r0, [r7, #4]
 8016a64:	6878      	ldr	r0, [r7, #4]
 8016a66:	f7ff ffe7 	bl	8016a38 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8016a6a:	2108      	movs	r1, #8
 8016a6c:	6878      	ldr	r0, [r7, #4]
 8016a6e:	f012 ff96 	bl	802999e <_ZdlPvj>
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	4618      	mov	r0, r3
 8016a76:	3708      	adds	r7, #8
 8016a78:	46bd      	mov	sp, r7
 8016a7a:	bd80      	pop	{r7, pc}

08016a7c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>:
    /**
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
 8016a7c:	b580      	push	{r7, lr}
 8016a7e:	b082      	sub	sp, #8
 8016a80:	af00      	add	r7, sp, #0
 8016a82:	6078      	str	r0, [r7, #4]
 8016a84:	6039      	str	r1, [r7, #0]
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	4618      	mov	r0, r3
 8016a8a:	f7ff ff77 	bl	801697c <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	3308      	adds	r3, #8
 8016a92:	6839      	ldr	r1, [r7, #0]
 8016a94:	4618      	mov	r0, r3
 8016a96:	f7ff fe37 	bl	8016708 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>
 8016a9a:	4a05      	ldr	r2, [pc, #20]	@ (8016ab0 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE+0x34>)
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	601a      	str	r2, [r3, #0]
 8016aa0:	4a04      	ldr	r2, [pc, #16]	@ (8016ab4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE+0x38>)
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	609a      	str	r2, [r3, #8]
    {
    }
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	4618      	mov	r0, r3
 8016aaa:	3708      	adds	r7, #8
 8016aac:	46bd      	mov	sp, r7
 8016aae:	bd80      	pop	{r7, pc}
 8016ab0:	0802cba4 	.word	0x0802cba4
 8016ab4:	0802cbc8 	.word	0x0802cbc8

08016ab8 <_ZN8touchgfx17CWRVectorRenderer7setModeENS_14VectorRenderer8DrawModeE>:
     *
     * The default mode is non-zero filling.
     *
     * @param mode The filling mode.
     */
    virtual void setMode(DrawMode mode)
 8016ab8:	b480      	push	{r7}
 8016aba:	b083      	sub	sp, #12
 8016abc:	af00      	add	r7, sp, #0
 8016abe:	6078      	str	r0, [r7, #4]
 8016ac0:	460b      	mov	r3, r1
 8016ac2:	70fb      	strb	r3, [r7, #3]
    {
        drawMode = mode;
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	78fa      	ldrb	r2, [r7, #3]
 8016ac8:	771a      	strb	r2, [r3, #28]
    }
 8016aca:	bf00      	nop
 8016acc:	370c      	adds	r7, #12
 8016ace:	46bd      	mov	sp, r7
 8016ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ad4:	4770      	bx	lr

08016ad6 <_ZN8touchgfx17CWRVectorRenderer19setStrokeMiterLimitEf>:

    virtual void setStrokeMiterLimit(float miterLimit)
 8016ad6:	b480      	push	{r7}
 8016ad8:	b083      	sub	sp, #12
 8016ada:	af00      	add	r7, sp, #0
 8016adc:	6078      	str	r0, [r7, #4]
 8016ade:	ed87 0a00 	vstr	s0, [r7]
    {
        strokeMiterLimit = miterLimit;
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	683a      	ldr	r2, [r7, #0]
 8016ae6:	621a      	str	r2, [r3, #32]
    }
 8016ae8:	bf00      	nop
 8016aea:	370c      	adds	r7, #12
 8016aec:	46bd      	mov	sp, r7
 8016aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016af2:	4770      	bx	lr

08016af4 <_ZN8touchgfx17CWRVectorRenderer17setStrokeLineJoinENS_16VGStrokeLineJoinE>:

    virtual void setStrokeLineJoin(VGStrokeLineJoin lineJoin)
 8016af4:	b480      	push	{r7}
 8016af6:	b083      	sub	sp, #12
 8016af8:	af00      	add	r7, sp, #0
 8016afa:	6078      	str	r0, [r7, #4]
 8016afc:	460b      	mov	r3, r1
 8016afe:	70fb      	strb	r3, [r7, #3]
    {
        strokeLineJoin = lineJoin;
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	78fa      	ldrb	r2, [r7, #3]
 8016b04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
 8016b08:	bf00      	nop
 8016b0a:	370c      	adds	r7, #12
 8016b0c:	46bd      	mov	sp, r7
 8016b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b12:	4770      	bx	lr

08016b14 <_ZN8touchgfx17CWRVectorRenderer16setStrokeLineCapENS_15VGStrokeLineCapE>:

    virtual void setStrokeLineCap(VGStrokeLineCap lineCap)
 8016b14:	b480      	push	{r7}
 8016b16:	b083      	sub	sp, #12
 8016b18:	af00      	add	r7, sp, #0
 8016b1a:	6078      	str	r0, [r7, #4]
 8016b1c:	460b      	mov	r3, r1
 8016b1e:	70fb      	strb	r3, [r7, #3]
    {
        strokeLineCap = lineCap;
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	78fa      	ldrb	r2, [r7, #3]
 8016b24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
 8016b28:	bf00      	nop
 8016b2a:	370c      	adds	r7, #12
 8016b2c:	46bd      	mov	sp, r7
 8016b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b32:	4770      	bx	lr

08016b34 <_ZNK8touchgfx17CWRVectorRenderer17CanvasWidgetProxy16drawCanvasWidgetERKNS_4RectE>:
    void drawStrokeBackwards(uint32_t cmdInxPathStart, uint32_t cmdInx, uint32_t pointInx, const uint8_t* cmds, const float* points, bool drawLineCaps, StrokeCanvas& canvas) const;
    void getPreviousDestination(float& positionX, float& positionY, uint32_t cmdInx, uint32_t pointInx, const uint8_t* cmds, const float* points) const;

    class CanvasWidgetProxy : public CanvasWidget
    {
        virtual bool drawCanvasWidget(const Rect& invalidatedArea) const
 8016b34:	b480      	push	{r7}
 8016b36:	b083      	sub	sp, #12
 8016b38:	af00      	add	r7, sp, #0
 8016b3a:	6078      	str	r0, [r7, #4]
 8016b3c:	6039      	str	r1, [r7, #0]
        {
            return true;
 8016b3e:	2301      	movs	r3, #1
        }
 8016b40:	4618      	mov	r0, r3
 8016b42:	370c      	adds	r7, #12
 8016b44:	46bd      	mov	sp, r7
 8016b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b4a:	4770      	bx	lr

08016b4c <_ZN8touchgfx23CWRVectorRendererRGB88816getLinearPainterEv>:
 * Implementation of the CWRVectorRendererInterface
 * for the RGB888 framebuffer format.
 */
class CWRVectorRendererRGB888 : public CWRVectorRenderer
{
    virtual AbstractPainterLinearGradient& getLinearPainter()
 8016b4c:	b480      	push	{r7}
 8016b4e:	b083      	sub	sp, #12
 8016b50:	af00      	add	r7, sp, #0
 8016b52:	6078      	str	r0, [r7, #4]
    {
        return linearPainter;
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	3398      	adds	r3, #152	@ 0x98
    }
 8016b58:	4618      	mov	r0, r3
 8016b5a:	370c      	adds	r7, #12
 8016b5c:	46bd      	mov	sp, r7
 8016b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b62:	4770      	bx	lr

08016b64 <_ZN8touchgfx23CWRVectorRendererRGB88820getColorPainterColorEv>:

    virtual AbstractPainterColor& getColorPainterColor()
 8016b64:	b480      	push	{r7}
 8016b66:	b083      	sub	sp, #12
 8016b68:	af00      	add	r7, sp, #0
 8016b6a:	6078      	str	r0, [r7, #4]
    {
        return colorPainter;
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	338c      	adds	r3, #140	@ 0x8c
    }
 8016b70:	4618      	mov	r0, r3
 8016b72:	370c      	adds	r7, #12
 8016b74:	46bd      	mov	sp, r7
 8016b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b7a:	4770      	bx	lr

08016b7c <_ZN8touchgfx23CWRVectorRendererRGB88815getColorPainterEv>:

    virtual AbstractPainter& getColorPainter()
 8016b7c:	b480      	push	{r7}
 8016b7e:	b083      	sub	sp, #12
 8016b80:	af00      	add	r7, sp, #0
 8016b82:	6078      	str	r0, [r7, #4]
    {
        return colorPainter;
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	3384      	adds	r3, #132	@ 0x84
    }
 8016b88:	4618      	mov	r0, r3
 8016b8a:	370c      	adds	r7, #12
 8016b8c:	46bd      	mov	sp, r7
 8016b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b92:	4770      	bx	lr

08016b94 <_ZN8touchgfx14VectorRendererC1Ev>:
class VectorRenderer
 8016b94:	b480      	push	{r7}
 8016b96:	b083      	sub	sp, #12
 8016b98:	af00      	add	r7, sp, #0
 8016b9a:	6078      	str	r0, [r7, #4]
 8016b9c:	4a04      	ldr	r2, [pc, #16]	@ (8016bb0 <_ZN8touchgfx14VectorRendererC1Ev+0x1c>)
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	601a      	str	r2, [r3, #0]
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	4618      	mov	r0, r3
 8016ba6:	370c      	adds	r7, #12
 8016ba8:	46bd      	mov	sp, r7
 8016baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bae:	4770      	bx	lr
 8016bb0:	0802c8e8 	.word	0x0802c8e8

08016bb4 <_ZN8touchgfx12CanvasWidgetD1Ev>:
class CanvasWidget : public Widget
 8016bb4:	b580      	push	{r7, lr}
 8016bb6:	b082      	sub	sp, #8
 8016bb8:	af00      	add	r7, sp, #0
 8016bba:	6078      	str	r0, [r7, #4]
 8016bbc:	4a05      	ldr	r2, [pc, #20]	@ (8016bd4 <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	601a      	str	r2, [r3, #0]
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	4618      	mov	r0, r3
 8016bc6:	f7fc fd57 	bl	8013678 <_ZN8touchgfx6WidgetD1Ev>
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	4618      	mov	r0, r3
 8016bce:	3708      	adds	r7, #8
 8016bd0:	46bd      	mov	sp, r7
 8016bd2:	bd80      	pop	{r7, pc}
 8016bd4:	0802cbfc 	.word	0x0802cbfc

08016bd8 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 8016bd8:	b580      	push	{r7, lr}
 8016bda:	b082      	sub	sp, #8
 8016bdc:	af00      	add	r7, sp, #0
 8016bde:	6078      	str	r0, [r7, #4]
 8016be0:	6878      	ldr	r0, [r7, #4]
 8016be2:	f7ff ffe7 	bl	8016bb4 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8016be6:	212c      	movs	r1, #44	@ 0x2c
 8016be8:	6878      	ldr	r0, [r7, #4]
 8016bea:	f012 fed8 	bl	802999e <_ZdlPvj>
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	4618      	mov	r0, r3
 8016bf2:	3708      	adds	r7, #8
 8016bf4:	46bd      	mov	sp, r7
 8016bf6:	bd80      	pop	{r7, pc}

08016bf8 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyC1Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 8016bf8:	b580      	push	{r7, lr}
 8016bfa:	b082      	sub	sp, #8
 8016bfc:	af00      	add	r7, sp, #0
 8016bfe:	6078      	str	r0, [r7, #4]
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	4618      	mov	r0, r3
 8016c04:	f003 f8d0 	bl	8019da8 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8016c08:	4a03      	ldr	r2, [pc, #12]	@ (8016c18 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyC1Ev+0x20>)
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	601a      	str	r2, [r3, #0]
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	4618      	mov	r0, r3
 8016c12:	3708      	adds	r7, #8
 8016c14:	46bd      	mov	sp, r7
 8016c16:	bd80      	pop	{r7, pc}
 8016c18:	0802c724 	.word	0x0802c724

08016c1c <_ZN8touchgfx17CWRVectorRendererC1Ev>:
class CWRVectorRenderer : public VectorRenderer
 8016c1c:	b580      	push	{r7, lr}
 8016c1e:	b082      	sub	sp, #8
 8016c20:	af00      	add	r7, sp, #0
 8016c22:	6078      	str	r0, [r7, #4]
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	4618      	mov	r0, r3
 8016c28:	f7ff ffb4 	bl	8016b94 <_ZN8touchgfx14VectorRendererC1Ev>
 8016c2c:	4a10      	ldr	r2, [pc, #64]	@ (8016c70 <_ZN8touchgfx17CWRVectorRendererC1Ev+0x54>)
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	601a      	str	r2, [r3, #0]
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	3304      	adds	r3, #4
 8016c36:	4618      	mov	r0, r3
 8016c38:	f7fc faa7 	bl	801318a <_ZN8touchgfx4RectC1Ev>
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	330c      	adds	r3, #12
 8016c40:	4618      	mov	r0, r3
 8016c42:	f7fc faa2 	bl	801318a <_ZN8touchgfx4RectC1Ev>
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	3326      	adds	r3, #38	@ 0x26
 8016c4a:	4618      	mov	r0, r3
 8016c4c:	f7fc fa9d 	bl	801318a <_ZN8touchgfx4RectC1Ev>
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	3334      	adds	r3, #52	@ 0x34
 8016c54:	4618      	mov	r0, r3
 8016c56:	f006 fc1e 	bl	801d496 <_ZN8touchgfx9Matrix3x3C1Ev>
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	3358      	adds	r3, #88	@ 0x58
 8016c5e:	4618      	mov	r0, r3
 8016c60:	f7ff ffca 	bl	8016bf8 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyC1Ev>
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	4618      	mov	r0, r3
 8016c68:	3708      	adds	r7, #8
 8016c6a:	46bd      	mov	sp, r7
 8016c6c:	bd80      	pop	{r7, pc}
 8016c6e:	bf00      	nop
 8016c70:	0802cb58 	.word	0x0802cb58

08016c74 <_ZN8touchgfx17CWRVectorRendererD1Ev>:
 8016c74:	b580      	push	{r7, lr}
 8016c76:	b082      	sub	sp, #8
 8016c78:	af00      	add	r7, sp, #0
 8016c7a:	6078      	str	r0, [r7, #4]
 8016c7c:	4a08      	ldr	r2, [pc, #32]	@ (8016ca0 <_ZN8touchgfx17CWRVectorRendererD1Ev+0x2c>)
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	601a      	str	r2, [r3, #0]
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	3358      	adds	r3, #88	@ 0x58
 8016c86:	4618      	mov	r0, r3
 8016c88:	f000 faea 	bl	8017260 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	4618      	mov	r0, r3
 8016c90:	f7ff fcee 	bl	8016670 <_ZN8touchgfx14VectorRendererD1Ev>
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	4618      	mov	r0, r3
 8016c98:	3708      	adds	r7, #8
 8016c9a:	46bd      	mov	sp, r7
 8016c9c:	bd80      	pop	{r7, pc}
 8016c9e:	bf00      	nop
 8016ca0:	0802cb58 	.word	0x0802cb58

08016ca4 <_ZN8touchgfx17CWRVectorRendererD0Ev>:
 8016ca4:	b580      	push	{r7, lr}
 8016ca6:	b082      	sub	sp, #8
 8016ca8:	af00      	add	r7, sp, #0
 8016caa:	6078      	str	r0, [r7, #4]
 8016cac:	6878      	ldr	r0, [r7, #4]
 8016cae:	f7ff ffe1 	bl	8016c74 <_ZN8touchgfx17CWRVectorRendererD1Ev>
 8016cb2:	2184      	movs	r1, #132	@ 0x84
 8016cb4:	6878      	ldr	r0, [r7, #4]
 8016cb6:	f012 fe72 	bl	802999e <_ZdlPvj>
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	4618      	mov	r0, r3
 8016cbe:	3708      	adds	r7, #8
 8016cc0:	46bd      	mov	sp, r7
 8016cc2:	bd80      	pop	{r7, pc}

08016cc4 <_ZN8touchgfx27PainterRGB888LinearGradientC1Ev>:
 * An abstract class for creating painter classes for drawing canvas widgets. All canvas widgets
 * need a painter to fill the shape drawn with a CanvasWidgetRenderer. The painter must provide
 * the color of a pixel on a given coordinate, which will the be blended into the framebuffer
 * depending on the position of the canvas widget and the transparency of the given pixel.
 */
class PainterRGB888LinearGradient : public AbstractPainterLinearGradient
 8016cc4:	b580      	push	{r7, lr}
 8016cc6:	b082      	sub	sp, #8
 8016cc8:	af00      	add	r7, sp, #0
 8016cca:	6078      	str	r0, [r7, #4]
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	4618      	mov	r0, r3
 8016cd0:	f7ff fdba 	bl	8016848 <_ZN8touchgfx29AbstractPainterLinearGradientC1Ev>
 8016cd4:	4a03      	ldr	r2, [pc, #12]	@ (8016ce4 <_ZN8touchgfx27PainterRGB888LinearGradientC1Ev+0x20>)
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	601a      	str	r2, [r3, #0]
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	4618      	mov	r0, r3
 8016cde:	3708      	adds	r7, #8
 8016ce0:	46bd      	mov	sp, r7
 8016ce2:	bd80      	pop	{r7, pc}
 8016ce4:	0802cbdc 	.word	0x0802cbdc

08016ce8 <_ZN8touchgfx23CWRVectorRendererRGB888C1Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8016ce8:	b590      	push	{r4, r7, lr}
 8016cea:	b085      	sub	sp, #20
 8016cec:	af00      	add	r7, sp, #0
 8016cee:	6078      	str	r0, [r7, #4]
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	4618      	mov	r0, r3
 8016cf4:	f7ff ff92 	bl	8016c1c <_ZN8touchgfx17CWRVectorRendererC1Ev>
 8016cf8:	4a0c      	ldr	r2, [pc, #48]	@ (8016d2c <_ZN8touchgfx23CWRVectorRendererRGB888C1Ev+0x44>)
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	601a      	str	r2, [r3, #0]
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	f103 0484 	add.w	r4, r3, #132	@ 0x84
 8016d04:	f107 030c 	add.w	r3, r7, #12
 8016d08:	2100      	movs	r1, #0
 8016d0a:	4618      	mov	r0, r3
 8016d0c:	f7fc fa2e 	bl	801316c <_ZN8touchgfx9colortypeC1Em>
 8016d10:	68f9      	ldr	r1, [r7, #12]
 8016d12:	4620      	mov	r0, r4
 8016d14:	f7ff feb2 	bl	8016a7c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 8016d18:	687b      	ldr	r3, [r7, #4]
 8016d1a:	3398      	adds	r3, #152	@ 0x98
 8016d1c:	4618      	mov	r0, r3
 8016d1e:	f7ff ffd1 	bl	8016cc4 <_ZN8touchgfx27PainterRGB888LinearGradientC1Ev>
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	4618      	mov	r0, r3
 8016d26:	3714      	adds	r7, #20
 8016d28:	46bd      	mov	sp, r7
 8016d2a:	bd90      	pop	{r4, r7, pc}
 8016d2c:	0802c6d8 	.word	0x0802c6d8

08016d30 <__tcf_1>:

namespace touchgfx
{
VectorRenderer* VectorRenderer::getInstance()
{
    static CWRVectorRendererRGB888 renderer;
 8016d30:	b580      	push	{r7, lr}
 8016d32:	af00      	add	r7, sp, #0
 8016d34:	4801      	ldr	r0, [pc, #4]	@ (8016d3c <__tcf_1+0xc>)
 8016d36:	f000 fa67 	bl	8017208 <_ZN8touchgfx23CWRVectorRendererRGB888D1Ev>
 8016d3a:	bd80      	pop	{r7, pc}
 8016d3c:	24013a88 	.word	0x24013a88

08016d40 <_ZN8touchgfx14VectorRenderer11getInstanceEv>:
{
 8016d40:	b580      	push	{r7, lr}
 8016d42:	af00      	add	r7, sp, #0
    static CWRVectorRendererRGB888 renderer;
 8016d44:	4b11      	ldr	r3, [pc, #68]	@ (8016d8c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x4c>)
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	f3bf 8f5b 	dmb	ish
 8016d4c:	f003 0301 	and.w	r3, r3, #1
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	bf0c      	ite	eq
 8016d54:	2301      	moveq	r3, #1
 8016d56:	2300      	movne	r3, #0
 8016d58:	b2db      	uxtb	r3, r3
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	d013      	beq.n	8016d86 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x46>
 8016d5e:	480b      	ldr	r0, [pc, #44]	@ (8016d8c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x4c>)
 8016d60:	f012 fe1f 	bl	80299a2 <__cxa_guard_acquire>
 8016d64:	4603      	mov	r3, r0
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	bf14      	ite	ne
 8016d6a:	2301      	movne	r3, #1
 8016d6c:	2300      	moveq	r3, #0
 8016d6e:	b2db      	uxtb	r3, r3
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	d008      	beq.n	8016d86 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x46>
 8016d74:	4806      	ldr	r0, [pc, #24]	@ (8016d90 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x50>)
 8016d76:	f7ff ffb7 	bl	8016ce8 <_ZN8touchgfx23CWRVectorRendererRGB888C1Ev>
 8016d7a:	4806      	ldr	r0, [pc, #24]	@ (8016d94 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x54>)
 8016d7c:	f013 f9a6 	bl	802a0cc <atexit>
 8016d80:	4802      	ldr	r0, [pc, #8]	@ (8016d8c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x4c>)
 8016d82:	f012 fe1a 	bl	80299ba <__cxa_guard_release>

    return &renderer;
 8016d86:	4b02      	ldr	r3, [pc, #8]	@ (8016d90 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x50>)
}
 8016d88:	4618      	mov	r0, r3
 8016d8a:	bd80      	pop	{r7, pc}
 8016d8c:	24013b44 	.word	0x24013b44
 8016d90:	24013a88 	.word	0x24013a88
 8016d94:	08016d31 	.word	0x08016d31

08016d98 <__NVIC_EnableIRQ>:
{
 8016d98:	b480      	push	{r7}
 8016d9a:	b083      	sub	sp, #12
 8016d9c:	af00      	add	r7, sp, #0
 8016d9e:	4603      	mov	r3, r0
 8016da0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8016da2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	db0b      	blt.n	8016dc2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016daa:	88fb      	ldrh	r3, [r7, #6]
 8016dac:	f003 021f 	and.w	r2, r3, #31
 8016db0:	4907      	ldr	r1, [pc, #28]	@ (8016dd0 <__NVIC_EnableIRQ+0x38>)
 8016db2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016db6:	095b      	lsrs	r3, r3, #5
 8016db8:	2001      	movs	r0, #1
 8016dba:	fa00 f202 	lsl.w	r2, r0, r2
 8016dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8016dc2:	bf00      	nop
 8016dc4:	370c      	adds	r7, #12
 8016dc6:	46bd      	mov	sp, r7
 8016dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dcc:	4770      	bx	lr
 8016dce:	bf00      	nop
 8016dd0:	e000e100 	.word	0xe000e100

08016dd4 <__NVIC_DisableIRQ>:
{
 8016dd4:	b480      	push	{r7}
 8016dd6:	b083      	sub	sp, #12
 8016dd8:	af00      	add	r7, sp, #0
 8016dda:	4603      	mov	r3, r0
 8016ddc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8016dde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	db12      	blt.n	8016e0c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016de6:	88fb      	ldrh	r3, [r7, #6]
 8016de8:	f003 021f 	and.w	r2, r3, #31
 8016dec:	490a      	ldr	r1, [pc, #40]	@ (8016e18 <__NVIC_DisableIRQ+0x44>)
 8016dee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016df2:	095b      	lsrs	r3, r3, #5
 8016df4:	2001      	movs	r0, #1
 8016df6:	fa00 f202 	lsl.w	r2, r0, r2
 8016dfa:	3320      	adds	r3, #32
 8016dfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8016e00:	f3bf 8f4f 	dsb	sy
}
 8016e04:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8016e06:	f3bf 8f6f 	isb	sy
}
 8016e0a:	bf00      	nop
}
 8016e0c:	bf00      	nop
 8016e0e:	370c      	adds	r7, #12
 8016e10:	46bd      	mov	sp, r7
 8016e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e16:	4770      	bx	lr
 8016e18:	e000e100 	.word	0xe000e100

08016e1c <__NVIC_SetPriority>:
{
 8016e1c:	b480      	push	{r7}
 8016e1e:	b083      	sub	sp, #12
 8016e20:	af00      	add	r7, sp, #0
 8016e22:	4603      	mov	r3, r0
 8016e24:	6039      	str	r1, [r7, #0]
 8016e26:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8016e28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	db0a      	blt.n	8016e46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016e30:	683b      	ldr	r3, [r7, #0]
 8016e32:	b2da      	uxtb	r2, r3
 8016e34:	490c      	ldr	r1, [pc, #48]	@ (8016e68 <__NVIC_SetPriority+0x4c>)
 8016e36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016e3a:	0112      	lsls	r2, r2, #4
 8016e3c:	b2d2      	uxtb	r2, r2
 8016e3e:	440b      	add	r3, r1
 8016e40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8016e44:	e00a      	b.n	8016e5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016e46:	683b      	ldr	r3, [r7, #0]
 8016e48:	b2da      	uxtb	r2, r3
 8016e4a:	4908      	ldr	r1, [pc, #32]	@ (8016e6c <__NVIC_SetPriority+0x50>)
 8016e4c:	88fb      	ldrh	r3, [r7, #6]
 8016e4e:	f003 030f 	and.w	r3, r3, #15
 8016e52:	3b04      	subs	r3, #4
 8016e54:	0112      	lsls	r2, r2, #4
 8016e56:	b2d2      	uxtb	r2, r2
 8016e58:	440b      	add	r3, r1
 8016e5a:	761a      	strb	r2, [r3, #24]
}
 8016e5c:	bf00      	nop
 8016e5e:	370c      	adds	r7, #12
 8016e60:	46bd      	mov	sp, r7
 8016e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e66:	4770      	bx	lr
 8016e68:	e000e100 	.word	0xe000e100
 8016e6c:	e000ed00 	.word	0xe000ed00

08016e70 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8016e70:	b5b0      	push	{r4, r5, r7, lr}
 8016e72:	b082      	sub	sp, #8
 8016e74:	af00      	add	r7, sp, #0
 8016e76:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	4618      	mov	r0, r3
 8016e7c:	f000 fd83 	bl	8017986 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8016e80:	687d      	ldr	r5, [r7, #4]
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	681b      	ldr	r3, [r3, #0]
 8016e86:	3364      	adds	r3, #100	@ 0x64
 8016e88:	681c      	ldr	r4, [r3, #0]
 8016e8a:	f004 ff7f 	bl	801bd8c <_ZN8touchgfx11Application11getInstanceEv>
 8016e8e:	4603      	mov	r3, r0
 8016e90:	4619      	mov	r1, r3
 8016e92:	4628      	mov	r0, r5
 8016e94:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8016e96:	6878      	ldr	r0, [r7, #4]
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	681b      	ldr	r3, [r3, #0]
 8016e9c:	3388      	adds	r3, #136	@ 0x88
 8016e9e:	681c      	ldr	r4, [r3, #0]
 8016ea0:	4a03      	ldr	r2, [pc, #12]	@ (8016eb0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 8016ea2:	2300      	movs	r3, #0
 8016ea4:	4903      	ldr	r1, [pc, #12]	@ (8016eb4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8016ea6:	47a0      	blx	r4
}
 8016ea8:	bf00      	nop
 8016eaa:	3708      	adds	r7, #8
 8016eac:	46bd      	mov	sp, r7
 8016eae:	bdb0      	pop	{r4, r5, r7, pc}
 8016eb0:	7005fa00 	.word	0x7005fa00
 8016eb4:	70000000 	.word	0x70000000

08016eb8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8016eb8:	b580      	push	{r7, lr}
 8016eba:	b082      	sub	sp, #8
 8016ebc:	af00      	add	r7, sp, #0
 8016ebe:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8016ec0:	2109      	movs	r1, #9
 8016ec2:	205a      	movs	r0, #90	@ 0x5a
 8016ec4:	f7ff ffaa 	bl	8016e1c <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8016ec8:	2109      	movs	r1, #9
 8016eca:	2058      	movs	r0, #88	@ 0x58
 8016ecc:	f7ff ffa6 	bl	8016e1c <__NVIC_SetPriority>
}
 8016ed0:	bf00      	nop
 8016ed2:	3708      	adds	r7, #8
 8016ed4:	46bd      	mov	sp, r7
 8016ed6:	bd80      	pop	{r7, pc}

08016ed8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8016ed8:	b580      	push	{r7, lr}
 8016eda:	b082      	sub	sp, #8
 8016edc:	af00      	add	r7, sp, #0
 8016ede:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8016ee0:	205a      	movs	r0, #90	@ 0x5a
 8016ee2:	f7ff ff59 	bl	8016d98 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8016ee6:	2058      	movs	r0, #88	@ 0x58
 8016ee8:	f7ff ff56 	bl	8016d98 <__NVIC_EnableIRQ>
}
 8016eec:	bf00      	nop
 8016eee:	3708      	adds	r7, #8
 8016ef0:	46bd      	mov	sp, r7
 8016ef2:	bd80      	pop	{r7, pc}

08016ef4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8016ef4:	b580      	push	{r7, lr}
 8016ef6:	b082      	sub	sp, #8
 8016ef8:	af00      	add	r7, sp, #0
 8016efa:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8016efc:	205a      	movs	r0, #90	@ 0x5a
 8016efe:	f7ff ff69 	bl	8016dd4 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8016f02:	2058      	movs	r0, #88	@ 0x58
 8016f04:	f7ff ff66 	bl	8016dd4 <__NVIC_DisableIRQ>
}
 8016f08:	bf00      	nop
 8016f0a:	3708      	adds	r7, #8
 8016f0c:	46bd      	mov	sp, r7
 8016f0e:	bd80      	pop	{r7, pc}

08016f10 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8016f10:	b480      	push	{r7}
 8016f12:	b083      	sub	sp, #12
 8016f14:	af00      	add	r7, sp, #0
 8016f16:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8016f18:	4b11      	ldr	r3, [pc, #68]	@ (8016f60 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8016f1a:	68db      	ldr	r3, [r3, #12]
 8016f1c:	b29b      	uxth	r3, r3
 8016f1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016f22:	b29b      	uxth	r3, r3
 8016f24:	3b01      	subs	r3, #1
 8016f26:	b29a      	uxth	r2, r3
 8016f28:	4b0e      	ldr	r3, [pc, #56]	@ (8016f64 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8016f2a:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8016f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8016f60 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8016f2e:	691b      	ldr	r3, [r3, #16]
 8016f30:	b29b      	uxth	r3, r3
 8016f32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016f36:	b29b      	uxth	r3, r3
 8016f38:	3b01      	subs	r3, #1
 8016f3a:	b29a      	uxth	r2, r3
 8016f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8016f68 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8016f3e:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8016f40:	4b08      	ldr	r3, [pc, #32]	@ (8016f64 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8016f42:	881a      	ldrh	r2, [r3, #0]
 8016f44:	4b06      	ldr	r3, [pc, #24]	@ (8016f60 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8016f46:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8016f48:	4b05      	ldr	r3, [pc, #20]	@ (8016f60 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8016f4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016f4c:	4a04      	ldr	r2, [pc, #16]	@ (8016f60 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8016f4e:	f043 0301 	orr.w	r3, r3, #1
 8016f52:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8016f54:	bf00      	nop
 8016f56:	370c      	adds	r7, #12
 8016f58:	46bd      	mov	sp, r7
 8016f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f5e:	4770      	bx	lr
 8016f60:	50001000 	.word	0x50001000
 8016f64:	24013b48 	.word	0x24013b48
 8016f68:	24013b4a 	.word	0x24013b4a

08016f6c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8016f6c:	b580      	push	{r7, lr}
 8016f6e:	b082      	sub	sp, #8
 8016f70:	af00      	add	r7, sp, #0
 8016f72:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	4618      	mov	r0, r3
 8016f78:	f000 fcec 	bl	8017954 <_ZN8touchgfx3HAL10beginFrameEv>
 8016f7c:	4603      	mov	r3, r0
}
 8016f7e:	4618      	mov	r0, r3
 8016f80:	3708      	adds	r7, #8
 8016f82:	46bd      	mov	sp, r7
 8016f84:	bd80      	pop	{r7, pc}

08016f86 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8016f86:	b580      	push	{r7, lr}
 8016f88:	b082      	sub	sp, #8
 8016f8a:	af00      	add	r7, sp, #0
 8016f8c:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	4618      	mov	r0, r3
 8016f92:	f000 fceb 	bl	801796c <_ZN8touchgfx3HAL8endFrameEv>
}
 8016f96:	bf00      	nop
 8016f98:	3708      	adds	r7, #8
 8016f9a:	46bd      	mov	sp, r7
 8016f9c:	bd80      	pop	{r7, pc}
	...

08016fa0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8016fa0:	b480      	push	{r7}
 8016fa2:	b083      	sub	sp, #12
 8016fa4:	af00      	add	r7, sp, #0
 8016fa6:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8016fa8:	4b03      	ldr	r3, [pc, #12]	@ (8016fb8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8016faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8016fac:	4618      	mov	r0, r3
 8016fae:	370c      	adds	r7, #12
 8016fb0:	46bd      	mov	sp, r7
 8016fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fb6:	4770      	bx	lr
 8016fb8:	50001084 	.word	0x50001084

08016fbc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8016fbc:	b480      	push	{r7}
 8016fbe:	b083      	sub	sp, #12
 8016fc0:	af00      	add	r7, sp, #0
 8016fc2:	6078      	str	r0, [r7, #4]
 8016fc4:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8016fc6:	4a06      	ldr	r2, [pc, #24]	@ (8016fe0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8016fc8:	683b      	ldr	r3, [r7, #0]
 8016fca:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8016fcc:	4b05      	ldr	r3, [pc, #20]	@ (8016fe4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8016fce:	2201      	movs	r2, #1
 8016fd0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8016fd2:	bf00      	nop
 8016fd4:	370c      	adds	r7, #12
 8016fd6:	46bd      	mov	sp, r7
 8016fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fdc:	4770      	bx	lr
 8016fde:	bf00      	nop
 8016fe0:	50001084 	.word	0x50001084
 8016fe4:	50001000 	.word	0x50001000

08016fe8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8016fe8:	b580      	push	{r7, lr}
 8016fea:	b082      	sub	sp, #8
 8016fec:	af00      	add	r7, sp, #0
 8016fee:	6078      	str	r0, [r7, #4]
 8016ff0:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	6839      	ldr	r1, [r7, #0]
 8016ff6:	4618      	mov	r0, r3
 8016ff8:	f000 fc76 	bl	80178e8 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8016ffc:	bf00      	nop
 8016ffe:	3708      	adds	r7, #8
 8017000:	46bd      	mov	sp, r7
 8017002:	bd80      	pop	{r7, pc}

08017004 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8017004:	b580      	push	{r7, lr}
 8017006:	b084      	sub	sp, #16
 8017008:	af00      	add	r7, sp, #0
 801700a:	60f8      	str	r0, [r7, #12]
 801700c:	60b9      	str	r1, [r7, #8]
 801700e:	607a      	str	r2, [r7, #4]
 8017010:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8017012:	68f8      	ldr	r0, [r7, #12]
 8017014:	683b      	ldr	r3, [r7, #0]
 8017016:	687a      	ldr	r2, [r7, #4]
 8017018:	68b9      	ldr	r1, [r7, #8]
 801701a:	f000 fdd6 	bl	8017bca <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 801701e:	4603      	mov	r3, r0
}
 8017020:	4618      	mov	r0, r3
 8017022:	3710      	adds	r7, #16
 8017024:	46bd      	mov	sp, r7
 8017026:	bd80      	pop	{r7, pc}

08017028 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8017028:	b480      	push	{r7}
 801702a:	b087      	sub	sp, #28
 801702c:	af00      	add	r7, sp, #0
 801702e:	6078      	str	r0, [r7, #4]
    // Because DMA2D access main memory directly, the DCache must be invalidated
    // becuase it could hold a wrong image of the framebuffer. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX
    // in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8017030:	4b25      	ldr	r3, [pc, #148]	@ (80170c8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8017032:	695b      	ldr	r3, [r3, #20]
 8017034:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8017038:	2b00      	cmp	r3, #0
 801703a:	bf14      	ite	ne
 801703c:	2301      	movne	r3, #1
 801703e:	2300      	moveq	r3, #0
 8017040:	b2db      	uxtb	r3, r3
 8017042:	2b00      	cmp	r3, #0
 8017044:	d03a      	beq.n	80170bc <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x94>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8017046:	4b20      	ldr	r3, [pc, #128]	@ (80170c8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8017048:	2200      	movs	r2, #0
 801704a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 801704e:	f3bf 8f4f 	dsb	sy
}
 8017052:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8017054:	4b1c      	ldr	r3, [pc, #112]	@ (80170c8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8017056:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801705a:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 801705c:	697b      	ldr	r3, [r7, #20]
 801705e:	0b5b      	lsrs	r3, r3, #13
 8017060:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8017064:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8017066:	697b      	ldr	r3, [r7, #20]
 8017068:	08db      	lsrs	r3, r3, #3
 801706a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801706e:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8017070:	693b      	ldr	r3, [r7, #16]
 8017072:	015a      	lsls	r2, r3, #5
 8017074:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8017078:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 801707a:	68fa      	ldr	r2, [r7, #12]
 801707c:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 801707e:	4912      	ldr	r1, [pc, #72]	@ (80170c8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8017080:	4313      	orrs	r3, r2
 8017082:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
      } while (ways-- != 0U);
 8017086:	68fb      	ldr	r3, [r7, #12]
 8017088:	1e5a      	subs	r2, r3, #1
 801708a:	60fa      	str	r2, [r7, #12]
 801708c:	2b00      	cmp	r3, #0
 801708e:	bf14      	ite	ne
 8017090:	2301      	movne	r3, #1
 8017092:	2300      	moveq	r3, #0
 8017094:	b2db      	uxtb	r3, r3
 8017096:	2b00      	cmp	r3, #0
 8017098:	d1ea      	bne.n	8017070 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 801709a:	693b      	ldr	r3, [r7, #16]
 801709c:	1e5a      	subs	r2, r3, #1
 801709e:	613a      	str	r2, [r7, #16]
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	bf14      	ite	ne
 80170a4:	2301      	movne	r3, #1
 80170a6:	2300      	moveq	r3, #0
 80170a8:	b2db      	uxtb	r3, r3
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d1db      	bne.n	8017066 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 80170ae:	f3bf 8f4f 	dsb	sy
}
 80170b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80170b4:	f3bf 8f6f 	isb	sy
}
 80170b8:	bf00      	nop
}
 80170ba:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 80170bc:	bf00      	nop
 80170be:	371c      	adds	r7, #28
 80170c0:	46bd      	mov	sp, r7
 80170c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170c6:	4770      	bx	lr
 80170c8:	e000ed00 	.word	0xe000ed00

080170cc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 80170cc:	b480      	push	{r7}
 80170ce:	b087      	sub	sp, #28
 80170d0:	af00      	add	r7, sp, #0
 80170d2:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write-Back cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX in
    // order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80170d4:	4b25      	ldr	r3, [pc, #148]	@ (801716c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 80170d6:	695b      	ldr	r3, [r3, #20]
 80170d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80170dc:	2b00      	cmp	r3, #0
 80170de:	bf14      	ite	ne
 80170e0:	2301      	movne	r3, #1
 80170e2:	2300      	moveq	r3, #0
 80170e4:	b2db      	uxtb	r3, r3
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	d03a      	beq.n	8017160 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x94>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80170ea:	4b20      	ldr	r3, [pc, #128]	@ (801716c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 80170ec:	2200      	movs	r2, #0
 80170ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80170f2:	f3bf 8f4f 	dsb	sy
}
 80170f6:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 80170f8:	4b1c      	ldr	r3, [pc, #112]	@ (801716c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 80170fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80170fe:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8017100:	697b      	ldr	r3, [r7, #20]
 8017102:	0b5b      	lsrs	r3, r3, #13
 8017104:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8017108:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 801710a:	697b      	ldr	r3, [r7, #20]
 801710c:	08db      	lsrs	r3, r3, #3
 801710e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8017112:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8017114:	693b      	ldr	r3, [r7, #16]
 8017116:	015a      	lsls	r2, r3, #5
 8017118:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 801711c:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 801711e:	68fa      	ldr	r2, [r7, #12]
 8017120:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8017122:	4912      	ldr	r1, [pc, #72]	@ (801716c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8017124:	4313      	orrs	r3, r2
 8017126:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
      } while (ways-- != 0U);
 801712a:	68fb      	ldr	r3, [r7, #12]
 801712c:	1e5a      	subs	r2, r3, #1
 801712e:	60fa      	str	r2, [r7, #12]
 8017130:	2b00      	cmp	r3, #0
 8017132:	bf14      	ite	ne
 8017134:	2301      	movne	r3, #1
 8017136:	2300      	moveq	r3, #0
 8017138:	b2db      	uxtb	r3, r3
 801713a:	2b00      	cmp	r3, #0
 801713c:	d1ea      	bne.n	8017114 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 801713e:	693b      	ldr	r3, [r7, #16]
 8017140:	1e5a      	subs	r2, r3, #1
 8017142:	613a      	str	r2, [r7, #16]
 8017144:	2b00      	cmp	r3, #0
 8017146:	bf14      	ite	ne
 8017148:	2301      	movne	r3, #1
 801714a:	2300      	moveq	r3, #0
 801714c:	b2db      	uxtb	r3, r3
 801714e:	2b00      	cmp	r3, #0
 8017150:	d1db      	bne.n	801710a <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8017152:	f3bf 8f4f 	dsb	sy
}
 8017156:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8017158:	f3bf 8f6f 	isb	sy
}
 801715c:	bf00      	nop
}
 801715e:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8017160:	bf00      	nop
 8017162:	371c      	adds	r7, #28
 8017164:	46bd      	mov	sp, r7
 8017166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801716a:	4770      	bx	lr
 801716c:	e000ed00 	.word	0xe000ed00

08017170 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8017170:	b580      	push	{r7, lr}
 8017172:	b082      	sub	sp, #8
 8017174:	af00      	add	r7, sp, #0
 8017176:	6078      	str	r0, [r7, #4]
        if (!HAL::getInstance())
 8017178:	f7fb f9d8 	bl	801252c <_ZN8touchgfx3HAL11getInstanceEv>
 801717c:	4603      	mov	r3, r0
 801717e:	2b00      	cmp	r3, #0
 8017180:	bf0c      	ite	eq
 8017182:	2301      	moveq	r3, #1
 8017184:	2300      	movne	r3, #0
 8017186:	b2db      	uxtb	r3, r3
 8017188:	2b00      	cmp	r3, #0
 801718a:	d132      	bne.n	80171f2 <HAL_LTDC_LineEventCallback+0x82>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 801718c:	4b1b      	ldr	r3, [pc, #108]	@ (80171fc <HAL_LTDC_LineEventCallback+0x8c>)
 801718e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017190:	4a1b      	ldr	r2, [pc, #108]	@ (8017200 <HAL_LTDC_LineEventCallback+0x90>)
 8017192:	8812      	ldrh	r2, [r2, #0]
 8017194:	4293      	cmp	r3, r2
 8017196:	bf0c      	ite	eq
 8017198:	2301      	moveq	r3, #1
 801719a:	2300      	movne	r3, #0
 801719c:	b2db      	uxtb	r3, r3
 801719e:	2b00      	cmp	r3, #0
 80171a0:	d017      	beq.n	80171d2 <HAL_LTDC_LineEventCallback+0x62>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80171a2:	4b18      	ldr	r3, [pc, #96]	@ (8017204 <HAL_LTDC_LineEventCallback+0x94>)
 80171a4:	881b      	ldrh	r3, [r3, #0]
 80171a6:	4619      	mov	r1, r3
 80171a8:	6878      	ldr	r0, [r7, #4]
 80171aa:	f7ef ff9b 	bl	80070e4 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 80171ae:	f7fb f9bd 	bl	801252c <_ZN8touchgfx3HAL11getInstanceEv>
 80171b2:	4603      	mov	r3, r0
 80171b4:	4618      	mov	r0, r3
 80171b6:	f7ff fa89 	bl	80166cc <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 80171ba:	f7fd ff89 	bl	80150d0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 80171be:	f7fb f9b5 	bl	801252c <_ZN8touchgfx3HAL11getInstanceEv>
 80171c2:	4603      	mov	r3, r0
 80171c4:	4618      	mov	r0, r3
 80171c6:	f001 f92b 	bl	8018420 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 80171ca:	2000      	movs	r0, #0
 80171cc:	f7fd fc7e 	bl	8014acc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80171d0:	e010      	b.n	80171f4 <HAL_LTDC_LineEventCallback+0x84>
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 80171d2:	4b0b      	ldr	r3, [pc, #44]	@ (8017200 <HAL_LTDC_LineEventCallback+0x90>)
 80171d4:	881b      	ldrh	r3, [r3, #0]
 80171d6:	4619      	mov	r1, r3
 80171d8:	6878      	ldr	r0, [r7, #4]
 80171da:	f7ef ff83 	bl	80070e4 <HAL_LTDC_ProgramLineEvent>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
 80171de:	f7fb f9a5 	bl	801252c <_ZN8touchgfx3HAL11getInstanceEv>
 80171e2:	4603      	mov	r3, r0
 80171e4:	4618      	mov	r0, r3
 80171e6:	f7ff fa63 	bl	80166b0 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
            GPIO::clear(GPIO::VSYNC_FREQ);
 80171ea:	2000      	movs	r0, #0
 80171ec:	f7fd fc8a 	bl	8014b04 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80171f0:	e000      	b.n	80171f4 <HAL_LTDC_LineEventCallback+0x84>
            return;
 80171f2:	bf00      	nop
        }
    }
 80171f4:	3708      	adds	r7, #8
 80171f6:	46bd      	mov	sp, r7
 80171f8:	bd80      	pop	{r7, pc}
 80171fa:	bf00      	nop
 80171fc:	50001000 	.word	0x50001000
 8017200:	24013b48 	.word	0x24013b48
 8017204:	24013b4a 	.word	0x24013b4a

08017208 <_ZN8touchgfx23CWRVectorRendererRGB888D1Ev>:
 8017208:	b580      	push	{r7, lr}
 801720a:	b082      	sub	sp, #8
 801720c:	af00      	add	r7, sp, #0
 801720e:	6078      	str	r0, [r7, #4]
 8017210:	4a0a      	ldr	r2, [pc, #40]	@ (801723c <_ZN8touchgfx23CWRVectorRendererRGB888D1Ev+0x34>)
 8017212:	687b      	ldr	r3, [r7, #4]
 8017214:	601a      	str	r2, [r3, #0]
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	3398      	adds	r3, #152	@ 0x98
 801721a:	4618      	mov	r0, r3
 801721c:	f000 f876 	bl	801730c <_ZN8touchgfx27PainterRGB888LinearGradientD1Ev>
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	3384      	adds	r3, #132	@ 0x84
 8017224:	4618      	mov	r0, r3
 8017226:	f000 f83d 	bl	80172a4 <_ZN8touchgfx13PainterRGB888D1Ev>
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	4618      	mov	r0, r3
 801722e:	f7ff fd21 	bl	8016c74 <_ZN8touchgfx17CWRVectorRendererD1Ev>
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	4618      	mov	r0, r3
 8017236:	3708      	adds	r7, #8
 8017238:	46bd      	mov	sp, r7
 801723a:	bd80      	pop	{r7, pc}
 801723c:	0802c6d8 	.word	0x0802c6d8

08017240 <_ZN8touchgfx23CWRVectorRendererRGB888D0Ev>:
 8017240:	b580      	push	{r7, lr}
 8017242:	b082      	sub	sp, #8
 8017244:	af00      	add	r7, sp, #0
 8017246:	6078      	str	r0, [r7, #4]
 8017248:	6878      	ldr	r0, [r7, #4]
 801724a:	f7ff ffdd 	bl	8017208 <_ZN8touchgfx23CWRVectorRendererRGB888D1Ev>
 801724e:	21bc      	movs	r1, #188	@ 0xbc
 8017250:	6878      	ldr	r0, [r7, #4]
 8017252:	f012 fba4 	bl	802999e <_ZdlPvj>
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	4618      	mov	r0, r3
 801725a:	3708      	adds	r7, #8
 801725c:	46bd      	mov	sp, r7
 801725e:	bd80      	pop	{r7, pc}

08017260 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 8017260:	b580      	push	{r7, lr}
 8017262:	b082      	sub	sp, #8
 8017264:	af00      	add	r7, sp, #0
 8017266:	6078      	str	r0, [r7, #4]
 8017268:	4a05      	ldr	r2, [pc, #20]	@ (8017280 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev+0x20>)
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	601a      	str	r2, [r3, #0]
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	4618      	mov	r0, r3
 8017272:	f7ff fc9f 	bl	8016bb4 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	4618      	mov	r0, r3
 801727a:	3708      	adds	r7, #8
 801727c:	46bd      	mov	sp, r7
 801727e:	bd80      	pop	{r7, pc}
 8017280:	0802c724 	.word	0x0802c724

08017284 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD0Ev>:
 8017284:	b580      	push	{r7, lr}
 8017286:	b082      	sub	sp, #8
 8017288:	af00      	add	r7, sp, #0
 801728a:	6078      	str	r0, [r7, #4]
 801728c:	6878      	ldr	r0, [r7, #4]
 801728e:	f7ff ffe7 	bl	8017260 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>
 8017292:	212c      	movs	r1, #44	@ 0x2c
 8017294:	6878      	ldr	r0, [r7, #4]
 8017296:	f012 fb82 	bl	802999e <_ZdlPvj>
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	4618      	mov	r0, r3
 801729e:	3708      	adds	r7, #8
 80172a0:	46bd      	mov	sp, r7
 80172a2:	bd80      	pop	{r7, pc}

080172a4 <_ZN8touchgfx13PainterRGB888D1Ev>:
class PainterRGB888 : public AbstractPainterRGB888, public AbstractPainterColor
 80172a4:	b580      	push	{r7, lr}
 80172a6:	b082      	sub	sp, #8
 80172a8:	af00      	add	r7, sp, #0
 80172aa:	6078      	str	r0, [r7, #4]
 80172ac:	4a09      	ldr	r2, [pc, #36]	@ (80172d4 <_ZN8touchgfx13PainterRGB888D1Ev+0x30>)
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	601a      	str	r2, [r3, #0]
 80172b2:	4a09      	ldr	r2, [pc, #36]	@ (80172d8 <_ZN8touchgfx13PainterRGB888D1Ev+0x34>)
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	609a      	str	r2, [r3, #8]
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	3308      	adds	r3, #8
 80172bc:	4618      	mov	r0, r3
 80172be:	f7ff fa3b 	bl	8016738 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 80172c2:	687b      	ldr	r3, [r7, #4]
 80172c4:	4618      	mov	r0, r3
 80172c6:	f7ff fbb7 	bl	8016a38 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 80172ca:	687b      	ldr	r3, [r7, #4]
 80172cc:	4618      	mov	r0, r3
 80172ce:	3708      	adds	r7, #8
 80172d0:	46bd      	mov	sp, r7
 80172d2:	bd80      	pop	{r7, pc}
 80172d4:	0802cba4 	.word	0x0802cba4
 80172d8:	0802cbc8 	.word	0x0802cbc8

080172dc <_ZThn8_N8touchgfx13PainterRGB888D1Ev>:
 80172dc:	f1a0 0008 	sub.w	r0, r0, #8
 80172e0:	e7e0      	b.n	80172a4 <_ZN8touchgfx13PainterRGB888D1Ev>
 80172e2:	bf00      	nop

080172e4 <_ZN8touchgfx13PainterRGB888D0Ev>:
 80172e4:	b580      	push	{r7, lr}
 80172e6:	b082      	sub	sp, #8
 80172e8:	af00      	add	r7, sp, #0
 80172ea:	6078      	str	r0, [r7, #4]
 80172ec:	6878      	ldr	r0, [r7, #4]
 80172ee:	f7ff ffd9 	bl	80172a4 <_ZN8touchgfx13PainterRGB888D1Ev>
 80172f2:	2114      	movs	r1, #20
 80172f4:	6878      	ldr	r0, [r7, #4]
 80172f6:	f012 fb52 	bl	802999e <_ZdlPvj>
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	4618      	mov	r0, r3
 80172fe:	3708      	adds	r7, #8
 8017300:	46bd      	mov	sp, r7
 8017302:	bd80      	pop	{r7, pc}

08017304 <_ZThn8_N8touchgfx13PainterRGB888D0Ev>:
 8017304:	f1a0 0008 	sub.w	r0, r0, #8
 8017308:	e7ec      	b.n	80172e4 <_ZN8touchgfx13PainterRGB888D0Ev>
	...

0801730c <_ZN8touchgfx27PainterRGB888LinearGradientD1Ev>:
 801730c:	b580      	push	{r7, lr}
 801730e:	b082      	sub	sp, #8
 8017310:	af00      	add	r7, sp, #0
 8017312:	6078      	str	r0, [r7, #4]
 8017314:	4a05      	ldr	r2, [pc, #20]	@ (801732c <_ZN8touchgfx27PainterRGB888LinearGradientD1Ev+0x20>)
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	601a      	str	r2, [r3, #0]
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	4618      	mov	r0, r3
 801731e:	f7ff fac7 	bl	80168b0 <_ZN8touchgfx29AbstractPainterLinearGradientD1Ev>
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	4618      	mov	r0, r3
 8017326:	3708      	adds	r7, #8
 8017328:	46bd      	mov	sp, r7
 801732a:	bd80      	pop	{r7, pc}
 801732c:	0802cbdc 	.word	0x0802cbdc

08017330 <_ZN8touchgfx27PainterRGB888LinearGradientD0Ev>:
 8017330:	b580      	push	{r7, lr}
 8017332:	b082      	sub	sp, #8
 8017334:	af00      	add	r7, sp, #0
 8017336:	6078      	str	r0, [r7, #4]
 8017338:	6878      	ldr	r0, [r7, #4]
 801733a:	f7ff ffe7 	bl	801730c <_ZN8touchgfx27PainterRGB888LinearGradientD1Ev>
 801733e:	2124      	movs	r1, #36	@ 0x24
 8017340:	6878      	ldr	r0, [r7, #4]
 8017342:	f012 fb2c 	bl	802999e <_ZdlPvj>
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	4618      	mov	r0, r3
 801734a:	3708      	adds	r7, #8
 801734c:	46bd      	mov	sp, r7
 801734e:	bd80      	pop	{r7, pc}

08017350 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8017350:	8880      	ldrh	r0, [r0, #4]
 8017352:	4770      	bx	lr

08017354 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8017354:	b570      	push	{r4, r5, r6, lr}
 8017356:	6803      	ldr	r3, [r0, #0]
 8017358:	460c      	mov	r4, r1
 801735a:	2100      	movs	r1, #0
 801735c:	4605      	mov	r5, r0
 801735e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017360:	4798      	blx	r3
 8017362:	4606      	mov	r6, r0
 8017364:	682b      	ldr	r3, [r5, #0]
 8017366:	4628      	mov	r0, r5
 8017368:	1ba4      	subs	r4, r4, r6
 801736a:	6a1b      	ldr	r3, [r3, #32]
 801736c:	b2a4      	uxth	r4, r4
 801736e:	4798      	blx	r3
 8017370:	fbb4 f0f0 	udiv	r0, r4, r0
 8017374:	bd70      	pop	{r4, r5, r6, pc}

08017376 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8017376:	2300      	movs	r3, #0
 8017378:	8083      	strh	r3, [r0, #4]
 801737a:	4770      	bx	lr

0801737c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 801737c:	b510      	push	{r4, lr}
 801737e:	6803      	ldr	r3, [r0, #0]
 8017380:	4604      	mov	r4, r0
 8017382:	8881      	ldrh	r1, [r0, #4]
 8017384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017386:	4798      	blx	r3
 8017388:	88a3      	ldrh	r3, [r4, #4]
 801738a:	3301      	adds	r3, #1
 801738c:	80a3      	strh	r3, [r4, #4]
 801738e:	bd10      	pop	{r4, pc}

08017390 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8017390:	6803      	ldr	r3, [r0, #0]
 8017392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017394:	4718      	bx	r3

08017396 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8017396:	4770      	bx	lr

08017398 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8017398:	4a02      	ldr	r2, [pc, #8]	@ (80173a4 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801739a:	6002      	str	r2, [r0, #0]
 801739c:	2200      	movs	r2, #0
 801739e:	8082      	strh	r2, [r0, #4]
 80173a0:	4770      	bx	lr
 80173a2:	bf00      	nop
 80173a4:	0802c928 	.word	0x0802c928

080173a8 <_ZN8touchgfx9Container13getFirstChildEv>:
 80173a8:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80173aa:	4770      	bx	lr

080173ac <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80173ac:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80173ae:	2000      	movs	r0, #0
 80173b0:	b12b      	cbz	r3, 80173be <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80173b2:	b920      	cbnz	r0, 80173be <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80173b4:	1a5a      	subs	r2, r3, r1
 80173b6:	699b      	ldr	r3, [r3, #24]
 80173b8:	4250      	negs	r0, r2
 80173ba:	4150      	adcs	r0, r2
 80173bc:	e7f8      	b.n	80173b0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80173be:	4770      	bx	lr

080173c0 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80173c0:	2300      	movs	r3, #0
 80173c2:	6148      	str	r0, [r1, #20]
 80173c4:	618b      	str	r3, [r1, #24]
 80173c6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80173c8:	b913      	cbnz	r3, 80173d0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 80173ca:	6281      	str	r1, [r0, #40]	@ 0x28
 80173cc:	4770      	bx	lr
 80173ce:	4613      	mov	r3, r2
 80173d0:	699a      	ldr	r2, [r3, #24]
 80173d2:	2a00      	cmp	r2, #0
 80173d4:	d1fb      	bne.n	80173ce <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 80173d6:	6199      	str	r1, [r3, #24]
 80173d8:	4770      	bx	lr

080173da <_ZN8touchgfx9Container9removeAllEv>:
 80173da:	2200      	movs	r2, #0
 80173dc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80173de:	b123      	cbz	r3, 80173ea <_ZN8touchgfx9Container9removeAllEv+0x10>
 80173e0:	6999      	ldr	r1, [r3, #24]
 80173e2:	6281      	str	r1, [r0, #40]	@ 0x28
 80173e4:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80173e8:	e7f8      	b.n	80173dc <_ZN8touchgfx9Container9removeAllEv+0x2>
 80173ea:	4770      	bx	lr

080173ec <_ZN8touchgfx9Container6unlinkEv>:
 80173ec:	2300      	movs	r3, #0
 80173ee:	6283      	str	r3, [r0, #40]	@ 0x28
 80173f0:	4770      	bx	lr

080173f2 <_ZNK8touchgfx9Container12getSolidRectEv>:
 80173f2:	2200      	movs	r2, #0
 80173f4:	8002      	strh	r2, [r0, #0]
 80173f6:	8042      	strh	r2, [r0, #2]
 80173f8:	8082      	strh	r2, [r0, #4]
 80173fa:	80c2      	strh	r2, [r0, #6]
 80173fc:	4770      	bx	lr

080173fe <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 80173fe:	b570      	push	{r4, r5, r6, lr}
 8017400:	460d      	mov	r5, r1
 8017402:	4616      	mov	r6, r2
 8017404:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8017406:	b13c      	cbz	r4, 8017418 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8017408:	6823      	ldr	r3, [r4, #0]
 801740a:	4620      	mov	r0, r4
 801740c:	4632      	mov	r2, r6
 801740e:	4629      	mov	r1, r5
 8017410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017412:	4798      	blx	r3
 8017414:	69a4      	ldr	r4, [r4, #24]
 8017416:	e7f6      	b.n	8017406 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8017418:	bd70      	pop	{r4, r5, r6, pc}

0801741a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 801741a:	b538      	push	{r3, r4, r5, lr}
 801741c:	460d      	mov	r5, r1
 801741e:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8017420:	b134      	cbz	r4, 8017430 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8017422:	682b      	ldr	r3, [r5, #0]
 8017424:	4621      	mov	r1, r4
 8017426:	4628      	mov	r0, r5
 8017428:	689b      	ldr	r3, [r3, #8]
 801742a:	4798      	blx	r3
 801742c:	69a4      	ldr	r4, [r4, #24]
 801742e:	e7f7      	b.n	8017420 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8017430:	bd38      	pop	{r3, r4, r5, pc}

08017432 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8017432:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8017434:	b19b      	cbz	r3, 801745e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8017436:	428b      	cmp	r3, r1
 8017438:	d109      	bne.n	801744e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 801743a:	699a      	ldr	r2, [r3, #24]
 801743c:	2100      	movs	r1, #0
 801743e:	6159      	str	r1, [r3, #20]
 8017440:	6282      	str	r2, [r0, #40]	@ 0x28
 8017442:	b902      	cbnz	r2, 8017446 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8017444:	4770      	bx	lr
 8017446:	6199      	str	r1, [r3, #24]
 8017448:	4770      	bx	lr
 801744a:	4613      	mov	r3, r2
 801744c:	b13a      	cbz	r2, 801745e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801744e:	699a      	ldr	r2, [r3, #24]
 8017450:	428a      	cmp	r2, r1
 8017452:	d1fa      	bne.n	801744a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8017454:	698a      	ldr	r2, [r1, #24]
 8017456:	619a      	str	r2, [r3, #24]
 8017458:	2300      	movs	r3, #0
 801745a:	e9c1 3305 	strd	r3, r3, [r1, #20]
 801745e:	4770      	bx	lr

08017460 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8017460:	b410      	push	{r4}
 8017462:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8017464:	4604      	mov	r4, r0
 8017466:	b92b      	cbnz	r3, 8017474 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8017468:	6803      	ldr	r3, [r0, #0]
 801746a:	4611      	mov	r1, r2
 801746c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017470:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017472:	4718      	bx	r3
 8017474:	b941      	cbnz	r1, 8017488 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8017476:	6193      	str	r3, [r2, #24]
 8017478:	6282      	str	r2, [r0, #40]	@ 0x28
 801747a:	6154      	str	r4, [r2, #20]
 801747c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017480:	4770      	bx	lr
 8017482:	4603      	mov	r3, r0
 8017484:	2800      	cmp	r0, #0
 8017486:	d0f9      	beq.n	801747c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8017488:	4299      	cmp	r1, r3
 801748a:	6998      	ldr	r0, [r3, #24]
 801748c:	d1f9      	bne.n	8017482 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 801748e:	6190      	str	r0, [r2, #24]
 8017490:	618a      	str	r2, [r1, #24]
 8017492:	e7f2      	b.n	801747a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08017494 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8017494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017498:	461f      	mov	r7, r3
 801749a:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 801749e:	460d      	mov	r5, r1
 80174a0:	4616      	mov	r6, r2
 80174a2:	b103      	cbz	r3, 80174a6 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80174a4:	6038      	str	r0, [r7, #0]
 80174a6:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80174a8:	b314      	cbz	r4, 80174f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80174aa:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80174ae:	b1eb      	cbz	r3, 80174ec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80174b0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80174b4:	428d      	cmp	r5, r1
 80174b6:	db19      	blt.n	80174ec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80174b8:	b289      	uxth	r1, r1
 80174ba:	8923      	ldrh	r3, [r4, #8]
 80174bc:	440b      	add	r3, r1
 80174be:	b21b      	sxth	r3, r3
 80174c0:	429d      	cmp	r5, r3
 80174c2:	da13      	bge.n	80174ec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80174c4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80174c8:	4296      	cmp	r6, r2
 80174ca:	db0f      	blt.n	80174ec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80174cc:	b292      	uxth	r2, r2
 80174ce:	8963      	ldrh	r3, [r4, #10]
 80174d0:	4413      	add	r3, r2
 80174d2:	b21b      	sxth	r3, r3
 80174d4:	429e      	cmp	r6, r3
 80174d6:	da09      	bge.n	80174ec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80174d8:	6823      	ldr	r3, [r4, #0]
 80174da:	1ab2      	subs	r2, r6, r2
 80174dc:	1a69      	subs	r1, r5, r1
 80174de:	4620      	mov	r0, r4
 80174e0:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 80174e4:	b212      	sxth	r2, r2
 80174e6:	463b      	mov	r3, r7
 80174e8:	b209      	sxth	r1, r1
 80174ea:	47c0      	blx	r8
 80174ec:	69a4      	ldr	r4, [r4, #24]
 80174ee:	e7db      	b.n	80174a8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 80174f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080174f4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 80174f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174f8:	4c6d      	ldr	r4, [pc, #436]	@ (80176b0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 80174fa:	b0a1      	sub	sp, #132	@ 0x84
 80174fc:	4606      	mov	r6, r0
 80174fe:	6824      	ldr	r4, [r4, #0]
 8017500:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8017502:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 8017506:	2400      	movs	r4, #0
 8017508:	9303      	str	r3, [sp, #12]
 801750a:	802c      	strh	r4, [r5, #0]
 801750c:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 801750e:	802c      	strh	r4, [r5, #0]
 8017510:	601c      	str	r4, [r3, #0]
 8017512:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8017516:	f7ff ffbd 	bl	8017494 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801751a:	f1b9 0f03 	cmp.w	r9, #3
 801751e:	f340 80c1 	ble.w	80176a4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8017522:	4631      	mov	r1, r6
 8017524:	a80c      	add	r0, sp, #48	@ 0x30
 8017526:	f005 fd45 	bl	801cfb4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801752a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801752e:	9306      	str	r3, [sp, #24]
 8017530:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8017534:	9307      	str	r3, [sp, #28]
 8017536:	9b03      	ldr	r3, [sp, #12]
 8017538:	f8d3 a000 	ldr.w	sl, [r3]
 801753c:	f1ba 0f00 	cmp.w	sl, #0
 8017540:	f000 80b3 	beq.w	80176aa <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8017544:	4651      	mov	r1, sl
 8017546:	a810      	add	r0, sp, #64	@ 0x40
 8017548:	f005 fd34 	bl	801cfb4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801754c:	2002      	movs	r0, #2
 801754e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 8017552:	9b01      	ldr	r3, [sp, #4]
 8017554:	9a06      	ldr	r2, [sp, #24]
 8017556:	fb91 f1f0 	sdiv	r1, r1, r0
 801755a:	189d      	adds	r5, r3, r2
 801755c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 8017560:	9a07      	ldr	r2, [sp, #28]
 8017562:	4419      	add	r1, r3
 8017564:	9b02      	ldr	r3, [sp, #8]
 8017566:	4413      	add	r3, r2
 8017568:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 801756c:	1a6d      	subs	r5, r5, r1
 801756e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 8017572:	fb92 f2f0 	sdiv	r2, r2, r0
 8017576:	440a      	add	r2, r1
 8017578:	1a9b      	subs	r3, r3, r2
 801757a:	435b      	muls	r3, r3
 801757c:	fb05 3505 	mla	r5, r5, r5, r3
 8017580:	4f4c      	ldr	r7, [pc, #304]	@ (80176b4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8017582:	ac10      	add	r4, sp, #64	@ 0x40
 8017584:	f1b9 0f0c 	cmp.w	r9, #12
 8017588:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801758a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801758c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801758e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017590:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8017592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017594:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8017598:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801759c:	f04f 0303 	mov.w	r3, #3
 80175a0:	bfd8      	it	le
 80175a2:	f109 32ff 	addle.w	r2, r9, #4294967295
 80175a6:	f04f 0400 	mov.w	r4, #0
 80175aa:	f8cd 9000 	str.w	r9, [sp]
 80175ae:	bfcc      	ite	gt
 80175b0:	4698      	movgt	r8, r3
 80175b2:	fb92 f8f3 	sdivle	r8, r2, r3
 80175b6:	1c63      	adds	r3, r4, #1
 80175b8:	aa10      	add	r2, sp, #64	@ 0x40
 80175ba:	f004 0401 	and.w	r4, r4, #1
 80175be:	f04f 0b00 	mov.w	fp, #0
 80175c2:	9308      	str	r3, [sp, #32]
 80175c4:	9b00      	ldr	r3, [sp, #0]
 80175c6:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 80175ca:	fb93 f3f8 	sdiv	r3, r3, r8
 80175ce:	3404      	adds	r4, #4
 80175d0:	b29b      	uxth	r3, r3
 80175d2:	9304      	str	r3, [sp, #16]
 80175d4:	9a04      	ldr	r2, [sp, #16]
 80175d6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80175da:	fb13 f302 	smulbb	r3, r3, r2
 80175de:	9a01      	ldr	r2, [sp, #4]
 80175e0:	b29b      	uxth	r3, r3
 80175e2:	1899      	adds	r1, r3, r2
 80175e4:	9305      	str	r3, [sp, #20]
 80175e6:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80175ea:	b209      	sxth	r1, r1
 80175ec:	4299      	cmp	r1, r3
 80175ee:	db4d      	blt.n	801768c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80175f0:	8932      	ldrh	r2, [r6, #8]
 80175f2:	4413      	add	r3, r2
 80175f4:	b21b      	sxth	r3, r3
 80175f6:	4299      	cmp	r1, r3
 80175f8:	da48      	bge.n	801768c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80175fa:	9b04      	ldr	r3, [sp, #16]
 80175fc:	6827      	ldr	r7, [r4, #0]
 80175fe:	fb17 f703 	smulbb	r7, r7, r3
 8017602:	9b02      	ldr	r3, [sp, #8]
 8017604:	b2bf      	uxth	r7, r7
 8017606:	18fa      	adds	r2, r7, r3
 8017608:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801760c:	b212      	sxth	r2, r2
 801760e:	429a      	cmp	r2, r3
 8017610:	db3c      	blt.n	801768c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017612:	8970      	ldrh	r0, [r6, #10]
 8017614:	4403      	add	r3, r0
 8017616:	b21b      	sxth	r3, r3
 8017618:	429a      	cmp	r2, r3
 801761a:	da37      	bge.n	801768c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801761c:	2300      	movs	r3, #0
 801761e:	4630      	mov	r0, r6
 8017620:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017622:	ab0b      	add	r3, sp, #44	@ 0x2c
 8017624:	f7ff ff36 	bl	8017494 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8017628:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801762a:	b37a      	cbz	r2, 801768c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801762c:	4552      	cmp	r2, sl
 801762e:	d02d      	beq.n	801768c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017630:	4611      	mov	r1, r2
 8017632:	a80e      	add	r0, sp, #56	@ 0x38
 8017634:	9209      	str	r2, [sp, #36]	@ 0x24
 8017636:	f005 fcbd 	bl	801cfb4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801763a:	f04f 0e02 	mov.w	lr, #2
 801763e:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 8017642:	9a06      	ldr	r2, [sp, #24]
 8017644:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 8017648:	9b01      	ldr	r3, [sp, #4]
 801764a:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 801764e:	4413      	add	r3, r2
 8017650:	9a07      	ldr	r2, [sp, #28]
 8017652:	fb91 f1fe 	sdiv	r1, r1, lr
 8017656:	fb9c fcfe 	sdiv	ip, ip, lr
 801765a:	4401      	add	r1, r0
 801765c:	1a58      	subs	r0, r3, r1
 801765e:	9b02      	ldr	r3, [sp, #8]
 8017660:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 8017664:	4413      	add	r3, r2
 8017666:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017668:	448c      	add	ip, r1
 801766a:	eba3 030c 	sub.w	r3, r3, ip
 801766e:	435b      	muls	r3, r3
 8017670:	fb00 3300 	mla	r3, r0, r0, r3
 8017674:	42ab      	cmp	r3, r5
 8017676:	d208      	bcs.n	801768a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8017678:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801767a:	461d      	mov	r5, r3
 801767c:	9803      	ldr	r0, [sp, #12]
 801767e:	6001      	str	r1, [r0, #0]
 8017680:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8017682:	9805      	ldr	r0, [sp, #20]
 8017684:	8008      	strh	r0, [r1, #0]
 8017686:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8017688:	800f      	strh	r7, [r1, #0]
 801768a:	4692      	mov	sl, r2
 801768c:	f10b 0b01 	add.w	fp, fp, #1
 8017690:	3408      	adds	r4, #8
 8017692:	f1bb 0f04 	cmp.w	fp, #4
 8017696:	d19d      	bne.n	80175d4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8017698:	9b00      	ldr	r3, [sp, #0]
 801769a:	9c08      	ldr	r4, [sp, #32]
 801769c:	444b      	add	r3, r9
 801769e:	4544      	cmp	r4, r8
 80176a0:	9300      	str	r3, [sp, #0]
 80176a2:	d188      	bne.n	80175b6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 80176a4:	b021      	add	sp, #132	@ 0x84
 80176a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176aa:	f04f 35ff 	mov.w	r5, #4294967295
 80176ae:	e767      	b.n	8017580 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 80176b0:	24013b58 	.word	0x24013b58
 80176b4:	0802be48 	.word	0x0802be48

080176b8 <_ZN8touchgfx4RectaNERKS0_>:
 80176b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80176bc:	f9b1 7000 	ldrsh.w	r7, [r1]
 80176c0:	888c      	ldrh	r4, [r1, #4]
 80176c2:	f9b0 9000 	ldrsh.w	r9, [r0]
 80176c6:	443c      	add	r4, r7
 80176c8:	b2a4      	uxth	r4, r4
 80176ca:	fa0f f884 	sxth.w	r8, r4
 80176ce:	45c1      	cmp	r9, r8
 80176d0:	da2f      	bge.n	8017732 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80176d2:	8882      	ldrh	r2, [r0, #4]
 80176d4:	444a      	add	r2, r9
 80176d6:	b292      	uxth	r2, r2
 80176d8:	fa0f fe82 	sxth.w	lr, r2
 80176dc:	4577      	cmp	r7, lr
 80176de:	da28      	bge.n	8017732 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80176e0:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80176e4:	88cb      	ldrh	r3, [r1, #6]
 80176e6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80176ea:	442b      	add	r3, r5
 80176ec:	b21b      	sxth	r3, r3
 80176ee:	429e      	cmp	r6, r3
 80176f0:	da1f      	bge.n	8017732 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80176f2:	88c3      	ldrh	r3, [r0, #6]
 80176f4:	4433      	add	r3, r6
 80176f6:	b29b      	uxth	r3, r3
 80176f8:	fa0f fc83 	sxth.w	ip, r3
 80176fc:	4565      	cmp	r5, ip
 80176fe:	da18      	bge.n	8017732 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017700:	454f      	cmp	r7, r9
 8017702:	bfb8      	it	lt
 8017704:	464f      	movlt	r7, r9
 8017706:	42b5      	cmp	r5, r6
 8017708:	bfb8      	it	lt
 801770a:	4635      	movlt	r5, r6
 801770c:	45f0      	cmp	r8, lr
 801770e:	bfd8      	it	le
 8017710:	4622      	movle	r2, r4
 8017712:	1bd2      	subs	r2, r2, r7
 8017714:	8082      	strh	r2, [r0, #4]
 8017716:	884a      	ldrh	r2, [r1, #2]
 8017718:	88c9      	ldrh	r1, [r1, #6]
 801771a:	8007      	strh	r7, [r0, #0]
 801771c:	440a      	add	r2, r1
 801771e:	8045      	strh	r5, [r0, #2]
 8017720:	b292      	uxth	r2, r2
 8017722:	b211      	sxth	r1, r2
 8017724:	458c      	cmp	ip, r1
 8017726:	bfa8      	it	ge
 8017728:	4613      	movge	r3, r2
 801772a:	1b5b      	subs	r3, r3, r5
 801772c:	80c3      	strh	r3, [r0, #6]
 801772e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017732:	2300      	movs	r3, #0
 8017734:	8003      	strh	r3, [r0, #0]
 8017736:	8043      	strh	r3, [r0, #2]
 8017738:	8083      	strh	r3, [r0, #4]
 801773a:	80c3      	strh	r3, [r0, #6]
 801773c:	e7f7      	b.n	801772e <_ZN8touchgfx4RectaNERKS0_+0x76>

0801773e <_ZNK8touchgfx4Rect7isEmptyEv>:
 801773e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017742:	2b00      	cmp	r3, #0
 8017744:	dd06      	ble.n	8017754 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8017746:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801774a:	2800      	cmp	r0, #0
 801774c:	bfcc      	ite	gt
 801774e:	2000      	movgt	r0, #0
 8017750:	2001      	movle	r0, #1
 8017752:	4770      	bx	lr
 8017754:	2001      	movs	r0, #1
 8017756:	4770      	bx	lr

08017758 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8017758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801775c:	2300      	movs	r3, #0
 801775e:	4604      	mov	r4, r0
 8017760:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8017762:	8003      	strh	r3, [r0, #0]
 8017764:	8043      	strh	r3, [r0, #2]
 8017766:	8083      	strh	r3, [r0, #4]
 8017768:	80c3      	strh	r3, [r0, #6]
 801776a:	2d00      	cmp	r5, #0
 801776c:	d040      	beq.n	80177f0 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801776e:	1d28      	adds	r0, r5, #4
 8017770:	f7ff ffe5 	bl	801773e <_ZNK8touchgfx4Rect7isEmptyEv>
 8017774:	b988      	cbnz	r0, 801779a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8017776:	4620      	mov	r0, r4
 8017778:	f7ff ffe1 	bl	801773e <_ZNK8touchgfx4Rect7isEmptyEv>
 801777c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8017780:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8017784:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8017788:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 801778c:	b138      	cbz	r0, 801779e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801778e:	8022      	strh	r2, [r4, #0]
 8017790:	8063      	strh	r3, [r4, #2]
 8017792:	f8a4 e004 	strh.w	lr, [r4, #4]
 8017796:	f8a4 c006 	strh.w	ip, [r4, #6]
 801779a:	69ad      	ldr	r5, [r5, #24]
 801779c:	e7e5      	b.n	801776a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801779e:	f9b4 0000 	ldrsh.w	r0, [r4]
 80177a2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80177a6:	4290      	cmp	r0, r2
 80177a8:	4607      	mov	r7, r0
 80177aa:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80177ae:	460e      	mov	r6, r1
 80177b0:	bfa8      	it	ge
 80177b2:	4617      	movge	r7, r2
 80177b4:	4299      	cmp	r1, r3
 80177b6:	4472      	add	r2, lr
 80177b8:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80177bc:	bfa8      	it	ge
 80177be:	461e      	movge	r6, r3
 80177c0:	4440      	add	r0, r8
 80177c2:	4471      	add	r1, lr
 80177c4:	4463      	add	r3, ip
 80177c6:	b200      	sxth	r0, r0
 80177c8:	8027      	strh	r7, [r4, #0]
 80177ca:	b212      	sxth	r2, r2
 80177cc:	8066      	strh	r6, [r4, #2]
 80177ce:	b209      	sxth	r1, r1
 80177d0:	b21b      	sxth	r3, r3
 80177d2:	4290      	cmp	r0, r2
 80177d4:	bfac      	ite	ge
 80177d6:	ebc7 0200 	rsbge	r2, r7, r0
 80177da:	ebc7 0202 	rsblt	r2, r7, r2
 80177de:	4299      	cmp	r1, r3
 80177e0:	bfac      	ite	ge
 80177e2:	ebc6 0301 	rsbge	r3, r6, r1
 80177e6:	ebc6 0303 	rsblt	r3, r6, r3
 80177ea:	80a2      	strh	r2, [r4, #4]
 80177ec:	80e3      	strh	r3, [r4, #6]
 80177ee:	e7d4      	b.n	801779a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80177f0:	4620      	mov	r0, r4
 80177f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080177f6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80177f6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80177fa:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 80177fe:	b383      	cbz	r3, 8017862 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8017800:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8017802:	b374      	cbz	r4, 8017862 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8017804:	f9b1 5000 	ldrsh.w	r5, [r1]
 8017808:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 801780c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8017810:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8017814:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8017818:	b303      	cbz	r3, 801785c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801781a:	4668      	mov	r0, sp
 801781c:	1d21      	adds	r1, r4, #4
 801781e:	f8ad 5000 	strh.w	r5, [sp]
 8017822:	f8ad 6002 	strh.w	r6, [sp, #2]
 8017826:	f8ad 7004 	strh.w	r7, [sp, #4]
 801782a:	f8ad 8006 	strh.w	r8, [sp, #6]
 801782e:	f7ff ff43 	bl	80176b8 <_ZN8touchgfx4RectaNERKS0_>
 8017832:	4668      	mov	r0, sp
 8017834:	f7ff ff83 	bl	801773e <_ZNK8touchgfx4Rect7isEmptyEv>
 8017838:	b980      	cbnz	r0, 801785c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801783a:	f8bd 3000 	ldrh.w	r3, [sp]
 801783e:	4669      	mov	r1, sp
 8017840:	88a2      	ldrh	r2, [r4, #4]
 8017842:	4620      	mov	r0, r4
 8017844:	1a9b      	subs	r3, r3, r2
 8017846:	88e2      	ldrh	r2, [r4, #6]
 8017848:	f8ad 3000 	strh.w	r3, [sp]
 801784c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017850:	1a9b      	subs	r3, r3, r2
 8017852:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017856:	6823      	ldr	r3, [r4, #0]
 8017858:	689b      	ldr	r3, [r3, #8]
 801785a:	4798      	blx	r3
 801785c:	69a4      	ldr	r4, [r4, #24]
 801785e:	2c00      	cmp	r4, #0
 8017860:	d1d8      	bne.n	8017814 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8017862:	b002      	add	sp, #8
 8017864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017868 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8017868:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801786a:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 801786e:	460d      	mov	r5, r1
 8017870:	4616      	mov	r6, r2
 8017872:	b323      	cbz	r3, 80178be <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8017874:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8017876:	b314      	cbz	r4, 80178be <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8017878:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 801787c:	b1eb      	cbz	r3, 80178ba <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801787e:	6828      	ldr	r0, [r5, #0]
 8017880:	466b      	mov	r3, sp
 8017882:	6869      	ldr	r1, [r5, #4]
 8017884:	c303      	stmia	r3!, {r0, r1}
 8017886:	4668      	mov	r0, sp
 8017888:	1d21      	adds	r1, r4, #4
 801788a:	f7ff ff15 	bl	80176b8 <_ZN8touchgfx4RectaNERKS0_>
 801788e:	4668      	mov	r0, sp
 8017890:	f7ff ff55 	bl	801773e <_ZNK8touchgfx4Rect7isEmptyEv>
 8017894:	b988      	cbnz	r0, 80178ba <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8017896:	f8bd 3000 	ldrh.w	r3, [sp]
 801789a:	4669      	mov	r1, sp
 801789c:	88a2      	ldrh	r2, [r4, #4]
 801789e:	4620      	mov	r0, r4
 80178a0:	1a9b      	subs	r3, r3, r2
 80178a2:	88e2      	ldrh	r2, [r4, #6]
 80178a4:	f8ad 3000 	strh.w	r3, [sp]
 80178a8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80178ac:	1a9b      	subs	r3, r3, r2
 80178ae:	4632      	mov	r2, r6
 80178b0:	f8ad 3002 	strh.w	r3, [sp, #2]
 80178b4:	6823      	ldr	r3, [r4, #0]
 80178b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80178b8:	4798      	blx	r3
 80178ba:	69a4      	ldr	r4, [r4, #24]
 80178bc:	e7db      	b.n	8017876 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80178be:	b002      	add	sp, #8
 80178c0:	bd70      	pop	{r4, r5, r6, pc}

080178c2 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 80178c2:	4770      	bx	lr

080178c4 <_ZN8touchgfx3HAL10FlushCacheEv>:
 80178c4:	4770      	bx	lr

080178c6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80178c6:	6803      	ldr	r3, [r0, #0]
 80178c8:	b513      	push	{r0, r1, r4, lr}
 80178ca:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 80178ce:	2300      	movs	r3, #0
 80178d0:	e9cd 3300 	strd	r3, r3, [sp]
 80178d4:	466b      	mov	r3, sp
 80178d6:	47a0      	blx	r4
 80178d8:	b002      	add	sp, #8
 80178da:	bd10      	pop	{r4, pc}

080178dc <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80178dc:	2301      	movs	r3, #1
 80178de:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 80178e2:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 80178e6:	4770      	bx	lr

080178e8 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80178e8:	2301      	movs	r3, #1
 80178ea:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 80178ee:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 80178f2:	4770      	bx	lr

080178f4 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80178f4:	6843      	ldr	r3, [r0, #4]
 80178f6:	2201      	movs	r2, #1
 80178f8:	725a      	strb	r2, [r3, #9]
 80178fa:	6840      	ldr	r0, [r0, #4]
 80178fc:	6803      	ldr	r3, [r0, #0]
 80178fe:	691b      	ldr	r3, [r3, #16]
 8017900:	4718      	bx	r3

08017902 <_ZN8touchgfx3HAL8flushDMAEv>:
 8017902:	6840      	ldr	r0, [r0, #4]
 8017904:	6803      	ldr	r3, [r0, #0]
 8017906:	689b      	ldr	r3, [r3, #8]
 8017908:	4718      	bx	r3

0801790a <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 801790a:	b530      	push	{r4, r5, lr}
 801790c:	b08b      	sub	sp, #44	@ 0x2c
 801790e:	6804      	ldr	r4, [r0, #0]
 8017910:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8017914:	9509      	str	r5, [sp, #36]	@ 0x24
 8017916:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 801791a:	9508      	str	r5, [sp, #32]
 801791c:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8017920:	9507      	str	r5, [sp, #28]
 8017922:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 8017926:	9506      	str	r5, [sp, #24]
 8017928:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 801792c:	9505      	str	r5, [sp, #20]
 801792e:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8017932:	9504      	str	r5, [sp, #16]
 8017934:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 8017938:	9503      	str	r5, [sp, #12]
 801793a:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 801793e:	9502      	str	r5, [sp, #8]
 8017940:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8017944:	e9cd 3500 	strd	r3, r5, [sp]
 8017948:	4613      	mov	r3, r2
 801794a:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 801794c:	2200      	movs	r2, #0
 801794e:	47a0      	blx	r4
 8017950:	b00b      	add	sp, #44	@ 0x2c
 8017952:	bd30      	pop	{r4, r5, pc}

08017954 <_ZN8touchgfx3HAL10beginFrameEv>:
 8017954:	4b04      	ldr	r3, [pc, #16]	@ (8017968 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8017956:	781b      	ldrb	r3, [r3, #0]
 8017958:	b123      	cbz	r3, 8017964 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801795a:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 801795e:	f080 0001 	eor.w	r0, r0, #1
 8017962:	4770      	bx	lr
 8017964:	2001      	movs	r0, #1
 8017966:	4770      	bx	lr
 8017968:	24013b56 	.word	0x24013b56

0801796c <_ZN8touchgfx3HAL8endFrameEv>:
 801796c:	b510      	push	{r4, lr}
 801796e:	4604      	mov	r4, r0
 8017970:	6840      	ldr	r0, [r0, #4]
 8017972:	6803      	ldr	r3, [r0, #0]
 8017974:	689b      	ldr	r3, [r3, #8]
 8017976:	4798      	blx	r3
 8017978:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 801797c:	b113      	cbz	r3, 8017984 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801797e:	2301      	movs	r3, #1
 8017980:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8017984:	bd10      	pop	{r4, pc}

08017986 <_ZN8touchgfx3HAL10initializeEv>:
 8017986:	b510      	push	{r4, lr}
 8017988:	4604      	mov	r4, r0
 801798a:	f7fd fb3b 	bl	8015004 <_ZN8touchgfx10OSWrappers10initializeEv>
 801798e:	f7fd f895 	bl	8014abc <_ZN8touchgfx4GPIO4initEv>
 8017992:	6860      	ldr	r0, [r4, #4]
 8017994:	6803      	ldr	r3, [r0, #0]
 8017996:	68db      	ldr	r3, [r3, #12]
 8017998:	4798      	blx	r3
 801799a:	68e0      	ldr	r0, [r4, #12]
 801799c:	6803      	ldr	r3, [r0, #0]
 801799e:	689b      	ldr	r3, [r3, #8]
 80179a0:	4798      	blx	r3
 80179a2:	6823      	ldr	r3, [r4, #0]
 80179a4:	4620      	mov	r0, r4
 80179a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80179a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80179ac:	4718      	bx	r3

080179ae <_ZN8touchgfx3HAL9taskEntryEv>:
 80179ae:	b508      	push	{r3, lr}
 80179b0:	6803      	ldr	r3, [r0, #0]
 80179b2:	4604      	mov	r4, r0
 80179b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80179b8:	4798      	blx	r3
 80179ba:	6823      	ldr	r3, [r4, #0]
 80179bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80179be:	4620      	mov	r0, r4
 80179c0:	4798      	blx	r3
 80179c2:	f7fd fb95 	bl	80150f0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80179c6:	6823      	ldr	r3, [r4, #0]
 80179c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80179ca:	e7f8      	b.n	80179be <_ZN8touchgfx3HAL9taskEntryEv+0x10>

080179cc <_ZN8touchgfx3HAL4tickEv>:
 80179cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80179ce:	6803      	ldr	r3, [r0, #0]
 80179d0:	4604      	mov	r4, r0
 80179d2:	4d5b      	ldr	r5, [pc, #364]	@ (8017b40 <_ZN8touchgfx3HAL4tickEv+0x174>)
 80179d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80179d8:	4798      	blx	r3
 80179da:	2800      	cmp	r0, #0
 80179dc:	f000 8095 	beq.w	8017b0a <_ZN8touchgfx3HAL4tickEv+0x13e>
 80179e0:	2001      	movs	r0, #1
 80179e2:	2600      	movs	r6, #0
 80179e4:	f7fd f872 	bl	8014acc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80179e8:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 80179ec:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 80179f0:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 80179f4:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 80179f8:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 80179fc:	b133      	cbz	r3, 8017a0c <_ZN8touchgfx3HAL4tickEv+0x40>
 80179fe:	6823      	ldr	r3, [r4, #0]
 8017a00:	4620      	mov	r0, r4
 8017a02:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8017a06:	4798      	blx	r3
 8017a08:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8017a0c:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8017a10:	2601      	movs	r6, #1
 8017a12:	6862      	ldr	r2, [r4, #4]
 8017a14:	f083 0301 	eor.w	r3, r3, #1
 8017a18:	702e      	strb	r6, [r5, #0]
 8017a1a:	7253      	strb	r3, [r2, #9]
 8017a1c:	f004 f9b6 	bl	801bd8c <_ZN8touchgfx11Application11getInstanceEv>
 8017a20:	6803      	ldr	r3, [r0, #0]
 8017a22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017a24:	4798      	blx	r3
 8017a26:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8017a2a:	b90b      	cbnz	r3, 8017a30 <_ZN8touchgfx3HAL4tickEv+0x64>
 8017a2c:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 8017a30:	f004 f9ac 	bl	801bd8c <_ZN8touchgfx11Application11getInstanceEv>
 8017a34:	6803      	ldr	r3, [r0, #0]
 8017a36:	695b      	ldr	r3, [r3, #20]
 8017a38:	4798      	blx	r3
 8017a3a:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8017a3c:	6803      	ldr	r3, [r0, #0]
 8017a3e:	691b      	ldr	r3, [r3, #16]
 8017a40:	4798      	blx	r3
 8017a42:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8017a46:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 8017a4a:	3b01      	subs	r3, #1
 8017a4c:	b2db      	uxtb	r3, r3
 8017a4e:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8017a52:	b10a      	cbz	r2, 8017a58 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8017a54:	2b00      	cmp	r3, #0
 8017a56:	d1eb      	bne.n	8017a30 <_ZN8touchgfx3HAL4tickEv+0x64>
 8017a58:	4a3a      	ldr	r2, [pc, #232]	@ (8017b44 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8017a5a:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 8017a5e:	7813      	ldrb	r3, [r2, #0]
 8017a60:	3301      	adds	r3, #1
 8017a62:	b25b      	sxtb	r3, r3
 8017a64:	4299      	cmp	r1, r3
 8017a66:	7013      	strb	r3, [r2, #0]
 8017a68:	dc10      	bgt.n	8017a8c <_ZN8touchgfx3HAL4tickEv+0xc0>
 8017a6a:	2300      	movs	r3, #0
 8017a6c:	68e0      	ldr	r0, [r4, #12]
 8017a6e:	a902      	add	r1, sp, #8
 8017a70:	7013      	strb	r3, [r2, #0]
 8017a72:	aa03      	add	r2, sp, #12
 8017a74:	6803      	ldr	r3, [r0, #0]
 8017a76:	68db      	ldr	r3, [r3, #12]
 8017a78:	4798      	blx	r3
 8017a7a:	6823      	ldr	r3, [r4, #0]
 8017a7c:	2800      	cmp	r0, #0
 8017a7e:	d050      	beq.n	8017b22 <_ZN8touchgfx3HAL4tickEv+0x156>
 8017a80:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8017a84:	4620      	mov	r0, r4
 8017a86:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8017a8a:	4798      	blx	r3
 8017a8c:	2300      	movs	r3, #0
 8017a8e:	6960      	ldr	r0, [r4, #20]
 8017a90:	f88d 3007 	strb.w	r3, [sp, #7]
 8017a94:	b158      	cbz	r0, 8017aae <_ZN8touchgfx3HAL4tickEv+0xe2>
 8017a96:	6803      	ldr	r3, [r0, #0]
 8017a98:	f10d 0107 	add.w	r1, sp, #7
 8017a9c:	68db      	ldr	r3, [r3, #12]
 8017a9e:	4798      	blx	r3
 8017aa0:	b128      	cbz	r0, 8017aae <_ZN8touchgfx3HAL4tickEv+0xe2>
 8017aa2:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8017aa4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8017aa8:	6803      	ldr	r3, [r0, #0]
 8017aaa:	68db      	ldr	r3, [r3, #12]
 8017aac:	4798      	blx	r3
 8017aae:	f104 001c 	add.w	r0, r4, #28
 8017ab2:	f011 f977 	bl	8028da4 <_ZN8touchgfx8Gestures4tickEv>
 8017ab6:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8017aba:	b30b      	cbz	r3, 8017b00 <_ZN8touchgfx3HAL4tickEv+0x134>
 8017abc:	6920      	ldr	r0, [r4, #16]
 8017abe:	6803      	ldr	r3, [r0, #0]
 8017ac0:	691b      	ldr	r3, [r3, #16]
 8017ac2:	4798      	blx	r3
 8017ac4:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8017ac6:	4606      	mov	r6, r0
 8017ac8:	b903      	cbnz	r3, 8017acc <_ZN8touchgfx3HAL4tickEv+0x100>
 8017aca:	6760      	str	r0, [r4, #116]	@ 0x74
 8017acc:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8017ace:	4a1e      	ldr	r2, [pc, #120]	@ (8017b48 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8017ad0:	1af3      	subs	r3, r6, r3
 8017ad2:	4293      	cmp	r3, r2
 8017ad4:	d914      	bls.n	8017b00 <_ZN8touchgfx3HAL4tickEv+0x134>
 8017ad6:	6920      	ldr	r0, [r4, #16]
 8017ad8:	6803      	ldr	r3, [r0, #0]
 8017ada:	699b      	ldr	r3, [r3, #24]
 8017adc:	4798      	blx	r3
 8017ade:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8017ae0:	2264      	movs	r2, #100	@ 0x64
 8017ae2:	1af3      	subs	r3, r6, r3
 8017ae4:	fbb3 f3f2 	udiv	r3, r3, r2
 8017ae8:	fbb0 f0f3 	udiv	r0, r0, r3
 8017aec:	2800      	cmp	r0, #0
 8017aee:	dc1d      	bgt.n	8017b2c <_ZN8touchgfx3HAL4tickEv+0x160>
 8017af0:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 8017af4:	6920      	ldr	r0, [r4, #16]
 8017af6:	2100      	movs	r1, #0
 8017af8:	6803      	ldr	r3, [r0, #0]
 8017afa:	69db      	ldr	r3, [r3, #28]
 8017afc:	4798      	blx	r3
 8017afe:	6766      	str	r6, [r4, #116]	@ 0x74
 8017b00:	f004 f944 	bl	801bd8c <_ZN8touchgfx11Application11getInstanceEv>
 8017b04:	6803      	ldr	r3, [r0, #0]
 8017b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017b08:	4798      	blx	r3
 8017b0a:	6823      	ldr	r3, [r4, #0]
 8017b0c:	4620      	mov	r0, r4
 8017b0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8017b12:	4798      	blx	r3
 8017b14:	2001      	movs	r0, #1
 8017b16:	f7fc fff5 	bl	8014b04 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8017b1a:	2300      	movs	r3, #0
 8017b1c:	702b      	strb	r3, [r5, #0]
 8017b1e:	b004      	add	sp, #16
 8017b20:	bd70      	pop	{r4, r5, r6, pc}
 8017b22:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8017b26:	4620      	mov	r0, r4
 8017b28:	4798      	blx	r3
 8017b2a:	e7af      	b.n	8017a8c <_ZN8touchgfx3HAL4tickEv+0xc0>
 8017b2c:	2863      	cmp	r0, #99	@ 0x63
 8017b2e:	bfcb      	itete	gt
 8017b30:	2300      	movgt	r3, #0
 8017b32:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 8017b36:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 8017b3a:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 8017b3e:	e7d9      	b.n	8017af4 <_ZN8touchgfx3HAL4tickEv+0x128>
 8017b40:	24013b5c 	.word	0x24013b5c
 8017b44:	24013b5d 	.word	0x24013b5d
 8017b48:	05f5e100 	.word	0x05f5e100

08017b4c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8017b4c:	b510      	push	{r4, lr}
 8017b4e:	4604      	mov	r4, r0
 8017b50:	f7fd fa9a 	bl	8015088 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8017b54:	2200      	movs	r2, #0
 8017b56:	6863      	ldr	r3, [r4, #4]
 8017b58:	729a      	strb	r2, [r3, #10]
 8017b5a:	bd10      	pop	{r4, pc}

08017b5c <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8017b5c:	65c1      	str	r1, [r0, #92]	@ 0x5c
 8017b5e:	301c      	adds	r0, #28
 8017b60:	f011 b91e 	b.w	8028da0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08017b64 <_ZN8touchgfx3HAL5touchEll>:
 8017b64:	b530      	push	{r4, r5, lr}
 8017b66:	b087      	sub	sp, #28
 8017b68:	4604      	mov	r4, r0
 8017b6a:	a804      	add	r0, sp, #16
 8017b6c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8017b70:	f003 fefe 	bl	801b970 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8017b74:	9b04      	ldr	r3, [sp, #16]
 8017b76:	a906      	add	r1, sp, #24
 8017b78:	a803      	add	r0, sp, #12
 8017b7a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017b7e:	9b05      	ldr	r3, [sp, #20]
 8017b80:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8017b84:	f003 ff46 	bl	801ba14 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8017b88:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 8017b8c:	f104 001c 	add.w	r0, r4, #28
 8017b90:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8017b94:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8017b98:	b189      	cbz	r1, 8017bbe <_ZN8touchgfx3HAL5touchEll+0x5a>
 8017b9a:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 8017b9e:	9300      	str	r3, [sp, #0]
 8017ba0:	4613      	mov	r3, r2
 8017ba2:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 8017ba6:	462a      	mov	r2, r5
 8017ba8:	f011 f90a 	bl	8028dc0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8017bac:	b128      	cbz	r0, 8017bba <_ZN8touchgfx3HAL5touchEll+0x56>
 8017bae:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8017bb2:	6623      	str	r3, [r4, #96]	@ 0x60
 8017bb4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8017bb8:	6663      	str	r3, [r4, #100]	@ 0x64
 8017bba:	b007      	add	sp, #28
 8017bbc:	bd30      	pop	{r4, r5, pc}
 8017bbe:	f011 f93f 	bl	8028e40 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8017bc2:	2301      	movs	r3, #1
 8017bc4:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8017bc8:	e7f1      	b.n	8017bae <_ZN8touchgfx3HAL5touchEll+0x4a>

08017bca <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8017bca:	b510      	push	{r4, lr}
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	d046      	beq.n	8017c5e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8017bd0:	ea81 0002 	eor.w	r0, r1, r2
 8017bd4:	07c4      	lsls	r4, r0, #31
 8017bd6:	d508      	bpl.n	8017bea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8017bd8:	440b      	add	r3, r1
 8017bda:	3a01      	subs	r2, #1
 8017bdc:	428b      	cmp	r3, r1
 8017bde:	d93e      	bls.n	8017c5e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8017be0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8017be4:	f801 0b01 	strb.w	r0, [r1], #1
 8017be8:	e7f8      	b.n	8017bdc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8017bea:	07d0      	lsls	r0, r2, #31
 8017bec:	bf42      	ittt	mi
 8017bee:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8017bf2:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8017bf6:	f801 0b01 	strbmi.w	r0, [r1], #1
 8017bfa:	2b01      	cmp	r3, #1
 8017bfc:	d911      	bls.n	8017c22 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8017bfe:	ea81 0402 	eor.w	r4, r1, r2
 8017c02:	4610      	mov	r0, r2
 8017c04:	07a4      	lsls	r4, r4, #30
 8017c06:	d022      	beq.n	8017c4e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8017c08:	f023 0401 	bic.w	r4, r3, #1
 8017c0c:	440c      	add	r4, r1
 8017c0e:	428c      	cmp	r4, r1
 8017c10:	4602      	mov	r2, r0
 8017c12:	d904      	bls.n	8017c1e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8017c14:	8812      	ldrh	r2, [r2, #0]
 8017c16:	3002      	adds	r0, #2
 8017c18:	f821 2b02 	strh.w	r2, [r1], #2
 8017c1c:	e7f7      	b.n	8017c0e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8017c1e:	f003 0301 	and.w	r3, r3, #1
 8017c22:	f023 0003 	bic.w	r0, r3, #3
 8017c26:	4408      	add	r0, r1
 8017c28:	4288      	cmp	r0, r1
 8017c2a:	4614      	mov	r4, r2
 8017c2c:	d904      	bls.n	8017c38 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8017c2e:	6824      	ldr	r4, [r4, #0]
 8017c30:	3204      	adds	r2, #4
 8017c32:	f841 4b04 	str.w	r4, [r1], #4
 8017c36:	e7f7      	b.n	8017c28 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8017c38:	f003 0303 	and.w	r3, r3, #3
 8017c3c:	3a01      	subs	r2, #1
 8017c3e:	440b      	add	r3, r1
 8017c40:	428b      	cmp	r3, r1
 8017c42:	d90c      	bls.n	8017c5e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8017c44:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8017c48:	f801 0b01 	strb.w	r0, [r1], #1
 8017c4c:	e7f8      	b.n	8017c40 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8017c4e:	0790      	lsls	r0, r2, #30
 8017c50:	d0e7      	beq.n	8017c22 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8017c52:	f832 0b02 	ldrh.w	r0, [r2], #2
 8017c56:	3b02      	subs	r3, #2
 8017c58:	f821 0b02 	strh.w	r0, [r1], #2
 8017c5c:	e7e1      	b.n	8017c22 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8017c5e:	2001      	movs	r0, #1
 8017c60:	bd10      	pop	{r4, pc}

08017c62 <_ZN8touchgfx3HAL7noTouchEv>:
 8017c62:	b510      	push	{r4, lr}
 8017c64:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 8017c68:	4604      	mov	r4, r0
 8017c6a:	b153      	cbz	r3, 8017c82 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8017c6c:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 8017c70:	2101      	movs	r1, #1
 8017c72:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 8017c76:	301c      	adds	r0, #28
 8017c78:	f011 f8e2 	bl	8028e40 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8017c7c:	2300      	movs	r3, #0
 8017c7e:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8017c82:	bd10      	pop	{r4, pc}

08017c84 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8017c84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017c88:	b085      	sub	sp, #20
 8017c8a:	4604      	mov	r4, r0
 8017c8c:	2000      	movs	r0, #0
 8017c8e:	4699      	mov	r9, r3
 8017c90:	ad04      	add	r5, sp, #16
 8017c92:	460f      	mov	r7, r1
 8017c94:	4690      	mov	r8, r2
 8017c96:	f845 0d04 	str.w	r0, [r5, #-4]!
 8017c9a:	69a0      	ldr	r0, [r4, #24]
 8017c9c:	6806      	ldr	r6, [r0, #0]
 8017c9e:	9501      	str	r5, [sp, #4]
 8017ca0:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8017ca4:	9500      	str	r5, [sp, #0]
 8017ca6:	6835      	ldr	r5, [r6, #0]
 8017ca8:	47a8      	blx	r5
 8017caa:	4d10      	ldr	r5, [pc, #64]	@ (8017cec <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8017cac:	4606      	mov	r6, r0
 8017cae:	f8a5 9000 	strh.w	r9, [r5]
 8017cb2:	f7fa fc47 	bl	8012544 <_ZN8touchgfx3HAL3lcdEv>
 8017cb6:	6803      	ldr	r3, [r0, #0]
 8017cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017cba:	4798      	blx	r3
 8017cbc:	b128      	cbz	r0, 8017cca <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8017cbe:	2801      	cmp	r0, #1
 8017cc0:	d00b      	beq.n	8017cda <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8017cc2:	4630      	mov	r0, r6
 8017cc4:	b005      	add	sp, #20
 8017cc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017cca:	882b      	ldrh	r3, [r5, #0]
 8017ccc:	fb08 7203 	mla	r2, r8, r3, r7
 8017cd0:	9b03      	ldr	r3, [sp, #12]
 8017cd2:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8017cd6:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8017cd8:	e7f3      	b.n	8017cc2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8017cda:	882a      	ldrh	r2, [r5, #0]
 8017cdc:	9b03      	ldr	r3, [sp, #12]
 8017cde:	fb08 7202 	mla	r2, r8, r2, r7
 8017ce2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017ce6:	1a9a      	subs	r2, r3, r2
 8017ce8:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8017cea:	e7ea      	b.n	8017cc2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8017cec:	24013b52 	.word	0x24013b52

08017cf0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8017cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017cf2:	b08b      	sub	sp, #44	@ 0x2c
 8017cf4:	4617      	mov	r7, r2
 8017cf6:	4604      	mov	r4, r0
 8017cf8:	460e      	mov	r6, r1
 8017cfa:	461d      	mov	r5, r3
 8017cfc:	f7fa fc22 	bl	8012544 <_ZN8touchgfx3HAL3lcdEv>
 8017d00:	6803      	ldr	r3, [r0, #0]
 8017d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017d04:	4798      	blx	r3
 8017d06:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8017d0a:	9007      	str	r0, [sp, #28]
 8017d0c:	4631      	mov	r1, r6
 8017d0e:	6822      	ldr	r2, [r4, #0]
 8017d10:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8017d14:	4b0c      	ldr	r3, [pc, #48]	@ (8017d48 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8017d16:	4620      	mov	r0, r4
 8017d18:	881b      	ldrh	r3, [r3, #0]
 8017d1a:	9306      	str	r3, [sp, #24]
 8017d1c:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8017d20:	9305      	str	r3, [sp, #20]
 8017d22:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 8017d26:	9304      	str	r3, [sp, #16]
 8017d28:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8017d2c:	9303      	str	r3, [sp, #12]
 8017d2e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8017d32:	9302      	str	r3, [sp, #8]
 8017d34:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8017d38:	e9cd 5300 	strd	r5, r3, [sp]
 8017d3c:	463b      	mov	r3, r7
 8017d3e:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 8017d40:	2200      	movs	r2, #0
 8017d42:	47a8      	blx	r5
 8017d44:	b00b      	add	sp, #44	@ 0x2c
 8017d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017d48:	24013b52 	.word	0x24013b52

08017d4c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8017d4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017d50:	4698      	mov	r8, r3
 8017d52:	6803      	ldr	r3, [r0, #0]
 8017d54:	b08b      	sub	sp, #44	@ 0x2c
 8017d56:	4617      	mov	r7, r2
 8017d58:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 8017d5a:	460e      	mov	r6, r1
 8017d5c:	4b13      	ldr	r3, [pc, #76]	@ (8017dac <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8017d5e:	4604      	mov	r4, r0
 8017d60:	f8b3 9000 	ldrh.w	r9, [r3]
 8017d64:	f7fa fbee 	bl	8012544 <_ZN8touchgfx3HAL3lcdEv>
 8017d68:	6803      	ldr	r3, [r0, #0]
 8017d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017d6c:	4798      	blx	r3
 8017d6e:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8017d72:	2200      	movs	r2, #0
 8017d74:	4631      	mov	r1, r6
 8017d76:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8017d7a:	2302      	movs	r3, #2
 8017d7c:	4620      	mov	r0, r4
 8017d7e:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8017d82:	2301      	movs	r3, #1
 8017d84:	9305      	str	r3, [sp, #20]
 8017d86:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8017d8a:	9304      	str	r3, [sp, #16]
 8017d8c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8017d90:	9303      	str	r3, [sp, #12]
 8017d92:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8017d96:	9302      	str	r3, [sp, #8]
 8017d98:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8017d9c:	e9cd 8300 	strd	r8, r3, [sp]
 8017da0:	463b      	mov	r3, r7
 8017da2:	47a8      	blx	r5
 8017da4:	b00b      	add	sp, #44	@ 0x2c
 8017da6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017daa:	bf00      	nop
 8017dac:	24013b52 	.word	0x24013b52

08017db0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8017db0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017db4:	4698      	mov	r8, r3
 8017db6:	6803      	ldr	r3, [r0, #0]
 8017db8:	b087      	sub	sp, #28
 8017dba:	460e      	mov	r6, r1
 8017dbc:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 8017dbe:	4617      	mov	r7, r2
 8017dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8017e00 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8017dc2:	4604      	mov	r4, r0
 8017dc4:	f8b3 9000 	ldrh.w	r9, [r3]
 8017dc8:	f7fa fbbc 	bl	8012544 <_ZN8touchgfx3HAL3lcdEv>
 8017dcc:	6803      	ldr	r3, [r0, #0]
 8017dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017dd0:	4798      	blx	r3
 8017dd2:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 8017dd6:	463a      	mov	r2, r7
 8017dd8:	4631      	mov	r1, r6
 8017dda:	f8cd 900c 	str.w	r9, [sp, #12]
 8017dde:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8017de2:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 8017de6:	4620      	mov	r0, r4
 8017de8:	9302      	str	r3, [sp, #8]
 8017dea:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8017dee:	9301      	str	r3, [sp, #4]
 8017df0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8017df4:	9300      	str	r3, [sp, #0]
 8017df6:	4643      	mov	r3, r8
 8017df8:	47a8      	blx	r5
 8017dfa:	b007      	add	sp, #28
 8017dfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017e00:	24013b52 	.word	0x24013b52

08017e04 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8017e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e08:	4604      	mov	r4, r0
 8017e0a:	b08f      	sub	sp, #60	@ 0x3c
 8017e0c:	4610      	mov	r0, r2
 8017e0e:	460d      	mov	r5, r1
 8017e10:	4691      	mov	r9, r2
 8017e12:	461e      	mov	r6, r3
 8017e14:	f006 feba 	bl	801eb8c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8017e18:	2800      	cmp	r0, #0
 8017e1a:	f000 809d 	beq.w	8017f58 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8017e1e:	6823      	ldr	r3, [r4, #0]
 8017e20:	4620      	mov	r0, r4
 8017e22:	f8df b198 	ldr.w	fp, [pc, #408]	@ 8017fbc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8017e26:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8017e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017e2c:	4798      	blx	r3
 8017e2e:	6823      	ldr	r3, [r4, #0]
 8017e30:	4620      	mov	r0, r4
 8017e32:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 8017fc0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8017e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017e38:	4798      	blx	r3
 8017e3a:	f8bb 3000 	ldrh.w	r3, [fp]
 8017e3e:	4f5c      	ldr	r7, [pc, #368]	@ (8017fb0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8017e40:	9301      	str	r3, [sp, #4]
 8017e42:	f8ba 3000 	ldrh.w	r3, [sl]
 8017e46:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8017e4a:	4640      	mov	r0, r8
 8017e4c:	9302      	str	r3, [sp, #8]
 8017e4e:	883b      	ldrh	r3, [r7, #0]
 8017e50:	9303      	str	r3, [sp, #12]
 8017e52:	4b58      	ldr	r3, [pc, #352]	@ (8017fb4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8017e54:	881a      	ldrh	r2, [r3, #0]
 8017e56:	9305      	str	r3, [sp, #20]
 8017e58:	9204      	str	r2, [sp, #16]
 8017e5a:	f006 ffe7 	bl	801ee2c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017e5e:	8038      	strh	r0, [r7, #0]
 8017e60:	4640      	mov	r0, r8
 8017e62:	f007 f817 	bl	801ee94 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017e66:	9b05      	ldr	r3, [sp, #20]
 8017e68:	b280      	uxth	r0, r0
 8017e6a:	8018      	strh	r0, [r3, #0]
 8017e6c:	4b52      	ldr	r3, [pc, #328]	@ (8017fb8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8017e6e:	781b      	ldrb	r3, [r3, #0]
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	d174      	bne.n	8017f5e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8017e74:	883b      	ldrh	r3, [r7, #0]
 8017e76:	f8aa 0000 	strh.w	r0, [sl]
 8017e7a:	f8ab 3000 	strh.w	r3, [fp]
 8017e7e:	4648      	mov	r0, r9
 8017e80:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 8017e84:	f006 fe82 	bl	801eb8c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8017e88:	2200      	movs	r2, #0
 8017e8a:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8017e8e:	4611      	mov	r1, r2
 8017e90:	4628      	mov	r0, r5
 8017e92:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8017e96:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8017e9a:	f7fb fa4a 	bl	8013332 <_ZN8touchgfx8Drawable5setXYEss>
 8017e9e:	2301      	movs	r3, #1
 8017ea0:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 8017ea4:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8017ea8:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8017eac:	2b00      	cmp	r3, #0
 8017eae:	dd5c      	ble.n	8017f6a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8017eb0:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	dd58      	ble.n	8017f6a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8017eb8:	462a      	mov	r2, r5
 8017eba:	ab0a      	add	r3, sp, #40	@ 0x28
 8017ebc:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8017ec0:	6851      	ldr	r1, [r2, #4]
 8017ec2:	c303      	stmia	r3!, {r0, r1}
 8017ec4:	4631      	mov	r1, r6
 8017ec6:	a80a      	add	r0, sp, #40	@ 0x28
 8017ec8:	f7ff fbf6 	bl	80176b8 <_ZN8touchgfx4RectaNERKS0_>
 8017ecc:	4b38      	ldr	r3, [pc, #224]	@ (8017fb0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8017ece:	2100      	movs	r1, #0
 8017ed0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017ed4:	4b37      	ldr	r3, [pc, #220]	@ (8017fb4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8017ed6:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8017eda:	aa0a      	add	r2, sp, #40	@ 0x28
 8017edc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017ee0:	910c      	str	r1, [sp, #48]	@ 0x30
 8017ee2:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8017ee6:	ab08      	add	r3, sp, #32
 8017ee8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017eec:	e883 0003 	stmia.w	r3, {r0, r1}
 8017ef0:	4618      	mov	r0, r3
 8017ef2:	a90c      	add	r1, sp, #48	@ 0x30
 8017ef4:	f7ff fbe0 	bl	80176b8 <_ZN8touchgfx4RectaNERKS0_>
 8017ef8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	d13c      	bne.n	8017f78 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8017efe:	2000      	movs	r0, #0
 8017f00:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 8017f04:	2600      	movs	r6, #0
 8017f06:	696b      	ldr	r3, [r5, #20]
 8017f08:	a908      	add	r1, sp, #32
 8017f0a:	682a      	ldr	r2, [r5, #0]
 8017f0c:	4628      	mov	r0, r5
 8017f0e:	9305      	str	r3, [sp, #20]
 8017f10:	616e      	str	r6, [r5, #20]
 8017f12:	6892      	ldr	r2, [r2, #8]
 8017f14:	4790      	blx	r2
 8017f16:	9b05      	ldr	r3, [sp, #20]
 8017f18:	4652      	mov	r2, sl
 8017f1a:	4649      	mov	r1, r9
 8017f1c:	616b      	str	r3, [r5, #20]
 8017f1e:	4628      	mov	r0, r5
 8017f20:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 8017f24:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 8017f28:	f7fb fa03 	bl	8013332 <_ZN8touchgfx8Drawable5setXYEss>
 8017f2c:	9a01      	ldr	r2, [sp, #4]
 8017f2e:	4b23      	ldr	r3, [pc, #140]	@ (8017fbc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8017f30:	4620      	mov	r0, r4
 8017f32:	801a      	strh	r2, [r3, #0]
 8017f34:	9a02      	ldr	r2, [sp, #8]
 8017f36:	4b22      	ldr	r3, [pc, #136]	@ (8017fc0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8017f38:	801a      	strh	r2, [r3, #0]
 8017f3a:	9a03      	ldr	r2, [sp, #12]
 8017f3c:	4b1c      	ldr	r3, [pc, #112]	@ (8017fb0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8017f3e:	801a      	strh	r2, [r3, #0]
 8017f40:	4b1c      	ldr	r3, [pc, #112]	@ (8017fb4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8017f42:	9a04      	ldr	r2, [sp, #16]
 8017f44:	801a      	strh	r2, [r3, #0]
 8017f46:	6823      	ldr	r3, [r4, #0]
 8017f48:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 8017f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017f4e:	4798      	blx	r3
 8017f50:	6823      	ldr	r3, [r4, #0]
 8017f52:	4620      	mov	r0, r4
 8017f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017f56:	4798      	blx	r3
 8017f58:	b00f      	add	sp, #60	@ 0x3c
 8017f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f5e:	883b      	ldrh	r3, [r7, #0]
 8017f60:	f8ab 0000 	strh.w	r0, [fp]
 8017f64:	f8aa 3000 	strh.w	r3, [sl]
 8017f68:	e789      	b.n	8017e7e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8017f6a:	462a      	mov	r2, r5
 8017f6c:	ab0a      	add	r3, sp, #40	@ 0x28
 8017f6e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8017f72:	6851      	ldr	r1, [r2, #4]
 8017f74:	c303      	stmia	r3!, {r0, r1}
 8017f76:	e7a9      	b.n	8017ecc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8017f78:	a807      	add	r0, sp, #28
 8017f7a:	f007 f895 	bl	801f0a8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8017f7e:	4606      	mov	r6, r0
 8017f80:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8017f82:	6803      	ldr	r3, [r0, #0]
 8017f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017f86:	4798      	blx	r3
 8017f88:	4286      	cmp	r6, r0
 8017f8a:	d1b8      	bne.n	8017efe <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8017f8c:	f7fa fada 	bl	8012544 <_ZN8touchgfx3HAL3lcdEv>
 8017f90:	6803      	ldr	r3, [r0, #0]
 8017f92:	4606      	mov	r6, r0
 8017f94:	a807      	add	r0, sp, #28
 8017f96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017f98:	9305      	str	r3, [sp, #20]
 8017f9a:	f007 f885 	bl	801f0a8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8017f9e:	9b05      	ldr	r3, [sp, #20]
 8017fa0:	4601      	mov	r1, r0
 8017fa2:	4630      	mov	r0, r6
 8017fa4:	4798      	blx	r3
 8017fa6:	f080 0001 	eor.w	r0, r0, #1
 8017faa:	b2c0      	uxtb	r0, r0
 8017fac:	e7a8      	b.n	8017f00 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8017fae:	bf00      	nop
 8017fb0:	24013b4c 	.word	0x24013b4c
 8017fb4:	24013b4e 	.word	0x24013b4e
 8017fb8:	24013b50 	.word	0x24013b50
 8017fbc:	24013b52 	.word	0x24013b52
 8017fc0:	24013b54 	.word	0x24013b54

08017fc4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8017fc4:	4b07      	ldr	r3, [pc, #28]	@ (8017fe4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8017fc6:	b510      	push	{r4, lr}
 8017fc8:	781b      	ldrb	r3, [r3, #0]
 8017fca:	4604      	mov	r4, r0
 8017fcc:	b13b      	cbz	r3, 8017fde <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8017fce:	6803      	ldr	r3, [r0, #0]
 8017fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017fd2:	4798      	blx	r3
 8017fd4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8017fd6:	4283      	cmp	r3, r0
 8017fd8:	d101      	bne.n	8017fde <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8017fda:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8017fdc:	bd10      	pop	{r4, pc}
 8017fde:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8017fe0:	e7fc      	b.n	8017fdc <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8017fe2:	bf00      	nop
 8017fe4:	24013b56 	.word	0x24013b56

08017fe8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8017fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fec:	461d      	mov	r5, r3
 8017fee:	b08a      	sub	sp, #40	@ 0x28
 8017ff0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017ff4:	4690      	mov	r8, r2
 8017ff6:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 8017ffa:	2400      	movs	r4, #0
 8017ffc:	4607      	mov	r7, r0
 8017ffe:	fb06 8505 	mla	r5, r6, r5, r8
 8018002:	9404      	str	r4, [sp, #16]
 8018004:	f88d 4020 	strb.w	r4, [sp, #32]
 8018008:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801800c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8018010:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018014:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8018018:	f8ad 301a 	strh.w	r3, [sp, #26]
 801801c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8018020:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018024:	f7ff ffce 	bl	8017fc4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018028:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801802c:	6878      	ldr	r0, [r7, #4]
 801802e:	f8ad 601e 	strh.w	r6, [sp, #30]
 8018032:	a901      	add	r1, sp, #4
 8018034:	9505      	str	r5, [sp, #20]
 8018036:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 801803a:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 801803e:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8018042:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8018046:	6803      	ldr	r3, [r0, #0]
 8018048:	685b      	ldr	r3, [r3, #4]
 801804a:	4798      	blx	r3
 801804c:	b00a      	add	sp, #40	@ 0x28
 801804e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018052 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8018052:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018056:	b08b      	sub	sp, #44	@ 0x2c
 8018058:	2400      	movs	r4, #0
 801805a:	4691      	mov	r9, r2
 801805c:	461d      	mov	r5, r3
 801805e:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 8018062:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8018066:	4688      	mov	r8, r1
 8018068:	4607      	mov	r7, r0
 801806a:	9404      	str	r4, [sp, #16]
 801806c:	fb06 9505 	mla	r5, r6, r5, r9
 8018070:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018074:	f7ff ffa6 	bl	8017fc4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018078:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 801807c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8018080:	6878      	ldr	r0, [r7, #4]
 8018082:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018086:	a901      	add	r1, sp, #4
 8018088:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 801808c:	9505      	str	r5, [sp, #20]
 801808e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018092:	f8ad 401c 	strh.w	r4, [sp, #28]
 8018096:	f8ad 601e 	strh.w	r6, [sp, #30]
 801809a:	f8cd 8010 	str.w	r8, [sp, #16]
 801809e:	f8ad 4020 	strh.w	r4, [sp, #32]
 80180a2:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 80180a6:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 80180aa:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 80180ae:	6803      	ldr	r3, [r0, #0]
 80180b0:	685b      	ldr	r3, [r3, #4]
 80180b2:	4798      	blx	r3
 80180b4:	b00b      	add	sp, #44	@ 0x2c
 80180b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080180bc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 80180bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180c0:	b08a      	sub	sp, #40	@ 0x28
 80180c2:	4698      	mov	r8, r3
 80180c4:	2300      	movs	r3, #0
 80180c6:	4606      	mov	r6, r0
 80180c8:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 80180cc:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 80180d0:	2d0b      	cmp	r5, #11
 80180d2:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 80180d6:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 80180da:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 80180de:	9304      	str	r3, [sp, #16]
 80180e0:	d137      	bne.n	8018152 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 80180e2:	2380      	movs	r3, #128	@ 0x80
 80180e4:	f88d 0020 	strb.w	r0, [sp, #32]
 80180e8:	4630      	mov	r0, r6
 80180ea:	9203      	str	r2, [sp, #12]
 80180ec:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80180f0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80180f4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80180f8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80180fc:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018100:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8018104:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018108:	f7ff ff5c 	bl	8017fc4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801810c:	2c0b      	cmp	r4, #11
 801810e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8018112:	f8ad 701e 	strh.w	r7, [sp, #30]
 8018116:	bf94      	ite	ls
 8018118:	4b19      	ldrls	r3, [pc, #100]	@ (8018180 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 801811a:	2100      	movhi	r1, #0
 801811c:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8018120:	bf98      	it	ls
 8018122:	5d19      	ldrbls	r1, [r3, r4]
 8018124:	fb02 8307 	mla	r3, r2, r7, r8
 8018128:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 801812c:	10c9      	asrs	r1, r1, #3
 801812e:	fb01 0003 	mla	r0, r1, r3, r0
 8018132:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8018136:	a901      	add	r1, sp, #4
 8018138:	9005      	str	r0, [sp, #20]
 801813a:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 801813e:	2300      	movs	r3, #0
 8018140:	6870      	ldr	r0, [r6, #4]
 8018142:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8018146:	6803      	ldr	r3, [r0, #0]
 8018148:	685b      	ldr	r3, [r3, #4]
 801814a:	4798      	blx	r3
 801814c:	b00a      	add	sp, #40	@ 0x28
 801814e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018152:	2d02      	cmp	r5, #2
 8018154:	d109      	bne.n	801816a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8018156:	28ff      	cmp	r0, #255	@ 0xff
 8018158:	d105      	bne.n	8018166 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 801815a:	f1bc 0f00 	cmp.w	ip, #0
 801815e:	bf14      	ite	ne
 8018160:	2340      	movne	r3, #64	@ 0x40
 8018162:	2320      	moveq	r3, #32
 8018164:	e7be      	b.n	80180e4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8018166:	2340      	movs	r3, #64	@ 0x40
 8018168:	e7bc      	b.n	80180e4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801816a:	28ff      	cmp	r0, #255	@ 0xff
 801816c:	d105      	bne.n	801817a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 801816e:	f1bc 0f00 	cmp.w	ip, #0
 8018172:	bf14      	ite	ne
 8018174:	2304      	movne	r3, #4
 8018176:	2301      	moveq	r3, #1
 8018178:	e7b4      	b.n	80180e4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801817a:	2304      	movs	r3, #4
 801817c:	e7b2      	b.n	80180e4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801817e:	bf00      	nop
 8018180:	0802c9e4 	.word	0x0802c9e4

08018184 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8018184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018188:	b08b      	sub	sp, #44	@ 0x2c
 801818a:	461d      	mov	r5, r3
 801818c:	2400      	movs	r4, #0
 801818e:	4688      	mov	r8, r1
 8018190:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 8018194:	4693      	mov	fp, r2
 8018196:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 801819a:	4607      	mov	r7, r0
 801819c:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80181a0:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 80181a4:	9404      	str	r4, [sp, #16]
 80181a6:	bf14      	ite	ne
 80181a8:	2308      	movne	r3, #8
 80181aa:	2302      	moveq	r3, #2
 80181ac:	fb05 b50a 	mla	r5, r5, sl, fp
 80181b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80181b4:	f7ff ff06 	bl	8017fc4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80181b8:	2e0b      	cmp	r6, #11
 80181ba:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 80181be:	a901      	add	r1, sp, #4
 80181c0:	bf98      	it	ls
 80181c2:	4b13      	ldrls	r3, [pc, #76]	@ (8018210 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 80181c4:	f8ad a01e 	strh.w	sl, [sp, #30]
 80181c8:	bf98      	it	ls
 80181ca:	5d9c      	ldrbls	r4, [r3, r6]
 80181cc:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 80181d0:	10e4      	asrs	r4, r4, #3
 80181d2:	f8cd 8010 	str.w	r8, [sp, #16]
 80181d6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80181da:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 80181de:	fb04 0405 	mla	r4, r4, r5, r0
 80181e2:	6878      	ldr	r0, [r7, #4]
 80181e4:	f8ad 301a 	strh.w	r3, [sp, #26]
 80181e8:	2300      	movs	r3, #0
 80181ea:	9405      	str	r4, [sp, #20]
 80181ec:	f8ad 301c 	strh.w	r3, [sp, #28]
 80181f0:	f88d 9020 	strb.w	r9, [sp, #32]
 80181f4:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 80181f8:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80181fc:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 8018200:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 8018204:	6803      	ldr	r3, [r0, #0]
 8018206:	685b      	ldr	r3, [r3, #4]
 8018208:	4798      	blx	r3
 801820a:	b00b      	add	sp, #44	@ 0x2c
 801820c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018210:	0802c9e4 	.word	0x0802c9e4

08018214 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8018214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018218:	461e      	mov	r6, r3
 801821a:	4b0a      	ldr	r3, [pc, #40]	@ (8018244 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 801821c:	460f      	mov	r7, r1
 801821e:	4690      	mov	r8, r2
 8018220:	881d      	ldrh	r5, [r3, #0]
 8018222:	f7fa f98f 	bl	8012544 <_ZN8touchgfx3HAL3lcdEv>
 8018226:	6803      	ldr	r3, [r0, #0]
 8018228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801822a:	4798      	blx	r3
 801822c:	280b      	cmp	r0, #11
 801822e:	bf96      	itet	ls
 8018230:	4b05      	ldrls	r3, [pc, #20]	@ (8018248 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8018232:	2400      	movhi	r4, #0
 8018234:	5c1c      	ldrbls	r4, [r3, r0]
 8018236:	fb08 7005 	mla	r0, r8, r5, r7
 801823a:	10e4      	asrs	r4, r4, #3
 801823c:	fb04 6000 	mla	r0, r4, r0, r6
 8018240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018244:	24013b52 	.word	0x24013b52
 8018248:	0802c9e4 	.word	0x0802c9e4

0801824c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 801824c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801824e:	b08b      	sub	sp, #44	@ 0x2c
 8018250:	461f      	mov	r7, r3
 8018252:	4604      	mov	r4, r0
 8018254:	4616      	mov	r6, r2
 8018256:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 801825a:	2500      	movs	r5, #0
 801825c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8018260:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8018264:	9504      	str	r5, [sp, #16]
 8018266:	f8ad 3018 	strh.w	r3, [sp, #24]
 801826a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801826e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018272:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8018276:	f8ad 301c 	strh.w	r3, [sp, #28]
 801827a:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 801827e:	f88d 3020 	strb.w	r3, [sp, #32]
 8018282:	f7ff fe9f 	bl	8017fc4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018286:	463a      	mov	r2, r7
 8018288:	4631      	mov	r1, r6
 801828a:	4603      	mov	r3, r0
 801828c:	4620      	mov	r0, r4
 801828e:	f7ff ffc1 	bl	8018214 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018292:	4b0e      	ldr	r3, [pc, #56]	@ (80182cc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8018294:	9005      	str	r0, [sp, #20]
 8018296:	881b      	ldrh	r3, [r3, #0]
 8018298:	f8ad 301e 	strh.w	r3, [sp, #30]
 801829c:	f7fa f952 	bl	8012544 <_ZN8touchgfx3HAL3lcdEv>
 80182a0:	6803      	ldr	r3, [r0, #0]
 80182a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80182a4:	4798      	blx	r3
 80182a6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80182a8:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 80182ac:	a901      	add	r1, sp, #4
 80182ae:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 80182b2:	9304      	str	r3, [sp, #16]
 80182b4:	6860      	ldr	r0, [r4, #4]
 80182b6:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80182ba:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 80182be:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 80182c2:	6803      	ldr	r3, [r0, #0]
 80182c4:	685b      	ldr	r3, [r3, #4]
 80182c6:	4798      	blx	r3
 80182c8:	b00b      	add	sp, #44	@ 0x2c
 80182ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80182cc:	24013b52 	.word	0x24013b52

080182d0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80182d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80182d2:	b08d      	sub	sp, #52	@ 0x34
 80182d4:	2501      	movs	r5, #1
 80182d6:	4604      	mov	r4, r0
 80182d8:	466b      	mov	r3, sp
 80182da:	9503      	str	r5, [sp, #12]
 80182dc:	e883 0006 	stmia.w	r3, {r1, r2}
 80182e0:	2300      	movs	r3, #0
 80182e2:	f8bd 6000 	ldrh.w	r6, [sp]
 80182e6:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80182ea:	9306      	str	r3, [sp, #24]
 80182ec:	6803      	ldr	r3, [r0, #0]
 80182ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80182f0:	4798      	blx	r3
 80182f2:	463a      	mov	r2, r7
 80182f4:	4631      	mov	r1, r6
 80182f6:	4603      	mov	r3, r0
 80182f8:	4620      	mov	r0, r4
 80182fa:	f7ff ff8b 	bl	8018214 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80182fe:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8018300:	9004      	str	r0, [sp, #16]
 8018302:	9307      	str	r3, [sp, #28]
 8018304:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8018308:	f8ad 3020 	strh.w	r3, [sp, #32]
 801830c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018310:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8018314:	4b0e      	ldr	r3, [pc, #56]	@ (8018350 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8018316:	881b      	ldrh	r3, [r3, #0]
 8018318:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 801831c:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8018320:	f7fa f910 	bl	8012544 <_ZN8touchgfx3HAL3lcdEv>
 8018324:	6803      	ldr	r3, [r0, #0]
 8018326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018328:	4798      	blx	r3
 801832a:	23ff      	movs	r3, #255	@ 0xff
 801832c:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8018330:	a903      	add	r1, sp, #12
 8018332:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8018336:	6860      	ldr	r0, [r4, #4]
 8018338:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 801833c:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8018340:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8018344:	6803      	ldr	r3, [r0, #0]
 8018346:	685b      	ldr	r3, [r3, #4]
 8018348:	4798      	blx	r3
 801834a:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 801834c:	b00d      	add	sp, #52	@ 0x34
 801834e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018350:	24013b52 	.word	0x24013b52

08018354 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8018354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018358:	b08c      	sub	sp, #48	@ 0x30
 801835a:	461e      	mov	r6, r3
 801835c:	2300      	movs	r3, #0
 801835e:	4604      	mov	r4, r0
 8018360:	466d      	mov	r5, sp
 8018362:	9306      	str	r3, [sp, #24]
 8018364:	6803      	ldr	r3, [r0, #0]
 8018366:	e885 0006 	stmia.w	r5, {r1, r2}
 801836a:	2501      	movs	r5, #1
 801836c:	f8bd 7000 	ldrh.w	r7, [sp]
 8018370:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8018374:	9503      	str	r5, [sp, #12]
 8018376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018378:	4798      	blx	r3
 801837a:	4642      	mov	r2, r8
 801837c:	4639      	mov	r1, r7
 801837e:	4603      	mov	r3, r0
 8018380:	4620      	mov	r0, r4
 8018382:	f7ff ff47 	bl	8018214 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018386:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801838a:	9004      	str	r0, [sp, #16]
 801838c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018390:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018394:	9607      	str	r6, [sp, #28]
 8018396:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801839a:	4b10      	ldr	r3, [pc, #64]	@ (80183dc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 801839c:	881b      	ldrh	r3, [r3, #0]
 801839e:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 80183a2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80183a4:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 80183a8:	f7fa f8cc 	bl	8012544 <_ZN8touchgfx3HAL3lcdEv>
 80183ac:	6803      	ldr	r3, [r0, #0]
 80183ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80183b0:	4798      	blx	r3
 80183b2:	23ff      	movs	r3, #255	@ 0xff
 80183b4:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 80183b8:	a903      	add	r1, sp, #12
 80183ba:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 80183be:	6860      	ldr	r0, [r4, #4]
 80183c0:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 80183c4:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 80183c8:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 80183cc:	6803      	ldr	r3, [r0, #0]
 80183ce:	685b      	ldr	r3, [r3, #4]
 80183d0:	4798      	blx	r3
 80183d2:	4630      	mov	r0, r6
 80183d4:	b00c      	add	sp, #48	@ 0x30
 80183d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80183da:	bf00      	nop
 80183dc:	24013b52 	.word	0x24013b52

080183e0 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 80183e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80183e2:	b085      	sub	sp, #20
 80183e4:	4605      	mov	r5, r0
 80183e6:	ac02      	add	r4, sp, #8
 80183e8:	e884 0006 	stmia.w	r4, {r1, r2}
 80183ec:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 80183f0:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 80183f4:	f7ff fde6 	bl	8017fc4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80183f8:	4631      	mov	r1, r6
 80183fa:	4603      	mov	r3, r0
 80183fc:	463a      	mov	r2, r7
 80183fe:	4628      	mov	r0, r5
 8018400:	f7ff ff08 	bl	8018214 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018404:	4a05      	ldr	r2, [pc, #20]	@ (801841c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8018406:	682b      	ldr	r3, [r5, #0]
 8018408:	8812      	ldrh	r2, [r2, #0]
 801840a:	9200      	str	r2, [sp, #0]
 801840c:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 801840e:	4603      	mov	r3, r0
 8018410:	4628      	mov	r0, r5
 8018412:	e894 0006 	ldmia.w	r4, {r1, r2}
 8018416:	47b0      	blx	r6
 8018418:	b005      	add	sp, #20
 801841a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801841c:	24013b52 	.word	0x24013b52

08018420 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8018420:	b570      	push	{r4, r5, r6, lr}
 8018422:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 8018426:	4604      	mov	r4, r0
 8018428:	b19b      	cbz	r3, 8018452 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801842a:	2002      	movs	r0, #2
 801842c:	f7fc fb86 	bl	8014b3c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8018430:	2300      	movs	r3, #0
 8018432:	4620      	mov	r0, r4
 8018434:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8018438:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 801843c:	6823      	ldr	r3, [r4, #0]
 801843e:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 8018442:	f7ff fdbf 	bl	8017fc4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018446:	4601      	mov	r1, r0
 8018448:	4620      	mov	r0, r4
 801844a:	462b      	mov	r3, r5
 801844c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018450:	4718      	bx	r3
 8018452:	bd70      	pop	{r4, r5, r6, pc}

08018454 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8018454:	b538      	push	{r3, r4, r5, lr}
 8018456:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 801845a:	4604      	mov	r4, r0
 801845c:	460d      	mov	r5, r1
 801845e:	428b      	cmp	r3, r1
 8018460:	d006      	beq.n	8018470 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8018462:	6803      	ldr	r3, [r0, #0]
 8018464:	b929      	cbnz	r1, 8018472 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8018466:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 801846a:	4798      	blx	r3
 801846c:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 8018470:	bd38      	pop	{r3, r4, r5, pc}
 8018472:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8018476:	e7f8      	b.n	801846a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08018478 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8018478:	4b0d      	ldr	r3, [pc, #52]	@ (80184b0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 801847a:	b510      	push	{r4, lr}
 801847c:	781b      	ldrb	r3, [r3, #0]
 801847e:	4604      	mov	r4, r0
 8018480:	b95b      	cbnz	r3, 801849a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8018482:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8018486:	2b02      	cmp	r3, #2
 8018488:	d007      	beq.n	801849a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801848a:	6840      	ldr	r0, [r0, #4]
 801848c:	f000 f928 	bl	80186e0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8018490:	b118      	cbz	r0, 801849a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8018492:	6862      	ldr	r2, [r4, #4]
 8018494:	7a53      	ldrb	r3, [r2, #9]
 8018496:	2b00      	cmp	r3, #0
 8018498:	d0fc      	beq.n	8018494 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801849a:	f7fc fde7 	bl	801506c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801849e:	4620      	mov	r0, r4
 80184a0:	2100      	movs	r1, #0
 80184a2:	f7ff ffd7 	bl	8018454 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80184a6:	4620      	mov	r0, r4
 80184a8:	f7ff fd8c 	bl	8017fc4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80184ac:	bd10      	pop	{r4, pc}
 80184ae:	bf00      	nop
 80184b0:	24013b56 	.word	0x24013b56

080184b4 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 80184b4:	b570      	push	{r4, r5, r6, lr}
 80184b6:	4604      	mov	r4, r0
 80184b8:	6803      	ldr	r3, [r0, #0]
 80184ba:	b919      	cbnz	r1, 80184c4 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 80184bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80184be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80184c2:	4718      	bx	r3
 80184c4:	2200      	movs	r2, #0
 80184c6:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 80184ca:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 80184ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80184d0:	4798      	blx	r3
 80184d2:	6863      	ldr	r3, [r4, #4]
 80184d4:	2101      	movs	r1, #1
 80184d6:	4605      	mov	r5, r0
 80184d8:	4620      	mov	r0, r4
 80184da:	7299      	strb	r1, [r3, #10]
 80184dc:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 80184e0:	f7ff ffb8 	bl	8018454 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80184e4:	4628      	mov	r0, r5
 80184e6:	bd70      	pop	{r4, r5, r6, pc}

080184e8 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 80184e8:	4770      	bx	lr

080184ea <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 80184ea:	2000      	movs	r0, #0
 80184ec:	4770      	bx	lr

080184ee <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80184ee:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80184f2:	1a13      	subs	r3, r2, r0
 80184f4:	4258      	negs	r0, r3
 80184f6:	4158      	adcs	r0, r3
 80184f8:	4770      	bx	lr

080184fa <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80184fa:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80184fe:	1a9b      	subs	r3, r3, r2
 8018500:	2b00      	cmp	r3, #0
 8018502:	bfdc      	itt	le
 8018504:	6882      	ldrle	r2, [r0, #8]
 8018506:	189b      	addle	r3, r3, r2
 8018508:	2b01      	cmp	r3, #1
 801850a:	bfcc      	ite	gt
 801850c:	2000      	movgt	r0, #0
 801850e:	2001      	movle	r0, #1
 8018510:	4770      	bx	lr

08018512 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8018512:	6902      	ldr	r2, [r0, #16]
 8018514:	6843      	ldr	r3, [r0, #4]
 8018516:	2024      	movs	r0, #36	@ 0x24
 8018518:	fb00 3002 	mla	r0, r0, r2, r3
 801851c:	4770      	bx	lr

0801851e <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801851e:	6803      	ldr	r3, [r0, #0]
 8018520:	691b      	ldr	r3, [r3, #16]
 8018522:	4718      	bx	r3

08018524 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8018524:	2301      	movs	r3, #1
 8018526:	b570      	push	{r4, r5, r6, lr}
 8018528:	7203      	strb	r3, [r0, #8]
 801852a:	4604      	mov	r4, r0
 801852c:	6840      	ldr	r0, [r0, #4]
 801852e:	6803      	ldr	r3, [r0, #0]
 8018530:	699b      	ldr	r3, [r3, #24]
 8018532:	4798      	blx	r3
 8018534:	6803      	ldr	r3, [r0, #0]
 8018536:	4605      	mov	r5, r0
 8018538:	2b40      	cmp	r3, #64	@ 0x40
 801853a:	d00c      	beq.n	8018556 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801853c:	d810      	bhi.n	8018560 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 801853e:	2b04      	cmp	r3, #4
 8018540:	d01d      	beq.n	801857e <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8018542:	d804      	bhi.n	801854e <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8018544:	2b01      	cmp	r3, #1
 8018546:	d006      	beq.n	8018556 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8018548:	2b02      	cmp	r3, #2
 801854a:	d02c      	beq.n	80185a6 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 801854c:	bd70      	pop	{r4, r5, r6, pc}
 801854e:	2b08      	cmp	r3, #8
 8018550:	d01d      	beq.n	801858e <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8018552:	2b20      	cmp	r3, #32
 8018554:	d1fa      	bne.n	801854c <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8018556:	6823      	ldr	r3, [r4, #0]
 8018558:	4620      	mov	r0, r4
 801855a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801855c:	4798      	blx	r3
 801855e:	e013      	b.n	8018588 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8018560:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018564:	d0f7      	beq.n	8018556 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8018566:	d804      	bhi.n	8018572 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8018568:	2b80      	cmp	r3, #128	@ 0x80
 801856a:	d0f4      	beq.n	8018556 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801856c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018570:	e7f0      	b.n	8018554 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8018572:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8018576:	d0ee      	beq.n	8018556 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8018578:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801857c:	e7e5      	b.n	801854a <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 801857e:	6823      	ldr	r3, [r4, #0]
 8018580:	7f01      	ldrb	r1, [r0, #28]
 8018582:	4620      	mov	r0, r4
 8018584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018586:	4798      	blx	r3
 8018588:	6823      	ldr	r3, [r4, #0]
 801858a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801858c:	e006      	b.n	801859c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801858e:	6823      	ldr	r3, [r4, #0]
 8018590:	7f01      	ldrb	r1, [r0, #28]
 8018592:	4620      	mov	r0, r4
 8018594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018596:	4798      	blx	r3
 8018598:	6823      	ldr	r3, [r4, #0]
 801859a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801859c:	4629      	mov	r1, r5
 801859e:	4620      	mov	r0, r4
 80185a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80185a4:	4718      	bx	r3
 80185a6:	6823      	ldr	r3, [r4, #0]
 80185a8:	4620      	mov	r0, r4
 80185aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80185ac:	4798      	blx	r3
 80185ae:	e7f3      	b.n	8018598 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

080185b0 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80185b0:	4770      	bx	lr

080185b2 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80185b2:	4770      	bx	lr

080185b4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80185b4:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 80185b8:	b510      	push	{r4, lr}
 80185ba:	1ad2      	subs	r2, r2, r3
 80185bc:	2a00      	cmp	r2, #0
 80185be:	bfdc      	itt	le
 80185c0:	6884      	ldrle	r4, [r0, #8]
 80185c2:	1912      	addle	r2, r2, r4
 80185c4:	2a01      	cmp	r2, #1
 80185c6:	dd16      	ble.n	80185f6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 80185c8:	6842      	ldr	r2, [r0, #4]
 80185ca:	2424      	movs	r4, #36	@ 0x24
 80185cc:	fb04 2303 	mla	r3, r4, r3, r2
 80185d0:	f101 0220 	add.w	r2, r1, #32
 80185d4:	f851 4b04 	ldr.w	r4, [r1], #4
 80185d8:	4291      	cmp	r1, r2
 80185da:	f843 4b04 	str.w	r4, [r3], #4
 80185de:	d1f9      	bne.n	80185d4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 80185e0:	780a      	ldrb	r2, [r1, #0]
 80185e2:	701a      	strb	r2, [r3, #0]
 80185e4:	68c3      	ldr	r3, [r0, #12]
 80185e6:	6882      	ldr	r2, [r0, #8]
 80185e8:	f3bf 8f5b 	dmb	ish
 80185ec:	3301      	adds	r3, #1
 80185ee:	429a      	cmp	r2, r3
 80185f0:	bfd8      	it	le
 80185f2:	1a9b      	suble	r3, r3, r2
 80185f4:	60c3      	str	r3, [r0, #12]
 80185f6:	bd10      	pop	{r4, pc}

080185f8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80185f8:	6903      	ldr	r3, [r0, #16]
 80185fa:	6882      	ldr	r2, [r0, #8]
 80185fc:	f3bf 8f5b 	dmb	ish
 8018600:	3301      	adds	r3, #1
 8018602:	429a      	cmp	r2, r3
 8018604:	bfd8      	it	le
 8018606:	1a9b      	suble	r3, r3, r2
 8018608:	6103      	str	r3, [r0, #16]
 801860a:	4770      	bx	lr

0801860c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801860c:	b570      	push	{r4, r5, r6, lr}
 801860e:	4604      	mov	r4, r0
 8018610:	460e      	mov	r6, r1
 8018612:	6860      	ldr	r0, [r4, #4]
 8018614:	6803      	ldr	r3, [r0, #0]
 8018616:	685b      	ldr	r3, [r3, #4]
 8018618:	4798      	blx	r3
 801861a:	2800      	cmp	r0, #0
 801861c:	d1f9      	bne.n	8018612 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801861e:	4d0d      	ldr	r5, [pc, #52]	@ (8018654 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8018620:	6828      	ldr	r0, [r5, #0]
 8018622:	6803      	ldr	r3, [r0, #0]
 8018624:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018626:	4798      	blx	r3
 8018628:	f7fc fd3a 	bl	80150a0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801862c:	6828      	ldr	r0, [r5, #0]
 801862e:	2101      	movs	r1, #1
 8018630:	f7ff ff10 	bl	8018454 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8018634:	6860      	ldr	r0, [r4, #4]
 8018636:	4631      	mov	r1, r6
 8018638:	6803      	ldr	r3, [r0, #0]
 801863a:	689b      	ldr	r3, [r3, #8]
 801863c:	4798      	blx	r3
 801863e:	6823      	ldr	r3, [r4, #0]
 8018640:	4620      	mov	r0, r4
 8018642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018644:	4798      	blx	r3
 8018646:	6828      	ldr	r0, [r5, #0]
 8018648:	6803      	ldr	r3, [r0, #0]
 801864a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801864e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8018650:	4718      	bx	r3
 8018652:	bf00      	nop
 8018654:	24013b58 	.word	0x24013b58

08018658 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8018658:	b508      	push	{r3, lr}
 801865a:	f7fc fd07 	bl	801506c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801865e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018662:	f7fc bd11 	b.w	8015088 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08018666 <_ZN8touchgfx13DMA_Interface5startEv>:
 8018666:	b510      	push	{r4, lr}
 8018668:	4604      	mov	r4, r0
 801866a:	6840      	ldr	r0, [r0, #4]
 801866c:	6803      	ldr	r3, [r0, #0]
 801866e:	681b      	ldr	r3, [r3, #0]
 8018670:	4798      	blx	r3
 8018672:	b948      	cbnz	r0, 8018688 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8018674:	7a63      	ldrb	r3, [r4, #9]
 8018676:	b13b      	cbz	r3, 8018688 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8018678:	7a23      	ldrb	r3, [r4, #8]
 801867a:	b92b      	cbnz	r3, 8018688 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801867c:	6823      	ldr	r3, [r4, #0]
 801867e:	4620      	mov	r0, r4
 8018680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018686:	4718      	bx	r3
 8018688:	bd10      	pop	{r4, pc}

0801868a <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801868a:	b570      	push	{r4, r5, r6, lr}
 801868c:	4604      	mov	r4, r0
 801868e:	6840      	ldr	r0, [r0, #4]
 8018690:	6803      	ldr	r3, [r0, #0]
 8018692:	681b      	ldr	r3, [r3, #0]
 8018694:	4798      	blx	r3
 8018696:	4605      	mov	r5, r0
 8018698:	b930      	cbnz	r0, 80186a8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801869a:	7a23      	ldrb	r3, [r4, #8]
 801869c:	b123      	cbz	r3, 80186a8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801869e:	6860      	ldr	r0, [r4, #4]
 80186a0:	6803      	ldr	r3, [r0, #0]
 80186a2:	695b      	ldr	r3, [r3, #20]
 80186a4:	4798      	blx	r3
 80186a6:	7225      	strb	r5, [r4, #8]
 80186a8:	6860      	ldr	r0, [r4, #4]
 80186aa:	6803      	ldr	r3, [r0, #0]
 80186ac:	681b      	ldr	r3, [r3, #0]
 80186ae:	4798      	blx	r3
 80186b0:	b928      	cbnz	r0, 80186be <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80186b2:	6823      	ldr	r3, [r4, #0]
 80186b4:	4620      	mov	r0, r4
 80186b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80186b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80186bc:	4718      	bx	r3
 80186be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80186c2:	f7fc bcf9 	b.w	80150b8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

080186c8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80186c8:	b510      	push	{r4, lr}
 80186ca:	6082      	str	r2, [r0, #8]
 80186cc:	2200      	movs	r2, #0
 80186ce:	4c03      	ldr	r4, [pc, #12]	@ (80186dc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80186d0:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80186d4:	e9c0 4100 	strd	r4, r1, [r0]
 80186d8:	bd10      	pop	{r4, pc}
 80186da:	bf00      	nop
 80186dc:	0802cb20 	.word	0x0802cb20

080186e0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80186e0:	6840      	ldr	r0, [r0, #4]
 80186e2:	6803      	ldr	r3, [r0, #0]
 80186e4:	681b      	ldr	r3, [r3, #0]
 80186e6:	4718      	bx	r3

080186e8 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv>:
 80186e8:	2300      	movs	r3, #0
 80186ea:	84c3      	strh	r3, [r0, #38]	@ 0x26
 80186ec:	8503      	strh	r3, [r0, #40]	@ 0x28
 80186ee:	8543      	strh	r3, [r0, #42]	@ 0x2a
 80186f0:	8583      	strh	r3, [r0, #44]	@ 0x2c
 80186f2:	6980      	ldr	r0, [r0, #24]
 80186f4:	b110      	cbz	r0, 80186fc <_ZN8touchgfx17CWRVectorRenderer8tearDownEv+0x14>
 80186f6:	6803      	ldr	r3, [r0, #0]
 80186f8:	691b      	ldr	r3, [r3, #16]
 80186fa:	4718      	bx	r3
 80186fc:	4770      	bx	lr

080186fe <_ZN8touchgfx17CWRVectorRenderer14setStrokeWidthEf>:
 80186fe:	ed80 0a0c 	vstr	s0, [r0, #48]	@ 0x30
 8018702:	4770      	bx	lr

08018704 <_ZN8touchgfx17CWRVectorRenderer8setColorENS_9colortypeE>:
 8018704:	b538      	push	{r3, r4, r5, lr}
 8018706:	0e0b      	lsrs	r3, r1, #24
 8018708:	4604      	mov	r4, r0
 801870a:	460d      	mov	r5, r1
 801870c:	7783      	strb	r3, [r0, #30]
 801870e:	6803      	ldr	r3, [r0, #0]
 8018710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018712:	4798      	blx	r3
 8018714:	6803      	ldr	r3, [r0, #0]
 8018716:	4629      	mov	r1, r5
 8018718:	689b      	ldr	r3, [r3, #8]
 801871a:	4798      	blx	r3
 801871c:	6823      	ldr	r3, [r4, #0]
 801871e:	4620      	mov	r0, r4
 8018720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018722:	4798      	blx	r3
 8018724:	61a0      	str	r0, [r4, #24]
 8018726:	bd38      	pop	{r3, r4, r5, pc}

08018728 <_ZN8touchgfx17CWRVectorRenderer8setAlphaEh>:
 8018728:	7741      	strb	r1, [r0, #29]
 801872a:	4770      	bx	lr

0801872c <_ZN8touchgfx17CWRVectorRenderer23setTransformationMatrixERKNS_9Matrix3x3E>:
 801872c:	b530      	push	{r4, r5, lr}
 801872e:	460d      	mov	r5, r1
 8018730:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 8018734:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018736:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018738:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801873a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801873c:	682b      	ldr	r3, [r5, #0]
 801873e:	6023      	str	r3, [r4, #0]
 8018740:	bd30      	pop	{r4, r5, pc}

08018742 <_ZN8touchgfx17CWRVectorRenderer5setupERKNS_4RectES3_>:
 8018742:	b538      	push	{r3, r4, r5, lr}
 8018744:	4604      	mov	r4, r0
 8018746:	1d03      	adds	r3, r0, #4
 8018748:	6808      	ldr	r0, [r1, #0]
 801874a:	2500      	movs	r5, #0
 801874c:	6849      	ldr	r1, [r1, #4]
 801874e:	c303      	stmia	r3!, {r0, r1}
 8018750:	6813      	ldr	r3, [r2, #0]
 8018752:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8018756:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
 801875a:	6853      	ldr	r3, [r2, #4]
 801875c:	61a5      	str	r5, [r4, #24]
 801875e:	f8c4 302a 	str.w	r3, [r4, #42]	@ 0x2a
 8018762:	f004 fe8b 	bl	801d47c <_ZN8touchgfx9Matrix3x35resetEv>
 8018766:	23ff      	movs	r3, #255	@ 0xff
 8018768:	f884 5025 	strb.w	r5, [r4, #37]	@ 0x25
 801876c:	7763      	strb	r3, [r4, #29]
 801876e:	77a3      	strb	r3, [r4, #30]
 8018770:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8018774:	6323      	str	r3, [r4, #48]	@ 0x30
 8018776:	2301      	movs	r3, #1
 8018778:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 801877c:	bd38      	pop	{r3, r4, r5, pc}
	...

08018780 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_>:
 8018780:	ee70 7a41 	vsub.f32	s15, s0, s2
 8018784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018788:	eef5 7a40 	vcmp.f32	s15, #0.0
 801878c:	4605      	mov	r5, r0
 801878e:	ed2d 8b0a 	vpush	{d8-d12}
 8018792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018796:	b086      	sub	sp, #24
 8018798:	eeb0 ba40 	vmov.f32	s22, s0
 801879c:	6802      	ldr	r2, [r0, #0]
 801879e:	eef0 ba60 	vmov.f32	s23, s1
 80187a2:	f89d 6058 	ldrb.w	r6, [sp, #88]	@ 0x58
 80187a6:	eef0 aa41 	vmov.f32	s21, s2
 80187aa:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 80187ac:	eeb0 aa61 	vmov.f32	s20, s3
 80187b0:	eeb0 ca42 	vmov.f32	s24, s4
 80187b4:	eef0 ca62 	vmov.f32	s25, s5
 80187b8:	d112      	bne.n	80187e0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 80187ba:	ee70 7ae1 	vsub.f32	s15, s1, s3
 80187be:	eef5 7a40 	vcmp.f32	s15, #0.0
 80187c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187c6:	d10b      	bne.n	80187e0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 80187c8:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 80187cc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80187ce:	3901      	subs	r1, #1
 80187d0:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80187d4:	b006      	add	sp, #24
 80187d6:	ecbd 8b0a 	vpop	{d8-d12}
 80187da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80187de:	4710      	bx	r2
 80187e0:	23ff      	movs	r3, #255	@ 0xff
 80187e2:	4628      	mov	r0, r5
 80187e4:	f105 0834 	add.w	r8, r5, #52	@ 0x34
 80187e8:	77ab      	strb	r3, [r5, #30]
 80187ea:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80187ec:	4798      	blx	r3
 80187ee:	eeb0 0a4b 	vmov.f32	s0, s22
 80187f2:	eef0 0a6b 	vmov.f32	s1, s23
 80187f6:	4604      	mov	r4, r0
 80187f8:	4640      	mov	r0, r8
 80187fa:	f004 feee 	bl	801d5da <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80187fe:	eef0 8a40 	vmov.f32	s17, s0
 8018802:	ed8d 0a00 	vstr	s0, [sp]
 8018806:	eeb0 0a6a 	vmov.f32	s0, s21
 801880a:	eef0 9a60 	vmov.f32	s19, s1
 801880e:	edcd 0a01 	vstr	s1, [sp, #4]
 8018812:	4640      	mov	r0, r8
 8018814:	eef0 0a4a 	vmov.f32	s1, s20
 8018818:	f004 fedf 	bl	801d5da <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801881c:	eef4 8a40 	vcmp.f32	s17, s0
 8018820:	eeb0 8a40 	vmov.f32	s16, s0
 8018824:	ed8d 0a02 	vstr	s0, [sp, #8]
 8018828:	eeb0 9a60 	vmov.f32	s18, s1
 801882c:	edcd 0a03 	vstr	s1, [sp, #12]
 8018830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018834:	eef4 9a60 	vcmp.f32	s19, s1
 8018838:	bf0c      	ite	eq
 801883a:	2301      	moveq	r3, #1
 801883c:	2300      	movne	r3, #0
 801883e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018842:	eef4 8a40 	vcmp.f32	s17, s0
 8018846:	7463      	strb	r3, [r4, #17]
 8018848:	bf0c      	ite	eq
 801884a:	2301      	moveq	r3, #1
 801884c:	2300      	movne	r3, #0
 801884e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018852:	74a3      	strb	r3, [r4, #18]
 8018854:	d024      	beq.n	80188a0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8018856:	eef4 9a60 	vcmp.f32	s19, s1
 801885a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801885e:	d01f      	beq.n	80188a0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8018860:	ee3a aa6b 	vsub.f32	s20, s20, s23
 8018864:	4640      	mov	r0, r8
 8018866:	ee7a aacb 	vsub.f32	s21, s21, s22
 801886a:	eeb0 0a4b 	vmov.f32	s0, s22
 801886e:	eeca 7a2c 	vdiv.f32	s15, s20, s25
 8018872:	ee8a 7a8c 	vdiv.f32	s14, s21, s24
 8018876:	eef0 0a6b 	vmov.f32	s1, s23
 801887a:	eea7 0acc 	vfms.f32	s0, s15, s24
 801887e:	eeec 0a87 	vfma.f32	s1, s25, s14
 8018882:	f004 feaa 	bl	801d5da <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8018886:	ed8d 0a04 	vstr	s0, [sp, #16]
 801888a:	ee30 0a68 	vsub.f32	s0, s0, s17
 801888e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8018892:	edcd 0a05 	vstr	s1, [sp, #20]
 8018896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801889a:	d121      	bne.n	80188e0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x160>
 801889c:	2301      	movs	r3, #1
 801889e:	74a3      	strb	r3, [r4, #18]
 80188a0:	7c63      	ldrb	r3, [r4, #17]
 80188a2:	2b00      	cmp	r3, #0
 80188a4:	d051      	beq.n	801894a <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ca>
 80188a6:	ee39 7a69 	vsub.f32	s14, s18, s19
 80188aa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80189a0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 80188ae:	eef4 9ac9 	vcmpe.f32	s19, s18
 80188b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80188b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188ba:	edc4 7a08 	vstr	s15, [r4, #32]
 80188be:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 80188c2:	ee17 3a90 	vmov	r3, s15
 80188c6:	eefd 7ae9 	vcvt.s32.f32	s15, s19
 80188ca:	b21a      	sxth	r2, r3
 80188cc:	ee17 3a90 	vmov	r3, s15
 80188d0:	bf48      	it	mi
 80188d2:	8122      	strhmi	r2, [r4, #8]
 80188d4:	b21b      	sxth	r3, r3
 80188d6:	bf56      	itet	pl
 80188d8:	80e2      	strhpl	r2, [r4, #6]
 80188da:	80e3      	strhmi	r3, [r4, #6]
 80188dc:	8123      	strhpl	r3, [r4, #8]
 80188de:	e02c      	b.n	801893a <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 80188e0:	ee70 0ae9 	vsub.f32	s1, s1, s19
 80188e4:	eec0 7a80 	vdiv.f32	s15, s1, s0
 80188e8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80188ec:	edc4 7a05 	vstr	s15, [r4, #20]
 80188f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188f4:	d102      	bne.n	80188fc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x17c>
 80188f6:	2301      	movs	r3, #1
 80188f8:	7463      	strb	r3, [r4, #17]
 80188fa:	e7d1      	b.n	80188a0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 80188fc:	eeb0 7a69 	vmov.f32	s14, s19
 8018900:	ee39 9a69 	vsub.f32	s18, s18, s19
 8018904:	ee38 8a68 	vsub.f32	s16, s16, s17
 8018908:	eea8 7ae7 	vfms.f32	s14, s17, s15
 801890c:	ed84 7a06 	vstr	s14, [r4, #24]
 8018910:	ee89 7a27 	vdiv.f32	s14, s18, s15
 8018914:	ee38 8a47 	vsub.f32	s16, s16, s14
 8018918:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80189a4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x224>
 801891c:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8018920:	ed84 8a07 	vstr	s16, [r4, #28]
 8018924:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801892c:	edc4 7a08 	vstr	s15, [r4, #32]
 8018930:	d503      	bpl.n	801893a <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8018932:	eeb1 8a48 	vneg.f32	s16, s16
 8018936:	ed84 8a07 	vstr	s16, [r4, #28]
 801893a:	60e7      	str	r7, [r4, #12]
 801893c:	7426      	strb	r6, [r4, #16]
 801893e:	61ac      	str	r4, [r5, #24]
 8018940:	b006      	add	sp, #24
 8018942:	ecbd 8b0a 	vpop	{d8-d12}
 8018946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801894a:	7ca3      	ldrb	r3, [r4, #18]
 801894c:	2b00      	cmp	r3, #0
 801894e:	d0f4      	beq.n	801893a <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8018950:	ee38 7a68 	vsub.f32	s14, s16, s17
 8018954:	eddf 6a12 	vldr	s13, [pc, #72]	@ 80189a0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 8018958:	eef4 8ac8 	vcmpe.f32	s17, s16
 801895c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018964:	edc4 7a08 	vstr	s15, [r4, #32]
 8018968:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801896c:	ee17 3a90 	vmov	r3, s15
 8018970:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 8018974:	b21a      	sxth	r2, r3
 8018976:	ee17 3a90 	vmov	r3, s15
 801897a:	bf48      	it	mi
 801897c:	8122      	strhmi	r2, [r4, #8]
 801897e:	b21b      	sxth	r3, r3
 8018980:	bf56      	itet	pl
 8018982:	80e2      	strhpl	r2, [r4, #6]
 8018984:	80e3      	strhmi	r3, [r4, #6]
 8018986:	8123      	strhpl	r3, [r4, #8]
 8018988:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801898c:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8018990:	1a9b      	subs	r3, r3, r2
 8018992:	ee07 3a90 	vmov	s15, r3
 8018996:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801899a:	edc4 7a07 	vstr	s15, [r4, #28]
 801899e:	e7cc      	b.n	801893a <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 80189a0:	447ffffe 	.word	0x447ffffe
 80189a4:	44800000 	.word	0x44800000

080189a8 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>:
 80189a8:	b510      	push	{r4, lr}
 80189aa:	ed2d 8b02 	vpush	{d8}
 80189ae:	eef0 8a62 	vmov.f32	s17, s5
 80189b2:	2100      	movs	r1, #0
 80189b4:	4604      	mov	r4, r0
 80189b6:	eeb0 8a42 	vmov.f32	s16, s4
 80189ba:	f010 fd81 	bl	80294c0 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 80189be:	eef0 7a68 	vmov.f32	s15, s17
 80189c2:	6823      	ldr	r3, [r4, #0]
 80189c4:	4620      	mov	r0, r4
 80189c6:	689b      	ldr	r3, [r3, #8]
 80189c8:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80189cc:	ee17 2a90 	vmov	r2, s15
 80189d0:	eef0 7a48 	vmov.f32	s15, s16
 80189d4:	ecbd 8b02 	vpop	{d8}
 80189d8:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80189dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80189e0:	ee17 1a90 	vmov	r1, s15
 80189e4:	4718      	bx	r3

080189e6 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>:
 80189e6:	b510      	push	{r4, lr}
 80189e8:	ed2d 8b02 	vpush	{d8}
 80189ec:	eef0 8a63 	vmov.f32	s17, s7
 80189f0:	2100      	movs	r1, #0
 80189f2:	4604      	mov	r4, r0
 80189f4:	eeb0 8a43 	vmov.f32	s16, s6
 80189f8:	f010 fe24 	bl	8029644 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 80189fc:	eef0 7a68 	vmov.f32	s15, s17
 8018a00:	6823      	ldr	r3, [r4, #0]
 8018a02:	4620      	mov	r0, r4
 8018a04:	689b      	ldr	r3, [r3, #8]
 8018a06:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8018a0a:	ee17 2a90 	vmov	r2, s15
 8018a0e:	eef0 7a48 	vmov.f32	s15, s16
 8018a12:	ecbd 8b02 	vpop	{d8}
 8018a16:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8018a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018a1e:	ee17 1a90 	vmov	r1, s15
 8018a22:	4718      	bx	r3

08018a24 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>:
 8018a24:	b513      	push	{r0, r1, r4, lr}
 8018a26:	4604      	mov	r4, r0
 8018a28:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 8018a2a:	f004 fdd6 	bl	801d5da <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8018a2e:	eef0 7a60 	vmov.f32	s15, s1
 8018a32:	4620      	mov	r0, r4
 8018a34:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8018a38:	ee17 2a90 	vmov	r2, s15
 8018a3c:	eef0 7a40 	vmov.f32	s15, s0
 8018a40:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8018a44:	ee17 1a90 	vmov	r1, s15
 8018a48:	b002      	add	sp, #8
 8018a4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018a4e:	f010 bc91 	b.w	8029374 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>

08018a52 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>:
 8018a52:	b513      	push	{r0, r1, r4, lr}
 8018a54:	4604      	mov	r4, r0
 8018a56:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 8018a58:	f004 fdbf 	bl	801d5da <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8018a5c:	eef0 7a60 	vmov.f32	s15, s1
 8018a60:	4620      	mov	r0, r4
 8018a62:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8018a66:	ee17 2a90 	vmov	r2, s15
 8018a6a:	eef0 7a40 	vmov.f32	s15, s0
 8018a6e:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8018a72:	ee17 1a90 	vmov	r1, s15
 8018a76:	b002      	add	sp, #8
 8018a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018a7c:	f010 bcc7 	b.w	802940e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>

08018a80 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>:
 8018a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a82:	2400      	movs	r4, #0
 8018a84:	9f07      	ldr	r7, [sp, #28]
 8018a86:	f04f 0e01 	mov.w	lr, #1
 8018a8a:	4626      	mov	r6, r4
 8018a8c:	e9dd 0c05 	ldrd	r0, ip, [sp, #20]
 8018a90:	4463      	add	r3, ip
 8018a92:	4563      	cmp	r3, ip
 8018a94:	d02d      	beq.n	8018af2 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x72>
 8018a96:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
 8018a9a:	2d06      	cmp	r5, #6
 8018a9c:	d8f9      	bhi.n	8018a92 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8018a9e:	fa0e f505 	lsl.w	r5, lr, r5
 8018aa2:	f015 0f66 	tst.w	r5, #102	@ 0x66
 8018aa6:	d10d      	bne.n	8018ac4 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x44>
 8018aa8:	f015 0f10 	tst.w	r5, #16
 8018aac:	d117      	bne.n	8018ade <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5e>
 8018aae:	072d      	lsls	r5, r5, #28
 8018ab0:	d5ef      	bpl.n	8018a92 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8018ab2:	3801      	subs	r0, #1
 8018ab4:	b91e      	cbnz	r6, 8018abe <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x3e>
 8018ab6:	eb07 0580 	add.w	r5, r7, r0, lsl #2
 8018aba:	682d      	ldr	r5, [r5, #0]
 8018abc:	600d      	str	r5, [r1, #0]
 8018abe:	b96c      	cbnz	r4, 8018adc <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8018ac0:	2601      	movs	r6, #1
 8018ac2:	e7e6      	b.n	8018a92 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8018ac4:	b926      	cbnz	r6, 8018ad0 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x50>
 8018ac6:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 8018aca:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8018ace:	600b      	str	r3, [r1, #0]
 8018ad0:	b924      	cbnz	r4, 8018adc <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8018ad2:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8018ad6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018ada:	6013      	str	r3, [r2, #0]
 8018adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018ade:	3801      	subs	r0, #1
 8018ae0:	b91c      	cbnz	r4, 8018aea <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x6a>
 8018ae2:	eb07 0480 	add.w	r4, r7, r0, lsl #2
 8018ae6:	6824      	ldr	r4, [r4, #0]
 8018ae8:	6014      	str	r4, [r2, #0]
 8018aea:	2e00      	cmp	r6, #0
 8018aec:	d1f6      	bne.n	8018adc <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8018aee:	2401      	movs	r4, #1
 8018af0:	e7cf      	b.n	8018a92 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8018af2:	b90e      	cbnz	r6, 8018af8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x78>
 8018af4:	2300      	movs	r3, #0
 8018af6:	600b      	str	r3, [r1, #0]
 8018af8:	2c00      	cmp	r4, #0
 8018afa:	d1ef      	bne.n	8018adc <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8018afc:	2300      	movs	r3, #0
 8018afe:	e7ec      	b.n	8018ada <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5a>

08018b00 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>:
 8018b00:	b538      	push	{r3, r4, r5, lr}
 8018b02:	ed2d 8b0a 	vpush	{d8-d12}
 8018b06:	eef0 ba40 	vmov.f32	s23, s0
 8018b0a:	4604      	mov	r4, r0
 8018b0c:	eeb0 ca60 	vmov.f32	s24, s1
 8018b10:	460d      	mov	r5, r1
 8018b12:	eef0 aa41 	vmov.f32	s21, s2
 8018b16:	eeb0 ba61 	vmov.f32	s22, s3
 8018b1a:	eeb0 9a42 	vmov.f32	s18, s4
 8018b1e:	eef0 9a62 	vmov.f32	s19, s5
 8018b22:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
 8018b26:	ee7b 8a29 	vadd.f32	s17, s22, s19
 8018b2a:	ee3a 8a89 	vadd.f32	s16, s21, s18
 8018b2e:	ee68 8a8a 	vmul.f32	s17, s17, s20
 8018b32:	ee28 8a0a 	vmul.f32	s16, s16, s20
 8018b36:	ee3c 0a68 	vsub.f32	s0, s24, s17
 8018b3a:	ee7b 7ac8 	vsub.f32	s15, s23, s16
 8018b3e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8018b42:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8018b46:	f010 ff55 	bl	80299f4 <sqrtf>
 8018b4a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8018b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b52:	d12e      	bne.n	8018bb2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xb2>
 8018b54:	ee79 7a6a 	vsub.f32	s15, s18, s21
 8018b58:	ee39 7acb 	vsub.f32	s14, s19, s22
 8018b5c:	eeb0 8a6a 	vmov.f32	s16, s21
 8018b60:	eef0 8a4b 	vmov.f32	s17, s22
 8018b64:	eea7 8a8a 	vfma.f32	s16, s15, s20
 8018b68:	eee7 8a0a 	vfma.f32	s17, s14, s20
 8018b6c:	eea7 8a0a 	vfma.f32	s16, s14, s20
 8018b70:	eee7 8aca 	vfms.f32	s17, s15, s20
 8018b74:	2d02      	cmp	r5, #2
 8018b76:	dc2f      	bgt.n	8018bd8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xd8>
 8018b78:	3501      	adds	r5, #1
 8018b7a:	eef0 1a4b 	vmov.f32	s3, s22
 8018b7e:	eeb0 1a6a 	vmov.f32	s2, s21
 8018b82:	4620      	mov	r0, r4
 8018b84:	4629      	mov	r1, r5
 8018b86:	eef0 2a68 	vmov.f32	s5, s17
 8018b8a:	eeb0 2a48 	vmov.f32	s4, s16
 8018b8e:	eef0 0a4c 	vmov.f32	s1, s24
 8018b92:	eeb0 0a6b 	vmov.f32	s0, s23
 8018b96:	f7ff ffb3 	bl	8018b00 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 8018b9a:	eef0 0a68 	vmov.f32	s1, s17
 8018b9e:	eeb0 0a48 	vmov.f32	s0, s16
 8018ba2:	4620      	mov	r0, r4
 8018ba4:	f7ff ff55 	bl	8018a52 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8018ba8:	eeb0 ba68 	vmov.f32	s22, s17
 8018bac:	eef0 aa48 	vmov.f32	s21, s16
 8018bb0:	e7b9      	b.n	8018b26 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x26>
 8018bb2:	ee38 8a6b 	vsub.f32	s16, s16, s23
 8018bb6:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 8018bba:	ee78 8acc 	vsub.f32	s17, s17, s24
 8018bbe:	ee28 7a27 	vmul.f32	s14, s16, s15
 8018bc2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8018bc6:	ee87 8a00 	vdiv.f32	s16, s14, s0
 8018bca:	eec7 8a80 	vdiv.f32	s17, s15, s0
 8018bce:	ee3b 8a88 	vadd.f32	s16, s23, s16
 8018bd2:	ee7c 8a28 	vadd.f32	s17, s24, s17
 8018bd6:	e7cd      	b.n	8018b74 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x74>
 8018bd8:	eef0 0a68 	vmov.f32	s1, s17
 8018bdc:	4620      	mov	r0, r4
 8018bde:	eeb0 0a48 	vmov.f32	s0, s16
 8018be2:	f7ff ff36 	bl	8018a52 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8018be6:	ecbd 8b0a 	vpop	{d8-d12}
 8018bea:	bd38      	pop	{r3, r4, r5, pc}

08018bec <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>:
 8018bec:	b510      	push	{r4, lr}
 8018bee:	ed2d 8b0a 	vpush	{d8-d12}
 8018bf2:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8018bf6:	4604      	mov	r4, r0
 8018bf8:	eeb0 ca40 	vmov.f32	s24, s0
 8018bfc:	2b02      	cmp	r3, #2
 8018bfe:	eeb0 9a60 	vmov.f32	s18, s1
 8018c02:	eef0 9a41 	vmov.f32	s19, s2
 8018c06:	eef0 8a61 	vmov.f32	s17, s3
 8018c0a:	eeb0 ba42 	vmov.f32	s22, s4
 8018c0e:	eef0 ba62 	vmov.f32	s23, s5
 8018c12:	eeb0 aa43 	vmov.f32	s20, s6
 8018c16:	eef0 aa63 	vmov.f32	s21, s7
 8018c1a:	eeb0 8a44 	vmov.f32	s16, s8
 8018c1e:	eef0 ca64 	vmov.f32	s25, s9
 8018c22:	d12c      	bne.n	8018c7e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x92>
 8018c24:	eef0 0a62 	vmov.f32	s1, s5
 8018c28:	eeb0 0a42 	vmov.f32	s0, s4
 8018c2c:	f7ff ff11 	bl	8018a52 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8018c30:	ee79 9acb 	vsub.f32	s19, s19, s22
 8018c34:	ee7a caec 	vsub.f32	s25, s21, s25
 8018c38:	ee78 8aeb 	vsub.f32	s17, s17, s23
 8018c3c:	ee3a 8a48 	vsub.f32	s16, s20, s16
 8018c40:	ee69 9aac 	vmul.f32	s19, s19, s25
 8018c44:	ee28 8a88 	vmul.f32	s16, s17, s16
 8018c48:	eef4 9ac8 	vcmpe.f32	s19, s16
 8018c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c50:	db0f      	blt.n	8018c72 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>
 8018c52:	2101      	movs	r1, #1
 8018c54:	eef0 2a6a 	vmov.f32	s5, s21
 8018c58:	eeb0 2a4a 	vmov.f32	s4, s20
 8018c5c:	4620      	mov	r0, r4
 8018c5e:	eef0 1a6b 	vmov.f32	s3, s23
 8018c62:	eeb0 1a4b 	vmov.f32	s2, s22
 8018c66:	eef0 0a49 	vmov.f32	s1, s18
 8018c6a:	eeb0 0a4c 	vmov.f32	s0, s24
 8018c6e:	f7ff ff47 	bl	8018b00 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 8018c72:	eef0 0a6a 	vmov.f32	s1, s21
 8018c76:	4620      	mov	r0, r4
 8018c78:	eeb0 0a4a 	vmov.f32	s0, s20
 8018c7c:	e035      	b.n	8018cea <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0xfe>
 8018c7e:	2b01      	cmp	r3, #1
 8018c80:	d138      	bne.n	8018cf4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8018c82:	ee31 4ae2 	vsub.f32	s8, s3, s5
 8018c86:	ee33 6a48 	vsub.f32	s12, s6, s16
 8018c8a:	ee71 7a42 	vsub.f32	s15, s2, s4
 8018c8e:	ee73 6ae4 	vsub.f32	s13, s7, s9
 8018c92:	ee26 7a44 	vnmul.f32	s14, s12, s8
 8018c96:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8018c9a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8018c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ca2:	d027      	beq.n	8018cf4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8018ca4:	ee28 8a63 	vnmul.f32	s16, s16, s7
 8018ca8:	ee61 8ac2 	vnmul.f32	s17, s3, s4
 8018cac:	eea4 8a83 	vfma.f32	s16, s9, s6
 8018cb0:	eee1 8a22 	vfma.f32	s17, s2, s5
 8018cb4:	ee68 7a67 	vnmul.f32	s15, s16, s15
 8018cb8:	ee28 8a44 	vnmul.f32	s16, s16, s8
 8018cbc:	eee6 7a28 	vfma.f32	s15, s12, s17
 8018cc0:	eea6 8aa8 	vfma.f32	s16, s13, s17
 8018cc4:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8018cc8:	edd0 7a20 	vldr	s15, [r0, #128]	@ 0x80
 8018ccc:	eec8 0a07 	vdiv.f32	s1, s16, s14
 8018cd0:	ee3c ca40 	vsub.f32	s24, s24, s0
 8018cd4:	ee39 9a60 	vsub.f32	s18, s18, s1
 8018cd8:	ee29 9a09 	vmul.f32	s18, s18, s18
 8018cdc:	eeac 9a0c 	vfma.f32	s18, s24, s24
 8018ce0:	eef4 7ac9 	vcmpe.f32	s15, s18
 8018ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ce8:	db04      	blt.n	8018cf4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8018cea:	f7ff feb2 	bl	8018a52 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8018cee:	ecbd 8b0a 	vpop	{d8-d12}
 8018cf2:	bd10      	pop	{r4, pc}
 8018cf4:	eef0 0a6b 	vmov.f32	s1, s23
 8018cf8:	4620      	mov	r0, r4
 8018cfa:	eeb0 0a4b 	vmov.f32	s0, s22
 8018cfe:	f7ff fea8 	bl	8018a52 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8018d02:	e7b6      	b.n	8018c72 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>

08018d04 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>:
 8018d04:	b510      	push	{r4, lr}
 8018d06:	ed2d 8b0c 	vpush	{d8-d13}
 8018d0a:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 8018d0e:	4604      	mov	r4, r0
 8018d10:	eeb0 9a40 	vmov.f32	s18, s0
 8018d14:	eef0 9a60 	vmov.f32	s19, s1
 8018d18:	eef0 aa41 	vmov.f32	s21, s2
 8018d1c:	eeb0 ba61 	vmov.f32	s22, s3
 8018d20:	b933      	cbnz	r3, 8018d30 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x2c>
 8018d22:	f7ff fe96 	bl	8018a52 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8018d26:	eef0 0a4b 	vmov.f32	s1, s22
 8018d2a:	eeb0 0a6a 	vmov.f32	s0, s21
 8018d2e:	e015      	b.n	8018d5c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x58>
 8018d30:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8018d34:	2b02      	cmp	r3, #2
 8018d36:	ee71 8a40 	vsub.f32	s17, s2, s0
 8018d3a:	ee31 8ae0 	vsub.f32	s16, s3, s1
 8018d3e:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8018d42:	ee28 8a27 	vmul.f32	s16, s16, s15
 8018d46:	d10f      	bne.n	8018d68 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x64>
 8018d48:	ee70 0ae8 	vsub.f32	s1, s1, s17
 8018d4c:	ee30 0a08 	vadd.f32	s0, s0, s16
 8018d50:	f7ff fe7f 	bl	8018a52 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8018d54:	ee7b 0a68 	vsub.f32	s1, s22, s17
 8018d58:	ee3a 0a88 	vadd.f32	s0, s21, s16
 8018d5c:	4620      	mov	r0, r4
 8018d5e:	f7ff fe78 	bl	8018a52 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8018d62:	ecbd 8b0c 	vpop	{d8-d13}
 8018d66:	bd10      	pop	{r4, pc}
 8018d68:	f7ff fe73 	bl	8018a52 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8018d6c:	eef0 0a69 	vmov.f32	s1, s19
 8018d70:	eeb0 0a49 	vmov.f32	s0, s18
 8018d74:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 8018ea4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a0>
 8018d78:	eeb1 aa68 	vneg.f32	s20, s17
 8018d7c:	eddf ba4a 	vldr	s23, [pc, #296]	@ 8018ea8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a4>
 8018d80:	eee8 0a27 	vfma.f32	s1, s16, s15
 8018d84:	4620      	mov	r0, r4
 8018d86:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8018d8a:	ed9f ca48 	vldr	s24, [pc, #288]	@ 8018eac <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a8>
 8018d8e:	eddf ca48 	vldr	s25, [pc, #288]	@ 8018eb0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1ac>
 8018d92:	ed9f da48 	vldr	s26, [pc, #288]	@ 8018eb4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b0>
 8018d96:	eeea 0a2b 	vfma.f32	s1, s20, s23
 8018d9a:	eea8 0a2b 	vfma.f32	s0, s16, s23
 8018d9e:	f7ff fe58 	bl	8018a52 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8018da2:	eef0 0a69 	vmov.f32	s1, s19
 8018da6:	eeb0 0a49 	vmov.f32	s0, s18
 8018daa:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8018eb8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b4>
 8018dae:	4620      	mov	r0, r4
 8018db0:	eee8 0a27 	vfma.f32	s1, s16, s15
 8018db4:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8018db8:	eeea 0a0c 	vfma.f32	s1, s20, s24
 8018dbc:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8018dc0:	f7ff fe47 	bl	8018a52 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8018dc4:	eef0 0a69 	vmov.f32	s1, s19
 8018dc8:	eeb0 0a49 	vmov.f32	s0, s18
 8018dcc:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8018ebc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b8>
 8018dd0:	4620      	mov	r0, r4
 8018dd2:	eee8 0a27 	vfma.f32	s1, s16, s15
 8018dd6:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8018dda:	eeea 0a2c 	vfma.f32	s1, s20, s25
 8018dde:	eea8 0a2c 	vfma.f32	s0, s16, s25
 8018de2:	f7ff fe36 	bl	8018a52 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8018de6:	eef0 0a69 	vmov.f32	s1, s19
 8018dea:	eeb0 0a49 	vmov.f32	s0, s18
 8018dee:	eddf 7a34 	vldr	s15, [pc, #208]	@ 8018ec0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1bc>
 8018df2:	4620      	mov	r0, r4
 8018df4:	eee8 0a27 	vfma.f32	s1, s16, s15
 8018df8:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8018dfc:	eeea 0a0d 	vfma.f32	s1, s20, s26
 8018e00:	eea8 0a0d 	vfma.f32	s0, s16, s26
 8018e04:	f7ff fe25 	bl	8018a52 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8018e08:	ee79 0a88 	vadd.f32	s1, s19, s16
 8018e0c:	ee39 0a28 	vadd.f32	s0, s18, s17
 8018e10:	4620      	mov	r0, r4
 8018e12:	ee70 0ae8 	vsub.f32	s1, s1, s17
 8018e16:	ee30 0a08 	vadd.f32	s0, s0, s16
 8018e1a:	f7ff fe1a 	bl	8018a52 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8018e1e:	eef0 0a69 	vmov.f32	s1, s19
 8018e22:	eeb0 0a49 	vmov.f32	s0, s18
 8018e26:	eddf 7a27 	vldr	s15, [pc, #156]	@ 8018ec4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c0>
 8018e2a:	4620      	mov	r0, r4
 8018e2c:	eee8 0a27 	vfma.f32	s1, s16, s15
 8018e30:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8018e34:	eeea 0a0d 	vfma.f32	s1, s20, s26
 8018e38:	eea8 0a0d 	vfma.f32	s0, s16, s26
 8018e3c:	f7ff fe09 	bl	8018a52 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8018e40:	eef0 0a69 	vmov.f32	s1, s19
 8018e44:	eeb0 0a49 	vmov.f32	s0, s18
 8018e48:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8018ec8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c4>
 8018e4c:	4620      	mov	r0, r4
 8018e4e:	eee8 0a27 	vfma.f32	s1, s16, s15
 8018e52:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8018e56:	eeea 0a2c 	vfma.f32	s1, s20, s25
 8018e5a:	eea8 0a2c 	vfma.f32	s0, s16, s25
 8018e5e:	f7ff fdf8 	bl	8018a52 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8018e62:	eef0 0a69 	vmov.f32	s1, s19
 8018e66:	eeb0 0a49 	vmov.f32	s0, s18
 8018e6a:	eddf 7a18 	vldr	s15, [pc, #96]	@ 8018ecc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c8>
 8018e6e:	4620      	mov	r0, r4
 8018e70:	eee8 0a27 	vfma.f32	s1, s16, s15
 8018e74:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8018e78:	eeea 0a0c 	vfma.f32	s1, s20, s24
 8018e7c:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8018e80:	f7ff fde7 	bl	8018a52 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8018e84:	eef0 0a69 	vmov.f32	s1, s19
 8018e88:	eeb0 0a49 	vmov.f32	s0, s18
 8018e8c:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8018ed0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1cc>
 8018e90:	4620      	mov	r0, r4
 8018e92:	eee8 0a27 	vfma.f32	s1, s16, s15
 8018e96:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8018e9a:	eeea 0a2b 	vfma.f32	s1, s20, s23
 8018e9e:	eea8 0a2b 	vfma.f32	s0, s16, s23
 8018ea2:	e73e      	b.n	8018d22 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1e>
 8018ea4:	3d23d70a 	.word	0x3d23d70a
 8018ea8:	3e8f5c29 	.word	0x3e8f5c29
 8018eac:	3f19999a 	.word	0x3f19999a
 8018eb0:	3f4ccccd 	.word	0x3f4ccccd
 8018eb4:	3f75c28f 	.word	0x3f75c28f
 8018eb8:	3e4ccccd 	.word	0x3e4ccccd
 8018ebc:	3ecccccd 	.word	0x3ecccccd
 8018ec0:	3f3851ec 	.word	0x3f3851ec
 8018ec4:	3fa3d70a 	.word	0x3fa3d70a
 8018ec8:	3fcccccd 	.word	0x3fcccccd
 8018ecc:	3fe66666 	.word	0x3fe66666
 8018ed0:	3ffae148 	.word	0x3ffae148

08018ed4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>:
 8018ed4:	b570      	push	{r4, r5, r6, lr}
 8018ed6:	ed2d 8b06 	vpush	{d8-d10}
 8018eda:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 8018ede:	eef0 aa40 	vmov.f32	s21, s0
 8018ee2:	ed90 9a22 	vldr	s18, [r0, #136]	@ 0x88
 8018ee6:	4604      	mov	r4, r0
 8018ee8:	ee30 8ac8 	vsub.f32	s16, s1, s16
 8018eec:	ee30 9a49 	vsub.f32	s18, s0, s18
 8018ef0:	eeb0 aa60 	vmov.f32	s20, s1
 8018ef4:	ee28 0a08 	vmul.f32	s0, s16, s16
 8018ef8:	eea9 0a09 	vfma.f32	s0, s18, s18
 8018efc:	f010 fd7a 	bl	80299f4 <sqrtf>
 8018f00:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8018f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f08:	dd36      	ble.n	8018f78 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xa4>
 8018f0a:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 8018f0e:	2600      	movs	r6, #0
 8018f10:	edd4 0a23 	vldr	s1, [r4, #140]	@ 0x8c
 8018f14:	eec0 6a27 	vdiv.f32	s13, s0, s15
 8018f18:	f894 5078 	ldrb.w	r5, [r4, #120]	@ 0x78
 8018f1c:	ed94 0a22 	vldr	s0, [r4, #136]	@ 0x88
 8018f20:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8018f24:	eec8 8a26 	vdiv.f32	s17, s16, s13
 8018f28:	ee89 8a26 	vdiv.f32	s16, s18, s13
 8018f2c:	ee70 9a28 	vadd.f32	s19, s0, s17
 8018f30:	ee78 8aaa 	vadd.f32	s17, s17, s21
 8018f34:	ee30 9ac8 	vsub.f32	s18, s1, s16
 8018f38:	ee3a 8a48 	vsub.f32	s16, s20, s16
 8018f3c:	b1fd      	cbz	r5, 8018f7e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xaa>
 8018f3e:	edc4 9a24 	vstr	s19, [r4, #144]	@ 0x90
 8018f42:	eef0 0a49 	vmov.f32	s1, s18
 8018f46:	ed84 9a25 	vstr	s18, [r4, #148]	@ 0x94
 8018f4a:	eeb0 0a69 	vmov.f32	s0, s19
 8018f4e:	edc4 8a26 	vstr	s17, [r4, #152]	@ 0x98
 8018f52:	4620      	mov	r0, r4
 8018f54:	ed84 8a27 	vstr	s16, [r4, #156]	@ 0x9c
 8018f58:	f7ff fd64 	bl	8018a24 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 8018f5c:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
 8018f60:	edc4 9a28 	vstr	s19, [r4, #160]	@ 0xa0
 8018f64:	ed84 9a29 	vstr	s18, [r4, #164]	@ 0xa4
 8018f68:	edc4 8a2a 	vstr	s17, [r4, #168]	@ 0xa8
 8018f6c:	ed84 8a2b 	vstr	s16, [r4, #172]	@ 0xac
 8018f70:	edc4 aa22 	vstr	s21, [r4, #136]	@ 0x88
 8018f74:	ed84 aa23 	vstr	s20, [r4, #140]	@ 0x8c
 8018f78:	ecbd 8b06 	vpop	{d8-d10}
 8018f7c:	bd70      	pop	{r4, r5, r6, pc}
 8018f7e:	f894 307a 	ldrb.w	r3, [r4, #122]	@ 0x7a
 8018f82:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 8018f86:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 8018f8a:	b16b      	cbz	r3, 8018fa8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xd4>
 8018f8c:	eef0 1a49 	vmov.f32	s3, s18
 8018f90:	4620      	mov	r0, r4
 8018f92:	eeb0 1a69 	vmov.f32	s2, s19
 8018f96:	eef0 0a62 	vmov.f32	s1, s5
 8018f9a:	eeb0 0a42 	vmov.f32	s0, s4
 8018f9e:	f7ff feb1 	bl	8018d04 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8018fa2:	f884 507a 	strb.w	r5, [r4, #122]	@ 0x7a
 8018fa6:	e7db      	b.n	8018f60 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>
 8018fa8:	eef0 4a48 	vmov.f32	s9, s16
 8018fac:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 8018fb0:	eeb0 4a68 	vmov.f32	s8, s17
 8018fb4:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 8018fb8:	eef0 3a49 	vmov.f32	s7, s18
 8018fbc:	4620      	mov	r0, r4
 8018fbe:	eeb0 3a69 	vmov.f32	s6, s19
 8018fc2:	f7ff fe13 	bl	8018bec <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 8018fc6:	e7cb      	b.n	8018f60 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>

08018fc8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_>:
 8018fc8:	ee07 2a90 	vmov	s15, r2
 8018fcc:	ee07 1a10 	vmov	s14, r1
 8018fd0:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8018fd4:	eddf 7a04 	vldr	s15, [pc, #16]	@ 8018fe8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_+0x20>
 8018fd8:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 8018fdc:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8018fe0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018fe4:	f7ff bf76 	b.w	8018ed4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8018fe8:	3d000000 	.word	0x3d000000

08018fec <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>:
 8018fec:	b538      	push	{r3, r4, r5, lr}
 8018fee:	ed2d 8b02 	vpush	{d8}
 8018ff2:	f890 5079 	ldrb.w	r5, [r0, #121]	@ 0x79
 8018ff6:	4604      	mov	r4, r0
 8018ff8:	b31d      	cbz	r5, 8019042 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv+0x56>
 8018ffa:	edd0 7a1f 	vldr	s15, [r0, #124]	@ 0x7c
 8018ffe:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 8019002:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 8019006:	ee78 8a67 	vsub.f32	s17, s16, s15
 801900a:	ee38 8a27 	vadd.f32	s16, s16, s15
 801900e:	eef0 0a68 	vmov.f32	s1, s17
 8019012:	f7ff fd07 	bl	8018a24 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 8019016:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 801901a:	eef0 1a48 	vmov.f32	s3, s16
 801901e:	4620      	mov	r0, r4
 8019020:	eeb0 0a41 	vmov.f32	s0, s2
 8019024:	eef0 0a68 	vmov.f32	s1, s17
 8019028:	f7ff fe6c 	bl	8018d04 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 801902c:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 8019030:	eef0 1a68 	vmov.f32	s3, s17
 8019034:	4620      	mov	r0, r4
 8019036:	eef0 0a48 	vmov.f32	s1, s16
 801903a:	eeb0 0a41 	vmov.f32	s0, s2
 801903e:	f7ff fe61 	bl	8018d04 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8019042:	4628      	mov	r0, r5
 8019044:	ecbd 8b02 	vpop	{d8}
 8019048:	bd38      	pop	{r3, r4, r5, pc}

0801904a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>:
 801904a:	b510      	push	{r4, lr}
 801904c:	ed2d 8b02 	vpush	{d8}
 8019050:	4604      	mov	r4, r0
 8019052:	eeb0 8a40 	vmov.f32	s16, s0
 8019056:	eef0 8a60 	vmov.f32	s17, s1
 801905a:	f7ff ffc7 	bl	8018fec <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 801905e:	b9d0      	cbnz	r0, 8019096 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x4c>
 8019060:	4620      	mov	r0, r4
 8019062:	edd4 4a27 	vldr	s9, [r4, #156]	@ 0x9c
 8019066:	ed94 4a26 	vldr	s8, [r4, #152]	@ 0x98
 801906a:	eef0 0a68 	vmov.f32	s1, s17
 801906e:	edd4 3a25 	vldr	s7, [r4, #148]	@ 0x94
 8019072:	eeb0 0a48 	vmov.f32	s0, s16
 8019076:	ed94 3a24 	vldr	s6, [r4, #144]	@ 0x90
 801907a:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 801907e:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 8019082:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 8019086:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 801908a:	f7ff fdaf 	bl	8018bec <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 801908e:	2001      	movs	r0, #1
 8019090:	ecbd 8b02 	vpop	{d8}
 8019094:	bd10      	pop	{r4, pc}
 8019096:	2000      	movs	r0, #0
 8019098:	e7fa      	b.n	8019090 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x46>

0801909a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>:
 801909a:	edd0 1a25 	vldr	s3, [r0, #148]	@ 0x94
 801909e:	ed90 1a24 	vldr	s2, [r0, #144]	@ 0x90
 80190a2:	edd0 0a2b 	vldr	s1, [r0, #172]	@ 0xac
 80190a6:	ed90 0a2a 	vldr	s0, [r0, #168]	@ 0xa8
 80190aa:	f7ff be2b 	b.w	8018d04 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
	...

080190b0 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>:
 80190b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190b4:	b089      	sub	sp, #36	@ 0x24
 80190b6:	461c      	mov	r4, r3
 80190b8:	4682      	mov	sl, r0
 80190ba:	4615      	mov	r5, r2
 80190bc:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 80190c0:	f10d 0820 	add.w	r8, sp, #32
 80190c4:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80190c6:	9304      	str	r3, [sp, #16]
 80190c8:	2300      	movs	r3, #0
 80190ca:	9105      	str	r1, [sp, #20]
 80190cc:	9306      	str	r3, [sp, #24]
 80190ce:	f848 3d04 	str.w	r3, [r8, #-4]!
 80190d2:	9b04      	ldr	r3, [sp, #16]
 80190d4:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	@ 0x48
 80190d8:	f886 307a 	strb.w	r3, [r6, #122]	@ 0x7a
 80190dc:	9b05      	ldr	r3, [sp, #20]
 80190de:	429d      	cmp	r5, r3
 80190e0:	d96d      	bls.n	80191be <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x10e>
 80190e2:	3d01      	subs	r5, #1
 80190e4:	f819 3005 	ldrb.w	r3, [r9, r5]
 80190e8:	2b06      	cmp	r3, #6
 80190ea:	d8f7      	bhi.n	80190dc <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 80190ec:	a201      	add	r2, pc, #4	@ (adr r2, 80190f4 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x44>)
 80190ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80190f2:	bf00      	nop
 80190f4:	08019113 	.word	0x08019113
 80190f8:	080190dd 	.word	0x080190dd
 80190fc:	08019111 	.word	0x08019111
 8019100:	08019135 	.word	0x08019135
 8019104:	08019135 	.word	0x08019135
 8019108:	08019139 	.word	0x08019139
 801910c:	08019179 	.word	0x08019179
 8019110:	3c02      	subs	r4, #2
 8019112:	4650      	mov	r0, sl
 8019114:	9400      	str	r4, [sp, #0]
 8019116:	462b      	mov	r3, r5
 8019118:	4642      	mov	r2, r8
 801911a:	a906      	add	r1, sp, #24
 801911c:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8019120:	f7ff fcae 	bl	8018a80 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8019124:	eddd 0a07 	vldr	s1, [sp, #28]
 8019128:	ed9d 0a06 	vldr	s0, [sp, #24]
 801912c:	4630      	mov	r0, r6
 801912e:	f7ff fed1 	bl	8018ed4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8019132:	e7d3      	b.n	80190dc <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8019134:	3c01      	subs	r4, #1
 8019136:	e7ec      	b.n	8019112 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x62>
 8019138:	f1a4 0b04 	sub.w	fp, r4, #4
 801913c:	3c02      	subs	r4, #2
 801913e:	4650      	mov	r0, sl
 8019140:	462b      	mov	r3, r5
 8019142:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8019146:	f8cd b000 	str.w	fp, [sp]
 801914a:	4642      	mov	r2, r8
 801914c:	a906      	add	r1, sp, #24
 801914e:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8019152:	f7ff fc95 	bl	8018a80 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8019156:	eddd 2a07 	vldr	s5, [sp, #28]
 801915a:	ed9d 2a06 	vldr	s4, [sp, #24]
 801915e:	4630      	mov	r0, r6
 8019160:	ed54 1a01 	vldr	s3, [r4, #-4]
 8019164:	ed14 1a02 	vldr	s2, [r4, #-8]
 8019168:	edd4 0a01 	vldr	s1, [r4, #4]
 801916c:	ed94 0a00 	vldr	s0, [r4]
 8019170:	f7ff fc1a 	bl	80189a8 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8019174:	465c      	mov	r4, fp
 8019176:	e7b1      	b.n	80190dc <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8019178:	f1a4 0b06 	sub.w	fp, r4, #6
 801917c:	3c02      	subs	r4, #2
 801917e:	4650      	mov	r0, sl
 8019180:	462b      	mov	r3, r5
 8019182:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8019186:	f8cd b000 	str.w	fp, [sp]
 801918a:	4642      	mov	r2, r8
 801918c:	a906      	add	r1, sp, #24
 801918e:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8019192:	f7ff fc75 	bl	8018a80 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8019196:	eddd 3a07 	vldr	s7, [sp, #28]
 801919a:	ed9d 3a06 	vldr	s6, [sp, #24]
 801919e:	4630      	mov	r0, r6
 80191a0:	ed54 2a03 	vldr	s5, [r4, #-12]
 80191a4:	ed14 2a04 	vldr	s4, [r4, #-16]
 80191a8:	ed54 1a01 	vldr	s3, [r4, #-4]
 80191ac:	ed14 1a02 	vldr	s2, [r4, #-8]
 80191b0:	edd4 0a01 	vldr	s1, [r4, #4]
 80191b4:	ed94 0a00 	vldr	s0, [r4]
 80191b8:	f7ff fc15 	bl	80189e6 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 80191bc:	e7da      	b.n	8019174 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0xc4>
 80191be:	9b04      	ldr	r3, [sp, #16]
 80191c0:	b113      	cbz	r3, 80191c8 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x118>
 80191c2:	4630      	mov	r0, r6
 80191c4:	f7ff ff69 	bl	801909a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>
 80191c8:	b009      	add	sp, #36	@ 0x24
 80191ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191ce:	bf00      	nop

080191d0 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>:
 80191d0:	eef0 7a60 	vmov.f32	s15, s1
 80191d4:	6803      	ldr	r3, [r0, #0]
 80191d6:	689b      	ldr	r3, [r3, #8]
 80191d8:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80191dc:	ee17 2a90 	vmov	r2, s15
 80191e0:	eef0 7a40 	vmov.f32	s15, s0
 80191e4:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80191e8:	ee17 1a90 	vmov	r1, s15
 80191ec:	4718      	bx	r3
	...

080191f0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>:
 80191f0:	4b04      	ldr	r3, [pc, #16]	@ (8019204 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev+0x14>)
 80191f2:	b510      	push	{r4, lr}
 80191f4:	4604      	mov	r4, r0
 80191f6:	f840 3b14 	str.w	r3, [r0], #20
 80191fa:	f000 ff0d 	bl	801a018 <_ZN8touchgfx7OutlineD1Ev>
 80191fe:	4620      	mov	r0, r4
 8019200:	bd10      	pop	{r4, pc}
 8019202:	bf00      	nop
 8019204:	0802d218 	.word	0x0802d218

08019208 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>:
 8019208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801920c:	ed2d 8b04 	vpush	{d8-d9}
 8019210:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
 8019214:	b0b5      	sub	sp, #212	@ 0xd4
 8019216:	4605      	mov	r5, r0
 8019218:	468b      	mov	fp, r1
 801921a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801921e:	9206      	str	r2, [sp, #24]
 8019220:	461e      	mov	r6, r3
 8019222:	2400      	movs	r4, #0
 8019224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019228:	f240 814f 	bls.w	80194ca <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c2>
 801922c:	23ff      	movs	r3, #255	@ 0xff
 801922e:	1d02      	adds	r2, r0, #4
 8019230:	ed9f 9aa7 	vldr	s18, [pc, #668]	@ 80194d0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c8>
 8019234:	f04f 0800 	mov.w	r8, #0
 8019238:	9300      	str	r3, [sp, #0]
 801923a:	af08      	add	r7, sp, #32
 801923c:	6981      	ldr	r1, [r0, #24]
 801923e:	a808      	add	r0, sp, #32
 8019240:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8019242:	eef0 9a49 	vmov.f32	s19, s18
 8019246:	f00f ff49 	bl	80290dc <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 801924a:	edd5 7a0c 	vldr	s15, [r5, #48]	@ 0x30
 801924e:	4ba1      	ldr	r3, [pc, #644]	@ (80194d4 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2cc>)
 8019250:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8019254:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019258:	2201      	movs	r2, #1
 801925a:	9308      	str	r3, [sp, #32]
 801925c:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 8019260:	edd5 6a08 	vldr	s13, [r5, #32]
 8019264:	eeb0 8a49 	vmov.f32	s16, s18
 8019268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801926c:	9325      	str	r3, [sp, #148]	@ 0x94
 801926e:	f04f 0300 	mov.w	r3, #0
 8019272:	f88d 2099 	strb.w	r2, [sp, #153]	@ 0x99
 8019276:	7f6a      	ldrb	r2, [r5, #29]
 8019278:	eef0 8a49 	vmov.f32	s17, s18
 801927c:	bf48      	it	mi
 801927e:	eef1 7a67 	vnegmi.f32	s15, s15
 8019282:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 8019286:	f88d 309a 	strb.w	r3, [sp, #154]	@ 0x9a
 801928a:	46c1      	mov	r9, r8
 801928c:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8019290:	f04f 0a01 	mov.w	sl, #1
 8019294:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019298:	7fab      	ldrb	r3, [r5, #30]
 801929a:	942a      	str	r4, [sp, #168]	@ 0xa8
 801929c:	435a      	muls	r2, r3
 801929e:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 80192a2:	ee26 7aa7 	vmul.f32	s14, s13, s15
 80192a6:	edcd 7a27 	vstr	s15, [sp, #156]	@ 0x9c
 80192aa:	1c53      	adds	r3, r2, #1
 80192ac:	942b      	str	r4, [sp, #172]	@ 0xac
 80192ae:	942c      	str	r4, [sp, #176]	@ 0xb0
 80192b0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80192b4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80192b8:	942d      	str	r4, [sp, #180]	@ 0xb4
 80192ba:	942e      	str	r4, [sp, #184]	@ 0xb8
 80192bc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80192c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80192c4:	942f      	str	r4, [sp, #188]	@ 0xbc
 80192c6:	9430      	str	r4, [sp, #192]	@ 0xc0
 80192c8:	9431      	str	r4, [sp, #196]	@ 0xc4
 80192ca:	9432      	str	r4, [sp, #200]	@ 0xc8
 80192cc:	9433      	str	r4, [sp, #204]	@ 0xcc
 80192ce:	4644      	mov	r4, r8
 80192d0:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 80192d4:	edcd 7a28 	vstr	s15, [sp, #160]	@ 0xa0
 80192d8:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
 80192dc:	f88d 10a5 	strb.w	r1, [sp, #165]	@ 0xa5
 80192e0:	f88d 30a6 	strb.w	r3, [sp, #166]	@ 0xa6
 80192e4:	9b06      	ldr	r3, [sp, #24]
 80192e6:	454b      	cmp	r3, r9
 80192e8:	f000 80cc 	beq.w	8019484 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x27c>
 80192ec:	f109 0301 	add.w	r3, r9, #1
 80192f0:	9305      	str	r3, [sp, #20]
 80192f2:	f81b 3009 	ldrb.w	r3, [fp, r9]
 80192f6:	2b06      	cmp	r3, #6
 80192f8:	d839      	bhi.n	801936e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 80192fa:	e8df f003 	tbb	[pc, r3]
 80192fe:	3b04      	.short	0x3b04
 8019300:	817c6f60 	.word	0x817c6f60
 8019304:	a0          	.byte	0xa0
 8019305:	00          	.byte	0x00
 8019306:	45c1      	cmp	r9, r8
 8019308:	d92b      	bls.n	8019362 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 801930a:	eef0 0a49 	vmov.f32	s1, s18
 801930e:	4638      	mov	r0, r7
 8019310:	eeb0 0a69 	vmov.f32	s0, s19
 8019314:	f7ff fdde 	bl	8018ed4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8019318:	4638      	mov	r0, r7
 801931a:	f7ff fe67 	bl	8018fec <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 801931e:	4681      	mov	r9, r0
 8019320:	b9f8      	cbnz	r0, 8019362 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 8019322:	eef0 0a49 	vmov.f32	s1, s18
 8019326:	4638      	mov	r0, r7
 8019328:	eeb0 0a69 	vmov.f32	s0, s19
 801932c:	f7ff fe8d 	bl	801904a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 8019330:	4628      	mov	r0, r5
 8019332:	4623      	mov	r3, r4
 8019334:	9a05      	ldr	r2, [sp, #20]
 8019336:	4641      	mov	r1, r8
 8019338:	edcd 9a2a 	vstr	s19, [sp, #168]	@ 0xa8
 801933c:	ed8d 9a2b 	vstr	s18, [sp, #172]	@ 0xac
 8019340:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 8019344:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 8019348:	e9cd 9702 	strd	r9, r7, [sp, #8]
 801934c:	e9cd b600 	strd	fp, r6, [sp]
 8019350:	f7ff feae 	bl	80190b0 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8019354:	eef0 0a49 	vmov.f32	s1, s18
 8019358:	eeb0 0a69 	vmov.f32	s0, s19
 801935c:	4638      	mov	r0, r7
 801935e:	f7ff fe74 	bl	801904a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 8019362:	eeb0 8a49 	vmov.f32	s16, s18
 8019366:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801936a:	eef0 8a69 	vmov.f32	s17, s19
 801936e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8019372:	e7b7      	b.n	80192e4 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0xdc>
 8019374:	45c1      	cmp	r9, r8
 8019376:	d90d      	bls.n	8019394 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 8019378:	4638      	mov	r0, r7
 801937a:	f7ff fe37 	bl	8018fec <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 801937e:	b948      	cbnz	r0, 8019394 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 8019380:	4623      	mov	r3, r4
 8019382:	464a      	mov	r2, r9
 8019384:	4641      	mov	r1, r8
 8019386:	4628      	mov	r0, r5
 8019388:	e9cd a702 	strd	sl, r7, [sp, #8]
 801938c:	e9cd b600 	strd	fp, r6, [sp]
 8019390:	f7ff fe8e 	bl	80190b0 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8019394:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8019398:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 801939c:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 80193a0:	3402      	adds	r4, #2
 80193a2:	edd3 8a00 	vldr	s17, [r3]
 80193a6:	46c8      	mov	r8, r9
 80193a8:	ed93 8a01 	vldr	s16, [r3, #4]
 80193ac:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 80193b0:	eef0 9a68 	vmov.f32	s19, s17
 80193b4:	ed8d 8a2b 	vstr	s16, [sp, #172]	@ 0xac
 80193b8:	eeb0 9a48 	vmov.f32	s18, s16
 80193bc:	e7d7      	b.n	801936e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 80193be:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80193c2:	4638      	mov	r0, r7
 80193c4:	3402      	adds	r4, #2
 80193c6:	edd3 8a00 	vldr	s17, [r3]
 80193ca:	ed93 8a01 	vldr	s16, [r3, #4]
 80193ce:	eeb0 0a68 	vmov.f32	s0, s17
 80193d2:	eef0 0a48 	vmov.f32	s1, s16
 80193d6:	f7ff fd7d 	bl	8018ed4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 80193da:	e7c8      	b.n	801936e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 80193dc:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80193e0:	edd3 8a00 	vldr	s17, [r3]
 80193e4:	eef0 0a48 	vmov.f32	s1, s16
 80193e8:	4638      	mov	r0, r7
 80193ea:	eeb0 0a68 	vmov.f32	s0, s17
 80193ee:	3401      	adds	r4, #1
 80193f0:	f7ff fd70 	bl	8018ed4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 80193f4:	e7bb      	b.n	801936e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 80193f6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80193fa:	ed93 8a00 	vldr	s16, [r3]
 80193fe:	e7f1      	b.n	80193e4 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x1dc>
 8019400:	00a3      	lsls	r3, r4, #2
 8019402:	eef0 0a48 	vmov.f32	s1, s16
 8019406:	eeb0 0a68 	vmov.f32	s0, s17
 801940a:	4638      	mov	r0, r7
 801940c:	f103 0208 	add.w	r2, r3, #8
 8019410:	f103 090c 	add.w	r9, r3, #12
 8019414:	4433      	add	r3, r6
 8019416:	3404      	adds	r4, #4
 8019418:	4432      	add	r2, r6
 801941a:	44b1      	add	r9, r6
 801941c:	edd3 1a01 	vldr	s3, [r3, #4]
 8019420:	ed92 2a00 	vldr	s4, [r2]
 8019424:	edd9 2a00 	vldr	s5, [r9]
 8019428:	ed93 1a00 	vldr	s2, [r3]
 801942c:	9207      	str	r2, [sp, #28]
 801942e:	f7ff fabb 	bl	80189a8 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8019432:	9a07      	ldr	r2, [sp, #28]
 8019434:	ed99 8a00 	vldr	s16, [r9]
 8019438:	edd2 8a00 	vldr	s17, [r2]
 801943c:	e797      	b.n	801936e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 801943e:	00a3      	lsls	r3, r4, #2
 8019440:	eef0 0a48 	vmov.f32	s1, s16
 8019444:	eeb0 0a68 	vmov.f32	s0, s17
 8019448:	4638      	mov	r0, r7
 801944a:	f103 0210 	add.w	r2, r3, #16
 801944e:	f103 0914 	add.w	r9, r3, #20
 8019452:	4433      	add	r3, r6
 8019454:	3406      	adds	r4, #6
 8019456:	4432      	add	r2, r6
 8019458:	44b1      	add	r9, r6
 801945a:	edd3 2a03 	vldr	s5, [r3, #12]
 801945e:	ed92 3a00 	vldr	s6, [r2]
 8019462:	edd9 3a00 	vldr	s7, [r9]
 8019466:	ed93 2a02 	vldr	s4, [r3, #8]
 801946a:	edd3 1a01 	vldr	s3, [r3, #4]
 801946e:	ed93 1a00 	vldr	s2, [r3]
 8019472:	9207      	str	r2, [sp, #28]
 8019474:	f7ff fab7 	bl	80189e6 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8019478:	9a07      	ldr	r2, [sp, #28]
 801947a:	ed99 8a00 	vldr	s16, [r9]
 801947e:	edd2 8a00 	vldr	s17, [r2]
 8019482:	e774      	b.n	801936e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8019484:	9b06      	ldr	r3, [sp, #24]
 8019486:	af08      	add	r7, sp, #32
 8019488:	4543      	cmp	r3, r8
 801948a:	d90f      	bls.n	80194ac <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 801948c:	4638      	mov	r0, r7
 801948e:	f7ff fdad 	bl	8018fec <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8019492:	b958      	cbnz	r0, 80194ac <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 8019494:	2301      	movs	r3, #1
 8019496:	9703      	str	r7, [sp, #12]
 8019498:	f8cd b000 	str.w	fp, [sp]
 801949c:	4641      	mov	r1, r8
 801949e:	9a06      	ldr	r2, [sp, #24]
 80194a0:	4628      	mov	r0, r5
 80194a2:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80194a6:	4623      	mov	r3, r4
 80194a8:	f7ff fe02 	bl	80190b0 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 80194ac:	f89d 10a6 	ldrb.w	r1, [sp, #166]	@ 0xa6
 80194b0:	4638      	mov	r0, r7
 80194b2:	f00f fea7 	bl	8029204 <_ZN8touchgfx6Canvas6renderEh>
 80194b6:	4604      	mov	r4, r0
 80194b8:	4638      	mov	r0, r7
 80194ba:	f7ff fe99 	bl	80191f0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 80194be:	4620      	mov	r0, r4
 80194c0:	b035      	add	sp, #212	@ 0xd4
 80194c2:	ecbd 8b04 	vpop	{d8-d9}
 80194c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194ca:	2401      	movs	r4, #1
 80194cc:	e7f7      	b.n	80194be <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2b6>
 80194ce:	bf00      	nop
 80194d0:	00000000 	.word	0x00000000
 80194d4:	0802cb44 	.word	0x0802cb44

080194d8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD0Ev>:
 80194d8:	b510      	push	{r4, lr}
 80194da:	4604      	mov	r4, r0
 80194dc:	f7ff fe88 	bl	80191f0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 80194e0:	21b0      	movs	r1, #176	@ 0xb0
 80194e2:	4620      	mov	r0, r4
 80194e4:	f010 fa5b 	bl	802999e <_ZdlPvj>
 80194e8:	4620      	mov	r0, r4
 80194ea:	bd10      	pop	{r4, pc}

080194ec <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>:
 80194ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80194f0:	4698      	mov	r8, r3
 80194f2:	23ff      	movs	r3, #255	@ 0xff
 80194f4:	4607      	mov	r7, r0
 80194f6:	4689      	mov	r9, r1
 80194f8:	4692      	mov	sl, r2
 80194fa:	1d02      	adds	r2, r0, #4
 80194fc:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 8019500:	2400      	movs	r4, #0
 8019502:	44ca      	add	sl, r9
 8019504:	ed2d 8b06 	vpush	{d8-d10}
 8019508:	b0aa      	sub	sp, #168	@ 0xa8
 801950a:	ed9f 8a81 	vldr	s16, [pc, #516]	@ 8019710 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 801950e:	9300      	str	r3, [sp, #0]
 8019510:	eef0 8a48 	vmov.f32	s17, s16
 8019514:	6981      	ldr	r1, [r0, #24]
 8019516:	a80d      	add	r0, sp, #52	@ 0x34
 8019518:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 801951a:	f00f fddf 	bl	80290dc <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 801951e:	7f3b      	ldrb	r3, [r7, #28]
 8019520:	eddf 0a7b 	vldr	s1, [pc, #492]	@ 8019710 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 8019524:	4628      	mov	r0, r5
 8019526:	1e5a      	subs	r2, r3, #1
 8019528:	eeb0 0a60 	vmov.f32	s0, s1
 801952c:	4253      	negs	r3, r2
 801952e:	4153      	adcs	r3, r2
 8019530:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
 8019534:	f004 f851 	bl	801d5da <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8019538:	eeb0 9a40 	vmov.f32	s18, s0
 801953c:	eef0 9a60 	vmov.f32	s19, s1
 8019540:	45ca      	cmp	sl, r9
 8019542:	f000 80cd 	beq.w	80196e0 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x1f4>
 8019546:	f819 3b01 	ldrb.w	r3, [r9], #1
 801954a:	2b06      	cmp	r3, #6
 801954c:	d8f8      	bhi.n	8019540 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 801954e:	e8df f003 	tbb	[pc, r3]
 8019552:	0804      	.short	0x0804
 8019554:	58533f2a 	.word	0x58533f2a
 8019558:	8a          	.byte	0x8a
 8019559:	00          	.byte	0x00
 801955a:	a80d      	add	r0, sp, #52	@ 0x34
 801955c:	f00f fe30 	bl	80291c0 <_ZN8touchgfx6Canvas5closeEv>
 8019560:	e7ee      	b.n	8019540 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8019562:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8019566:	4628      	mov	r0, r5
 8019568:	ed93 8a01 	vldr	s16, [r3, #4]
 801956c:	edd3 8a00 	vldr	s17, [r3]
 8019570:	eef0 0a48 	vmov.f32	s1, s16
 8019574:	eeb0 0a68 	vmov.f32	s0, s17
 8019578:	f004 f82f 	bl	801d5da <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801957c:	a80d      	add	r0, sp, #52	@ 0x34
 801957e:	eef0 7a60 	vmov.f32	s15, s1
 8019582:	eeb0 9a40 	vmov.f32	s18, s0
 8019586:	eef0 9a60 	vmov.f32	s19, s1
 801958a:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801958e:	ee17 2a90 	vmov	r2, s15
 8019592:	eef0 7a40 	vmov.f32	s15, s0
 8019596:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801959a:	ee17 1a90 	vmov	r1, s15
 801959e:	f00f fee9 	bl	8029374 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 80195a2:	3402      	adds	r4, #2
 80195a4:	e7cc      	b.n	8019540 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 80195a6:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 80195aa:	4628      	mov	r0, r5
 80195ac:	edd3 8a00 	vldr	s17, [r3]
 80195b0:	ed93 8a01 	vldr	s16, [r3, #4]
 80195b4:	eeb0 0a68 	vmov.f32	s0, s17
 80195b8:	eef0 0a48 	vmov.f32	s1, s16
 80195bc:	f004 f80d 	bl	801d5da <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80195c0:	a80d      	add	r0, sp, #52	@ 0x34
 80195c2:	eeb0 9a40 	vmov.f32	s18, s0
 80195c6:	eef0 9a60 	vmov.f32	s19, s1
 80195ca:	f7ff fe01 	bl	80191d0 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 80195ce:	e7e8      	b.n	80195a2 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xb6>
 80195d0:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 80195d4:	edd3 8a00 	vldr	s17, [r3]
 80195d8:	eef0 0a48 	vmov.f32	s1, s16
 80195dc:	4628      	mov	r0, r5
 80195de:	eeb0 0a68 	vmov.f32	s0, s17
 80195e2:	3401      	adds	r4, #1
 80195e4:	f003 fff9 	bl	801d5da <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80195e8:	a80d      	add	r0, sp, #52	@ 0x34
 80195ea:	eef0 9a60 	vmov.f32	s19, s1
 80195ee:	eeb0 9a40 	vmov.f32	s18, s0
 80195f2:	f7ff fded 	bl	80191d0 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 80195f6:	e7a3      	b.n	8019540 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 80195f8:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 80195fc:	ed93 8a00 	vldr	s16, [r3]
 8019600:	e7ea      	b.n	80195d8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xec>
 8019602:	1ca3      	adds	r3, r4, #2
 8019604:	4628      	mov	r0, r5
 8019606:	3404      	adds	r4, #4
 8019608:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 801960c:	ed53 0a01 	vldr	s1, [r3, #-4]
 8019610:	ed13 0a02 	vldr	s0, [r3, #-8]
 8019614:	edd3 8a00 	vldr	s17, [r3]
 8019618:	ed93 8a01 	vldr	s16, [r3, #4]
 801961c:	f003 ffdd 	bl	801d5da <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8019620:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 8019624:	eeb0 0a68 	vmov.f32	s0, s17
 8019628:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 801962c:	eef0 0a48 	vmov.f32	s1, s16
 8019630:	4628      	mov	r0, r5
 8019632:	f003 ffd2 	bl	801d5da <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8019636:	eddd 1a0a 	vldr	s3, [sp, #40]	@ 0x28
 801963a:	eef0 2a60 	vmov.f32	s5, s1
 801963e:	ed9d 1a09 	vldr	s2, [sp, #36]	@ 0x24
 8019642:	eeb0 2a40 	vmov.f32	s4, s0
 8019646:	a80d      	add	r0, sp, #52	@ 0x34
 8019648:	eeb0 aa40 	vmov.f32	s20, s0
 801964c:	eef0 aa60 	vmov.f32	s21, s1
 8019650:	eeb0 0a49 	vmov.f32	s0, s18
 8019654:	eef0 0a69 	vmov.f32	s1, s19
 8019658:	f7ff f9a6 	bl	80189a8 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 801965c:	eef0 9a6a 	vmov.f32	s19, s21
 8019660:	eeb0 9a4a 	vmov.f32	s18, s20
 8019664:	e76c      	b.n	8019540 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8019666:	1d26      	adds	r6, r4, #4
 8019668:	4628      	mov	r0, r5
 801966a:	3406      	adds	r4, #6
 801966c:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8019670:	ed56 0a03 	vldr	s1, [r6, #-12]
 8019674:	ed16 0a04 	vldr	s0, [r6, #-16]
 8019678:	edd6 8a00 	vldr	s17, [r6]
 801967c:	ed96 8a01 	vldr	s16, [r6, #4]
 8019680:	f003 ffab 	bl	801d5da <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8019684:	ed8d 0a07 	vstr	s0, [sp, #28]
 8019688:	4628      	mov	r0, r5
 801968a:	ed16 0a02 	vldr	s0, [r6, #-8]
 801968e:	edcd 0a08 	vstr	s1, [sp, #32]
 8019692:	ed56 0a01 	vldr	s1, [r6, #-4]
 8019696:	f003 ffa0 	bl	801d5da <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801969a:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 801969e:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 80196a2:	eeb0 0a68 	vmov.f32	s0, s17
 80196a6:	eef0 0a48 	vmov.f32	s1, s16
 80196aa:	4628      	mov	r0, r5
 80196ac:	f003 ff95 	bl	801d5da <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80196b0:	eddd 2a0a 	vldr	s5, [sp, #40]	@ 0x28
 80196b4:	eeb0 3a40 	vmov.f32	s6, s0
 80196b8:	ed9d 2a09 	vldr	s4, [sp, #36]	@ 0x24
 80196bc:	eef0 3a60 	vmov.f32	s7, s1
 80196c0:	eddd 1a08 	vldr	s3, [sp, #32]
 80196c4:	eeb0 aa40 	vmov.f32	s20, s0
 80196c8:	ed9d 1a07 	vldr	s2, [sp, #28]
 80196cc:	eef0 aa60 	vmov.f32	s21, s1
 80196d0:	a80d      	add	r0, sp, #52	@ 0x34
 80196d2:	eef0 0a69 	vmov.f32	s1, s19
 80196d6:	eeb0 0a49 	vmov.f32	s0, s18
 80196da:	f7ff f984 	bl	80189e6 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 80196de:	e7bd      	b.n	801965c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x170>
 80196e0:	7f7b      	ldrb	r3, [r7, #29]
 80196e2:	a80d      	add	r0, sp, #52	@ 0x34
 80196e4:	7fb9      	ldrb	r1, [r7, #30]
 80196e6:	4359      	muls	r1, r3
 80196e8:	1c4b      	adds	r3, r1, #1
 80196ea:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80196ee:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80196f2:	f00f fd87 	bl	8029204 <_ZN8touchgfx6Canvas6renderEh>
 80196f6:	4b07      	ldr	r3, [pc, #28]	@ (8019714 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x228>)
 80196f8:	4604      	mov	r4, r0
 80196fa:	a812      	add	r0, sp, #72	@ 0x48
 80196fc:	930d      	str	r3, [sp, #52]	@ 0x34
 80196fe:	f000 fc8b 	bl	801a018 <_ZN8touchgfx7OutlineD1Ev>
 8019702:	4620      	mov	r0, r4
 8019704:	b02a      	add	sp, #168	@ 0xa8
 8019706:	ecbd 8b06 	vpop	{d8-d10}
 801970a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801970e:	bf00      	nop
 8019710:	00000000 	.word	0x00000000
 8019714:	0802d218 	.word	0x0802d218

08019718 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>:
 8019718:	b410      	push	{r4}
 801971a:	7f04      	ldrb	r4, [r0, #28]
 801971c:	b11c      	cbz	r4, 8019726 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE+0xe>
 801971e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019722:	f7ff bee3 	b.w	80194ec <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>
 8019726:	f85d 4b04 	ldr.w	r4, [sp], #4
 801972a:	f7ff bd6d 	b.w	8019208 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>

0801972e <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_>:
 801972e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019732:	4691      	mov	r9, r2
 8019734:	4602      	mov	r2, r0
 8019736:	4606      	mov	r6, r0
 8019738:	4688      	mov	r8, r1
 801973a:	f852 0f26 	ldr.w	r0, [r2, #38]!
 801973e:	469a      	mov	sl, r3
 8019740:	ab02      	add	r3, sp, #8
 8019742:	af02      	add	r7, sp, #8
 8019744:	6851      	ldr	r1, [r2, #4]
 8019746:	c303      	stmia	r3!, {r0, r1}
 8019748:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801974c:	2b00      	cmp	r3, #0
 801974e:	dd2f      	ble.n	80197b0 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 8019750:	f9bd 400e 	ldrsh.w	r4, [sp, #14]
 8019754:	2c00      	cmp	r4, #0
 8019756:	dd2b      	ble.n	80197b0 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 8019758:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801975c:	441c      	add	r4, r3
 801975e:	b2a4      	uxth	r4, r4
 8019760:	b225      	sxth	r5, r4
 8019762:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8019766:	42ab      	cmp	r3, r5
 8019768:	da22      	bge.n	80197b0 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 801976a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801976c:	464a      	mov	r2, r9
 801976e:	9701      	str	r7, [sp, #4]
 8019770:	4641      	mov	r1, r8
 8019772:	9300      	str	r3, [sp, #0]
 8019774:	4630      	mov	r0, r6
 8019776:	4653      	mov	r3, sl
 8019778:	f7ff ffce 	bl	8019718 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 801977c:	b940      	cbnz	r0, 8019790 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 801977e:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8019782:	2b01      	cmp	r3, #1
 8019784:	d004      	beq.n	8019790 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 8019786:	3301      	adds	r3, #1
 8019788:	105b      	asrs	r3, r3, #1
 801978a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801978e:	e7ec      	b.n	801976a <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3c>
 8019790:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8019794:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8019798:	4413      	add	r3, r2
 801979a:	b29b      	uxth	r3, r3
 801979c:	441a      	add	r2, r3
 801979e:	f8ad 300a 	strh.w	r3, [sp, #10]
 80197a2:	b212      	sxth	r2, r2
 80197a4:	4295      	cmp	r5, r2
 80197a6:	dadc      	bge.n	8019762 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 80197a8:	1ae3      	subs	r3, r4, r3
 80197aa:	f8ad 300e 	strh.w	r3, [sp, #14]
 80197ae:	e7d8      	b.n	8019762 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 80197b0:	b004      	add	sp, #16
 80197b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080197b6 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 80197b6:	0c0b      	lsrs	r3, r1, #16
 80197b8:	60c1      	str	r1, [r0, #12]
 80197ba:	7481      	strb	r1, [r0, #18]
 80197bc:	7403      	strb	r3, [r0, #16]
 80197be:	0a0b      	lsrs	r3, r1, #8
 80197c0:	7443      	strb	r3, [r0, #17]
 80197c2:	4770      	bx	lr

080197c4 <_ZThn8_N8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 80197c4:	f1a0 0008 	sub.w	r0, r0, #8
 80197c8:	e7f5      	b.n	80197b6 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
	...

080197cc <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv>:
 80197cc:	b508      	push	{r3, lr}
 80197ce:	4b05      	ldr	r3, [pc, #20]	@ (80197e4 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv+0x18>)
 80197d0:	6818      	ldr	r0, [r3, #0]
 80197d2:	6803      	ldr	r3, [r0, #0]
 80197d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80197d8:	4798      	blx	r3
 80197da:	1e43      	subs	r3, r0, #1
 80197dc:	4258      	negs	r0, r3
 80197de:	4158      	adcs	r0, r3
 80197e0:	bd08      	pop	{r3, pc}
 80197e2:	bf00      	nop
 80197e4:	24013b58 	.word	0x24013b58

080197e8 <_ZNK8touchgfx13PainterRGB8885paintEPhssssh>:
 80197e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80197ec:	b410      	push	{r4}
 80197ee:	188c      	adds	r4, r1, r2
 80197f0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80197f4:	68c2      	ldr	r2, [r0, #12]
 80197f6:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 80197fa:	4620      	mov	r0, r4
 80197fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019800:	f7fc b8d2 	b.w	80159a8 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>

08019804 <_ZNK8touchgfx13PainterRGB8888tearDownEv>:
 8019804:	f7fc b87a 	b.w	80158fc <_ZN8touchgfx5paint8tearDownEv>

08019808 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh>:
 8019808:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801980c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019810:	4411      	add	r1, r2
 8019812:	7c42      	ldrb	r2, [r0, #17]
 8019814:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
 8019818:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 801981c:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 8019820:	2a00      	cmp	r2, #0
 8019822:	f000 8084 	beq.w	801992e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x126>
 8019826:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801982a:	ed90 7a08 	vldr	s14, [r0, #32]
 801982e:	42a2      	cmp	r2, r4
 8019830:	68c3      	ldr	r3, [r0, #12]
 8019832:	db20      	blt.n	8019876 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x6e>
 8019834:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8019838:	f640 72fc 	movw	r2, #4092	@ 0xffc
 801983c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019840:	bfc8      	it	gt
 8019842:	2200      	movgt	r2, #0
 8019844:	589a      	ldr	r2, [r3, r2]
 8019846:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801984a:	7c03      	ldrb	r3, [r0, #16]
 801984c:	fa5f fc82 	uxtb.w	ip, r2
 8019850:	f3c2 2707 	ubfx	r7, r2, #8, #8
 8019854:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8019858:	440e      	add	r6, r1
 801985a:	b36b      	cbz	r3, 80198b8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 801985c:	2dff      	cmp	r5, #255	@ 0xff
 801985e:	d12b      	bne.n	80198b8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 8019860:	42b1      	cmp	r1, r6
 8019862:	f080 8204 	bcs.w	8019c6e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8019866:	f881 c000 	strb.w	ip, [r1]
 801986a:	3103      	adds	r1, #3
 801986c:	f801 7c02 	strb.w	r7, [r1, #-2]
 8019870:	f801 4c01 	strb.w	r4, [r1, #-1]
 8019874:	e7f4      	b.n	8019860 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x58>
 8019876:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 801987a:	42a7      	cmp	r7, r4
 801987c:	dc08      	bgt.n	8019890 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x88>
 801987e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8019882:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8019886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801988a:	bfd8      	it	le
 801988c:	2200      	movle	r2, #0
 801988e:	e7d9      	b.n	8019844 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 8019890:	1aa2      	subs	r2, r4, r2
 8019892:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8019896:	ee07 2a90 	vmov	s15, r2
 801989a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801989e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80198a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80198a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80198aa:	ee17 2a90 	vmov	r2, s15
 80198ae:	bfd8      	it	le
 80198b0:	f202 32ff 	addwle	r2, r2, #1023	@ 0x3ff
 80198b4:	0092      	lsls	r2, r2, #2
 80198b6:	e7c5      	b.n	8019844 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 80198b8:	0e12      	lsrs	r2, r2, #24
 80198ba:	4355      	muls	r5, r2
 80198bc:	1c6a      	adds	r2, r5, #1
 80198be:	eb02 2525 	add.w	r5, r2, r5, asr #8
 80198c2:	122d      	asrs	r5, r5, #8
 80198c4:	43e8      	mvns	r0, r5
 80198c6:	b2ad      	uxth	r5, r5
 80198c8:	fb1c fc05 	smulbb	ip, ip, r5
 80198cc:	b2c0      	uxtb	r0, r0
 80198ce:	fb17 f705 	smulbb	r7, r7, r5
 80198d2:	fb14 f505 	smulbb	r5, r4, r5
 80198d6:	fa1f fc8c 	uxth.w	ip, ip
 80198da:	b2bf      	uxth	r7, r7
 80198dc:	b2ad      	uxth	r5, r5
 80198de:	428e      	cmp	r6, r1
 80198e0:	f101 0303 	add.w	r3, r1, #3
 80198e4:	f240 81c3 	bls.w	8019c6e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 80198e8:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 80198ec:	fb02 c200 	mla	r2, r2, r0, ip
 80198f0:	b292      	uxth	r2, r2
 80198f2:	1c51      	adds	r1, r2, #1
 80198f4:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80198f8:	1212      	asrs	r2, r2, #8
 80198fa:	f803 2c03 	strb.w	r2, [r3, #-3]
 80198fe:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8019902:	fb02 7200 	mla	r2, r2, r0, r7
 8019906:	b292      	uxth	r2, r2
 8019908:	1c51      	adds	r1, r2, #1
 801990a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801990e:	1212      	asrs	r2, r2, #8
 8019910:	f803 2c02 	strb.w	r2, [r3, #-2]
 8019914:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8019918:	fb02 5200 	mla	r2, r2, r0, r5
 801991c:	b292      	uxth	r2, r2
 801991e:	1c51      	adds	r1, r2, #1
 8019920:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8019924:	4619      	mov	r1, r3
 8019926:	1212      	asrs	r2, r2, #8
 8019928:	f803 2c01 	strb.w	r2, [r3, #-1]
 801992c:	e7d7      	b.n	80198de <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xd6>
 801992e:	7c82      	ldrb	r2, [r0, #18]
 8019930:	2a00      	cmp	r2, #0
 8019932:	d047      	beq.n	80199c4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1bc>
 8019934:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8019938:	ee07 2a10 	vmov	s14, r2
 801993c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019940:	ee07 3a90 	vmov	s15, r3
 8019944:	461a      	mov	r2, r3
 8019946:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801994a:	eef4 6ac7 	vcmpe.f32	s13, s14
 801994e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019952:	f200 808e 	bhi.w	8019a72 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x26a>
 8019956:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801995a:	f640 72fc 	movw	r2, #4092	@ 0xffc
 801995e:	68c7      	ldr	r7, [r0, #12]
 8019960:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019964:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019968:	ee06 6a90 	vmov	s13, r6
 801996c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019970:	eef4 7ae6 	vcmpe.f32	s15, s13
 8019974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019978:	bf4a      	itet	mi
 801997a:	eefd 7ae7 	vcvtmi.s32.f32	s15, s15
 801997e:	4634      	movpl	r4, r6
 8019980:	ee17 4a90 	vmovmi	r4, s15
 8019984:	edd0 7a08 	vldr	s15, [r0, #32]
 8019988:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801998c:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8019990:	448e      	add	lr, r1
 8019992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019996:	bfc8      	it	gt
 8019998:	2200      	movgt	r2, #0
 801999a:	58bf      	ldr	r7, [r7, r2]
 801999c:	7c02      	ldrb	r2, [r0, #16]
 801999e:	fa5f f987 	uxtb.w	r9, r7
 80199a2:	f3c7 2807 	ubfx	r8, r7, #8, #8
 80199a6:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 80199aa:	b31a      	cbz	r2, 80199f4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 80199ac:	2dff      	cmp	r5, #255	@ 0xff
 80199ae:	d121      	bne.n	80199f4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 80199b0:	4571      	cmp	r1, lr
 80199b2:	d25d      	bcs.n	8019a70 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 80199b4:	f881 9000 	strb.w	r9, [r1]
 80199b8:	3103      	adds	r1, #3
 80199ba:	f801 8c02 	strb.w	r8, [r1, #-2]
 80199be:	f801 cc01 	strb.w	ip, [r1, #-1]
 80199c2:	e7f5      	b.n	80199b0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1a8>
 80199c4:	ee07 4a90 	vmov	s15, r4
 80199c8:	ed90 7a06 	vldr	s14, [r0, #24]
 80199cc:	edd0 6a05 	vldr	s13, [r0, #20]
 80199d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80199d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80199d8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80199dc:	edd0 7a08 	vldr	s15, [r0, #32]
 80199e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80199e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199e8:	bf44      	itt	mi
 80199ea:	edd0 7a07 	vldrmi	s15, [r0, #28]
 80199ee:	ee37 7a67 	vsubmi.f32	s14, s14, s15
 80199f2:	e7a5      	b.n	8019940 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x138>
 80199f4:	0e3f      	lsrs	r7, r7, #24
 80199f6:	436f      	muls	r7, r5
 80199f8:	1c7a      	adds	r2, r7, #1
 80199fa:	eb02 2227 	add.w	r2, r2, r7, asr #8
 80199fe:	1212      	asrs	r2, r2, #8
 8019a00:	ea6f 0a02 	mvn.w	sl, r2
 8019a04:	b292      	uxth	r2, r2
 8019a06:	fb19 f902 	smulbb	r9, r9, r2
 8019a0a:	fa5f fa8a 	uxtb.w	sl, sl
 8019a0e:	fb18 f802 	smulbb	r8, r8, r2
 8019a12:	fb1c fc02 	smulbb	ip, ip, r2
 8019a16:	fa1f f989 	uxth.w	r9, r9
 8019a1a:	fa1f f888 	uxth.w	r8, r8
 8019a1e:	fa1f fc8c 	uxth.w	ip, ip
 8019a22:	458e      	cmp	lr, r1
 8019a24:	f101 0203 	add.w	r2, r1, #3
 8019a28:	d922      	bls.n	8019a70 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 8019a2a:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8019a2e:	fb01 910a 	mla	r1, r1, sl, r9
 8019a32:	b289      	uxth	r1, r1
 8019a34:	1c4f      	adds	r7, r1, #1
 8019a36:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8019a3a:	1209      	asrs	r1, r1, #8
 8019a3c:	f802 1c03 	strb.w	r1, [r2, #-3]
 8019a40:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8019a44:	fb01 810a 	mla	r1, r1, sl, r8
 8019a48:	b289      	uxth	r1, r1
 8019a4a:	1c4f      	adds	r7, r1, #1
 8019a4c:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8019a50:	1209      	asrs	r1, r1, #8
 8019a52:	f802 1c02 	strb.w	r1, [r2, #-2]
 8019a56:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8019a5a:	fb01 c10a 	mla	r1, r1, sl, ip
 8019a5e:	b289      	uxth	r1, r1
 8019a60:	1c4f      	adds	r7, r1, #1
 8019a62:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8019a66:	1209      	asrs	r1, r1, #8
 8019a68:	f802 1c01 	strb.w	r1, [r2, #-1]
 8019a6c:	4611      	mov	r1, r2
 8019a6e:	e7d8      	b.n	8019a22 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x21a>
 8019a70:	191a      	adds	r2, r3, r4
 8019a72:	4433      	add	r3, r6
 8019a74:	b21b      	sxth	r3, r3
 8019a76:	4293      	cmp	r3, r2
 8019a78:	f340 80f9 	ble.w	8019c6e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8019a7c:	edd0 7a07 	vldr	s15, [r0, #28]
 8019a80:	ee06 2a90 	vmov	s13, r2
 8019a84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019a88:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019a8c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8019a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a94:	f340 80b0 	ble.w	8019bf8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f0>
 8019a98:	ee06 3a10 	vmov	s12, r3
 8019a9c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8019aa0:	eddf 5a74 	vldr	s11, [pc, #464]	@ 8019c74 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x46c>
 8019aa4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8019aa8:	eef4 7ac6 	vcmpe.f32	s15, s12
 8019aac:	ed90 6a08 	vldr	s12, [r0, #32]
 8019ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ab4:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8019ab8:	bfd6      	itet	le
 8019aba:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 8019abe:	469c      	movgt	ip, r3
 8019ac0:	ee17 ca90 	vmovle	ip, s15
 8019ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ac8:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 8019c78 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x470>
 8019acc:	ebac 0202 	sub.w	r2, ip, r2
 8019ad0:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 8019ad4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8019ad8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019adc:	188c      	adds	r4, r1, r2
 8019ade:	7c02      	ldrb	r2, [r0, #16]
 8019ae0:	b1d2      	cbz	r2, 8019b18 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 8019ae2:	2dff      	cmp	r5, #255	@ 0xff
 8019ae4:	d118      	bne.n	8019b18 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 8019ae6:	42a1      	cmp	r1, r4
 8019ae8:	d261      	bcs.n	8019bae <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 8019aea:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8019aee:	68c6      	ldr	r6, [r0, #12]
 8019af0:	3103      	adds	r1, #3
 8019af2:	ee17 7a10 	vmov	r7, s14
 8019af6:	eb06 0287 	add.w	r2, r6, r7, lsl #2
 8019afa:	f816 6027 	ldrb.w	r6, [r6, r7, lsl #2]
 8019afe:	f801 6c03 	strb.w	r6, [r1, #-3]
 8019b02:	7856      	ldrb	r6, [r2, #1]
 8019b04:	f801 6c02 	strb.w	r6, [r1, #-2]
 8019b08:	7892      	ldrb	r2, [r2, #2]
 8019b0a:	f801 2c01 	strb.w	r2, [r1, #-1]
 8019b0e:	ed90 7a08 	vldr	s14, [r0, #32]
 8019b12:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019b16:	e7e6      	b.n	8019ae6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x2de>
 8019b18:	68c2      	ldr	r2, [r0, #12]
 8019b1a:	428c      	cmp	r4, r1
 8019b1c:	f101 0e03 	add.w	lr, r1, #3
 8019b20:	d945      	bls.n	8019bae <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 8019b22:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8019b26:	ee17 9a10 	vmov	r9, s14
 8019b2a:	eb02 0889 	add.w	r8, r2, r9, lsl #2
 8019b2e:	f898 7003 	ldrb.w	r7, [r8, #3]
 8019b32:	fb07 f605 	mul.w	r6, r7, r5
 8019b36:	1c77      	adds	r7, r6, #1
 8019b38:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8019b3c:	123f      	asrs	r7, r7, #8
 8019b3e:	b2b9      	uxth	r1, r7
 8019b40:	43ff      	mvns	r7, r7
 8019b42:	b2fe      	uxtb	r6, r7
 8019b44:	f812 7029 	ldrb.w	r7, [r2, r9, lsl #2]
 8019b48:	f81e 9c03 	ldrb.w	r9, [lr, #-3]
 8019b4c:	fb19 f906 	smulbb	r9, r9, r6
 8019b50:	fb07 9701 	mla	r7, r7, r1, r9
 8019b54:	b2bf      	uxth	r7, r7
 8019b56:	f107 0901 	add.w	r9, r7, #1
 8019b5a:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8019b5e:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
 8019b62:	fb19 f906 	smulbb	r9, r9, r6
 8019b66:	123f      	asrs	r7, r7, #8
 8019b68:	f80e 7c03 	strb.w	r7, [lr, #-3]
 8019b6c:	f898 7001 	ldrb.w	r7, [r8, #1]
 8019b70:	fb07 9701 	mla	r7, r7, r1, r9
 8019b74:	b2bf      	uxth	r7, r7
 8019b76:	f107 0901 	add.w	r9, r7, #1
 8019b7a:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8019b7e:	123f      	asrs	r7, r7, #8
 8019b80:	f80e 7c02 	strb.w	r7, [lr, #-2]
 8019b84:	f81e 7c01 	ldrb.w	r7, [lr, #-1]
 8019b88:	f898 8002 	ldrb.w	r8, [r8, #2]
 8019b8c:	fb17 f606 	smulbb	r6, r7, r6
 8019b90:	fb08 6601 	mla	r6, r8, r1, r6
 8019b94:	b2b6      	uxth	r6, r6
 8019b96:	1c71      	adds	r1, r6, #1
 8019b98:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 8019b9c:	4671      	mov	r1, lr
 8019b9e:	1236      	asrs	r6, r6, #8
 8019ba0:	f80e 6c01 	strb.w	r6, [lr, #-1]
 8019ba4:	ed90 7a08 	vldr	s14, [r0, #32]
 8019ba8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019bac:	e7b5      	b.n	8019b1a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x312>
 8019bae:	4563      	cmp	r3, ip
 8019bb0:	dd5d      	ble.n	8019c6e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8019bb2:	edd0 7a08 	vldr	s15, [r0, #32]
 8019bb6:	eba3 030c 	sub.w	r3, r3, ip
 8019bba:	68c4      	ldr	r4, [r0, #12]
 8019bbc:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8019bc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019bc4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019bc8:	7c00      	ldrb	r0, [r0, #16]
 8019bca:	440b      	add	r3, r1
 8019bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019bd0:	bfd8      	it	le
 8019bd2:	2200      	movle	r2, #0
 8019bd4:	58a2      	ldr	r2, [r4, r2]
 8019bd6:	b2d4      	uxtb	r4, r2
 8019bd8:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 8019bdc:	f3c2 4707 	ubfx	r7, r2, #16, #8
 8019be0:	b160      	cbz	r0, 8019bfc <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 8019be2:	2dff      	cmp	r5, #255	@ 0xff
 8019be4:	d10a      	bne.n	8019bfc <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 8019be6:	4299      	cmp	r1, r3
 8019be8:	d241      	bcs.n	8019c6e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8019bea:	700c      	strb	r4, [r1, #0]
 8019bec:	3103      	adds	r1, #3
 8019bee:	f801 cc02 	strb.w	ip, [r1, #-2]
 8019bf2:	f801 7c01 	strb.w	r7, [r1, #-1]
 8019bf6:	e7f6      	b.n	8019be6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3de>
 8019bf8:	4694      	mov	ip, r2
 8019bfa:	e7da      	b.n	8019bb2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3aa>
 8019bfc:	0e12      	lsrs	r2, r2, #24
 8019bfe:	436a      	muls	r2, r5
 8019c00:	1c55      	adds	r5, r2, #1
 8019c02:	eb05 2522 	add.w	r5, r5, r2, asr #8
 8019c06:	122d      	asrs	r5, r5, #8
 8019c08:	43ee      	mvns	r6, r5
 8019c0a:	b2ad      	uxth	r5, r5
 8019c0c:	fb14 f405 	smulbb	r4, r4, r5
 8019c10:	b2f6      	uxtb	r6, r6
 8019c12:	fb1c f005 	smulbb	r0, ip, r5
 8019c16:	fb17 f505 	smulbb	r5, r7, r5
 8019c1a:	b2a4      	uxth	r4, r4
 8019c1c:	b280      	uxth	r0, r0
 8019c1e:	b2ad      	uxth	r5, r5
 8019c20:	428b      	cmp	r3, r1
 8019c22:	f101 0203 	add.w	r2, r1, #3
 8019c26:	d922      	bls.n	8019c6e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8019c28:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8019c2c:	fb01 4106 	mla	r1, r1, r6, r4
 8019c30:	b289      	uxth	r1, r1
 8019c32:	1c4f      	adds	r7, r1, #1
 8019c34:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8019c38:	1209      	asrs	r1, r1, #8
 8019c3a:	f802 1c03 	strb.w	r1, [r2, #-3]
 8019c3e:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8019c42:	fb01 0106 	mla	r1, r1, r6, r0
 8019c46:	b289      	uxth	r1, r1
 8019c48:	1c4f      	adds	r7, r1, #1
 8019c4a:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8019c4e:	1209      	asrs	r1, r1, #8
 8019c50:	f802 1c02 	strb.w	r1, [r2, #-2]
 8019c54:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8019c58:	fb01 5106 	mla	r1, r1, r6, r5
 8019c5c:	b289      	uxth	r1, r1
 8019c5e:	1c4f      	adds	r7, r1, #1
 8019c60:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8019c64:	1209      	asrs	r1, r1, #8
 8019c66:	f802 1c01 	strb.w	r1, [r2, #-1]
 8019c6a:	4611      	mov	r1, r2
 8019c6c:	e7d8      	b.n	8019c20 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x418>
 8019c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019c72:	bf00      	nop
 8019c74:	447ffffe 	.word	0x447ffffe
 8019c78:	00000000 	.word	0x00000000

08019c7c <_ZNK8touchgfx27PainterRGB888LinearGradient8tearDownEv>:
 8019c7c:	4770      	bx	lr
	...

08019c80 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8019c80:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8019c82:	6803      	ldr	r3, [r0, #0]
 8019c84:	460d      	mov	r5, r1
 8019c86:	4604      	mov	r4, r0
 8019c88:	4601      	mov	r1, r0
 8019c8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019c8c:	a802      	add	r0, sp, #8
 8019c8e:	4798      	blx	r3
 8019c90:	6828      	ldr	r0, [r5, #0]
 8019c92:	6869      	ldr	r1, [r5, #4]
 8019c94:	466b      	mov	r3, sp
 8019c96:	c303      	stmia	r3!, {r0, r1}
 8019c98:	4668      	mov	r0, sp
 8019c9a:	4619      	mov	r1, r3
 8019c9c:	f7fd fd0c 	bl	80176b8 <_ZN8touchgfx4RectaNERKS0_>
 8019ca0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8019ca2:	b188      	cbz	r0, 8019cc8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8019ca4:	6803      	ldr	r3, [r0, #0]
 8019ca6:	1d21      	adds	r1, r4, #4
 8019ca8:	68db      	ldr	r3, [r3, #12]
 8019caa:	4798      	blx	r3
 8019cac:	b160      	cbz	r0, 8019cc8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8019cae:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8019cb2:	2b00      	cmp	r3, #0
 8019cb4:	dd08      	ble.n	8019cc8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8019cb6:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 8019cba:	2d00      	cmp	r5, #0
 8019cbc:	dd04      	ble.n	8019cc8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8019cbe:	4a2b      	ldr	r2, [pc, #172]	@ (8019d6c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 8019cc0:	7812      	ldrb	r2, [r2, #0]
 8019cc2:	b11a      	cbz	r2, 8019ccc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 8019cc4:	2a01      	cmp	r2, #1
 8019cc6:	d029      	beq.n	8019d1c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 8019cc8:	b004      	add	sp, #16
 8019cca:	bd70      	pop	{r4, r5, r6, pc}
 8019ccc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019cd0:	441d      	add	r5, r3
 8019cd2:	b2ad      	uxth	r5, r5
 8019cd4:	b22e      	sxth	r6, r5
 8019cd6:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8019cda:	42b3      	cmp	r3, r6
 8019cdc:	daf4      	bge.n	8019cc8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8019cde:	6823      	ldr	r3, [r4, #0]
 8019ce0:	4669      	mov	r1, sp
 8019ce2:	4620      	mov	r0, r4
 8019ce4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019ce6:	4798      	blx	r3
 8019ce8:	b940      	cbnz	r0, 8019cfc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 8019cea:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8019cee:	2b01      	cmp	r3, #1
 8019cf0:	d004      	beq.n	8019cfc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 8019cf2:	3301      	adds	r3, #1
 8019cf4:	105b      	asrs	r3, r3, #1
 8019cf6:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019cfa:	e7f0      	b.n	8019cde <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8019cfc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8019d00:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019d04:	4413      	add	r3, r2
 8019d06:	b29b      	uxth	r3, r3
 8019d08:	441a      	add	r2, r3
 8019d0a:	f8ad 3002 	strh.w	r3, [sp, #2]
 8019d0e:	b212      	sxth	r2, r2
 8019d10:	4296      	cmp	r6, r2
 8019d12:	dae0      	bge.n	8019cd6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8019d14:	1aeb      	subs	r3, r5, r3
 8019d16:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019d1a:	e7dc      	b.n	8019cd6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8019d1c:	f8bd 5000 	ldrh.w	r5, [sp]
 8019d20:	441d      	add	r5, r3
 8019d22:	b2ad      	uxth	r5, r5
 8019d24:	b22e      	sxth	r6, r5
 8019d26:	f9bd 3000 	ldrsh.w	r3, [sp]
 8019d2a:	42b3      	cmp	r3, r6
 8019d2c:	dacc      	bge.n	8019cc8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8019d2e:	6823      	ldr	r3, [r4, #0]
 8019d30:	4669      	mov	r1, sp
 8019d32:	4620      	mov	r0, r4
 8019d34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019d36:	4798      	blx	r3
 8019d38:	b940      	cbnz	r0, 8019d4c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 8019d3a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8019d3e:	2b01      	cmp	r3, #1
 8019d40:	d004      	beq.n	8019d4c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 8019d42:	3301      	adds	r3, #1
 8019d44:	105b      	asrs	r3, r3, #1
 8019d46:	f8ad 3004 	strh.w	r3, [sp, #4]
 8019d4a:	e7f0      	b.n	8019d2e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8019d4c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8019d50:	f8bd 3000 	ldrh.w	r3, [sp]
 8019d54:	4413      	add	r3, r2
 8019d56:	b29b      	uxth	r3, r3
 8019d58:	441a      	add	r2, r3
 8019d5a:	f8ad 3000 	strh.w	r3, [sp]
 8019d5e:	b212      	sxth	r2, r2
 8019d60:	4296      	cmp	r6, r2
 8019d62:	dae0      	bge.n	8019d26 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8019d64:	1aeb      	subs	r3, r5, r3
 8019d66:	f8ad 3004 	strh.w	r3, [sp, #4]
 8019d6a:	e7dc      	b.n	8019d26 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8019d6c:	24013b50 	.word	0x24013b50

08019d70 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8019d70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019d72:	6803      	ldr	r3, [r0, #0]
 8019d74:	4604      	mov	r4, r0
 8019d76:	4601      	mov	r1, r0
 8019d78:	4668      	mov	r0, sp
 8019d7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019d7c:	4798      	blx	r3
 8019d7e:	2100      	movs	r1, #0
 8019d80:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8019d84:	4668      	mov	r0, sp
 8019d86:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8019d8a:	9102      	str	r1, [sp, #8]
 8019d8c:	a902      	add	r1, sp, #8
 8019d8e:	f8ad 200c 	strh.w	r2, [sp, #12]
 8019d92:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019d96:	f7fd fc8f 	bl	80176b8 <_ZN8touchgfx4RectaNERKS0_>
 8019d9a:	6823      	ldr	r3, [r4, #0]
 8019d9c:	4669      	mov	r1, sp
 8019d9e:	4620      	mov	r0, r4
 8019da0:	691b      	ldr	r3, [r3, #16]
 8019da2:	4798      	blx	r3
 8019da4:	b004      	add	sp, #16
 8019da6:	bd10      	pop	{r4, pc}

08019da8 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8019da8:	2101      	movs	r1, #1
 8019daa:	2200      	movs	r2, #0
 8019dac:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 8019db0:	490a      	ldr	r1, [pc, #40]	@ (8019ddc <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 8019db2:	8082      	strh	r2, [r0, #4]
 8019db4:	6001      	str	r1, [r0, #0]
 8019db6:	21ff      	movs	r1, #255	@ 0xff
 8019db8:	80c2      	strh	r2, [r0, #6]
 8019dba:	8102      	strh	r2, [r0, #8]
 8019dbc:	8142      	strh	r2, [r0, #10]
 8019dbe:	8182      	strh	r2, [r0, #12]
 8019dc0:	81c2      	strh	r2, [r0, #14]
 8019dc2:	8202      	strh	r2, [r0, #16]
 8019dc4:	8242      	strh	r2, [r0, #18]
 8019dc6:	61c2      	str	r2, [r0, #28]
 8019dc8:	8402      	strh	r2, [r0, #32]
 8019dca:	8442      	strh	r2, [r0, #34]	@ 0x22
 8019dcc:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8019dd0:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 8019dd4:	6282      	str	r2, [r0, #40]	@ 0x28
 8019dd6:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8019dda:	4770      	bx	lr
 8019ddc:	0802cbfc 	.word	0x0802cbfc

08019de0 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8019de0:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8019de4:	4770      	bx	lr

08019de6 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 8019de6:	b510      	push	{r4, lr}
 8019de8:	4604      	mov	r4, r0
 8019dea:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8019dec:	b150      	cbz	r0, 8019e04 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8019dee:	6803      	ldr	r3, [r0, #0]
 8019df0:	68db      	ldr	r3, [r3, #12]
 8019df2:	4798      	blx	r3
 8019df4:	b130      	cbz	r0, 8019e04 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8019df6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8019df8:	4621      	mov	r1, r4
 8019dfa:	6803      	ldr	r3, [r0, #0]
 8019dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019e00:	689b      	ldr	r3, [r3, #8]
 8019e02:	4718      	bx	r3
 8019e04:	bd10      	pop	{r4, pc}

08019e06 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8019e06:	790b      	ldrb	r3, [r1, #4]
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	bf0c      	ite	eq
 8019e0c:	2301      	moveq	r3, #1
 8019e0e:	2300      	movne	r3, #0
 8019e10:	b570      	push	{r4, r5, r6, lr}
 8019e12:	4604      	mov	r4, r0
 8019e14:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8019e18:	460e      	mov	r6, r1
 8019e1a:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 8019e1e:	d109      	bne.n	8019e34 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8019e20:	b14d      	cbz	r5, 8019e36 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8019e22:	7933      	ldrb	r3, [r6, #4]
 8019e24:	2b01      	cmp	r3, #1
 8019e26:	d10c      	bne.n	8019e42 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8019e28:	6823      	ldr	r3, [r4, #0]
 8019e2a:	4620      	mov	r0, r4
 8019e2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019e2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019e32:	4718      	bx	r3
 8019e34:	b12d      	cbz	r5, 8019e42 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8019e36:	6823      	ldr	r3, [r4, #0]
 8019e38:	4620      	mov	r0, r4
 8019e3a:	695b      	ldr	r3, [r3, #20]
 8019e3c:	4798      	blx	r3
 8019e3e:	2d00      	cmp	r5, #0
 8019e40:	d1ef      	bne.n	8019e22 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8019e42:	bd70      	pop	{r4, r5, r6, pc}

08019e44 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8019e44:	2300      	movs	r3, #0
 8019e46:	8083      	strh	r3, [r0, #4]
 8019e48:	80c3      	strh	r3, [r0, #6]
 8019e4a:	8003      	strh	r3, [r0, #0]
 8019e4c:	8043      	strh	r3, [r0, #2]
 8019e4e:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 8019e52:	2bff      	cmp	r3, #255	@ 0xff
 8019e54:	bf01      	itttt	eq
 8019e56:	890b      	ldrheq	r3, [r1, #8]
 8019e58:	8083      	strheq	r3, [r0, #4]
 8019e5a:	894b      	ldrheq	r3, [r1, #10]
 8019e5c:	80c3      	strheq	r3, [r0, #6]
 8019e5e:	4770      	bx	lr

08019e60 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8019e60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019e62:	4604      	mov	r4, r0
 8019e64:	466b      	mov	r3, sp
 8019e66:	6808      	ldr	r0, [r1, #0]
 8019e68:	6849      	ldr	r1, [r1, #4]
 8019e6a:	c303      	stmia	r3!, {r0, r1}
 8019e6c:	6823      	ldr	r3, [r4, #0]
 8019e6e:	4669      	mov	r1, sp
 8019e70:	4620      	mov	r0, r4
 8019e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019e74:	4798      	blx	r3
 8019e76:	4b08      	ldr	r3, [pc, #32]	@ (8019e98 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8019e78:	681b      	ldr	r3, [r3, #0]
 8019e7a:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8019e7e:	b10a      	cbz	r2, 8019e84 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8019e80:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8019e82:	b900      	cbnz	r0, 8019e86 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8019e84:	6898      	ldr	r0, [r3, #8]
 8019e86:	6803      	ldr	r3, [r0, #0]
 8019e88:	4669      	mov	r1, sp
 8019e8a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8019e8c:	6a1d      	ldr	r5, [r3, #32]
 8019e8e:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8019e92:	47a8      	blx	r5
 8019e94:	b003      	add	sp, #12
 8019e96:	bd30      	pop	{r4, r5, pc}
 8019e98:	24013b58 	.word	0x24013b58

08019e9c <_ZNK8touchgfx3Box17invalidateContentEv>:
 8019e9c:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 8019ea0:	b12a      	cbz	r2, 8019eae <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8019ea2:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8019ea6:	b112      	cbz	r2, 8019eae <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8019ea8:	6803      	ldr	r3, [r0, #0]
 8019eaa:	695b      	ldr	r3, [r3, #20]
 8019eac:	4718      	bx	r3
 8019eae:	4770      	bx	lr

08019eb0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8019eb0:	b570      	push	{r4, r5, r6, lr}
 8019eb2:	880b      	ldrh	r3, [r1, #0]
 8019eb4:	4605      	mov	r5, r0
 8019eb6:	4604      	mov	r4, r0
 8019eb8:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8019eba:	8813      	ldrh	r3, [r2, #0]
 8019ebc:	f825 3f30 	strh.w	r3, [r5, #48]!
 8019ec0:	4628      	mov	r0, r5
 8019ec2:	f004 ffb3 	bl	801ee2c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019ec6:	4606      	mov	r6, r0
 8019ec8:	4628      	mov	r0, r5
 8019eca:	f004 ffe3 	bl	801ee94 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019ece:	6823      	ldr	r3, [r4, #0]
 8019ed0:	4605      	mov	r5, r0
 8019ed2:	4631      	mov	r1, r6
 8019ed4:	4620      	mov	r0, r4
 8019ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019ed8:	4798      	blx	r3
 8019eda:	6823      	ldr	r3, [r4, #0]
 8019edc:	4629      	mov	r1, r5
 8019ede:	4620      	mov	r0, r4
 8019ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019ee2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019ee6:	4718      	bx	r3

08019ee8 <_ZNK8touchgfx6Button12getSolidRectEv>:
 8019ee8:	b510      	push	{r4, lr}
 8019eea:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 8019eee:	4604      	mov	r4, r0
 8019ef0:	2bff      	cmp	r3, #255	@ 0xff
 8019ef2:	d006      	beq.n	8019f02 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8019ef4:	2300      	movs	r3, #0
 8019ef6:	8003      	strh	r3, [r0, #0]
 8019ef8:	8043      	strh	r3, [r0, #2]
 8019efa:	8083      	strh	r3, [r0, #4]
 8019efc:	80c3      	strh	r3, [r0, #6]
 8019efe:	4620      	mov	r0, r4
 8019f00:	bd10      	pop	{r4, pc}
 8019f02:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 8019f06:	b11b      	cbz	r3, 8019f10 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8019f08:	3130      	adds	r1, #48	@ 0x30
 8019f0a:	f004 fff7 	bl	801eefc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8019f0e:	e7f6      	b.n	8019efe <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8019f10:	312e      	adds	r1, #46	@ 0x2e
 8019f12:	e7fa      	b.n	8019f0a <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

08019f14 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8019f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f18:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8019f1c:	b08a      	sub	sp, #40	@ 0x28
 8019f1e:	4604      	mov	r4, r0
 8019f20:	4688      	mov	r8, r1
 8019f22:	2b00      	cmp	r3, #0
 8019f24:	d066      	beq.n	8019ff4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8019f26:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8019f28:	a805      	add	r0, sp, #20
 8019f2a:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019f2e:	f004 ff7d 	bl	801ee2c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019f32:	4607      	mov	r7, r0
 8019f34:	a805      	add	r0, sp, #20
 8019f36:	f004 ffad 	bl	801ee94 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019f3a:	f9b8 6000 	ldrsh.w	r6, [r8]
 8019f3e:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8019f42:	2300      	movs	r3, #0
 8019f44:	4432      	add	r2, r6
 8019f46:	9306      	str	r3, [sp, #24]
 8019f48:	b292      	uxth	r2, r2
 8019f4a:	fa0f fc82 	sxth.w	ip, r2
 8019f4e:	459c      	cmp	ip, r3
 8019f50:	dd52      	ble.n	8019ff8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8019f52:	42b7      	cmp	r7, r6
 8019f54:	dd50      	ble.n	8019ff8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8019f56:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 8019f5a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8019f5e:	442b      	add	r3, r5
 8019f60:	b29b      	uxth	r3, r3
 8019f62:	b219      	sxth	r1, r3
 8019f64:	2900      	cmp	r1, #0
 8019f66:	dd47      	ble.n	8019ff8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8019f68:	42a8      	cmp	r0, r5
 8019f6a:	dd45      	ble.n	8019ff8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8019f6c:	4567      	cmp	r7, ip
 8019f6e:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8019f72:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8019f76:	bfb8      	it	lt
 8019f78:	b2ba      	uxthlt	r2, r7
 8019f7a:	4288      	cmp	r0, r1
 8019f7c:	f8ad 6018 	strh.w	r6, [sp, #24]
 8019f80:	bfb8      	it	lt
 8019f82:	b283      	uxthlt	r3, r0
 8019f84:	1b92      	subs	r2, r2, r6
 8019f86:	f8ad 501a 	strh.w	r5, [sp, #26]
 8019f8a:	1b5b      	subs	r3, r3, r5
 8019f8c:	f8ad 201c 	strh.w	r2, [sp, #28]
 8019f90:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019f94:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8019f98:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019f9c:	429a      	cmp	r2, r3
 8019f9e:	d026      	beq.n	8019fee <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8019fa0:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8019fa4:	2b00      	cmp	r3, #0
 8019fa6:	dd22      	ble.n	8019fee <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8019fa8:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8019fac:	2b00      	cmp	r3, #0
 8019fae:	dd1e      	ble.n	8019fee <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8019fb0:	2300      	movs	r3, #0
 8019fb2:	a908      	add	r1, sp, #32
 8019fb4:	4620      	mov	r0, r4
 8019fb6:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8019fba:	6823      	ldr	r3, [r4, #0]
 8019fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019fbe:	4798      	blx	r3
 8019fc0:	4b0f      	ldr	r3, [pc, #60]	@ (801a000 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 8019fc2:	681b      	ldr	r3, [r3, #0]
 8019fc4:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8019fc8:	b10a      	cbz	r2, 8019fce <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 8019fca:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8019fcc:	b900      	cbnz	r0, 8019fd0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 8019fce:	6898      	ldr	r0, [r3, #8]
 8019fd0:	2501      	movs	r5, #1
 8019fd2:	6801      	ldr	r1, [r0, #0]
 8019fd4:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8019fd8:	9502      	str	r5, [sp, #8]
 8019fda:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 8019fde:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8019fe2:	9401      	str	r4, [sp, #4]
 8019fe4:	ac06      	add	r4, sp, #24
 8019fe6:	9400      	str	r4, [sp, #0]
 8019fe8:	688c      	ldr	r4, [r1, #8]
 8019fea:	a905      	add	r1, sp, #20
 8019fec:	47a0      	blx	r4
 8019fee:	b00a      	add	sp, #40	@ 0x28
 8019ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ff4:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8019ff6:	e797      	b.n	8019f28 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8019ff8:	2300      	movs	r3, #0
 8019ffa:	9307      	str	r3, [sp, #28]
 8019ffc:	e7ca      	b.n	8019f94 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 8019ffe:	bf00      	nop
 801a000:	24013b58 	.word	0x24013b58

0801a004 <_ZNK8touchgfx6Button17invalidateContentEv>:
 801a004:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 801a008:	b12a      	cbz	r2, 801a016 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 801a00a:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 801a00e:	b112      	cbz	r2, 801a016 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 801a010:	6803      	ldr	r3, [r0, #0]
 801a012:	695b      	ldr	r3, [r3, #20]
 801a014:	4718      	bx	r3
 801a016:	4770      	bx	lr

0801a018 <_ZN8touchgfx7OutlineD1Ev>:
 801a018:	4770      	bx	lr

0801a01a <_ZN8touchgfx7OutlineD0Ev>:
 801a01a:	b510      	push	{r4, lr}
 801a01c:	4604      	mov	r4, r0
 801a01e:	2130      	movs	r1, #48	@ 0x30
 801a020:	f00f fcbd 	bl	802999e <_ZdlPvj>
 801a024:	4620      	mov	r0, r4
 801a026:	bd10      	pop	{r4, pc}

0801a028 <_ZN8touchgfx7Outline5resetEv>:
 801a028:	b510      	push	{r4, lr}
 801a02a:	4604      	mov	r4, r0
 801a02c:	f000 fe72 	bl	801ad14 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 801a030:	60e0      	str	r0, [r4, #12]
 801a032:	f000 fe75 	bl	801ad20 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 801a036:	68e3      	ldr	r3, [r4, #12]
 801a038:	08c0      	lsrs	r0, r0, #3
 801a03a:	2200      	movs	r2, #0
 801a03c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 801a040:	6123      	str	r3, [r4, #16]
 801a042:	3801      	subs	r0, #1
 801a044:	60a2      	str	r2, [r4, #8]
 801a046:	6060      	str	r0, [r4, #4]
 801a048:	8019      	strh	r1, [r3, #0]
 801a04a:	8059      	strh	r1, [r3, #2]
 801a04c:	809a      	strh	r2, [r3, #4]
 801a04e:	80da      	strh	r2, [r3, #6]
 801a050:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801a052:	f023 0301 	bic.w	r3, r3, #1
 801a056:	f043 0302 	orr.w	r3, r3, #2
 801a05a:	6263      	str	r3, [r4, #36]	@ 0x24
 801a05c:	bd10      	pop	{r4, pc}
	...

0801a060 <_ZN8touchgfx7OutlineC1Ev>:
 801a060:	4b0a      	ldr	r3, [pc, #40]	@ (801a08c <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 801a062:	b510      	push	{r4, lr}
 801a064:	6003      	str	r3, [r0, #0]
 801a066:	2300      	movs	r3, #0
 801a068:	4604      	mov	r4, r0
 801a06a:	6243      	str	r3, [r0, #36]	@ 0x24
 801a06c:	e9c0 3301 	strd	r3, r3, [r0, #4]
 801a070:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801a074:	e9c0 3305 	strd	r3, r3, [r0, #20]
 801a078:	e9c0 3307 	strd	r3, r3, [r0, #28]
 801a07c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801a080:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 801a084:	f7ff ffd0 	bl	801a028 <_ZN8touchgfx7Outline5resetEv>
 801a088:	4620      	mov	r0, r4
 801a08a:	bd10      	pop	{r4, pc}
 801a08c:	0802cdc0 	.word	0x0802cdc0

0801a090 <_ZN8touchgfx7Outline10renderLineEiiii>:
 801a090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a094:	b093      	sub	sp, #76	@ 0x4c
 801a096:	1156      	asrs	r6, r2, #5
 801a098:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801a09a:	9305      	str	r3, [sp, #20]
 801a09c:	1153      	asrs	r3, r2, #5
 801a09e:	f004 051f 	and.w	r5, r4, #31
 801a0a2:	9303      	str	r3, [sp, #12]
 801a0a4:	1163      	asrs	r3, r4, #5
 801a0a6:	9504      	str	r5, [sp, #16]
 801a0a8:	1165      	asrs	r5, r4, #5
 801a0aa:	9306      	str	r3, [sp, #24]
 801a0ac:	f002 031f 	and.w	r3, r2, #31
 801a0b0:	42ae      	cmp	r6, r5
 801a0b2:	f040 80f4 	bne.w	801a29e <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 801a0b6:	9c04      	ldr	r4, [sp, #16]
 801a0b8:	9a05      	ldr	r2, [sp, #20]
 801a0ba:	42a3      	cmp	r3, r4
 801a0bc:	ea4f 1e62 	mov.w	lr, r2, asr #5
 801a0c0:	6902      	ldr	r2, [r0, #16]
 801a0c2:	d125      	bne.n	801a110 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 801a0c4:	f9b2 3000 	ldrsh.w	r3, [r2]
 801a0c8:	459e      	cmp	lr, r3
 801a0ca:	d103      	bne.n	801a0d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 801a0cc:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801a0d0:	429e      	cmp	r6, r3
 801a0d2:	d035      	beq.n	801a140 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801a0d4:	88d1      	ldrh	r1, [r2, #6]
 801a0d6:	8893      	ldrh	r3, [r2, #4]
 801a0d8:	430b      	orrs	r3, r1
 801a0da:	d010      	beq.n	801a0fe <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 801a0dc:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801a0e0:	2b00      	cmp	r3, #0
 801a0e2:	db0c      	blt.n	801a0fe <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 801a0e4:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801a0e6:	428b      	cmp	r3, r1
 801a0e8:	da09      	bge.n	801a0fe <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 801a0ea:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 801a0ee:	428b      	cmp	r3, r1
 801a0f0:	f103 0301 	add.w	r3, r3, #1
 801a0f4:	bf38      	it	cc
 801a0f6:	3208      	addcc	r2, #8
 801a0f8:	6083      	str	r3, [r0, #8]
 801a0fa:	bf38      	it	cc
 801a0fc:	6102      	strcc	r2, [r0, #16]
 801a0fe:	6903      	ldr	r3, [r0, #16]
 801a100:	9a03      	ldr	r2, [sp, #12]
 801a102:	f8a3 e000 	strh.w	lr, [r3]
 801a106:	805a      	strh	r2, [r3, #2]
 801a108:	2200      	movs	r2, #0
 801a10a:	809a      	strh	r2, [r3, #4]
 801a10c:	80da      	strh	r2, [r3, #6]
 801a10e:	e017      	b.n	801a140 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801a110:	9c05      	ldr	r4, [sp, #20]
 801a112:	114e      	asrs	r6, r1, #5
 801a114:	f001 0c1f 	and.w	ip, r1, #31
 801a118:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 801a11c:	f004 041f 	and.w	r4, r4, #31
 801a120:	4576      	cmp	r6, lr
 801a122:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 801a126:	9402      	str	r4, [sp, #8]
 801a128:	9c04      	ldr	r4, [sp, #16]
 801a12a:	eba4 0403 	sub.w	r4, r4, r3
 801a12e:	d10a      	bne.n	801a146 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 801a130:	9b02      	ldr	r3, [sp, #8]
 801a132:	44a0      	add	r8, r4
 801a134:	449c      	add	ip, r3
 801a136:	f8a2 8004 	strh.w	r8, [r2, #4]
 801a13a:	fb04 a40c 	mla	r4, r4, ip, sl
 801a13e:	80d4      	strh	r4, [r2, #6]
 801a140:	b013      	add	sp, #76	@ 0x4c
 801a142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a146:	9d05      	ldr	r5, [sp, #20]
 801a148:	1a69      	subs	r1, r5, r1
 801a14a:	bf51      	iteee	pl
 801a14c:	f1cc 0520 	rsbpl	r5, ip, #32
 801a150:	fb04 f40c 	mulmi.w	r4, r4, ip
 801a154:	4249      	negmi	r1, r1
 801a156:	2500      	movmi	r5, #0
 801a158:	bf5d      	ittte	pl
 801a15a:	436c      	mulpl	r4, r5
 801a15c:	2520      	movpl	r5, #32
 801a15e:	f04f 0901 	movpl.w	r9, #1
 801a162:	f04f 39ff 	movmi.w	r9, #4294967295
 801a166:	9501      	str	r5, [sp, #4]
 801a168:	9f01      	ldr	r7, [sp, #4]
 801a16a:	444e      	add	r6, r9
 801a16c:	fb94 f5f1 	sdiv	r5, r4, r1
 801a170:	fb01 4415 	mls	r4, r1, r5, r4
 801a174:	44bc      	add	ip, r7
 801a176:	2c00      	cmp	r4, #0
 801a178:	bfbc      	itt	lt
 801a17a:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801a17e:	1864      	addlt	r4, r4, r1
 801a180:	44a8      	add	r8, r5
 801a182:	fb05 ac0c 	mla	ip, r5, ip, sl
 801a186:	f8a2 8004 	strh.w	r8, [r2, #4]
 801a18a:	f8a2 c006 	strh.w	ip, [r2, #6]
 801a18e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801a192:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 801a196:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 801a19a:	ea58 0202 	orrs.w	r2, r8, r2
 801a19e:	d011      	beq.n	801a1c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 801a1a0:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 801a1a4:	f1b8 0f00 	cmp.w	r8, #0
 801a1a8:	db0c      	blt.n	801a1c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 801a1aa:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 801a1ac:	4590      	cmp	r8, r2
 801a1ae:	da09      	bge.n	801a1c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 801a1b0:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 801a1b4:	4590      	cmp	r8, r2
 801a1b6:	bf3c      	itt	cc
 801a1b8:	f10c 0208 	addcc.w	r2, ip, #8
 801a1bc:	6102      	strcc	r2, [r0, #16]
 801a1be:	f108 0201 	add.w	r2, r8, #1
 801a1c2:	6082      	str	r2, [r0, #8]
 801a1c4:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801a1c8:	2700      	movs	r7, #0
 801a1ca:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801a1ce:	45b6      	cmp	lr, r6
 801a1d0:	f8ac 6000 	strh.w	r6, [ip]
 801a1d4:	442b      	add	r3, r5
 801a1d6:	f8ac 2002 	strh.w	r2, [ip, #2]
 801a1da:	f8ac 7004 	strh.w	r7, [ip, #4]
 801a1de:	f8ac 7006 	strh.w	r7, [ip, #6]
 801a1e2:	d04b      	beq.n	801a27c <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 801a1e4:	9f04      	ldr	r7, [sp, #16]
 801a1e6:	1a64      	subs	r4, r4, r1
 801a1e8:	f04f 0a00 	mov.w	sl, #0
 801a1ec:	1aff      	subs	r7, r7, r3
 801a1ee:	443d      	add	r5, r7
 801a1f0:	016d      	lsls	r5, r5, #5
 801a1f2:	fb95 f8f1 	sdiv	r8, r5, r1
 801a1f6:	fb01 5518 	mls	r5, r1, r8, r5
 801a1fa:	2d00      	cmp	r5, #0
 801a1fc:	bfbc      	itt	lt
 801a1fe:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801a202:	186d      	addlt	r5, r5, r1
 801a204:	f108 0701 	add.w	r7, r8, #1
 801a208:	9703      	str	r7, [sp, #12]
 801a20a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801a20e:	1964      	adds	r4, r4, r5
 801a210:	444e      	add	r6, r9
 801a212:	bf54      	ite	pl
 801a214:	9f03      	ldrpl	r7, [sp, #12]
 801a216:	4647      	movmi	r7, r8
 801a218:	f8bc b004 	ldrh.w	fp, [ip, #4]
 801a21c:	bf58      	it	pl
 801a21e:	1a64      	subpl	r4, r4, r1
 801a220:	443b      	add	r3, r7
 801a222:	44bb      	add	fp, r7
 801a224:	f8ac b004 	strh.w	fp, [ip, #4]
 801a228:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801a22c:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801a230:	f8ac b006 	strh.w	fp, [ip, #6]
 801a234:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801a238:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801a23c:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801a240:	ea5b 0707 	orrs.w	r7, fp, r7
 801a244:	d011      	beq.n	801a26a <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 801a246:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 801a24a:	f1bb 0f00 	cmp.w	fp, #0
 801a24e:	db0c      	blt.n	801a26a <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 801a250:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801a252:	45bb      	cmp	fp, r7
 801a254:	da09      	bge.n	801a26a <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 801a256:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801a25a:	45bb      	cmp	fp, r7
 801a25c:	bf3c      	itt	cc
 801a25e:	f10c 0708 	addcc.w	r7, ip, #8
 801a262:	6107      	strcc	r7, [r0, #16]
 801a264:	f10b 0701 	add.w	r7, fp, #1
 801a268:	6087      	str	r7, [r0, #8]
 801a26a:	6907      	ldr	r7, [r0, #16]
 801a26c:	45b6      	cmp	lr, r6
 801a26e:	803e      	strh	r6, [r7, #0]
 801a270:	807a      	strh	r2, [r7, #2]
 801a272:	f8a7 a004 	strh.w	sl, [r7, #4]
 801a276:	f8a7 a006 	strh.w	sl, [r7, #6]
 801a27a:	d1c6      	bne.n	801a20a <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 801a27c:	9a04      	ldr	r2, [sp, #16]
 801a27e:	1ad3      	subs	r3, r2, r3
 801a280:	6902      	ldr	r2, [r0, #16]
 801a282:	8891      	ldrh	r1, [r2, #4]
 801a284:	88d6      	ldrh	r6, [r2, #6]
 801a286:	4419      	add	r1, r3
 801a288:	8091      	strh	r1, [r2, #4]
 801a28a:	9902      	ldr	r1, [sp, #8]
 801a28c:	f101 0c20 	add.w	ip, r1, #32
 801a290:	9901      	ldr	r1, [sp, #4]
 801a292:	ebac 0c01 	sub.w	ip, ip, r1
 801a296:	fb03 630c 	mla	r3, r3, ip, r6
 801a29a:	80d3      	strh	r3, [r2, #6]
 801a29c:	e750      	b.n	801a140 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801a29e:	9d05      	ldr	r5, [sp, #20]
 801a2a0:	1aa2      	subs	r2, r4, r2
 801a2a2:	eba5 0501 	sub.w	r5, r5, r1
 801a2a6:	9202      	str	r2, [sp, #8]
 801a2a8:	9508      	str	r5, [sp, #32]
 801a2aa:	f140 8128 	bpl.w	801a4fe <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 801a2ae:	9a03      	ldr	r2, [sp, #12]
 801a2b0:	2a00      	cmp	r2, #0
 801a2b2:	f6ff af45 	blt.w	801a140 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801a2b6:	9a02      	ldr	r2, [sp, #8]
 801a2b8:	f04f 34ff 	mov.w	r4, #4294967295
 801a2bc:	4252      	negs	r2, r2
 801a2be:	940b      	str	r4, [sp, #44]	@ 0x2c
 801a2c0:	2400      	movs	r4, #0
 801a2c2:	9202      	str	r2, [sp, #8]
 801a2c4:	9a06      	ldr	r2, [sp, #24]
 801a2c6:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 801a2ca:	9206      	str	r2, [sp, #24]
 801a2cc:	462a      	mov	r2, r5
 801a2ce:	435a      	muls	r2, r3
 801a2d0:	9401      	str	r4, [sp, #4]
 801a2d2:	9c02      	ldr	r4, [sp, #8]
 801a2d4:	9d02      	ldr	r5, [sp, #8]
 801a2d6:	fb92 f4f4 	sdiv	r4, r2, r4
 801a2da:	fb05 2214 	mls	r2, r5, r4, r2
 801a2de:	2a00      	cmp	r2, #0
 801a2e0:	9207      	str	r2, [sp, #28]
 801a2e2:	bfbc      	itt	lt
 801a2e4:	1952      	addlt	r2, r2, r5
 801a2e6:	f104 34ff 	addlt.w	r4, r4, #4294967295
 801a2ea:	6905      	ldr	r5, [r0, #16]
 801a2ec:	bfb8      	it	lt
 801a2ee:	9207      	strlt	r2, [sp, #28]
 801a2f0:	eb04 0901 	add.w	r9, r4, r1
 801a2f4:	9a01      	ldr	r2, [sp, #4]
 801a2f6:	ea4f 1669 	mov.w	r6, r9, asr #5
 801a2fa:	429a      	cmp	r2, r3
 801a2fc:	f040 8111 	bne.w	801a522 <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 801a300:	f9b5 3000 	ldrsh.w	r3, [r5]
 801a304:	429e      	cmp	r6, r3
 801a306:	d104      	bne.n	801a312 <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 801a308:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801a30c:	9a03      	ldr	r2, [sp, #12]
 801a30e:	429a      	cmp	r2, r3
 801a310:	d01b      	beq.n	801a34a <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 801a312:	88ea      	ldrh	r2, [r5, #6]
 801a314:	88ab      	ldrh	r3, [r5, #4]
 801a316:	4313      	orrs	r3, r2
 801a318:	d010      	beq.n	801a33c <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 801a31a:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801a31e:	2a00      	cmp	r2, #0
 801a320:	db0c      	blt.n	801a33c <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 801a322:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801a324:	429a      	cmp	r2, r3
 801a326:	da09      	bge.n	801a33c <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 801a328:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 801a32c:	429a      	cmp	r2, r3
 801a32e:	f102 0201 	add.w	r2, r2, #1
 801a332:	bf38      	it	cc
 801a334:	3508      	addcc	r5, #8
 801a336:	6082      	str	r2, [r0, #8]
 801a338:	bf38      	it	cc
 801a33a:	6105      	strcc	r5, [r0, #16]
 801a33c:	6903      	ldr	r3, [r0, #16]
 801a33e:	9a03      	ldr	r2, [sp, #12]
 801a340:	801e      	strh	r6, [r3, #0]
 801a342:	805a      	strh	r2, [r3, #2]
 801a344:	2200      	movs	r2, #0
 801a346:	809a      	strh	r2, [r3, #4]
 801a348:	80da      	strh	r2, [r3, #6]
 801a34a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a34c:	9a03      	ldr	r2, [sp, #12]
 801a34e:	6901      	ldr	r1, [r0, #16]
 801a350:	441a      	add	r2, r3
 801a352:	f9b1 3000 	ldrsh.w	r3, [r1]
 801a356:	42b3      	cmp	r3, r6
 801a358:	d103      	bne.n	801a362 <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 801a35a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801a35e:	429a      	cmp	r2, r3
 801a360:	d01a      	beq.n	801a398 <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 801a362:	88cc      	ldrh	r4, [r1, #6]
 801a364:	888b      	ldrh	r3, [r1, #4]
 801a366:	4323      	orrs	r3, r4
 801a368:	d010      	beq.n	801a38c <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 801a36a:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 801a36e:	2c00      	cmp	r4, #0
 801a370:	db0c      	blt.n	801a38c <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 801a372:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801a374:	429c      	cmp	r4, r3
 801a376:	da09      	bge.n	801a38c <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 801a378:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 801a37c:	429c      	cmp	r4, r3
 801a37e:	f104 0401 	add.w	r4, r4, #1
 801a382:	bf38      	it	cc
 801a384:	3108      	addcc	r1, #8
 801a386:	6084      	str	r4, [r0, #8]
 801a388:	bf38      	it	cc
 801a38a:	6101      	strcc	r1, [r0, #16]
 801a38c:	6903      	ldr	r3, [r0, #16]
 801a38e:	2100      	movs	r1, #0
 801a390:	801e      	strh	r6, [r3, #0]
 801a392:	805a      	strh	r2, [r3, #2]
 801a394:	8099      	strh	r1, [r3, #4]
 801a396:	80d9      	strh	r1, [r3, #6]
 801a398:	9b06      	ldr	r3, [sp, #24]
 801a39a:	4293      	cmp	r3, r2
 801a39c:	f000 8082 	beq.w	801a4a4 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 801a3a0:	9b08      	ldr	r3, [sp, #32]
 801a3a2:	9902      	ldr	r1, [sp, #8]
 801a3a4:	015b      	lsls	r3, r3, #5
 801a3a6:	9c02      	ldr	r4, [sp, #8]
 801a3a8:	fb93 f1f1 	sdiv	r1, r3, r1
 801a3ac:	fb04 3311 	mls	r3, r4, r1, r3
 801a3b0:	9103      	str	r1, [sp, #12]
 801a3b2:	2b00      	cmp	r3, #0
 801a3b4:	9308      	str	r3, [sp, #32]
 801a3b6:	da04      	bge.n	801a3c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 801a3b8:	1e4b      	subs	r3, r1, #1
 801a3ba:	9303      	str	r3, [sp, #12]
 801a3bc:	9b08      	ldr	r3, [sp, #32]
 801a3be:	4423      	add	r3, r4
 801a3c0:	9308      	str	r3, [sp, #32]
 801a3c2:	9b07      	ldr	r3, [sp, #28]
 801a3c4:	464f      	mov	r7, r9
 801a3c6:	9902      	ldr	r1, [sp, #8]
 801a3c8:	2600      	movs	r6, #0
 801a3ca:	1a5b      	subs	r3, r3, r1
 801a3cc:	9307      	str	r3, [sp, #28]
 801a3ce:	9b01      	ldr	r3, [sp, #4]
 801a3d0:	f1c3 0320 	rsb	r3, r3, #32
 801a3d4:	930e      	str	r3, [sp, #56]	@ 0x38
 801a3d6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801a3d8:	9b01      	ldr	r3, [sp, #4]
 801a3da:	1a5b      	subs	r3, r3, r1
 801a3dc:	930a      	str	r3, [sp, #40]	@ 0x28
 801a3de:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 801a3e2:	185b      	adds	r3, r3, r1
 801a3e4:	bf58      	it	pl
 801a3e6:	9902      	ldrpl	r1, [sp, #8]
 801a3e8:	9307      	str	r3, [sp, #28]
 801a3ea:	bf57      	itett	pl
 801a3ec:	1a5b      	subpl	r3, r3, r1
 801a3ee:	9903      	ldrmi	r1, [sp, #12]
 801a3f0:	9307      	strpl	r3, [sp, #28]
 801a3f2:	9b03      	ldrpl	r3, [sp, #12]
 801a3f4:	bf58      	it	pl
 801a3f6:	1c59      	addpl	r1, r3, #1
 801a3f8:	2a00      	cmp	r2, #0
 801a3fa:	4489      	add	r9, r1
 801a3fc:	ea4f 1a69 	mov.w	sl, r9, asr #5
 801a400:	db2e      	blt.n	801a460 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801a402:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801a404:	4293      	cmp	r3, r2
 801a406:	dd2b      	ble.n	801a460 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801a408:	9c01      	ldr	r4, [sp, #4]
 801a40a:	6905      	ldr	r5, [r0, #16]
 801a40c:	46a0      	mov	r8, r4
 801a40e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801a410:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 801a414:	45a0      	cmp	r8, r4
 801a416:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 801a41a:	f040 814c 	bne.w	801a6b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 801a41e:	f9b5 1000 	ldrsh.w	r1, [r5]
 801a422:	4551      	cmp	r1, sl
 801a424:	d103      	bne.n	801a42e <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 801a426:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 801a42a:	4291      	cmp	r1, r2
 801a42c:	d018      	beq.n	801a460 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801a42e:	ea5c 010e 	orrs.w	r1, ip, lr
 801a432:	d00f      	beq.n	801a454 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 801a434:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 801a438:	2900      	cmp	r1, #0
 801a43a:	db0b      	blt.n	801a454 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 801a43c:	428b      	cmp	r3, r1
 801a43e:	dd09      	ble.n	801a454 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 801a440:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 801a444:	4299      	cmp	r1, r3
 801a446:	f101 0101 	add.w	r1, r1, #1
 801a44a:	bf38      	it	cc
 801a44c:	3508      	addcc	r5, #8
 801a44e:	6081      	str	r1, [r0, #8]
 801a450:	bf38      	it	cc
 801a452:	6105      	strcc	r5, [r0, #16]
 801a454:	6903      	ldr	r3, [r0, #16]
 801a456:	f8a3 a000 	strh.w	sl, [r3]
 801a45a:	805a      	strh	r2, [r3, #2]
 801a45c:	809e      	strh	r6, [r3, #4]
 801a45e:	80de      	strh	r6, [r3, #6]
 801a460:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a462:	6901      	ldr	r1, [r0, #16]
 801a464:	441a      	add	r2, r3
 801a466:	88cc      	ldrh	r4, [r1, #6]
 801a468:	888b      	ldrh	r3, [r1, #4]
 801a46a:	4323      	orrs	r3, r4
 801a46c:	d010      	beq.n	801a490 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801a46e:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 801a472:	2c00      	cmp	r4, #0
 801a474:	db0c      	blt.n	801a490 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801a476:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801a478:	429c      	cmp	r4, r3
 801a47a:	da09      	bge.n	801a490 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801a47c:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 801a480:	429c      	cmp	r4, r3
 801a482:	f104 0401 	add.w	r4, r4, #1
 801a486:	bf38      	it	cc
 801a488:	3108      	addcc	r1, #8
 801a48a:	6084      	str	r4, [r0, #8]
 801a48c:	bf38      	it	cc
 801a48e:	6101      	strcc	r1, [r0, #16]
 801a490:	6903      	ldr	r3, [r0, #16]
 801a492:	464f      	mov	r7, r9
 801a494:	f8a3 a000 	strh.w	sl, [r3]
 801a498:	805a      	strh	r2, [r3, #2]
 801a49a:	809e      	strh	r6, [r3, #4]
 801a49c:	80de      	strh	r6, [r3, #6]
 801a49e:	9b06      	ldr	r3, [sp, #24]
 801a4a0:	4293      	cmp	r3, r2
 801a4a2:	d19c      	bne.n	801a3de <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 801a4a4:	9b01      	ldr	r3, [sp, #4]
 801a4a6:	6907      	ldr	r7, [r0, #16]
 801a4a8:	f1c3 0620 	rsb	r6, r3, #32
 801a4ac:	9b05      	ldr	r3, [sp, #20]
 801a4ae:	ea4f 1e63 	mov.w	lr, r3, asr #5
 801a4b2:	9b04      	ldr	r3, [sp, #16]
 801a4b4:	429e      	cmp	r6, r3
 801a4b6:	f040 81c7 	bne.w	801a848 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 801a4ba:	f9b7 3000 	ldrsh.w	r3, [r7]
 801a4be:	459e      	cmp	lr, r3
 801a4c0:	d104      	bne.n	801a4cc <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 801a4c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801a4c6:	429a      	cmp	r2, r3
 801a4c8:	f43f ae3a 	beq.w	801a140 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801a4cc:	88f9      	ldrh	r1, [r7, #6]
 801a4ce:	88bb      	ldrh	r3, [r7, #4]
 801a4d0:	430b      	orrs	r3, r1
 801a4d2:	d010      	beq.n	801a4f6 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 801a4d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801a4d8:	2b00      	cmp	r3, #0
 801a4da:	db0c      	blt.n	801a4f6 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 801a4dc:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801a4de:	428b      	cmp	r3, r1
 801a4e0:	da09      	bge.n	801a4f6 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 801a4e2:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 801a4e6:	428b      	cmp	r3, r1
 801a4e8:	f103 0301 	add.w	r3, r3, #1
 801a4ec:	bf38      	it	cc
 801a4ee:	3708      	addcc	r7, #8
 801a4f0:	6083      	str	r3, [r0, #8]
 801a4f2:	bf38      	it	cc
 801a4f4:	6107      	strcc	r7, [r0, #16]
 801a4f6:	6903      	ldr	r3, [r0, #16]
 801a4f8:	f8a3 e000 	strh.w	lr, [r3]
 801a4fc:	e603      	b.n	801a106 <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 801a4fe:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 801a500:	9c03      	ldr	r4, [sp, #12]
 801a502:	42a2      	cmp	r2, r4
 801a504:	f6ff ae1c 	blt.w	801a140 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801a508:	9c06      	ldr	r4, [sp, #24]
 801a50a:	42a2      	cmp	r2, r4
 801a50c:	9c08      	ldr	r4, [sp, #32]
 801a50e:	bfbc      	itt	lt
 801a510:	3201      	addlt	r2, #1
 801a512:	9206      	strlt	r2, [sp, #24]
 801a514:	f1c3 0220 	rsb	r2, r3, #32
 801a518:	4362      	muls	r2, r4
 801a51a:	2401      	movs	r4, #1
 801a51c:	940b      	str	r4, [sp, #44]	@ 0x2c
 801a51e:	2420      	movs	r4, #32
 801a520:	e6d6      	b.n	801a2d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 801a522:	ea4f 1861 	mov.w	r8, r1, asr #5
 801a526:	f009 021f 	and.w	r2, r9, #31
 801a52a:	f001 011f 	and.w	r1, r1, #31
 801a52e:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 801a532:	920c      	str	r2, [sp, #48]	@ 0x30
 801a534:	45b0      	cmp	r8, r6
 801a536:	9a01      	ldr	r2, [sp, #4]
 801a538:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 801a53c:	eba2 0203 	sub.w	r2, r2, r3
 801a540:	d108      	bne.n	801a554 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 801a542:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a544:	4496      	add	lr, r2
 801a546:	4419      	add	r1, r3
 801a548:	f8a5 e004 	strh.w	lr, [r5, #4]
 801a54c:	fb02 a101 	mla	r1, r2, r1, sl
 801a550:	80e9      	strh	r1, [r5, #6]
 801a552:	e6fa      	b.n	801a34a <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 801a554:	2c00      	cmp	r4, #0
 801a556:	f2c0 80a7 	blt.w	801a6a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 801a55a:	2701      	movs	r7, #1
 801a55c:	f1c1 0c20 	rsb	ip, r1, #32
 801a560:	970a      	str	r7, [sp, #40]	@ 0x28
 801a562:	2720      	movs	r7, #32
 801a564:	fb02 f20c 	mul.w	r2, r2, ip
 801a568:	9709      	str	r7, [sp, #36]	@ 0x24
 801a56a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801a56c:	fb92 fcf4 	sdiv	ip, r2, r4
 801a570:	fb04 221c 	mls	r2, r4, ip, r2
 801a574:	4439      	add	r1, r7
 801a576:	2a00      	cmp	r2, #0
 801a578:	bfbc      	itt	lt
 801a57a:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 801a57e:	1912      	addlt	r2, r2, r4
 801a580:	fb0c a101 	mla	r1, ip, r1, sl
 801a584:	44e6      	add	lr, ip
 801a586:	80e9      	strh	r1, [r5, #6]
 801a588:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801a58a:	f8a5 e004 	strh.w	lr, [r5, #4]
 801a58e:	eb08 0501 	add.w	r5, r8, r1
 801a592:	6901      	ldr	r1, [r0, #16]
 801a594:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 801a598:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 801a59c:	ea58 070e 	orrs.w	r7, r8, lr
 801a5a0:	d010      	beq.n	801a5c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 801a5a2:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 801a5a6:	f1be 0f00 	cmp.w	lr, #0
 801a5aa:	db0b      	blt.n	801a5c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 801a5ac:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801a5ae:	45be      	cmp	lr, r7
 801a5b0:	da08      	bge.n	801a5c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 801a5b2:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 801a5b6:	45be      	cmp	lr, r7
 801a5b8:	bf3c      	itt	cc
 801a5ba:	3108      	addcc	r1, #8
 801a5bc:	6101      	strcc	r1, [r0, #16]
 801a5be:	f10e 0101 	add.w	r1, lr, #1
 801a5c2:	6081      	str	r1, [r0, #8]
 801a5c4:	6901      	ldr	r1, [r0, #16]
 801a5c6:	f04f 0e00 	mov.w	lr, #0
 801a5ca:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801a5ce:	42ae      	cmp	r6, r5
 801a5d0:	800d      	strh	r5, [r1, #0]
 801a5d2:	4463      	add	r3, ip
 801a5d4:	f8a1 8002 	strh.w	r8, [r1, #2]
 801a5d8:	f8a1 e004 	strh.w	lr, [r1, #4]
 801a5dc:	f8a1 e006 	strh.w	lr, [r1, #6]
 801a5e0:	d053      	beq.n	801a68a <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 801a5e2:	9901      	ldr	r1, [sp, #4]
 801a5e4:	1b12      	subs	r2, r2, r4
 801a5e6:	1ac9      	subs	r1, r1, r3
 801a5e8:	4461      	add	r1, ip
 801a5ea:	0149      	lsls	r1, r1, #5
 801a5ec:	fb91 fef4 	sdiv	lr, r1, r4
 801a5f0:	fb04 111e 	mls	r1, r4, lr, r1
 801a5f4:	2900      	cmp	r1, #0
 801a5f6:	bfbc      	itt	lt
 801a5f8:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 801a5fc:	1909      	addlt	r1, r1, r4
 801a5fe:	f10e 0701 	add.w	r7, lr, #1
 801a602:	970d      	str	r7, [sp, #52]	@ 0x34
 801a604:	f8d0 a010 	ldr.w	sl, [r0, #16]
 801a608:	1852      	adds	r2, r2, r1
 801a60a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801a60c:	bf54      	ite	pl
 801a60e:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 801a612:	46f4      	movmi	ip, lr
 801a614:	f8ba b004 	ldrh.w	fp, [sl, #4]
 801a618:	bf58      	it	pl
 801a61a:	1b12      	subpl	r2, r2, r4
 801a61c:	4463      	add	r3, ip
 801a61e:	443d      	add	r5, r7
 801a620:	44e3      	add	fp, ip
 801a622:	f8aa b004 	strh.w	fp, [sl, #4]
 801a626:	f8ba b006 	ldrh.w	fp, [sl, #6]
 801a62a:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 801a62e:	f8aa b006 	strh.w	fp, [sl, #6]
 801a632:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801a636:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801a63a:	f8bc a004 	ldrh.w	sl, [ip, #4]
 801a63e:	ea5b 070a 	orrs.w	r7, fp, sl
 801a642:	d014      	beq.n	801a66e <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 801a644:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 801a648:	f1ba 0f00 	cmp.w	sl, #0
 801a64c:	db0f      	blt.n	801a66e <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 801a64e:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801a650:	45ba      	cmp	sl, r7
 801a652:	da0c      	bge.n	801a66e <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 801a654:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 801a658:	45ba      	cmp	sl, r7
 801a65a:	f10a 0a01 	add.w	sl, sl, #1
 801a65e:	bf38      	it	cc
 801a660:	f10c 0c08 	addcc.w	ip, ip, #8
 801a664:	f8c0 a008 	str.w	sl, [r0, #8]
 801a668:	bf38      	it	cc
 801a66a:	f8c0 c010 	strcc.w	ip, [r0, #16]
 801a66e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801a672:	f04f 0700 	mov.w	r7, #0
 801a676:	42ae      	cmp	r6, r5
 801a678:	f8ac 5000 	strh.w	r5, [ip]
 801a67c:	f8ac 8002 	strh.w	r8, [ip, #2]
 801a680:	f8ac 7004 	strh.w	r7, [ip, #4]
 801a684:	f8ac 7006 	strh.w	r7, [ip, #6]
 801a688:	d1bc      	bne.n	801a604 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 801a68a:	6904      	ldr	r4, [r0, #16]
 801a68c:	9a01      	ldr	r2, [sp, #4]
 801a68e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801a690:	1ad3      	subs	r3, r2, r3
 801a692:	88a2      	ldrh	r2, [r4, #4]
 801a694:	3120      	adds	r1, #32
 801a696:	441a      	add	r2, r3
 801a698:	80a2      	strh	r2, [r4, #4]
 801a69a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a69c:	1a89      	subs	r1, r1, r2
 801a69e:	88e2      	ldrh	r2, [r4, #6]
 801a6a0:	fb03 2301 	mla	r3, r3, r1, r2
 801a6a4:	80e3      	strh	r3, [r4, #6]
 801a6a6:	e650      	b.n	801a34a <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 801a6a8:	f04f 37ff 	mov.w	r7, #4294967295
 801a6ac:	434a      	muls	r2, r1
 801a6ae:	4264      	negs	r4, r4
 801a6b0:	970a      	str	r7, [sp, #40]	@ 0x28
 801a6b2:	2700      	movs	r7, #0
 801a6b4:	e758      	b.n	801a568 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 801a6b6:	ea4f 1867 	mov.w	r8, r7, asr #5
 801a6ba:	f009 031f 	and.w	r3, r9, #31
 801a6be:	f007 071f 	and.w	r7, r7, #31
 801a6c2:	fa1f fc8c 	uxth.w	ip, ip
 801a6c6:	45d0      	cmp	r8, sl
 801a6c8:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a6ca:	fa1f fe8e 	uxth.w	lr, lr
 801a6ce:	d10a      	bne.n	801a6e6 <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 801a6d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a6d2:	449c      	add	ip, r3
 801a6d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a6d6:	441f      	add	r7, r3
 801a6d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a6da:	f8a5 c004 	strh.w	ip, [r5, #4]
 801a6de:	fb03 e707 	mla	r7, r3, r7, lr
 801a6e2:	80ef      	strh	r7, [r5, #6]
 801a6e4:	e6bc      	b.n	801a460 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801a6e6:	2900      	cmp	r1, #0
 801a6e8:	f2c0 80a6 	blt.w	801a838 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 801a6ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801a6ee:	f1c7 0320 	rsb	r3, r7, #32
 801a6f2:	4363      	muls	r3, r4
 801a6f4:	2401      	movs	r4, #1
 801a6f6:	940d      	str	r4, [sp, #52]	@ 0x34
 801a6f8:	2420      	movs	r4, #32
 801a6fa:	940c      	str	r4, [sp, #48]	@ 0x30
 801a6fc:	fb93 f4f1 	sdiv	r4, r3, r1
 801a700:	fb01 3b14 	mls	fp, r1, r4, r3
 801a704:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a706:	f1bb 0f00 	cmp.w	fp, #0
 801a70a:	441f      	add	r7, r3
 801a70c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a70e:	bfbc      	itt	lt
 801a710:	f104 34ff 	addlt.w	r4, r4, #4294967295
 801a714:	448b      	addlt	fp, r1
 801a716:	fb04 e707 	mla	r7, r4, r7, lr
 801a71a:	44a4      	add	ip, r4
 801a71c:	80ef      	strh	r7, [r5, #6]
 801a71e:	f8a5 c004 	strh.w	ip, [r5, #4]
 801a722:	eb08 0503 	add.w	r5, r8, r3
 801a726:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801a72a:	f8bc e006 	ldrh.w	lr, [ip, #6]
 801a72e:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801a732:	ea5e 0307 	orrs.w	r3, lr, r7
 801a736:	d011      	beq.n	801a75c <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 801a738:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 801a73c:	f1be 0f00 	cmp.w	lr, #0
 801a740:	db0c      	blt.n	801a75c <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 801a742:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801a744:	45be      	cmp	lr, r7
 801a746:	da09      	bge.n	801a75c <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 801a748:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 801a74c:	45be      	cmp	lr, r7
 801a74e:	bf3c      	itt	cc
 801a750:	f10c 0708 	addcc.w	r7, ip, #8
 801a754:	6107      	strcc	r7, [r0, #16]
 801a756:	f10e 0701 	add.w	r7, lr, #1
 801a75a:	6087      	str	r7, [r0, #8]
 801a75c:	6907      	ldr	r7, [r0, #16]
 801a75e:	b213      	sxth	r3, r2
 801a760:	4555      	cmp	r5, sl
 801a762:	9310      	str	r3, [sp, #64]	@ 0x40
 801a764:	807b      	strh	r3, [r7, #2]
 801a766:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a768:	803d      	strh	r5, [r7, #0]
 801a76a:	80be      	strh	r6, [r7, #4]
 801a76c:	eb04 0c03 	add.w	ip, r4, r3
 801a770:	80fe      	strh	r6, [r7, #6]
 801a772:	d050      	beq.n	801a816 <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 801a774:	9b01      	ldr	r3, [sp, #4]
 801a776:	eba3 070c 	sub.w	r7, r3, ip
 801a77a:	ebab 0301 	sub.w	r3, fp, r1
 801a77e:	443c      	add	r4, r7
 801a780:	9309      	str	r3, [sp, #36]	@ 0x24
 801a782:	0164      	lsls	r4, r4, #5
 801a784:	fb94 f8f1 	sdiv	r8, r4, r1
 801a788:	fb01 4418 	mls	r4, r1, r8, r4
 801a78c:	2c00      	cmp	r4, #0
 801a78e:	bfbc      	itt	lt
 801a790:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801a794:	1864      	addlt	r4, r4, r1
 801a796:	f108 0701 	add.w	r7, r8, #1
 801a79a:	9711      	str	r7, [sp, #68]	@ 0x44
 801a79c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a79e:	f8d0 e010 	ldr.w	lr, [r0, #16]
 801a7a2:	191b      	adds	r3, r3, r4
 801a7a4:	f8be b004 	ldrh.w	fp, [lr, #4]
 801a7a8:	bf54      	ite	pl
 801a7aa:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 801a7ac:	4647      	movmi	r7, r8
 801a7ae:	9309      	str	r3, [sp, #36]	@ 0x24
 801a7b0:	bf58      	it	pl
 801a7b2:	1a5b      	subpl	r3, r3, r1
 801a7b4:	44bb      	add	fp, r7
 801a7b6:	44bc      	add	ip, r7
 801a7b8:	bf58      	it	pl
 801a7ba:	9309      	strpl	r3, [sp, #36]	@ 0x24
 801a7bc:	f8ae b004 	strh.w	fp, [lr, #4]
 801a7c0:	f8be b006 	ldrh.w	fp, [lr, #6]
 801a7c4:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801a7c8:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801a7ca:	f8ae b006 	strh.w	fp, [lr, #6]
 801a7ce:	443d      	add	r5, r7
 801a7d0:	f8d0 e010 	ldr.w	lr, [r0, #16]
 801a7d4:	f8be b006 	ldrh.w	fp, [lr, #6]
 801a7d8:	f8be 7004 	ldrh.w	r7, [lr, #4]
 801a7dc:	ea5b 0307 	orrs.w	r3, fp, r7
 801a7e0:	d011      	beq.n	801a806 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 801a7e2:	f9be b002 	ldrsh.w	fp, [lr, #2]
 801a7e6:	f1bb 0f00 	cmp.w	fp, #0
 801a7ea:	db0c      	blt.n	801a806 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 801a7ec:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801a7ee:	45bb      	cmp	fp, r7
 801a7f0:	da09      	bge.n	801a806 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 801a7f2:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801a7f6:	45bb      	cmp	fp, r7
 801a7f8:	bf3c      	itt	cc
 801a7fa:	f10e 0708 	addcc.w	r7, lr, #8
 801a7fe:	6107      	strcc	r7, [r0, #16]
 801a800:	f10b 0701 	add.w	r7, fp, #1
 801a804:	6087      	str	r7, [r0, #8]
 801a806:	6907      	ldr	r7, [r0, #16]
 801a808:	4555      	cmp	r5, sl
 801a80a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a80c:	803d      	strh	r5, [r7, #0]
 801a80e:	807b      	strh	r3, [r7, #2]
 801a810:	80be      	strh	r6, [r7, #4]
 801a812:	80fe      	strh	r6, [r7, #6]
 801a814:	d1c2      	bne.n	801a79c <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 801a816:	9b01      	ldr	r3, [sp, #4]
 801a818:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801a81a:	eba3 0c0c 	sub.w	ip, r3, ip
 801a81e:	6903      	ldr	r3, [r0, #16]
 801a820:	3720      	adds	r7, #32
 801a822:	8899      	ldrh	r1, [r3, #4]
 801a824:	4461      	add	r1, ip
 801a826:	8099      	strh	r1, [r3, #4]
 801a828:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801a82a:	1a7f      	subs	r7, r7, r1
 801a82c:	88d9      	ldrh	r1, [r3, #6]
 801a82e:	fb0c 1c07 	mla	ip, ip, r7, r1
 801a832:	f8a3 c006 	strh.w	ip, [r3, #6]
 801a836:	e613      	b.n	801a460 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801a838:	f04f 34ff 	mov.w	r4, #4294967295
 801a83c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a83e:	4249      	negs	r1, r1
 801a840:	940d      	str	r4, [sp, #52]	@ 0x34
 801a842:	2400      	movs	r4, #0
 801a844:	437b      	muls	r3, r7
 801a846:	e758      	b.n	801a6fa <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 801a848:	9905      	ldr	r1, [sp, #20]
 801a84a:	ea4f 1b69 	mov.w	fp, r9, asr #5
 801a84e:	f009 0c1f 	and.w	ip, r9, #31
 801a852:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 801a856:	f001 011f 	and.w	r1, r1, #31
 801a85a:	45f3      	cmp	fp, lr
 801a85c:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 801a860:	9102      	str	r1, [sp, #8]
 801a862:	9904      	ldr	r1, [sp, #16]
 801a864:	eba1 0406 	sub.w	r4, r1, r6
 801a868:	d108      	bne.n	801a87c <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 801a86a:	9b02      	ldr	r3, [sp, #8]
 801a86c:	44a0      	add	r8, r4
 801a86e:	449c      	add	ip, r3
 801a870:	f8a7 8004 	strh.w	r8, [r7, #4]
 801a874:	fb04 a40c 	mla	r4, r4, ip, sl
 801a878:	80fc      	strh	r4, [r7, #6]
 801a87a:	e461      	b.n	801a140 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801a87c:	9905      	ldr	r1, [sp, #20]
 801a87e:	ebb1 0109 	subs.w	r1, r1, r9
 801a882:	bf51      	iteee	pl
 801a884:	f1cc 0520 	rsbpl	r5, ip, #32
 801a888:	fb04 f40c 	mulmi.w	r4, r4, ip
 801a88c:	4249      	negmi	r1, r1
 801a88e:	2500      	movmi	r5, #0
 801a890:	bf5d      	ittte	pl
 801a892:	436c      	mulpl	r4, r5
 801a894:	2520      	movpl	r5, #32
 801a896:	f04f 0901 	movpl.w	r9, #1
 801a89a:	f04f 39ff 	movmi.w	r9, #4294967295
 801a89e:	9501      	str	r5, [sp, #4]
 801a8a0:	9b01      	ldr	r3, [sp, #4]
 801a8a2:	fb94 f5f1 	sdiv	r5, r4, r1
 801a8a6:	fb01 4415 	mls	r4, r1, r5, r4
 801a8aa:	449c      	add	ip, r3
 801a8ac:	eb0b 0309 	add.w	r3, fp, r9
 801a8b0:	2c00      	cmp	r4, #0
 801a8b2:	bfbc      	itt	lt
 801a8b4:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801a8b8:	1864      	addlt	r4, r4, r1
 801a8ba:	44a8      	add	r8, r5
 801a8bc:	fb05 ac0c 	mla	ip, r5, ip, sl
 801a8c0:	f8a7 8004 	strh.w	r8, [r7, #4]
 801a8c4:	f8a7 c006 	strh.w	ip, [r7, #6]
 801a8c8:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801a8cc:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 801a8d0:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801a8d4:	ea58 0707 	orrs.w	r7, r8, r7
 801a8d8:	d011      	beq.n	801a8fe <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801a8da:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 801a8de:	f1b8 0f00 	cmp.w	r8, #0
 801a8e2:	db0c      	blt.n	801a8fe <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801a8e4:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801a8e6:	45b8      	cmp	r8, r7
 801a8e8:	da09      	bge.n	801a8fe <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801a8ea:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 801a8ee:	45b8      	cmp	r8, r7
 801a8f0:	bf3c      	itt	cc
 801a8f2:	f10c 0708 	addcc.w	r7, ip, #8
 801a8f6:	6107      	strcc	r7, [r0, #16]
 801a8f8:	f108 0701 	add.w	r7, r8, #1
 801a8fc:	6087      	str	r7, [r0, #8]
 801a8fe:	6907      	ldr	r7, [r0, #16]
 801a900:	f04f 0c00 	mov.w	ip, #0
 801a904:	b212      	sxth	r2, r2
 801a906:	459e      	cmp	lr, r3
 801a908:	803b      	strh	r3, [r7, #0]
 801a90a:	442e      	add	r6, r5
 801a90c:	807a      	strh	r2, [r7, #2]
 801a90e:	f8a7 c004 	strh.w	ip, [r7, #4]
 801a912:	f8a7 c006 	strh.w	ip, [r7, #6]
 801a916:	d04b      	beq.n	801a9b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 801a918:	9f04      	ldr	r7, [sp, #16]
 801a91a:	1a64      	subs	r4, r4, r1
 801a91c:	f04f 0a00 	mov.w	sl, #0
 801a920:	1bbf      	subs	r7, r7, r6
 801a922:	443d      	add	r5, r7
 801a924:	016d      	lsls	r5, r5, #5
 801a926:	fb95 f8f1 	sdiv	r8, r5, r1
 801a92a:	fb01 5518 	mls	r5, r1, r8, r5
 801a92e:	4565      	cmp	r5, ip
 801a930:	bfbc      	itt	lt
 801a932:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801a936:	186d      	addlt	r5, r5, r1
 801a938:	f108 0701 	add.w	r7, r8, #1
 801a93c:	9703      	str	r7, [sp, #12]
 801a93e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801a942:	1964      	adds	r4, r4, r5
 801a944:	444b      	add	r3, r9
 801a946:	bf54      	ite	pl
 801a948:	9f03      	ldrpl	r7, [sp, #12]
 801a94a:	4647      	movmi	r7, r8
 801a94c:	f8bc b004 	ldrh.w	fp, [ip, #4]
 801a950:	bf58      	it	pl
 801a952:	1a64      	subpl	r4, r4, r1
 801a954:	443e      	add	r6, r7
 801a956:	44bb      	add	fp, r7
 801a958:	f8ac b004 	strh.w	fp, [ip, #4]
 801a95c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801a960:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801a964:	f8ac b006 	strh.w	fp, [ip, #6]
 801a968:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801a96c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801a970:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801a974:	ea5b 0707 	orrs.w	r7, fp, r7
 801a978:	d011      	beq.n	801a99e <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801a97a:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 801a97e:	f1bb 0f00 	cmp.w	fp, #0
 801a982:	db0c      	blt.n	801a99e <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801a984:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801a986:	45bb      	cmp	fp, r7
 801a988:	da09      	bge.n	801a99e <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801a98a:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801a98e:	45bb      	cmp	fp, r7
 801a990:	bf3c      	itt	cc
 801a992:	f10c 0708 	addcc.w	r7, ip, #8
 801a996:	6107      	strcc	r7, [r0, #16]
 801a998:	f10b 0701 	add.w	r7, fp, #1
 801a99c:	6087      	str	r7, [r0, #8]
 801a99e:	6907      	ldr	r7, [r0, #16]
 801a9a0:	459e      	cmp	lr, r3
 801a9a2:	803b      	strh	r3, [r7, #0]
 801a9a4:	807a      	strh	r2, [r7, #2]
 801a9a6:	f8a7 a004 	strh.w	sl, [r7, #4]
 801a9aa:	f8a7 a006 	strh.w	sl, [r7, #6]
 801a9ae:	d1c6      	bne.n	801a93e <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 801a9b0:	9b04      	ldr	r3, [sp, #16]
 801a9b2:	1b9e      	subs	r6, r3, r6
 801a9b4:	6903      	ldr	r3, [r0, #16]
 801a9b6:	889a      	ldrh	r2, [r3, #4]
 801a9b8:	4432      	add	r2, r6
 801a9ba:	809a      	strh	r2, [r3, #4]
 801a9bc:	9a02      	ldr	r2, [sp, #8]
 801a9be:	f102 0c20 	add.w	ip, r2, #32
 801a9c2:	9a01      	ldr	r2, [sp, #4]
 801a9c4:	ebac 0c02 	sub.w	ip, ip, r2
 801a9c8:	88da      	ldrh	r2, [r3, #6]
 801a9ca:	fb06 260c 	mla	r6, r6, ip, r2
 801a9ce:	80de      	strh	r6, [r3, #6]
 801a9d0:	f7ff bbb6 	b.w	801a140 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

0801a9d4 <_ZN8touchgfx7Outline6lineToEii>:
 801a9d4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801a9d6:	079b      	lsls	r3, r3, #30
 801a9d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a9da:	460e      	mov	r6, r1
 801a9dc:	4615      	mov	r5, r2
 801a9de:	d511      	bpl.n	801aa04 <_ZN8touchgfx7Outline6lineToEii+0x30>
 801a9e0:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 801a9e4:	ea86 0701 	eor.w	r7, r6, r1
 801a9e8:	ea85 0302 	eor.w	r3, r5, r2
 801a9ec:	433b      	orrs	r3, r7
 801a9ee:	d009      	beq.n	801aa04 <_ZN8touchgfx7Outline6lineToEii+0x30>
 801a9f0:	4633      	mov	r3, r6
 801a9f2:	9500      	str	r5, [sp, #0]
 801a9f4:	f7ff fb4c 	bl	801a090 <_ZN8touchgfx7Outline10renderLineEiiii>
 801a9f8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801a9fa:	f043 0301 	orr.w	r3, r3, #1
 801a9fe:	e9c0 6505 	strd	r6, r5, [r0, #20]
 801aa02:	6243      	str	r3, [r0, #36]	@ 0x24
 801aa04:	b003      	add	sp, #12
 801aa06:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801aa08 <_ZN8touchgfx7Outline6moveToEii>:
 801aa08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa0a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801aa0c:	4615      	mov	r5, r2
 801aa0e:	4604      	mov	r4, r0
 801aa10:	460e      	mov	r6, r1
 801aa12:	079a      	lsls	r2, r3, #30
 801aa14:	d401      	bmi.n	801aa1a <_ZN8touchgfx7Outline6moveToEii+0x12>
 801aa16:	f7ff fb07 	bl	801a028 <_ZN8touchgfx7Outline5resetEv>
 801aa1a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801aa1c:	07db      	lsls	r3, r3, #31
 801aa1e:	d504      	bpl.n	801aa2a <_ZN8touchgfx7Outline6moveToEii+0x22>
 801aa20:	4620      	mov	r0, r4
 801aa22:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 801aa26:	f7ff ffd5 	bl	801a9d4 <_ZN8touchgfx7Outline6lineToEii>
 801aa2a:	6923      	ldr	r3, [r4, #16]
 801aa2c:	1170      	asrs	r0, r6, #5
 801aa2e:	1169      	asrs	r1, r5, #5
 801aa30:	f9b3 2000 	ldrsh.w	r2, [r3]
 801aa34:	4290      	cmp	r0, r2
 801aa36:	d103      	bne.n	801aa40 <_ZN8touchgfx7Outline6moveToEii+0x38>
 801aa38:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801aa3c:	4291      	cmp	r1, r2
 801aa3e:	d01a      	beq.n	801aa76 <_ZN8touchgfx7Outline6moveToEii+0x6e>
 801aa40:	88df      	ldrh	r7, [r3, #6]
 801aa42:	889a      	ldrh	r2, [r3, #4]
 801aa44:	433a      	orrs	r2, r7
 801aa46:	d010      	beq.n	801aa6a <_ZN8touchgfx7Outline6moveToEii+0x62>
 801aa48:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801aa4c:	2a00      	cmp	r2, #0
 801aa4e:	db0c      	blt.n	801aa6a <_ZN8touchgfx7Outline6moveToEii+0x62>
 801aa50:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801aa52:	42ba      	cmp	r2, r7
 801aa54:	da09      	bge.n	801aa6a <_ZN8touchgfx7Outline6moveToEii+0x62>
 801aa56:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 801aa5a:	42ba      	cmp	r2, r7
 801aa5c:	f102 0201 	add.w	r2, r2, #1
 801aa60:	bf38      	it	cc
 801aa62:	3308      	addcc	r3, #8
 801aa64:	60a2      	str	r2, [r4, #8]
 801aa66:	bf38      	it	cc
 801aa68:	6123      	strcc	r3, [r4, #16]
 801aa6a:	6923      	ldr	r3, [r4, #16]
 801aa6c:	2200      	movs	r2, #0
 801aa6e:	8018      	strh	r0, [r3, #0]
 801aa70:	8059      	strh	r1, [r3, #2]
 801aa72:	809a      	strh	r2, [r3, #4]
 801aa74:	80da      	strh	r2, [r3, #6]
 801aa76:	6166      	str	r6, [r4, #20]
 801aa78:	6225      	str	r5, [r4, #32]
 801aa7a:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801aa7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801aa80 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 801aa80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aa84:	b0d0      	sub	sp, #320	@ 0x140
 801aa86:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801aa8a:	466c      	mov	r4, sp
 801aa8c:	4627      	mov	r7, r4
 801aa8e:	1a0d      	subs	r5, r1, r0
 801aa90:	f100 0308 	add.w	r3, r0, #8
 801aa94:	2d48      	cmp	r5, #72	@ 0x48
 801aa96:	f340 80d5 	ble.w	801ac44 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 801aa9a:	112d      	asrs	r5, r5, #4
 801aa9c:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 801aaa0:	f9b0 9000 	ldrsh.w	r9, [r0]
 801aaa4:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 801aaa8:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 801aaac:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801aab0:	6816      	ldr	r6, [r2, #0]
 801aab2:	6006      	str	r6, [r0, #0]
 801aab4:	6856      	ldr	r6, [r2, #4]
 801aab6:	6046      	str	r6, [r0, #4]
 801aab8:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801aabc:	f8a2 8002 	strh.w	r8, [r2, #2]
 801aac0:	f8a2 e004 	strh.w	lr, [r2, #4]
 801aac4:	f8a2 c006 	strh.w	ip, [r2, #6]
 801aac8:	f1a1 0208 	sub.w	r2, r1, #8
 801aacc:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 801aad0:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 801aad4:	4565      	cmp	r5, ip
 801aad6:	db06      	blt.n	801aae6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 801aad8:	d119      	bne.n	801ab0e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 801aada:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 801aade:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 801aae2:	42ae      	cmp	r6, r5
 801aae4:	dd13      	ble.n	801ab0e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 801aae6:	460e      	mov	r6, r1
 801aae8:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 801aaec:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 801aaf0:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 801aaf4:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 801aaf8:	601d      	str	r5, [r3, #0]
 801aafa:	6875      	ldr	r5, [r6, #4]
 801aafc:	605d      	str	r5, [r3, #4]
 801aafe:	f821 9c08 	strh.w	r9, [r1, #-8]
 801ab02:	f821 cc06 	strh.w	ip, [r1, #-6]
 801ab06:	f821 8c04 	strh.w	r8, [r1, #-4]
 801ab0a:	f821 ec02 	strh.w	lr, [r1, #-2]
 801ab0e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801ab12:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 801ab16:	42ae      	cmp	r6, r5
 801ab18:	db06      	blt.n	801ab28 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 801ab1a:	d116      	bne.n	801ab4a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 801ab1c:	f9b0 c000 	ldrsh.w	ip, [r0]
 801ab20:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 801ab24:	45ac      	cmp	ip, r5
 801ab26:	da10      	bge.n	801ab4a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 801ab28:	681d      	ldr	r5, [r3, #0]
 801ab2a:	f9b0 8000 	ldrsh.w	r8, [r0]
 801ab2e:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801ab32:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 801ab36:	6005      	str	r5, [r0, #0]
 801ab38:	685d      	ldr	r5, [r3, #4]
 801ab3a:	f8a0 8008 	strh.w	r8, [r0, #8]
 801ab3e:	6045      	str	r5, [r0, #4]
 801ab40:	8146      	strh	r6, [r0, #10]
 801ab42:	f8a0 e00c 	strh.w	lr, [r0, #12]
 801ab46:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801ab4a:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 801ab4e:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801ab52:	4565      	cmp	r5, ip
 801ab54:	db06      	blt.n	801ab64 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 801ab56:	d119      	bne.n	801ab8c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801ab58:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 801ab5c:	f9b0 5000 	ldrsh.w	r5, [r0]
 801ab60:	42ae      	cmp	r6, r5
 801ab62:	da13      	bge.n	801ab8c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801ab64:	460e      	mov	r6, r1
 801ab66:	f9b0 9000 	ldrsh.w	r9, [r0]
 801ab6a:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 801ab6e:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 801ab72:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 801ab76:	6005      	str	r5, [r0, #0]
 801ab78:	6875      	ldr	r5, [r6, #4]
 801ab7a:	6045      	str	r5, [r0, #4]
 801ab7c:	f821 9c08 	strh.w	r9, [r1, #-8]
 801ab80:	f821 cc06 	strh.w	ip, [r1, #-6]
 801ab84:	f821 8c04 	strh.w	r8, [r1, #-4]
 801ab88:	f821 ec02 	strh.w	lr, [r1, #-2]
 801ab8c:	3308      	adds	r3, #8
 801ab8e:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801ab92:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 801ab96:	45e6      	cmp	lr, ip
 801ab98:	dbf8      	blt.n	801ab8c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801ab9a:	d105      	bne.n	801aba8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801ab9c:	f9b3 6000 	ldrsh.w	r6, [r3]
 801aba0:	f9b0 5000 	ldrsh.w	r5, [r0]
 801aba4:	42ae      	cmp	r6, r5
 801aba6:	dbf1      	blt.n	801ab8c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801aba8:	4615      	mov	r5, r2
 801abaa:	3a08      	subs	r2, #8
 801abac:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 801abb0:	45b4      	cmp	ip, r6
 801abb2:	dbf9      	blt.n	801aba8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801abb4:	d105      	bne.n	801abc2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 801abb6:	f9b0 8000 	ldrsh.w	r8, [r0]
 801abba:	f9b2 6000 	ldrsh.w	r6, [r2]
 801abbe:	45b0      	cmp	r8, r6
 801abc0:	dbf2      	blt.n	801aba8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801abc2:	4293      	cmp	r3, r2
 801abc4:	f1a5 0608 	sub.w	r6, r5, #8
 801abc8:	d816      	bhi.n	801abf8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 801abca:	f8d6 c000 	ldr.w	ip, [r6]
 801abce:	f9b3 a000 	ldrsh.w	sl, [r3]
 801abd2:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 801abd6:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 801abda:	f8c3 c000 	str.w	ip, [r3]
 801abde:	f8d6 c004 	ldr.w	ip, [r6, #4]
 801abe2:	f8c3 c004 	str.w	ip, [r3, #4]
 801abe6:	f825 ac08 	strh.w	sl, [r5, #-8]
 801abea:	f825 ec06 	strh.w	lr, [r5, #-6]
 801abee:	f825 9c04 	strh.w	r9, [r5, #-4]
 801abf2:	f825 8c02 	strh.w	r8, [r5, #-2]
 801abf6:	e7c9      	b.n	801ab8c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801abf8:	f8d6 e000 	ldr.w	lr, [r6]
 801abfc:	f9b0 a000 	ldrsh.w	sl, [r0]
 801ac00:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 801ac04:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 801ac08:	f8c0 e000 	str.w	lr, [r0]
 801ac0c:	f8d6 e004 	ldr.w	lr, [r6, #4]
 801ac10:	1a16      	subs	r6, r2, r0
 801ac12:	f8c0 e004 	str.w	lr, [r0, #4]
 801ac16:	f825 ac08 	strh.w	sl, [r5, #-8]
 801ac1a:	f825 cc06 	strh.w	ip, [r5, #-6]
 801ac1e:	f825 9c04 	strh.w	r9, [r5, #-4]
 801ac22:	f825 8c02 	strh.w	r8, [r5, #-2]
 801ac26:	1acd      	subs	r5, r1, r3
 801ac28:	10ed      	asrs	r5, r5, #3
 801ac2a:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 801ac2e:	bfb5      	itete	lt
 801ac30:	e9c4 0200 	strdlt	r0, r2, [r4]
 801ac34:	e9c4 3100 	strdge	r3, r1, [r4]
 801ac38:	460a      	movlt	r2, r1
 801ac3a:	4603      	movge	r3, r0
 801ac3c:	3408      	adds	r4, #8
 801ac3e:	4618      	mov	r0, r3
 801ac40:	4611      	mov	r1, r2
 801ac42:	e724      	b.n	801aa8e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 801ac44:	4299      	cmp	r1, r3
 801ac46:	d927      	bls.n	801ac98 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 801ac48:	f1a3 0210 	sub.w	r2, r3, #16
 801ac4c:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 801ac50:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 801ac54:	45ac      	cmp	ip, r5
 801ac56:	db06      	blt.n	801ac66 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 801ac58:	d11c      	bne.n	801ac94 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 801ac5a:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 801ac5e:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 801ac62:	42ae      	cmp	r6, r5
 801ac64:	da16      	bge.n	801ac94 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 801ac66:	4615      	mov	r5, r2
 801ac68:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 801ac6c:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 801ac70:	3a08      	subs	r2, #8
 801ac72:	f855 6f08 	ldr.w	r6, [r5, #8]!
 801ac76:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 801ac7a:	6196      	str	r6, [r2, #24]
 801ac7c:	42a8      	cmp	r0, r5
 801ac7e:	686e      	ldr	r6, [r5, #4]
 801ac80:	f8a2 9010 	strh.w	r9, [r2, #16]
 801ac84:	61d6      	str	r6, [r2, #28]
 801ac86:	f8a2 c012 	strh.w	ip, [r2, #18]
 801ac8a:	f8a2 8014 	strh.w	r8, [r2, #20]
 801ac8e:	f8a2 e016 	strh.w	lr, [r2, #22]
 801ac92:	d1db      	bne.n	801ac4c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 801ac94:	3308      	adds	r3, #8
 801ac96:	e7d5      	b.n	801ac44 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 801ac98:	42bc      	cmp	r4, r7
 801ac9a:	d903      	bls.n	801aca4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 801ac9c:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 801aca0:	3c08      	subs	r4, #8
 801aca2:	e6f4      	b.n	801aa8e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 801aca4:	b050      	add	sp, #320	@ 0x140
 801aca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801acaa <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 801acaa:	b510      	push	{r4, lr}
 801acac:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801acae:	4604      	mov	r4, r0
 801acb0:	07da      	lsls	r2, r3, #31
 801acb2:	d507      	bpl.n	801acc4 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 801acb4:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 801acb8:	f7ff fe8c 	bl	801a9d4 <_ZN8touchgfx7Outline6lineToEii>
 801acbc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801acbe:	f023 0301 	bic.w	r3, r3, #1
 801acc2:	6243      	str	r3, [r0, #36]	@ 0x24
 801acc4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801acc6:	079b      	lsls	r3, r3, #30
 801acc8:	d521      	bpl.n	801ad0e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 801acca:	6923      	ldr	r3, [r4, #16]
 801accc:	88d9      	ldrh	r1, [r3, #6]
 801acce:	889a      	ldrh	r2, [r3, #4]
 801acd0:	430a      	orrs	r2, r1
 801acd2:	d010      	beq.n	801acf6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801acd4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801acd8:	2a00      	cmp	r2, #0
 801acda:	db0c      	blt.n	801acf6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801acdc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801acde:	428a      	cmp	r2, r1
 801ace0:	da09      	bge.n	801acf6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801ace2:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 801ace6:	4291      	cmp	r1, r2
 801ace8:	f102 0201 	add.w	r2, r2, #1
 801acec:	bf88      	it	hi
 801acee:	3308      	addhi	r3, #8
 801acf0:	60a2      	str	r2, [r4, #8]
 801acf2:	bf88      	it	hi
 801acf4:	6123      	strhi	r3, [r4, #16]
 801acf6:	68a1      	ldr	r1, [r4, #8]
 801acf8:	b129      	cbz	r1, 801ad06 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 801acfa:	6863      	ldr	r3, [r4, #4]
 801acfc:	4299      	cmp	r1, r3
 801acfe:	d802      	bhi.n	801ad06 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 801ad00:	68e0      	ldr	r0, [r4, #12]
 801ad02:	f7ff febd 	bl	801aa80 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 801ad06:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801ad08:	f023 0302 	bic.w	r3, r3, #2
 801ad0c:	6263      	str	r3, [r4, #36]	@ 0x24
 801ad0e:	68e0      	ldr	r0, [r4, #12]
 801ad10:	bd10      	pop	{r4, pc}
	...

0801ad14 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 801ad14:	4b01      	ldr	r3, [pc, #4]	@ (801ad1c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 801ad16:	6818      	ldr	r0, [r3, #0]
 801ad18:	4770      	bx	lr
 801ad1a:	bf00      	nop
 801ad1c:	24013b60 	.word	0x24013b60

0801ad20 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 801ad20:	4b01      	ldr	r3, [pc, #4]	@ (801ad28 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801ad22:	6818      	ldr	r0, [r3, #0]
 801ad24:	4770      	bx	lr
 801ad26:	bf00      	nop
 801ad28:	24013b64 	.word	0x24013b64

0801ad2c <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 801ad2c:	b510      	push	{r4, lr}
 801ad2e:	6803      	ldr	r3, [r0, #0]
 801ad30:	460c      	mov	r4, r1
 801ad32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ad34:	4798      	blx	r3
 801ad36:	1b03      	subs	r3, r0, r4
 801ad38:	4258      	negs	r0, r3
 801ad3a:	4158      	adcs	r0, r3
 801ad3c:	bd10      	pop	{r4, pc}
	...

0801ad40 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801ad40:	4b01      	ldr	r3, [pc, #4]	@ (801ad48 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801ad42:	6019      	str	r1, [r3, #0]
 801ad44:	4770      	bx	lr
 801ad46:	bf00      	nop
 801ad48:	24013b68 	.word	0x24013b68

0801ad4c <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801ad4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad50:	4696      	mov	lr, r2
 801ad52:	b097      	sub	sp, #92	@ 0x5c
 801ad54:	4605      	mov	r5, r0
 801ad56:	4614      	mov	r4, r2
 801ad58:	460e      	mov	r6, r1
 801ad5a:	461f      	mov	r7, r3
 801ad5c:	f10d 0c1c 	add.w	ip, sp, #28
 801ad60:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 801ad64:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 801ad68:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 801ad6c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ad70:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ad74:	f8de 3000 	ldr.w	r3, [lr]
 801ad78:	f104 0e14 	add.w	lr, r4, #20
 801ad7c:	f8cc 3000 	str.w	r3, [ip]
 801ad80:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801ad84:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ad88:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ad8c:	f8de 3000 	ldr.w	r3, [lr]
 801ad90:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 801ad94:	f8cc 3000 	str.w	r3, [ip]
 801ad98:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801ad9c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ada0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ada4:	f8de 3000 	ldr.w	r3, [lr]
 801ada8:	4631      	mov	r1, r6
 801adaa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801adac:	4628      	mov	r0, r5
 801adae:	f8cc 3000 	str.w	r3, [ip]
 801adb2:	682b      	ldr	r3, [r5, #0]
 801adb4:	9201      	str	r2, [sp, #4]
 801adb6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801adb8:	f8cd 8008 	str.w	r8, [sp, #8]
 801adbc:	9200      	str	r2, [sp, #0]
 801adbe:	aa07      	add	r2, sp, #28
 801adc0:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801adc4:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 801adc8:	463b      	mov	r3, r7
 801adca:	47d8      	blx	fp
 801adcc:	46a6      	mov	lr, r4
 801adce:	f10d 0c1c 	add.w	ip, sp, #28
 801add2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801add6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801adda:	f8de 3000 	ldr.w	r3, [lr]
 801adde:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 801ade2:	343c      	adds	r4, #60	@ 0x3c
 801ade4:	f8cc 3000 	str.w	r3, [ip]
 801ade8:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801adec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801adf0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801adf4:	f8de 3000 	ldr.w	r3, [lr]
 801adf8:	f8cc 3000 	str.w	r3, [ip]
 801adfc:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801ae00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ae02:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ae06:	6823      	ldr	r3, [r4, #0]
 801ae08:	4631      	mov	r1, r6
 801ae0a:	4628      	mov	r0, r5
 801ae0c:	f8cc 3000 	str.w	r3, [ip]
 801ae10:	682b      	ldr	r3, [r5, #0]
 801ae12:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801ae16:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801ae18:	f8cd 8008 	str.w	r8, [sp, #8]
 801ae1c:	9201      	str	r2, [sp, #4]
 801ae1e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801ae20:	9200      	str	r2, [sp, #0]
 801ae22:	aa07      	add	r2, sp, #28
 801ae24:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 801ae26:	463b      	mov	r3, r7
 801ae28:	47a0      	blx	r4
 801ae2a:	b017      	add	sp, #92	@ 0x5c
 801ae2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ae30 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801ae30:	2000      	movs	r0, #0
 801ae32:	4770      	bx	lr

0801ae34 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801ae34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae38:	b08d      	sub	sp, #52	@ 0x34
 801ae3a:	4688      	mov	r8, r1
 801ae3c:	f8d3 c000 	ldr.w	ip, [r3]
 801ae40:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801ae42:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 801ae46:	680f      	ldr	r7, [r1, #0]
 801ae48:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 801ae4c:	eba7 070c 	sub.w	r7, r7, ip
 801ae50:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 801ae54:	edd3 6a07 	vldr	s13, [r3, #28]
 801ae58:	42bc      	cmp	r4, r7
 801ae5a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801ae5c:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 801ae60:	bfa8      	it	ge
 801ae62:	463c      	movge	r4, r7
 801ae64:	f9b1 9000 	ldrsh.w	r9, [r1]
 801ae68:	f9ba 1000 	ldrsh.w	r1, [sl]
 801ae6c:	ee07 4a90 	vmov	s15, r4
 801ae70:	eb09 0e0c 	add.w	lr, r9, ip
 801ae74:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 801ae78:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801ae7c:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 801ae80:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 801ae84:	4571      	cmp	r1, lr
 801ae86:	ee25 4a04 	vmul.f32	s8, s10, s8
 801ae8a:	ee65 4a24 	vmul.f32	s9, s10, s9
 801ae8e:	ee25 5a27 	vmul.f32	s10, s10, s15
 801ae92:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801ae96:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801ae9a:	ee32 1a05 	vadd.f32	s2, s4, s10
 801ae9e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801aea2:	ee36 0a84 	vadd.f32	s0, s13, s8
 801aea6:	ee61 1a87 	vmul.f32	s3, s3, s14
 801aeaa:	ee22 2a07 	vmul.f32	s4, s4, s14
 801aeae:	f340 808c 	ble.w	801afca <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801aeb2:	eba1 060e 	sub.w	r6, r1, lr
 801aeb6:	fb96 f5f4 	sdiv	r5, r6, r4
 801aeba:	ee07 5a10 	vmov	s14, r5
 801aebe:	2d00      	cmp	r5, #0
 801aec0:	fb04 6615 	mls	r6, r4, r5, r6
 801aec4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801aec8:	eea7 0a04 	vfma.f32	s0, s14, s8
 801aecc:	eee7 0a24 	vfma.f32	s1, s14, s9
 801aed0:	eea7 1a05 	vfma.f32	s2, s14, s10
 801aed4:	dd12      	ble.n	801aefc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801aed6:	ee70 6a44 	vsub.f32	s13, s0, s8
 801aeda:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801aede:	ee31 2a45 	vsub.f32	s4, s2, s10
 801aee2:	eef5 6a40 	vcmp.f32	s13, #0.0
 801aee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aeea:	bf14      	ite	ne
 801aeec:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801aef0:	eeb0 7a67 	vmoveq.f32	s14, s15
 801aef4:	ee61 1a87 	vmul.f32	s3, s3, s14
 801aef8:	ee22 2a07 	vmul.f32	s4, s4, s14
 801aefc:	fb05 f204 	mul.w	r2, r5, r4
 801af00:	1abf      	subs	r7, r7, r2
 801af02:	4494      	add	ip, r2
 801af04:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801af08:	4411      	add	r1, r2
 801af0a:	eb09 020c 	add.w	r2, r9, ip
 801af0e:	b209      	sxth	r1, r1
 801af10:	443a      	add	r2, r7
 801af12:	428a      	cmp	r2, r1
 801af14:	bfc4      	itt	gt
 801af16:	eba1 0209 	subgt.w	r2, r1, r9
 801af1a:	eba2 070c 	subgt.w	r7, r2, ip
 801af1e:	2f00      	cmp	r7, #0
 801af20:	dd50      	ble.n	801afc4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801af22:	fb97 f1f4 	sdiv	r1, r7, r4
 801af26:	fb04 7211 	mls	r2, r4, r1, r7
 801af2a:	b90a      	cbnz	r2, 801af30 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801af2c:	3901      	subs	r1, #1
 801af2e:	4622      	mov	r2, r4
 801af30:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801af34:	6840      	ldr	r0, [r0, #4]
 801af36:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 801af3a:	44b6      	add	lr, r6
 801af3c:	f8d0 a000 	ldr.w	sl, [r0]
 801af40:	2900      	cmp	r1, #0
 801af42:	bfcc      	ite	gt
 801af44:	46a1      	movgt	r9, r4
 801af46:	4691      	movle	r9, r2
 801af48:	900b      	str	r0, [sp, #44]	@ 0x2c
 801af4a:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801af4c:	fb04 e505 	mla	r5, r4, r5, lr
 801af50:	eef0 6a42 	vmov.f32	s13, s4
 801af54:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801af58:	9008      	str	r0, [sp, #32]
 801af5a:	eeb0 7a61 	vmov.f32	s14, s3
 801af5e:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801af60:	695b      	ldr	r3, [r3, #20]
 801af62:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801af66:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801af6a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801af6e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801af70:	445b      	add	r3, fp
 801af72:	9307      	str	r3, [sp, #28]
 801af74:	ee16 3a90 	vmov	r3, s13
 801af78:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801af7c:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801af80:	ee21 3a23 	vmul.f32	s6, s2, s7
 801af84:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801af88:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801af8c:	ee17 7a90 	vmov	r7, s15
 801af90:	ee73 7a42 	vsub.f32	s15, s6, s4
 801af94:	fb97 f7f4 	sdiv	r7, r7, r4
 801af98:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801af9c:	ee17 ca90 	vmov	ip, s15
 801afa0:	fb9c fcf4 	sdiv	ip, ip, r4
 801afa4:	fb0c 3306 	mla	r3, ip, r6, r3
 801afa8:	9302      	str	r3, [sp, #8]
 801afaa:	ee17 3a10 	vmov	r3, s14
 801afae:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801afb2:	fb07 3706 	mla	r7, r7, r6, r3
 801afb6:	eba9 0306 	sub.w	r3, r9, r6
 801afba:	e9cd 4700 	strd	r4, r7, [sp]
 801afbe:	f8da 4008 	ldr.w	r4, [sl, #8]
 801afc2:	47a0      	blx	r4
 801afc4:	b00d      	add	sp, #52	@ 0x34
 801afc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801afca:	2500      	movs	r5, #0
 801afcc:	462e      	mov	r6, r5
 801afce:	e799      	b.n	801af04 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0801afd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801afd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afd4:	b0db      	sub	sp, #364	@ 0x16c
 801afd6:	461d      	mov	r5, r3
 801afd8:	4614      	mov	r4, r2
 801afda:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 801afde:	910f      	str	r1, [sp, #60]	@ 0x3c
 801afe0:	4629      	mov	r1, r5
 801afe2:	930a      	str	r3, [sp, #40]	@ 0x28
 801afe4:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 801afe8:	9009      	str	r0, [sp, #36]	@ 0x24
 801afea:	930b      	str	r3, [sp, #44]	@ 0x2c
 801afec:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 801aff0:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 801aff4:	9310      	str	r3, [sp, #64]	@ 0x40
 801aff6:	6803      	ldr	r3, [r0, #0]
 801aff8:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 801affa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 801affe:	47b8      	blx	r7
 801b000:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b002:	6058      	str	r0, [r3, #4]
 801b004:	2800      	cmp	r0, #0
 801b006:	f000 83a1 	beq.w	801b74c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b00a:	682b      	ldr	r3, [r5, #0]
 801b00c:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 801b010:	ed94 7a02 	vldr	s14, [r4, #8]
 801b014:	9314      	str	r3, [sp, #80]	@ 0x50
 801b016:	686b      	ldr	r3, [r5, #4]
 801b018:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b01c:	9315      	str	r3, [sp, #84]	@ 0x54
 801b01e:	4bc1      	ldr	r3, [pc, #772]	@ (801b324 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 801b020:	7819      	ldrb	r1, [r3, #0]
 801b022:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801b026:	2900      	cmp	r1, #0
 801b028:	bf16      	itet	ne
 801b02a:	4619      	movne	r1, r3
 801b02c:	4611      	moveq	r1, r2
 801b02e:	4613      	movne	r3, r2
 801b030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b034:	9116      	str	r1, [sp, #88]	@ 0x58
 801b036:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 801b03a:	f240 8387 	bls.w	801b74c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b03e:	ed94 7a07 	vldr	s14, [r4, #28]
 801b042:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b04a:	f240 837f 	bls.w	801b74c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b04e:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 801b052:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b05a:	f240 8377 	bls.w	801b74c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b05e:	6822      	ldr	r2, [r4, #0]
 801b060:	4bb1      	ldr	r3, [pc, #708]	@ (801b328 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801b062:	429a      	cmp	r2, r3
 801b064:	f2c0 8372 	blt.w	801b74c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b068:	49b0      	ldr	r1, [pc, #704]	@ (801b32c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801b06a:	6963      	ldr	r3, [r4, #20]
 801b06c:	428a      	cmp	r2, r1
 801b06e:	f300 836d 	bgt.w	801b74c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b072:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 801b076:	48ae      	ldr	r0, [pc, #696]	@ (801b330 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801b078:	33ff      	adds	r3, #255	@ 0xff
 801b07a:	4283      	cmp	r3, r0
 801b07c:	f200 8366 	bhi.w	801b74c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b080:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801b082:	4dac      	ldr	r5, [pc, #688]	@ (801b334 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801b084:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 801b088:	33ff      	adds	r3, #255	@ 0xff
 801b08a:	42ab      	cmp	r3, r5
 801b08c:	f200 835e 	bhi.w	801b74c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b090:	6862      	ldr	r2, [r4, #4]
 801b092:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 801b096:	33ff      	adds	r3, #255	@ 0xff
 801b098:	4283      	cmp	r3, r0
 801b09a:	f200 8357 	bhi.w	801b74c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b09e:	69a1      	ldr	r1, [r4, #24]
 801b0a0:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 801b0a4:	33ff      	adds	r3, #255	@ 0xff
 801b0a6:	4283      	cmp	r3, r0
 801b0a8:	f200 8350 	bhi.w	801b74c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b0ac:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801b0ae:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 801b0b2:	30ff      	adds	r0, #255	@ 0xff
 801b0b4:	42a8      	cmp	r0, r5
 801b0b6:	f200 8349 	bhi.w	801b74c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b0ba:	428a      	cmp	r2, r1
 801b0bc:	f280 8110 	bge.w	801b2e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801b0c0:	429a      	cmp	r2, r3
 801b0c2:	f300 8119 	bgt.w	801b2f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801b0c6:	4299      	cmp	r1, r3
 801b0c8:	f280 811d 	bge.w	801b306 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801b0cc:	2502      	movs	r5, #2
 801b0ce:	2701      	movs	r7, #1
 801b0d0:	46a9      	mov	r9, r5
 801b0d2:	46b8      	mov	r8, r7
 801b0d4:	f04f 0a00 	mov.w	sl, #0
 801b0d8:	4621      	mov	r1, r4
 801b0da:	a849      	add	r0, sp, #292	@ 0x124
 801b0dc:	f003 fb22 	bl	801e724 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801b0e0:	4622      	mov	r2, r4
 801b0e2:	4653      	mov	r3, sl
 801b0e4:	a949      	add	r1, sp, #292	@ 0x124
 801b0e6:	f8cd 9000 	str.w	r9, [sp]
 801b0ea:	a819      	add	r0, sp, #100	@ 0x64
 801b0ec:	f003 fc4a 	bl	801e984 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801b0f0:	4622      	mov	r2, r4
 801b0f2:	4653      	mov	r3, sl
 801b0f4:	a949      	add	r1, sp, #292	@ 0x124
 801b0f6:	f8cd 8000 	str.w	r8, [sp]
 801b0fa:	a829      	add	r0, sp, #164	@ 0xa4
 801b0fc:	f003 fc42 	bl	801e984 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801b100:	4643      	mov	r3, r8
 801b102:	4622      	mov	r2, r4
 801b104:	a949      	add	r1, sp, #292	@ 0x124
 801b106:	f8cd 9000 	str.w	r9, [sp]
 801b10a:	a839      	add	r0, sp, #228	@ 0xe4
 801b10c:	f003 fc3a 	bl	801e984 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801b110:	42af      	cmp	r7, r5
 801b112:	af12      	add	r7, sp, #72	@ 0x48
 801b114:	bfb7      	itett	lt
 801b116:	2300      	movlt	r3, #0
 801b118:	2301      	movge	r3, #1
 801b11a:	ad29      	addlt	r5, sp, #164	@ 0xa4
 801b11c:	ac19      	addlt	r4, sp, #100	@ 0x64
 801b11e:	bfb1      	iteee	lt
 801b120:	930e      	strlt	r3, [sp, #56]	@ 0x38
 801b122:	ad19      	addge	r5, sp, #100	@ 0x64
 801b124:	930e      	strge	r3, [sp, #56]	@ 0x38
 801b126:	ac29      	addge	r4, sp, #164	@ 0xa4
 801b128:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b12a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b12e:	e887 0003 	stmia.w	r7, {r0, r1}
 801b132:	b928      	cbnz	r0, 801b140 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801b134:	4b80      	ldr	r3, [pc, #512]	@ (801b338 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801b136:	6818      	ldr	r0, [r3, #0]
 801b138:	6803      	ldr	r3, [r0, #0]
 801b13a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b13c:	4798      	blx	r3
 801b13e:	6038      	str	r0, [r7, #0]
 801b140:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801b142:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801b146:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b14a:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 801b14c:	930c      	str	r3, [sp, #48]	@ 0x30
 801b14e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801b150:	6963      	ldr	r3, [r4, #20]
 801b152:	440b      	add	r3, r1
 801b154:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801b158:	4408      	add	r0, r1
 801b15a:	b200      	sxth	r0, r0
 801b15c:	4283      	cmp	r3, r0
 801b15e:	900d      	str	r0, [sp, #52]	@ 0x34
 801b160:	f280 80dd 	bge.w	801b31e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801b164:	428b      	cmp	r3, r1
 801b166:	da08      	bge.n	801b17a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801b168:	2a00      	cmp	r2, #0
 801b16a:	dd06      	ble.n	801b17a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801b16c:	1acb      	subs	r3, r1, r3
 801b16e:	429a      	cmp	r2, r3
 801b170:	f2c0 80e4 	blt.w	801b33c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801b174:	2b00      	cmp	r3, #0
 801b176:	f300 80e2 	bgt.w	801b33e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801b17a:	6967      	ldr	r7, [r4, #20]
 801b17c:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 801b180:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b182:	443b      	add	r3, r7
 801b184:	461f      	mov	r7, r3
 801b186:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b188:	1bdf      	subs	r7, r3, r7
 801b18a:	4297      	cmp	r7, r2
 801b18c:	bfa8      	it	ge
 801b18e:	4617      	movge	r7, r2
 801b190:	2f00      	cmp	r7, #0
 801b192:	f340 8166 	ble.w	801b462 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801b196:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801b198:	6829      	ldr	r1, [r5, #0]
 801b19a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b19e:	f9bb 3000 	ldrsh.w	r3, [fp]
 801b1a2:	4411      	add	r1, r2
 801b1a4:	6820      	ldr	r0, [r4, #0]
 801b1a6:	4299      	cmp	r1, r3
 801b1a8:	dd1a      	ble.n	801b1e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801b1aa:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801b1ae:	4402      	add	r2, r0
 801b1b0:	440b      	add	r3, r1
 801b1b2:	b21b      	sxth	r3, r3
 801b1b4:	429a      	cmp	r2, r3
 801b1b6:	dc13      	bgt.n	801b1e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801b1b8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801b1ba:	a912      	add	r1, sp, #72	@ 0x48
 801b1bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b1be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b1c0:	681b      	ldr	r3, [r3, #0]
 801b1c2:	9206      	str	r2, [sp, #24]
 801b1c4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801b1c6:	9500      	str	r5, [sp, #0]
 801b1c8:	9205      	str	r2, [sp, #20]
 801b1ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b1cc:	e9cd b203 	strd	fp, r2, [sp, #12]
 801b1d0:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 801b1d2:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801b1d6:	aa49      	add	r2, sp, #292	@ 0x124
 801b1d8:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 801b1dc:	4623      	mov	r3, r4
 801b1de:	47c8      	blx	r9
 801b1e0:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 801b1e4:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 801b1e8:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 801b1ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b1f0:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 801b1f4:	68a1      	ldr	r1, [r4, #8]
 801b1f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b1fa:	ed94 6a08 	vldr	s12, [r4, #32]
 801b1fe:	edd4 6a07 	vldr	s13, [r4, #28]
 801b202:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801b206:	ee76 6a86 	vadd.f32	s13, s13, s12
 801b20a:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801b20e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801b212:	edc4 6a07 	vstr	s13, [r4, #28]
 801b216:	441a      	add	r2, r3
 801b218:	6963      	ldr	r3, [r4, #20]
 801b21a:	3301      	adds	r3, #1
 801b21c:	6022      	str	r2, [r4, #0]
 801b21e:	6163      	str	r3, [r4, #20]
 801b220:	69a3      	ldr	r3, [r4, #24]
 801b222:	3b01      	subs	r3, #1
 801b224:	61a3      	str	r3, [r4, #24]
 801b226:	6923      	ldr	r3, [r4, #16]
 801b228:	440b      	add	r3, r1
 801b22a:	68e1      	ldr	r1, [r4, #12]
 801b22c:	428b      	cmp	r3, r1
 801b22e:	6123      	str	r3, [r4, #16]
 801b230:	db15      	blt.n	801b25e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801b232:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 801b236:	3201      	adds	r2, #1
 801b238:	1a5b      	subs	r3, r3, r1
 801b23a:	ee76 6a26 	vadd.f32	s13, s12, s13
 801b23e:	6022      	str	r2, [r4, #0]
 801b240:	6123      	str	r3, [r4, #16]
 801b242:	edc4 6a07 	vstr	s13, [r4, #28]
 801b246:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 801b24a:	ee36 7a87 	vadd.f32	s14, s13, s14
 801b24e:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801b252:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 801b256:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b25a:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801b25e:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 801b262:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 801b266:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 801b26a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b26e:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 801b272:	68a9      	ldr	r1, [r5, #8]
 801b274:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b278:	ed95 6a08 	vldr	s12, [r5, #32]
 801b27c:	edd5 6a07 	vldr	s13, [r5, #28]
 801b280:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801b284:	ee76 6a86 	vadd.f32	s13, s13, s12
 801b288:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801b28c:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b290:	edc5 6a07 	vstr	s13, [r5, #28]
 801b294:	441a      	add	r2, r3
 801b296:	696b      	ldr	r3, [r5, #20]
 801b298:	3301      	adds	r3, #1
 801b29a:	602a      	str	r2, [r5, #0]
 801b29c:	616b      	str	r3, [r5, #20]
 801b29e:	69ab      	ldr	r3, [r5, #24]
 801b2a0:	3b01      	subs	r3, #1
 801b2a2:	61ab      	str	r3, [r5, #24]
 801b2a4:	692b      	ldr	r3, [r5, #16]
 801b2a6:	440b      	add	r3, r1
 801b2a8:	68e9      	ldr	r1, [r5, #12]
 801b2aa:	428b      	cmp	r3, r1
 801b2ac:	612b      	str	r3, [r5, #16]
 801b2ae:	db15      	blt.n	801b2dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801b2b0:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 801b2b4:	3201      	adds	r2, #1
 801b2b6:	1a5b      	subs	r3, r3, r1
 801b2b8:	ee76 6a26 	vadd.f32	s13, s12, s13
 801b2bc:	602a      	str	r2, [r5, #0]
 801b2be:	612b      	str	r3, [r5, #16]
 801b2c0:	edc5 6a07 	vstr	s13, [r5, #28]
 801b2c4:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 801b2c8:	ee36 7a87 	vadd.f32	s14, s13, s14
 801b2cc:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801b2d0:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 801b2d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b2d8:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801b2dc:	3f01      	subs	r7, #1
 801b2de:	e757      	b.n	801b190 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801b2e0:	4299      	cmp	r1, r3
 801b2e2:	dc13      	bgt.n	801b30c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801b2e4:	429a      	cmp	r2, r3
 801b2e6:	da14      	bge.n	801b312 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801b2e8:	2502      	movs	r5, #2
 801b2ea:	2703      	movs	r7, #3
 801b2ec:	f04f 0800 	mov.w	r8, #0
 801b2f0:	46a9      	mov	r9, r5
 801b2f2:	f04f 0a01 	mov.w	sl, #1
 801b2f6:	e6ef      	b.n	801b0d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801b2f8:	2501      	movs	r5, #1
 801b2fa:	2700      	movs	r7, #0
 801b2fc:	46a9      	mov	r9, r5
 801b2fe:	46b8      	mov	r8, r7
 801b300:	f04f 0a02 	mov.w	sl, #2
 801b304:	e6e8      	b.n	801b0d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801b306:	2501      	movs	r5, #1
 801b308:	2702      	movs	r7, #2
 801b30a:	e6e1      	b.n	801b0d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801b30c:	2500      	movs	r5, #0
 801b30e:	2701      	movs	r7, #1
 801b310:	e7f4      	b.n	801b2fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801b312:	2702      	movs	r7, #2
 801b314:	2503      	movs	r5, #3
 801b316:	f04f 0900 	mov.w	r9, #0
 801b31a:	46b8      	mov	r8, r7
 801b31c:	e7e9      	b.n	801b2f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801b31e:	4613      	mov	r3, r2
 801b320:	e728      	b.n	801b174 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801b322:	bf00      	nop
 801b324:	24013b50 	.word	0x24013b50
 801b328:	fffd8f01 	.word	0xfffd8f01
 801b32c:	00027100 	.word	0x00027100
 801b330:	0004e1ff 	.word	0x0004e1ff
 801b334:	0004e1fe 	.word	0x0004e1fe
 801b338:	24013b58 	.word	0x24013b58
 801b33c:	4613      	mov	r3, r2
 801b33e:	992b      	ldr	r1, [sp, #172]	@ 0xac
 801b340:	469e      	mov	lr, r3
 801b342:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 801b344:	469c      	mov	ip, r3
 801b346:	9111      	str	r1, [sp, #68]	@ 0x44
 801b348:	f04f 0900 	mov.w	r9, #0
 801b34c:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 801b350:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 801b354:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 801b358:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 801b35c:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 801b360:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801b364:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 801b368:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 801b36c:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 801b370:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 801b374:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 801b378:	f1bc 0f00 	cmp.w	ip, #0
 801b37c:	d147      	bne.n	801b40e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801b37e:	eb03 0c07 	add.w	ip, r3, r7
 801b382:	1ad7      	subs	r7, r2, r3
 801b384:	f1b9 0f00 	cmp.w	r9, #0
 801b388:	d009      	beq.n	801b39e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801b38a:	9029      	str	r0, [sp, #164]	@ 0xa4
 801b38c:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 801b390:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 801b394:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 801b398:	912d      	str	r1, [sp, #180]	@ 0xb4
 801b39a:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 801b39e:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801b3a0:	f04f 0800 	mov.w	r8, #0
 801b3a4:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 801b3a8:	9111      	str	r1, [sp, #68]	@ 0x44
 801b3aa:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 801b3ae:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 801b3b2:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 801b3b6:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 801b3ba:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 801b3be:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 801b3c2:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 801b3c6:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 801b3ca:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 801b3ce:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 801b3d2:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 801b3d6:	f1be 0f00 	cmp.w	lr, #0
 801b3da:	d031      	beq.n	801b440 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801b3dc:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801b3de:	4450      	add	r0, sl
 801b3e0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801b3e4:	4431      	add	r1, r6
 801b3e6:	ee37 7a04 	vadd.f32	s14, s14, s8
 801b3ea:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801b3ee:	4549      	cmp	r1, r9
 801b3f0:	db08      	blt.n	801b404 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801b3f2:	ee77 7a85 	vadd.f32	s15, s15, s10
 801b3f6:	3001      	adds	r0, #1
 801b3f8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801b3fc:	eba1 0109 	sub.w	r1, r1, r9
 801b400:	ee37 7a06 	vadd.f32	s14, s14, s12
 801b404:	f10e 3eff 	add.w	lr, lr, #4294967295
 801b408:	f04f 0801 	mov.w	r8, #1
 801b40c:	e7e3      	b.n	801b3d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801b40e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801b410:	4450      	add	r0, sl
 801b412:	ee37 7a24 	vadd.f32	s14, s14, s9
 801b416:	4431      	add	r1, r6
 801b418:	ee77 7a84 	vadd.f32	s15, s15, s8
 801b41c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801b420:	4541      	cmp	r1, r8
 801b422:	db08      	blt.n	801b436 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801b424:	ee76 6a85 	vadd.f32	s13, s13, s10
 801b428:	3001      	adds	r0, #1
 801b42a:	ee37 7a25 	vadd.f32	s14, s14, s11
 801b42e:	eba1 0108 	sub.w	r1, r1, r8
 801b432:	ee77 7a86 	vadd.f32	s15, s15, s12
 801b436:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b43a:	f04f 0901 	mov.w	r9, #1
 801b43e:	e79b      	b.n	801b378 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801b440:	449c      	add	ip, r3
 801b442:	1aff      	subs	r7, r7, r3
 801b444:	f1b8 0f00 	cmp.w	r8, #0
 801b448:	d009      	beq.n	801b45e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801b44a:	9019      	str	r0, [sp, #100]	@ 0x64
 801b44c:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 801b450:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 801b454:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 801b458:	911d      	str	r1, [sp, #116]	@ 0x74
 801b45a:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 801b45e:	1ad2      	subs	r2, r2, r3
 801b460:	e68b      	b.n	801b17a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801b462:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b464:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801b466:	2b00      	cmp	r3, #0
 801b468:	f000 80d1 	beq.w	801b60e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801b46c:	ad19      	add	r5, sp, #100	@ 0x64
 801b46e:	ac39      	add	r4, sp, #228	@ 0xe4
 801b470:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801b472:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801b476:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b47a:	930c      	str	r3, [sp, #48]	@ 0x30
 801b47c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801b47e:	6963      	ldr	r3, [r4, #20]
 801b480:	440b      	add	r3, r1
 801b482:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801b486:	4408      	add	r0, r1
 801b488:	b200      	sxth	r0, r0
 801b48a:	4283      	cmp	r3, r0
 801b48c:	900d      	str	r0, [sp, #52]	@ 0x34
 801b48e:	f280 80c1 	bge.w	801b614 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801b492:	428b      	cmp	r3, r1
 801b494:	da08      	bge.n	801b4a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801b496:	2a00      	cmp	r2, #0
 801b498:	dd06      	ble.n	801b4a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801b49a:	1acb      	subs	r3, r1, r3
 801b49c:	429a      	cmp	r2, r3
 801b49e:	f2c0 80bb 	blt.w	801b618 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801b4a2:	2b00      	cmp	r3, #0
 801b4a4:	f300 80b9 	bgt.w	801b61a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801b4a8:	6967      	ldr	r7, [r4, #20]
 801b4aa:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 801b4ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b4b0:	443b      	add	r3, r7
 801b4b2:	461f      	mov	r7, r3
 801b4b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b4b6:	1bdf      	subs	r7, r3, r7
 801b4b8:	4297      	cmp	r7, r2
 801b4ba:	bfa8      	it	ge
 801b4bc:	4617      	movge	r7, r2
 801b4be:	2f00      	cmp	r7, #0
 801b4c0:	f340 813c 	ble.w	801b73c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801b4c4:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801b4c6:	6829      	ldr	r1, [r5, #0]
 801b4c8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b4cc:	f9bb 3000 	ldrsh.w	r3, [fp]
 801b4d0:	4411      	add	r1, r2
 801b4d2:	6820      	ldr	r0, [r4, #0]
 801b4d4:	4299      	cmp	r1, r3
 801b4d6:	dd1a      	ble.n	801b50e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801b4d8:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801b4dc:	4402      	add	r2, r0
 801b4de:	440b      	add	r3, r1
 801b4e0:	b21b      	sxth	r3, r3
 801b4e2:	429a      	cmp	r2, r3
 801b4e4:	dc13      	bgt.n	801b50e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801b4e6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801b4e8:	a912      	add	r1, sp, #72	@ 0x48
 801b4ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b4ec:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b4ee:	681b      	ldr	r3, [r3, #0]
 801b4f0:	9206      	str	r2, [sp, #24]
 801b4f2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801b4f4:	9500      	str	r5, [sp, #0]
 801b4f6:	9205      	str	r2, [sp, #20]
 801b4f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b4fa:	e9cd b203 	strd	fp, r2, [sp, #12]
 801b4fe:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 801b500:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801b504:	aa49      	add	r2, sp, #292	@ 0x124
 801b506:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 801b50a:	4623      	mov	r3, r4
 801b50c:	47c8      	blx	r9
 801b50e:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 801b512:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 801b516:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 801b51a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b51e:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 801b522:	68a1      	ldr	r1, [r4, #8]
 801b524:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b528:	ed94 6a08 	vldr	s12, [r4, #32]
 801b52c:	edd4 6a07 	vldr	s13, [r4, #28]
 801b530:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801b534:	ee76 6a86 	vadd.f32	s13, s13, s12
 801b538:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801b53c:	e9d4 2300 	ldrd	r2, r3, [r4]
 801b540:	edc4 6a07 	vstr	s13, [r4, #28]
 801b544:	441a      	add	r2, r3
 801b546:	6963      	ldr	r3, [r4, #20]
 801b548:	3301      	adds	r3, #1
 801b54a:	6022      	str	r2, [r4, #0]
 801b54c:	6163      	str	r3, [r4, #20]
 801b54e:	69a3      	ldr	r3, [r4, #24]
 801b550:	3b01      	subs	r3, #1
 801b552:	61a3      	str	r3, [r4, #24]
 801b554:	6923      	ldr	r3, [r4, #16]
 801b556:	440b      	add	r3, r1
 801b558:	68e1      	ldr	r1, [r4, #12]
 801b55a:	428b      	cmp	r3, r1
 801b55c:	6123      	str	r3, [r4, #16]
 801b55e:	db15      	blt.n	801b58c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801b560:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 801b564:	3201      	adds	r2, #1
 801b566:	1a5b      	subs	r3, r3, r1
 801b568:	ee76 6a26 	vadd.f32	s13, s12, s13
 801b56c:	6022      	str	r2, [r4, #0]
 801b56e:	6123      	str	r3, [r4, #16]
 801b570:	edc4 6a07 	vstr	s13, [r4, #28]
 801b574:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 801b578:	ee36 7a87 	vadd.f32	s14, s13, s14
 801b57c:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801b580:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 801b584:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b588:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801b58c:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 801b590:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 801b594:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 801b598:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b59c:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 801b5a0:	68a9      	ldr	r1, [r5, #8]
 801b5a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b5a6:	ed95 6a08 	vldr	s12, [r5, #32]
 801b5aa:	edd5 6a07 	vldr	s13, [r5, #28]
 801b5ae:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801b5b2:	ee76 6a86 	vadd.f32	s13, s13, s12
 801b5b6:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801b5ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b5be:	edc5 6a07 	vstr	s13, [r5, #28]
 801b5c2:	441a      	add	r2, r3
 801b5c4:	696b      	ldr	r3, [r5, #20]
 801b5c6:	3301      	adds	r3, #1
 801b5c8:	602a      	str	r2, [r5, #0]
 801b5ca:	616b      	str	r3, [r5, #20]
 801b5cc:	69ab      	ldr	r3, [r5, #24]
 801b5ce:	3b01      	subs	r3, #1
 801b5d0:	61ab      	str	r3, [r5, #24]
 801b5d2:	692b      	ldr	r3, [r5, #16]
 801b5d4:	440b      	add	r3, r1
 801b5d6:	68e9      	ldr	r1, [r5, #12]
 801b5d8:	428b      	cmp	r3, r1
 801b5da:	612b      	str	r3, [r5, #16]
 801b5dc:	db15      	blt.n	801b60a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801b5de:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 801b5e2:	3201      	adds	r2, #1
 801b5e4:	1a5b      	subs	r3, r3, r1
 801b5e6:	ee76 6a26 	vadd.f32	s13, s12, s13
 801b5ea:	602a      	str	r2, [r5, #0]
 801b5ec:	612b      	str	r3, [r5, #16]
 801b5ee:	edc5 6a07 	vstr	s13, [r5, #28]
 801b5f2:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 801b5f6:	ee36 7a87 	vadd.f32	s14, s13, s14
 801b5fa:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801b5fe:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 801b602:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b606:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801b60a:	3f01      	subs	r7, #1
 801b60c:	e757      	b.n	801b4be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801b60e:	ad39      	add	r5, sp, #228	@ 0xe4
 801b610:	ac19      	add	r4, sp, #100	@ 0x64
 801b612:	e72d      	b.n	801b470 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801b614:	4613      	mov	r3, r2
 801b616:	e744      	b.n	801b4a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801b618:	4613      	mov	r3, r2
 801b61a:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 801b61c:	469e      	mov	lr, r3
 801b61e:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 801b622:	461f      	mov	r7, r3
 801b624:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 801b628:	f04f 0900 	mov.w	r9, #0
 801b62c:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 801b630:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 801b634:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 801b638:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 801b63c:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 801b640:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 801b642:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 801b646:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 801b64a:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 801b64e:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 801b652:	960e      	str	r6, [sp, #56]	@ 0x38
 801b654:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 801b658:	2f00      	cmp	r7, #0
 801b65a:	d146      	bne.n	801b6ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801b65c:	449c      	add	ip, r3
 801b65e:	1ad7      	subs	r7, r2, r3
 801b660:	f1b9 0f00 	cmp.w	r9, #0
 801b664:	d009      	beq.n	801b67a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801b666:	9039      	str	r0, [sp, #228]	@ 0xe4
 801b668:	913d      	str	r1, [sp, #244]	@ 0xf4
 801b66a:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 801b66e:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 801b672:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 801b676:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 801b67a:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801b67c:	f04f 0800 	mov.w	r8, #0
 801b680:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 801b684:	910e      	str	r1, [sp, #56]	@ 0x38
 801b686:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 801b68a:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 801b68e:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 801b692:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 801b696:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 801b69a:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 801b69e:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 801b6a2:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 801b6a6:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 801b6aa:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 801b6ae:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 801b6b2:	f1be 0f00 	cmp.w	lr, #0
 801b6b6:	d030      	beq.n	801b71a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801b6b8:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801b6ba:	4450      	add	r0, sl
 801b6bc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801b6c0:	4431      	add	r1, r6
 801b6c2:	ee37 7a04 	vadd.f32	s14, s14, s8
 801b6c6:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801b6ca:	4549      	cmp	r1, r9
 801b6cc:	db08      	blt.n	801b6e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801b6ce:	ee77 7a85 	vadd.f32	s15, s15, s10
 801b6d2:	3001      	adds	r0, #1
 801b6d4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801b6d8:	eba1 0109 	sub.w	r1, r1, r9
 801b6dc:	ee37 7a06 	vadd.f32	s14, s14, s12
 801b6e0:	f10e 3eff 	add.w	lr, lr, #4294967295
 801b6e4:	f04f 0801 	mov.w	r8, #1
 801b6e8:	e7e3      	b.n	801b6b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801b6ea:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801b6ec:	4450      	add	r0, sl
 801b6ee:	ee37 7a24 	vadd.f32	s14, s14, s9
 801b6f2:	4431      	add	r1, r6
 801b6f4:	ee77 7a84 	vadd.f32	s15, s15, s8
 801b6f8:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801b6fc:	4541      	cmp	r1, r8
 801b6fe:	db08      	blt.n	801b712 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801b700:	ee76 6a85 	vadd.f32	s13, s13, s10
 801b704:	3001      	adds	r0, #1
 801b706:	ee37 7a25 	vadd.f32	s14, s14, s11
 801b70a:	eba1 0108 	sub.w	r1, r1, r8
 801b70e:	ee77 7a86 	vadd.f32	s15, s15, s12
 801b712:	3f01      	subs	r7, #1
 801b714:	f04f 0901 	mov.w	r9, #1
 801b718:	e79e      	b.n	801b658 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801b71a:	449c      	add	ip, r3
 801b71c:	1aff      	subs	r7, r7, r3
 801b71e:	f1b8 0f00 	cmp.w	r8, #0
 801b722:	d009      	beq.n	801b738 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801b724:	9019      	str	r0, [sp, #100]	@ 0x64
 801b726:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 801b72a:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 801b72e:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 801b732:	911d      	str	r1, [sp, #116]	@ 0x74
 801b734:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 801b738:	1ad2      	subs	r2, r2, r3
 801b73a:	e6b5      	b.n	801b4a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801b73c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b73e:	681b      	ldr	r3, [r3, #0]
 801b740:	b923      	cbnz	r3, 801b74c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b742:	4b04      	ldr	r3, [pc, #16]	@ (801b754 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801b744:	6818      	ldr	r0, [r3, #0]
 801b746:	6803      	ldr	r3, [r0, #0]
 801b748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b74a:	4798      	blx	r3
 801b74c:	b05b      	add	sp, #364	@ 0x16c
 801b74e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b752:	bf00      	nop
 801b754:	24013b58 	.word	0x24013b58

0801b758 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801b758:	2b03      	cmp	r3, #3
 801b75a:	d818      	bhi.n	801b78e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801b75c:	e8df f003 	tbb	[pc, r3]
 801b760:	130d0602 	.word	0x130d0602
 801b764:	f9b0 2000 	ldrsh.w	r2, [r0]
 801b768:	1850      	adds	r0, r2, r1
 801b76a:	4770      	bx	lr
 801b76c:	8803      	ldrh	r3, [r0, #0]
 801b76e:	8880      	ldrh	r0, [r0, #4]
 801b770:	4418      	add	r0, r3
 801b772:	b200      	sxth	r0, r0
 801b774:	1a80      	subs	r0, r0, r2
 801b776:	3801      	subs	r0, #1
 801b778:	4770      	bx	lr
 801b77a:	8803      	ldrh	r3, [r0, #0]
 801b77c:	8880      	ldrh	r0, [r0, #4]
 801b77e:	4418      	add	r0, r3
 801b780:	b200      	sxth	r0, r0
 801b782:	1a40      	subs	r0, r0, r1
 801b784:	e7f7      	b.n	801b776 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801b786:	f9b0 0000 	ldrsh.w	r0, [r0]
 801b78a:	4410      	add	r0, r2
 801b78c:	4770      	bx	lr
 801b78e:	2000      	movs	r0, #0
 801b790:	4770      	bx	lr

0801b792 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801b792:	2b03      	cmp	r3, #3
 801b794:	d817      	bhi.n	801b7c6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801b796:	e8df f003 	tbb	[pc, r3]
 801b79a:	0602      	.short	0x0602
 801b79c:	1009      	.short	0x1009
 801b79e:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801b7a2:	1850      	adds	r0, r2, r1
 801b7a4:	4770      	bx	lr
 801b7a6:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801b7aa:	e7fa      	b.n	801b7a2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801b7ac:	8843      	ldrh	r3, [r0, #2]
 801b7ae:	88c0      	ldrh	r0, [r0, #6]
 801b7b0:	4418      	add	r0, r3
 801b7b2:	b200      	sxth	r0, r0
 801b7b4:	1a80      	subs	r0, r0, r2
 801b7b6:	3801      	subs	r0, #1
 801b7b8:	4770      	bx	lr
 801b7ba:	8843      	ldrh	r3, [r0, #2]
 801b7bc:	88c0      	ldrh	r0, [r0, #6]
 801b7be:	4418      	add	r0, r3
 801b7c0:	b200      	sxth	r0, r0
 801b7c2:	1a40      	subs	r0, r0, r1
 801b7c4:	e7f7      	b.n	801b7b6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801b7c6:	2000      	movs	r0, #0
 801b7c8:	4770      	bx	lr
	...

0801b7cc <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801b7cc:	4b01      	ldr	r3, [pc, #4]	@ (801b7d4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801b7ce:	2200      	movs	r2, #0
 801b7d0:	601a      	str	r2, [r3, #0]
 801b7d2:	4770      	bx	lr
 801b7d4:	24013b68 	.word	0x24013b68

0801b7d8 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801b7d8:	4603      	mov	r3, r0
 801b7da:	b1c8      	cbz	r0, 801b810 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801b7dc:	0c02      	lsrs	r2, r0, #16
 801b7de:	0412      	lsls	r2, r2, #16
 801b7e0:	b9a2      	cbnz	r2, 801b80c <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801b7e2:	0403      	lsls	r3, r0, #16
 801b7e4:	2010      	movs	r0, #16
 801b7e6:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 801b7ea:	bf04      	itt	eq
 801b7ec:	021b      	lsleq	r3, r3, #8
 801b7ee:	3008      	addeq	r0, #8
 801b7f0:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 801b7f4:	bf04      	itt	eq
 801b7f6:	011b      	lsleq	r3, r3, #4
 801b7f8:	3004      	addeq	r0, #4
 801b7fa:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 801b7fe:	bf04      	itt	eq
 801b800:	009b      	lsleq	r3, r3, #2
 801b802:	3002      	addeq	r0, #2
 801b804:	2b00      	cmp	r3, #0
 801b806:	db04      	blt.n	801b812 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801b808:	3001      	adds	r0, #1
 801b80a:	4770      	bx	lr
 801b80c:	2000      	movs	r0, #0
 801b80e:	e7ea      	b.n	801b7e6 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801b810:	2020      	movs	r0, #32
 801b812:	4770      	bx	lr

0801b814 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801b814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b818:	b087      	sub	sp, #28
 801b81a:	460d      	mov	r5, r1
 801b81c:	4616      	mov	r6, r2
 801b81e:	4698      	mov	r8, r3
 801b820:	4601      	mov	r1, r0
 801b822:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 801b826:	b120      	cbz	r0, 801b832 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801b828:	b11a      	cbz	r2, 801b832 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801b82a:	2d1f      	cmp	r5, #31
 801b82c:	d801      	bhi.n	801b832 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801b82e:	2b1f      	cmp	r3, #31
 801b830:	d904      	bls.n	801b83c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 801b832:	2000      	movs	r0, #0
 801b834:	6038      	str	r0, [r7, #0]
 801b836:	b007      	add	sp, #28
 801b838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b83c:	b97d      	cbnz	r5, 801b85e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 801b83e:	b143      	cbz	r3, 801b852 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 801b840:	4602      	mov	r2, r0
 801b842:	462b      	mov	r3, r5
 801b844:	4641      	mov	r1, r8
 801b846:	4630      	mov	r0, r6
 801b848:	e9cd 4700 	strd	r4, r7, [sp]
 801b84c:	f7ff ffe2 	bl	801b814 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b850:	e7f1      	b.n	801b836 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801b852:	f04f 33ff 	mov.w	r3, #4294967295
 801b856:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801b85a:	603b      	str	r3, [r7, #0]
 801b85c:	e7eb      	b.n	801b836 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801b85e:	fa32 fa05 	lsrs.w	sl, r2, r5
 801b862:	d106      	bne.n	801b872 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 801b864:	4346      	muls	r6, r0
 801b866:	fbb6 f0f4 	udiv	r0, r6, r4
 801b86a:	fb04 6610 	mls	r6, r4, r0, r6
 801b86e:	603e      	str	r6, [r7, #0]
 801b870:	e7e1      	b.n	801b836 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801b872:	2201      	movs	r2, #1
 801b874:	fa00 fb05 	lsl.w	fp, r0, r5
 801b878:	40aa      	lsls	r2, r5
 801b87a:	fbbb f9f4 	udiv	r9, fp, r4
 801b87e:	3a01      	subs	r2, #1
 801b880:	fb0a f309 	mul.w	r3, sl, r9
 801b884:	fb04 b919 	mls	r9, r4, r9, fp
 801b888:	4016      	ands	r6, r2
 801b88a:	9303      	str	r3, [sp, #12]
 801b88c:	4630      	mov	r0, r6
 801b88e:	f7ff ffa3 	bl	801b7d8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801b892:	462b      	mov	r3, r5
 801b894:	460a      	mov	r2, r1
 801b896:	4601      	mov	r1, r0
 801b898:	4630      	mov	r0, r6
 801b89a:	e9cd 4700 	strd	r4, r7, [sp]
 801b89e:	f7ff ffb9 	bl	801b814 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b8a2:	4606      	mov	r6, r0
 801b8a4:	4648      	mov	r0, r9
 801b8a6:	eb05 0108 	add.w	r1, r5, r8
 801b8aa:	f7ff ff95 	bl	801b7d8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801b8ae:	ab05      	add	r3, sp, #20
 801b8b0:	464a      	mov	r2, r9
 801b8b2:	e9cd 4300 	strd	r4, r3, [sp]
 801b8b6:	4603      	mov	r3, r0
 801b8b8:	4650      	mov	r0, sl
 801b8ba:	f7ff ffab 	bl	801b814 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b8be:	6839      	ldr	r1, [r7, #0]
 801b8c0:	9a05      	ldr	r2, [sp, #20]
 801b8c2:	9b03      	ldr	r3, [sp, #12]
 801b8c4:	4411      	add	r1, r2
 801b8c6:	fbb1 f2f4 	udiv	r2, r1, r4
 801b8ca:	18d3      	adds	r3, r2, r3
 801b8cc:	fb04 1412 	mls	r4, r4, r2, r1
 801b8d0:	441e      	add	r6, r3
 801b8d2:	603c      	str	r4, [r7, #0]
 801b8d4:	4430      	add	r0, r6
 801b8d6:	e7ae      	b.n	801b836 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

0801b8d8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801b8d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b8dc:	b085      	sub	sp, #20
 801b8de:	f1b0 0900 	subs.w	r9, r0, #0
 801b8e2:	461d      	mov	r5, r3
 801b8e4:	4617      	mov	r7, r2
 801b8e6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801b8e8:	bfbb      	ittet	lt
 801b8ea:	f1c9 0900 	rsblt	r9, r9, #0
 801b8ee:	f04f 36ff 	movlt.w	r6, #4294967295
 801b8f2:	2601      	movge	r6, #1
 801b8f4:	6823      	ldrlt	r3, [r4, #0]
 801b8f6:	bfbc      	itt	lt
 801b8f8:	425b      	neglt	r3, r3
 801b8fa:	6023      	strlt	r3, [r4, #0]
 801b8fc:	2a00      	cmp	r2, #0
 801b8fe:	da04      	bge.n	801b90a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801b900:	6823      	ldr	r3, [r4, #0]
 801b902:	4257      	negs	r7, r2
 801b904:	4276      	negs	r6, r6
 801b906:	425b      	negs	r3, r3
 801b908:	6023      	str	r3, [r4, #0]
 801b90a:	2d00      	cmp	r5, #0
 801b90c:	4638      	mov	r0, r7
 801b90e:	bfba      	itte	lt
 801b910:	426d      	neglt	r5, r5
 801b912:	f04f 38ff 	movlt.w	r8, #4294967295
 801b916:	f04f 0801 	movge.w	r8, #1
 801b91a:	f7ff ff5d 	bl	801b7d8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801b91e:	ab03      	add	r3, sp, #12
 801b920:	463a      	mov	r2, r7
 801b922:	e9cd 5300 	strd	r5, r3, [sp]
 801b926:	4603      	mov	r3, r0
 801b928:	4648      	mov	r0, r9
 801b92a:	f7ff ff73 	bl	801b814 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b92e:	6823      	ldr	r3, [r4, #0]
 801b930:	9a03      	ldr	r2, [sp, #12]
 801b932:	4546      	cmp	r6, r8
 801b934:	441a      	add	r2, r3
 801b936:	fb92 f3f5 	sdiv	r3, r2, r5
 801b93a:	4418      	add	r0, r3
 801b93c:	fb05 2313 	mls	r3, r5, r3, r2
 801b940:	bf18      	it	ne
 801b942:	4240      	negne	r0, r0
 801b944:	1c72      	adds	r2, r6, #1
 801b946:	6023      	str	r3, [r4, #0]
 801b948:	d105      	bne.n	801b956 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801b94a:	2b00      	cmp	r3, #0
 801b94c:	f1c3 0200 	rsb	r2, r3, #0
 801b950:	db0b      	blt.n	801b96a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801b952:	6022      	str	r2, [r4, #0]
 801b954:	e006      	b.n	801b964 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801b956:	2e01      	cmp	r6, #1
 801b958:	d104      	bne.n	801b964 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801b95a:	2b00      	cmp	r3, #0
 801b95c:	da02      	bge.n	801b964 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801b95e:	442b      	add	r3, r5
 801b960:	3801      	subs	r0, #1
 801b962:	6023      	str	r3, [r4, #0]
 801b964:	b005      	add	sp, #20
 801b966:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b96a:	3801      	subs	r0, #1
 801b96c:	1b52      	subs	r2, r2, r5
 801b96e:	e7f0      	b.n	801b952 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

0801b970 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801b970:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801b974:	4c1c      	ldr	r4, [pc, #112]	@ (801b9e8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801b976:	4605      	mov	r5, r0
 801b978:	6807      	ldr	r7, [r0, #0]
 801b97a:	69a3      	ldr	r3, [r4, #24]
 801b97c:	b92b      	cbnz	r3, 801b98a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801b97e:	6840      	ldr	r0, [r0, #4]
 801b980:	e9c5 7000 	strd	r7, r0, [r5]
 801b984:	b004      	add	sp, #16
 801b986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b98a:	f04f 0802 	mov.w	r8, #2
 801b98e:	68a2      	ldr	r2, [r4, #8]
 801b990:	ae04      	add	r6, sp, #16
 801b992:	6820      	ldr	r0, [r4, #0]
 801b994:	fb93 f1f8 	sdiv	r1, r3, r8
 801b998:	440a      	add	r2, r1
 801b99a:	69e1      	ldr	r1, [r4, #28]
 801b99c:	f846 2d04 	str.w	r2, [r6, #-4]!
 801b9a0:	463a      	mov	r2, r7
 801b9a2:	9600      	str	r6, [sp, #0]
 801b9a4:	f7ff ff98 	bl	801b8d8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b9a8:	69a3      	ldr	r3, [r4, #24]
 801b9aa:	4607      	mov	r7, r0
 801b9ac:	686a      	ldr	r2, [r5, #4]
 801b9ae:	6a21      	ldr	r1, [r4, #32]
 801b9b0:	9600      	str	r6, [sp, #0]
 801b9b2:	6860      	ldr	r0, [r4, #4]
 801b9b4:	f7ff ff90 	bl	801b8d8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b9b8:	69a3      	ldr	r3, [r4, #24]
 801b9ba:	6962      	ldr	r2, [r4, #20]
 801b9bc:	4407      	add	r7, r0
 801b9be:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801b9c0:	9600      	str	r6, [sp, #0]
 801b9c2:	68e0      	ldr	r0, [r4, #12]
 801b9c4:	fb93 f8f8 	sdiv	r8, r3, r8
 801b9c8:	4442      	add	r2, r8
 801b9ca:	9203      	str	r2, [sp, #12]
 801b9cc:	682a      	ldr	r2, [r5, #0]
 801b9ce:	f7ff ff83 	bl	801b8d8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b9d2:	4680      	mov	r8, r0
 801b9d4:	9600      	str	r6, [sp, #0]
 801b9d6:	69a3      	ldr	r3, [r4, #24]
 801b9d8:	686a      	ldr	r2, [r5, #4]
 801b9da:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801b9dc:	6920      	ldr	r0, [r4, #16]
 801b9de:	f7ff ff7b 	bl	801b8d8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b9e2:	4440      	add	r0, r8
 801b9e4:	e7cc      	b.n	801b980 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801b9e6:	bf00      	nop
 801b9e8:	24013b6c 	.word	0x24013b6c

0801b9ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801b9ec:	4b07      	ldr	r3, [pc, #28]	@ (801ba0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801b9ee:	781b      	ldrb	r3, [r3, #0]
 801b9f0:	2b01      	cmp	r3, #1
 801b9f2:	d109      	bne.n	801ba08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801b9f4:	f9b1 3000 	ldrsh.w	r3, [r1]
 801b9f8:	f9b0 2000 	ldrsh.w	r2, [r0]
 801b9fc:	8003      	strh	r3, [r0, #0]
 801b9fe:	4b04      	ldr	r3, [pc, #16]	@ (801ba10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801ba00:	881b      	ldrh	r3, [r3, #0]
 801ba02:	3b01      	subs	r3, #1
 801ba04:	1a9b      	subs	r3, r3, r2
 801ba06:	800b      	strh	r3, [r1, #0]
 801ba08:	4770      	bx	lr
 801ba0a:	bf00      	nop
 801ba0c:	24013b50 	.word	0x24013b50
 801ba10:	24013b4c 	.word	0x24013b4c

0801ba14 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801ba14:	4b07      	ldr	r3, [pc, #28]	@ (801ba34 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801ba16:	b510      	push	{r4, lr}
 801ba18:	781b      	ldrb	r3, [r3, #0]
 801ba1a:	2b01      	cmp	r3, #1
 801ba1c:	d108      	bne.n	801ba30 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801ba1e:	4b06      	ldr	r3, [pc, #24]	@ (801ba38 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801ba20:	880c      	ldrh	r4, [r1, #0]
 801ba22:	881b      	ldrh	r3, [r3, #0]
 801ba24:	f9b0 2000 	ldrsh.w	r2, [r0]
 801ba28:	3b01      	subs	r3, #1
 801ba2a:	1b1b      	subs	r3, r3, r4
 801ba2c:	8003      	strh	r3, [r0, #0]
 801ba2e:	800a      	strh	r2, [r1, #0]
 801ba30:	bd10      	pop	{r4, pc}
 801ba32:	bf00      	nop
 801ba34:	24013b50 	.word	0x24013b50
 801ba38:	24013b4c 	.word	0x24013b4c

0801ba3c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801ba3c:	4b0a      	ldr	r3, [pc, #40]	@ (801ba68 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801ba3e:	b510      	push	{r4, lr}
 801ba40:	781b      	ldrb	r3, [r3, #0]
 801ba42:	2b01      	cmp	r3, #1
 801ba44:	d10e      	bne.n	801ba64 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801ba46:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801ba4a:	8843      	ldrh	r3, [r0, #2]
 801ba4c:	f9b0 4000 	ldrsh.w	r4, [r0]
 801ba50:	18ca      	adds	r2, r1, r3
 801ba52:	4b06      	ldr	r3, [pc, #24]	@ (801ba6c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801ba54:	8044      	strh	r4, [r0, #2]
 801ba56:	881b      	ldrh	r3, [r3, #0]
 801ba58:	1a9b      	subs	r3, r3, r2
 801ba5a:	8003      	strh	r3, [r0, #0]
 801ba5c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801ba60:	8081      	strh	r1, [r0, #4]
 801ba62:	80c3      	strh	r3, [r0, #6]
 801ba64:	bd10      	pop	{r4, pc}
 801ba66:	bf00      	nop
 801ba68:	24013b50 	.word	0x24013b50
 801ba6c:	24013b4c 	.word	0x24013b4c

0801ba70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801ba70:	4b08      	ldr	r3, [pc, #32]	@ (801ba94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801ba72:	781b      	ldrb	r3, [r3, #0]
 801ba74:	2b01      	cmp	r3, #1
 801ba76:	d10c      	bne.n	801ba92 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801ba78:	8803      	ldrh	r3, [r0, #0]
 801ba7a:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801ba7e:	8842      	ldrh	r2, [r0, #2]
 801ba80:	8002      	strh	r2, [r0, #0]
 801ba82:	185a      	adds	r2, r3, r1
 801ba84:	4b04      	ldr	r3, [pc, #16]	@ (801ba98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801ba86:	881b      	ldrh	r3, [r3, #0]
 801ba88:	1a9b      	subs	r3, r3, r2
 801ba8a:	8043      	strh	r3, [r0, #2]
 801ba8c:	88c3      	ldrh	r3, [r0, #6]
 801ba8e:	80c1      	strh	r1, [r0, #6]
 801ba90:	8083      	strh	r3, [r0, #4]
 801ba92:	4770      	bx	lr
 801ba94:	24013b50 	.word	0x24013b50
 801ba98:	24013b4c 	.word	0x24013b4c

0801ba9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801ba9c:	4b07      	ldr	r3, [pc, #28]	@ (801babc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801ba9e:	b510      	push	{r4, lr}
 801baa0:	781b      	ldrb	r3, [r3, #0]
 801baa2:	2b01      	cmp	r3, #1
 801baa4:	d108      	bne.n	801bab8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801baa6:	f9b1 3000 	ldrsh.w	r3, [r1]
 801baaa:	f9b0 4000 	ldrsh.w	r4, [r0]
 801baae:	8003      	strh	r3, [r0, #0]
 801bab0:	8893      	ldrh	r3, [r2, #4]
 801bab2:	3b01      	subs	r3, #1
 801bab4:	1b1b      	subs	r3, r3, r4
 801bab6:	800b      	strh	r3, [r1, #0]
 801bab8:	bd10      	pop	{r4, pc}
 801baba:	bf00      	nop
 801babc:	24013b50 	.word	0x24013b50

0801bac0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801bac0:	4b0a      	ldr	r3, [pc, #40]	@ (801baec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801bac2:	460a      	mov	r2, r1
 801bac4:	b510      	push	{r4, lr}
 801bac6:	781b      	ldrb	r3, [r3, #0]
 801bac8:	2b01      	cmp	r3, #1
 801baca:	d10d      	bne.n	801bae8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801bacc:	8881      	ldrh	r1, [r0, #4]
 801bace:	8803      	ldrh	r3, [r0, #0]
 801bad0:	440b      	add	r3, r1
 801bad2:	4601      	mov	r1, r0
 801bad4:	3b01      	subs	r3, #1
 801bad6:	f821 3b02 	strh.w	r3, [r1], #2
 801bada:	f7ff ffdf 	bl	801ba9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801bade:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801bae2:	88c2      	ldrh	r2, [r0, #6]
 801bae4:	80c3      	strh	r3, [r0, #6]
 801bae6:	8082      	strh	r2, [r0, #4]
 801bae8:	bd10      	pop	{r4, pc}
 801baea:	bf00      	nop
 801baec:	24013b50 	.word	0x24013b50

0801baf0 <_ZN8touchgfx11Application13requestRedrawEv>:
 801baf0:	4b06      	ldr	r3, [pc, #24]	@ (801bb0c <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801baf2:	2100      	movs	r1, #0
 801baf4:	f9b3 2000 	ldrsh.w	r2, [r3]
 801baf8:	4b05      	ldr	r3, [pc, #20]	@ (801bb10 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801bafa:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 801bafe:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bb02:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 801bb06:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 801bb0a:	4770      	bx	lr
 801bb0c:	24013b4c 	.word	0x24013b4c
 801bb10:	24013b4e 	.word	0x24013b4e

0801bb14 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801bb14:	4b03      	ldr	r3, [pc, #12]	@ (801bb24 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801bb16:	6818      	ldr	r0, [r3, #0]
 801bb18:	b110      	cbz	r0, 801bb20 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801bb1a:	6803      	ldr	r3, [r0, #0]
 801bb1c:	699b      	ldr	r3, [r3, #24]
 801bb1e:	4718      	bx	r3
 801bb20:	4770      	bx	lr
 801bb22:	bf00      	nop
 801bb24:	24013b9c 	.word	0x24013b9c

0801bb28 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801bb28:	4770      	bx	lr
	...

0801bb2c <_ZN8touchgfx11Application4drawEv>:
 801bb2c:	4b09      	ldr	r3, [pc, #36]	@ (801bb54 <_ZN8touchgfx11Application4drawEv+0x28>)
 801bb2e:	b507      	push	{r0, r1, r2, lr}
 801bb30:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bb34:	2100      	movs	r1, #0
 801bb36:	4b08      	ldr	r3, [pc, #32]	@ (801bb58 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801bb38:	9100      	str	r1, [sp, #0]
 801bb3a:	4669      	mov	r1, sp
 801bb3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bb40:	f8ad 2004 	strh.w	r2, [sp, #4]
 801bb44:	f8ad 3006 	strh.w	r3, [sp, #6]
 801bb48:	6803      	ldr	r3, [r0, #0]
 801bb4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801bb4c:	4798      	blx	r3
 801bb4e:	b003      	add	sp, #12
 801bb50:	f85d fb04 	ldr.w	pc, [sp], #4
 801bb54:	24013b4c 	.word	0x24013b4c
 801bb58:	24013b4e 	.word	0x24013b4e

0801bb5c <_ZN8touchgfx11Application10invalidateEv>:
 801bb5c:	4b09      	ldr	r3, [pc, #36]	@ (801bb84 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801bb5e:	b082      	sub	sp, #8
 801bb60:	2100      	movs	r1, #0
 801bb62:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bb66:	4b08      	ldr	r3, [pc, #32]	@ (801bb88 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801bb68:	f8ad 2004 	strh.w	r2, [sp, #4]
 801bb6c:	aa02      	add	r2, sp, #8
 801bb6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bb72:	9100      	str	r1, [sp, #0]
 801bb74:	f8ad 3006 	strh.w	r3, [sp, #6]
 801bb78:	6803      	ldr	r3, [r0, #0]
 801bb7a:	e912 0006 	ldmdb	r2, {r1, r2}
 801bb7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801bb80:	b002      	add	sp, #8
 801bb82:	4718      	bx	r3
 801bb84:	24013b4c 	.word	0x24013b4c
 801bb88:	24013b4e 	.word	0x24013b4e

0801bb8c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801bb8c:	4b03      	ldr	r3, [pc, #12]	@ (801bb9c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801bb8e:	6818      	ldr	r0, [r3, #0]
 801bb90:	b110      	cbz	r0, 801bb98 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801bb92:	6803      	ldr	r3, [r0, #0]
 801bb94:	69db      	ldr	r3, [r3, #28]
 801bb96:	4718      	bx	r3
 801bb98:	4770      	bx	lr
 801bb9a:	bf00      	nop
 801bb9c:	24013b9c 	.word	0x24013b9c

0801bba0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801bba0:	4b03      	ldr	r3, [pc, #12]	@ (801bbb0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801bba2:	6818      	ldr	r0, [r3, #0]
 801bba4:	b110      	cbz	r0, 801bbac <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801bba6:	6803      	ldr	r3, [r0, #0]
 801bba8:	6a1b      	ldr	r3, [r3, #32]
 801bbaa:	4718      	bx	r3
 801bbac:	4770      	bx	lr
 801bbae:	bf00      	nop
 801bbb0:	24013b9c 	.word	0x24013b9c

0801bbb4 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801bbb4:	2300      	movs	r3, #0
 801bbb6:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 801bbba:	4770      	bx	lr

0801bbbc <_ZN8touchgfx11Application14handleKeyEventEh>:
 801bbbc:	4b03      	ldr	r3, [pc, #12]	@ (801bbcc <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801bbbe:	6818      	ldr	r0, [r3, #0]
 801bbc0:	b110      	cbz	r0, 801bbc8 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801bbc2:	6803      	ldr	r3, [r0, #0]
 801bbc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bbc6:	4718      	bx	r3
 801bbc8:	4770      	bx	lr
 801bbca:	bf00      	nop
 801bbcc:	24013b9c 	.word	0x24013b9c

0801bbd0 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801bbd0:	b510      	push	{r4, lr}
 801bbd2:	f9b1 4000 	ldrsh.w	r4, [r1]
 801bbd6:	888a      	ldrh	r2, [r1, #4]
 801bbd8:	f9b0 3000 	ldrsh.w	r3, [r0]
 801bbdc:	4422      	add	r2, r4
 801bbde:	b212      	sxth	r2, r2
 801bbe0:	4293      	cmp	r3, r2
 801bbe2:	da15      	bge.n	801bc10 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801bbe4:	8882      	ldrh	r2, [r0, #4]
 801bbe6:	4413      	add	r3, r2
 801bbe8:	b21b      	sxth	r3, r3
 801bbea:	429c      	cmp	r4, r3
 801bbec:	da10      	bge.n	801bc10 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801bbee:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801bbf2:	88c9      	ldrh	r1, [r1, #6]
 801bbf4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801bbf8:	4419      	add	r1, r3
 801bbfa:	b209      	sxth	r1, r1
 801bbfc:	428a      	cmp	r2, r1
 801bbfe:	da07      	bge.n	801bc10 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801bc00:	88c0      	ldrh	r0, [r0, #6]
 801bc02:	4410      	add	r0, r2
 801bc04:	b200      	sxth	r0, r0
 801bc06:	4283      	cmp	r3, r0
 801bc08:	bfac      	ite	ge
 801bc0a:	2000      	movge	r0, #0
 801bc0c:	2001      	movlt	r0, #1
 801bc0e:	bd10      	pop	{r4, pc}
 801bc10:	2000      	movs	r0, #0
 801bc12:	e7fc      	b.n	801bc0e <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801bc14 <_ZN8touchgfx4Rect10restrictToEss>:
 801bc14:	f9b0 3000 	ldrsh.w	r3, [r0]
 801bc18:	2b00      	cmp	r3, #0
 801bc1a:	b510      	push	{r4, lr}
 801bc1c:	da04      	bge.n	801bc28 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801bc1e:	8884      	ldrh	r4, [r0, #4]
 801bc20:	4423      	add	r3, r4
 801bc22:	8083      	strh	r3, [r0, #4]
 801bc24:	2300      	movs	r3, #0
 801bc26:	8003      	strh	r3, [r0, #0]
 801bc28:	f9b0 4000 	ldrsh.w	r4, [r0]
 801bc2c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801bc30:	1b09      	subs	r1, r1, r4
 801bc32:	428b      	cmp	r3, r1
 801bc34:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801bc38:	bfc8      	it	gt
 801bc3a:	8081      	strhgt	r1, [r0, #4]
 801bc3c:	2b00      	cmp	r3, #0
 801bc3e:	da04      	bge.n	801bc4a <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801bc40:	88c1      	ldrh	r1, [r0, #6]
 801bc42:	440b      	add	r3, r1
 801bc44:	80c3      	strh	r3, [r0, #6]
 801bc46:	2300      	movs	r3, #0
 801bc48:	8043      	strh	r3, [r0, #2]
 801bc4a:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801bc4e:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801bc52:	1a52      	subs	r2, r2, r1
 801bc54:	4293      	cmp	r3, r2
 801bc56:	bfc8      	it	gt
 801bc58:	80c2      	strhgt	r2, [r0, #6]
 801bc5a:	bd10      	pop	{r4, pc}

0801bc5c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801bc5c:	4b10      	ldr	r3, [pc, #64]	@ (801bca0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801bc5e:	b510      	push	{r4, lr}
 801bc60:	460c      	mov	r4, r1
 801bc62:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bc66:	4b0f      	ldr	r3, [pc, #60]	@ (801bca4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801bc68:	4620      	mov	r0, r4
 801bc6a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801bc6e:	f7ff ffd1 	bl	801bc14 <_ZN8touchgfx4Rect10restrictToEss>
 801bc72:	4b0d      	ldr	r3, [pc, #52]	@ (801bca8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801bc74:	6818      	ldr	r0, [r3, #0]
 801bc76:	b190      	cbz	r0, 801bc9e <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801bc78:	6803      	ldr	r3, [r0, #0]
 801bc7a:	4621      	mov	r1, r4
 801bc7c:	689b      	ldr	r3, [r3, #8]
 801bc7e:	4798      	blx	r3
 801bc80:	4b0a      	ldr	r3, [pc, #40]	@ (801bcac <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801bc82:	6818      	ldr	r0, [r3, #0]
 801bc84:	b118      	cbz	r0, 801bc8e <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801bc86:	6803      	ldr	r3, [r0, #0]
 801bc88:	4621      	mov	r1, r4
 801bc8a:	689b      	ldr	r3, [r3, #8]
 801bc8c:	4798      	blx	r3
 801bc8e:	4b08      	ldr	r3, [pc, #32]	@ (801bcb0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801bc90:	4621      	mov	r1, r4
 801bc92:	6818      	ldr	r0, [r3, #0]
 801bc94:	6803      	ldr	r3, [r0, #0]
 801bc96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bc9a:	69db      	ldr	r3, [r3, #28]
 801bc9c:	4718      	bx	r3
 801bc9e:	bd10      	pop	{r4, pc}
 801bca0:	24013b4e 	.word	0x24013b4e
 801bca4:	24013b4c 	.word	0x24013b4c
 801bca8:	24013b9c 	.word	0x24013b9c
 801bcac:	24013b98 	.word	0x24013b98
 801bcb0:	24013b58 	.word	0x24013b58

0801bcb4 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801bcb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bcb6:	4606      	mov	r6, r0
 801bcb8:	4608      	mov	r0, r1
 801bcba:	460f      	mov	r7, r1
 801bcbc:	f7fb fd3f 	bl	801773e <_ZNK8touchgfx4Rect7isEmptyEv>
 801bcc0:	b9e8      	cbnz	r0, 801bcfe <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801bcc2:	f9b7 5000 	ldrsh.w	r5, [r7]
 801bcc6:	f9b6 4000 	ldrsh.w	r4, [r6]
 801bcca:	42a5      	cmp	r5, r4
 801bccc:	db17      	blt.n	801bcfe <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801bcce:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801bcd2:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801bcd6:	429a      	cmp	r2, r3
 801bcd8:	db11      	blt.n	801bcfe <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801bcda:	88b9      	ldrh	r1, [r7, #4]
 801bcdc:	440d      	add	r5, r1
 801bcde:	88b1      	ldrh	r1, [r6, #4]
 801bce0:	440c      	add	r4, r1
 801bce2:	b22d      	sxth	r5, r5
 801bce4:	b224      	sxth	r4, r4
 801bce6:	42a5      	cmp	r5, r4
 801bce8:	dc09      	bgt.n	801bcfe <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801bcea:	88f8      	ldrh	r0, [r7, #6]
 801bcec:	4410      	add	r0, r2
 801bcee:	88f2      	ldrh	r2, [r6, #6]
 801bcf0:	4413      	add	r3, r2
 801bcf2:	b200      	sxth	r0, r0
 801bcf4:	b21b      	sxth	r3, r3
 801bcf6:	4298      	cmp	r0, r3
 801bcf8:	bfcc      	ite	gt
 801bcfa:	2000      	movgt	r0, #0
 801bcfc:	2001      	movle	r0, #1
 801bcfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801bd00 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801bd00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bd02:	4604      	mov	r4, r0
 801bd04:	4608      	mov	r0, r1
 801bd06:	460d      	mov	r5, r1
 801bd08:	f7fb fd19 	bl	801773e <_ZNK8touchgfx4Rect7isEmptyEv>
 801bd0c:	b978      	cbnz	r0, 801bd2e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801bd0e:	4620      	mov	r0, r4
 801bd10:	f7fb fd15 	bl	801773e <_ZNK8touchgfx4Rect7isEmptyEv>
 801bd14:	f9b5 6000 	ldrsh.w	r6, [r5]
 801bd18:	b150      	cbz	r0, 801bd30 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801bd1a:	8026      	strh	r6, [r4, #0]
 801bd1c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801bd20:	8063      	strh	r3, [r4, #2]
 801bd22:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801bd26:	80a3      	strh	r3, [r4, #4]
 801bd28:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801bd2c:	80e3      	strh	r3, [r4, #6]
 801bd2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bd30:	f9b4 1000 	ldrsh.w	r1, [r4]
 801bd34:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801bd38:	42b1      	cmp	r1, r6
 801bd3a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801bd3e:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801bd42:	460f      	mov	r7, r1
 801bd44:	88ed      	ldrh	r5, [r5, #6]
 801bd46:	bfa8      	it	ge
 801bd48:	4637      	movge	r7, r6
 801bd4a:	4293      	cmp	r3, r2
 801bd4c:	4618      	mov	r0, r3
 801bd4e:	4466      	add	r6, ip
 801bd50:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801bd54:	bfa8      	it	ge
 801bd56:	4610      	movge	r0, r2
 801bd58:	442a      	add	r2, r5
 801bd5a:	88e5      	ldrh	r5, [r4, #6]
 801bd5c:	4461      	add	r1, ip
 801bd5e:	b236      	sxth	r6, r6
 801bd60:	8027      	strh	r7, [r4, #0]
 801bd62:	442b      	add	r3, r5
 801bd64:	b209      	sxth	r1, r1
 801bd66:	b212      	sxth	r2, r2
 801bd68:	8060      	strh	r0, [r4, #2]
 801bd6a:	b21b      	sxth	r3, r3
 801bd6c:	428e      	cmp	r6, r1
 801bd6e:	bfac      	ite	ge
 801bd70:	ebc7 0106 	rsbge	r1, r7, r6
 801bd74:	ebc7 0101 	rsblt	r1, r7, r1
 801bd78:	429a      	cmp	r2, r3
 801bd7a:	bfac      	ite	ge
 801bd7c:	ebc0 0202 	rsbge	r2, r0, r2
 801bd80:	ebc0 0203 	rsblt	r2, r0, r3
 801bd84:	80a1      	strh	r1, [r4, #4]
 801bd86:	80e2      	strh	r2, [r4, #6]
 801bd88:	e7d1      	b.n	801bd2e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801bd8c <_ZN8touchgfx11Application11getInstanceEv>:
 801bd8c:	4b01      	ldr	r3, [pc, #4]	@ (801bd94 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801bd8e:	6818      	ldr	r0, [r3, #0]
 801bd90:	4770      	bx	lr
 801bd92:	bf00      	nop
 801bd94:	24013bac 	.word	0x24013bac

0801bd98 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 801bd98:	2300      	movs	r3, #0
 801bd9a:	b510      	push	{r4, lr}
 801bd9c:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 801bda0:	4604      	mov	r4, r0
 801bda2:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801bda6:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 801bdaa:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 801bdae:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 801bdb2:	429a      	cmp	r2, r3
 801bdb4:	d90e      	bls.n	801bdd4 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801bdb6:	18e2      	adds	r2, r4, r3
 801bdb8:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 801bdbc:	b122      	cbz	r2, 801bdc8 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 801bdbe:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801bdc2:	6803      	ldr	r3, [r0, #0]
 801bdc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801bdc6:	4798      	blx	r3
 801bdc8:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 801bdcc:	3301      	adds	r3, #1
 801bdce:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 801bdd2:	e7ea      	b.n	801bdaa <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 801bdd4:	bd10      	pop	{r4, pc}

0801bdd6 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 801bdd6:	2300      	movs	r3, #0
 801bdd8:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 801bddc:	30a4      	adds	r0, #164	@ 0xa4
 801bdde:	f820 3c24 	strh.w	r3, [r0, #-36]
 801bde2:	f802 3b01 	strb.w	r3, [r2], #1
 801bde6:	4282      	cmp	r2, r0
 801bde8:	d1fb      	bne.n	801bde2 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 801bdea:	4770      	bx	lr

0801bdec <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801bdec:	b570      	push	{r4, r5, r6, lr}
 801bdee:	4c0b      	ldr	r4, [pc, #44]	@ (801be1c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 801bdf0:	4605      	mov	r5, r0
 801bdf2:	460e      	mov	r6, r1
 801bdf4:	6820      	ldr	r0, [r4, #0]
 801bdf6:	b110      	cbz	r0, 801bdfe <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 801bdf8:	6803      	ldr	r3, [r0, #0]
 801bdfa:	695b      	ldr	r3, [r3, #20]
 801bdfc:	4798      	blx	r3
 801bdfe:	1d28      	adds	r0, r5, #4
 801be00:	f7ff ffe9 	bl	801bdd6 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801be04:	6026      	str	r6, [r4, #0]
 801be06:	6833      	ldr	r3, [r6, #0]
 801be08:	4630      	mov	r0, r6
 801be0a:	68db      	ldr	r3, [r3, #12]
 801be0c:	4798      	blx	r3
 801be0e:	682b      	ldr	r3, [r5, #0]
 801be10:	4628      	mov	r0, r5
 801be12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801be14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801be18:	4718      	bx	r3
 801be1a:	bf00      	nop
 801be1c:	24013b9c 	.word	0x24013b9c

0801be20 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 801be20:	2300      	movs	r3, #0
 801be22:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 801be26:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 801be2a:	461a      	mov	r2, r3
 801be2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801be2e:	461c      	mov	r4, r3
 801be30:	461d      	mov	r5, r3
 801be32:	459c      	cmp	ip, r3
 801be34:	dd1a      	ble.n	801be6c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 801be36:	18c6      	adds	r6, r0, r3
 801be38:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 801be3c:	b16e      	cbz	r6, 801be5a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 801be3e:	429a      	cmp	r2, r3
 801be40:	d008      	beq.n	801be54 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 801be42:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 801be46:	fa1f fe82 	uxth.w	lr, r2
 801be4a:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801be4e:	1887      	adds	r7, r0, r2
 801be50:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 801be54:	3201      	adds	r2, #1
 801be56:	3301      	adds	r3, #1
 801be58:	e7eb      	b.n	801be32 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 801be5a:	4299      	cmp	r1, r3
 801be5c:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 801be60:	bfa8      	it	ge
 801be62:	3501      	addge	r5, #1
 801be64:	429e      	cmp	r6, r3
 801be66:	bfc8      	it	gt
 801be68:	3401      	addgt	r4, #1
 801be6a:	e7f4      	b.n	801be56 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 801be6c:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 801be70:	1b49      	subs	r1, r1, r5
 801be72:	1b1b      	subs	r3, r3, r4
 801be74:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 801be78:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 801be7c:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801be80:	4293      	cmp	r3, r2
 801be82:	dd03      	ble.n	801be8c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 801be84:	3b01      	subs	r3, #1
 801be86:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 801be8a:	e7f7      	b.n	801be7c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 801be8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801be90 <_ZN8touchgfx11Application15handleTickEventEv>:
 801be90:	b570      	push	{r4, r5, r6, lr}
 801be92:	4d16      	ldr	r5, [pc, #88]	@ (801beec <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 801be94:	4604      	mov	r4, r0
 801be96:	6828      	ldr	r0, [r5, #0]
 801be98:	b140      	cbz	r0, 801beac <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801be9a:	7a03      	ldrb	r3, [r0, #8]
 801be9c:	b933      	cbnz	r3, 801beac <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801be9e:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801bea2:	6803      	ldr	r3, [r0, #0]
 801bea4:	689b      	ldr	r3, [r3, #8]
 801bea6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801beaa:	4718      	bx	r3
 801beac:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 801beb0:	4e0f      	ldr	r6, [pc, #60]	@ (801bef0 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 801beb2:	b973      	cbnz	r3, 801bed2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801beb4:	b168      	cbz	r0, 801bed2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801beb6:	7a03      	ldrb	r3, [r0, #8]
 801beb8:	b15b      	cbz	r3, 801bed2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801beba:	6830      	ldr	r0, [r6, #0]
 801bebc:	b110      	cbz	r0, 801bec4 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801bebe:	6803      	ldr	r3, [r0, #0]
 801bec0:	691b      	ldr	r3, [r3, #16]
 801bec2:	4798      	blx	r3
 801bec4:	6828      	ldr	r0, [r5, #0]
 801bec6:	6803      	ldr	r3, [r0, #0]
 801bec8:	68db      	ldr	r3, [r3, #12]
 801beca:	4798      	blx	r3
 801becc:	2301      	movs	r3, #1
 801bece:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801bed2:	3404      	adds	r4, #4
 801bed4:	4620      	mov	r0, r4
 801bed6:	f7ff ff5f 	bl	801bd98 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 801beda:	4620      	mov	r0, r4
 801bedc:	f7ff ffa0 	bl	801be20 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801bee0:	6830      	ldr	r0, [r6, #0]
 801bee2:	b110      	cbz	r0, 801beea <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 801bee4:	6803      	ldr	r3, [r0, #0]
 801bee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bee8:	e7dd      	b.n	801bea6 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801beea:	bd70      	pop	{r4, r5, r6, pc}
 801beec:	24013ba0 	.word	0x24013ba0
 801bef0:	24013b9c 	.word	0x24013b9c

0801bef4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801bef4:	4603      	mov	r3, r0
 801bef6:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 801befa:	2200      	movs	r2, #0
 801befc:	801a      	strh	r2, [r3, #0]
 801befe:	3308      	adds	r3, #8
 801bf00:	f823 2c06 	strh.w	r2, [r3, #-6]
 801bf04:	f823 2c04 	strh.w	r2, [r3, #-4]
 801bf08:	f823 2c02 	strh.w	r2, [r3, #-2]
 801bf0c:	428b      	cmp	r3, r1
 801bf0e:	d1f5      	bne.n	801befc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801bf10:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 801bf14:	4770      	bx	lr
	...

0801bf18 <_ZN8touchgfx11ApplicationC1Ev>:
 801bf18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf1a:	4b1d      	ldr	r3, [pc, #116]	@ (801bf90 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801bf1c:	4606      	mov	r6, r0
 801bf1e:	4604      	mov	r4, r0
 801bf20:	2500      	movs	r5, #0
 801bf22:	f846 3b04 	str.w	r3, [r6], #4
 801bf26:	22a8      	movs	r2, #168	@ 0xa8
 801bf28:	2100      	movs	r1, #0
 801bf2a:	4630      	mov	r0, r6
 801bf2c:	f00e fb4c 	bl	802a5c8 <memset>
 801bf30:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 801bf34:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 801bf38:	4f16      	ldr	r7, [pc, #88]	@ (801bf94 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801bf3a:	f7ff ffdb 	bl	801bef4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801bf3e:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 801bf42:	f7ff ffd7 	bl	801bef4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801bf46:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 801bf4a:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 801bf4e:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 801bf52:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 801bf56:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 801bf5a:	490f      	ldr	r1, [pc, #60]	@ (801bf98 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801bf5c:	480f      	ldr	r0, [pc, #60]	@ (801bf9c <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801bf5e:	f00c fead 	bl	8028cbc <CRC_Lock>
 801bf62:	4b0f      	ldr	r3, [pc, #60]	@ (801bfa0 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 801bf64:	b158      	cbz	r0, 801bf7e <_ZN8touchgfx11ApplicationC1Ev+0x66>
 801bf66:	801d      	strh	r5, [r3, #0]
 801bf68:	2300      	movs	r3, #0
 801bf6a:	4a0e      	ldr	r2, [pc, #56]	@ (801bfa4 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 801bf6c:	4630      	mov	r0, r6
 801bf6e:	6013      	str	r3, [r2, #0]
 801bf70:	4a0d      	ldr	r2, [pc, #52]	@ (801bfa8 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 801bf72:	603b      	str	r3, [r7, #0]
 801bf74:	6013      	str	r3, [r2, #0]
 801bf76:	f7ff ff2e 	bl	801bdd6 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801bf7a:	4620      	mov	r0, r4
 801bf7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bf7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801bf82:	2002      	movs	r0, #2
 801bf84:	801a      	strh	r2, [r3, #0]
 801bf86:	6038      	str	r0, [r7, #0]
 801bf88:	f001 fd6c 	bl	801da64 <_ZN8touchgfx6Screen4drawEv>
 801bf8c:	e7ec      	b.n	801bf68 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 801bf8e:	bf00      	nop
 801bf90:	0802ce28 	.word	0x0802ce28
 801bf94:	24013b9c 	.word	0x24013b9c
 801bf98:	b5e8b5cd 	.word	0xb5e8b5cd
 801bf9c:	f407a5c2 	.word	0xf407a5c2
 801bfa0:	24000020 	.word	0x24000020
 801bfa4:	24013bac 	.word	0x24013bac
 801bfa8:	24013ba0 	.word	0x24013ba0

0801bfac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801bfac:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 801bfb0:	3b01      	subs	r3, #1
 801bfb2:	b29b      	uxth	r3, r3
 801bfb4:	428b      	cmp	r3, r1
 801bfb6:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 801bfba:	b510      	push	{r4, lr}
 801bfbc:	d908      	bls.n	801bfd0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801bfbe:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801bfc2:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801bfc6:	681a      	ldr	r2, [r3, #0]
 801bfc8:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801bfcc:	685a      	ldr	r2, [r3, #4]
 801bfce:	6062      	str	r2, [r4, #4]
 801bfd0:	bd10      	pop	{r4, pc}
	...

0801bfd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801bfd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfd8:	b08f      	sub	sp, #60	@ 0x3c
 801bfda:	4b8f      	ldr	r3, [pc, #572]	@ (801c218 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 801bfdc:	4683      	mov	fp, r0
 801bfde:	ac0a      	add	r4, sp, #40	@ 0x28
 801bfe0:	e884 0006 	stmia.w	r4, {r1, r2}
 801bfe4:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bfe8:	4620      	mov	r0, r4
 801bfea:	4b8c      	ldr	r3, [pc, #560]	@ (801c21c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 801bfec:	f9b3 1000 	ldrsh.w	r1, [r3]
 801bff0:	f7ff fe10 	bl	801bc14 <_ZN8touchgfx4Rect10restrictToEss>
 801bff4:	4620      	mov	r0, r4
 801bff6:	f7fb fba2 	bl	801773e <_ZNK8touchgfx4Rect7isEmptyEv>
 801bffa:	2800      	cmp	r0, #0
 801bffc:	d16a      	bne.n	801c0d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801bffe:	9403      	str	r4, [sp, #12]
 801c000:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 801c004:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 801c008:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 801c00c:	9301      	str	r3, [sp, #4]
 801c00e:	35a4      	adds	r5, #164	@ 0xa4
 801c010:	b15c      	cbz	r4, 801c02a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801c012:	4629      	mov	r1, r5
 801c014:	9803      	ldr	r0, [sp, #12]
 801c016:	f7ff fe4d 	bl	801bcb4 <_ZNK8touchgfx4Rect8includesERKS0_>
 801c01a:	3c01      	subs	r4, #1
 801c01c:	b118      	cbz	r0, 801c026 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 801c01e:	b2a1      	uxth	r1, r4
 801c020:	9801      	ldr	r0, [sp, #4]
 801c022:	f7ff ffc3 	bl	801bfac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c026:	3d08      	subs	r5, #8
 801c028:	e7f2      	b.n	801c010 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 801c02a:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 801c02e:	f10a 33ff 	add.w	r3, sl, #4294967295
 801c032:	f8cd a010 	str.w	sl, [sp, #16]
 801c036:	9302      	str	r3, [sp, #8]
 801c038:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801c03c:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 801c040:	9306      	str	r3, [sp, #24]
 801c042:	445c      	add	r4, fp
 801c044:	2500      	movs	r5, #0
 801c046:	4626      	mov	r6, r4
 801c048:	f8cd a014 	str.w	sl, [sp, #20]
 801c04c:	462f      	mov	r7, r5
 801c04e:	9b05      	ldr	r3, [sp, #20]
 801c050:	2b00      	cmp	r3, #0
 801c052:	d073      	beq.n	801c13c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801c054:	9903      	ldr	r1, [sp, #12]
 801c056:	4630      	mov	r0, r6
 801c058:	f7ff fdba 	bl	801bbd0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c05c:	b350      	cbz	r0, 801c0b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801c05e:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 801c062:	f9b6 c000 	ldrsh.w	ip, [r6]
 801c066:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 801c06a:	45e6      	cmp	lr, ip
 801c06c:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801c070:	db33      	blt.n	801c0da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801c072:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801c076:	88b3      	ldrh	r3, [r6, #4]
 801c078:	4472      	add	r2, lr
 801c07a:	4463      	add	r3, ip
 801c07c:	b212      	sxth	r2, r2
 801c07e:	b21b      	sxth	r3, r3
 801c080:	429a      	cmp	r2, r3
 801c082:	dc2a      	bgt.n	801c0da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801c084:	fa1f f289 	uxth.w	r2, r9
 801c088:	88f3      	ldrh	r3, [r6, #6]
 801c08a:	45c8      	cmp	r8, r9
 801c08c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 801c090:	4413      	add	r3, r2
 801c092:	fa1f fc88 	uxth.w	ip, r8
 801c096:	b29b      	uxth	r3, r3
 801c098:	fa0f fe83 	sxth.w	lr, r3
 801c09c:	db0f      	blt.n	801c0be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801c09e:	eba3 030c 	sub.w	r3, r3, ip
 801c0a2:	1ac9      	subs	r1, r1, r3
 801c0a4:	b209      	sxth	r1, r1
 801c0a6:	2900      	cmp	r1, #0
 801c0a8:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801c0ac:	dd12      	ble.n	801c0d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801c0ae:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 801c0b2:	4605      	mov	r5, r0
 801c0b4:	9b05      	ldr	r3, [sp, #20]
 801c0b6:	3e08      	subs	r6, #8
 801c0b8:	3b01      	subs	r3, #1
 801c0ba:	9305      	str	r3, [sp, #20]
 801c0bc:	e7c7      	b.n	801c04e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801c0be:	4461      	add	r1, ip
 801c0c0:	b209      	sxth	r1, r1
 801c0c2:	4571      	cmp	r1, lr
 801c0c4:	dc38      	bgt.n	801c138 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801c0c6:	eba2 020c 	sub.w	r2, r2, ip
 801c0ca:	b212      	sxth	r2, r2
 801c0cc:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 801c0d0:	2a00      	cmp	r2, #0
 801c0d2:	dcee      	bgt.n	801c0b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801c0d4:	b00f      	add	sp, #60	@ 0x3c
 801c0d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0da:	45c8      	cmp	r8, r9
 801c0dc:	db2c      	blt.n	801c138 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801c0de:	88f3      	ldrh	r3, [r6, #6]
 801c0e0:	4499      	add	r9, r3
 801c0e2:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 801c0e6:	4498      	add	r8, r3
 801c0e8:	fa0f f989 	sxth.w	r9, r9
 801c0ec:	fa0f f888 	sxth.w	r8, r8
 801c0f0:	45c1      	cmp	r9, r8
 801c0f2:	db21      	blt.n	801c138 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801c0f4:	fa1f f28c 	uxth.w	r2, ip
 801c0f8:	88b3      	ldrh	r3, [r6, #4]
 801c0fa:	45e6      	cmp	lr, ip
 801c0fc:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801c100:	4413      	add	r3, r2
 801c102:	fa1f f88e 	uxth.w	r8, lr
 801c106:	b29b      	uxth	r3, r3
 801c108:	fa0f f983 	sxth.w	r9, r3
 801c10c:	db0a      	blt.n	801c124 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 801c10e:	eba3 0308 	sub.w	r3, r3, r8
 801c112:	1ac9      	subs	r1, r1, r3
 801c114:	b209      	sxth	r1, r1
 801c116:	2900      	cmp	r1, #0
 801c118:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 801c11c:	ddda      	ble.n	801c0d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801c11e:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801c122:	e7c6      	b.n	801c0b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801c124:	4441      	add	r1, r8
 801c126:	b209      	sxth	r1, r1
 801c128:	4549      	cmp	r1, r9
 801c12a:	dc05      	bgt.n	801c138 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801c12c:	eba2 0208 	sub.w	r2, r2, r8
 801c130:	b212      	sxth	r2, r2
 801c132:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 801c136:	e7cb      	b.n	801c0d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 801c138:	4607      	mov	r7, r0
 801c13a:	e7bb      	b.n	801c0b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801c13c:	2d00      	cmp	r5, #0
 801c13e:	d181      	bne.n	801c044 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 801c140:	2f00      	cmp	r7, #0
 801c142:	f000 81dd 	beq.w	801c500 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801c146:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 801c14a:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 801c14e:	b2b3      	uxth	r3, r6
 801c150:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 801c154:	9305      	str	r3, [sp, #20]
 801c156:	9a05      	ldr	r2, [sp, #20]
 801c158:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801c15c:	4413      	add	r3, r2
 801c15e:	b2ba      	uxth	r2, r7
 801c160:	4492      	add	sl, r2
 801c162:	b29b      	uxth	r3, r3
 801c164:	fa1f fa8a 	uxth.w	sl, sl
 801c168:	fa0f f883 	sxth.w	r8, r3
 801c16c:	fa0f f98a 	sxth.w	r9, sl
 801c170:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801c174:	9b04      	ldr	r3, [sp, #16]
 801c176:	2b00      	cmp	r3, #0
 801c178:	d052      	beq.n	801c220 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801c17a:	9903      	ldr	r1, [sp, #12]
 801c17c:	4620      	mov	r0, r4
 801c17e:	f7ff fd27 	bl	801bbd0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c182:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801c186:	b1c0      	cbz	r0, 801c1ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801c188:	f9b4 e000 	ldrsh.w	lr, [r4]
 801c18c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801c190:	4576      	cmp	r6, lr
 801c192:	dc22      	bgt.n	801c1da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801c194:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801c198:	44f4      	add	ip, lr
 801c19a:	fa0f fc8c 	sxth.w	ip, ip
 801c19e:	45e0      	cmp	r8, ip
 801c1a0:	db1b      	blt.n	801c1da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801c1a2:	428f      	cmp	r7, r1
 801c1a4:	fa1f fc81 	uxth.w	ip, r1
 801c1a8:	88e1      	ldrh	r1, [r4, #6]
 801c1aa:	dc0d      	bgt.n	801c1c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 801c1ac:	ebaa 0c0c 	sub.w	ip, sl, ip
 801c1b0:	f8a4 9002 	strh.w	r9, [r4, #2]
 801c1b4:	eba1 010c 	sub.w	r1, r1, ip
 801c1b8:	80e1      	strh	r1, [r4, #6]
 801c1ba:	4628      	mov	r0, r5
 801c1bc:	9904      	ldr	r1, [sp, #16]
 801c1be:	3c08      	subs	r4, #8
 801c1c0:	4605      	mov	r5, r0
 801c1c2:	3901      	subs	r1, #1
 801c1c4:	9104      	str	r1, [sp, #16]
 801c1c6:	e7d3      	b.n	801c170 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 801c1c8:	4461      	add	r1, ip
 801c1ca:	b209      	sxth	r1, r1
 801c1cc:	4549      	cmp	r1, r9
 801c1ce:	dcf5      	bgt.n	801c1bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801c1d0:	eba2 0c0c 	sub.w	ip, r2, ip
 801c1d4:	f8a4 c006 	strh.w	ip, [r4, #6]
 801c1d8:	e7ef      	b.n	801c1ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801c1da:	428f      	cmp	r7, r1
 801c1dc:	dcee      	bgt.n	801c1bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801c1de:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 801c1e2:	4461      	add	r1, ip
 801c1e4:	b209      	sxth	r1, r1
 801c1e6:	4589      	cmp	r9, r1
 801c1e8:	dbe8      	blt.n	801c1bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801c1ea:	4576      	cmp	r6, lr
 801c1ec:	fa1f fc8e 	uxth.w	ip, lr
 801c1f0:	88a1      	ldrh	r1, [r4, #4]
 801c1f2:	dc07      	bgt.n	801c204 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 801c1f4:	eba3 0c0c 	sub.w	ip, r3, ip
 801c1f8:	f8a4 8000 	strh.w	r8, [r4]
 801c1fc:	eba1 010c 	sub.w	r1, r1, ip
 801c200:	80a1      	strh	r1, [r4, #4]
 801c202:	e7da      	b.n	801c1ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801c204:	4461      	add	r1, ip
 801c206:	b209      	sxth	r1, r1
 801c208:	4588      	cmp	r8, r1
 801c20a:	dbd7      	blt.n	801c1bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801c20c:	9905      	ldr	r1, [sp, #20]
 801c20e:	eba1 0c0c 	sub.w	ip, r1, ip
 801c212:	f8a4 c004 	strh.w	ip, [r4, #4]
 801c216:	e7d0      	b.n	801c1ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801c218:	24013b4e 	.word	0x24013b4e
 801c21c:	24013b4c 	.word	0x24013b4c
 801c220:	2d00      	cmp	r5, #0
 801c222:	f000 816d 	beq.w	801c500 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801c226:	9b06      	ldr	r3, [sp, #24]
 801c228:	445b      	add	r3, fp
 801c22a:	461c      	mov	r4, r3
 801c22c:	9b02      	ldr	r3, [sp, #8]
 801c22e:	3301      	adds	r3, #1
 801c230:	f000 8166 	beq.w	801c500 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801c234:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 801c238:	9803      	ldr	r0, [sp, #12]
 801c23a:	4629      	mov	r1, r5
 801c23c:	f7ff fd3a 	bl	801bcb4 <_ZNK8touchgfx4Rect8includesERKS0_>
 801c240:	b120      	cbz	r0, 801c24c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 801c242:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801c246:	9801      	ldr	r0, [sp, #4]
 801c248:	f7ff feb0 	bl	801bfac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c24c:	9903      	ldr	r1, [sp, #12]
 801c24e:	4628      	mov	r0, r5
 801c250:	f7ff fcbe 	bl	801bbd0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c254:	2800      	cmp	r0, #0
 801c256:	f000 809c 	beq.w	801c392 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801c25a:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 801c25e:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801c262:	fa1f f189 	uxth.w	r1, r9
 801c266:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 801c26a:	9309      	str	r3, [sp, #36]	@ 0x24
 801c26c:	eb01 0c03 	add.w	ip, r1, r3
 801c270:	b283      	uxth	r3, r0
 801c272:	4548      	cmp	r0, r9
 801c274:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 801c278:	fa1f fa8c 	uxth.w	sl, ip
 801c27c:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 801c280:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 801c284:	eb03 050c 	add.w	r5, r3, ip
 801c288:	b2ad      	uxth	r5, r5
 801c28a:	9505      	str	r5, [sp, #20]
 801c28c:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801c290:	9504      	str	r5, [sp, #16]
 801c292:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 801c296:	f340 8099 	ble.w	801c3cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 801c29a:	1a5b      	subs	r3, r3, r1
 801c29c:	4596      	cmp	lr, r2
 801c29e:	fa0f f08a 	sxth.w	r0, sl
 801c2a2:	b29b      	uxth	r3, r3
 801c2a4:	b21e      	sxth	r6, r3
 801c2a6:	dd2e      	ble.n	801c306 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 801c2a8:	9f02      	ldr	r7, [sp, #8]
 801c2aa:	fa1f fe8e 	uxth.w	lr, lr
 801c2ae:	b292      	uxth	r2, r2
 801c2b0:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 801c2b4:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801c2b8:	9f04      	ldr	r7, [sp, #16]
 801c2ba:	ebae 0102 	sub.w	r1, lr, r2
 801c2be:	44a6      	add	lr, r4
 801c2c0:	1a3f      	subs	r7, r7, r0
 801c2c2:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 801c2c6:	b289      	uxth	r1, r1
 801c2c8:	4402      	add	r2, r0
 801c2ca:	fa0f fe8e 	sxth.w	lr, lr
 801c2ce:	b20d      	sxth	r5, r1
 801c2d0:	b212      	sxth	r2, r2
 801c2d2:	436f      	muls	r7, r5
 801c2d4:	ebae 0202 	sub.w	r2, lr, r2
 801c2d8:	4372      	muls	r2, r6
 801c2da:	4297      	cmp	r7, r2
 801c2dc:	db09      	blt.n	801c2f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801c2de:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 801c2e2:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 801c2e6:	449c      	add	ip, r3
 801c2e8:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801c2ec:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 801c2f0:	e686      	b.n	801c000 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801c2f2:	4421      	add	r1, r4
 801c2f4:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 801c2f8:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 801c2fc:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801c300:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801c304:	e67c      	b.n	801c000 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801c306:	9f04      	ldr	r7, [sp, #16]
 801c308:	42b8      	cmp	r0, r7
 801c30a:	da27      	bge.n	801c35c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801c30c:	9902      	ldr	r1, [sp, #8]
 801c30e:	1a3f      	subs	r7, r7, r0
 801c310:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 801c314:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 801c318:	eb05 010e 	add.w	r1, r5, lr
 801c31c:	fa1f f881 	uxth.w	r8, r1
 801c320:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 801c324:	4411      	add	r1, r2
 801c326:	fa0f f988 	sxth.w	r9, r8
 801c32a:	eba2 020e 	sub.w	r2, r2, lr
 801c32e:	eba1 0108 	sub.w	r1, r1, r8
 801c332:	4372      	muls	r2, r6
 801c334:	b289      	uxth	r1, r1
 801c336:	fa0f f881 	sxth.w	r8, r1
 801c33a:	fb08 f707 	mul.w	r7, r8, r7
 801c33e:	42ba      	cmp	r2, r7
 801c340:	dc06      	bgt.n	801c350 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 801c342:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 801c346:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 801c34a:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 801c34e:	e7ca      	b.n	801c2e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 801c350:	4429      	add	r1, r5
 801c352:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 801c356:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801c35a:	e651      	b.n	801c000 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801c35c:	9805      	ldr	r0, [sp, #20]
 801c35e:	2d06      	cmp	r5, #6
 801c360:	ebaa 0000 	sub.w	r0, sl, r0
 801c364:	b280      	uxth	r0, r0
 801c366:	fa0f fe80 	sxth.w	lr, r0
 801c36a:	d817      	bhi.n	801c39c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 801c36c:	9b04      	ldr	r3, [sp, #16]
 801c36e:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 801c372:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 801c376:	1c6b      	adds	r3, r5, #1
 801c378:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 801c37c:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 801c380:	9b01      	ldr	r3, [sp, #4]
 801c382:	9801      	ldr	r0, [sp, #4]
 801c384:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801c388:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801c38c:	805a      	strh	r2, [r3, #2]
 801c38e:	809e      	strh	r6, [r3, #4]
 801c390:	80d9      	strh	r1, [r3, #6]
 801c392:	9b02      	ldr	r3, [sp, #8]
 801c394:	3c08      	subs	r4, #8
 801c396:	3b01      	subs	r3, #1
 801c398:	9302      	str	r3, [sp, #8]
 801c39a:	e747      	b.n	801c22c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 801c39c:	9a02      	ldr	r2, [sp, #8]
 801c39e:	45b6      	cmp	lr, r6
 801c3a0:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801c3a4:	db0d      	blt.n	801c3c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801c3a6:	449c      	add	ip, r3
 801c3a8:	445a      	add	r2, fp
 801c3aa:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801c3ae:	fa1f fc8c 	uxth.w	ip, ip
 801c3b2:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 801c3b6:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 801c3ba:	448c      	add	ip, r1
 801c3bc:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 801c3c0:	e61e      	b.n	801c000 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801c3c2:	445a      	add	r2, fp
 801c3c4:	4484      	add	ip, r0
 801c3c6:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 801c3ca:	e78f      	b.n	801c2ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801c3cc:	fa1f f18e 	uxth.w	r1, lr
 801c3d0:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 801c3d4:	b293      	uxth	r3, r2
 801c3d6:	4596      	cmp	lr, r2
 801c3d8:	eb01 0806 	add.w	r8, r1, r6
 801c3dc:	9306      	str	r3, [sp, #24]
 801c3de:	fa1f f888 	uxth.w	r8, r8
 801c3e2:	9f06      	ldr	r7, [sp, #24]
 801c3e4:	fa0f f388 	sxth.w	r3, r8
 801c3e8:	9307      	str	r3, [sp, #28]
 801c3ea:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801c3ee:	443b      	add	r3, r7
 801c3f0:	b29b      	uxth	r3, r3
 801c3f2:	9308      	str	r3, [sp, #32]
 801c3f4:	da24      	bge.n	801c440 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 801c3f6:	9905      	ldr	r1, [sp, #20]
 801c3f8:	eba3 0308 	sub.w	r3, r3, r8
 801c3fc:	eba2 020e 	sub.w	r2, r2, lr
 801c400:	eba9 0000 	sub.w	r0, r9, r0
 801c404:	ebaa 0401 	sub.w	r4, sl, r1
 801c408:	b29b      	uxth	r3, r3
 801c40a:	b2a4      	uxth	r4, r4
 801c40c:	b219      	sxth	r1, r3
 801c40e:	b225      	sxth	r5, r4
 801c410:	4348      	muls	r0, r1
 801c412:	436a      	muls	r2, r5
 801c414:	4282      	cmp	r2, r0
 801c416:	9a02      	ldr	r2, [sp, #8]
 801c418:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801c41c:	445a      	add	r2, fp
 801c41e:	dc06      	bgt.n	801c42e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 801c420:	9b07      	ldr	r3, [sp, #28]
 801c422:	44a4      	add	ip, r4
 801c424:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 801c428:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 801c42c:	e75e      	b.n	801c2ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801c42e:	9904      	ldr	r1, [sp, #16]
 801c430:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 801c434:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 801c438:	4433      	add	r3, r6
 801c43a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801c43e:	e5df      	b.n	801c000 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801c440:	9f06      	ldr	r7, [sp, #24]
 801c442:	9b04      	ldr	r3, [sp, #16]
 801c444:	1bc9      	subs	r1, r1, r7
 801c446:	fa0f f78a 	sxth.w	r7, sl
 801c44a:	b289      	uxth	r1, r1
 801c44c:	429f      	cmp	r7, r3
 801c44e:	fa0f fe81 	sxth.w	lr, r1
 801c452:	dd23      	ble.n	801c49c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 801c454:	9a05      	ldr	r2, [sp, #20]
 801c456:	eba9 0000 	sub.w	r0, r9, r0
 801c45a:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801c45e:	ebaa 0202 	sub.w	r2, sl, r2
 801c462:	9d07      	ldr	r5, [sp, #28]
 801c464:	fb0e f000 	mul.w	r0, lr, r0
 801c468:	b292      	uxth	r2, r2
 801c46a:	eba5 0a03 	sub.w	sl, r5, r3
 801c46e:	9b02      	ldr	r3, [sp, #8]
 801c470:	b214      	sxth	r4, r2
 801c472:	00db      	lsls	r3, r3, #3
 801c474:	fb04 fa0a 	mul.w	sl, r4, sl
 801c478:	445b      	add	r3, fp
 801c47a:	4550      	cmp	r0, sl
 801c47c:	db03      	blt.n	801c486 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 801c47e:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 801c482:	4494      	add	ip, r2
 801c484:	e732      	b.n	801c2ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801c486:	9a04      	ldr	r2, [sp, #16]
 801c488:	4431      	add	r1, r6
 801c48a:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 801c48e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 801c492:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 801c496:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801c49a:	e75c      	b.n	801c356 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 801c49c:	9b08      	ldr	r3, [sp, #32]
 801c49e:	2d06      	cmp	r5, #6
 801c4a0:	eba3 0308 	sub.w	r3, r3, r8
 801c4a4:	b29b      	uxth	r3, r3
 801c4a6:	b218      	sxth	r0, r3
 801c4a8:	d813      	bhi.n	801c4d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 801c4aa:	9b07      	ldr	r3, [sp, #28]
 801c4ac:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 801c4b0:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 801c4b4:	1c6b      	adds	r3, r5, #1
 801c4b6:	9901      	ldr	r1, [sp, #4]
 801c4b8:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 801c4bc:	9b01      	ldr	r3, [sp, #4]
 801c4be:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 801c4c2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801c4c6:	805a      	strh	r2, [r3, #2]
 801c4c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c4ca:	f8a3 e006 	strh.w	lr, [r3, #6]
 801c4ce:	809a      	strh	r2, [r3, #4]
 801c4d0:	e75f      	b.n	801c392 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801c4d2:	9c02      	ldr	r4, [sp, #8]
 801c4d4:	4570      	cmp	r0, lr
 801c4d6:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801c4da:	db0d      	blt.n	801c4f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 801c4dc:	4431      	add	r1, r6
 801c4de:	9b06      	ldr	r3, [sp, #24]
 801c4e0:	445c      	add	r4, fp
 801c4e2:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 801c4e6:	b289      	uxth	r1, r1
 801c4e8:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 801c4ec:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801c4f0:	4419      	add	r1, r3
 801c4f2:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 801c4f6:	e583      	b.n	801c000 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801c4f8:	445c      	add	r4, fp
 801c4fa:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 801c4fe:	e79b      	b.n	801c438 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 801c500:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 801c504:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 801c508:	1e65      	subs	r5, r4, #1
 801c50a:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 801c50e:	b2ad      	uxth	r5, r5
 801c510:	42b5      	cmp	r5, r6
 801c512:	d044      	beq.n	801c59e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 801c514:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 801c518:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 801c51c:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 801c520:	4282      	cmp	r2, r0
 801c522:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 801c526:	d11f      	bne.n	801c568 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801c528:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 801c52c:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 801c530:	459c      	cmp	ip, r3
 801c532:	d119      	bne.n	801c568 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801c534:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 801c538:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801c53c:	19d8      	adds	r0, r3, r7
 801c53e:	b200      	sxth	r0, r0
 801c540:	4288      	cmp	r0, r1
 801c542:	d109      	bne.n	801c558 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 801c544:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 801c548:	4413      	add	r3, r2
 801c54a:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 801c54e:	4629      	mov	r1, r5
 801c550:	9801      	ldr	r0, [sp, #4]
 801c552:	f7ff fd2b 	bl	801bfac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c556:	e003      	b.n	801c560 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801c558:	4411      	add	r1, r2
 801c55a:	b209      	sxth	r1, r1
 801c55c:	42b9      	cmp	r1, r7
 801c55e:	d0f3      	beq.n	801c548 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 801c560:	3d01      	subs	r5, #1
 801c562:	3c08      	subs	r4, #8
 801c564:	b2ad      	uxth	r5, r5
 801c566:	e7d3      	b.n	801c510 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 801c568:	42b9      	cmp	r1, r7
 801c56a:	d1f9      	bne.n	801c560 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801c56c:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 801c570:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801c574:	4299      	cmp	r1, r3
 801c576:	d1f3      	bne.n	801c560 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801c578:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801c57c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 801c580:	181f      	adds	r7, r3, r0
 801c582:	b23f      	sxth	r7, r7
 801c584:	42ba      	cmp	r2, r7
 801c586:	d105      	bne.n	801c594 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 801c588:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 801c58c:	440b      	add	r3, r1
 801c58e:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801c592:	e7dc      	b.n	801c54e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 801c594:	440a      	add	r2, r1
 801c596:	b212      	sxth	r2, r2
 801c598:	4290      	cmp	r0, r2
 801c59a:	d1e1      	bne.n	801c560 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801c59c:	e7f6      	b.n	801c58c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 801c59e:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 801c5a2:	2e07      	cmp	r6, #7
 801c5a4:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801c5a8:	d812      	bhi.n	801c5d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 801c5aa:	1c75      	adds	r5, r6, #1
 801c5ac:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 801c5b0:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 801c5b4:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 801c5b8:	9d01      	ldr	r5, [sp, #4]
 801c5ba:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801c5be:	442c      	add	r4, r5
 801c5c0:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801c5c4:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801c5c8:	8061      	strh	r1, [r4, #2]
 801c5ca:	80a2      	strh	r2, [r4, #4]
 801c5cc:	80e3      	strh	r3, [r4, #6]
 801c5ce:	e581      	b.n	801c0d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801c5d0:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 801c5d4:	3e01      	subs	r6, #1
 801c5d6:	445c      	add	r4, fp
 801c5d8:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 801c5dc:	f04f 37ff 	mov.w	r7, #4294967295
 801c5e0:	2500      	movs	r5, #0
 801c5e2:	9305      	str	r3, [sp, #20]
 801c5e4:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801c5e8:	1e72      	subs	r2, r6, #1
 801c5ea:	9302      	str	r3, [sp, #8]
 801c5ec:	4691      	mov	r9, r2
 801c5ee:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 801c5f2:	9304      	str	r3, [sp, #16]
 801c5f4:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 801c5f8:	f1b9 3fff 	cmp.w	r9, #4294967295
 801c5fc:	6818      	ldr	r0, [r3, #0]
 801c5fe:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801c602:	9207      	str	r2, [sp, #28]
 801c604:	bf16      	itet	ne
 801c606:	9905      	ldrne	r1, [sp, #20]
 801c608:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801c60c:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801c610:	9306      	str	r3, [sp, #24]
 801c612:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801c616:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801c61a:	fb18 f801 	smulbb	r8, r8, r1
 801c61e:	6859      	ldr	r1, [r3, #4]
 801c620:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801c624:	4671      	mov	r1, lr
 801c626:	a80c      	add	r0, sp, #48	@ 0x30
 801c628:	f7ff fb6a 	bl	801bd00 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c62c:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 801c630:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 801c634:	f04f 0c08 	mov.w	ip, #8
 801c638:	9b04      	ldr	r3, [sp, #16]
 801c63a:	9a02      	ldr	r2, [sp, #8]
 801c63c:	fb10 f001 	smulbb	r0, r0, r1
 801c640:	fb02 8803 	mla	r8, r2, r3, r8
 801c644:	eba0 0108 	sub.w	r1, r0, r8
 801c648:	fb90 f0fc 	sdiv	r0, r0, ip
 801c64c:	4288      	cmp	r0, r1
 801c64e:	dc20      	bgt.n	801c692 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 801c650:	4551      	cmp	r1, sl
 801c652:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801c656:	da03      	bge.n	801c660 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 801c658:	b1d9      	cbz	r1, 801c692 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 801c65a:	468a      	mov	sl, r1
 801c65c:	464f      	mov	r7, r9
 801c65e:	4635      	mov	r5, r6
 801c660:	f109 39ff 	add.w	r9, r9, #4294967295
 801c664:	f119 0f02 	cmn.w	r9, #2
 801c668:	d1c6      	bne.n	801c5f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 801c66a:	4616      	mov	r6, r2
 801c66c:	3201      	adds	r2, #1
 801c66e:	f1a4 0408 	sub.w	r4, r4, #8
 801c672:	d1b7      	bne.n	801c5e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 801c674:	9b01      	ldr	r3, [sp, #4]
 801c676:	b2ac      	uxth	r4, r5
 801c678:	00ed      	lsls	r5, r5, #3
 801c67a:	1958      	adds	r0, r3, r5
 801c67c:	1c7b      	adds	r3, r7, #1
 801c67e:	d10b      	bne.n	801c698 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 801c680:	4601      	mov	r1, r0
 801c682:	9803      	ldr	r0, [sp, #12]
 801c684:	f7ff fb3c 	bl	801bd00 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c688:	4621      	mov	r1, r4
 801c68a:	9801      	ldr	r0, [sp, #4]
 801c68c:	f7ff fc8e 	bl	801bfac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c690:	e4b6      	b.n	801c000 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801c692:	464f      	mov	r7, r9
 801c694:	4635      	mov	r5, r6
 801c696:	e7ed      	b.n	801c674 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 801c698:	9b01      	ldr	r3, [sp, #4]
 801c69a:	00ff      	lsls	r7, r7, #3
 801c69c:	445d      	add	r5, fp
 801c69e:	19d9      	adds	r1, r3, r7
 801c6a0:	445f      	add	r7, fp
 801c6a2:	f7ff fb2d 	bl	801bd00 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c6a6:	9b03      	ldr	r3, [sp, #12]
 801c6a8:	cb03      	ldmia	r3!, {r0, r1}
 801c6aa:	9b03      	ldr	r3, [sp, #12]
 801c6ac:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 801c6b0:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 801c6b4:	f855 0fac 	ldr.w	r0, [r5, #172]!
 801c6b8:	6869      	ldr	r1, [r5, #4]
 801c6ba:	c303      	stmia	r3!, {r0, r1}
 801c6bc:	e7e4      	b.n	801c688 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 801c6be:	bf00      	nop

0801c6c0 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801c6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6c4:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 801c6c8:	b09b      	sub	sp, #108	@ 0x6c
 801c6ca:	4604      	mov	r4, r0
 801c6cc:	4630      	mov	r0, r6
 801c6ce:	f7fb f836 	bl	801773e <_ZNK8touchgfx4Rect7isEmptyEv>
 801c6d2:	4605      	mov	r5, r0
 801c6d4:	b948      	cbnz	r0, 801c6ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 801c6d6:	6823      	ldr	r3, [r4, #0]
 801c6d8:	4620      	mov	r0, r4
 801c6da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c6dc:	e896 0006 	ldmia.w	r6, {r1, r2}
 801c6e0:	4798      	blx	r3
 801c6e2:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 801c6e6:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 801c6ea:	4bc5      	ldr	r3, [pc, #788]	@ (801ca00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 801c6ec:	681b      	ldr	r3, [r3, #0]
 801c6ee:	2b00      	cmp	r3, #0
 801c6f0:	d03f      	beq.n	801c772 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801c6f2:	4dc4      	ldr	r5, [pc, #784]	@ (801ca04 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 801c6f4:	4628      	mov	r0, r5
 801c6f6:	f7fb f822 	bl	801773e <_ZNK8touchgfx4Rect7isEmptyEv>
 801c6fa:	4606      	mov	r6, r0
 801c6fc:	2800      	cmp	r0, #0
 801c6fe:	d138      	bne.n	801c772 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801c700:	4628      	mov	r0, r5
 801c702:	f7ff f99b 	bl	801ba3c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801c706:	6823      	ldr	r3, [r4, #0]
 801c708:	6829      	ldr	r1, [r5, #0]
 801c70a:	4620      	mov	r0, r4
 801c70c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c70e:	686a      	ldr	r2, [r5, #4]
 801c710:	4798      	blx	r3
 801c712:	802e      	strh	r6, [r5, #0]
 801c714:	806e      	strh	r6, [r5, #2]
 801c716:	80ae      	strh	r6, [r5, #4]
 801c718:	80ee      	strh	r6, [r5, #6]
 801c71a:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 801c71e:	4dba      	ldr	r5, [pc, #744]	@ (801ca08 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 801c720:	4640      	mov	r0, r8
 801c722:	f7ff fbe7 	bl	801bef4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801c726:	882e      	ldrh	r6, [r5, #0]
 801c728:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 801c72c:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 801c730:	4633      	mov	r3, r6
 801c732:	42bb      	cmp	r3, r7
 801c734:	d224      	bcs.n	801c780 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801c736:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 801c73a:	2907      	cmp	r1, #7
 801c73c:	d816      	bhi.n	801c76c <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 801c73e:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801c742:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 801c746:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 801c74a:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801c74e:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801c752:	1c4a      	adds	r2, r1, #1
 801c754:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 801c758:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 801c75c:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 801c760:	f8a2 a002 	strh.w	sl, [r2, #2]
 801c764:	f8a2 e004 	strh.w	lr, [r2, #4]
 801c768:	f8a2 c006 	strh.w	ip, [r2, #6]
 801c76c:	3301      	adds	r3, #1
 801c76e:	b29b      	uxth	r3, r3
 801c770:	e7df      	b.n	801c732 <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 801c772:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801c776:	2b00      	cmp	r3, #0
 801c778:	d1cf      	bne.n	801c71a <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 801c77a:	b01b      	add	sp, #108	@ 0x6c
 801c77c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c780:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 801c784:	42b3      	cmp	r3, r6
 801c786:	d90c      	bls.n	801c7a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 801c788:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801c78c:	6822      	ldr	r2, [r4, #0]
 801c78e:	3601      	adds	r6, #1
 801c790:	4620      	mov	r0, r4
 801c792:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 801c794:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 801c798:	b2b6      	uxth	r6, r6
 801c79a:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 801c79e:	47b8      	blx	r7
 801c7a0:	e7ee      	b.n	801c780 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801c7a2:	4a9a      	ldr	r2, [pc, #616]	@ (801ca0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801c7a4:	6813      	ldr	r3, [r2, #0]
 801c7a6:	4691      	mov	r9, r2
 801c7a8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801c7ac:	2b01      	cmp	r3, #1
 801c7ae:	f040 80e0 	bne.w	801c972 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 801c7b2:	8829      	ldrh	r1, [r5, #0]
 801c7b4:	2600      	movs	r6, #0
 801c7b6:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 801c7ba:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 801c7be:	33ae      	adds	r3, #174	@ 0xae
 801c7c0:	428f      	cmp	r7, r1
 801c7c2:	f103 0308 	add.w	r3, r3, #8
 801c7c6:	dd0a      	ble.n	801c7de <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 801c7c8:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 801c7cc:	3101      	adds	r1, #1
 801c7ce:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 801c7d2:	4402      	add	r2, r0
 801c7d4:	b212      	sxth	r2, r2
 801c7d6:	4296      	cmp	r6, r2
 801c7d8:	bfb8      	it	lt
 801c7da:	4616      	movlt	r6, r2
 801c7dc:	e7f0      	b.n	801c7c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 801c7de:	4b8c      	ldr	r3, [pc, #560]	@ (801ca10 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801c7e0:	f8df 9228 	ldr.w	r9, [pc, #552]	@ 801ca0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 801c7e4:	881b      	ldrh	r3, [r3, #0]
 801c7e6:	2b0f      	cmp	r3, #15
 801c7e8:	bf8c      	ite	hi
 801c7ea:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 801c7ee:	f04f 0b01 	movls.w	fp, #1
 801c7f2:	2300      	movs	r3, #0
 801c7f4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801c7f8:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 801c7fc:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 801c800:	4b82      	ldr	r3, [pc, #520]	@ (801ca0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801c802:	4438      	add	r0, r7
 801c804:	b207      	sxth	r7, r0
 801c806:	6818      	ldr	r0, [r3, #0]
 801c808:	42b7      	cmp	r7, r6
 801c80a:	6803      	ldr	r3, [r0, #0]
 801c80c:	f280 8083 	bge.w	801c916 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 801c810:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801c814:	4798      	blx	r3
 801c816:	eb07 030b 	add.w	r3, r7, fp
 801c81a:	4298      	cmp	r0, r3
 801c81c:	da07      	bge.n	801c82e <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801c81e:	42b0      	cmp	r0, r6
 801c820:	da05      	bge.n	801c82e <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801c822:	4287      	cmp	r7, r0
 801c824:	dd6c      	ble.n	801c900 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801c826:	2f00      	cmp	r7, #0
 801c828:	dd6a      	ble.n	801c900 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801c82a:	4630      	mov	r0, r6
 801c82c:	e004      	b.n	801c838 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 801c82e:	4287      	cmp	r7, r0
 801c830:	dcfb      	bgt.n	801c82a <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 801c832:	42b0      	cmp	r0, r6
 801c834:	bfa8      	it	ge
 801c836:	4630      	movge	r0, r6
 801c838:	4b76      	ldr	r3, [pc, #472]	@ (801ca14 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801c83a:	1bc0      	subs	r0, r0, r7
 801c83c:	2200      	movs	r2, #0
 801c83e:	f8ad 7016 	strh.w	r7, [sp, #22]
 801c842:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c846:	882f      	ldrh	r7, [r5, #0]
 801c848:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c84c:	f8ad 3018 	strh.w	r3, [sp, #24]
 801c850:	f8ad 001a 	strh.w	r0, [sp, #26]
 801c854:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801c858:	42bb      	cmp	r3, r7
 801c85a:	d9cd      	bls.n	801c7f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 801c85c:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801c860:	ab07      	add	r3, sp, #28
 801c862:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801c866:	6851      	ldr	r1, [r2, #4]
 801c868:	c303      	stmia	r3!, {r0, r1}
 801c86a:	a905      	add	r1, sp, #20
 801c86c:	a807      	add	r0, sp, #28
 801c86e:	f7ff f9af 	bl	801bbd0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c872:	2800      	cmp	r0, #0
 801c874:	d04c      	beq.n	801c910 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801c876:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801c87a:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801c87e:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801c882:	4686      	mov	lr, r0
 801c884:	4290      	cmp	r0, r2
 801c886:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801c88a:	4450      	add	r0, sl
 801c88c:	f8bd a018 	ldrh.w	sl, [sp, #24]
 801c890:	bfb8      	it	lt
 801c892:	4696      	movlt	lr, r2
 801c894:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801c898:	4452      	add	r2, sl
 801c89a:	b280      	uxth	r0, r0
 801c89c:	4299      	cmp	r1, r3
 801c89e:	468c      	mov	ip, r1
 801c8a0:	b292      	uxth	r2, r2
 801c8a2:	9302      	str	r3, [sp, #8]
 801c8a4:	bfb8      	it	lt
 801c8a6:	469c      	movlt	ip, r3
 801c8a8:	b203      	sxth	r3, r0
 801c8aa:	fa0f fa82 	sxth.w	sl, r2
 801c8ae:	f8ad e01c 	strh.w	lr, [sp, #28]
 801c8b2:	f8ad c01e 	strh.w	ip, [sp, #30]
 801c8b6:	4553      	cmp	r3, sl
 801c8b8:	bfb8      	it	lt
 801c8ba:	4602      	movlt	r2, r0
 801c8bc:	9b02      	ldr	r3, [sp, #8]
 801c8be:	eba2 020e 	sub.w	r2, r2, lr
 801c8c2:	f8ad 2020 	strh.w	r2, [sp, #32]
 801c8c6:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 801c8ca:	4411      	add	r1, r2
 801c8cc:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801c8d0:	4413      	add	r3, r2
 801c8d2:	b289      	uxth	r1, r1
 801c8d4:	b29b      	uxth	r3, r3
 801c8d6:	b208      	sxth	r0, r1
 801c8d8:	b21a      	sxth	r2, r3
 801c8da:	4290      	cmp	r0, r2
 801c8dc:	bfb8      	it	lt
 801c8de:	460b      	movlt	r3, r1
 801c8e0:	eba3 030c 	sub.w	r3, r3, ip
 801c8e4:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801c8e8:	a807      	add	r0, sp, #28
 801c8ea:	f7fa ff28 	bl	801773e <_ZNK8touchgfx4Rect7isEmptyEv>
 801c8ee:	b920      	cbnz	r0, 801c8fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 801c8f0:	6823      	ldr	r3, [r4, #0]
 801c8f2:	a907      	add	r1, sp, #28
 801c8f4:	4620      	mov	r0, r4
 801c8f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801c8f8:	4798      	blx	r3
 801c8fa:	3701      	adds	r7, #1
 801c8fc:	b2bf      	uxth	r7, r7
 801c8fe:	e7a9      	b.n	801c854 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 801c900:	f8d9 0000 	ldr.w	r0, [r9]
 801c904:	2101      	movs	r1, #1
 801c906:	6803      	ldr	r3, [r0, #0]
 801c908:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801c90c:	4798      	blx	r3
 801c90e:	e773      	b.n	801c7f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 801c910:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801c914:	e7e8      	b.n	801c8e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801c916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c918:	4798      	blx	r3
 801c91a:	4b3f      	ldr	r3, [pc, #252]	@ (801ca18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801c91c:	781b      	ldrb	r3, [r3, #0]
 801c91e:	2b00      	cmp	r3, #0
 801c920:	f43f af2b 	beq.w	801c77a <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801c924:	2300      	movs	r3, #0
 801c926:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 801c92a:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 801c92e:	882b      	ldrh	r3, [r5, #0]
 801c930:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 801c934:	42ab      	cmp	r3, r5
 801c936:	f4bf af20 	bcs.w	801c77a <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801c93a:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 801c93e:	2907      	cmp	r1, #7
 801c940:	d814      	bhi.n	801c96c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 801c942:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 801c946:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 801c94a:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 801c94e:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 801c952:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 801c956:	1c4a      	adds	r2, r1, #1
 801c958:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 801c95c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801c960:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 801c964:	f8a2 c002 	strh.w	ip, [r2, #2]
 801c968:	8097      	strh	r7, [r2, #4]
 801c96a:	80d6      	strh	r6, [r2, #6]
 801c96c:	3301      	adds	r3, #1
 801c96e:	b29b      	uxth	r3, r3
 801c970:	e7e0      	b.n	801c934 <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 801c972:	2b02      	cmp	r3, #2
 801c974:	f040 8133 	bne.w	801cbde <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 801c978:	4b28      	ldr	r3, [pc, #160]	@ (801ca1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801c97a:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 801c97e:	781b      	ldrb	r3, [r3, #0]
 801c980:	2b01      	cmp	r3, #1
 801c982:	f000 8098 	beq.w	801cab6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801c986:	882a      	ldrh	r2, [r5, #0]
 801c988:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 801c98c:	3201      	adds	r2, #1
 801c98e:	b292      	uxth	r2, r2
 801c990:	2900      	cmp	r1, #0
 801c992:	d0c2      	beq.n	801c91a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801c994:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 801c998:	4694      	mov	ip, r2
 801c99a:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 801c99e:	f04f 0900 	mov.w	r9, #0
 801c9a2:	441e      	add	r6, r3
 801c9a4:	b236      	sxth	r6, r6
 801c9a6:	fa1f f38c 	uxth.w	r3, ip
 801c9aa:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 801c9ae:	4299      	cmp	r1, r3
 801c9b0:	f240 80be 	bls.w	801cb30 <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 801c9b4:	4427      	add	r7, r4
 801c9b6:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 801c9ba:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 801c9be:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 801c9c2:	4283      	cmp	r3, r0
 801c9c4:	f340 80a0 	ble.w	801cb08 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 801c9c8:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 801c9cc:	46e1      	mov	r9, ip
 801c9ce:	4406      	add	r6, r0
 801c9d0:	b236      	sxth	r6, r6
 801c9d2:	429e      	cmp	r6, r3
 801c9d4:	bfa8      	it	ge
 801c9d6:	461e      	movge	r6, r3
 801c9d8:	f10c 0c01 	add.w	ip, ip, #1
 801c9dc:	e7e3      	b.n	801c9a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 801c9de:	d10a      	bne.n	801c9f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 801c9e0:	4562      	cmp	r2, ip
 801c9e2:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 801c9e6:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 801c9ea:	bfb8      	it	lt
 801c9ec:	4662      	movlt	r2, ip
 801c9ee:	4288      	cmp	r0, r1
 801c9f0:	bfb8      	it	lt
 801c9f2:	461f      	movlt	r7, r3
 801c9f4:	e086      	b.n	801cb04 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 801c9f6:	428a      	cmp	r2, r1
 801c9f8:	bfb8      	it	lt
 801c9fa:	460a      	movlt	r2, r1
 801c9fc:	e082      	b.n	801cb04 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 801c9fe:	bf00      	nop
 801ca00:	24013b98 	.word	0x24013b98
 801ca04:	24013ba4 	.word	0x24013ba4
 801ca08:	24000020 	.word	0x24000020
 801ca0c:	24013b58 	.word	0x24013b58
 801ca10:	24013b4e 	.word	0x24013b4e
 801ca14:	24013b4c 	.word	0x24013b4c
 801ca18:	24013b56 	.word	0x24013b56
 801ca1c:	24013b50 	.word	0x24013b50
 801ca20:	19a1      	adds	r1, r4, r6
 801ca22:	ab07      	add	r3, sp, #28
 801ca24:	f851 0fac 	ldr.w	r0, [r1, #172]!
 801ca28:	6849      	ldr	r1, [r1, #4]
 801ca2a:	c303      	stmia	r3!, {r0, r1}
 801ca2c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801ca30:	a807      	add	r0, sp, #28
 801ca32:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801ca36:	2b13      	cmp	r3, #19
 801ca38:	440b      	add	r3, r1
 801ca3a:	bfd8      	it	le
 801ca3c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801ca40:	1a9b      	subs	r3, r3, r2
 801ca42:	f8ad 201c 	strh.w	r2, [sp, #28]
 801ca46:	f8ad 3020 	strh.w	r3, [sp, #32]
 801ca4a:	f7ff f811 	bl	801ba70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ca4e:	a807      	add	r0, sp, #28
 801ca50:	f7fa fe75 	bl	801773e <_ZNK8touchgfx4Rect7isEmptyEv>
 801ca54:	bb78      	cbnz	r0, 801cab6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801ca56:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 801ca5a:	4426      	add	r6, r4
 801ca5c:	f8d9 0000 	ldr.w	r0, [r9]
 801ca60:	f1bc 0f14 	cmp.w	ip, #20
 801ca64:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801ca68:	f8d0 e000 	ldr.w	lr, [r0]
 801ca6c:	bfa8      	it	ge
 801ca6e:	f04f 0c14 	movge.w	ip, #20
 801ca72:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801ca76:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801ca7a:	fa1f fc8c 	uxth.w	ip, ip
 801ca7e:	f8cd c000 	str.w	ip, [sp]
 801ca82:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 801ca86:	47d8      	blx	fp
 801ca88:	4683      	mov	fp, r0
 801ca8a:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801ca8e:	a807      	add	r0, sp, #28
 801ca90:	f7fe ffd4 	bl	801ba3c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801ca94:	6823      	ldr	r3, [r4, #0]
 801ca96:	4620      	mov	r0, r4
 801ca98:	a907      	add	r1, sp, #28
 801ca9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801ca9c:	4798      	blx	r3
 801ca9e:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 801caa2:	eba0 000b 	sub.w	r0, r0, fp
 801caa6:	b200      	sxth	r0, r0
 801caa8:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 801caac:	b918      	cbnz	r0, 801cab6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801caae:	b2b9      	uxth	r1, r7
 801cab0:	4650      	mov	r0, sl
 801cab2:	f7ff fa7b 	bl	801bfac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801cab6:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 801caba:	f1bb 0f00 	cmp.w	fp, #0
 801cabe:	f43f af2c 	beq.w	801c91a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801cac2:	882b      	ldrh	r3, [r5, #0]
 801cac4:	2700      	movs	r7, #0
 801cac6:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 801caca:	3301      	adds	r3, #1
 801cacc:	b29b      	uxth	r3, r3
 801cace:	b299      	uxth	r1, r3
 801cad0:	00fe      	lsls	r6, r7, #3
 801cad2:	458b      	cmp	fp, r1
 801cad4:	d9a4      	bls.n	801ca20 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 801cad6:	4426      	add	r6, r4
 801cad8:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 801cadc:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 801cae0:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 801cae4:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 801cae8:	4408      	add	r0, r1
 801caea:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 801caee:	4461      	add	r1, ip
 801caf0:	b200      	sxth	r0, r0
 801caf2:	b209      	sxth	r1, r1
 801caf4:	4288      	cmp	r0, r1
 801caf6:	f6bf af72 	bge.w	801c9de <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 801cafa:	4584      	cmp	ip, r0
 801cafc:	4662      	mov	r2, ip
 801cafe:	461f      	mov	r7, r3
 801cb00:	bfb8      	it	lt
 801cb02:	4602      	movlt	r2, r0
 801cb04:	3301      	adds	r3, #1
 801cb06:	e7e2      	b.n	801cace <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 801cb08:	d10e      	bne.n	801cb28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 801cb0a:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 801cb0e:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 801cb12:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 801cb16:	4473      	add	r3, lr
 801cb18:	b21b      	sxth	r3, r3
 801cb1a:	429e      	cmp	r6, r3
 801cb1c:	bfa8      	it	ge
 801cb1e:	461e      	movge	r6, r3
 801cb20:	4287      	cmp	r7, r0
 801cb22:	bfb8      	it	lt
 801cb24:	46e1      	movlt	r9, ip
 801cb26:	e757      	b.n	801c9d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801cb28:	4286      	cmp	r6, r0
 801cb2a:	bfa8      	it	ge
 801cb2c:	4606      	movge	r6, r0
 801cb2e:	e753      	b.n	801c9d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801cb30:	eb0a 0007 	add.w	r0, sl, r7
 801cb34:	4427      	add	r7, r4
 801cb36:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 801cb3a:	f1bb 0f13 	cmp.w	fp, #19
 801cb3e:	bfdc      	itt	le
 801cb40:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 801cb44:	445e      	addle	r6, fp
 801cb46:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801cb4a:	bfd8      	it	le
 801cb4c:	b236      	sxthle	r6, r6
 801cb4e:	f7fa fdf6 	bl	801773e <_ZNK8touchgfx4Rect7isEmptyEv>
 801cb52:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801cb56:	2800      	cmp	r0, #0
 801cb58:	f47f af1a 	bne.w	801c990 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 801cb5c:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 801cb60:	fa1f fb8b 	uxth.w	fp, fp
 801cb64:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801cb68:	1ab6      	subs	r6, r6, r2
 801cb6a:	4829      	ldr	r0, [pc, #164]	@ (801cc10 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 801cb6c:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 801cb70:	2e14      	cmp	r6, #20
 801cb72:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 801cb76:	6800      	ldr	r0, [r0, #0]
 801cb78:	bfa8      	it	ge
 801cb7a:	2614      	movge	r6, #20
 801cb7c:	f8ad 101c 	strh.w	r1, [sp, #28]
 801cb80:	f8ad 201e 	strh.w	r2, [sp, #30]
 801cb84:	b289      	uxth	r1, r1
 801cb86:	f8ad 3020 	strh.w	r3, [sp, #32]
 801cb8a:	b2b6      	uxth	r6, r6
 801cb8c:	f8d0 c000 	ldr.w	ip, [r0]
 801cb90:	b292      	uxth	r2, r2
 801cb92:	455e      	cmp	r6, fp
 801cb94:	bf94      	ite	ls
 801cb96:	9600      	strls	r6, [sp, #0]
 801cb98:	f8cd b000 	strhi.w	fp, [sp]
 801cb9c:	b29b      	uxth	r3, r3
 801cb9e:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 801cba2:	47b0      	blx	r6
 801cba4:	6823      	ldr	r3, [r4, #0]
 801cba6:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801cbaa:	a907      	add	r1, sp, #28
 801cbac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801cbae:	4620      	mov	r0, r4
 801cbb0:	4798      	blx	r3
 801cbb2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 801cbb6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801cbba:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 801cbbe:	1a5b      	subs	r3, r3, r1
 801cbc0:	440a      	add	r2, r1
 801cbc2:	b21b      	sxth	r3, r3
 801cbc4:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 801cbc8:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 801cbcc:	2b00      	cmp	r3, #0
 801cbce:	f47f aeda 	bne.w	801c986 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801cbd2:	fa1f f189 	uxth.w	r1, r9
 801cbd6:	4650      	mov	r0, sl
 801cbd8:	f7ff f9e8 	bl	801bfac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801cbdc:	e6d3      	b.n	801c986 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801cbde:	882e      	ldrh	r6, [r5, #0]
 801cbe0:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801cbe4:	42b3      	cmp	r3, r6
 801cbe6:	f67f ae98 	bls.w	801c91a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801cbea:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 801cbee:	ab07      	add	r3, sp, #28
 801cbf0:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801cbf4:	6851      	ldr	r1, [r2, #4]
 801cbf6:	c303      	stmia	r3!, {r0, r1}
 801cbf8:	a807      	add	r0, sp, #28
 801cbfa:	f7fa fda0 	bl	801773e <_ZNK8touchgfx4Rect7isEmptyEv>
 801cbfe:	b920      	cbnz	r0, 801cc0a <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 801cc00:	6823      	ldr	r3, [r4, #0]
 801cc02:	a907      	add	r1, sp, #28
 801cc04:	4620      	mov	r0, r4
 801cc06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801cc08:	4798      	blx	r3
 801cc0a:	3601      	adds	r6, #1
 801cc0c:	b2b6      	uxth	r6, r6
 801cc0e:	e7e7      	b.n	801cbe0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 801cc10:	24013b58 	.word	0x24013b58

0801cc14 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801cc14:	4b03      	ldr	r3, [pc, #12]	@ (801cc24 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801cc16:	2200      	movs	r2, #0
 801cc18:	801a      	strh	r2, [r3, #0]
 801cc1a:	805a      	strh	r2, [r3, #2]
 801cc1c:	809a      	strh	r2, [r3, #4]
 801cc1e:	80da      	strh	r2, [r3, #6]
 801cc20:	4770      	bx	lr
 801cc22:	bf00      	nop
 801cc24:	24013ba4 	.word	0x24013ba4

0801cc28 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801cc28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc2c:	b09d      	sub	sp, #116	@ 0x74
 801cc2e:	4606      	mov	r6, r0
 801cc30:	4614      	mov	r4, r2
 801cc32:	468a      	mov	sl, r1
 801cc34:	a803      	add	r0, sp, #12
 801cc36:	461d      	mov	r5, r3
 801cc38:	f001 f88e 	bl	801dd58 <_ZN8touchgfx12TextProviderC1Ev>
 801cc3c:	6833      	ldr	r3, [r6, #0]
 801cc3e:	4630      	mov	r0, r6
 801cc40:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 801cc44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801cc46:	4798      	blx	r3
 801cc48:	6833      	ldr	r3, [r6, #0]
 801cc4a:	4607      	mov	r7, r0
 801cc4c:	4630      	mov	r0, r6
 801cc4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801cc50:	4798      	blx	r3
 801cc52:	462a      	mov	r2, r5
 801cc54:	2500      	movs	r5, #0
 801cc56:	4621      	mov	r1, r4
 801cc58:	9000      	str	r0, [sp, #0]
 801cc5a:	463b      	mov	r3, r7
 801cc5c:	462c      	mov	r4, r5
 801cc5e:	46a9      	mov	r9, r5
 801cc60:	46a8      	mov	r8, r5
 801cc62:	a803      	add	r0, sp, #12
 801cc64:	f001 f8cb 	bl	801ddfe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801cc68:	2300      	movs	r3, #0
 801cc6a:	9302      	str	r3, [sp, #8]
 801cc6c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801cc70:	429c      	cmp	r4, r3
 801cc72:	d002      	beq.n	801cc7a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801cc74:	455c      	cmp	r4, fp
 801cc76:	bf18      	it	ne
 801cc78:	4625      	movne	r5, r4
 801cc7a:	ab02      	add	r3, sp, #8
 801cc7c:	4632      	mov	r2, r6
 801cc7e:	4651      	mov	r1, sl
 801cc80:	a803      	add	r0, sp, #12
 801cc82:	f001 fbb1 	bl	801e3e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801cc86:	4604      	mov	r4, r0
 801cc88:	b108      	cbz	r0, 801cc8e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801cc8a:	280a      	cmp	r0, #10
 801cc8c:	d10a      	bne.n	801cca4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801cc8e:	45c1      	cmp	r9, r8
 801cc90:	bf38      	it	cc
 801cc92:	46c1      	movcc	r9, r8
 801cc94:	f04f 0800 	mov.w	r8, #0
 801cc98:	2c00      	cmp	r4, #0
 801cc9a:	d1e5      	bne.n	801cc68 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801cc9c:	4648      	mov	r0, r9
 801cc9e:	b01d      	add	sp, #116	@ 0x74
 801cca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cca4:	9a02      	ldr	r2, [sp, #8]
 801cca6:	2a00      	cmp	r2, #0
 801cca8:	d0de      	beq.n	801cc68 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801ccaa:	7b57      	ldrb	r7, [r2, #13]
 801ccac:	4629      	mov	r1, r5
 801ccae:	6833      	ldr	r3, [r6, #0]
 801ccb0:	007f      	lsls	r7, r7, #1
 801ccb2:	8894      	ldrh	r4, [r2, #4]
 801ccb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ccb6:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 801ccba:	7a97      	ldrb	r7, [r2, #10]
 801ccbc:	4307      	orrs	r7, r0
 801ccbe:	4630      	mov	r0, r6
 801ccc0:	4798      	blx	r3
 801ccc2:	4438      	add	r0, r7
 801ccc4:	4480      	add	r8, r0
 801ccc6:	fa1f f888 	uxth.w	r8, r8
 801ccca:	e7e5      	b.n	801cc98 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801cccc <_ZNK8touchgfx4Font12getCharWidthEt>:
 801cccc:	b508      	push	{r3, lr}
 801ccce:	6803      	ldr	r3, [r0, #0]
 801ccd0:	68db      	ldr	r3, [r3, #12]
 801ccd2:	4798      	blx	r3
 801ccd4:	b128      	cbz	r0, 801cce2 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801ccd6:	7b43      	ldrb	r3, [r0, #13]
 801ccd8:	7a80      	ldrb	r0, [r0, #10]
 801ccda:	005b      	lsls	r3, r3, #1
 801ccdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801cce0:	4318      	orrs	r0, r3
 801cce2:	bd08      	pop	{r3, pc}

0801cce4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801cce4:	b40e      	push	{r1, r2, r3}
 801cce6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cce8:	b09e      	sub	sp, #120	@ 0x78
 801ccea:	4605      	mov	r5, r0
 801ccec:	ab23      	add	r3, sp, #140	@ 0x8c
 801ccee:	a805      	add	r0, sp, #20
 801ccf0:	f853 4b04 	ldr.w	r4, [r3], #4
 801ccf4:	9303      	str	r3, [sp, #12]
 801ccf6:	f001 f82f 	bl	801dd58 <_ZN8touchgfx12TextProviderC1Ev>
 801ccfa:	682b      	ldr	r3, [r5, #0]
 801ccfc:	4628      	mov	r0, r5
 801ccfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801cd00:	4798      	blx	r3
 801cd02:	682b      	ldr	r3, [r5, #0]
 801cd04:	4606      	mov	r6, r0
 801cd06:	4628      	mov	r0, r5
 801cd08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801cd0a:	4798      	blx	r3
 801cd0c:	4633      	mov	r3, r6
 801cd0e:	4621      	mov	r1, r4
 801cd10:	ae1e      	add	r6, sp, #120	@ 0x78
 801cd12:	2400      	movs	r4, #0
 801cd14:	9000      	str	r0, [sp, #0]
 801cd16:	9a03      	ldr	r2, [sp, #12]
 801cd18:	a805      	add	r0, sp, #20
 801cd1a:	f001 f870 	bl	801ddfe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801cd1e:	f846 4d68 	str.w	r4, [r6, #-104]!
 801cd22:	462a      	mov	r2, r5
 801cd24:	4633      	mov	r3, r6
 801cd26:	4621      	mov	r1, r4
 801cd28:	a805      	add	r0, sp, #20
 801cd2a:	f001 fb5d 	bl	801e3e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801cd2e:	b300      	cbz	r0, 801cd72 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801cd30:	280a      	cmp	r0, #10
 801cd32:	d01a      	beq.n	801cd6a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801cd34:	9f04      	ldr	r7, [sp, #16]
 801cd36:	b1c7      	cbz	r7, 801cd6a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801cd38:	7b78      	ldrb	r0, [r7, #13]
 801cd3a:	7a3b      	ldrb	r3, [r7, #8]
 801cd3c:	00c1      	lsls	r1, r0, #3
 801cd3e:	88ea      	ldrh	r2, [r5, #6]
 801cd40:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801cd44:	4319      	orrs	r1, r3
 801cd46:	0643      	lsls	r3, r0, #25
 801cd48:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801cd4c:	bf48      	it	mi
 801cd4e:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 801cd52:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801cd56:	bf48      	it	mi
 801cd58:	b219      	sxthmi	r1, r3
 801cd5a:	79fb      	ldrb	r3, [r7, #7]
 801cd5c:	4303      	orrs	r3, r0
 801cd5e:	4413      	add	r3, r2
 801cd60:	1a5b      	subs	r3, r3, r1
 801cd62:	b21b      	sxth	r3, r3
 801cd64:	429c      	cmp	r4, r3
 801cd66:	bfb8      	it	lt
 801cd68:	461c      	movlt	r4, r3
 801cd6a:	4633      	mov	r3, r6
 801cd6c:	462a      	mov	r2, r5
 801cd6e:	2100      	movs	r1, #0
 801cd70:	e7da      	b.n	801cd28 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801cd72:	b2a0      	uxth	r0, r4
 801cd74:	b01e      	add	sp, #120	@ 0x78
 801cd76:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801cd7a:	b003      	add	sp, #12
 801cd7c:	4770      	bx	lr

0801cd7e <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801cd7e:	7a43      	ldrb	r3, [r0, #9]
 801cd80:	8880      	ldrh	r0, [r0, #4]
 801cd82:	4418      	add	r0, r3
 801cd84:	b280      	uxth	r0, r0
 801cd86:	4770      	bx	lr

0801cd88 <_ZNK8touchgfx4Font13getFontHeightEv>:
 801cd88:	6803      	ldr	r3, [r0, #0]
 801cd8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cd8c:	4718      	bx	r3

0801cd8e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801cd8e:	b40e      	push	{r1, r2, r3}
 801cd90:	b570      	push	{r4, r5, r6, lr}
 801cd92:	b09d      	sub	sp, #116	@ 0x74
 801cd94:	4604      	mov	r4, r0
 801cd96:	ab21      	add	r3, sp, #132	@ 0x84
 801cd98:	a803      	add	r0, sp, #12
 801cd9a:	f853 5b04 	ldr.w	r5, [r3], #4
 801cd9e:	9302      	str	r3, [sp, #8]
 801cda0:	f000 ffda 	bl	801dd58 <_ZN8touchgfx12TextProviderC1Ev>
 801cda4:	6823      	ldr	r3, [r4, #0]
 801cda6:	4620      	mov	r0, r4
 801cda8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801cdaa:	4798      	blx	r3
 801cdac:	6823      	ldr	r3, [r4, #0]
 801cdae:	4606      	mov	r6, r0
 801cdb0:	4620      	mov	r0, r4
 801cdb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801cdb4:	2401      	movs	r4, #1
 801cdb6:	4798      	blx	r3
 801cdb8:	4633      	mov	r3, r6
 801cdba:	9000      	str	r0, [sp, #0]
 801cdbc:	4629      	mov	r1, r5
 801cdbe:	9a02      	ldr	r2, [sp, #8]
 801cdc0:	a803      	add	r0, sp, #12
 801cdc2:	f001 f81c 	bl	801ddfe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801cdc6:	a803      	add	r0, sp, #12
 801cdc8:	f001 fb8e 	bl	801e4e8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801cdcc:	b2a3      	uxth	r3, r4
 801cdce:	b138      	cbz	r0, 801cde0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801cdd0:	280a      	cmp	r0, #10
 801cdd2:	a803      	add	r0, sp, #12
 801cdd4:	bf04      	itt	eq
 801cdd6:	3301      	addeq	r3, #1
 801cdd8:	b21c      	sxtheq	r4, r3
 801cdda:	f001 fb85 	bl	801e4e8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801cdde:	e7f5      	b.n	801cdcc <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801cde0:	4618      	mov	r0, r3
 801cde2:	b01d      	add	sp, #116	@ 0x74
 801cde4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cde8:	b003      	add	sp, #12
 801cdea:	4770      	bx	lr

0801cdec <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801cdec:	b40e      	push	{r1, r2, r3}
 801cdee:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cdf0:	b09e      	sub	sp, #120	@ 0x78
 801cdf2:	4604      	mov	r4, r0
 801cdf4:	ab23      	add	r3, sp, #140	@ 0x8c
 801cdf6:	a805      	add	r0, sp, #20
 801cdf8:	f853 5b04 	ldr.w	r5, [r3], #4
 801cdfc:	9303      	str	r3, [sp, #12]
 801cdfe:	f000 ffab 	bl	801dd58 <_ZN8touchgfx12TextProviderC1Ev>
 801ce02:	6823      	ldr	r3, [r4, #0]
 801ce04:	4620      	mov	r0, r4
 801ce06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ce08:	4798      	blx	r3
 801ce0a:	6823      	ldr	r3, [r4, #0]
 801ce0c:	4606      	mov	r6, r0
 801ce0e:	4620      	mov	r0, r4
 801ce10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ce12:	4798      	blx	r3
 801ce14:	4633      	mov	r3, r6
 801ce16:	4629      	mov	r1, r5
 801ce18:	9000      	str	r0, [sp, #0]
 801ce1a:	9a03      	ldr	r2, [sp, #12]
 801ce1c:	a805      	add	r0, sp, #20
 801ce1e:	f000 ffee 	bl	801ddfe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801ce22:	ad1e      	add	r5, sp, #120	@ 0x78
 801ce24:	2100      	movs	r1, #0
 801ce26:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 801ce2a:	4622      	mov	r2, r4
 801ce2c:	a805      	add	r0, sp, #20
 801ce2e:	f845 1d68 	str.w	r1, [r5, #-104]!
 801ce32:	462b      	mov	r3, r5
 801ce34:	f001 fad8 	bl	801e3e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ce38:	b1d8      	cbz	r0, 801ce72 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801ce3a:	280a      	cmp	r0, #10
 801ce3c:	d012      	beq.n	801ce64 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801ce3e:	9804      	ldr	r0, [sp, #16]
 801ce40:	b180      	cbz	r0, 801ce64 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801ce42:	7b47      	ldrb	r7, [r0, #13]
 801ce44:	88e2      	ldrh	r2, [r4, #6]
 801ce46:	00fb      	lsls	r3, r7, #3
 801ce48:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801ce4c:	7a03      	ldrb	r3, [r0, #8]
 801ce4e:	430b      	orrs	r3, r1
 801ce50:	0679      	lsls	r1, r7, #25
 801ce52:	bf44      	itt	mi
 801ce54:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801ce58:	b21b      	sxthmi	r3, r3
 801ce5a:	1ad3      	subs	r3, r2, r3
 801ce5c:	b21b      	sxth	r3, r3
 801ce5e:	429e      	cmp	r6, r3
 801ce60:	bfa8      	it	ge
 801ce62:	461e      	movge	r6, r3
 801ce64:	462b      	mov	r3, r5
 801ce66:	4622      	mov	r2, r4
 801ce68:	2100      	movs	r1, #0
 801ce6a:	a805      	add	r0, sp, #20
 801ce6c:	f001 fabc 	bl	801e3e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ce70:	e7e2      	b.n	801ce38 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801ce72:	4630      	mov	r0, r6
 801ce74:	b01e      	add	sp, #120	@ 0x78
 801ce76:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ce7a:	b003      	add	sp, #12
 801ce7c:	4770      	bx	lr

0801ce7e <_ZNK8touchgfx8Drawable10invalidateEv>:
 801ce7e:	b513      	push	{r0, r1, r4, lr}
 801ce80:	6803      	ldr	r3, [r0, #0]
 801ce82:	2400      	movs	r4, #0
 801ce84:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801ce88:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801ce8c:	f8ad 1004 	strh.w	r1, [sp, #4]
 801ce90:	4669      	mov	r1, sp
 801ce92:	691b      	ldr	r3, [r3, #16]
 801ce94:	9400      	str	r4, [sp, #0]
 801ce96:	f8ad 2006 	strh.w	r2, [sp, #6]
 801ce9a:	4798      	blx	r3
 801ce9c:	b002      	add	sp, #8
 801ce9e:	bd10      	pop	{r4, pc}

0801cea0 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801cea0:	b538      	push	{r3, r4, r5, lr}
 801cea2:	680b      	ldr	r3, [r1, #0]
 801cea4:	460c      	mov	r4, r1
 801cea6:	4605      	mov	r5, r0
 801cea8:	68db      	ldr	r3, [r3, #12]
 801ceaa:	4798      	blx	r3
 801ceac:	6823      	ldr	r3, [r4, #0]
 801ceae:	4620      	mov	r0, r4
 801ceb0:	4629      	mov	r1, r5
 801ceb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ceb4:	4798      	blx	r3
 801ceb6:	4628      	mov	r0, r5
 801ceb8:	bd38      	pop	{r3, r4, r5, pc}

0801ceba <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801ceba:	b410      	push	{r4}
 801cebc:	880a      	ldrh	r2, [r1, #0]
 801cebe:	8884      	ldrh	r4, [r0, #4]
 801cec0:	4422      	add	r2, r4
 801cec2:	800a      	strh	r2, [r1, #0]
 801cec4:	884a      	ldrh	r2, [r1, #2]
 801cec6:	88c4      	ldrh	r4, [r0, #6]
 801cec8:	4422      	add	r2, r4
 801ceca:	804a      	strh	r2, [r1, #2]
 801cecc:	6940      	ldr	r0, [r0, #20]
 801cece:	b120      	cbz	r0, 801ceda <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801ced0:	6803      	ldr	r3, [r0, #0]
 801ced2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ced6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ced8:	4718      	bx	r3
 801ceda:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cede:	4770      	bx	lr

0801cee0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801cee0:	b570      	push	{r4, r5, r6, lr}
 801cee2:	8882      	ldrh	r2, [r0, #4]
 801cee4:	460c      	mov	r4, r1
 801cee6:	880b      	ldrh	r3, [r1, #0]
 801cee8:	4605      	mov	r5, r0
 801ceea:	4413      	add	r3, r2
 801ceec:	800b      	strh	r3, [r1, #0]
 801ceee:	884b      	ldrh	r3, [r1, #2]
 801cef0:	88c2      	ldrh	r2, [r0, #6]
 801cef2:	4413      	add	r3, r2
 801cef4:	804b      	strh	r3, [r1, #2]
 801cef6:	1d01      	adds	r1, r0, #4
 801cef8:	4620      	mov	r0, r4
 801cefa:	f7fa fbdd 	bl	80176b8 <_ZN8touchgfx4RectaNERKS0_>
 801cefe:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801cf02:	2b00      	cmp	r3, #0
 801cf04:	dd0b      	ble.n	801cf1e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801cf06:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801cf0a:	2b00      	cmp	r3, #0
 801cf0c:	dd07      	ble.n	801cf1e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801cf0e:	6968      	ldr	r0, [r5, #20]
 801cf10:	b128      	cbz	r0, 801cf1e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801cf12:	6803      	ldr	r3, [r0, #0]
 801cf14:	4621      	mov	r1, r4
 801cf16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cf18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cf1c:	4718      	bx	r3
 801cf1e:	bd70      	pop	{r4, r5, r6, pc}

0801cf20 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801cf20:	b570      	push	{r4, r5, r6, lr}
 801cf22:	8882      	ldrh	r2, [r0, #4]
 801cf24:	460c      	mov	r4, r1
 801cf26:	880b      	ldrh	r3, [r1, #0]
 801cf28:	4605      	mov	r5, r0
 801cf2a:	4413      	add	r3, r2
 801cf2c:	800b      	strh	r3, [r1, #0]
 801cf2e:	884b      	ldrh	r3, [r1, #2]
 801cf30:	88c2      	ldrh	r2, [r0, #6]
 801cf32:	4413      	add	r3, r2
 801cf34:	804b      	strh	r3, [r1, #2]
 801cf36:	1d01      	adds	r1, r0, #4
 801cf38:	4620      	mov	r0, r4
 801cf3a:	f7fa fbbd 	bl	80176b8 <_ZN8touchgfx4RectaNERKS0_>
 801cf3e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801cf42:	2b00      	cmp	r3, #0
 801cf44:	dd19      	ble.n	801cf7a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801cf46:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801cf4a:	2b00      	cmp	r3, #0
 801cf4c:	dd15      	ble.n	801cf7a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801cf4e:	6968      	ldr	r0, [r5, #20]
 801cf50:	b128      	cbz	r0, 801cf5e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801cf52:	6803      	ldr	r3, [r0, #0]
 801cf54:	4621      	mov	r1, r4
 801cf56:	691b      	ldr	r3, [r3, #16]
 801cf58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cf5c:	4718      	bx	r3
 801cf5e:	4b07      	ldr	r3, [pc, #28]	@ (801cf7c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801cf60:	681b      	ldr	r3, [r3, #0]
 801cf62:	3304      	adds	r3, #4
 801cf64:	429d      	cmp	r5, r3
 801cf66:	d108      	bne.n	801cf7a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801cf68:	f7fe ff10 	bl	801bd8c <_ZN8touchgfx11Application11getInstanceEv>
 801cf6c:	6803      	ldr	r3, [r0, #0]
 801cf6e:	6821      	ldr	r1, [r4, #0]
 801cf70:	6862      	ldr	r2, [r4, #4]
 801cf72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801cf74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cf78:	4718      	bx	r3
 801cf7a:	bd70      	pop	{r4, r5, r6, pc}
 801cf7c:	24013b9c 	.word	0x24013b9c

0801cf80 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801cf80:	b570      	push	{r4, r5, r6, lr}
 801cf82:	4604      	mov	r4, r0
 801cf84:	4616      	mov	r6, r2
 801cf86:	460d      	mov	r5, r1
 801cf88:	b901      	cbnz	r1, 801cf8c <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801cf8a:	b192      	cbz	r2, 801cfb2 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801cf8c:	6823      	ldr	r3, [r4, #0]
 801cf8e:	4620      	mov	r0, r4
 801cf90:	699b      	ldr	r3, [r3, #24]
 801cf92:	4798      	blx	r3
 801cf94:	88e2      	ldrh	r2, [r4, #6]
 801cf96:	88a1      	ldrh	r1, [r4, #4]
 801cf98:	4620      	mov	r0, r4
 801cf9a:	4432      	add	r2, r6
 801cf9c:	4429      	add	r1, r5
 801cf9e:	b212      	sxth	r2, r2
 801cfa0:	b209      	sxth	r1, r1
 801cfa2:	f7f6 f9c6 	bl	8013332 <_ZN8touchgfx8Drawable5setXYEss>
 801cfa6:	6823      	ldr	r3, [r4, #0]
 801cfa8:	4620      	mov	r0, r4
 801cfaa:	699b      	ldr	r3, [r3, #24]
 801cfac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cfb0:	4718      	bx	r3
 801cfb2:	bd70      	pop	{r4, r5, r6, pc}

0801cfb4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801cfb4:	b510      	push	{r4, lr}
 801cfb6:	2300      	movs	r3, #0
 801cfb8:	4604      	mov	r4, r0
 801cfba:	4608      	mov	r0, r1
 801cfbc:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801cfc0:	8023      	strh	r3, [r4, #0]
 801cfc2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801cfc6:	8063      	strh	r3, [r4, #2]
 801cfc8:	6803      	ldr	r3, [r0, #0]
 801cfca:	80a1      	strh	r1, [r4, #4]
 801cfcc:	4621      	mov	r1, r4
 801cfce:	80e2      	strh	r2, [r4, #6]
 801cfd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cfd2:	4798      	blx	r3
 801cfd4:	4620      	mov	r0, r4
 801cfd6:	bd10      	pop	{r4, pc}

0801cfd8 <_ZN8touchgfx22VectorFontRendererImplC1Ev>:
 801cfd8:	4a04      	ldr	r2, [pc, #16]	@ (801cfec <_ZN8touchgfx22VectorFontRendererImplC1Ev+0x14>)
 801cfda:	6002      	str	r2, [r0, #0]
 801cfdc:	2200      	movs	r2, #0
 801cfde:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801cfe2:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801cfe6:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801cfea:	4770      	bx	lr
 801cfec:	0802cee4 	.word	0x0802cee4

0801cff0 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>:
 801cff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cff4:	4604      	mov	r4, r0
 801cff6:	b087      	sub	sp, #28
 801cff8:	4696      	mov	lr, r2
 801cffa:	6880      	ldr	r0, [r0, #8]
 801cffc:	8b22      	ldrh	r2, [r4, #24]
 801cffe:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801d002:	9105      	str	r1, [sp, #20]
 801d004:	1c51      	adds	r1, r2, #1
 801d006:	8321      	strh	r1, [r4, #24]
 801d008:	2101      	movs	r1, #1
 801d00a:	5481      	strb	r1, [r0, r2]
 801d00c:	4689      	mov	r9, r1
 801d00e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d012:	8b60      	ldrh	r0, [r4, #26]
 801d014:	ee06 2a90 	vmov	s13, r2
 801d018:	68e2      	ldr	r2, [r4, #12]
 801d01a:	1845      	adds	r5, r0, r1
 801d01c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d020:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 801d024:	8365      	strh	r5, [r4, #26]
 801d026:	edc2 6a00 	vstr	s13, [r2]
 801d02a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801d02e:	8b60      	ldrh	r0, [r4, #26]
 801d030:	ee07 2a10 	vmov	s14, r2
 801d034:	68e2      	ldr	r2, [r4, #12]
 801d036:	1845      	adds	r5, r0, r1
 801d038:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d03c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 801d040:	8365      	strh	r5, [r4, #26]
 801d042:	1d18      	adds	r0, r3, #4
 801d044:	460d      	mov	r5, r1
 801d046:	ed82 7a00 	vstr	s14, [r2]
 801d04a:	f8be 2000 	ldrh.w	r2, [lr]
 801d04e:	9203      	str	r2, [sp, #12]
 801d050:	2200      	movs	r2, #0
 801d052:	4613      	mov	r3, r2
 801d054:	4694      	mov	ip, r2
 801d056:	9201      	str	r2, [sp, #4]
 801d058:	9202      	str	r2, [sp, #8]
 801d05a:	f8b4 8018 	ldrh.w	r8, [r4, #24]
 801d05e:	9e05      	ldr	r6, [sp, #20]
 801d060:	f108 0701 	add.w	r7, r8, #1
 801d064:	f8d4 a008 	ldr.w	sl, [r4, #8]
 801d068:	428e      	cmp	r6, r1
 801d06a:	b2bf      	uxth	r7, r7
 801d06c:	eb0a 0b08 	add.w	fp, sl, r8
 801d070:	f340 80b6 	ble.w	801d1e0 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1f0>
 801d074:	9b03      	ldr	r3, [sp, #12]
 801d076:	f9b0 c000 	ldrsh.w	ip, [r0]
 801d07a:	fa43 fb05 	asr.w	fp, r3, r5
 801d07e:	f00b 0b01 	and.w	fp, fp, #1
 801d082:	fa5f f38b 	uxtb.w	r3, fp
 801d086:	9304      	str	r3, [sp, #16]
 801d088:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801d08c:	f1bb 0f00 	cmp.w	fp, #0
 801d090:	d057      	beq.n	801d142 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x152>
 801d092:	ee07 ca90 	vmov	s15, ip
 801d096:	8327      	strh	r7, [r4, #24]
 801d098:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 801d09c:	ee07 3a90 	vmov	s15, r3
 801d0a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d0a4:	f1b9 0f00 	cmp.w	r9, #0
 801d0a8:	d028      	beq.n	801d0fc <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x10c>
 801d0aa:	f04f 0602 	mov.w	r6, #2
 801d0ae:	f80a 6008 	strb.w	r6, [sl, r8]
 801d0b2:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801d0b6:	68e7      	ldr	r7, [r4, #12]
 801d0b8:	f108 0901 	add.w	r9, r8, #1
 801d0bc:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801d0c0:	f8a4 901a 	strh.w	r9, [r4, #26]
 801d0c4:	edc7 5a00 	vstr	s11, [r7]
 801d0c8:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801d0cc:	68e7      	ldr	r7, [r4, #12]
 801d0ce:	f108 0901 	add.w	r9, r8, #1
 801d0d2:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801d0d6:	f8a4 901a 	strh.w	r9, [r4, #26]
 801d0da:	edc7 7a00 	vstr	s15, [r7]
 801d0de:	3501      	adds	r5, #1
 801d0e0:	2d10      	cmp	r5, #16
 801d0e2:	d106      	bne.n	801d0f2 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x102>
 801d0e4:	9d02      	ldr	r5, [sp, #8]
 801d0e6:	3501      	adds	r5, #1
 801d0e8:	9502      	str	r5, [sp, #8]
 801d0ea:	f83e 5015 	ldrh.w	r5, [lr, r5, lsl #1]
 801d0ee:	9503      	str	r5, [sp, #12]
 801d0f0:	2500      	movs	r5, #0
 801d0f2:	3101      	adds	r1, #1
 801d0f4:	3004      	adds	r0, #4
 801d0f6:	f8dd 9010 	ldr.w	r9, [sp, #16]
 801d0fa:	e7ae      	b.n	801d05a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x6a>
 801d0fc:	f04f 0605 	mov.w	r6, #5
 801d100:	ed9d 5a01 	vldr	s10, [sp, #4]
 801d104:	f80a 6008 	strb.w	r6, [sl, r8]
 801d108:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801d10c:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801d110:	68e7      	ldr	r7, [r4, #12]
 801d112:	f108 0901 	add.w	r9, r8, #1
 801d116:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801d11a:	f8a4 901a 	strh.w	r9, [r4, #26]
 801d11e:	ed87 5a00 	vstr	s10, [r7]
 801d122:	ee05 2a10 	vmov	s10, r2
 801d126:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801d12a:	68e7      	ldr	r7, [r4, #12]
 801d12c:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801d130:	f108 0901 	add.w	r9, r8, #1
 801d134:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801d138:	f8a4 901a 	strh.w	r9, [r4, #26]
 801d13c:	ed87 5a00 	vstr	s10, [r7]
 801d140:	e7b7      	b.n	801d0b2 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xc2>
 801d142:	f1b9 0f00 	cmp.w	r9, #0
 801d146:	d147      	bne.n	801d1d8 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1e8>
 801d148:	f04f 0605 	mov.w	r6, #5
 801d14c:	eddd 7a01 	vldr	s15, [sp, #4]
 801d150:	8327      	strh	r7, [r4, #24]
 801d152:	f80a 6008 	strb.w	r6, [sl, r8]
 801d156:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d15a:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801d15e:	68e7      	ldr	r7, [r4, #12]
 801d160:	f108 0901 	add.w	r9, r8, #1
 801d164:	9e01      	ldr	r6, [sp, #4]
 801d166:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801d16a:	f8a4 901a 	strh.w	r9, [r4, #26]
 801d16e:	4466      	add	r6, ip
 801d170:	edc7 7a00 	vstr	s15, [r7]
 801d174:	ee07 2a90 	vmov	s15, r2
 801d178:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801d17c:	441a      	add	r2, r3
 801d17e:	68e7      	ldr	r7, [r4, #12]
 801d180:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d184:	f108 0901 	add.w	r9, r8, #1
 801d188:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801d18c:	f8a4 901a 	strh.w	r9, [r4, #26]
 801d190:	edc7 7a00 	vstr	s15, [r7]
 801d194:	ee07 6a90 	vmov	s15, r6
 801d198:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801d19c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d1a0:	68e7      	ldr	r7, [r4, #12]
 801d1a2:	f108 0901 	add.w	r9, r8, #1
 801d1a6:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801d1aa:	ee67 7a86 	vmul.f32	s15, s15, s12
 801d1ae:	f8a4 901a 	strh.w	r9, [r4, #26]
 801d1b2:	edc7 7a00 	vstr	s15, [r7]
 801d1b6:	ee07 2a90 	vmov	s15, r2
 801d1ba:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801d1be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d1c2:	68e7      	ldr	r7, [r4, #12]
 801d1c4:	f108 0901 	add.w	r9, r8, #1
 801d1c8:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801d1cc:	ee67 7a86 	vmul.f32	s15, s15, s12
 801d1d0:	f8a4 901a 	strh.w	r9, [r4, #26]
 801d1d4:	edc7 7a00 	vstr	s15, [r7]
 801d1d8:	461a      	mov	r2, r3
 801d1da:	f8cd c004 	str.w	ip, [sp, #4]
 801d1de:	e77e      	b.n	801d0de <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xee>
 801d1e0:	f1b9 0f00 	cmp.w	r9, #0
 801d1e4:	d028      	beq.n	801d238 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 801d1e6:	ee07 ca90 	vmov	s15, ip
 801d1ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d1ee:	eef4 6a67 	vcmp.f32	s13, s15
 801d1f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d1f6:	d108      	bne.n	801d20a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x21a>
 801d1f8:	ee07 3a90 	vmov	s15, r3
 801d1fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d200:	eeb4 7a67 	vcmp.f32	s14, s15
 801d204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d208:	d016      	beq.n	801d238 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 801d20a:	2302      	movs	r3, #2
 801d20c:	8327      	strh	r7, [r4, #24]
 801d20e:	f88b 3000 	strb.w	r3, [fp]
 801d212:	8b62      	ldrh	r2, [r4, #26]
 801d214:	68e3      	ldr	r3, [r4, #12]
 801d216:	1c51      	adds	r1, r2, #1
 801d218:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801d21c:	8361      	strh	r1, [r4, #26]
 801d21e:	edc3 6a00 	vstr	s13, [r3]
 801d222:	8b62      	ldrh	r2, [r4, #26]
 801d224:	68e3      	ldr	r3, [r4, #12]
 801d226:	1c51      	adds	r1, r2, #1
 801d228:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801d22c:	8361      	strh	r1, [r4, #26]
 801d22e:	ed83 7a00 	vstr	s14, [r3]
 801d232:	b007      	add	sp, #28
 801d234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d238:	2305      	movs	r3, #5
 801d23a:	eddd 7a01 	vldr	s15, [sp, #4]
 801d23e:	8327      	strh	r7, [r4, #24]
 801d240:	f88b 3000 	strb.w	r3, [fp]
 801d244:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d248:	8b61      	ldrh	r1, [r4, #26]
 801d24a:	68e3      	ldr	r3, [r4, #12]
 801d24c:	1c4d      	adds	r5, r1, #1
 801d24e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801d252:	8365      	strh	r5, [r4, #26]
 801d254:	edc3 7a00 	vstr	s15, [r3]
 801d258:	ee07 2a90 	vmov	s15, r2
 801d25c:	8b61      	ldrh	r1, [r4, #26]
 801d25e:	68e3      	ldr	r3, [r4, #12]
 801d260:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d264:	1c4d      	adds	r5, r1, #1
 801d266:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801d26a:	8365      	strh	r5, [r4, #26]
 801d26c:	edc3 7a00 	vstr	s15, [r3]
 801d270:	e7cf      	b.n	801d212 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x222>
	...

0801d274 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii>:
 801d274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d278:	4604      	mov	r4, r0
 801d27a:	b08e      	sub	sp, #56	@ 0x38
 801d27c:	4699      	mov	r9, r3
 801d27e:	4688      	mov	r8, r1
 801d280:	4615      	mov	r5, r2
 801d282:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 801d284:	f89d a064 	ldrb.w	sl, [sp, #100]	@ 0x64
 801d288:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801d28a:	f7f9 fd59 	bl	8016d40 <_ZN8touchgfx14VectorRenderer11getInstanceEv>
 801d28e:	6060      	str	r0, [r4, #4]
 801d290:	f1b9 0f00 	cmp.w	r9, #0
 801d294:	f000 80e8 	beq.w	801d468 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 801d298:	2800      	cmp	r0, #0
 801d29a:	f000 80e5 	beq.w	801d468 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 801d29e:	a805      	add	r0, sp, #20
 801d2a0:	f000 f8f9 	bl	801d496 <_ZN8touchgfx9Matrix3x3C1Ev>
 801d2a4:	6833      	ldr	r3, [r6, #0]
 801d2a6:	4630      	mov	r0, r6
 801d2a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d2aa:	4798      	blx	r3
 801d2ac:	a805      	add	r0, sp, #20
 801d2ae:	eef0 0a40 	vmov.f32	s1, s0
 801d2b2:	f000 f8f4 	bl	801d49e <_ZN8touchgfx9Matrix3x35scaleEff>
 801d2b6:	6860      	ldr	r0, [r4, #4]
 801d2b8:	f1ba 0f03 	cmp.w	sl, #3
 801d2bc:	d83b      	bhi.n	801d336 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xc2>
 801d2be:	e8df f00a 	tbb	[pc, sl]
 801d2c2:	1002      	.short	0x1002
 801d2c4:	9f71      	.short	0x9f71
 801d2c6:	6803      	ldr	r3, [r0, #0]
 801d2c8:	462a      	mov	r2, r5
 801d2ca:	4641      	mov	r1, r8
 801d2cc:	689b      	ldr	r3, [r3, #8]
 801d2ce:	4798      	blx	r3
 801d2d0:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 801d2d4:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801d2d8:	ee07 7a90 	vmov	s15, r7
 801d2dc:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801d2e0:	e026      	b.n	801d330 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xbc>
 801d2e2:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 801d2e6:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 801d2ea:	8869      	ldrh	r1, [r5, #2]
 801d2ec:	1a9b      	subs	r3, r3, r2
 801d2ee:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d2f2:	aa03      	add	r2, sp, #12
 801d2f4:	1a5b      	subs	r3, r3, r1
 801d2f6:	4641      	mov	r1, r8
 801d2f8:	f8ad 300c 	strh.w	r3, [sp, #12]
 801d2fc:	882b      	ldrh	r3, [r5, #0]
 801d2fe:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d302:	88ab      	ldrh	r3, [r5, #4]
 801d304:	f8ad 3012 	strh.w	r3, [sp, #18]
 801d308:	6803      	ldr	r3, [r0, #0]
 801d30a:	689b      	ldr	r3, [r3, #8]
 801d30c:	4798      	blx	r3
 801d30e:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 801d470 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1fc>
 801d312:	a805      	add	r0, sp, #20
 801d314:	f000 f8e8 	bl	801d4e8 <_ZN8touchgfx9Matrix3x36rotateEf>
 801d318:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 801d31c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801d31e:	ee07 7a90 	vmov	s15, r7
 801d322:	1a9b      	subs	r3, r3, r2
 801d324:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801d328:	ee00 3a10 	vmov	s0, r3
 801d32c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801d330:	a805      	add	r0, sp, #20
 801d332:	f000 f927 	bl	801d584 <_ZN8touchgfx9Matrix3x39translateEff>
 801d336:	6860      	ldr	r0, [r4, #4]
 801d338:	a905      	add	r1, sp, #20
 801d33a:	2500      	movs	r5, #0
 801d33c:	f109 0602 	add.w	r6, r9, #2
 801d340:	6803      	ldr	r3, [r0, #0]
 801d342:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d344:	4798      	blx	r3
 801d346:	6860      	ldr	r0, [r4, #4]
 801d348:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801d34a:	6803      	ldr	r3, [r0, #0]
 801d34c:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 801d350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d352:	4798      	blx	r3
 801d354:	6860      	ldr	r0, [r4, #4]
 801d356:	f89d 1060 	ldrb.w	r1, [sp, #96]	@ 0x60
 801d35a:	6803      	ldr	r3, [r0, #0]
 801d35c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d35e:	4798      	blx	r3
 801d360:	6860      	ldr	r0, [r4, #4]
 801d362:	2101      	movs	r1, #1
 801d364:	6803      	ldr	r3, [r0, #0]
 801d366:	68db      	ldr	r3, [r3, #12]
 801d368:	4798      	blx	r3
 801d36a:	f8b9 7000 	ldrh.w	r7, [r9]
 801d36e:	f104 0310 	add.w	r3, r4, #16
 801d372:	61a5      	str	r5, [r4, #24]
 801d374:	f104 0208 	add.w	r2, r4, #8
 801d378:	f104 0114 	add.w	r1, r4, #20
 801d37c:	f104 000c 	add.w	r0, r4, #12
 801d380:	f7f4 fff8 	bl	8012374 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>
 801d384:	42af      	cmp	r7, r5
 801d386:	dd60      	ble.n	801d44a <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1d6>
 801d388:	8831      	ldrh	r1, [r6, #0]
 801d38a:	1cb2      	adds	r2, r6, #2
 801d38c:	4620      	mov	r0, r4
 801d38e:	3501      	adds	r5, #1
 801d390:	f101 030f 	add.w	r3, r1, #15
 801d394:	f3c3 1307 	ubfx	r3, r3, #4, #8
 801d398:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d39c:	f7ff fe28 	bl	801cff0 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>
 801d3a0:	4606      	mov	r6, r0
 801d3a2:	e7ef      	b.n	801d384 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x110>
 801d3a4:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801d3a8:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 801d3ac:	8829      	ldrh	r1, [r5, #0]
 801d3ae:	1a9b      	subs	r3, r3, r2
 801d3b0:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d3b4:	aa03      	add	r2, sp, #12
 801d3b6:	1a5b      	subs	r3, r3, r1
 801d3b8:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801d3bc:	886d      	ldrh	r5, [r5, #2]
 801d3be:	f8ad 300c 	strh.w	r3, [sp, #12]
 801d3c2:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801d3c6:	f8ad 1012 	strh.w	r1, [sp, #18]
 801d3ca:	1a5b      	subs	r3, r3, r1
 801d3cc:	4641      	mov	r1, r8
 801d3ce:	1b5b      	subs	r3, r3, r5
 801d3d0:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d3d4:	6803      	ldr	r3, [r0, #0]
 801d3d6:	689b      	ldr	r3, [r3, #8]
 801d3d8:	4798      	blx	r3
 801d3da:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 801d474 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x200>
 801d3de:	a805      	add	r0, sp, #20
 801d3e0:	f000 f882 	bl	801d4e8 <_ZN8touchgfx9Matrix3x36rotateEf>
 801d3e4:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801d3e8:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801d3ea:	1a9b      	subs	r3, r3, r2
 801d3ec:	ee00 3a90 	vmov	s1, r3
 801d3f0:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 801d3f4:	1bdb      	subs	r3, r3, r7
 801d3f6:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801d3fa:	ee00 3a10 	vmov	s0, r3
 801d3fe:	e795      	b.n	801d32c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xb8>
 801d400:	886b      	ldrh	r3, [r5, #2]
 801d402:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801d406:	f8ad 300c 	strh.w	r3, [sp, #12]
 801d40a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801d40e:	8829      	ldrh	r1, [r5, #0]
 801d410:	1a9b      	subs	r3, r3, r2
 801d412:	f8ad 2012 	strh.w	r2, [sp, #18]
 801d416:	aa03      	add	r2, sp, #12
 801d418:	1a5b      	subs	r3, r3, r1
 801d41a:	4641      	mov	r1, r8
 801d41c:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d420:	88eb      	ldrh	r3, [r5, #6]
 801d422:	f8ad 3010 	strh.w	r3, [sp, #16]
 801d426:	6803      	ldr	r3, [r0, #0]
 801d428:	689b      	ldr	r3, [r3, #8]
 801d42a:	4798      	blx	r3
 801d42c:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 801d478 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x204>
 801d430:	a805      	add	r0, sp, #20
 801d432:	f000 f859 	bl	801d4e8 <_ZN8touchgfx9Matrix3x36rotateEf>
 801d436:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801d43a:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 801d43e:	1bdb      	subs	r3, r3, r7
 801d440:	ee00 3a90 	vmov	s1, r3
 801d444:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801d448:	e748      	b.n	801d2dc <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x68>
 801d44a:	6860      	ldr	r0, [r4, #4]
 801d44c:	2100      	movs	r1, #0
 801d44e:	8b22      	ldrh	r2, [r4, #24]
 801d450:	6803      	ldr	r3, [r0, #0]
 801d452:	9101      	str	r1, [sp, #4]
 801d454:	8b61      	ldrh	r1, [r4, #26]
 801d456:	9100      	str	r1, [sp, #0]
 801d458:	6a1d      	ldr	r5, [r3, #32]
 801d45a:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 801d45e:	47a8      	blx	r5
 801d460:	6860      	ldr	r0, [r4, #4]
 801d462:	6803      	ldr	r3, [r0, #0]
 801d464:	69db      	ldr	r3, [r3, #28]
 801d466:	4798      	blx	r3
 801d468:	b00e      	add	sp, #56	@ 0x38
 801d46a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d46e:	bf00      	nop
 801d470:	42b40000 	.word	0x42b40000
 801d474:	43340000 	.word	0x43340000
 801d478:	43870000 	.word	0x43870000

0801d47c <_ZN8touchgfx9Matrix3x35resetEv>:
 801d47c:	2300      	movs	r3, #0
 801d47e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801d482:	6043      	str	r3, [r0, #4]
 801d484:	6002      	str	r2, [r0, #0]
 801d486:	6083      	str	r3, [r0, #8]
 801d488:	60c3      	str	r3, [r0, #12]
 801d48a:	6102      	str	r2, [r0, #16]
 801d48c:	6143      	str	r3, [r0, #20]
 801d48e:	6183      	str	r3, [r0, #24]
 801d490:	61c3      	str	r3, [r0, #28]
 801d492:	6202      	str	r2, [r0, #32]
 801d494:	4770      	bx	lr

0801d496 <_ZN8touchgfx9Matrix3x3C1Ev>:
 801d496:	b508      	push	{r3, lr}
 801d498:	f7ff fff0 	bl	801d47c <_ZN8touchgfx9Matrix3x35resetEv>
 801d49c:	bd08      	pop	{r3, pc}

0801d49e <_ZN8touchgfx9Matrix3x35scaleEff>:
 801d49e:	edd0 7a00 	vldr	s15, [r0]
 801d4a2:	ee67 7a80 	vmul.f32	s15, s15, s0
 801d4a6:	edc0 7a00 	vstr	s15, [r0]
 801d4aa:	edd0 7a01 	vldr	s15, [r0, #4]
 801d4ae:	ee67 7a80 	vmul.f32	s15, s15, s0
 801d4b2:	edc0 7a01 	vstr	s15, [r0, #4]
 801d4b6:	edd0 7a02 	vldr	s15, [r0, #8]
 801d4ba:	ee27 0a80 	vmul.f32	s0, s15, s0
 801d4be:	edd0 7a03 	vldr	s15, [r0, #12]
 801d4c2:	ee67 7aa0 	vmul.f32	s15, s15, s1
 801d4c6:	ed80 0a02 	vstr	s0, [r0, #8]
 801d4ca:	edc0 7a03 	vstr	s15, [r0, #12]
 801d4ce:	edd0 7a04 	vldr	s15, [r0, #16]
 801d4d2:	ee67 7aa0 	vmul.f32	s15, s15, s1
 801d4d6:	edc0 7a04 	vstr	s15, [r0, #16]
 801d4da:	edd0 7a05 	vldr	s15, [r0, #20]
 801d4de:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801d4e2:	edc0 0a05 	vstr	s1, [r0, #20]
 801d4e6:	4770      	bx	lr

0801d4e8 <_ZN8touchgfx9Matrix3x36rotateEf>:
 801d4e8:	eddf 7a24 	vldr	s15, [pc, #144]	@ 801d57c <_ZN8touchgfx9Matrix3x36rotateEf+0x94>
 801d4ec:	ee20 0a27 	vmul.f32	s0, s0, s15
 801d4f0:	eddf 7a23 	vldr	s15, [pc, #140]	@ 801d580 <_ZN8touchgfx9Matrix3x36rotateEf+0x98>
 801d4f4:	b510      	push	{r4, lr}
 801d4f6:	ed2d 8b02 	vpush	{d8}
 801d4fa:	eec0 8a27 	vdiv.f32	s17, s0, s15
 801d4fe:	4604      	mov	r4, r0
 801d500:	eeb0 0a68 	vmov.f32	s0, s17
 801d504:	f00c fb84 	bl	8029c10 <cosf>
 801d508:	eeb0 8a40 	vmov.f32	s16, s0
 801d50c:	eeb0 0a68 	vmov.f32	s0, s17
 801d510:	f00c faba 	bl	8029a88 <sinf>
 801d514:	edd4 6a03 	vldr	s13, [r4, #12]
 801d518:	edd4 4a00 	vldr	s9, [r4]
 801d51c:	ee60 7a66 	vnmul.f32	s15, s0, s13
 801d520:	ed94 7a04 	vldr	s14, [r4, #16]
 801d524:	ed94 5a01 	vldr	s10, [r4, #4]
 801d528:	ee66 6a88 	vmul.f32	s13, s13, s16
 801d52c:	edd4 5a02 	vldr	s11, [r4, #8]
 801d530:	eee8 7a24 	vfma.f32	s15, s16, s9
 801d534:	eee0 6a24 	vfma.f32	s13, s0, s9
 801d538:	edc4 7a00 	vstr	s15, [r4]
 801d53c:	ee60 7a47 	vnmul.f32	s15, s0, s14
 801d540:	ee27 7a08 	vmul.f32	s14, s14, s16
 801d544:	edc4 6a03 	vstr	s13, [r4, #12]
 801d548:	eee8 7a05 	vfma.f32	s15, s16, s10
 801d54c:	eea0 7a05 	vfma.f32	s14, s0, s10
 801d550:	edc4 7a01 	vstr	s15, [r4, #4]
 801d554:	edd4 7a05 	vldr	s15, [r4, #20]
 801d558:	ed84 7a04 	vstr	s14, [r4, #16]
 801d55c:	ee20 6a67 	vnmul.f32	s12, s0, s15
 801d560:	ee67 7a88 	vmul.f32	s15, s15, s16
 801d564:	eea8 6a25 	vfma.f32	s12, s16, s11
 801d568:	eee0 7a25 	vfma.f32	s15, s0, s11
 801d56c:	ecbd 8b02 	vpop	{d8}
 801d570:	ed84 6a02 	vstr	s12, [r4, #8]
 801d574:	edc4 7a05 	vstr	s15, [r4, #20]
 801d578:	bd10      	pop	{r4, pc}
 801d57a:	bf00      	nop
 801d57c:	40490fdb 	.word	0x40490fdb
 801d580:	43340000 	.word	0x43340000

0801d584 <_ZN8touchgfx9Matrix3x39translateEff>:
 801d584:	ed90 6a06 	vldr	s12, [r0, #24]
 801d588:	edd0 7a00 	vldr	s15, [r0]
 801d58c:	edd0 6a07 	vldr	s13, [r0, #28]
 801d590:	eee6 7a00 	vfma.f32	s15, s12, s0
 801d594:	ed90 7a08 	vldr	s14, [r0, #32]
 801d598:	edc0 7a00 	vstr	s15, [r0]
 801d59c:	edd0 7a01 	vldr	s15, [r0, #4]
 801d5a0:	eee6 7a80 	vfma.f32	s15, s13, s0
 801d5a4:	edc0 7a01 	vstr	s15, [r0, #4]
 801d5a8:	edd0 7a02 	vldr	s15, [r0, #8]
 801d5ac:	eee7 7a00 	vfma.f32	s15, s14, s0
 801d5b0:	edc0 7a02 	vstr	s15, [r0, #8]
 801d5b4:	edd0 7a03 	vldr	s15, [r0, #12]
 801d5b8:	eee6 7a20 	vfma.f32	s15, s12, s1
 801d5bc:	edc0 7a03 	vstr	s15, [r0, #12]
 801d5c0:	edd0 7a04 	vldr	s15, [r0, #16]
 801d5c4:	eee6 7aa0 	vfma.f32	s15, s13, s1
 801d5c8:	edc0 7a04 	vstr	s15, [r0, #16]
 801d5cc:	edd0 7a05 	vldr	s15, [r0, #20]
 801d5d0:	eee7 7a20 	vfma.f32	s15, s14, s1
 801d5d4:	edc0 7a05 	vstr	s15, [r0, #20]
 801d5d8:	4770      	bx	lr

0801d5da <_ZNK8touchgfx9Matrix3x315affineTransformEff>:
 801d5da:	edd0 6a01 	vldr	s13, [r0, #4]
 801d5de:	b084      	sub	sp, #16
 801d5e0:	edd0 7a04 	vldr	s15, [r0, #16]
 801d5e4:	ed90 7a03 	vldr	s14, [r0, #12]
 801d5e8:	ee60 7aa7 	vmul.f32	s15, s1, s15
 801d5ec:	ee60 0aa6 	vmul.f32	s1, s1, s13
 801d5f0:	edd0 6a00 	vldr	s13, [r0]
 801d5f4:	eee7 7a00 	vfma.f32	s15, s14, s0
 801d5f8:	ed90 7a05 	vldr	s14, [r0, #20]
 801d5fc:	eee6 0a80 	vfma.f32	s1, s13, s0
 801d600:	ed90 0a02 	vldr	s0, [r0, #8]
 801d604:	ee30 0a80 	vadd.f32	s0, s1, s0
 801d608:	ee77 0a87 	vadd.f32	s1, s15, s14
 801d60c:	b004      	add	sp, #16
 801d60e:	4770      	bx	lr

0801d610 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801d610:	b530      	push	{r4, r5, lr}
 801d612:	8083      	strh	r3, [r0, #4]
 801d614:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801d618:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801d61c:	80c3      	strh	r3, [r0, #6]
 801d61e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801d622:	6141      	str	r1, [r0, #20]
 801d624:	7203      	strb	r3, [r0, #8]
 801d626:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801d62a:	8302      	strh	r2, [r0, #24]
 801d62c:	7243      	strb	r3, [r0, #9]
 801d62e:	7a83      	ldrb	r3, [r0, #10]
 801d630:	f365 0306 	bfi	r3, r5, #0, #7
 801d634:	f89d 501c 	ldrb.w	r5, [sp, #28]
 801d638:	f365 13c7 	bfi	r3, r5, #7, #1
 801d63c:	7283      	strb	r3, [r0, #10]
 801d63e:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801d642:	72c3      	strb	r3, [r0, #11]
 801d644:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801d648:	7303      	strb	r3, [r0, #12]
 801d64a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801d64e:	81c3      	strh	r3, [r0, #14]
 801d650:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801d654:	8203      	strh	r3, [r0, #16]
 801d656:	4b01      	ldr	r3, [pc, #4]	@ (801d65c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 801d658:	6003      	str	r3, [r0, #0]
 801d65a:	bd30      	pop	{r4, r5, pc}
 801d65c:	0802cef8 	.word	0x0802cef8

0801d660 <_ZNK8touchgfx9ConstFont4findEt>:
 801d660:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d662:	6944      	ldr	r4, [r0, #20]
 801d664:	b3bc      	cbz	r4, 801d6d6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d666:	88a3      	ldrh	r3, [r4, #4]
 801d668:	8b02      	ldrh	r2, [r0, #24]
 801d66a:	1acb      	subs	r3, r1, r3
 801d66c:	f102 32ff 	add.w	r2, r2, #4294967295
 801d670:	d431      	bmi.n	801d6d6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d672:	4293      	cmp	r3, r2
 801d674:	dd0c      	ble.n	801d690 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801d676:	230e      	movs	r3, #14
 801d678:	fb03 4302 	mla	r3, r3, r2, r4
 801d67c:	889b      	ldrh	r3, [r3, #4]
 801d67e:	1a5b      	subs	r3, r3, r1
 801d680:	1ad3      	subs	r3, r2, r3
 801d682:	429a      	cmp	r2, r3
 801d684:	db27      	blt.n	801d6d6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d686:	2b00      	cmp	r3, #0
 801d688:	bfbc      	itt	lt
 801d68a:	2302      	movlt	r3, #2
 801d68c:	fb92 f3f3 	sdivlt	r3, r2, r3
 801d690:	2500      	movs	r5, #0
 801d692:	260e      	movs	r6, #14
 801d694:	4295      	cmp	r5, r2
 801d696:	dc1e      	bgt.n	801d6d6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d698:	fb06 4003 	mla	r0, r6, r3, r4
 801d69c:	8887      	ldrh	r7, [r0, #4]
 801d69e:	42b9      	cmp	r1, r7
 801d6a0:	d01a      	beq.n	801d6d8 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801d6a2:	d20d      	bcs.n	801d6c0 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801d6a4:	1e5a      	subs	r2, r3, #1
 801d6a6:	4295      	cmp	r5, r2
 801d6a8:	dc15      	bgt.n	801d6d6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d6aa:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801d6ae:	1a5b      	subs	r3, r3, r1
 801d6b0:	1ad3      	subs	r3, r2, r3
 801d6b2:	429a      	cmp	r2, r3
 801d6b4:	db0f      	blt.n	801d6d6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d6b6:	429d      	cmp	r5, r3
 801d6b8:	ddec      	ble.n	801d694 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801d6ba:	1953      	adds	r3, r2, r5
 801d6bc:	105b      	asrs	r3, r3, #1
 801d6be:	e7e9      	b.n	801d694 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801d6c0:	1c5d      	adds	r5, r3, #1
 801d6c2:	42aa      	cmp	r2, r5
 801d6c4:	db07      	blt.n	801d6d6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d6c6:	8a43      	ldrh	r3, [r0, #18]
 801d6c8:	1acb      	subs	r3, r1, r3
 801d6ca:	442b      	add	r3, r5
 801d6cc:	429d      	cmp	r5, r3
 801d6ce:	dc02      	bgt.n	801d6d6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d6d0:	429a      	cmp	r2, r3
 801d6d2:	dadf      	bge.n	801d694 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801d6d4:	e7f1      	b.n	801d6ba <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801d6d6:	2000      	movs	r0, #0
 801d6d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d6da <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801d6da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d6dc:	4604      	mov	r4, r0
 801d6de:	4617      	mov	r7, r2
 801d6e0:	461e      	mov	r6, r3
 801d6e2:	b911      	cbnz	r1, 801d6ea <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801d6e4:	2500      	movs	r5, #0
 801d6e6:	4628      	mov	r0, r5
 801d6e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d6ea:	290a      	cmp	r1, #10
 801d6ec:	d0fa      	beq.n	801d6e4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801d6ee:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801d6f2:	4291      	cmp	r1, r2
 801d6f4:	d0f6      	beq.n	801d6e4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801d6f6:	f242 020b 	movw	r2, #8203	@ 0x200b
 801d6fa:	4291      	cmp	r1, r2
 801d6fc:	d0f2      	beq.n	801d6e4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801d6fe:	f7ff ffaf 	bl	801d660 <_ZNK8touchgfx9ConstFont4findEt>
 801d702:	4605      	mov	r5, r0
 801d704:	b950      	cbnz	r0, 801d71c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801d706:	6823      	ldr	r3, [r4, #0]
 801d708:	4620      	mov	r0, r4
 801d70a:	691b      	ldr	r3, [r3, #16]
 801d70c:	4798      	blx	r3
 801d70e:	4601      	mov	r1, r0
 801d710:	4620      	mov	r0, r4
 801d712:	f7ff ffa5 	bl	801d660 <_ZNK8touchgfx9ConstFont4findEt>
 801d716:	4605      	mov	r5, r0
 801d718:	2800      	cmp	r0, #0
 801d71a:	d0e3      	beq.n	801d6e4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801d71c:	6823      	ldr	r3, [r4, #0]
 801d71e:	4629      	mov	r1, r5
 801d720:	4620      	mov	r0, r4
 801d722:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d724:	4798      	blx	r3
 801d726:	6038      	str	r0, [r7, #0]
 801d728:	6823      	ldr	r3, [r4, #0]
 801d72a:	4620      	mov	r0, r4
 801d72c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d72e:	4798      	blx	r3
 801d730:	7030      	strb	r0, [r6, #0]
 801d732:	e7d8      	b.n	801d6e6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801d734 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801d734:	2000      	movs	r0, #0
 801d736:	4770      	bx	lr

0801d738 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801d738:	2001      	movs	r0, #1
 801d73a:	4770      	bx	lr

0801d73c <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801d73c:	2002      	movs	r0, #2
 801d73e:	4770      	bx	lr

0801d740 <_ZN8touchgfx12GestureEventD1Ev>:
 801d740:	4770      	bx	lr

0801d742 <_ZN8touchgfx9DragEventD1Ev>:
 801d742:	4770      	bx	lr

0801d744 <_ZN8touchgfx10ClickEventD1Ev>:
 801d744:	4770      	bx	lr

0801d746 <_ZN8touchgfx10ClickEventD0Ev>:
 801d746:	b510      	push	{r4, lr}
 801d748:	4604      	mov	r4, r0
 801d74a:	210c      	movs	r1, #12
 801d74c:	f00c f927 	bl	802999e <_ZdlPvj>
 801d750:	4620      	mov	r0, r4
 801d752:	bd10      	pop	{r4, pc}

0801d754 <_ZN8touchgfx9DragEventD0Ev>:
 801d754:	b510      	push	{r4, lr}
 801d756:	4604      	mov	r4, r0
 801d758:	2110      	movs	r1, #16
 801d75a:	f00c f920 	bl	802999e <_ZdlPvj>
 801d75e:	4620      	mov	r0, r4
 801d760:	bd10      	pop	{r4, pc}

0801d762 <_ZN8touchgfx12GestureEventD0Ev>:
 801d762:	b510      	push	{r4, lr}
 801d764:	4604      	mov	r4, r0
 801d766:	210c      	movs	r1, #12
 801d768:	f00c f919 	bl	802999e <_ZdlPvj>
 801d76c:	4620      	mov	r0, r4
 801d76e:	bd10      	pop	{r4, pc}

0801d770 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801d770:	b530      	push	{r4, r5, lr}
 801d772:	460d      	mov	r5, r1
 801d774:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801d776:	b087      	sub	sp, #28
 801d778:	4604      	mov	r4, r0
 801d77a:	b301      	cbz	r1, 801d7be <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801d77c:	a801      	add	r0, sp, #4
 801d77e:	f7ff fc19 	bl	801cfb4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d782:	892a      	ldrh	r2, [r5, #8]
 801d784:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801d788:	7928      	ldrb	r0, [r5, #4]
 801d78a:	1ad2      	subs	r2, r2, r3
 801d78c:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801d78e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801d792:	441a      	add	r2, r3
 801d794:	896b      	ldrh	r3, [r5, #10]
 801d796:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801d79a:	f88d 0010 	strb.w	r0, [sp, #16]
 801d79e:	1b5b      	subs	r3, r3, r5
 801d7a0:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 801d7a2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801d7a4:	442b      	add	r3, r5
 801d7a6:	4d07      	ldr	r5, [pc, #28]	@ (801d7c4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801d7a8:	f8ad 1012 	strh.w	r1, [sp, #18]
 801d7ac:	a903      	add	r1, sp, #12
 801d7ae:	9503      	str	r5, [sp, #12]
 801d7b0:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d7b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d7b8:	6803      	ldr	r3, [r0, #0]
 801d7ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801d7bc:	4798      	blx	r3
 801d7be:	b007      	add	sp, #28
 801d7c0:	bd30      	pop	{r4, r5, pc}
 801d7c2:	bf00      	nop
 801d7c4:	0802cf88 	.word	0x0802cf88

0801d7c8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801d7c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d7cc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801d7ce:	b08a      	sub	sp, #40	@ 0x28
 801d7d0:	4604      	mov	r4, r0
 801d7d2:	460d      	mov	r5, r1
 801d7d4:	b113      	cbz	r3, 801d7dc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801d7d6:	790b      	ldrb	r3, [r1, #4]
 801d7d8:	2b00      	cmp	r3, #0
 801d7da:	d044      	beq.n	801d866 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801d7dc:	f104 0804 	add.w	r8, r4, #4
 801d7e0:	a803      	add	r0, sp, #12
 801d7e2:	4641      	mov	r1, r8
 801d7e4:	f7ff fbe6 	bl	801cfb4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d7e8:	792b      	ldrb	r3, [r5, #4]
 801d7ea:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801d7ee:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801d7f2:	b983      	cbnz	r3, 801d816 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801d7f4:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 801d7f8:	892a      	ldrh	r2, [r5, #8]
 801d7fa:	88e9      	ldrh	r1, [r5, #6]
 801d7fc:	4640      	mov	r0, r8
 801d7fe:	1b92      	subs	r2, r2, r6
 801d800:	9301      	str	r3, [sp, #4]
 801d802:	1bc9      	subs	r1, r1, r7
 801d804:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 801d808:	b212      	sxth	r2, r2
 801d80a:	9300      	str	r3, [sp, #0]
 801d80c:	b209      	sxth	r1, r1
 801d80e:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 801d812:	f7f9 fe6f 	bl	80174f4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801d816:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801d818:	b329      	cbz	r1, 801d866 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801d81a:	a805      	add	r0, sp, #20
 801d81c:	f7ff fbca 	bl	801cfb4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d820:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801d824:	792b      	ldrb	r3, [r5, #4]
 801d826:	a907      	add	r1, sp, #28
 801d828:	1abf      	subs	r7, r7, r2
 801d82a:	88ea      	ldrh	r2, [r5, #6]
 801d82c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801d82e:	4417      	add	r7, r2
 801d830:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 801d832:	f88d 3020 	strb.w	r3, [sp, #32]
 801d836:	4417      	add	r7, r2
 801d838:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801d83c:	1ab6      	subs	r6, r6, r2
 801d83e:	892a      	ldrh	r2, [r5, #8]
 801d840:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 801d844:	4416      	add	r6, r2
 801d846:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801d848:	4416      	add	r6, r2
 801d84a:	4a08      	ldr	r2, [pc, #32]	@ (801d86c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801d84c:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 801d850:	2600      	movs	r6, #0
 801d852:	9207      	str	r2, [sp, #28]
 801d854:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 801d858:	6803      	ldr	r3, [r0, #0]
 801d85a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d85c:	4798      	blx	r3
 801d85e:	792b      	ldrb	r3, [r5, #4]
 801d860:	b10b      	cbz	r3, 801d866 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801d862:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 801d866:	b00a      	add	sp, #40	@ 0x28
 801d868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d86c:	0802cf60 	.word	0x0802cf60

0801d870 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801d870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d874:	460c      	mov	r4, r1
 801d876:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801d878:	b088      	sub	sp, #32
 801d87a:	4605      	mov	r5, r0
 801d87c:	2900      	cmp	r1, #0
 801d87e:	d06d      	beq.n	801d95c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801d880:	4668      	mov	r0, sp
 801d882:	f7ff fb97 	bl	801cfb4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d886:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 801d888:	88e3      	ldrh	r3, [r4, #6]
 801d88a:	f9bd 8000 	ldrsh.w	r8, [sp]
 801d88e:	440b      	add	r3, r1
 801d890:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801d894:	b21b      	sxth	r3, r3
 801d896:	4543      	cmp	r3, r8
 801d898:	db31      	blt.n	801d8fe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d89a:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801d89e:	44c4      	add	ip, r8
 801d8a0:	fa0f fc8c 	sxth.w	ip, ip
 801d8a4:	4563      	cmp	r3, ip
 801d8a6:	da2a      	bge.n	801d8fe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d8a8:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 801d8aa:	8926      	ldrh	r6, [r4, #8]
 801d8ac:	4416      	add	r6, r2
 801d8ae:	b236      	sxth	r6, r6
 801d8b0:	42be      	cmp	r6, r7
 801d8b2:	db24      	blt.n	801d8fe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d8b4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801d8b8:	4438      	add	r0, r7
 801d8ba:	b200      	sxth	r0, r0
 801d8bc:	4286      	cmp	r6, r0
 801d8be:	da1e      	bge.n	801d8fe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d8c0:	8963      	ldrh	r3, [r4, #10]
 801d8c2:	4419      	add	r1, r3
 801d8c4:	b209      	sxth	r1, r1
 801d8c6:	4541      	cmp	r1, r8
 801d8c8:	db08      	blt.n	801d8dc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801d8ca:	4561      	cmp	r1, ip
 801d8cc:	da06      	bge.n	801d8dc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801d8ce:	89a3      	ldrh	r3, [r4, #12]
 801d8d0:	441a      	add	r2, r3
 801d8d2:	b212      	sxth	r2, r2
 801d8d4:	42ba      	cmp	r2, r7
 801d8d6:	db01      	blt.n	801d8dc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801d8d8:	4282      	cmp	r2, r0
 801d8da:	db10      	blt.n	801d8fe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d8dc:	4b21      	ldr	r3, [pc, #132]	@ (801d964 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801d8de:	a904      	add	r1, sp, #16
 801d8e0:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801d8e2:	9304      	str	r3, [sp, #16]
 801d8e4:	2302      	movs	r3, #2
 801d8e6:	f88d 3014 	strb.w	r3, [sp, #20]
 801d8ea:	2300      	movs	r3, #0
 801d8ec:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d8f0:	f8ad 3018 	strh.w	r3, [sp, #24]
 801d8f4:	f8ad 301a 	strh.w	r3, [sp, #26]
 801d8f8:	6803      	ldr	r3, [r0, #0]
 801d8fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d8fc:	4798      	blx	r3
 801d8fe:	1d29      	adds	r1, r5, #4
 801d900:	a802      	add	r0, sp, #8
 801d902:	f7ff fb57 	bl	801cfb4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d906:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801d90a:	88e0      	ldrh	r0, [r4, #6]
 801d90c:	eba3 0808 	sub.w	r8, r3, r8
 801d910:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801d914:	7921      	ldrb	r1, [r4, #4]
 801d916:	fa1f f888 	uxth.w	r8, r8
 801d91a:	1bdf      	subs	r7, r3, r7
 801d91c:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 801d920:	b2bb      	uxth	r3, r7
 801d922:	4440      	add	r0, r8
 801d924:	8922      	ldrh	r2, [r4, #8]
 801d926:	8967      	ldrh	r7, [r4, #10]
 801d928:	4460      	add	r0, ip
 801d92a:	89a4      	ldrh	r4, [r4, #12]
 801d92c:	441a      	add	r2, r3
 801d92e:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 801d930:	44b8      	add	r8, r7
 801d932:	4423      	add	r3, r4
 801d934:	f8ad 0016 	strh.w	r0, [sp, #22]
 801d938:	4432      	add	r2, r6
 801d93a:	44e0      	add	r8, ip
 801d93c:	4433      	add	r3, r6
 801d93e:	4c0a      	ldr	r4, [pc, #40]	@ (801d968 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801d940:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801d942:	f88d 1014 	strb.w	r1, [sp, #20]
 801d946:	a904      	add	r1, sp, #16
 801d948:	9404      	str	r4, [sp, #16]
 801d94a:	f8ad 2018 	strh.w	r2, [sp, #24]
 801d94e:	f8ad 801a 	strh.w	r8, [sp, #26]
 801d952:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d956:	6803      	ldr	r3, [r0, #0]
 801d958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d95a:	4798      	blx	r3
 801d95c:	b008      	add	sp, #32
 801d95e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d962:	bf00      	nop
 801d964:	0802cf60 	.word	0x0802cf60
 801d968:	0802cf74 	.word	0x0802cf74

0801d96c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801d96c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d96e:	4604      	mov	r4, r0
 801d970:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801d974:	3201      	adds	r2, #1
 801d976:	d112      	bne.n	801d99e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801d978:	2500      	movs	r5, #0
 801d97a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801d97e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801d982:	6803      	ldr	r3, [r0, #0]
 801d984:	9500      	str	r5, [sp, #0]
 801d986:	466d      	mov	r5, sp
 801d988:	f8ad 1004 	strh.w	r1, [sp, #4]
 801d98c:	f8ad 2006 	strh.w	r2, [sp, #6]
 801d990:	4629      	mov	r1, r5
 801d992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d994:	4798      	blx	r3
 801d996:	e895 0003 	ldmia.w	r5, {r0, r1}
 801d99a:	e884 0003 	stmia.w	r4, {r0, r1}
 801d99e:	4620      	mov	r0, r4
 801d9a0:	b003      	add	sp, #12
 801d9a2:	bd30      	pop	{r4, r5, pc}

0801d9a4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801d9a4:	b513      	push	{r0, r1, r4, lr}
 801d9a6:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801d9aa:	4604      	mov	r4, r0
 801d9ac:	3301      	adds	r3, #1
 801d9ae:	d109      	bne.n	801d9c4 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801d9b0:	4601      	mov	r1, r0
 801d9b2:	4668      	mov	r0, sp
 801d9b4:	f7ff fafe 	bl	801cfb4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d9b8:	f8bd 3000 	ldrh.w	r3, [sp]
 801d9bc:	8423      	strh	r3, [r4, #32]
 801d9be:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d9c2:	8463      	strh	r3, [r4, #34]	@ 0x22
 801d9c4:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801d9c8:	b002      	add	sp, #8
 801d9ca:	bd10      	pop	{r4, pc}

0801d9cc <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801d9cc:	b513      	push	{r0, r1, r4, lr}
 801d9ce:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 801d9d2:	4604      	mov	r4, r0
 801d9d4:	3301      	adds	r3, #1
 801d9d6:	d109      	bne.n	801d9ec <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801d9d8:	4601      	mov	r1, r0
 801d9da:	4668      	mov	r0, sp
 801d9dc:	f7ff faea 	bl	801cfb4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d9e0:	f8bd 3000 	ldrh.w	r3, [sp]
 801d9e4:	8423      	strh	r3, [r4, #32]
 801d9e6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d9ea:	8463      	strh	r3, [r4, #34]	@ 0x22
 801d9ec:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 801d9f0:	b002      	add	sp, #8
 801d9f2:	bd10      	pop	{r4, pc}

0801d9f4 <_ZN8touchgfx6ScreenC1Ev>:
 801d9f4:	b570      	push	{r4, r5, r6, lr}
 801d9f6:	4b17      	ldr	r3, [pc, #92]	@ (801da54 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801d9f8:	4605      	mov	r5, r0
 801d9fa:	4a17      	ldr	r2, [pc, #92]	@ (801da58 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801d9fc:	2101      	movs	r1, #1
 801d9fe:	f845 3b04 	str.w	r3, [r5], #4
 801da02:	2300      	movs	r3, #0
 801da04:	6042      	str	r2, [r0, #4]
 801da06:	4604      	mov	r4, r0
 801da08:	8103      	strh	r3, [r0, #8]
 801da0a:	8143      	strh	r3, [r0, #10]
 801da0c:	8183      	strh	r3, [r0, #12]
 801da0e:	81c3      	strh	r3, [r0, #14]
 801da10:	8203      	strh	r3, [r0, #16]
 801da12:	8243      	strh	r3, [r0, #18]
 801da14:	8283      	strh	r3, [r0, #20]
 801da16:	82c3      	strh	r3, [r0, #22]
 801da18:	6203      	str	r3, [r0, #32]
 801da1a:	8483      	strh	r3, [r0, #36]	@ 0x24
 801da1c:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801da1e:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 801da22:	6343      	str	r3, [r0, #52]	@ 0x34
 801da24:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 801da28:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801da2c:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801da30:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 801da34:	4b09      	ldr	r3, [pc, #36]	@ (801da5c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801da36:	4628      	mov	r0, r5
 801da38:	f9b3 6000 	ldrsh.w	r6, [r3]
 801da3c:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 801da3e:	4a08      	ldr	r2, [pc, #32]	@ (801da60 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801da40:	f9b2 1000 	ldrsh.w	r1, [r2]
 801da44:	4798      	blx	r3
 801da46:	6863      	ldr	r3, [r4, #4]
 801da48:	4628      	mov	r0, r5
 801da4a:	4631      	mov	r1, r6
 801da4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801da4e:	4798      	blx	r3
 801da50:	4620      	mov	r0, r4
 801da52:	bd70      	pop	{r4, r5, r6, pc}
 801da54:	0802cf9c 	.word	0x0802cf9c
 801da58:	0802c95c 	.word	0x0802c95c
 801da5c:	24013b4e 	.word	0x24013b4e
 801da60:	24013b4c 	.word	0x24013b4c

0801da64 <_ZN8touchgfx6Screen4drawEv>:
 801da64:	4b09      	ldr	r3, [pc, #36]	@ (801da8c <_ZN8touchgfx6Screen4drawEv+0x28>)
 801da66:	b507      	push	{r0, r1, r2, lr}
 801da68:	f9b3 2000 	ldrsh.w	r2, [r3]
 801da6c:	2100      	movs	r1, #0
 801da6e:	4b08      	ldr	r3, [pc, #32]	@ (801da90 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801da70:	9100      	str	r1, [sp, #0]
 801da72:	4669      	mov	r1, sp
 801da74:	f9b3 3000 	ldrsh.w	r3, [r3]
 801da78:	f8ad 2004 	strh.w	r2, [sp, #4]
 801da7c:	f8ad 3006 	strh.w	r3, [sp, #6]
 801da80:	6803      	ldr	r3, [r0, #0]
 801da82:	689b      	ldr	r3, [r3, #8]
 801da84:	4798      	blx	r3
 801da86:	b003      	add	sp, #12
 801da88:	f85d fb04 	ldr.w	pc, [sp], #4
 801da8c:	24013b4c 	.word	0x24013b4c
 801da90:	24013b4e 	.word	0x24013b4e

0801da94 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801da94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da98:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801da9c:	b089      	sub	sp, #36	@ 0x24
 801da9e:	4680      	mov	r8, r0
 801daa0:	460c      	mov	r4, r1
 801daa2:	2b00      	cmp	r3, #0
 801daa4:	4615      	mov	r5, r2
 801daa6:	dd0e      	ble.n	801dac6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801daa8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801daac:	2b00      	cmp	r3, #0
 801daae:	dd0a      	ble.n	801dac6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801dab0:	4628      	mov	r0, r5
 801dab2:	f7ff ff5b 	bl	801d96c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801dab6:	4621      	mov	r1, r4
 801dab8:	f7fe f88a 	bl	801bbd0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801dabc:	69eb      	ldr	r3, [r5, #28]
 801dabe:	b928      	cbnz	r0, 801dacc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801dac0:	461d      	mov	r5, r3
 801dac2:	2b00      	cmp	r3, #0
 801dac4:	d1f4      	bne.n	801dab0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801dac6:	b009      	add	sp, #36	@ 0x24
 801dac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dacc:	ae04      	add	r6, sp, #16
 801dace:	2b00      	cmp	r3, #0
 801dad0:	f000 80b5 	beq.w	801dc3e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801dad4:	682b      	ldr	r3, [r5, #0]
 801dad6:	4629      	mov	r1, r5
 801dad8:	a802      	add	r0, sp, #8
 801dada:	68db      	ldr	r3, [r3, #12]
 801dadc:	4798      	blx	r3
 801dade:	4628      	mov	r0, r5
 801dae0:	f7ff ff60 	bl	801d9a4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801dae4:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801dae8:	4407      	add	r7, r0
 801daea:	4628      	mov	r0, r5
 801daec:	f7ff ff6e 	bl	801d9cc <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801daf0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801daf4:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801daf8:	b23f      	sxth	r7, r7
 801dafa:	4418      	add	r0, r3
 801dafc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801db00:	4621      	mov	r1, r4
 801db02:	f8ad 2014 	strh.w	r2, [sp, #20]
 801db06:	f8ad 0012 	strh.w	r0, [sp, #18]
 801db0a:	4630      	mov	r0, r6
 801db0c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801db10:	f8ad 7010 	strh.w	r7, [sp, #16]
 801db14:	f7f9 fdd0 	bl	80176b8 <_ZN8touchgfx4RectaNERKS0_>
 801db18:	4628      	mov	r0, r5
 801db1a:	f7ff ff27 	bl	801d96c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801db1e:	ab06      	add	r3, sp, #24
 801db20:	4602      	mov	r2, r0
 801db22:	e896 0003 	ldmia.w	r6, {r0, r1}
 801db26:	e883 0003 	stmia.w	r3, {r0, r1}
 801db2a:	4611      	mov	r1, r2
 801db2c:	4618      	mov	r0, r3
 801db2e:	f7f9 fdc3 	bl	80176b8 <_ZN8touchgfx4RectaNERKS0_>
 801db32:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801db36:	f9b4 1000 	ldrsh.w	r1, [r4]
 801db3a:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801db3e:	4299      	cmp	r1, r3
 801db40:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801db44:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801db48:	d10b      	bne.n	801db62 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801db4a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801db4e:	4552      	cmp	r2, sl
 801db50:	d107      	bne.n	801db62 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801db52:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801db56:	455a      	cmp	r2, fp
 801db58:	d103      	bne.n	801db62 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801db5a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801db5e:	454a      	cmp	r2, r9
 801db60:	d06d      	beq.n	801dc3e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801db62:	f1bb 0f00 	cmp.w	fp, #0
 801db66:	dd65      	ble.n	801dc34 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801db68:	f1b9 0f00 	cmp.w	r9, #0
 801db6c:	dd62      	ble.n	801dc34 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801db6e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801db72:	fa1f f08a 	uxth.w	r0, sl
 801db76:	4552      	cmp	r2, sl
 801db78:	9000      	str	r0, [sp, #0]
 801db7a:	da12      	bge.n	801dba2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801db7c:	9301      	str	r3, [sp, #4]
 801db7e:	9b00      	ldr	r3, [sp, #0]
 801db80:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801db84:	f8ad 2012 	strh.w	r2, [sp, #18]
 801db88:	1a9a      	subs	r2, r3, r2
 801db8a:	f8ad 1010 	strh.w	r1, [sp, #16]
 801db8e:	4631      	mov	r1, r6
 801db90:	f8ad 0014 	strh.w	r0, [sp, #20]
 801db94:	4640      	mov	r0, r8
 801db96:	f8ad 2016 	strh.w	r2, [sp, #22]
 801db9a:	69ea      	ldr	r2, [r5, #28]
 801db9c:	f7ff ff7a 	bl	801da94 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801dba0:	9b01      	ldr	r3, [sp, #4]
 801dba2:	f9b4 2000 	ldrsh.w	r2, [r4]
 801dba6:	b29f      	uxth	r7, r3
 801dba8:	429a      	cmp	r2, r3
 801dbaa:	da0d      	bge.n	801dbc8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801dbac:	f8ad 2010 	strh.w	r2, [sp, #16]
 801dbb0:	1aba      	subs	r2, r7, r2
 801dbb2:	f8ad a012 	strh.w	sl, [sp, #18]
 801dbb6:	4631      	mov	r1, r6
 801dbb8:	f8ad 2014 	strh.w	r2, [sp, #20]
 801dbbc:	4640      	mov	r0, r8
 801dbbe:	f8ad 9016 	strh.w	r9, [sp, #22]
 801dbc2:	69ea      	ldr	r2, [r5, #28]
 801dbc4:	f7ff ff66 	bl	801da94 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801dbc8:	8822      	ldrh	r2, [r4, #0]
 801dbca:	445f      	add	r7, fp
 801dbcc:	88a3      	ldrh	r3, [r4, #4]
 801dbce:	b2bf      	uxth	r7, r7
 801dbd0:	4413      	add	r3, r2
 801dbd2:	b23a      	sxth	r2, r7
 801dbd4:	b29b      	uxth	r3, r3
 801dbd6:	b219      	sxth	r1, r3
 801dbd8:	4291      	cmp	r1, r2
 801dbda:	dd0d      	ble.n	801dbf8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801dbdc:	1bdb      	subs	r3, r3, r7
 801dbde:	f8ad 2010 	strh.w	r2, [sp, #16]
 801dbe2:	f8ad a012 	strh.w	sl, [sp, #18]
 801dbe6:	4631      	mov	r1, r6
 801dbe8:	f8ad 3014 	strh.w	r3, [sp, #20]
 801dbec:	4640      	mov	r0, r8
 801dbee:	f8ad 9016 	strh.w	r9, [sp, #22]
 801dbf2:	69ea      	ldr	r2, [r5, #28]
 801dbf4:	f7ff ff4e 	bl	801da94 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801dbf8:	88e2      	ldrh	r2, [r4, #6]
 801dbfa:	8863      	ldrh	r3, [r4, #2]
 801dbfc:	4413      	add	r3, r2
 801dbfe:	9a00      	ldr	r2, [sp, #0]
 801dc00:	444a      	add	r2, r9
 801dc02:	b29b      	uxth	r3, r3
 801dc04:	fa1f f982 	uxth.w	r9, r2
 801dc08:	b219      	sxth	r1, r3
 801dc0a:	fa0f f289 	sxth.w	r2, r9
 801dc0e:	428a      	cmp	r2, r1
 801dc10:	da15      	bge.n	801dc3e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801dc12:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801dc16:	eba3 0309 	sub.w	r3, r3, r9
 801dc1a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801dc1e:	f8ad 1014 	strh.w	r1, [sp, #20]
 801dc22:	4631      	mov	r1, r6
 801dc24:	f8ad 0010 	strh.w	r0, [sp, #16]
 801dc28:	f8ad 2012 	strh.w	r2, [sp, #18]
 801dc2c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801dc30:	69ea      	ldr	r2, [r5, #28]
 801dc32:	e001      	b.n	801dc38 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801dc34:	69ea      	ldr	r2, [r5, #28]
 801dc36:	4621      	mov	r1, r4
 801dc38:	4640      	mov	r0, r8
 801dc3a:	f7ff ff2b 	bl	801da94 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801dc3e:	4628      	mov	r0, r5
 801dc40:	f7ff fe94 	bl	801d96c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801dc44:	6861      	ldr	r1, [r4, #4]
 801dc46:	4602      	mov	r2, r0
 801dc48:	4633      	mov	r3, r6
 801dc4a:	6820      	ldr	r0, [r4, #0]
 801dc4c:	c303      	stmia	r3!, {r0, r1}
 801dc4e:	4611      	mov	r1, r2
 801dc50:	4630      	mov	r0, r6
 801dc52:	f7f9 fd31 	bl	80176b8 <_ZN8touchgfx4RectaNERKS0_>
 801dc56:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801dc5a:	2b00      	cmp	r3, #0
 801dc5c:	f77f af33 	ble.w	801dac6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801dc60:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801dc64:	2b00      	cmp	r3, #0
 801dc66:	f77f af2e 	ble.w	801dac6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801dc6a:	4628      	mov	r0, r5
 801dc6c:	f7ff fe9a 	bl	801d9a4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801dc70:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801dc74:	1a18      	subs	r0, r3, r0
 801dc76:	f8ad 0010 	strh.w	r0, [sp, #16]
 801dc7a:	4628      	mov	r0, r5
 801dc7c:	f7ff fea6 	bl	801d9cc <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801dc80:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801dc84:	4631      	mov	r1, r6
 801dc86:	1a18      	subs	r0, r3, r0
 801dc88:	f8ad 0012 	strh.w	r0, [sp, #18]
 801dc8c:	4628      	mov	r0, r5
 801dc8e:	682b      	ldr	r3, [r5, #0]
 801dc90:	689b      	ldr	r3, [r3, #8]
 801dc92:	4798      	blx	r3
 801dc94:	e717      	b.n	801dac6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801dc96 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801dc96:	b570      	push	{r4, r5, r6, lr}
 801dc98:	1d06      	adds	r6, r0, #4
 801dc9a:	b086      	sub	sp, #24
 801dc9c:	460c      	mov	r4, r1
 801dc9e:	2300      	movs	r3, #0
 801dca0:	4631      	mov	r1, r6
 801dca2:	4605      	mov	r5, r0
 801dca4:	a802      	add	r0, sp, #8
 801dca6:	9301      	str	r3, [sp, #4]
 801dca8:	f7ff f984 	bl	801cfb4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801dcac:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801dcb0:	8822      	ldrh	r2, [r4, #0]
 801dcb2:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801dcb6:	1ad2      	subs	r2, r2, r3
 801dcb8:	8863      	ldrh	r3, [r4, #2]
 801dcba:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801dcbe:	1a5b      	subs	r3, r3, r1
 801dcc0:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801dcc4:	f8ad 2010 	strh.w	r2, [sp, #16]
 801dcc8:	aa01      	add	r2, sp, #4
 801dcca:	f8ad 0014 	strh.w	r0, [sp, #20]
 801dcce:	4630      	mov	r0, r6
 801dcd0:	f8ad 1016 	strh.w	r1, [sp, #22]
 801dcd4:	a904      	add	r1, sp, #16
 801dcd6:	f8ad 3012 	strh.w	r3, [sp, #18]
 801dcda:	f7f9 fdc5 	bl	8017868 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801dcde:	9a01      	ldr	r2, [sp, #4]
 801dce0:	b11a      	cbz	r2, 801dcea <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801dce2:	4621      	mov	r1, r4
 801dce4:	4628      	mov	r0, r5
 801dce6:	f7ff fed5 	bl	801da94 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801dcea:	b006      	add	sp, #24
 801dcec:	bd70      	pop	{r4, r5, r6, pc}

0801dcee <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801dcee:	4602      	mov	r2, r0
 801dcf0:	b530      	push	{r4, r5, lr}
 801dcf2:	4604      	mov	r4, r0
 801dcf4:	b085      	sub	sp, #20
 801dcf6:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801dcfa:	460d      	mov	r5, r1
 801dcfc:	466b      	mov	r3, sp
 801dcfe:	6851      	ldr	r1, [r2, #4]
 801dd00:	c303      	stmia	r3!, {r0, r1}
 801dd02:	4629      	mov	r1, r5
 801dd04:	4668      	mov	r0, sp
 801dd06:	f7f9 fcd7 	bl	80176b8 <_ZN8touchgfx4RectaNERKS0_>
 801dd0a:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801dd0e:	b12b      	cbz	r3, 801dd1c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801dd10:	4669      	mov	r1, sp
 801dd12:	4620      	mov	r0, r4
 801dd14:	f7ff ffbf 	bl	801dc96 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801dd18:	b005      	add	sp, #20
 801dd1a:	bd30      	pop	{r4, r5, pc}
 801dd1c:	3404      	adds	r4, #4
 801dd1e:	a802      	add	r0, sp, #8
 801dd20:	4621      	mov	r1, r4
 801dd22:	f7ff f947 	bl	801cfb4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801dd26:	f8bd 3000 	ldrh.w	r3, [sp]
 801dd2a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801dd2e:	4669      	mov	r1, sp
 801dd30:	4620      	mov	r0, r4
 801dd32:	1a9b      	subs	r3, r3, r2
 801dd34:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801dd38:	f8ad 3000 	strh.w	r3, [sp]
 801dd3c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801dd40:	1a9b      	subs	r3, r3, r2
 801dd42:	f8ad 3002 	strh.w	r3, [sp, #2]
 801dd46:	f7f9 fd56 	bl	80177f6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801dd4a:	e7e5      	b.n	801dd18 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801dd4c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801dd4c:	460b      	mov	r3, r1
 801dd4e:	680a      	ldr	r2, [r1, #0]
 801dd50:	1d01      	adds	r1, r0, #4
 801dd52:	6992      	ldr	r2, [r2, #24]
 801dd54:	4618      	mov	r0, r3
 801dd56:	4710      	bx	r2

0801dd58 <_ZN8touchgfx12TextProviderC1Ev>:
 801dd58:	b538      	push	{r3, r4, r5, lr}
 801dd5a:	2500      	movs	r5, #0
 801dd5c:	2302      	movs	r3, #2
 801dd5e:	4604      	mov	r4, r0
 801dd60:	220e      	movs	r2, #14
 801dd62:	7403      	strb	r3, [r0, #16]
 801dd64:	4629      	mov	r1, r5
 801dd66:	6145      	str	r5, [r0, #20]
 801dd68:	7605      	strb	r5, [r0, #24]
 801dd6a:	83c5      	strh	r5, [r0, #30]
 801dd6c:	8405      	strh	r5, [r0, #32]
 801dd6e:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801dd70:	8705      	strh	r5, [r0, #56]	@ 0x38
 801dd72:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 801dd74:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 801dd78:	e9c0 5500 	strd	r5, r5, [r0]
 801dd7c:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 801dd80:	304c      	adds	r0, #76	@ 0x4c
 801dd82:	f00c fc21 	bl	802a5c8 <memset>
 801dd86:	2301      	movs	r3, #1
 801dd88:	4620      	mov	r0, r4
 801dd8a:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 801dd8e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801dd92:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 801dd96:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 801dd9a:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 801dd9e:	f7f6 fb4f 	bl	8014440 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801dda2:	4620      	mov	r0, r4
 801dda4:	bd38      	pop	{r3, r4, r5, pc}

0801dda6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801dda6:	b530      	push	{r4, r5, lr}
 801dda8:	2500      	movs	r5, #0
 801ddaa:	2401      	movs	r4, #1
 801ddac:	6843      	ldr	r3, [r0, #4]
 801ddae:	b913      	cbnz	r3, 801ddb6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801ddb0:	6803      	ldr	r3, [r0, #0]
 801ddb2:	b313      	cbz	r3, 801ddfa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801ddb4:	6043      	str	r3, [r0, #4]
 801ddb6:	7e03      	ldrb	r3, [r0, #24]
 801ddb8:	b143      	cbz	r3, 801ddcc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801ddba:	6943      	ldr	r3, [r0, #20]
 801ddbc:	b12b      	cbz	r3, 801ddca <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801ddbe:	881a      	ldrh	r2, [r3, #0]
 801ddc0:	b11a      	cbz	r2, 801ddca <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801ddc2:	1c9a      	adds	r2, r3, #2
 801ddc4:	6142      	str	r2, [r0, #20]
 801ddc6:	8818      	ldrh	r0, [r3, #0]
 801ddc8:	bd30      	pop	{r4, r5, pc}
 801ddca:	7605      	strb	r5, [r0, #24]
 801ddcc:	6843      	ldr	r3, [r0, #4]
 801ddce:	8819      	ldrh	r1, [r3, #0]
 801ddd0:	b199      	cbz	r1, 801ddfa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801ddd2:	1c9a      	adds	r2, r3, #2
 801ddd4:	2902      	cmp	r1, #2
 801ddd6:	6042      	str	r2, [r0, #4]
 801ddd8:	d1f5      	bne.n	801ddc6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801ddda:	7c03      	ldrb	r3, [r0, #16]
 801dddc:	2b01      	cmp	r3, #1
 801ddde:	d8e5      	bhi.n	801ddac <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801dde0:	1c5a      	adds	r2, r3, #1
 801dde2:	3302      	adds	r3, #2
 801dde4:	7402      	strb	r2, [r0, #16]
 801dde6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801ddea:	6143      	str	r3, [r0, #20]
 801ddec:	2b00      	cmp	r3, #0
 801ddee:	d0dd      	beq.n	801ddac <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ddf0:	881b      	ldrh	r3, [r3, #0]
 801ddf2:	2b00      	cmp	r3, #0
 801ddf4:	d0da      	beq.n	801ddac <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ddf6:	7604      	strb	r4, [r0, #24]
 801ddf8:	e7d8      	b.n	801ddac <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ddfa:	2000      	movs	r0, #0
 801ddfc:	e7e4      	b.n	801ddc8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801ddfe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801ddfe:	6001      	str	r1, [r0, #0]
 801de00:	2100      	movs	r1, #0
 801de02:	b430      	push	{r4, r5}
 801de04:	6041      	str	r1, [r0, #4]
 801de06:	6815      	ldr	r5, [r2, #0]
 801de08:	6085      	str	r5, [r0, #8]
 801de0a:	6852      	ldr	r2, [r2, #4]
 801de0c:	6443      	str	r3, [r0, #68]	@ 0x44
 801de0e:	9b02      	ldr	r3, [sp, #8]
 801de10:	60c2      	str	r2, [r0, #12]
 801de12:	7401      	strb	r1, [r0, #16]
 801de14:	6141      	str	r1, [r0, #20]
 801de16:	7601      	strb	r1, [r0, #24]
 801de18:	8701      	strh	r1, [r0, #56]	@ 0x38
 801de1a:	8401      	strh	r1, [r0, #32]
 801de1c:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 801de20:	6483      	str	r3, [r0, #72]	@ 0x48
 801de22:	bc30      	pop	{r4, r5}
 801de24:	f7f6 bb0c 	b.w	8014440 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801de28 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801de28:	b5f0      	push	{r4, r5, r6, r7, lr}
 801de2a:	4605      	mov	r5, r0
 801de2c:	4608      	mov	r0, r1
 801de2e:	b1f1      	cbz	r1, 801de6e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801de30:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 801de34:	460b      	mov	r3, r1
 801de36:	f101 0708 	add.w	r7, r1, #8
 801de3a:	4622      	mov	r2, r4
 801de3c:	6818      	ldr	r0, [r3, #0]
 801de3e:	3308      	adds	r3, #8
 801de40:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801de44:	4626      	mov	r6, r4
 801de46:	42bb      	cmp	r3, r7
 801de48:	c603      	stmia	r6!, {r0, r1}
 801de4a:	4634      	mov	r4, r6
 801de4c:	d1f6      	bne.n	801de3c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801de4e:	6818      	ldr	r0, [r3, #0]
 801de50:	6030      	str	r0, [r6, #0]
 801de52:	4610      	mov	r0, r2
 801de54:	889b      	ldrh	r3, [r3, #4]
 801de56:	80b3      	strh	r3, [r6, #4]
 801de58:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 801de5c:	015b      	lsls	r3, r3, #5
 801de5e:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801de62:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 801de66:	430b      	orrs	r3, r1
 801de68:	425b      	negs	r3, r3
 801de6a:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801de6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801de70 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801de70:	b538      	push	{r3, r4, r5, lr}
 801de72:	460c      	mov	r4, r1
 801de74:	6811      	ldr	r1, [r2, #0]
 801de76:	4610      	mov	r0, r2
 801de78:	68cd      	ldr	r5, [r1, #12]
 801de7a:	4619      	mov	r1, r3
 801de7c:	47a8      	blx	r5
 801de7e:	2800      	cmp	r0, #0
 801de80:	bf08      	it	eq
 801de82:	4620      	moveq	r0, r4
 801de84:	bd38      	pop	{r3, r4, r5, pc}
	...

0801de88 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801de88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801de8c:	468c      	mov	ip, r1
 801de8e:	4604      	mov	r4, r0
 801de90:	4615      	mov	r5, r2
 801de92:	b942      	cbnz	r2, 801dea6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 801de94:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 801de98:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 801de9c:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 801dea0:	4628      	mov	r0, r5
 801dea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dea6:	7b50      	ldrb	r0, [r2, #13]
 801dea8:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 801deac:	8893      	ldrh	r3, [r2, #4]
 801deae:	0106      	lsls	r6, r0, #4
 801deb0:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801deb4:	79ee      	ldrb	r6, [r5, #7]
 801deb6:	4316      	orrs	r6, r2
 801deb8:	185a      	adds	r2, r3, r1
 801deba:	b291      	uxth	r1, r2
 801debc:	b2b7      	uxth	r7, r6
 801debe:	291d      	cmp	r1, #29
 801dec0:	d87f      	bhi.n	801dfc2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 801dec2:	2201      	movs	r2, #1
 801dec4:	10f6      	asrs	r6, r6, #3
 801dec6:	408a      	lsls	r2, r1
 801dec8:	4974      	ldr	r1, [pc, #464]	@ (801e09c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801deca:	420a      	tst	r2, r1
 801decc:	d12e      	bne.n	801df2c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801dece:	f412 7f60 	tst.w	r2, #896	@ 0x380
 801ded2:	d076      	beq.n	801dfc2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 801ded4:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 801ded8:	462b      	mov	r3, r5
 801deda:	f105 0e08 	add.w	lr, r5, #8
 801dede:	4615      	mov	r5, r2
 801dee0:	6818      	ldr	r0, [r3, #0]
 801dee2:	3308      	adds	r3, #8
 801dee4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801dee8:	4694      	mov	ip, r2
 801deea:	4573      	cmp	r3, lr
 801deec:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801def0:	4662      	mov	r2, ip
 801def2:	d1f5      	bne.n	801dee0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801def4:	6818      	ldr	r0, [r3, #0]
 801def6:	f8cc 0000 	str.w	r0, [ip]
 801defa:	889b      	ldrh	r3, [r3, #4]
 801defc:	f8ac 3004 	strh.w	r3, [ip, #4]
 801df00:	b2b3      	uxth	r3, r6
 801df02:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 801df06:	f894 0059 	ldrb.w	r0, [r4, #89]	@ 0x59
 801df0a:	1aca      	subs	r2, r1, r3
 801df0c:	1bcf      	subs	r7, r1, r7
 801df0e:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 801df12:	b292      	uxth	r2, r2
 801df14:	1afb      	subs	r3, r7, r3
 801df16:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 801df1a:	10d2      	asrs	r2, r2, #3
 801df1c:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 801df20:	4302      	orrs	r2, r0
 801df22:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 801df26:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801df2a:	e7b9      	b.n	801dea0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801df2c:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 801df30:	462b      	mov	r3, r5
 801df32:	f105 0808 	add.w	r8, r5, #8
 801df36:	4615      	mov	r5, r2
 801df38:	6818      	ldr	r0, [r3, #0]
 801df3a:	3308      	adds	r3, #8
 801df3c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801df40:	4696      	mov	lr, r2
 801df42:	4543      	cmp	r3, r8
 801df44:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801df48:	4672      	mov	r2, lr
 801df4a:	d1f5      	bne.n	801df38 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 801df4c:	6818      	ldr	r0, [r3, #0]
 801df4e:	f8ce 0000 	str.w	r0, [lr]
 801df52:	889b      	ldrh	r3, [r3, #4]
 801df54:	f8ae 3004 	strh.w	r3, [lr, #4]
 801df58:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801df5a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801df5e:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 801df60:	f640 6333 	movw	r3, #3635	@ 0xe33
 801df64:	4299      	cmp	r1, r3
 801df66:	d111      	bne.n	801df8c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x104>
 801df68:	f8dc 3000 	ldr.w	r3, [ip]
 801df6c:	4660      	mov	r0, ip
 801df6e:	68db      	ldr	r3, [r3, #12]
 801df70:	4798      	blx	r3
 801df72:	7b41      	ldrb	r1, [r0, #13]
 801df74:	00cb      	lsls	r3, r1, #3
 801df76:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801df7a:	7a03      	ldrb	r3, [r0, #8]
 801df7c:	4313      	orrs	r3, r2
 801df7e:	064a      	lsls	r2, r1, #25
 801df80:	bf44      	itt	mi
 801df82:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801df86:	b21b      	sxthmi	r3, r3
 801df88:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801df8c:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 801df90:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801df94:	443b      	add	r3, r7
 801df96:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801df9a:	4433      	add	r3, r6
 801df9c:	b29b      	uxth	r3, r3
 801df9e:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801dfa2:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801dfa6:	10db      	asrs	r3, r3, #3
 801dfa8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801dfac:	4313      	orrs	r3, r2
 801dfae:	f894 205e 	ldrb.w	r2, [r4, #94]	@ 0x5e
 801dfb2:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801dfb6:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 801dfba:	1a9b      	subs	r3, r3, r2
 801dfbc:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
 801dfc0:	e76e      	b.n	801dea0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801dfc2:	f023 0204 	bic.w	r2, r3, #4
 801dfc6:	f640 611b 	movw	r1, #3611	@ 0xe1b
 801dfca:	428a      	cmp	r2, r1
 801dfcc:	d003      	beq.n	801dfd6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 801dfce:	f640 621d 	movw	r2, #3613	@ 0xe1d
 801dfd2:	4293      	cmp	r3, r2
 801dfd4:	d120      	bne.n	801e018 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x190>
 801dfd6:	3b01      	subs	r3, #1
 801dfd8:	4662      	mov	r2, ip
 801dfda:	4629      	mov	r1, r5
 801dfdc:	4620      	mov	r0, r4
 801dfde:	b29b      	uxth	r3, r3
 801dfe0:	f7ff ff46 	bl	801de70 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801dfe4:	7b41      	ldrb	r1, [r0, #13]
 801dfe6:	00cb      	lsls	r3, r1, #3
 801dfe8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801dfec:	7a03      	ldrb	r3, [r0, #8]
 801dfee:	0648      	lsls	r0, r1, #25
 801dff0:	ea43 0302 	orr.w	r3, r3, r2
 801dff4:	bf44      	itt	mi
 801dff6:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801dffa:	b21b      	sxthmi	r3, r3
 801dffc:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801e000:	7b6b      	ldrb	r3, [r5, #13]
 801e002:	7aaa      	ldrb	r2, [r5, #10]
 801e004:	005b      	lsls	r3, r3, #1
 801e006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801e00a:	4313      	orrs	r3, r2
 801e00c:	115a      	asrs	r2, r3, #5
 801e00e:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801e012:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801e016:	e032      	b.n	801e07e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f6>
 801e018:	00c2      	lsls	r2, r0, #3
 801e01a:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 801e01e:	7a2a      	ldrb	r2, [r5, #8]
 801e020:	430a      	orrs	r2, r1
 801e022:	0641      	lsls	r1, r0, #25
 801e024:	f640 6109 	movw	r1, #3593	@ 0xe09
 801e028:	bf44      	itt	mi
 801e02a:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 801e02e:	b212      	sxthmi	r2, r2
 801e030:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 801e034:	f023 0210 	bic.w	r2, r3, #16
 801e038:	428a      	cmp	r2, r1
 801e03a:	d003      	beq.n	801e044 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1bc>
 801e03c:	f640 6213 	movw	r2, #3603	@ 0xe13
 801e040:	4293      	cmp	r3, r2
 801e042:	d129      	bne.n	801e098 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x210>
 801e044:	7b6e      	ldrb	r6, [r5, #13]
 801e046:	4629      	mov	r1, r5
 801e048:	4620      	mov	r0, r4
 801e04a:	0076      	lsls	r6, r6, #1
 801e04c:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801e050:	7aae      	ldrb	r6, [r5, #10]
 801e052:	4316      	orrs	r6, r2
 801e054:	f640 6213 	movw	r2, #3603	@ 0xe13
 801e058:	4293      	cmp	r3, r2
 801e05a:	4662      	mov	r2, ip
 801e05c:	bf16      	itet	ne
 801e05e:	f103 33ff 	addne.w	r3, r3, #4294967295
 801e062:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 801e066:	b29b      	uxthne	r3, r3
 801e068:	f7ff ff02 	bl	801de70 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801e06c:	7b43      	ldrb	r3, [r0, #13]
 801e06e:	7a82      	ldrb	r2, [r0, #10]
 801e070:	005b      	lsls	r3, r3, #1
 801e072:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801e076:	4313      	orrs	r3, r2
 801e078:	1af6      	subs	r6, r6, r3
 801e07a:	f8a4 605e 	strh.w	r6, [r4, #94]	@ 0x5e
 801e07e:	7b69      	ldrb	r1, [r5, #13]
 801e080:	00cb      	lsls	r3, r1, #3
 801e082:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801e086:	7a2b      	ldrb	r3, [r5, #8]
 801e088:	4313      	orrs	r3, r2
 801e08a:	064a      	lsls	r2, r1, #25
 801e08c:	bf44      	itt	mi
 801e08e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801e092:	b21b      	sxthmi	r3, r3
 801e094:	1bdb      	subs	r3, r3, r7
 801e096:	e746      	b.n	801df26 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801e098:	2300      	movs	r3, #0
 801e09a:	e7ba      	b.n	801e012 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18a>
 801e09c:	3fc00079 	.word	0x3fc00079

0801e0a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801e0a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e0a4:	4604      	mov	r4, r0
 801e0a6:	b942      	cbnz	r2, 801e0ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801e0a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801e0ac:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 801e0b0:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 801e0b4:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801e0b8:	e047      	b.n	801e14a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801e0ba:	7b51      	ldrb	r1, [r2, #13]
 801e0bc:	8893      	ldrh	r3, [r2, #4]
 801e0be:	010d      	lsls	r5, r1, #4
 801e0c0:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 801e0c4:	79d5      	ldrb	r5, [r2, #7]
 801e0c6:	4305      	orrs	r5, r0
 801e0c8:	2d04      	cmp	r5, #4
 801e0ca:	bfcc      	ite	gt
 801e0cc:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801e0d0:	f04f 0e01 	movle.w	lr, #1
 801e0d4:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 801e0d8:	f200 80ab 	bhi.w	801e232 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801e0dc:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 801e0e0:	4283      	cmp	r3, r0
 801e0e2:	d216      	bcs.n	801e112 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e0e4:	f240 605b 	movw	r0, #1627	@ 0x65b
 801e0e8:	4283      	cmp	r3, r0
 801e0ea:	d859      	bhi.n	801e1a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801e0ec:	f240 6057 	movw	r0, #1623	@ 0x657
 801e0f0:	4283      	cmp	r3, r0
 801e0f2:	d20e      	bcs.n	801e112 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e0f4:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801e0f8:	d24a      	bcs.n	801e190 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801e0fa:	f240 604e 	movw	r0, #1614	@ 0x64e
 801e0fe:	4283      	cmp	r3, r0
 801e100:	d207      	bcs.n	801e112 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e102:	f240 601a 	movw	r0, #1562	@ 0x61a
 801e106:	4283      	cmp	r3, r0
 801e108:	d02a      	beq.n	801e160 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801e10a:	d821      	bhi.n	801e150 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801e10c:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 801e110:	d35b      	bcc.n	801e1ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801e112:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 801e116:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801e11a:	f040 80d0 	bne.w	801e2be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801e11e:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 801e122:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801e126:	f040 80ca 	bne.w	801e2be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801e12a:	00cb      	lsls	r3, r1, #3
 801e12c:	0649      	lsls	r1, r1, #25
 801e12e:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801e132:	7a13      	ldrb	r3, [r2, #8]
 801e134:	ea43 0300 	orr.w	r3, r3, r0
 801e138:	bf44      	itt	mi
 801e13a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801e13e:	b21b      	sxthmi	r3, r3
 801e140:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801e144:	1b5d      	subs	r5, r3, r5
 801e146:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801e14a:	4610      	mov	r0, r2
 801e14c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e150:	f240 604b 	movw	r0, #1611	@ 0x64b
 801e154:	4283      	cmp	r3, r0
 801e156:	d338      	bcc.n	801e1ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801e158:	f240 604c 	movw	r0, #1612	@ 0x64c
 801e15c:	4283      	cmp	r3, r0
 801e15e:	d9d8      	bls.n	801e112 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e160:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 801e164:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 801e168:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801e16c:	f040 80f3 	bne.w	801e356 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801e170:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801e174:	f040 80ef 	bne.w	801e356 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801e178:	00cb      	lsls	r3, r1, #3
 801e17a:	064e      	lsls	r6, r1, #25
 801e17c:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801e180:	7a13      	ldrb	r3, [r2, #8]
 801e182:	ea43 0300 	orr.w	r3, r3, r0
 801e186:	bf44      	itt	mi
 801e188:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801e18c:	b21b      	sxthmi	r3, r3
 801e18e:	e7d9      	b.n	801e144 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801e190:	f240 6054 	movw	r0, #1620	@ 0x654
 801e194:	4283      	cmp	r3, r0
 801e196:	d8e3      	bhi.n	801e160 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801e198:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801e19c:	d9e0      	bls.n	801e160 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801e19e:	e7b8      	b.n	801e112 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e1a0:	f240 6074 	movw	r0, #1652	@ 0x674
 801e1a4:	4283      	cmp	r3, r0
 801e1a6:	d0b4      	beq.n	801e112 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e1a8:	d82d      	bhi.n	801e206 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801e1aa:	f240 605e 	movw	r0, #1630	@ 0x65e
 801e1ae:	4283      	cmp	r3, r0
 801e1b0:	d804      	bhi.n	801e1bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801e1b2:	f240 605d 	movw	r0, #1629	@ 0x65d
 801e1b6:	4283      	cmp	r3, r0
 801e1b8:	d3d2      	bcc.n	801e160 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801e1ba:	e7aa      	b.n	801e112 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e1bc:	f240 605f 	movw	r0, #1631	@ 0x65f
 801e1c0:	4283      	cmp	r3, r0
 801e1c2:	d0cd      	beq.n	801e160 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801e1c4:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 801e1c8:	d0a3      	beq.n	801e112 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e1ca:	00cb      	lsls	r3, r1, #3
 801e1cc:	0649      	lsls	r1, r1, #25
 801e1ce:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801e1d2:	7a13      	ldrb	r3, [r2, #8]
 801e1d4:	ea43 0300 	orr.w	r3, r3, r0
 801e1d8:	bf44      	itt	mi
 801e1da:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801e1de:	b21b      	sxthmi	r3, r3
 801e1e0:	1b5d      	subs	r5, r3, r5
 801e1e2:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801e1e6:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801e1ea:	7b53      	ldrb	r3, [r2, #13]
 801e1ec:	015b      	lsls	r3, r3, #5
 801e1ee:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801e1f2:	7993      	ldrb	r3, [r2, #6]
 801e1f4:	430b      	orrs	r3, r1
 801e1f6:	2105      	movs	r1, #5
 801e1f8:	005b      	lsls	r3, r3, #1
 801e1fa:	fb93 f3f1 	sdiv	r3, r3, r1
 801e1fe:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801e202:	440b      	add	r3, r1
 801e204:	e756      	b.n	801e0b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801e206:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 801e20a:	4283      	cmp	r3, r0
 801e20c:	d809      	bhi.n	801e222 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801e20e:	f240 60df 	movw	r0, #1759	@ 0x6df
 801e212:	4283      	cmp	r3, r0
 801e214:	f4bf af7d 	bcs.w	801e112 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e218:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 801e21c:	2b05      	cmp	r3, #5
 801e21e:	d8d4      	bhi.n	801e1ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801e220:	e777      	b.n	801e112 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e222:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 801e226:	4283      	cmp	r3, r0
 801e228:	d09a      	beq.n	801e160 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801e22a:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 801e22e:	4283      	cmp	r3, r0
 801e230:	e7ca      	b.n	801e1c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801e232:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 801e236:	d22b      	bcs.n	801e290 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801e238:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 801e23c:	4283      	cmp	r3, r0
 801e23e:	d28f      	bcs.n	801e160 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801e240:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801e244:	4283      	cmp	r3, r0
 801e246:	d816      	bhi.n	801e276 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801e248:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 801e24c:	4283      	cmp	r3, r0
 801e24e:	f4bf af60 	bcs.w	801e112 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e252:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 801e256:	4283      	cmp	r3, r0
 801e258:	d80a      	bhi.n	801e270 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801e25a:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 801e25e:	4283      	cmp	r3, r0
 801e260:	f4bf af57 	bcs.w	801e112 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e264:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 801e268:	4283      	cmp	r3, r0
 801e26a:	f43f af79 	beq.w	801e160 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801e26e:	e7ac      	b.n	801e1ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801e270:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 801e274:	e7f8      	b.n	801e268 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801e276:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 801e27a:	4283      	cmp	r3, r0
 801e27c:	d802      	bhi.n	801e284 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801e27e:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801e282:	e798      	b.n	801e1b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801e284:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 801e288:	4283      	cmp	r3, r0
 801e28a:	f47f af42 	bne.w	801e112 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e28e:	e767      	b.n	801e160 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801e290:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 801e294:	4283      	cmp	r3, r0
 801e296:	f43f af63 	beq.w	801e160 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801e29a:	d802      	bhi.n	801e2a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801e29c:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 801e2a0:	e7f2      	b.n	801e288 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801e2a2:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 801e2a6:	4283      	cmp	r3, r0
 801e2a8:	d805      	bhi.n	801e2b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801e2aa:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 801e2ae:	4283      	cmp	r3, r0
 801e2b0:	f4ff af2f 	bcc.w	801e112 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801e2b4:	e754      	b.n	801e160 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801e2b6:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 801e2ba:	4283      	cmp	r3, r0
 801e2bc:	e7af      	b.n	801e21e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801e2be:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801e2c2:	4617      	mov	r7, r2
 801e2c4:	f102 0808 	add.w	r8, r2, #8
 801e2c8:	4666      	mov	r6, ip
 801e2ca:	6838      	ldr	r0, [r7, #0]
 801e2cc:	3708      	adds	r7, #8
 801e2ce:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801e2d2:	46e6      	mov	lr, ip
 801e2d4:	4547      	cmp	r7, r8
 801e2d6:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801e2da:	46f4      	mov	ip, lr
 801e2dc:	d1f5      	bne.n	801e2ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801e2de:	6838      	ldr	r0, [r7, #0]
 801e2e0:	f8ce 0000 	str.w	r0, [lr]
 801e2e4:	88b9      	ldrh	r1, [r7, #4]
 801e2e6:	f8ae 1004 	strh.w	r1, [lr, #4]
 801e2ea:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801e2ee:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801e2f2:	d009      	beq.n	801e308 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801e2f4:	7b51      	ldrb	r1, [r2, #13]
 801e2f6:	7992      	ldrb	r2, [r2, #6]
 801e2f8:	0149      	lsls	r1, r1, #5
 801e2fa:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801e2fe:	4311      	orrs	r1, r2
 801e300:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801e304:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801e308:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801e30c:	b2ad      	uxth	r5, r5
 801e30e:	d00d      	beq.n	801e32c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801e310:	442b      	add	r3, r5
 801e312:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801e316:	b29b      	uxth	r3, r3
 801e318:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801e31c:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801e320:	10db      	asrs	r3, r3, #3
 801e322:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801e326:	4313      	orrs	r3, r2
 801e328:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801e32c:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801e330:	00cb      	lsls	r3, r1, #3
 801e332:	064f      	lsls	r7, r1, #25
 801e334:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801e338:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801e33c:	ea43 0302 	orr.w	r3, r3, r2
 801e340:	bf44      	itt	mi
 801e342:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801e346:	b21b      	sxthmi	r3, r3
 801e348:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801e34c:	1b5b      	subs	r3, r3, r5
 801e34e:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801e352:	4632      	mov	r2, r6
 801e354:	e6f9      	b.n	801e14a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801e356:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801e35a:	4617      	mov	r7, r2
 801e35c:	f102 0908 	add.w	r9, r2, #8
 801e360:	4666      	mov	r6, ip
 801e362:	6838      	ldr	r0, [r7, #0]
 801e364:	3708      	adds	r7, #8
 801e366:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801e36a:	46e0      	mov	r8, ip
 801e36c:	454f      	cmp	r7, r9
 801e36e:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801e372:	46c4      	mov	ip, r8
 801e374:	d1f5      	bne.n	801e362 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801e376:	6838      	ldr	r0, [r7, #0]
 801e378:	f8c8 0000 	str.w	r0, [r8]
 801e37c:	88b9      	ldrh	r1, [r7, #4]
 801e37e:	f8a8 1004 	strh.w	r1, [r8, #4]
 801e382:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801e386:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801e38a:	d009      	beq.n	801e3a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801e38c:	7b51      	ldrb	r1, [r2, #13]
 801e38e:	7992      	ldrb	r2, [r2, #6]
 801e390:	0149      	lsls	r1, r1, #5
 801e392:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801e396:	4311      	orrs	r1, r2
 801e398:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801e39c:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801e3a0:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801e3a4:	d00e      	beq.n	801e3c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801e3a6:	eba3 030e 	sub.w	r3, r3, lr
 801e3aa:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801e3ae:	b29b      	uxth	r3, r3
 801e3b0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801e3b4:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801e3b8:	10db      	asrs	r3, r3, #3
 801e3ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801e3be:	4313      	orrs	r3, r2
 801e3c0:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801e3c4:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801e3c8:	00cb      	lsls	r3, r1, #3
 801e3ca:	0648      	lsls	r0, r1, #25
 801e3cc:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801e3d0:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801e3d4:	ea43 0302 	orr.w	r3, r3, r2
 801e3d8:	bf44      	itt	mi
 801e3da:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801e3de:	b21b      	sxthmi	r3, r3
 801e3e0:	1b5d      	subs	r5, r3, r5
 801e3e2:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801e3e6:	e7b4      	b.n	801e352 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0801e3e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801e3e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e3ec:	461e      	mov	r6, r3
 801e3ee:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801e3f0:	4604      	mov	r4, r0
 801e3f2:	4617      	mov	r7, r2
 801e3f4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801e3f8:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801e3fc:	f7f5 ff7a 	bl	80142f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e400:	4605      	mov	r5, r0
 801e402:	b918      	cbnz	r0, 801e40c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801e404:	6030      	str	r0, [r6, #0]
 801e406:	4628      	mov	r0, r5
 801e408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e40c:	683b      	ldr	r3, [r7, #0]
 801e40e:	4601      	mov	r1, r0
 801e410:	4638      	mov	r0, r7
 801e412:	68db      	ldr	r3, [r3, #12]
 801e414:	4798      	blx	r3
 801e416:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801e41a:	4602      	mov	r2, r0
 801e41c:	6030      	str	r0, [r6, #0]
 801e41e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801e422:	d213      	bcs.n	801e44c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801e424:	4643      	mov	r3, r8
 801e426:	4639      	mov	r1, r7
 801e428:	4620      	mov	r0, r4
 801e42a:	f7ff fe39 	bl	801e0a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801e42e:	6030      	str	r0, [r6, #0]
 801e430:	6833      	ldr	r3, [r6, #0]
 801e432:	b143      	cbz	r3, 801e446 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801e434:	7b5a      	ldrb	r2, [r3, #13]
 801e436:	7a9b      	ldrb	r3, [r3, #10]
 801e438:	0052      	lsls	r2, r2, #1
 801e43a:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801e43e:	4313      	orrs	r3, r2
 801e440:	bf0c      	ite	eq
 801e442:	2301      	moveq	r3, #1
 801e444:	2300      	movne	r3, #0
 801e446:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801e44a:	e7dc      	b.n	801e406 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801e44c:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801e450:	b29b      	uxth	r3, r3
 801e452:	2b7f      	cmp	r3, #127	@ 0x7f
 801e454:	d804      	bhi.n	801e460 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801e456:	4639      	mov	r1, r7
 801e458:	4620      	mov	r0, r4
 801e45a:	f7ff fd15 	bl	801de88 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801e45e:	e7e6      	b.n	801e42e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801e460:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801e464:	2b00      	cmp	r3, #0
 801e466:	d0e3      	beq.n	801e430 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801e468:	f640 1302 	movw	r3, #2306	@ 0x902
 801e46c:	429d      	cmp	r5, r3
 801e46e:	d1df      	bne.n	801e430 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801e470:	4601      	mov	r1, r0
 801e472:	4620      	mov	r0, r4
 801e474:	f7ff fcd8 	bl	801de28 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801e478:	e7d9      	b.n	801e42e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801e47a <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801e47a:	b510      	push	{r4, lr}
 801e47c:	4604      	mov	r4, r0
 801e47e:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 801e482:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801e484:	b1e1      	cbz	r1, 801e4c0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801e486:	2b0a      	cmp	r3, #10
 801e488:	d02d      	beq.n	801e4e6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801e48a:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 801e48c:	3901      	subs	r1, #1
 801e48e:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801e492:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 801e494:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 801e498:	1c51      	adds	r1, r2, #1
 801e49a:	b289      	uxth	r1, r1
 801e49c:	2901      	cmp	r1, #1
 801e49e:	bf8a      	itet	hi
 801e4a0:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801e4a4:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 801e4a6:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 801e4a8:	1c5a      	adds	r2, r3, #1
 801e4aa:	8722      	strh	r2, [r4, #56]	@ 0x38
 801e4ac:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801e4ae:	4413      	add	r3, r2
 801e4b0:	b29b      	uxth	r3, r3
 801e4b2:	2b09      	cmp	r3, #9
 801e4b4:	bf88      	it	hi
 801e4b6:	3b0a      	subhi	r3, #10
 801e4b8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801e4bc:	8458      	strh	r0, [r3, #34]	@ 0x22
 801e4be:	e7de      	b.n	801e47e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801e4c0:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801e4c2:	2b0a      	cmp	r3, #10
 801e4c4:	d00f      	beq.n	801e4e6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801e4c6:	4620      	mov	r0, r4
 801e4c8:	f7ff fc6d 	bl	801dda6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801e4cc:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801e4ce:	1c5a      	adds	r2, r3, #1
 801e4d0:	8722      	strh	r2, [r4, #56]	@ 0x38
 801e4d2:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801e4d4:	4413      	add	r3, r2
 801e4d6:	b29b      	uxth	r3, r3
 801e4d8:	2b09      	cmp	r3, #9
 801e4da:	bf88      	it	hi
 801e4dc:	3b0a      	subhi	r3, #10
 801e4de:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801e4e2:	8458      	strh	r0, [r3, #34]	@ 0x22
 801e4e4:	e7ec      	b.n	801e4c0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801e4e6:	bd10      	pop	{r4, pc}

0801e4e8 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801e4e8:	b538      	push	{r3, r4, r5, lr}
 801e4ea:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801e4ec:	4604      	mov	r4, r0
 801e4ee:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801e4f2:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 801e4f4:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 801e4f6:	3a01      	subs	r2, #1
 801e4f8:	8702      	strh	r2, [r0, #56]	@ 0x38
 801e4fa:	1c5a      	adds	r2, r3, #1
 801e4fc:	b292      	uxth	r2, r2
 801e4fe:	2a09      	cmp	r2, #9
 801e500:	bf8a      	itet	hi
 801e502:	3b09      	subhi	r3, #9
 801e504:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 801e506:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 801e508:	f7ff ffb7 	bl	801e47a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801e50c:	8c23      	ldrh	r3, [r4, #32]
 801e50e:	2b01      	cmp	r3, #1
 801e510:	bf9c      	itt	ls
 801e512:	3301      	addls	r3, #1
 801e514:	8423      	strhls	r3, [r4, #32]
 801e516:	8be3      	ldrh	r3, [r4, #30]
 801e518:	b90b      	cbnz	r3, 801e51e <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801e51a:	2302      	movs	r3, #2
 801e51c:	83e3      	strh	r3, [r4, #30]
 801e51e:	8be3      	ldrh	r3, [r4, #30]
 801e520:	4628      	mov	r0, r5
 801e522:	3b01      	subs	r3, #1
 801e524:	b29b      	uxth	r3, r3
 801e526:	83e3      	strh	r3, [r4, #30]
 801e528:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e52c:	8365      	strh	r5, [r4, #26]
 801e52e:	bd38      	pop	{r3, r4, r5, pc}

0801e530 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801e530:	428a      	cmp	r2, r1
 801e532:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e536:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 801e538:	d932      	bls.n	801e5a0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801e53a:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 801e53c:	1a54      	subs	r4, r2, r1
 801e53e:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 801e542:	19ee      	adds	r6, r5, r7
 801e544:	fa1f fe84 	uxth.w	lr, r4
 801e548:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 801e54c:	3e01      	subs	r6, #1
 801e54e:	b2b4      	uxth	r4, r6
 801e550:	eba4 090e 	sub.w	r9, r4, lr
 801e554:	fa1f f989 	uxth.w	r9, r9
 801e558:	2c09      	cmp	r4, #9
 801e55a:	4626      	mov	r6, r4
 801e55c:	bf88      	it	hi
 801e55e:	f1a4 060a 	subhi.w	r6, r4, #10
 801e562:	f1bc 0f00 	cmp.w	ip, #0
 801e566:	f104 34ff 	add.w	r4, r4, #4294967295
 801e56a:	bf08      	it	eq
 801e56c:	f04f 0c02 	moveq.w	ip, #2
 801e570:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801e574:	b2a4      	uxth	r4, r4
 801e576:	f10c 3cff 	add.w	ip, ip, #4294967295
 801e57a:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 801e57e:	454c      	cmp	r4, r9
 801e580:	fa1f fc8c 	uxth.w	ip, ip
 801e584:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801e588:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 801e58c:	d1e4      	bne.n	801e558 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801e58e:	eba5 050e 	sub.w	r5, r5, lr
 801e592:	eb0e 0408 	add.w	r4, lr, r8
 801e596:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 801e59a:	8705      	strh	r5, [r0, #56]	@ 0x38
 801e59c:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 801e5a0:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 801e5a2:	250a      	movs	r5, #10
 801e5a4:	1a64      	subs	r4, r4, r1
 801e5a6:	4439      	add	r1, r7
 801e5a8:	b289      	uxth	r1, r1
 801e5aa:	8704      	strh	r4, [r0, #56]	@ 0x38
 801e5ac:	2909      	cmp	r1, #9
 801e5ae:	bf88      	it	hi
 801e5b0:	390a      	subhi	r1, #10
 801e5b2:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801e5b4:	b18a      	cbz	r2, 801e5da <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801e5b6:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 801e5b8:	3a01      	subs	r2, #1
 801e5ba:	3101      	adds	r1, #1
 801e5bc:	b292      	uxth	r2, r2
 801e5be:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801e5c2:	8701      	strh	r1, [r0, #56]	@ 0x38
 801e5c4:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801e5c6:	b901      	cbnz	r1, 801e5ca <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801e5c8:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801e5ca:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801e5cc:	3901      	subs	r1, #1
 801e5ce:	b289      	uxth	r1, r1
 801e5d0:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801e5d2:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801e5d6:	844c      	strh	r4, [r1, #34]	@ 0x22
 801e5d8:	e7ec      	b.n	801e5b4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801e5da:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e5de:	f7ff bf4c 	b.w	801e47a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801e5e2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801e5e2:	b570      	push	{r4, r5, r6, lr}
 801e5e4:	2500      	movs	r5, #0
 801e5e6:	4295      	cmp	r5, r2
 801e5e8:	d011      	beq.n	801e60e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801e5ea:	8bc4      	ldrh	r4, [r0, #30]
 801e5ec:	f831 6b02 	ldrh.w	r6, [r1], #2
 801e5f0:	4414      	add	r4, r2
 801e5f2:	3c01      	subs	r4, #1
 801e5f4:	1b64      	subs	r4, r4, r5
 801e5f6:	b2a4      	uxth	r4, r4
 801e5f8:	2c01      	cmp	r4, #1
 801e5fa:	bf88      	it	hi
 801e5fc:	3c02      	subhi	r4, #2
 801e5fe:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801e602:	8b64      	ldrh	r4, [r4, #26]
 801e604:	42b4      	cmp	r4, r6
 801e606:	d117      	bne.n	801e638 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801e608:	3501      	adds	r5, #1
 801e60a:	b2ad      	uxth	r5, r5
 801e60c:	e7eb      	b.n	801e5e6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801e60e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801e612:	2400      	movs	r4, #0
 801e614:	4413      	add	r3, r2
 801e616:	b2a2      	uxth	r2, r4
 801e618:	429a      	cmp	r2, r3
 801e61a:	da0f      	bge.n	801e63c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801e61c:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 801e61e:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801e622:	3401      	adds	r4, #1
 801e624:	4432      	add	r2, r6
 801e626:	b292      	uxth	r2, r2
 801e628:	2a09      	cmp	r2, #9
 801e62a:	bf88      	it	hi
 801e62c:	3a0a      	subhi	r2, #10
 801e62e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801e632:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 801e634:	42aa      	cmp	r2, r5
 801e636:	d0ee      	beq.n	801e616 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801e638:	2000      	movs	r0, #0
 801e63a:	bd70      	pop	{r4, r5, r6, pc}
 801e63c:	2001      	movs	r0, #1
 801e63e:	e7fc      	b.n	801e63a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801e640 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801e640:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e644:	4605      	mov	r5, r0
 801e646:	4616      	mov	r6, r2
 801e648:	1c8c      	adds	r4, r1, #2
 801e64a:	8809      	ldrh	r1, [r1, #0]
 801e64c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801e650:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801e654:	42b3      	cmp	r3, r6
 801e656:	d124      	bne.n	801e6a2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801e658:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801e65c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801e660:	f001 070f 	and.w	r7, r1, #15
 801e664:	4652      	mov	r2, sl
 801e666:	f8cd 8000 	str.w	r8, [sp]
 801e66a:	464b      	mov	r3, r9
 801e66c:	4621      	mov	r1, r4
 801e66e:	4628      	mov	r0, r5
 801e670:	f7ff ffb7 	bl	801e5e2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801e674:	4683      	mov	fp, r0
 801e676:	b168      	cbz	r0, 801e694 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801e678:	eb0a 0109 	add.w	r1, sl, r9
 801e67c:	463a      	mov	r2, r7
 801e67e:	4628      	mov	r0, r5
 801e680:	4441      	add	r1, r8
 801e682:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801e686:	4649      	mov	r1, r9
 801e688:	f7ff ff52 	bl	801e530 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801e68c:	4658      	mov	r0, fp
 801e68e:	b003      	add	sp, #12
 801e690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e694:	eb07 010a 	add.w	r1, r7, sl
 801e698:	4449      	add	r1, r9
 801e69a:	4441      	add	r1, r8
 801e69c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801e6a0:	e7d2      	b.n	801e648 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801e6a2:	f04f 0b00 	mov.w	fp, #0
 801e6a6:	e7f1      	b.n	801e68c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801e6a8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801e6a8:	b570      	push	{r4, r5, r6, lr}
 801e6aa:	8810      	ldrh	r0, [r2, #0]
 801e6ac:	4298      	cmp	r0, r3
 801e6ae:	d817      	bhi.n	801e6e0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801e6b0:	1e48      	subs	r0, r1, #1
 801e6b2:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801e6b6:	4298      	cmp	r0, r3
 801e6b8:	d312      	bcc.n	801e6e0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801e6ba:	2400      	movs	r4, #0
 801e6bc:	428c      	cmp	r4, r1
 801e6be:	d20f      	bcs.n	801e6e0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801e6c0:	1860      	adds	r0, r4, r1
 801e6c2:	1040      	asrs	r0, r0, #1
 801e6c4:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801e6c8:	0085      	lsls	r5, r0, #2
 801e6ca:	42b3      	cmp	r3, r6
 801e6cc:	d902      	bls.n	801e6d4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801e6ce:	3001      	adds	r0, #1
 801e6d0:	b284      	uxth	r4, r0
 801e6d2:	e7f3      	b.n	801e6bc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801e6d4:	d201      	bcs.n	801e6da <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801e6d6:	b281      	uxth	r1, r0
 801e6d8:	e7f0      	b.n	801e6bc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801e6da:	442a      	add	r2, r5
 801e6dc:	8850      	ldrh	r0, [r2, #2]
 801e6de:	bd70      	pop	{r4, r5, r6, pc}
 801e6e0:	2000      	movs	r0, #0
 801e6e2:	e7fc      	b.n	801e6de <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801e6e4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801e6e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e6e8:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 801e6ea:	4604      	mov	r4, r0
 801e6ec:	260b      	movs	r6, #11
 801e6ee:	886f      	ldrh	r7, [r5, #2]
 801e6f0:	087f      	lsrs	r7, r7, #1
 801e6f2:	3e01      	subs	r6, #1
 801e6f4:	d013      	beq.n	801e71e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801e6f6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801e6f8:	462a      	mov	r2, r5
 801e6fa:	4639      	mov	r1, r7
 801e6fc:	4620      	mov	r0, r4
 801e6fe:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801e702:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801e706:	4643      	mov	r3, r8
 801e708:	f7ff ffce 	bl	801e6a8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801e70c:	b138      	cbz	r0, 801e71e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801e70e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801e712:	4642      	mov	r2, r8
 801e714:	4620      	mov	r0, r4
 801e716:	f7ff ff93 	bl	801e640 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801e71a:	2800      	cmp	r0, #0
 801e71c:	d1e9      	bne.n	801e6f2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801e71e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801e724 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801e724:	b570      	push	{r4, r5, r6, lr}
 801e726:	694a      	ldr	r2, [r1, #20]
 801e728:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 801e72a:	684b      	ldr	r3, [r1, #4]
 801e72c:	1b54      	subs	r4, r2, r5
 801e72e:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 801e730:	f000 8106 	beq.w	801e940 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801e734:	1b9b      	subs	r3, r3, r6
 801e736:	d003      	beq.n	801e740 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801e738:	4363      	muls	r3, r4
 801e73a:	2210      	movs	r2, #16
 801e73c:	fb93 f3f2 	sdiv	r3, r3, r2
 801e740:	680c      	ldr	r4, [r1, #0]
 801e742:	698a      	ldr	r2, [r1, #24]
 801e744:	1b65      	subs	r5, r4, r5
 801e746:	f000 80fd 	beq.w	801e944 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801e74a:	1b92      	subs	r2, r2, r6
 801e74c:	d003      	beq.n	801e756 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801e74e:	436a      	muls	r2, r5
 801e750:	2410      	movs	r4, #16
 801e752:	fb92 f2f4 	sdiv	r2, r2, r4
 801e756:	1a9b      	subs	r3, r3, r2
 801e758:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 801e980 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801e75c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e760:	460a      	mov	r2, r1
 801e762:	ee07 3a90 	vmov	s15, r3
 801e766:	f100 040c 	add.w	r4, r0, #12
 801e76a:	4603      	mov	r3, r0
 801e76c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e770:	ee67 7a84 	vmul.f32	s15, s15, s8
 801e774:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801e778:	eeb1 6a43 	vneg.f32	s12, s6
 801e77c:	edd2 7a02 	vldr	s15, [r2, #8]
 801e780:	3214      	adds	r2, #20
 801e782:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801e786:	ece3 6a01 	vstmia	r3!, {s13}
 801e78a:	429c      	cmp	r4, r3
 801e78c:	ed52 7a02 	vldr	s15, [r2, #-8]
 801e790:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e794:	edc3 7a02 	vstr	s15, [r3, #8]
 801e798:	ed52 7a01 	vldr	s15, [r2, #-4]
 801e79c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e7a0:	edc3 7a05 	vstr	s15, [r3, #20]
 801e7a4:	d1ea      	bne.n	801e77c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801e7a6:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801e7a8:	698b      	ldr	r3, [r1, #24]
 801e7aa:	edd0 4a02 	vldr	s9, [r0, #8]
 801e7ae:	1a9b      	subs	r3, r3, r2
 801e7b0:	edd0 3a00 	vldr	s7, [r0]
 801e7b4:	edd0 6a01 	vldr	s13, [r0, #4]
 801e7b8:	ee07 3a90 	vmov	s15, r3
 801e7bc:	684b      	ldr	r3, [r1, #4]
 801e7be:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801e7c2:	ed90 5a05 	vldr	s10, [r0, #20]
 801e7c6:	1a9b      	subs	r3, r3, r2
 801e7c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e7cc:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801e7d0:	ed90 2a03 	vldr	s4, [r0, #12]
 801e7d4:	ee07 3a10 	vmov	s14, r3
 801e7d8:	edd0 5a04 	vldr	s11, [r0, #16]
 801e7dc:	ee67 7a84 	vmul.f32	s15, s15, s8
 801e7e0:	ed90 1a07 	vldr	s2, [r0, #28]
 801e7e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e7e8:	edd0 2a06 	vldr	s5, [r0, #24]
 801e7ec:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801e7f0:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801e7f4:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e7f8:	ee32 5a45 	vsub.f32	s10, s4, s10
 801e7fc:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e800:	ee67 7a83 	vmul.f32	s15, s15, s6
 801e804:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 801e808:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801e80a:	694a      	ldr	r2, [r1, #20]
 801e80c:	1b13      	subs	r3, r2, r4
 801e80e:	ee07 3a10 	vmov	s14, r3
 801e812:	680b      	ldr	r3, [r1, #0]
 801e814:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e818:	1b1b      	subs	r3, r3, r4
 801e81a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e81e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801e822:	ee07 3a10 	vmov	s14, r3
 801e826:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e82a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e82e:	eee6 4a87 	vfma.f32	s9, s13, s14
 801e832:	ee64 4a86 	vmul.f32	s9, s9, s12
 801e836:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 801e83a:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801e83c:	698b      	ldr	r3, [r1, #24]
 801e83e:	1a9b      	subs	r3, r3, r2
 801e840:	ee06 3a90 	vmov	s13, r3
 801e844:	684b      	ldr	r3, [r1, #4]
 801e846:	1a9b      	subs	r3, r3, r2
 801e848:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801e84c:	ee07 3a10 	vmov	s14, r3
 801e850:	ee66 6a84 	vmul.f32	s13, s13, s8
 801e854:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e858:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801e85c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e860:	eee5 6a87 	vfma.f32	s13, s11, s14
 801e864:	ee66 6a83 	vmul.f32	s13, s13, s6
 801e868:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 801e86c:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801e86e:	694a      	ldr	r2, [r1, #20]
 801e870:	1b13      	subs	r3, r2, r4
 801e872:	ee07 3a10 	vmov	s14, r3
 801e876:	680b      	ldr	r3, [r1, #0]
 801e878:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e87c:	1b1b      	subs	r3, r3, r4
 801e87e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e882:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801e886:	ee07 3a10 	vmov	s14, r3
 801e88a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e88e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e892:	eea5 5a87 	vfma.f32	s10, s11, s14
 801e896:	edd0 5a08 	vldr	s11, [r0, #32]
 801e89a:	ee31 1a65 	vsub.f32	s2, s2, s11
 801e89e:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801e8a2:	ee25 5a06 	vmul.f32	s10, s10, s12
 801e8a6:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 801e8aa:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801e8ac:	698b      	ldr	r3, [r1, #24]
 801e8ae:	1a9b      	subs	r3, r3, r2
 801e8b0:	ee07 3a10 	vmov	s14, r3
 801e8b4:	684b      	ldr	r3, [r1, #4]
 801e8b6:	1a9b      	subs	r3, r3, r2
 801e8b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e8bc:	ee01 3a90 	vmov	s3, r3
 801e8c0:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e8c4:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801e8c8:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801e8cc:	ee61 1a84 	vmul.f32	s3, s3, s8
 801e8d0:	eea1 7a21 	vfma.f32	s14, s2, s3
 801e8d4:	ee27 7a03 	vmul.f32	s14, s14, s6
 801e8d8:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801e8dc:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801e8de:	694a      	ldr	r2, [r1, #20]
 801e8e0:	1b13      	subs	r3, r2, r4
 801e8e2:	ee03 3a10 	vmov	s6, r3
 801e8e6:	680b      	ldr	r3, [r1, #0]
 801e8e8:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801e8ec:	1b1b      	subs	r3, r3, r4
 801e8ee:	ee23 3a04 	vmul.f32	s6, s6, s8
 801e8f2:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801e8f6:	ee03 3a10 	vmov	s6, r3
 801e8fa:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801e8fe:	ee23 4a04 	vmul.f32	s8, s6, s8
 801e902:	eee1 5a04 	vfma.f32	s11, s2, s8
 801e906:	ee25 6a86 	vmul.f32	s12, s11, s12
 801e90a:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801e90e:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 801e912:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801e916:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801e91a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e91e:	dd13      	ble.n	801e948 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801e920:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801e924:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801e928:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801e92a:	eee3 7a87 	vfma.f32	s15, s7, s14
 801e92e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801e932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e936:	dd15      	ble.n	801e964 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801e938:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801e93c:	6403      	str	r3, [r0, #64]	@ 0x40
 801e93e:	bd70      	pop	{r4, r5, r6, pc}
 801e940:	4623      	mov	r3, r4
 801e942:	e6fd      	b.n	801e740 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801e944:	462a      	mov	r2, r5
 801e946:	e706      	b.n	801e756 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801e948:	d502      	bpl.n	801e950 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801e94a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801e94e:	e7e9      	b.n	801e924 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801e950:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801e954:	eea3 2a85 	vfma.f32	s4, s7, s10
 801e958:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801e95c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e960:	dade      	bge.n	801e920 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801e962:	e7f2      	b.n	801e94a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801e964:	d502      	bpl.n	801e96c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801e966:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801e96a:	e7e7      	b.n	801e93c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801e96c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801e970:	eee3 4a86 	vfma.f32	s9, s7, s12
 801e974:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801e978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e97c:	dadc      	bge.n	801e938 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801e97e:	e7f2      	b.n	801e966 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801e980:	3d800000 	.word	0x3d800000

0801e984 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801e984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e988:	2714      	movs	r7, #20
 801e98a:	435f      	muls	r7, r3
 801e98c:	eb02 0c07 	add.w	ip, r2, r7
 801e990:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801e994:	f115 0e0f 	adds.w	lr, r5, #15
 801e998:	f100 80a2 	bmi.w	801eae0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801e99c:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801e9a0:	9c08      	ldr	r4, [sp, #32]
 801e9a2:	2614      	movs	r6, #20
 801e9a4:	f8c0 e014 	str.w	lr, [r0, #20]
 801e9a8:	4366      	muls	r6, r4
 801e9aa:	eb02 0806 	add.w	r8, r2, r6
 801e9ae:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801e9b2:	f115 040f 	adds.w	r4, r5, #15
 801e9b6:	f100 809f 	bmi.w	801eaf8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801e9ba:	1124      	asrs	r4, r4, #4
 801e9bc:	eba4 040e 	sub.w	r4, r4, lr
 801e9c0:	6184      	str	r4, [r0, #24]
 801e9c2:	2c00      	cmp	r4, #0
 801e9c4:	f000 808a 	beq.w	801eadc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801e9c8:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801e9cc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801e9d0:	5995      	ldr	r5, [r2, r6]
 801e9d2:	eba4 0809 	sub.w	r8, r4, r9
 801e9d6:	59d4      	ldr	r4, [r2, r7]
 801e9d8:	eba5 0a04 	sub.w	sl, r5, r4
 801e9dc:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801e9e0:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801e9e4:	fb0e fe05 	mul.w	lr, lr, r5
 801e9e8:	fb0a ee19 	mls	lr, sl, r9, lr
 801e9ec:	fb08 e404 	mla	r4, r8, r4, lr
 801e9f0:	3c01      	subs	r4, #1
 801e9f2:	19a4      	adds	r4, r4, r6
 801e9f4:	f100 808c 	bmi.w	801eb10 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801e9f8:	fb94 fef6 	sdiv	lr, r4, r6
 801e9fc:	fb06 441e 	mls	r4, r6, lr, r4
 801ea00:	f8c0 e000 	str.w	lr, [r0]
 801ea04:	6104      	str	r4, [r0, #16]
 801ea06:	2d00      	cmp	r5, #0
 801ea08:	f2c0 8095 	blt.w	801eb36 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801ea0c:	fb95 f4f6 	sdiv	r4, r5, r6
 801ea10:	fb06 5514 	mls	r5, r6, r4, r5
 801ea14:	6044      	str	r4, [r0, #4]
 801ea16:	6085      	str	r5, [r0, #8]
 801ea18:	60c6      	str	r6, [r0, #12]
 801ea1a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801ea1e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801ea22:	6945      	ldr	r5, [r0, #20]
 801ea24:	59d2      	ldr	r2, [r2, r7]
 801ea26:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801ea2a:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 801eb58 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801ea2e:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801ea32:	ee07 4a10 	vmov	s14, r4
 801ea36:	6804      	ldr	r4, [r0, #0]
 801ea38:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801ea3c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ea40:	ee07 2a90 	vmov	s15, r2
 801ea44:	ee27 7a26 	vmul.f32	s14, s14, s13
 801ea48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ea4c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ea50:	edd3 6a00 	vldr	s13, [r3]
 801ea54:	eee6 6a07 	vfma.f32	s13, s12, s14
 801ea58:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 801ea5c:	eee6 6a27 	vfma.f32	s13, s12, s15
 801ea60:	edc0 6a07 	vstr	s13, [r0, #28]
 801ea64:	edd0 6a01 	vldr	s13, [r0, #4]
 801ea68:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 801ea6c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801ea70:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801ea74:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801ea78:	ed80 6a08 	vstr	s12, [r0, #32]
 801ea7c:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801ea7e:	6242      	str	r2, [r0, #36]	@ 0x24
 801ea80:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 801ea84:	ed93 6a03 	vldr	s12, [r3, #12]
 801ea88:	eea5 6a87 	vfma.f32	s12, s11, s14
 801ea8c:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801ea90:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801ea94:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 801ea98:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801ea9c:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 801eaa0:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801eaa4:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 801eaa8:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801eaaa:	6302      	str	r2, [r0, #48]	@ 0x30
 801eaac:	ed93 6a06 	vldr	s12, [r3, #24]
 801eab0:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 801eab4:	eea5 6a87 	vfma.f32	s12, s11, s14
 801eab8:	eeb0 7a46 	vmov.f32	s14, s12
 801eabc:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 801eac0:	eea6 7a27 	vfma.f32	s14, s12, s15
 801eac4:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801eac8:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 801eacc:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 801ead0:	eee6 7a87 	vfma.f32	s15, s13, s14
 801ead4:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 801ead8:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801eada:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801eadc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eae0:	2410      	movs	r4, #16
 801eae2:	f1c5 0501 	rsb	r5, r5, #1
 801eae6:	fb9e fef4 	sdiv	lr, lr, r4
 801eaea:	f015 050f 	ands.w	r5, r5, #15
 801eaee:	bf18      	it	ne
 801eaf0:	2501      	movne	r5, #1
 801eaf2:	ebae 0e05 	sub.w	lr, lr, r5
 801eaf6:	e753      	b.n	801e9a0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801eaf8:	f04f 0910 	mov.w	r9, #16
 801eafc:	f1c5 0501 	rsb	r5, r5, #1
 801eb00:	fb94 f4f9 	sdiv	r4, r4, r9
 801eb04:	f015 050f 	ands.w	r5, r5, #15
 801eb08:	bf18      	it	ne
 801eb0a:	2501      	movne	r5, #1
 801eb0c:	1b64      	subs	r4, r4, r5
 801eb0e:	e755      	b.n	801e9bc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801eb10:	4264      	negs	r4, r4
 801eb12:	fb94 fef6 	sdiv	lr, r4, r6
 801eb16:	f1ce 0800 	rsb	r8, lr, #0
 801eb1a:	fb06 441e 	mls	r4, r6, lr, r4
 801eb1e:	f8c0 8000 	str.w	r8, [r0]
 801eb22:	6104      	str	r4, [r0, #16]
 801eb24:	2c00      	cmp	r4, #0
 801eb26:	f43f af6e 	beq.w	801ea06 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801eb2a:	ea6f 0e0e 	mvn.w	lr, lr
 801eb2e:	1b34      	subs	r4, r6, r4
 801eb30:	f8c0 e000 	str.w	lr, [r0]
 801eb34:	e766      	b.n	801ea04 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801eb36:	426d      	negs	r5, r5
 801eb38:	fb95 f4f6 	sdiv	r4, r5, r6
 801eb3c:	f1c4 0e00 	rsb	lr, r4, #0
 801eb40:	fb06 5514 	mls	r5, r6, r4, r5
 801eb44:	f8c0 e004 	str.w	lr, [r0, #4]
 801eb48:	6085      	str	r5, [r0, #8]
 801eb4a:	2d00      	cmp	r5, #0
 801eb4c:	f43f af64 	beq.w	801ea18 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801eb50:	43e4      	mvns	r4, r4
 801eb52:	1b75      	subs	r5, r6, r5
 801eb54:	6044      	str	r4, [r0, #4]
 801eb56:	e75e      	b.n	801ea16 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801eb58:	3d800000 	.word	0x3d800000

0801eb5c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801eb5c:	4b01      	ldr	r3, [pc, #4]	@ (801eb64 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801eb5e:	6018      	str	r0, [r3, #0]
 801eb60:	4770      	bx	lr
 801eb62:	bf00      	nop
 801eb64:	24013bc0 	.word	0x24013bc0

0801eb68 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801eb68:	4b06      	ldr	r3, [pc, #24]	@ (801eb84 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801eb6a:	881a      	ldrh	r2, [r3, #0]
 801eb6c:	4282      	cmp	r2, r0
 801eb6e:	d807      	bhi.n	801eb80 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801eb70:	4b05      	ldr	r3, [pc, #20]	@ (801eb88 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801eb72:	881b      	ldrh	r3, [r3, #0]
 801eb74:	4413      	add	r3, r2
 801eb76:	4298      	cmp	r0, r3
 801eb78:	bfac      	ite	ge
 801eb7a:	2000      	movge	r0, #0
 801eb7c:	2001      	movlt	r0, #1
 801eb7e:	4770      	bx	lr
 801eb80:	2000      	movs	r0, #0
 801eb82:	4770      	bx	lr
 801eb84:	24013be0 	.word	0x24013be0
 801eb88:	24013be4 	.word	0x24013be4

0801eb8c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801eb8c:	b508      	push	{r3, lr}
 801eb8e:	4601      	mov	r1, r0
 801eb90:	f7ff ffea 	bl	801eb68 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801eb94:	b118      	cbz	r0, 801eb9e <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801eb96:	4b02      	ldr	r3, [pc, #8]	@ (801eba0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801eb98:	681b      	ldr	r3, [r3, #0]
 801eb9a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801eb9e:	bd08      	pop	{r3, pc}
 801eba0:	24013bc4 	.word	0x24013bc4

0801eba4 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 801eba4:	b538      	push	{r3, r4, r5, lr}
 801eba6:	4604      	mov	r4, r0
 801eba8:	f7ff ffde 	bl	801eb68 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801ebac:	b1d8      	cbz	r0, 801ebe6 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 801ebae:	4b0f      	ldr	r3, [pc, #60]	@ (801ebec <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x48>)
 801ebb0:	881b      	ldrh	r3, [r3, #0]
 801ebb2:	1ae4      	subs	r4, r4, r3
 801ebb4:	230e      	movs	r3, #14
 801ebb6:	4363      	muls	r3, r4
 801ebb8:	4c0d      	ldr	r4, [pc, #52]	@ (801ebf0 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x4c>)
 801ebba:	6825      	ldr	r5, [r4, #0]
 801ebbc:	18ea      	adds	r2, r5, r3
 801ebbe:	7b12      	ldrb	r2, [r2, #12]
 801ebc0:	f012 0220 	ands.w	r2, r2, #32
 801ebc4:	d010      	beq.n	801ebe8 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x44>
 801ebc6:	f9b1 2000 	ldrsh.w	r2, [r1]
 801ebca:	52ea      	strh	r2, [r5, r3]
 801ebcc:	6822      	ldr	r2, [r4, #0]
 801ebce:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801ebd2:	441a      	add	r2, r3
 801ebd4:	8055      	strh	r5, [r2, #2]
 801ebd6:	6822      	ldr	r2, [r4, #0]
 801ebd8:	4413      	add	r3, r2
 801ebda:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 801ebde:	809a      	strh	r2, [r3, #4]
 801ebe0:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 801ebe4:	80da      	strh	r2, [r3, #6]
 801ebe6:	bd38      	pop	{r3, r4, r5, pc}
 801ebe8:	4610      	mov	r0, r2
 801ebea:	e7fc      	b.n	801ebe6 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 801ebec:	24013be0 	.word	0x24013be0
 801ebf0:	24013bc8 	.word	0x24013bc8

0801ebf4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 801ebf4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801ebf8:	4606      	mov	r6, r0
 801ebfa:	460c      	mov	r4, r1
 801ebfc:	f7ff ffb4 	bl	801eb68 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801ec00:	b918      	cbnz	r0, 801ec0a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 801ec02:	2000      	movs	r0, #0
 801ec04:	b002      	add	sp, #8
 801ec06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ec0a:	4608      	mov	r0, r1
 801ec0c:	f7f8 fd97 	bl	801773e <_ZNK8touchgfx4Rect7isEmptyEv>
 801ec10:	2800      	cmp	r0, #0
 801ec12:	d1f6      	bne.n	801ec02 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801ec14:	4b3f      	ldr	r3, [pc, #252]	@ (801ed14 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 801ec16:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 801ed18 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 801ec1a:	881d      	ldrh	r5, [r3, #0]
 801ec1c:	f8d9 a000 	ldr.w	sl, [r9]
 801ec20:	46c8      	mov	r8, r9
 801ec22:	1b73      	subs	r3, r6, r5
 801ec24:	250e      	movs	r5, #14
 801ec26:	435d      	muls	r5, r3
 801ec28:	eb0a 0705 	add.w	r7, sl, r5
 801ec2c:	7b3b      	ldrb	r3, [r7, #12]
 801ec2e:	f013 0f20 	tst.w	r3, #32
 801ec32:	d0e6      	beq.n	801ec02 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801ec34:	4621      	mov	r1, r4
 801ec36:	4638      	mov	r0, r7
 801ec38:	f7fd f83c 	bl	801bcb4 <_ZNK8touchgfx4Rect8includesERKS0_>
 801ec3c:	2800      	cmp	r0, #0
 801ec3e:	d1e1      	bne.n	801ec04 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801ec40:	4639      	mov	r1, r7
 801ec42:	4620      	mov	r0, r4
 801ec44:	f7fd f836 	bl	801bcb4 <_ZNK8touchgfx4Rect8includesERKS0_>
 801ec48:	b108      	cbz	r0, 801ec4e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 801ec4a:	4621      	mov	r1, r4
 801ec4c:	e020      	b.n	801ec90 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 801ec4e:	f9b4 2000 	ldrsh.w	r2, [r4]
 801ec52:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 801ec56:	429a      	cmp	r2, r3
 801ec58:	d11e      	bne.n	801ec98 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801ec5a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801ec5e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801ec62:	429a      	cmp	r2, r3
 801ec64:	d118      	bne.n	801ec98 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801ec66:	6820      	ldr	r0, [r4, #0]
 801ec68:	466b      	mov	r3, sp
 801ec6a:	6861      	ldr	r1, [r4, #4]
 801ec6c:	c303      	stmia	r3!, {r0, r1}
 801ec6e:	4639      	mov	r1, r7
 801ec70:	4668      	mov	r0, sp
 801ec72:	f7fd f845 	bl	801bd00 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801ec76:	f8d9 3000 	ldr.w	r3, [r9]
 801ec7a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801ec7e:	442b      	add	r3, r5
 801ec80:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801ec84:	4413      	add	r3, r2
 801ec86:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801ec8a:	4293      	cmp	r3, r2
 801ec8c:	dc04      	bgt.n	801ec98 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801ec8e:	4669      	mov	r1, sp
 801ec90:	4630      	mov	r0, r6
 801ec92:	f7ff ff87 	bl	801eba4 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 801ec96:	e7b5      	b.n	801ec04 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801ec98:	f8d8 3000 	ldr.w	r3, [r8]
 801ec9c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801eca0:	442b      	add	r3, r5
 801eca2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801eca6:	4291      	cmp	r1, r2
 801eca8:	d119      	bne.n	801ecde <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801ecaa:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801ecae:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801ecb2:	4291      	cmp	r1, r2
 801ecb4:	d113      	bne.n	801ecde <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801ecb6:	6820      	ldr	r0, [r4, #0]
 801ecb8:	466a      	mov	r2, sp
 801ecba:	6861      	ldr	r1, [r4, #4]
 801ecbc:	c203      	stmia	r2!, {r0, r1}
 801ecbe:	4619      	mov	r1, r3
 801ecc0:	4668      	mov	r0, sp
 801ecc2:	f7fd f81d 	bl	801bd00 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801ecc6:	f8d8 3000 	ldr.w	r3, [r8]
 801ecca:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801ecce:	442b      	add	r3, r5
 801ecd0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ecd4:	4413      	add	r3, r2
 801ecd6:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801ecda:	4293      	cmp	r3, r2
 801ecdc:	ddd7      	ble.n	801ec8e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 801ecde:	4620      	mov	r0, r4
 801ece0:	f7f8 fd2d 	bl	801773e <_ZNK8touchgfx4Rect7isEmptyEv>
 801ece4:	b990      	cbnz	r0, 801ed0c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 801ece6:	88a7      	ldrh	r7, [r4, #4]
 801ece8:	88e3      	ldrh	r3, [r4, #6]
 801ecea:	fb17 f703 	smulbb	r7, r7, r3
 801ecee:	f8d8 3000 	ldr.w	r3, [r8]
 801ecf2:	441d      	add	r5, r3
 801ecf4:	4628      	mov	r0, r5
 801ecf6:	f7f8 fd22 	bl	801773e <_ZNK8touchgfx4Rect7isEmptyEv>
 801ecfa:	b948      	cbnz	r0, 801ed10 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 801ecfc:	88ab      	ldrh	r3, [r5, #4]
 801ecfe:	88ea      	ldrh	r2, [r5, #6]
 801ed00:	fb13 f302 	smulbb	r3, r3, r2
 801ed04:	42bb      	cmp	r3, r7
 801ed06:	f6bf af7c 	bge.w	801ec02 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801ed0a:	e79e      	b.n	801ec4a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 801ed0c:	2700      	movs	r7, #0
 801ed0e:	e7ee      	b.n	801ecee <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 801ed10:	2300      	movs	r3, #0
 801ed12:	e7f7      	b.n	801ed04 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 801ed14:	24013be0 	.word	0x24013be0
 801ed18:	24013bc8 	.word	0x24013bc8

0801ed1c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801ed1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ed1e:	4c24      	ldr	r4, [pc, #144]	@ (801edb0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801ed20:	6823      	ldr	r3, [r4, #0]
 801ed22:	2b00      	cmp	r3, #0
 801ed24:	d042      	beq.n	801edac <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801ed26:	4a23      	ldr	r2, [pc, #140]	@ (801edb4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801ed28:	4d23      	ldr	r5, [pc, #140]	@ (801edb8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801ed2a:	8811      	ldrh	r1, [r2, #0]
 801ed2c:	f8b5 c000 	ldrh.w	ip, [r5]
 801ed30:	4822      	ldr	r0, [pc, #136]	@ (801edbc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801ed32:	4461      	add	r1, ip
 801ed34:	1c4a      	adds	r2, r1, #1
 801ed36:	008f      	lsls	r7, r1, #2
 801ed38:	f022 0201 	bic.w	r2, r2, #1
 801ed3c:	19de      	adds	r6, r3, r7
 801ed3e:	0412      	lsls	r2, r2, #16
 801ed40:	6006      	str	r6, [r0, #0]
 801ed42:	4e1f      	ldr	r6, [pc, #124]	@ (801edc0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801ed44:	0c12      	lsrs	r2, r2, #16
 801ed46:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801ed4a:	19da      	adds	r2, r3, r7
 801ed4c:	6032      	str	r2, [r6, #0]
 801ed4e:	220e      	movs	r2, #14
 801ed50:	fb02 f20c 	mul.w	r2, r2, ip
 801ed54:	3203      	adds	r2, #3
 801ed56:	f022 0203 	bic.w	r2, r2, #3
 801ed5a:	443a      	add	r2, r7
 801ed5c:	4f19      	ldr	r7, [pc, #100]	@ (801edc4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801ed5e:	4413      	add	r3, r2
 801ed60:	603b      	str	r3, [r7, #0]
 801ed62:	2300      	movs	r3, #0
 801ed64:	4f18      	ldr	r7, [pc, #96]	@ (801edc8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801ed66:	469c      	mov	ip, r3
 801ed68:	803b      	strh	r3, [r7, #0]
 801ed6a:	4f18      	ldr	r7, [pc, #96]	@ (801edcc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801ed6c:	683f      	ldr	r7, [r7, #0]
 801ed6e:	1aba      	subs	r2, r7, r2
 801ed70:	4f17      	ldr	r7, [pc, #92]	@ (801edd0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801ed72:	603a      	str	r2, [r7, #0]
 801ed74:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 801ed78:	4a16      	ldr	r2, [pc, #88]	@ (801edd4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801ed7a:	8013      	strh	r3, [r2, #0]
 801ed7c:	428b      	cmp	r3, r1
 801ed7e:	d10d      	bne.n	801ed9c <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801ed80:	882d      	ldrh	r5, [r5, #0]
 801ed82:	2300      	movs	r3, #0
 801ed84:	6830      	ldr	r0, [r6, #0]
 801ed86:	240e      	movs	r4, #14
 801ed88:	429d      	cmp	r5, r3
 801ed8a:	d90f      	bls.n	801edac <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801ed8c:	fb04 0203 	mla	r2, r4, r3, r0
 801ed90:	3301      	adds	r3, #1
 801ed92:	7b11      	ldrb	r1, [r2, #12]
 801ed94:	f36f 1145 	bfc	r1, #5, #1
 801ed98:	7311      	strb	r1, [r2, #12]
 801ed9a:	e7f5      	b.n	801ed88 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801ed9c:	6822      	ldr	r2, [r4, #0]
 801ed9e:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801eda2:	6802      	ldr	r2, [r0, #0]
 801eda4:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801eda8:	3301      	adds	r3, #1
 801edaa:	e7e7      	b.n	801ed7c <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801edac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801edae:	bf00      	nop
 801edb0:	24013bc4 	.word	0x24013bc4
 801edb4:	24013be0 	.word	0x24013be0
 801edb8:	24013be4 	.word	0x24013be4
 801edbc:	24013bd8 	.word	0x24013bd8
 801edc0:	24013bc8 	.word	0x24013bc8
 801edc4:	24013bd0 	.word	0x24013bd0
 801edc8:	24013be2 	.word	0x24013be2
 801edcc:	24013bcc 	.word	0x24013bcc
 801edd0:	24013bdc 	.word	0x24013bdc
 801edd4:	24013bd4 	.word	0x24013bd4

0801edd8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801edd8:	4b06      	ldr	r3, [pc, #24]	@ (801edf4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801edda:	681b      	ldr	r3, [r3, #0]
 801eddc:	b943      	cbnz	r3, 801edf0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801edde:	b139      	cbz	r1, 801edf0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801ede0:	4b05      	ldr	r3, [pc, #20]	@ (801edf8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801ede2:	801a      	strh	r2, [r3, #0]
 801ede4:	4b05      	ldr	r3, [pc, #20]	@ (801edfc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801ede6:	6019      	str	r1, [r3, #0]
 801ede8:	4b05      	ldr	r3, [pc, #20]	@ (801ee00 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801edea:	6018      	str	r0, [r3, #0]
 801edec:	f7ff bf96 	b.w	801ed1c <_ZN8touchgfx6Bitmap10clearCacheEv>
 801edf0:	4770      	bx	lr
 801edf2:	bf00      	nop
 801edf4:	24013bd0 	.word	0x24013bd0
 801edf8:	24013be4 	.word	0x24013be4
 801edfc:	24013bcc 	.word	0x24013bcc
 801ee00:	24013bc4 	.word	0x24013bc4

0801ee04 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801ee04:	b470      	push	{r4, r5, r6}
 801ee06:	4c07      	ldr	r4, [pc, #28]	@ (801ee24 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801ee08:	4605      	mov	r5, r0
 801ee0a:	4610      	mov	r0, r2
 801ee0c:	9a03      	ldr	r2, [sp, #12]
 801ee0e:	6826      	ldr	r6, [r4, #0]
 801ee10:	b936      	cbnz	r6, 801ee20 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801ee12:	6025      	str	r5, [r4, #0]
 801ee14:	4c04      	ldr	r4, [pc, #16]	@ (801ee28 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801ee16:	8021      	strh	r1, [r4, #0]
 801ee18:	4619      	mov	r1, r3
 801ee1a:	bc70      	pop	{r4, r5, r6}
 801ee1c:	f7ff bfdc 	b.w	801edd8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801ee20:	bc70      	pop	{r4, r5, r6}
 801ee22:	4770      	bx	lr
 801ee24:	24013be8 	.word	0x24013be8
 801ee28:	24013be0 	.word	0x24013be0

0801ee2c <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801ee2c:	4a12      	ldr	r2, [pc, #72]	@ (801ee78 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801ee2e:	8803      	ldrh	r3, [r0, #0]
 801ee30:	8812      	ldrh	r2, [r2, #0]
 801ee32:	4293      	cmp	r3, r2
 801ee34:	d207      	bcs.n	801ee46 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801ee36:	4a11      	ldr	r2, [pc, #68]	@ (801ee7c <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801ee38:	2114      	movs	r1, #20
 801ee3a:	6812      	ldr	r2, [r2, #0]
 801ee3c:	fb01 2303 	mla	r3, r1, r3, r2
 801ee40:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801ee44:	4770      	bx	lr
 801ee46:	490e      	ldr	r1, [pc, #56]	@ (801ee80 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801ee48:	8809      	ldrh	r1, [r1, #0]
 801ee4a:	4411      	add	r1, r2
 801ee4c:	428b      	cmp	r3, r1
 801ee4e:	da04      	bge.n	801ee5a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801ee50:	1a9b      	subs	r3, r3, r2
 801ee52:	4a0c      	ldr	r2, [pc, #48]	@ (801ee84 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801ee54:	210e      	movs	r1, #14
 801ee56:	6812      	ldr	r2, [r2, #0]
 801ee58:	e7f0      	b.n	801ee3c <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801ee5a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801ee5e:	4293      	cmp	r3, r2
 801ee60:	d108      	bne.n	801ee74 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801ee62:	4b09      	ldr	r3, [pc, #36]	@ (801ee88 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801ee64:	781b      	ldrb	r3, [r3, #0]
 801ee66:	b91b      	cbnz	r3, 801ee70 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801ee68:	4b08      	ldr	r3, [pc, #32]	@ (801ee8c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801ee6a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801ee6e:	4770      	bx	lr
 801ee70:	4b07      	ldr	r3, [pc, #28]	@ (801ee90 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801ee72:	e7fa      	b.n	801ee6a <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801ee74:	2000      	movs	r0, #0
 801ee76:	4770      	bx	lr
 801ee78:	24013be0 	.word	0x24013be0
 801ee7c:	24013be8 	.word	0x24013be8
 801ee80:	24013be4 	.word	0x24013be4
 801ee84:	24013bc8 	.word	0x24013bc8
 801ee88:	24013b50 	.word	0x24013b50
 801ee8c:	24013b52 	.word	0x24013b52
 801ee90:	24013b54 	.word	0x24013b54

0801ee94 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801ee94:	4a12      	ldr	r2, [pc, #72]	@ (801eee0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801ee96:	8803      	ldrh	r3, [r0, #0]
 801ee98:	8812      	ldrh	r2, [r2, #0]
 801ee9a:	4293      	cmp	r3, r2
 801ee9c:	d207      	bcs.n	801eeae <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801ee9e:	4a11      	ldr	r2, [pc, #68]	@ (801eee4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801eea0:	2114      	movs	r1, #20
 801eea2:	6812      	ldr	r2, [r2, #0]
 801eea4:	fb01 2303 	mla	r3, r1, r3, r2
 801eea8:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801eeac:	4770      	bx	lr
 801eeae:	490e      	ldr	r1, [pc, #56]	@ (801eee8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801eeb0:	8809      	ldrh	r1, [r1, #0]
 801eeb2:	4411      	add	r1, r2
 801eeb4:	428b      	cmp	r3, r1
 801eeb6:	da04      	bge.n	801eec2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801eeb8:	1a9b      	subs	r3, r3, r2
 801eeba:	4a0c      	ldr	r2, [pc, #48]	@ (801eeec <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801eebc:	210e      	movs	r1, #14
 801eebe:	6812      	ldr	r2, [r2, #0]
 801eec0:	e7f0      	b.n	801eea4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801eec2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801eec6:	4293      	cmp	r3, r2
 801eec8:	d108      	bne.n	801eedc <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801eeca:	4b09      	ldr	r3, [pc, #36]	@ (801eef0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801eecc:	781b      	ldrb	r3, [r3, #0]
 801eece:	b91b      	cbnz	r3, 801eed8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801eed0:	4b08      	ldr	r3, [pc, #32]	@ (801eef4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801eed2:	f9b3 0000 	ldrsh.w	r0, [r3]
 801eed6:	4770      	bx	lr
 801eed8:	4b07      	ldr	r3, [pc, #28]	@ (801eef8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801eeda:	e7fa      	b.n	801eed2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801eedc:	2000      	movs	r0, #0
 801eede:	4770      	bx	lr
 801eee0:	24013be0 	.word	0x24013be0
 801eee4:	24013be8 	.word	0x24013be8
 801eee8:	24013be4 	.word	0x24013be4
 801eeec:	24013bc8 	.word	0x24013bc8
 801eef0:	24013b50 	.word	0x24013b50
 801eef4:	24013b54 	.word	0x24013b54
 801eef8:	24013b52 	.word	0x24013b52

0801eefc <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801eefc:	4a22      	ldr	r2, [pc, #136]	@ (801ef88 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801eefe:	b530      	push	{r4, r5, lr}
 801ef00:	880b      	ldrh	r3, [r1, #0]
 801ef02:	8812      	ldrh	r2, [r2, #0]
 801ef04:	4293      	cmp	r3, r2
 801ef06:	d213      	bcs.n	801ef30 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801ef08:	4a20      	ldr	r2, [pc, #128]	@ (801ef8c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801ef0a:	2114      	movs	r1, #20
 801ef0c:	6812      	ldr	r2, [r2, #0]
 801ef0e:	fb01 2303 	mla	r3, r1, r3, r2
 801ef12:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801ef16:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801ef1a:	8a1a      	ldrh	r2, [r3, #16]
 801ef1c:	8a5b      	ldrh	r3, [r3, #18]
 801ef1e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801ef22:	8004      	strh	r4, [r0, #0]
 801ef24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ef28:	8041      	strh	r1, [r0, #2]
 801ef2a:	8082      	strh	r2, [r0, #4]
 801ef2c:	80c3      	strh	r3, [r0, #6]
 801ef2e:	e024      	b.n	801ef7a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 801ef30:	4917      	ldr	r1, [pc, #92]	@ (801ef90 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801ef32:	8809      	ldrh	r1, [r1, #0]
 801ef34:	4411      	add	r1, r2
 801ef36:	428b      	cmp	r3, r1
 801ef38:	da10      	bge.n	801ef5c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 801ef3a:	1a9b      	subs	r3, r3, r2
 801ef3c:	220e      	movs	r2, #14
 801ef3e:	4353      	muls	r3, r2
 801ef40:	4a14      	ldr	r2, [pc, #80]	@ (801ef94 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801ef42:	6811      	ldr	r1, [r2, #0]
 801ef44:	18ca      	adds	r2, r1, r3
 801ef46:	5ecd      	ldrsh	r5, [r1, r3]
 801ef48:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 801ef4c:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 801ef50:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 801ef54:	8005      	strh	r5, [r0, #0]
 801ef56:	8044      	strh	r4, [r0, #2]
 801ef58:	8081      	strh	r1, [r0, #4]
 801ef5a:	e7e7      	b.n	801ef2c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801ef5c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801ef60:	4293      	cmp	r3, r2
 801ef62:	d10b      	bne.n	801ef7c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 801ef64:	4b0c      	ldr	r3, [pc, #48]	@ (801ef98 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801ef66:	f9b3 1000 	ldrsh.w	r1, [r3]
 801ef6a:	4b0c      	ldr	r3, [pc, #48]	@ (801ef9c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801ef6c:	8081      	strh	r1, [r0, #4]
 801ef6e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ef72:	2300      	movs	r3, #0
 801ef74:	80c2      	strh	r2, [r0, #6]
 801ef76:	8003      	strh	r3, [r0, #0]
 801ef78:	8043      	strh	r3, [r0, #2]
 801ef7a:	bd30      	pop	{r4, r5, pc}
 801ef7c:	2300      	movs	r3, #0
 801ef7e:	8003      	strh	r3, [r0, #0]
 801ef80:	8043      	strh	r3, [r0, #2]
 801ef82:	8083      	strh	r3, [r0, #4]
 801ef84:	e7d2      	b.n	801ef2c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801ef86:	bf00      	nop
 801ef88:	24013be0 	.word	0x24013be0
 801ef8c:	24013be8 	.word	0x24013be8
 801ef90:	24013be4 	.word	0x24013be4
 801ef94:	24013bc8 	.word	0x24013bc8
 801ef98:	24013b4c 	.word	0x24013b4c
 801ef9c:	24013b4e 	.word	0x24013b4e

0801efa0 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801efa0:	4a12      	ldr	r2, [pc, #72]	@ (801efec <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801efa2:	8803      	ldrh	r3, [r0, #0]
 801efa4:	8811      	ldrh	r1, [r2, #0]
 801efa6:	428b      	cmp	r3, r1
 801efa8:	d20b      	bcs.n	801efc2 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801efaa:	4a11      	ldr	r2, [pc, #68]	@ (801eff0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801efac:	6812      	ldr	r2, [r2, #0]
 801efae:	b112      	cbz	r2, 801efb6 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801efb0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801efb4:	b9c0      	cbnz	r0, 801efe8 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801efb6:	4a0f      	ldr	r2, [pc, #60]	@ (801eff4 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801efb8:	6811      	ldr	r1, [r2, #0]
 801efba:	2214      	movs	r2, #20
 801efbc:	4353      	muls	r3, r2
 801efbe:	58c8      	ldr	r0, [r1, r3]
 801efc0:	4770      	bx	lr
 801efc2:	4a0d      	ldr	r2, [pc, #52]	@ (801eff8 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801efc4:	8812      	ldrh	r2, [r2, #0]
 801efc6:	440a      	add	r2, r1
 801efc8:	4293      	cmp	r3, r2
 801efca:	da04      	bge.n	801efd6 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801efcc:	4a08      	ldr	r2, [pc, #32]	@ (801eff0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801efce:	6812      	ldr	r2, [r2, #0]
 801efd0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801efd4:	4770      	bx	lr
 801efd6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801efda:	4293      	cmp	r3, r2
 801efdc:	d103      	bne.n	801efe6 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801efde:	4b07      	ldr	r3, [pc, #28]	@ (801effc <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801efe0:	681b      	ldr	r3, [r3, #0]
 801efe2:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 801efe4:	4770      	bx	lr
 801efe6:	2000      	movs	r0, #0
 801efe8:	4770      	bx	lr
 801efea:	bf00      	nop
 801efec:	24013be0 	.word	0x24013be0
 801eff0:	24013bc4 	.word	0x24013bc4
 801eff4:	24013be8 	.word	0x24013be8
 801eff8:	24013be4 	.word	0x24013be4
 801effc:	24013b58 	.word	0x24013b58

0801f000 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801f000:	4b24      	ldr	r3, [pc, #144]	@ (801f094 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801f002:	8802      	ldrh	r2, [r0, #0]
 801f004:	8818      	ldrh	r0, [r3, #0]
 801f006:	4282      	cmp	r2, r0
 801f008:	d221      	bcs.n	801f04e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801f00a:	4b23      	ldr	r3, [pc, #140]	@ (801f098 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801f00c:	6819      	ldr	r1, [r3, #0]
 801f00e:	2314      	movs	r3, #20
 801f010:	fb03 1302 	mla	r3, r3, r2, r1
 801f014:	6858      	ldr	r0, [r3, #4]
 801f016:	2800      	cmp	r0, #0
 801f018:	d03a      	beq.n	801f090 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801f01a:	4920      	ldr	r1, [pc, #128]	@ (801f09c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801f01c:	6809      	ldr	r1, [r1, #0]
 801f01e:	2900      	cmp	r1, #0
 801f020:	d036      	beq.n	801f090 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801f022:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801f026:	2900      	cmp	r1, #0
 801f028:	d032      	beq.n	801f090 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801f02a:	891a      	ldrh	r2, [r3, #8]
 801f02c:	8958      	ldrh	r0, [r3, #10]
 801f02e:	4350      	muls	r0, r2
 801f030:	7c5a      	ldrb	r2, [r3, #17]
 801f032:	7cdb      	ldrb	r3, [r3, #19]
 801f034:	0952      	lsrs	r2, r2, #5
 801f036:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801f03a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801f03e:	2b0b      	cmp	r3, #11
 801f040:	bf18      	it	ne
 801f042:	0040      	lslne	r0, r0, #1
 801f044:	3003      	adds	r0, #3
 801f046:	f020 0003 	bic.w	r0, r0, #3
 801f04a:	4408      	add	r0, r1
 801f04c:	4770      	bx	lr
 801f04e:	4b14      	ldr	r3, [pc, #80]	@ (801f0a0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801f050:	881b      	ldrh	r3, [r3, #0]
 801f052:	4403      	add	r3, r0
 801f054:	429a      	cmp	r2, r3
 801f056:	da1a      	bge.n	801f08e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801f058:	4b12      	ldr	r3, [pc, #72]	@ (801f0a4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801f05a:	1a10      	subs	r0, r2, r0
 801f05c:	210e      	movs	r1, #14
 801f05e:	681b      	ldr	r3, [r3, #0]
 801f060:	fb01 3000 	mla	r0, r1, r0, r3
 801f064:	7b03      	ldrb	r3, [r0, #12]
 801f066:	f003 031f 	and.w	r3, r3, #31
 801f06a:	2b0b      	cmp	r3, #11
 801f06c:	d10b      	bne.n	801f086 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801f06e:	8903      	ldrh	r3, [r0, #8]
 801f070:	8940      	ldrh	r0, [r0, #10]
 801f072:	4358      	muls	r0, r3
 801f074:	4b09      	ldr	r3, [pc, #36]	@ (801f09c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801f076:	3003      	adds	r0, #3
 801f078:	6819      	ldr	r1, [r3, #0]
 801f07a:	f020 0303 	bic.w	r3, r0, #3
 801f07e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801f082:	4418      	add	r0, r3
 801f084:	4770      	bx	lr
 801f086:	2b0d      	cmp	r3, #13
 801f088:	d101      	bne.n	801f08e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801f08a:	300d      	adds	r0, #13
 801f08c:	4770      	bx	lr
 801f08e:	2000      	movs	r0, #0
 801f090:	4770      	bx	lr
 801f092:	bf00      	nop
 801f094:	24013be0 	.word	0x24013be0
 801f098:	24013be8 	.word	0x24013be8
 801f09c:	24013bc4 	.word	0x24013bc4
 801f0a0:	24013be4 	.word	0x24013be4
 801f0a4:	24013bc8 	.word	0x24013bc8

0801f0a8 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801f0a8:	4b1f      	ldr	r3, [pc, #124]	@ (801f128 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 801f0aa:	b510      	push	{r4, lr}
 801f0ac:	8802      	ldrh	r2, [r0, #0]
 801f0ae:	881b      	ldrh	r3, [r3, #0]
 801f0b0:	429a      	cmp	r2, r3
 801f0b2:	d21a      	bcs.n	801f0ea <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 801f0b4:	4b1d      	ldr	r3, [pc, #116]	@ (801f12c <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 801f0b6:	2114      	movs	r1, #20
 801f0b8:	681b      	ldr	r3, [r3, #0]
 801f0ba:	fb01 3102 	mla	r1, r1, r2, r3
 801f0be:	7c4b      	ldrb	r3, [r1, #17]
 801f0c0:	0958      	lsrs	r0, r3, #5
 801f0c2:	7ccb      	ldrb	r3, [r1, #19]
 801f0c4:	491a      	ldr	r1, [pc, #104]	@ (801f130 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 801f0c6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801f0ca:	6809      	ldr	r1, [r1, #0]
 801f0cc:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 801f0d0:	b2d8      	uxtb	r0, r3
 801f0d2:	b149      	cbz	r1, 801f0e8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801f0d4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801f0d8:	b132      	cbz	r2, 801f0e8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801f0da:	2b0e      	cmp	r3, #14
 801f0dc:	d021      	beq.n	801f122 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801f0de:	280f      	cmp	r0, #15
 801f0e0:	d01d      	beq.n	801f11e <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 801f0e2:	2810      	cmp	r0, #16
 801f0e4:	bf08      	it	eq
 801f0e6:	2002      	moveq	r0, #2
 801f0e8:	bd10      	pop	{r4, pc}
 801f0ea:	4912      	ldr	r1, [pc, #72]	@ (801f134 <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 801f0ec:	8809      	ldrh	r1, [r1, #0]
 801f0ee:	4419      	add	r1, r3
 801f0f0:	428a      	cmp	r2, r1
 801f0f2:	da09      	bge.n	801f108 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 801f0f4:	1ad3      	subs	r3, r2, r3
 801f0f6:	4a10      	ldr	r2, [pc, #64]	@ (801f138 <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 801f0f8:	210e      	movs	r1, #14
 801f0fa:	6812      	ldr	r2, [r2, #0]
 801f0fc:	fb01 2303 	mla	r3, r1, r3, r2
 801f100:	7b18      	ldrb	r0, [r3, #12]
 801f102:	f000 001f 	and.w	r0, r0, #31
 801f106:	e7ef      	b.n	801f0e8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801f108:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 801f10c:	429a      	cmp	r2, r3
 801f10e:	d108      	bne.n	801f122 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801f110:	f7f3 fa18 	bl	8012544 <_ZN8touchgfx3HAL3lcdEv>
 801f114:	6803      	ldr	r3, [r0, #0]
 801f116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f11a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f11c:	4718      	bx	r3
 801f11e:	2001      	movs	r0, #1
 801f120:	e7e2      	b.n	801f0e8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801f122:	2000      	movs	r0, #0
 801f124:	e7e0      	b.n	801f0e8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801f126:	bf00      	nop
 801f128:	24013be0 	.word	0x24013be0
 801f12c:	24013be8 	.word	0x24013be8
 801f130:	24013bc4 	.word	0x24013bc4
 801f134:	24013be4 	.word	0x24013be4
 801f138:	24013bc8 	.word	0x24013bc8

0801f13c <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801f13c:	2018      	movs	r0, #24
 801f13e:	4770      	bx	lr

0801f140 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801f140:	2001      	movs	r0, #1
 801f142:	4770      	bx	lr

0801f144 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801f144:	4b02      	ldr	r3, [pc, #8]	@ (801f150 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 801f146:	8818      	ldrh	r0, [r3, #0]
 801f148:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f14c:	b280      	uxth	r0, r0
 801f14e:	4770      	bx	lr
 801f150:	24013b52 	.word	0x24013b52

0801f154 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801f154:	2bff      	cmp	r3, #255	@ 0xff
 801f156:	d04c      	beq.n	801f1f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801f158:	2a2c      	cmp	r2, #44	@ 0x2c
 801f15a:	d030      	beq.n	801f1be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a>
 801f15c:	d80f      	bhi.n	801f17e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 801f15e:	2a08      	cmp	r2, #8
 801f160:	d043      	beq.n	801f1ea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801f162:	d805      	bhi.n	801f170 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 801f164:	2a04      	cmp	r2, #4
 801f166:	d03e      	beq.n	801f1e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801f168:	2a05      	cmp	r2, #5
 801f16a:	d03a      	beq.n	801f1e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801f16c:	2300      	movs	r3, #0
 801f16e:	e024      	b.n	801f1ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f170:	2a0a      	cmp	r2, #10
 801f172:	d03a      	beq.n	801f1ea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801f174:	d301      	bcc.n	801f17a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 801f176:	2a0b      	cmp	r2, #11
 801f178:	d1f8      	bne.n	801f16c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f17a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801f17c:	e01d      	b.n	801f1ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f17e:	2a30      	cmp	r2, #48	@ 0x30
 801f180:	d035      	beq.n	801f1ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801f182:	d80a      	bhi.n	801f19a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x46>
 801f184:	2a2e      	cmp	r2, #46	@ 0x2e
 801f186:	684b      	ldr	r3, [r1, #4]
 801f188:	d023      	beq.n	801f1d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801f18a:	d90d      	bls.n	801f1a8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 801f18c:	781a      	ldrb	r2, [r3, #0]
 801f18e:	785b      	ldrb	r3, [r3, #1]
 801f190:	2b00      	cmp	r3, #0
 801f192:	d1eb      	bne.n	801f16c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f194:	b98a      	cbnz	r2, 801f1ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f196:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801f198:	e00f      	b.n	801f1ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f19a:	2a32      	cmp	r2, #50	@ 0x32
 801f19c:	d027      	beq.n	801f1ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801f19e:	d301      	bcc.n	801f1a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 801f1a0:	2a33      	cmp	r2, #51	@ 0x33
 801f1a2:	d1e3      	bne.n	801f16c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f1a4:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801f1a6:	e008      	b.n	801f1ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f1a8:	781a      	ldrb	r2, [r3, #0]
 801f1aa:	785b      	ldrb	r3, [r3, #1]
 801f1ac:	2b00      	cmp	r3, #0
 801f1ae:	d1dd      	bne.n	801f16c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f1b0:	2a00      	cmp	r2, #0
 801f1b2:	d0f0      	beq.n	801f196 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 801f1b4:	2a01      	cmp	r2, #1
 801f1b6:	d1d9      	bne.n	801f16c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f1b8:	6943      	ldr	r3, [r0, #20]
 801f1ba:	4618      	mov	r0, r3
 801f1bc:	4770      	bx	lr
 801f1be:	684b      	ldr	r3, [r1, #4]
 801f1c0:	781a      	ldrb	r2, [r3, #0]
 801f1c2:	785b      	ldrb	r3, [r3, #1]
 801f1c4:	2b00      	cmp	r3, #0
 801f1c6:	d1d1      	bne.n	801f16c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f1c8:	b14a      	cbz	r2, 801f1de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801f1ca:	2a01      	cmp	r2, #1
 801f1cc:	bf08      	it	eq
 801f1ce:	68c3      	ldreq	r3, [r0, #12]
 801f1d0:	e7f3      	b.n	801f1ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f1d2:	781a      	ldrb	r2, [r3, #0]
 801f1d4:	785b      	ldrb	r3, [r3, #1]
 801f1d6:	2b00      	cmp	r3, #0
 801f1d8:	d1c8      	bne.n	801f16c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f1da:	2a00      	cmp	r2, #0
 801f1dc:	d1ed      	bne.n	801f1ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f1de:	69c3      	ldr	r3, [r0, #28]
 801f1e0:	e7eb      	b.n	801f1ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f1e2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801f1e4:	e7e9      	b.n	801f1ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f1e6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801f1e8:	e7e7      	b.n	801f1ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f1ea:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801f1ec:	e7e5      	b.n	801f1ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f1ee:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801f1f0:	e7e3      	b.n	801f1ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f1f2:	2a2c      	cmp	r2, #44	@ 0x2c
 801f1f4:	d030      	beq.n	801f258 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x104>
 801f1f6:	d80f      	bhi.n	801f218 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 801f1f8:	2a08      	cmp	r2, #8
 801f1fa:	d042      	beq.n	801f282 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801f1fc:	d805      	bhi.n	801f20a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 801f1fe:	2a04      	cmp	r2, #4
 801f200:	d03d      	beq.n	801f27e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801f202:	2a05      	cmp	r2, #5
 801f204:	d1b2      	bne.n	801f16c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f206:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801f208:	e7d7      	b.n	801f1ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f20a:	2a0a      	cmp	r2, #10
 801f20c:	d039      	beq.n	801f282 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801f20e:	d301      	bcc.n	801f214 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 801f210:	2a0b      	cmp	r2, #11
 801f212:	d1ab      	bne.n	801f16c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f214:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 801f216:	e7d0      	b.n	801f1ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f218:	2a30      	cmp	r2, #48	@ 0x30
 801f21a:	d034      	beq.n	801f286 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801f21c:	d80b      	bhi.n	801f236 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 801f21e:	2a2e      	cmp	r2, #46	@ 0x2e
 801f220:	684b      	ldr	r3, [r1, #4]
 801f222:	d023      	beq.n	801f26c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801f224:	d90e      	bls.n	801f244 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf0>
 801f226:	781a      	ldrb	r2, [r3, #0]
 801f228:	785b      	ldrb	r3, [r3, #1]
 801f22a:	2b00      	cmp	r3, #0
 801f22c:	d19e      	bne.n	801f16c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f22e:	2a00      	cmp	r2, #0
 801f230:	d1c3      	bne.n	801f1ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f232:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801f234:	e7c1      	b.n	801f1ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f236:	2a32      	cmp	r2, #50	@ 0x32
 801f238:	d025      	beq.n	801f286 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801f23a:	d301      	bcc.n	801f240 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801f23c:	2a33      	cmp	r2, #51	@ 0x33
 801f23e:	d195      	bne.n	801f16c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f240:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801f242:	e7ba      	b.n	801f1ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f244:	781a      	ldrb	r2, [r3, #0]
 801f246:	785b      	ldrb	r3, [r3, #1]
 801f248:	2b00      	cmp	r3, #0
 801f24a:	d18f      	bne.n	801f16c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f24c:	2a00      	cmp	r2, #0
 801f24e:	d0f0      	beq.n	801f232 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xde>
 801f250:	2a01      	cmp	r2, #1
 801f252:	d18b      	bne.n	801f16c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f254:	6983      	ldr	r3, [r0, #24]
 801f256:	e7b0      	b.n	801f1ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f258:	684b      	ldr	r3, [r1, #4]
 801f25a:	781a      	ldrb	r2, [r3, #0]
 801f25c:	785b      	ldrb	r3, [r3, #1]
 801f25e:	2b00      	cmp	r3, #0
 801f260:	d184      	bne.n	801f16c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f262:	b152      	cbz	r2, 801f27a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801f264:	2a01      	cmp	r2, #1
 801f266:	bf08      	it	eq
 801f268:	6903      	ldreq	r3, [r0, #16]
 801f26a:	e7a6      	b.n	801f1ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f26c:	781a      	ldrb	r2, [r3, #0]
 801f26e:	785b      	ldrb	r3, [r3, #1]
 801f270:	2b00      	cmp	r3, #0
 801f272:	f47f af7b 	bne.w	801f16c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801f276:	2a00      	cmp	r2, #0
 801f278:	d19f      	bne.n	801f1ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f27a:	6a03      	ldr	r3, [r0, #32]
 801f27c:	e79d      	b.n	801f1ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f27e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801f280:	e79b      	b.n	801f1ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f282:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801f284:	e799      	b.n	801f1ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801f286:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801f288:	e797      	b.n	801f1ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>

0801f28a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f28a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f28e:	b085      	sub	sp, #20
 801f290:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801f292:	9203      	str	r2, [sp, #12]
 801f294:	6870      	ldr	r0, [r6, #4]
 801f296:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801f29a:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 801f29e:	9101      	str	r1, [sp, #4]
 801f2a0:	fa1f f885 	uxth.w	r8, r5
 801f2a4:	43ed      	mvns	r5, r5
 801f2a6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801f2aa:	b2ed      	uxtb	r5, r5
 801f2ac:	fb00 2404 	mla	r4, r0, r4, r2
 801f2b0:	6832      	ldr	r2, [r6, #0]
 801f2b2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f2b6:	4414      	add	r4, r2
 801f2b8:	f8dc 2000 	ldr.w	r2, [ip]
 801f2bc:	9202      	str	r2, [sp, #8]
 801f2be:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801f2c2:	f102 0e04 	add.w	lr, r2, #4
 801f2c6:	9a01      	ldr	r2, [sp, #4]
 801f2c8:	2a00      	cmp	r2, #0
 801f2ca:	dc03      	bgt.n	801f2d4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801f2cc:	9a03      	ldr	r2, [sp, #12]
 801f2ce:	2a00      	cmp	r2, #0
 801f2d0:	f340 8116 	ble.w	801f500 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801f2d4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f2d6:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801f2da:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801f2de:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f2e0:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801f2e4:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801f2e8:	2b00      	cmp	r3, #0
 801f2ea:	dd0e      	ble.n	801f30a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801f2ec:	1406      	asrs	r6, r0, #16
 801f2ee:	d405      	bmi.n	801f2fc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f2f0:	4556      	cmp	r6, sl
 801f2f2:	da03      	bge.n	801f2fc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f2f4:	1416      	asrs	r6, r2, #16
 801f2f6:	d401      	bmi.n	801f2fc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f2f8:	454e      	cmp	r6, r9
 801f2fa:	db07      	blt.n	801f30c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801f2fc:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801f2fe:	3b01      	subs	r3, #1
 801f300:	3403      	adds	r4, #3
 801f302:	4430      	add	r0, r6
 801f304:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801f306:	4432      	add	r2, r6
 801f308:	e7ee      	b.n	801f2e8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801f30a:	d063      	beq.n	801f3d4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801f30c:	1e5e      	subs	r6, r3, #1
 801f30e:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801f310:	fb07 0706 	mla	r7, r7, r6, r0
 801f314:	143f      	asrs	r7, r7, #16
 801f316:	d454      	bmi.n	801f3c2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801f318:	4557      	cmp	r7, sl
 801f31a:	da52      	bge.n	801f3c2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801f31c:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801f31e:	fb07 2606 	mla	r6, r7, r6, r2
 801f322:	1436      	asrs	r6, r6, #16
 801f324:	d44d      	bmi.n	801f3c2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801f326:	454e      	cmp	r6, r9
 801f328:	da4b      	bge.n	801f3c2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801f32a:	1ce6      	adds	r6, r4, #3
 801f32c:	4699      	mov	r9, r3
 801f32e:	f1b9 0f00 	cmp.w	r9, #0
 801f332:	f106 0603 	add.w	r6, r6, #3
 801f336:	dd48      	ble.n	801f3ca <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801f338:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801f33c:	1417      	asrs	r7, r2, #16
 801f33e:	9902      	ldr	r1, [sp, #8]
 801f340:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801f344:	f109 39ff 	add.w	r9, r9, #4294967295
 801f348:	fb0b 1707 	mla	r7, fp, r7, r1
 801f34c:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801f350:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f352:	f817 700a 	ldrb.w	r7, [r7, sl]
 801f356:	fb1b fb05 	smulbb	fp, fp, r5
 801f35a:	4408      	add	r0, r1
 801f35c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801f35e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f362:	440a      	add	r2, r1
 801f364:	eb0e 0a07 	add.w	sl, lr, r7
 801f368:	f81e 7007 	ldrb.w	r7, [lr, r7]
 801f36c:	fb07 b708 	mla	r7, r7, r8, fp
 801f370:	b2bf      	uxth	r7, r7
 801f372:	f107 0b01 	add.w	fp, r7, #1
 801f376:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801f37a:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801f37e:	fb1b fb05 	smulbb	fp, fp, r5
 801f382:	123f      	asrs	r7, r7, #8
 801f384:	f806 7c06 	strb.w	r7, [r6, #-6]
 801f388:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801f38c:	fb07 b708 	mla	r7, r7, r8, fp
 801f390:	b2bf      	uxth	r7, r7
 801f392:	f107 0b01 	add.w	fp, r7, #1
 801f396:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801f39a:	123f      	asrs	r7, r7, #8
 801f39c:	f806 7c05 	strb.w	r7, [r6, #-5]
 801f3a0:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801f3a4:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801f3a8:	fb1a fa05 	smulbb	sl, sl, r5
 801f3ac:	fb07 a708 	mla	r7, r7, r8, sl
 801f3b0:	b2bf      	uxth	r7, r7
 801f3b2:	f107 0a01 	add.w	sl, r7, #1
 801f3b6:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801f3ba:	123f      	asrs	r7, r7, #8
 801f3bc:	f806 7c04 	strb.w	r7, [r6, #-4]
 801f3c0:	e7b5      	b.n	801f32e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801f3c2:	2700      	movs	r7, #0
 801f3c4:	1bde      	subs	r6, r3, r7
 801f3c6:	2e00      	cmp	r6, #0
 801f3c8:	dc42      	bgt.n	801f450 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801f3ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f3ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f3d2:	441c      	add	r4, r3
 801f3d4:	9b01      	ldr	r3, [sp, #4]
 801f3d6:	2b00      	cmp	r3, #0
 801f3d8:	f340 8092 	ble.w	801f500 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801f3dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f3e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f3e2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f3e6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f3ea:	eef0 6a62 	vmov.f32	s13, s5
 801f3ee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f3f2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f3f6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f3fa:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 801f3fe:	eef0 6a43 	vmov.f32	s13, s6
 801f402:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f406:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 801f40a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f40e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f412:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f416:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f41a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f41e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f422:	ee12 2a90 	vmov	r2, s5
 801f426:	eef0 2a47 	vmov.f32	s5, s14
 801f42a:	fb92 f3f3 	sdiv	r3, r2, r3
 801f42e:	ee13 2a10 	vmov	r2, s6
 801f432:	9311      	str	r3, [sp, #68]	@ 0x44
 801f434:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f436:	eeb0 3a67 	vmov.f32	s6, s15
 801f43a:	fb92 f3f3 	sdiv	r3, r2, r3
 801f43e:	9312      	str	r3, [sp, #72]	@ 0x48
 801f440:	9b01      	ldr	r3, [sp, #4]
 801f442:	9a03      	ldr	r2, [sp, #12]
 801f444:	3b01      	subs	r3, #1
 801f446:	9301      	str	r3, [sp, #4]
 801f448:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f44a:	bf08      	it	eq
 801f44c:	4613      	moveq	r3, r2
 801f44e:	e73a      	b.n	801f2c6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f450:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801f454:	d44e      	bmi.n	801f4f4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801f456:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801f45a:	4556      	cmp	r6, sl
 801f45c:	dd4a      	ble.n	801f4f4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801f45e:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801f462:	d447      	bmi.n	801f4f4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801f464:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801f468:	4559      	cmp	r1, fp
 801f46a:	dd43      	ble.n	801f4f4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801f46c:	fa0f f986 	sxth.w	r9, r6
 801f470:	9902      	ldr	r1, [sp, #8]
 801f472:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801f476:	fb0b 1909 	mla	r9, fp, r9, r1
 801f47a:	f814 b006 	ldrb.w	fp, [r4, r6]
 801f47e:	f819 900a 	ldrb.w	r9, [r9, sl]
 801f482:	fb1b fb05 	smulbb	fp, fp, r5
 801f486:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801f48a:	eb0e 0a09 	add.w	sl, lr, r9
 801f48e:	f81e 9009 	ldrb.w	r9, [lr, r9]
 801f492:	fb09 b908 	mla	r9, r9, r8, fp
 801f496:	fa1f f989 	uxth.w	r9, r9
 801f49a:	f109 0b01 	add.w	fp, r9, #1
 801f49e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f4a2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f4a6:	f804 9006 	strb.w	r9, [r4, r6]
 801f4aa:	4426      	add	r6, r4
 801f4ac:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801f4b0:	f896 b001 	ldrb.w	fp, [r6, #1]
 801f4b4:	fb1b fb05 	smulbb	fp, fp, r5
 801f4b8:	fb09 b908 	mla	r9, r9, r8, fp
 801f4bc:	fa1f f989 	uxth.w	r9, r9
 801f4c0:	f109 0b01 	add.w	fp, r9, #1
 801f4c4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f4c8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f4cc:	f886 9001 	strb.w	r9, [r6, #1]
 801f4d0:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801f4d4:	f896 a002 	ldrb.w	sl, [r6, #2]
 801f4d8:	fb1a fa05 	smulbb	sl, sl, r5
 801f4dc:	fb09 a908 	mla	r9, r9, r8, sl
 801f4e0:	fa1f f989 	uxth.w	r9, r9
 801f4e4:	f109 0a01 	add.w	sl, r9, #1
 801f4e8:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801f4ec:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f4f0:	f886 9002 	strb.w	r9, [r6, #2]
 801f4f4:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f4f6:	3701      	adds	r7, #1
 801f4f8:	4408      	add	r0, r1
 801f4fa:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801f4fc:	440a      	add	r2, r1
 801f4fe:	e761      	b.n	801f3c4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801f500:	b005      	add	sp, #20
 801f502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f506 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f506:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f50a:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801f50c:	4693      	mov	fp, r2
 801f50e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801f510:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f514:	6868      	ldr	r0, [r5, #4]
 801f516:	6877      	ldr	r7, [r6, #4]
 801f518:	9100      	str	r1, [sp, #0]
 801f51a:	3704      	adds	r7, #4
 801f51c:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801f520:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	@ 0x3c
 801f524:	fb00 2404 	mla	r4, r0, r4, r2
 801f528:	682a      	ldr	r2, [r5, #0]
 801f52a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f52e:	4414      	add	r4, r2
 801f530:	6832      	ldr	r2, [r6, #0]
 801f532:	9201      	str	r2, [sp, #4]
 801f534:	9a00      	ldr	r2, [sp, #0]
 801f536:	2a00      	cmp	r2, #0
 801f538:	dc03      	bgt.n	801f542 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f53a:	f1bb 0f00 	cmp.w	fp, #0
 801f53e:	f340 80bc 	ble.w	801f6ba <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801f542:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f544:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801f548:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801f54c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f54e:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 801f552:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801f556:	2b00      	cmp	r3, #0
 801f558:	dd0c      	ble.n	801f574 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f55a:	1405      	asrs	r5, r0, #16
 801f55c:	d405      	bmi.n	801f56a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801f55e:	4555      	cmp	r5, sl
 801f560:	da03      	bge.n	801f56a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801f562:	1415      	asrs	r5, r2, #16
 801f564:	d401      	bmi.n	801f56a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801f566:	454d      	cmp	r5, r9
 801f568:	db05      	blt.n	801f576 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f56a:	4440      	add	r0, r8
 801f56c:	4472      	add	r2, lr
 801f56e:	3b01      	subs	r3, #1
 801f570:	3403      	adds	r4, #3
 801f572:	e7f0      	b.n	801f556 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801f574:	d03f      	beq.n	801f5f6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801f576:	1e5d      	subs	r5, r3, #1
 801f578:	fb08 0c05 	mla	ip, r8, r5, r0
 801f57c:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801f580:	d42e      	bmi.n	801f5e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801f582:	45d4      	cmp	ip, sl
 801f584:	da2c      	bge.n	801f5e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801f586:	fb0e 2505 	mla	r5, lr, r5, r2
 801f58a:	142d      	asrs	r5, r5, #16
 801f58c:	d428      	bmi.n	801f5e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801f58e:	454d      	cmp	r5, r9
 801f590:	da26      	bge.n	801f5e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801f592:	1ce5      	adds	r5, r4, #3
 801f594:	469c      	mov	ip, r3
 801f596:	f1bc 0f00 	cmp.w	ip, #0
 801f59a:	f105 0503 	add.w	r5, r5, #3
 801f59e:	dd25      	ble.n	801f5ec <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801f5a0:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801f5a4:	ea4f 4922 	mov.w	r9, r2, asr #16
 801f5a8:	f10c 3cff 	add.w	ip, ip, #4294967295
 801f5ac:	4472      	add	r2, lr
 801f5ae:	468a      	mov	sl, r1
 801f5b0:	9901      	ldr	r1, [sp, #4]
 801f5b2:	fb0a 1909 	mla	r9, sl, r9, r1
 801f5b6:	1401      	asrs	r1, r0, #16
 801f5b8:	4440      	add	r0, r8
 801f5ba:	f819 9001 	ldrb.w	r9, [r9, r1]
 801f5be:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801f5c2:	eb07 0a09 	add.w	sl, r7, r9
 801f5c6:	f817 9009 	ldrb.w	r9, [r7, r9]
 801f5ca:	f805 9c06 	strb.w	r9, [r5, #-6]
 801f5ce:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801f5d2:	f805 9c05 	strb.w	r9, [r5, #-5]
 801f5d6:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801f5da:	f805 9c04 	strb.w	r9, [r5, #-4]
 801f5de:	e7da      	b.n	801f596 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f5e0:	2500      	movs	r5, #0
 801f5e2:	eba3 0c05 	sub.w	ip, r3, r5
 801f5e6:	f1bc 0f00 	cmp.w	ip, #0
 801f5ea:	dc3b      	bgt.n	801f664 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801f5ec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f5f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f5f4:	441c      	add	r4, r3
 801f5f6:	9b00      	ldr	r3, [sp, #0]
 801f5f8:	2b00      	cmp	r3, #0
 801f5fa:	dd5e      	ble.n	801f6ba <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801f5fc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f600:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f602:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f606:	eeb0 6a62 	vmov.f32	s12, s5
 801f60a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f60e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f612:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f616:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801f61a:	eeb0 6a43 	vmov.f32	s12, s6
 801f61e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f622:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801f626:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f62a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f62e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f632:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f636:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f63a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f63e:	ee12 2a90 	vmov	r2, s5
 801f642:	eef0 2a47 	vmov.f32	s5, s14
 801f646:	fb92 f8f3 	sdiv	r8, r2, r3
 801f64a:	ee13 2a10 	vmov	r2, s6
 801f64e:	eeb0 3a67 	vmov.f32	s6, s15
 801f652:	fb92 fef3 	sdiv	lr, r2, r3
 801f656:	9b00      	ldr	r3, [sp, #0]
 801f658:	3b01      	subs	r3, #1
 801f65a:	9300      	str	r3, [sp, #0]
 801f65c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f65e:	bf08      	it	eq
 801f660:	465b      	moveq	r3, fp
 801f662:	e767      	b.n	801f534 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801f664:	ea5f 4920 	movs.w	r9, r0, asr #16
 801f668:	d423      	bmi.n	801f6b2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801f66a:	f8d6 c008 	ldr.w	ip, [r6, #8]
 801f66e:	45cc      	cmp	ip, r9
 801f670:	dd1f      	ble.n	801f6b2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801f672:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801f676:	d41c      	bmi.n	801f6b2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801f678:	68f1      	ldr	r1, [r6, #12]
 801f67a:	4551      	cmp	r1, sl
 801f67c:	dd19      	ble.n	801f6b2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801f67e:	fa0f fc8c 	sxth.w	ip, ip
 801f682:	9901      	ldr	r1, [sp, #4]
 801f684:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801f688:	f81c c009 	ldrb.w	ip, [ip, r9]
 801f68c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f690:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801f694:	eb07 090c 	add.w	r9, r7, ip
 801f698:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801f69c:	f804 a00c 	strb.w	sl, [r4, ip]
 801f6a0:	44a4      	add	ip, r4
 801f6a2:	f899 a001 	ldrb.w	sl, [r9, #1]
 801f6a6:	f88c a001 	strb.w	sl, [ip, #1]
 801f6aa:	f899 9002 	ldrb.w	r9, [r9, #2]
 801f6ae:	f88c 9002 	strb.w	r9, [ip, #2]
 801f6b2:	4440      	add	r0, r8
 801f6b4:	4472      	add	r2, lr
 801f6b6:	3501      	adds	r5, #1
 801f6b8:	e793      	b.n	801f5e2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 801f6ba:	b003      	add	sp, #12
 801f6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f6c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f6c4:	b085      	sub	sp, #20
 801f6c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f6ca:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f6cc:	9202      	str	r2, [sp, #8]
 801f6ce:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801f6d2:	6860      	ldr	r0, [r4, #4]
 801f6d4:	9203      	str	r2, [sp, #12]
 801f6d6:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801f6da:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801f6de:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 801f6e2:	fb00 2505 	mla	r5, r0, r5, r2
 801f6e6:	6822      	ldr	r2, [r4, #0]
 801f6e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f6ec:	4415      	add	r5, r2
 801f6ee:	f8dc 2000 	ldr.w	r2, [ip]
 801f6f2:	9200      	str	r2, [sp, #0]
 801f6f4:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801f6f8:	3204      	adds	r2, #4
 801f6fa:	9201      	str	r2, [sp, #4]
 801f6fc:	2900      	cmp	r1, #0
 801f6fe:	dc03      	bgt.n	801f708 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801f700:	9a02      	ldr	r2, [sp, #8]
 801f702:	2a00      	cmp	r2, #0
 801f704:	f340 8127 	ble.w	801f956 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801f708:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f70a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801f70e:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801f712:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f714:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801f718:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801f71c:	2b00      	cmp	r3, #0
 801f71e:	dd0d      	ble.n	801f73c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f720:	1422      	asrs	r2, r4, #16
 801f722:	d405      	bmi.n	801f730 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f724:	4542      	cmp	r2, r8
 801f726:	da03      	bge.n	801f730 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f728:	1402      	asrs	r2, r0, #16
 801f72a:	d401      	bmi.n	801f730 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f72c:	42ba      	cmp	r2, r7
 801f72e:	db06      	blt.n	801f73e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f730:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f732:	4474      	add	r4, lr
 801f734:	3b01      	subs	r3, #1
 801f736:	3503      	adds	r5, #3
 801f738:	4410      	add	r0, r2
 801f73a:	e7ef      	b.n	801f71c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801f73c:	d075      	beq.n	801f82a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801f73e:	1e5a      	subs	r2, r3, #1
 801f740:	fb0e 4602 	mla	r6, lr, r2, r4
 801f744:	1436      	asrs	r6, r6, #16
 801f746:	d465      	bmi.n	801f814 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801f748:	4546      	cmp	r6, r8
 801f74a:	da63      	bge.n	801f814 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801f74c:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801f74e:	fb06 0202 	mla	r2, r6, r2, r0
 801f752:	1412      	asrs	r2, r2, #16
 801f754:	d45e      	bmi.n	801f814 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801f756:	42ba      	cmp	r2, r7
 801f758:	da5c      	bge.n	801f814 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801f75a:	1cef      	adds	r7, r5, #3
 801f75c:	4699      	mov	r9, r3
 801f75e:	f1b9 0f00 	cmp.w	r9, #0
 801f762:	dd5d      	ble.n	801f820 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801f764:	1402      	asrs	r2, r0, #16
 801f766:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801f76a:	1426      	asrs	r6, r4, #16
 801f76c:	4692      	mov	sl, r2
 801f76e:	9a00      	ldr	r2, [sp, #0]
 801f770:	fb08 220a 	mla	r2, r8, sl, r2
 801f774:	5d92      	ldrb	r2, [r2, r6]
 801f776:	9e01      	ldr	r6, [sp, #4]
 801f778:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801f77c:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801f780:	d041      	beq.n	801f806 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801f782:	9a03      	ldr	r2, [sp, #12]
 801f784:	fa5f fb86 	uxtb.w	fp, r6
 801f788:	fb02 f808 	mul.w	r8, r2, r8
 801f78c:	f108 0201 	add.w	r2, r8, #1
 801f790:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801f794:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801f798:	1212      	asrs	r2, r2, #8
 801f79a:	fa1f fa82 	uxth.w	sl, r2
 801f79e:	43d2      	mvns	r2, r2
 801f7a0:	fb1b fb0a 	smulbb	fp, fp, sl
 801f7a4:	b2d2      	uxtb	r2, r2
 801f7a6:	fb08 b802 	mla	r8, r8, r2, fp
 801f7aa:	fa1f f888 	uxth.w	r8, r8
 801f7ae:	f108 0b01 	add.w	fp, r8, #1
 801f7b2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801f7b6:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801f7ba:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801f7be:	fb1b fb0a 	smulbb	fp, fp, sl
 801f7c2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f7c6:	fb16 fa0a 	smulbb	sl, r6, sl
 801f7ca:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801f7ce:	f807 8c03 	strb.w	r8, [r7, #-3]
 801f7d2:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801f7d6:	fb06 aa02 	mla	sl, r6, r2, sl
 801f7da:	fb08 b802 	mla	r8, r8, r2, fp
 801f7de:	fa1f fa8a 	uxth.w	sl, sl
 801f7e2:	fa1f f888 	uxth.w	r8, r8
 801f7e6:	f10a 0601 	add.w	r6, sl, #1
 801f7ea:	f108 0b01 	add.w	fp, r8, #1
 801f7ee:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801f7f2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801f7f6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f7fa:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f7fe:	f807 ac01 	strb.w	sl, [r7, #-1]
 801f802:	f807 8c02 	strb.w	r8, [r7, #-2]
 801f806:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f808:	4474      	add	r4, lr
 801f80a:	3703      	adds	r7, #3
 801f80c:	f109 39ff 	add.w	r9, r9, #4294967295
 801f810:	4410      	add	r0, r2
 801f812:	e7a4      	b.n	801f75e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f814:	f04f 0800 	mov.w	r8, #0
 801f818:	eba3 0208 	sub.w	r2, r3, r8
 801f81c:	2a00      	cmp	r2, #0
 801f81e:	dc3b      	bgt.n	801f898 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801f820:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f824:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f828:	441d      	add	r5, r3
 801f82a:	2900      	cmp	r1, #0
 801f82c:	f340 8093 	ble.w	801f956 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801f830:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f834:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f836:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f83a:	3901      	subs	r1, #1
 801f83c:	eeb0 6a62 	vmov.f32	s12, s5
 801f840:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f844:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f848:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f84c:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801f850:	eeb0 6a43 	vmov.f32	s12, s6
 801f854:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f858:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801f85c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f860:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f864:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f868:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f86c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f870:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f874:	ee12 2a90 	vmov	r2, s5
 801f878:	eef0 2a47 	vmov.f32	s5, s14
 801f87c:	fb92 fef3 	sdiv	lr, r2, r3
 801f880:	ee13 2a10 	vmov	r2, s6
 801f884:	eeb0 3a67 	vmov.f32	s6, s15
 801f888:	fb92 f3f3 	sdiv	r3, r2, r3
 801f88c:	9a02      	ldr	r2, [sp, #8]
 801f88e:	9312      	str	r3, [sp, #72]	@ 0x48
 801f890:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f892:	bf08      	it	eq
 801f894:	4613      	moveq	r3, r2
 801f896:	e731      	b.n	801f6fc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f898:	1427      	asrs	r7, r4, #16
 801f89a:	d456      	bmi.n	801f94a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801f89c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801f8a0:	42be      	cmp	r6, r7
 801f8a2:	dd52      	ble.n	801f94a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801f8a4:	ea5f 4920 	movs.w	r9, r0, asr #16
 801f8a8:	d44f      	bmi.n	801f94a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801f8aa:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801f8ae:	454a      	cmp	r2, r9
 801f8b0:	dd4b      	ble.n	801f94a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801f8b2:	9a00      	ldr	r2, [sp, #0]
 801f8b4:	b236      	sxth	r6, r6
 801f8b6:	fb09 2606 	mla	r6, r9, r6, r2
 801f8ba:	5df2      	ldrb	r2, [r6, r7]
 801f8bc:	9e01      	ldr	r6, [sp, #4]
 801f8be:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801f8c2:	0e3a      	lsrs	r2, r7, #24
 801f8c4:	d041      	beq.n	801f94a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801f8c6:	9e03      	ldr	r6, [sp, #12]
 801f8c8:	fa5f fb87 	uxtb.w	fp, r7
 801f8cc:	4372      	muls	r2, r6
 801f8ce:	1c56      	adds	r6, r2, #1
 801f8d0:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801f8d4:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801f8d8:	1212      	asrs	r2, r2, #8
 801f8da:	f815 9006 	ldrb.w	r9, [r5, r6]
 801f8de:	fa1f fa82 	uxth.w	sl, r2
 801f8e2:	43d2      	mvns	r2, r2
 801f8e4:	fb1b fb0a 	smulbb	fp, fp, sl
 801f8e8:	b2d2      	uxtb	r2, r2
 801f8ea:	fb09 b902 	mla	r9, r9, r2, fp
 801f8ee:	fa1f f989 	uxth.w	r9, r9
 801f8f2:	f109 0b01 	add.w	fp, r9, #1
 801f8f6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f8fa:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801f8fe:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801f902:	fb1b fb0a 	smulbb	fp, fp, sl
 801f906:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f90a:	fb17 fa0a 	smulbb	sl, r7, sl
 801f90e:	f805 9006 	strb.w	r9, [r5, r6]
 801f912:	442e      	add	r6, r5
 801f914:	78b7      	ldrb	r7, [r6, #2]
 801f916:	f896 9001 	ldrb.w	r9, [r6, #1]
 801f91a:	fb07 aa02 	mla	sl, r7, r2, sl
 801f91e:	fb09 b902 	mla	r9, r9, r2, fp
 801f922:	fa1f fa8a 	uxth.w	sl, sl
 801f926:	fa1f f989 	uxth.w	r9, r9
 801f92a:	f10a 0701 	add.w	r7, sl, #1
 801f92e:	f109 0b01 	add.w	fp, r9, #1
 801f932:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f936:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f93a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f93e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f942:	f886 a002 	strb.w	sl, [r6, #2]
 801f946:	f886 9001 	strb.w	r9, [r6, #1]
 801f94a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f94c:	4474      	add	r4, lr
 801f94e:	f108 0801 	add.w	r8, r8, #1
 801f952:	4410      	add	r0, r2
 801f954:	e760      	b.n	801f818 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 801f956:	b005      	add	sp, #20
 801f958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f95c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f960:	b085      	sub	sp, #20
 801f962:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f966:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801f968:	9203      	str	r2, [sp, #12]
 801f96a:	6868      	ldr	r0, [r5, #4]
 801f96c:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801f970:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801f974:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801f978:	fb00 2404 	mla	r4, r0, r4, r2
 801f97c:	682a      	ldr	r2, [r5, #0]
 801f97e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f982:	4414      	add	r4, r2
 801f984:	f8dc 2000 	ldr.w	r2, [ip]
 801f988:	9201      	str	r2, [sp, #4]
 801f98a:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801f98e:	3204      	adds	r2, #4
 801f990:	9202      	str	r2, [sp, #8]
 801f992:	2900      	cmp	r1, #0
 801f994:	dc03      	bgt.n	801f99e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801f996:	9a03      	ldr	r2, [sp, #12]
 801f998:	2a00      	cmp	r2, #0
 801f99a:	f340 8137 	ble.w	801fc0c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801f99e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f9a0:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801f9a4:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801f9a8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f9aa:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801f9ae:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801f9b2:	2b00      	cmp	r3, #0
 801f9b4:	dd0d      	ble.n	801f9d2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f9b6:	1405      	asrs	r5, r0, #16
 801f9b8:	d405      	bmi.n	801f9c6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f9ba:	4545      	cmp	r5, r8
 801f9bc:	da03      	bge.n	801f9c6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f9be:	1415      	asrs	r5, r2, #16
 801f9c0:	d401      	bmi.n	801f9c6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f9c2:	42bd      	cmp	r5, r7
 801f9c4:	db06      	blt.n	801f9d4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f9c6:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801f9c8:	4470      	add	r0, lr
 801f9ca:	3b01      	subs	r3, #1
 801f9cc:	3403      	adds	r4, #3
 801f9ce:	442a      	add	r2, r5
 801f9d0:	e7ef      	b.n	801f9b2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801f9d2:	d070      	beq.n	801fab6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801f9d4:	1e5d      	subs	r5, r3, #1
 801f9d6:	fb0e 0605 	mla	r6, lr, r5, r0
 801f9da:	1436      	asrs	r6, r6, #16
 801f9dc:	d462      	bmi.n	801faa4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801f9de:	4546      	cmp	r6, r8
 801f9e0:	da60      	bge.n	801faa4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801f9e2:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801f9e4:	fb06 2505 	mla	r5, r6, r5, r2
 801f9e8:	142d      	asrs	r5, r5, #16
 801f9ea:	d45b      	bmi.n	801faa4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801f9ec:	42bd      	cmp	r5, r7
 801f9ee:	da59      	bge.n	801faa4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801f9f0:	1ce5      	adds	r5, r4, #3
 801f9f2:	469a      	mov	sl, r3
 801f9f4:	f1ba 0f00 	cmp.w	sl, #0
 801f9f8:	dd58      	ble.n	801faac <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801f9fa:	1416      	asrs	r6, r2, #16
 801f9fc:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801fa00:	1407      	asrs	r7, r0, #16
 801fa02:	46b1      	mov	r9, r6
 801fa04:	9e01      	ldr	r6, [sp, #4]
 801fa06:	fb08 6609 	mla	r6, r8, r9, r6
 801fa0a:	5df6      	ldrb	r6, [r6, r7]
 801fa0c:	9f02      	ldr	r7, [sp, #8]
 801fa0e:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801fa12:	0e37      	lsrs	r7, r6, #24
 801fa14:	2fff      	cmp	r7, #255	@ 0xff
 801fa16:	f000 80f0 	beq.w	801fbfa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801fa1a:	fa5f f887 	uxtb.w	r8, r7
 801fa1e:	b3d7      	cbz	r7, 801fa96 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801fa20:	fa1f f788 	uxth.w	r7, r8
 801fa24:	ea6f 0808 	mvn.w	r8, r8
 801fa28:	fa5f fb86 	uxtb.w	fp, r6
 801fa2c:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801fa30:	fa5f f888 	uxtb.w	r8, r8
 801fa34:	fb1b fb07 	smulbb	fp, fp, r7
 801fa38:	fb09 b908 	mla	r9, r9, r8, fp
 801fa3c:	fa1f f989 	uxth.w	r9, r9
 801fa40:	f109 0b01 	add.w	fp, r9, #1
 801fa44:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801fa48:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801fa4c:	fb1b fb08 	smulbb	fp, fp, r8
 801fa50:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fa54:	f805 9c03 	strb.w	r9, [r5, #-3]
 801fa58:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801fa5c:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801fa60:	fb09 b907 	mla	r9, r9, r7, fp
 801fa64:	fa1f f989 	uxth.w	r9, r9
 801fa68:	f109 0b01 	add.w	fp, r9, #1
 801fa6c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801fa70:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fa74:	f805 9c02 	strb.w	r9, [r5, #-2]
 801fa78:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801fa7c:	fb19 f808 	smulbb	r8, r9, r8
 801fa80:	fb06 8607 	mla	r6, r6, r7, r8
 801fa84:	b2b6      	uxth	r6, r6
 801fa86:	f106 0801 	add.w	r8, r6, #1
 801fa8a:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 801fa8e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fa92:	f805 8c01 	strb.w	r8, [r5, #-1]
 801fa96:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801fa98:	4470      	add	r0, lr
 801fa9a:	3503      	adds	r5, #3
 801fa9c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801faa0:	4432      	add	r2, r6
 801faa2:	e7a7      	b.n	801f9f4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801faa4:	2600      	movs	r6, #0
 801faa6:	1b9d      	subs	r5, r3, r6
 801faa8:	2d00      	cmp	r5, #0
 801faaa:	dc3b      	bgt.n	801fb24 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801faac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fab0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fab4:	441c      	add	r4, r3
 801fab6:	2900      	cmp	r1, #0
 801fab8:	f340 80a8 	ble.w	801fc0c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801fabc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fac0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fac2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fac6:	3901      	subs	r1, #1
 801fac8:	eeb0 6a62 	vmov.f32	s12, s5
 801facc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fad0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fad4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fad8:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801fadc:	eeb0 6a43 	vmov.f32	s12, s6
 801fae0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fae4:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801fae8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801faec:	ee61 7a27 	vmul.f32	s15, s2, s15
 801faf0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801faf4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801faf8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fafc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fb00:	ee12 2a90 	vmov	r2, s5
 801fb04:	eef0 2a47 	vmov.f32	s5, s14
 801fb08:	fb92 fef3 	sdiv	lr, r2, r3
 801fb0c:	ee13 2a10 	vmov	r2, s6
 801fb10:	eeb0 3a67 	vmov.f32	s6, s15
 801fb14:	fb92 f3f3 	sdiv	r3, r2, r3
 801fb18:	9a03      	ldr	r2, [sp, #12]
 801fb1a:	9312      	str	r3, [sp, #72]	@ 0x48
 801fb1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fb1e:	bf08      	it	eq
 801fb20:	4613      	moveq	r3, r2
 801fb22:	e736      	b.n	801f992 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801fb24:	ea5f 4820 	movs.w	r8, r0, asr #16
 801fb28:	d457      	bmi.n	801fbda <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801fb2a:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801fb2e:	4547      	cmp	r7, r8
 801fb30:	dd53      	ble.n	801fbda <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801fb32:	ea5f 4922 	movs.w	r9, r2, asr #16
 801fb36:	d450      	bmi.n	801fbda <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801fb38:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801fb3c:	454d      	cmp	r5, r9
 801fb3e:	dd4c      	ble.n	801fbda <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801fb40:	9d01      	ldr	r5, [sp, #4]
 801fb42:	b23f      	sxth	r7, r7
 801fb44:	fb09 5707 	mla	r7, r9, r7, r5
 801fb48:	f817 5008 	ldrb.w	r5, [r7, r8]
 801fb4c:	9f02      	ldr	r7, [sp, #8]
 801fb4e:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801fb52:	0e2f      	lsrs	r7, r5, #24
 801fb54:	2fff      	cmp	r7, #255	@ 0xff
 801fb56:	d045      	beq.n	801fbe4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801fb58:	fa5f f987 	uxtb.w	r9, r7
 801fb5c:	b3ef      	cbz	r7, 801fbda <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801fb5e:	fa1f f889 	uxth.w	r8, r9
 801fb62:	ea6f 0909 	mvn.w	r9, r9
 801fb66:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801fb6a:	fa5f fb85 	uxtb.w	fp, r5
 801fb6e:	f814 a007 	ldrb.w	sl, [r4, r7]
 801fb72:	fa5f f989 	uxtb.w	r9, r9
 801fb76:	fb1b fb08 	smulbb	fp, fp, r8
 801fb7a:	fb0a ba09 	mla	sl, sl, r9, fp
 801fb7e:	fa1f fa8a 	uxth.w	sl, sl
 801fb82:	f10a 0b01 	add.w	fp, sl, #1
 801fb86:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801fb8a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801fb8e:	f804 a007 	strb.w	sl, [r4, r7]
 801fb92:	4427      	add	r7, r4
 801fb94:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801fb98:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801fb9c:	f897 b001 	ldrb.w	fp, [r7, #1]
 801fba0:	fb1b fb09 	smulbb	fp, fp, r9
 801fba4:	fb0a ba08 	mla	sl, sl, r8, fp
 801fba8:	fa1f fa8a 	uxth.w	sl, sl
 801fbac:	f10a 0b01 	add.w	fp, sl, #1
 801fbb0:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801fbb4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801fbb8:	f887 a001 	strb.w	sl, [r7, #1]
 801fbbc:	f897 a002 	ldrb.w	sl, [r7, #2]
 801fbc0:	fb1a f909 	smulbb	r9, sl, r9
 801fbc4:	fb05 9508 	mla	r5, r5, r8, r9
 801fbc8:	b2ad      	uxth	r5, r5
 801fbca:	f105 0901 	add.w	r9, r5, #1
 801fbce:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801fbd2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fbd6:	f887 9002 	strb.w	r9, [r7, #2]
 801fbda:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801fbdc:	4470      	add	r0, lr
 801fbde:	3601      	adds	r6, #1
 801fbe0:	442a      	add	r2, r5
 801fbe2:	e760      	b.n	801faa6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801fbe4:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801fbe8:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801fbec:	55e5      	strb	r5, [r4, r7]
 801fbee:	4427      	add	r7, r4
 801fbf0:	0c2d      	lsrs	r5, r5, #16
 801fbf2:	f887 8001 	strb.w	r8, [r7, #1]
 801fbf6:	70bd      	strb	r5, [r7, #2]
 801fbf8:	e7ef      	b.n	801fbda <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801fbfa:	0a37      	lsrs	r7, r6, #8
 801fbfc:	f805 6c03 	strb.w	r6, [r5, #-3]
 801fc00:	0c36      	lsrs	r6, r6, #16
 801fc02:	f805 7c02 	strb.w	r7, [r5, #-2]
 801fc06:	f805 6c01 	strb.w	r6, [r5, #-1]
 801fc0a:	e744      	b.n	801fa96 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801fc0c:	b005      	add	sp, #20
 801fc0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fc12 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fc12:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc16:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801fc18:	9201      	str	r2, [sp, #4]
 801fc1a:	6870      	ldr	r0, [r6, #4]
 801fc1c:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 801fc20:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 801fc24:	fa1f fe85 	uxth.w	lr, r5
 801fc28:	43ed      	mvns	r5, r5
 801fc2a:	f8dc 8000 	ldr.w	r8, [ip]
 801fc2e:	b2ed      	uxtb	r5, r5
 801fc30:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801fc34:	fb00 2404 	mla	r4, r0, r4, r2
 801fc38:	6832      	ldr	r2, [r6, #0]
 801fc3a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801fc3e:	4414      	add	r4, r2
 801fc40:	2900      	cmp	r1, #0
 801fc42:	dc03      	bgt.n	801fc4c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801fc44:	9a01      	ldr	r2, [sp, #4]
 801fc46:	2a00      	cmp	r2, #0
 801fc48:	f340 810d 	ble.w	801fe66 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801fc4c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801fc4e:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801fc52:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801fc56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801fc58:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801fc5c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801fc60:	2b00      	cmp	r3, #0
 801fc62:	dd0e      	ble.n	801fc82 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801fc64:	1406      	asrs	r6, r0, #16
 801fc66:	d405      	bmi.n	801fc74 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801fc68:	4556      	cmp	r6, sl
 801fc6a:	da03      	bge.n	801fc74 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801fc6c:	1416      	asrs	r6, r2, #16
 801fc6e:	d401      	bmi.n	801fc74 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801fc70:	454e      	cmp	r6, r9
 801fc72:	db07      	blt.n	801fc84 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fc74:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801fc76:	3b01      	subs	r3, #1
 801fc78:	3403      	adds	r4, #3
 801fc7a:	4430      	add	r0, r6
 801fc7c:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801fc7e:	4432      	add	r2, r6
 801fc80:	e7ee      	b.n	801fc60 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801fc82:	d060      	beq.n	801fd46 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801fc84:	1e5e      	subs	r6, r3, #1
 801fc86:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801fc88:	fb07 0706 	mla	r7, r7, r6, r0
 801fc8c:	143f      	asrs	r7, r7, #16
 801fc8e:	d451      	bmi.n	801fd34 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801fc90:	4557      	cmp	r7, sl
 801fc92:	da4f      	bge.n	801fd34 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801fc94:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801fc96:	fb07 2606 	mla	r6, r7, r6, r2
 801fc9a:	1436      	asrs	r6, r6, #16
 801fc9c:	d44a      	bmi.n	801fd34 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801fc9e:	454e      	cmp	r6, r9
 801fca0:	da48      	bge.n	801fd34 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801fca2:	1ce6      	adds	r6, r4, #3
 801fca4:	4699      	mov	r9, r3
 801fca6:	f1b9 0f00 	cmp.w	r9, #0
 801fcaa:	f106 0603 	add.w	r6, r6, #3
 801fcae:	dd45      	ble.n	801fd3c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801fcb0:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801fcb4:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801fcb8:	1417      	asrs	r7, r2, #16
 801fcba:	f109 39ff 	add.w	r9, r9, #4294967295
 801fcbe:	fb0b a707 	mla	r7, fp, r7, sl
 801fcc2:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801fcc6:	fb1b fb05 	smulbb	fp, fp, r5
 801fcca:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801fcce:	eb08 0a07 	add.w	sl, r8, r7
 801fcd2:	f818 7007 	ldrb.w	r7, [r8, r7]
 801fcd6:	fb07 b70e 	mla	r7, r7, lr, fp
 801fcda:	b2bf      	uxth	r7, r7
 801fcdc:	f107 0b01 	add.w	fp, r7, #1
 801fce0:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801fce4:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801fce8:	fb1b fb05 	smulbb	fp, fp, r5
 801fcec:	123f      	asrs	r7, r7, #8
 801fcee:	f806 7c06 	strb.w	r7, [r6, #-6]
 801fcf2:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801fcf6:	fb07 b70e 	mla	r7, r7, lr, fp
 801fcfa:	b2bf      	uxth	r7, r7
 801fcfc:	f107 0b01 	add.w	fp, r7, #1
 801fd00:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801fd04:	123f      	asrs	r7, r7, #8
 801fd06:	f806 7c05 	strb.w	r7, [r6, #-5]
 801fd0a:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801fd0e:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801fd12:	fb1a fa05 	smulbb	sl, sl, r5
 801fd16:	fb07 a70e 	mla	r7, r7, lr, sl
 801fd1a:	b2bf      	uxth	r7, r7
 801fd1c:	f107 0a01 	add.w	sl, r7, #1
 801fd20:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801fd24:	123f      	asrs	r7, r7, #8
 801fd26:	f806 7c04 	strb.w	r7, [r6, #-4]
 801fd2a:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801fd2c:	4438      	add	r0, r7
 801fd2e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801fd30:	443a      	add	r2, r7
 801fd32:	e7b8      	b.n	801fca6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801fd34:	2700      	movs	r7, #0
 801fd36:	1bde      	subs	r6, r3, r7
 801fd38:	2e00      	cmp	r6, #0
 801fd3a:	dc3f      	bgt.n	801fdbc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801fd3c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fd40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fd44:	441c      	add	r4, r3
 801fd46:	2900      	cmp	r1, #0
 801fd48:	f340 808d 	ble.w	801fe66 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801fd4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801fd50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fd52:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fd56:	3901      	subs	r1, #1
 801fd58:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fd5c:	eef0 6a62 	vmov.f32	s13, s5
 801fd60:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fd64:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fd68:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fd6c:	edcd 6a0d 	vstr	s13, [sp, #52]	@ 0x34
 801fd70:	eef0 6a43 	vmov.f32	s13, s6
 801fd74:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fd78:	edcd 6a0e 	vstr	s13, [sp, #56]	@ 0x38
 801fd7c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fd80:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fd84:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fd88:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fd8c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fd90:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fd94:	ee12 2a90 	vmov	r2, s5
 801fd98:	eef0 2a47 	vmov.f32	s5, s14
 801fd9c:	fb92 f3f3 	sdiv	r3, r2, r3
 801fda0:	ee13 2a10 	vmov	r2, s6
 801fda4:	930f      	str	r3, [sp, #60]	@ 0x3c
 801fda6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fda8:	eeb0 3a67 	vmov.f32	s6, s15
 801fdac:	fb92 f3f3 	sdiv	r3, r2, r3
 801fdb0:	9a01      	ldr	r2, [sp, #4]
 801fdb2:	9310      	str	r3, [sp, #64]	@ 0x40
 801fdb4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fdb6:	bf08      	it	eq
 801fdb8:	4613      	moveq	r3, r2
 801fdba:	e741      	b.n	801fc40 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801fdbc:	ea5f 4920 	movs.w	r9, r0, asr #16
 801fdc0:	d44b      	bmi.n	801fe5a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801fdc2:	f8dc b008 	ldr.w	fp, [ip, #8]
 801fdc6:	45cb      	cmp	fp, r9
 801fdc8:	dd47      	ble.n	801fe5a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801fdca:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801fdce:	d444      	bmi.n	801fe5a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801fdd0:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801fdd4:	4556      	cmp	r6, sl
 801fdd6:	dd40      	ble.n	801fe5a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801fdd8:	fa0f f68b 	sxth.w	r6, fp
 801fddc:	fb0a 9906 	mla	r9, sl, r6, r9
 801fde0:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801fde4:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801fde8:	f814 b006 	ldrb.w	fp, [r4, r6]
 801fdec:	fb1b fb05 	smulbb	fp, fp, r5
 801fdf0:	eb08 0a09 	add.w	sl, r8, r9
 801fdf4:	f818 9009 	ldrb.w	r9, [r8, r9]
 801fdf8:	fb09 b90e 	mla	r9, r9, lr, fp
 801fdfc:	fa1f f989 	uxth.w	r9, r9
 801fe00:	f109 0b01 	add.w	fp, r9, #1
 801fe04:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801fe08:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fe0c:	f804 9006 	strb.w	r9, [r4, r6]
 801fe10:	4426      	add	r6, r4
 801fe12:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801fe16:	f896 b001 	ldrb.w	fp, [r6, #1]
 801fe1a:	fb1b fb05 	smulbb	fp, fp, r5
 801fe1e:	fb09 b90e 	mla	r9, r9, lr, fp
 801fe22:	fa1f f989 	uxth.w	r9, r9
 801fe26:	f109 0b01 	add.w	fp, r9, #1
 801fe2a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801fe2e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fe32:	f886 9001 	strb.w	r9, [r6, #1]
 801fe36:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801fe3a:	f896 a002 	ldrb.w	sl, [r6, #2]
 801fe3e:	fb1a fa05 	smulbb	sl, sl, r5
 801fe42:	fb09 a90e 	mla	r9, r9, lr, sl
 801fe46:	fa1f f989 	uxth.w	r9, r9
 801fe4a:	f109 0a01 	add.w	sl, r9, #1
 801fe4e:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801fe52:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fe56:	f886 9002 	strb.w	r9, [r6, #2]
 801fe5a:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801fe5c:	3701      	adds	r7, #1
 801fe5e:	4430      	add	r0, r6
 801fe60:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801fe62:	4432      	add	r2, r6
 801fe64:	e767      	b.n	801fd36 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801fe66:	b003      	add	sp, #12
 801fe68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fe6c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fe6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe70:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801fe72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801fe76:	9201      	str	r2, [sp, #4]
 801fe78:	6868      	ldr	r0, [r5, #4]
 801fe7a:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 801fe7c:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801fe80:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	@ 0x3c
 801fe84:	fb00 2404 	mla	r4, r0, r4, r2
 801fe88:	682a      	ldr	r2, [r5, #0]
 801fe8a:	f8d7 8000 	ldr.w	r8, [r7]
 801fe8e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801fe92:	4414      	add	r4, r2
 801fe94:	2900      	cmp	r1, #0
 801fe96:	dc03      	bgt.n	801fea0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801fe98:	9a01      	ldr	r2, [sp, #4]
 801fe9a:	2a00      	cmp	r2, #0
 801fe9c:	f340 80af 	ble.w	801fffe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801fea0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801fea2:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801fea6:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801feaa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801feac:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801feb0:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801feb4:	2b00      	cmp	r3, #0
 801feb6:	dd0c      	ble.n	801fed2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801feb8:	1405      	asrs	r5, r0, #16
 801feba:	d405      	bmi.n	801fec8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801febc:	4555      	cmp	r5, sl
 801febe:	da03      	bge.n	801fec8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801fec0:	1415      	asrs	r5, r2, #16
 801fec2:	d401      	bmi.n	801fec8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801fec4:	454d      	cmp	r5, r9
 801fec6:	db05      	blt.n	801fed4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801fec8:	4470      	add	r0, lr
 801feca:	4462      	add	r2, ip
 801fecc:	3b01      	subs	r3, #1
 801fece:	3403      	adds	r4, #3
 801fed0:	e7f0      	b.n	801feb4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801fed2:	d038      	beq.n	801ff46 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801fed4:	1e5d      	subs	r5, r3, #1
 801fed6:	fb0e 0605 	mla	r6, lr, r5, r0
 801feda:	1436      	asrs	r6, r6, #16
 801fedc:	d42a      	bmi.n	801ff34 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801fede:	4556      	cmp	r6, sl
 801fee0:	da28      	bge.n	801ff34 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801fee2:	fb0c 2505 	mla	r5, ip, r5, r2
 801fee6:	142d      	asrs	r5, r5, #16
 801fee8:	d424      	bmi.n	801ff34 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801feea:	454d      	cmp	r5, r9
 801feec:	da22      	bge.n	801ff34 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801feee:	1ce6      	adds	r6, r4, #3
 801fef0:	4699      	mov	r9, r3
 801fef2:	f1b9 0f00 	cmp.w	r9, #0
 801fef6:	f106 0603 	add.w	r6, r6, #3
 801fefa:	dd1f      	ble.n	801ff3c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801fefc:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801ff00:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801ff04:	1415      	asrs	r5, r2, #16
 801ff06:	4470      	add	r0, lr
 801ff08:	4462      	add	r2, ip
 801ff0a:	f109 39ff 	add.w	r9, r9, #4294967295
 801ff0e:	fb0b a505 	mla	r5, fp, r5, sl
 801ff12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ff16:	eb08 0a05 	add.w	sl, r8, r5
 801ff1a:	f818 5005 	ldrb.w	r5, [r8, r5]
 801ff1e:	f806 5c06 	strb.w	r5, [r6, #-6]
 801ff22:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801ff26:	f806 5c05 	strb.w	r5, [r6, #-5]
 801ff2a:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801ff2e:	f806 5c04 	strb.w	r5, [r6, #-4]
 801ff32:	e7de      	b.n	801fef2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801ff34:	2600      	movs	r6, #0
 801ff36:	1b9d      	subs	r5, r3, r6
 801ff38:	2d00      	cmp	r5, #0
 801ff3a:	dc38      	bgt.n	801ffae <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801ff3c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ff40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ff44:	441c      	add	r4, r3
 801ff46:	2900      	cmp	r1, #0
 801ff48:	dd59      	ble.n	801fffe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801ff4a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ff4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ff50:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ff54:	3901      	subs	r1, #1
 801ff56:	eeb0 6a62 	vmov.f32	s12, s5
 801ff5a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ff5e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ff62:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ff66:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801ff6a:	eeb0 6a43 	vmov.f32	s12, s6
 801ff6e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ff72:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801ff76:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ff7a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ff7e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ff82:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ff86:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ff8a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ff8e:	ee12 2a90 	vmov	r2, s5
 801ff92:	eef0 2a47 	vmov.f32	s5, s14
 801ff96:	fb92 fef3 	sdiv	lr, r2, r3
 801ff9a:	ee13 2a10 	vmov	r2, s6
 801ff9e:	eeb0 3a67 	vmov.f32	s6, s15
 801ffa2:	fb92 fcf3 	sdiv	ip, r2, r3
 801ffa6:	9a01      	ldr	r2, [sp, #4]
 801ffa8:	bf08      	it	eq
 801ffaa:	4613      	moveq	r3, r2
 801ffac:	e772      	b.n	801fe94 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801ffae:	ea5f 4920 	movs.w	r9, r0, asr #16
 801ffb2:	d420      	bmi.n	801fff6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801ffb4:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801ffb8:	45cb      	cmp	fp, r9
 801ffba:	dd1c      	ble.n	801fff6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801ffbc:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801ffc0:	d419      	bmi.n	801fff6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801ffc2:	68fd      	ldr	r5, [r7, #12]
 801ffc4:	4555      	cmp	r5, sl
 801ffc6:	dd16      	ble.n	801fff6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801ffc8:	fa0f f58b 	sxth.w	r5, fp
 801ffcc:	fb0a 9505 	mla	r5, sl, r5, r9
 801ffd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ffd4:	f818 9005 	ldrb.w	r9, [r8, r5]
 801ffd8:	eb08 0b05 	add.w	fp, r8, r5
 801ffdc:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801ffe0:	f804 9005 	strb.w	r9, [r4, r5]
 801ffe4:	4425      	add	r5, r4
 801ffe6:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801ffea:	f885 9001 	strb.w	r9, [r5, #1]
 801ffee:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801fff2:	f885 9002 	strb.w	r9, [r5, #2]
 801fff6:	4470      	add	r0, lr
 801fff8:	4462      	add	r2, ip
 801fffa:	3601      	adds	r6, #1
 801fffc:	e79b      	b.n	801ff36 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 801fffe:	b003      	add	sp, #12
 8020000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020004 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020008:	b085      	sub	sp, #20
 802000a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802000e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020010:	9202      	str	r2, [sp, #8]
 8020012:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 8020016:	6860      	ldr	r0, [r4, #4]
 8020018:	9203      	str	r2, [sp, #12]
 802001a:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 802001e:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 8020022:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 8020026:	fb00 2505 	mla	r5, r0, r5, r2
 802002a:	6822      	ldr	r2, [r4, #0]
 802002c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020030:	4415      	add	r5, r2
 8020032:	f8dc 2000 	ldr.w	r2, [ip]
 8020036:	9201      	str	r2, [sp, #4]
 8020038:	2900      	cmp	r1, #0
 802003a:	dc03      	bgt.n	8020044 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 802003c:	9a02      	ldr	r2, [sp, #8]
 802003e:	2a00      	cmp	r2, #0
 8020040:	f340 8122 	ble.w	8020288 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8020044:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020046:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 802004a:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 802004e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8020050:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8020054:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8020058:	2b00      	cmp	r3, #0
 802005a:	dd0d      	ble.n	8020078 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802005c:	1422      	asrs	r2, r4, #16
 802005e:	d405      	bmi.n	802006c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020060:	4542      	cmp	r2, r8
 8020062:	da03      	bge.n	802006c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020064:	1402      	asrs	r2, r0, #16
 8020066:	d401      	bmi.n	802006c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020068:	42ba      	cmp	r2, r7
 802006a:	db06      	blt.n	802007a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802006c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802006e:	4474      	add	r4, lr
 8020070:	3b01      	subs	r3, #1
 8020072:	3503      	adds	r5, #3
 8020074:	4410      	add	r0, r2
 8020076:	e7ef      	b.n	8020058 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8020078:	d072      	beq.n	8020160 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 802007a:	1e5a      	subs	r2, r3, #1
 802007c:	fb0e 4602 	mla	r6, lr, r2, r4
 8020080:	1436      	asrs	r6, r6, #16
 8020082:	d462      	bmi.n	802014a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8020084:	4546      	cmp	r6, r8
 8020086:	da60      	bge.n	802014a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8020088:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 802008a:	fb06 0202 	mla	r2, r6, r2, r0
 802008e:	1412      	asrs	r2, r2, #16
 8020090:	d45b      	bmi.n	802014a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8020092:	42ba      	cmp	r2, r7
 8020094:	da59      	bge.n	802014a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8020096:	1cef      	adds	r7, r5, #3
 8020098:	4699      	mov	r9, r3
 802009a:	f1b9 0f00 	cmp.w	r9, #0
 802009e:	dd5a      	ble.n	8020156 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80200a0:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80200a4:	1426      	asrs	r6, r4, #16
 80200a6:	1402      	asrs	r2, r0, #16
 80200a8:	fb08 6202 	mla	r2, r8, r2, r6
 80200ac:	9e01      	ldr	r6, [sp, #4]
 80200ae:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 80200b2:	ea5f 6816 	movs.w	r8, r6, lsr #24
 80200b6:	d041      	beq.n	802013c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80200b8:	9a03      	ldr	r2, [sp, #12]
 80200ba:	fa5f fb86 	uxtb.w	fp, r6
 80200be:	fb02 f808 	mul.w	r8, r2, r8
 80200c2:	f108 0201 	add.w	r2, r8, #1
 80200c6:	eb02 2228 	add.w	r2, r2, r8, asr #8
 80200ca:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 80200ce:	1212      	asrs	r2, r2, #8
 80200d0:	fa1f fa82 	uxth.w	sl, r2
 80200d4:	43d2      	mvns	r2, r2
 80200d6:	fb1b fb0a 	smulbb	fp, fp, sl
 80200da:	b2d2      	uxtb	r2, r2
 80200dc:	fb08 b802 	mla	r8, r8, r2, fp
 80200e0:	fa1f f888 	uxth.w	r8, r8
 80200e4:	f108 0b01 	add.w	fp, r8, #1
 80200e8:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80200ec:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 80200f0:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80200f4:	fb1b fb0a 	smulbb	fp, fp, sl
 80200f8:	ea4f 2828 	mov.w	r8, r8, asr #8
 80200fc:	fb16 fa0a 	smulbb	sl, r6, sl
 8020100:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8020104:	f807 8c03 	strb.w	r8, [r7, #-3]
 8020108:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 802010c:	fb06 aa02 	mla	sl, r6, r2, sl
 8020110:	fb08 b802 	mla	r8, r8, r2, fp
 8020114:	fa1f fa8a 	uxth.w	sl, sl
 8020118:	fa1f f888 	uxth.w	r8, r8
 802011c:	f10a 0601 	add.w	r6, sl, #1
 8020120:	f108 0b01 	add.w	fp, r8, #1
 8020124:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8020128:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 802012c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020130:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020134:	f807 ac01 	strb.w	sl, [r7, #-1]
 8020138:	f807 8c02 	strb.w	r8, [r7, #-2]
 802013c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802013e:	4474      	add	r4, lr
 8020140:	3703      	adds	r7, #3
 8020142:	f109 39ff 	add.w	r9, r9, #4294967295
 8020146:	4410      	add	r0, r2
 8020148:	e7a7      	b.n	802009a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802014a:	f04f 0800 	mov.w	r8, #0
 802014e:	eba3 0208 	sub.w	r2, r3, r8
 8020152:	2a00      	cmp	r2, #0
 8020154:	dc3b      	bgt.n	80201ce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8020156:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802015a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802015e:	441d      	add	r5, r3
 8020160:	2900      	cmp	r1, #0
 8020162:	f340 8091 	ble.w	8020288 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8020166:	ee30 0a04 	vadd.f32	s0, s0, s8
 802016a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802016c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020170:	3901      	subs	r1, #1
 8020172:	eeb0 6a62 	vmov.f32	s12, s5
 8020176:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802017a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802017e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020182:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8020186:	eeb0 6a43 	vmov.f32	s12, s6
 802018a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802018e:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8020192:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020196:	ee61 7a27 	vmul.f32	s15, s2, s15
 802019a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802019e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80201a2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80201a6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80201aa:	ee12 2a90 	vmov	r2, s5
 80201ae:	eef0 2a47 	vmov.f32	s5, s14
 80201b2:	fb92 fef3 	sdiv	lr, r2, r3
 80201b6:	ee13 2a10 	vmov	r2, s6
 80201ba:	eeb0 3a67 	vmov.f32	s6, s15
 80201be:	fb92 f3f3 	sdiv	r3, r2, r3
 80201c2:	9a02      	ldr	r2, [sp, #8]
 80201c4:	9312      	str	r3, [sp, #72]	@ 0x48
 80201c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80201c8:	bf08      	it	eq
 80201ca:	4613      	moveq	r3, r2
 80201cc:	e734      	b.n	8020038 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80201ce:	1427      	asrs	r7, r4, #16
 80201d0:	d454      	bmi.n	802027c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80201d2:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80201d6:	42be      	cmp	r6, r7
 80201d8:	dd50      	ble.n	802027c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80201da:	ea5f 4920 	movs.w	r9, r0, asr #16
 80201de:	d44d      	bmi.n	802027c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80201e0:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80201e4:	454a      	cmp	r2, r9
 80201e6:	dd49      	ble.n	802027c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80201e8:	b236      	sxth	r6, r6
 80201ea:	9a01      	ldr	r2, [sp, #4]
 80201ec:	fb09 7606 	mla	r6, r9, r6, r7
 80201f0:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 80201f4:	0e3a      	lsrs	r2, r7, #24
 80201f6:	d041      	beq.n	802027c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80201f8:	9e03      	ldr	r6, [sp, #12]
 80201fa:	fa5f fb87 	uxtb.w	fp, r7
 80201fe:	4372      	muls	r2, r6
 8020200:	1c56      	adds	r6, r2, #1
 8020202:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8020206:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 802020a:	1212      	asrs	r2, r2, #8
 802020c:	f815 9006 	ldrb.w	r9, [r5, r6]
 8020210:	fa1f fa82 	uxth.w	sl, r2
 8020214:	43d2      	mvns	r2, r2
 8020216:	fb1b fb0a 	smulbb	fp, fp, sl
 802021a:	b2d2      	uxtb	r2, r2
 802021c:	fb09 b902 	mla	r9, r9, r2, fp
 8020220:	fa1f f989 	uxth.w	r9, r9
 8020224:	f109 0b01 	add.w	fp, r9, #1
 8020228:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 802022c:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8020230:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8020234:	fb1b fb0a 	smulbb	fp, fp, sl
 8020238:	ea4f 2929 	mov.w	r9, r9, asr #8
 802023c:	fb17 fa0a 	smulbb	sl, r7, sl
 8020240:	f805 9006 	strb.w	r9, [r5, r6]
 8020244:	442e      	add	r6, r5
 8020246:	78b7      	ldrb	r7, [r6, #2]
 8020248:	f896 9001 	ldrb.w	r9, [r6, #1]
 802024c:	fb07 aa02 	mla	sl, r7, r2, sl
 8020250:	fb09 b902 	mla	r9, r9, r2, fp
 8020254:	fa1f fa8a 	uxth.w	sl, sl
 8020258:	fa1f f989 	uxth.w	r9, r9
 802025c:	f10a 0701 	add.w	r7, sl, #1
 8020260:	f109 0b01 	add.w	fp, r9, #1
 8020264:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020268:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 802026c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020270:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020274:	f886 a002 	strb.w	sl, [r6, #2]
 8020278:	f886 9001 	strb.w	r9, [r6, #1]
 802027c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802027e:	4474      	add	r4, lr
 8020280:	f108 0801 	add.w	r8, r8, #1
 8020284:	4410      	add	r0, r2
 8020286:	e762      	b.n	802014e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8020288:	b005      	add	sp, #20
 802028a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802028e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802028e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020292:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020294:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8020298:	9201      	str	r2, [sp, #4]
 802029a:	6860      	ldr	r0, [r4, #4]
 802029c:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 80202a0:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	@ 0x48
 80202a4:	fb00 2505 	mla	r5, r0, r5, r2
 80202a8:	6822      	ldr	r2, [r4, #0]
 80202aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80202ae:	4415      	add	r5, r2
 80202b0:	f8dc 2000 	ldr.w	r2, [ip]
 80202b4:	9200      	str	r2, [sp, #0]
 80202b6:	2900      	cmp	r1, #0
 80202b8:	dc03      	bgt.n	80202c2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80202ba:	9a01      	ldr	r2, [sp, #4]
 80202bc:	2a00      	cmp	r2, #0
 80202be:	f340 812b 	ble.w	8020518 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80202c2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80202c4:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80202c8:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 80202cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80202ce:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80202d2:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80202d6:	2b00      	cmp	r3, #0
 80202d8:	dd0e      	ble.n	80202f8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80202da:	1422      	asrs	r2, r4, #16
 80202dc:	d405      	bmi.n	80202ea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80202de:	4572      	cmp	r2, lr
 80202e0:	da03      	bge.n	80202ea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80202e2:	1402      	asrs	r2, r0, #16
 80202e4:	d401      	bmi.n	80202ea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80202e6:	42ba      	cmp	r2, r7
 80202e8:	db07      	blt.n	80202fa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80202ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80202ec:	3b01      	subs	r3, #1
 80202ee:	3503      	adds	r5, #3
 80202f0:	4414      	add	r4, r2
 80202f2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80202f4:	4410      	add	r0, r2
 80202f6:	e7ee      	b.n	80202d6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80202f8:	d06f      	beq.n	80203da <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 80202fa:	1e5a      	subs	r2, r3, #1
 80202fc:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 80202fe:	fb06 4602 	mla	r6, r6, r2, r4
 8020302:	1436      	asrs	r6, r6, #16
 8020304:	d45e      	bmi.n	80203c4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8020306:	4576      	cmp	r6, lr
 8020308:	da5c      	bge.n	80203c4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 802030a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 802030c:	fb06 0202 	mla	r2, r6, r2, r0
 8020310:	1412      	asrs	r2, r2, #16
 8020312:	d457      	bmi.n	80203c4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8020314:	42ba      	cmp	r2, r7
 8020316:	da55      	bge.n	80203c4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8020318:	1cee      	adds	r6, r5, #3
 802031a:	469a      	mov	sl, r3
 802031c:	f1ba 0f00 	cmp.w	sl, #0
 8020320:	dd56      	ble.n	80203d0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8020322:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8020326:	1427      	asrs	r7, r4, #16
 8020328:	1402      	asrs	r2, r0, #16
 802032a:	fb0e 7202 	mla	r2, lr, r2, r7
 802032e:	9f00      	ldr	r7, [sp, #0]
 8020330:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8020334:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 8020338:	d03c      	beq.n	80203b4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 802033a:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 802033e:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8020342:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8020346:	fa5f f28e 	uxtb.w	r2, lr
 802034a:	b2ff      	uxtb	r7, r7
 802034c:	f000 80dd 	beq.w	802050a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8020350:	fa1f f882 	uxth.w	r8, r2
 8020354:	43d2      	mvns	r2, r2
 8020356:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 802035a:	fb17 f708 	smulbb	r7, r7, r8
 802035e:	b2d2      	uxtb	r2, r2
 8020360:	fb19 f908 	smulbb	r9, r9, r8
 8020364:	fb0e 7702 	mla	r7, lr, r2, r7
 8020368:	fb1b f808 	smulbb	r8, fp, r8
 802036c:	b2bf      	uxth	r7, r7
 802036e:	f107 0e01 	add.w	lr, r7, #1
 8020372:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8020376:	123f      	asrs	r7, r7, #8
 8020378:	f806 7c03 	strb.w	r7, [r6, #-3]
 802037c:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8020380:	fb07 9902 	mla	r9, r7, r2, r9
 8020384:	fa1f f989 	uxth.w	r9, r9
 8020388:	f109 0701 	add.w	r7, r9, #1
 802038c:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8020390:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8020394:	fb07 8802 	mla	r8, r7, r2, r8
 8020398:	ea4f 2929 	mov.w	r9, r9, asr #8
 802039c:	fa1f f888 	uxth.w	r8, r8
 80203a0:	f806 9c02 	strb.w	r9, [r6, #-2]
 80203a4:	f108 0201 	add.w	r2, r8, #1
 80203a8:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80203ac:	ea4f 2828 	mov.w	r8, r8, asr #8
 80203b0:	f806 8c01 	strb.w	r8, [r6, #-1]
 80203b4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80203b6:	3603      	adds	r6, #3
 80203b8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80203bc:	4414      	add	r4, r2
 80203be:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80203c0:	4410      	add	r0, r2
 80203c2:	e7ab      	b.n	802031c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80203c4:	f04f 0e00 	mov.w	lr, #0
 80203c8:	eba3 020e 	sub.w	r2, r3, lr
 80203cc:	2a00      	cmp	r2, #0
 80203ce:	dc3d      	bgt.n	802044c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80203d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80203d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80203d8:	441d      	add	r5, r3
 80203da:	2900      	cmp	r1, #0
 80203dc:	f340 809c 	ble.w	8020518 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80203e0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80203e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80203e6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80203ea:	3901      	subs	r1, #1
 80203ec:	eeb0 6a62 	vmov.f32	s12, s5
 80203f0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80203f4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80203f8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80203fc:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 8020400:	eeb0 6a43 	vmov.f32	s12, s6
 8020404:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020408:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 802040c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020410:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020414:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020418:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802041c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020420:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020424:	ee12 2a90 	vmov	r2, s5
 8020428:	eef0 2a47 	vmov.f32	s5, s14
 802042c:	fb92 f3f3 	sdiv	r3, r2, r3
 8020430:	ee13 2a10 	vmov	r2, s6
 8020434:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020436:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020438:	eeb0 3a67 	vmov.f32	s6, s15
 802043c:	fb92 f3f3 	sdiv	r3, r2, r3
 8020440:	9a01      	ldr	r2, [sp, #4]
 8020442:	9310      	str	r3, [sp, #64]	@ 0x40
 8020444:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020446:	bf08      	it	eq
 8020448:	4613      	moveq	r3, r2
 802044a:	e734      	b.n	80202b6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 802044c:	1427      	asrs	r7, r4, #16
 802044e:	d44d      	bmi.n	80204ec <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020450:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8020454:	42be      	cmp	r6, r7
 8020456:	dd49      	ble.n	80204ec <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020458:	ea5f 4820 	movs.w	r8, r0, asr #16
 802045c:	d446      	bmi.n	80204ec <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 802045e:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8020462:	4542      	cmp	r2, r8
 8020464:	dd42      	ble.n	80204ec <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020466:	b236      	sxth	r6, r6
 8020468:	9a00      	ldr	r2, [sp, #0]
 802046a:	fb08 7606 	mla	r6, r8, r6, r7
 802046e:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8020472:	0e3a      	lsrs	r2, r7, #24
 8020474:	d03a      	beq.n	80204ec <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8020476:	2aff      	cmp	r2, #255	@ 0xff
 8020478:	b2d6      	uxtb	r6, r2
 802047a:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 802047e:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8020482:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8020486:	b2ff      	uxtb	r7, r7
 8020488:	d037      	beq.n	80204fa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 802048a:	fa1f f986 	uxth.w	r9, r6
 802048e:	4472      	add	r2, lr
 8020490:	43f6      	mvns	r6, r6
 8020492:	f815 8002 	ldrb.w	r8, [r5, r2]
 8020496:	fb17 f709 	smulbb	r7, r7, r9
 802049a:	fb1a fa09 	smulbb	sl, sl, r9
 802049e:	b2f6      	uxtb	r6, r6
 80204a0:	fb1b f909 	smulbb	r9, fp, r9
 80204a4:	fb08 7706 	mla	r7, r8, r6, r7
 80204a8:	b2bf      	uxth	r7, r7
 80204aa:	f107 0801 	add.w	r8, r7, #1
 80204ae:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 80204b2:	123f      	asrs	r7, r7, #8
 80204b4:	54af      	strb	r7, [r5, r2]
 80204b6:	442a      	add	r2, r5
 80204b8:	7857      	ldrb	r7, [r2, #1]
 80204ba:	fb07 aa06 	mla	sl, r7, r6, sl
 80204be:	fa1f fa8a 	uxth.w	sl, sl
 80204c2:	f10a 0701 	add.w	r7, sl, #1
 80204c6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80204ca:	7897      	ldrb	r7, [r2, #2]
 80204cc:	fb07 9906 	mla	r9, r7, r6, r9
 80204d0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80204d4:	fa1f f989 	uxth.w	r9, r9
 80204d8:	f882 a001 	strb.w	sl, [r2, #1]
 80204dc:	f109 0601 	add.w	r6, r9, #1
 80204e0:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 80204e4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80204e8:	f882 9002 	strb.w	r9, [r2, #2]
 80204ec:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80204ee:	f10e 0e01 	add.w	lr, lr, #1
 80204f2:	4414      	add	r4, r2
 80204f4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80204f6:	4410      	add	r0, r2
 80204f8:	e766      	b.n	80203c8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80204fa:	4472      	add	r2, lr
 80204fc:	54af      	strb	r7, [r5, r2]
 80204fe:	442a      	add	r2, r5
 8020500:	f882 a001 	strb.w	sl, [r2, #1]
 8020504:	f882 b002 	strb.w	fp, [r2, #2]
 8020508:	e7f0      	b.n	80204ec <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 802050a:	f806 7c03 	strb.w	r7, [r6, #-3]
 802050e:	f806 9c02 	strb.w	r9, [r6, #-2]
 8020512:	f806 bc01 	strb.w	fp, [r6, #-1]
 8020516:	e74d      	b.n	80203b4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8020518:	b003      	add	sp, #12
 802051a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020520 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020524:	b087      	sub	sp, #28
 8020526:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802052a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802052c:	9204      	str	r2, [sp, #16]
 802052e:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8020532:	6860      	ldr	r0, [r4, #4]
 8020534:	9205      	str	r2, [sp, #20]
 8020536:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 802053a:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 802053e:	9101      	str	r1, [sp, #4]
 8020540:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 8020544:	fb00 2505 	mla	r5, r0, r5, r2
 8020548:	6822      	ldr	r2, [r4, #0]
 802054a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802054e:	4415      	add	r5, r2
 8020550:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8020554:	3201      	adds	r2, #1
 8020556:	f022 0201 	bic.w	r2, r2, #1
 802055a:	9202      	str	r2, [sp, #8]
 802055c:	f8dc 2000 	ldr.w	r2, [ip]
 8020560:	9203      	str	r2, [sp, #12]
 8020562:	9a01      	ldr	r2, [sp, #4]
 8020564:	2a00      	cmp	r2, #0
 8020566:	dc03      	bgt.n	8020570 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8020568:	9a04      	ldr	r2, [sp, #16]
 802056a:	2a00      	cmp	r2, #0
 802056c:	f340 8135 	ble.w	80207da <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8020570:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020572:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8020576:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 802057a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802057c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8020580:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8020584:	2b00      	cmp	r3, #0
 8020586:	dd0d      	ble.n	80205a4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020588:	1422      	asrs	r2, r4, #16
 802058a:	d405      	bmi.n	8020598 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802058c:	4542      	cmp	r2, r8
 802058e:	da03      	bge.n	8020598 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020590:	1402      	asrs	r2, r0, #16
 8020592:	d401      	bmi.n	8020598 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020594:	42ba      	cmp	r2, r7
 8020596:	db06      	blt.n	80205a6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020598:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802059a:	4474      	add	r4, lr
 802059c:	3b01      	subs	r3, #1
 802059e:	3503      	adds	r5, #3
 80205a0:	4410      	add	r0, r2
 80205a2:	e7ef      	b.n	8020584 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80205a4:	d077      	beq.n	8020696 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80205a6:	1e5a      	subs	r2, r3, #1
 80205a8:	fb0e 4602 	mla	r6, lr, r2, r4
 80205ac:	1436      	asrs	r6, r6, #16
 80205ae:	d469      	bmi.n	8020684 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80205b0:	4546      	cmp	r6, r8
 80205b2:	da67      	bge.n	8020684 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80205b4:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80205b6:	fb06 0202 	mla	r2, r6, r2, r0
 80205ba:	1412      	asrs	r2, r2, #16
 80205bc:	d462      	bmi.n	8020684 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80205be:	42ba      	cmp	r2, r7
 80205c0:	da60      	bge.n	8020684 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80205c2:	1cee      	adds	r6, r5, #3
 80205c4:	4699      	mov	r9, r3
 80205c6:	f1b9 0f00 	cmp.w	r9, #0
 80205ca:	dd5f      	ble.n	802068c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 80205cc:	1422      	asrs	r2, r4, #16
 80205ce:	9902      	ldr	r1, [sp, #8]
 80205d0:	1407      	asrs	r7, r0, #16
 80205d2:	fb01 2707 	mla	r7, r1, r7, r2
 80205d6:	9903      	ldr	r1, [sp, #12]
 80205d8:	087a      	lsrs	r2, r7, #1
 80205da:	5c8a      	ldrb	r2, [r1, r2]
 80205dc:	07f9      	lsls	r1, r7, #31
 80205de:	bf54      	ite	pl
 80205e0:	f002 020f 	andpl.w	r2, r2, #15
 80205e4:	1112      	asrmi	r2, r2, #4
 80205e6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80205ea:	b2d2      	uxtb	r2, r2
 80205ec:	2a00      	cmp	r2, #0
 80205ee:	d042      	beq.n	8020676 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80205f0:	497b      	ldr	r1, [pc, #492]	@ (80207e0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 80205f2:	680f      	ldr	r7, [r1, #0]
 80205f4:	9905      	ldr	r1, [sp, #20]
 80205f6:	fa5f fb87 	uxtb.w	fp, r7
 80205fa:	434a      	muls	r2, r1
 80205fc:	f102 0801 	add.w	r8, r2, #1
 8020600:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8020604:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8020608:	1212      	asrs	r2, r2, #8
 802060a:	fa1f fa82 	uxth.w	sl, r2
 802060e:	43d2      	mvns	r2, r2
 8020610:	fb1b fb0a 	smulbb	fp, fp, sl
 8020614:	b2d2      	uxtb	r2, r2
 8020616:	fb08 b802 	mla	r8, r8, r2, fp
 802061a:	fa1f f888 	uxth.w	r8, r8
 802061e:	f108 0b01 	add.w	fp, r8, #1
 8020622:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8020626:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 802062a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 802062e:	fb1b fb0a 	smulbb	fp, fp, sl
 8020632:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020636:	fb17 fa0a 	smulbb	sl, r7, sl
 802063a:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 802063e:	f806 8c03 	strb.w	r8, [r6, #-3]
 8020642:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 8020646:	fb07 aa02 	mla	sl, r7, r2, sl
 802064a:	fb08 b802 	mla	r8, r8, r2, fp
 802064e:	fa1f fa8a 	uxth.w	sl, sl
 8020652:	fa1f f888 	uxth.w	r8, r8
 8020656:	f10a 0701 	add.w	r7, sl, #1
 802065a:	f108 0b01 	add.w	fp, r8, #1
 802065e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020662:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8020666:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802066a:	ea4f 2828 	mov.w	r8, r8, asr #8
 802066e:	f806 ac01 	strb.w	sl, [r6, #-1]
 8020672:	f806 8c02 	strb.w	r8, [r6, #-2]
 8020676:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020678:	4474      	add	r4, lr
 802067a:	3603      	adds	r6, #3
 802067c:	f109 39ff 	add.w	r9, r9, #4294967295
 8020680:	4410      	add	r0, r2
 8020682:	e7a0      	b.n	80205c6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8020684:	2700      	movs	r7, #0
 8020686:	1bda      	subs	r2, r3, r7
 8020688:	2a00      	cmp	r2, #0
 802068a:	dc3e      	bgt.n	802070a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802068c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020690:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020694:	441d      	add	r5, r3
 8020696:	9b01      	ldr	r3, [sp, #4]
 8020698:	2b00      	cmp	r3, #0
 802069a:	f340 809e 	ble.w	80207da <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 802069e:	ee30 0a04 	vadd.f32	s0, s0, s8
 80206a2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80206a4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80206a8:	eeb0 6a62 	vmov.f32	s12, s5
 80206ac:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80206b0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80206b4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80206b8:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 80206bc:	eeb0 6a43 	vmov.f32	s12, s6
 80206c0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80206c4:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 80206c8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80206cc:	ee61 7a27 	vmul.f32	s15, s2, s15
 80206d0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80206d4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80206d8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80206dc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80206e0:	ee12 2a90 	vmov	r2, s5
 80206e4:	eef0 2a47 	vmov.f32	s5, s14
 80206e8:	fb92 fef3 	sdiv	lr, r2, r3
 80206ec:	ee13 2a10 	vmov	r2, s6
 80206f0:	eeb0 3a67 	vmov.f32	s6, s15
 80206f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80206f8:	9314      	str	r3, [sp, #80]	@ 0x50
 80206fa:	9b01      	ldr	r3, [sp, #4]
 80206fc:	9a04      	ldr	r2, [sp, #16]
 80206fe:	3b01      	subs	r3, #1
 8020700:	9301      	str	r3, [sp, #4]
 8020702:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020704:	bf08      	it	eq
 8020706:	4613      	moveq	r3, r2
 8020708:	e72b      	b.n	8020562 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 802070a:	1426      	asrs	r6, r4, #16
 802070c:	d460      	bmi.n	80207d0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 802070e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8020712:	42b2      	cmp	r2, r6
 8020714:	dd5c      	ble.n	80207d0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8020716:	ea5f 4820 	movs.w	r8, r0, asr #16
 802071a:	d459      	bmi.n	80207d0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 802071c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8020720:	4542      	cmp	r2, r8
 8020722:	dd55      	ble.n	80207d0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8020724:	9a02      	ldr	r2, [sp, #8]
 8020726:	9903      	ldr	r1, [sp, #12]
 8020728:	fb08 6602 	mla	r6, r8, r2, r6
 802072c:	0872      	lsrs	r2, r6, #1
 802072e:	07f6      	lsls	r6, r6, #31
 8020730:	5c8a      	ldrb	r2, [r1, r2]
 8020732:	bf54      	ite	pl
 8020734:	f002 020f 	andpl.w	r2, r2, #15
 8020738:	1112      	asrmi	r2, r2, #4
 802073a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802073e:	b2d2      	uxtb	r2, r2
 8020740:	2a00      	cmp	r2, #0
 8020742:	d045      	beq.n	80207d0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8020744:	4926      	ldr	r1, [pc, #152]	@ (80207e0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8020746:	f8d1 8000 	ldr.w	r8, [r1]
 802074a:	9905      	ldr	r1, [sp, #20]
 802074c:	fa5f fb88 	uxtb.w	fp, r8
 8020750:	434a      	muls	r2, r1
 8020752:	1c56      	adds	r6, r2, #1
 8020754:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8020758:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 802075c:	1212      	asrs	r2, r2, #8
 802075e:	f815 9006 	ldrb.w	r9, [r5, r6]
 8020762:	fa1f fa82 	uxth.w	sl, r2
 8020766:	43d2      	mvns	r2, r2
 8020768:	fb1b fb0a 	smulbb	fp, fp, sl
 802076c:	b2d2      	uxtb	r2, r2
 802076e:	fb09 b902 	mla	r9, r9, r2, fp
 8020772:	fa1f f989 	uxth.w	r9, r9
 8020776:	f109 0b01 	add.w	fp, r9, #1
 802077a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 802077e:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 8020782:	f3c8 4807 	ubfx	r8, r8, #16, #8
 8020786:	fb1b fb0a 	smulbb	fp, fp, sl
 802078a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802078e:	fb18 fa0a 	smulbb	sl, r8, sl
 8020792:	f805 9006 	strb.w	r9, [r5, r6]
 8020796:	442e      	add	r6, r5
 8020798:	f896 8002 	ldrb.w	r8, [r6, #2]
 802079c:	f896 9001 	ldrb.w	r9, [r6, #1]
 80207a0:	fb08 aa02 	mla	sl, r8, r2, sl
 80207a4:	fb09 b902 	mla	r9, r9, r2, fp
 80207a8:	fa1f fa8a 	uxth.w	sl, sl
 80207ac:	fa1f f989 	uxth.w	r9, r9
 80207b0:	f10a 0801 	add.w	r8, sl, #1
 80207b4:	f109 0b01 	add.w	fp, r9, #1
 80207b8:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 80207bc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80207c0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80207c4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80207c8:	f886 a002 	strb.w	sl, [r6, #2]
 80207cc:	f886 9001 	strb.w	r9, [r6, #1]
 80207d0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80207d2:	4474      	add	r4, lr
 80207d4:	3701      	adds	r7, #1
 80207d6:	4410      	add	r0, r2
 80207d8:	e755      	b.n	8020686 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 80207da:	b007      	add	sp, #28
 80207dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80207e0:	24013b68 	.word	0x24013b68

080207e4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80207e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80207e8:	b085      	sub	sp, #20
 80207ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80207ee:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80207f0:	9203      	str	r2, [sp, #12]
 80207f2:	6860      	ldr	r0, [r4, #4]
 80207f4:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 80207f8:	9100      	str	r1, [sp, #0]
 80207fa:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	@ 0x50
 80207fe:	fb00 2606 	mla	r6, r0, r6, r2
 8020802:	6822      	ldr	r2, [r4, #0]
 8020804:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020808:	4416      	add	r6, r2
 802080a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 802080e:	3201      	adds	r2, #1
 8020810:	f022 0201 	bic.w	r2, r2, #1
 8020814:	9201      	str	r2, [sp, #4]
 8020816:	f8dc 2000 	ldr.w	r2, [ip]
 802081a:	9202      	str	r2, [sp, #8]
 802081c:	9a00      	ldr	r2, [sp, #0]
 802081e:	2a00      	cmp	r2, #0
 8020820:	dc03      	bgt.n	802082a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8020822:	9a03      	ldr	r2, [sp, #12]
 8020824:	2a00      	cmp	r2, #0
 8020826:	f340 8140 	ble.w	8020aaa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 802082a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802082c:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8020830:	f502 4500 	add.w	r5, r2, #32768	@ 0x8000
 8020834:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8020836:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 802083a:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 802083e:	2b00      	cmp	r3, #0
 8020840:	dd0e      	ble.n	8020860 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020842:	142a      	asrs	r2, r5, #16
 8020844:	d405      	bmi.n	8020852 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020846:	4572      	cmp	r2, lr
 8020848:	da03      	bge.n	8020852 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802084a:	1422      	asrs	r2, r4, #16
 802084c:	d401      	bmi.n	8020852 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802084e:	42ba      	cmp	r2, r7
 8020850:	db07      	blt.n	8020862 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8020852:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020854:	3b01      	subs	r3, #1
 8020856:	3603      	adds	r6, #3
 8020858:	4415      	add	r5, r2
 802085a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802085c:	4414      	add	r4, r2
 802085e:	e7ee      	b.n	802083e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8020860:	d072      	beq.n	8020948 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020862:	1e5a      	subs	r2, r3, #1
 8020864:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8020866:	fb00 5002 	mla	r0, r0, r2, r5
 802086a:	1400      	asrs	r0, r0, #16
 802086c:	d463      	bmi.n	8020936 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802086e:	4570      	cmp	r0, lr
 8020870:	da61      	bge.n	8020936 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8020872:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020874:	fb00 4202 	mla	r2, r0, r2, r4
 8020878:	1412      	asrs	r2, r2, #16
 802087a:	d45c      	bmi.n	8020936 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802087c:	42ba      	cmp	r2, r7
 802087e:	da5a      	bge.n	8020936 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8020880:	1cf0      	adds	r0, r6, #3
 8020882:	469a      	mov	sl, r3
 8020884:	f1ba 0f00 	cmp.w	sl, #0
 8020888:	dd59      	ble.n	802093e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 802088a:	142a      	asrs	r2, r5, #16
 802088c:	9901      	ldr	r1, [sp, #4]
 802088e:	1427      	asrs	r7, r4, #16
 8020890:	fb01 2707 	mla	r7, r1, r7, r2
 8020894:	9902      	ldr	r1, [sp, #8]
 8020896:	087a      	lsrs	r2, r7, #1
 8020898:	5c8a      	ldrb	r2, [r1, r2]
 802089a:	07f9      	lsls	r1, r7, #31
 802089c:	bf54      	ite	pl
 802089e:	f002 020f 	andpl.w	r2, r2, #15
 80208a2:	1112      	asrmi	r2, r2, #4
 80208a4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80208a8:	b2d2      	uxtb	r2, r2
 80208aa:	2a00      	cmp	r2, #0
 80208ac:	d03b      	beq.n	8020926 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80208ae:	4980      	ldr	r1, [pc, #512]	@ (8020ab0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 80208b0:	2aff      	cmp	r2, #255	@ 0xff
 80208b2:	680f      	ldr	r7, [r1, #0]
 80208b4:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80208b8:	f3c7 2907 	ubfx	r9, r7, #8, #8
 80208bc:	b2ff      	uxtb	r7, r7
 80208be:	f000 80ed 	beq.w	8020a9c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 80208c2:	fa1f f882 	uxth.w	r8, r2
 80208c6:	43d2      	mvns	r2, r2
 80208c8:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 80208cc:	fb17 f708 	smulbb	r7, r7, r8
 80208d0:	b2d2      	uxtb	r2, r2
 80208d2:	fb19 f908 	smulbb	r9, r9, r8
 80208d6:	fb0e 7702 	mla	r7, lr, r2, r7
 80208da:	fb1b f808 	smulbb	r8, fp, r8
 80208de:	b2bf      	uxth	r7, r7
 80208e0:	f107 0e01 	add.w	lr, r7, #1
 80208e4:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 80208e8:	123f      	asrs	r7, r7, #8
 80208ea:	f800 7c03 	strb.w	r7, [r0, #-3]
 80208ee:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 80208f2:	fb07 9902 	mla	r9, r7, r2, r9
 80208f6:	fa1f f989 	uxth.w	r9, r9
 80208fa:	f109 0701 	add.w	r7, r9, #1
 80208fe:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8020902:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8020906:	fb07 8802 	mla	r8, r7, r2, r8
 802090a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802090e:	fa1f f888 	uxth.w	r8, r8
 8020912:	f800 9c02 	strb.w	r9, [r0, #-2]
 8020916:	f108 0201 	add.w	r2, r8, #1
 802091a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802091e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020922:	f800 8c01 	strb.w	r8, [r0, #-1]
 8020926:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020928:	3003      	adds	r0, #3
 802092a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802092e:	4415      	add	r5, r2
 8020930:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8020932:	4414      	add	r4, r2
 8020934:	e7a6      	b.n	8020884 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020936:	2700      	movs	r7, #0
 8020938:	1bda      	subs	r2, r3, r7
 802093a:	2a00      	cmp	r2, #0
 802093c:	dc40      	bgt.n	80209c0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 802093e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020942:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020946:	441e      	add	r6, r3
 8020948:	9b00      	ldr	r3, [sp, #0]
 802094a:	2b00      	cmp	r3, #0
 802094c:	f340 80ad 	ble.w	8020aaa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8020950:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020954:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020956:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802095a:	eeb0 6a62 	vmov.f32	s12, s5
 802095e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020962:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020966:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802096a:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 802096e:	eeb0 6a43 	vmov.f32	s12, s6
 8020972:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020976:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 802097a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802097e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020982:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020986:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802098a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802098e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020992:	ee12 2a90 	vmov	r2, s5
 8020996:	eef0 2a47 	vmov.f32	s5, s14
 802099a:	fb92 f3f3 	sdiv	r3, r2, r3
 802099e:	ee13 2a10 	vmov	r2, s6
 80209a2:	9311      	str	r3, [sp, #68]	@ 0x44
 80209a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80209a6:	eeb0 3a67 	vmov.f32	s6, s15
 80209aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80209ae:	9312      	str	r3, [sp, #72]	@ 0x48
 80209b0:	9b00      	ldr	r3, [sp, #0]
 80209b2:	9a03      	ldr	r2, [sp, #12]
 80209b4:	3b01      	subs	r3, #1
 80209b6:	9300      	str	r3, [sp, #0]
 80209b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80209ba:	bf08      	it	eq
 80209bc:	4613      	moveq	r3, r2
 80209be:	e72d      	b.n	802081c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80209c0:	1428      	asrs	r0, r5, #16
 80209c2:	d45c      	bmi.n	8020a7e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80209c4:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80209c8:	4282      	cmp	r2, r0
 80209ca:	dd58      	ble.n	8020a7e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80209cc:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80209d0:	d455      	bmi.n	8020a7e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80209d2:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80209d6:	4572      	cmp	r2, lr
 80209d8:	dd51      	ble.n	8020a7e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80209da:	9a01      	ldr	r2, [sp, #4]
 80209dc:	9902      	ldr	r1, [sp, #8]
 80209de:	fb0e 0002 	mla	r0, lr, r2, r0
 80209e2:	0842      	lsrs	r2, r0, #1
 80209e4:	07c0      	lsls	r0, r0, #31
 80209e6:	5c8a      	ldrb	r2, [r1, r2]
 80209e8:	bf54      	ite	pl
 80209ea:	f002 020f 	andpl.w	r2, r2, #15
 80209ee:	1112      	asrmi	r2, r2, #4
 80209f0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80209f4:	b2d2      	uxtb	r2, r2
 80209f6:	2a00      	cmp	r2, #0
 80209f8:	d041      	beq.n	8020a7e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80209fa:	492d      	ldr	r1, [pc, #180]	@ (8020ab0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 80209fc:	2aff      	cmp	r2, #255	@ 0xff
 80209fe:	6808      	ldr	r0, [r1, #0]
 8020a00:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8020a04:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8020a08:	fa5f fe80 	uxtb.w	lr, r0
 8020a0c:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8020a10:	d03b      	beq.n	8020a8a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8020a12:	fa1f f982 	uxth.w	r9, r2
 8020a16:	4438      	add	r0, r7
 8020a18:	43d2      	mvns	r2, r2
 8020a1a:	f816 8000 	ldrb.w	r8, [r6, r0]
 8020a1e:	fb1e fe09 	smulbb	lr, lr, r9
 8020a22:	fb1a fa09 	smulbb	sl, sl, r9
 8020a26:	b2d2      	uxtb	r2, r2
 8020a28:	fb1b f909 	smulbb	r9, fp, r9
 8020a2c:	fb08 ee02 	mla	lr, r8, r2, lr
 8020a30:	fa1f fe8e 	uxth.w	lr, lr
 8020a34:	f10e 0801 	add.w	r8, lr, #1
 8020a38:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 8020a3c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020a40:	f806 e000 	strb.w	lr, [r6, r0]
 8020a44:	4430      	add	r0, r6
 8020a46:	f890 e001 	ldrb.w	lr, [r0, #1]
 8020a4a:	fb0e aa02 	mla	sl, lr, r2, sl
 8020a4e:	fa1f fa8a 	uxth.w	sl, sl
 8020a52:	f10a 0e01 	add.w	lr, sl, #1
 8020a56:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 8020a5a:	f890 e002 	ldrb.w	lr, [r0, #2]
 8020a5e:	fb0e 9902 	mla	r9, lr, r2, r9
 8020a62:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020a66:	fa1f f989 	uxth.w	r9, r9
 8020a6a:	f880 a001 	strb.w	sl, [r0, #1]
 8020a6e:	f109 0201 	add.w	r2, r9, #1
 8020a72:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8020a76:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020a7a:	f880 9002 	strb.w	r9, [r0, #2]
 8020a7e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020a80:	3701      	adds	r7, #1
 8020a82:	4415      	add	r5, r2
 8020a84:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8020a86:	4414      	add	r4, r2
 8020a88:	e756      	b.n	8020938 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8020a8a:	4438      	add	r0, r7
 8020a8c:	f806 e000 	strb.w	lr, [r6, r0]
 8020a90:	4430      	add	r0, r6
 8020a92:	f880 a001 	strb.w	sl, [r0, #1]
 8020a96:	f880 b002 	strb.w	fp, [r0, #2]
 8020a9a:	e7f0      	b.n	8020a7e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8020a9c:	f800 7c03 	strb.w	r7, [r0, #-3]
 8020aa0:	f800 9c02 	strb.w	r9, [r0, #-2]
 8020aa4:	f800 bc01 	strb.w	fp, [r0, #-1]
 8020aa8:	e73d      	b.n	8020926 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8020aaa:	b005      	add	sp, #20
 8020aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020ab0:	24013b68 	.word	0x24013b68

08020ab4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID1Ev>:
 8020ab4:	4770      	bx	lr

08020ab6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev>:
 8020ab6:	4770      	bx	lr

08020ab8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev>:
 8020ab8:	4770      	bx	lr

08020aba <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev>:
 8020aba:	4770      	bx	lr

08020abc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8020abc:	4770      	bx	lr

08020abe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8020abe:	4770      	bx	lr

08020ac0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8020ac0:	4770      	bx	lr

08020ac2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8020ac2:	4770      	bx	lr

08020ac4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8020ac4:	4770      	bx	lr

08020ac6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020ac6:	4770      	bx	lr

08020ac8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8020ac8:	4770      	bx	lr

08020aca <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020aca:	4770      	bx	lr

08020acc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020acc:	4770      	bx	lr

08020ace <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8020ace:	4770      	bx	lr

08020ad0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8020ad0:	4770      	bx	lr

08020ad2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8020ad2:	4770      	bx	lr

08020ad4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8020ad4:	4770      	bx	lr

08020ad6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020ad6:	4770      	bx	lr

08020ad8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8020ad8:	4770      	bx	lr

08020ada <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020ada:	4770      	bx	lr

08020adc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020adc:	4770      	bx	lr

08020ade <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8020ade:	4770      	bx	lr

08020ae0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8020ae0:	4770      	bx	lr

08020ae2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8020ae2:	4770      	bx	lr

08020ae4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8020ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020ae6:	4606      	mov	r6, r0
 8020ae8:	b087      	sub	sp, #28
 8020aea:	4615      	mov	r5, r2
 8020aec:	461f      	mov	r7, r3
 8020aee:	b353      	cbz	r3, 8020b46 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8020af0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8020af4:	2b00      	cmp	r3, #0
 8020af6:	dd26      	ble.n	8020b46 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8020af8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8020afc:	2b00      	cmp	r3, #0
 8020afe:	dd22      	ble.n	8020b46 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8020b00:	6808      	ldr	r0, [r1, #0]
 8020b02:	aa04      	add	r2, sp, #16
 8020b04:	6849      	ldr	r1, [r1, #4]
 8020b06:	4c1b      	ldr	r4, [pc, #108]	@ (8020b74 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8020b08:	c203      	stmia	r2!, {r0, r1}
 8020b0a:	a804      	add	r0, sp, #16
 8020b0c:	f7fa ffb0 	bl	801ba70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020b10:	6820      	ldr	r0, [r4, #0]
 8020b12:	6803      	ldr	r3, [r0, #0]
 8020b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8020b16:	4798      	blx	r3
 8020b18:	2fff      	cmp	r7, #255	@ 0xff
 8020b1a:	d016      	beq.n	8020b4a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8020b1c:	f010 0f08 	tst.w	r0, #8
 8020b20:	6820      	ldr	r0, [r4, #0]
 8020b22:	d015      	beq.n	8020b50 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8020b24:	2400      	movs	r4, #0
 8020b26:	6801      	ldr	r1, [r0, #0]
 8020b28:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8020b2c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8020b30:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8020b34:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8020b38:	9401      	str	r4, [sp, #4]
 8020b3a:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8020b3e:	9400      	str	r4, [sp, #0]
 8020b40:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 8020b42:	4629      	mov	r1, r5
 8020b44:	47a0      	blx	r4
 8020b46:	b007      	add	sp, #28
 8020b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020b4a:	f010 0f02 	tst.w	r0, #2
 8020b4e:	e7e7      	b.n	8020b20 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8020b50:	6803      	ldr	r3, [r0, #0]
 8020b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020b54:	4798      	blx	r3
 8020b56:	4b08      	ldr	r3, [pc, #32]	@ (8020b78 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8020b58:	4601      	mov	r1, r0
 8020b5a:	4630      	mov	r0, r6
 8020b5c:	881a      	ldrh	r2, [r3, #0]
 8020b5e:	6833      	ldr	r3, [r6, #0]
 8020b60:	e9cd 5700 	strd	r5, r7, [sp]
 8020b64:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8020b66:	ab04      	add	r3, sp, #16
 8020b68:	47a8      	blx	r5
 8020b6a:	6820      	ldr	r0, [r4, #0]
 8020b6c:	6803      	ldr	r3, [r0, #0]
 8020b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020b70:	4798      	blx	r3
 8020b72:	e7e8      	b.n	8020b46 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8020b74:	24013b58 	.word	0x24013b58
 8020b78:	24013b52 	.word	0x24013b52

08020b7c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8020b7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020b80:	b08b      	sub	sp, #44	@ 0x2c
 8020b82:	460d      	mov	r5, r1
 8020b84:	4616      	mov	r6, r2
 8020b86:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
 8020b8a:	f1b8 0f00 	cmp.w	r8, #0
 8020b8e:	d047      	beq.n	8020c20 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8020b90:	6810      	ldr	r0, [r2, #0]
 8020b92:	ac06      	add	r4, sp, #24
 8020b94:	6851      	ldr	r1, [r2, #4]
 8020b96:	4f51      	ldr	r7, [pc, #324]	@ (8020cdc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 8020b98:	c403      	stmia	r4!, {r0, r1}
 8020b9a:	6818      	ldr	r0, [r3, #0]
 8020b9c:	ac08      	add	r4, sp, #32
 8020b9e:	6859      	ldr	r1, [r3, #4]
 8020ba0:	c403      	stmia	r4!, {r0, r1}
 8020ba2:	a806      	add	r0, sp, #24
 8020ba4:	f7fa ff64 	bl	801ba70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020ba8:	4631      	mov	r1, r6
 8020baa:	a808      	add	r0, sp, #32
 8020bac:	f7fa ff88 	bl	801bac0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020bb0:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8020bb4:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8020bb8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8020bbc:	6838      	ldr	r0, [r7, #0]
 8020bbe:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020bc2:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 8020bc6:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	@ 0x26
 8020bca:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020bce:	440d      	add	r5, r1
 8020bd0:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8020bd4:	440a      	add	r2, r1
 8020bd6:	f8ad 2020 	strh.w	r2, [sp, #32]
 8020bda:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8020bde:	4413      	add	r3, r2
 8020be0:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8020be4:	6803      	ldr	r3, [r0, #0]
 8020be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8020be8:	4798      	blx	r3
 8020bea:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8020bee:	d01a      	beq.n	8020c26 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 8020bf0:	f010 0f04 	tst.w	r0, #4
 8020bf4:	6838      	ldr	r0, [r7, #0]
 8020bf6:	d019      	beq.n	8020c2c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 8020bf8:	2100      	movs	r1, #0
 8020bfa:	6807      	ldr	r7, [r0, #0]
 8020bfc:	b2a4      	uxth	r4, r4
 8020bfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8020c02:	b2b6      	uxth	r6, r6
 8020c04:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8020c08:	9401      	str	r4, [sp, #4]
 8020c0a:	9600      	str	r6, [sp, #0]
 8020c0c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8020c10:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8020c14:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8020c18:	9102      	str	r1, [sp, #8]
 8020c1a:	4629      	mov	r1, r5
 8020c1c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8020c1e:	47a0      	blx	r4
 8020c20:	b00b      	add	sp, #44	@ 0x2c
 8020c22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020c26:	f010 0f01 	tst.w	r0, #1
 8020c2a:	e7e3      	b.n	8020bf4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 8020c2c:	6803      	ldr	r3, [r0, #0]
 8020c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020c30:	4798      	blx	r3
 8020c32:	4a2b      	ldr	r2, [pc, #172]	@ (8020ce0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 8020c34:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 8020c38:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8020c3c:	8813      	ldrh	r3, [r2, #0]
 8020c3e:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 8020c42:	fb03 f404 	mul.w	r4, r3, r4
 8020c46:	fb03 c101 	mla	r1, r3, r1, ip
 8020c4a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020c4e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020c52:	4408      	add	r0, r1
 8020c54:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8020c58:	4404      	add	r4, r0
 8020c5a:	d02e      	beq.n	8020cba <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 8020c5c:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8020c60:	1b9b      	subs	r3, r3, r6
 8020c62:	f1c8 0cff 	rsb	ip, r8, #255	@ 0xff
 8020c66:	1b96      	subs	r6, r2, r6
 8020c68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020c6c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020c70:	42a0      	cmp	r0, r4
 8020c72:	d22d      	bcs.n	8020cd0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8020c74:	eb00 0e01 	add.w	lr, r0, r1
 8020c78:	4570      	cmp	r0, lr
 8020c7a:	d210      	bcs.n	8020c9e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 8020c7c:	f890 9000 	ldrb.w	r9, [r0]
 8020c80:	f815 2b01 	ldrb.w	r2, [r5], #1
 8020c84:	fb19 f90c 	smulbb	r9, r9, ip
 8020c88:	fb02 9208 	mla	r2, r2, r8, r9
 8020c8c:	b292      	uxth	r2, r2
 8020c8e:	f102 0901 	add.w	r9, r2, #1
 8020c92:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 8020c96:	1212      	asrs	r2, r2, #8
 8020c98:	f800 2b01 	strb.w	r2, [r0], #1
 8020c9c:	e7ec      	b.n	8020c78 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 8020c9e:	4418      	add	r0, r3
 8020ca0:	4435      	add	r5, r6
 8020ca2:	e7e5      	b.n	8020c70 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 8020ca4:	8813      	ldrh	r3, [r2, #0]
 8020ca6:	1b9b      	subs	r3, r3, r6
 8020ca8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020cac:	4418      	add	r0, r3
 8020cae:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8020cb2:	1b9b      	subs	r3, r3, r6
 8020cb4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020cb8:	441d      	add	r5, r3
 8020cba:	42a0      	cmp	r0, r4
 8020cbc:	d208      	bcs.n	8020cd0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8020cbe:	eb00 0c01 	add.w	ip, r0, r1
 8020cc2:	4560      	cmp	r0, ip
 8020cc4:	d2ee      	bcs.n	8020ca4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 8020cc6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8020cca:	f800 3b01 	strb.w	r3, [r0], #1
 8020cce:	e7f8      	b.n	8020cc2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 8020cd0:	6838      	ldr	r0, [r7, #0]
 8020cd2:	6803      	ldr	r3, [r0, #0]
 8020cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020cd6:	4798      	blx	r3
 8020cd8:	e7a2      	b.n	8020c20 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8020cda:	bf00      	nop
 8020cdc:	24013b58 	.word	0x24013b58
 8020ce0:	24013b52 	.word	0x24013b52

08020ce4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8020ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020ce6:	2300      	movs	r3, #0
 8020ce8:	b085      	sub	sp, #20
 8020cea:	9300      	str	r3, [sp, #0]
 8020cec:	4b41      	ldr	r3, [pc, #260]	@ (8020df4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 8020cee:	781b      	ldrb	r3, [r3, #0]
 8020cf0:	2b00      	cmp	r3, #0
 8020cf2:	d136      	bne.n	8020d62 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 8020cf4:	4a40      	ldr	r2, [pc, #256]	@ (8020df8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8020cf6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8020cfa:	f8ad 2004 	strh.w	r2, [sp, #4]
 8020cfe:	2b00      	cmp	r3, #0
 8020d00:	d131      	bne.n	8020d66 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 8020d02:	4b3e      	ldr	r3, [pc, #248]	@ (8020dfc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8020d04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020d08:	ac02      	add	r4, sp, #8
 8020d0a:	6808      	ldr	r0, [r1, #0]
 8020d0c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8020d10:	ab02      	add	r3, sp, #8
 8020d12:	6849      	ldr	r1, [r1, #4]
 8020d14:	4d3a      	ldr	r5, [pc, #232]	@ (8020e00 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 8020d16:	c303      	stmia	r3!, {r0, r1}
 8020d18:	4669      	mov	r1, sp
 8020d1a:	4620      	mov	r0, r4
 8020d1c:	f7fa fed0 	bl	801bac0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020d20:	4668      	mov	r0, sp
 8020d22:	f7fa fea5 	bl	801ba70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020d26:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8020d2a:	f8bd 2000 	ldrh.w	r2, [sp]
 8020d2e:	462e      	mov	r6, r5
 8020d30:	6828      	ldr	r0, [r5, #0]
 8020d32:	4413      	add	r3, r2
 8020d34:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8020d38:	f8ad 3008 	strh.w	r3, [sp, #8]
 8020d3c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8020d40:	4413      	add	r3, r2
 8020d42:	f8ad 300a 	strh.w	r3, [sp, #10]
 8020d46:	6803      	ldr	r3, [r0, #0]
 8020d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8020d4a:	4798      	blx	r3
 8020d4c:	f010 0f01 	tst.w	r0, #1
 8020d50:	d00b      	beq.n	8020d6a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 8020d52:	6828      	ldr	r0, [r5, #0]
 8020d54:	6803      	ldr	r3, [r0, #0]
 8020d56:	e894 0006 	ldmia.w	r4, {r1, r2}
 8020d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8020d5c:	4798      	blx	r3
 8020d5e:	b005      	add	sp, #20
 8020d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020d62:	4a26      	ldr	r2, [pc, #152]	@ (8020dfc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8020d64:	e7c7      	b.n	8020cf6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8020d66:	4b24      	ldr	r3, [pc, #144]	@ (8020df8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8020d68:	e7cc      	b.n	8020d04 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8020d6a:	6830      	ldr	r0, [r6, #0]
 8020d6c:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 8020d70:	6803      	ldr	r3, [r0, #0]
 8020d72:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8020d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020d78:	4798      	blx	r3
 8020d7a:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8020d7e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8020d82:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 8020d86:	fb14 3402 	smlabb	r4, r4, r2, r3
 8020d8a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020d8e:	4404      	add	r4, r0
 8020d90:	6830      	ldr	r0, [r6, #0]
 8020d92:	6803      	ldr	r3, [r0, #0]
 8020d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020d96:	4798      	blx	r3
 8020d98:	4917      	ldr	r1, [pc, #92]	@ (8020df8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8020d9a:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8020d9e:	880b      	ldrh	r3, [r1, #0]
 8020da0:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 8020da4:	fb03 c202 	mla	r2, r3, r2, ip
 8020da8:	437b      	muls	r3, r7
 8020daa:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8020dae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020db2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020db6:	4410      	add	r0, r2
 8020db8:	18c2      	adds	r2, r0, r3
 8020dba:	4290      	cmp	r0, r2
 8020dbc:	d214      	bcs.n	8020de8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 8020dbe:	eb00 0c07 	add.w	ip, r0, r7
 8020dc2:	4560      	cmp	r0, ip
 8020dc4:	d204      	bcs.n	8020dd0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 8020dc6:	f814 3b01 	ldrb.w	r3, [r4], #1
 8020dca:	f800 3b01 	strb.w	r3, [r0], #1
 8020dce:	e7f8      	b.n	8020dc2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 8020dd0:	880b      	ldrh	r3, [r1, #0]
 8020dd2:	1b5b      	subs	r3, r3, r5
 8020dd4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020dd8:	4418      	add	r0, r3
 8020dda:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8020dde:	1b5b      	subs	r3, r3, r5
 8020de0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020de4:	441c      	add	r4, r3
 8020de6:	e7e8      	b.n	8020dba <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 8020de8:	6830      	ldr	r0, [r6, #0]
 8020dea:	6803      	ldr	r3, [r0, #0]
 8020dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020dee:	4798      	blx	r3
 8020df0:	e7b5      	b.n	8020d5e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8020df2:	bf00      	nop
 8020df4:	24013b50 	.word	0x24013b50
 8020df8:	24013b52 	.word	0x24013b52
 8020dfc:	24013b54 	.word	0x24013b54
 8020e00:	24013b58 	.word	0x24013b58

08020e04 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8020e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e08:	b08f      	sub	sp, #60	@ 0x3c
 8020e0a:	461c      	mov	r4, r3
 8020e0c:	9203      	str	r2, [sp, #12]
 8020e0e:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8020e12:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020e14:	6820      	ldr	r0, [r4, #0]
 8020e16:	9100      	str	r1, [sp, #0]
 8020e18:	9204      	str	r2, [sp, #16]
 8020e1a:	aa0a      	add	r2, sp, #40	@ 0x28
 8020e1c:	6861      	ldr	r1, [r4, #4]
 8020e1e:	c203      	stmia	r2!, {r0, r1}
 8020e20:	6818      	ldr	r0, [r3, #0]
 8020e22:	aa0c      	add	r2, sp, #48	@ 0x30
 8020e24:	6859      	ldr	r1, [r3, #4]
 8020e26:	c203      	stmia	r2!, {r0, r1}
 8020e28:	a80a      	add	r0, sp, #40	@ 0x28
 8020e2a:	f7fa fe21 	bl	801ba70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020e2e:	4621      	mov	r1, r4
 8020e30:	a80c      	add	r0, sp, #48	@ 0x30
 8020e32:	f7fa fe45 	bl	801bac0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020e36:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 8020e3a:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 8020e3e:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8020e42:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 8020e46:	bfdb      	ittet	le
 8020e48:	b2b3      	uxthle	r3, r6
 8020e4a:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8020e4e:	2301      	movgt	r3, #1
 8020e50:	fb92 f3f3 	sdivle	r3, r2, r3
 8020e54:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8020e58:	441d      	add	r5, r3
 8020e5a:	fb92 f1f3 	sdiv	r1, r2, r3
 8020e5e:	fa1f fc81 	uxth.w	ip, r1
 8020e62:	3d01      	subs	r5, #1
 8020e64:	fb0c 2413 	mls	r4, ip, r3, r2
 8020e68:	4661      	mov	r1, ip
 8020e6a:	fb14 f406 	smulbb	r4, r4, r6
 8020e6e:	4404      	add	r4, r0
 8020e70:	fb95 f5f3 	sdiv	r5, r5, r3
 8020e74:	b2a4      	uxth	r4, r4
 8020e76:	b131      	cbz	r1, 8020e86 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 8020e78:	9b03      	ldr	r3, [sp, #12]
 8020e7a:	9900      	ldr	r1, [sp, #0]
 8020e7c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8020e80:	ba1b      	rev	r3, r3
 8020e82:	4419      	add	r1, r3
 8020e84:	9100      	str	r1, [sp, #0]
 8020e86:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8020e8a:	b2ad      	uxth	r5, r5
 8020e8c:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 8020e90:	4418      	add	r0, r3
 8020e92:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8020e96:	00ad      	lsls	r5, r5, #2
 8020e98:	441a      	add	r2, r3
 8020e9a:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8020e9e:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8020ea2:	9301      	str	r3, [sp, #4]
 8020ea4:	4b79      	ldr	r3, [pc, #484]	@ (802108c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 8020ea6:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8020eaa:	6818      	ldr	r0, [r3, #0]
 8020eac:	6803      	ldr	r3, [r0, #0]
 8020eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020eb0:	4798      	blx	r3
 8020eb2:	4a77      	ldr	r2, [pc, #476]	@ (8021090 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>)
 8020eb4:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8020eb8:	2c00      	cmp	r4, #0
 8020eba:	8813      	ldrh	r3, [r2, #0]
 8020ebc:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8020ec0:	9209      	str	r2, [sp, #36]	@ 0x24
 8020ec2:	fb03 c101 	mla	r1, r3, r1, ip
 8020ec6:	fb06 f303 	mul.w	r3, r6, r3
 8020eca:	bf18      	it	ne
 8020ecc:	2600      	movne	r6, #0
 8020ece:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020ed2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020ed6:	4408      	add	r0, r1
 8020ed8:	4403      	add	r3, r0
 8020eda:	9306      	str	r3, [sp, #24]
 8020edc:	f105 0304 	add.w	r3, r5, #4
 8020ee0:	9305      	str	r3, [sp, #20]
 8020ee2:	9b01      	ldr	r3, [sp, #4]
 8020ee4:	bf08      	it	eq
 8020ee6:	461e      	moveq	r6, r3
 8020ee8:	2300      	movs	r3, #0
 8020eea:	b2b6      	uxth	r6, r6
 8020eec:	9302      	str	r3, [sp, #8]
 8020eee:	9a06      	ldr	r2, [sp, #24]
 8020ef0:	4290      	cmp	r0, r2
 8020ef2:	f080 80c2 	bcs.w	802107a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x276>
 8020ef6:	b963      	cbnz	r3, 8020f12 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 8020ef8:	9b00      	ldr	r3, [sp, #0]
 8020efa:	781a      	ldrb	r2, [r3, #0]
 8020efc:	0993      	lsrs	r3, r2, #6
 8020efe:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8020f02:	9202      	str	r2, [sp, #8]
 8020f04:	1e5a      	subs	r2, r3, #1
 8020f06:	2a02      	cmp	r2, #2
 8020f08:	d815      	bhi.n	8020f36 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 8020f0a:	9a00      	ldr	r2, [sp, #0]
 8020f0c:	b29b      	uxth	r3, r3
 8020f0e:	3201      	adds	r2, #1
 8020f10:	9200      	str	r2, [sp, #0]
 8020f12:	b1b4      	cbz	r4, 8020f42 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 8020f14:	429c      	cmp	r4, r3
 8020f16:	bf91      	iteee	ls
 8020f18:	1b1c      	subls	r4, r3, r4
 8020f1a:	1ae4      	subhi	r4, r4, r3
 8020f1c:	4635      	movhi	r5, r6
 8020f1e:	f04f 0e00 	movhi.w	lr, #0
 8020f22:	bf9b      	ittet	ls
 8020f24:	fa1f fe84 	uxthls.w	lr, r4
 8020f28:	f8bd 5004 	ldrhls.w	r5, [sp, #4]
 8020f2c:	b2a4      	uxthhi	r4, r4
 8020f2e:	2400      	movls	r4, #0
 8020f30:	4673      	mov	r3, lr
 8020f32:	462e      	mov	r6, r5
 8020f34:	e7db      	b.n	8020eee <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 8020f36:	9a00      	ldr	r2, [sp, #0]
 8020f38:	9b00      	ldr	r3, [sp, #0]
 8020f3a:	3202      	adds	r2, #2
 8020f3c:	785b      	ldrb	r3, [r3, #1]
 8020f3e:	9200      	str	r2, [sp, #0]
 8020f40:	e7e7      	b.n	8020f12 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 8020f42:	2204      	movs	r2, #4
 8020f44:	9905      	ldr	r1, [sp, #20]
 8020f46:	429e      	cmp	r6, r3
 8020f48:	4615      	mov	r5, r2
 8020f4a:	9a02      	ldr	r2, [sp, #8]
 8020f4c:	bf94      	ite	ls
 8020f4e:	eba3 0e06 	subls.w	lr, r3, r6
 8020f52:	46a6      	movhi	lr, r4
 8020f54:	fb15 1202 	smlabb	r2, r5, r2, r1
 8020f58:	9903      	ldr	r1, [sp, #12]
 8020f5a:	bf8c      	ite	hi
 8020f5c:	1af5      	subhi	r5, r6, r3
 8020f5e:	fa1f fe8e 	uxthls.w	lr, lr
 8020f62:	f851 c002 	ldr.w	ip, [r1, r2]
 8020f66:	bf9a      	itte	ls
 8020f68:	4625      	movls	r5, r4
 8020f6a:	4632      	movls	r2, r6
 8020f6c:	b2ad      	uxthhi	r5, r5
 8020f6e:	ea4f 611c 	mov.w	r1, ip, lsr #24
 8020f72:	bf88      	it	hi
 8020f74:	461a      	movhi	r2, r3
 8020f76:	b179      	cbz	r1, 8020f98 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 8020f78:	29ff      	cmp	r1, #255	@ 0xff
 8020f7a:	fa5f f98c 	uxtb.w	r9, ip
 8020f7e:	f3cc 2807 	ubfx	r8, ip, #8, #8
 8020f82:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8020f86:	d126      	bne.n	8020fd6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 8020f88:	9f04      	ldr	r7, [sp, #16]
 8020f8a:	2fff      	cmp	r7, #255	@ 0xff
 8020f8c:	d123      	bne.n	8020fd6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 8020f8e:	4682      	mov	sl, r0
 8020f90:	4611      	mov	r1, r2
 8020f92:	f10a 0a03 	add.w	sl, sl, #3
 8020f96:	b9a9      	cbnz	r1, 8020fc4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 8020f98:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020f9c:	429e      	cmp	r6, r3
 8020f9e:	4410      	add	r0, r2
 8020fa0:	d8c6      	bhi.n	8020f30 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 8020fa2:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 8020fa6:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8020faa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020fac:	1b64      	subs	r4, r4, r5
 8020fae:	9a01      	ldr	r2, [sp, #4]
 8020fb0:	881b      	ldrh	r3, [r3, #0]
 8020fb2:	b2a4      	uxth	r4, r4
 8020fb4:	1a9b      	subs	r3, r3, r2
 8020fb6:	2c00      	cmp	r4, #0
 8020fb8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020fbc:	bf18      	it	ne
 8020fbe:	2500      	movne	r5, #0
 8020fc0:	4418      	add	r0, r3
 8020fc2:	e7b5      	b.n	8020f30 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 8020fc4:	3901      	subs	r1, #1
 8020fc6:	f80a 9c03 	strb.w	r9, [sl, #-3]
 8020fca:	f80a 8c02 	strb.w	r8, [sl, #-2]
 8020fce:	f80a cc01 	strb.w	ip, [sl, #-1]
 8020fd2:	b289      	uxth	r1, r1
 8020fd4:	e7dd      	b.n	8020f92 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 8020fd6:	9f04      	ldr	r7, [sp, #16]
 8020fd8:	fb07 fa01 	mul.w	sl, r7, r1
 8020fdc:	f10a 0101 	add.w	r1, sl, #1
 8020fe0:	eb01 212a 	add.w	r1, r1, sl, asr #8
 8020fe4:	1209      	asrs	r1, r1, #8
 8020fe6:	ea6f 0a01 	mvn.w	sl, r1
 8020fea:	b289      	uxth	r1, r1
 8020fec:	fb19 f901 	smulbb	r9, r9, r1
 8020ff0:	fa5f fa8a 	uxtb.w	sl, sl
 8020ff4:	fb18 f801 	smulbb	r8, r8, r1
 8020ff8:	fb1c f101 	smulbb	r1, ip, r1
 8020ffc:	fa1f f789 	uxth.w	r7, r9
 8021000:	4684      	mov	ip, r0
 8021002:	4691      	mov	r9, r2
 8021004:	9707      	str	r7, [sp, #28]
 8021006:	b289      	uxth	r1, r1
 8021008:	fa1f f788 	uxth.w	r7, r8
 802100c:	9708      	str	r7, [sp, #32]
 802100e:	f10c 0c03 	add.w	ip, ip, #3
 8021012:	f1b9 0f00 	cmp.w	r9, #0
 8021016:	d0bf      	beq.n	8020f98 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 8021018:	f81c 8c03 	ldrb.w	r8, [ip, #-3]
 802101c:	f109 39ff 	add.w	r9, r9, #4294967295
 8021020:	9f07      	ldr	r7, [sp, #28]
 8021022:	fa1f f989 	uxth.w	r9, r9
 8021026:	fb08 780a 	mla	r8, r8, sl, r7
 802102a:	9f08      	ldr	r7, [sp, #32]
 802102c:	fa1f f888 	uxth.w	r8, r8
 8021030:	f108 0b01 	add.w	fp, r8, #1
 8021034:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8021038:	ea4f 2828 	mov.w	r8, r8, asr #8
 802103c:	f80c 8c03 	strb.w	r8, [ip, #-3]
 8021040:	f81c 8c02 	ldrb.w	r8, [ip, #-2]
 8021044:	fb08 780a 	mla	r8, r8, sl, r7
 8021048:	fa1f f888 	uxth.w	r8, r8
 802104c:	f108 0b01 	add.w	fp, r8, #1
 8021050:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8021054:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021058:	f80c 8c02 	strb.w	r8, [ip, #-2]
 802105c:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
 8021060:	fb08 180a 	mla	r8, r8, sl, r1
 8021064:	fa1f f888 	uxth.w	r8, r8
 8021068:	f108 0b01 	add.w	fp, r8, #1
 802106c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8021070:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021074:	f80c 8c01 	strb.w	r8, [ip, #-1]
 8021078:	e7c9      	b.n	802100e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 802107a:	4b04      	ldr	r3, [pc, #16]	@ (802108c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 802107c:	6818      	ldr	r0, [r3, #0]
 802107e:	6803      	ldr	r3, [r0, #0]
 8021080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021082:	4798      	blx	r3
 8021084:	b00f      	add	sp, #60	@ 0x3c
 8021086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802108a:	bf00      	nop
 802108c:	24013b58 	.word	0x24013b58
 8021090:	24013b52 	.word	0x24013b52

08021094 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8021094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021098:	b089      	sub	sp, #36	@ 0x24
 802109a:	4607      	mov	r7, r0
 802109c:	4689      	mov	r9, r1
 802109e:	4692      	mov	sl, r2
 80210a0:	ac08      	add	r4, sp, #32
 80210a2:	461e      	mov	r6, r3
 80210a4:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 80210a8:	4620      	mov	r0, r4
 80210aa:	f7fd ff79 	bl	801efa0 <_ZNK8touchgfx6Bitmap7getDataEv>
 80210ae:	683b      	ldr	r3, [r7, #0]
 80210b0:	4605      	mov	r5, r0
 80210b2:	4620      	mov	r0, r4
 80210b4:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80210b8:	f7fd feb8 	bl	801ee2c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80210bc:	4683      	mov	fp, r0
 80210be:	4620      	mov	r0, r4
 80210c0:	f7fd fee8 	bl	801ee94 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80210c4:	4653      	mov	r3, sl
 80210c6:	464a      	mov	r2, r9
 80210c8:	4639      	mov	r1, r7
 80210ca:	9500      	str	r5, [sp, #0]
 80210cc:	e9cd b001 	strd	fp, r0, [sp, #4]
 80210d0:	a806      	add	r0, sp, #24
 80210d2:	47c0      	blx	r8
 80210d4:	a906      	add	r1, sp, #24
 80210d6:	4630      	mov	r0, r6
 80210d8:	f7fd fd8c 	bl	801ebf4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 80210dc:	4628      	mov	r0, r5
 80210de:	b009      	add	sp, #36	@ 0x24
 80210e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080210e4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D0Ev>:
 80210e4:	b510      	push	{r4, lr}
 80210e6:	4604      	mov	r4, r0
 80210e8:	2104      	movs	r1, #4
 80210ea:	f008 fc58 	bl	802999e <_ZdlPvj>
 80210ee:	4620      	mov	r0, r4
 80210f0:	bd10      	pop	{r4, pc}

080210f2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED0Ev>:
 80210f2:	b510      	push	{r4, lr}
 80210f4:	4604      	mov	r4, r0
 80210f6:	2104      	movs	r1, #4
 80210f8:	f008 fc51 	bl	802999e <_ZdlPvj>
 80210fc:	4620      	mov	r0, r4
 80210fe:	bd10      	pop	{r4, pc}

08021100 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D0Ev>:
 8021100:	b510      	push	{r4, lr}
 8021102:	4604      	mov	r4, r0
 8021104:	f640 0144 	movw	r1, #2116	@ 0x844
 8021108:	f008 fc49 	bl	802999e <_ZdlPvj>
 802110c:	4620      	mov	r0, r4
 802110e:	bd10      	pop	{r4, pc}

08021110 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID0Ev>:
 8021110:	b510      	push	{r4, lr}
 8021112:	4604      	mov	r4, r0
 8021114:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8021118:	f008 fc41 	bl	802999e <_ZdlPvj>
 802111c:	4620      	mov	r0, r4
 802111e:	bd10      	pop	{r4, pc}

08021120 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8021120:	b510      	push	{r4, lr}
 8021122:	4604      	mov	r4, r0
 8021124:	2104      	movs	r1, #4
 8021126:	f008 fc3a 	bl	802999e <_ZdlPvj>
 802112a:	4620      	mov	r0, r4
 802112c:	bd10      	pop	{r4, pc}

0802112e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 802112e:	b510      	push	{r4, lr}
 8021130:	4604      	mov	r4, r0
 8021132:	2104      	movs	r1, #4
 8021134:	f008 fc33 	bl	802999e <_ZdlPvj>
 8021138:	4620      	mov	r0, r4
 802113a:	bd10      	pop	{r4, pc}

0802113c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 802113c:	b510      	push	{r4, lr}
 802113e:	4604      	mov	r4, r0
 8021140:	2104      	movs	r1, #4
 8021142:	f008 fc2c 	bl	802999e <_ZdlPvj>
 8021146:	4620      	mov	r0, r4
 8021148:	bd10      	pop	{r4, pc}

0802114a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 802114a:	b510      	push	{r4, lr}
 802114c:	4604      	mov	r4, r0
 802114e:	2104      	movs	r1, #4
 8021150:	f008 fc25 	bl	802999e <_ZdlPvj>
 8021154:	4620      	mov	r0, r4
 8021156:	bd10      	pop	{r4, pc}

08021158 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8021158:	b510      	push	{r4, lr}
 802115a:	4604      	mov	r4, r0
 802115c:	2104      	movs	r1, #4
 802115e:	f008 fc1e 	bl	802999e <_ZdlPvj>
 8021162:	4620      	mov	r0, r4
 8021164:	bd10      	pop	{r4, pc}

08021166 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8021166:	b510      	push	{r4, lr}
 8021168:	4604      	mov	r4, r0
 802116a:	2104      	movs	r1, #4
 802116c:	f008 fc17 	bl	802999e <_ZdlPvj>
 8021170:	4620      	mov	r0, r4
 8021172:	bd10      	pop	{r4, pc}

08021174 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8021174:	b510      	push	{r4, lr}
 8021176:	4604      	mov	r4, r0
 8021178:	2104      	movs	r1, #4
 802117a:	f008 fc10 	bl	802999e <_ZdlPvj>
 802117e:	4620      	mov	r0, r4
 8021180:	bd10      	pop	{r4, pc}

08021182 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8021182:	b510      	push	{r4, lr}
 8021184:	4604      	mov	r4, r0
 8021186:	2104      	movs	r1, #4
 8021188:	f008 fc09 	bl	802999e <_ZdlPvj>
 802118c:	4620      	mov	r0, r4
 802118e:	bd10      	pop	{r4, pc}

08021190 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8021190:	b510      	push	{r4, lr}
 8021192:	4604      	mov	r4, r0
 8021194:	2104      	movs	r1, #4
 8021196:	f008 fc02 	bl	802999e <_ZdlPvj>
 802119a:	4620      	mov	r0, r4
 802119c:	bd10      	pop	{r4, pc}

0802119e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 802119e:	b510      	push	{r4, lr}
 80211a0:	4604      	mov	r4, r0
 80211a2:	2104      	movs	r1, #4
 80211a4:	f008 fbfb 	bl	802999e <_ZdlPvj>
 80211a8:	4620      	mov	r0, r4
 80211aa:	bd10      	pop	{r4, pc}

080211ac <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80211ac:	b510      	push	{r4, lr}
 80211ae:	4604      	mov	r4, r0
 80211b0:	2104      	movs	r1, #4
 80211b2:	f008 fbf4 	bl	802999e <_ZdlPvj>
 80211b6:	4620      	mov	r0, r4
 80211b8:	bd10      	pop	{r4, pc}

080211ba <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80211ba:	b510      	push	{r4, lr}
 80211bc:	4604      	mov	r4, r0
 80211be:	2104      	movs	r1, #4
 80211c0:	f008 fbed 	bl	802999e <_ZdlPvj>
 80211c4:	4620      	mov	r0, r4
 80211c6:	bd10      	pop	{r4, pc}

080211c8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80211c8:	b510      	push	{r4, lr}
 80211ca:	4604      	mov	r4, r0
 80211cc:	2104      	movs	r1, #4
 80211ce:	f008 fbe6 	bl	802999e <_ZdlPvj>
 80211d2:	4620      	mov	r0, r4
 80211d4:	bd10      	pop	{r4, pc}

080211d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80211d6:	b510      	push	{r4, lr}
 80211d8:	4604      	mov	r4, r0
 80211da:	2104      	movs	r1, #4
 80211dc:	f008 fbdf 	bl	802999e <_ZdlPvj>
 80211e0:	4620      	mov	r0, r4
 80211e2:	bd10      	pop	{r4, pc}

080211e4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80211e4:	b510      	push	{r4, lr}
 80211e6:	4604      	mov	r4, r0
 80211e8:	2104      	movs	r1, #4
 80211ea:	f008 fbd8 	bl	802999e <_ZdlPvj>
 80211ee:	4620      	mov	r0, r4
 80211f0:	bd10      	pop	{r4, pc}

080211f2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80211f2:	b510      	push	{r4, lr}
 80211f4:	4604      	mov	r4, r0
 80211f6:	2104      	movs	r1, #4
 80211f8:	f008 fbd1 	bl	802999e <_ZdlPvj>
 80211fc:	4620      	mov	r0, r4
 80211fe:	bd10      	pop	{r4, pc}

08021200 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8021200:	b510      	push	{r4, lr}
 8021202:	4604      	mov	r4, r0
 8021204:	2104      	movs	r1, #4
 8021206:	f008 fbca 	bl	802999e <_ZdlPvj>
 802120a:	4620      	mov	r0, r4
 802120c:	bd10      	pop	{r4, pc}

0802120e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 802120e:	b510      	push	{r4, lr}
 8021210:	4604      	mov	r4, r0
 8021212:	2104      	movs	r1, #4
 8021214:	f008 fbc3 	bl	802999e <_ZdlPvj>
 8021218:	4620      	mov	r0, r4
 802121a:	bd10      	pop	{r4, pc}

0802121c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 802121c:	b510      	push	{r4, lr}
 802121e:	4604      	mov	r4, r0
 8021220:	2104      	movs	r1, #4
 8021222:	f008 fbbc 	bl	802999e <_ZdlPvj>
 8021226:	4620      	mov	r0, r4
 8021228:	bd10      	pop	{r4, pc}

0802122a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 802122a:	b510      	push	{r4, lr}
 802122c:	4604      	mov	r4, r0
 802122e:	2104      	movs	r1, #4
 8021230:	f008 fbb5 	bl	802999e <_ZdlPvj>
 8021234:	4620      	mov	r0, r4
 8021236:	bd10      	pop	{r4, pc}

08021238 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8021238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802123c:	b08f      	sub	sp, #60	@ 0x3c
 802123e:	461c      	mov	r4, r3
 8021240:	460e      	mov	r6, r1
 8021242:	9206      	str	r2, [sp, #24]
 8021244:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8021248:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802124a:	9202      	str	r2, [sp, #8]
 802124c:	2a00      	cmp	r2, #0
 802124e:	f000 8128 	beq.w	80214a2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 8021252:	6820      	ldr	r0, [r4, #0]
 8021254:	aa0a      	add	r2, sp, #40	@ 0x28
 8021256:	6861      	ldr	r1, [r4, #4]
 8021258:	c203      	stmia	r2!, {r0, r1}
 802125a:	6818      	ldr	r0, [r3, #0]
 802125c:	aa0c      	add	r2, sp, #48	@ 0x30
 802125e:	6859      	ldr	r1, [r3, #4]
 8021260:	c203      	stmia	r2!, {r0, r1}
 8021262:	a80a      	add	r0, sp, #40	@ 0x28
 8021264:	f7fa fc04 	bl	801ba70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021268:	4621      	mov	r1, r4
 802126a:	a80c      	add	r0, sp, #48	@ 0x30
 802126c:	f7fa fc28 	bl	801bac0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021270:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	@ 0x2c
 8021274:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 8021278:	f5b7 6f80 	cmp.w	r7, #1024	@ 0x400
 802127c:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 8021280:	bfdb      	ittet	le
 8021282:	b2bb      	uxthle	r3, r7
 8021284:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8021288:	2301      	movgt	r3, #1
 802128a:	fb92 f3f3 	sdivle	r3, r2, r3
 802128e:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8021292:	441d      	add	r5, r3
 8021294:	fb92 f1f3 	sdiv	r1, r2, r3
 8021298:	fa1f fc81 	uxth.w	ip, r1
 802129c:	3d01      	subs	r5, #1
 802129e:	fb0c 2413 	mls	r4, ip, r3, r2
 80212a2:	4661      	mov	r1, ip
 80212a4:	fb14 f407 	smulbb	r4, r4, r7
 80212a8:	4404      	add	r4, r0
 80212aa:	fb95 f5f3 	sdiv	r5, r5, r3
 80212ae:	b2a4      	uxth	r4, r4
 80212b0:	b121      	cbz	r1, 80212bc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x84>
 80212b2:	9b06      	ldr	r3, [sp, #24]
 80212b4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80212b8:	ba1b      	rev	r3, r3
 80212ba:	441e      	add	r6, r3
 80212bc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80212c0:	b2ad      	uxth	r5, r5
 80212c2:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 80212c6:	4418      	add	r0, r3
 80212c8:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 80212cc:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	@ 0x36
 80212d0:	00ad      	lsls	r5, r5, #2
 80212d2:	441a      	add	r2, r3
 80212d4:	4b74      	ldr	r3, [pc, #464]	@ (80214a8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 80212d6:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 80212da:	6818      	ldr	r0, [r3, #0]
 80212dc:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 80212e0:	6803      	ldr	r3, [r0, #0]
 80212e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80212e4:	4798      	blx	r3
 80212e6:	4a71      	ldr	r2, [pc, #452]	@ (80214ac <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>)
 80212e8:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 80212ec:	2c00      	cmp	r4, #0
 80212ee:	8813      	ldrh	r3, [r2, #0]
 80212f0:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 80212f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80212f6:	fb03 c101 	mla	r1, r3, r1, ip
 80212fa:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80212fe:	fb03 f307 	mul.w	r3, r3, r7
 8021302:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021306:	9204      	str	r2, [sp, #16]
 8021308:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802130c:	9a02      	ldr	r2, [sp, #8]
 802130e:	4408      	add	r0, r1
 8021310:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 8021314:	4403      	add	r3, r0
 8021316:	b292      	uxth	r2, r2
 8021318:	9307      	str	r3, [sp, #28]
 802131a:	f105 0304 	add.w	r3, r5, #4
 802131e:	bf0c      	ite	eq
 8021320:	4645      	moveq	r5, r8
 8021322:	2500      	movne	r5, #0
 8021324:	9308      	str	r3, [sp, #32]
 8021326:	2300      	movs	r3, #0
 8021328:	b2ad      	uxth	r5, r5
 802132a:	9205      	str	r2, [sp, #20]
 802132c:	9303      	str	r3, [sp, #12]
 802132e:	9a07      	ldr	r2, [sp, #28]
 8021330:	4282      	cmp	r2, r0
 8021332:	f240 80b1 	bls.w	8021498 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 8021336:	b95b      	cbnz	r3, 8021350 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x118>
 8021338:	7832      	ldrb	r2, [r6, #0]
 802133a:	0993      	lsrs	r3, r2, #6
 802133c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8021340:	9203      	str	r2, [sp, #12]
 8021342:	1e5a      	subs	r2, r3, #1
 8021344:	2a02      	cmp	r2, #2
 8021346:	bf8d      	iteet	hi
 8021348:	7873      	ldrbhi	r3, [r6, #1]
 802134a:	3601      	addls	r6, #1
 802134c:	b29b      	uxthls	r3, r3
 802134e:	3602      	addhi	r6, #2
 8021350:	b184      	cbz	r4, 8021374 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13c>
 8021352:	429c      	cmp	r4, r3
 8021354:	bf91      	iteee	ls
 8021356:	1b1c      	subls	r4, r3, r4
 8021358:	1ae4      	subhi	r4, r4, r3
 802135a:	4629      	movhi	r1, r5
 802135c:	f04f 0e00 	movhi.w	lr, #0
 8021360:	bf9b      	ittet	ls
 8021362:	fa1f fe84 	uxthls.w	lr, r4
 8021366:	2400      	movls	r4, #0
 8021368:	b2a4      	uxthhi	r4, r4
 802136a:	fa1f f188 	uxthls.w	r1, r8
 802136e:	4673      	mov	r3, lr
 8021370:	460d      	mov	r5, r1
 8021372:	e7dc      	b.n	802132e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 8021374:	2203      	movs	r2, #3
 8021376:	9908      	ldr	r1, [sp, #32]
 8021378:	42ab      	cmp	r3, r5
 802137a:	4617      	mov	r7, r2
 802137c:	9a03      	ldr	r2, [sp, #12]
 802137e:	bf24      	itt	cs
 8021380:	eba3 0e05 	subcs.w	lr, r3, r5
 8021384:	9501      	strcs	r5, [sp, #4]
 8021386:	fb17 1702 	smlabb	r7, r7, r2, r1
 802138a:	9a06      	ldr	r2, [sp, #24]
 802138c:	bf34      	ite	cc
 802138e:	1ae9      	subcc	r1, r5, r3
 8021390:	fa1f fe8e 	uxthcs.w	lr, lr
 8021394:	4417      	add	r7, r2
 8021396:	9a02      	ldr	r2, [sp, #8]
 8021398:	bf2f      	iteee	cs
 802139a:	4621      	movcs	r1, r4
 802139c:	b289      	uxthcc	r1, r1
 802139e:	9301      	strcc	r3, [sp, #4]
 80213a0:	46a6      	movcc	lr, r4
 80213a2:	2aff      	cmp	r2, #255	@ 0xff
 80213a4:	d11e      	bne.n	80213e4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ac>
 80213a6:	4681      	mov	r9, r0
 80213a8:	f8dd c004 	ldr.w	ip, [sp, #4]
 80213ac:	f109 0903 	add.w	r9, r9, #3
 80213b0:	f1bc 0f00 	cmp.w	ip, #0
 80213b4:	d15f      	bne.n	8021476 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23e>
 80213b6:	9a01      	ldr	r2, [sp, #4]
 80213b8:	42ab      	cmp	r3, r5
 80213ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80213be:	4410      	add	r0, r2
 80213c0:	d3d5      	bcc.n	802136e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 80213c2:	fa1f f188 	uxth.w	r1, r8
 80213c6:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 80213ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80213cc:	1a64      	subs	r4, r4, r1
 80213ce:	881b      	ldrh	r3, [r3, #0]
 80213d0:	b2a4      	uxth	r4, r4
 80213d2:	eba3 0308 	sub.w	r3, r3, r8
 80213d6:	2c00      	cmp	r4, #0
 80213d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80213dc:	bf18      	it	ne
 80213de:	2100      	movne	r1, #0
 80213e0:	4418      	add	r0, r3
 80213e2:	e7c4      	b.n	802136e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 80213e4:	4684      	mov	ip, r0
 80213e6:	f8dd a004 	ldr.w	sl, [sp, #4]
 80213ea:	f10c 0c03 	add.w	ip, ip, #3
 80213ee:	f1ba 0f00 	cmp.w	sl, #0
 80213f2:	d0e0      	beq.n	80213b6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 80213f4:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 80213f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80213fc:	9a05      	ldr	r2, [sp, #20]
 80213fe:	f897 9000 	ldrb.w	r9, [r7]
 8021402:	fa1f fa8a 	uxth.w	sl, sl
 8021406:	fb1b fb02 	smulbb	fp, fp, r2
 802140a:	9a04      	ldr	r2, [sp, #16]
 802140c:	fb09 b902 	mla	r9, r9, r2, fp
 8021410:	9a05      	ldr	r2, [sp, #20]
 8021412:	fa1f f989 	uxth.w	r9, r9
 8021416:	f109 0b01 	add.w	fp, r9, #1
 802141a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 802141e:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 8021422:	fb1b fb02 	smulbb	fp, fp, r2
 8021426:	ea4f 2929 	mov.w	r9, r9, asr #8
 802142a:	9a04      	ldr	r2, [sp, #16]
 802142c:	f80c 9c03 	strb.w	r9, [ip, #-3]
 8021430:	f897 9001 	ldrb.w	r9, [r7, #1]
 8021434:	fb09 b902 	mla	r9, r9, r2, fp
 8021438:	9a05      	ldr	r2, [sp, #20]
 802143a:	fa1f f989 	uxth.w	r9, r9
 802143e:	f109 0b01 	add.w	fp, r9, #1
 8021442:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8021446:	f81c bc01 	ldrb.w	fp, [ip, #-1]
 802144a:	fb1b fb02 	smulbb	fp, fp, r2
 802144e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021452:	9a04      	ldr	r2, [sp, #16]
 8021454:	f80c 9c02 	strb.w	r9, [ip, #-2]
 8021458:	f897 9002 	ldrb.w	r9, [r7, #2]
 802145c:	fb09 b902 	mla	r9, r9, r2, fp
 8021460:	fa1f f989 	uxth.w	r9, r9
 8021464:	f109 0b01 	add.w	fp, r9, #1
 8021468:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 802146c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021470:	f80c 9c01 	strb.w	r9, [ip, #-1]
 8021474:	e7b9      	b.n	80213ea <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1b2>
 8021476:	f897 a000 	ldrb.w	sl, [r7]
 802147a:	f10c 3cff 	add.w	ip, ip, #4294967295
 802147e:	f809 ac03 	strb.w	sl, [r9, #-3]
 8021482:	fa1f fc8c 	uxth.w	ip, ip
 8021486:	f897 a001 	ldrb.w	sl, [r7, #1]
 802148a:	f809 ac02 	strb.w	sl, [r9, #-2]
 802148e:	f897 a002 	ldrb.w	sl, [r7, #2]
 8021492:	f809 ac01 	strb.w	sl, [r9, #-1]
 8021496:	e789      	b.n	80213ac <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 8021498:	4b03      	ldr	r3, [pc, #12]	@ (80214a8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 802149a:	6818      	ldr	r0, [r3, #0]
 802149c:	6803      	ldr	r3, [r0, #0]
 802149e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80214a0:	4798      	blx	r3
 80214a2:	b00f      	add	sp, #60	@ 0x3c
 80214a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80214a8:	24013b58 	.word	0x24013b58
 80214ac:	24013b52 	.word	0x24013b52

080214b0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 80214b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80214b4:	b09b      	sub	sp, #108	@ 0x6c
 80214b6:	461d      	mov	r5, r3
 80214b8:	4604      	mov	r4, r0
 80214ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80214bc:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
 80214c0:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 80214c4:	9208      	str	r2, [sp, #32]
 80214c6:	2a00      	cmp	r2, #0
 80214c8:	f000 81f3 	beq.w	80218b2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x402>
 80214cc:	6828      	ldr	r0, [r5, #0]
 80214ce:	aa16      	add	r2, sp, #88	@ 0x58
 80214d0:	6869      	ldr	r1, [r5, #4]
 80214d2:	c203      	stmia	r2!, {r0, r1}
 80214d4:	6818      	ldr	r0, [r3, #0]
 80214d6:	aa18      	add	r2, sp, #96	@ 0x60
 80214d8:	6859      	ldr	r1, [r3, #4]
 80214da:	c203      	stmia	r2!, {r0, r1}
 80214dc:	a816      	add	r0, sp, #88	@ 0x58
 80214de:	f7fa fac7 	bl	801ba70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80214e2:	4629      	mov	r1, r5
 80214e4:	a818      	add	r0, sp, #96	@ 0x60
 80214e6:	f7fa faeb 	bl	801bac0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80214ea:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	@ 0x5c
 80214ee:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	@ 0x5e
 80214f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80214f6:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	@ 0x66
 80214fa:	bfdb      	ittet	le
 80214fc:	b29a      	uxthle	r2, r3
 80214fe:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8021502:	f04f 0a01 	movgt.w	sl, #1
 8021506:	fb91 faf2 	sdivle	sl, r1, r2
 802150a:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	@ 0x62
 802150e:	4456      	add	r6, sl
 8021510:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 8021514:	3e01      	subs	r6, #1
 8021516:	fb92 f0fa 	sdiv	r0, r2, sl
 802151a:	b280      	uxth	r0, r0
 802151c:	fb00 281a 	mls	r8, r0, sl, r2
 8021520:	900e      	str	r0, [sp, #56]	@ 0x38
 8021522:	fb18 f803 	smulbb	r8, r8, r3
 8021526:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 802152a:	4488      	add	r8, r1
 802152c:	4419      	add	r1, r3
 802152e:	f8bd 305a 	ldrh.w	r3, [sp, #90]	@ 0x5a
 8021532:	f8ad 1060 	strh.w	r1, [sp, #96]	@ 0x60
 8021536:	fa1f f888 	uxth.w	r8, r8
 802153a:	441a      	add	r2, r3
 802153c:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 8021540:	9303      	str	r3, [sp, #12]
 8021542:	4b9c      	ldr	r3, [pc, #624]	@ (80217b4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 8021544:	f8ad 2062 	strh.w	r2, [sp, #98]	@ 0x62
 8021548:	6818      	ldr	r0, [r3, #0]
 802154a:	6803      	ldr	r3, [r0, #0]
 802154c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802154e:	4798      	blx	r3
 8021550:	4b99      	ldr	r3, [pc, #612]	@ (80217b8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>)
 8021552:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	@ 0x62
 8021556:	f1b8 0f00 	cmp.w	r8, #0
 802155a:	881a      	ldrh	r2, [r3, #0]
 802155c:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	@ 0x60
 8021560:	fb02 f505 	mul.w	r5, r2, r5
 8021564:	fb02 7101 	mla	r1, r2, r1, r7
 8021568:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802156c:	9314      	str	r3, [sp, #80]	@ 0x50
 802156e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021572:	9b08      	ldr	r3, [sp, #32]
 8021574:	fb96 f6fa 	sdiv	r6, r6, sl
 8021578:	4408      	add	r0, r1
 802157a:	f106 0601 	add.w	r6, r6, #1
 802157e:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8021582:	f04f 0100 	mov.w	r1, #0
 8021586:	eb00 0205 	add.w	r2, r0, r5
 802158a:	b2b6      	uxth	r6, r6
 802158c:	b29b      	uxth	r3, r3
 802158e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8021590:	9209      	str	r2, [sp, #36]	@ 0x24
 8021592:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8021594:	930d      	str	r3, [sp, #52]	@ 0x34
 8021596:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 802159a:	4b88      	ldr	r3, [pc, #544]	@ (80217bc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30c>)
 802159c:	f106 0204 	add.w	r2, r6, #4
 80215a0:	eba3 0304 	sub.w	r3, r3, r4
 80215a4:	9205      	str	r2, [sp, #20]
 80215a6:	9a03      	ldr	r2, [sp, #12]
 80215a8:	bf18      	it	ne
 80215aa:	2200      	movne	r2, #0
 80215ac:	9315      	str	r3, [sp, #84]	@ 0x54
 80215ae:	b292      	uxth	r2, r2
 80215b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80215b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80215b4:	fa11 f383 	uxtah	r3, r1, r3
 80215b8:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80215ba:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80215be:	3304      	adds	r3, #4
 80215c0:	9306      	str	r3, [sp, #24]
 80215c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80215c4:	4283      	cmp	r3, r0
 80215c6:	f240 816f 	bls.w	80218a8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f8>
 80215ca:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 80215ce:	f04f 0900 	mov.w	r9, #0
 80215d2:	9d06      	ldr	r5, [sp, #24]
 80215d4:	fbb8 f3f3 	udiv	r3, r8, r3
 80215d8:	ebaa 0303 	sub.w	r3, sl, r3
 80215dc:	782d      	ldrb	r5, [r5, #0]
 80215de:	b29b      	uxth	r3, r3
 80215e0:	950f      	str	r5, [sp, #60]	@ 0x3c
 80215e2:	3501      	adds	r5, #1
 80215e4:	9312      	str	r3, [sp, #72]	@ 0x48
 80215e6:	9b06      	ldr	r3, [sp, #24]
 80215e8:	9504      	str	r5, [sp, #16]
 80215ea:	7859      	ldrb	r1, [r3, #1]
 80215ec:	789b      	ldrb	r3, [r3, #2]
 80215ee:	021b      	lsls	r3, r3, #8
 80215f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80215f4:	9906      	ldr	r1, [sp, #24]
 80215f6:	78c9      	ldrb	r1, [r1, #3]
 80215f8:	430b      	orrs	r3, r1
 80215fa:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80215fc:	4419      	add	r1, r3
 80215fe:	1c4d      	adds	r5, r1, #1
 8021600:	7849      	ldrb	r1, [r1, #1]
 8021602:	9502      	str	r5, [sp, #8]
 8021604:	0209      	lsls	r1, r1, #8
 8021606:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8021608:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 802160c:	5ceb      	ldrb	r3, [r5, r3]
 802160e:	4319      	orrs	r1, r3
 8021610:	b28b      	uxth	r3, r1
 8021612:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 8021616:	930a      	str	r3, [sp, #40]	@ 0x28
 8021618:	2300      	movs	r3, #0
 802161a:	9307      	str	r3, [sp, #28]
 802161c:	2301      	movs	r3, #1
 802161e:	e9cd 3300 	strd	r3, r3, [sp]
 8021622:	469c      	mov	ip, r3
 8021624:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8021628:	930c      	str	r3, [sp, #48]	@ 0x30
 802162a:	f1b8 0f00 	cmp.w	r8, #0
 802162e:	f000 8082 	beq.w	8021736 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x286>
 8021632:	45c4      	cmp	ip, r8
 8021634:	d270      	bcs.n	8021718 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 8021636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021638:	eba8 080c 	sub.w	r8, r8, ip
 802163c:	4611      	mov	r1, r2
 802163e:	4283      	cmp	r3, r0
 8021640:	fa1f f888 	uxth.w	r8, r8
 8021644:	d802      	bhi.n	802164c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 8021646:	e074      	b.n	8021732 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x282>
 8021648:	2b00      	cmp	r3, #0
 802164a:	d15f      	bne.n	802170c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 802164c:	9b02      	ldr	r3, [sp, #8]
 802164e:	9a01      	ldr	r2, [sp, #4]
 8021650:	785b      	ldrb	r3, [r3, #1]
 8021652:	f1c2 0207 	rsb	r2, r2, #7
 8021656:	9d01      	ldr	r5, [sp, #4]
 8021658:	4093      	lsls	r3, r2
 802165a:	005b      	lsls	r3, r3, #1
 802165c:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8021660:	9b02      	ldr	r3, [sp, #8]
 8021662:	781b      	ldrb	r3, [r3, #0]
 8021664:	412b      	asrs	r3, r5
 8021666:	b2db      	uxtb	r3, r3
 8021668:	4313      	orrs	r3, r2
 802166a:	462a      	mov	r2, r5
 802166c:	3201      	adds	r2, #1
 802166e:	b29e      	uxth	r6, r3
 8021670:	b2d2      	uxtb	r2, r2
 8021672:	2a08      	cmp	r2, #8
 8021674:	9201      	str	r2, [sp, #4]
 8021676:	9a02      	ldr	r2, [sp, #8]
 8021678:	bf09      	itett	eq
 802167a:	3202      	addeq	r2, #2
 802167c:	3201      	addne	r2, #1
 802167e:	9202      	streq	r2, [sp, #8]
 8021680:	2200      	moveq	r2, #0
 8021682:	bf14      	ite	ne
 8021684:	9202      	strne	r2, [sp, #8]
 8021686:	9201      	streq	r2, [sp, #4]
 8021688:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802168a:	42b2      	cmp	r2, r6
 802168c:	d309      	bcc.n	80216a2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 802168e:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 8021692:	2301      	movs	r3, #1
 8021694:	9a04      	ldr	r2, [sp, #16]
 8021696:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 802169a:	d30e      	bcc.n	80216ba <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 802169c:	9300      	str	r3, [sp, #0]
 802169e:	2500      	movs	r5, #0
 80216a0:	e035      	b.n	802170e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 80216a2:	9b04      	ldr	r3, [sp, #16]
 80216a4:	429e      	cmp	r6, r3
 80216a6:	d318      	bcc.n	80216da <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 80216a8:	9b00      	ldr	r3, [sp, #0]
 80216aa:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 80216ae:	18e3      	adds	r3, r4, r3
 80216b0:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 80216b4:	9b00      	ldr	r3, [sp, #0]
 80216b6:	3301      	adds	r3, #1
 80216b8:	b29b      	uxth	r3, r3
 80216ba:	9a04      	ldr	r2, [sp, #16]
 80216bc:	f894 5804 	ldrb.w	r5, [r4, #2052]	@ 0x804
 80216c0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80216c4:	9f00      	ldr	r7, [sp, #0]
 80216c6:	7115      	strb	r5, [r2, #4]
 80216c8:	3701      	adds	r7, #1
 80216ca:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80216cc:	7157      	strb	r7, [r2, #5]
 80216ce:	80d5      	strh	r5, [r2, #6]
 80216d0:	9a04      	ldr	r2, [sp, #16]
 80216d2:	3201      	adds	r2, #1
 80216d4:	b292      	uxth	r2, r2
 80216d6:	9204      	str	r2, [sp, #16]
 80216d8:	e7e0      	b.n	802169c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 80216da:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80216de:	4632      	mov	r2, r6
 80216e0:	795b      	ldrb	r3, [r3, #5]
 80216e2:	f603 0504 	addw	r5, r3, #2052	@ 0x804
 80216e6:	4425      	add	r5, r4
 80216e8:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 80216ea:	eb07 0c05 	add.w	ip, r7, r5
 80216ee:	f1bc 0f00 	cmp.w	ip, #0
 80216f2:	dd07      	ble.n	8021704 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x254>
 80216f4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80216f8:	f892 c004 	ldrb.w	ip, [r2, #4]
 80216fc:	f805 cd01 	strb.w	ip, [r5, #-1]!
 8021700:	88d2      	ldrh	r2, [r2, #6]
 8021702:	e7f1      	b.n	80216e8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 8021704:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 8021708:	b29b      	uxth	r3, r3
 802170a:	e7c3      	b.n	8021694 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 802170c:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 802170e:	460a      	mov	r2, r1
 8021710:	960a      	str	r6, [sp, #40]	@ 0x28
 8021712:	46a9      	mov	r9, r5
 8021714:	469c      	mov	ip, r3
 8021716:	e788      	b.n	802162a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 8021718:	ebac 0308 	sub.w	r3, ip, r8
 802171c:	eb09 0508 	add.w	r5, r9, r8
 8021720:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8021724:	b29b      	uxth	r3, r3
 8021726:	b2ad      	uxth	r5, r5
 8021728:	f04f 0800 	mov.w	r8, #0
 802172c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802172e:	4282      	cmp	r2, r0
 8021730:	d88a      	bhi.n	8021648 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 8021732:	460a      	mov	r2, r1
 8021734:	e745      	b.n	80215c2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x112>
 8021736:	4594      	cmp	ip, r2
 8021738:	9d08      	ldr	r5, [sp, #32]
 802173a:	4686      	mov	lr, r0
 802173c:	bf27      	ittee	cs
 802173e:	ebac 0302 	subcs.w	r3, ip, r2
 8021742:	4616      	movcs	r6, r2
 8021744:	eba2 010c 	subcc.w	r1, r2, ip
 8021748:	4666      	movcc	r6, ip
 802174a:	bf27      	ittee	cs
 802174c:	b29b      	uxthcs	r3, r3
 802174e:	4641      	movcs	r1, r8
 8021750:	b289      	uxthcc	r1, r1
 8021752:	4643      	movcc	r3, r8
 8021754:	2dff      	cmp	r5, #255	@ 0xff
 8021756:	eb09 0506 	add.w	r5, r9, r6
 802175a:	b2ad      	uxth	r5, r5
 802175c:	d130      	bne.n	80217c0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 802175e:	45a9      	cmp	r9, r5
 8021760:	f10e 0e03 	add.w	lr, lr, #3
 8021764:	d17a      	bne.n	802185c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ac>
 8021766:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802176a:	4594      	cmp	ip, r2
 802176c:	4430      	add	r0, r6
 802176e:	d3db      	bcc.n	8021728 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 8021770:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8021772:	9903      	ldr	r1, [sp, #12]
 8021774:	8812      	ldrh	r2, [r2, #0]
 8021776:	1a52      	subs	r2, r2, r1
 8021778:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802177a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802177e:	4410      	add	r0, r2
 8021780:	9a07      	ldr	r2, [sp, #28]
 8021782:	3201      	adds	r2, #1
 8021784:	428a      	cmp	r2, r1
 8021786:	9207      	str	r2, [sp, #28]
 8021788:	f040 8081 	bne.w	802188e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3de>
 802178c:	f8bd 8060 	ldrh.w	r8, [sp, #96]	@ 0x60
 8021790:	f8bd c058 	ldrh.w	ip, [sp, #88]	@ 0x58
 8021794:	9b03      	ldr	r3, [sp, #12]
 8021796:	eba8 080c 	sub.w	r8, r8, ip
 802179a:	fa1f f888 	uxth.w	r8, r8
 802179e:	f1b8 0f00 	cmp.w	r8, #0
 80217a2:	bf08      	it	eq
 80217a4:	461a      	moveq	r2, r3
 80217a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80217a8:	bf18      	it	ne
 80217aa:	2200      	movne	r2, #0
 80217ac:	3301      	adds	r3, #1
 80217ae:	b292      	uxth	r2, r2
 80217b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80217b2:	e6fd      	b.n	80215b0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x100>
 80217b4:	24013b58 	.word	0x24013b58
 80217b8:	24013b52 	.word	0x24013b52
 80217bc:	fffff7fb 	.word	0xfffff7fb
 80217c0:	45a9      	cmp	r9, r5
 80217c2:	f10e 0e03 	add.w	lr, lr, #3
 80217c6:	d0ce      	beq.n	8021766 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b6>
 80217c8:	f109 0701 	add.w	r7, r9, #1
 80217cc:	44a1      	add	r9, r4
 80217ce:	f81e bc03 	ldrb.w	fp, [lr, #-3]
 80217d2:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 80217d6:	9713      	str	r7, [sp, #76]	@ 0x4c
 80217d8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80217dc:	9f05      	ldr	r7, [sp, #20]
 80217de:	eb07 0908 	add.w	r9, r7, r8
 80217e2:	f817 8008 	ldrb.w	r8, [r7, r8]
 80217e6:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 80217e8:	fb1b fb07 	smulbb	fp, fp, r7
 80217ec:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80217ee:	fb08 b807 	mla	r8, r8, r7, fp
 80217f2:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 80217f4:	fa1f f888 	uxth.w	r8, r8
 80217f8:	f108 0b01 	add.w	fp, r8, #1
 80217fc:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8021800:	f81e bc02 	ldrb.w	fp, [lr, #-2]
 8021804:	fb1b fb07 	smulbb	fp, fp, r7
 8021808:	ea4f 2828 	mov.w	r8, r8, asr #8
 802180c:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 802180e:	f80e 8c03 	strb.w	r8, [lr, #-3]
 8021812:	f899 8001 	ldrb.w	r8, [r9, #1]
 8021816:	fb08 b807 	mla	r8, r8, r7, fp
 802181a:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 802181c:	fa1f f888 	uxth.w	r8, r8
 8021820:	f108 0b01 	add.w	fp, r8, #1
 8021824:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8021828:	ea4f 2828 	mov.w	r8, r8, asr #8
 802182c:	f80e 8c02 	strb.w	r8, [lr, #-2]
 8021830:	f899 8002 	ldrb.w	r8, [r9, #2]
 8021834:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 8021838:	fb19 f907 	smulbb	r9, r9, r7
 802183c:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 802183e:	fb08 9807 	mla	r8, r8, r7, r9
 8021842:	fa1f f888 	uxth.w	r8, r8
 8021846:	f108 0901 	add.w	r9, r8, #1
 802184a:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 802184e:	f8bd 904c 	ldrh.w	r9, [sp, #76]	@ 0x4c
 8021852:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021856:	f80e 8c01 	strb.w	r8, [lr, #-1]
 802185a:	e7b1      	b.n	80217c0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 802185c:	f109 0b01 	add.w	fp, r9, #1
 8021860:	44a1      	add	r9, r4
 8021862:	9f05      	ldr	r7, [sp, #20]
 8021864:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 8021868:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802186c:	eb07 0908 	add.w	r9, r7, r8
 8021870:	f817 8008 	ldrb.w	r8, [r7, r8]
 8021874:	f80e 8c03 	strb.w	r8, [lr, #-3]
 8021878:	f899 8001 	ldrb.w	r8, [r9, #1]
 802187c:	f80e 8c02 	strb.w	r8, [lr, #-2]
 8021880:	f899 8002 	ldrb.w	r8, [r9, #2]
 8021884:	fa1f f98b 	uxth.w	r9, fp
 8021888:	f80e 8c01 	strb.w	r8, [lr, #-1]
 802188c:	e767      	b.n	802175e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ae>
 802188e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8021892:	f8bd 805c 	ldrh.w	r8, [sp, #92]	@ 0x5c
 8021896:	eba8 0801 	sub.w	r8, r8, r1
 802189a:	fa1f f888 	uxth.w	r8, r8
 802189e:	f1b8 0f00 	cmp.w	r8, #0
 80218a2:	bf18      	it	ne
 80218a4:	2100      	movne	r1, #0
 80218a6:	e741      	b.n	802172c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>
 80218a8:	4b03      	ldr	r3, [pc, #12]	@ (80218b8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x408>)
 80218aa:	6818      	ldr	r0, [r3, #0]
 80218ac:	6803      	ldr	r3, [r0, #0]
 80218ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80218b0:	4798      	blx	r3
 80218b2:	b01b      	add	sp, #108	@ 0x6c
 80218b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80218b8:	24013b58 	.word	0x24013b58

080218bc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 80218bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80218c0:	b09d      	sub	sp, #116	@ 0x74
 80218c2:	461d      	mov	r5, r3
 80218c4:	4604      	mov	r4, r0
 80218c6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80218c8:	e9cd 120f 	strd	r1, r2, [sp, #60]	@ 0x3c
 80218cc:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 80218d0:	920c      	str	r2, [sp, #48]	@ 0x30
 80218d2:	2a00      	cmp	r2, #0
 80218d4:	f000 81de 	beq.w	8021c94 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d8>
 80218d8:	6828      	ldr	r0, [r5, #0]
 80218da:	aa18      	add	r2, sp, #96	@ 0x60
 80218dc:	6869      	ldr	r1, [r5, #4]
 80218de:	c203      	stmia	r2!, {r0, r1}
 80218e0:	6818      	ldr	r0, [r3, #0]
 80218e2:	aa1a      	add	r2, sp, #104	@ 0x68
 80218e4:	6859      	ldr	r1, [r3, #4]
 80218e6:	c203      	stmia	r2!, {r0, r1}
 80218e8:	a818      	add	r0, sp, #96	@ 0x60
 80218ea:	f7fa f8c1 	bl	801ba70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80218ee:	4629      	mov	r1, r5
 80218f0:	a81a      	add	r0, sp, #104	@ 0x68
 80218f2:	f7fa f8e5 	bl	801bac0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80218f6:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 80218fa:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	@ 0x66
 80218fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8021902:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 8021906:	bfdb      	ittet	le
 8021908:	b29a      	uxthle	r2, r3
 802190a:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 802190e:	2201      	movgt	r2, #1
 8021910:	fb91 f2f2 	sdivle	r2, r1, r2
 8021914:	9201      	str	r2, [sp, #4]
 8021916:	9801      	ldr	r0, [sp, #4]
 8021918:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 802191c:	9901      	ldr	r1, [sp, #4]
 802191e:	fb92 f0f0 	sdiv	r0, r2, r0
 8021922:	b280      	uxth	r0, r0
 8021924:	440f      	add	r7, r1
 8021926:	900d      	str	r0, [sp, #52]	@ 0x34
 8021928:	3f01      	subs	r7, #1
 802192a:	9801      	ldr	r0, [sp, #4]
 802192c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802192e:	fb05 2510 	mls	r5, r5, r0, r2
 8021932:	fb97 f7f1 	sdiv	r7, r7, r1
 8021936:	fb15 f503 	smulbb	r5, r5, r3
 802193a:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 802193e:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 8021942:	3701      	adds	r7, #1
 8021944:	440d      	add	r5, r1
 8021946:	4419      	add	r1, r3
 8021948:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 802194c:	b2bf      	uxth	r7, r7
 802194e:	441a      	add	r2, r3
 8021950:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 8021954:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 8021958:	00bf      	lsls	r7, r7, #2
 802195a:	9304      	str	r3, [sp, #16]
 802195c:	b2ad      	uxth	r5, r5
 802195e:	4bb0      	ldr	r3, [pc, #704]	@ (8021c20 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x364>)
 8021960:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 8021964:	6818      	ldr	r0, [r3, #0]
 8021966:	6803      	ldr	r3, [r0, #0]
 8021968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802196a:	4798      	blx	r3
 802196c:	4bad      	ldr	r3, [pc, #692]	@ (8021c24 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 802196e:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 8021972:	2d00      	cmp	r5, #0
 8021974:	881a      	ldrh	r2, [r3, #0]
 8021976:	f9bd c068 	ldrsh.w	ip, [sp, #104]	@ 0x68
 802197a:	fb02 f606 	mul.w	r6, r2, r6
 802197e:	fb02 c101 	mla	r1, r2, r1, ip
 8021982:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8021986:	9316      	str	r3, [sp, #88]	@ 0x58
 8021988:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802198c:	4ba6      	ldr	r3, [pc, #664]	@ (8021c28 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 802198e:	eb00 0801 	add.w	r8, r0, r1
 8021992:	bf18      	it	ne
 8021994:	2100      	movne	r1, #0
 8021996:	eba3 0304 	sub.w	r3, r3, r4
 802199a:	eb08 0206 	add.w	r2, r8, r6
 802199e:	9317      	str	r3, [sp, #92]	@ 0x5c
 80219a0:	9208      	str	r2, [sp, #32]
 80219a2:	f107 0204 	add.w	r2, r7, #4
 80219a6:	9211      	str	r2, [sp, #68]	@ 0x44
 80219a8:	9a04      	ldr	r2, [sp, #16]
 80219aa:	bf08      	it	eq
 80219ac:	4611      	moveq	r1, r2
 80219ae:	2200      	movs	r2, #0
 80219b0:	b289      	uxth	r1, r1
 80219b2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80219b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80219b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80219b8:	fa12 f383 	uxtah	r3, r2, r3
 80219bc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80219be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80219c2:	3304      	adds	r3, #4
 80219c4:	9306      	str	r3, [sp, #24]
 80219c6:	9b08      	ldr	r3, [sp, #32]
 80219c8:	4543      	cmp	r3, r8
 80219ca:	f240 815e 	bls.w	8021c8a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ce>
 80219ce:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 80219d2:	f04f 0b01 	mov.w	fp, #1
 80219d6:	9a01      	ldr	r2, [sp, #4]
 80219d8:	9806      	ldr	r0, [sp, #24]
 80219da:	465e      	mov	r6, fp
 80219dc:	f8cd b008 	str.w	fp, [sp, #8]
 80219e0:	7800      	ldrb	r0, [r0, #0]
 80219e2:	fbb5 f3f3 	udiv	r3, r5, r3
 80219e6:	1ad3      	subs	r3, r2, r3
 80219e8:	900e      	str	r0, [sp, #56]	@ 0x38
 80219ea:	3001      	adds	r0, #1
 80219ec:	b29b      	uxth	r3, r3
 80219ee:	9005      	str	r0, [sp, #20]
 80219f0:	9312      	str	r3, [sp, #72]	@ 0x48
 80219f2:	9b06      	ldr	r3, [sp, #24]
 80219f4:	785a      	ldrb	r2, [r3, #1]
 80219f6:	789b      	ldrb	r3, [r3, #2]
 80219f8:	021b      	lsls	r3, r3, #8
 80219fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80219fe:	9a06      	ldr	r2, [sp, #24]
 8021a00:	78d2      	ldrb	r2, [r2, #3]
 8021a02:	4313      	orrs	r3, r2
 8021a04:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8021a06:	441a      	add	r2, r3
 8021a08:	1c50      	adds	r0, r2, #1
 8021a0a:	7852      	ldrb	r2, [r2, #1]
 8021a0c:	9003      	str	r0, [sp, #12]
 8021a0e:	0212      	lsls	r2, r2, #8
 8021a10:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8021a12:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 8021a16:	5cc3      	ldrb	r3, [r0, r3]
 8021a18:	431a      	orrs	r2, r3
 8021a1a:	b293      	uxth	r3, r2
 8021a1c:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 8021a20:	930a      	str	r3, [sp, #40]	@ 0x28
 8021a22:	2300      	movs	r3, #0
 8021a24:	461a      	mov	r2, r3
 8021a26:	9307      	str	r3, [sp, #28]
 8021a28:	2d00      	cmp	r5, #0
 8021a2a:	d07c      	beq.n	8021b26 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 8021a2c:	42ae      	cmp	r6, r5
 8021a2e:	d26c      	bcs.n	8021b0a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x24e>
 8021a30:	9b08      	ldr	r3, [sp, #32]
 8021a32:	1bad      	subs	r5, r5, r6
 8021a34:	4608      	mov	r0, r1
 8021a36:	4543      	cmp	r3, r8
 8021a38:	b2ad      	uxth	r5, r5
 8021a3a:	d802      	bhi.n	8021a42 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x186>
 8021a3c:	e071      	b.n	8021b22 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 8021a3e:	2b00      	cmp	r3, #0
 8021a40:	d15d      	bne.n	8021afe <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x242>
 8021a42:	9b03      	ldr	r3, [sp, #12]
 8021a44:	9a02      	ldr	r2, [sp, #8]
 8021a46:	785b      	ldrb	r3, [r3, #1]
 8021a48:	f1c2 0207 	rsb	r2, r2, #7
 8021a4c:	9902      	ldr	r1, [sp, #8]
 8021a4e:	4093      	lsls	r3, r2
 8021a50:	005b      	lsls	r3, r3, #1
 8021a52:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8021a56:	9b03      	ldr	r3, [sp, #12]
 8021a58:	781b      	ldrb	r3, [r3, #0]
 8021a5a:	410b      	asrs	r3, r1
 8021a5c:	3101      	adds	r1, #1
 8021a5e:	b2c9      	uxtb	r1, r1
 8021a60:	b2db      	uxtb	r3, r3
 8021a62:	2908      	cmp	r1, #8
 8021a64:	9102      	str	r1, [sp, #8]
 8021a66:	9903      	ldr	r1, [sp, #12]
 8021a68:	ea43 0302 	orr.w	r3, r3, r2
 8021a6c:	bf0c      	ite	eq
 8021a6e:	3102      	addeq	r1, #2
 8021a70:	3101      	addne	r1, #1
 8021a72:	b29a      	uxth	r2, r3
 8021a74:	bf05      	ittet	eq
 8021a76:	9103      	streq	r1, [sp, #12]
 8021a78:	2100      	moveq	r1, #0
 8021a7a:	9103      	strne	r1, [sp, #12]
 8021a7c:	9102      	streq	r1, [sp, #8]
 8021a7e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8021a80:	4291      	cmp	r1, r2
 8021a82:	d30a      	bcc.n	8021a9a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1de>
 8021a84:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 8021a88:	2301      	movs	r3, #1
 8021a8a:	9905      	ldr	r1, [sp, #20]
 8021a8c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8021a90:	d30f      	bcc.n	8021ab2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f6>
 8021a92:	469b      	mov	fp, r3
 8021a94:	f04f 0c00 	mov.w	ip, #0
 8021a98:	e032      	b.n	8021b00 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x244>
 8021a9a:	9b05      	ldr	r3, [sp, #20]
 8021a9c:	429a      	cmp	r2, r3
 8021a9e:	d318      	bcc.n	8021ad2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 8021aa0:	eb04 030b 	add.w	r3, r4, fp
 8021aa4:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 8021aa8:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 8021aac:	f10b 0301 	add.w	r3, fp, #1
 8021ab0:	b29b      	uxth	r3, r3
 8021ab2:	9905      	ldr	r1, [sp, #20]
 8021ab4:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 8021ab8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8021abc:	710e      	strb	r6, [r1, #4]
 8021abe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8021ac0:	80ce      	strh	r6, [r1, #6]
 8021ac2:	f10b 0601 	add.w	r6, fp, #1
 8021ac6:	714e      	strb	r6, [r1, #5]
 8021ac8:	9905      	ldr	r1, [sp, #20]
 8021aca:	3101      	adds	r1, #1
 8021acc:	b289      	uxth	r1, r1
 8021ace:	9105      	str	r1, [sp, #20]
 8021ad0:	e7df      	b.n	8021a92 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 8021ad2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8021ad6:	4611      	mov	r1, r2
 8021ad8:	795b      	ldrb	r3, [r3, #5]
 8021ada:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 8021ade:	4426      	add	r6, r4
 8021ae0:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8021ae2:	4437      	add	r7, r6
 8021ae4:	2f00      	cmp	r7, #0
 8021ae6:	dd06      	ble.n	8021af6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 8021ae8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8021aec:	790f      	ldrb	r7, [r1, #4]
 8021aee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8021af2:	88c9      	ldrh	r1, [r1, #6]
 8021af4:	e7f4      	b.n	8021ae0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x224>
 8021af6:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 8021afa:	b29b      	uxth	r3, r3
 8021afc:	e7c5      	b.n	8021a8a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ce>
 8021afe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021b00:	920a      	str	r2, [sp, #40]	@ 0x28
 8021b02:	4601      	mov	r1, r0
 8021b04:	4662      	mov	r2, ip
 8021b06:	461e      	mov	r6, r3
 8021b08:	e78e      	b.n	8021a28 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16c>
 8021b0a:	1b73      	subs	r3, r6, r5
 8021b0c:	eb02 0c05 	add.w	ip, r2, r5
 8021b10:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8021b14:	b29b      	uxth	r3, r3
 8021b16:	fa1f fc8c 	uxth.w	ip, ip
 8021b1a:	2500      	movs	r5, #0
 8021b1c:	9a08      	ldr	r2, [sp, #32]
 8021b1e:	4542      	cmp	r2, r8
 8021b20:	d88d      	bhi.n	8021a3e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 8021b22:	4601      	mov	r1, r0
 8021b24:	e74f      	b.n	80219c6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10a>
 8021b26:	428e      	cmp	r6, r1
 8021b28:	bf2b      	itete	cs
 8021b2a:	468e      	movcs	lr, r1
 8021b2c:	46b6      	movcc	lr, r6
 8021b2e:	1a73      	subcs	r3, r6, r1
 8021b30:	1b88      	subcc	r0, r1, r6
 8021b32:	eb02 0c0e 	add.w	ip, r2, lr
 8021b36:	bf2b      	itete	cs
 8021b38:	4628      	movcs	r0, r5
 8021b3a:	462b      	movcc	r3, r5
 8021b3c:	b29b      	uxthcs	r3, r3
 8021b3e:	b280      	uxthcc	r0, r0
 8021b40:	f108 0503 	add.w	r5, r8, #3
 8021b44:	fa1f fc8c 	uxth.w	ip, ip
 8021b48:	4562      	cmp	r2, ip
 8021b4a:	d06f      	beq.n	8021c2c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>
 8021b4c:	1c57      	adds	r7, r2, #1
 8021b4e:	4422      	add	r2, r4
 8021b50:	b2bf      	uxth	r7, r7
 8021b52:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 8021b56:	9713      	str	r7, [sp, #76]	@ 0x4c
 8021b58:	2704      	movs	r7, #4
 8021b5a:	46b9      	mov	r9, r7
 8021b5c:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8021b5e:	fb19 7202 	smlabb	r2, r9, r2, r7
 8021b62:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8021b64:	58bf      	ldr	r7, [r7, r2]
 8021b66:	0e3a      	lsrs	r2, r7, #24
 8021b68:	9209      	str	r2, [sp, #36]	@ 0x24
 8021b6a:	d016      	beq.n	8021b9a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 8021b6c:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8021b70:	fa5f fa87 	uxtb.w	sl, r7
 8021b74:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8021b78:	fa5f f289 	uxtb.w	r2, r9
 8021b7c:	9214      	str	r2, [sp, #80]	@ 0x50
 8021b7e:	b2fa      	uxtb	r2, r7
 8021b80:	9215      	str	r2, [sp, #84]	@ 0x54
 8021b82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021b84:	2aff      	cmp	r2, #255	@ 0xff
 8021b86:	d10b      	bne.n	8021ba0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 8021b88:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8021b8a:	2aff      	cmp	r2, #255	@ 0xff
 8021b8c:	d108      	bne.n	8021ba0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 8021b8e:	f805 ac03 	strb.w	sl, [r5, #-3]
 8021b92:	f805 9c02 	strb.w	r9, [r5, #-2]
 8021b96:	f805 7c01 	strb.w	r7, [r5, #-1]
 8021b9a:	3503      	adds	r5, #3
 8021b9c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8021b9e:	e7d3      	b.n	8021b48 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>
 8021ba0:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8021ba2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8021ba4:	437a      	muls	r2, r7
 8021ba6:	1c57      	adds	r7, r2, #1
 8021ba8:	eb07 2222 	add.w	r2, r7, r2, asr #8
 8021bac:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 8021bb0:	1212      	asrs	r2, r2, #8
 8021bb2:	fa1f f982 	uxth.w	r9, r2
 8021bb6:	43d2      	mvns	r2, r2
 8021bb8:	fb1a fa09 	smulbb	sl, sl, r9
 8021bbc:	b2d2      	uxtb	r2, r2
 8021bbe:	fb07 a702 	mla	r7, r7, r2, sl
 8021bc2:	9209      	str	r2, [sp, #36]	@ 0x24
 8021bc4:	b2bf      	uxth	r7, r7
 8021bc6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8021bc8:	f107 0a01 	add.w	sl, r7, #1
 8021bcc:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8021bd0:	fb12 fa09 	smulbb	sl, r2, r9
 8021bd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021bd6:	123f      	asrs	r7, r7, #8
 8021bd8:	f805 7c03 	strb.w	r7, [r5, #-3]
 8021bdc:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 8021be0:	fb07 aa02 	mla	sl, r7, r2, sl
 8021be4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8021be6:	fb12 f909 	smulbb	r9, r2, r9
 8021bea:	fa1f fa8a 	uxth.w	sl, sl
 8021bee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021bf0:	f10a 0701 	add.w	r7, sl, #1
 8021bf4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021bf8:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 8021bfc:	fb07 9902 	mla	r9, r7, r2, r9
 8021c00:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021c04:	fa1f f989 	uxth.w	r9, r9
 8021c08:	f805 ac02 	strb.w	sl, [r5, #-2]
 8021c0c:	f109 0201 	add.w	r2, r9, #1
 8021c10:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8021c14:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021c18:	f805 9c01 	strb.w	r9, [r5, #-1]
 8021c1c:	e7bd      	b.n	8021b9a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 8021c1e:	bf00      	nop
 8021c20:	24013b58 	.word	0x24013b58
 8021c24:	24013b52 	.word	0x24013b52
 8021c28:	fffff7fb 	.word	0xfffff7fb
 8021c2c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8021c30:	428e      	cmp	r6, r1
 8021c32:	44f0      	add	r8, lr
 8021c34:	f4ff af71 	bcc.w	8021b1a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 8021c38:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8021c3a:	9904      	ldr	r1, [sp, #16]
 8021c3c:	8812      	ldrh	r2, [r2, #0]
 8021c3e:	1a52      	subs	r2, r2, r1
 8021c40:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8021c42:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021c46:	4490      	add	r8, r2
 8021c48:	9a07      	ldr	r2, [sp, #28]
 8021c4a:	3201      	adds	r2, #1
 8021c4c:	428a      	cmp	r2, r1
 8021c4e:	9207      	str	r2, [sp, #28]
 8021c50:	d111      	bne.n	8021c76 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ba>
 8021c52:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 8021c56:	f8bd c060 	ldrh.w	ip, [sp, #96]	@ 0x60
 8021c5a:	9b04      	ldr	r3, [sp, #16]
 8021c5c:	eba5 050c 	sub.w	r5, r5, ip
 8021c60:	b2ad      	uxth	r5, r5
 8021c62:	2d00      	cmp	r5, #0
 8021c64:	bf08      	it	eq
 8021c66:	4619      	moveq	r1, r3
 8021c68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021c6a:	bf18      	it	ne
 8021c6c:	2100      	movne	r1, #0
 8021c6e:	3301      	adds	r3, #1
 8021c70:	b289      	uxth	r1, r1
 8021c72:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021c74:	e69e      	b.n	80219b4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf8>
 8021c76:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8021c7a:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 8021c7e:	1a2d      	subs	r5, r5, r0
 8021c80:	b2ad      	uxth	r5, r5
 8021c82:	2d00      	cmp	r5, #0
 8021c84:	bf18      	it	ne
 8021c86:	2000      	movne	r0, #0
 8021c88:	e748      	b.n	8021b1c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 8021c8a:	4b04      	ldr	r3, [pc, #16]	@ (8021c9c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e0>)
 8021c8c:	6818      	ldr	r0, [r3, #0]
 8021c8e:	6803      	ldr	r3, [r0, #0]
 8021c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021c92:	4798      	blx	r3
 8021c94:	b01d      	add	sp, #116	@ 0x74
 8021c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c9a:	bf00      	nop
 8021c9c:	24013b58 	.word	0x24013b58

08021ca0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 8021ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ca4:	b08f      	sub	sp, #60	@ 0x3c
 8021ca6:	4616      	mov	r6, r2
 8021ca8:	4681      	mov	r9, r0
 8021caa:	460d      	mov	r5, r1
 8021cac:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 8021cb0:	9205      	str	r2, [sp, #20]
 8021cb2:	2a00      	cmp	r2, #0
 8021cb4:	f000 82a8 	beq.w	8022208 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x568>
 8021cb8:	6830      	ldr	r0, [r6, #0]
 8021cba:	ac0a      	add	r4, sp, #40	@ 0x28
 8021cbc:	6871      	ldr	r1, [r6, #4]
 8021cbe:	c403      	stmia	r4!, {r0, r1}
 8021cc0:	6818      	ldr	r0, [r3, #0]
 8021cc2:	ac0c      	add	r4, sp, #48	@ 0x30
 8021cc4:	6859      	ldr	r1, [r3, #4]
 8021cc6:	c403      	stmia	r4!, {r0, r1}
 8021cc8:	a80a      	add	r0, sp, #40	@ 0x28
 8021cca:	f7f9 fed1 	bl	801ba70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021cce:	4631      	mov	r1, r6
 8021cd0:	a80c      	add	r0, sp, #48	@ 0x30
 8021cd2:	f7f9 fef5 	bl	801bac0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021cd6:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8021cda:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8021cde:	bfdb      	ittet	le
 8021ce0:	b293      	uxthle	r3, r2
 8021ce2:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8021ce6:	2301      	movgt	r3, #1
 8021ce8:	fb91 f3f3 	sdivle	r3, r1, r3
 8021cec:	9300      	str	r3, [sp, #0]
 8021cee:	f105 0308 	add.w	r3, r5, #8
 8021cf2:	9900      	ldr	r1, [sp, #0]
 8021cf4:	9306      	str	r3, [sp, #24]
 8021cf6:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8021cfa:	440b      	add	r3, r1
 8021cfc:	3b01      	subs	r3, #1
 8021cfe:	fb93 f3f1 	sdiv	r3, r3, r1
 8021d02:	3b01      	subs	r3, #1
 8021d04:	9906      	ldr	r1, [sp, #24]
 8021d06:	b29b      	uxth	r3, r3
 8021d08:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8021d0c:	9900      	ldr	r1, [sp, #0]
 8021d0e:	9307      	str	r3, [sp, #28]
 8021d10:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8021d14:	fb93 f0f1 	sdiv	r0, r3, r1
 8021d18:	b284      	uxth	r4, r0
 8021d1a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8021d1e:	b280      	uxth	r0, r0
 8021d20:	9402      	str	r4, [sp, #8]
 8021d22:	9d02      	ldr	r5, [sp, #8]
 8021d24:	9c00      	ldr	r4, [sp, #0]
 8021d26:	fb05 3514 	mls	r5, r5, r4, r3
 8021d2a:	fb15 f502 	smulbb	r5, r5, r2
 8021d2e:	440d      	add	r5, r1
 8021d30:	b2ad      	uxth	r5, r5
 8021d32:	2800      	cmp	r0, #0
 8021d34:	d071      	beq.n	8021e1a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x17a>
 8021d36:	1e42      	subs	r2, r0, #1
 8021d38:	9806      	ldr	r0, [sp, #24]
 8021d3a:	f850 8022 	ldr.w	r8, [r0, r2, lsl #2]
 8021d3e:	9a07      	ldr	r2, [sp, #28]
 8021d40:	fa98 f888 	rev.w	r8, r8
 8021d44:	4490      	add	r8, r2
 8021d46:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 8021d4a:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 8021d4e:	4411      	add	r1, r2
 8021d50:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8021d54:	f8df b348 	ldr.w	fp, [pc, #840]	@ 80220a0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 8021d58:	4413      	add	r3, r2
 8021d5a:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 8021d5e:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8021d62:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8021d66:	9301      	str	r3, [sp, #4]
 8021d68:	4bcb      	ldr	r3, [pc, #812]	@ (8022098 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3f8>)
 8021d6a:	6818      	ldr	r0, [r3, #0]
 8021d6c:	6803      	ldr	r3, [r0, #0]
 8021d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021d70:	4798      	blx	r3
 8021d72:	4bca      	ldr	r3, [pc, #808]	@ (802209c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3fc>)
 8021d74:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8021d78:	881b      	ldrh	r3, [r3, #0]
 8021d7a:	f9bd 7032 	ldrsh.w	r7, [sp, #50]	@ 0x32
 8021d7e:	fb03 2707 	mla	r7, r3, r7, r2
 8021d82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8021d86:	4363      	muls	r3, r4
 8021d88:	2400      	movs	r4, #0
 8021d8a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8021d8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021d92:	4621      	mov	r1, r4
 8021d94:	4407      	add	r7, r0
 8021d96:	18fb      	adds	r3, r7, r3
 8021d98:	9309      	str	r3, [sp, #36]	@ 0x24
 8021d9a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8021d9e:	fb95 f3f3 	sdiv	r3, r5, r3
 8021da2:	9304      	str	r3, [sp, #16]
 8021da4:	f109 0304 	add.w	r3, r9, #4
 8021da8:	4618      	mov	r0, r3
 8021daa:	9308      	str	r3, [sp, #32]
 8021dac:	f008 fc0c 	bl	802a5c8 <memset>
 8021db0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021db2:	42bb      	cmp	r3, r7
 8021db4:	f240 8223 	bls.w	80221fe <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x55e>
 8021db8:	2003      	movs	r0, #3
 8021dba:	f04f 0c07 	mov.w	ip, #7
 8021dbe:	f04f 0e0b 	mov.w	lr, #11
 8021dc2:	2d00      	cmp	r5, #0
 8021dc4:	f000 813c 	beq.w	8022040 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a0>
 8021dc8:	f898 3000 	ldrb.w	r3, [r8]
 8021dcc:	b2db      	uxtb	r3, r3
 8021dce:	2bfe      	cmp	r3, #254	@ 0xfe
 8021dd0:	d126      	bne.n	8021e20 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x180>
 8021dd2:	f898 1001 	ldrb.w	r1, [r8, #1]
 8021dd6:	f108 0604 	add.w	r6, r8, #4
 8021dda:	f898 2002 	ldrb.w	r2, [r8, #2]
 8021dde:	3d01      	subs	r5, #1
 8021de0:	b2c9      	uxtb	r1, r1
 8021de2:	f898 8003 	ldrb.w	r8, [r8, #3]
 8021de6:	b2d2      	uxtb	r2, r2
 8021de8:	f361 0407 	bfi	r4, r1, #0, #8
 8021dec:	fa5f f888 	uxtb.w	r8, r8
 8021df0:	b2ad      	uxth	r5, r5
 8021df2:	f362 240f 	bfi	r4, r2, #8, #8
 8021df6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8021dfa:	fb10 2208 	smlabb	r2, r0, r8, r2
 8021dfe:	f368 4417 	bfi	r4, r8, #16, #8
 8021e02:	fb1c 2201 	smlabb	r2, ip, r1, r2
 8021e06:	0e23      	lsrs	r3, r4, #24
 8021e08:	fb1e 2303 	smlabb	r3, lr, r3, r2
 8021e0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8021e10:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8021e14:	605c      	str	r4, [r3, #4]
 8021e16:	46b0      	mov	r8, r6
 8021e18:	e7d3      	b.n	8021dc2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x122>
 8021e1a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8021e1e:	e792      	b.n	8021d46 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xa6>
 8021e20:	2bff      	cmp	r3, #255	@ 0xff
 8021e22:	d127      	bne.n	8021e74 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1d4>
 8021e24:	f898 2001 	ldrb.w	r2, [r8, #1]
 8021e28:	f108 0605 	add.w	r6, r8, #5
 8021e2c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8021e30:	3d01      	subs	r5, #1
 8021e32:	b2d2      	uxtb	r2, r2
 8021e34:	f898 1003 	ldrb.w	r1, [r8, #3]
 8021e38:	b2db      	uxtb	r3, r3
 8021e3a:	f898 8004 	ldrb.w	r8, [r8, #4]
 8021e3e:	f362 0407 	bfi	r4, r2, #0, #8
 8021e42:	b2c9      	uxtb	r1, r1
 8021e44:	fa5f f888 	uxtb.w	r8, r8
 8021e48:	f363 240f 	bfi	r4, r3, #8, #8
 8021e4c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8021e50:	b2ad      	uxth	r5, r5
 8021e52:	fb10 3301 	smlabb	r3, r0, r1, r3
 8021e56:	f361 4417 	bfi	r4, r1, #16, #8
 8021e5a:	fb1c 3302 	smlabb	r3, ip, r2, r3
 8021e5e:	f368 641f 	bfi	r4, r8, #24, #8
 8021e62:	fb1e 3808 	smlabb	r8, lr, r8, r3
 8021e66:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 8021e6a:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 8021e6e:	f8c8 4004 	str.w	r4, [r8, #4]
 8021e72:	e7d0      	b.n	8021e16 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 8021e74:	119a      	asrs	r2, r3, #6
 8021e76:	f108 0601 	add.w	r6, r8, #1
 8021e7a:	d107      	bne.n	8021e8c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1ec>
 8021e7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8021e80:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8021e84:	685c      	ldr	r4, [r3, #4]
 8021e86:	3d01      	subs	r5, #1
 8021e88:	b2ad      	uxth	r5, r5
 8021e8a:	e7c4      	b.n	8021e16 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 8021e8c:	2a01      	cmp	r2, #1
 8021e8e:	d129      	bne.n	8021ee4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x244>
 8021e90:	f003 0203 	and.w	r2, r3, #3
 8021e94:	1ea1      	subs	r1, r4, #2
 8021e96:	4411      	add	r1, r2
 8021e98:	f3c3 0281 	ubfx	r2, r3, #2, #2
 8021e9c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8021ea0:	b2c9      	uxtb	r1, r1
 8021ea2:	3a02      	subs	r2, #2
 8021ea4:	3b02      	subs	r3, #2
 8021ea6:	f361 0407 	bfi	r4, r1, #0, #8
 8021eaa:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8021eae:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8021eb2:	f362 240f 	bfi	r4, r2, #8, #8
 8021eb6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8021eba:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8021ebe:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 8021ec2:	fb10 2203 	smlabb	r2, r0, r3, r2
 8021ec6:	f363 4417 	bfi	r4, r3, #16, #8
 8021eca:	fb1c 2201 	smlabb	r2, ip, r1, r2
 8021ece:	ea4f 6814 	mov.w	r8, r4, lsr #24
 8021ed2:	fb1e 2808 	smlabb	r8, lr, r8, r2
 8021ed6:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 8021eda:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 8021ede:	f8c8 4004 	str.w	r4, [r8, #4]
 8021ee2:	e7d0      	b.n	8021e86 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 8021ee4:	2a02      	cmp	r2, #2
 8021ee6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8021eea:	d12e      	bne.n	8021f4a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2aa>
 8021eec:	f898 2001 	ldrb.w	r2, [r8, #1]
 8021ef0:	f1a3 0a20 	sub.w	sl, r3, #32
 8021ef4:	f108 0602 	add.w	r6, r8, #2
 8021ef8:	b2d2      	uxtb	r2, r2
 8021efa:	f002 010f 	and.w	r1, r2, #15
 8021efe:	1112      	asrs	r2, r2, #4
 8021f00:	3908      	subs	r1, #8
 8021f02:	3a08      	subs	r2, #8
 8021f04:	4451      	add	r1, sl
 8021f06:	4492      	add	sl, r2
 8021f08:	4421      	add	r1, r4
 8021f0a:	b2c9      	uxtb	r1, r1
 8021f0c:	f361 0407 	bfi	r4, r1, #0, #8
 8021f10:	f3c4 2807 	ubfx	r8, r4, #8, #8
 8021f14:	f1a8 0820 	sub.w	r8, r8, #32
 8021f18:	4443      	add	r3, r8
 8021f1a:	b2db      	uxtb	r3, r3
 8021f1c:	f363 240f 	bfi	r4, r3, #8, #8
 8021f20:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8021f24:	eb0a 4a14 	add.w	sl, sl, r4, lsr #16
 8021f28:	f00a 0aff 	and.w	sl, sl, #255	@ 0xff
 8021f2c:	fb10 330a 	smlabb	r3, r0, sl, r3
 8021f30:	f36a 4417 	bfi	r4, sl, #16, #8
 8021f34:	fb1c 3301 	smlabb	r3, ip, r1, r3
 8021f38:	0e22      	lsrs	r2, r4, #24
 8021f3a:	fb1e 3202 	smlabb	r2, lr, r2, r3
 8021f3e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8021f42:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8021f46:	6054      	str	r4, [r2, #4]
 8021f48:	e79d      	b.n	8021e86 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 8021f4a:	3301      	adds	r3, #1
 8021f4c:	42ab      	cmp	r3, r5
 8021f4e:	dd59      	ble.n	8022004 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x364>
 8021f50:	1b5d      	subs	r5, r3, r5
 8021f52:	2d00      	cmp	r5, #0
 8021f54:	dc58      	bgt.n	8022008 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x368>
 8021f56:	f8dd a004 	ldr.w	sl, [sp, #4]
 8021f5a:	f04f 0800 	mov.w	r8, #0
 8021f5e:	f1ba 0f00 	cmp.w	sl, #0
 8021f62:	f340 8108 	ble.w	8022176 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4d6>
 8021f66:	1c73      	adds	r3, r6, #1
 8021f68:	9303      	str	r3, [sp, #12]
 8021f6a:	7833      	ldrb	r3, [r6, #0]
 8021f6c:	b2db      	uxtb	r3, r3
 8021f6e:	2bfe      	cmp	r3, #254	@ 0xfe
 8021f70:	d16a      	bne.n	8022048 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a8>
 8021f72:	7871      	ldrb	r1, [r6, #1]
 8021f74:	1d33      	adds	r3, r6, #4
 8021f76:	78b2      	ldrb	r2, [r6, #2]
 8021f78:	b2c9      	uxtb	r1, r1
 8021f7a:	78f0      	ldrb	r0, [r6, #3]
 8021f7c:	b2d2      	uxtb	r2, r2
 8021f7e:	9303      	str	r3, [sp, #12]
 8021f80:	f361 0407 	bfi	r4, r1, #0, #8
 8021f84:	b2c0      	uxtb	r0, r0
 8021f86:	2303      	movs	r3, #3
 8021f88:	f362 240f 	bfi	r4, r2, #8, #8
 8021f8c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8021f90:	fb13 2200 	smlabb	r2, r3, r0, r2
 8021f94:	f360 4417 	bfi	r4, r0, #16, #8
 8021f98:	2307      	movs	r3, #7
 8021f9a:	0e25      	lsrs	r5, r4, #24
 8021f9c:	fb13 2101 	smlabb	r1, r3, r1, r2
 8021fa0:	230b      	movs	r3, #11
 8021fa2:	fb13 1305 	smlabb	r3, r3, r5, r1
 8021fa6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8021faa:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8021fae:	605c      	str	r4, [r3, #4]
 8021fb0:	2501      	movs	r5, #1
 8021fb2:	462e      	mov	r6, r5
 8021fb4:	eb06 0308 	add.w	r3, r6, r8
 8021fb8:	ebaa 0a06 	sub.w	sl, sl, r6
 8021fbc:	1bad      	subs	r5, r5, r6
 8021fbe:	2b40      	cmp	r3, #64	@ 0x40
 8021fc0:	dd16      	ble.n	8021ff0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x350>
 8021fc2:	4658      	mov	r0, fp
 8021fc4:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8021fc8:	f7f3 fcb0 	bl	801592c <_ZN8touchgfx5paint9flushLineEPmi>
 8021fcc:	4659      	mov	r1, fp
 8021fce:	9b05      	ldr	r3, [sp, #20]
 8021fd0:	4642      	mov	r2, r8
 8021fd2:	4638      	mov	r0, r7
 8021fd4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8021fd8:	f7f3 fd86 	bl	8015ae8 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 8021fdc:	4b30      	ldr	r3, [pc, #192]	@ (80220a0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>)
 8021fde:	4447      	add	r7, r8
 8021fe0:	f04f 0800 	mov.w	r8, #0
 8021fe4:	459b      	cmp	fp, r3
 8021fe6:	bf0c      	ite	eq
 8021fe8:	f8df b0b8 	ldreq.w	fp, [pc, #184]	@ 80220a4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x404>
 8021fec:	f8df b0b0 	ldrne.w	fp, [pc, #176]	@ 80220a0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 8021ff0:	eb0b 0288 	add.w	r2, fp, r8, lsl #2
 8021ff4:	4633      	mov	r3, r6
 8021ff6:	3b01      	subs	r3, #1
 8021ff8:	f842 4b04 	str.w	r4, [r2], #4
 8021ffc:	d1fb      	bne.n	8021ff6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x356>
 8021ffe:	44b0      	add	r8, r6
 8022000:	9e03      	ldr	r6, [sp, #12]
 8022002:	e7ac      	b.n	8021f5e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2be>
 8022004:	1aed      	subs	r5, r5, r3
 8022006:	e73f      	b.n	8021e88 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e8>
 8022008:	9b01      	ldr	r3, [sp, #4]
 802200a:	42ab      	cmp	r3, r5
 802200c:	bfa8      	it	ge
 802200e:	462b      	movge	r3, r5
 8022010:	4698      	mov	r8, r3
 8022012:	9b01      	ldr	r3, [sp, #4]
 8022014:	eba3 0a08 	sub.w	sl, r3, r8
 8022018:	0e23      	lsrs	r3, r4, #24
 802201a:	eba5 0508 	sub.w	r5, r5, r8
 802201e:	d00b      	beq.n	8022038 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x398>
 8022020:	9a05      	ldr	r2, [sp, #20]
 8022022:	4641      	mov	r1, r8
 8022024:	4638      	mov	r0, r7
 8022026:	4353      	muls	r3, r2
 8022028:	1c5a      	adds	r2, r3, #1
 802202a:	eb02 2323 	add.w	r3, r2, r3, asr #8
 802202e:	4622      	mov	r2, r4
 8022030:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022034:	f7f3 fcb8 	bl	80159a8 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 8022038:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802203c:	4447      	add	r7, r8
 802203e:	e78c      	b.n	8021f5a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 8022040:	f8dd a004 	ldr.w	sl, [sp, #4]
 8022044:	4646      	mov	r6, r8
 8022046:	e788      	b.n	8021f5a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 8022048:	2bff      	cmp	r3, #255	@ 0xff
 802204a:	d11d      	bne.n	8022088 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e8>
 802204c:	7870      	ldrb	r0, [r6, #1]
 802204e:	1d73      	adds	r3, r6, #5
 8022050:	78b2      	ldrb	r2, [r6, #2]
 8022052:	b2c0      	uxtb	r0, r0
 8022054:	78f5      	ldrb	r5, [r6, #3]
 8022056:	b2d2      	uxtb	r2, r2
 8022058:	9303      	str	r3, [sp, #12]
 802205a:	f360 0407 	bfi	r4, r0, #0, #8
 802205e:	7933      	ldrb	r3, [r6, #4]
 8022060:	b2ed      	uxtb	r5, r5
 8022062:	b2d9      	uxtb	r1, r3
 8022064:	f362 240f 	bfi	r4, r2, #8, #8
 8022068:	2303      	movs	r3, #3
 802206a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 802206e:	f365 4417 	bfi	r4, r5, #16, #8
 8022072:	fb13 2205 	smlabb	r2, r3, r5, r2
 8022076:	2307      	movs	r3, #7
 8022078:	f361 641f 	bfi	r4, r1, #24, #8
 802207c:	fb13 2000 	smlabb	r0, r3, r0, r2
 8022080:	230b      	movs	r3, #11
 8022082:	fb13 0301 	smlabb	r3, r3, r1, r0
 8022086:	e78e      	b.n	8021fa6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x306>
 8022088:	119d      	asrs	r5, r3, #6
 802208a:	d10d      	bne.n	80220a8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x408>
 802208c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8022090:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8022094:	685c      	ldr	r4, [r3, #4]
 8022096:	e78b      	b.n	8021fb0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 8022098:	24013b58 	.word	0x24013b58
 802209c:	24013b52 	.word	0x24013b52
 80220a0:	240000e0 	.word	0x240000e0
 80220a4:	240001e0 	.word	0x240001e0
 80220a8:	2d01      	cmp	r5, #1
 80220aa:	d12a      	bne.n	8022102 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x462>
 80220ac:	f003 0203 	and.w	r2, r3, #3
 80220b0:	1ea1      	subs	r1, r4, #2
 80220b2:	2603      	movs	r6, #3
 80220b4:	4411      	add	r1, r2
 80220b6:	f3c3 0281 	ubfx	r2, r3, #2, #2
 80220ba:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80220be:	b2c9      	uxtb	r1, r1
 80220c0:	3a02      	subs	r2, #2
 80220c2:	3b02      	subs	r3, #2
 80220c4:	f361 0407 	bfi	r4, r1, #0, #8
 80220c8:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80220cc:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 80220d0:	f362 240f 	bfi	r4, r2, #8, #8
 80220d4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80220d8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80220dc:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 80220e0:	fb16 2203 	smlabb	r2, r6, r3, r2
 80220e4:	f363 4417 	bfi	r4, r3, #16, #8
 80220e8:	2307      	movs	r3, #7
 80220ea:	0e20      	lsrs	r0, r4, #24
 80220ec:	fb13 2101 	smlabb	r1, r3, r1, r2
 80220f0:	230b      	movs	r3, #11
 80220f2:	fb13 1300 	smlabb	r3, r3, r0, r1
 80220f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80220fa:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80220fe:	605c      	str	r4, [r3, #4]
 8022100:	e757      	b.n	8021fb2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x312>
 8022102:	2d02      	cmp	r5, #2
 8022104:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8022108:	d12f      	bne.n	802216a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4ca>
 802210a:	1cb2      	adds	r2, r6, #2
 802210c:	f1a3 0020 	sub.w	r0, r3, #32
 8022110:	9203      	str	r2, [sp, #12]
 8022112:	7872      	ldrb	r2, [r6, #1]
 8022114:	b2d2      	uxtb	r2, r2
 8022116:	f002 010f 	and.w	r1, r2, #15
 802211a:	1112      	asrs	r2, r2, #4
 802211c:	3908      	subs	r1, #8
 802211e:	3a08      	subs	r2, #8
 8022120:	4401      	add	r1, r0
 8022122:	4402      	add	r2, r0
 8022124:	4421      	add	r1, r4
 8022126:	b2c9      	uxtb	r1, r1
 8022128:	f361 0407 	bfi	r4, r1, #0, #8
 802212c:	f3c4 2507 	ubfx	r5, r4, #8, #8
 8022130:	3d20      	subs	r5, #32
 8022132:	442b      	add	r3, r5
 8022134:	2503      	movs	r5, #3
 8022136:	b2db      	uxtb	r3, r3
 8022138:	f363 240f 	bfi	r4, r3, #8, #8
 802213c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8022140:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 8022144:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8022148:	fb15 3302 	smlabb	r3, r5, r2, r3
 802214c:	f362 4417 	bfi	r4, r2, #16, #8
 8022150:	2207      	movs	r2, #7
 8022152:	0e20      	lsrs	r0, r4, #24
 8022154:	fb12 3201 	smlabb	r2, r2, r1, r3
 8022158:	210b      	movs	r1, #11
 802215a:	fb11 2100 	smlabb	r1, r1, r0, r2
 802215e:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 8022162:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8022166:	604c      	str	r4, [r1, #4]
 8022168:	e722      	b.n	8021fb0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 802216a:	1c5d      	adds	r5, r3, #1
 802216c:	4656      	mov	r6, sl
 802216e:	45aa      	cmp	sl, r5
 8022170:	bfa8      	it	ge
 8022172:	462e      	movge	r6, r5
 8022174:	e71e      	b.n	8021fb4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x314>
 8022176:	f1b8 0f00 	cmp.w	r8, #0
 802217a:	d00d      	beq.n	8022198 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4f8>
 802217c:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8022180:	4658      	mov	r0, fp
 8022182:	f7f3 fbd3 	bl	801592c <_ZN8touchgfx5paint9flushLineEPmi>
 8022186:	4642      	mov	r2, r8
 8022188:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802218c:	4638      	mov	r0, r7
 802218e:	9b05      	ldr	r3, [sp, #20]
 8022190:	4659      	mov	r1, fp
 8022192:	4447      	add	r7, r8
 8022194:	f7f3 fca8 	bl	8015ae8 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 8022198:	4b1d      	ldr	r3, [pc, #116]	@ (8022210 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x570>)
 802219a:	9a01      	ldr	r2, [sp, #4]
 802219c:	881b      	ldrh	r3, [r3, #0]
 802219e:	1a9b      	subs	r3, r3, r2
 80221a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80221a4:	441f      	add	r7, r3
 80221a6:	9b04      	ldr	r3, [sp, #16]
 80221a8:	3301      	adds	r3, #1
 80221aa:	9304      	str	r3, [sp, #16]
 80221ac:	9a04      	ldr	r2, [sp, #16]
 80221ae:	9b00      	ldr	r3, [sp, #0]
 80221b0:	4293      	cmp	r3, r2
 80221b2:	d11d      	bne.n	80221f0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x550>
 80221b4:	9b02      	ldr	r3, [sp, #8]
 80221b6:	2400      	movs	r4, #0
 80221b8:	9a02      	ldr	r2, [sp, #8]
 80221ba:	f103 0801 	add.w	r8, r3, #1
 80221be:	9b06      	ldr	r3, [sp, #24]
 80221c0:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 80221c4:	4621      	mov	r1, r4
 80221c6:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80221ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80221ce:	9b07      	ldr	r3, [sp, #28]
 80221d0:	ba36      	rev	r6, r6
 80221d2:	9808      	ldr	r0, [sp, #32]
 80221d4:	441e      	add	r6, r3
 80221d6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80221da:	1aed      	subs	r5, r5, r3
 80221dc:	f008 f9f4 	bl	802a5c8 <memset>
 80221e0:	f8cd 8008 	str.w	r8, [sp, #8]
 80221e4:	b2ad      	uxth	r5, r5
 80221e6:	9404      	str	r4, [sp, #16]
 80221e8:	f7f3 fb88 	bl	80158fc <_ZN8touchgfx5paint8tearDownEv>
 80221ec:	46b0      	mov	r8, r6
 80221ee:	e5df      	b.n	8021db0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x110>
 80221f0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80221f4:	9a01      	ldr	r2, [sp, #4]
 80221f6:	1a9b      	subs	r3, r3, r2
 80221f8:	1b5d      	subs	r5, r3, r5
 80221fa:	b2ad      	uxth	r5, r5
 80221fc:	e7f4      	b.n	80221e8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x548>
 80221fe:	4b05      	ldr	r3, [pc, #20]	@ (8022214 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x574>)
 8022200:	6818      	ldr	r0, [r3, #0]
 8022202:	6803      	ldr	r3, [r0, #0]
 8022204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022206:	4798      	blx	r3
 8022208:	b00f      	add	sp, #60	@ 0x3c
 802220a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802220e:	bf00      	nop
 8022210:	24013b52 	.word	0x24013b52
 8022214:	24013b58 	.word	0x24013b58

08022218 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h>:
 8022218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802221c:	b093      	sub	sp, #76	@ 0x4c
 802221e:	460d      	mov	r5, r1
 8022220:	4616      	mov	r6, r2
 8022222:	f89d b070 	ldrb.w	fp, [sp, #112]	@ 0x70
 8022226:	9000      	str	r0, [sp, #0]
 8022228:	f1bb 0f00 	cmp.w	fp, #0
 802222c:	f000 82ac 	beq.w	8022788 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x570>
 8022230:	6810      	ldr	r0, [r2, #0]
 8022232:	ac0e      	add	r4, sp, #56	@ 0x38
 8022234:	6851      	ldr	r1, [r2, #4]
 8022236:	c403      	stmia	r4!, {r0, r1}
 8022238:	6818      	ldr	r0, [r3, #0]
 802223a:	ac10      	add	r4, sp, #64	@ 0x40
 802223c:	6859      	ldr	r1, [r3, #4]
 802223e:	c403      	stmia	r4!, {r0, r1}
 8022240:	a80e      	add	r0, sp, #56	@ 0x38
 8022242:	f7f9 fc15 	bl	801ba70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022246:	4631      	mov	r1, r6
 8022248:	a810      	add	r0, sp, #64	@ 0x40
 802224a:	f7f9 fc39 	bl	801bac0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802224e:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 8022252:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8022256:	bfdb      	ittet	le
 8022258:	b293      	uxthle	r3, r2
 802225a:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 802225e:	2301      	movgt	r3, #1
 8022260:	fb91 f3f3 	sdivle	r3, r1, r3
 8022264:	9301      	str	r3, [sp, #4]
 8022266:	f105 0308 	add.w	r3, r5, #8
 802226a:	9901      	ldr	r1, [sp, #4]
 802226c:	9305      	str	r3, [sp, #20]
 802226e:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 8022272:	440b      	add	r3, r1
 8022274:	3b01      	subs	r3, #1
 8022276:	fb93 f3f1 	sdiv	r3, r3, r1
 802227a:	3b01      	subs	r3, #1
 802227c:	9905      	ldr	r1, [sp, #20]
 802227e:	b29b      	uxth	r3, r3
 8022280:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8022284:	9901      	ldr	r1, [sp, #4]
 8022286:	9306      	str	r3, [sp, #24]
 8022288:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 802228c:	fb93 f0f1 	sdiv	r0, r3, r1
 8022290:	b284      	uxth	r4, r0
 8022292:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8022296:	9403      	str	r4, [sp, #12]
 8022298:	9d03      	ldr	r5, [sp, #12]
 802229a:	9c01      	ldr	r4, [sp, #4]
 802229c:	fb05 3714 	mls	r7, r5, r4, r3
 80222a0:	fb17 f702 	smulbb	r7, r7, r2
 80222a4:	440f      	add	r7, r1
 80222a6:	b2bf      	uxth	r7, r7
 80222a8:	2d00      	cmp	r5, #0
 80222aa:	d06b      	beq.n	8022384 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x16c>
 80222ac:	1e6a      	subs	r2, r5, #1
 80222ae:	9805      	ldr	r0, [sp, #20]
 80222b0:	f850 9022 	ldr.w	r9, [r0, r2, lsl #2]
 80222b4:	9a06      	ldr	r2, [sp, #24]
 80222b6:	fa99 f989 	rev.w	r9, r9
 80222ba:	4491      	add	r9, r2
 80222bc:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 80222c0:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 80222c4:	4411      	add	r1, r2
 80222c6:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 80222ca:	f8df a35c 	ldr.w	sl, [pc, #860]	@ 8022628 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x410>
 80222ce:	4413      	add	r3, r2
 80222d0:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 80222d4:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 80222d8:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 80222dc:	9302      	str	r3, [sp, #8]
 80222de:	4bd0      	ldr	r3, [pc, #832]	@ (8022620 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x408>)
 80222e0:	6818      	ldr	r0, [r3, #0]
 80222e2:	6803      	ldr	r3, [r0, #0]
 80222e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80222e6:	4798      	blx	r3
 80222e8:	4bce      	ldr	r3, [pc, #824]	@ (8022624 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x40c>)
 80222ea:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 80222ee:	881b      	ldrh	r3, [r3, #0]
 80222f0:	f9bd 4042 	ldrsh.w	r4, [sp, #66]	@ 0x42
 80222f4:	fb03 2404 	mla	r4, r3, r4, r2
 80222f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80222fc:	436b      	muls	r3, r5
 80222fe:	2500      	movs	r5, #0
 8022300:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022304:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022308:	4629      	mov	r1, r5
 802230a:	4404      	add	r4, r0
 802230c:	18e3      	adds	r3, r4, r3
 802230e:	930d      	str	r3, [sp, #52]	@ 0x34
 8022310:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 8022314:	fb97 f3f3 	sdiv	r3, r7, r3
 8022318:	9304      	str	r3, [sp, #16]
 802231a:	9b00      	ldr	r3, [sp, #0]
 802231c:	3304      	adds	r3, #4
 802231e:	4618      	mov	r0, r3
 8022320:	9309      	str	r3, [sp, #36]	@ 0x24
 8022322:	f008 f951 	bl	802a5c8 <memset>
 8022326:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022328:	42a3      	cmp	r3, r4
 802232a:	f240 8228 	bls.w	802277e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x566>
 802232e:	2003      	movs	r0, #3
 8022330:	2607      	movs	r6, #7
 8022332:	2f00      	cmp	r7, #0
 8022334:	f000 80cb 	beq.w	80224ce <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2b6>
 8022338:	f899 3000 	ldrb.w	r3, [r9]
 802233c:	b2db      	uxtb	r3, r3
 802233e:	2bfe      	cmp	r3, #254	@ 0xfe
 8022340:	d123      	bne.n	802238a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x172>
 8022342:	f899 3001 	ldrb.w	r3, [r9, #1]
 8022346:	3f01      	subs	r7, #1
 8022348:	f899 2002 	ldrb.w	r2, [r9, #2]
 802234c:	f109 0804 	add.w	r8, r9, #4
 8022350:	b2db      	uxtb	r3, r3
 8022352:	f899 1003 	ldrb.w	r1, [r9, #3]
 8022356:	b2d2      	uxtb	r2, r2
 8022358:	f363 0507 	bfi	r5, r3, #0, #8
 802235c:	b2c9      	uxtb	r1, r1
 802235e:	b2bf      	uxth	r7, r7
 8022360:	f362 250f 	bfi	r5, r2, #8, #8
 8022364:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8022368:	fb10 2201 	smlabb	r2, r0, r1, r2
 802236c:	f361 4517 	bfi	r5, r1, #16, #8
 8022370:	fb16 2303 	smlabb	r3, r6, r3, r2
 8022374:	9a00      	ldr	r2, [sp, #0]
 8022376:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 802237a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802237e:	605d      	str	r5, [r3, #4]
 8022380:	46c1      	mov	r9, r8
 8022382:	e7d6      	b.n	8022332 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x11a>
 8022384:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8022388:	e798      	b.n	80222bc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0xa4>
 802238a:	119a      	asrs	r2, r3, #6
 802238c:	f109 0801 	add.w	r8, r9, #1
 8022390:	d108      	bne.n	80223a4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x18c>
 8022392:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8022396:	9a00      	ldr	r2, [sp, #0]
 8022398:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802239c:	685d      	ldr	r5, [r3, #4]
 802239e:	3f01      	subs	r7, #1
 80223a0:	b2bf      	uxth	r7, r7
 80223a2:	e7ed      	b.n	8022380 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x168>
 80223a4:	2a01      	cmp	r2, #1
 80223a6:	d125      	bne.n	80223f4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x1dc>
 80223a8:	f003 0103 	and.w	r1, r3, #3
 80223ac:	1eaa      	subs	r2, r5, #2
 80223ae:	440a      	add	r2, r1
 80223b0:	f3c3 0181 	ubfx	r1, r3, #2, #2
 80223b4:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80223b8:	b2d2      	uxtb	r2, r2
 80223ba:	3902      	subs	r1, #2
 80223bc:	3b02      	subs	r3, #2
 80223be:	f362 0507 	bfi	r5, r2, #0, #8
 80223c2:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80223c6:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80223ca:	f361 250f 	bfi	r5, r1, #8, #8
 80223ce:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80223d2:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 80223d6:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 80223da:	fb10 1103 	smlabb	r1, r0, r3, r1
 80223de:	f363 4517 	bfi	r5, r3, #16, #8
 80223e2:	9b00      	ldr	r3, [sp, #0]
 80223e4:	fb16 1202 	smlabb	r2, r6, r2, r1
 80223e8:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80223ec:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80223f0:	6055      	str	r5, [r2, #4]
 80223f2:	e7d4      	b.n	802239e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 80223f4:	2a02      	cmp	r2, #2
 80223f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80223fa:	d12c      	bne.n	8022456 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x23e>
 80223fc:	f899 2001 	ldrb.w	r2, [r9, #1]
 8022400:	f1a3 0c20 	sub.w	ip, r3, #32
 8022404:	f109 0802 	add.w	r8, r9, #2
 8022408:	b2d2      	uxtb	r2, r2
 802240a:	f002 010f 	and.w	r1, r2, #15
 802240e:	1112      	asrs	r2, r2, #4
 8022410:	3908      	subs	r1, #8
 8022412:	3a08      	subs	r2, #8
 8022414:	4461      	add	r1, ip
 8022416:	4494      	add	ip, r2
 8022418:	4429      	add	r1, r5
 802241a:	b2c9      	uxtb	r1, r1
 802241c:	f361 0507 	bfi	r5, r1, #0, #8
 8022420:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8022424:	f1ae 0e20 	sub.w	lr, lr, #32
 8022428:	4473      	add	r3, lr
 802242a:	b2db      	uxtb	r3, r3
 802242c:	f363 250f 	bfi	r5, r3, #8, #8
 8022430:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8022434:	eb0c 4c15 	add.w	ip, ip, r5, lsr #16
 8022438:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 802243c:	fb10 330c 	smlabb	r3, r0, ip, r3
 8022440:	f36c 4517 	bfi	r5, ip, #16, #8
 8022444:	fb16 3101 	smlabb	r1, r6, r1, r3
 8022448:	9b00      	ldr	r3, [sp, #0]
 802244a:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 802244e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8022452:	604d      	str	r5, [r1, #4]
 8022454:	e7a3      	b.n	802239e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 8022456:	3301      	adds	r3, #1
 8022458:	42bb      	cmp	r3, r7
 802245a:	dd23      	ble.n	80224a4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x28c>
 802245c:	eba3 0907 	sub.w	r9, r3, r7
 8022460:	f1b9 0f00 	cmp.w	r9, #0
 8022464:	dc20      	bgt.n	80224a8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x290>
 8022466:	9e02      	ldr	r6, [sp, #8]
 8022468:	2700      	movs	r7, #0
 802246a:	2e00      	cmp	r6, #0
 802246c:	f340 8142 	ble.w	80226f4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4dc>
 8022470:	f108 0301 	add.w	r3, r8, #1
 8022474:	9307      	str	r3, [sp, #28]
 8022476:	f898 3000 	ldrb.w	r3, [r8]
 802247a:	b2db      	uxtb	r3, r3
 802247c:	119a      	asrs	r2, r3, #6
 802247e:	d12a      	bne.n	80224d6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2be>
 8022480:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8022484:	9a00      	ldr	r2, [sp, #0]
 8022486:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 802248a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802248e:	685d      	ldr	r5, [r3, #4]
 8022490:	f040 811f 	bne.w	80226d2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 8022494:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8022498:	7025      	strb	r5, [r4, #0]
 802249a:	7063      	strb	r3, [r4, #1]
 802249c:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80224a0:	70a3      	strb	r3, [r4, #2]
 80224a2:	e04e      	b.n	8022542 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 80224a4:	1aff      	subs	r7, r7, r3
 80224a6:	e77b      	b.n	80223a0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x188>
 80224a8:	9b02      	ldr	r3, [sp, #8]
 80224aa:	4620      	mov	r0, r4
 80224ac:	462a      	mov	r2, r5
 80224ae:	454b      	cmp	r3, r9
 80224b0:	bfa8      	it	ge
 80224b2:	464b      	movge	r3, r9
 80224b4:	461f      	mov	r7, r3
 80224b6:	9b02      	ldr	r3, [sp, #8]
 80224b8:	4639      	mov	r1, r7
 80224ba:	1bde      	subs	r6, r3, r7
 80224bc:	eba9 0907 	sub.w	r9, r9, r7
 80224c0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80224c4:	465b      	mov	r3, fp
 80224c6:	f7f3 fa6f 	bl	80159a8 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 80224ca:	443c      	add	r4, r7
 80224cc:	e7cc      	b.n	8022468 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 80224ce:	46c8      	mov	r8, r9
 80224d0:	9e02      	ldr	r6, [sp, #8]
 80224d2:	46b9      	mov	r9, r7
 80224d4:	e7c8      	b.n	8022468 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 80224d6:	2a01      	cmp	r2, #1
 80224d8:	d136      	bne.n	8022548 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x330>
 80224da:	f003 0103 	and.w	r1, r3, #3
 80224de:	1ea8      	subs	r0, r5, #2
 80224e0:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 80224e4:	4408      	add	r0, r1
 80224e6:	f3c3 0181 	ubfx	r1, r3, #2, #2
 80224ea:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80224ee:	b2c0      	uxtb	r0, r0
 80224f0:	f1a1 0102 	sub.w	r1, r1, #2
 80224f4:	f1a3 0302 	sub.w	r3, r3, #2
 80224f8:	f360 0507 	bfi	r5, r0, #0, #8
 80224fc:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8022500:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8022504:	f361 250f 	bfi	r5, r1, #8, #8
 8022508:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 802250c:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 8022510:	f003 08ff 	and.w	r8, r3, #255	@ 0xff
 8022514:	f04f 0303 	mov.w	r3, #3
 8022518:	fb13 ce08 	smlabb	lr, r3, r8, ip
 802251c:	f04f 0c07 	mov.w	ip, #7
 8022520:	9b00      	ldr	r3, [sp, #0]
 8022522:	f368 4517 	bfi	r5, r8, #16, #8
 8022526:	fb1c ec00 	smlabb	ip, ip, r0, lr
 802252a:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
 802252e:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8022532:	f8cc 5004 	str.w	r5, [ip, #4]
 8022536:	f040 80cd 	bne.w	80226d4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 802253a:	7020      	strb	r0, [r4, #0]
 802253c:	7061      	strb	r1, [r4, #1]
 802253e:	f884 8002 	strb.w	r8, [r4, #2]
 8022542:	3e01      	subs	r6, #1
 8022544:	3403      	adds	r4, #3
 8022546:	e0c1      	b.n	80226cc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 8022548:	2a02      	cmp	r2, #2
 802254a:	d13d      	bne.n	80225c8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x3b0>
 802254c:	f898 1001 	ldrb.w	r1, [r8, #1]
 8022550:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8022554:	f108 0202 	add.w	r2, r8, #2
 8022558:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 802255c:	b2c9      	uxtb	r1, r1
 802255e:	f1a3 0c20 	sub.w	ip, r3, #32
 8022562:	9207      	str	r2, [sp, #28]
 8022564:	f001 000f 	and.w	r0, r1, #15
 8022568:	f1a0 0008 	sub.w	r0, r0, #8
 802256c:	4460      	add	r0, ip
 802256e:	4428      	add	r0, r5
 8022570:	b2c0      	uxtb	r0, r0
 8022572:	f360 0507 	bfi	r5, r0, #0, #8
 8022576:	f3c5 2207 	ubfx	r2, r5, #8, #8
 802257a:	f1a2 0220 	sub.w	r2, r2, #32
 802257e:	4413      	add	r3, r2
 8022580:	ea4f 1221 	mov.w	r2, r1, asr #4
 8022584:	b2db      	uxtb	r3, r3
 8022586:	f1a2 0208 	sub.w	r2, r2, #8
 802258a:	f363 250f 	bfi	r5, r3, #8, #8
 802258e:	4462      	add	r2, ip
 8022590:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8022594:	f04f 0c03 	mov.w	ip, #3
 8022598:	eb02 4215 	add.w	r2, r2, r5, lsr #16
 802259c:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 80225a0:	fb1c 1c02 	smlabb	ip, ip, r2, r1
 80225a4:	f04f 0107 	mov.w	r1, #7
 80225a8:	f362 4517 	bfi	r5, r2, #16, #8
 80225ac:	fb11 c100 	smlabb	r1, r1, r0, ip
 80225b0:	f001 0c3f 	and.w	ip, r1, #63	@ 0x3f
 80225b4:	9900      	ldr	r1, [sp, #0]
 80225b6:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 80225ba:	604d      	str	r5, [r1, #4]
 80225bc:	f040 8089 	bne.w	80226d2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 80225c0:	7020      	strb	r0, [r4, #0]
 80225c2:	7063      	strb	r3, [r4, #1]
 80225c4:	70a2      	strb	r2, [r4, #2]
 80225c6:	e7bc      	b.n	8022542 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 80225c8:	2bfe      	cmp	r3, #254	@ 0xfe
 80225ca:	d12f      	bne.n	802262c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x414>
 80225cc:	f898 0001 	ldrb.w	r0, [r8, #1]
 80225d0:	f108 0304 	add.w	r3, r8, #4
 80225d4:	f898 2002 	ldrb.w	r2, [r8, #2]
 80225d8:	f04f 0c03 	mov.w	ip, #3
 80225dc:	f898 1003 	ldrb.w	r1, [r8, #3]
 80225e0:	b2c0      	uxtb	r0, r0
 80225e2:	b2d2      	uxtb	r2, r2
 80225e4:	9307      	str	r3, [sp, #28]
 80225e6:	b2c9      	uxtb	r1, r1
 80225e8:	f360 0507 	bfi	r5, r0, #0, #8
 80225ec:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 80225f0:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 80225f4:	f362 250f 	bfi	r5, r2, #8, #8
 80225f8:	fb1c 3c01 	smlabb	ip, ip, r1, r3
 80225fc:	f04f 0307 	mov.w	r3, #7
 8022600:	f361 4517 	bfi	r5, r1, #16, #8
 8022604:	fb13 c300 	smlabb	r3, r3, r0, ip
 8022608:	f003 0c3f 	and.w	ip, r3, #63	@ 0x3f
 802260c:	9b00      	ldr	r3, [sp, #0]
 802260e:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 8022612:	605d      	str	r5, [r3, #4]
 8022614:	d15d      	bne.n	80226d2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 8022616:	7020      	strb	r0, [r4, #0]
 8022618:	7062      	strb	r2, [r4, #1]
 802261a:	70a1      	strb	r1, [r4, #2]
 802261c:	e791      	b.n	8022542 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 802261e:	bf00      	nop
 8022620:	24013b58 	.word	0x24013b58
 8022624:	24013b52 	.word	0x24013b52
 8022628:	240000e0 	.word	0x240000e0
 802262c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8022630:	1c5a      	adds	r2, r3, #1
 8022632:	b94b      	cbnz	r3, 8022648 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x430>
 8022634:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8022638:	d14c      	bne.n	80226d4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 802263a:	f3c5 2207 	ubfx	r2, r5, #8, #8
 802263e:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8022642:	7025      	strb	r5, [r4, #0]
 8022644:	7062      	strb	r2, [r4, #1]
 8022646:	e72b      	b.n	80224a0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x288>
 8022648:	4296      	cmp	r6, r2
 802264a:	46b0      	mov	r8, r6
 802264c:	bfa8      	it	ge
 802264e:	4690      	movge	r8, r2
 8022650:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8022654:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8022658:	eba6 0608 	sub.w	r6, r6, r8
 802265c:	eba2 0908 	sub.w	r9, r2, r8
 8022660:	9308      	str	r3, [sp, #32]
 8022662:	b2eb      	uxtb	r3, r5
 8022664:	930c      	str	r3, [sp, #48]	@ 0x30
 8022666:	f3c5 2307 	ubfx	r3, r5, #8, #8
 802266a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802266c:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8022670:	930a      	str	r3, [sp, #40]	@ 0x28
 8022672:	9b08      	ldr	r3, [sp, #32]
 8022674:	d030      	beq.n	80226d8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c0>
 8022676:	18fb      	adds	r3, r7, r3
 8022678:	2bc0      	cmp	r3, #192	@ 0xc0
 802267a:	dd15      	ble.n	80226a8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x490>
 802267c:	4650      	mov	r0, sl
 802267e:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 8022682:	f7f3 f953 	bl	801592c <_ZN8touchgfx5paint9flushLineEPmi>
 8022686:	2203      	movs	r2, #3
 8022688:	4651      	mov	r1, sl
 802268a:	465b      	mov	r3, fp
 802268c:	4620      	mov	r0, r4
 802268e:	443c      	add	r4, r7
 8022690:	fb97 f2f2 	sdiv	r2, r7, r2
 8022694:	f7f3 f9dc 	bl	8015a50 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 8022698:	4b3d      	ldr	r3, [pc, #244]	@ (8022790 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>)
 802269a:	2700      	movs	r7, #0
 802269c:	459a      	cmp	sl, r3
 802269e:	bf0c      	ite	eq
 80226a0:	f8df a0f8 	ldreq.w	sl, [pc, #248]	@ 802279c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x584>
 80226a4:	f8df a0e8 	ldrne.w	sl, [pc, #232]	@ 8022790 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>
 80226a8:	eb0a 0307 	add.w	r3, sl, r7
 80226ac:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80226ae:	f1b8 0801 	subs.w	r8, r8, #1
 80226b2:	f103 0303 	add.w	r3, r3, #3
 80226b6:	f803 2c03 	strb.w	r2, [r3, #-3]
 80226ba:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80226bc:	f803 2c02 	strb.w	r2, [r3, #-2]
 80226c0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80226c2:	f803 2c01 	strb.w	r2, [r3, #-1]
 80226c6:	d1f1      	bne.n	80226ac <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x494>
 80226c8:	9b08      	ldr	r3, [sp, #32]
 80226ca:	441f      	add	r7, r3
 80226cc:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80226d0:	e6cb      	b.n	802246a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x252>
 80226d2:	2201      	movs	r2, #1
 80226d4:	4690      	mov	r8, r2
 80226d6:	e7bb      	b.n	8022650 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x438>
 80226d8:	4423      	add	r3, r4
 80226da:	42a3      	cmp	r3, r4
 80226dc:	d9f6      	bls.n	80226cc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 80226de:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80226e0:	3403      	adds	r4, #3
 80226e2:	f804 2c03 	strb.w	r2, [r4, #-3]
 80226e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80226e8:	f804 2c02 	strb.w	r2, [r4, #-2]
 80226ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80226ee:	f804 2c01 	strb.w	r2, [r4, #-1]
 80226f2:	e7f2      	b.n	80226da <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c2>
 80226f4:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 80226f8:	d00e      	beq.n	8022718 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 80226fa:	b16f      	cbz	r7, 8022718 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 80226fc:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 8022700:	4650      	mov	r0, sl
 8022702:	f7f3 f913 	bl	801592c <_ZN8touchgfx5paint9flushLineEPmi>
 8022706:	2203      	movs	r2, #3
 8022708:	4620      	mov	r0, r4
 802270a:	443c      	add	r4, r7
 802270c:	465b      	mov	r3, fp
 802270e:	4651      	mov	r1, sl
 8022710:	fb97 f2f2 	sdiv	r2, r7, r2
 8022714:	f7f3 f99c 	bl	8015a50 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 8022718:	4b1e      	ldr	r3, [pc, #120]	@ (8022794 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x57c>)
 802271a:	9a02      	ldr	r2, [sp, #8]
 802271c:	881b      	ldrh	r3, [r3, #0]
 802271e:	1a9b      	subs	r3, r3, r2
 8022720:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022724:	441c      	add	r4, r3
 8022726:	9b04      	ldr	r3, [sp, #16]
 8022728:	3301      	adds	r3, #1
 802272a:	9304      	str	r3, [sp, #16]
 802272c:	9a04      	ldr	r2, [sp, #16]
 802272e:	9b01      	ldr	r3, [sp, #4]
 8022730:	4293      	cmp	r3, r2
 8022732:	d11c      	bne.n	802276e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x556>
 8022734:	9b03      	ldr	r3, [sp, #12]
 8022736:	2500      	movs	r5, #0
 8022738:	9a03      	ldr	r2, [sp, #12]
 802273a:	1c5e      	adds	r6, r3, #1
 802273c:	9b05      	ldr	r3, [sp, #20]
 802273e:	f8bd 7040 	ldrh.w	r7, [sp, #64]	@ 0x40
 8022742:	4629      	mov	r1, r5
 8022744:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 8022748:	f44f 7280 	mov.w	r2, #256	@ 0x100
 802274c:	9b06      	ldr	r3, [sp, #24]
 802274e:	fa98 f888 	rev.w	r8, r8
 8022752:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022754:	4498      	add	r8, r3
 8022756:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 802275a:	1aff      	subs	r7, r7, r3
 802275c:	f007 ff34 	bl	802a5c8 <memset>
 8022760:	b2bf      	uxth	r7, r7
 8022762:	e9cd 6503 	strd	r6, r5, [sp, #12]
 8022766:	f7f3 f8c9 	bl	80158fc <_ZN8touchgfx5paint8tearDownEv>
 802276a:	46c1      	mov	r9, r8
 802276c:	e5db      	b.n	8022326 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x10e>
 802276e:	f8bd 703c 	ldrh.w	r7, [sp, #60]	@ 0x3c
 8022772:	9b02      	ldr	r3, [sp, #8]
 8022774:	1aff      	subs	r7, r7, r3
 8022776:	eba7 0709 	sub.w	r7, r7, r9
 802277a:	b2bf      	uxth	r7, r7
 802277c:	e7f3      	b.n	8022766 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x54e>
 802277e:	4b06      	ldr	r3, [pc, #24]	@ (8022798 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x580>)
 8022780:	6818      	ldr	r0, [r3, #0]
 8022782:	6803      	ldr	r3, [r0, #0]
 8022784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022786:	4798      	blx	r3
 8022788:	b013      	add	sp, #76	@ 0x4c
 802278a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802278e:	bf00      	nop
 8022790:	240000e0 	.word	0x240000e0
 8022794:	24013b52 	.word	0x24013b52
 8022798:	24013b58 	.word	0x24013b58
 802279c:	240001e0 	.word	0x240001e0

080227a0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 80227a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80227a4:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80227a8:	9c06      	ldr	r4, [sp, #24]
 80227aa:	2800      	cmp	r0, #0
 80227ac:	d06e      	beq.n	802288c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80227ae:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 80227b2:	2d00      	cmp	r5, #0
 80227b4:	dd6a      	ble.n	802288c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80227b6:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 80227ba:	f1bc 0f00 	cmp.w	ip, #0
 80227be:	dd65      	ble.n	802288c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80227c0:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 80227c4:	28ff      	cmp	r0, #255	@ 0xff
 80227c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80227ca:	f3c4 2707 	ubfx	r7, r4, #8, #8
 80227ce:	fb02 3306 	mla	r3, r2, r6, r3
 80227d2:	f3c4 4607 	ubfx	r6, r4, #16, #8
 80227d6:	b2e4      	uxtb	r4, r4
 80227d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80227dc:	4419      	add	r1, r3
 80227de:	fb02 f30c 	mul.w	r3, r2, ip
 80227e2:	eba2 0205 	sub.w	r2, r2, r5
 80227e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80227ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80227ee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80227f2:	440b      	add	r3, r1
 80227f4:	d03e      	beq.n	8022874 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 80227f6:	fa1f fc80 	uxth.w	ip, r0
 80227fa:	f1c0 00ff 	rsb	r0, r0, #255	@ 0xff
 80227fe:	fb06 f60c 	mul.w	r6, r6, ip
 8022802:	b280      	uxth	r0, r0
 8022804:	fb07 f70c 	mul.w	r7, r7, ip
 8022808:	fb04 f40c 	mul.w	r4, r4, ip
 802280c:	4299      	cmp	r1, r3
 802280e:	d23d      	bcs.n	802288c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8022810:	eb01 0c05 	add.w	ip, r1, r5
 8022814:	458c      	cmp	ip, r1
 8022816:	f101 0e03 	add.w	lr, r1, #3
 802281a:	d928      	bls.n	802286e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 802281c:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8022820:	fb11 f100 	smulbb	r1, r1, r0
 8022824:	4421      	add	r1, r4
 8022826:	b289      	uxth	r1, r1
 8022828:	f101 0801 	add.w	r8, r1, #1
 802282c:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8022830:	1209      	asrs	r1, r1, #8
 8022832:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8022836:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 802283a:	fb11 f100 	smulbb	r1, r1, r0
 802283e:	4439      	add	r1, r7
 8022840:	b289      	uxth	r1, r1
 8022842:	f101 0801 	add.w	r8, r1, #1
 8022846:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 802284a:	1209      	asrs	r1, r1, #8
 802284c:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8022850:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8022854:	fb11 f100 	smulbb	r1, r1, r0
 8022858:	4431      	add	r1, r6
 802285a:	b289      	uxth	r1, r1
 802285c:	f101 0801 	add.w	r8, r1, #1
 8022860:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8022864:	1209      	asrs	r1, r1, #8
 8022866:	f80e 1c01 	strb.w	r1, [lr, #-1]
 802286a:	4671      	mov	r1, lr
 802286c:	e7d2      	b.n	8022814 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 802286e:	4411      	add	r1, r2
 8022870:	e7cc      	b.n	802280c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 8022872:	4411      	add	r1, r2
 8022874:	4299      	cmp	r1, r3
 8022876:	d209      	bcs.n	802288c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8022878:	1948      	adds	r0, r1, r5
 802287a:	4281      	cmp	r1, r0
 802287c:	d2f9      	bcs.n	8022872 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 802287e:	700c      	strb	r4, [r1, #0]
 8022880:	3103      	adds	r1, #3
 8022882:	f801 7c02 	strb.w	r7, [r1, #-2]
 8022886:	f801 6c01 	strb.w	r6, [r1, #-1]
 802288a:	e7f6      	b.n	802287a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 802288c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08022890 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8022890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022894:	b093      	sub	sp, #76	@ 0x4c
 8022896:	4699      	mov	r9, r3
 8022898:	4617      	mov	r7, r2
 802289a:	f9b3 2000 	ldrsh.w	r2, [r3]
 802289e:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	@ 0x74
 80228a2:	4604      	mov	r4, r0
 80228a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80228a8:	a80c      	add	r0, sp, #48	@ 0x30
 80228aa:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	@ 0x78
 80228ae:	460d      	mov	r5, r1
 80228b0:	4649      	mov	r1, r9
 80228b2:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 80228b6:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80228ba:	f8ad 8034 	strh.w	r8, [sp, #52]	@ 0x34
 80228be:	f8ad 6036 	strh.w	r6, [sp, #54]	@ 0x36
 80228c2:	f7f4 fef9 	bl	80176b8 <_ZN8touchgfx4RectaNERKS0_>
 80228c6:	4639      	mov	r1, r7
 80228c8:	a80c      	add	r0, sp, #48	@ 0x30
 80228ca:	f7f4 fef5 	bl	80176b8 <_ZN8touchgfx4RectaNERKS0_>
 80228ce:	4b78      	ldr	r3, [pc, #480]	@ (8022ab0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 80228d0:	8818      	ldrh	r0, [r3, #0]
 80228d2:	4b78      	ldr	r3, [pc, #480]	@ (8022ab4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 80228d4:	b202      	sxth	r2, r0
 80228d6:	8819      	ldrh	r1, [r3, #0]
 80228d8:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 80228dc:	b20f      	sxth	r7, r1
 80228de:	2b00      	cmp	r3, #0
 80228e0:	da07      	bge.n	80228f2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 80228e2:	f8bd c034 	ldrh.w	ip, [sp, #52]	@ 0x34
 80228e6:	4463      	add	r3, ip
 80228e8:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 80228ec:	2300      	movs	r3, #0
 80228ee:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 80228f2:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 80228f6:	f9bd c034 	ldrsh.w	ip, [sp, #52]	@ 0x34
 80228fa:	1ad2      	subs	r2, r2, r3
 80228fc:	4594      	cmp	ip, r2
 80228fe:	bfc4      	itt	gt
 8022900:	1ac2      	subgt	r2, r0, r3
 8022902:	f8ad 2034 	strhgt.w	r2, [sp, #52]	@ 0x34
 8022906:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 802290a:	2a00      	cmp	r2, #0
 802290c:	da07      	bge.n	802291e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 802290e:	f8bd c036 	ldrh.w	ip, [sp, #54]	@ 0x36
 8022912:	4462      	add	r2, ip
 8022914:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 8022918:	2200      	movs	r2, #0
 802291a:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 802291e:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8022922:	f9bd c036 	ldrsh.w	ip, [sp, #54]	@ 0x36
 8022926:	1abf      	subs	r7, r7, r2
 8022928:	45bc      	cmp	ip, r7
 802292a:	f8df c190 	ldr.w	ip, [pc, #400]	@ 8022abc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 802292e:	bfc8      	it	gt
 8022930:	1a8f      	subgt	r7, r1, r2
 8022932:	f89c c000 	ldrb.w	ip, [ip]
 8022936:	bfc8      	it	gt
 8022938:	f8ad 7036 	strhgt.w	r7, [sp, #54]	@ 0x36
 802293c:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 8022940:	f1bc 0f00 	cmp.w	ip, #0
 8022944:	d176      	bne.n	8022a34 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 8022946:	4287      	cmp	r7, r0
 8022948:	bf14      	ite	ne
 802294a:	2100      	movne	r1, #0
 802294c:	2101      	moveq	r1, #1
 802294e:	2f00      	cmp	r7, #0
 8022950:	9107      	str	r1, [sp, #28]
 8022952:	dd73      	ble.n	8022a3c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8022954:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	@ 0x36
 8022958:	2900      	cmp	r1, #0
 802295a:	9104      	str	r1, [sp, #16]
 802295c:	dd6e      	ble.n	8022a3c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 802295e:	f8b9 1000 	ldrh.w	r1, [r9]
 8022962:	a80e      	add	r0, sp, #56	@ 0x38
 8022964:	f8ad 8044 	strh.w	r8, [sp, #68]	@ 0x44
 8022968:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 802296c:	1a5b      	subs	r3, r3, r1
 802296e:	a910      	add	r1, sp, #64	@ 0x40
 8022970:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 8022974:	b21b      	sxth	r3, r3
 8022976:	f8ad 703c 	strh.w	r7, [sp, #60]	@ 0x3c
 802297a:	f8df a144 	ldr.w	sl, [pc, #324]	@ 8022ac0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 802297e:	9305      	str	r3, [sp, #20]
 8022980:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8022984:	1ad2      	subs	r2, r2, r3
 8022986:	b213      	sxth	r3, r2
 8022988:	9306      	str	r3, [sp, #24]
 802298a:	9b05      	ldr	r3, [sp, #20]
 802298c:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8022990:	9b06      	ldr	r3, [sp, #24]
 8022992:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8022996:	9b04      	ldr	r3, [sp, #16]
 8022998:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 802299c:	2300      	movs	r3, #0
 802299e:	9310      	str	r3, [sp, #64]	@ 0x40
 80229a0:	f7f9 f88e 	bl	801bac0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80229a4:	4640      	mov	r0, r8
 80229a6:	f7f9 f863 	bl	801ba70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80229aa:	a810      	add	r0, sp, #64	@ 0x40
 80229ac:	f7f9 f860 	bl	801ba70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80229b0:	4b41      	ldr	r3, [pc, #260]	@ (8022ab8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 80229b2:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 80229b6:	4628      	mov	r0, r5
 80229b8:	881b      	ldrh	r3, [r3, #0]
 80229ba:	9308      	str	r3, [sp, #32]
 80229bc:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 80229c0:	b21b      	sxth	r3, r3
 80229c2:	9303      	str	r3, [sp, #12]
 80229c4:	682b      	ldr	r3, [r5, #0]
 80229c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80229c8:	4798      	blx	r3
 80229ca:	9a03      	ldr	r2, [sp, #12]
 80229cc:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 80229d0:	4681      	mov	r9, r0
 80229d2:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 80229d6:	fb13 f302 	smulbb	r3, r3, r2
 80229da:	2203      	movs	r2, #3
 80229dc:	f8da 0000 	ldr.w	r0, [sl]
 80229e0:	fb15 3302 	smlabb	r3, r5, r2, r3
 80229e4:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 80229e6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80229e8:	441d      	add	r5, r3
 80229ea:	6803      	ldr	r3, [r0, #0]
 80229ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80229ee:	4798      	blx	r3
 80229f0:	9009      	str	r0, [sp, #36]	@ 0x24
 80229f2:	f8da 0000 	ldr.w	r0, [sl]
 80229f6:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 80229fa:	6803      	ldr	r3, [r0, #0]
 80229fc:	910a      	str	r1, [sp, #40]	@ 0x28
 80229fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022a00:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	@ 0x32
 8022a04:	4798      	blx	r3
 8022a06:	f010 0f01 	tst.w	r0, #1
 8022a0a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 8022a0e:	d01e      	beq.n	8022a4e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 8022a10:	f8da 0000 	ldr.w	r0, [sl]
 8022a14:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 8022a18:	6803      	ldr	r3, [r0, #0]
 8022a1a:	9200      	str	r2, [sp, #0]
 8022a1c:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8022a1e:	462b      	mov	r3, r5
 8022a20:	e898 0006 	ldmia.w	r8, {r1, r2}
 8022a24:	47b0      	blx	r6
 8022a26:	9b05      	ldr	r3, [sp, #20]
 8022a28:	80a7      	strh	r7, [r4, #4]
 8022a2a:	8023      	strh	r3, [r4, #0]
 8022a2c:	9b06      	ldr	r3, [sp, #24]
 8022a2e:	8063      	strh	r3, [r4, #2]
 8022a30:	9b04      	ldr	r3, [sp, #16]
 8022a32:	e007      	b.n	8022a44 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 8022a34:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	@ 0x36
 8022a38:	4288      	cmp	r0, r1
 8022a3a:	e785      	b.n	8022948 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 8022a3c:	2300      	movs	r3, #0
 8022a3e:	8023      	strh	r3, [r4, #0]
 8022a40:	8063      	strh	r3, [r4, #2]
 8022a42:	80a3      	strh	r3, [r4, #4]
 8022a44:	4620      	mov	r0, r4
 8022a46:	80e3      	strh	r3, [r4, #6]
 8022a48:	b013      	add	sp, #76	@ 0x4c
 8022a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022a4e:	fb09 f606 	mul.w	r6, r9, r6
 8022a52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022a54:	fb11 6602 	smlabb	r6, r1, r2, r6
 8022a58:	9a07      	ldr	r2, [sp, #28]
 8022a5a:	4433      	add	r3, r6
 8022a5c:	461e      	mov	r6, r3
 8022a5e:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 8022a62:	b16a      	cbz	r2, 8022a80 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8022a64:	9a08      	ldr	r2, [sp, #32]
 8022a66:	4593      	cmp	fp, r2
 8022a68:	d10a      	bne.n	8022a80 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8022a6a:	f8da 0000 	ldr.w	r0, [sl]
 8022a6e:	fb09 f303 	mul.w	r3, r9, r3
 8022a72:	4629      	mov	r1, r5
 8022a74:	6802      	ldr	r2, [r0, #0]
 8022a76:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 8022a7a:	4632      	mov	r2, r6
 8022a7c:	47d0      	blx	sl
 8022a7e:	e7d2      	b.n	8022a26 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8022a80:	9a03      	ldr	r2, [sp, #12]
 8022a82:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 8022ac0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8022a86:	fb02 5803 	mla	r8, r2, r3, r5
 8022a8a:	4545      	cmp	r5, r8
 8022a8c:	d2cb      	bcs.n	8022a26 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8022a8e:	f8db 0000 	ldr.w	r0, [fp]
 8022a92:	4629      	mov	r1, r5
 8022a94:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 8022a98:	6802      	ldr	r2, [r0, #0]
 8022a9a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022a9e:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 8022aa2:	4632      	mov	r2, r6
 8022aa4:	47d0      	blx	sl
 8022aa6:	9b03      	ldr	r3, [sp, #12]
 8022aa8:	444e      	add	r6, r9
 8022aaa:	441d      	add	r5, r3
 8022aac:	e7ed      	b.n	8022a8a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 8022aae:	bf00      	nop
 8022ab0:	24013b4c 	.word	0x24013b4c
 8022ab4:	24013b4e 	.word	0x24013b4e
 8022ab8:	24013b52 	.word	0x24013b52
 8022abc:	24013b50 	.word	0x24013b50
 8022ac0:	24013b58 	.word	0x24013b58

08022ac4 <_ZN8touchgfx8LCD24bppC1Ev>:
 8022ac4:	2200      	movs	r2, #0
 8022ac6:	490e      	ldr	r1, [pc, #56]	@ (8022b00 <_ZN8touchgfx8LCD24bppC1Ev+0x3c>)
 8022ac8:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8022acc:	6001      	str	r1, [r0, #0]
 8022ace:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8022ad2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8022ad6:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8022ada:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 8022ade:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 8022ae2:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 8022ae6:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 8022aea:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 8022aee:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 8022af2:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 8022af6:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 8022afa:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 8022afe:	4770      	bx	lr
 8022b00:	0802d1c0 	.word	0x0802d1c0

08022b04 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8022b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b08:	b091      	sub	sp, #68	@ 0x44
 8022b0a:	4607      	mov	r7, r0
 8022b0c:	4688      	mov	r8, r1
 8022b0e:	6810      	ldr	r0, [r2, #0]
 8022b10:	6851      	ldr	r1, [r2, #4]
 8022b12:	ac0c      	add	r4, sp, #48	@ 0x30
 8022b14:	4616      	mov	r6, r2
 8022b16:	f89d 9068 	ldrb.w	r9, [sp, #104]	@ 0x68
 8022b1a:	4d64      	ldr	r5, [pc, #400]	@ (8022cac <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8022b1c:	f8df a190 	ldr.w	sl, [pc, #400]	@ 8022cb0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8022b20:	c403      	stmia	r4!, {r0, r1}
 8022b22:	6818      	ldr	r0, [r3, #0]
 8022b24:	ac0e      	add	r4, sp, #56	@ 0x38
 8022b26:	6859      	ldr	r1, [r3, #4]
 8022b28:	c403      	stmia	r4!, {r0, r1}
 8022b2a:	a80c      	add	r0, sp, #48	@ 0x30
 8022b2c:	f7f8 ffa0 	bl	801ba70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022b30:	4631      	mov	r1, r6
 8022b32:	a80e      	add	r0, sp, #56	@ 0x38
 8022b34:	f7f8 ffc4 	bl	801bac0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022b38:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8022b3c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8022b40:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8022b44:	6828      	ldr	r0, [r5, #0]
 8022b46:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022b4a:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	@ 0x3c
 8022b4e:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	@ 0x3e
 8022b52:	440f      	add	r7, r1
 8022b54:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8022b58:	440a      	add	r2, r1
 8022b5a:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8022b5e:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8022b62:	4413      	add	r3, r2
 8022b64:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8022b68:	6803      	ldr	r3, [r0, #0]
 8022b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022b6c:	4798      	blx	r3
 8022b6e:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8022b72:	6828      	ldr	r0, [r5, #0]
 8022b74:	d01f      	beq.n	8022bb6 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 8022b76:	2201      	movs	r2, #1
 8022b78:	2500      	movs	r5, #0
 8022b7a:	6801      	ldr	r1, [r0, #0]
 8022b7c:	b2a4      	uxth	r4, r4
 8022b7e:	b2b6      	uxth	r6, r6
 8022b80:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8022b84:	e9cd 2508 	strd	r2, r5, [sp, #32]
 8022b88:	250b      	movs	r5, #11
 8022b8a:	9507      	str	r5, [sp, #28]
 8022b8c:	f8ba 5000 	ldrh.w	r5, [sl]
 8022b90:	f8cd 9010 	str.w	r9, [sp, #16]
 8022b94:	9602      	str	r6, [sp, #8]
 8022b96:	9401      	str	r4, [sp, #4]
 8022b98:	e9cd 2505 	strd	r2, r5, [sp, #20]
 8022b9c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 8022ba0:	9203      	str	r2, [sp, #12]
 8022ba2:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8022ba6:	9200      	str	r2, [sp, #0]
 8022ba8:	4642      	mov	r2, r8
 8022baa:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 8022bac:	4639      	mov	r1, r7
 8022bae:	47a0      	blx	r4
 8022bb0:	b011      	add	sp, #68	@ 0x44
 8022bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022bb6:	6803      	ldr	r3, [r0, #0]
 8022bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022bba:	4798      	blx	r3
 8022bbc:	f8ba 5000 	ldrh.w	r5, [sl]
 8022bc0:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8022bc4:	f04f 0e04 	mov.w	lr, #4
 8022bc8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8022bcc:	436e      	muls	r6, r5
 8022bce:	fb05 2303 	mla	r3, r5, r3, r2
 8022bd2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022bd6:	1b2d      	subs	r5, r5, r4
 8022bd8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022bdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022be0:	4418      	add	r0, r3
 8022be2:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8022be6:	1982      	adds	r2, r0, r6
 8022be8:	1b1b      	subs	r3, r3, r4
 8022bea:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022bee:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022bf0:	4290      	cmp	r0, r2
 8022bf2:	d254      	bcs.n	8022c9e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 8022bf4:	eb00 0a04 	add.w	sl, r0, r4
 8022bf8:	4550      	cmp	r0, sl
 8022bfa:	d24c      	bcs.n	8022c96 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 8022bfc:	f817 1b01 	ldrb.w	r1, [r7], #1
 8022c00:	fb1e e101 	smlabb	r1, lr, r1, lr
 8022c04:	eb08 0c01 	add.w	ip, r8, r1
 8022c08:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8022c0c:	b173      	cbz	r3, 8022c2c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8022c0e:	2bff      	cmp	r3, #255	@ 0xff
 8022c10:	f818 b001 	ldrb.w	fp, [r8, r1]
 8022c14:	d10c      	bne.n	8022c30 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8022c16:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8022c1a:	d109      	bne.n	8022c30 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8022c1c:	f880 b000 	strb.w	fp, [r0]
 8022c20:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8022c24:	7043      	strb	r3, [r0, #1]
 8022c26:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8022c2a:	7083      	strb	r3, [r0, #2]
 8022c2c:	3003      	adds	r0, #3
 8022c2e:	e7e3      	b.n	8022bf8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 8022c30:	fb09 f103 	mul.w	r1, r9, r3
 8022c34:	1c4b      	adds	r3, r1, #1
 8022c36:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8022c3a:	7801      	ldrb	r1, [r0, #0]
 8022c3c:	121b      	asrs	r3, r3, #8
 8022c3e:	b29e      	uxth	r6, r3
 8022c40:	43db      	mvns	r3, r3
 8022c42:	fb1b fb06 	smulbb	fp, fp, r6
 8022c46:	b2db      	uxtb	r3, r3
 8022c48:	fb01 b103 	mla	r1, r1, r3, fp
 8022c4c:	b289      	uxth	r1, r1
 8022c4e:	f101 0b01 	add.w	fp, r1, #1
 8022c52:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8022c56:	f890 b001 	ldrb.w	fp, [r0, #1]
 8022c5a:	fb1b fb03 	smulbb	fp, fp, r3
 8022c5e:	1209      	asrs	r1, r1, #8
 8022c60:	7001      	strb	r1, [r0, #0]
 8022c62:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8022c66:	fb01 b106 	mla	r1, r1, r6, fp
 8022c6a:	b289      	uxth	r1, r1
 8022c6c:	f101 0b01 	add.w	fp, r1, #1
 8022c70:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8022c74:	1209      	asrs	r1, r1, #8
 8022c76:	7041      	strb	r1, [r0, #1]
 8022c78:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8022c7c:	f890 c002 	ldrb.w	ip, [r0, #2]
 8022c80:	fb1c f303 	smulbb	r3, ip, r3
 8022c84:	fb01 3606 	mla	r6, r1, r6, r3
 8022c88:	b2b6      	uxth	r6, r6
 8022c8a:	1c73      	adds	r3, r6, #1
 8022c8c:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8022c90:	1236      	asrs	r6, r6, #8
 8022c92:	7086      	strb	r6, [r0, #2]
 8022c94:	e7ca      	b.n	8022c2c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8022c96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022c98:	4428      	add	r0, r5
 8022c9a:	441f      	add	r7, r3
 8022c9c:	e7a8      	b.n	8022bf0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 8022c9e:	4b03      	ldr	r3, [pc, #12]	@ (8022cac <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8022ca0:	6818      	ldr	r0, [r3, #0]
 8022ca2:	6803      	ldr	r3, [r0, #0]
 8022ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022ca6:	4798      	blx	r3
 8022ca8:	e782      	b.n	8022bb0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8022caa:	bf00      	nop
 8022cac:	24013b58 	.word	0x24013b58
 8022cb0:	24013b52 	.word	0x24013b52

08022cb4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8022cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022cb8:	b091      	sub	sp, #68	@ 0x44
 8022cba:	4680      	mov	r8, r0
 8022cbc:	460e      	mov	r6, r1
 8022cbe:	6810      	ldr	r0, [r2, #0]
 8022cc0:	6851      	ldr	r1, [r2, #4]
 8022cc2:	ad0c      	add	r5, sp, #48	@ 0x30
 8022cc4:	4614      	mov	r4, r2
 8022cc6:	f89d 7068 	ldrb.w	r7, [sp, #104]	@ 0x68
 8022cca:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 8022e64 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 8022cce:	f8df a198 	ldr.w	sl, [pc, #408]	@ 8022e68 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8022cd2:	c503      	stmia	r5!, {r0, r1}
 8022cd4:	6818      	ldr	r0, [r3, #0]
 8022cd6:	ad0e      	add	r5, sp, #56	@ 0x38
 8022cd8:	6859      	ldr	r1, [r3, #4]
 8022cda:	c503      	stmia	r5!, {r0, r1}
 8022cdc:	a80c      	add	r0, sp, #48	@ 0x30
 8022cde:	f7f8 fec7 	bl	801ba70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022ce2:	4621      	mov	r1, r4
 8022ce4:	a80e      	add	r0, sp, #56	@ 0x38
 8022ce6:	f7f8 feeb 	bl	801bac0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022cea:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8022cee:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8022cf2:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8022cf6:	f8d9 0000 	ldr.w	r0, [r9]
 8022cfa:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022cfe:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 8022d02:	eb08 0401 	add.w	r4, r8, r1
 8022d06:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8022d0a:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 8022d0e:	440a      	add	r2, r1
 8022d10:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8022d14:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8022d18:	4413      	add	r3, r2
 8022d1a:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8022d1e:	6803      	ldr	r3, [r0, #0]
 8022d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022d22:	4798      	blx	r3
 8022d24:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8022d28:	f8d9 0000 	ldr.w	r0, [r9]
 8022d2c:	d022      	beq.n	8022d74 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 8022d2e:	2200      	movs	r2, #0
 8022d30:	f04f 0c01 	mov.w	ip, #1
 8022d34:	6801      	ldr	r1, [r0, #0]
 8022d36:	b2ad      	uxth	r5, r5
 8022d38:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8022d3c:	e9cd c208 	strd	ip, r2, [sp, #32]
 8022d40:	f04f 0c0b 	mov.w	ip, #11
 8022d44:	f8cd c01c 	str.w	ip, [sp, #28]
 8022d48:	f8ba c000 	ldrh.w	ip, [sl]
 8022d4c:	9704      	str	r7, [sp, #16]
 8022d4e:	9502      	str	r5, [sp, #8]
 8022d50:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 8022d54:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 8022d58:	9203      	str	r2, [sp, #12]
 8022d5a:	fa1f f288 	uxth.w	r2, r8
 8022d5e:	9201      	str	r2, [sp, #4]
 8022d60:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8022d64:	9200      	str	r2, [sp, #0]
 8022d66:	4632      	mov	r2, r6
 8022d68:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 8022d6a:	4621      	mov	r1, r4
 8022d6c:	47a8      	blx	r5
 8022d6e:	b011      	add	sp, #68	@ 0x44
 8022d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022d74:	6803      	ldr	r3, [r0, #0]
 8022d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022d78:	4798      	blx	r3
 8022d7a:	f8ba 2000 	ldrh.w	r2, [sl]
 8022d7e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8022d82:	f04f 0e03 	mov.w	lr, #3
 8022d86:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 8022d8a:	4355      	muls	r5, r2
 8022d8c:	fa1f fc87 	uxth.w	ip, r7
 8022d90:	fb02 1303 	mla	r3, r2, r3, r1
 8022d94:	eba2 0208 	sub.w	r2, r2, r8
 8022d98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022d9c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022da0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022da4:	4418      	add	r0, r3
 8022da6:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022da8:	1943      	adds	r3, r0, r5
 8022daa:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 8022dae:	f1c7 05ff 	rsb	r5, r7, #255	@ 0xff
 8022db2:	eba2 0208 	sub.w	r2, r2, r8
 8022db6:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022dba:	b2ad      	uxth	r5, r5
 8022dbc:	4298      	cmp	r0, r3
 8022dbe:	d24a      	bcs.n	8022e56 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 8022dc0:	eb00 0908 	add.w	r9, r0, r8
 8022dc4:	4621      	mov	r1, r4
 8022dc6:	4548      	cmp	r0, r9
 8022dc8:	460c      	mov	r4, r1
 8022dca:	d240      	bcs.n	8022e4e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 8022dcc:	f04f 0a04 	mov.w	sl, #4
 8022dd0:	7824      	ldrb	r4, [r4, #0]
 8022dd2:	2fff      	cmp	r7, #255	@ 0xff
 8022dd4:	f101 0101 	add.w	r1, r1, #1
 8022dd8:	fb1e a404 	smlabb	r4, lr, r4, sl
 8022ddc:	eb06 0a04 	add.w	sl, r6, r4
 8022de0:	f816 b004 	ldrb.w	fp, [r6, r4]
 8022de4:	d02b      	beq.n	8022e3e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 8022de6:	7804      	ldrb	r4, [r0, #0]
 8022de8:	fb14 f405 	smulbb	r4, r4, r5
 8022dec:	fb0b 440c 	mla	r4, fp, ip, r4
 8022df0:	b2a4      	uxth	r4, r4
 8022df2:	f104 0b01 	add.w	fp, r4, #1
 8022df6:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8022dfa:	f890 b001 	ldrb.w	fp, [r0, #1]
 8022dfe:	fb1b fb05 	smulbb	fp, fp, r5
 8022e02:	1224      	asrs	r4, r4, #8
 8022e04:	7004      	strb	r4, [r0, #0]
 8022e06:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8022e0a:	fb04 b40c 	mla	r4, r4, ip, fp
 8022e0e:	b2a4      	uxth	r4, r4
 8022e10:	f104 0b01 	add.w	fp, r4, #1
 8022e14:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8022e18:	1224      	asrs	r4, r4, #8
 8022e1a:	7044      	strb	r4, [r0, #1]
 8022e1c:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8022e20:	f890 a002 	ldrb.w	sl, [r0, #2]
 8022e24:	fb1a fa05 	smulbb	sl, sl, r5
 8022e28:	fb04 a40c 	mla	r4, r4, ip, sl
 8022e2c:	b2a4      	uxth	r4, r4
 8022e2e:	f104 0a01 	add.w	sl, r4, #1
 8022e32:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8022e36:	1224      	asrs	r4, r4, #8
 8022e38:	7084      	strb	r4, [r0, #2]
 8022e3a:	3003      	adds	r0, #3
 8022e3c:	e7c3      	b.n	8022dc6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 8022e3e:	f880 b000 	strb.w	fp, [r0]
 8022e42:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8022e46:	7044      	strb	r4, [r0, #1]
 8022e48:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8022e4c:	e7f4      	b.n	8022e38 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 8022e4e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8022e50:	4420      	add	r0, r4
 8022e52:	188c      	adds	r4, r1, r2
 8022e54:	e7b2      	b.n	8022dbc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 8022e56:	4b03      	ldr	r3, [pc, #12]	@ (8022e64 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8022e58:	6818      	ldr	r0, [r3, #0]
 8022e5a:	6803      	ldr	r3, [r0, #0]
 8022e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022e5e:	4798      	blx	r3
 8022e60:	e785      	b.n	8022d6e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 8022e62:	bf00      	nop
 8022e64:	24013b58 	.word	0x24013b58
 8022e68:	24013b52 	.word	0x24013b52

08022e6c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8022e6c:	b4f0      	push	{r4, r5, r6, r7}
 8022e6e:	460c      	mov	r4, r1
 8022e70:	4611      	mov	r1, r2
 8022e72:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8022e76:	461a      	mov	r2, r3
 8022e78:	780f      	ldrb	r7, [r1, #0]
 8022e7a:	9b04      	ldr	r3, [sp, #16]
 8022e7c:	784e      	ldrb	r6, [r1, #1]
 8022e7e:	b11f      	cbz	r7, 8022e88 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 8022e80:	2f01      	cmp	r7, #1
 8022e82:	d01d      	beq.n	8022ec0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 8022e84:	bcf0      	pop	{r4, r5, r6, r7}
 8022e86:	4770      	bx	lr
 8022e88:	2e03      	cmp	r6, #3
 8022e8a:	d8fb      	bhi.n	8022e84 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8022e8c:	e8df f006 	tbb	[pc, r6]
 8022e90:	16140702 	.word	0x16140702
 8022e94:	9504      	str	r5, [sp, #16]
 8022e96:	4620      	mov	r0, r4
 8022e98:	bcf0      	pop	{r4, r5, r6, r7}
 8022e9a:	f7ff be33 	b.w	8022b04 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8022e9e:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 8022ea0:	2800      	cmp	r0, #0
 8022ea2:	d0ef      	beq.n	8022e84 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8022ea4:	6806      	ldr	r6, [r0, #0]
 8022ea6:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8022eaa:	68f5      	ldr	r5, [r6, #12]
 8022eac:	4613      	mov	r3, r2
 8022eae:	46ac      	mov	ip, r5
 8022eb0:	460a      	mov	r2, r1
 8022eb2:	4621      	mov	r1, r4
 8022eb4:	bcf0      	pop	{r4, r5, r6, r7}
 8022eb6:	4760      	bx	ip
 8022eb8:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 8022eba:	e7f1      	b.n	8022ea0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8022ebc:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 8022ebe:	e7ef      	b.n	8022ea0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8022ec0:	2e03      	cmp	r6, #3
 8022ec2:	d8df      	bhi.n	8022e84 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8022ec4:	e8df f006 	tbb	[pc, r6]
 8022ec8:	110f0702 	.word	0x110f0702
 8022ecc:	9504      	str	r5, [sp, #16]
 8022ece:	4620      	mov	r0, r4
 8022ed0:	bcf0      	pop	{r4, r5, r6, r7}
 8022ed2:	f7ff beef 	b.w	8022cb4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8022ed6:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 8022ed8:	2800      	cmp	r0, #0
 8022eda:	d0d3      	beq.n	8022e84 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8022edc:	6806      	ldr	r6, [r0, #0]
 8022ede:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8022ee2:	68b5      	ldr	r5, [r6, #8]
 8022ee4:	e7e2      	b.n	8022eac <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8022ee6:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 8022ee8:	e7f6      	b.n	8022ed8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
 8022eea:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 8022eec:	e7f4      	b.n	8022ed8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
	...

08022ef0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8022ef0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022ef4:	4605      	mov	r5, r0
 8022ef6:	b08f      	sub	sp, #60	@ 0x3c
 8022ef8:	460c      	mov	r4, r1
 8022efa:	461f      	mov	r7, r3
 8022efc:	2b00      	cmp	r3, #0
 8022efe:	d052      	beq.n	8022fa6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8022f00:	6808      	ldr	r0, [r1, #0]
 8022f02:	ab0a      	add	r3, sp, #40	@ 0x28
 8022f04:	6849      	ldr	r1, [r1, #4]
 8022f06:	f8df 81c8 	ldr.w	r8, [pc, #456]	@ 80230d0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 8022f0a:	f8df 91c8 	ldr.w	r9, [pc, #456]	@ 80230d4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 8022f0e:	c303      	stmia	r3!, {r0, r1}
 8022f10:	6810      	ldr	r0, [r2, #0]
 8022f12:	ab0c      	add	r3, sp, #48	@ 0x30
 8022f14:	6851      	ldr	r1, [r2, #4]
 8022f16:	c303      	stmia	r3!, {r0, r1}
 8022f18:	a80a      	add	r0, sp, #40	@ 0x28
 8022f1a:	f7f8 fda9 	bl	801ba70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022f1e:	4621      	mov	r1, r4
 8022f20:	a80c      	add	r0, sp, #48	@ 0x30
 8022f22:	f7f8 fdcd 	bl	801bac0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022f26:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8022f2a:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8022f2e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8022f32:	f8d8 0000 	ldr.w	r0, [r8]
 8022f36:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022f3a:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	@ 0x34
 8022f3e:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 8022f42:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 8022f46:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8022f4a:	440a      	add	r2, r1
 8022f4c:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8022f50:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8022f54:	4413      	add	r3, r2
 8022f56:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8022f5a:	6803      	ldr	r3, [r0, #0]
 8022f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022f5e:	4798      	blx	r3
 8022f60:	2fff      	cmp	r7, #255	@ 0xff
 8022f62:	d023      	beq.n	8022fac <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8022f64:	f010 0f04 	tst.w	r0, #4
 8022f68:	f8d8 0000 	ldr.w	r0, [r8]
 8022f6c:	d021      	beq.n	8022fb2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 8022f6e:	2100      	movs	r1, #0
 8022f70:	f04f 0e01 	mov.w	lr, #1
 8022f74:	f8d0 c000 	ldr.w	ip, [r0]
 8022f78:	b2a4      	uxth	r4, r4
 8022f7a:	9106      	str	r1, [sp, #24]
 8022f7c:	b2b6      	uxth	r6, r6
 8022f7e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8022f82:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8022f86:	e9cd e107 	strd	lr, r1, [sp, #28]
 8022f8a:	f8b9 e000 	ldrh.w	lr, [r9]
 8022f8e:	9703      	str	r7, [sp, #12]
 8022f90:	9401      	str	r4, [sp, #4]
 8022f92:	9600      	str	r6, [sp, #0]
 8022f94:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8022f98:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8022f9c:	9102      	str	r1, [sp, #8]
 8022f9e:	4629      	mov	r1, r5
 8022fa0:	f8dc 4040 	ldr.w	r4, [ip, #64]	@ 0x40
 8022fa4:	47a0      	blx	r4
 8022fa6:	b00f      	add	sp, #60	@ 0x3c
 8022fa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022fac:	f010 0f01 	tst.w	r0, #1
 8022fb0:	e7da      	b.n	8022f68 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 8022fb2:	6803      	ldr	r3, [r0, #0]
 8022fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022fb6:	4798      	blx	r3
 8022fb8:	f8b9 1000 	ldrh.w	r1, [r9]
 8022fbc:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8022fc0:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8022fc4:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8022fc8:	434c      	muls	r4, r1
 8022fca:	2fff      	cmp	r7, #255	@ 0xff
 8022fcc:	fb01 2303 	mla	r3, r1, r3, r2
 8022fd0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022fd4:	eba1 0106 	sub.w	r1, r1, r6
 8022fd8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022fdc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022fe0:	4418      	add	r0, r3
 8022fe2:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8022fe6:	eba3 0606 	sub.w	r6, r3, r6
 8022fea:	4404      	add	r4, r0
 8022fec:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8022ff0:	d04a      	beq.n	8023088 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 8022ff2:	43fa      	mvns	r2, r7
 8022ff4:	b2bb      	uxth	r3, r7
 8022ff6:	b2d7      	uxtb	r7, r2
 8022ff8:	42a0      	cmp	r0, r4
 8022ffa:	d263      	bcs.n	80230c4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8022ffc:	eb00 0e0c 	add.w	lr, r0, ip
 8023000:	4586      	cmp	lr, r0
 8023002:	f100 0803 	add.w	r8, r0, #3
 8023006:	d93a      	bls.n	802307e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 8023008:	f835 2b02 	ldrh.w	r2, [r5], #2
 802300c:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 8023010:	00d0      	lsls	r0, r2, #3
 8023012:	fb19 f907 	smulbb	r9, r9, r7
 8023016:	b2c0      	uxtb	r0, r0
 8023018:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 802301c:	fb00 9003 	mla	r0, r0, r3, r9
 8023020:	b280      	uxth	r0, r0
 8023022:	f100 0901 	add.w	r9, r0, #1
 8023026:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 802302a:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 802302e:	fb19 f907 	smulbb	r9, r9, r7
 8023032:	1200      	asrs	r0, r0, #8
 8023034:	f808 0c03 	strb.w	r0, [r8, #-3]
 8023038:	10d0      	asrs	r0, r2, #3
 802303a:	1212      	asrs	r2, r2, #8
 802303c:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8023040:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8023044:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8023048:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802304c:	fb00 9003 	mla	r0, r0, r3, r9
 8023050:	b280      	uxth	r0, r0
 8023052:	f100 0901 	add.w	r9, r0, #1
 8023056:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 802305a:	1200      	asrs	r0, r0, #8
 802305c:	f808 0c02 	strb.w	r0, [r8, #-2]
 8023060:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 8023064:	fb10 f007 	smulbb	r0, r0, r7
 8023068:	fb02 0203 	mla	r2, r2, r3, r0
 802306c:	b292      	uxth	r2, r2
 802306e:	1c50      	adds	r0, r2, #1
 8023070:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8023074:	4640      	mov	r0, r8
 8023076:	1212      	asrs	r2, r2, #8
 8023078:	f808 2c01 	strb.w	r2, [r8, #-1]
 802307c:	e7c0      	b.n	8023000 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 802307e:	4408      	add	r0, r1
 8023080:	4435      	add	r5, r6
 8023082:	e7b9      	b.n	8022ff8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 8023084:	4408      	add	r0, r1
 8023086:	4435      	add	r5, r6
 8023088:	42a0      	cmp	r0, r4
 802308a:	d21b      	bcs.n	80230c4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 802308c:	eb00 070c 	add.w	r7, r0, ip
 8023090:	42b8      	cmp	r0, r7
 8023092:	d2f7      	bcs.n	8023084 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 8023094:	f835 3b02 	ldrh.w	r3, [r5], #2
 8023098:	3003      	adds	r0, #3
 802309a:	00da      	lsls	r2, r3, #3
 802309c:	b2d2      	uxtb	r2, r2
 802309e:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80230a2:	f800 2c03 	strb.w	r2, [r0, #-3]
 80230a6:	10da      	asrs	r2, r3, #3
 80230a8:	121b      	asrs	r3, r3, #8
 80230aa:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80230ae:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 80230b2:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80230b6:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80230ba:	f800 2c02 	strb.w	r2, [r0, #-2]
 80230be:	f800 3c01 	strb.w	r3, [r0, #-1]
 80230c2:	e7e5      	b.n	8023090 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 80230c4:	4b02      	ldr	r3, [pc, #8]	@ (80230d0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 80230c6:	6818      	ldr	r0, [r3, #0]
 80230c8:	6803      	ldr	r3, [r0, #0]
 80230ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80230cc:	4798      	blx	r3
 80230ce:	e76a      	b.n	8022fa6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 80230d0:	24013b58 	.word	0x24013b58
 80230d4:	24013b52 	.word	0x24013b52

080230d8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 80230d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80230dc:	b08a      	sub	sp, #40	@ 0x28
 80230de:	460d      	mov	r5, r1
 80230e0:	4604      	mov	r4, r0
 80230e2:	461e      	mov	r6, r3
 80230e4:	6808      	ldr	r0, [r1, #0]
 80230e6:	ab06      	add	r3, sp, #24
 80230e8:	6849      	ldr	r1, [r1, #4]
 80230ea:	4f5d      	ldr	r7, [pc, #372]	@ (8023260 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 80230ec:	c303      	stmia	r3!, {r0, r1}
 80230ee:	6810      	ldr	r0, [r2, #0]
 80230f0:	ab08      	add	r3, sp, #32
 80230f2:	6851      	ldr	r1, [r2, #4]
 80230f4:	c303      	stmia	r3!, {r0, r1}
 80230f6:	a806      	add	r0, sp, #24
 80230f8:	f7f8 fcba 	bl	801ba70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80230fc:	4629      	mov	r1, r5
 80230fe:	a808      	add	r0, sp, #32
 8023100:	f7f8 fcde 	bl	801bac0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023104:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8023108:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 802310c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8023110:	6838      	ldr	r0, [r7, #0]
 8023112:	fb11 2103 	smlabb	r1, r1, r3, r2
 8023116:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 802311a:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 802311e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8023122:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8023126:	440a      	add	r2, r1
 8023128:	f8ad 2020 	strh.w	r2, [sp, #32]
 802312c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8023130:	4413      	add	r3, r2
 8023132:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8023136:	6803      	ldr	r3, [r0, #0]
 8023138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802313a:	4798      	blx	r3
 802313c:	2eff      	cmp	r6, #255	@ 0xff
 802313e:	d119      	bne.n	8023174 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8023140:	f010 0f20 	tst.w	r0, #32
 8023144:	6838      	ldr	r0, [r7, #0]
 8023146:	d018      	beq.n	802317a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 8023148:	b2ad      	uxth	r5, r5
 802314a:	2700      	movs	r7, #0
 802314c:	6801      	ldr	r1, [r0, #0]
 802314e:	9501      	str	r5, [sp, #4]
 8023150:	fa1f f588 	uxth.w	r5, r8
 8023154:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8023158:	9500      	str	r5, [sp, #0]
 802315a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802315e:	e9cd 6703 	strd	r6, r7, [sp, #12]
 8023162:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8023166:	9602      	str	r6, [sp, #8]
 8023168:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 802316a:	4621      	mov	r1, r4
 802316c:	47a8      	blx	r5
 802316e:	b00a      	add	sp, #40	@ 0x28
 8023170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023174:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8023178:	e7e4      	b.n	8023144 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 802317a:	6803      	ldr	r3, [r0, #0]
 802317c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802317e:	4798      	blx	r3
 8023180:	4b38      	ldr	r3, [pc, #224]	@ (8023264 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 8023182:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8023186:	f8b3 c000 	ldrh.w	ip, [r3]
 802318a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 802318e:	fb0c f505 	mul.w	r5, ip, r5
 8023192:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 8023196:	fb0c 2303 	mla	r3, ip, r3, r2
 802319a:	ebac 0c08 	sub.w	ip, ip, r8
 802319e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80231a2:	ebae 0e08 	sub.w	lr, lr, r8
 80231a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80231aa:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80231ae:	4418      	add	r0, r3
 80231b0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80231b4:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 80231b8:	4405      	add	r5, r0
 80231ba:	42a8      	cmp	r0, r5
 80231bc:	d24a      	bcs.n	8023254 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 80231be:	eb00 0803 	add.w	r8, r0, r3
 80231c2:	4540      	cmp	r0, r8
 80231c4:	d243      	bcs.n	802324e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 80231c6:	78e2      	ldrb	r2, [r4, #3]
 80231c8:	b15a      	cbz	r2, 80231e2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 80231ca:	2aff      	cmp	r2, #255	@ 0xff
 80231cc:	f894 9000 	ldrb.w	r9, [r4]
 80231d0:	d10a      	bne.n	80231e8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 80231d2:	2eff      	cmp	r6, #255	@ 0xff
 80231d4:	d108      	bne.n	80231e8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 80231d6:	f880 9000 	strb.w	r9, [r0]
 80231da:	7862      	ldrb	r2, [r4, #1]
 80231dc:	7042      	strb	r2, [r0, #1]
 80231de:	78a2      	ldrb	r2, [r4, #2]
 80231e0:	7082      	strb	r2, [r0, #2]
 80231e2:	3003      	adds	r0, #3
 80231e4:	3404      	adds	r4, #4
 80231e6:	e7ec      	b.n	80231c2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 80231e8:	4372      	muls	r2, r6
 80231ea:	1c51      	adds	r1, r2, #1
 80231ec:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80231f0:	1209      	asrs	r1, r1, #8
 80231f2:	fa1f fa81 	uxth.w	sl, r1
 80231f6:	43c9      	mvns	r1, r1
 80231f8:	fb19 f90a 	smulbb	r9, r9, sl
 80231fc:	b2ca      	uxtb	r2, r1
 80231fe:	7801      	ldrb	r1, [r0, #0]
 8023200:	fb01 9902 	mla	r9, r1, r2, r9
 8023204:	fa1f f989 	uxth.w	r9, r9
 8023208:	f109 0101 	add.w	r1, r9, #1
 802320c:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8023210:	ea4f 2929 	mov.w	r9, r9, asr #8
 8023214:	f880 9000 	strb.w	r9, [r0]
 8023218:	f890 9001 	ldrb.w	r9, [r0, #1]
 802321c:	7861      	ldrb	r1, [r4, #1]
 802321e:	fb19 f902 	smulbb	r9, r9, r2
 8023222:	fb01 910a 	mla	r1, r1, sl, r9
 8023226:	b289      	uxth	r1, r1
 8023228:	f101 0901 	add.w	r9, r1, #1
 802322c:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 8023230:	1209      	asrs	r1, r1, #8
 8023232:	7041      	strb	r1, [r0, #1]
 8023234:	7881      	ldrb	r1, [r0, #2]
 8023236:	f894 9002 	ldrb.w	r9, [r4, #2]
 802323a:	fb11 f202 	smulbb	r2, r1, r2
 802323e:	fb09 220a 	mla	r2, r9, sl, r2
 8023242:	b292      	uxth	r2, r2
 8023244:	1c51      	adds	r1, r2, #1
 8023246:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802324a:	1212      	asrs	r2, r2, #8
 802324c:	e7c8      	b.n	80231e0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 802324e:	4460      	add	r0, ip
 8023250:	4474      	add	r4, lr
 8023252:	e7b2      	b.n	80231ba <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 8023254:	6838      	ldr	r0, [r7, #0]
 8023256:	6803      	ldr	r3, [r0, #0]
 8023258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802325a:	4798      	blx	r3
 802325c:	e787      	b.n	802316e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 802325e:	bf00      	nop
 8023260:	24013b58 	.word	0x24013b58
 8023264:	24013b52 	.word	0x24013b52

08023268 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8023268:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802326c:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 8023270:	4607      	mov	r7, r0
 8023272:	460c      	mov	r4, r1
 8023274:	4692      	mov	sl, r2
 8023276:	4699      	mov	r9, r3
 8023278:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802327a:	b335      	cbz	r5, 80232ca <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 802327c:	4608      	mov	r0, r1
 802327e:	f7fb fdd5 	bl	801ee2c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8023282:	4680      	mov	r8, r0
 8023284:	4620      	mov	r0, r4
 8023286:	f7fb fe05 	bl	801ee94 <_ZNK8touchgfx6Bitmap9getHeightEv>
 802328a:	f8ad 000e 	strh.w	r0, [sp, #14]
 802328e:	4620      	mov	r0, r4
 8023290:	f8ad a008 	strh.w	sl, [sp, #8]
 8023294:	f8ad 900a 	strh.w	r9, [sp, #10]
 8023298:	f8ad 800c 	strh.w	r8, [sp, #12]
 802329c:	f7fb ff04 	bl	801f0a8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80232a0:	2810      	cmp	r0, #16
 80232a2:	d812      	bhi.n	80232ca <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 80232a4:	e8df f000 	tbb	[pc, r0]
 80232a8:	11092d24 	.word	0x11092d24
 80232ac:	11111111 	.word	0x11111111
 80232b0:	14111111 	.word	0x14111111
 80232b4:	4c111111 	.word	0x4c111111
 80232b8:	3c          	.byte	0x3c
 80232b9:	00          	.byte	0x00
 80232ba:	4620      	mov	r0, r4
 80232bc:	f7fb fe70 	bl	801efa0 <_ZNK8touchgfx6Bitmap7getDataEv>
 80232c0:	462b      	mov	r3, r5
 80232c2:	4632      	mov	r2, r6
 80232c4:	a902      	add	r1, sp, #8
 80232c6:	f7ff ff07 	bl	80230d8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80232ca:	b004      	add	sp, #16
 80232cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80232d0:	4620      	mov	r0, r4
 80232d2:	f7fb fe65 	bl	801efa0 <_ZNK8touchgfx6Bitmap7getDataEv>
 80232d6:	4680      	mov	r8, r0
 80232d8:	4620      	mov	r0, r4
 80232da:	f7fb fe91 	bl	801f000 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80232de:	ab02      	add	r3, sp, #8
 80232e0:	4602      	mov	r2, r0
 80232e2:	4641      	mov	r1, r8
 80232e4:	4638      	mov	r0, r7
 80232e6:	e9cd 6500 	strd	r6, r5, [sp]
 80232ea:	f7ff fdbf 	bl	8022e6c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80232ee:	e7ec      	b.n	80232ca <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 80232f0:	4620      	mov	r0, r4
 80232f2:	f7fb fe55 	bl	801efa0 <_ZNK8touchgfx6Bitmap7getDataEv>
 80232f6:	462b      	mov	r3, r5
 80232f8:	4632      	mov	r2, r6
 80232fa:	a902      	add	r1, sp, #8
 80232fc:	f7ff fdf8 	bl	8022ef0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8023300:	e7e3      	b.n	80232ca <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8023302:	683b      	ldr	r3, [r7, #0]
 8023304:	4620      	mov	r0, r4
 8023306:	f8d3 800c 	ldr.w	r8, [r3, #12]
 802330a:	f7fb fe49 	bl	801efa0 <_ZNK8touchgfx6Bitmap7getDataEv>
 802330e:	2300      	movs	r3, #0
 8023310:	4601      	mov	r1, r0
 8023312:	aa02      	add	r2, sp, #8
 8023314:	4638      	mov	r0, r7
 8023316:	e9cd 5300 	strd	r5, r3, [sp]
 802331a:	4633      	mov	r3, r6
 802331c:	47c0      	blx	r8
 802331e:	e7d4      	b.n	80232ca <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8023320:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 8023322:	2f00      	cmp	r7, #0
 8023324:	d0d1      	beq.n	80232ca <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8023326:	683b      	ldr	r3, [r7, #0]
 8023328:	f8d3 8008 	ldr.w	r8, [r3, #8]
 802332c:	4620      	mov	r0, r4
 802332e:	f7fb fe37 	bl	801efa0 <_ZNK8touchgfx6Bitmap7getDataEv>
 8023332:	9500      	str	r5, [sp, #0]
 8023334:	4601      	mov	r1, r0
 8023336:	4633      	mov	r3, r6
 8023338:	aa02      	add	r2, sp, #8
 802333a:	4638      	mov	r0, r7
 802333c:	47c0      	blx	r8
 802333e:	e7c4      	b.n	80232ca <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8023340:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 8023342:	2f00      	cmp	r7, #0
 8023344:	d0c1      	beq.n	80232ca <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8023346:	683b      	ldr	r3, [r7, #0]
 8023348:	f8d3 800c 	ldr.w	r8, [r3, #12]
 802334c:	e7ee      	b.n	802332c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>

0802334e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 802334e:	b4f0      	push	{r4, r5, r6, r7}
 8023350:	4616      	mov	r6, r2
 8023352:	461c      	mov	r4, r3
 8023354:	460d      	mov	r5, r1
 8023356:	9a04      	ldr	r2, [sp, #16]
 8023358:	2e01      	cmp	r6, #1
 802335a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 802335e:	d00e      	beq.n	802337e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 8023360:	d303      	bcc.n	802336a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 8023362:	2e02      	cmp	r6, #2
 8023364:	d006      	beq.n	8023374 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 8023366:	bcf0      	pop	{r4, r5, r6, r7}
 8023368:	4770      	bx	lr
 802336a:	4621      	mov	r1, r4
 802336c:	4628      	mov	r0, r5
 802336e:	bcf0      	pop	{r4, r5, r6, r7}
 8023370:	f7ff bdbe 	b.w	8022ef0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8023374:	4621      	mov	r1, r4
 8023376:	4628      	mov	r0, r5
 8023378:	bcf0      	pop	{r4, r5, r6, r7}
 802337a:	f7ff bead 	b.w	80230d8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 802337e:	6805      	ldr	r5, [r0, #0]
 8023380:	2600      	movs	r6, #0
 8023382:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8023386:	68ed      	ldr	r5, [r5, #12]
 8023388:	4613      	mov	r3, r2
 802338a:	4622      	mov	r2, r4
 802338c:	46ac      	mov	ip, r5
 802338e:	bcf0      	pop	{r4, r5, r6, r7}
 8023390:	4760      	bx	ip
	...

08023394 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8023394:	b160      	cbz	r0, 80233b0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 8023396:	2903      	cmp	r1, #3
 8023398:	d818      	bhi.n	80233cc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 802339a:	e8df f001 	tbb	[pc, r1]
 802339e:	1902      	.short	0x1902
 80233a0:	1b06      	.short	0x1b06
 80233a2:	4b0e      	ldr	r3, [pc, #56]	@ (80233dc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 80233a4:	8818      	ldrh	r0, [r3, #0]
 80233a6:	4240      	negs	r0, r0
 80233a8:	4770      	bx	lr
 80233aa:	4b0c      	ldr	r3, [pc, #48]	@ (80233dc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 80233ac:	8818      	ldrh	r0, [r3, #0]
 80233ae:	4770      	bx	lr
 80233b0:	2903      	cmp	r1, #3
 80233b2:	d80b      	bhi.n	80233cc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 80233b4:	a301      	add	r3, pc, #4	@ (adr r3, 80233bc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 80233b6:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80233ba:	bf00      	nop
 80233bc:	080233d1 	.word	0x080233d1
 80233c0:	080233ab 	.word	0x080233ab
 80233c4:	080233d5 	.word	0x080233d5
 80233c8:	080233a3 	.word	0x080233a3
 80233cc:	2000      	movs	r0, #0
 80233ce:	4770      	bx	lr
 80233d0:	2001      	movs	r0, #1
 80233d2:	4770      	bx	lr
 80233d4:	f04f 30ff 	mov.w	r0, #4294967295
 80233d8:	4770      	bx	lr
 80233da:	bf00      	nop
 80233dc:	24013b52 	.word	0x24013b52

080233e0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 80233e0:	b160      	cbz	r0, 80233fc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 80233e2:	2903      	cmp	r1, #3
 80233e4:	d818      	bhi.n	8023418 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 80233e6:	e8df f001 	tbb	[pc, r1]
 80233ea:	0219      	.short	0x0219
 80233ec:	051b      	.short	0x051b
 80233ee:	4b0e      	ldr	r3, [pc, #56]	@ (8023428 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 80233f0:	8818      	ldrh	r0, [r3, #0]
 80233f2:	4770      	bx	lr
 80233f4:	4b0c      	ldr	r3, [pc, #48]	@ (8023428 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 80233f6:	8818      	ldrh	r0, [r3, #0]
 80233f8:	4240      	negs	r0, r0
 80233fa:	4770      	bx	lr
 80233fc:	2903      	cmp	r1, #3
 80233fe:	d80b      	bhi.n	8023418 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8023400:	a301      	add	r3, pc, #4	@ (adr r3, 8023408 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 8023402:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8023406:	bf00      	nop
 8023408:	080233ef 	.word	0x080233ef
 802340c:	08023421 	.word	0x08023421
 8023410:	080233f5 	.word	0x080233f5
 8023414:	0802341d 	.word	0x0802341d
 8023418:	2000      	movs	r0, #0
 802341a:	4770      	bx	lr
 802341c:	2001      	movs	r0, #1
 802341e:	4770      	bx	lr
 8023420:	f04f 30ff 	mov.w	r0, #4294967295
 8023424:	4770      	bx	lr
 8023426:	bf00      	nop
 8023428:	24013b52 	.word	0x24013b52

0802342c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 802342c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023430:	b097      	sub	sp, #92	@ 0x5c
 8023432:	910b      	str	r1, [sp, #44]	@ 0x2c
 8023434:	a912      	add	r1, sp, #72	@ 0x48
 8023436:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	@ 0x80
 802343a:	f8bd 7088 	ldrh.w	r7, [sp, #136]	@ 0x88
 802343e:	f8bd 408c 	ldrh.w	r4, [sp, #140]	@ 0x8c
 8023442:	f89d 80a4 	ldrb.w	r8, [sp, #164]	@ 0xa4
 8023446:	f89d 90ac 	ldrb.w	r9, [sp, #172]	@ 0xac
 802344a:	e881 000c 	stmia.w	r1, {r2, r3}
 802344e:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	@ 0x84
 8023452:	930a      	str	r3, [sp, #40]	@ 0x28
 8023454:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 8023458:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	@ 0x90
 802345c:	9311      	str	r3, [sp, #68]	@ 0x44
 802345e:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 8023462:	798d      	ldrb	r5, [r1, #6]
 8023464:	930c      	str	r3, [sp, #48]	@ 0x30
 8023466:	7b4b      	ldrb	r3, [r1, #13]
 8023468:	0158      	lsls	r0, r3, #5
 802346a:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 802346e:	4328      	orrs	r0, r5
 8023470:	9009      	str	r0, [sp, #36]	@ 0x24
 8023472:	f000 817c 	beq.w	802376e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8023476:	011b      	lsls	r3, r3, #4
 8023478:	79c8      	ldrb	r0, [r1, #7]
 802347a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802347e:	4303      	orrs	r3, r0
 8023480:	930e      	str	r3, [sp, #56]	@ 0x38
 8023482:	f000 8174 	beq.w	802376e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8023486:	f991 3009 	ldrsb.w	r3, [r1, #9]
 802348a:	b29b      	uxth	r3, r3
 802348c:	2f00      	cmp	r7, #0
 802348e:	f000 8116 	beq.w	80236be <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 8023492:	1aff      	subs	r7, r7, r3
 8023494:	b2bf      	uxth	r7, r7
 8023496:	043b      	lsls	r3, r7, #16
 8023498:	d502      	bpl.n	80234a0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 802349a:	1bf6      	subs	r6, r6, r7
 802349c:	2700      	movs	r7, #0
 802349e:	b236      	sxth	r6, r6
 80234a0:	f9b2 1000 	ldrsh.w	r1, [r2]
 80234a4:	a812      	add	r0, sp, #72	@ 0x48
 80234a6:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 80234aa:	428e      	cmp	r6, r1
 80234ac:	b28b      	uxth	r3, r1
 80234ae:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 80234b2:	bfbf      	itttt	lt
 80234b4:	18ff      	addlt	r7, r7, r3
 80234b6:	1bbe      	sublt	r6, r7, r6
 80234b8:	b2b7      	uxthlt	r7, r6
 80234ba:	460e      	movlt	r6, r1
 80234bc:	8891      	ldrh	r1, [r2, #4]
 80234be:	440b      	add	r3, r1
 80234c0:	4631      	mov	r1, r6
 80234c2:	b21b      	sxth	r3, r3
 80234c4:	9310      	str	r3, [sp, #64]	@ 0x40
 80234c6:	88d3      	ldrh	r3, [r2, #6]
 80234c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80234ca:	449a      	add	sl, r3
 80234cc:	fa0f f38a 	sxth.w	r3, sl
 80234d0:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 80234d4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80234d6:	4bb5      	ldr	r3, [pc, #724]	@ (80237ac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 80234d8:	f893 b000 	ldrb.w	fp, [r3]
 80234dc:	f10b 3cff 	add.w	ip, fp, #4294967295
 80234e0:	f1dc 0300 	rsbs	r3, ip, #0
 80234e4:	eb43 030c 	adc.w	r3, r3, ip
 80234e8:	930d      	str	r3, [sp, #52]	@ 0x34
 80234ea:	464b      	mov	r3, r9
 80234ec:	f7f8 f934 	bl	801b758 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 80234f0:	4631      	mov	r1, r6
 80234f2:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 80234f6:	464b      	mov	r3, r9
 80234f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80234fa:	a812      	add	r0, sp, #72	@ 0x48
 80234fc:	f7f8 f949 	bl	801b792 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8023500:	a916      	add	r1, sp, #88	@ 0x58
 8023502:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8023506:	a815      	add	r0, sp, #84	@ 0x54
 8023508:	f7f8 fa70 	bl	801b9ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 802350c:	f1b9 0f00 	cmp.w	r9, #0
 8023510:	f040 80d8 	bne.w	80236c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 8023514:	f1bb 0f01 	cmp.w	fp, #1
 8023518:	f040 80dc 	bne.w	80236d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 802351c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802351e:	b153      	cbz	r3, 8023536 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8023520:	2508      	movs	r5, #8
 8023522:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023524:	fb95 f3f8 	sdiv	r3, r5, r8
 8023528:	1e5d      	subs	r5, r3, #1
 802352a:	4415      	add	r5, r2
 802352c:	fb95 f5f3 	sdiv	r5, r5, r3
 8023530:	fb15 f503 	smulbb	r5, r5, r3
 8023534:	b2ad      	uxth	r5, r5
 8023536:	b907      	cbnz	r7, 802353a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8023538:	b16c      	cbz	r4, 8023556 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 802353a:	fb04 7305 	mla	r3, r4, r5, r7
 802353e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8023540:	ebaa 0a04 	sub.w	sl, sl, r4
 8023544:	fb08 f303 	mul.w	r3, r8, r3
 8023548:	fa1f fa8a 	uxth.w	sl, sl
 802354c:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8023550:	f003 0407 	and.w	r4, r3, #7
 8023554:	9226      	str	r2, [sp, #152]	@ 0x98
 8023556:	4649      	mov	r1, r9
 8023558:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802355a:	f7ff ff1b 	bl	8023394 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 802355e:	4683      	mov	fp, r0
 8023560:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8023562:	f7ff ff3d 	bl	80233e0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 8023566:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023568:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802356a:	4681      	mov	r9, r0
 802356c:	1a9b      	subs	r3, r3, r2
 802356e:	459a      	cmp	sl, r3
 8023570:	bfa8      	it	ge
 8023572:	469a      	movge	sl, r3
 8023574:	f1ba 0f00 	cmp.w	sl, #0
 8023578:	f340 80f9 	ble.w	802376e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 802357c:	1bf6      	subs	r6, r6, r7
 802357e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023580:	1b9e      	subs	r6, r3, r6
 8023582:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023584:	429e      	cmp	r6, r3
 8023586:	bfd4      	ite	le
 8023588:	ebc7 0706 	rsble	r7, r7, r6
 802358c:	ebc7 0703 	rsbgt	r7, r7, r3
 8023590:	2f00      	cmp	r7, #0
 8023592:	f340 80ec 	ble.w	802376e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8023596:	1bed      	subs	r5, r5, r7
 8023598:	fb08 f305 	mul.w	r3, r8, r5
 802359c:	930d      	str	r3, [sp, #52]	@ 0x34
 802359e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80235a0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80235a4:	930e      	str	r3, [sp, #56]	@ 0x38
 80235a6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80235a8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80235ac:	930f      	str	r3, [sp, #60]	@ 0x3c
 80235ae:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80235b0:	b2db      	uxtb	r3, r3
 80235b2:	9310      	str	r3, [sp, #64]	@ 0x40
 80235b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80235b6:	2b00      	cmp	r3, #0
 80235b8:	f040 80de 	bne.w	8023778 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 80235bc:	4b7c      	ldr	r3, [pc, #496]	@ (80237b0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 80235be:	6818      	ldr	r0, [r3, #0]
 80235c0:	6803      	ldr	r3, [r0, #0]
 80235c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80235c4:	4798      	blx	r3
 80235c6:	2301      	movs	r3, #1
 80235c8:	4a7a      	ldr	r2, [pc, #488]	@ (80237b4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 80235ca:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 80235ce:	fb07 9b1b 	mls	fp, r7, fp, r9
 80235d2:	fa03 f308 	lsl.w	r3, r3, r8
 80235d6:	8811      	ldrh	r1, [r2, #0]
 80235d8:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	@ 0x54
 80235dc:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 80235e0:	3b01      	subs	r3, #1
 80235e2:	fb06 bb07 	mla	fp, r6, r7, fp
 80235e6:	b2db      	uxtb	r3, r3
 80235e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80235ea:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 80235ee:	fb01 2303 	mla	r3, r1, r3, r2
 80235f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80235f6:	18c3      	adds	r3, r0, r3
 80235f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80235fa:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80235fc:	781a      	ldrb	r2, [r3, #0]
 80235fe:	4122      	asrs	r2, r4
 8023600:	b2d2      	uxtb	r2, r2
 8023602:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8023606:	f0c0 80d7 	bcc.w	80237b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 802360a:	46be      	mov	lr, r7
 802360c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802360e:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8023612:	f0c0 80ba 	bcc.w	802378a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 8023616:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023618:	4013      	ands	r3, r2
 802361a:	d041      	beq.n	80236a0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 802361c:	20ff      	movs	r0, #255	@ 0xff
 802361e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8023620:	fb90 f5f5 	sdiv	r5, r0, r5
 8023624:	436b      	muls	r3, r5
 8023626:	2bfe      	cmp	r3, #254	@ 0xfe
 8023628:	dd03      	ble.n	8023632 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 802362a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802362c:	4285      	cmp	r5, r0
 802362e:	f000 80a5 	beq.w	802377c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 8023632:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8023634:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8023636:	fb15 f303 	smulbb	r3, r5, r3
 802363a:	b29b      	uxth	r3, r3
 802363c:	1c5d      	adds	r5, r3, #1
 802363e:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8023642:	780d      	ldrb	r5, [r1, #0]
 8023644:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023648:	fa1f fc83 	uxth.w	ip, r3
 802364c:	43db      	mvns	r3, r3
 802364e:	fb10 f90c 	smulbb	r9, r0, ip
 8023652:	b2db      	uxtb	r3, r3
 8023654:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8023656:	fb05 9503 	mla	r5, r5, r3, r9
 802365a:	b2ad      	uxth	r5, r5
 802365c:	f105 0901 	add.w	r9, r5, #1
 8023660:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8023664:	fb10 f90c 	smulbb	r9, r0, ip
 8023668:	980e      	ldr	r0, [sp, #56]	@ 0x38
 802366a:	122d      	asrs	r5, r5, #8
 802366c:	fb10 fc0c 	smulbb	ip, r0, ip
 8023670:	700d      	strb	r5, [r1, #0]
 8023672:	784d      	ldrb	r5, [r1, #1]
 8023674:	fb05 9503 	mla	r5, r5, r3, r9
 8023678:	b2ad      	uxth	r5, r5
 802367a:	f105 0901 	add.w	r9, r5, #1
 802367e:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8023682:	122d      	asrs	r5, r5, #8
 8023684:	704d      	strb	r5, [r1, #1]
 8023686:	788d      	ldrb	r5, [r1, #2]
 8023688:	fb05 cc03 	mla	ip, r5, r3, ip
 802368c:	fa1f fc8c 	uxth.w	ip, ip
 8023690:	f10c 0301 	add.w	r3, ip, #1
 8023694:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8023698:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802369c:	f881 c002 	strb.w	ip, [r1, #2]
 80236a0:	4444      	add	r4, r8
 80236a2:	4431      	add	r1, r6
 80236a4:	b2a4      	uxth	r4, r4
 80236a6:	2c07      	cmp	r4, #7
 80236a8:	bf89      	itett	hi
 80236aa:	9b26      	ldrhi	r3, [sp, #152]	@ 0x98
 80236ac:	fa42 f208 	asrls.w	r2, r2, r8
 80236b0:	2400      	movhi	r4, #0
 80236b2:	785a      	ldrbhi	r2, [r3, #1]
 80236b4:	bf8a      	itet	hi
 80236b6:	3301      	addhi	r3, #1
 80236b8:	b2d2      	uxtbls	r2, r2
 80236ba:	9326      	strhi	r3, [sp, #152]	@ 0x98
 80236bc:	e7a7      	b.n	802360e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 80236be:	441e      	add	r6, r3
 80236c0:	b236      	sxth	r6, r6
 80236c2:	e6ed      	b.n	80234a0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80236c4:	f1b9 0f01 	cmp.w	r9, #1
 80236c8:	f47f af28 	bne.w	802351c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80236cc:	f1bb 0f01 	cmp.w	fp, #1
 80236d0:	f47f af24 	bne.w	802351c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80236d4:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 80237b0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 80236d8:	f8db 0000 	ldr.w	r0, [fp]
 80236dc:	6803      	ldr	r3, [r0, #0]
 80236de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80236e0:	4798      	blx	r3
 80236e2:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 80236e6:	465a      	mov	r2, fp
 80236e8:	d006      	beq.n	80236f8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 80236ea:	f1b8 0f04 	cmp.w	r8, #4
 80236ee:	d141      	bne.n	8023774 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 80236f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80236f2:	3300      	adds	r3, #0
 80236f4:	bf18      	it	ne
 80236f6:	2301      	movne	r3, #1
 80236f8:	0580      	lsls	r0, r0, #22
 80236fa:	d566      	bpl.n	80237ca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 80236fc:	f1b8 0f08 	cmp.w	r8, #8
 8023700:	d163      	bne.n	80237ca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8023702:	2b00      	cmp	r3, #0
 8023704:	bf0c      	ite	eq
 8023706:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 802370a:	f44f 7180 	movne.w	r1, #256	@ 0x100
 802370e:	2f00      	cmp	r7, #0
 8023710:	f47f af04 	bne.w	802351c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8023714:	2c00      	cmp	r4, #0
 8023716:	f47f af01 	bne.w	802351c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 802371a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802371c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802371e:	18f3      	adds	r3, r6, r3
 8023720:	4283      	cmp	r3, r0
 8023722:	f73f aefb 	bgt.w	802351c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8023726:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8023728:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802372a:	4403      	add	r3, r0
 802372c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802372e:	4283      	cmp	r3, r0
 8023730:	f73f aef4 	bgt.w	802351c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8023734:	f1b8 0f08 	cmp.w	r8, #8
 8023738:	6810      	ldr	r0, [r2, #0]
 802373a:	f04f 0600 	mov.w	r6, #0
 802373e:	f8bd 3056 	ldrh.w	r3, [sp, #86]	@ 0x56
 8023742:	bf18      	it	ne
 8023744:	3501      	addne	r5, #1
 8023746:	6804      	ldr	r4, [r0, #0]
 8023748:	f8bd 2054 	ldrh.w	r2, [sp, #84]	@ 0x54
 802374c:	bf18      	it	ne
 802374e:	f025 0501 	bicne.w	r5, r5, #1
 8023752:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8023756:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8023758:	bf18      	it	ne
 802375a:	b2ad      	uxthne	r5, r5
 802375c:	9104      	str	r1, [sp, #16]
 802375e:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8023760:	e9cd 5a00 	strd	r5, sl, [sp]
 8023764:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8023768:	9926      	ldr	r1, [sp, #152]	@ 0x98
 802376a:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 802376c:	47a0      	blx	r4
 802376e:	b017      	add	sp, #92	@ 0x5c
 8023770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023774:	2300      	movs	r3, #0
 8023776:	e7bf      	b.n	80236f8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8023778:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 802377a:	e724      	b.n	80235c6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 802377c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802377e:	700b      	strb	r3, [r1, #0]
 8023780:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023782:	704b      	strb	r3, [r1, #1]
 8023784:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023786:	708b      	strb	r3, [r1, #2]
 8023788:	e78a      	b.n	80236a0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 802378a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802378c:	b153      	cbz	r3, 80237a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 802378e:	441c      	add	r4, r3
 8023790:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8023792:	b2a4      	uxth	r4, r4
 8023794:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8023798:	f004 0407 	and.w	r4, r4, #7
 802379c:	781a      	ldrb	r2, [r3, #0]
 802379e:	9326      	str	r3, [sp, #152]	@ 0x98
 80237a0:	4122      	asrs	r2, r4
 80237a2:	b2d2      	uxtb	r2, r2
 80237a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80237a6:	445b      	add	r3, fp
 80237a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80237aa:	e72a      	b.n	8023602 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 80237ac:	24013b50 	.word	0x24013b50
 80237b0:	24013b58 	.word	0x24013b58
 80237b4:	24013b52 	.word	0x24013b52
 80237b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80237ba:	2b00      	cmp	r3, #0
 80237bc:	d1d7      	bne.n	802376e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80237be:	4b06      	ldr	r3, [pc, #24]	@ (80237d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 80237c0:	6818      	ldr	r0, [r3, #0]
 80237c2:	6803      	ldr	r3, [r0, #0]
 80237c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80237c6:	4798      	blx	r3
 80237c8:	e7d1      	b.n	802376e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80237ca:	2b00      	cmp	r3, #0
 80237cc:	f43f aea6 	beq.w	802351c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80237d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80237d4:	e79b      	b.n	802370e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 80237d6:	bf00      	nop
 80237d8:	24013b58 	.word	0x24013b58

080237dc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 80237dc:	b538      	push	{r3, r4, r5, lr}
 80237de:	4c15      	ldr	r4, [pc, #84]	@ (8023834 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80237e0:	4605      	mov	r5, r0
 80237e2:	7823      	ldrb	r3, [r4, #0]
 80237e4:	f3bf 8f5b 	dmb	ish
 80237e8:	07da      	lsls	r2, r3, #31
 80237ea:	d40b      	bmi.n	8023804 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80237ec:	4620      	mov	r0, r4
 80237ee:	f006 f8d8 	bl	80299a2 <__cxa_guard_acquire>
 80237f2:	b138      	cbz	r0, 8023804 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80237f4:	4620      	mov	r0, r4
 80237f6:	f006 f8e0 	bl	80299ba <__cxa_guard_release>
 80237fa:	4a0f      	ldr	r2, [pc, #60]	@ (8023838 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80237fc:	490f      	ldr	r1, [pc, #60]	@ (802383c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 80237fe:	4810      	ldr	r0, [pc, #64]	@ (8023840 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8023800:	f006 f8c8 	bl	8029994 <__aeabi_atexit>
 8023804:	4c0f      	ldr	r4, [pc, #60]	@ (8023844 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8023806:	7823      	ldrb	r3, [r4, #0]
 8023808:	f3bf 8f5b 	dmb	ish
 802380c:	07db      	lsls	r3, r3, #31
 802380e:	d40b      	bmi.n	8023828 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8023810:	4620      	mov	r0, r4
 8023812:	f006 f8c6 	bl	80299a2 <__cxa_guard_acquire>
 8023816:	b138      	cbz	r0, 8023828 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8023818:	4620      	mov	r0, r4
 802381a:	f006 f8ce 	bl	80299ba <__cxa_guard_release>
 802381e:	4a06      	ldr	r2, [pc, #24]	@ (8023838 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8023820:	4909      	ldr	r1, [pc, #36]	@ (8023848 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8023822:	480a      	ldr	r0, [pc, #40]	@ (802384c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8023824:	f006 f8b6 	bl	8029994 <__aeabi_atexit>
 8023828:	4b05      	ldr	r3, [pc, #20]	@ (8023840 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 802382a:	616b      	str	r3, [r5, #20]
 802382c:	4b07      	ldr	r3, [pc, #28]	@ (802384c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 802382e:	61ab      	str	r3, [r5, #24]
 8023830:	bd38      	pop	{r3, r4, r5, pc}
 8023832:	bf00      	nop
 8023834:	24013c3c 	.word	0x24013c3c
 8023838:	24000000 	.word	0x24000000
 802383c:	08020adf 	.word	0x08020adf
 8023840:	2400006c 	.word	0x2400006c
 8023844:	24013c40 	.word	0x24013c40
 8023848:	08020add 	.word	0x08020add
 802384c:	24000070 	.word	0x24000070

08023850 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8023850:	b538      	push	{r3, r4, r5, lr}
 8023852:	4c15      	ldr	r4, [pc, #84]	@ (80238a8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8023854:	4605      	mov	r5, r0
 8023856:	7823      	ldrb	r3, [r4, #0]
 8023858:	f3bf 8f5b 	dmb	ish
 802385c:	07da      	lsls	r2, r3, #31
 802385e:	d40b      	bmi.n	8023878 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8023860:	4620      	mov	r0, r4
 8023862:	f006 f89e 	bl	80299a2 <__cxa_guard_acquire>
 8023866:	b138      	cbz	r0, 8023878 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8023868:	4620      	mov	r0, r4
 802386a:	f006 f8a6 	bl	80299ba <__cxa_guard_release>
 802386e:	4a0f      	ldr	r2, [pc, #60]	@ (80238ac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8023870:	490f      	ldr	r1, [pc, #60]	@ (80238b0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8023872:	4810      	ldr	r0, [pc, #64]	@ (80238b4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8023874:	f006 f88e 	bl	8029994 <__aeabi_atexit>
 8023878:	4c0f      	ldr	r4, [pc, #60]	@ (80238b8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 802387a:	7823      	ldrb	r3, [r4, #0]
 802387c:	f3bf 8f5b 	dmb	ish
 8023880:	07db      	lsls	r3, r3, #31
 8023882:	d40b      	bmi.n	802389c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8023884:	4620      	mov	r0, r4
 8023886:	f006 f88c 	bl	80299a2 <__cxa_guard_acquire>
 802388a:	b138      	cbz	r0, 802389c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 802388c:	4620      	mov	r0, r4
 802388e:	f006 f894 	bl	80299ba <__cxa_guard_release>
 8023892:	4a06      	ldr	r2, [pc, #24]	@ (80238ac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8023894:	4909      	ldr	r1, [pc, #36]	@ (80238bc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8023896:	480a      	ldr	r0, [pc, #40]	@ (80238c0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8023898:	f006 f87c 	bl	8029994 <__aeabi_atexit>
 802389c:	4b05      	ldr	r3, [pc, #20]	@ (80238b4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 802389e:	60eb      	str	r3, [r5, #12]
 80238a0:	4b07      	ldr	r3, [pc, #28]	@ (80238c0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80238a2:	612b      	str	r3, [r5, #16]
 80238a4:	bd38      	pop	{r3, r4, r5, pc}
 80238a6:	bf00      	nop
 80238a8:	24013c1c 	.word	0x24013c1c
 80238ac:	24000000 	.word	0x24000000
 80238b0:	08020ae3 	.word	0x08020ae3
 80238b4:	2400004c 	.word	0x2400004c
 80238b8:	24013c20 	.word	0x24013c20
 80238bc:	08020ae1 	.word	0x08020ae1
 80238c0:	24000050 	.word	0x24000050

080238c4 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 80238c4:	b510      	push	{r4, lr}
 80238c6:	4604      	mov	r4, r0
 80238c8:	f7ff ff88 	bl	80237dc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 80238cc:	4620      	mov	r0, r4
 80238ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80238d2:	f7ff bfbd 	b.w	8023850 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

080238d8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 80238d8:	b538      	push	{r3, r4, r5, lr}
 80238da:	4c15      	ldr	r4, [pc, #84]	@ (8023930 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80238dc:	4605      	mov	r5, r0
 80238de:	7823      	ldrb	r3, [r4, #0]
 80238e0:	f3bf 8f5b 	dmb	ish
 80238e4:	07da      	lsls	r2, r3, #31
 80238e6:	d40b      	bmi.n	8023900 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80238e8:	4620      	mov	r0, r4
 80238ea:	f006 f85a 	bl	80299a2 <__cxa_guard_acquire>
 80238ee:	b138      	cbz	r0, 8023900 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80238f0:	4620      	mov	r0, r4
 80238f2:	f006 f862 	bl	80299ba <__cxa_guard_release>
 80238f6:	4a0f      	ldr	r2, [pc, #60]	@ (8023934 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80238f8:	490f      	ldr	r1, [pc, #60]	@ (8023938 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 80238fa:	4810      	ldr	r0, [pc, #64]	@ (802393c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80238fc:	f006 f84a 	bl	8029994 <__aeabi_atexit>
 8023900:	4c0f      	ldr	r4, [pc, #60]	@ (8023940 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8023902:	7823      	ldrb	r3, [r4, #0]
 8023904:	f3bf 8f5b 	dmb	ish
 8023908:	07db      	lsls	r3, r3, #31
 802390a:	d40b      	bmi.n	8023924 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 802390c:	4620      	mov	r0, r4
 802390e:	f006 f848 	bl	80299a2 <__cxa_guard_acquire>
 8023912:	b138      	cbz	r0, 8023924 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8023914:	4620      	mov	r0, r4
 8023916:	f006 f850 	bl	80299ba <__cxa_guard_release>
 802391a:	4a06      	ldr	r2, [pc, #24]	@ (8023934 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 802391c:	4909      	ldr	r1, [pc, #36]	@ (8023944 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 802391e:	480a      	ldr	r0, [pc, #40]	@ (8023948 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8023920:	f006 f838 	bl	8029994 <__aeabi_atexit>
 8023924:	4b05      	ldr	r3, [pc, #20]	@ (802393c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8023926:	626b      	str	r3, [r5, #36]	@ 0x24
 8023928:	4b07      	ldr	r3, [pc, #28]	@ (8023948 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 802392a:	62ab      	str	r3, [r5, #40]	@ 0x28
 802392c:	bd38      	pop	{r3, r4, r5, pc}
 802392e:	bf00      	nop
 8023930:	24013c44 	.word	0x24013c44
 8023934:	24000000 	.word	0x24000000
 8023938:	08020ad7 	.word	0x08020ad7
 802393c:	24000074 	.word	0x24000074
 8023940:	24013c48 	.word	0x24013c48
 8023944:	08020ad5 	.word	0x08020ad5
 8023948:	24000078 	.word	0x24000078

0802394c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 802394c:	b538      	push	{r3, r4, r5, lr}
 802394e:	4c15      	ldr	r4, [pc, #84]	@ (80239a4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8023950:	4605      	mov	r5, r0
 8023952:	7823      	ldrb	r3, [r4, #0]
 8023954:	f3bf 8f5b 	dmb	ish
 8023958:	07da      	lsls	r2, r3, #31
 802395a:	d40b      	bmi.n	8023974 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 802395c:	4620      	mov	r0, r4
 802395e:	f006 f820 	bl	80299a2 <__cxa_guard_acquire>
 8023962:	b138      	cbz	r0, 8023974 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8023964:	4620      	mov	r0, r4
 8023966:	f006 f828 	bl	80299ba <__cxa_guard_release>
 802396a:	4a0f      	ldr	r2, [pc, #60]	@ (80239a8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 802396c:	490f      	ldr	r1, [pc, #60]	@ (80239ac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 802396e:	4810      	ldr	r0, [pc, #64]	@ (80239b0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8023970:	f006 f810 	bl	8029994 <__aeabi_atexit>
 8023974:	4c0f      	ldr	r4, [pc, #60]	@ (80239b4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8023976:	7823      	ldrb	r3, [r4, #0]
 8023978:	f3bf 8f5b 	dmb	ish
 802397c:	07db      	lsls	r3, r3, #31
 802397e:	d40b      	bmi.n	8023998 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8023980:	4620      	mov	r0, r4
 8023982:	f006 f80e 	bl	80299a2 <__cxa_guard_acquire>
 8023986:	b138      	cbz	r0, 8023998 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8023988:	4620      	mov	r0, r4
 802398a:	f006 f816 	bl	80299ba <__cxa_guard_release>
 802398e:	4a06      	ldr	r2, [pc, #24]	@ (80239a8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8023990:	4909      	ldr	r1, [pc, #36]	@ (80239b8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8023992:	480a      	ldr	r0, [pc, #40]	@ (80239bc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8023994:	f005 fffe 	bl	8029994 <__aeabi_atexit>
 8023998:	4b05      	ldr	r3, [pc, #20]	@ (80239b0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 802399a:	61eb      	str	r3, [r5, #28]
 802399c:	4b07      	ldr	r3, [pc, #28]	@ (80239bc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 802399e:	622b      	str	r3, [r5, #32]
 80239a0:	bd38      	pop	{r3, r4, r5, pc}
 80239a2:	bf00      	nop
 80239a4:	24013c24 	.word	0x24013c24
 80239a8:	24000000 	.word	0x24000000
 80239ac:	08020adb 	.word	0x08020adb
 80239b0:	24000054 	.word	0x24000054
 80239b4:	24013c28 	.word	0x24013c28
 80239b8:	08020ad9 	.word	0x08020ad9
 80239bc:	24000058 	.word	0x24000058

080239c0 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 80239c0:	b510      	push	{r4, lr}
 80239c2:	4604      	mov	r4, r0
 80239c4:	f7ff ff88 	bl	80238d8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 80239c8:	4620      	mov	r0, r4
 80239ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80239ce:	f7ff bfbd 	b.w	802394c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

080239d4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 80239d4:	b538      	push	{r3, r4, r5, lr}
 80239d6:	4c15      	ldr	r4, [pc, #84]	@ (8023a2c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 80239d8:	4605      	mov	r5, r0
 80239da:	7823      	ldrb	r3, [r4, #0]
 80239dc:	f3bf 8f5b 	dmb	ish
 80239e0:	07da      	lsls	r2, r3, #31
 80239e2:	d40b      	bmi.n	80239fc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80239e4:	4620      	mov	r0, r4
 80239e6:	f005 ffdc 	bl	80299a2 <__cxa_guard_acquire>
 80239ea:	b138      	cbz	r0, 80239fc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80239ec:	4620      	mov	r0, r4
 80239ee:	f005 ffe4 	bl	80299ba <__cxa_guard_release>
 80239f2:	4a0f      	ldr	r2, [pc, #60]	@ (8023a30 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 80239f4:	490f      	ldr	r1, [pc, #60]	@ (8023a34 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 80239f6:	4810      	ldr	r0, [pc, #64]	@ (8023a38 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 80239f8:	f005 ffcc 	bl	8029994 <__aeabi_atexit>
 80239fc:	4c0f      	ldr	r4, [pc, #60]	@ (8023a3c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 80239fe:	7823      	ldrb	r3, [r4, #0]
 8023a00:	f3bf 8f5b 	dmb	ish
 8023a04:	07db      	lsls	r3, r3, #31
 8023a06:	d40b      	bmi.n	8023a20 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8023a08:	4620      	mov	r0, r4
 8023a0a:	f005 ffca 	bl	80299a2 <__cxa_guard_acquire>
 8023a0e:	b138      	cbz	r0, 8023a20 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8023a10:	4620      	mov	r0, r4
 8023a12:	f005 ffd2 	bl	80299ba <__cxa_guard_release>
 8023a16:	4a06      	ldr	r2, [pc, #24]	@ (8023a30 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8023a18:	4909      	ldr	r1, [pc, #36]	@ (8023a40 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8023a1a:	480a      	ldr	r0, [pc, #40]	@ (8023a44 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8023a1c:	f005 ffba 	bl	8029994 <__aeabi_atexit>
 8023a20:	4b05      	ldr	r3, [pc, #20]	@ (8023a38 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8023a22:	636b      	str	r3, [r5, #52]	@ 0x34
 8023a24:	4b07      	ldr	r3, [pc, #28]	@ (8023a44 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8023a26:	63ab      	str	r3, [r5, #56]	@ 0x38
 8023a28:	bd38      	pop	{r3, r4, r5, pc}
 8023a2a:	bf00      	nop
 8023a2c:	24013c2c 	.word	0x24013c2c
 8023a30:	24000000 	.word	0x24000000
 8023a34:	08020acf 	.word	0x08020acf
 8023a38:	2400005c 	.word	0x2400005c
 8023a3c:	24013c30 	.word	0x24013c30
 8023a40:	08020acd 	.word	0x08020acd
 8023a44:	24000060 	.word	0x24000060

08023a48 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8023a48:	b538      	push	{r3, r4, r5, lr}
 8023a4a:	4c15      	ldr	r4, [pc, #84]	@ (8023aa0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8023a4c:	4605      	mov	r5, r0
 8023a4e:	7823      	ldrb	r3, [r4, #0]
 8023a50:	f3bf 8f5b 	dmb	ish
 8023a54:	07da      	lsls	r2, r3, #31
 8023a56:	d40b      	bmi.n	8023a70 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8023a58:	4620      	mov	r0, r4
 8023a5a:	f005 ffa2 	bl	80299a2 <__cxa_guard_acquire>
 8023a5e:	b138      	cbz	r0, 8023a70 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8023a60:	4620      	mov	r0, r4
 8023a62:	f005 ffaa 	bl	80299ba <__cxa_guard_release>
 8023a66:	4a0f      	ldr	r2, [pc, #60]	@ (8023aa4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8023a68:	490f      	ldr	r1, [pc, #60]	@ (8023aa8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8023a6a:	4810      	ldr	r0, [pc, #64]	@ (8023aac <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8023a6c:	f005 ff92 	bl	8029994 <__aeabi_atexit>
 8023a70:	4c0f      	ldr	r4, [pc, #60]	@ (8023ab0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8023a72:	7823      	ldrb	r3, [r4, #0]
 8023a74:	f3bf 8f5b 	dmb	ish
 8023a78:	07db      	lsls	r3, r3, #31
 8023a7a:	d40b      	bmi.n	8023a94 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8023a7c:	4620      	mov	r0, r4
 8023a7e:	f005 ff90 	bl	80299a2 <__cxa_guard_acquire>
 8023a82:	b138      	cbz	r0, 8023a94 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8023a84:	4620      	mov	r0, r4
 8023a86:	f005 ff98 	bl	80299ba <__cxa_guard_release>
 8023a8a:	4a06      	ldr	r2, [pc, #24]	@ (8023aa4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8023a8c:	4909      	ldr	r1, [pc, #36]	@ (8023ab4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8023a8e:	480a      	ldr	r0, [pc, #40]	@ (8023ab8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8023a90:	f005 ff80 	bl	8029994 <__aeabi_atexit>
 8023a94:	4b05      	ldr	r3, [pc, #20]	@ (8023aac <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8023a96:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8023a98:	4b07      	ldr	r3, [pc, #28]	@ (8023ab8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8023a9a:	632b      	str	r3, [r5, #48]	@ 0x30
 8023a9c:	bd38      	pop	{r3, r4, r5, pc}
 8023a9e:	bf00      	nop
 8023aa0:	24013c04 	.word	0x24013c04
 8023aa4:	24000000 	.word	0x24000000
 8023aa8:	08020ad3 	.word	0x08020ad3
 8023aac:	24000034 	.word	0x24000034
 8023ab0:	24013c08 	.word	0x24013c08
 8023ab4:	08020ad1 	.word	0x08020ad1
 8023ab8:	24000038 	.word	0x24000038

08023abc <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8023abc:	b510      	push	{r4, lr}
 8023abe:	4604      	mov	r4, r0
 8023ac0:	f7ff ff88 	bl	80239d4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8023ac4:	4620      	mov	r0, r4
 8023ac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023aca:	f7ff bfbd 	b.w	8023a48 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08023ad0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8023ad0:	b538      	push	{r3, r4, r5, lr}
 8023ad2:	4c15      	ldr	r4, [pc, #84]	@ (8023b28 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8023ad4:	4605      	mov	r5, r0
 8023ad6:	7823      	ldrb	r3, [r4, #0]
 8023ad8:	f3bf 8f5b 	dmb	ish
 8023adc:	07da      	lsls	r2, r3, #31
 8023ade:	d40b      	bmi.n	8023af8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8023ae0:	4620      	mov	r0, r4
 8023ae2:	f005 ff5e 	bl	80299a2 <__cxa_guard_acquire>
 8023ae6:	b138      	cbz	r0, 8023af8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8023ae8:	4620      	mov	r0, r4
 8023aea:	f005 ff66 	bl	80299ba <__cxa_guard_release>
 8023aee:	4a0f      	ldr	r2, [pc, #60]	@ (8023b2c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8023af0:	490f      	ldr	r1, [pc, #60]	@ (8023b30 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8023af2:	4810      	ldr	r0, [pc, #64]	@ (8023b34 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8023af4:	f005 ff4e 	bl	8029994 <__aeabi_atexit>
 8023af8:	4c0f      	ldr	r4, [pc, #60]	@ (8023b38 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8023afa:	7823      	ldrb	r3, [r4, #0]
 8023afc:	f3bf 8f5b 	dmb	ish
 8023b00:	07db      	lsls	r3, r3, #31
 8023b02:	d40b      	bmi.n	8023b1c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8023b04:	4620      	mov	r0, r4
 8023b06:	f005 ff4c 	bl	80299a2 <__cxa_guard_acquire>
 8023b0a:	b138      	cbz	r0, 8023b1c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8023b0c:	4620      	mov	r0, r4
 8023b0e:	f005 ff54 	bl	80299ba <__cxa_guard_release>
 8023b12:	4a06      	ldr	r2, [pc, #24]	@ (8023b2c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8023b14:	4909      	ldr	r1, [pc, #36]	@ (8023b3c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8023b16:	480a      	ldr	r0, [pc, #40]	@ (8023b40 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8023b18:	f005 ff3c 	bl	8029994 <__aeabi_atexit>
 8023b1c:	4b05      	ldr	r3, [pc, #20]	@ (8023b34 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8023b1e:	646b      	str	r3, [r5, #68]	@ 0x44
 8023b20:	4b07      	ldr	r3, [pc, #28]	@ (8023b40 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8023b22:	64ab      	str	r3, [r5, #72]	@ 0x48
 8023b24:	bd38      	pop	{r3, r4, r5, pc}
 8023b26:	bf00      	nop
 8023b28:	24013c34 	.word	0x24013c34
 8023b2c:	24000000 	.word	0x24000000
 8023b30:	08020ac7 	.word	0x08020ac7
 8023b34:	24000064 	.word	0x24000064
 8023b38:	24013c38 	.word	0x24013c38
 8023b3c:	08020ac5 	.word	0x08020ac5
 8023b40:	24000068 	.word	0x24000068

08023b44 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8023b44:	b538      	push	{r3, r4, r5, lr}
 8023b46:	4c15      	ldr	r4, [pc, #84]	@ (8023b9c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8023b48:	4605      	mov	r5, r0
 8023b4a:	7823      	ldrb	r3, [r4, #0]
 8023b4c:	f3bf 8f5b 	dmb	ish
 8023b50:	07da      	lsls	r2, r3, #31
 8023b52:	d40b      	bmi.n	8023b6c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8023b54:	4620      	mov	r0, r4
 8023b56:	f005 ff24 	bl	80299a2 <__cxa_guard_acquire>
 8023b5a:	b138      	cbz	r0, 8023b6c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8023b5c:	4620      	mov	r0, r4
 8023b5e:	f005 ff2c 	bl	80299ba <__cxa_guard_release>
 8023b62:	4a0f      	ldr	r2, [pc, #60]	@ (8023ba0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8023b64:	490f      	ldr	r1, [pc, #60]	@ (8023ba4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8023b66:	4810      	ldr	r0, [pc, #64]	@ (8023ba8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8023b68:	f005 ff14 	bl	8029994 <__aeabi_atexit>
 8023b6c:	4c0f      	ldr	r4, [pc, #60]	@ (8023bac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8023b6e:	7823      	ldrb	r3, [r4, #0]
 8023b70:	f3bf 8f5b 	dmb	ish
 8023b74:	07db      	lsls	r3, r3, #31
 8023b76:	d40b      	bmi.n	8023b90 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8023b78:	4620      	mov	r0, r4
 8023b7a:	f005 ff12 	bl	80299a2 <__cxa_guard_acquire>
 8023b7e:	b138      	cbz	r0, 8023b90 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8023b80:	4620      	mov	r0, r4
 8023b82:	f005 ff1a 	bl	80299ba <__cxa_guard_release>
 8023b86:	4a06      	ldr	r2, [pc, #24]	@ (8023ba0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8023b88:	4909      	ldr	r1, [pc, #36]	@ (8023bb0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8023b8a:	480a      	ldr	r0, [pc, #40]	@ (8023bb4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8023b8c:	f005 ff02 	bl	8029994 <__aeabi_atexit>
 8023b90:	4b05      	ldr	r3, [pc, #20]	@ (8023ba8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8023b92:	63eb      	str	r3, [r5, #60]	@ 0x3c
 8023b94:	4b07      	ldr	r3, [pc, #28]	@ (8023bb4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8023b96:	642b      	str	r3, [r5, #64]	@ 0x40
 8023b98:	bd38      	pop	{r3, r4, r5, pc}
 8023b9a:	bf00      	nop
 8023b9c:	24013c14 	.word	0x24013c14
 8023ba0:	24000000 	.word	0x24000000
 8023ba4:	08020acb 	.word	0x08020acb
 8023ba8:	24000044 	.word	0x24000044
 8023bac:	24013c18 	.word	0x24013c18
 8023bb0:	08020ac9 	.word	0x08020ac9
 8023bb4:	24000048 	.word	0x24000048

08023bb8 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8023bb8:	b510      	push	{r4, lr}
 8023bba:	4604      	mov	r4, r0
 8023bbc:	f7ff ff88 	bl	8023ad0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8023bc0:	4620      	mov	r0, r4
 8023bc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023bc6:	f7ff bfbd 	b.w	8023b44 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08023bcc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8023bcc:	b538      	push	{r3, r4, r5, lr}
 8023bce:	4c15      	ldr	r4, [pc, #84]	@ (8023c24 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8023bd0:	4605      	mov	r5, r0
 8023bd2:	7823      	ldrb	r3, [r4, #0]
 8023bd4:	f3bf 8f5b 	dmb	ish
 8023bd8:	07da      	lsls	r2, r3, #31
 8023bda:	d40b      	bmi.n	8023bf4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8023bdc:	4620      	mov	r0, r4
 8023bde:	f005 fee0 	bl	80299a2 <__cxa_guard_acquire>
 8023be2:	b138      	cbz	r0, 8023bf4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8023be4:	4620      	mov	r0, r4
 8023be6:	f005 fee8 	bl	80299ba <__cxa_guard_release>
 8023bea:	4a0f      	ldr	r2, [pc, #60]	@ (8023c28 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8023bec:	490f      	ldr	r1, [pc, #60]	@ (8023c2c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8023bee:	4810      	ldr	r0, [pc, #64]	@ (8023c30 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8023bf0:	f005 fed0 	bl	8029994 <__aeabi_atexit>
 8023bf4:	4c0f      	ldr	r4, [pc, #60]	@ (8023c34 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8023bf6:	7823      	ldrb	r3, [r4, #0]
 8023bf8:	f3bf 8f5b 	dmb	ish
 8023bfc:	07db      	lsls	r3, r3, #31
 8023bfe:	d40b      	bmi.n	8023c18 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8023c00:	4620      	mov	r0, r4
 8023c02:	f005 fece 	bl	80299a2 <__cxa_guard_acquire>
 8023c06:	b138      	cbz	r0, 8023c18 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8023c08:	4620      	mov	r0, r4
 8023c0a:	f005 fed6 	bl	80299ba <__cxa_guard_release>
 8023c0e:	4a06      	ldr	r2, [pc, #24]	@ (8023c28 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8023c10:	4909      	ldr	r1, [pc, #36]	@ (8023c38 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8023c12:	480a      	ldr	r0, [pc, #40]	@ (8023c3c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8023c14:	f005 febe 	bl	8029994 <__aeabi_atexit>
 8023c18:	4b05      	ldr	r3, [pc, #20]	@ (8023c30 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8023c1a:	656b      	str	r3, [r5, #84]	@ 0x54
 8023c1c:	4b07      	ldr	r3, [pc, #28]	@ (8023c3c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8023c1e:	65ab      	str	r3, [r5, #88]	@ 0x58
 8023c20:	bd38      	pop	{r3, r4, r5, pc}
 8023c22:	bf00      	nop
 8023c24:	24013c0c 	.word	0x24013c0c
 8023c28:	24000000 	.word	0x24000000
 8023c2c:	08020abf 	.word	0x08020abf
 8023c30:	2400003c 	.word	0x2400003c
 8023c34:	24013c10 	.word	0x24013c10
 8023c38:	08020abd 	.word	0x08020abd
 8023c3c:	24000040 	.word	0x24000040

08023c40 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8023c40:	b538      	push	{r3, r4, r5, lr}
 8023c42:	4c15      	ldr	r4, [pc, #84]	@ (8023c98 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8023c44:	4605      	mov	r5, r0
 8023c46:	7823      	ldrb	r3, [r4, #0]
 8023c48:	f3bf 8f5b 	dmb	ish
 8023c4c:	07da      	lsls	r2, r3, #31
 8023c4e:	d40b      	bmi.n	8023c68 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8023c50:	4620      	mov	r0, r4
 8023c52:	f005 fea6 	bl	80299a2 <__cxa_guard_acquire>
 8023c56:	b138      	cbz	r0, 8023c68 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8023c58:	4620      	mov	r0, r4
 8023c5a:	f005 feae 	bl	80299ba <__cxa_guard_release>
 8023c5e:	4a0f      	ldr	r2, [pc, #60]	@ (8023c9c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8023c60:	490f      	ldr	r1, [pc, #60]	@ (8023ca0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8023c62:	4810      	ldr	r0, [pc, #64]	@ (8023ca4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8023c64:	f005 fe96 	bl	8029994 <__aeabi_atexit>
 8023c68:	4c0f      	ldr	r4, [pc, #60]	@ (8023ca8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8023c6a:	7823      	ldrb	r3, [r4, #0]
 8023c6c:	f3bf 8f5b 	dmb	ish
 8023c70:	07db      	lsls	r3, r3, #31
 8023c72:	d40b      	bmi.n	8023c8c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8023c74:	4620      	mov	r0, r4
 8023c76:	f005 fe94 	bl	80299a2 <__cxa_guard_acquire>
 8023c7a:	b138      	cbz	r0, 8023c8c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8023c7c:	4620      	mov	r0, r4
 8023c7e:	f005 fe9c 	bl	80299ba <__cxa_guard_release>
 8023c82:	4a06      	ldr	r2, [pc, #24]	@ (8023c9c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8023c84:	4909      	ldr	r1, [pc, #36]	@ (8023cac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8023c86:	480a      	ldr	r0, [pc, #40]	@ (8023cb0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8023c88:	f005 fe84 	bl	8029994 <__aeabi_atexit>
 8023c8c:	4b05      	ldr	r3, [pc, #20]	@ (8023ca4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8023c8e:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8023c90:	4b07      	ldr	r3, [pc, #28]	@ (8023cb0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8023c92:	652b      	str	r3, [r5, #80]	@ 0x50
 8023c94:	bd38      	pop	{r3, r4, r5, pc}
 8023c96:	bf00      	nop
 8023c98:	24013bfc 	.word	0x24013bfc
 8023c9c:	24000000 	.word	0x24000000
 8023ca0:	08020ac3 	.word	0x08020ac3
 8023ca4:	2400002c 	.word	0x2400002c
 8023ca8:	24013c00 	.word	0x24013c00
 8023cac:	08020ac1 	.word	0x08020ac1
 8023cb0:	24000030 	.word	0x24000030

08023cb4 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8023cb4:	b510      	push	{r4, lr}
 8023cb6:	4604      	mov	r4, r0
 8023cb8:	f7ff ff88 	bl	8023bcc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8023cbc:	4620      	mov	r0, r4
 8023cbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023cc2:	f7ff bfbd 	b.w	8023c40 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08023cc6 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8023cc6:	b510      	push	{r4, lr}
 8023cc8:	4604      	mov	r4, r0
 8023cca:	f7ff fff3 	bl	8023cb4 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 8023cce:	4620      	mov	r0, r4
 8023cd0:	f7ff ff72 	bl	8023bb8 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8023cd4:	4620      	mov	r0, r4
 8023cd6:	f7ff fe73 	bl	80239c0 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8023cda:	4620      	mov	r0, r4
 8023cdc:	f7ff fdf2 	bl	80238c4 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8023ce0:	4620      	mov	r0, r4
 8023ce2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023ce6:	f7ff bee9 	b.w	8023abc <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

08023cec <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>:
 8023cec:	b538      	push	{r3, r4, r5, lr}
 8023cee:	4c0b      	ldr	r4, [pc, #44]	@ (8023d1c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x30>)
 8023cf0:	4605      	mov	r5, r0
 8023cf2:	7823      	ldrb	r3, [r4, #0]
 8023cf4:	f3bf 8f5b 	dmb	ish
 8023cf8:	07db      	lsls	r3, r3, #31
 8023cfa:	d40b      	bmi.n	8023d14 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 8023cfc:	4620      	mov	r0, r4
 8023cfe:	f005 fe50 	bl	80299a2 <__cxa_guard_acquire>
 8023d02:	b138      	cbz	r0, 8023d14 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 8023d04:	4620      	mov	r0, r4
 8023d06:	f005 fe58 	bl	80299ba <__cxa_guard_release>
 8023d0a:	4a05      	ldr	r2, [pc, #20]	@ (8023d20 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x34>)
 8023d0c:	4905      	ldr	r1, [pc, #20]	@ (8023d24 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x38>)
 8023d0e:	4806      	ldr	r0, [pc, #24]	@ (8023d28 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 8023d10:	f005 fe40 	bl	8029994 <__aeabi_atexit>
 8023d14:	4b04      	ldr	r3, [pc, #16]	@ (8023d28 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 8023d16:	65eb      	str	r3, [r5, #92]	@ 0x5c
 8023d18:	bd38      	pop	{r3, r4, r5, pc}
 8023d1a:	bf00      	nop
 8023d1c:	24013bf0 	.word	0x24013bf0
 8023d20:	24000000 	.word	0x24000000
 8023d24:	08020abb 	.word	0x08020abb
 8023d28:	24000024 	.word	0x24000024

08023d2c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>:
 8023d2c:	b538      	push	{r3, r4, r5, lr}
 8023d2e:	4c0b      	ldr	r4, [pc, #44]	@ (8023d5c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x30>)
 8023d30:	4605      	mov	r5, r0
 8023d32:	7823      	ldrb	r3, [r4, #0]
 8023d34:	f3bf 8f5b 	dmb	ish
 8023d38:	07db      	lsls	r3, r3, #31
 8023d3a:	d40b      	bmi.n	8023d54 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 8023d3c:	4620      	mov	r0, r4
 8023d3e:	f005 fe30 	bl	80299a2 <__cxa_guard_acquire>
 8023d42:	b138      	cbz	r0, 8023d54 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 8023d44:	4620      	mov	r0, r4
 8023d46:	f005 fe38 	bl	80299ba <__cxa_guard_release>
 8023d4a:	4a05      	ldr	r2, [pc, #20]	@ (8023d60 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x34>)
 8023d4c:	4905      	ldr	r1, [pc, #20]	@ (8023d64 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x38>)
 8023d4e:	4806      	ldr	r0, [pc, #24]	@ (8023d68 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 8023d50:	f005 fe20 	bl	8029994 <__aeabi_atexit>
 8023d54:	4b04      	ldr	r3, [pc, #16]	@ (8023d68 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 8023d56:	662b      	str	r3, [r5, #96]	@ 0x60
 8023d58:	bd38      	pop	{r3, r4, r5, pc}
 8023d5a:	bf00      	nop
 8023d5c:	24013bf4 	.word	0x24013bf4
 8023d60:	24000000 	.word	0x24000000
 8023d64:	08020ab9 	.word	0x08020ab9
 8023d68:	24000028 	.word	0x24000028

08023d6c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>:
 8023d6c:	b570      	push	{r4, r5, r6, lr}
 8023d6e:	4d0c      	ldr	r5, [pc, #48]	@ (8023da0 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x34>)
 8023d70:	4606      	mov	r6, r0
 8023d72:	4c0c      	ldr	r4, [pc, #48]	@ (8023da4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x38>)
 8023d74:	782b      	ldrb	r3, [r5, #0]
 8023d76:	f3bf 8f5b 	dmb	ish
 8023d7a:	f013 0f01 	tst.w	r3, #1
 8023d7e:	d10d      	bne.n	8023d9c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 8023d80:	4628      	mov	r0, r5
 8023d82:	f005 fe0e 	bl	80299a2 <__cxa_guard_acquire>
 8023d86:	b148      	cbz	r0, 8023d9c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 8023d88:	4b07      	ldr	r3, [pc, #28]	@ (8023da8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 8023d8a:	4628      	mov	r0, r5
 8023d8c:	6023      	str	r3, [r4, #0]
 8023d8e:	f005 fe14 	bl	80299ba <__cxa_guard_release>
 8023d92:	4a06      	ldr	r2, [pc, #24]	@ (8023dac <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x40>)
 8023d94:	4620      	mov	r0, r4
 8023d96:	4906      	ldr	r1, [pc, #24]	@ (8023db0 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x44>)
 8023d98:	f005 fdfc 	bl	8029994 <__aeabi_atexit>
 8023d9c:	6674      	str	r4, [r6, #100]	@ 0x64
 8023d9e:	bd70      	pop	{r4, r5, r6, pc}
 8023da0:	24013bf8 	.word	0x24013bf8
 8023da4:	24013d50 	.word	0x24013d50
 8023da8:	0802d000 	.word	0x0802d000
 8023dac:	24000000 	.word	0x24000000
 8023db0:	08020ab7 	.word	0x08020ab7

08023db4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>:
 8023db4:	b510      	push	{r4, lr}
 8023db6:	4604      	mov	r4, r0
 8023db8:	f7ff ff98 	bl	8023cec <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>
 8023dbc:	4620      	mov	r0, r4
 8023dbe:	f7ff ffb5 	bl	8023d2c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>
 8023dc2:	4620      	mov	r0, r4
 8023dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023dc8:	f7ff bfd0 	b.w	8023d6c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>

08023dcc <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>:
 8023dcc:	b570      	push	{r4, r5, r6, lr}
 8023dce:	4d0c      	ldr	r5, [pc, #48]	@ (8023e00 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x34>)
 8023dd0:	4606      	mov	r6, r0
 8023dd2:	4c0c      	ldr	r4, [pc, #48]	@ (8023e04 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x38>)
 8023dd4:	782b      	ldrb	r3, [r5, #0]
 8023dd6:	f3bf 8f5b 	dmb	ish
 8023dda:	f013 0f01 	tst.w	r3, #1
 8023dde:	d10d      	bne.n	8023dfc <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 8023de0:	4628      	mov	r0, r5
 8023de2:	f005 fdde 	bl	80299a2 <__cxa_guard_acquire>
 8023de6:	b148      	cbz	r0, 8023dfc <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 8023de8:	4b07      	ldr	r3, [pc, #28]	@ (8023e08 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x3c>)
 8023dea:	4628      	mov	r0, r5
 8023dec:	6023      	str	r3, [r4, #0]
 8023dee:	f005 fde4 	bl	80299ba <__cxa_guard_release>
 8023df2:	4a06      	ldr	r2, [pc, #24]	@ (8023e0c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x40>)
 8023df4:	4620      	mov	r0, r4
 8023df6:	4906      	ldr	r1, [pc, #24]	@ (8023e10 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x44>)
 8023df8:	f005 fdcc 	bl	8029994 <__aeabi_atexit>
 8023dfc:	66b4      	str	r4, [r6, #104]	@ 0x68
 8023dfe:	bd70      	pop	{r4, r5, r6, pc}
 8023e00:	24013bec 	.word	0x24013bec
 8023e04:	24013c4c 	.word	0x24013c4c
 8023e08:	0802d018 	.word	0x0802d018
 8023e0c:	24000000 	.word	0x24000000
 8023e10:	08020ab5 	.word	0x08020ab5

08023e14 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8023e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e18:	b087      	sub	sp, #28
 8023e1a:	788d      	ldrb	r5, [r1, #2]
 8023e1c:	f891 9000 	ldrb.w	r9, [r1]
 8023e20:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 8023e24:	9501      	str	r5, [sp, #4]
 8023e26:	784d      	ldrb	r5, [r1, #1]
 8023e28:	9203      	str	r2, [sp, #12]
 8023e2a:	9502      	str	r5, [sp, #8]
 8023e2c:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 8023e30:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 8023e34:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 8023e38:	f89d e058 	ldrb.w	lr, [sp, #88]	@ 0x58
 8023e3c:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 8023e40:	fb06 0708 	mla	r7, r6, r8, r0
 8023e44:	2e00      	cmp	r6, #0
 8023e46:	eb02 0a07 	add.w	sl, r2, r7
 8023e4a:	ea4f 2205 	mov.w	r2, r5, lsl #8
 8023e4e:	9d01      	ldr	r5, [sp, #4]
 8023e50:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8023e54:	ea45 0509 	orr.w	r5, r5, r9
 8023e58:	9505      	str	r5, [sp, #20]
 8023e5a:	f2c0 80b2 	blt.w	8023fc2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8023e5e:	45b3      	cmp	fp, r6
 8023e60:	f340 80af 	ble.w	8023fc2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8023e64:	2800      	cmp	r0, #0
 8023e66:	f2c0 80aa 	blt.w	8023fbe <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8023e6a:	4580      	cmp	r8, r0
 8023e6c:	f340 80a7 	ble.w	8023fbe <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8023e70:	9a03      	ldr	r2, [sp, #12]
 8023e72:	5dd7      	ldrb	r7, [r2, r7]
 8023e74:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023e78:	441f      	add	r7, r3
 8023e7a:	1c42      	adds	r2, r0, #1
 8023e7c:	f100 80a4 	bmi.w	8023fc8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8023e80:	4590      	cmp	r8, r2
 8023e82:	f340 80a1 	ble.w	8023fc8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8023e86:	2c00      	cmp	r4, #0
 8023e88:	f000 809e 	beq.w	8023fc8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8023e8c:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8023e90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023e94:	441d      	add	r5, r3
 8023e96:	3601      	adds	r6, #1
 8023e98:	f100 809a 	bmi.w	8023fd0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8023e9c:	45b3      	cmp	fp, r6
 8023e9e:	f340 8097 	ble.w	8023fd0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8023ea2:	f1bc 0f00 	cmp.w	ip, #0
 8023ea6:	f000 8093 	beq.w	8023fd0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8023eaa:	2800      	cmp	r0, #0
 8023eac:	f2c0 808e 	blt.w	8023fcc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8023eb0:	4580      	cmp	r8, r0
 8023eb2:	f340 808b 	ble.w	8023fcc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8023eb6:	f81a 6008 	ldrb.w	r6, [sl, r8]
 8023eba:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023ebe:	441e      	add	r6, r3
 8023ec0:	3001      	adds	r0, #1
 8023ec2:	f100 8088 	bmi.w	8023fd6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8023ec6:	4580      	cmp	r8, r0
 8023ec8:	f340 8085 	ble.w	8023fd6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8023ecc:	2c00      	cmp	r4, #0
 8023ece:	f000 8082 	beq.w	8023fd6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8023ed2:	44d0      	add	r8, sl
 8023ed4:	f898 2001 	ldrb.w	r2, [r8, #1]
 8023ed8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023edc:	4413      	add	r3, r2
 8023ede:	b2a4      	uxth	r4, r4
 8023ee0:	f895 a000 	ldrb.w	sl, [r5]
 8023ee4:	fa1f fc8c 	uxth.w	ip, ip
 8023ee8:	fb04 fb0c 	mul.w	fp, r4, ip
 8023eec:	0124      	lsls	r4, r4, #4
 8023eee:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 8023ef2:	f5c4 7880 	rsb	r8, r4, #256	@ 0x100
 8023ef6:	eba4 040b 	sub.w	r4, r4, fp
 8023efa:	fa1f f08c 	uxth.w	r0, ip
 8023efe:	b2a2      	uxth	r2, r4
 8023f00:	783c      	ldrb	r4, [r7, #0]
 8023f02:	eba8 0800 	sub.w	r8, r8, r0
 8023f06:	fa1f fc8e 	uxth.w	ip, lr
 8023f0a:	fb02 fa0a 	mul.w	sl, r2, sl
 8023f0e:	ea6f 0e0e 	mvn.w	lr, lr
 8023f12:	fa1f f888 	uxth.w	r8, r8
 8023f16:	fa5f fe8e 	uxtb.w	lr, lr
 8023f1a:	fb08 aa04 	mla	sl, r8, r4, sl
 8023f1e:	7834      	ldrb	r4, [r6, #0]
 8023f20:	fb19 f90e 	smulbb	r9, r9, lr
 8023f24:	fb00 aa04 	mla	sl, r0, r4, sl
 8023f28:	781c      	ldrb	r4, [r3, #0]
 8023f2a:	fb0b a404 	mla	r4, fp, r4, sl
 8023f2e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8023f32:	fb04 990c 	mla	r9, r4, ip, r9
 8023f36:	fa1f f989 	uxth.w	r9, r9
 8023f3a:	f109 0401 	add.w	r4, r9, #1
 8023f3e:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8023f42:	ea4f 2929 	mov.w	r9, r9, asr #8
 8023f46:	f881 9000 	strb.w	r9, [r1]
 8023f4a:	f895 9001 	ldrb.w	r9, [r5, #1]
 8023f4e:	787c      	ldrb	r4, [r7, #1]
 8023f50:	fb02 f909 	mul.w	r9, r2, r9
 8023f54:	fb08 9904 	mla	r9, r8, r4, r9
 8023f58:	7874      	ldrb	r4, [r6, #1]
 8023f5a:	fb00 9904 	mla	r9, r0, r4, r9
 8023f5e:	785c      	ldrb	r4, [r3, #1]
 8023f60:	fb0b 9404 	mla	r4, fp, r4, r9
 8023f64:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 8023f68:	9c02      	ldr	r4, [sp, #8]
 8023f6a:	fb14 f90e 	smulbb	r9, r4, lr
 8023f6e:	fb0a 940c 	mla	r4, sl, ip, r9
 8023f72:	b2a4      	uxth	r4, r4
 8023f74:	f104 0901 	add.w	r9, r4, #1
 8023f78:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 8023f7c:	1224      	asrs	r4, r4, #8
 8023f7e:	704c      	strb	r4, [r1, #1]
 8023f80:	78ad      	ldrb	r5, [r5, #2]
 8023f82:	78bc      	ldrb	r4, [r7, #2]
 8023f84:	436a      	muls	r2, r5
 8023f86:	789b      	ldrb	r3, [r3, #2]
 8023f88:	fb08 2204 	mla	r2, r8, r4, r2
 8023f8c:	78b4      	ldrb	r4, [r6, #2]
 8023f8e:	fb00 2004 	mla	r0, r0, r4, r2
 8023f92:	fb0b 0b03 	mla	fp, fp, r3, r0
 8023f96:	9b01      	ldr	r3, [sp, #4]
 8023f98:	fb13 fe0e 	smulbb	lr, r3, lr
 8023f9c:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8023fa0:	fb0b ec0c 	mla	ip, fp, ip, lr
 8023fa4:	fa1f fc8c 	uxth.w	ip, ip
 8023fa8:	f10c 0e01 	add.w	lr, ip, #1
 8023fac:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 8023fb0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8023fb4:	f881 c002 	strb.w	ip, [r1, #2]
 8023fb8:	b007      	add	sp, #28
 8023fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023fbe:	af05      	add	r7, sp, #20
 8023fc0:	e75b      	b.n	8023e7a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 8023fc2:	ad05      	add	r5, sp, #20
 8023fc4:	462f      	mov	r7, r5
 8023fc6:	e766      	b.n	8023e96 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8023fc8:	ad05      	add	r5, sp, #20
 8023fca:	e764      	b.n	8023e96 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8023fcc:	ae05      	add	r6, sp, #20
 8023fce:	e777      	b.n	8023ec0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 8023fd0:	ab05      	add	r3, sp, #20
 8023fd2:	461e      	mov	r6, r3
 8023fd4:	e783      	b.n	8023ede <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 8023fd6:	ab05      	add	r3, sp, #20
 8023fd8:	e781      	b.n	8023ede <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

08023fda <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023fda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023fde:	b093      	sub	sp, #76	@ 0x4c
 8023fe0:	9210      	str	r2, [sp, #64]	@ 0x40
 8023fe2:	9309      	str	r3, [sp, #36]	@ 0x24
 8023fe4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8023fe6:	f89d 3094 	ldrb.w	r3, [sp, #148]	@ 0x94
 8023fea:	9011      	str	r0, [sp, #68]	@ 0x44
 8023fec:	930e      	str	r3, [sp, #56]	@ 0x38
 8023fee:	6850      	ldr	r0, [r2, #4]
 8023ff0:	910d      	str	r1, [sp, #52]	@ 0x34
 8023ff2:	6812      	ldr	r2, [r2, #0]
 8023ff4:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 8023ff8:	fb00 1303 	mla	r3, r0, r3, r1
 8023ffc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024000:	18d3      	adds	r3, r2, r3
 8024002:	930a      	str	r3, [sp, #40]	@ 0x28
 8024004:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024006:	681b      	ldr	r3, [r3, #0]
 8024008:	930c      	str	r3, [sp, #48]	@ 0x30
 802400a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802400c:	685c      	ldr	r4, [r3, #4]
 802400e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024010:	3404      	adds	r4, #4
 8024012:	43db      	mvns	r3, r3
 8024014:	b2db      	uxtb	r3, r3
 8024016:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024018:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802401a:	2b00      	cmp	r3, #0
 802401c:	dc03      	bgt.n	8024026 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 802401e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024020:	2b00      	cmp	r3, #0
 8024022:	f340 8250 	ble.w	80244c6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8024026:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024028:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802402c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024030:	1e48      	subs	r0, r1, #1
 8024032:	1e55      	subs	r5, r2, #1
 8024034:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024036:	2b00      	cmp	r3, #0
 8024038:	f340 80ee 	ble.w	8024218 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 802403c:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 802403e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8024040:	1436      	asrs	r6, r6, #16
 8024042:	ea4f 4323 	mov.w	r3, r3, asr #16
 8024046:	d406      	bmi.n	8024056 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8024048:	4286      	cmp	r6, r0
 802404a:	da04      	bge.n	8024056 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802404c:	2b00      	cmp	r3, #0
 802404e:	db02      	blt.n	8024056 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8024050:	42ab      	cmp	r3, r5
 8024052:	f2c0 80e2 	blt.w	802421a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8024056:	3601      	adds	r6, #1
 8024058:	f100 80cf 	bmi.w	80241fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 802405c:	42b1      	cmp	r1, r6
 802405e:	f2c0 80cc 	blt.w	80241fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8024062:	3301      	adds	r3, #1
 8024064:	f100 80c9 	bmi.w	80241fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8024068:	429a      	cmp	r2, r3
 802406a:	f2c0 80c6 	blt.w	80241fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 802406e:	e9dd b609 	ldrd	fp, r6, [sp, #36]	@ 0x24
 8024072:	f1bb 0f00 	cmp.w	fp, #0
 8024076:	f340 80f1 	ble.w	802425c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 802407a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802407c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 802407e:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8024080:	141d      	asrs	r5, r3, #16
 8024082:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024084:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8024088:	68c7      	ldr	r7, [r0, #12]
 802408a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802408c:	1418      	asrs	r0, r3, #16
 802408e:	f3c3 3803 	ubfx	r8, r3, #12, #4
 8024092:	6892      	ldr	r2, [r2, #8]
 8024094:	f100 8137 	bmi.w	8024306 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8024098:	f102 3cff 	add.w	ip, r2, #4294967295
 802409c:	4560      	cmp	r0, ip
 802409e:	f280 8132 	bge.w	8024306 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80240a2:	2d00      	cmp	r5, #0
 80240a4:	f2c0 812f 	blt.w	8024306 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80240a8:	f107 3cff 	add.w	ip, r7, #4294967295
 80240ac:	4565      	cmp	r5, ip
 80240ae:	f280 812a 	bge.w	8024306 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80240b2:	b212      	sxth	r2, r2
 80240b4:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80240b6:	fb05 0002 	mla	r0, r5, r2, r0
 80240ba:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80240bc:	f817 c000 	ldrb.w	ip, [r7, r0]
 80240c0:	4405      	add	r5, r0
 80240c2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80240c6:	eb04 0e0c 	add.w	lr, r4, ip
 80240ca:	f1b8 0f00 	cmp.w	r8, #0
 80240ce:	f000 810c 	beq.w	80242ea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 80240d2:	786f      	ldrb	r7, [r5, #1]
 80240d4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80240d8:	4427      	add	r7, r4
 80240da:	2900      	cmp	r1, #0
 80240dc:	f000 810d 	beq.w	80242fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 80240e0:	18a8      	adds	r0, r5, r2
 80240e2:	5caa      	ldrb	r2, [r5, r2]
 80240e4:	7840      	ldrb	r0, [r0, #1]
 80240e6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80240ea:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80240ee:	4422      	add	r2, r4
 80240f0:	4420      	add	r0, r4
 80240f2:	fa1f f388 	uxth.w	r3, r8
 80240f6:	f814 a00c 	ldrb.w	sl, [r4, ip]
 80240fa:	b289      	uxth	r1, r1
 80240fc:	f897 c000 	ldrb.w	ip, [r7]
 8024100:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8024104:	fb03 f901 	mul.w	r9, r3, r1
 8024108:	011b      	lsls	r3, r3, #4
 802410a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802410e:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 8024112:	eba3 0309 	sub.w	r3, r3, r9
 8024116:	b289      	uxth	r1, r1
 8024118:	b29b      	uxth	r3, r3
 802411a:	eba8 0801 	sub.w	r8, r8, r1
 802411e:	fb03 fc0c 	mul.w	ip, r3, ip
 8024122:	fa1f f888 	uxth.w	r8, r8
 8024126:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024128:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802412a:	fb08 cc0a 	mla	ip, r8, sl, ip
 802412e:	f892 a000 	ldrb.w	sl, [r2]
 8024132:	fb01 cc0a 	mla	ip, r1, sl, ip
 8024136:	f890 a000 	ldrb.w	sl, [r0]
 802413a:	fb09 cc0a 	mla	ip, r9, sl, ip
 802413e:	f896 a000 	ldrb.w	sl, [r6]
 8024142:	fb1a fa03 	smulbb	sl, sl, r3
 8024146:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 802414a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802414c:	fb0c ac05 	mla	ip, ip, r5, sl
 8024150:	fa1f fc8c 	uxth.w	ip, ip
 8024154:	f10c 0a01 	add.w	sl, ip, #1
 8024158:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 802415c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8024160:	f886 a000 	strb.w	sl, [r6]
 8024164:	f897 c001 	ldrb.w	ip, [r7, #1]
 8024168:	f89e a001 	ldrb.w	sl, [lr, #1]
 802416c:	fb03 fc0c 	mul.w	ip, r3, ip
 8024170:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024172:	fb08 cc0a 	mla	ip, r8, sl, ip
 8024176:	f892 a001 	ldrb.w	sl, [r2, #1]
 802417a:	fb01 cc0a 	mla	ip, r1, sl, ip
 802417e:	f890 a001 	ldrb.w	sl, [r0, #1]
 8024182:	fb09 cc0a 	mla	ip, r9, sl, ip
 8024186:	f896 a001 	ldrb.w	sl, [r6, #1]
 802418a:	fb1a fa03 	smulbb	sl, sl, r3
 802418e:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8024192:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024194:	fb0c ac05 	mla	ip, ip, r5, sl
 8024198:	fa1f fc8c 	uxth.w	ip, ip
 802419c:	f10c 0a01 	add.w	sl, ip, #1
 80241a0:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 80241a4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80241a8:	f886 c001 	strb.w	ip, [r6, #1]
 80241ac:	78bf      	ldrb	r7, [r7, #2]
 80241ae:	f89e c002 	ldrb.w	ip, [lr, #2]
 80241b2:	437b      	muls	r3, r7
 80241b4:	fb08 330c 	mla	r3, r8, ip, r3
 80241b8:	f892 c002 	ldrb.w	ip, [r2, #2]
 80241bc:	7882      	ldrb	r2, [r0, #2]
 80241be:	fb01 310c 	mla	r1, r1, ip, r3
 80241c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80241c4:	fb09 1902 	mla	r9, r9, r2, r1
 80241c8:	78b1      	ldrb	r1, [r6, #2]
 80241ca:	fb11 f103 	smulbb	r1, r1, r3
 80241ce:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80241d2:	fb09 1505 	mla	r5, r9, r5, r1
 80241d6:	b2ad      	uxth	r5, r5
 80241d8:	1c6b      	adds	r3, r5, #1
 80241da:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80241de:	122d      	asrs	r5, r5, #8
 80241e0:	70b5      	strb	r5, [r6, #2]
 80241e2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80241e4:	3603      	adds	r6, #3
 80241e6:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 80241e8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80241ec:	4413      	add	r3, r2
 80241ee:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80241f0:	931d      	str	r3, [sp, #116]	@ 0x74
 80241f2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80241f4:	4413      	add	r3, r2
 80241f6:	931e      	str	r3, [sp, #120]	@ 0x78
 80241f8:	e73b      	b.n	8024072 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80241fa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80241fc:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 80241fe:	4433      	add	r3, r6
 8024200:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8024202:	931d      	str	r3, [sp, #116]	@ 0x74
 8024204:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8024206:	4433      	add	r3, r6
 8024208:	931e      	str	r3, [sp, #120]	@ 0x78
 802420a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802420c:	3b01      	subs	r3, #1
 802420e:	9309      	str	r3, [sp, #36]	@ 0x24
 8024210:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024212:	3303      	adds	r3, #3
 8024214:	930a      	str	r3, [sp, #40]	@ 0x28
 8024216:	e70d      	b.n	8024034 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8024218:	d028      	beq.n	802426c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 802421a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802421c:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 802421e:	3b01      	subs	r3, #1
 8024220:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8024222:	fb00 5003 	mla	r0, r0, r3, r5
 8024226:	1400      	asrs	r0, r0, #16
 8024228:	f53f af21 	bmi.w	802406e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802422c:	3901      	subs	r1, #1
 802422e:	4288      	cmp	r0, r1
 8024230:	f6bf af1d 	bge.w	802406e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024234:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8024236:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8024238:	fb01 0303 	mla	r3, r1, r3, r0
 802423c:	141b      	asrs	r3, r3, #16
 802423e:	f53f af16 	bmi.w	802406e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024242:	3a01      	subs	r2, #1
 8024244:	4293      	cmp	r3, r2
 8024246:	f6bf af12 	bge.w	802406e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802424a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802424c:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 8024250:	1cdf      	adds	r7, r3, #3
 8024252:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 8024256:	f1b9 0f00 	cmp.w	r9, #0
 802425a:	dc73      	bgt.n	8024344 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 802425c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802425e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024260:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024264:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024268:	441a      	add	r2, r3
 802426a:	920a      	str	r2, [sp, #40]	@ 0x28
 802426c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802426e:	2b00      	cmp	r3, #0
 8024270:	f340 8129 	ble.w	80244c6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8024274:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8024278:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802427a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802427e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024282:	eef0 6a62 	vmov.f32	s13, s5
 8024286:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802428a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802428e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024292:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 8024296:	eef0 6a43 	vmov.f32	s13, s6
 802429a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802429e:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 80242a2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80242a6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80242aa:	ee77 2a62 	vsub.f32	s5, s14, s5
 80242ae:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80242b2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80242b6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80242ba:	ee12 2a90 	vmov	r2, s5
 80242be:	eef0 2a47 	vmov.f32	s5, s14
 80242c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80242c6:	ee13 2a10 	vmov	r2, s6
 80242ca:	931f      	str	r3, [sp, #124]	@ 0x7c
 80242cc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80242ce:	eeb0 3a67 	vmov.f32	s6, s15
 80242d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80242d6:	9320      	str	r3, [sp, #128]	@ 0x80
 80242d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80242da:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80242dc:	3b01      	subs	r3, #1
 80242de:	930d      	str	r3, [sp, #52]	@ 0x34
 80242e0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80242e2:	bf08      	it	eq
 80242e4:	4613      	moveq	r3, r2
 80242e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80242e8:	e696      	b.n	8024018 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80242ea:	b149      	cbz	r1, 8024300 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 80242ec:	5caa      	ldrb	r2, [r5, r2]
 80242ee:	4670      	mov	r0, lr
 80242f0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80242f4:	4422      	add	r2, r4
 80242f6:	4677      	mov	r7, lr
 80242f8:	e6fb      	b.n	80240f2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80242fa:	4670      	mov	r0, lr
 80242fc:	4672      	mov	r2, lr
 80242fe:	e6f8      	b.n	80240f2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8024300:	4670      	mov	r0, lr
 8024302:	4672      	mov	r2, lr
 8024304:	e7f7      	b.n	80242f6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8024306:	f110 0c01 	adds.w	ip, r0, #1
 802430a:	f53f af6a 	bmi.w	80241e2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 802430e:	4562      	cmp	r2, ip
 8024310:	f6ff af67 	blt.w	80241e2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8024314:	f115 0c01 	adds.w	ip, r5, #1
 8024318:	f53f af63 	bmi.w	80241e2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 802431c:	4567      	cmp	r7, ip
 802431e:	f6ff af60 	blt.w	80241e2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8024322:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024324:	b23f      	sxth	r7, r7
 8024326:	b212      	sxth	r2, r2
 8024328:	9002      	str	r0, [sp, #8]
 802432a:	9701      	str	r7, [sp, #4]
 802432c:	9200      	str	r2, [sp, #0]
 802432e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8024330:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024332:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8024336:	e9cd 5803 	strd	r5, r8, [sp, #12]
 802433a:	4623      	mov	r3, r4
 802433c:	4631      	mov	r1, r6
 802433e:	f7ff fd69 	bl	8023e14 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8024342:	e74e      	b.n	80241e2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8024344:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8024346:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8024348:	f3c2 3103 	ubfx	r1, r2, #12, #4
 802434c:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 802434e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8024350:	1400      	asrs	r0, r0, #16
 8024352:	142d      	asrs	r5, r5, #16
 8024354:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024356:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 802435a:	f3c3 3303 	ubfx	r3, r3, #12, #4
 802435e:	fb02 5000 	mla	r0, r2, r0, r5
 8024362:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8024364:	f815 e000 	ldrb.w	lr, [r5, r0]
 8024368:	eb05 0c00 	add.w	ip, r5, r0
 802436c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8024370:	eb04 060e 	add.w	r6, r4, lr
 8024374:	2b00      	cmp	r3, #0
 8024376:	f000 8097 	beq.w	80244a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 802437a:	f89c 5001 	ldrb.w	r5, [ip, #1]
 802437e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024382:	4425      	add	r5, r4
 8024384:	2900      	cmp	r1, #0
 8024386:	f000 8098 	beq.w	80244ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 802438a:	eb0c 0002 	add.w	r0, ip, r2
 802438e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8024392:	7840      	ldrb	r0, [r0, #1]
 8024394:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024398:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802439c:	4422      	add	r2, r4
 802439e:	4420      	add	r0, r4
 80243a0:	b29b      	uxth	r3, r3
 80243a2:	f814 b00e 	ldrb.w	fp, [r4, lr]
 80243a6:	b289      	uxth	r1, r1
 80243a8:	f895 e000 	ldrb.w	lr, [r5]
 80243ac:	3703      	adds	r7, #3
 80243ae:	f109 39ff 	add.w	r9, r9, #4294967295
 80243b2:	fb03 f801 	mul.w	r8, r3, r1
 80243b6:	011b      	lsls	r3, r3, #4
 80243b8:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 80243bc:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 80243c0:	eba3 0308 	sub.w	r3, r3, r8
 80243c4:	b289      	uxth	r1, r1
 80243c6:	b29b      	uxth	r3, r3
 80243c8:	ebac 0c01 	sub.w	ip, ip, r1
 80243cc:	fb03 fe0e 	mul.w	lr, r3, lr
 80243d0:	fa1f fc8c 	uxth.w	ip, ip
 80243d4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80243d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80243d8:	fb0c ee0b 	mla	lr, ip, fp, lr
 80243dc:	f892 b000 	ldrb.w	fp, [r2]
 80243e0:	fb01 ee0b 	mla	lr, r1, fp, lr
 80243e4:	f890 b000 	ldrb.w	fp, [r0]
 80243e8:	fb08 ee0b 	mla	lr, r8, fp, lr
 80243ec:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 80243f0:	fb1b fb03 	smulbb	fp, fp, r3
 80243f4:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80243f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80243fa:	fb0e be0a 	mla	lr, lr, sl, fp
 80243fe:	fa1f fe8e 	uxth.w	lr, lr
 8024402:	f10e 0b01 	add.w	fp, lr, #1
 8024406:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 802440a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802440e:	f807 ec06 	strb.w	lr, [r7, #-6]
 8024412:	f895 e001 	ldrb.w	lr, [r5, #1]
 8024416:	f896 b001 	ldrb.w	fp, [r6, #1]
 802441a:	fb03 fe0e 	mul.w	lr, r3, lr
 802441e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024420:	fb0c ee0b 	mla	lr, ip, fp, lr
 8024424:	f892 b001 	ldrb.w	fp, [r2, #1]
 8024428:	fb01 ee0b 	mla	lr, r1, fp, lr
 802442c:	f890 b001 	ldrb.w	fp, [r0, #1]
 8024430:	fb08 ee0b 	mla	lr, r8, fp, lr
 8024434:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 8024438:	fb1b fb03 	smulbb	fp, fp, r3
 802443c:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8024440:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024442:	fb0e be0a 	mla	lr, lr, sl, fp
 8024446:	fa1f fe8e 	uxth.w	lr, lr
 802444a:	f10e 0b01 	add.w	fp, lr, #1
 802444e:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8024452:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8024456:	f807 ec05 	strb.w	lr, [r7, #-5]
 802445a:	78ad      	ldrb	r5, [r5, #2]
 802445c:	78b6      	ldrb	r6, [r6, #2]
 802445e:	436b      	muls	r3, r5
 8024460:	7895      	ldrb	r5, [r2, #2]
 8024462:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8024464:	fb0c 3306 	mla	r3, ip, r6, r3
 8024468:	fb01 3305 	mla	r3, r1, r5, r3
 802446c:	7885      	ldrb	r5, [r0, #2]
 802446e:	fb08 3805 	mla	r8, r8, r5, r3
 8024472:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8024476:	fb13 f302 	smulbb	r3, r3, r2
 802447a:	f3c8 2807 	ubfx	r8, r8, #8, #8
 802447e:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8024480:	fb08 380a 	mla	r8, r8, sl, r3
 8024484:	fa1f f888 	uxth.w	r8, r8
 8024488:	f108 0301 	add.w	r3, r8, #1
 802448c:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 8024490:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024492:	4413      	add	r3, r2
 8024494:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8024496:	ea4f 2828 	mov.w	r8, r8, asr #8
 802449a:	931d      	str	r3, [sp, #116]	@ 0x74
 802449c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802449e:	f807 8c04 	strb.w	r8, [r7, #-4]
 80244a2:	4413      	add	r3, r2
 80244a4:	931e      	str	r3, [sp, #120]	@ 0x78
 80244a6:	e6d6      	b.n	8024256 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80244a8:	b151      	cbz	r1, 80244c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 80244aa:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80244ae:	4630      	mov	r0, r6
 80244b0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80244b4:	4422      	add	r2, r4
 80244b6:	4635      	mov	r5, r6
 80244b8:	e772      	b.n	80243a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 80244ba:	4630      	mov	r0, r6
 80244bc:	4632      	mov	r2, r6
 80244be:	e76f      	b.n	80243a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 80244c0:	4630      	mov	r0, r6
 80244c2:	4632      	mov	r2, r6
 80244c4:	e7f7      	b.n	80244b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80244c6:	b013      	add	sp, #76	@ 0x4c
 80244c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080244cc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 80244cc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80244d0:	784c      	ldrb	r4, [r1, #1]
 80244d2:	f891 a002 	ldrb.w	sl, [r1, #2]
 80244d6:	0224      	lsls	r4, r4, #8
 80244d8:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 80244dc:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	@ 0x2c
 80244e0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80244e4:	f891 a000 	ldrb.w	sl, [r1]
 80244e8:	f89d 0038 	ldrb.w	r0, [sp, #56]	@ 0x38
 80244ec:	ea44 040a 	orr.w	r4, r4, sl
 80244f0:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 80244f4:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	@ 0x30
 80244f8:	9401      	str	r4, [sp, #4]
 80244fa:	fb05 c70e 	mla	r7, r5, lr, ip
 80244fe:	2d00      	cmp	r5, #0
 8024500:	eb02 0807 	add.w	r8, r2, r7
 8024504:	db72      	blt.n	80245ec <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 8024506:	45a9      	cmp	r9, r5
 8024508:	dd70      	ble.n	80245ec <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 802450a:	f1bc 0f00 	cmp.w	ip, #0
 802450e:	db6b      	blt.n	80245e8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 8024510:	45e6      	cmp	lr, ip
 8024512:	dd69      	ble.n	80245e8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 8024514:	5dd7      	ldrb	r7, [r2, r7]
 8024516:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802451a:	441f      	add	r7, r3
 802451c:	f11c 0201 	adds.w	r2, ip, #1
 8024520:	d467      	bmi.n	80245f2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8024522:	4596      	cmp	lr, r2
 8024524:	dd65      	ble.n	80245f2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8024526:	2800      	cmp	r0, #0
 8024528:	d063      	beq.n	80245f2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 802452a:	f898 4001 	ldrb.w	r4, [r8, #1]
 802452e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024532:	441c      	add	r4, r3
 8024534:	3501      	adds	r5, #1
 8024536:	d460      	bmi.n	80245fa <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8024538:	45a9      	cmp	r9, r5
 802453a:	dd5e      	ble.n	80245fa <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 802453c:	2e00      	cmp	r6, #0
 802453e:	d05c      	beq.n	80245fa <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8024540:	f1bc 0f00 	cmp.w	ip, #0
 8024544:	db57      	blt.n	80245f6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8024546:	45e6      	cmp	lr, ip
 8024548:	dd55      	ble.n	80245f6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 802454a:	f818 500e 	ldrb.w	r5, [r8, lr]
 802454e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024552:	441d      	add	r5, r3
 8024554:	f11c 0201 	adds.w	r2, ip, #1
 8024558:	d452      	bmi.n	8024600 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 802455a:	4596      	cmp	lr, r2
 802455c:	dd50      	ble.n	8024600 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 802455e:	2800      	cmp	r0, #0
 8024560:	d04e      	beq.n	8024600 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8024562:	44c6      	add	lr, r8
 8024564:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8024568:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802456c:	4413      	add	r3, r2
 802456e:	b280      	uxth	r0, r0
 8024570:	f897 8000 	ldrb.w	r8, [r7]
 8024574:	b2b2      	uxth	r2, r6
 8024576:	fb00 f602 	mul.w	r6, r0, r2
 802457a:	0100      	lsls	r0, r0, #4
 802457c:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8024580:	f5c0 7e80 	rsb	lr, r0, #256	@ 0x100
 8024584:	1b80      	subs	r0, r0, r6
 8024586:	fa1f fc82 	uxth.w	ip, r2
 802458a:	b282      	uxth	r2, r0
 802458c:	7820      	ldrb	r0, [r4, #0]
 802458e:	ebae 0e0c 	sub.w	lr, lr, ip
 8024592:	4350      	muls	r0, r2
 8024594:	fa1f fe8e 	uxth.w	lr, lr
 8024598:	fb0e 0808 	mla	r8, lr, r8, r0
 802459c:	7828      	ldrb	r0, [r5, #0]
 802459e:	fb0c 8800 	mla	r8, ip, r0, r8
 80245a2:	7818      	ldrb	r0, [r3, #0]
 80245a4:	fb06 8000 	mla	r0, r6, r0, r8
 80245a8:	1200      	asrs	r0, r0, #8
 80245aa:	7008      	strb	r0, [r1, #0]
 80245ac:	7860      	ldrb	r0, [r4, #1]
 80245ae:	f897 8001 	ldrb.w	r8, [r7, #1]
 80245b2:	4350      	muls	r0, r2
 80245b4:	fb0e 0808 	mla	r8, lr, r8, r0
 80245b8:	7868      	ldrb	r0, [r5, #1]
 80245ba:	fb0c 8800 	mla	r8, ip, r0, r8
 80245be:	7858      	ldrb	r0, [r3, #1]
 80245c0:	fb06 8000 	mla	r0, r6, r0, r8
 80245c4:	1200      	asrs	r0, r0, #8
 80245c6:	7048      	strb	r0, [r1, #1]
 80245c8:	78a0      	ldrb	r0, [r4, #2]
 80245ca:	78bf      	ldrb	r7, [r7, #2]
 80245cc:	4350      	muls	r0, r2
 80245ce:	78aa      	ldrb	r2, [r5, #2]
 80245d0:	fb0e 0007 	mla	r0, lr, r7, r0
 80245d4:	fb0c 0c02 	mla	ip, ip, r2, r0
 80245d8:	789a      	ldrb	r2, [r3, #2]
 80245da:	fb06 c202 	mla	r2, r6, r2, ip
 80245de:	1212      	asrs	r2, r2, #8
 80245e0:	708a      	strb	r2, [r1, #2]
 80245e2:	b002      	add	sp, #8
 80245e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80245e8:	af01      	add	r7, sp, #4
 80245ea:	e797      	b.n	802451c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 80245ec:	ac01      	add	r4, sp, #4
 80245ee:	4627      	mov	r7, r4
 80245f0:	e7a0      	b.n	8024534 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 80245f2:	ac01      	add	r4, sp, #4
 80245f4:	e79e      	b.n	8024534 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 80245f6:	ad01      	add	r5, sp, #4
 80245f8:	e7ac      	b.n	8024554 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 80245fa:	ab01      	add	r3, sp, #4
 80245fc:	461d      	mov	r5, r3
 80245fe:	e7b6      	b.n	802456e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 8024600:	ab01      	add	r3, sp, #4
 8024602:	e7b4      	b.n	802456e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

08024604 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024608:	b08d      	sub	sp, #52	@ 0x34
 802460a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802460e:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
 8024612:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8024614:	900b      	str	r0, [sp, #44]	@ 0x2c
 8024616:	9306      	str	r3, [sp, #24]
 8024618:	6850      	ldr	r0, [r2, #4]
 802461a:	6812      	ldr	r2, [r2, #0]
 802461c:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 802461e:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	@ 0x70
 8024622:	fb00 1303 	mla	r3, r0, r3, r1
 8024626:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802462a:	18d3      	adds	r3, r2, r3
 802462c:	9307      	str	r3, [sp, #28]
 802462e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8024630:	681b      	ldr	r3, [r3, #0]
 8024632:	9308      	str	r3, [sp, #32]
 8024634:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8024636:	685d      	ldr	r5, [r3, #4]
 8024638:	3504      	adds	r5, #4
 802463a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802463c:	2b00      	cmp	r3, #0
 802463e:	dc03      	bgt.n	8024648 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8024640:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024642:	2b00      	cmp	r3, #0
 8024644:	f340 81e6 	ble.w	8024a14 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8024648:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802464a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802464e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024652:	1e48      	subs	r0, r1, #1
 8024654:	1e56      	subs	r6, r2, #1
 8024656:	9b06      	ldr	r3, [sp, #24]
 8024658:	2b00      	cmp	r3, #0
 802465a:	f340 80bd 	ble.w	80247d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 802465e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8024660:	1427      	asrs	r7, r4, #16
 8024662:	ea4f 4323 	mov.w	r3, r3, asr #16
 8024666:	d406      	bmi.n	8024676 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024668:	4287      	cmp	r7, r0
 802466a:	da04      	bge.n	8024676 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802466c:	2b00      	cmp	r3, #0
 802466e:	db02      	blt.n	8024676 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024670:	42b3      	cmp	r3, r6
 8024672:	f2c0 80b2 	blt.w	80247da <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8024676:	3701      	adds	r7, #1
 8024678:	f100 80a1 	bmi.w	80247be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802467c:	42b9      	cmp	r1, r7
 802467e:	f2c0 809e 	blt.w	80247be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8024682:	3301      	adds	r3, #1
 8024684:	f100 809b 	bmi.w	80247be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8024688:	429a      	cmp	r2, r3
 802468a:	f2c0 8098 	blt.w	80247be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802468e:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 8024692:	f1bb 0f00 	cmp.w	fp, #0
 8024696:	f340 80bf 	ble.w	8024818 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 802469a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802469c:	981e      	ldr	r0, [sp, #120]	@ 0x78
 802469e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80246a0:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80246a4:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 80246a8:	1420      	asrs	r0, r4, #16
 80246aa:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80246ac:	ea4f 4723 	mov.w	r7, r3, asr #16
 80246b0:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80246b4:	6892      	ldr	r2, [r2, #8]
 80246b6:	f100 8103 	bmi.w	80248c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 80246ba:	f102 3eff 	add.w	lr, r2, #4294967295
 80246be:	4570      	cmp	r0, lr
 80246c0:	f280 80fe 	bge.w	80248c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 80246c4:	2f00      	cmp	r7, #0
 80246c6:	f2c0 80fb 	blt.w	80248c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 80246ca:	f10c 3eff 	add.w	lr, ip, #4294967295
 80246ce:	4577      	cmp	r7, lr
 80246d0:	f280 80f6 	bge.w	80248c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 80246d4:	b212      	sxth	r2, r2
 80246d6:	fb07 0002 	mla	r0, r7, r2, r0
 80246da:	9f08      	ldr	r7, [sp, #32]
 80246dc:	f817 8000 	ldrb.w	r8, [r7, r0]
 80246e0:	eb07 0e00 	add.w	lr, r7, r0
 80246e4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80246e8:	eb05 0c08 	add.w	ip, r5, r8
 80246ec:	2b00      	cmp	r3, #0
 80246ee:	f000 80d8 	beq.w	80248a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 80246f2:	f89e 7001 	ldrb.w	r7, [lr, #1]
 80246f6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80246fa:	442f      	add	r7, r5
 80246fc:	2900      	cmp	r1, #0
 80246fe:	f000 80d9 	beq.w	80248b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8024702:	eb0e 0002 	add.w	r0, lr, r2
 8024706:	f81e 2002 	ldrb.w	r2, [lr, r2]
 802470a:	7840      	ldrb	r0, [r0, #1]
 802470c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024710:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024714:	442a      	add	r2, r5
 8024716:	4428      	add	r0, r5
 8024718:	b29b      	uxth	r3, r3
 802471a:	f815 a008 	ldrb.w	sl, [r5, r8]
 802471e:	b289      	uxth	r1, r1
 8024720:	f897 8000 	ldrb.w	r8, [r7]
 8024724:	fb03 f901 	mul.w	r9, r3, r1
 8024728:	011b      	lsls	r3, r3, #4
 802472a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802472e:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8024732:	eba3 0309 	sub.w	r3, r3, r9
 8024736:	b289      	uxth	r1, r1
 8024738:	b29b      	uxth	r3, r3
 802473a:	ebae 0e01 	sub.w	lr, lr, r1
 802473e:	fb03 f808 	mul.w	r8, r3, r8
 8024742:	fa1f fe8e 	uxth.w	lr, lr
 8024746:	fb0e 880a 	mla	r8, lr, sl, r8
 802474a:	f892 a000 	ldrb.w	sl, [r2]
 802474e:	fb01 880a 	mla	r8, r1, sl, r8
 8024752:	f890 a000 	ldrb.w	sl, [r0]
 8024756:	fb09 880a 	mla	r8, r9, sl, r8
 802475a:	ea4f 2828 	mov.w	r8, r8, asr #8
 802475e:	f886 8000 	strb.w	r8, [r6]
 8024762:	f897 8001 	ldrb.w	r8, [r7, #1]
 8024766:	f89c a001 	ldrb.w	sl, [ip, #1]
 802476a:	fb03 f808 	mul.w	r8, r3, r8
 802476e:	fb0e 880a 	mla	r8, lr, sl, r8
 8024772:	f892 a001 	ldrb.w	sl, [r2, #1]
 8024776:	fb01 880a 	mla	r8, r1, sl, r8
 802477a:	f890 a001 	ldrb.w	sl, [r0, #1]
 802477e:	fb09 880a 	mla	r8, r9, sl, r8
 8024782:	ea4f 2828 	mov.w	r8, r8, asr #8
 8024786:	f886 8001 	strb.w	r8, [r6, #1]
 802478a:	78bf      	ldrb	r7, [r7, #2]
 802478c:	f89c c002 	ldrb.w	ip, [ip, #2]
 8024790:	437b      	muls	r3, r7
 8024792:	7892      	ldrb	r2, [r2, #2]
 8024794:	fb0e 330c 	mla	r3, lr, ip, r3
 8024798:	fb01 3102 	mla	r1, r1, r2, r3
 802479c:	7882      	ldrb	r2, [r0, #2]
 802479e:	fb09 1902 	mla	r9, r9, r2, r1
 80247a2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80247a6:	f886 9002 	strb.w	r9, [r6, #2]
 80247aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80247ac:	3603      	adds	r6, #3
 80247ae:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80247b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80247b4:	441c      	add	r4, r3
 80247b6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80247b8:	4413      	add	r3, r2
 80247ba:	9318      	str	r3, [sp, #96]	@ 0x60
 80247bc:	e769      	b.n	8024692 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80247be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80247c0:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80247c2:	441c      	add	r4, r3
 80247c4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80247c6:	443b      	add	r3, r7
 80247c8:	9318      	str	r3, [sp, #96]	@ 0x60
 80247ca:	9b06      	ldr	r3, [sp, #24]
 80247cc:	3b01      	subs	r3, #1
 80247ce:	9306      	str	r3, [sp, #24]
 80247d0:	9b07      	ldr	r3, [sp, #28]
 80247d2:	3303      	adds	r3, #3
 80247d4:	9307      	str	r3, [sp, #28]
 80247d6:	e73e      	b.n	8024656 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80247d8:	d026      	beq.n	8024828 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80247da:	9b06      	ldr	r3, [sp, #24]
 80247dc:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80247de:	3b01      	subs	r3, #1
 80247e0:	fb00 4003 	mla	r0, r0, r3, r4
 80247e4:	1400      	asrs	r0, r0, #16
 80247e6:	f53f af52 	bmi.w	802468e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80247ea:	3901      	subs	r1, #1
 80247ec:	4288      	cmp	r0, r1
 80247ee:	f6bf af4e 	bge.w	802468e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80247f2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80247f4:	9818      	ldr	r0, [sp, #96]	@ 0x60
 80247f6:	fb01 0303 	mla	r3, r1, r3, r0
 80247fa:	141b      	asrs	r3, r3, #16
 80247fc:	f53f af47 	bmi.w	802468e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8024800:	3a01      	subs	r2, #1
 8024802:	4293      	cmp	r3, r2
 8024804:	f6bf af43 	bge.w	802468e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8024808:	9b07      	ldr	r3, [sp, #28]
 802480a:	f8dd a018 	ldr.w	sl, [sp, #24]
 802480e:	f103 0803 	add.w	r8, r3, #3
 8024812:	f1ba 0f00 	cmp.w	sl, #0
 8024816:	dc71      	bgt.n	80248fc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8024818:	9b06      	ldr	r3, [sp, #24]
 802481a:	9a07      	ldr	r2, [sp, #28]
 802481c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024820:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024824:	441a      	add	r2, r3
 8024826:	9207      	str	r2, [sp, #28]
 8024828:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802482a:	2b00      	cmp	r3, #0
 802482c:	f340 80f2 	ble.w	8024a14 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8024830:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024834:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8024836:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802483a:	eeb0 6a62 	vmov.f32	s12, s5
 802483e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8024842:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024846:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802484a:	ee16 4a10 	vmov	r4, s12
 802484e:	eeb0 6a43 	vmov.f32	s12, s6
 8024852:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8024856:	ed8d 6a18 	vstr	s12, [sp, #96]	@ 0x60
 802485a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802485e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024862:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024866:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802486a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802486e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024872:	ee12 2a90 	vmov	r2, s5
 8024876:	eef0 2a47 	vmov.f32	s5, s14
 802487a:	fb92 f3f3 	sdiv	r3, r2, r3
 802487e:	ee13 2a10 	vmov	r2, s6
 8024882:	9319      	str	r3, [sp, #100]	@ 0x64
 8024884:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8024886:	eeb0 3a67 	vmov.f32	s6, s15
 802488a:	fb92 f3f3 	sdiv	r3, r2, r3
 802488e:	931a      	str	r3, [sp, #104]	@ 0x68
 8024890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024892:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024894:	3b01      	subs	r3, #1
 8024896:	9309      	str	r3, [sp, #36]	@ 0x24
 8024898:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802489a:	bf08      	it	eq
 802489c:	4613      	moveq	r3, r2
 802489e:	9306      	str	r3, [sp, #24]
 80248a0:	e6cb      	b.n	802463a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 80248a2:	b151      	cbz	r1, 80248ba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 80248a4:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80248a8:	4660      	mov	r0, ip
 80248aa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80248ae:	442a      	add	r2, r5
 80248b0:	4667      	mov	r7, ip
 80248b2:	e731      	b.n	8024718 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 80248b4:	4660      	mov	r0, ip
 80248b6:	4662      	mov	r2, ip
 80248b8:	e72e      	b.n	8024718 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 80248ba:	4660      	mov	r0, ip
 80248bc:	4662      	mov	r2, ip
 80248be:	e7f7      	b.n	80248b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 80248c0:	f110 0e01 	adds.w	lr, r0, #1
 80248c4:	f53f af71 	bmi.w	80247aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80248c8:	4572      	cmp	r2, lr
 80248ca:	f6ff af6e 	blt.w	80247aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80248ce:	f117 0e01 	adds.w	lr, r7, #1
 80248d2:	f53f af6a 	bmi.w	80247aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80248d6:	45f4      	cmp	ip, lr
 80248d8:	f6ff af67 	blt.w	80247aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80248dc:	b212      	sxth	r2, r2
 80248de:	e9cd 3104 	strd	r3, r1, [sp, #16]
 80248e2:	fa0f f38c 	sxth.w	r3, ip
 80248e6:	9200      	str	r2, [sp, #0]
 80248e8:	4631      	mov	r1, r6
 80248ea:	9a08      	ldr	r2, [sp, #32]
 80248ec:	9301      	str	r3, [sp, #4]
 80248ee:	462b      	mov	r3, r5
 80248f0:	e9cd 0702 	strd	r0, r7, [sp, #8]
 80248f4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80248f6:	f7ff fde9 	bl	80244cc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 80248fa:	e756      	b.n	80247aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80248fc:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80248fe:	1426      	asrs	r6, r4, #16
 8024900:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8024902:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8024906:	f3c2 3103 	ubfx	r1, r2, #12, #4
 802490a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 802490c:	1400      	asrs	r0, r0, #16
 802490e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8024912:	fb02 6000 	mla	r0, r2, r0, r6
 8024916:	9e08      	ldr	r6, [sp, #32]
 8024918:	f816 e000 	ldrb.w	lr, [r6, r0]
 802491c:	eb06 0c00 	add.w	ip, r6, r0
 8024920:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8024924:	eb05 070e 	add.w	r7, r5, lr
 8024928:	2b00      	cmp	r3, #0
 802492a:	d064      	beq.n	80249f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 802492c:	f89c 6001 	ldrb.w	r6, [ip, #1]
 8024930:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8024934:	442e      	add	r6, r5
 8024936:	2900      	cmp	r1, #0
 8024938:	d066      	beq.n	8024a08 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 802493a:	eb0c 0002 	add.w	r0, ip, r2
 802493e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8024942:	7840      	ldrb	r0, [r0, #1]
 8024944:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024948:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802494c:	442a      	add	r2, r5
 802494e:	4428      	add	r0, r5
 8024950:	b29b      	uxth	r3, r3
 8024952:	f815 b00e 	ldrb.w	fp, [r5, lr]
 8024956:	b289      	uxth	r1, r1
 8024958:	f896 e000 	ldrb.w	lr, [r6]
 802495c:	f108 0803 	add.w	r8, r8, #3
 8024960:	f10a 3aff 	add.w	sl, sl, #4294967295
 8024964:	fb03 f901 	mul.w	r9, r3, r1
 8024968:	011b      	lsls	r3, r3, #4
 802496a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802496e:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 8024972:	eba3 0309 	sub.w	r3, r3, r9
 8024976:	b289      	uxth	r1, r1
 8024978:	b29b      	uxth	r3, r3
 802497a:	ebac 0c01 	sub.w	ip, ip, r1
 802497e:	fb03 fe0e 	mul.w	lr, r3, lr
 8024982:	fa1f fc8c 	uxth.w	ip, ip
 8024986:	fb0c ee0b 	mla	lr, ip, fp, lr
 802498a:	f892 b000 	ldrb.w	fp, [r2]
 802498e:	fb01 ee0b 	mla	lr, r1, fp, lr
 8024992:	f890 b000 	ldrb.w	fp, [r0]
 8024996:	fb09 ee0b 	mla	lr, r9, fp, lr
 802499a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802499e:	f808 ec06 	strb.w	lr, [r8, #-6]
 80249a2:	f896 e001 	ldrb.w	lr, [r6, #1]
 80249a6:	f897 b001 	ldrb.w	fp, [r7, #1]
 80249aa:	fb03 fe0e 	mul.w	lr, r3, lr
 80249ae:	fb0c ee0b 	mla	lr, ip, fp, lr
 80249b2:	f892 b001 	ldrb.w	fp, [r2, #1]
 80249b6:	fb01 ee0b 	mla	lr, r1, fp, lr
 80249ba:	f890 b001 	ldrb.w	fp, [r0, #1]
 80249be:	fb09 ee0b 	mla	lr, r9, fp, lr
 80249c2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80249c6:	f808 ec05 	strb.w	lr, [r8, #-5]
 80249ca:	78b6      	ldrb	r6, [r6, #2]
 80249cc:	78bf      	ldrb	r7, [r7, #2]
 80249ce:	4373      	muls	r3, r6
 80249d0:	7896      	ldrb	r6, [r2, #2]
 80249d2:	7882      	ldrb	r2, [r0, #2]
 80249d4:	fb0c 3307 	mla	r3, ip, r7, r3
 80249d8:	fb01 3306 	mla	r3, r1, r6, r3
 80249dc:	fb09 3902 	mla	r9, r9, r2, r3
 80249e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80249e2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80249e4:	441c      	add	r4, r3
 80249e6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80249e8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80249ec:	4413      	add	r3, r2
 80249ee:	f808 9c04 	strb.w	r9, [r8, #-4]
 80249f2:	9318      	str	r3, [sp, #96]	@ 0x60
 80249f4:	e70d      	b.n	8024812 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80249f6:	b151      	cbz	r1, 8024a0e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 80249f8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80249fc:	4638      	mov	r0, r7
 80249fe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024a02:	442a      	add	r2, r5
 8024a04:	463e      	mov	r6, r7
 8024a06:	e7a3      	b.n	8024950 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8024a08:	4638      	mov	r0, r7
 8024a0a:	463a      	mov	r2, r7
 8024a0c:	e7a0      	b.n	8024950 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8024a0e:	4638      	mov	r0, r7
 8024a10:	463a      	mov	r2, r7
 8024a12:	e7f7      	b.n	8024a04 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 8024a14:	b00d      	add	sp, #52	@ 0x34
 8024a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024a1a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8024a1a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024a1e:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 8024a22:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8024a26:	2d00      	cmp	r5, #0
 8024a28:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8024a2c:	fb05 700c 	mla	r0, r5, ip, r7
 8024a30:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 8024a34:	f89d e044 	ldrb.w	lr, [sp, #68]	@ 0x44
 8024a38:	eb02 0800 	add.w	r8, r2, r0
 8024a3c:	f2c0 8118 	blt.w	8024c70 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8024a40:	45a9      	cmp	r9, r5
 8024a42:	f340 8115 	ble.w	8024c70 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8024a46:	2f00      	cmp	r7, #0
 8024a48:	f2c0 8110 	blt.w	8024c6c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8024a4c:	45bc      	cmp	ip, r7
 8024a4e:	f340 810d 	ble.w	8024c6c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8024a52:	5c12      	ldrb	r2, [r2, r0]
 8024a54:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8024a58:	1c7a      	adds	r2, r7, #1
 8024a5a:	f100 810c 	bmi.w	8024c76 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8024a5e:	4594      	cmp	ip, r2
 8024a60:	f340 8109 	ble.w	8024c76 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8024a64:	2c00      	cmp	r4, #0
 8024a66:	f000 8108 	beq.w	8024c7a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 8024a6a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8024a6e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8024a72:	3501      	adds	r5, #1
 8024a74:	f100 8105 	bmi.w	8024c82 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8024a78:	45a9      	cmp	r9, r5
 8024a7a:	f340 8102 	ble.w	8024c82 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8024a7e:	f1be 0f00 	cmp.w	lr, #0
 8024a82:	f000 8101 	beq.w	8024c88 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 8024a86:	2f00      	cmp	r7, #0
 8024a88:	f2c0 80f9 	blt.w	8024c7e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8024a8c:	45bc      	cmp	ip, r7
 8024a8e:	f340 80f6 	ble.w	8024c7e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8024a92:	f818 200c 	ldrb.w	r2, [r8, ip]
 8024a96:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8024a9a:	3701      	adds	r7, #1
 8024a9c:	f100 80f7 	bmi.w	8024c8e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8024aa0:	45bc      	cmp	ip, r7
 8024aa2:	f340 80f4 	ble.w	8024c8e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8024aa6:	2c00      	cmp	r4, #0
 8024aa8:	f000 80f3 	beq.w	8024c92 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 8024aac:	44c4      	add	ip, r8
 8024aae:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8024ab2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8024ab6:	fa1f fc84 	uxth.w	ip, r4
 8024aba:	fa1f f48e 	uxth.w	r4, lr
 8024abe:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8024ac2:	fb04 fe0c 	mul.w	lr, r4, ip
 8024ac6:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8024aca:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8024ace:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 8024ad2:	ebac 070e 	sub.w	r7, ip, lr
 8024ad6:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 8024ada:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8024ade:	b2a4      	uxth	r4, r4
 8024ae0:	b2bf      	uxth	r7, r7
 8024ae2:	1b1b      	subs	r3, r3, r4
 8024ae4:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8024ae8:	fb07 fc0a 	mul.w	ip, r7, sl
 8024aec:	b29b      	uxth	r3, r3
 8024aee:	fb03 cc0b 	mla	ip, r3, fp, ip
 8024af2:	9300      	str	r3, [sp, #0]
 8024af4:	fb04 cc09 	mla	ip, r4, r9, ip
 8024af8:	fb0e cc08 	mla	ip, lr, r8, ip
 8024afc:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8024b00:	9301      	str	r3, [sp, #4]
 8024b02:	2b00      	cmp	r3, #0
 8024b04:	f000 80af 	beq.w	8024c66 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 8024b08:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 8024b0c:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8024b10:	fb0b fc0c 	mul.w	ip, fp, ip
 8024b14:	fb0b f606 	mul.w	r6, fp, r6
 8024b18:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8024b1c:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8024b20:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8024b24:	44dc      	add	ip, fp
 8024b26:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 8024b2a:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8024b2e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024b32:	fb0a fb0b 	mul.w	fp, sl, fp
 8024b36:	fb0a fa00 	mul.w	sl, sl, r0
 8024b3a:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 8024b3e:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 8024b42:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 8024b46:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8024b4a:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8024b4e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8024b52:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8024b56:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024b5a:	0a36      	lsrs	r6, r6, #8
 8024b5c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024b60:	44dc      	add	ip, fp
 8024b62:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8024b66:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8024b6a:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8024b6e:	fb09 fb0b 	mul.w	fp, r9, fp
 8024b72:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024b76:	fb09 f905 	mul.w	r9, r9, r5
 8024b7a:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8024b7e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024b82:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 8024b86:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8024b8a:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8024b8e:	fb0c fc07 	mul.w	ip, ip, r7
 8024b92:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8024b96:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 8024b9a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8024b9e:	4458      	add	r0, fp
 8024ba0:	fb08 f505 	mul.w	r5, r8, r5
 8024ba4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024ba8:	fb08 f802 	mul.w	r8, r8, r2
 8024bac:	0a00      	lsrs	r0, r0, #8
 8024bae:	0a2a      	lsrs	r2, r5, #8
 8024bb0:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 8024bb4:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8024bb8:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8024bbc:	4415      	add	r5, r2
 8024bbe:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 8024bc2:	0a2d      	lsrs	r5, r5, #8
 8024bc4:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8024bc8:	9a00      	ldr	r2, [sp, #0]
 8024bca:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8024bce:	fb03 cc02 	mla	ip, r3, r2, ip
 8024bd2:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024bd6:	9b01      	ldr	r3, [sp, #4]
 8024bd8:	fb05 c50e 	mla	r5, r5, lr, ip
 8024bdc:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8024be0:	fb00 5004 	mla	r0, r0, r4, r5
 8024be4:	0a00      	lsrs	r0, r0, #8
 8024be6:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 8024bea:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 8024bee:	4378      	muls	r0, r7
 8024bf0:	fb02 0006 	mla	r0, r2, r6, r0
 8024bf4:	fb0e 0e08 	mla	lr, lr, r8, r0
 8024bf8:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 8024bfc:	fb04 e000 	mla	r0, r4, r0, lr
 8024c00:	0a00      	lsrs	r0, r0, #8
 8024c02:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8024c06:	4328      	orrs	r0, r5
 8024c08:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8024c0c:	b2ad      	uxth	r5, r5
 8024c0e:	b2c4      	uxtb	r4, r0
 8024c10:	436b      	muls	r3, r5
 8024c12:	fb14 f405 	smulbb	r4, r4, r5
 8024c16:	1c5a      	adds	r2, r3, #1
 8024c18:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8024c1c:	780b      	ldrb	r3, [r1, #0]
 8024c1e:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8024c22:	b2d2      	uxtb	r2, r2
 8024c24:	fb03 4302 	mla	r3, r3, r2, r4
 8024c28:	b29b      	uxth	r3, r3
 8024c2a:	1c5c      	adds	r4, r3, #1
 8024c2c:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8024c30:	784c      	ldrb	r4, [r1, #1]
 8024c32:	fb14 f402 	smulbb	r4, r4, r2
 8024c36:	121b      	asrs	r3, r3, #8
 8024c38:	700b      	strb	r3, [r1, #0]
 8024c3a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8024c3e:	fb03 4305 	mla	r3, r3, r5, r4
 8024c42:	b29b      	uxth	r3, r3
 8024c44:	1c5c      	adds	r4, r3, #1
 8024c46:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8024c4a:	0c04      	lsrs	r4, r0, #16
 8024c4c:	7888      	ldrb	r0, [r1, #2]
 8024c4e:	121b      	asrs	r3, r3, #8
 8024c50:	fb10 f002 	smulbb	r0, r0, r2
 8024c54:	704b      	strb	r3, [r1, #1]
 8024c56:	fb04 0005 	mla	r0, r4, r5, r0
 8024c5a:	b280      	uxth	r0, r0
 8024c5c:	1c43      	adds	r3, r0, #1
 8024c5e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8024c62:	1200      	asrs	r0, r0, #8
 8024c64:	7088      	strb	r0, [r1, #2]
 8024c66:	b003      	add	sp, #12
 8024c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024c6c:	2600      	movs	r6, #0
 8024c6e:	e6f3      	b.n	8024a58 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 8024c70:	2000      	movs	r0, #0
 8024c72:	4606      	mov	r6, r0
 8024c74:	e6fd      	b.n	8024a72 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8024c76:	2000      	movs	r0, #0
 8024c78:	e6fb      	b.n	8024a72 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8024c7a:	4620      	mov	r0, r4
 8024c7c:	e6f9      	b.n	8024a72 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8024c7e:	2500      	movs	r5, #0
 8024c80:	e70b      	b.n	8024a9a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 8024c82:	2200      	movs	r2, #0
 8024c84:	4615      	mov	r5, r2
 8024c86:	e716      	b.n	8024ab6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8024c88:	4672      	mov	r2, lr
 8024c8a:	4675      	mov	r5, lr
 8024c8c:	e713      	b.n	8024ab6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8024c8e:	2200      	movs	r2, #0
 8024c90:	e711      	b.n	8024ab6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8024c92:	4622      	mov	r2, r4
 8024c94:	e70f      	b.n	8024ab6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

08024c96 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024c96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024c9a:	b09f      	sub	sp, #124	@ 0x7c
 8024c9c:	921b      	str	r2, [sp, #108]	@ 0x6c
 8024c9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8024ca0:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8024ca2:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 8024ca6:	901d      	str	r0, [sp, #116]	@ 0x74
 8024ca8:	931c      	str	r3, [sp, #112]	@ 0x70
 8024caa:	6850      	ldr	r0, [r2, #4]
 8024cac:	9119      	str	r1, [sp, #100]	@ 0x64
 8024cae:	6812      	ldr	r2, [r2, #0]
 8024cb0:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8024cb2:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 8024cb6:	fb00 1303 	mla	r3, r0, r3, r1
 8024cba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024cbe:	18d3      	adds	r3, r2, r3
 8024cc0:	930c      	str	r3, [sp, #48]	@ 0x30
 8024cc2:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8024cc4:	681b      	ldr	r3, [r3, #0]
 8024cc6:	9312      	str	r3, [sp, #72]	@ 0x48
 8024cc8:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8024cca:	685e      	ldr	r6, [r3, #4]
 8024ccc:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 8024cd0:	3604      	adds	r6, #4
 8024cd2:	930d      	str	r3, [sp, #52]	@ 0x34
 8024cd4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8024cd6:	2b00      	cmp	r3, #0
 8024cd8:	dc03      	bgt.n	8024ce2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8024cda:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8024cdc:	2b00      	cmp	r3, #0
 8024cde:	f340 8378 	ble.w	80253d2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8024ce2:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8024ce4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024ce8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024cec:	1e48      	subs	r0, r1, #1
 8024cee:	1e57      	subs	r7, r2, #1
 8024cf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024cf2:	2b00      	cmp	r3, #0
 8024cf4:	f340 818c 	ble.w	8025010 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8024cf8:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8024cfa:	142b      	asrs	r3, r5, #16
 8024cfc:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8024d00:	d406      	bmi.n	8024d10 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024d02:	4584      	cmp	ip, r0
 8024d04:	da04      	bge.n	8024d10 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024d06:	2b00      	cmp	r3, #0
 8024d08:	db02      	blt.n	8024d10 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024d0a:	42bb      	cmp	r3, r7
 8024d0c:	f2c0 8181 	blt.w	8025012 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8024d10:	f11c 0c01 	adds.w	ip, ip, #1
 8024d14:	f100 816f 	bmi.w	8024ff6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8024d18:	4561      	cmp	r1, ip
 8024d1a:	f2c0 816c 	blt.w	8024ff6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8024d1e:	3301      	adds	r3, #1
 8024d20:	f100 8169 	bmi.w	8024ff6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8024d24:	429a      	cmp	r2, r3
 8024d26:	f2c0 8166 	blt.w	8024ff6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8024d2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024d2c:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8024d2e:	931a      	str	r3, [sp, #104]	@ 0x68
 8024d30:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8024d32:	2b00      	cmp	r3, #0
 8024d34:	f340 818c 	ble.w	8025050 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8024d38:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8024d3a:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8024d3e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024d42:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024d46:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8024d48:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8024d4c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8024d4e:	141b      	asrs	r3, r3, #16
 8024d50:	f100 81d0 	bmi.w	80250f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8024d54:	f100 38ff 	add.w	r8, r0, #4294967295
 8024d58:	4543      	cmp	r3, r8
 8024d5a:	f280 81cb 	bge.w	80250f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8024d5e:	f1bc 0f00 	cmp.w	ip, #0
 8024d62:	f2c0 81c7 	blt.w	80250f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8024d66:	f10e 38ff 	add.w	r8, lr, #4294967295
 8024d6a:	45c4      	cmp	ip, r8
 8024d6c:	f280 81c2 	bge.w	80250f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8024d70:	b200      	sxth	r0, r0
 8024d72:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8024d74:	fb0c 3300 	mla	r3, ip, r0, r3
 8024d78:	eb04 0803 	add.w	r8, r4, r3
 8024d7c:	5ce3      	ldrb	r3, [r4, r3]
 8024d7e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024d82:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8024d86:	2a00      	cmp	r2, #0
 8024d88:	f000 81a9 	beq.w	80250de <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8024d8c:	f898 c001 	ldrb.w	ip, [r8, #1]
 8024d90:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8024d94:	940e      	str	r4, [sp, #56]	@ 0x38
 8024d96:	0e24      	lsrs	r4, r4, #24
 8024d98:	9415      	str	r4, [sp, #84]	@ 0x54
 8024d9a:	b179      	cbz	r1, 8024dbc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8024d9c:	eb08 0c00 	add.w	ip, r8, r0
 8024da0:	f818 0000 	ldrb.w	r0, [r8, r0]
 8024da4:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8024da8:	900a      	str	r0, [sp, #40]	@ 0x28
 8024daa:	0e00      	lsrs	r0, r0, #24
 8024dac:	9013      	str	r0, [sp, #76]	@ 0x4c
 8024dae:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8024db2:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8024db6:	900f      	str	r0, [sp, #60]	@ 0x3c
 8024db8:	0e00      	lsrs	r0, r0, #24
 8024dba:	9016      	str	r0, [sp, #88]	@ 0x58
 8024dbc:	b292      	uxth	r2, r2
 8024dbe:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8024dc0:	b289      	uxth	r1, r1
 8024dc2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8024dc4:	fb02 f901 	mul.w	r9, r2, r1
 8024dc8:	0112      	lsls	r2, r2, #4
 8024dca:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024dce:	eba2 0809 	sub.w	r8, r2, r9
 8024dd2:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8024dd6:	b289      	uxth	r1, r1
 8024dd8:	fa1f f888 	uxth.w	r8, r8
 8024ddc:	1a52      	subs	r2, r2, r1
 8024dde:	fb08 f000 	mul.w	r0, r8, r0
 8024de2:	b292      	uxth	r2, r2
 8024de4:	fb02 000e 	mla	r0, r2, lr, r0
 8024de8:	fb01 0004 	mla	r0, r1, r4, r0
 8024dec:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8024dee:	fb09 0004 	mla	r0, r9, r4, r0
 8024df2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024df6:	2800      	cmp	r0, #0
 8024df8:	f000 80f2 	beq.w	8024fe0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8024dfc:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8024e00:	d01b      	beq.n	8024e3a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8024e02:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8024e06:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8024e0a:	fb0e fa0a 	mul.w	sl, lr, sl
 8024e0e:	fb0e fe03 	mul.w	lr, lr, r3
 8024e12:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024e16:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8024e1a:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8024e1e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8024e22:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8024e26:	4453      	add	r3, sl
 8024e28:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024e2c:	0a1b      	lsrs	r3, r3, #8
 8024e2e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8024e32:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8024e36:	ea43 030c 	orr.w	r3, r3, ip
 8024e3a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8024e3c:	2cff      	cmp	r4, #255	@ 0xff
 8024e3e:	d021      	beq.n	8024e84 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8024e40:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8024e42:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8024e46:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8024e48:	fb04 fb0b 	mul.w	fp, r4, fp
 8024e4c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8024e4e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024e52:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8024e54:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024e58:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8024e5c:	fb04 fa0a 	mul.w	sl, r4, sl
 8024e60:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024e64:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8024e68:	44de      	add	lr, fp
 8024e6a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024e6e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024e72:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024e76:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024e7a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024e7e:	ea4e 040a 	orr.w	r4, lr, sl
 8024e82:	940e      	str	r4, [sp, #56]	@ 0x38
 8024e84:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8024e86:	2cff      	cmp	r4, #255	@ 0xff
 8024e88:	d021      	beq.n	8024ece <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8024e8a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8024e8c:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8024e90:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8024e92:	fb04 fb0b 	mul.w	fp, r4, fp
 8024e96:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8024e98:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024e9c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8024e9e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024ea2:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8024ea6:	fb04 fa0a 	mul.w	sl, r4, sl
 8024eaa:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024eae:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8024eb2:	44de      	add	lr, fp
 8024eb4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024eb8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024ebc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024ec0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024ec4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024ec8:	ea4e 040a 	orr.w	r4, lr, sl
 8024ecc:	940a      	str	r4, [sp, #40]	@ 0x28
 8024ece:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8024ed0:	2cff      	cmp	r4, #255	@ 0xff
 8024ed2:	d021      	beq.n	8024f18 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8024ed4:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8024ed6:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8024eda:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8024edc:	fb04 fb0b 	mul.w	fp, r4, fp
 8024ee0:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8024ee2:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024ee6:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8024ee8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024eec:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8024ef0:	fb04 fa0a 	mul.w	sl, r4, sl
 8024ef4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024ef8:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8024efc:	44de      	add	lr, fp
 8024efe:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024f02:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024f06:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024f0a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024f0e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024f12:	ea4e 040a 	orr.w	r4, lr, sl
 8024f16:	940f      	str	r4, [sp, #60]	@ 0x3c
 8024f18:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8024f1a:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8024f1e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8024f22:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8024f26:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8024f28:	fb08 fc0c 	mul.w	ip, r8, ip
 8024f2c:	fb02 cc0e 	mla	ip, r2, lr, ip
 8024f30:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8024f34:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8024f36:	fb01 cc0e 	mla	ip, r1, lr, ip
 8024f3a:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8024f3e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8024f40:	fb09 cc0e 	mla	ip, r9, lr, ip
 8024f44:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8024f48:	fb08 f80e 	mul.w	r8, r8, lr
 8024f4c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024f50:	fb02 8303 	mla	r3, r2, r3, r8
 8024f54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024f56:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024f5a:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8024f5e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8024f60:	fb01 330a 	mla	r3, r1, sl, r3
 8024f64:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 8024f68:	fb09 3901 	mla	r9, r9, r1, r3
 8024f6c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024f6e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8024f70:	4343      	muls	r3, r0
 8024f72:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024f76:	1c58      	adds	r0, r3, #1
 8024f78:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8024f7c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8024f80:	ea4c 0c09 	orr.w	ip, ip, r9
 8024f84:	783b      	ldrb	r3, [r7, #0]
 8024f86:	fa5f f28c 	uxtb.w	r2, ip
 8024f8a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8024f8e:	fb12 f201 	smulbb	r2, r2, r1
 8024f92:	b2c0      	uxtb	r0, r0
 8024f94:	fb03 2300 	mla	r3, r3, r0, r2
 8024f98:	b29b      	uxth	r3, r3
 8024f9a:	1c5a      	adds	r2, r3, #1
 8024f9c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024fa0:	787a      	ldrb	r2, [r7, #1]
 8024fa2:	fb12 f200 	smulbb	r2, r2, r0
 8024fa6:	121b      	asrs	r3, r3, #8
 8024fa8:	703b      	strb	r3, [r7, #0]
 8024faa:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8024fae:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8024fb2:	fb03 2301 	mla	r3, r3, r1, r2
 8024fb6:	b29b      	uxth	r3, r3
 8024fb8:	1c5a      	adds	r2, r3, #1
 8024fba:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024fbe:	121b      	asrs	r3, r3, #8
 8024fc0:	707b      	strb	r3, [r7, #1]
 8024fc2:	78bb      	ldrb	r3, [r7, #2]
 8024fc4:	fb13 f000 	smulbb	r0, r3, r0
 8024fc8:	fb0c 0c01 	mla	ip, ip, r1, r0
 8024fcc:	fa1f fc8c 	uxth.w	ip, ip
 8024fd0:	f10c 0301 	add.w	r3, ip, #1
 8024fd4:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8024fd8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8024fdc:	f887 c002 	strb.w	ip, [r7, #2]
 8024fe0:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8024fe2:	3703      	adds	r7, #3
 8024fe4:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8024fe6:	441a      	add	r2, r3
 8024fe8:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8024fea:	441d      	add	r5, r3
 8024fec:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8024fee:	9229      	str	r2, [sp, #164]	@ 0xa4
 8024ff0:	3b01      	subs	r3, #1
 8024ff2:	931a      	str	r3, [sp, #104]	@ 0x68
 8024ff4:	e69c      	b.n	8024d30 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8024ff6:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8024ff8:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8024ffa:	441c      	add	r4, r3
 8024ffc:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8024ffe:	441d      	add	r5, r3
 8025000:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025002:	9429      	str	r4, [sp, #164]	@ 0xa4
 8025004:	3b01      	subs	r3, #1
 8025006:	9309      	str	r3, [sp, #36]	@ 0x24
 8025008:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802500a:	3303      	adds	r3, #3
 802500c:	930c      	str	r3, [sp, #48]	@ 0x30
 802500e:	e66f      	b.n	8024cf0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8025010:	d026      	beq.n	8025060 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8025012:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025014:	982b      	ldr	r0, [sp, #172]	@ 0xac
 8025016:	3b01      	subs	r3, #1
 8025018:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 802501a:	fb00 4003 	mla	r0, r0, r3, r4
 802501e:	1400      	asrs	r0, r0, #16
 8025020:	f53f ae83 	bmi.w	8024d2a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8025024:	3901      	subs	r1, #1
 8025026:	4288      	cmp	r0, r1
 8025028:	f6bf ae7f 	bge.w	8024d2a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802502c:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 802502e:	fb01 5303 	mla	r3, r1, r3, r5
 8025032:	141b      	asrs	r3, r3, #16
 8025034:	f53f ae79 	bmi.w	8024d2a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8025038:	3a01      	subs	r2, #1
 802503a:	4293      	cmp	r3, r2
 802503c:	f6bf ae75 	bge.w	8024d2a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8025040:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025042:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8025046:	f103 0e03 	add.w	lr, r3, #3
 802504a:	f1bb 0f00 	cmp.w	fp, #0
 802504e:	dc71      	bgt.n	8025134 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8025050:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025052:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025056:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025058:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802505c:	4423      	add	r3, r4
 802505e:	930c      	str	r3, [sp, #48]	@ 0x30
 8025060:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8025062:	2b00      	cmp	r3, #0
 8025064:	f340 81b5 	ble.w	80253d2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8025068:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802506c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802506e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025072:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025076:	eef0 6a62 	vmov.f32	s13, s5
 802507a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802507e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025082:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025086:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 802508a:	eef0 6a43 	vmov.f32	s13, s6
 802508e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025092:	ee16 5a90 	vmov	r5, s13
 8025096:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802509a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802509e:	ee77 2a62 	vsub.f32	s5, s14, s5
 80250a2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80250a6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80250aa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80250ae:	ee12 2a90 	vmov	r2, s5
 80250b2:	eef0 2a47 	vmov.f32	s5, s14
 80250b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80250ba:	ee13 2a10 	vmov	r2, s6
 80250be:	932b      	str	r3, [sp, #172]	@ 0xac
 80250c0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80250c2:	eeb0 3a67 	vmov.f32	s6, s15
 80250c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80250ca:	932c      	str	r3, [sp, #176]	@ 0xb0
 80250cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80250ce:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80250d0:	3b01      	subs	r3, #1
 80250d2:	9319      	str	r3, [sp, #100]	@ 0x64
 80250d4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80250d6:	bf08      	it	eq
 80250d8:	4613      	moveq	r3, r2
 80250da:	9309      	str	r3, [sp, #36]	@ 0x24
 80250dc:	e5fa      	b.n	8024cd4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80250de:	2900      	cmp	r1, #0
 80250e0:	f43f ae6c 	beq.w	8024dbc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80250e4:	f818 0000 	ldrb.w	r0, [r8, r0]
 80250e8:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80250ec:	900a      	str	r0, [sp, #40]	@ 0x28
 80250ee:	0e00      	lsrs	r0, r0, #24
 80250f0:	9013      	str	r0, [sp, #76]	@ 0x4c
 80250f2:	e663      	b.n	8024dbc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80250f4:	f113 0801 	adds.w	r8, r3, #1
 80250f8:	f53f af72 	bmi.w	8024fe0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80250fc:	4540      	cmp	r0, r8
 80250fe:	f6ff af6f 	blt.w	8024fe0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8025102:	f11c 0801 	adds.w	r8, ip, #1
 8025106:	f53f af6b 	bmi.w	8024fe0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 802510a:	45c6      	cmp	lr, r8
 802510c:	f6ff af68 	blt.w	8024fe0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8025110:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8025112:	b200      	sxth	r0, r0
 8025114:	9302      	str	r3, [sp, #8]
 8025116:	fa0f f38e 	sxth.w	r3, lr
 802511a:	9000      	str	r0, [sp, #0]
 802511c:	9301      	str	r3, [sp, #4]
 802511e:	4633      	mov	r3, r6
 8025120:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8025122:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8025126:	e9cd c203 	strd	ip, r2, [sp, #12]
 802512a:	4639      	mov	r1, r7
 802512c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802512e:	f7ff fc74 	bl	8024a1a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8025132:	e755      	b.n	8024fe0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8025134:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8025136:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802513a:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 802513c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025140:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8025142:	1427      	asrs	r7, r4, #16
 8025144:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8025146:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802514a:	142b      	asrs	r3, r5, #16
 802514c:	fb01 7303 	mla	r3, r1, r3, r7
 8025150:	18e7      	adds	r7, r4, r3
 8025152:	5ce3      	ldrb	r3, [r4, r3]
 8025154:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025158:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802515c:	2a00      	cmp	r2, #0
 802515e:	f000 812e 	beq.w	80253be <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 8025162:	f897 8001 	ldrb.w	r8, [r7, #1]
 8025166:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 802516a:	9410      	str	r4, [sp, #64]	@ 0x40
 802516c:	0e24      	lsrs	r4, r4, #24
 802516e:	9417      	str	r4, [sp, #92]	@ 0x5c
 8025170:	b170      	cbz	r0, 8025190 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8025172:	eb07 0801 	add.w	r8, r7, r1
 8025176:	5c79      	ldrb	r1, [r7, r1]
 8025178:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802517c:	910b      	str	r1, [sp, #44]	@ 0x2c
 802517e:	0e09      	lsrs	r1, r1, #24
 8025180:	9114      	str	r1, [sp, #80]	@ 0x50
 8025182:	f898 1001 	ldrb.w	r1, [r8, #1]
 8025186:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802518a:	9111      	str	r1, [sp, #68]	@ 0x44
 802518c:	0e09      	lsrs	r1, r1, #24
 802518e:	9118      	str	r1, [sp, #96]	@ 0x60
 8025190:	b292      	uxth	r2, r2
 8025192:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8025194:	b280      	uxth	r0, r0
 8025196:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025198:	fb02 f900 	mul.w	r9, r2, r0
 802519c:	0112      	lsls	r2, r2, #4
 802519e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80251a2:	eba2 0809 	sub.w	r8, r2, r9
 80251a6:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 80251aa:	b280      	uxth	r0, r0
 80251ac:	fa1f f888 	uxth.w	r8, r8
 80251b0:	1a12      	subs	r2, r2, r0
 80251b2:	fb08 f101 	mul.w	r1, r8, r1
 80251b6:	b292      	uxth	r2, r2
 80251b8:	fb02 110c 	mla	r1, r2, ip, r1
 80251bc:	fb00 1104 	mla	r1, r0, r4, r1
 80251c0:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 80251c2:	fb09 1104 	mla	r1, r9, r4, r1
 80251c6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80251ca:	2900      	cmp	r1, #0
 80251cc:	f000 80ec 	beq.w	80253a8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 80251d0:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 80251d4:	d019      	beq.n	802520a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 80251d6:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80251da:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80251de:	fb0c fa0a 	mul.w	sl, ip, sl
 80251e2:	fb0c fc03 	mul.w	ip, ip, r3
 80251e6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80251ea:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80251ee:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 80251f2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80251f6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80251fa:	4453      	add	r3, sl
 80251fc:	0a3f      	lsrs	r7, r7, #8
 80251fe:	0a1b      	lsrs	r3, r3, #8
 8025200:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8025204:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025208:	433b      	orrs	r3, r7
 802520a:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 802520c:	2cff      	cmp	r4, #255	@ 0xff
 802520e:	d020      	beq.n	8025252 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 8025210:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025212:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025216:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8025218:	4367      	muls	r7, r4
 802521a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802521c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025220:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025224:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8025226:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802522a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802522e:	fb04 fa0a 	mul.w	sl, r4, sl
 8025232:	44bc      	add	ip, r7
 8025234:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8025238:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802523c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025240:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025244:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025248:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802524c:	ea4c 040a 	orr.w	r4, ip, sl
 8025250:	9410      	str	r4, [sp, #64]	@ 0x40
 8025252:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025254:	2cff      	cmp	r4, #255	@ 0xff
 8025256:	d020      	beq.n	802529a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 8025258:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802525a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802525e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025260:	4367      	muls	r7, r4
 8025262:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025264:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025268:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802526c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802526e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8025272:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025276:	fb04 fa0a 	mul.w	sl, r4, sl
 802527a:	44bc      	add	ip, r7
 802527c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8025280:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025284:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025288:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802528c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025290:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025294:	ea4c 040a 	orr.w	r4, ip, sl
 8025298:	940b      	str	r4, [sp, #44]	@ 0x2c
 802529a:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 802529c:	2cff      	cmp	r4, #255	@ 0xff
 802529e:	d020      	beq.n	80252e2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 80252a0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80252a2:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80252a6:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 80252a8:	4367      	muls	r7, r4
 80252aa:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80252ac:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80252b0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80252b4:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 80252b6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80252ba:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80252be:	fb04 fa0a 	mul.w	sl, r4, sl
 80252c2:	44bc      	add	ip, r7
 80252c4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80252c8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80252cc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80252d0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80252d4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80252d8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80252dc:	ea4c 040a 	orr.w	r4, ip, sl
 80252e0:	9411      	str	r4, [sp, #68]	@ 0x44
 80252e2:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80252e4:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 80252e8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80252ec:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80252f0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80252f2:	fb08 f707 	mul.w	r7, r8, r7
 80252f6:	fb02 770c 	mla	r7, r2, ip, r7
 80252fa:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80252fe:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025300:	fb00 770c 	mla	r7, r0, ip, r7
 8025304:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025308:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802530a:	fb09 770c 	mla	r7, r9, ip, r7
 802530e:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8025312:	fb08 f80c 	mul.w	r8, r8, ip
 8025316:	0a3f      	lsrs	r7, r7, #8
 8025318:	fb02 8303 	mla	r3, r2, r3, r8
 802531c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802531e:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8025322:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8025326:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8025328:	fb00 330a 	mla	r3, r0, sl, r3
 802532c:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8025330:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8025332:	fb09 3c0c 	mla	ip, r9, ip, r3
 8025336:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025338:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802533c:	434b      	muls	r3, r1
 802533e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8025342:	1c59      	adds	r1, r3, #1
 8025344:	ea47 070c 	orr.w	r7, r7, ip
 8025348:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802534c:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8025350:	b2fa      	uxtb	r2, r7
 8025352:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8025356:	fb12 f200 	smulbb	r2, r2, r0
 802535a:	b2c9      	uxtb	r1, r1
 802535c:	fb03 2301 	mla	r3, r3, r1, r2
 8025360:	b29b      	uxth	r3, r3
 8025362:	1c5a      	adds	r2, r3, #1
 8025364:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025368:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 802536c:	fb12 f201 	smulbb	r2, r2, r1
 8025370:	121b      	asrs	r3, r3, #8
 8025372:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8025376:	f3c7 2307 	ubfx	r3, r7, #8, #8
 802537a:	0c3f      	lsrs	r7, r7, #16
 802537c:	fb03 2300 	mla	r3, r3, r0, r2
 8025380:	b29b      	uxth	r3, r3
 8025382:	1c5a      	adds	r2, r3, #1
 8025384:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025388:	121b      	asrs	r3, r3, #8
 802538a:	f80e 3c02 	strb.w	r3, [lr, #-2]
 802538e:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8025392:	fb13 f101 	smulbb	r1, r3, r1
 8025396:	fb07 1700 	mla	r7, r7, r0, r1
 802539a:	b2bf      	uxth	r7, r7
 802539c:	1c7b      	adds	r3, r7, #1
 802539e:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80253a2:	123f      	asrs	r7, r7, #8
 80253a4:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80253a8:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80253aa:	f10e 0e03 	add.w	lr, lr, #3
 80253ae:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80253b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80253b4:	441a      	add	r2, r3
 80253b6:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80253b8:	9229      	str	r2, [sp, #164]	@ 0xa4
 80253ba:	441d      	add	r5, r3
 80253bc:	e645      	b.n	802504a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 80253be:	2800      	cmp	r0, #0
 80253c0:	f43f aee6 	beq.w	8025190 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 80253c4:	5c79      	ldrb	r1, [r7, r1]
 80253c6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80253ca:	910b      	str	r1, [sp, #44]	@ 0x2c
 80253cc:	0e09      	lsrs	r1, r1, #24
 80253ce:	9114      	str	r1, [sp, #80]	@ 0x50
 80253d0:	e6de      	b.n	8025190 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 80253d2:	b01f      	add	sp, #124	@ 0x7c
 80253d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080253d8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 80253d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80253dc:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 80253e0:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 80253e4:	2d00      	cmp	r5, #0
 80253e6:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 80253ea:	fb05 700e 	mla	r0, r5, lr, r7
 80253ee:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 80253f2:	f89d c044 	ldrb.w	ip, [sp, #68]	@ 0x44
 80253f6:	eb02 0800 	add.w	r8, r2, r0
 80253fa:	f2c0 8105 	blt.w	8025608 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 80253fe:	45a9      	cmp	r9, r5
 8025400:	f340 8102 	ble.w	8025608 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 8025404:	2f00      	cmp	r7, #0
 8025406:	f2c0 80fd 	blt.w	8025604 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 802540a:	45be      	cmp	lr, r7
 802540c:	f340 80fa 	ble.w	8025604 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 8025410:	5c12      	ldrb	r2, [r2, r0]
 8025412:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8025416:	1c7a      	adds	r2, r7, #1
 8025418:	f100 80f9 	bmi.w	802560e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 802541c:	4596      	cmp	lr, r2
 802541e:	f340 80f6 	ble.w	802560e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8025422:	2c00      	cmp	r4, #0
 8025424:	f000 80f5 	beq.w	8025612 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 8025428:	f898 2001 	ldrb.w	r2, [r8, #1]
 802542c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8025430:	3501      	adds	r5, #1
 8025432:	f100 80f2 	bmi.w	802561a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8025436:	45a9      	cmp	r9, r5
 8025438:	f340 80ef 	ble.w	802561a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 802543c:	f1bc 0f00 	cmp.w	ip, #0
 8025440:	f000 80ee 	beq.w	8025620 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 8025444:	2f00      	cmp	r7, #0
 8025446:	f2c0 80e6 	blt.w	8025616 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 802544a:	45be      	cmp	lr, r7
 802544c:	f340 80e3 	ble.w	8025616 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8025450:	f818 200e 	ldrb.w	r2, [r8, lr]
 8025454:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8025458:	3701      	adds	r7, #1
 802545a:	f100 80e4 	bmi.w	8025626 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 802545e:	45be      	cmp	lr, r7
 8025460:	f340 80e1 	ble.w	8025626 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8025464:	2c00      	cmp	r4, #0
 8025466:	f000 80e0 	beq.w	802562a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 802546a:	44c6      	add	lr, r8
 802546c:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8025470:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8025474:	b2a3      	uxth	r3, r4
 8025476:	fa1f fc8c 	uxth.w	ip, ip
 802547a:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 802547e:	fb0c fe03 	mul.w	lr, ip, r3
 8025482:	011b      	lsls	r3, r3, #4
 8025484:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8025488:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 802548c:	eba3 070e 	sub.w	r7, r3, lr
 8025490:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8025494:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8025498:	fa1f f48c 	uxth.w	r4, ip
 802549c:	b2bf      	uxth	r7, r7
 802549e:	1b1b      	subs	r3, r3, r4
 80254a0:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80254a4:	fb07 fc0a 	mul.w	ip, r7, sl
 80254a8:	b29b      	uxth	r3, r3
 80254aa:	fb03 cc0b 	mla	ip, r3, fp, ip
 80254ae:	9300      	str	r3, [sp, #0]
 80254b0:	fb04 cc09 	mla	ip, r4, r9, ip
 80254b4:	fb0e cc08 	mla	ip, lr, r8, ip
 80254b8:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80254bc:	9301      	str	r3, [sp, #4]
 80254be:	2b00      	cmp	r3, #0
 80254c0:	f000 809d 	beq.w	80255fe <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 80254c4:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 80254c8:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 80254cc:	fb0b fc0c 	mul.w	ip, fp, ip
 80254d0:	fb0b f606 	mul.w	r6, fp, r6
 80254d4:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80254d8:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80254dc:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 80254e0:	44dc      	add	ip, fp
 80254e2:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 80254e6:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80254ea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80254ee:	fb0a fb0b 	mul.w	fp, sl, fp
 80254f2:	fb0a fa00 	mul.w	sl, sl, r0
 80254f6:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 80254fa:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 80254fe:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 8025502:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8025506:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 802550a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802550e:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8025512:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025516:	0a36      	lsrs	r6, r6, #8
 8025518:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802551c:	44dc      	add	ip, fp
 802551e:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8025522:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8025526:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 802552a:	fb09 fb0b 	mul.w	fp, r9, fp
 802552e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025532:	fb09 f905 	mul.w	r9, r9, r5
 8025536:	ea4f 201b 	mov.w	r0, fp, lsr #8
 802553a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802553e:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 8025542:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8025546:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 802554a:	fb0c fc07 	mul.w	ip, ip, r7
 802554e:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8025552:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 8025556:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802555a:	4458      	add	r0, fp
 802555c:	fb08 f505 	mul.w	r5, r8, r5
 8025560:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025564:	fb08 f802 	mul.w	r8, r8, r2
 8025568:	0a00      	lsrs	r0, r0, #8
 802556a:	0a2a      	lsrs	r2, r5, #8
 802556c:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 8025570:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8025574:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8025578:	4415      	add	r5, r2
 802557a:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 802557e:	0a2d      	lsrs	r5, r5, #8
 8025580:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8025584:	9a00      	ldr	r2, [sp, #0]
 8025586:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 802558a:	fb03 cc02 	mla	ip, r3, r2, ip
 802558e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8025592:	9b01      	ldr	r3, [sp, #4]
 8025594:	fb05 c50e 	mla	r5, r5, lr, ip
 8025598:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 802559c:	43db      	mvns	r3, r3
 802559e:	fb00 5004 	mla	r0, r0, r4, r5
 80255a2:	b2db      	uxtb	r3, r3
 80255a4:	0a00      	lsrs	r0, r0, #8
 80255a6:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 80255aa:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 80255ae:	4378      	muls	r0, r7
 80255b0:	fb02 0006 	mla	r0, r2, r6, r0
 80255b4:	780a      	ldrb	r2, [r1, #0]
 80255b6:	fb0e 0e08 	mla	lr, lr, r8, r0
 80255ba:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 80255be:	fb04 e000 	mla	r0, r4, r0, lr
 80255c2:	fb02 f403 	mul.w	r4, r2, r3
 80255c6:	0a00      	lsrs	r0, r0, #8
 80255c8:	1c62      	adds	r2, r4, #1
 80255ca:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80255ce:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80255d2:	4328      	orrs	r0, r5
 80255d4:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80255d8:	700a      	strb	r2, [r1, #0]
 80255da:	784a      	ldrb	r2, [r1, #1]
 80255dc:	435a      	muls	r2, r3
 80255de:	1c54      	adds	r4, r2, #1
 80255e0:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 80255e4:	0a02      	lsrs	r2, r0, #8
 80255e6:	0c00      	lsrs	r0, r0, #16
 80255e8:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80255ec:	704a      	strb	r2, [r1, #1]
 80255ee:	788a      	ldrb	r2, [r1, #2]
 80255f0:	4353      	muls	r3, r2
 80255f2:	1c5a      	adds	r2, r3, #1
 80255f4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80255f8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80255fc:	7088      	strb	r0, [r1, #2]
 80255fe:	b003      	add	sp, #12
 8025600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025604:	2600      	movs	r6, #0
 8025606:	e706      	b.n	8025416 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 8025608:	2000      	movs	r0, #0
 802560a:	4606      	mov	r6, r0
 802560c:	e710      	b.n	8025430 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 802560e:	2000      	movs	r0, #0
 8025610:	e70e      	b.n	8025430 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8025612:	4620      	mov	r0, r4
 8025614:	e70c      	b.n	8025430 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8025616:	2500      	movs	r5, #0
 8025618:	e71e      	b.n	8025458 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 802561a:	2200      	movs	r2, #0
 802561c:	4615      	mov	r5, r2
 802561e:	e729      	b.n	8025474 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8025620:	4662      	mov	r2, ip
 8025622:	4665      	mov	r5, ip
 8025624:	e726      	b.n	8025474 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8025626:	2200      	movs	r2, #0
 8025628:	e724      	b.n	8025474 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 802562a:	4622      	mov	r2, r4
 802562c:	e722      	b.n	8025474 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

0802562e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802562e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025632:	b09b      	sub	sp, #108	@ 0x6c
 8025634:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8025638:	9218      	str	r2, [sp, #96]	@ 0x60
 802563a:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 802563c:	9019      	str	r0, [sp, #100]	@ 0x64
 802563e:	9116      	str	r1, [sp, #88]	@ 0x58
 8025640:	6850      	ldr	r0, [r2, #4]
 8025642:	9307      	str	r3, [sp, #28]
 8025644:	6812      	ldr	r2, [r2, #0]
 8025646:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 8025648:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 802564c:	fb00 1303 	mla	r3, r0, r3, r1
 8025650:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025654:	18d3      	adds	r3, r2, r3
 8025656:	930a      	str	r3, [sp, #40]	@ 0x28
 8025658:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802565a:	681b      	ldr	r3, [r3, #0]
 802565c:	930f      	str	r3, [sp, #60]	@ 0x3c
 802565e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025660:	685e      	ldr	r6, [r3, #4]
 8025662:	3604      	adds	r6, #4
 8025664:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8025666:	2b00      	cmp	r3, #0
 8025668:	dc03      	bgt.n	8025672 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 802566a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802566c:	2b00      	cmp	r3, #0
 802566e:	f340 834f 	ble.w	8025d10 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8025672:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025674:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025678:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802567c:	1e48      	subs	r0, r1, #1
 802567e:	1e57      	subs	r7, r2, #1
 8025680:	9b07      	ldr	r3, [sp, #28]
 8025682:	2b00      	cmp	r3, #0
 8025684:	f340 8178 	ble.w	8025978 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8025688:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 802568a:	142b      	asrs	r3, r5, #16
 802568c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8025690:	d406      	bmi.n	80256a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8025692:	4584      	cmp	ip, r0
 8025694:	da04      	bge.n	80256a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8025696:	2b00      	cmp	r3, #0
 8025698:	db02      	blt.n	80256a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802569a:	42bb      	cmp	r3, r7
 802569c:	f2c0 816d 	blt.w	802597a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 80256a0:	f11c 0c01 	adds.w	ip, ip, #1
 80256a4:	f100 815b 	bmi.w	802595e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80256a8:	4561      	cmp	r1, ip
 80256aa:	f2c0 8158 	blt.w	802595e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80256ae:	3301      	adds	r3, #1
 80256b0:	f100 8155 	bmi.w	802595e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80256b4:	429a      	cmp	r2, r3
 80256b6:	f2c0 8152 	blt.w	802595e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80256ba:	9b07      	ldr	r3, [sp, #28]
 80256bc:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80256be:	9317      	str	r3, [sp, #92]	@ 0x5c
 80256c0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80256c2:	2b00      	cmp	r3, #0
 80256c4:	f340 8178 	ble.w	80259b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80256c8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80256ca:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80256ce:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80256d2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80256d6:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80256d8:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 80256dc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80256de:	141b      	asrs	r3, r3, #16
 80256e0:	f100 81ba 	bmi.w	8025a58 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80256e4:	f101 38ff 	add.w	r8, r1, #4294967295
 80256e8:	4543      	cmp	r3, r8
 80256ea:	f280 81b5 	bge.w	8025a58 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80256ee:	f1bc 0f00 	cmp.w	ip, #0
 80256f2:	f2c0 81b1 	blt.w	8025a58 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80256f6:	f10e 38ff 	add.w	r8, lr, #4294967295
 80256fa:	45c4      	cmp	ip, r8
 80256fc:	f280 81ac 	bge.w	8025a58 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8025700:	b209      	sxth	r1, r1
 8025702:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8025704:	fb0c 3301 	mla	r3, ip, r1, r3
 8025708:	eb04 0803 	add.w	r8, r4, r3
 802570c:	5ce3      	ldrb	r3, [r4, r3]
 802570e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025712:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8025716:	2a00      	cmp	r2, #0
 8025718:	f000 8193 	beq.w	8025a42 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 802571c:	f898 c001 	ldrb.w	ip, [r8, #1]
 8025720:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8025724:	940b      	str	r4, [sp, #44]	@ 0x2c
 8025726:	0e24      	lsrs	r4, r4, #24
 8025728:	9412      	str	r4, [sp, #72]	@ 0x48
 802572a:	b178      	cbz	r0, 802574c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 802572c:	eb08 0c01 	add.w	ip, r8, r1
 8025730:	f818 1001 	ldrb.w	r1, [r8, r1]
 8025734:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025738:	9108      	str	r1, [sp, #32]
 802573a:	0e09      	lsrs	r1, r1, #24
 802573c:	9110      	str	r1, [sp, #64]	@ 0x40
 802573e:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8025742:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025746:	910c      	str	r1, [sp, #48]	@ 0x30
 8025748:	0e09      	lsrs	r1, r1, #24
 802574a:	9113      	str	r1, [sp, #76]	@ 0x4c
 802574c:	b292      	uxth	r2, r2
 802574e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8025750:	b280      	uxth	r0, r0
 8025752:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025754:	fb02 f900 	mul.w	r9, r2, r0
 8025758:	0112      	lsls	r2, r2, #4
 802575a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802575e:	eba2 0809 	sub.w	r8, r2, r9
 8025762:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8025766:	b280      	uxth	r0, r0
 8025768:	fa1f f888 	uxth.w	r8, r8
 802576c:	1a12      	subs	r2, r2, r0
 802576e:	fb08 f101 	mul.w	r1, r8, r1
 8025772:	b292      	uxth	r2, r2
 8025774:	fb02 110e 	mla	r1, r2, lr, r1
 8025778:	fb00 1104 	mla	r1, r0, r4, r1
 802577c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802577e:	fb09 1104 	mla	r1, r9, r4, r1
 8025782:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025786:	2900      	cmp	r1, #0
 8025788:	f000 80de 	beq.w	8025948 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802578c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8025790:	d01b      	beq.n	80257ca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8025792:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8025796:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802579a:	fb0e fa0a 	mul.w	sl, lr, sl
 802579e:	fb0e fe03 	mul.w	lr, lr, r3
 80257a2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80257a6:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80257aa:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80257ae:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80257b2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80257b6:	4453      	add	r3, sl
 80257b8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80257bc:	0a1b      	lsrs	r3, r3, #8
 80257be:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80257c2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80257c6:	ea43 030c 	orr.w	r3, r3, ip
 80257ca:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80257cc:	2cff      	cmp	r4, #255	@ 0xff
 80257ce:	d021      	beq.n	8025814 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80257d0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80257d2:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80257d6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80257d8:	fb04 fb0b 	mul.w	fp, r4, fp
 80257dc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80257de:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80257e2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80257e4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80257e8:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80257ec:	fb04 fa0a 	mul.w	sl, r4, sl
 80257f0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80257f4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80257f8:	44de      	add	lr, fp
 80257fa:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80257fe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025802:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025806:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802580a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802580e:	ea4e 040a 	orr.w	r4, lr, sl
 8025812:	940b      	str	r4, [sp, #44]	@ 0x2c
 8025814:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025816:	2cff      	cmp	r4, #255	@ 0xff
 8025818:	d021      	beq.n	802585e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 802581a:	9c08      	ldr	r4, [sp, #32]
 802581c:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8025820:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025822:	fb04 fb0b 	mul.w	fp, r4, fp
 8025826:	9c08      	ldr	r4, [sp, #32]
 8025828:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802582c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802582e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025832:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8025836:	fb04 fa0a 	mul.w	sl, r4, sl
 802583a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802583e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8025842:	44de      	add	lr, fp
 8025844:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025848:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802584c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025850:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025854:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025858:	ea4e 040a 	orr.w	r4, lr, sl
 802585c:	9408      	str	r4, [sp, #32]
 802585e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025860:	2cff      	cmp	r4, #255	@ 0xff
 8025862:	d021      	beq.n	80258a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8025864:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8025866:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802586a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802586c:	fb04 fb0b 	mul.w	fp, r4, fp
 8025870:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8025872:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025876:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025878:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802587c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8025880:	fb04 fa0a 	mul.w	sl, r4, sl
 8025884:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025888:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802588c:	44de      	add	lr, fp
 802588e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025892:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025896:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802589a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802589e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80258a2:	ea4e 040a 	orr.w	r4, lr, sl
 80258a6:	940c      	str	r4, [sp, #48]	@ 0x30
 80258a8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80258aa:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 80258ae:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80258b2:	43c9      	mvns	r1, r1
 80258b4:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80258b8:	9c08      	ldr	r4, [sp, #32]
 80258ba:	b2c9      	uxtb	r1, r1
 80258bc:	fb08 fc0c 	mul.w	ip, r8, ip
 80258c0:	fb02 cc0e 	mla	ip, r2, lr, ip
 80258c4:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80258c8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80258ca:	fb00 cc0e 	mla	ip, r0, lr, ip
 80258ce:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80258d2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80258d4:	fb09 cc0e 	mla	ip, r9, lr, ip
 80258d8:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 80258dc:	fb08 f80e 	mul.w	r8, r8, lr
 80258e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80258e4:	fb02 8303 	mla	r3, r2, r3, r8
 80258e8:	9a08      	ldr	r2, [sp, #32]
 80258ea:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80258ee:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 80258f2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80258f4:	fb00 330a 	mla	r3, r0, sl, r3
 80258f8:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 80258fc:	fb09 3900 	mla	r9, r9, r0, r3
 8025900:	783b      	ldrb	r3, [r7, #0]
 8025902:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025906:	fb03 f201 	mul.w	r2, r3, r1
 802590a:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 802590e:	1c53      	adds	r3, r2, #1
 8025910:	ea4c 0c09 	orr.w	ip, ip, r9
 8025914:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025918:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 802591c:	703b      	strb	r3, [r7, #0]
 802591e:	787b      	ldrb	r3, [r7, #1]
 8025920:	434b      	muls	r3, r1
 8025922:	1c5a      	adds	r2, r3, #1
 8025924:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8025928:	ea4f 231c 	mov.w	r3, ip, lsr #8
 802592c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8025930:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025934:	707b      	strb	r3, [r7, #1]
 8025936:	78bb      	ldrb	r3, [r7, #2]
 8025938:	4359      	muls	r1, r3
 802593a:	1c4b      	adds	r3, r1, #1
 802593c:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8025940:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8025944:	f887 c002 	strb.w	ip, [r7, #2]
 8025948:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802594a:	3703      	adds	r7, #3
 802594c:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 802594e:	441a      	add	r2, r3
 8025950:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8025952:	441d      	add	r5, r3
 8025954:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8025956:	9225      	str	r2, [sp, #148]	@ 0x94
 8025958:	3b01      	subs	r3, #1
 802595a:	9317      	str	r3, [sp, #92]	@ 0x5c
 802595c:	e6b0      	b.n	80256c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802595e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8025960:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8025962:	441c      	add	r4, r3
 8025964:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8025966:	441d      	add	r5, r3
 8025968:	9b07      	ldr	r3, [sp, #28]
 802596a:	9425      	str	r4, [sp, #148]	@ 0x94
 802596c:	3b01      	subs	r3, #1
 802596e:	9307      	str	r3, [sp, #28]
 8025970:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025972:	3303      	adds	r3, #3
 8025974:	930a      	str	r3, [sp, #40]	@ 0x28
 8025976:	e683      	b.n	8025680 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8025978:	d026      	beq.n	80259c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 802597a:	9b07      	ldr	r3, [sp, #28]
 802597c:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 802597e:	3b01      	subs	r3, #1
 8025980:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8025982:	fb00 4003 	mla	r0, r0, r3, r4
 8025986:	1400      	asrs	r0, r0, #16
 8025988:	f53f ae97 	bmi.w	80256ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802598c:	3901      	subs	r1, #1
 802598e:	4288      	cmp	r0, r1
 8025990:	f6bf ae93 	bge.w	80256ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8025994:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8025996:	fb01 5303 	mla	r3, r1, r3, r5
 802599a:	141b      	asrs	r3, r3, #16
 802599c:	f53f ae8d 	bmi.w	80256ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80259a0:	3a01      	subs	r2, #1
 80259a2:	4293      	cmp	r3, r2
 80259a4:	f6bf ae89 	bge.w	80256ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80259a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80259aa:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80259ae:	f103 0e03 	add.w	lr, r3, #3
 80259b2:	f1bb 0f00 	cmp.w	fp, #0
 80259b6:	dc6d      	bgt.n	8025a94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 80259b8:	9b07      	ldr	r3, [sp, #28]
 80259ba:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80259be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80259c0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80259c4:	4423      	add	r3, r4
 80259c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80259c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80259ca:	2b00      	cmp	r3, #0
 80259cc:	f340 81a0 	ble.w	8025d10 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 80259d0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80259d4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80259d6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80259da:	eeb0 6a62 	vmov.f32	s12, s5
 80259de:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80259e2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80259e6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80259ea:	ed8d 6a25 	vstr	s12, [sp, #148]	@ 0x94
 80259ee:	eeb0 6a43 	vmov.f32	s12, s6
 80259f2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80259f6:	ee16 5a10 	vmov	r5, s12
 80259fa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80259fe:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025a02:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025a06:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025a0a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025a0e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025a12:	ee12 2a90 	vmov	r2, s5
 8025a16:	eef0 2a47 	vmov.f32	s5, s14
 8025a1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8025a1e:	ee13 2a10 	vmov	r2, s6
 8025a22:	9327      	str	r3, [sp, #156]	@ 0x9c
 8025a24:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025a26:	eeb0 3a67 	vmov.f32	s6, s15
 8025a2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8025a2e:	9328      	str	r3, [sp, #160]	@ 0xa0
 8025a30:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8025a32:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8025a34:	3b01      	subs	r3, #1
 8025a36:	9316      	str	r3, [sp, #88]	@ 0x58
 8025a38:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025a3a:	bf08      	it	eq
 8025a3c:	4613      	moveq	r3, r2
 8025a3e:	9307      	str	r3, [sp, #28]
 8025a40:	e610      	b.n	8025664 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8025a42:	2800      	cmp	r0, #0
 8025a44:	f43f ae82 	beq.w	802574c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8025a48:	f818 1001 	ldrb.w	r1, [r8, r1]
 8025a4c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025a50:	9108      	str	r1, [sp, #32]
 8025a52:	0e09      	lsrs	r1, r1, #24
 8025a54:	9110      	str	r1, [sp, #64]	@ 0x40
 8025a56:	e679      	b.n	802574c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8025a58:	f113 0801 	adds.w	r8, r3, #1
 8025a5c:	f53f af74 	bmi.w	8025948 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8025a60:	4541      	cmp	r1, r8
 8025a62:	f6ff af71 	blt.w	8025948 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8025a66:	f11c 0801 	adds.w	r8, ip, #1
 8025a6a:	f53f af6d 	bmi.w	8025948 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8025a6e:	45c6      	cmp	lr, r8
 8025a70:	f6ff af6a 	blt.w	8025948 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8025a74:	b209      	sxth	r1, r1
 8025a76:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8025a7a:	fa0f f38e 	sxth.w	r3, lr
 8025a7e:	9100      	str	r1, [sp, #0]
 8025a80:	4639      	mov	r1, r7
 8025a82:	9301      	str	r3, [sp, #4]
 8025a84:	4633      	mov	r3, r6
 8025a86:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8025a8a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8025a8c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8025a8e:	f7ff fca3 	bl	80253d8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8025a92:	e759      	b.n	8025948 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8025a94:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8025a96:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8025a9a:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8025a9c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025aa0:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025aa2:	1427      	asrs	r7, r4, #16
 8025aa4:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8025aa6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025aaa:	142b      	asrs	r3, r5, #16
 8025aac:	fb01 7303 	mla	r3, r1, r3, r7
 8025ab0:	18e7      	adds	r7, r4, r3
 8025ab2:	5ce3      	ldrb	r3, [r4, r3]
 8025ab4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025ab8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8025abc:	2a00      	cmp	r2, #0
 8025abe:	f000 811d 	beq.w	8025cfc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 8025ac2:	f897 8001 	ldrb.w	r8, [r7, #1]
 8025ac6:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8025aca:	940d      	str	r4, [sp, #52]	@ 0x34
 8025acc:	0e24      	lsrs	r4, r4, #24
 8025ace:	9414      	str	r4, [sp, #80]	@ 0x50
 8025ad0:	b170      	cbz	r0, 8025af0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8025ad2:	eb07 0801 	add.w	r8, r7, r1
 8025ad6:	5c79      	ldrb	r1, [r7, r1]
 8025ad8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025adc:	9109      	str	r1, [sp, #36]	@ 0x24
 8025ade:	0e09      	lsrs	r1, r1, #24
 8025ae0:	9111      	str	r1, [sp, #68]	@ 0x44
 8025ae2:	f898 1001 	ldrb.w	r1, [r8, #1]
 8025ae6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025aea:	910e      	str	r1, [sp, #56]	@ 0x38
 8025aec:	0e09      	lsrs	r1, r1, #24
 8025aee:	9115      	str	r1, [sp, #84]	@ 0x54
 8025af0:	b292      	uxth	r2, r2
 8025af2:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025af4:	b280      	uxth	r0, r0
 8025af6:	fb02 f900 	mul.w	r9, r2, r0
 8025afa:	0112      	lsls	r2, r2, #4
 8025afc:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8025b00:	eba2 0809 	sub.w	r8, r2, r9
 8025b04:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 8025b08:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8025b0a:	b280      	uxth	r0, r0
 8025b0c:	fa1f f888 	uxth.w	r8, r8
 8025b10:	1a09      	subs	r1, r1, r0
 8025b12:	fb08 f202 	mul.w	r2, r8, r2
 8025b16:	b289      	uxth	r1, r1
 8025b18:	fb01 220c 	mla	r2, r1, ip, r2
 8025b1c:	fb00 2204 	mla	r2, r0, r4, r2
 8025b20:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8025b22:	fb09 2204 	mla	r2, r9, r4, r2
 8025b26:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8025b2a:	2a00      	cmp	r2, #0
 8025b2c:	f000 80db 	beq.w	8025ce6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8025b30:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8025b34:	d019      	beq.n	8025b6a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 8025b36:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8025b3a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025b3e:	fb0c fa0a 	mul.w	sl, ip, sl
 8025b42:	fb0c fc03 	mul.w	ip, ip, r3
 8025b46:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025b4a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8025b4e:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8025b52:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025b56:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8025b5a:	4453      	add	r3, sl
 8025b5c:	0a3f      	lsrs	r7, r7, #8
 8025b5e:	0a1b      	lsrs	r3, r3, #8
 8025b60:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8025b64:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025b68:	433b      	orrs	r3, r7
 8025b6a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025b6c:	2cff      	cmp	r4, #255	@ 0xff
 8025b6e:	d020      	beq.n	8025bb2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 8025b70:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8025b72:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025b76:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025b78:	4367      	muls	r7, r4
 8025b7a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8025b7c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025b80:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025b84:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025b86:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8025b8a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025b8e:	fb04 fa0a 	mul.w	sl, r4, sl
 8025b92:	44bc      	add	ip, r7
 8025b94:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8025b98:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025b9c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025ba0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025ba4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025ba8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025bac:	ea4c 040a 	orr.w	r4, ip, sl
 8025bb0:	940d      	str	r4, [sp, #52]	@ 0x34
 8025bb2:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025bb4:	2cff      	cmp	r4, #255	@ 0xff
 8025bb6:	d020      	beq.n	8025bfa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 8025bb8:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8025bba:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025bbe:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025bc0:	4367      	muls	r7, r4
 8025bc2:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8025bc4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025bc8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025bcc:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025bce:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8025bd2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025bd6:	fb04 fa0a 	mul.w	sl, r4, sl
 8025bda:	44bc      	add	ip, r7
 8025bdc:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8025be0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025be4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025be8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025bec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025bf0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025bf4:	ea4c 040a 	orr.w	r4, ip, sl
 8025bf8:	9409      	str	r4, [sp, #36]	@ 0x24
 8025bfa:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8025bfc:	2cff      	cmp	r4, #255	@ 0xff
 8025bfe:	d020      	beq.n	8025c42 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 8025c00:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025c02:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025c06:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8025c08:	4367      	muls	r7, r4
 8025c0a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025c0c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025c10:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025c14:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8025c16:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8025c1a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025c1e:	fb04 fa0a 	mul.w	sl, r4, sl
 8025c22:	44bc      	add	ip, r7
 8025c24:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8025c28:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025c2c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025c30:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025c34:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025c38:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025c3c:	ea4c 040a 	orr.w	r4, ip, sl
 8025c40:	940e      	str	r4, [sp, #56]	@ 0x38
 8025c42:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8025c44:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8025c48:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025c4c:	43d2      	mvns	r2, r2
 8025c4e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025c52:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8025c54:	b2d2      	uxtb	r2, r2
 8025c56:	fb08 f707 	mul.w	r7, r8, r7
 8025c5a:	fb01 770c 	mla	r7, r1, ip, r7
 8025c5e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025c62:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025c64:	fb00 770c 	mla	r7, r0, ip, r7
 8025c68:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025c6c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8025c6e:	fb09 770c 	mla	r7, r9, ip, r7
 8025c72:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8025c76:	fb08 f80c 	mul.w	r8, r8, ip
 8025c7a:	0a3f      	lsrs	r7, r7, #8
 8025c7c:	fb01 8303 	mla	r3, r1, r3, r8
 8025c80:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8025c82:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8025c86:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8025c8a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8025c8c:	fb00 330a 	mla	r3, r0, sl, r3
 8025c90:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 8025c94:	fb09 3c0c 	mla	ip, r9, ip, r3
 8025c98:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8025c9c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025ca0:	fb03 f102 	mul.w	r1, r3, r2
 8025ca4:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8025ca8:	1c4b      	adds	r3, r1, #1
 8025caa:	ea47 070c 	orr.w	r7, r7, ip
 8025cae:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8025cb2:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8025cb6:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8025cba:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 8025cbe:	4353      	muls	r3, r2
 8025cc0:	1c59      	adds	r1, r3, #1
 8025cc2:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8025cc6:	0a3b      	lsrs	r3, r7, #8
 8025cc8:	0c3f      	lsrs	r7, r7, #16
 8025cca:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8025cce:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8025cd2:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8025cd6:	435a      	muls	r2, r3
 8025cd8:	1c53      	adds	r3, r2, #1
 8025cda:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8025cde:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8025ce2:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8025ce6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8025ce8:	f10e 0e03 	add.w	lr, lr, #3
 8025cec:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8025cee:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025cf2:	441a      	add	r2, r3
 8025cf4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8025cf6:	9225      	str	r2, [sp, #148]	@ 0x94
 8025cf8:	441d      	add	r5, r3
 8025cfa:	e65a      	b.n	80259b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8025cfc:	2800      	cmp	r0, #0
 8025cfe:	f43f aef7 	beq.w	8025af0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8025d02:	5c79      	ldrb	r1, [r7, r1]
 8025d04:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025d08:	9109      	str	r1, [sp, #36]	@ 0x24
 8025d0a:	0e09      	lsrs	r1, r1, #24
 8025d0c:	9111      	str	r1, [sp, #68]	@ 0x44
 8025d0e:	e6ef      	b.n	8025af0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8025d10:	b01b      	add	sp, #108	@ 0x6c
 8025d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025d16 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8025d16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025d1a:	b08d      	sub	sp, #52	@ 0x34
 8025d1c:	468b      	mov	fp, r1
 8025d1e:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	@ 0x5c
 8025d22:	f89d 106c 	ldrb.w	r1, [sp, #108]	@ 0x6c
 8025d26:	fb0c 5703 	mla	r7, ip, r3, r5
 8025d2a:	f1bc 0f00 	cmp.w	ip, #0
 8025d2e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025d30:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8025d34:	f9bd e058 	ldrsh.w	lr, [sp, #88]	@ 0x58
 8025d38:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
 8025d3c:	f89d a068 	ldrb.w	sl, [sp, #104]	@ 0x68
 8025d40:	eb02 0607 	add.w	r6, r2, r7
 8025d44:	f89b 4000 	ldrb.w	r4, [fp]
 8025d48:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8025d4c:	f89b 1002 	ldrb.w	r1, [fp, #2]
 8025d50:	f2c0 80c1 	blt.w	8025ed6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8025d54:	45e6      	cmp	lr, ip
 8025d56:	f340 80be 	ble.w	8025ed6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8025d5a:	2d00      	cmp	r5, #0
 8025d5c:	f2c0 80b7 	blt.w	8025ece <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8025d60:	42ab      	cmp	r3, r5
 8025d62:	f340 80b4 	ble.w	8025ece <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8025d66:	5dd2      	ldrb	r2, [r2, r7]
 8025d68:	9205      	str	r2, [sp, #20]
 8025d6a:	7872      	ldrb	r2, [r6, #1]
 8025d6c:	9206      	str	r2, [sp, #24]
 8025d6e:	78b2      	ldrb	r2, [r6, #2]
 8025d70:	9207      	str	r2, [sp, #28]
 8025d72:	1c6a      	adds	r2, r5, #1
 8025d74:	f100 80b6 	bmi.w	8025ee4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8025d78:	4293      	cmp	r3, r2
 8025d7a:	f340 80b3 	ble.w	8025ee4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8025d7e:	f1b8 0f00 	cmp.w	r8, #0
 8025d82:	f000 80af 	beq.w	8025ee4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8025d86:	78f2      	ldrb	r2, [r6, #3]
 8025d88:	9201      	str	r2, [sp, #4]
 8025d8a:	7932      	ldrb	r2, [r6, #4]
 8025d8c:	9202      	str	r2, [sp, #8]
 8025d8e:	7972      	ldrb	r2, [r6, #5]
 8025d90:	9203      	str	r2, [sp, #12]
 8025d92:	f11c 0c01 	adds.w	ip, ip, #1
 8025d96:	f100 80ad 	bmi.w	8025ef4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8025d9a:	45e6      	cmp	lr, ip
 8025d9c:	f340 80aa 	ble.w	8025ef4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8025da0:	f1ba 0f00 	cmp.w	sl, #0
 8025da4:	f000 80a6 	beq.w	8025ef4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8025da8:	2d00      	cmp	r5, #0
 8025daa:	f2c0 809f 	blt.w	8025eec <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8025dae:	42ab      	cmp	r3, r5
 8025db0:	f340 809c 	ble.w	8025eec <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8025db4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8025db8:	f816 9002 	ldrb.w	r9, [r6, r2]
 8025dbc:	2203      	movs	r2, #3
 8025dbe:	fb03 6c02 	mla	ip, r3, r2, r6
 8025dc2:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8025dc6:	f89c e002 	ldrb.w	lr, [ip, #2]
 8025dca:	9704      	str	r7, [sp, #16]
 8025dcc:	3501      	adds	r5, #1
 8025dce:	f100 8098 	bmi.w	8025f02 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8025dd2:	42ab      	cmp	r3, r5
 8025dd4:	f340 8095 	ble.w	8025f02 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8025dd8:	f1b8 0f00 	cmp.w	r8, #0
 8025ddc:	f000 8091 	beq.w	8025f02 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8025de0:	f04f 0c03 	mov.w	ip, #3
 8025de4:	fb13 c20c 	smlabb	r2, r3, ip, ip
 8025de8:	5cb5      	ldrb	r5, [r6, r2]
 8025dea:	fb03 620c 	mla	r2, r3, ip, r6
 8025dee:	fb03 630c 	mla	r3, r3, ip, r6
 8025df2:	7912      	ldrb	r2, [r2, #4]
 8025df4:	795e      	ldrb	r6, [r3, #5]
 8025df6:	fa1f f388 	uxth.w	r3, r8
 8025dfa:	fa1f fc8a 	uxth.w	ip, sl
 8025dfe:	fb03 f70c 	mul.w	r7, r3, ip
 8025e02:	011b      	lsls	r3, r3, #4
 8025e04:	9708      	str	r7, [sp, #32]
 8025e06:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8025e0a:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
 8025e0e:	1bdb      	subs	r3, r3, r7
 8025e10:	f8bd 702c 	ldrh.w	r7, [sp, #44]	@ 0x2c
 8025e14:	fa1f fc8c 	uxth.w	ip, ip
 8025e18:	b29b      	uxth	r3, r3
 8025e1a:	9709      	str	r7, [sp, #36]	@ 0x24
 8025e1c:	ebaa 0a0c 	sub.w	sl, sl, ip
 8025e20:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8025e22:	930a      	str	r3, [sp, #40]	@ 0x28
 8025e24:	fa1f fa8a 	uxth.w	sl, sl
 8025e28:	ea6f 0807 	mvn.w	r8, r7
 8025e2c:	9f01      	ldr	r7, [sp, #4]
 8025e2e:	435f      	muls	r7, r3
 8025e30:	9b05      	ldr	r3, [sp, #20]
 8025e32:	fa5f f888 	uxtb.w	r8, r8
 8025e36:	fb0a 7703 	mla	r7, sl, r3, r7
 8025e3a:	9b08      	ldr	r3, [sp, #32]
 8025e3c:	fb14 f408 	smulbb	r4, r4, r8
 8025e40:	fb0c 7709 	mla	r7, ip, r9, r7
 8025e44:	fb10 f008 	smulbb	r0, r0, r8
 8025e48:	fb11 f108 	smulbb	r1, r1, r8
 8025e4c:	fb03 7705 	mla	r7, r3, r5, r7
 8025e50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025e52:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8025e56:	fb07 4703 	mla	r7, r7, r3, r4
 8025e5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025e5c:	b2bf      	uxth	r7, r7
 8025e5e:	1c7c      	adds	r4, r7, #1
 8025e60:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 8025e64:	1224      	asrs	r4, r4, #8
 8025e66:	f88b 4000 	strb.w	r4, [fp]
 8025e6a:	9c02      	ldr	r4, [sp, #8]
 8025e6c:	435c      	muls	r4, r3
 8025e6e:	9b06      	ldr	r3, [sp, #24]
 8025e70:	fb0a 4403 	mla	r4, sl, r3, r4
 8025e74:	9b04      	ldr	r3, [sp, #16]
 8025e76:	fb0c 4403 	mla	r4, ip, r3, r4
 8025e7a:	9b08      	ldr	r3, [sp, #32]
 8025e7c:	fb03 4402 	mla	r4, r3, r2, r4
 8025e80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025e82:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025e84:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8025e88:	fb04 0403 	mla	r4, r4, r3, r0
 8025e8c:	9b03      	ldr	r3, [sp, #12]
 8025e8e:	435a      	muls	r2, r3
 8025e90:	b2a4      	uxth	r4, r4
 8025e92:	4613      	mov	r3, r2
 8025e94:	9a07      	ldr	r2, [sp, #28]
 8025e96:	1c60      	adds	r0, r4, #1
 8025e98:	fb0a 3a02 	mla	sl, sl, r2, r3
 8025e9c:	9b08      	ldr	r3, [sp, #32]
 8025e9e:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8025ea2:	fb0c ac0e 	mla	ip, ip, lr, sl
 8025ea6:	1224      	asrs	r4, r4, #8
 8025ea8:	fb03 c606 	mla	r6, r3, r6, ip
 8025eac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025eae:	f88b 4001 	strb.w	r4, [fp, #1]
 8025eb2:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8025eb6:	fb06 1103 	mla	r1, r6, r3, r1
 8025eba:	b289      	uxth	r1, r1
 8025ebc:	1c4e      	adds	r6, r1, #1
 8025ebe:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 8025ec2:	1209      	asrs	r1, r1, #8
 8025ec4:	f88b 1002 	strb.w	r1, [fp, #2]
 8025ec8:	b00d      	add	sp, #52	@ 0x34
 8025eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025ece:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8025ed2:	9405      	str	r4, [sp, #20]
 8025ed4:	e74d      	b.n	8025d72 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 8025ed6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025eda:	9401      	str	r4, [sp, #4]
 8025edc:	9405      	str	r4, [sp, #20]
 8025ede:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8025ee2:	e756      	b.n	8025d92 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8025ee4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025ee8:	9401      	str	r4, [sp, #4]
 8025eea:	e752      	b.n	8025d92 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8025eec:	468e      	mov	lr, r1
 8025eee:	9004      	str	r0, [sp, #16]
 8025ef0:	46a1      	mov	r9, r4
 8025ef2:	e76b      	b.n	8025dcc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 8025ef4:	460e      	mov	r6, r1
 8025ef6:	4602      	mov	r2, r0
 8025ef8:	4625      	mov	r5, r4
 8025efa:	468e      	mov	lr, r1
 8025efc:	9004      	str	r0, [sp, #16]
 8025efe:	46a1      	mov	r9, r4
 8025f00:	e779      	b.n	8025df6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 8025f02:	460e      	mov	r6, r1
 8025f04:	4602      	mov	r2, r0
 8025f06:	4625      	mov	r5, r4
 8025f08:	e775      	b.n	8025df6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

08025f0a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025f0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025f0e:	b09f      	sub	sp, #124	@ 0x7c
 8025f10:	920e      	str	r2, [sp, #56]	@ 0x38
 8025f12:	9307      	str	r3, [sp, #28]
 8025f14:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8025f16:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 8025f1a:	901d      	str	r0, [sp, #116]	@ 0x74
 8025f1c:	930c      	str	r3, [sp, #48]	@ 0x30
 8025f1e:	6850      	ldr	r0, [r2, #4]
 8025f20:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025f22:	6812      	ldr	r2, [r2, #0]
 8025f24:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 8025f28:	e9dd a829 	ldrd	sl, r8, [sp, #164]	@ 0xa4
 8025f2c:	fb00 1303 	mla	r3, r0, r3, r1
 8025f30:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025f34:	18d3      	adds	r3, r2, r3
 8025f36:	9308      	str	r3, [sp, #32]
 8025f38:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8025f3a:	681b      	ldr	r3, [r3, #0]
 8025f3c:	930a      	str	r3, [sp, #40]	@ 0x28
 8025f3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025f40:	43db      	mvns	r3, r3
 8025f42:	b2db      	uxtb	r3, r3
 8025f44:	9309      	str	r3, [sp, #36]	@ 0x24
 8025f46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025f48:	2b00      	cmp	r3, #0
 8025f4a:	dc03      	bgt.n	8025f54 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8025f4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025f4e:	2b00      	cmp	r3, #0
 8025f50:	f340 81f5 	ble.w	802633e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8025f54:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8025f56:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025f5a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025f5e:	1e48      	subs	r0, r1, #1
 8025f60:	1e54      	subs	r4, r2, #1
 8025f62:	9b07      	ldr	r3, [sp, #28]
 8025f64:	2b00      	cmp	r3, #0
 8025f66:	f340 80d5 	ble.w	8026114 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8025f6a:	ea5f 452a 	movs.w	r5, sl, asr #16
 8025f6e:	ea4f 4328 	mov.w	r3, r8, asr #16
 8025f72:	d406      	bmi.n	8025f82 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025f74:	4285      	cmp	r5, r0
 8025f76:	da04      	bge.n	8025f82 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025f78:	2b00      	cmp	r3, #0
 8025f7a:	db02      	blt.n	8025f82 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025f7c:	42a3      	cmp	r3, r4
 8025f7e:	f2c0 80ca 	blt.w	8026116 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8025f82:	3501      	adds	r5, #1
 8025f84:	f100 80bb 	bmi.w	80260fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8025f88:	42a9      	cmp	r1, r5
 8025f8a:	f2c0 80b8 	blt.w	80260fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8025f8e:	3301      	adds	r3, #1
 8025f90:	f100 80b5 	bmi.w	80260fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8025f94:	429a      	cmp	r2, r3
 8025f96:	f2c0 80b2 	blt.w	80260fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8025f9a:	9b07      	ldr	r3, [sp, #28]
 8025f9c:	9d08      	ldr	r5, [sp, #32]
 8025f9e:	930d      	str	r3, [sp, #52]	@ 0x34
 8025fa0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025fa2:	2b00      	cmp	r3, #0
 8025fa4:	f340 80d6 	ble.w	8026154 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 8025fa8:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 8025faa:	ea4f 4428 	mov.w	r4, r8, asr #16
 8025fae:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8025fb0:	f3ca 3203 	ubfx	r2, sl, #12, #4
 8025fb4:	68c6      	ldr	r6, [r0, #12]
 8025fb6:	ea5f 402a 	movs.w	r0, sl, asr #16
 8025fba:	f3c8 3103 	ubfx	r1, r8, #12, #4
 8025fbe:	689b      	ldr	r3, [r3, #8]
 8025fc0:	f100 810f 	bmi.w	80261e2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8025fc4:	1e5f      	subs	r7, r3, #1
 8025fc6:	42b8      	cmp	r0, r7
 8025fc8:	f280 810b 	bge.w	80261e2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8025fcc:	2c00      	cmp	r4, #0
 8025fce:	f2c0 8108 	blt.w	80261e2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8025fd2:	1e77      	subs	r7, r6, #1
 8025fd4:	42bc      	cmp	r4, r7
 8025fd6:	f280 8104 	bge.w	80261e2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8025fda:	b21b      	sxth	r3, r3
 8025fdc:	fb04 0003 	mla	r0, r4, r3, r0
 8025fe0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8025fe2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025fe6:	1826      	adds	r6, r4, r0
 8025fe8:	5c24      	ldrb	r4, [r4, r0]
 8025fea:	78b7      	ldrb	r7, [r6, #2]
 8025fec:	7870      	ldrb	r0, [r6, #1]
 8025fee:	970f      	str	r7, [sp, #60]	@ 0x3c
 8025ff0:	7977      	ldrb	r7, [r6, #5]
 8025ff2:	f896 e003 	ldrb.w	lr, [r6, #3]
 8025ff6:	f896 c004 	ldrb.w	ip, [r6, #4]
 8025ffa:	9710      	str	r7, [sp, #64]	@ 0x40
 8025ffc:	b1c9      	cbz	r1, 8026032 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8025ffe:	f04f 0b03 	mov.w	fp, #3
 8026002:	f06f 0904 	mvn.w	r9, #4
 8026006:	3605      	adds	r6, #5
 8026008:	fb13 930b 	smlabb	r3, r3, fp, r9
 802600c:	eb06 0b03 	add.w	fp, r6, r3
 8026010:	5cf3      	ldrb	r3, [r6, r3]
 8026012:	9311      	str	r3, [sp, #68]	@ 0x44
 8026014:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8026018:	9313      	str	r3, [sp, #76]	@ 0x4c
 802601a:	f89b 3002 	ldrb.w	r3, [fp, #2]
 802601e:	9315      	str	r3, [sp, #84]	@ 0x54
 8026020:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8026024:	9312      	str	r3, [sp, #72]	@ 0x48
 8026026:	f89b 3004 	ldrb.w	r3, [fp, #4]
 802602a:	9314      	str	r3, [sp, #80]	@ 0x50
 802602c:	f89b 3005 	ldrb.w	r3, [fp, #5]
 8026030:	9316      	str	r3, [sp, #88]	@ 0x58
 8026032:	b292      	uxth	r2, r2
 8026034:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8026036:	b289      	uxth	r1, r1
 8026038:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 802603c:	fb02 f601 	mul.w	r6, r2, r1
 8026040:	0112      	lsls	r2, r2, #4
 8026042:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 8026046:	f5c2 7980 	rsb	r9, r2, #256	@ 0x100
 802604a:	1b92      	subs	r2, r2, r6
 802604c:	b289      	uxth	r1, r1
 802604e:	b292      	uxth	r2, r2
 8026050:	eba9 0901 	sub.w	r9, r9, r1
 8026054:	fb02 fe0e 	mul.w	lr, r2, lr
 8026058:	fa1f f989 	uxth.w	r9, r9
 802605c:	fb02 fc0c 	mul.w	ip, r2, ip
 8026060:	fb09 e404 	mla	r4, r9, r4, lr
 8026064:	f895 e000 	ldrb.w	lr, [r5]
 8026068:	fb09 c000 	mla	r0, r9, r0, ip
 802606c:	fb01 4407 	mla	r4, r1, r7, r4
 8026070:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8026072:	fb06 4407 	mla	r4, r6, r7, r4
 8026076:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8026078:	fb1e fe07 	smulbb	lr, lr, r7
 802607c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8026080:	fb04 e403 	mla	r4, r4, r3, lr
 8026084:	b2a4      	uxth	r4, r4
 8026086:	f104 0e01 	add.w	lr, r4, #1
 802608a:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 802608e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026090:	fb01 0004 	mla	r0, r1, r4, r0
 8026094:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026096:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802609a:	fb06 0004 	mla	r0, r6, r4, r0
 802609e:	786c      	ldrb	r4, [r5, #1]
 80260a0:	f885 e000 	strb.w	lr, [r5]
 80260a4:	fb14 f407 	smulbb	r4, r4, r7
 80260a8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80260ac:	fb00 4003 	mla	r0, r0, r3, r4
 80260b0:	b280      	uxth	r0, r0
 80260b2:	1c44      	adds	r4, r0, #1
 80260b4:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 80260b8:	1200      	asrs	r0, r0, #8
 80260ba:	7068      	strb	r0, [r5, #1]
 80260bc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80260be:	4342      	muls	r2, r0
 80260c0:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80260c2:	fb09 2200 	mla	r2, r9, r0, r2
 80260c6:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80260c8:	fb01 2100 	mla	r1, r1, r0, r2
 80260cc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80260ce:	fb06 1602 	mla	r6, r6, r2, r1
 80260d2:	78a9      	ldrb	r1, [r5, #2]
 80260d4:	fb11 f107 	smulbb	r1, r1, r7
 80260d8:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80260dc:	fb06 1303 	mla	r3, r6, r3, r1
 80260e0:	b29b      	uxth	r3, r3
 80260e2:	1c5e      	adds	r6, r3, #1
 80260e4:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 80260e8:	121b      	asrs	r3, r3, #8
 80260ea:	70ab      	strb	r3, [r5, #2]
 80260ec:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80260ee:	3503      	adds	r5, #3
 80260f0:	449a      	add	sl, r3
 80260f2:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80260f4:	4498      	add	r8, r3
 80260f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80260f8:	3b01      	subs	r3, #1
 80260fa:	930d      	str	r3, [sp, #52]	@ 0x34
 80260fc:	e750      	b.n	8025fa0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80260fe:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8026100:	449a      	add	sl, r3
 8026102:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8026104:	4498      	add	r8, r3
 8026106:	9b07      	ldr	r3, [sp, #28]
 8026108:	3b01      	subs	r3, #1
 802610a:	9307      	str	r3, [sp, #28]
 802610c:	9b08      	ldr	r3, [sp, #32]
 802610e:	3303      	adds	r3, #3
 8026110:	9308      	str	r3, [sp, #32]
 8026112:	e726      	b.n	8025f62 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8026114:	d026      	beq.n	8026164 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8026116:	9b07      	ldr	r3, [sp, #28]
 8026118:	982b      	ldr	r0, [sp, #172]	@ 0xac
 802611a:	3b01      	subs	r3, #1
 802611c:	fb00 a003 	mla	r0, r0, r3, sl
 8026120:	1400      	asrs	r0, r0, #16
 8026122:	f53f af3a 	bmi.w	8025f9a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026126:	3901      	subs	r1, #1
 8026128:	4288      	cmp	r0, r1
 802612a:	f6bf af36 	bge.w	8025f9a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802612e:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8026130:	fb01 8303 	mla	r3, r1, r3, r8
 8026134:	141b      	asrs	r3, r3, #16
 8026136:	f53f af30 	bmi.w	8025f9a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802613a:	3a01      	subs	r2, #1
 802613c:	4293      	cmp	r3, r2
 802613e:	f6bf af2c 	bge.w	8025f9a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026142:	9b08      	ldr	r3, [sp, #32]
 8026144:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8026148:	1cdd      	adds	r5, r3, #3
 802614a:	f8bd e030 	ldrh.w	lr, [sp, #48]	@ 0x30
 802614e:	f1bc 0f00 	cmp.w	ip, #0
 8026152:	dc5f      	bgt.n	8026214 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 8026154:	9b07      	ldr	r3, [sp, #28]
 8026156:	9a08      	ldr	r2, [sp, #32]
 8026158:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802615c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026160:	441a      	add	r2, r3
 8026162:	9208      	str	r2, [sp, #32]
 8026164:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026166:	2b00      	cmp	r3, #0
 8026168:	f340 80e9 	ble.w	802633e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 802616c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8026170:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026172:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026176:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802617a:	eef0 6a62 	vmov.f32	s13, s5
 802617e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026182:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026186:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802618a:	ee16 aa90 	vmov	sl, s13
 802618e:	eef0 6a43 	vmov.f32	s13, s6
 8026192:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026196:	ee16 8a90 	vmov	r8, s13
 802619a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802619e:	ee61 7a27 	vmul.f32	s15, s2, s15
 80261a2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80261a6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80261aa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80261ae:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80261b2:	ee12 2a90 	vmov	r2, s5
 80261b6:	eef0 2a47 	vmov.f32	s5, s14
 80261ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80261be:	ee13 2a10 	vmov	r2, s6
 80261c2:	932b      	str	r3, [sp, #172]	@ 0xac
 80261c4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80261c6:	eeb0 3a67 	vmov.f32	s6, s15
 80261ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80261ce:	932c      	str	r3, [sp, #176]	@ 0xb0
 80261d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80261d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80261d4:	3b01      	subs	r3, #1
 80261d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80261d8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80261da:	bf08      	it	eq
 80261dc:	4613      	moveq	r3, r2
 80261de:	9307      	str	r3, [sp, #28]
 80261e0:	e6b1      	b.n	8025f46 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80261e2:	1c47      	adds	r7, r0, #1
 80261e4:	d482      	bmi.n	80260ec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80261e6:	42bb      	cmp	r3, r7
 80261e8:	db80      	blt.n	80260ec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80261ea:	1c67      	adds	r7, r4, #1
 80261ec:	f53f af7e 	bmi.w	80260ec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80261f0:	42be      	cmp	r6, r7
 80261f2:	f6ff af7b 	blt.w	80260ec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80261f6:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80261f8:	b236      	sxth	r6, r6
 80261fa:	9001      	str	r0, [sp, #4]
 80261fc:	b21b      	sxth	r3, r3
 80261fe:	9600      	str	r6, [sp, #0]
 8026200:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8026202:	e9cd 1704 	strd	r1, r7, [sp, #16]
 8026206:	e9cd 4202 	strd	r4, r2, [sp, #8]
 802620a:	4629      	mov	r1, r5
 802620c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802620e:	f7ff fd82 	bl	8025d16 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8026212:	e76b      	b.n	80260ec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8026214:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 8026216:	ea4f 402a 	mov.w	r0, sl, asr #16
 802621a:	f3c8 3203 	ubfx	r2, r8, #12, #4
 802621e:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8026222:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8026226:	ea4f 4128 	mov.w	r1, r8, asr #16
 802622a:	fb07 0101 	mla	r1, r7, r1, r0
 802622e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026230:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026234:	1844      	adds	r4, r0, r1
 8026236:	5c40      	ldrb	r0, [r0, r1]
 8026238:	78a6      	ldrb	r6, [r4, #2]
 802623a:	7861      	ldrb	r1, [r4, #1]
 802623c:	960f      	str	r6, [sp, #60]	@ 0x3c
 802623e:	78e6      	ldrb	r6, [r4, #3]
 8026240:	910d      	str	r1, [sp, #52]	@ 0x34
 8026242:	9610      	str	r6, [sp, #64]	@ 0x40
 8026244:	f894 9004 	ldrb.w	r9, [r4, #4]
 8026248:	f894 b005 	ldrb.w	fp, [r4, #5]
 802624c:	b192      	cbz	r2, 8026274 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 802624e:	f06f 0604 	mvn.w	r6, #4
 8026252:	2103      	movs	r1, #3
 8026254:	3405      	adds	r4, #5
 8026256:	fb17 6701 	smlabb	r7, r7, r1, r6
 802625a:	19e6      	adds	r6, r4, r7
 802625c:	5de4      	ldrb	r4, [r4, r7]
 802625e:	9417      	str	r4, [sp, #92]	@ 0x5c
 8026260:	7874      	ldrb	r4, [r6, #1]
 8026262:	9419      	str	r4, [sp, #100]	@ 0x64
 8026264:	78b4      	ldrb	r4, [r6, #2]
 8026266:	941b      	str	r4, [sp, #108]	@ 0x6c
 8026268:	78f4      	ldrb	r4, [r6, #3]
 802626a:	9418      	str	r4, [sp, #96]	@ 0x60
 802626c:	7934      	ldrb	r4, [r6, #4]
 802626e:	941a      	str	r4, [sp, #104]	@ 0x68
 8026270:	7974      	ldrb	r4, [r6, #5]
 8026272:	941c      	str	r4, [sp, #112]	@ 0x70
 8026274:	b29b      	uxth	r3, r3
 8026276:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8026278:	b292      	uxth	r2, r2
 802627a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802627c:	3503      	adds	r5, #3
 802627e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8026282:	fb03 f402 	mul.w	r4, r3, r2
 8026286:	011b      	lsls	r3, r3, #4
 8026288:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 802628c:	f5c3 7680 	rsb	r6, r3, #256	@ 0x100
 8026290:	1b1b      	subs	r3, r3, r4
 8026292:	b292      	uxth	r2, r2
 8026294:	b29b      	uxth	r3, r3
 8026296:	1ab6      	subs	r6, r6, r2
 8026298:	435f      	muls	r7, r3
 802629a:	b2b6      	uxth	r6, r6
 802629c:	fb03 f909 	mul.w	r9, r3, r9
 80262a0:	fb03 fb0b 	mul.w	fp, r3, fp
 80262a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80262a6:	fb06 7000 	mla	r0, r6, r0, r7
 80262aa:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 80262ac:	fb06 bb03 	mla	fp, r6, r3, fp
 80262b0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80262b2:	fb02 0007 	mla	r0, r2, r7, r0
 80262b6:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 80262b8:	fb02 bb03 	mla	fp, r2, r3, fp
 80262bc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80262be:	fb04 0007 	mla	r0, r4, r7, r0
 80262c2:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 80262c6:	fb17 f701 	smulbb	r7, r7, r1
 80262ca:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80262ce:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80262d0:	fb00 700e 	mla	r0, r0, lr, r7
 80262d4:	fb06 9101 	mla	r1, r6, r1, r9
 80262d8:	b280      	uxth	r0, r0
 80262da:	1c47      	adds	r7, r0, #1
 80262dc:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 80262e0:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80262e2:	1200      	asrs	r0, r0, #8
 80262e4:	f805 0c06 	strb.w	r0, [r5, #-6]
 80262e8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80262ea:	fb02 1100 	mla	r1, r2, r0, r1
 80262ee:	981a      	ldr	r0, [sp, #104]	@ 0x68
 80262f0:	fb04 1100 	mla	r1, r4, r0, r1
 80262f4:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 80262f8:	fb04 b403 	mla	r4, r4, r3, fp
 80262fc:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 8026300:	fb10 f007 	smulbb	r0, r0, r7
 8026304:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8026308:	fb13 f307 	smulbb	r3, r3, r7
 802630c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8026310:	fb01 010e 	mla	r1, r1, lr, r0
 8026314:	fb04 340e 	mla	r4, r4, lr, r3
 8026318:	b289      	uxth	r1, r1
 802631a:	b2a4      	uxth	r4, r4
 802631c:	1c48      	adds	r0, r1, #1
 802631e:	1c63      	adds	r3, r4, #1
 8026320:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8026324:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8026328:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 802632a:	1209      	asrs	r1, r1, #8
 802632c:	1224      	asrs	r4, r4, #8
 802632e:	449a      	add	sl, r3
 8026330:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8026332:	f805 1c05 	strb.w	r1, [r5, #-5]
 8026336:	f805 4c04 	strb.w	r4, [r5, #-4]
 802633a:	4498      	add	r8, r3
 802633c:	e707      	b.n	802614e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 802633e:	b01f      	add	sp, #124	@ 0x7c
 8026340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026344 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8026344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026348:	b087      	sub	sp, #28
 802634a:	780d      	ldrb	r5, [r1, #0]
 802634c:	784c      	ldrb	r4, [r1, #1]
 802634e:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 8026352:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	@ 0x40
 8026356:	9004      	str	r0, [sp, #16]
 8026358:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 802635c:	e9dd b611 	ldrd	fp, r6, [sp, #68]	@ 0x44
 8026360:	9005      	str	r0, [sp, #20]
 8026362:	fb06 bc03 	mla	ip, r6, r3, fp
 8026366:	2e00      	cmp	r6, #0
 8026368:	7888      	ldrb	r0, [r1, #2]
 802636a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802636e:	eb02 090c 	add.w	r9, r2, ip
 8026372:	f2c0 8084 	blt.w	802647e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8026376:	42b7      	cmp	r7, r6
 8026378:	f340 8081 	ble.w	802647e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 802637c:	f1bb 0f00 	cmp.w	fp, #0
 8026380:	db79      	blt.n	8026476 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8026382:	455b      	cmp	r3, fp
 8026384:	dd77      	ble.n	8026476 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8026386:	f812 200c 	ldrb.w	r2, [r2, ip]
 802638a:	9201      	str	r2, [sp, #4]
 802638c:	f899 2001 	ldrb.w	r2, [r9, #1]
 8026390:	9202      	str	r2, [sp, #8]
 8026392:	f899 2002 	ldrb.w	r2, [r9, #2]
 8026396:	9203      	str	r2, [sp, #12]
 8026398:	f11b 0201 	adds.w	r2, fp, #1
 802639c:	d476      	bmi.n	802648c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 802639e:	4293      	cmp	r3, r2
 80263a0:	dd74      	ble.n	802648c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 80263a2:	9a04      	ldr	r2, [sp, #16]
 80263a4:	2a00      	cmp	r2, #0
 80263a6:	d071      	beq.n	802648c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 80263a8:	f899 8003 	ldrb.w	r8, [r9, #3]
 80263ac:	f899 c004 	ldrb.w	ip, [r9, #4]
 80263b0:	f899 a005 	ldrb.w	sl, [r9, #5]
 80263b4:	3601      	adds	r6, #1
 80263b6:	d471      	bmi.n	802649c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 80263b8:	42b7      	cmp	r7, r6
 80263ba:	dd6f      	ble.n	802649c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 80263bc:	9a05      	ldr	r2, [sp, #20]
 80263be:	2a00      	cmp	r2, #0
 80263c0:	d06c      	beq.n	802649c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 80263c2:	f1bb 0f00 	cmp.w	fp, #0
 80263c6:	db65      	blt.n	8026494 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 80263c8:	455b      	cmp	r3, fp
 80263ca:	dd63      	ble.n	8026494 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 80263cc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80263d0:	f819 e002 	ldrb.w	lr, [r9, r2]
 80263d4:	2203      	movs	r2, #3
 80263d6:	fb03 9602 	mla	r6, r3, r2, r9
 80263da:	7877      	ldrb	r7, [r6, #1]
 80263dc:	78b6      	ldrb	r6, [r6, #2]
 80263de:	f11b 0b01 	adds.w	fp, fp, #1
 80263e2:	d40c      	bmi.n	80263fe <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 80263e4:	455b      	cmp	r3, fp
 80263e6:	dd0a      	ble.n	80263fe <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 80263e8:	9a04      	ldr	r2, [sp, #16]
 80263ea:	b142      	cbz	r2, 80263fe <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 80263ec:	2203      	movs	r2, #3
 80263ee:	fb13 2002 	smlabb	r0, r3, r2, r2
 80263f2:	f819 5000 	ldrb.w	r5, [r9, r0]
 80263f6:	fb03 9002 	mla	r0, r3, r2, r9
 80263fa:	7904      	ldrb	r4, [r0, #4]
 80263fc:	7940      	ldrb	r0, [r0, #5]
 80263fe:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8026402:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8026406:	fb03 fb02 	mul.w	fp, r3, r2
 802640a:	011b      	lsls	r3, r3, #4
 802640c:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 8026410:	f5c3 7980 	rsb	r9, r3, #256	@ 0x100
 8026414:	eba3 030b 	sub.w	r3, r3, fp
 8026418:	b292      	uxth	r2, r2
 802641a:	b29b      	uxth	r3, r3
 802641c:	eba9 0902 	sub.w	r9, r9, r2
 8026420:	9304      	str	r3, [sp, #16]
 8026422:	fa1f f989 	uxth.w	r9, r9
 8026426:	fb03 f808 	mul.w	r8, r3, r8
 802642a:	9b01      	ldr	r3, [sp, #4]
 802642c:	fb09 8803 	mla	r8, r9, r3, r8
 8026430:	9b04      	ldr	r3, [sp, #16]
 8026432:	fb03 fc0c 	mul.w	ip, r3, ip
 8026436:	9b02      	ldr	r3, [sp, #8]
 8026438:	fb02 880e 	mla	r8, r2, lr, r8
 802643c:	fb09 cc03 	mla	ip, r9, r3, ip
 8026440:	9b04      	ldr	r3, [sp, #16]
 8026442:	fb0b 8805 	mla	r8, fp, r5, r8
 8026446:	fb02 c707 	mla	r7, r2, r7, ip
 802644a:	fb03 f30a 	mul.w	r3, r3, sl
 802644e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8026452:	fb0b 7404 	mla	r4, fp, r4, r7
 8026456:	f881 8000 	strb.w	r8, [r1]
 802645a:	1224      	asrs	r4, r4, #8
 802645c:	704c      	strb	r4, [r1, #1]
 802645e:	9c03      	ldr	r4, [sp, #12]
 8026460:	fb09 3904 	mla	r9, r9, r4, r3
 8026464:	fb02 9206 	mla	r2, r2, r6, r9
 8026468:	fb0b 2000 	mla	r0, fp, r0, r2
 802646c:	1200      	asrs	r0, r0, #8
 802646e:	7088      	strb	r0, [r1, #2]
 8026470:	b007      	add	sp, #28
 8026472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026476:	e9cd 4002 	strd	r4, r0, [sp, #8]
 802647a:	9501      	str	r5, [sp, #4]
 802647c:	e78c      	b.n	8026398 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 802647e:	4682      	mov	sl, r0
 8026480:	46a4      	mov	ip, r4
 8026482:	46a8      	mov	r8, r5
 8026484:	9501      	str	r5, [sp, #4]
 8026486:	e9cd 4002 	strd	r4, r0, [sp, #8]
 802648a:	e793      	b.n	80263b4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 802648c:	4682      	mov	sl, r0
 802648e:	46a4      	mov	ip, r4
 8026490:	46a8      	mov	r8, r5
 8026492:	e78f      	b.n	80263b4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8026494:	4606      	mov	r6, r0
 8026496:	4627      	mov	r7, r4
 8026498:	46ae      	mov	lr, r5
 802649a:	e7a0      	b.n	80263de <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 802649c:	4606      	mov	r6, r0
 802649e:	4627      	mov	r7, r4
 80264a0:	46ae      	mov	lr, r5
 80264a2:	e7ac      	b.n	80263fe <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

080264a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80264a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80264a8:	b09b      	sub	sp, #108	@ 0x6c
 80264aa:	920b      	str	r2, [sp, #44]	@ 0x2c
 80264ac:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80264ae:	9019      	str	r0, [sp, #100]	@ 0x64
 80264b0:	9109      	str	r1, [sp, #36]	@ 0x24
 80264b2:	6850      	ldr	r0, [r2, #4]
 80264b4:	9306      	str	r3, [sp, #24]
 80264b6:	6812      	ldr	r2, [r2, #0]
 80264b8:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 80264bc:	e9dd b425 	ldrd	fp, r4, [sp, #148]	@ 0x94
 80264c0:	fb00 1303 	mla	r3, r0, r3, r1
 80264c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80264c8:	18d3      	adds	r3, r2, r3
 80264ca:	9307      	str	r3, [sp, #28]
 80264cc:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80264ce:	681b      	ldr	r3, [r3, #0]
 80264d0:	9308      	str	r3, [sp, #32]
 80264d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80264d4:	2b00      	cmp	r3, #0
 80264d6:	dc03      	bgt.n	80264e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80264d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80264da:	2b00      	cmp	r3, #0
 80264dc:	f340 81ab 	ble.w	8026836 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80264e0:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80264e2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80264e6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80264ea:	1e48      	subs	r0, r1, #1
 80264ec:	1e55      	subs	r5, r2, #1
 80264ee:	9b06      	ldr	r3, [sp, #24]
 80264f0:	2b00      	cmp	r3, #0
 80264f2:	f340 80b1 	ble.w	8026658 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80264f6:	ea5f 462b 	movs.w	r6, fp, asr #16
 80264fa:	ea4f 4324 	mov.w	r3, r4, asr #16
 80264fe:	d406      	bmi.n	802650e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8026500:	4286      	cmp	r6, r0
 8026502:	da04      	bge.n	802650e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8026504:	2b00      	cmp	r3, #0
 8026506:	db02      	blt.n	802650e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8026508:	42ab      	cmp	r3, r5
 802650a:	f2c0 80a6 	blt.w	802665a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802650e:	3601      	adds	r6, #1
 8026510:	f100 8097 	bmi.w	8026642 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8026514:	42b1      	cmp	r1, r6
 8026516:	f2c0 8094 	blt.w	8026642 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 802651a:	3301      	adds	r3, #1
 802651c:	f100 8091 	bmi.w	8026642 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8026520:	429a      	cmp	r2, r3
 8026522:	f2c0 808e 	blt.w	8026642 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8026526:	9b06      	ldr	r3, [sp, #24]
 8026528:	9e07      	ldr	r6, [sp, #28]
 802652a:	930a      	str	r3, [sp, #40]	@ 0x28
 802652c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802652e:	2b00      	cmp	r3, #0
 8026530:	f340 80b0 	ble.w	8026694 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8026534:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8026536:	1425      	asrs	r5, r4, #16
 8026538:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802653a:	f3cb 3203 	ubfx	r2, fp, #12, #4
 802653e:	68c7      	ldr	r7, [r0, #12]
 8026540:	ea5f 402b 	movs.w	r0, fp, asr #16
 8026544:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8026548:	689b      	ldr	r3, [r3, #8]
 802654a:	f100 80ea 	bmi.w	8026722 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 802654e:	f103 3cff 	add.w	ip, r3, #4294967295
 8026552:	4560      	cmp	r0, ip
 8026554:	f280 80e5 	bge.w	8026722 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8026558:	2d00      	cmp	r5, #0
 802655a:	f2c0 80e2 	blt.w	8026722 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 802655e:	f107 3cff 	add.w	ip, r7, #4294967295
 8026562:	4565      	cmp	r5, ip
 8026564:	f280 80dd 	bge.w	8026722 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8026568:	b21b      	sxth	r3, r3
 802656a:	fb05 0003 	mla	r0, r5, r3, r0
 802656e:	9d08      	ldr	r5, [sp, #32]
 8026570:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026574:	182f      	adds	r7, r5, r0
 8026576:	5c2d      	ldrb	r5, [r5, r0]
 8026578:	7878      	ldrb	r0, [r7, #1]
 802657a:	f897 e002 	ldrb.w	lr, [r7, #2]
 802657e:	900c      	str	r0, [sp, #48]	@ 0x30
 8026580:	f897 9003 	ldrb.w	r9, [r7, #3]
 8026584:	f897 8004 	ldrb.w	r8, [r7, #4]
 8026588:	f897 a005 	ldrb.w	sl, [r7, #5]
 802658c:	b1c9      	cbz	r1, 80265c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 802658e:	f04f 0c03 	mov.w	ip, #3
 8026592:	f06f 0004 	mvn.w	r0, #4
 8026596:	3705      	adds	r7, #5
 8026598:	fb13 030c 	smlabb	r3, r3, ip, r0
 802659c:	eb07 0c03 	add.w	ip, r7, r3
 80265a0:	5cfb      	ldrb	r3, [r7, r3]
 80265a2:	930d      	str	r3, [sp, #52]	@ 0x34
 80265a4:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80265a8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80265aa:	f89c 3002 	ldrb.w	r3, [ip, #2]
 80265ae:	9311      	str	r3, [sp, #68]	@ 0x44
 80265b0:	f89c 3003 	ldrb.w	r3, [ip, #3]
 80265b4:	930e      	str	r3, [sp, #56]	@ 0x38
 80265b6:	f89c 3004 	ldrb.w	r3, [ip, #4]
 80265ba:	9310      	str	r3, [sp, #64]	@ 0x40
 80265bc:	f89c 3005 	ldrb.w	r3, [ip, #5]
 80265c0:	9312      	str	r3, [sp, #72]	@ 0x48
 80265c2:	b292      	uxth	r2, r2
 80265c4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80265c6:	b289      	uxth	r1, r1
 80265c8:	fb02 f301 	mul.w	r3, r2, r1
 80265cc:	0112      	lsls	r2, r2, #4
 80265ce:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80265d2:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 80265d6:	1ad2      	subs	r2, r2, r3
 80265d8:	b289      	uxth	r1, r1
 80265da:	b292      	uxth	r2, r2
 80265dc:	1a7f      	subs	r7, r7, r1
 80265de:	fb02 f909 	mul.w	r9, r2, r9
 80265e2:	b2bf      	uxth	r7, r7
 80265e4:	fb02 f808 	mul.w	r8, r2, r8
 80265e8:	fb02 fa0a 	mul.w	sl, r2, sl
 80265ec:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80265ee:	fb07 9905 	mla	r9, r7, r5, r9
 80265f2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80265f4:	fb07 8800 	mla	r8, r7, r0, r8
 80265f8:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80265fa:	fb07 aa0e 	mla	sl, r7, lr, sl
 80265fe:	fb01 9905 	mla	r9, r1, r5, r9
 8026602:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8026604:	fb01 8800 	mla	r8, r1, r0, r8
 8026608:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802660a:	fb01 a102 	mla	r1, r1, r2, sl
 802660e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8026610:	fb03 9905 	mla	r9, r3, r5, r9
 8026614:	fb03 8800 	mla	r8, r3, r0, r8
 8026618:	fb03 1302 	mla	r3, r3, r2, r1
 802661c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8026620:	ea4f 2828 	mov.w	r8, r8, asr #8
 8026624:	121b      	asrs	r3, r3, #8
 8026626:	f886 9000 	strb.w	r9, [r6]
 802662a:	f886 8001 	strb.w	r8, [r6, #1]
 802662e:	70b3      	strb	r3, [r6, #2]
 8026630:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8026632:	3603      	adds	r6, #3
 8026634:	449b      	add	fp, r3
 8026636:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026638:	441c      	add	r4, r3
 802663a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802663c:	3b01      	subs	r3, #1
 802663e:	930a      	str	r3, [sp, #40]	@ 0x28
 8026640:	e774      	b.n	802652c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8026642:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8026644:	449b      	add	fp, r3
 8026646:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026648:	441c      	add	r4, r3
 802664a:	9b06      	ldr	r3, [sp, #24]
 802664c:	3b01      	subs	r3, #1
 802664e:	9306      	str	r3, [sp, #24]
 8026650:	9b07      	ldr	r3, [sp, #28]
 8026652:	3303      	adds	r3, #3
 8026654:	9307      	str	r3, [sp, #28]
 8026656:	e74a      	b.n	80264ee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8026658:	d024      	beq.n	80266a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802665a:	9b06      	ldr	r3, [sp, #24]
 802665c:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 802665e:	3b01      	subs	r3, #1
 8026660:	fb00 b003 	mla	r0, r0, r3, fp
 8026664:	1400      	asrs	r0, r0, #16
 8026666:	f53f af5e 	bmi.w	8026526 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802666a:	3901      	subs	r1, #1
 802666c:	4288      	cmp	r0, r1
 802666e:	f6bf af5a 	bge.w	8026526 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8026672:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8026674:	fb01 4303 	mla	r3, r1, r3, r4
 8026678:	141b      	asrs	r3, r3, #16
 802667a:	f53f af54 	bmi.w	8026526 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802667e:	3a01      	subs	r2, #1
 8026680:	4293      	cmp	r3, r2
 8026682:	f6bf af50 	bge.w	8026526 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8026686:	9b07      	ldr	r3, [sp, #28]
 8026688:	f8dd e018 	ldr.w	lr, [sp, #24]
 802668c:	1cde      	adds	r6, r3, #3
 802668e:	f1be 0f00 	cmp.w	lr, #0
 8026692:	dc5f      	bgt.n	8026754 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8026694:	9b06      	ldr	r3, [sp, #24]
 8026696:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802669a:	9b07      	ldr	r3, [sp, #28]
 802669c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80266a0:	4423      	add	r3, r4
 80266a2:	9307      	str	r3, [sp, #28]
 80266a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80266a6:	2b00      	cmp	r3, #0
 80266a8:	f340 80c5 	ble.w	8026836 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80266ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80266b0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80266b2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80266b6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80266ba:	eef0 6a62 	vmov.f32	s13, s5
 80266be:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80266c2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80266c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80266ca:	ee16 ba90 	vmov	fp, s13
 80266ce:	eef0 6a43 	vmov.f32	s13, s6
 80266d2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80266d6:	ee16 4a90 	vmov	r4, s13
 80266da:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80266de:	ee61 7a27 	vmul.f32	s15, s2, s15
 80266e2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80266e6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80266ea:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80266ee:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80266f2:	ee12 2a90 	vmov	r2, s5
 80266f6:	eef0 2a47 	vmov.f32	s5, s14
 80266fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80266fe:	ee13 2a10 	vmov	r2, s6
 8026702:	9327      	str	r3, [sp, #156]	@ 0x9c
 8026704:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8026706:	eeb0 3a67 	vmov.f32	s6, s15
 802670a:	fb92 f3f3 	sdiv	r3, r2, r3
 802670e:	9328      	str	r3, [sp, #160]	@ 0xa0
 8026710:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026712:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8026714:	3b01      	subs	r3, #1
 8026716:	9309      	str	r3, [sp, #36]	@ 0x24
 8026718:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802671a:	bf08      	it	eq
 802671c:	4613      	moveq	r3, r2
 802671e:	9306      	str	r3, [sp, #24]
 8026720:	e6d7      	b.n	80264d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8026722:	f110 0c01 	adds.w	ip, r0, #1
 8026726:	d483      	bmi.n	8026630 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8026728:	4563      	cmp	r3, ip
 802672a:	db81      	blt.n	8026630 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 802672c:	f115 0c01 	adds.w	ip, r5, #1
 8026730:	f53f af7e 	bmi.w	8026630 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8026734:	4567      	cmp	r7, ip
 8026736:	f6ff af7b 	blt.w	8026630 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 802673a:	b23f      	sxth	r7, r7
 802673c:	b21b      	sxth	r3, r3
 802673e:	9700      	str	r7, [sp, #0]
 8026740:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8026744:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8026748:	9a08      	ldr	r2, [sp, #32]
 802674a:	4631      	mov	r1, r6
 802674c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802674e:	f7ff fdf9 	bl	8026344 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8026752:	e76d      	b.n	8026630 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8026754:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8026756:	ea4f 402b 	mov.w	r0, fp, asr #16
 802675a:	f3cb 3303 	ubfx	r3, fp, #12, #4
 802675e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8026762:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8026766:	1421      	asrs	r1, r4, #16
 8026768:	930a      	str	r3, [sp, #40]	@ 0x28
 802676a:	fb0c 0101 	mla	r1, ip, r1, r0
 802676e:	9808      	ldr	r0, [sp, #32]
 8026770:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026774:	1845      	adds	r5, r0, r1
 8026776:	5c40      	ldrb	r0, [r0, r1]
 8026778:	796f      	ldrb	r7, [r5, #5]
 802677a:	7869      	ldrb	r1, [r5, #1]
 802677c:	f895 8002 	ldrb.w	r8, [r5, #2]
 8026780:	f895 a003 	ldrb.w	sl, [r5, #3]
 8026784:	f895 9004 	ldrb.w	r9, [r5, #4]
 8026788:	970c      	str	r7, [sp, #48]	@ 0x30
 802678a:	b1a2      	cbz	r2, 80267b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 802678c:	2703      	movs	r7, #3
 802678e:	f06f 0304 	mvn.w	r3, #4
 8026792:	3505      	adds	r5, #5
 8026794:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8026798:	eb05 070c 	add.w	r7, r5, ip
 802679c:	f815 500c 	ldrb.w	r5, [r5, ip]
 80267a0:	9513      	str	r5, [sp, #76]	@ 0x4c
 80267a2:	787d      	ldrb	r5, [r7, #1]
 80267a4:	9515      	str	r5, [sp, #84]	@ 0x54
 80267a6:	78bd      	ldrb	r5, [r7, #2]
 80267a8:	9517      	str	r5, [sp, #92]	@ 0x5c
 80267aa:	78fd      	ldrb	r5, [r7, #3]
 80267ac:	9514      	str	r5, [sp, #80]	@ 0x50
 80267ae:	793d      	ldrb	r5, [r7, #4]
 80267b0:	9516      	str	r5, [sp, #88]	@ 0x58
 80267b2:	797d      	ldrb	r5, [r7, #5]
 80267b4:	9518      	str	r5, [sp, #96]	@ 0x60
 80267b6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80267ba:	b292      	uxth	r2, r2
 80267bc:	3603      	adds	r6, #3
 80267be:	f10e 3eff 	add.w	lr, lr, #4294967295
 80267c2:	fb03 f502 	mul.w	r5, r3, r2
 80267c6:	011b      	lsls	r3, r3, #4
 80267c8:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 80267cc:	f5c3 7780 	rsb	r7, r3, #256	@ 0x100
 80267d0:	1b5b      	subs	r3, r3, r5
 80267d2:	b292      	uxth	r2, r2
 80267d4:	b29b      	uxth	r3, r3
 80267d6:	1abf      	subs	r7, r7, r2
 80267d8:	fb03 f909 	mul.w	r9, r3, r9
 80267dc:	b2bf      	uxth	r7, r7
 80267de:	fb03 fa0a 	mul.w	sl, r3, sl
 80267e2:	fb07 9901 	mla	r9, r7, r1, r9
 80267e6:	9915      	ldr	r1, [sp, #84]	@ 0x54
 80267e8:	fb07 aa00 	mla	sl, r7, r0, sl
 80267ec:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80267ee:	fb02 9901 	mla	r9, r2, r1, r9
 80267f2:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80267f4:	fb02 aa00 	mla	sl, r2, r0, sl
 80267f8:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80267fa:	fb05 9901 	mla	r9, r5, r1, r9
 80267fe:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8026800:	fb05 aa00 	mla	sl, r5, r0, sl
 8026804:	434b      	muls	r3, r1
 8026806:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8026808:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802680c:	fb07 3308 	mla	r3, r7, r8, r3
 8026810:	ea4f 2929 	mov.w	r9, r9, asr #8
 8026814:	f806 ac06 	strb.w	sl, [r6, #-6]
 8026818:	fb02 3201 	mla	r2, r2, r1, r3
 802681c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802681e:	f806 9c05 	strb.w	r9, [r6, #-5]
 8026822:	fb05 2503 	mla	r5, r5, r3, r2
 8026826:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8026828:	122d      	asrs	r5, r5, #8
 802682a:	449b      	add	fp, r3
 802682c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802682e:	f806 5c04 	strb.w	r5, [r6, #-4]
 8026832:	441c      	add	r4, r3
 8026834:	e72b      	b.n	802668e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8026836:	b01b      	add	sp, #108	@ 0x6c
 8026838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802683c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 802683c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026840:	b087      	sub	sp, #28
 8026842:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 8026846:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 802684a:	fb05 7003 	mla	r0, r5, r3, r7
 802684e:	2d00      	cmp	r5, #0
 8026850:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 8026854:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 8026858:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 802685c:	f2c0 811f 	blt.w	8026a9e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8026860:	45a8      	cmp	r8, r5
 8026862:	f340 811c 	ble.w	8026a9e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8026866:	2f00      	cmp	r7, #0
 8026868:	f2c0 8117 	blt.w	8026a9a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 802686c:	42bb      	cmp	r3, r7
 802686e:	f340 8114 	ble.w	8026a9a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8026872:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8026876:	1c7a      	adds	r2, r7, #1
 8026878:	f100 8114 	bmi.w	8026aa4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 802687c:	4293      	cmp	r3, r2
 802687e:	f340 8111 	ble.w	8026aa4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8026882:	2c00      	cmp	r4, #0
 8026884:	f000 8110 	beq.w	8026aa8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 8026888:	f8dc 0004 	ldr.w	r0, [ip, #4]
 802688c:	3501      	adds	r5, #1
 802688e:	f100 810f 	bmi.w	8026ab0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8026892:	45a8      	cmp	r8, r5
 8026894:	f340 810c 	ble.w	8026ab0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8026898:	f1be 0f00 	cmp.w	lr, #0
 802689c:	f000 810b 	beq.w	8026ab6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 80268a0:	2f00      	cmp	r7, #0
 80268a2:	f2c0 8103 	blt.w	8026aac <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 80268a6:	42bb      	cmp	r3, r7
 80268a8:	f340 8100 	ble.w	8026aac <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 80268ac:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 80268b0:	3701      	adds	r7, #1
 80268b2:	f100 8103 	bmi.w	8026abc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 80268b6:	42bb      	cmp	r3, r7
 80268b8:	f340 8100 	ble.w	8026abc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 80268bc:	2c00      	cmp	r4, #0
 80268be:	f000 80ff 	beq.w	8026ac0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 80268c2:	3301      	adds	r3, #1
 80268c4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80268c8:	fa1f fc84 	uxth.w	ip, r4
 80268cc:	fa1f fe8e 	uxth.w	lr, lr
 80268d0:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80268d4:	fb0c f90e 	mul.w	r9, ip, lr
 80268d8:	0e13      	lsrs	r3, r2, #24
 80268da:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80268de:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 80268e2:	9302      	str	r3, [sp, #8]
 80268e4:	ebac 0709 	sub.w	r7, ip, r9
 80268e8:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 80268ec:	fa1f f48e 	uxth.w	r4, lr
 80268f0:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 80268f4:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 80268f8:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 80268fc:	fb0a fe0e 	mul.w	lr, sl, lr
 8026900:	1b1b      	subs	r3, r3, r4
 8026902:	fb0a f606 	mul.w	r6, sl, r6
 8026906:	ea4f 6815 	mov.w	r8, r5, lsr #24
 802690a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802690e:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 8026912:	b29b      	uxth	r3, r3
 8026914:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026918:	b2bf      	uxth	r7, r7
 802691a:	9301      	str	r3, [sp, #4]
 802691c:	44e6      	add	lr, ip
 802691e:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 8026922:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026926:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 802692a:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 802692e:	9303      	str	r3, [sp, #12]
 8026930:	0a33      	lsrs	r3, r6, #8
 8026932:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 8026936:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 802693a:	9304      	str	r3, [sp, #16]
 802693c:	fb0b f606 	mul.w	r6, fp, r6
 8026940:	fb0b f000 	mul.w	r0, fp, r0
 8026944:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8026948:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 802694c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026950:	44b6      	add	lr, r6
 8026952:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 8026956:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 802695a:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 802695e:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8026962:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026966:	fb08 f606 	mul.w	r6, r8, r6
 802696a:	0a03      	lsrs	r3, r0, #8
 802696c:	fb08 f505 	mul.w	r5, r8, r5
 8026970:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026974:	0a30      	lsrs	r0, r6, #8
 8026976:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 802697a:	9305      	str	r3, [sp, #20]
 802697c:	0e13      	lsrs	r3, r2, #24
 802697e:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8026982:	fb0e fe07 	mul.w	lr, lr, r7
 8026986:	4430      	add	r0, r6
 8026988:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 802698c:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8026990:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 8026994:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8026998:	0a00      	lsrs	r0, r0, #8
 802699a:	435e      	muls	r6, r3
 802699c:	0a2d      	lsrs	r5, r5, #8
 802699e:	435a      	muls	r2, r3
 80269a0:	9b03      	ldr	r3, [sp, #12]
 80269a2:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 80269a6:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 80269aa:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 80269ae:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80269b2:	44b4      	add	ip, r6
 80269b4:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 80269b8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80269bc:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 80269c0:	9e01      	ldr	r6, [sp, #4]
 80269c2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80269c6:	fb03 ee06 	mla	lr, r3, r6, lr
 80269ca:	9b04      	ldr	r3, [sp, #16]
 80269cc:	0a12      	lsrs	r2, r2, #8
 80269ce:	fb0c ee09 	mla	lr, ip, r9, lr
 80269d2:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 80269d6:	9b05      	ldr	r3, [sp, #20]
 80269d8:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80269dc:	fb00 ee04 	mla	lr, r0, r4, lr
 80269e0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80269e4:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 80269e8:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 80269ec:	9b01      	ldr	r3, [sp, #4]
 80269ee:	fb07 fe0e 	mul.w	lr, r7, lr
 80269f2:	fb07 f70b 	mul.w	r7, r7, fp
 80269f6:	fb03 ee06 	mla	lr, r3, r6, lr
 80269fa:	fb03 730a 	mla	r3, r3, sl, r7
 80269fe:	fb09 e202 	mla	r2, r9, r2, lr
 8026a02:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8026a06:	fb04 2e0e 	mla	lr, r4, lr, r2
 8026a0a:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 8026a0e:	fb04 3408 	mla	r4, r4, r8, r3
 8026a12:	9b02      	ldr	r3, [sp, #8]
 8026a14:	b292      	uxth	r2, r2
 8026a16:	fb09 4903 	mla	r9, r9, r3, r4
 8026a1a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026a1e:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8026a22:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8026a26:	fb09 f902 	mul.w	r9, r9, r2
 8026a2a:	ea40 0e0e 	orr.w	lr, r0, lr
 8026a2e:	f109 0301 	add.w	r3, r9, #1
 8026a32:	fa5f f08e 	uxtb.w	r0, lr
 8026a36:	fb10 f002 	smulbb	r0, r0, r2
 8026a3a:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8026a3e:	780b      	ldrb	r3, [r1, #0]
 8026a40:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 8026a44:	fa5f f989 	uxtb.w	r9, r9
 8026a48:	fb03 0309 	mla	r3, r3, r9, r0
 8026a4c:	b29b      	uxth	r3, r3
 8026a4e:	1c58      	adds	r0, r3, #1
 8026a50:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8026a54:	7848      	ldrb	r0, [r1, #1]
 8026a56:	fb10 f009 	smulbb	r0, r0, r9
 8026a5a:	121b      	asrs	r3, r3, #8
 8026a5c:	700b      	strb	r3, [r1, #0]
 8026a5e:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8026a62:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8026a66:	fb03 0302 	mla	r3, r3, r2, r0
 8026a6a:	b29b      	uxth	r3, r3
 8026a6c:	1c58      	adds	r0, r3, #1
 8026a6e:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8026a72:	121b      	asrs	r3, r3, #8
 8026a74:	704b      	strb	r3, [r1, #1]
 8026a76:	788b      	ldrb	r3, [r1, #2]
 8026a78:	fb13 f909 	smulbb	r9, r3, r9
 8026a7c:	fb0e 9e02 	mla	lr, lr, r2, r9
 8026a80:	fa1f fe8e 	uxth.w	lr, lr
 8026a84:	f10e 0301 	add.w	r3, lr, #1
 8026a88:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8026a8c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8026a90:	f881 e002 	strb.w	lr, [r1, #2]
 8026a94:	b007      	add	sp, #28
 8026a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026a9a:	2600      	movs	r6, #0
 8026a9c:	e6eb      	b.n	8026876 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 8026a9e:	2000      	movs	r0, #0
 8026aa0:	4606      	mov	r6, r0
 8026aa2:	e6f3      	b.n	802688c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8026aa4:	2000      	movs	r0, #0
 8026aa6:	e6f1      	b.n	802688c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8026aa8:	4620      	mov	r0, r4
 8026aaa:	e6ef      	b.n	802688c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8026aac:	2500      	movs	r5, #0
 8026aae:	e6ff      	b.n	80268b0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 8026ab0:	2200      	movs	r2, #0
 8026ab2:	4615      	mov	r5, r2
 8026ab4:	e708      	b.n	80268c8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8026ab6:	4672      	mov	r2, lr
 8026ab8:	4675      	mov	r5, lr
 8026aba:	e705      	b.n	80268c8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8026abc:	2200      	movs	r2, #0
 8026abe:	e703      	b.n	80268c8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8026ac0:	4622      	mov	r2, r4
 8026ac2:	e701      	b.n	80268c8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

08026ac4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026ac8:	b09d      	sub	sp, #116	@ 0x74
 8026aca:	9219      	str	r2, [sp, #100]	@ 0x64
 8026acc:	9307      	str	r3, [sp, #28]
 8026ace:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 8026ad0:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 8026ad4:	901b      	str	r0, [sp, #108]	@ 0x6c
 8026ad6:	931a      	str	r3, [sp, #104]	@ 0x68
 8026ad8:	6850      	ldr	r0, [r2, #4]
 8026ada:	9117      	str	r1, [sp, #92]	@ 0x5c
 8026adc:	6812      	ldr	r2, [r2, #0]
 8026ade:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 8026ae2:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	@ 0x9c
 8026ae6:	fb00 1303 	mla	r3, r0, r3, r1
 8026aea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026aee:	18d3      	adds	r3, r2, r3
 8026af0:	930a      	str	r3, [sp, #40]	@ 0x28
 8026af2:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8026af4:	681b      	ldr	r3, [r3, #0]
 8026af6:	9310      	str	r3, [sp, #64]	@ 0x40
 8026af8:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8026afc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026afe:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8026b00:	2b00      	cmp	r3, #0
 8026b02:	dc03      	bgt.n	8026b0c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8026b04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8026b06:	2b00      	cmp	r3, #0
 8026b08:	f340 8368 	ble.w	80271dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8026b0c:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8026b0e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026b12:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026b16:	1e48      	subs	r0, r1, #1
 8026b18:	1e57      	subs	r7, r2, #1
 8026b1a:	9b07      	ldr	r3, [sp, #28]
 8026b1c:	2b00      	cmp	r3, #0
 8026b1e:	f340 8187 	ble.w	8026e30 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8026b22:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8026b26:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026b2a:	d406      	bmi.n	8026b3a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8026b2c:	4584      	cmp	ip, r0
 8026b2e:	da04      	bge.n	8026b3a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8026b30:	2b00      	cmp	r3, #0
 8026b32:	db02      	blt.n	8026b3a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8026b34:	42bb      	cmp	r3, r7
 8026b36:	f2c0 817c 	blt.w	8026e32 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8026b3a:	f11c 0c01 	adds.w	ip, ip, #1
 8026b3e:	f100 816c 	bmi.w	8026e1a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8026b42:	4561      	cmp	r1, ip
 8026b44:	f2c0 8169 	blt.w	8026e1a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8026b48:	3301      	adds	r3, #1
 8026b4a:	f100 8166 	bmi.w	8026e1a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8026b4e:	429a      	cmp	r2, r3
 8026b50:	f2c0 8163 	blt.w	8026e1a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8026b54:	9b07      	ldr	r3, [sp, #28]
 8026b56:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8026b58:	9318      	str	r3, [sp, #96]	@ 0x60
 8026b5a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8026b5c:	2b00      	cmp	r3, #0
 8026b5e:	f340 8186 	ble.w	8026e6e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8026b62:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8026b64:	142a      	asrs	r2, r5, #16
 8026b66:	ea4f 4026 	mov.w	r0, r6, asr #16
 8026b6a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8026b6e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8026b72:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8026b76:	f100 81cb 	bmi.w	8026f10 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8026b7a:	f10e 38ff 	add.w	r8, lr, #4294967295
 8026b7e:	4542      	cmp	r2, r8
 8026b80:	f280 81c6 	bge.w	8026f10 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8026b84:	2800      	cmp	r0, #0
 8026b86:	f2c0 81c3 	blt.w	8026f10 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8026b8a:	f103 38ff 	add.w	r8, r3, #4294967295
 8026b8e:	4540      	cmp	r0, r8
 8026b90:	f280 81be 	bge.w	8026f10 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8026b94:	fa0f f38e 	sxth.w	r3, lr
 8026b98:	fb00 2203 	mla	r2, r0, r3, r2
 8026b9c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8026b9e:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 8026ba2:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8026ba6:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8026baa:	2900      	cmp	r1, #0
 8026bac:	f000 81a6 	beq.w	8026efc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8026bb0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8026bb4:	900c      	str	r0, [sp, #48]	@ 0x30
 8026bb6:	0e00      	lsrs	r0, r0, #24
 8026bb8:	9013      	str	r0, [sp, #76]	@ 0x4c
 8026bba:	f1bc 0f00 	cmp.w	ip, #0
 8026bbe:	d00f      	beq.n	8026be0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8026bc0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8026bc4:	3b01      	subs	r3, #1
 8026bc6:	009b      	lsls	r3, r3, #2
 8026bc8:	3304      	adds	r3, #4
 8026bca:	eb08 0003 	add.w	r0, r8, r3
 8026bce:	f858 3003 	ldr.w	r3, [r8, r3]
 8026bd2:	9308      	str	r3, [sp, #32]
 8026bd4:	0e1b      	lsrs	r3, r3, #24
 8026bd6:	9311      	str	r3, [sp, #68]	@ 0x44
 8026bd8:	6843      	ldr	r3, [r0, #4]
 8026bda:	930d      	str	r3, [sp, #52]	@ 0x34
 8026bdc:	0e1b      	lsrs	r3, r3, #24
 8026bde:	9314      	str	r3, [sp, #80]	@ 0x50
 8026be0:	b289      	uxth	r1, r1
 8026be2:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8026be4:	fa1f fc8c 	uxth.w	ip, ip
 8026be8:	0108      	lsls	r0, r1, #4
 8026bea:	fb01 f90c 	mul.w	r9, r1, ip
 8026bee:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8026bf2:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 8026bf6:	eba0 0809 	sub.w	r8, r0, r9
 8026bfa:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8026bfc:	fa1f f18c 	uxth.w	r1, ip
 8026c00:	fa1f f888 	uxth.w	r8, r8
 8026c04:	1a5b      	subs	r3, r3, r1
 8026c06:	fb08 f000 	mul.w	r0, r8, r0
 8026c0a:	b29b      	uxth	r3, r3
 8026c0c:	fb03 000e 	mla	r0, r3, lr, r0
 8026c10:	fb01 0004 	mla	r0, r1, r4, r0
 8026c14:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026c16:	fb09 0004 	mla	r0, r9, r4, r0
 8026c1a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026c1e:	2800      	cmp	r0, #0
 8026c20:	f000 80f2 	beq.w	8026e08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8026c24:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8026c28:	d01b      	beq.n	8026c62 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8026c2a:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 8026c2e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8026c32:	fb0e fa0a 	mul.w	sl, lr, sl
 8026c36:	fb0e fe02 	mul.w	lr, lr, r2
 8026c3a:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8026c3e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8026c42:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8026c46:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8026c4a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8026c4e:	4452      	add	r2, sl
 8026c50:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026c54:	0a12      	lsrs	r2, r2, #8
 8026c56:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8026c5a:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8026c5e:	ea42 020c 	orr.w	r2, r2, ip
 8026c62:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026c64:	2cff      	cmp	r4, #255	@ 0xff
 8026c66:	d021      	beq.n	8026cac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8026c68:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8026c6a:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8026c6e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026c70:	fb04 fb0b 	mul.w	fp, r4, fp
 8026c74:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8026c76:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026c7a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026c7c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026c80:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8026c84:	fb04 fa0a 	mul.w	sl, r4, sl
 8026c88:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026c8c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8026c90:	44de      	add	lr, fp
 8026c92:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026c96:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026c9a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026c9e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026ca2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026ca6:	ea4e 040a 	orr.w	r4, lr, sl
 8026caa:	940c      	str	r4, [sp, #48]	@ 0x30
 8026cac:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8026cae:	2cff      	cmp	r4, #255	@ 0xff
 8026cb0:	d021      	beq.n	8026cf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8026cb2:	9c08      	ldr	r4, [sp, #32]
 8026cb4:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8026cb8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8026cba:	fb04 fb0b 	mul.w	fp, r4, fp
 8026cbe:	9c08      	ldr	r4, [sp, #32]
 8026cc0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026cc4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8026cc6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026cca:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8026cce:	fb04 fa0a 	mul.w	sl, r4, sl
 8026cd2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026cd6:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8026cda:	44de      	add	lr, fp
 8026cdc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026ce0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026ce4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026ce8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026cec:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026cf0:	ea4e 040a 	orr.w	r4, lr, sl
 8026cf4:	9408      	str	r4, [sp, #32]
 8026cf6:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026cf8:	2cff      	cmp	r4, #255	@ 0xff
 8026cfa:	d021      	beq.n	8026d40 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8026cfc:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026cfe:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8026d02:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026d04:	fb04 fb0b 	mul.w	fp, r4, fp
 8026d08:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026d0a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026d0e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026d10:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026d14:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8026d18:	fb04 fa0a 	mul.w	sl, r4, sl
 8026d1c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026d20:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8026d24:	44de      	add	lr, fp
 8026d26:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026d2a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026d2e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026d32:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026d36:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026d3a:	ea4e 040a 	orr.w	r4, lr, sl
 8026d3e:	940d      	str	r4, [sp, #52]	@ 0x34
 8026d40:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8026d42:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8026d46:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8026d4a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8026d4e:	9c08      	ldr	r4, [sp, #32]
 8026d50:	fb08 fc0c 	mul.w	ip, r8, ip
 8026d54:	fb03 cc0e 	mla	ip, r3, lr, ip
 8026d58:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8026d5c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026d5e:	fb01 cc0e 	mla	ip, r1, lr, ip
 8026d62:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8026d66:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8026d68:	fb09 cc0e 	mla	ip, r9, lr, ip
 8026d6c:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8026d70:	fb08 f80e 	mul.w	r8, r8, lr
 8026d74:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026d78:	fb03 8202 	mla	r2, r3, r2, r8
 8026d7c:	9b08      	ldr	r3, [sp, #32]
 8026d7e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026d82:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 8026d86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026d88:	fb01 220a 	mla	r2, r1, sl, r2
 8026d8c:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 8026d90:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026d92:	fb09 2901 	mla	r9, r9, r1, r2
 8026d96:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026d98:	4343      	muls	r3, r0
 8026d9a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026d9e:	1c58      	adds	r0, r3, #1
 8026da0:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8026da4:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8026da8:	783b      	ldrb	r3, [r7, #0]
 8026daa:	ea4c 0c09 	orr.w	ip, ip, r9
 8026dae:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8026db2:	fa5f f28c 	uxtb.w	r2, ip
 8026db6:	b2c0      	uxtb	r0, r0
 8026db8:	fb12 f201 	smulbb	r2, r2, r1
 8026dbc:	fb03 2300 	mla	r3, r3, r0, r2
 8026dc0:	b29b      	uxth	r3, r3
 8026dc2:	1c5a      	adds	r2, r3, #1
 8026dc4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026dc8:	787a      	ldrb	r2, [r7, #1]
 8026dca:	fb12 f200 	smulbb	r2, r2, r0
 8026dce:	121b      	asrs	r3, r3, #8
 8026dd0:	703b      	strb	r3, [r7, #0]
 8026dd2:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8026dd6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8026dda:	fb03 2301 	mla	r3, r3, r1, r2
 8026dde:	b29b      	uxth	r3, r3
 8026de0:	1c5a      	adds	r2, r3, #1
 8026de2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026de6:	121b      	asrs	r3, r3, #8
 8026de8:	707b      	strb	r3, [r7, #1]
 8026dea:	78bb      	ldrb	r3, [r7, #2]
 8026dec:	fb13 f000 	smulbb	r0, r3, r0
 8026df0:	fb0c 0c01 	mla	ip, ip, r1, r0
 8026df4:	fa1f fc8c 	uxth.w	ip, ip
 8026df8:	f10c 0301 	add.w	r3, ip, #1
 8026dfc:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8026e00:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8026e04:	f887 c002 	strb.w	ip, [r7, #2]
 8026e08:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8026e0a:	3703      	adds	r7, #3
 8026e0c:	441d      	add	r5, r3
 8026e0e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8026e10:	441e      	add	r6, r3
 8026e12:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8026e14:	3b01      	subs	r3, #1
 8026e16:	9318      	str	r3, [sp, #96]	@ 0x60
 8026e18:	e69f      	b.n	8026b5a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8026e1a:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8026e1c:	441d      	add	r5, r3
 8026e1e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8026e20:	441e      	add	r6, r3
 8026e22:	9b07      	ldr	r3, [sp, #28]
 8026e24:	3b01      	subs	r3, #1
 8026e26:	9307      	str	r3, [sp, #28]
 8026e28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026e2a:	3303      	adds	r3, #3
 8026e2c:	930a      	str	r3, [sp, #40]	@ 0x28
 8026e2e:	e674      	b.n	8026b1a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8026e30:	d025      	beq.n	8026e7e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8026e32:	9b07      	ldr	r3, [sp, #28]
 8026e34:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 8026e36:	3b01      	subs	r3, #1
 8026e38:	fb00 5003 	mla	r0, r0, r3, r5
 8026e3c:	1400      	asrs	r0, r0, #16
 8026e3e:	f53f ae89 	bmi.w	8026b54 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026e42:	3901      	subs	r1, #1
 8026e44:	4288      	cmp	r0, r1
 8026e46:	f6bf ae85 	bge.w	8026b54 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026e4a:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8026e4c:	fb01 6303 	mla	r3, r1, r3, r6
 8026e50:	141b      	asrs	r3, r3, #16
 8026e52:	f53f ae7f 	bmi.w	8026b54 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026e56:	3a01      	subs	r2, #1
 8026e58:	4293      	cmp	r3, r2
 8026e5a:	f6bf ae7b 	bge.w	8026b54 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026e5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026e60:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8026e64:	f103 0e03 	add.w	lr, r3, #3
 8026e68:	f1bb 0f00 	cmp.w	fp, #0
 8026e6c:	dc6e      	bgt.n	8026f4c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8026e6e:	9b07      	ldr	r3, [sp, #28]
 8026e70:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026e74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026e76:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8026e7a:	4423      	add	r3, r4
 8026e7c:	930a      	str	r3, [sp, #40]	@ 0x28
 8026e7e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8026e80:	2b00      	cmp	r3, #0
 8026e82:	f340 81ab 	ble.w	80271dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8026e86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8026e8a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8026e8c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026e90:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026e94:	eef0 6a62 	vmov.f32	s13, s5
 8026e98:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026e9c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026ea0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026ea4:	ee16 5a90 	vmov	r5, s13
 8026ea8:	eef0 6a43 	vmov.f32	s13, s6
 8026eac:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026eb0:	ee16 6a90 	vmov	r6, s13
 8026eb4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026eb8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026ebc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026ec0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026ec4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026ec8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026ecc:	ee12 2a90 	vmov	r2, s5
 8026ed0:	eef0 2a47 	vmov.f32	s5, s14
 8026ed4:	fb92 f3f3 	sdiv	r3, r2, r3
 8026ed8:	ee13 2a10 	vmov	r2, s6
 8026edc:	9329      	str	r3, [sp, #164]	@ 0xa4
 8026ede:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8026ee0:	eeb0 3a67 	vmov.f32	s6, s15
 8026ee4:	fb92 f3f3 	sdiv	r3, r2, r3
 8026ee8:	932a      	str	r3, [sp, #168]	@ 0xa8
 8026eea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8026eec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8026eee:	3b01      	subs	r3, #1
 8026ef0:	9317      	str	r3, [sp, #92]	@ 0x5c
 8026ef2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8026ef4:	bf08      	it	eq
 8026ef6:	4613      	moveq	r3, r2
 8026ef8:	9307      	str	r3, [sp, #28]
 8026efa:	e600      	b.n	8026afe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8026efc:	f1bc 0f00 	cmp.w	ip, #0
 8026f00:	f43f ae6e 	beq.w	8026be0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8026f04:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8026f08:	9308      	str	r3, [sp, #32]
 8026f0a:	0e1b      	lsrs	r3, r3, #24
 8026f0c:	9311      	str	r3, [sp, #68]	@ 0x44
 8026f0e:	e667      	b.n	8026be0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8026f10:	f112 0801 	adds.w	r8, r2, #1
 8026f14:	f53f af78 	bmi.w	8026e08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8026f18:	45c6      	cmp	lr, r8
 8026f1a:	f6ff af75 	blt.w	8026e08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8026f1e:	f110 0801 	adds.w	r8, r0, #1
 8026f22:	f53f af71 	bmi.w	8026e08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8026f26:	4543      	cmp	r3, r8
 8026f28:	f6ff af6e 	blt.w	8026e08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8026f2c:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8026f2e:	b21b      	sxth	r3, r3
 8026f30:	9201      	str	r2, [sp, #4]
 8026f32:	9300      	str	r3, [sp, #0]
 8026f34:	fa0f f38e 	sxth.w	r3, lr
 8026f38:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8026f3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8026f3e:	e9cd c404 	strd	ip, r4, [sp, #16]
 8026f42:	4639      	mov	r1, r7
 8026f44:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8026f46:	f7ff fc79 	bl	802683c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8026f4a:	e75d      	b.n	8026e08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8026f4c:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8026f4e:	142f      	asrs	r7, r5, #16
 8026f50:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8026f52:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8026f56:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8026f5a:	1433      	asrs	r3, r6, #16
 8026f5c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8026f60:	fb02 7303 	mla	r3, r2, r3, r7
 8026f64:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 8026f68:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8026f6c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8026f70:	2900      	cmp	r1, #0
 8026f72:	f000 812a 	beq.w	80271ca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8026f76:	687c      	ldr	r4, [r7, #4]
 8026f78:	940e      	str	r4, [sp, #56]	@ 0x38
 8026f7a:	0e24      	lsrs	r4, r4, #24
 8026f7c:	9415      	str	r4, [sp, #84]	@ 0x54
 8026f7e:	b178      	cbz	r0, 8026fa0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8026f80:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8026f84:	3a01      	subs	r2, #1
 8026f86:	0092      	lsls	r2, r2, #2
 8026f88:	3204      	adds	r2, #4
 8026f8a:	eb07 0802 	add.w	r8, r7, r2
 8026f8e:	58ba      	ldr	r2, [r7, r2]
 8026f90:	9209      	str	r2, [sp, #36]	@ 0x24
 8026f92:	0e12      	lsrs	r2, r2, #24
 8026f94:	9212      	str	r2, [sp, #72]	@ 0x48
 8026f96:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8026f9a:	920f      	str	r2, [sp, #60]	@ 0x3c
 8026f9c:	0e12      	lsrs	r2, r2, #24
 8026f9e:	9216      	str	r2, [sp, #88]	@ 0x58
 8026fa0:	b289      	uxth	r1, r1
 8026fa2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026fa4:	b280      	uxth	r0, r0
 8026fa6:	fb01 f900 	mul.w	r9, r1, r0
 8026faa:	0109      	lsls	r1, r1, #4
 8026fac:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8026fb0:	eba1 0809 	sub.w	r8, r1, r9
 8026fb4:	f5c1 7280 	rsb	r2, r1, #256	@ 0x100
 8026fb8:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8026fba:	b280      	uxth	r0, r0
 8026fbc:	fa1f f888 	uxth.w	r8, r8
 8026fc0:	1a12      	subs	r2, r2, r0
 8026fc2:	fb08 f101 	mul.w	r1, r8, r1
 8026fc6:	b292      	uxth	r2, r2
 8026fc8:	fb02 110c 	mla	r1, r2, ip, r1
 8026fcc:	fb00 1104 	mla	r1, r0, r4, r1
 8026fd0:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8026fd2:	fb09 1104 	mla	r1, r9, r4, r1
 8026fd6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8026fda:	2900      	cmp	r1, #0
 8026fdc:	f000 80ec 	beq.w	80271b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 8026fe0:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8026fe4:	d019      	beq.n	802701a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8026fe6:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8026fea:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8026fee:	fb0c fa0a 	mul.w	sl, ip, sl
 8026ff2:	fb0c fc03 	mul.w	ip, ip, r3
 8026ff6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026ffa:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8026ffe:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8027002:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8027006:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802700a:	4453      	add	r3, sl
 802700c:	0a3f      	lsrs	r7, r7, #8
 802700e:	0a1b      	lsrs	r3, r3, #8
 8027010:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8027014:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8027018:	433b      	orrs	r3, r7
 802701a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802701c:	2cff      	cmp	r4, #255	@ 0xff
 802701e:	d020      	beq.n	8027062 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 8027020:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8027022:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8027026:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8027028:	4367      	muls	r7, r4
 802702a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802702c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027030:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8027034:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8027036:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802703a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802703e:	fb04 fa0a 	mul.w	sl, r4, sl
 8027042:	44bc      	add	ip, r7
 8027044:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8027048:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802704c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027050:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027054:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027058:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802705c:	ea4c 040a 	orr.w	r4, ip, sl
 8027060:	940e      	str	r4, [sp, #56]	@ 0x38
 8027062:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8027064:	2cff      	cmp	r4, #255	@ 0xff
 8027066:	d020      	beq.n	80270aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 8027068:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802706a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802706e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8027070:	4367      	muls	r7, r4
 8027072:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8027074:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027078:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802707c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802707e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8027082:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027086:	fb04 fa0a 	mul.w	sl, r4, sl
 802708a:	44bc      	add	ip, r7
 802708c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8027090:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027094:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027098:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802709c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80270a0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80270a4:	ea4c 040a 	orr.w	r4, ip, sl
 80270a8:	9409      	str	r4, [sp, #36]	@ 0x24
 80270aa:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80270ac:	2cff      	cmp	r4, #255	@ 0xff
 80270ae:	d020      	beq.n	80270f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 80270b0:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80270b2:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80270b6:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80270b8:	4367      	muls	r7, r4
 80270ba:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80270bc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80270c0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80270c4:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80270c6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80270ca:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80270ce:	fb04 fa0a 	mul.w	sl, r4, sl
 80270d2:	44bc      	add	ip, r7
 80270d4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80270d8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80270dc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80270e0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80270e4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80270e8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80270ec:	ea4c 040a 	orr.w	r4, ip, sl
 80270f0:	940f      	str	r4, [sp, #60]	@ 0x3c
 80270f2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80270f4:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 80270f8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80270fc:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8027100:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8027102:	fb08 f707 	mul.w	r7, r8, r7
 8027106:	fb02 770c 	mla	r7, r2, ip, r7
 802710a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802710e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8027110:	fb00 770c 	mla	r7, r0, ip, r7
 8027114:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8027118:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802711a:	fb09 770c 	mla	r7, r9, ip, r7
 802711e:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8027122:	fb08 f80c 	mul.w	r8, r8, ip
 8027126:	0a3f      	lsrs	r7, r7, #8
 8027128:	fb02 8303 	mla	r3, r2, r3, r8
 802712c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802712e:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8027132:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8027136:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8027138:	fb00 330a 	mla	r3, r0, sl, r3
 802713c:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8027140:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8027142:	fb09 3c0c 	mla	ip, r9, ip, r3
 8027146:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8027148:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802714c:	434b      	muls	r3, r1
 802714e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8027152:	1c59      	adds	r1, r3, #1
 8027154:	ea47 070c 	orr.w	r7, r7, ip
 8027158:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802715c:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8027160:	b2fa      	uxtb	r2, r7
 8027162:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8027166:	fb12 f200 	smulbb	r2, r2, r0
 802716a:	b2c9      	uxtb	r1, r1
 802716c:	fb03 2301 	mla	r3, r3, r1, r2
 8027170:	b29b      	uxth	r3, r3
 8027172:	1c5a      	adds	r2, r3, #1
 8027174:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027178:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 802717c:	fb12 f201 	smulbb	r2, r2, r1
 8027180:	121b      	asrs	r3, r3, #8
 8027182:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8027186:	f3c7 2307 	ubfx	r3, r7, #8, #8
 802718a:	0c3f      	lsrs	r7, r7, #16
 802718c:	fb03 2300 	mla	r3, r3, r0, r2
 8027190:	b29b      	uxth	r3, r3
 8027192:	1c5a      	adds	r2, r3, #1
 8027194:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027198:	121b      	asrs	r3, r3, #8
 802719a:	f80e 3c02 	strb.w	r3, [lr, #-2]
 802719e:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80271a2:	fb13 f101 	smulbb	r1, r3, r1
 80271a6:	fb07 1700 	mla	r7, r7, r0, r1
 80271aa:	b2bf      	uxth	r7, r7
 80271ac:	1c79      	adds	r1, r7, #1
 80271ae:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 80271b2:	123f      	asrs	r7, r7, #8
 80271b4:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80271b8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80271ba:	f10e 0e03 	add.w	lr, lr, #3
 80271be:	f10b 3bff 	add.w	fp, fp, #4294967295
 80271c2:	441d      	add	r5, r3
 80271c4:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80271c6:	441e      	add	r6, r3
 80271c8:	e64e      	b.n	8026e68 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 80271ca:	2800      	cmp	r0, #0
 80271cc:	f43f aee8 	beq.w	8026fa0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80271d0:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80271d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80271d6:	0e12      	lsrs	r2, r2, #24
 80271d8:	9212      	str	r2, [sp, #72]	@ 0x48
 80271da:	e6e1      	b.n	8026fa0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80271dc:	b01d      	add	sp, #116	@ 0x74
 80271de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080271e2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 80271e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80271e6:	b087      	sub	sp, #28
 80271e8:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 80271ec:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 80271f0:	fb05 7003 	mla	r0, r5, r3, r7
 80271f4:	2d00      	cmp	r5, #0
 80271f6:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 80271fa:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 80271fe:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8027202:	f2c0 810a 	blt.w	802741a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8027206:	45a8      	cmp	r8, r5
 8027208:	f340 8107 	ble.w	802741a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 802720c:	2f00      	cmp	r7, #0
 802720e:	f2c0 8102 	blt.w	8027416 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8027212:	42bb      	cmp	r3, r7
 8027214:	f340 80ff 	ble.w	8027416 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8027218:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 802721c:	1c7a      	adds	r2, r7, #1
 802721e:	f100 80ff 	bmi.w	8027420 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8027222:	4293      	cmp	r3, r2
 8027224:	f340 80fc 	ble.w	8027420 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8027228:	2c00      	cmp	r4, #0
 802722a:	f000 80fb 	beq.w	8027424 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 802722e:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8027232:	3501      	adds	r5, #1
 8027234:	f100 80fa 	bmi.w	802742c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8027238:	45a8      	cmp	r8, r5
 802723a:	f340 80f7 	ble.w	802742c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 802723e:	f1be 0f00 	cmp.w	lr, #0
 8027242:	f000 80f6 	beq.w	8027432 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 8027246:	2f00      	cmp	r7, #0
 8027248:	f2c0 80ee 	blt.w	8027428 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 802724c:	42bb      	cmp	r3, r7
 802724e:	f340 80eb 	ble.w	8027428 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8027252:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8027256:	3701      	adds	r7, #1
 8027258:	f100 80ee 	bmi.w	8027438 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 802725c:	42bb      	cmp	r3, r7
 802725e:	f340 80eb 	ble.w	8027438 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8027262:	2c00      	cmp	r4, #0
 8027264:	f000 80ea 	beq.w	802743c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 8027268:	3301      	adds	r3, #1
 802726a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 802726e:	fa1f fc84 	uxth.w	ip, r4
 8027272:	fa1f fe8e 	uxth.w	lr, lr
 8027276:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802727a:	fb0c f90e 	mul.w	r9, ip, lr
 802727e:	0e13      	lsrs	r3, r2, #24
 8027280:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8027284:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8027288:	9302      	str	r3, [sp, #8]
 802728a:	ebac 0709 	sub.w	r7, ip, r9
 802728e:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 8027292:	fa1f f48e 	uxth.w	r4, lr
 8027296:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 802729a:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 802729e:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 80272a2:	fb0a fe0e 	mul.w	lr, sl, lr
 80272a6:	1b1b      	subs	r3, r3, r4
 80272a8:	fb0a f606 	mul.w	r6, sl, r6
 80272ac:	ea4f 6815 	mov.w	r8, r5, lsr #24
 80272b0:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80272b4:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 80272b8:	b29b      	uxth	r3, r3
 80272ba:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80272be:	b2bf      	uxth	r7, r7
 80272c0:	9301      	str	r3, [sp, #4]
 80272c2:	44e6      	add	lr, ip
 80272c4:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 80272c8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80272cc:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80272d0:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 80272d4:	9303      	str	r3, [sp, #12]
 80272d6:	0a33      	lsrs	r3, r6, #8
 80272d8:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 80272dc:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80272e0:	9304      	str	r3, [sp, #16]
 80272e2:	fb0b f606 	mul.w	r6, fp, r6
 80272e6:	fb0b f000 	mul.w	r0, fp, r0
 80272ea:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 80272ee:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 80272f2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80272f6:	44b6      	add	lr, r6
 80272f8:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 80272fc:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8027300:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 8027304:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8027308:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802730c:	fb08 f606 	mul.w	r6, r8, r6
 8027310:	0a03      	lsrs	r3, r0, #8
 8027312:	fb08 f505 	mul.w	r5, r8, r5
 8027316:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802731a:	0a30      	lsrs	r0, r6, #8
 802731c:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8027320:	9305      	str	r3, [sp, #20]
 8027322:	0e13      	lsrs	r3, r2, #24
 8027324:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8027328:	fb0e fe07 	mul.w	lr, lr, r7
 802732c:	4430      	add	r0, r6
 802732e:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 8027332:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8027336:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 802733a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802733e:	0a00      	lsrs	r0, r0, #8
 8027340:	435e      	muls	r6, r3
 8027342:	0a2d      	lsrs	r5, r5, #8
 8027344:	435a      	muls	r2, r3
 8027346:	9b03      	ldr	r3, [sp, #12]
 8027348:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 802734c:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8027350:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8027354:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027358:	44b4      	add	ip, r6
 802735a:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 802735e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027362:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8027366:	9e01      	ldr	r6, [sp, #4]
 8027368:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802736c:	fb03 ee06 	mla	lr, r3, r6, lr
 8027370:	9b04      	ldr	r3, [sp, #16]
 8027372:	0a12      	lsrs	r2, r2, #8
 8027374:	fb0c ee09 	mla	lr, ip, r9, lr
 8027378:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 802737c:	9b05      	ldr	r3, [sp, #20]
 802737e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8027382:	fb00 ee04 	mla	lr, r0, r4, lr
 8027386:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802738a:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 802738e:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 8027392:	9b01      	ldr	r3, [sp, #4]
 8027394:	fb07 fe0e 	mul.w	lr, r7, lr
 8027398:	fb07 f70b 	mul.w	r7, r7, fp
 802739c:	fb03 ee06 	mla	lr, r3, r6, lr
 80273a0:	fb03 730a 	mla	r3, r3, sl, r7
 80273a4:	fb09 e202 	mla	r2, r9, r2, lr
 80273a8:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 80273ac:	fb04 2e0e 	mla	lr, r4, lr, r2
 80273b0:	fb04 3408 	mla	r4, r4, r8, r3
 80273b4:	9b02      	ldr	r3, [sp, #8]
 80273b6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80273ba:	fb09 4903 	mla	r9, r9, r3, r4
 80273be:	780b      	ldrb	r3, [r1, #0]
 80273c0:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 80273c4:	ea6f 2929 	mvn.w	r9, r9, asr #8
 80273c8:	ea40 0e0e 	orr.w	lr, r0, lr
 80273cc:	fa5f f989 	uxtb.w	r9, r9
 80273d0:	fb03 f209 	mul.w	r2, r3, r9
 80273d4:	1c53      	adds	r3, r2, #1
 80273d6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80273da:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 80273de:	700b      	strb	r3, [r1, #0]
 80273e0:	784b      	ldrb	r3, [r1, #1]
 80273e2:	fb03 f309 	mul.w	r3, r3, r9
 80273e6:	1c5a      	adds	r2, r3, #1
 80273e8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80273ec:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80273f0:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80273f4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80273f8:	704b      	strb	r3, [r1, #1]
 80273fa:	788b      	ldrb	r3, [r1, #2]
 80273fc:	fb03 f909 	mul.w	r9, r3, r9
 8027400:	f109 0301 	add.w	r3, r9, #1
 8027404:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8027408:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 802740c:	f881 e002 	strb.w	lr, [r1, #2]
 8027410:	b007      	add	sp, #28
 8027412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027416:	2600      	movs	r6, #0
 8027418:	e700      	b.n	802721c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 802741a:	2000      	movs	r0, #0
 802741c:	4606      	mov	r6, r0
 802741e:	e708      	b.n	8027232 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8027420:	2000      	movs	r0, #0
 8027422:	e706      	b.n	8027232 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8027424:	4620      	mov	r0, r4
 8027426:	e704      	b.n	8027232 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8027428:	2500      	movs	r5, #0
 802742a:	e714      	b.n	8027256 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 802742c:	2200      	movs	r2, #0
 802742e:	4615      	mov	r5, r2
 8027430:	e71d      	b.n	802726e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8027432:	4672      	mov	r2, lr
 8027434:	4675      	mov	r5, lr
 8027436:	e71a      	b.n	802726e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8027438:	2200      	movs	r2, #0
 802743a:	e718      	b.n	802726e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 802743c:	4622      	mov	r2, r4
 802743e:	e716      	b.n	802726e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

08027440 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027444:	b099      	sub	sp, #100	@ 0x64
 8027446:	e9cd 1215 	strd	r1, r2, [sp, #84]	@ 0x54
 802744a:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 802744c:	9017      	str	r0, [sp, #92]	@ 0x5c
 802744e:	9306      	str	r3, [sp, #24]
 8027450:	6850      	ldr	r0, [r2, #4]
 8027452:	6812      	ldr	r2, [r2, #0]
 8027454:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 8027458:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	@ 0x8c
 802745c:	fb00 1303 	mla	r3, r0, r3, r1
 8027460:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8027464:	18d3      	adds	r3, r2, r3
 8027466:	9309      	str	r3, [sp, #36]	@ 0x24
 8027468:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802746a:	681b      	ldr	r3, [r3, #0]
 802746c:	930e      	str	r3, [sp, #56]	@ 0x38
 802746e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8027470:	2b00      	cmp	r3, #0
 8027472:	dc03      	bgt.n	802747c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8027474:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8027476:	2b00      	cmp	r3, #0
 8027478:	f340 8360 	ble.w	8027b3c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 802747c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802747e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027482:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027486:	1e48      	subs	r0, r1, #1
 8027488:	1e57      	subs	r7, r2, #1
 802748a:	9b06      	ldr	r3, [sp, #24]
 802748c:	2b00      	cmp	r3, #0
 802748e:	f340 817b 	ble.w	8027788 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 8027492:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8027496:	ea4f 4326 	mov.w	r3, r6, asr #16
 802749a:	d406      	bmi.n	80274aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 802749c:	4584      	cmp	ip, r0
 802749e:	da04      	bge.n	80274aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80274a0:	2b00      	cmp	r3, #0
 80274a2:	db02      	blt.n	80274aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80274a4:	42bb      	cmp	r3, r7
 80274a6:	f2c0 8170 	blt.w	802778a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80274aa:	f11c 0c01 	adds.w	ip, ip, #1
 80274ae:	f100 8160 	bmi.w	8027772 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80274b2:	4561      	cmp	r1, ip
 80274b4:	f2c0 815d 	blt.w	8027772 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80274b8:	3301      	adds	r3, #1
 80274ba:	f100 815a 	bmi.w	8027772 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80274be:	429a      	cmp	r2, r3
 80274c0:	f2c0 8157 	blt.w	8027772 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80274c4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80274c8:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80274ca:	f1b8 0f00 	cmp.w	r8, #0
 80274ce:	f340 8179 	ble.w	80277c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 80274d2:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 80274d4:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80274d8:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80274da:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80274de:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80274e2:	142a      	asrs	r2, r5, #16
 80274e4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80274e8:	689b      	ldr	r3, [r3, #8]
 80274ea:	f100 81be 	bmi.w	802786a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80274ee:	f103 39ff 	add.w	r9, r3, #4294967295
 80274f2:	454a      	cmp	r2, r9
 80274f4:	f280 81b9 	bge.w	802786a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80274f8:	f1bc 0f00 	cmp.w	ip, #0
 80274fc:	f2c0 81b5 	blt.w	802786a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8027500:	f10e 39ff 	add.w	r9, lr, #4294967295
 8027504:	45cc      	cmp	ip, r9
 8027506:	f280 81b0 	bge.w	802786a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802750a:	b21b      	sxth	r3, r3
 802750c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802750e:	fb0c 2203 	mla	r2, ip, r3, r2
 8027512:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 8027516:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802751a:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802751e:	2900      	cmp	r1, #0
 8027520:	f000 8197 	beq.w	8027852 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8027524:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8027528:	940a      	str	r4, [sp, #40]	@ 0x28
 802752a:	0e24      	lsrs	r4, r4, #24
 802752c:	9411      	str	r4, [sp, #68]	@ 0x44
 802752e:	b180      	cbz	r0, 8027552 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8027530:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8027534:	3b01      	subs	r3, #1
 8027536:	009b      	lsls	r3, r3, #2
 8027538:	3304      	adds	r3, #4
 802753a:	eb09 0c03 	add.w	ip, r9, r3
 802753e:	f859 3003 	ldr.w	r3, [r9, r3]
 8027542:	9307      	str	r3, [sp, #28]
 8027544:	0e1b      	lsrs	r3, r3, #24
 8027546:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027548:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802754c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802754e:	0e1b      	lsrs	r3, r3, #24
 8027550:	9312      	str	r3, [sp, #72]	@ 0x48
 8027552:	b289      	uxth	r1, r1
 8027554:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8027556:	b280      	uxth	r0, r0
 8027558:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802755a:	fb01 fa00 	mul.w	sl, r1, r0
 802755e:	0109      	lsls	r1, r1, #4
 8027560:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8027564:	eba1 090a 	sub.w	r9, r1, sl
 8027568:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 802756c:	b280      	uxth	r0, r0
 802756e:	fa1f f989 	uxth.w	r9, r9
 8027572:	1a09      	subs	r1, r1, r0
 8027574:	fb09 f303 	mul.w	r3, r9, r3
 8027578:	b289      	uxth	r1, r1
 802757a:	fb01 330e 	mla	r3, r1, lr, r3
 802757e:	fb00 3304 	mla	r3, r0, r4, r3
 8027582:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8027584:	fb0a 3304 	mla	r3, sl, r4, r3
 8027588:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802758c:	2b00      	cmp	r3, #0
 802758e:	f000 80e8 	beq.w	8027762 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8027592:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8027596:	d01b      	beq.n	80275d0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 8027598:	f002 1bff 	and.w	fp, r2, #16711935	@ 0xff00ff
 802759c:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80275a0:	fb0e fb0b 	mul.w	fp, lr, fp
 80275a4:	fb0e fe02 	mul.w	lr, lr, r2
 80275a8:	ea4f 221b 	mov.w	r2, fp, lsr #8
 80275ac:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80275b0:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80275b4:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80275b8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80275bc:	445a      	add	r2, fp
 80275be:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80275c2:	0a12      	lsrs	r2, r2, #8
 80275c4:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80275c8:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80275cc:	ea42 020c 	orr.w	r2, r2, ip
 80275d0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80275d2:	2cff      	cmp	r4, #255	@ 0xff
 80275d4:	d021      	beq.n	802761a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 80275d6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80275d8:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80275dc:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80275de:	fb04 fc0c 	mul.w	ip, r4, ip
 80275e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80275e4:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80275e8:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 80275ec:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80275ee:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80275f2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80275f6:	fb04 fb0b 	mul.w	fp, r4, fp
 80275fa:	44e6      	add	lr, ip
 80275fc:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8027600:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027604:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8027608:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802760c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8027610:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8027614:	ea4e 040b 	orr.w	r4, lr, fp
 8027618:	940a      	str	r4, [sp, #40]	@ 0x28
 802761a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802761c:	2cff      	cmp	r4, #255	@ 0xff
 802761e:	d021      	beq.n	8027664 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8027620:	9c07      	ldr	r4, [sp, #28]
 8027622:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8027626:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8027628:	fb04 fc0c 	mul.w	ip, r4, ip
 802762c:	9c07      	ldr	r4, [sp, #28]
 802762e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8027632:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8027636:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8027638:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802763c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027640:	fb04 fb0b 	mul.w	fp, r4, fp
 8027644:	44e6      	add	lr, ip
 8027646:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 802764a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802764e:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8027652:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027656:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802765a:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 802765e:	ea4e 040b 	orr.w	r4, lr, fp
 8027662:	9407      	str	r4, [sp, #28]
 8027664:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8027666:	2cff      	cmp	r4, #255	@ 0xff
 8027668:	d021      	beq.n	80276ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 802766a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802766c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8027670:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8027672:	fb04 fc0c 	mul.w	ip, r4, ip
 8027676:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8027678:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802767c:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8027680:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8027682:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8027686:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802768a:	fb04 fb0b 	mul.w	fp, r4, fp
 802768e:	44e6      	add	lr, ip
 8027690:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8027694:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027698:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 802769c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80276a0:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80276a4:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 80276a8:	ea4e 040b 	orr.w	r4, lr, fp
 80276ac:	940b      	str	r4, [sp, #44]	@ 0x2c
 80276ae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80276b0:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 80276b4:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80276b8:	2bff      	cmp	r3, #255	@ 0xff
 80276ba:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80276be:	9c07      	ldr	r4, [sp, #28]
 80276c0:	fb09 fc0c 	mul.w	ip, r9, ip
 80276c4:	fb01 cc0e 	mla	ip, r1, lr, ip
 80276c8:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80276cc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80276ce:	fb00 cc0e 	mla	ip, r0, lr, ip
 80276d2:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80276d6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80276d8:	fb0a cc0e 	mla	ip, sl, lr, ip
 80276dc:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 80276e0:	fb09 f90e 	mul.w	r9, r9, lr
 80276e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80276e8:	fb01 9202 	mla	r2, r1, r2, r9
 80276ec:	9907      	ldr	r1, [sp, #28]
 80276ee:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80276f2:	f401 4b7f 	and.w	fp, r1, #65280	@ 0xff00
 80276f6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80276f8:	fb00 220b 	mla	r2, r0, fp, r2
 80276fc:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 8027700:	fb0a 2a00 	mla	sl, sl, r0, r2
 8027704:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027708:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802770c:	ea4c 0c0a 	orr.w	ip, ip, sl
 8027710:	fa5f f08c 	uxtb.w	r0, ip
 8027714:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8027718:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 802771c:	f000 80a2 	beq.w	8027864 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8027720:	43db      	mvns	r3, r3
 8027722:	783a      	ldrb	r2, [r7, #0]
 8027724:	f897 a002 	ldrb.w	sl, [r7, #2]
 8027728:	b2db      	uxtb	r3, r3
 802772a:	fb02 fe03 	mul.w	lr, r2, r3
 802772e:	fb0a fa03 	mul.w	sl, sl, r3
 8027732:	f10e 0201 	add.w	r2, lr, #1
 8027736:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 802773a:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 802773e:	703a      	strb	r2, [r7, #0]
 8027740:	787a      	ldrb	r2, [r7, #1]
 8027742:	fb02 f003 	mul.w	r0, r2, r3
 8027746:	f10a 0301 	add.w	r3, sl, #1
 802774a:	1c42      	adds	r2, r0, #1
 802774c:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8027750:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8027754:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8027758:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802775c:	707a      	strb	r2, [r7, #1]
 802775e:	f887 c002 	strb.w	ip, [r7, #2]
 8027762:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8027764:	3703      	adds	r7, #3
 8027766:	f108 38ff 	add.w	r8, r8, #4294967295
 802776a:	441d      	add	r5, r3
 802776c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802776e:	441e      	add	r6, r3
 8027770:	e6ab      	b.n	80274ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8027772:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8027774:	441d      	add	r5, r3
 8027776:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8027778:	441e      	add	r6, r3
 802777a:	9b06      	ldr	r3, [sp, #24]
 802777c:	3b01      	subs	r3, #1
 802777e:	9306      	str	r3, [sp, #24]
 8027780:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027782:	3303      	adds	r3, #3
 8027784:	9309      	str	r3, [sp, #36]	@ 0x24
 8027786:	e680      	b.n	802748a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8027788:	d024      	beq.n	80277d4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802778a:	9b06      	ldr	r3, [sp, #24]
 802778c:	9825      	ldr	r0, [sp, #148]	@ 0x94
 802778e:	3b01      	subs	r3, #1
 8027790:	fb00 5003 	mla	r0, r0, r3, r5
 8027794:	1400      	asrs	r0, r0, #16
 8027796:	f53f ae95 	bmi.w	80274c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802779a:	3901      	subs	r1, #1
 802779c:	4288      	cmp	r0, r1
 802779e:	f6bf ae91 	bge.w	80274c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80277a2:	9926      	ldr	r1, [sp, #152]	@ 0x98
 80277a4:	fb01 6303 	mla	r3, r1, r3, r6
 80277a8:	141b      	asrs	r3, r3, #16
 80277aa:	f53f ae8b 	bmi.w	80274c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80277ae:	3a01      	subs	r2, #1
 80277b0:	4293      	cmp	r3, r2
 80277b2:	f6bf ae87 	bge.w	80274c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80277b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80277b8:	f8dd b018 	ldr.w	fp, [sp, #24]
 80277bc:	1cdf      	adds	r7, r3, #3
 80277be:	f1bb 0f00 	cmp.w	fp, #0
 80277c2:	dc6e      	bgt.n	80278a2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 80277c4:	9b06      	ldr	r3, [sp, #24]
 80277c6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80277ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80277cc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80277d0:	4423      	add	r3, r4
 80277d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80277d4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80277d6:	2b00      	cmp	r3, #0
 80277d8:	f340 81b0 	ble.w	8027b3c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 80277dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80277e0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80277e2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80277e6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80277ea:	eef0 6a62 	vmov.f32	s13, s5
 80277ee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80277f2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80277f6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80277fa:	ee16 5a90 	vmov	r5, s13
 80277fe:	eef0 6a43 	vmov.f32	s13, s6
 8027802:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027806:	ee16 6a90 	vmov	r6, s13
 802780a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802780e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027812:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027816:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802781a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802781e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027822:	ee12 2a90 	vmov	r2, s5
 8027826:	eef0 2a47 	vmov.f32	s5, s14
 802782a:	fb92 f3f3 	sdiv	r3, r2, r3
 802782e:	ee13 2a10 	vmov	r2, s6
 8027832:	9325      	str	r3, [sp, #148]	@ 0x94
 8027834:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8027836:	eeb0 3a67 	vmov.f32	s6, s15
 802783a:	fb92 f3f3 	sdiv	r3, r2, r3
 802783e:	9326      	str	r3, [sp, #152]	@ 0x98
 8027840:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8027842:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8027844:	3b01      	subs	r3, #1
 8027846:	9315      	str	r3, [sp, #84]	@ 0x54
 8027848:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802784a:	bf08      	it	eq
 802784c:	4613      	moveq	r3, r2
 802784e:	9306      	str	r3, [sp, #24]
 8027850:	e60d      	b.n	802746e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8027852:	2800      	cmp	r0, #0
 8027854:	f43f ae7d 	beq.w	8027552 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8027858:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 802785c:	9307      	str	r3, [sp, #28]
 802785e:	0e1b      	lsrs	r3, r3, #24
 8027860:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027862:	e676      	b.n	8027552 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8027864:	7038      	strb	r0, [r7, #0]
 8027866:	7079      	strb	r1, [r7, #1]
 8027868:	e779      	b.n	802775e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 802786a:	f112 0901 	adds.w	r9, r2, #1
 802786e:	f53f af78 	bmi.w	8027762 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8027872:	454b      	cmp	r3, r9
 8027874:	f6ff af75 	blt.w	8027762 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8027878:	f11c 0901 	adds.w	r9, ip, #1
 802787c:	f53f af71 	bmi.w	8027762 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8027880:	45ce      	cmp	lr, r9
 8027882:	f6ff af6e 	blt.w	8027762 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8027886:	b21b      	sxth	r3, r3
 8027888:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 802788c:	fa0f f28e 	sxth.w	r2, lr
 8027890:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8027894:	9200      	str	r2, [sp, #0]
 8027896:	4639      	mov	r1, r7
 8027898:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802789a:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 802789c:	f7ff fca1 	bl	80271e2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 80278a0:	e75f      	b.n	8027762 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80278a2:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80278a4:	1429      	asrs	r1, r5, #16
 80278a6:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80278a8:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80278ac:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 80278b0:	1433      	asrs	r3, r6, #16
 80278b2:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80278b6:	fb0c 1303 	mla	r3, ip, r3, r1
 80278ba:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80278bc:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80278c0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80278c4:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80278c8:	2a00      	cmp	r2, #0
 80278ca:	f000 8129 	beq.w	8027b20 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 80278ce:	684c      	ldr	r4, [r1, #4]
 80278d0:	940c      	str	r4, [sp, #48]	@ 0x30
 80278d2:	0e24      	lsrs	r4, r4, #24
 80278d4:	9413      	str	r4, [sp, #76]	@ 0x4c
 80278d6:	b198      	cbz	r0, 8027900 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 80278d8:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 80278dc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80278e0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80278e4:	f10c 0c04 	add.w	ip, ip, #4
 80278e8:	eb01 080c 	add.w	r8, r1, ip
 80278ec:	f851 100c 	ldr.w	r1, [r1, ip]
 80278f0:	9108      	str	r1, [sp, #32]
 80278f2:	0e09      	lsrs	r1, r1, #24
 80278f4:	9110      	str	r1, [sp, #64]	@ 0x40
 80278f6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80278fa:	910d      	str	r1, [sp, #52]	@ 0x34
 80278fc:	0e09      	lsrs	r1, r1, #24
 80278fe:	9114      	str	r1, [sp, #80]	@ 0x50
 8027900:	b292      	uxth	r2, r2
 8027902:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8027904:	b280      	uxth	r0, r0
 8027906:	fb02 f900 	mul.w	r9, r2, r0
 802790a:	0112      	lsls	r2, r2, #4
 802790c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8027910:	eba2 0809 	sub.w	r8, r2, r9
 8027914:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 8027918:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802791a:	b280      	uxth	r0, r0
 802791c:	fa1f f888 	uxth.w	r8, r8
 8027920:	1a09      	subs	r1, r1, r0
 8027922:	fb08 f202 	mul.w	r2, r8, r2
 8027926:	b289      	uxth	r1, r1
 8027928:	fb01 220e 	mla	r2, r1, lr, r2
 802792c:	fb00 2204 	mla	r2, r0, r4, r2
 8027930:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8027932:	fb09 2204 	mla	r2, r9, r4, r2
 8027936:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802793a:	2a00      	cmp	r2, #0
 802793c:	f000 80e8 	beq.w	8027b10 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 8027940:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8027944:	d01b      	beq.n	802797e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 8027946:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 802794a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802794e:	fb0e fa0a 	mul.w	sl, lr, sl
 8027952:	fb0e fe03 	mul.w	lr, lr, r3
 8027956:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802795a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802795e:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8027962:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8027966:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802796a:	4453      	add	r3, sl
 802796c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027970:	0a1b      	lsrs	r3, r3, #8
 8027972:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8027976:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802797a:	ea43 030c 	orr.w	r3, r3, ip
 802797e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8027980:	2cff      	cmp	r4, #255	@ 0xff
 8027982:	d021      	beq.n	80279c8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 8027984:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8027986:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802798a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802798c:	fb04 fc0c 	mul.w	ip, r4, ip
 8027990:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8027992:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8027996:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802799a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802799c:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80279a0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80279a4:	fb04 fa0a 	mul.w	sl, r4, sl
 80279a8:	44e6      	add	lr, ip
 80279aa:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80279ae:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80279b2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80279b6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80279ba:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80279be:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80279c2:	ea4e 040a 	orr.w	r4, lr, sl
 80279c6:	940c      	str	r4, [sp, #48]	@ 0x30
 80279c8:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80279ca:	2cff      	cmp	r4, #255	@ 0xff
 80279cc:	d021      	beq.n	8027a12 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 80279ce:	9c08      	ldr	r4, [sp, #32]
 80279d0:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80279d4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80279d6:	fb04 fc0c 	mul.w	ip, r4, ip
 80279da:	9c08      	ldr	r4, [sp, #32]
 80279dc:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 80279e0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80279e2:	fb04 fa0e 	mul.w	sl, r4, lr
 80279e6:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80279ea:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80279ee:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80279f2:	44e6      	add	lr, ip
 80279f4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80279f8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80279fc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027a00:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027a04:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027a08:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027a0c:	ea4e 040a 	orr.w	r4, lr, sl
 8027a10:	9408      	str	r4, [sp, #32]
 8027a12:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8027a14:	2cff      	cmp	r4, #255	@ 0xff
 8027a16:	d021      	beq.n	8027a5c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8027a18:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8027a1a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8027a1e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8027a20:	fb04 fc0c 	mul.w	ip, r4, ip
 8027a24:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8027a26:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8027a2a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8027a2e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8027a30:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8027a34:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027a38:	fb04 fa0a 	mul.w	sl, r4, sl
 8027a3c:	44e6      	add	lr, ip
 8027a3e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8027a42:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027a46:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027a4a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027a4e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027a52:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027a56:	ea4e 040a 	orr.w	r4, lr, sl
 8027a5a:	940d      	str	r4, [sp, #52]	@ 0x34
 8027a5c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8027a5e:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8027a62:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8027a66:	2aff      	cmp	r2, #255	@ 0xff
 8027a68:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8027a6c:	9c08      	ldr	r4, [sp, #32]
 8027a6e:	fb08 fc0c 	mul.w	ip, r8, ip
 8027a72:	fb01 cc0e 	mla	ip, r1, lr, ip
 8027a76:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8027a7a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8027a7c:	fb00 cc0e 	mla	ip, r0, lr, ip
 8027a80:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8027a84:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8027a86:	fb09 cc0e 	mla	ip, r9, lr, ip
 8027a8a:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8027a8e:	fb08 f80e 	mul.w	r8, r8, lr
 8027a92:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027a96:	fb01 8303 	mla	r3, r1, r3, r8
 8027a9a:	9908      	ldr	r1, [sp, #32]
 8027a9c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027aa0:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8027aa4:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8027aa6:	fb00 330a 	mla	r3, r0, sl, r3
 8027aaa:	f401 4e7f 	and.w	lr, r1, #65280	@ 0xff00
 8027aae:	fb09 3e0e 	mla	lr, r9, lr, r3
 8027ab2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027ab6:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8027aba:	ea4c 0c0e 	orr.w	ip, ip, lr
 8027abe:	fa5f f08c 	uxtb.w	r0, ip
 8027ac2:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8027ac6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8027aca:	d032      	beq.n	8027b32 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8027acc:	43d2      	mvns	r2, r2
 8027ace:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 8027ad2:	b2d2      	uxtb	r2, r2
 8027ad4:	fb0e fe02 	mul.w	lr, lr, r2
 8027ad8:	f10e 0301 	add.w	r3, lr, #1
 8027adc:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8027ae0:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8027ae4:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8027ae8:	4350      	muls	r0, r2
 8027aea:	f807 3c03 	strb.w	r3, [r7, #-3]
 8027aee:	1c43      	adds	r3, r0, #1
 8027af0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8027af4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8027af8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8027afc:	4353      	muls	r3, r2
 8027afe:	f807 1c02 	strb.w	r1, [r7, #-2]
 8027b02:	1c5a      	adds	r2, r3, #1
 8027b04:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8027b08:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8027b0c:	f807 cc01 	strb.w	ip, [r7, #-1]
 8027b10:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8027b12:	3703      	adds	r7, #3
 8027b14:	f10b 3bff 	add.w	fp, fp, #4294967295
 8027b18:	441d      	add	r5, r3
 8027b1a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8027b1c:	441e      	add	r6, r3
 8027b1e:	e64e      	b.n	80277be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8027b20:	2800      	cmp	r0, #0
 8027b22:	f43f aeed 	beq.w	8027900 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8027b26:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8027b2a:	9108      	str	r1, [sp, #32]
 8027b2c:	0e09      	lsrs	r1, r1, #24
 8027b2e:	9110      	str	r1, [sp, #64]	@ 0x40
 8027b30:	e6e6      	b.n	8027900 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8027b32:	f807 0c03 	strb.w	r0, [r7, #-3]
 8027b36:	f807 1c02 	strb.w	r1, [r7, #-2]
 8027b3a:	e7e7      	b.n	8027b0c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 8027b3c:	b019      	add	sp, #100	@ 0x64
 8027b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08027b44 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8027b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027b48:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	@ 0x2c
 8027b4c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8027b50:	2c00      	cmp	r4, #0
 8027b52:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 8027b56:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
 8027b5a:	fb00 4e03 	mla	lr, r0, r3, r4
 8027b5e:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 8027b62:	f2c0 80b8 	blt.w	8027cd6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8027b66:	45a1      	cmp	r9, r4
 8027b68:	f340 80b5 	ble.w	8027cd6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8027b6c:	2800      	cmp	r0, #0
 8027b6e:	f2c0 80b2 	blt.w	8027cd6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8027b72:	4580      	cmp	r8, r0
 8027b74:	f340 80af 	ble.w	8027cd6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8027b78:	ea4f 055e 	mov.w	r5, lr, lsr #1
 8027b7c:	f01e 0f01 	tst.w	lr, #1
 8027b80:	5d56      	ldrb	r6, [r2, r5]
 8027b82:	bf0c      	ite	eq
 8027b84:	f006 060f 	andeq.w	r6, r6, #15
 8027b88:	1136      	asrne	r6, r6, #4
 8027b8a:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8027b8e:	b2f6      	uxtb	r6, r6
 8027b90:	f114 0a01 	adds.w	sl, r4, #1
 8027b94:	f100 80a1 	bmi.w	8027cda <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8027b98:	45d1      	cmp	r9, sl
 8027b9a:	f340 809e 	ble.w	8027cda <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8027b9e:	2800      	cmp	r0, #0
 8027ba0:	f2c0 809b 	blt.w	8027cda <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8027ba4:	4580      	cmp	r8, r0
 8027ba6:	f340 8098 	ble.w	8027cda <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8027baa:	2f00      	cmp	r7, #0
 8027bac:	f000 8097 	beq.w	8027cde <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 8027bb0:	f10e 0b01 	add.w	fp, lr, #1
 8027bb4:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8027bb8:	f01b 0f01 	tst.w	fp, #1
 8027bbc:	5d55      	ldrb	r5, [r2, r5]
 8027bbe:	bf0c      	ite	eq
 8027bc0:	f005 050f 	andeq.w	r5, r5, #15
 8027bc4:	112d      	asrne	r5, r5, #4
 8027bc6:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8027bca:	b2ed      	uxtb	r5, r5
 8027bcc:	f1bc 0f00 	cmp.w	ip, #0
 8027bd0:	f000 8089 	beq.w	8027ce6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 8027bd4:	2c00      	cmp	r4, #0
 8027bd6:	f100 0001 	add.w	r0, r0, #1
 8027bda:	f2c0 8082 	blt.w	8027ce2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8027bde:	45a1      	cmp	r9, r4
 8027be0:	dd7f      	ble.n	8027ce2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8027be2:	2800      	cmp	r0, #0
 8027be4:	db7d      	blt.n	8027ce2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8027be6:	4580      	cmp	r8, r0
 8027be8:	dd7b      	ble.n	8027ce2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8027bea:	eb03 0b0e 	add.w	fp, r3, lr
 8027bee:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8027bf2:	f01b 0f01 	tst.w	fp, #1
 8027bf6:	5d14      	ldrb	r4, [r2, r4]
 8027bf8:	bf0c      	ite	eq
 8027bfa:	f004 040f 	andeq.w	r4, r4, #15
 8027bfe:	1124      	asrne	r4, r4, #4
 8027c00:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8027c04:	b2e4      	uxtb	r4, r4
 8027c06:	f1ba 0f00 	cmp.w	sl, #0
 8027c0a:	db6f      	blt.n	8027cec <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8027c0c:	45d1      	cmp	r9, sl
 8027c0e:	dd6d      	ble.n	8027cec <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8027c10:	2800      	cmp	r0, #0
 8027c12:	db6b      	blt.n	8027cec <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8027c14:	4580      	cmp	r8, r0
 8027c16:	dd69      	ble.n	8027cec <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8027c18:	2f00      	cmp	r7, #0
 8027c1a:	d069      	beq.n	8027cf0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 8027c1c:	3301      	adds	r3, #1
 8027c1e:	449e      	add	lr, r3
 8027c20:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8027c24:	f01e 0f01 	tst.w	lr, #1
 8027c28:	5cd0      	ldrb	r0, [r2, r3]
 8027c2a:	bf0c      	ite	eq
 8027c2c:	f000 000f 	andeq.w	r0, r0, #15
 8027c30:	1100      	asrne	r0, r0, #4
 8027c32:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8027c36:	b2c3      	uxtb	r3, r0
 8027c38:	b2ba      	uxth	r2, r7
 8027c3a:	fa1f fc8c 	uxth.w	ip, ip
 8027c3e:	fb02 f00c 	mul.w	r0, r2, ip
 8027c42:	0112      	lsls	r2, r2, #4
 8027c44:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8027c48:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8027c4c:	1a12      	subs	r2, r2, r0
 8027c4e:	fa1f fc8c 	uxth.w	ip, ip
 8027c52:	b292      	uxth	r2, r2
 8027c54:	eba7 070c 	sub.w	r7, r7, ip
 8027c58:	436a      	muls	r2, r5
 8027c5a:	b2bf      	uxth	r7, r7
 8027c5c:	fb06 2207 	mla	r2, r6, r7, r2
 8027c60:	fb0c 2404 	mla	r4, ip, r4, r2
 8027c64:	fb00 4303 	mla	r3, r0, r3, r4
 8027c68:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027c6c:	b38b      	cbz	r3, 8027cd2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 8027c6e:	4a21      	ldr	r2, [pc, #132]	@ (8027cf4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 8027c70:	6814      	ldr	r4, [r2, #0]
 8027c72:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 8027c76:	b2e5      	uxtb	r5, r4
 8027c78:	4353      	muls	r3, r2
 8027c7a:	1c5a      	adds	r2, r3, #1
 8027c7c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8027c80:	1212      	asrs	r2, r2, #8
 8027c82:	b290      	uxth	r0, r2
 8027c84:	43d2      	mvns	r2, r2
 8027c86:	fb15 f500 	smulbb	r5, r5, r0
 8027c8a:	b2d3      	uxtb	r3, r2
 8027c8c:	780a      	ldrb	r2, [r1, #0]
 8027c8e:	fb02 5203 	mla	r2, r2, r3, r5
 8027c92:	b292      	uxth	r2, r2
 8027c94:	1c55      	adds	r5, r2, #1
 8027c96:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8027c9a:	784d      	ldrb	r5, [r1, #1]
 8027c9c:	fb15 f503 	smulbb	r5, r5, r3
 8027ca0:	1212      	asrs	r2, r2, #8
 8027ca2:	700a      	strb	r2, [r1, #0]
 8027ca4:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8027ca8:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8027cac:	fb02 5200 	mla	r2, r2, r0, r5
 8027cb0:	b292      	uxth	r2, r2
 8027cb2:	1c55      	adds	r5, r2, #1
 8027cb4:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8027cb8:	1212      	asrs	r2, r2, #8
 8027cba:	704a      	strb	r2, [r1, #1]
 8027cbc:	788a      	ldrb	r2, [r1, #2]
 8027cbe:	fb12 f303 	smulbb	r3, r2, r3
 8027cc2:	fb04 3300 	mla	r3, r4, r0, r3
 8027cc6:	b29b      	uxth	r3, r3
 8027cc8:	1c5a      	adds	r2, r3, #1
 8027cca:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027cce:	121b      	asrs	r3, r3, #8
 8027cd0:	708b      	strb	r3, [r1, #2]
 8027cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027cd6:	2600      	movs	r6, #0
 8027cd8:	e75a      	b.n	8027b90 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 8027cda:	2500      	movs	r5, #0
 8027cdc:	e776      	b.n	8027bcc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8027cde:	463d      	mov	r5, r7
 8027ce0:	e774      	b.n	8027bcc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8027ce2:	2400      	movs	r4, #0
 8027ce4:	e78f      	b.n	8027c06 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 8027ce6:	4663      	mov	r3, ip
 8027ce8:	4664      	mov	r4, ip
 8027cea:	e7a5      	b.n	8027c38 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8027cec:	2300      	movs	r3, #0
 8027cee:	e7a3      	b.n	8027c38 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8027cf0:	463b      	mov	r3, r7
 8027cf2:	e7a1      	b.n	8027c38 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8027cf4:	24013b68 	.word	0x24013b68

08027cf8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027cfc:	b097      	sub	sp, #92	@ 0x5c
 8027cfe:	9214      	str	r2, [sp, #80]	@ 0x50
 8027d00:	9309      	str	r3, [sp, #36]	@ 0x24
 8027d02:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8027d04:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8027d08:	9015      	str	r0, [sp, #84]	@ 0x54
 8027d0a:	910c      	str	r1, [sp, #48]	@ 0x30
 8027d0c:	6850      	ldr	r0, [r2, #4]
 8027d0e:	930e      	str	r3, [sp, #56]	@ 0x38
 8027d10:	6812      	ldr	r2, [r2, #0]
 8027d12:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 8027d16:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	@ 0x84
 8027d1a:	fb00 1303 	mla	r3, r0, r3, r1
 8027d1e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8027d22:	eb02 0a03 	add.w	sl, r2, r3
 8027d26:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027d28:	689b      	ldr	r3, [r3, #8]
 8027d2a:	3301      	adds	r3, #1
 8027d2c:	f023 0301 	bic.w	r3, r3, #1
 8027d30:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027d32:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027d34:	681f      	ldr	r7, [r3, #0]
 8027d36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8027d38:	2b00      	cmp	r3, #0
 8027d3a:	dc03      	bgt.n	8027d44 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8027d3c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8027d3e:	2b00      	cmp	r3, #0
 8027d40:	f340 8247 	ble.w	80281d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8027d44:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027d46:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027d4a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027d4e:	1e48      	subs	r0, r1, #1
 8027d50:	f102 3cff 	add.w	ip, r2, #4294967295
 8027d54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027d56:	2b00      	cmp	r3, #0
 8027d58:	f340 80e5 	ble.w	8027f26 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8027d5c:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8027d60:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027d64:	d406      	bmi.n	8027d74 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8027d66:	4586      	cmp	lr, r0
 8027d68:	da04      	bge.n	8027d74 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8027d6a:	2b00      	cmp	r3, #0
 8027d6c:	db02      	blt.n	8027d74 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8027d6e:	4563      	cmp	r3, ip
 8027d70:	f2c0 80da 	blt.w	8027f28 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8027d74:	f11e 0e01 	adds.w	lr, lr, #1
 8027d78:	f100 80cb 	bmi.w	8027f12 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8027d7c:	4571      	cmp	r1, lr
 8027d7e:	f2c0 80c8 	blt.w	8027f12 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8027d82:	3301      	adds	r3, #1
 8027d84:	f100 80c5 	bmi.w	8027f12 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8027d88:	429a      	cmp	r2, r3
 8027d8a:	f2c0 80c2 	blt.w	8027f12 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8027d8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027d90:	46d0      	mov	r8, sl
 8027d92:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 8027d96:	930d      	str	r3, [sp, #52]	@ 0x34
 8027d98:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027d9a:	2b00      	cmp	r3, #0
 8027d9c:	f340 80e3 	ble.w	8027f66 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8027da0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027da2:	1430      	asrs	r0, r6, #16
 8027da4:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8027da8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8027dac:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8027db0:	142b      	asrs	r3, r5, #16
 8027db2:	f100 812e 	bmi.w	8028012 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8027db6:	f10c 3bff 	add.w	fp, ip, #4294967295
 8027dba:	455b      	cmp	r3, fp
 8027dbc:	f280 8129 	bge.w	8028012 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8027dc0:	2800      	cmp	r0, #0
 8027dc2:	f2c0 8126 	blt.w	8028012 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8027dc6:	f10e 3bff 	add.w	fp, lr, #4294967295
 8027dca:	4558      	cmp	r0, fp
 8027dcc:	f280 8121 	bge.w	8028012 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8027dd0:	fb00 3309 	mla	r3, r0, r9, r3
 8027dd4:	0858      	lsrs	r0, r3, #1
 8027dd6:	07dc      	lsls	r4, r3, #31
 8027dd8:	f817 c000 	ldrb.w	ip, [r7, r0]
 8027ddc:	bf54      	ite	pl
 8027dde:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027de2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027de6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027dea:	fa5f fc8c 	uxtb.w	ip, ip
 8027dee:	2a00      	cmp	r2, #0
 8027df0:	f000 80fe 	beq.w	8027ff0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8027df4:	1c58      	adds	r0, r3, #1
 8027df6:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8027dfa:	07c0      	lsls	r0, r0, #31
 8027dfc:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8027e00:	bf54      	ite	pl
 8027e02:	f00e 0e0f 	andpl.w	lr, lr, #15
 8027e06:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8027e0a:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8027e0e:	fa5f f08e 	uxtb.w	r0, lr
 8027e12:	9010      	str	r0, [sp, #64]	@ 0x40
 8027e14:	b1d9      	cbz	r1, 8027e4e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8027e16:	444b      	add	r3, r9
 8027e18:	0858      	lsrs	r0, r3, #1
 8027e1a:	07dc      	lsls	r4, r3, #31
 8027e1c:	f103 0301 	add.w	r3, r3, #1
 8027e20:	5c38      	ldrb	r0, [r7, r0]
 8027e22:	bf54      	ite	pl
 8027e24:	f000 000f 	andpl.w	r0, r0, #15
 8027e28:	1100      	asrmi	r0, r0, #4
 8027e2a:	07dc      	lsls	r4, r3, #31
 8027e2c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8027e30:	b2c0      	uxtb	r0, r0
 8027e32:	900a      	str	r0, [sp, #40]	@ 0x28
 8027e34:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8027e38:	f817 e000 	ldrb.w	lr, [r7, r0]
 8027e3c:	bf54      	ite	pl
 8027e3e:	f00e 030f 	andpl.w	r3, lr, #15
 8027e42:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8027e46:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027e4a:	b2db      	uxtb	r3, r3
 8027e4c:	9311      	str	r3, [sp, #68]	@ 0x44
 8027e4e:	b292      	uxth	r2, r2
 8027e50:	b289      	uxth	r1, r1
 8027e52:	0113      	lsls	r3, r2, #4
 8027e54:	fb02 f001 	mul.w	r0, r2, r1
 8027e58:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8027e5a:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8027e5e:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 8027e62:	1a1b      	subs	r3, r3, r0
 8027e64:	b289      	uxth	r1, r1
 8027e66:	b29b      	uxth	r3, r3
 8027e68:	ebae 0e01 	sub.w	lr, lr, r1
 8027e6c:	4353      	muls	r3, r2
 8027e6e:	fa1f fe8e 	uxth.w	lr, lr
 8027e72:	fb0c 320e 	mla	r2, ip, lr, r3
 8027e76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027e78:	fb01 2203 	mla	r2, r1, r3, r2
 8027e7c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8027e7e:	fb00 2203 	mla	r2, r0, r3, r2
 8027e82:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8027e86:	2a00      	cmp	r2, #0
 8027e88:	d039      	beq.n	8027efe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8027e8a:	4bc7      	ldr	r3, [pc, #796]	@ (80281a8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8027e8c:	6819      	ldr	r1, [r3, #0]
 8027e8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027e90:	fa5f fc81 	uxtb.w	ip, r1
 8027e94:	435a      	muls	r2, r3
 8027e96:	1c53      	adds	r3, r2, #1
 8027e98:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8027e9c:	1212      	asrs	r2, r2, #8
 8027e9e:	b290      	uxth	r0, r2
 8027ea0:	43d2      	mvns	r2, r2
 8027ea2:	fb1c fc00 	smulbb	ip, ip, r0
 8027ea6:	b2d3      	uxtb	r3, r2
 8027ea8:	f898 2000 	ldrb.w	r2, [r8]
 8027eac:	fb02 c203 	mla	r2, r2, r3, ip
 8027eb0:	b292      	uxth	r2, r2
 8027eb2:	f102 0c01 	add.w	ip, r2, #1
 8027eb6:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8027eba:	f898 c001 	ldrb.w	ip, [r8, #1]
 8027ebe:	fb1c fc03 	smulbb	ip, ip, r3
 8027ec2:	1212      	asrs	r2, r2, #8
 8027ec4:	f888 2000 	strb.w	r2, [r8]
 8027ec8:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8027ecc:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8027ed0:	fb02 c200 	mla	r2, r2, r0, ip
 8027ed4:	b292      	uxth	r2, r2
 8027ed6:	f102 0c01 	add.w	ip, r2, #1
 8027eda:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8027ede:	1212      	asrs	r2, r2, #8
 8027ee0:	f888 2001 	strb.w	r2, [r8, #1]
 8027ee4:	f898 2002 	ldrb.w	r2, [r8, #2]
 8027ee8:	fb12 f303 	smulbb	r3, r2, r3
 8027eec:	fb01 3300 	mla	r3, r1, r0, r3
 8027ef0:	b29b      	uxth	r3, r3
 8027ef2:	1c5a      	adds	r2, r3, #1
 8027ef4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027ef8:	121b      	asrs	r3, r3, #8
 8027efa:	f888 3002 	strb.w	r3, [r8, #2]
 8027efe:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8027f00:	f108 0803 	add.w	r8, r8, #3
 8027f04:	441d      	add	r5, r3
 8027f06:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027f08:	441e      	add	r6, r3
 8027f0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027f0c:	3b01      	subs	r3, #1
 8027f0e:	930d      	str	r3, [sp, #52]	@ 0x34
 8027f10:	e742      	b.n	8027d98 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8027f12:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8027f14:	f10a 0a03 	add.w	sl, sl, #3
 8027f18:	441d      	add	r5, r3
 8027f1a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027f1c:	441e      	add	r6, r3
 8027f1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027f20:	3b01      	subs	r3, #1
 8027f22:	9309      	str	r3, [sp, #36]	@ 0x24
 8027f24:	e716      	b.n	8027d54 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8027f26:	d024      	beq.n	8027f72 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8027f28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027f2a:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8027f2c:	3b01      	subs	r3, #1
 8027f2e:	fb00 5003 	mla	r0, r0, r3, r5
 8027f32:	1400      	asrs	r0, r0, #16
 8027f34:	f53f af2b 	bmi.w	8027d8e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8027f38:	3901      	subs	r1, #1
 8027f3a:	4288      	cmp	r0, r1
 8027f3c:	f6bf af27 	bge.w	8027d8e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8027f40:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8027f42:	fb01 6303 	mla	r3, r1, r3, r6
 8027f46:	141b      	asrs	r3, r3, #16
 8027f48:	f53f af21 	bmi.w	8027d8e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8027f4c:	3a01      	subs	r2, #1
 8027f4e:	4293      	cmp	r3, r2
 8027f50:	f6bf af1d 	bge.w	8027d8e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8027f54:	f10a 0e03 	add.w	lr, sl, #3
 8027f58:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 8027f5c:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 8027f60:	f1b8 0f00 	cmp.w	r8, #0
 8027f64:	dc76      	bgt.n	8028054 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8027f66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027f68:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027f6c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8027f70:	44a2      	add	sl, r4
 8027f72:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8027f74:	2b00      	cmp	r3, #0
 8027f76:	f340 812c 	ble.w	80281d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8027f7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8027f7e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027f80:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027f84:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027f88:	eef0 6a62 	vmov.f32	s13, s5
 8027f8c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027f90:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027f94:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027f98:	ee16 5a90 	vmov	r5, s13
 8027f9c:	eef0 6a43 	vmov.f32	s13, s6
 8027fa0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027fa4:	ee16 6a90 	vmov	r6, s13
 8027fa8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027fac:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027fb0:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027fb4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027fb8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027fbc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027fc0:	ee12 2a90 	vmov	r2, s5
 8027fc4:	eef0 2a47 	vmov.f32	s5, s14
 8027fc8:	fb92 f3f3 	sdiv	r3, r2, r3
 8027fcc:	ee13 2a10 	vmov	r2, s6
 8027fd0:	9323      	str	r3, [sp, #140]	@ 0x8c
 8027fd2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027fd4:	eeb0 3a67 	vmov.f32	s6, s15
 8027fd8:	fb92 f3f3 	sdiv	r3, r2, r3
 8027fdc:	9324      	str	r3, [sp, #144]	@ 0x90
 8027fde:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8027fe0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8027fe2:	3b01      	subs	r3, #1
 8027fe4:	930c      	str	r3, [sp, #48]	@ 0x30
 8027fe6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027fe8:	bf08      	it	eq
 8027fea:	4613      	moveq	r3, r2
 8027fec:	9309      	str	r3, [sp, #36]	@ 0x24
 8027fee:	e6a2      	b.n	8027d36 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8027ff0:	2900      	cmp	r1, #0
 8027ff2:	f43f af2c 	beq.w	8027e4e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8027ff6:	eb09 0003 	add.w	r0, r9, r3
 8027ffa:	0843      	lsrs	r3, r0, #1
 8027ffc:	07c0      	lsls	r0, r0, #31
 8027ffe:	5cfb      	ldrb	r3, [r7, r3]
 8028000:	bf54      	ite	pl
 8028002:	f003 030f 	andpl.w	r3, r3, #15
 8028006:	111b      	asrmi	r3, r3, #4
 8028008:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802800c:	b2db      	uxtb	r3, r3
 802800e:	930a      	str	r3, [sp, #40]	@ 0x28
 8028010:	e71d      	b.n	8027e4e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8028012:	f113 0b01 	adds.w	fp, r3, #1
 8028016:	f53f af72 	bmi.w	8027efe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802801a:	45dc      	cmp	ip, fp
 802801c:	f6ff af6f 	blt.w	8027efe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8028020:	f110 0b01 	adds.w	fp, r0, #1
 8028024:	f53f af6b 	bmi.w	8027efe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8028028:	45de      	cmp	lr, fp
 802802a:	f6ff af68 	blt.w	8027efe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802802e:	9302      	str	r3, [sp, #8]
 8028030:	fa0f f38e 	sxth.w	r3, lr
 8028034:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8028036:	9301      	str	r3, [sp, #4]
 8028038:	fa0f f38c 	sxth.w	r3, ip
 802803c:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8028040:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8028044:	9300      	str	r3, [sp, #0]
 8028046:	463a      	mov	r2, r7
 8028048:	464b      	mov	r3, r9
 802804a:	4641      	mov	r1, r8
 802804c:	9815      	ldr	r0, [sp, #84]	@ 0x54
 802804e:	f7ff fd79 	bl	8027b44 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8028052:	e754      	b.n	8027efe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8028054:	142a      	asrs	r2, r5, #16
 8028056:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802805a:	1433      	asrs	r3, r6, #16
 802805c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8028060:	fb09 2303 	mla	r3, r9, r3, r2
 8028064:	085a      	lsrs	r2, r3, #1
 8028066:	07dc      	lsls	r4, r3, #31
 8028068:	5cba      	ldrb	r2, [r7, r2]
 802806a:	bf54      	ite	pl
 802806c:	f002 020f 	andpl.w	r2, r2, #15
 8028070:	1112      	asrmi	r2, r2, #4
 8028072:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8028076:	b2d2      	uxtb	r2, r2
 8028078:	2900      	cmp	r1, #0
 802807a:	f000 8097 	beq.w	80281ac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802807e:	f103 0b01 	add.w	fp, r3, #1
 8028082:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 8028086:	f01b 0f01 	tst.w	fp, #1
 802808a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802808e:	bf0c      	ite	eq
 8028090:	f00c 0c0f 	andeq.w	ip, ip, #15
 8028094:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8028098:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802809c:	fa5f f48c 	uxtb.w	r4, ip
 80280a0:	9412      	str	r4, [sp, #72]	@ 0x48
 80280a2:	b300      	cbz	r0, 80280e6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80280a4:	444b      	add	r3, r9
 80280a6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80280aa:	07dc      	lsls	r4, r3, #31
 80280ac:	f103 0301 	add.w	r3, r3, #1
 80280b0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80280b4:	bf54      	ite	pl
 80280b6:	f00c 0c0f 	andpl.w	ip, ip, #15
 80280ba:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80280be:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80280c2:	fa5f f48c 	uxtb.w	r4, ip
 80280c6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80280ca:	940b      	str	r4, [sp, #44]	@ 0x2c
 80280cc:	07dc      	lsls	r4, r3, #31
 80280ce:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80280d2:	bf54      	ite	pl
 80280d4:	f00c 0c0f 	andpl.w	ip, ip, #15
 80280d8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80280dc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80280e0:	fa5f f38c 	uxtb.w	r3, ip
 80280e4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80280e6:	b289      	uxth	r1, r1
 80280e8:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80280ea:	b280      	uxth	r0, r0
 80280ec:	fb01 f300 	mul.w	r3, r1, r0
 80280f0:	0109      	lsls	r1, r1, #4
 80280f2:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80280f6:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 80280fa:	1ac9      	subs	r1, r1, r3
 80280fc:	b280      	uxth	r0, r0
 80280fe:	b289      	uxth	r1, r1
 8028100:	ebac 0c00 	sub.w	ip, ip, r0
 8028104:	4361      	muls	r1, r4
 8028106:	fa1f fc8c 	uxth.w	ip, ip
 802810a:	fb02 120c 	mla	r2, r2, ip, r1
 802810e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8028110:	fb00 2001 	mla	r0, r0, r1, r2
 8028114:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8028116:	fb03 0302 	mla	r3, r3, r2, r0
 802811a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802811e:	2b00      	cmp	r3, #0
 8028120:	d039      	beq.n	8028196 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8028122:	4a21      	ldr	r2, [pc, #132]	@ (80281a8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8028124:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8028128:	6810      	ldr	r0, [r2, #0]
 802812a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802812c:	fa5f fc80 	uxtb.w	ip, r0
 8028130:	4353      	muls	r3, r2
 8028132:	1c5a      	adds	r2, r3, #1
 8028134:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8028138:	121b      	asrs	r3, r3, #8
 802813a:	b29a      	uxth	r2, r3
 802813c:	43db      	mvns	r3, r3
 802813e:	fb1c fc02 	smulbb	ip, ip, r2
 8028142:	b2db      	uxtb	r3, r3
 8028144:	fb01 c103 	mla	r1, r1, r3, ip
 8028148:	b289      	uxth	r1, r1
 802814a:	f101 0c01 	add.w	ip, r1, #1
 802814e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8028152:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8028156:	fb1c fc03 	smulbb	ip, ip, r3
 802815a:	1209      	asrs	r1, r1, #8
 802815c:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8028160:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8028164:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8028168:	fb01 c102 	mla	r1, r1, r2, ip
 802816c:	b289      	uxth	r1, r1
 802816e:	f101 0c01 	add.w	ip, r1, #1
 8028172:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8028176:	1209      	asrs	r1, r1, #8
 8028178:	f80e 1c02 	strb.w	r1, [lr, #-2]
 802817c:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8028180:	fb11 f303 	smulbb	r3, r1, r3
 8028184:	fb00 3002 	mla	r0, r0, r2, r3
 8028188:	b280      	uxth	r0, r0
 802818a:	1c42      	adds	r2, r0, #1
 802818c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028190:	1200      	asrs	r0, r0, #8
 8028192:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8028196:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8028198:	f10e 0e03 	add.w	lr, lr, #3
 802819c:	f108 38ff 	add.w	r8, r8, #4294967295
 80281a0:	441d      	add	r5, r3
 80281a2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80281a4:	441e      	add	r6, r3
 80281a6:	e6db      	b.n	8027f60 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 80281a8:	24013b68 	.word	0x24013b68
 80281ac:	2800      	cmp	r0, #0
 80281ae:	d09a      	beq.n	80280e6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80281b0:	444b      	add	r3, r9
 80281b2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80281b6:	07db      	lsls	r3, r3, #31
 80281b8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80281bc:	bf54      	ite	pl
 80281be:	f00c 0c0f 	andpl.w	ip, ip, #15
 80281c2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80281c6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80281ca:	fa5f f38c 	uxtb.w	r3, ip
 80281ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80281d0:	e789      	b.n	80280e6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80281d2:	b017      	add	sp, #92	@ 0x5c
 80281d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080281d8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 80281d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80281dc:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
 80281e0:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 80281e4:	2d00      	cmp	r5, #0
 80281e6:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 80281ea:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 80281ee:	fb04 5e03 	mla	lr, r4, r3, r5
 80281f2:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 80281f6:	f2c0 80b1 	blt.w	802835c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80281fa:	45a9      	cmp	r9, r5
 80281fc:	f340 80ae 	ble.w	802835c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8028200:	2c00      	cmp	r4, #0
 8028202:	f2c0 80ab 	blt.w	802835c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8028206:	45a0      	cmp	r8, r4
 8028208:	f340 80a8 	ble.w	802835c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 802820c:	ea4f 065e 	mov.w	r6, lr, lsr #1
 8028210:	f01e 0f01 	tst.w	lr, #1
 8028214:	5d97      	ldrb	r7, [r2, r6]
 8028216:	bf0c      	ite	eq
 8028218:	f007 070f 	andeq.w	r7, r7, #15
 802821c:	113f      	asrne	r7, r7, #4
 802821e:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 8028222:	b2ff      	uxtb	r7, r7
 8028224:	f115 0a01 	adds.w	sl, r5, #1
 8028228:	f100 809a 	bmi.w	8028360 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 802822c:	45d1      	cmp	r9, sl
 802822e:	f340 8097 	ble.w	8028360 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8028232:	2c00      	cmp	r4, #0
 8028234:	f2c0 8094 	blt.w	8028360 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8028238:	45a0      	cmp	r8, r4
 802823a:	f340 8091 	ble.w	8028360 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 802823e:	2800      	cmp	r0, #0
 8028240:	f000 8090 	beq.w	8028364 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 8028244:	f10e 0b01 	add.w	fp, lr, #1
 8028248:	ea4f 065b 	mov.w	r6, fp, lsr #1
 802824c:	f01b 0f01 	tst.w	fp, #1
 8028250:	5d96      	ldrb	r6, [r2, r6]
 8028252:	bf0c      	ite	eq
 8028254:	f006 060f 	andeq.w	r6, r6, #15
 8028258:	1136      	asrne	r6, r6, #4
 802825a:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802825e:	b2f6      	uxtb	r6, r6
 8028260:	f1bc 0f00 	cmp.w	ip, #0
 8028264:	f000 8082 	beq.w	802836c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 8028268:	2d00      	cmp	r5, #0
 802826a:	f104 0401 	add.w	r4, r4, #1
 802826e:	db7b      	blt.n	8028368 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8028270:	45a9      	cmp	r9, r5
 8028272:	dd79      	ble.n	8028368 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8028274:	2c00      	cmp	r4, #0
 8028276:	db77      	blt.n	8028368 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8028278:	45a0      	cmp	r8, r4
 802827a:	dd75      	ble.n	8028368 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 802827c:	eb03 0b0e 	add.w	fp, r3, lr
 8028280:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8028284:	f01b 0f01 	tst.w	fp, #1
 8028288:	5d55      	ldrb	r5, [r2, r5]
 802828a:	bf0c      	ite	eq
 802828c:	f005 050f 	andeq.w	r5, r5, #15
 8028290:	112d      	asrne	r5, r5, #4
 8028292:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8028296:	b2ed      	uxtb	r5, r5
 8028298:	f1ba 0f00 	cmp.w	sl, #0
 802829c:	db69      	blt.n	8028372 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 802829e:	45d1      	cmp	r9, sl
 80282a0:	dd67      	ble.n	8028372 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80282a2:	2c00      	cmp	r4, #0
 80282a4:	db65      	blt.n	8028372 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80282a6:	45a0      	cmp	r8, r4
 80282a8:	dd63      	ble.n	8028372 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80282aa:	2800      	cmp	r0, #0
 80282ac:	d063      	beq.n	8028376 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 80282ae:	3301      	adds	r3, #1
 80282b0:	449e      	add	lr, r3
 80282b2:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80282b6:	f01e 0f01 	tst.w	lr, #1
 80282ba:	5cd4      	ldrb	r4, [r2, r3]
 80282bc:	bf0c      	ite	eq
 80282be:	f004 040f 	andeq.w	r4, r4, #15
 80282c2:	1124      	asrne	r4, r4, #4
 80282c4:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80282c8:	b2e3      	uxtb	r3, r4
 80282ca:	b282      	uxth	r2, r0
 80282cc:	fa1f fc8c 	uxth.w	ip, ip
 80282d0:	fb02 f40c 	mul.w	r4, r2, ip
 80282d4:	0112      	lsls	r2, r2, #4
 80282d6:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 80282da:	fa1f f08c 	uxth.w	r0, ip
 80282de:	f5c2 7c80 	rsb	ip, r2, #256	@ 0x100
 80282e2:	1b12      	subs	r2, r2, r4
 80282e4:	ebac 0c00 	sub.w	ip, ip, r0
 80282e8:	b292      	uxth	r2, r2
 80282ea:	fa1f fc8c 	uxth.w	ip, ip
 80282ee:	4372      	muls	r2, r6
 80282f0:	fb07 220c 	mla	r2, r7, ip, r2
 80282f4:	fb00 2005 	mla	r0, r0, r5, r2
 80282f8:	fb04 0303 	mla	r3, r4, r3, r0
 80282fc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028300:	b353      	cbz	r3, 8028358 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 8028302:	4a1e      	ldr	r2, [pc, #120]	@ (802837c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 8028304:	7808      	ldrb	r0, [r1, #0]
 8028306:	6814      	ldr	r4, [r2, #0]
 8028308:	b29a      	uxth	r2, r3
 802830a:	43db      	mvns	r3, r3
 802830c:	b2e5      	uxtb	r5, r4
 802830e:	b2db      	uxtb	r3, r3
 8028310:	fb15 f502 	smulbb	r5, r5, r2
 8028314:	fb00 5003 	mla	r0, r0, r3, r5
 8028318:	b280      	uxth	r0, r0
 802831a:	1c45      	adds	r5, r0, #1
 802831c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8028320:	784d      	ldrb	r5, [r1, #1]
 8028322:	fb15 f503 	smulbb	r5, r5, r3
 8028326:	1200      	asrs	r0, r0, #8
 8028328:	7008      	strb	r0, [r1, #0]
 802832a:	f3c4 2007 	ubfx	r0, r4, #8, #8
 802832e:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8028332:	fb00 5002 	mla	r0, r0, r2, r5
 8028336:	b280      	uxth	r0, r0
 8028338:	1c45      	adds	r5, r0, #1
 802833a:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802833e:	1200      	asrs	r0, r0, #8
 8028340:	7048      	strb	r0, [r1, #1]
 8028342:	7888      	ldrb	r0, [r1, #2]
 8028344:	fb10 f303 	smulbb	r3, r0, r3
 8028348:	fb04 3202 	mla	r2, r4, r2, r3
 802834c:	b292      	uxth	r2, r2
 802834e:	1c53      	adds	r3, r2, #1
 8028350:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8028354:	1212      	asrs	r2, r2, #8
 8028356:	708a      	strb	r2, [r1, #2]
 8028358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802835c:	2700      	movs	r7, #0
 802835e:	e761      	b.n	8028224 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 8028360:	2600      	movs	r6, #0
 8028362:	e77d      	b.n	8028260 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8028364:	4606      	mov	r6, r0
 8028366:	e77b      	b.n	8028260 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8028368:	2500      	movs	r5, #0
 802836a:	e795      	b.n	8028298 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 802836c:	4663      	mov	r3, ip
 802836e:	4665      	mov	r5, ip
 8028370:	e7ab      	b.n	80282ca <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8028372:	2300      	movs	r3, #0
 8028374:	e7a9      	b.n	80282ca <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8028376:	4603      	mov	r3, r0
 8028378:	e7a7      	b.n	80282ca <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 802837a:	bf00      	nop
 802837c:	24013b68 	.word	0x24013b68

08028380 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028384:	b093      	sub	sp, #76	@ 0x4c
 8028386:	461c      	mov	r4, r3
 8028388:	920c      	str	r2, [sp, #48]	@ 0x30
 802838a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802838c:	9011      	str	r0, [sp, #68]	@ 0x44
 802838e:	9107      	str	r1, [sp, #28]
 8028390:	6850      	ldr	r0, [r2, #4]
 8028392:	6812      	ldr	r2, [r2, #0]
 8028394:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 8028398:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	@ 0x74
 802839c:	fb00 1303 	mla	r3, r0, r3, r1
 80283a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80283a4:	eb02 0b03 	add.w	fp, r2, r3
 80283a8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80283aa:	689b      	ldr	r3, [r3, #8]
 80283ac:	3301      	adds	r3, #1
 80283ae:	f023 0301 	bic.w	r3, r3, #1
 80283b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80283b4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80283b6:	f8d3 8000 	ldr.w	r8, [r3]
 80283ba:	9b07      	ldr	r3, [sp, #28]
 80283bc:	2b00      	cmp	r3, #0
 80283be:	dc03      	bgt.n	80283c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80283c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80283c2:	2b00      	cmp	r3, #0
 80283c4:	f340 822b 	ble.w	802881e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80283c8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80283ca:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80283ce:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80283d2:	1e48      	subs	r0, r1, #1
 80283d4:	1e57      	subs	r7, r2, #1
 80283d6:	2c00      	cmp	r4, #0
 80283d8:	f340 80d7 	ble.w	802858a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 80283dc:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80283e0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80283e4:	d406      	bmi.n	80283f4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80283e6:	4584      	cmp	ip, r0
 80283e8:	da04      	bge.n	80283f4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80283ea:	2b00      	cmp	r3, #0
 80283ec:	db02      	blt.n	80283f4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80283ee:	42bb      	cmp	r3, r7
 80283f0:	f2c0 80cc 	blt.w	802858c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 80283f4:	f11c 0c01 	adds.w	ip, ip, #1
 80283f8:	f100 80bf 	bmi.w	802857a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80283fc:	4561      	cmp	r1, ip
 80283fe:	f2c0 80bc 	blt.w	802857a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8028402:	3301      	adds	r3, #1
 8028404:	f100 80b9 	bmi.w	802857a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8028408:	429a      	cmp	r2, r3
 802840a:	f2c0 80b6 	blt.w	802857a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802840e:	46a2      	mov	sl, r4
 8028410:	465f      	mov	r7, fp
 8028412:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8028416:	f1ba 0f00 	cmp.w	sl, #0
 802841a:	f340 80d4 	ble.w	80285c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 802841e:	f3c5 3303 	ubfx	r3, r5, #12, #4
 8028422:	1430      	asrs	r0, r6, #16
 8028424:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8028428:	9308      	str	r3, [sp, #32]
 802842a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802842c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8028430:	142b      	asrs	r3, r5, #16
 8028432:	f100 8124 	bmi.w	802867e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8028436:	f10c 32ff 	add.w	r2, ip, #4294967295
 802843a:	4293      	cmp	r3, r2
 802843c:	f280 811f 	bge.w	802867e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8028440:	2800      	cmp	r0, #0
 8028442:	f2c0 811c 	blt.w	802867e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8028446:	f10e 32ff 	add.w	r2, lr, #4294967295
 802844a:	4290      	cmp	r0, r2
 802844c:	f280 8117 	bge.w	802867e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8028450:	fb00 3309 	mla	r3, r0, r9, r3
 8028454:	0858      	lsrs	r0, r3, #1
 8028456:	07da      	lsls	r2, r3, #31
 8028458:	9a08      	ldr	r2, [sp, #32]
 802845a:	f818 c000 	ldrb.w	ip, [r8, r0]
 802845e:	bf54      	ite	pl
 8028460:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028464:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028468:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802846c:	fa5f fc8c 	uxtb.w	ip, ip
 8028470:	2a00      	cmp	r2, #0
 8028472:	f000 80ed 	beq.w	8028650 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 8028476:	1c58      	adds	r0, r3, #1
 8028478:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802847c:	07c0      	lsls	r0, r0, #31
 802847e:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8028482:	bf54      	ite	pl
 8028484:	f00e 0e0f 	andpl.w	lr, lr, #15
 8028488:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802848c:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8028490:	fa5f fe8e 	uxtb.w	lr, lr
 8028494:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 8028498:	b1c9      	cbz	r1, 80284ce <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802849a:	444b      	add	r3, r9
 802849c:	0858      	lsrs	r0, r3, #1
 802849e:	07da      	lsls	r2, r3, #31
 80284a0:	f818 0000 	ldrb.w	r0, [r8, r0]
 80284a4:	bf54      	ite	pl
 80284a6:	f000 000f 	andpl.w	r0, r0, #15
 80284aa:	1100      	asrmi	r0, r0, #4
 80284ac:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80284b0:	b2c0      	uxtb	r0, r0
 80284b2:	900a      	str	r0, [sp, #40]	@ 0x28
 80284b4:	1c58      	adds	r0, r3, #1
 80284b6:	0843      	lsrs	r3, r0, #1
 80284b8:	07c2      	lsls	r2, r0, #31
 80284ba:	f818 3003 	ldrb.w	r3, [r8, r3]
 80284be:	bf54      	ite	pl
 80284c0:	f003 030f 	andpl.w	r3, r3, #15
 80284c4:	111b      	asrmi	r3, r3, #4
 80284c6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80284ca:	b2db      	uxtb	r3, r3
 80284cc:	930e      	str	r3, [sp, #56]	@ 0x38
 80284ce:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80284d2:	b289      	uxth	r1, r1
 80284d4:	fb02 f301 	mul.w	r3, r2, r1
 80284d8:	0112      	lsls	r2, r2, #4
 80284da:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80284de:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 80284e2:	1ad2      	subs	r2, r2, r3
 80284e4:	b289      	uxth	r1, r1
 80284e6:	b292      	uxth	r2, r2
 80284e8:	1a40      	subs	r0, r0, r1
 80284ea:	fa1f fe80 	uxth.w	lr, r0
 80284ee:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80284f0:	4342      	muls	r2, r0
 80284f2:	fb0c 2c0e 	mla	ip, ip, lr, r2
 80284f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80284f8:	fb01 c102 	mla	r1, r1, r2, ip
 80284fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80284fe:	fb03 1302 	mla	r3, r3, r2, r1
 8028502:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028506:	b383      	cbz	r3, 802856a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8028508:	4ac6      	ldr	r2, [pc, #792]	@ (8028824 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 802850a:	2bff      	cmp	r3, #255	@ 0xff
 802850c:	6812      	ldr	r2, [r2, #0]
 802850e:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 8028512:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8028516:	b2d2      	uxtb	r2, r2
 8028518:	f000 80ac 	beq.w	8028674 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802851c:	b299      	uxth	r1, r3
 802851e:	43db      	mvns	r3, r3
 8028520:	f897 c000 	ldrb.w	ip, [r7]
 8028524:	fb12 f201 	smulbb	r2, r2, r1
 8028528:	b2db      	uxtb	r3, r3
 802852a:	fb10 f001 	smulbb	r0, r0, r1
 802852e:	fb0c 2203 	mla	r2, ip, r3, r2
 8028532:	fb1e f101 	smulbb	r1, lr, r1
 8028536:	b292      	uxth	r2, r2
 8028538:	f102 0c01 	add.w	ip, r2, #1
 802853c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8028540:	1212      	asrs	r2, r2, #8
 8028542:	703a      	strb	r2, [r7, #0]
 8028544:	787a      	ldrb	r2, [r7, #1]
 8028546:	fb02 0003 	mla	r0, r2, r3, r0
 802854a:	b280      	uxth	r0, r0
 802854c:	1c42      	adds	r2, r0, #1
 802854e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028552:	78ba      	ldrb	r2, [r7, #2]
 8028554:	fb02 1303 	mla	r3, r2, r3, r1
 8028558:	1200      	asrs	r0, r0, #8
 802855a:	b29b      	uxth	r3, r3
 802855c:	7078      	strb	r0, [r7, #1]
 802855e:	f103 0e01 	add.w	lr, r3, #1
 8028562:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8028566:	121b      	asrs	r3, r3, #8
 8028568:	70bb      	strb	r3, [r7, #2]
 802856a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802856c:	3703      	adds	r7, #3
 802856e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8028572:	441d      	add	r5, r3
 8028574:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028576:	441e      	add	r6, r3
 8028578:	e74d      	b.n	8028416 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802857a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802857c:	3c01      	subs	r4, #1
 802857e:	f10b 0b03 	add.w	fp, fp, #3
 8028582:	441d      	add	r5, r3
 8028584:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028586:	441e      	add	r6, r3
 8028588:	e725      	b.n	80283d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 802858a:	d021      	beq.n	80285d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 802858c:	1e63      	subs	r3, r4, #1
 802858e:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8028590:	fb00 5003 	mla	r0, r0, r3, r5
 8028594:	1400      	asrs	r0, r0, #16
 8028596:	f53f af3a 	bmi.w	802840e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802859a:	3901      	subs	r1, #1
 802859c:	4288      	cmp	r0, r1
 802859e:	f6bf af36 	bge.w	802840e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80285a2:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80285a4:	fb01 6303 	mla	r3, r1, r3, r6
 80285a8:	141b      	asrs	r3, r3, #16
 80285aa:	f53f af30 	bmi.w	802840e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80285ae:	3a01      	subs	r2, #1
 80285b0:	4293      	cmp	r3, r2
 80285b2:	f6bf af2c 	bge.w	802840e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80285b6:	f10b 0c03 	add.w	ip, fp, #3
 80285ba:	46a6      	mov	lr, r4
 80285bc:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 80285c0:	f1be 0f00 	cmp.w	lr, #0
 80285c4:	dc79      	bgt.n	80286ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 80285c6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80285ca:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80285ce:	44a3      	add	fp, r4
 80285d0:	9b07      	ldr	r3, [sp, #28]
 80285d2:	2b00      	cmp	r3, #0
 80285d4:	f340 8123 	ble.w	802881e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80285d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80285dc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80285de:	ee30 0a04 	vadd.f32	s0, s0, s8
 80285e2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80285e6:	eef0 6a62 	vmov.f32	s13, s5
 80285ea:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80285ee:	ee31 1a05 	vadd.f32	s2, s2, s10
 80285f2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80285f6:	ee16 5a90 	vmov	r5, s13
 80285fa:	eef0 6a43 	vmov.f32	s13, s6
 80285fe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028602:	ee16 6a90 	vmov	r6, s13
 8028606:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802860a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802860e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028612:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8028616:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802861a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802861e:	ee12 2a90 	vmov	r2, s5
 8028622:	eef0 2a47 	vmov.f32	s5, s14
 8028626:	fb92 f3f3 	sdiv	r3, r2, r3
 802862a:	ee13 2a10 	vmov	r2, s6
 802862e:	931f      	str	r3, [sp, #124]	@ 0x7c
 8028630:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8028632:	eeb0 3a67 	vmov.f32	s6, s15
 8028636:	fb92 f3f3 	sdiv	r3, r2, r3
 802863a:	9320      	str	r3, [sp, #128]	@ 0x80
 802863c:	9b07      	ldr	r3, [sp, #28]
 802863e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8028640:	3b01      	subs	r3, #1
 8028642:	9307      	str	r3, [sp, #28]
 8028644:	bf08      	it	eq
 8028646:	4614      	moveq	r4, r2
 8028648:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802864a:	bf18      	it	ne
 802864c:	461c      	movne	r4, r3
 802864e:	e6b4      	b.n	80283ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8028650:	2900      	cmp	r1, #0
 8028652:	f43f af3c 	beq.w	80284ce <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8028656:	eb09 0003 	add.w	r0, r9, r3
 802865a:	0843      	lsrs	r3, r0, #1
 802865c:	07c0      	lsls	r0, r0, #31
 802865e:	f818 3003 	ldrb.w	r3, [r8, r3]
 8028662:	bf54      	ite	pl
 8028664:	f003 030f 	andpl.w	r3, r3, #15
 8028668:	111b      	asrmi	r3, r3, #4
 802866a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802866e:	b2db      	uxtb	r3, r3
 8028670:	930a      	str	r3, [sp, #40]	@ 0x28
 8028672:	e72c      	b.n	80284ce <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8028674:	703a      	strb	r2, [r7, #0]
 8028676:	7078      	strb	r0, [r7, #1]
 8028678:	f887 e002 	strb.w	lr, [r7, #2]
 802867c:	e775      	b.n	802856a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802867e:	1c5a      	adds	r2, r3, #1
 8028680:	f53f af73 	bmi.w	802856a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8028684:	4594      	cmp	ip, r2
 8028686:	f6ff af70 	blt.w	802856a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802868a:	1c42      	adds	r2, r0, #1
 802868c:	f53f af6d 	bmi.w	802856a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8028690:	4596      	cmp	lr, r2
 8028692:	f6ff af6a 	blt.w	802856a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8028696:	9302      	str	r3, [sp, #8]
 8028698:	fa0f f38e 	sxth.w	r3, lr
 802869c:	9a08      	ldr	r2, [sp, #32]
 802869e:	9301      	str	r3, [sp, #4]
 80286a0:	fa0f f38c 	sxth.w	r3, ip
 80286a4:	9105      	str	r1, [sp, #20]
 80286a6:	4639      	mov	r1, r7
 80286a8:	9300      	str	r3, [sp, #0]
 80286aa:	464b      	mov	r3, r9
 80286ac:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80286b0:	4642      	mov	r2, r8
 80286b2:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80286b4:	f7ff fd90 	bl	80281d8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 80286b8:	e757      	b.n	802856a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80286ba:	142a      	asrs	r2, r5, #16
 80286bc:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80286c0:	1433      	asrs	r3, r6, #16
 80286c2:	f3c6 3703 	ubfx	r7, r6, #12, #4
 80286c6:	fb09 2303 	mla	r3, r9, r3, r2
 80286ca:	085a      	lsrs	r2, r3, #1
 80286cc:	07d9      	lsls	r1, r3, #31
 80286ce:	f818 2002 	ldrb.w	r2, [r8, r2]
 80286d2:	bf54      	ite	pl
 80286d4:	f002 020f 	andpl.w	r2, r2, #15
 80286d8:	1112      	asrmi	r2, r2, #4
 80286da:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80286de:	b2d2      	uxtb	r2, r2
 80286e0:	2800      	cmp	r0, #0
 80286e2:	f000 8085 	beq.w	80287f0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 80286e6:	f103 0a01 	add.w	sl, r3, #1
 80286ea:	ea4f 015a 	mov.w	r1, sl, lsr #1
 80286ee:	f01a 0f01 	tst.w	sl, #1
 80286f2:	f818 1001 	ldrb.w	r1, [r8, r1]
 80286f6:	bf0c      	ite	eq
 80286f8:	f001 010f 	andeq.w	r1, r1, #15
 80286fc:	1109      	asrne	r1, r1, #4
 80286fe:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8028702:	b2c9      	uxtb	r1, r1
 8028704:	910f      	str	r1, [sp, #60]	@ 0x3c
 8028706:	b1df      	cbz	r7, 8028740 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8028708:	444b      	add	r3, r9
 802870a:	0859      	lsrs	r1, r3, #1
 802870c:	f013 0f01 	tst.w	r3, #1
 8028710:	f103 0301 	add.w	r3, r3, #1
 8028714:	f818 1001 	ldrb.w	r1, [r8, r1]
 8028718:	bf0c      	ite	eq
 802871a:	f001 010f 	andeq.w	r1, r1, #15
 802871e:	1109      	asrne	r1, r1, #4
 8028720:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8028724:	b2c9      	uxtb	r1, r1
 8028726:	910b      	str	r1, [sp, #44]	@ 0x2c
 8028728:	0859      	lsrs	r1, r3, #1
 802872a:	07db      	lsls	r3, r3, #31
 802872c:	f818 1001 	ldrb.w	r1, [r8, r1]
 8028730:	bf54      	ite	pl
 8028732:	f001 010f 	andpl.w	r1, r1, #15
 8028736:	1109      	asrmi	r1, r1, #4
 8028738:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802873c:	b2c9      	uxtb	r1, r1
 802873e:	9110      	str	r1, [sp, #64]	@ 0x40
 8028740:	b280      	uxth	r0, r0
 8028742:	b2bf      	uxth	r7, r7
 8028744:	fb00 f307 	mul.w	r3, r0, r7
 8028748:	0100      	lsls	r0, r0, #4
 802874a:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 802874e:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 8028752:	1ac0      	subs	r0, r0, r3
 8028754:	b2bf      	uxth	r7, r7
 8028756:	b280      	uxth	r0, r0
 8028758:	1bc9      	subs	r1, r1, r7
 802875a:	fa1f fa81 	uxth.w	sl, r1
 802875e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8028760:	4348      	muls	r0, r1
 8028762:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8028764:	fb02 020a 	mla	r2, r2, sl, r0
 8028768:	fb07 2701 	mla	r7, r7, r1, r2
 802876c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802876e:	fb03 7302 	mla	r3, r3, r2, r7
 8028772:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028776:	b393      	cbz	r3, 80287de <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8028778:	4a2a      	ldr	r2, [pc, #168]	@ (8028824 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 802877a:	2bff      	cmp	r3, #255	@ 0xff
 802877c:	6811      	ldr	r1, [r2, #0]
 802877e:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8028782:	f3c1 2707 	ubfx	r7, r1, #8, #8
 8028786:	b2c9      	uxtb	r1, r1
 8028788:	d042      	beq.n	8028810 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 802878a:	b298      	uxth	r0, r3
 802878c:	43db      	mvns	r3, r3
 802878e:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 8028792:	fb11 f100 	smulbb	r1, r1, r0
 8028796:	b2db      	uxtb	r3, r3
 8028798:	fb17 f700 	smulbb	r7, r7, r0
 802879c:	fb02 1103 	mla	r1, r2, r3, r1
 80287a0:	fb1a f000 	smulbb	r0, sl, r0
 80287a4:	b289      	uxth	r1, r1
 80287a6:	1c4a      	adds	r2, r1, #1
 80287a8:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80287ac:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 80287b0:	fb02 7703 	mla	r7, r2, r3, r7
 80287b4:	1209      	asrs	r1, r1, #8
 80287b6:	b2bf      	uxth	r7, r7
 80287b8:	f80c 1c03 	strb.w	r1, [ip, #-3]
 80287bc:	1c7a      	adds	r2, r7, #1
 80287be:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80287c2:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 80287c6:	fb02 0303 	mla	r3, r2, r3, r0
 80287ca:	123f      	asrs	r7, r7, #8
 80287cc:	b29b      	uxth	r3, r3
 80287ce:	f80c 7c02 	strb.w	r7, [ip, #-2]
 80287d2:	1c5a      	adds	r2, r3, #1
 80287d4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80287d8:	121b      	asrs	r3, r3, #8
 80287da:	f80c 3c01 	strb.w	r3, [ip, #-1]
 80287de:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80287e0:	f10c 0c03 	add.w	ip, ip, #3
 80287e4:	f10e 3eff 	add.w	lr, lr, #4294967295
 80287e8:	441d      	add	r5, r3
 80287ea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80287ec:	441e      	add	r6, r3
 80287ee:	e6e7      	b.n	80285c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80287f0:	2f00      	cmp	r7, #0
 80287f2:	d0a5      	beq.n	8028740 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80287f4:	444b      	add	r3, r9
 80287f6:	0859      	lsrs	r1, r3, #1
 80287f8:	07db      	lsls	r3, r3, #31
 80287fa:	f818 1001 	ldrb.w	r1, [r8, r1]
 80287fe:	bf54      	ite	pl
 8028800:	f001 010f 	andpl.w	r1, r1, #15
 8028804:	1109      	asrmi	r1, r1, #4
 8028806:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802880a:	b2c9      	uxtb	r1, r1
 802880c:	910b      	str	r1, [sp, #44]	@ 0x2c
 802880e:	e797      	b.n	8028740 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8028810:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8028814:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8028818:	f80c ac01 	strb.w	sl, [ip, #-1]
 802881c:	e7df      	b.n	80287de <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 802881e:	b013      	add	sp, #76	@ 0x4c
 8028820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028824:	24013b68 	.word	0x24013b68

08028828 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>:
 8028828:	b530      	push	{r4, r5, lr}
 802882a:	b29d      	uxth	r5, r3
 802882c:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8028830:	780c      	ldrb	r4, [r1, #0]
 8028832:	b298      	uxth	r0, r3
 8028834:	7813      	ldrb	r3, [r2, #0]
 8028836:	fb14 f405 	smulbb	r4, r4, r5
 802883a:	fb13 f300 	smulbb	r3, r3, r0
 802883e:	441c      	add	r4, r3
 8028840:	b2a4      	uxth	r4, r4
 8028842:	1c63      	adds	r3, r4, #1
 8028844:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8028848:	7853      	ldrb	r3, [r2, #1]
 802884a:	fb13 f300 	smulbb	r3, r3, r0
 802884e:	1224      	asrs	r4, r4, #8
 8028850:	7014      	strb	r4, [r2, #0]
 8028852:	784c      	ldrb	r4, [r1, #1]
 8028854:	fb14 f405 	smulbb	r4, r4, r5
 8028858:	441c      	add	r4, r3
 802885a:	b2a4      	uxth	r4, r4
 802885c:	1c63      	adds	r3, r4, #1
 802885e:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8028862:	1224      	asrs	r4, r4, #8
 8028864:	7054      	strb	r4, [r2, #1]
 8028866:	788b      	ldrb	r3, [r1, #2]
 8028868:	7891      	ldrb	r1, [r2, #2]
 802886a:	fb13 f305 	smulbb	r3, r3, r5
 802886e:	fb11 f000 	smulbb	r0, r1, r0
 8028872:	4403      	add	r3, r0
 8028874:	b29b      	uxth	r3, r3
 8028876:	1c59      	adds	r1, r3, #1
 8028878:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802887c:	121b      	asrs	r3, r3, #8
 802887e:	7093      	strb	r3, [r2, #2]
 8028880:	bd30      	pop	{r4, r5, pc}
	...

08028884 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8028884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028888:	461c      	mov	r4, r3
 802888a:	b08b      	sub	sp, #44	@ 0x2c
 802888c:	460e      	mov	r6, r1
 802888e:	4615      	mov	r5, r2
 8028890:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8028892:	4682      	mov	sl, r0
 8028894:	6861      	ldr	r1, [r4, #4]
 8028896:	aa06      	add	r2, sp, #24
 8028898:	6820      	ldr	r0, [r4, #0]
 802889a:	2702      	movs	r7, #2
 802889c:	f89d 9054 	ldrb.w	r9, [sp, #84]	@ 0x54
 80288a0:	3504      	adds	r5, #4
 80288a2:	c203      	stmia	r2!, {r0, r1}
 80288a4:	6818      	ldr	r0, [r3, #0]
 80288a6:	aa08      	add	r2, sp, #32
 80288a8:	6859      	ldr	r1, [r3, #4]
 80288aa:	c203      	stmia	r2!, {r0, r1}
 80288ac:	a806      	add	r0, sp, #24
 80288ae:	f7f3 f8df 	bl	801ba70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80288b2:	4621      	mov	r1, r4
 80288b4:	a808      	add	r0, sp, #32
 80288b6:	f7f3 f903 	bl	801bac0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80288ba:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80288be:	f9bd b026 	ldrsh.w	fp, [sp, #38]	@ 0x26
 80288c2:	f002 0301 	and.w	r3, r2, #1
 80288c6:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 80288ca:	9302      	str	r3, [sp, #8]
 80288cc:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80288d0:	f003 0101 	and.w	r1, r3, #1
 80288d4:	9101      	str	r1, [sp, #4]
 80288d6:	9801      	ldr	r0, [sp, #4]
 80288d8:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 80288dc:	4403      	add	r3, r0
 80288de:	fb01 2303 	mla	r3, r1, r3, r2
 80288e2:	fb93 f3f7 	sdiv	r3, r3, r7
 80288e6:	441e      	add	r6, r3
 80288e8:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80288ec:	441a      	add	r2, r3
 80288ee:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 80288f2:	4419      	add	r1, r3
 80288f4:	4b70      	ldr	r3, [pc, #448]	@ (8028ab8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 80288f6:	f8ad 2020 	strh.w	r2, [sp, #32]
 80288fa:	6818      	ldr	r0, [r3, #0]
 80288fc:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 8028900:	6803      	ldr	r3, [r0, #0]
 8028902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8028904:	4798      	blx	r3
 8028906:	4a6d      	ldr	r2, [pc, #436]	@ (8028abc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 8028908:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 802890c:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8028910:	8813      	ldrh	r3, [r2, #0]
 8028912:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 8028916:	fb03 1404 	mla	r4, r3, r4, r1
 802891a:	4611      	mov	r1, r2
 802891c:	fb0b f303 	mul.w	r3, fp, r3
 8028920:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8028924:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8028928:	4404      	add	r4, r0
 802892a:	4423      	add	r3, r4
 802892c:	d073      	beq.n	8028a16 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 802892e:	9705      	str	r7, [sp, #20]
 8028930:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8028934:	9b03      	ldr	r3, [sp, #12]
 8028936:	429c      	cmp	r4, r3
 8028938:	f080 80b5 	bcs.w	8028aa6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 802893c:	9b02      	ldr	r3, [sp, #8]
 802893e:	b35b      	cbz	r3, 8028998 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x114>
 8028940:	7831      	ldrb	r1, [r6, #0]
 8028942:	4622      	mov	r2, r4
 8028944:	1c77      	adds	r7, r6, #1
 8028946:	3403      	adds	r4, #3
 8028948:	f001 010f 	and.w	r1, r1, #15
 802894c:	f108 3bff 	add.w	fp, r8, #4294967295
 8028950:	464b      	mov	r3, r9
 8028952:	4650      	mov	r0, sl
 8028954:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8028958:	4429      	add	r1, r5
 802895a:	f7ff ff65 	bl	8028828 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 802895e:	f1bb 0f01 	cmp.w	fp, #1
 8028962:	dd1c      	ble.n	802899e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 8028964:	7839      	ldrb	r1, [r7, #0]
 8028966:	4622      	mov	r2, r4
 8028968:	464b      	mov	r3, r9
 802896a:	4650      	mov	r0, sl
 802896c:	0909      	lsrs	r1, r1, #4
 802896e:	f1ab 0b02 	sub.w	fp, fp, #2
 8028972:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8028976:	4429      	add	r1, r5
 8028978:	f7ff ff56 	bl	8028828 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 802897c:	f817 1b01 	ldrb.w	r1, [r7], #1
 8028980:	1ce2      	adds	r2, r4, #3
 8028982:	464b      	mov	r3, r9
 8028984:	f001 010f 	and.w	r1, r1, #15
 8028988:	4650      	mov	r0, sl
 802898a:	3406      	adds	r4, #6
 802898c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8028990:	4429      	add	r1, r5
 8028992:	f7ff ff49 	bl	8028828 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8028996:	e7e2      	b.n	802895e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 8028998:	4637      	mov	r7, r6
 802899a:	46c3      	mov	fp, r8
 802899c:	e7df      	b.n	802895e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 802899e:	d10a      	bne.n	80289b6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x132>
 80289a0:	7839      	ldrb	r1, [r7, #0]
 80289a2:	4622      	mov	r2, r4
 80289a4:	3403      	adds	r4, #3
 80289a6:	464b      	mov	r3, r9
 80289a8:	0909      	lsrs	r1, r1, #4
 80289aa:	4650      	mov	r0, sl
 80289ac:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80289b0:	4429      	add	r1, r5
 80289b2:	f7ff ff39 	bl	8028828 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 80289b6:	9b04      	ldr	r3, [sp, #16]
 80289b8:	9a01      	ldr	r2, [sp, #4]
 80289ba:	881b      	ldrh	r3, [r3, #0]
 80289bc:	eba3 0308 	sub.w	r3, r3, r8
 80289c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80289c4:	441c      	add	r4, r3
 80289c6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80289ca:	4413      	add	r3, r2
 80289cc:	9a05      	ldr	r2, [sp, #20]
 80289ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80289d2:	441e      	add	r6, r3
 80289d4:	e7ae      	b.n	8028934 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xb0>
 80289d6:	4632      	mov	r2, r6
 80289d8:	46c4      	mov	ip, r8
 80289da:	e037      	b.n	8028a4c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 80289dc:	d10e      	bne.n	80289fc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x178>
 80289de:	7812      	ldrb	r2, [r2, #0]
 80289e0:	3003      	adds	r0, #3
 80289e2:	0912      	lsrs	r2, r2, #4
 80289e4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80289e8:	18ac      	adds	r4, r5, r2
 80289ea:	5caa      	ldrb	r2, [r5, r2]
 80289ec:	f800 2c03 	strb.w	r2, [r0, #-3]
 80289f0:	7862      	ldrb	r2, [r4, #1]
 80289f2:	f800 2c02 	strb.w	r2, [r0, #-2]
 80289f6:	78a2      	ldrb	r2, [r4, #2]
 80289f8:	f800 2c01 	strb.w	r2, [r0, #-1]
 80289fc:	880c      	ldrh	r4, [r1, #0]
 80289fe:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8028a02:	eba4 0408 	sub.w	r4, r4, r8
 8028a06:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8028a0a:	4404      	add	r4, r0
 8028a0c:	9801      	ldr	r0, [sp, #4]
 8028a0e:	4402      	add	r2, r0
 8028a10:	fb92 f2f7 	sdiv	r2, r2, r7
 8028a14:	4416      	add	r6, r2
 8028a16:	429c      	cmp	r4, r3
 8028a18:	d245      	bcs.n	8028aa6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 8028a1a:	9a02      	ldr	r2, [sp, #8]
 8028a1c:	2a00      	cmp	r2, #0
 8028a1e:	d0da      	beq.n	80289d6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x152>
 8028a20:	7830      	ldrb	r0, [r6, #0]
 8028a22:	1c72      	adds	r2, r6, #1
 8028a24:	3403      	adds	r4, #3
 8028a26:	f000 000f 	and.w	r0, r0, #15
 8028a2a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8028a2e:	eb05 0c00 	add.w	ip, r5, r0
 8028a32:	5c28      	ldrb	r0, [r5, r0]
 8028a34:	f804 0c03 	strb.w	r0, [r4, #-3]
 8028a38:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8028a3c:	f804 0c02 	strb.w	r0, [r4, #-2]
 8028a40:	f89c 0002 	ldrb.w	r0, [ip, #2]
 8028a44:	f108 3cff 	add.w	ip, r8, #4294967295
 8028a48:	f804 0c01 	strb.w	r0, [r4, #-1]
 8028a4c:	f1bc 0f01 	cmp.w	ip, #1
 8028a50:	4620      	mov	r0, r4
 8028a52:	f104 0406 	add.w	r4, r4, #6
 8028a56:	ddc1      	ble.n	80289dc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x158>
 8028a58:	7810      	ldrb	r0, [r2, #0]
 8028a5a:	f1ac 0c02 	sub.w	ip, ip, #2
 8028a5e:	0900      	lsrs	r0, r0, #4
 8028a60:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8028a64:	eb05 0e00 	add.w	lr, r5, r0
 8028a68:	5c28      	ldrb	r0, [r5, r0]
 8028a6a:	f804 0c06 	strb.w	r0, [r4, #-6]
 8028a6e:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8028a72:	f804 0c05 	strb.w	r0, [r4, #-5]
 8028a76:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8028a7a:	f804 0c04 	strb.w	r0, [r4, #-4]
 8028a7e:	f812 0b01 	ldrb.w	r0, [r2], #1
 8028a82:	f000 000f 	and.w	r0, r0, #15
 8028a86:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8028a8a:	eb05 0e00 	add.w	lr, r5, r0
 8028a8e:	5c28      	ldrb	r0, [r5, r0]
 8028a90:	f804 0c03 	strb.w	r0, [r4, #-3]
 8028a94:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8028a98:	f804 0c02 	strb.w	r0, [r4, #-2]
 8028a9c:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8028aa0:	f804 0c01 	strb.w	r0, [r4, #-1]
 8028aa4:	e7d2      	b.n	8028a4c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 8028aa6:	4b04      	ldr	r3, [pc, #16]	@ (8028ab8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 8028aa8:	6818      	ldr	r0, [r3, #0]
 8028aaa:	6803      	ldr	r3, [r0, #0]
 8028aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028aae:	4798      	blx	r3
 8028ab0:	b00b      	add	sp, #44	@ 0x2c
 8028ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028ab6:	bf00      	nop
 8028ab8:	24013b58 	.word	0x24013b58
 8028abc:	24013b52 	.word	0x24013b52

08028ac0 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>:
 8028ac0:	b530      	push	{r4, r5, lr}
 8028ac2:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8028ac6:	780d      	ldrb	r5, [r1, #0]
 8028ac8:	28ff      	cmp	r0, #255	@ 0xff
 8028aca:	d107      	bne.n	8028adc <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8028acc:	2bff      	cmp	r3, #255	@ 0xff
 8028ace:	d105      	bne.n	8028adc <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8028ad0:	7015      	strb	r5, [r2, #0]
 8028ad2:	784b      	ldrb	r3, [r1, #1]
 8028ad4:	7053      	strb	r3, [r2, #1]
 8028ad6:	788b      	ldrb	r3, [r1, #2]
 8028ad8:	7093      	strb	r3, [r2, #2]
 8028ada:	bd30      	pop	{r4, r5, pc}
 8028adc:	fb10 f003 	smulbb	r0, r0, r3
 8028ae0:	b283      	uxth	r3, r0
 8028ae2:	1c58      	adds	r0, r3, #1
 8028ae4:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8028ae8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8028aec:	b284      	uxth	r4, r0
 8028aee:	43c0      	mvns	r0, r0
 8028af0:	fb15 f504 	smulbb	r5, r5, r4
 8028af4:	b2c3      	uxtb	r3, r0
 8028af6:	7810      	ldrb	r0, [r2, #0]
 8028af8:	fb00 5003 	mla	r0, r0, r3, r5
 8028afc:	b280      	uxth	r0, r0
 8028afe:	1c45      	adds	r5, r0, #1
 8028b00:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8028b04:	7855      	ldrb	r5, [r2, #1]
 8028b06:	fb15 f503 	smulbb	r5, r5, r3
 8028b0a:	1200      	asrs	r0, r0, #8
 8028b0c:	7010      	strb	r0, [r2, #0]
 8028b0e:	7848      	ldrb	r0, [r1, #1]
 8028b10:	fb00 5004 	mla	r0, r0, r4, r5
 8028b14:	b280      	uxth	r0, r0
 8028b16:	1c45      	adds	r5, r0, #1
 8028b18:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8028b1c:	1200      	asrs	r0, r0, #8
 8028b1e:	7050      	strb	r0, [r2, #1]
 8028b20:	7888      	ldrb	r0, [r1, #2]
 8028b22:	7891      	ldrb	r1, [r2, #2]
 8028b24:	fb11 f303 	smulbb	r3, r1, r3
 8028b28:	fb00 3304 	mla	r3, r0, r4, r3
 8028b2c:	b29b      	uxth	r3, r3
 8028b2e:	1c59      	adds	r1, r3, #1
 8028b30:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8028b34:	121b      	asrs	r3, r3, #8
 8028b36:	e7cf      	b.n	8028ad8 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x18>

08028b38 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8028b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028b3c:	461d      	mov	r5, r3
 8028b3e:	b08f      	sub	sp, #60	@ 0x3c
 8028b40:	460c      	mov	r4, r1
 8028b42:	4616      	mov	r6, r2
 8028b44:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8028b46:	4680      	mov	r8, r0
 8028b48:	6869      	ldr	r1, [r5, #4]
 8028b4a:	aa0a      	add	r2, sp, #40	@ 0x28
 8028b4c:	6828      	ldr	r0, [r5, #0]
 8028b4e:	3604      	adds	r6, #4
 8028b50:	f89d 9064 	ldrb.w	r9, [sp, #100]	@ 0x64
 8028b54:	4f57      	ldr	r7, [pc, #348]	@ (8028cb4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>)
 8028b56:	c203      	stmia	r2!, {r0, r1}
 8028b58:	6818      	ldr	r0, [r3, #0]
 8028b5a:	aa0c      	add	r2, sp, #48	@ 0x30
 8028b5c:	6859      	ldr	r1, [r3, #4]
 8028b5e:	c203      	stmia	r2!, {r0, r1}
 8028b60:	a80a      	add	r0, sp, #40	@ 0x28
 8028b62:	f7f2 ff85 	bl	801ba70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8028b66:	4629      	mov	r1, r5
 8028b68:	a80c      	add	r0, sp, #48	@ 0x30
 8028b6a:	2502      	movs	r5, #2
 8028b6c:	f7f2 ffa8 	bl	801bac0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8028b70:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8028b74:	f9bd a036 	ldrsh.w	sl, [sp, #54]	@ 0x36
 8028b78:	f002 0301 	and.w	r3, r2, #1
 8028b7c:	f9bd b034 	ldrsh.w	fp, [sp, #52]	@ 0x34
 8028b80:	9304      	str	r3, [sp, #16]
 8028b82:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8028b86:	f003 0101 	and.w	r1, r3, #1
 8028b8a:	9103      	str	r1, [sp, #12]
 8028b8c:	9803      	ldr	r0, [sp, #12]
 8028b8e:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8028b92:	4403      	add	r3, r0
 8028b94:	6838      	ldr	r0, [r7, #0]
 8028b96:	fb01 2303 	mla	r3, r1, r3, r2
 8028b9a:	fb93 f3f5 	sdiv	r3, r3, r5
 8028b9e:	18e5      	adds	r5, r4, r3
 8028ba0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8028ba4:	441a      	add	r2, r3
 8028ba6:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8028baa:	4419      	add	r1, r3
 8028bac:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8028bb0:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 8028bb4:	6803      	ldr	r3, [r0, #0]
 8028bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8028bb8:	4798      	blx	r3
 8028bba:	4a3f      	ldr	r2, [pc, #252]	@ (8028cb8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x180>)
 8028bbc:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 8028bc0:	8813      	ldrh	r3, [r2, #0]
 8028bc2:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8028bc6:	9207      	str	r2, [sp, #28]
 8028bc8:	fb03 1404 	mla	r4, r3, r4, r1
 8028bcc:	fb0a f303 	mul.w	r3, sl, r3
 8028bd0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8028bd4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8028bd8:	4404      	add	r4, r0
 8028bda:	18e3      	adds	r3, r4, r3
 8028bdc:	e9cd 3705 	strd	r3, r7, [sp, #20]
 8028be0:	9b05      	ldr	r3, [sp, #20]
 8028be2:	429c      	cmp	r4, r3
 8028be4:	d25d      	bcs.n	8028ca2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16a>
 8028be6:	9b04      	ldr	r3, [sp, #16]
 8028be8:	2b00      	cmp	r3, #0
 8028bea:	d037      	beq.n	8028c5c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 8028bec:	782b      	ldrb	r3, [r5, #0]
 8028bee:	1c6f      	adds	r7, r5, #1
 8028bf0:	f003 030f 	and.w	r3, r3, #15
 8028bf4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8028bf8:	9309      	str	r3, [sp, #36]	@ 0x24
 8028bfa:	0e1b      	lsrs	r3, r3, #24
 8028bfc:	d006      	beq.n	8028c0c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd4>
 8028bfe:	9300      	str	r3, [sp, #0]
 8028c00:	4622      	mov	r2, r4
 8028c02:	464b      	mov	r3, r9
 8028c04:	a909      	add	r1, sp, #36	@ 0x24
 8028c06:	4640      	mov	r0, r8
 8028c08:	f7ff ff5a 	bl	8028ac0 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8028c0c:	3403      	adds	r4, #3
 8028c0e:	f10b 3aff 	add.w	sl, fp, #4294967295
 8028c12:	f1ba 0f01 	cmp.w	sl, #1
 8028c16:	dd24      	ble.n	8028c62 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 8028c18:	783b      	ldrb	r3, [r7, #0]
 8028c1a:	091b      	lsrs	r3, r3, #4
 8028c1c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8028c20:	9308      	str	r3, [sp, #32]
 8028c22:	0e1b      	lsrs	r3, r3, #24
 8028c24:	d006      	beq.n	8028c34 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 8028c26:	9300      	str	r3, [sp, #0]
 8028c28:	4622      	mov	r2, r4
 8028c2a:	464b      	mov	r3, r9
 8028c2c:	a908      	add	r1, sp, #32
 8028c2e:	4640      	mov	r0, r8
 8028c30:	f7ff ff46 	bl	8028ac0 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8028c34:	f817 3b01 	ldrb.w	r3, [r7], #1
 8028c38:	f003 030f 	and.w	r3, r3, #15
 8028c3c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8028c40:	9309      	str	r3, [sp, #36]	@ 0x24
 8028c42:	0e1b      	lsrs	r3, r3, #24
 8028c44:	d006      	beq.n	8028c54 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 8028c46:	9300      	str	r3, [sp, #0]
 8028c48:	1ce2      	adds	r2, r4, #3
 8028c4a:	464b      	mov	r3, r9
 8028c4c:	a909      	add	r1, sp, #36	@ 0x24
 8028c4e:	4640      	mov	r0, r8
 8028c50:	f7ff ff36 	bl	8028ac0 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8028c54:	3406      	adds	r4, #6
 8028c56:	f1aa 0a02 	sub.w	sl, sl, #2
 8028c5a:	e7da      	b.n	8028c12 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8028c5c:	462f      	mov	r7, r5
 8028c5e:	46da      	mov	sl, fp
 8028c60:	e7d7      	b.n	8028c12 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8028c62:	d10e      	bne.n	8028c82 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x14a>
 8028c64:	783b      	ldrb	r3, [r7, #0]
 8028c66:	091b      	lsrs	r3, r3, #4
 8028c68:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8028c6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8028c6e:	0e1b      	lsrs	r3, r3, #24
 8028c70:	d006      	beq.n	8028c80 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 8028c72:	9300      	str	r3, [sp, #0]
 8028c74:	4622      	mov	r2, r4
 8028c76:	464b      	mov	r3, r9
 8028c78:	a909      	add	r1, sp, #36	@ 0x24
 8028c7a:	4640      	mov	r0, r8
 8028c7c:	f7ff ff20 	bl	8028ac0 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8028c80:	3403      	adds	r4, #3
 8028c82:	9b07      	ldr	r3, [sp, #28]
 8028c84:	9a03      	ldr	r2, [sp, #12]
 8028c86:	881b      	ldrh	r3, [r3, #0]
 8028c88:	eba3 030b 	sub.w	r3, r3, fp
 8028c8c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8028c90:	441c      	add	r4, r3
 8028c92:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8028c96:	4413      	add	r3, r2
 8028c98:	2202      	movs	r2, #2
 8028c9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8028c9e:	441d      	add	r5, r3
 8028ca0:	e79e      	b.n	8028be0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa8>
 8028ca2:	9b06      	ldr	r3, [sp, #24]
 8028ca4:	6818      	ldr	r0, [r3, #0]
 8028ca6:	6803      	ldr	r3, [r0, #0]
 8028ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028caa:	4798      	blx	r3
 8028cac:	b00f      	add	sp, #60	@ 0x3c
 8028cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028cb2:	bf00      	nop
 8028cb4:	24013b58 	.word	0x24013b58
 8028cb8:	24013b52 	.word	0x24013b52

08028cbc <CRC_Lock>:
 8028cbc:	4a2d      	ldr	r2, [pc, #180]	@ (8028d74 <CRC_Lock+0xb8>)
 8028cbe:	b530      	push	{r4, r5, lr}
 8028cc0:	6813      	ldr	r3, [r2, #0]
 8028cc2:	f24c 2540 	movw	r5, #49728	@ 0xc240
 8028cc6:	f023 0301 	bic.w	r3, r3, #1
 8028cca:	6013      	str	r3, [r2, #0]
 8028ccc:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8028cd0:	4b29      	ldr	r3, [pc, #164]	@ (8028d78 <CRC_Lock+0xbc>)
 8028cd2:	681c      	ldr	r4, [r3, #0]
 8028cd4:	4014      	ands	r4, r2
 8028cd6:	42ac      	cmp	r4, r5
 8028cd8:	d005      	beq.n	8028ce6 <CRC_Lock+0x2a>
 8028cda:	681c      	ldr	r4, [r3, #0]
 8028cdc:	f24c 2570 	movw	r5, #49776	@ 0xc270
 8028ce0:	4014      	ands	r4, r2
 8028ce2:	42ac      	cmp	r4, r5
 8028ce4:	d125      	bne.n	8028d32 <CRC_Lock+0x76>
 8028ce6:	4b25      	ldr	r3, [pc, #148]	@ (8028d7c <CRC_Lock+0xc0>)
 8028ce8:	681b      	ldr	r3, [r3, #0]
 8028cea:	2b00      	cmp	r3, #0
 8028cec:	d139      	bne.n	8028d62 <CRC_Lock+0xa6>
 8028cee:	4b24      	ldr	r3, [pc, #144]	@ (8028d80 <CRC_Lock+0xc4>)
 8028cf0:	681a      	ldr	r2, [r3, #0]
 8028cf2:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8028cf6:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 8028cfa:	d00d      	beq.n	8028d18 <CRC_Lock+0x5c>
 8028cfc:	681a      	ldr	r2, [r3, #0]
 8028cfe:	f240 4483 	movw	r4, #1155	@ 0x483
 8028d02:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8028d06:	42a2      	cmp	r2, r4
 8028d08:	d006      	beq.n	8028d18 <CRC_Lock+0x5c>
 8028d0a:	681b      	ldr	r3, [r3, #0]
 8028d0c:	f240 4285 	movw	r2, #1157	@ 0x485
 8028d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028d14:	4293      	cmp	r3, r2
 8028d16:	d124      	bne.n	8028d62 <CRC_Lock+0xa6>
 8028d18:	4b1a      	ldr	r3, [pc, #104]	@ (8028d84 <CRC_Lock+0xc8>)
 8028d1a:	2201      	movs	r2, #1
 8028d1c:	601a      	str	r2, [r3, #0]
 8028d1e:	681a      	ldr	r2, [r3, #0]
 8028d20:	2a00      	cmp	r2, #0
 8028d22:	d1fc      	bne.n	8028d1e <CRC_Lock+0x62>
 8028d24:	4b18      	ldr	r3, [pc, #96]	@ (8028d88 <CRC_Lock+0xcc>)
 8028d26:	6018      	str	r0, [r3, #0]
 8028d28:	6818      	ldr	r0, [r3, #0]
 8028d2a:	1a43      	subs	r3, r0, r1
 8028d2c:	4258      	negs	r0, r3
 8028d2e:	4158      	adcs	r0, r3
 8028d30:	e00e      	b.n	8028d50 <CRC_Lock+0x94>
 8028d32:	681b      	ldr	r3, [r3, #0]
 8028d34:	4013      	ands	r3, r2
 8028d36:	f24d 2220 	movw	r2, #53792	@ 0xd220
 8028d3a:	4293      	cmp	r3, r2
 8028d3c:	d111      	bne.n	8028d62 <CRC_Lock+0xa6>
 8028d3e:	4b13      	ldr	r3, [pc, #76]	@ (8028d8c <CRC_Lock+0xd0>)
 8028d40:	f240 4286 	movw	r2, #1158	@ 0x486
 8028d44:	681b      	ldr	r3, [r3, #0]
 8028d46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028d4a:	4293      	cmp	r3, r2
 8028d4c:	d001      	beq.n	8028d52 <CRC_Lock+0x96>
 8028d4e:	2000      	movs	r0, #0
 8028d50:	bd30      	pop	{r4, r5, pc}
 8028d52:	4b0f      	ldr	r3, [pc, #60]	@ (8028d90 <CRC_Lock+0xd4>)
 8028d54:	2201      	movs	r2, #1
 8028d56:	601a      	str	r2, [r3, #0]
 8028d58:	681a      	ldr	r2, [r3, #0]
 8028d5a:	2a00      	cmp	r2, #0
 8028d5c:	d1fc      	bne.n	8028d58 <CRC_Lock+0x9c>
 8028d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8028d94 <CRC_Lock+0xd8>)
 8028d60:	e7e1      	b.n	8028d26 <CRC_Lock+0x6a>
 8028d62:	4b0d      	ldr	r3, [pc, #52]	@ (8028d98 <CRC_Lock+0xdc>)
 8028d64:	2201      	movs	r2, #1
 8028d66:	601a      	str	r2, [r3, #0]
 8028d68:	681a      	ldr	r2, [r3, #0]
 8028d6a:	2a00      	cmp	r2, #0
 8028d6c:	d1fc      	bne.n	8028d68 <CRC_Lock+0xac>
 8028d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8028d9c <CRC_Lock+0xe0>)
 8028d70:	e7d9      	b.n	8028d26 <CRC_Lock+0x6a>
 8028d72:	bf00      	nop
 8028d74:	e0002000 	.word	0xe0002000
 8028d78:	e000ed00 	.word	0xe000ed00
 8028d7c:	e0042000 	.word	0xe0042000
 8028d80:	5c001000 	.word	0x5c001000
 8028d84:	58024c08 	.word	0x58024c08
 8028d88:	58024c00 	.word	0x58024c00
 8028d8c:	46008ff0 	.word	0x46008ff0
 8028d90:	46024c08 	.word	0x46024c08
 8028d94:	46024c00 	.word	0x46024c00
 8028d98:	40023008 	.word	0x40023008
 8028d9c:	40023000 	.word	0x40023000

08028da0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8028da0:	6101      	str	r1, [r0, #16]
 8028da2:	4770      	bx	lr

08028da4 <_ZN8touchgfx8Gestures4tickEv>:
 8028da4:	7b83      	ldrb	r3, [r0, #14]
 8028da6:	b14b      	cbz	r3, 8028dbc <_ZN8touchgfx8Gestures4tickEv+0x18>
 8028da8:	8903      	ldrh	r3, [r0, #8]
 8028daa:	3301      	adds	r3, #1
 8028dac:	b29b      	uxth	r3, r3
 8028dae:	2b07      	cmp	r3, #7
 8028db0:	8103      	strh	r3, [r0, #8]
 8028db2:	bf81      	itttt	hi
 8028db4:	2300      	movhi	r3, #0
 8028db6:	8143      	strhhi	r3, [r0, #10]
 8028db8:	8183      	strhhi	r3, [r0, #12]
 8028dba:	7383      	strbhi	r3, [r0, #14]
 8028dbc:	4770      	bx	lr
	...

08028dc0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8028dc0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8028dc4:	4698      	mov	r8, r3
 8028dc6:	8883      	ldrh	r3, [r0, #4]
 8028dc8:	4604      	mov	r4, r0
 8028dca:	4617      	mov	r7, r2
 8028dcc:	f8ad 3006 	strh.w	r3, [sp, #6]
 8028dd0:	eba8 0303 	sub.w	r3, r8, r3
 8028dd4:	4a19      	ldr	r2, [pc, #100]	@ (8028e3c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8028dd6:	460e      	mov	r6, r1
 8028dd8:	b21b      	sxth	r3, r3
 8028dda:	88c1      	ldrh	r1, [r0, #6]
 8028ddc:	9200      	str	r2, [sp, #0]
 8028dde:	2000      	movs	r0, #0
 8028de0:	2b00      	cmp	r3, #0
 8028de2:	8aa2      	ldrh	r2, [r4, #20]
 8028de4:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 8028de8:	bfb8      	it	lt
 8028dea:	425b      	neglt	r3, r3
 8028dec:	f88d 0004 	strb.w	r0, [sp, #4]
 8028df0:	f8ad 1008 	strh.w	r1, [sp, #8]
 8028df4:	b21b      	sxth	r3, r3
 8028df6:	f8ad 800a 	strh.w	r8, [sp, #10]
 8028dfa:	f8ad 500c 	strh.w	r5, [sp, #12]
 8028dfe:	4293      	cmp	r3, r2
 8028e00:	dc07      	bgt.n	8028e12 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8028e02:	1a69      	subs	r1, r5, r1
 8028e04:	b209      	sxth	r1, r1
 8028e06:	2900      	cmp	r1, #0
 8028e08:	bfb8      	it	lt
 8028e0a:	4249      	neglt	r1, r1
 8028e0c:	b209      	sxth	r1, r1
 8028e0e:	428a      	cmp	r2, r1
 8028e10:	da10      	bge.n	8028e34 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8028e12:	6920      	ldr	r0, [r4, #16]
 8028e14:	4669      	mov	r1, sp
 8028e16:	eba8 0606 	sub.w	r6, r8, r6
 8028e1a:	1bef      	subs	r7, r5, r7
 8028e1c:	6803      	ldr	r3, [r0, #0]
 8028e1e:	685b      	ldr	r3, [r3, #4]
 8028e20:	4798      	blx	r3
 8028e22:	2300      	movs	r3, #0
 8028e24:	2001      	movs	r0, #1
 8028e26:	8166      	strh	r6, [r4, #10]
 8028e28:	8123      	strh	r3, [r4, #8]
 8028e2a:	81a7      	strh	r7, [r4, #12]
 8028e2c:	f8a4 8004 	strh.w	r8, [r4, #4]
 8028e30:	80e5      	strh	r5, [r4, #6]
 8028e32:	73a0      	strb	r0, [r4, #14]
 8028e34:	b004      	add	sp, #16
 8028e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028e3a:	bf00      	nop
 8028e3c:	0802cf74 	.word	0x0802cf74

08028e40 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8028e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028e42:	461e      	mov	r6, r3
 8028e44:	1e4b      	subs	r3, r1, #1
 8028e46:	b085      	sub	sp, #20
 8028e48:	4604      	mov	r4, r0
 8028e4a:	2b01      	cmp	r3, #1
 8028e4c:	460d      	mov	r5, r1
 8028e4e:	4617      	mov	r7, r2
 8028e50:	d84b      	bhi.n	8028eea <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8028e52:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8028e56:	1cd3      	adds	r3, r2, #3
 8028e58:	b29b      	uxth	r3, r3
 8028e5a:	2b06      	cmp	r3, #6
 8028e5c:	d916      	bls.n	8028e8c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8028e5e:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 8028f00 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8028e62:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8028e66:	f8cd c004 	str.w	ip, [sp, #4]
 8028e6a:	f04f 0c00 	mov.w	ip, #0
 8028e6e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8028e72:	6900      	ldr	r0, [r0, #16]
 8028e74:	f8ad 100c 	strh.w	r1, [sp, #12]
 8028e78:	a901      	add	r1, sp, #4
 8028e7a:	f88d c008 	strb.w	ip, [sp, #8]
 8028e7e:	f8ad 200a 	strh.w	r2, [sp, #10]
 8028e82:	f8ad 300e 	strh.w	r3, [sp, #14]
 8028e86:	6803      	ldr	r3, [r0, #0]
 8028e88:	689b      	ldr	r3, [r3, #8]
 8028e8a:	4798      	blx	r3
 8028e8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028e90:	1cd3      	adds	r3, r2, #3
 8028e92:	b29b      	uxth	r3, r3
 8028e94:	2b06      	cmp	r3, #6
 8028e96:	d916      	bls.n	8028ec6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8028e98:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8028f00 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8028e9c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8028ea0:	f8cd c004 	str.w	ip, [sp, #4]
 8028ea4:	f04f 0c01 	mov.w	ip, #1
 8028ea8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8028eac:	6920      	ldr	r0, [r4, #16]
 8028eae:	f8ad 100c 	strh.w	r1, [sp, #12]
 8028eb2:	a901      	add	r1, sp, #4
 8028eb4:	f88d c008 	strb.w	ip, [sp, #8]
 8028eb8:	f8ad 200a 	strh.w	r2, [sp, #10]
 8028ebc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8028ec0:	6803      	ldr	r3, [r0, #0]
 8028ec2:	689b      	ldr	r3, [r3, #8]
 8028ec4:	4798      	blx	r3
 8028ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8028efc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8028ec8:	a901      	add	r1, sp, #4
 8028eca:	6920      	ldr	r0, [r4, #16]
 8028ecc:	9301      	str	r3, [sp, #4]
 8028ece:	2300      	movs	r3, #0
 8028ed0:	f88d 5008 	strb.w	r5, [sp, #8]
 8028ed4:	f8ad 700a 	strh.w	r7, [sp, #10]
 8028ed8:	f8ad 600c 	strh.w	r6, [sp, #12]
 8028edc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8028ee0:	6803      	ldr	r3, [r0, #0]
 8028ee2:	681b      	ldr	r3, [r3, #0]
 8028ee4:	4798      	blx	r3
 8028ee6:	b005      	add	sp, #20
 8028ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028eea:	2900      	cmp	r1, #0
 8028eec:	d1eb      	bne.n	8028ec6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8028eee:	80a2      	strh	r2, [r4, #4]
 8028ef0:	80c6      	strh	r6, [r0, #6]
 8028ef2:	60a1      	str	r1, [r4, #8]
 8028ef4:	81a1      	strh	r1, [r4, #12]
 8028ef6:	73a1      	strb	r1, [r4, #14]
 8028ef8:	e7e5      	b.n	8028ec6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8028efa:	bf00      	nop
 8028efc:	0802cf60 	.word	0x0802cf60
 8028f00:	0802cf88 	.word	0x0802cf88

08028f04 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 8028f04:	10c9      	asrs	r1, r1, #3
 8028f06:	2900      	cmp	r1, #0
 8028f08:	bfb8      	it	lt
 8028f0a:	4249      	neglt	r1, r1
 8028f0c:	2801      	cmp	r0, #1
 8028f0e:	d108      	bne.n	8028f22 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 8028f10:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8028f14:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8028f18:	4601      	mov	r1, r0
 8028f1a:	dd02      	ble.n	8028f22 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 8028f1c:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 8028f20:	4770      	bx	lr
 8028f22:	29ff      	cmp	r1, #255	@ 0xff
 8028f24:	bfa8      	it	ge
 8028f26:	21ff      	movge	r1, #255	@ 0xff
 8028f28:	4608      	mov	r0, r1
 8028f2a:	4770      	bx	lr

08028f2c <_ZN8touchgfx10Rasterizer6lineToEii>:
 8028f2c:	b410      	push	{r4}
 8028f2e:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8028f32:	429c      	cmp	r4, r3
 8028f34:	d803      	bhi.n	8028f3e <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 8028f36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028f3a:	f7f1 bd4b 	b.w	801a9d4 <_ZN8touchgfx7Outline6lineToEii>
 8028f3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028f42:	4770      	bx	lr

08028f44 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 8028f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028f48:	b08b      	sub	sp, #44	@ 0x2c
 8028f4a:	4606      	mov	r6, r0
 8028f4c:	468a      	mov	sl, r1
 8028f4e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8028f52:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8028f56:	9308      	str	r3, [sp, #32]
 8028f58:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8028f5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8028f5e:	f7f1 fea4 	bl	801acaa <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 8028f62:	68b5      	ldr	r5, [r6, #8]
 8028f64:	4604      	mov	r4, r0
 8028f66:	2d00      	cmp	r5, #0
 8028f68:	d044      	beq.n	8028ff4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8028f6a:	6873      	ldr	r3, [r6, #4]
 8028f6c:	42ab      	cmp	r3, r5
 8028f6e:	d33d      	bcc.n	8028fec <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 8028f70:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8028f74:	f04f 0800 	mov.w	r8, #0
 8028f78:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 8028f7c:	eb02 0b03 	add.w	fp, r2, r3
 8028f80:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8028f84:	fb02 1203 	mla	r2, r2, r3, r1
 8028f88:	9205      	str	r2, [sp, #20]
 8028f8a:	1e6a      	subs	r2, r5, #1
 8028f8c:	9204      	str	r2, [sp, #16]
 8028f8e:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 8028f92:	f9b4 7000 	ldrsh.w	r7, [r4]
 8028f96:	454b      	cmp	r3, r9
 8028f98:	463a      	mov	r2, r7
 8028f9a:	d008      	beq.n	8028fae <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 8028f9c:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 8028fa0:	eb03 0b09 	add.w	fp, r3, r9
 8028fa4:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 8028fa8:	fb03 1309 	mla	r3, r3, r9, r1
 8028fac:	9305      	str	r3, [sp, #20]
 8028fae:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8028fb2:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8028fb6:	4498      	add	r8, r3
 8028fb8:	9b04      	ldr	r3, [sp, #16]
 8028fba:	3b01      	subs	r3, #1
 8028fbc:	9304      	str	r3, [sp, #16]
 8028fbe:	9b04      	ldr	r3, [sp, #16]
 8028fc0:	3301      	adds	r3, #1
 8028fc2:	d015      	beq.n	8028ff0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 8028fc4:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 8028fc8:	42bb      	cmp	r3, r7
 8028fca:	d117      	bne.n	8028ffc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 8028fcc:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8028fd0:	9b04      	ldr	r3, [sp, #16]
 8028fd2:	4548      	cmp	r0, r9
 8028fd4:	f103 33ff 	add.w	r3, r3, #4294967295
 8028fd8:	d17d      	bne.n	80290d6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 8028fda:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8028fde:	4401      	add	r1, r0
 8028fe0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8028fe4:	4480      	add	r8, r0
 8028fe6:	e7e9      	b.n	8028fbc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 8028fe8:	461f      	mov	r7, r3
 8028fea:	e042      	b.n	8029072 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 8028fec:	2000      	movs	r0, #0
 8028fee:	e002      	b.n	8028ff6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 8028ff0:	2900      	cmp	r1, #0
 8028ff2:	d16d      	bne.n	80290d0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 8028ff4:	2001      	movs	r0, #1
 8028ff6:	b00b      	add	sp, #44	@ 0x2c
 8028ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028ffc:	b379      	cbz	r1, 802905e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 8028ffe:	2f00      	cmp	r7, #0
 8029000:	db29      	blt.n	8029056 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8029002:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 8029006:	42bb      	cmp	r3, r7
 8029008:	dd25      	ble.n	8029056 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802900a:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 802900e:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 8029012:	f7ff ff77 	bl	8028f04 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 8029016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029018:	fb10 f003 	smulbb	r0, r0, r3
 802901c:	b280      	uxth	r0, r0
 802901e:	1c41      	adds	r1, r0, #1
 8029020:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8029024:	1209      	asrs	r1, r1, #8
 8029026:	f011 0fff 	tst.w	r1, #255	@ 0xff
 802902a:	d014      	beq.n	8029056 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802902c:	b2c9      	uxtb	r1, r1
 802902e:	9808      	ldr	r0, [sp, #32]
 8029030:	b2ba      	uxth	r2, r7
 8029032:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8029034:	9102      	str	r1, [sp, #8]
 8029036:	2101      	movs	r1, #1
 8029038:	4413      	add	r3, r2
 802903a:	4402      	add	r2, r0
 802903c:	9101      	str	r1, [sp, #4]
 802903e:	fa0f f18b 	sxth.w	r1, fp
 8029042:	f8da 0000 	ldr.w	r0, [sl]
 8029046:	b21b      	sxth	r3, r3
 8029048:	9100      	str	r1, [sp, #0]
 802904a:	b212      	sxth	r2, r2
 802904c:	6941      	ldr	r1, [r0, #20]
 802904e:	4650      	mov	r0, sl
 8029050:	460d      	mov	r5, r1
 8029052:	9905      	ldr	r1, [sp, #20]
 8029054:	47a8      	blx	r5
 8029056:	9b04      	ldr	r3, [sp, #16]
 8029058:	1c7a      	adds	r2, r7, #1
 802905a:	3301      	adds	r3, #1
 802905c:	d0ca      	beq.n	8028ff4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802905e:	f9b4 7000 	ldrsh.w	r7, [r4]
 8029062:	1abb      	subs	r3, r7, r2
 8029064:	2b00      	cmp	r3, #0
 8029066:	dd31      	ble.n	80290cc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8029068:	2a00      	cmp	r2, #0
 802906a:	dabd      	bge.n	8028fe8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 802906c:	2f00      	cmp	r7, #0
 802906e:	dd2d      	ble.n	80290cc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8029070:	2200      	movs	r2, #0
 8029072:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 8029076:	19d1      	adds	r1, r2, r7
 8029078:	4299      	cmp	r1, r3
 802907a:	db02      	blt.n	8029082 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 802907c:	1a9f      	subs	r7, r3, r2
 802907e:	2f00      	cmp	r7, #0
 8029080:	dd24      	ble.n	80290cc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8029082:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8029086:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 802908a:	f7ff ff3b 	bl	8028f04 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 802908e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029090:	fb10 f003 	smulbb	r0, r0, r3
 8029094:	b280      	uxth	r0, r0
 8029096:	1c41      	adds	r1, r0, #1
 8029098:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802909c:	1209      	asrs	r1, r1, #8
 802909e:	f011 0fff 	tst.w	r1, #255	@ 0xff
 80290a2:	d013      	beq.n	80290cc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80290a4:	b292      	uxth	r2, r2
 80290a6:	9808      	ldr	r0, [sp, #32]
 80290a8:	b2c9      	uxtb	r1, r1
 80290aa:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 80290ac:	b23f      	sxth	r7, r7
 80290ae:	4413      	add	r3, r2
 80290b0:	9102      	str	r1, [sp, #8]
 80290b2:	4402      	add	r2, r0
 80290b4:	fa0f f18b 	sxth.w	r1, fp
 80290b8:	f8da 0000 	ldr.w	r0, [sl]
 80290bc:	b21b      	sxth	r3, r3
 80290be:	9100      	str	r1, [sp, #0]
 80290c0:	b212      	sxth	r2, r2
 80290c2:	9701      	str	r7, [sp, #4]
 80290c4:	9905      	ldr	r1, [sp, #20]
 80290c6:	6947      	ldr	r7, [r0, #20]
 80290c8:	4650      	mov	r0, sl
 80290ca:	47b8      	blx	r7
 80290cc:	464b      	mov	r3, r9
 80290ce:	e75e      	b.n	8028f8e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 80290d0:	2f00      	cmp	r7, #0
 80290d2:	da96      	bge.n	8029002 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 80290d4:	e78e      	b.n	8028ff4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 80290d6:	2900      	cmp	r1, #0
 80290d8:	d0f8      	beq.n	80290cc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80290da:	e790      	b.n	8028ffe <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

080290dc <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 80290dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80290e0:	461e      	mov	r6, r3
 80290e2:	4b36      	ldr	r3, [pc, #216]	@ (80291bc <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 80290e4:	2500      	movs	r5, #0
 80290e6:	f100 0814 	add.w	r8, r0, #20
 80290ea:	4604      	mov	r4, r0
 80290ec:	4617      	mov	r7, r2
 80290ee:	e9c0 3100 	strd	r3, r1, [r0]
 80290f2:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 80290f6:	8185      	strh	r5, [r0, #12]
 80290f8:	8103      	strh	r3, [r0, #8]
 80290fa:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80290fe:	81c5      	strh	r5, [r0, #14]
 8029100:	7283      	strb	r3, [r0, #10]
 8029102:	8205      	strh	r5, [r0, #16]
 8029104:	8245      	strh	r5, [r0, #18]
 8029106:	4640      	mov	r0, r8
 8029108:	f7f0 ffaa 	bl	801a060 <_ZN8touchgfx7OutlineC1Ev>
 802910c:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 8029110:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 8029114:	466b      	mov	r3, sp
 8029116:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 802911a:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 802911e:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 8029122:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 8029126:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 802912a:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 802912e:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 8029132:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 8029136:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 802913a:	6830      	ldr	r0, [r6, #0]
 802913c:	6871      	ldr	r1, [r6, #4]
 802913e:	8872      	ldrh	r2, [r6, #2]
 8029140:	8835      	ldrh	r5, [r6, #0]
 8029142:	c303      	stmia	r3!, {r0, r1}
 8029144:	887b      	ldrh	r3, [r7, #2]
 8029146:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 802914a:	4413      	add	r3, r2
 802914c:	883a      	ldrh	r2, [r7, #0]
 802914e:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 8029152:	442a      	add	r2, r5
 8029154:	81e3      	strh	r3, [r4, #14]
 8029156:	8220      	strh	r0, [r4, #16]
 8029158:	4668      	mov	r0, sp
 802915a:	81a2      	strh	r2, [r4, #12]
 802915c:	8261      	strh	r1, [r4, #18]
 802915e:	4639      	mov	r1, r7
 8029160:	f7f2 fcae 	bl	801bac0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8029164:	f104 000c 	add.w	r0, r4, #12
 8029168:	f7f2 fc82 	bl	801ba70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802916c:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8029170:	f8bd 2000 	ldrh.w	r2, [sp]
 8029174:	4640      	mov	r0, r8
 8029176:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 802917a:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 802917e:	f7f0 ff53 	bl	801a028 <_ZN8touchgfx7Outline5resetEv>
 8029182:	f9bd 3000 	ldrsh.w	r3, [sp]
 8029186:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 802918a:	4620      	mov	r0, r4
 802918c:	015b      	lsls	r3, r3, #5
 802918e:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8029190:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8029194:	015b      	lsls	r3, r3, #5
 8029196:	6523      	str	r3, [r4, #80]	@ 0x50
 8029198:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 802919c:	015b      	lsls	r3, r3, #5
 802919e:	6563      	str	r3, [r4, #84]	@ 0x54
 80291a0:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80291a4:	015b      	lsls	r3, r3, #5
 80291a6:	65a3      	str	r3, [r4, #88]	@ 0x58
 80291a8:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 80291ac:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 80291b0:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 80291b4:	b002      	add	sp, #8
 80291b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80291ba:	bf00      	nop
 80291bc:	0802d218 	.word	0x0802d218

080291c0 <_ZN8touchgfx6Canvas5closeEv>:
 80291c0:	b538      	push	{r3, r4, r5, lr}
 80291c2:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 80291c6:	4604      	mov	r4, r0
 80291c8:	b193      	cbz	r3, 80291f0 <_ZN8touchgfx6Canvas5closeEv+0x30>
 80291ca:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 80291ce:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 80291d2:	4213      	tst	r3, r2
 80291d4:	d10c      	bne.n	80291f0 <_ZN8touchgfx6Canvas5closeEv+0x30>
 80291d6:	f100 0514 	add.w	r5, r0, #20
 80291da:	b123      	cbz	r3, 80291e6 <_ZN8touchgfx6Canvas5closeEv+0x26>
 80291dc:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 80291e0:	4628      	mov	r0, r5
 80291e2:	f7ff fea3 	bl	8028f2c <_ZN8touchgfx10Rasterizer6lineToEii>
 80291e6:	4628      	mov	r0, r5
 80291e8:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 80291ec:	f7ff fe9e 	bl	8028f2c <_ZN8touchgfx10Rasterizer6lineToEii>
 80291f0:	2300      	movs	r3, #0
 80291f2:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 80291f6:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 80291fa:	4298      	cmp	r0, r3
 80291fc:	bf34      	ite	cc
 80291fe:	2000      	movcc	r0, #0
 8029200:	2001      	movcs	r0, #1
 8029202:	bd38      	pop	{r3, r4, r5, pc}

08029204 <_ZN8touchgfx6Canvas6renderEh>:
 8029204:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8029208:	7a85      	ldrb	r5, [r0, #10]
 802920a:	4604      	mov	r4, r0
 802920c:	4369      	muls	r1, r5
 802920e:	1c4d      	adds	r5, r1, #1
 8029210:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8029214:	122d      	asrs	r5, r5, #8
 8029216:	f000 8098 	beq.w	802934a <_ZN8touchgfx6Canvas6renderEh+0x146>
 802921a:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 802921e:	2b00      	cmp	r3, #0
 8029220:	f000 8093 	beq.w	802934a <_ZN8touchgfx6Canvas6renderEh+0x146>
 8029224:	f7ff ffcc 	bl	80291c0 <_ZN8touchgfx6Canvas5closeEv>
 8029228:	4607      	mov	r7, r0
 802922a:	2800      	cmp	r0, #0
 802922c:	d045      	beq.n	80292ba <_ZN8touchgfx6Canvas6renderEh+0xb6>
 802922e:	6860      	ldr	r0, [r4, #4]
 8029230:	4e47      	ldr	r6, [pc, #284]	@ (8029350 <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 8029232:	6803      	ldr	r3, [r0, #0]
 8029234:	6837      	ldr	r7, [r6, #0]
 8029236:	689b      	ldr	r3, [r3, #8]
 8029238:	4798      	blx	r3
 802923a:	4601      	mov	r1, r0
 802923c:	4638      	mov	r0, r7
 802923e:	f7ef f939 	bl	80184b4 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 8029242:	4607      	mov	r7, r0
 8029244:	f7e9 f97e 	bl	8012544 <_ZN8touchgfx3HAL3lcdEv>
 8029248:	6803      	ldr	r3, [r0, #0]
 802924a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802924c:	4798      	blx	r3
 802924e:	4680      	mov	r8, r0
 8029250:	f7e9 f978 	bl	8012544 <_ZN8touchgfx3HAL3lcdEv>
 8029254:	6803      	ldr	r3, [r0, #0]
 8029256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8029258:	4798      	blx	r3
 802925a:	280b      	cmp	r0, #11
 802925c:	d85a      	bhi.n	8029314 <_ZN8touchgfx6Canvas6renderEh+0x110>
 802925e:	e8df f000 	tbb	[pc, r0]
 8029262:	5b50      	.short	0x5b50
 8029264:	3059066b 	.word	0x3059066b
 8029268:	64646440 	.word	0x64646440
 802926c:	6464      	.short	0x6464
 802926e:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8029272:	2208      	movs	r2, #8
 8029274:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8029278:	fb91 f2f2 	sdiv	r2, r1, r2
 802927c:	fb08 2303 	mla	r3, r8, r3, r2
 8029280:	441f      	add	r7, r3
 8029282:	424b      	negs	r3, r1
 8029284:	f001 0107 	and.w	r1, r1, #7
 8029288:	f003 0307 	and.w	r3, r3, #7
 802928c:	bf58      	it	pl
 802928e:	4259      	negpl	r1, r3
 8029290:	b2c9      	uxtb	r1, r1
 8029292:	b2ed      	uxtb	r5, r5
 8029294:	463a      	mov	r2, r7
 8029296:	fa0f f388 	sxth.w	r3, r8
 802929a:	f104 0014 	add.w	r0, r4, #20
 802929e:	e9cd 1500 	strd	r1, r5, [sp]
 80292a2:	6861      	ldr	r1, [r4, #4]
 80292a4:	f7ff fe4e 	bl	8028f44 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 80292a8:	4607      	mov	r7, r0
 80292aa:	6860      	ldr	r0, [r4, #4]
 80292ac:	6803      	ldr	r3, [r0, #0]
 80292ae:	691b      	ldr	r3, [r3, #16]
 80292b0:	4798      	blx	r3
 80292b2:	6830      	ldr	r0, [r6, #0]
 80292b4:	6803      	ldr	r3, [r0, #0]
 80292b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80292b8:	4798      	blx	r3
 80292ba:	4638      	mov	r0, r7
 80292bc:	b002      	add	sp, #8
 80292be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80292c2:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80292c6:	2204      	movs	r2, #4
 80292c8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80292cc:	fb91 f2f2 	sdiv	r2, r1, r2
 80292d0:	fb08 2303 	mla	r3, r8, r3, r2
 80292d4:	441f      	add	r7, r3
 80292d6:	424b      	negs	r3, r1
 80292d8:	f001 0103 	and.w	r1, r1, #3
 80292dc:	f003 0303 	and.w	r3, r3, #3
 80292e0:	e7d4      	b.n	802928c <_ZN8touchgfx6Canvas6renderEh+0x88>
 80292e2:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80292e6:	2202      	movs	r2, #2
 80292e8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80292ec:	2900      	cmp	r1, #0
 80292ee:	fb91 f2f2 	sdiv	r2, r1, r2
 80292f2:	f001 0101 	and.w	r1, r1, #1
 80292f6:	fb08 2303 	mla	r3, r8, r3, r2
 80292fa:	bfb8      	it	lt
 80292fc:	4249      	neglt	r1, r1
 80292fe:	441f      	add	r7, r3
 8029300:	e7c6      	b.n	8029290 <_ZN8touchgfx6Canvas6renderEh+0x8c>
 8029302:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8029306:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802930a:	fb08 f303 	mul.w	r3, r8, r3
 802930e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8029312:	441f      	add	r7, r3
 8029314:	2100      	movs	r1, #0
 8029316:	e7bc      	b.n	8029292 <_ZN8touchgfx6Canvas6renderEh+0x8e>
 8029318:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802931c:	2103      	movs	r1, #3
 802931e:	fb08 f203 	mul.w	r2, r8, r3
 8029322:	89a3      	ldrh	r3, [r4, #12]
 8029324:	fb13 2301 	smlabb	r3, r3, r1, r2
 8029328:	e7f3      	b.n	8029312 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802932a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802932e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029332:	fb08 2303 	mla	r3, r8, r3, r2
 8029336:	e7ec      	b.n	8029312 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8029338:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802933c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029340:	fb08 f303 	mul.w	r3, r8, r3
 8029344:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8029348:	e7e3      	b.n	8029312 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802934a:	2701      	movs	r7, #1
 802934c:	e7b5      	b.n	80292ba <_ZN8touchgfx6Canvas6renderEh+0xb6>
 802934e:	bf00      	nop
 8029350:	24013b58 	.word	0x24013b58

08029354 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8029354:	4b06      	ldr	r3, [pc, #24]	@ (8029370 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 8029356:	b510      	push	{r4, lr}
 8029358:	781b      	ldrb	r3, [r3, #0]
 802935a:	2b01      	cmp	r3, #1
 802935c:	d107      	bne.n	802936e <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 802935e:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8029362:	680b      	ldr	r3, [r1, #0]
 8029364:	6814      	ldr	r4, [r2, #0]
 8029366:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 802936a:	6013      	str	r3, [r2, #0]
 802936c:	600c      	str	r4, [r1, #0]
 802936e:	bd10      	pop	{r4, pc}
 8029370:	24013b50 	.word	0x24013b50

08029374 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8029374:	b513      	push	{r0, r1, r4, lr}
 8029376:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 802937a:	4604      	mov	r4, r0
 802937c:	e9cd 2100 	strd	r2, r1, [sp]
 8029380:	b9a3      	cbnz	r3, 80293ac <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 8029382:	466a      	mov	r2, sp
 8029384:	a901      	add	r1, sp, #4
 8029386:	4620      	mov	r0, r4
 8029388:	f7ff ffe4 	bl	8029354 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802938c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 802938e:	9901      	ldr	r1, [sp, #4]
 8029390:	9a00      	ldr	r2, [sp, #0]
 8029392:	1ac9      	subs	r1, r1, r3
 8029394:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8029396:	1ad2      	subs	r2, r2, r3
 8029398:	9101      	str	r1, [sp, #4]
 802939a:	2a00      	cmp	r2, #0
 802939c:	9200      	str	r2, [sp, #0]
 802939e:	da0b      	bge.n	80293b8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 80293a0:	2301      	movs	r3, #1
 80293a2:	2900      	cmp	r1, #0
 80293a4:	da0e      	bge.n	80293c4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 80293a6:	f043 0304 	orr.w	r3, r3, #4
 80293aa:	e013      	b.n	80293d4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 80293ac:	f7ff ff08 	bl	80291c0 <_ZN8touchgfx6Canvas5closeEv>
 80293b0:	2800      	cmp	r0, #0
 80293b2:	d1e6      	bne.n	8029382 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 80293b4:	b002      	add	sp, #8
 80293b6:	bd10      	pop	{r4, pc}
 80293b8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80293ba:	429a      	cmp	r2, r3
 80293bc:	bfac      	ite	ge
 80293be:	2302      	movge	r3, #2
 80293c0:	2300      	movlt	r3, #0
 80293c2:	e7ee      	b.n	80293a2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 80293c4:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80293c6:	4281      	cmp	r1, r0
 80293c8:	bfac      	ite	ge
 80293ca:	2008      	movge	r0, #8
 80293cc:	2000      	movlt	r0, #0
 80293ce:	4318      	orrs	r0, r3
 80293d0:	b2c3      	uxtb	r3, r0
 80293d2:	b158      	cbz	r0, 80293ec <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 80293d4:	2200      	movs	r2, #0
 80293d6:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 80293da:	9901      	ldr	r1, [sp, #4]
 80293dc:	9a00      	ldr	r2, [sp, #0]
 80293de:	66e1      	str	r1, [r4, #108]	@ 0x6c
 80293e0:	6722      	str	r2, [r4, #112]	@ 0x70
 80293e2:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 80293e6:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 80293ea:	e7e3      	b.n	80293b4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 80293ec:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 80293f0:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 80293f4:	4298      	cmp	r0, r3
 80293f6:	d803      	bhi.n	8029400 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 80293f8:	f104 0014 	add.w	r0, r4, #20
 80293fc:	f7f1 fb04 	bl	801aa08 <_ZN8touchgfx7Outline6moveToEii>
 8029400:	2301      	movs	r3, #1
 8029402:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8029406:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 802940a:	2300      	movs	r3, #0
 802940c:	e7e5      	b.n	80293da <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

0802940e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 802940e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8029410:	ab02      	add	r3, sp, #8
 8029412:	4604      	mov	r4, r0
 8029414:	9101      	str	r1, [sp, #4]
 8029416:	a901      	add	r1, sp, #4
 8029418:	f843 2d08 	str.w	r2, [r3, #-8]!
 802941c:	461a      	mov	r2, r3
 802941e:	f7ff ff99 	bl	8029354 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8029422:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8029424:	9901      	ldr	r1, [sp, #4]
 8029426:	9a00      	ldr	r2, [sp, #0]
 8029428:	1ac9      	subs	r1, r1, r3
 802942a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802942c:	1ad2      	subs	r2, r2, r3
 802942e:	9101      	str	r1, [sp, #4]
 8029430:	2a00      	cmp	r2, #0
 8029432:	9200      	str	r2, [sp, #0]
 8029434:	db1c      	blt.n	8029470 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 8029436:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8029438:	429a      	cmp	r2, r3
 802943a:	bfac      	ite	ge
 802943c:	2002      	movge	r0, #2
 802943e:	2000      	movlt	r0, #0
 8029440:	2900      	cmp	r1, #0
 8029442:	db17      	blt.n	8029474 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 8029444:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8029446:	4299      	cmp	r1, r3
 8029448:	bfac      	ite	ge
 802944a:	2308      	movge	r3, #8
 802944c:	2300      	movlt	r3, #0
 802944e:	4303      	orrs	r3, r0
 8029450:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 8029454:	b2dd      	uxtb	r5, r3
 8029456:	b978      	cbnz	r0, 8029478 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 8029458:	f104 0014 	add.w	r0, r4, #20
 802945c:	f7ff fd66 	bl	8028f2c <_ZN8touchgfx10Rasterizer6lineToEii>
 8029460:	9b01      	ldr	r3, [sp, #4]
 8029462:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 8029466:	6623      	str	r3, [r4, #96]	@ 0x60
 8029468:	9b00      	ldr	r3, [sp, #0]
 802946a:	6663      	str	r3, [r4, #100]	@ 0x64
 802946c:	b002      	add	sp, #8
 802946e:	bd70      	pop	{r4, r5, r6, pc}
 8029470:	2001      	movs	r0, #1
 8029472:	e7e5      	b.n	8029440 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 8029474:	2304      	movs	r3, #4
 8029476:	e7ea      	b.n	802944e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 8029478:	b113      	cbz	r3, 8029480 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 802947a:	ea10 0305 	ands.w	r3, r0, r5
 802947e:	d11c      	bne.n	80294ba <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 8029480:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8029484:	f104 0614 	add.w	r6, r4, #20
 8029488:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 802948c:	b98b      	cbnz	r3, 80294b2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 802948e:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 8029492:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8029496:	4298      	cmp	r0, r3
 8029498:	d802      	bhi.n	80294a0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 802949a:	4630      	mov	r0, r6
 802949c:	f7f1 fab4 	bl	801aa08 <_ZN8touchgfx7Outline6moveToEii>
 80294a0:	2301      	movs	r3, #1
 80294a2:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 80294a6:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 80294aa:	4630      	mov	r0, r6
 80294ac:	e9dd 2100 	ldrd	r2, r1, [sp]
 80294b0:	e7d4      	b.n	802945c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 80294b2:	4630      	mov	r0, r6
 80294b4:	f7ff fd3a 	bl	8028f2c <_ZN8touchgfx10Rasterizer6lineToEii>
 80294b8:	e7f7      	b.n	80294aa <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 80294ba:	461d      	mov	r5, r3
 80294bc:	e7d0      	b.n	8029460 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

080294c0 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>:
 80294c0:	b538      	push	{r3, r4, r5, lr}
 80294c2:	ed2d 8b10 	vpush	{d8-d15}
 80294c6:	eef6 ba00 	vmov.f32	s23, #96	@ 0x3f000000  0.5
 80294ca:	4605      	mov	r5, r0
 80294cc:	eeb0 ca40 	vmov.f32	s24, s0
 80294d0:	460c      	mov	r4, r1
 80294d2:	eef0 ca60 	vmov.f32	s25, s1
 80294d6:	ed9f ba57 	vldr	s22, [pc, #348]	@ 8029634 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x174>
 80294da:	eeb0 da41 	vmov.f32	s26, s2
 80294de:	eef0 da61 	vmov.f32	s27, s3
 80294e2:	eeb0 ea42 	vmov.f32	s28, s4
 80294e6:	eef0 ea62 	vmov.f32	s29, s5
 80294ea:	eef0 aa6b 	vmov.f32	s21, s23
 80294ee:	2c08      	cmp	r4, #8
 80294f0:	d86e      	bhi.n	80295d0 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x110>
 80294f2:	ee7e 6a4c 	vsub.f32	s13, s28, s24
 80294f6:	ee7d 7aee 	vsub.f32	s15, s27, s29
 80294fa:	ee3d 6a4e 	vsub.f32	s12, s26, s28
 80294fe:	ee3e 7aec 	vsub.f32	s14, s29, s25
 8029502:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 8029506:	ee3c fa0d 	vadd.f32	s30, s24, s26
 802950a:	ee7c faad 	vadd.f32	s31, s25, s27
 802950e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8029512:	ee7d 9a0e 	vadd.f32	s19, s26, s28
 8029516:	ee3d aaae 	vadd.f32	s20, s27, s29
 802951a:	ee2f fa2b 	vmul.f32	s30, s30, s23
 802951e:	ee6f faab 	vmul.f32	s31, s31, s23
 8029522:	ee69 9aab 	vmul.f32	s19, s19, s23
 8029526:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 802952a:	ee2a aa2b 	vmul.f32	s20, s20, s23
 802952e:	ee7f 8a29 	vadd.f32	s17, s30, s19
 8029532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029536:	ee3f 9a8a 	vadd.f32	s18, s31, s20
 802953a:	ee68 8aab 	vmul.f32	s17, s17, s23
 802953e:	bf48      	it	mi
 8029540:	eef1 7a67 	vnegmi.f32	s15, s15
 8029544:	ee29 9a2b 	vmul.f32	s18, s18, s23
 8029548:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 802954c:	eef4 7acb 	vcmpe.f32	s15, s22
 8029550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029554:	dd3f      	ble.n	80295d6 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x116>
 8029556:	ee27 7a07 	vmul.f32	s14, s14, s14
 802955a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 802955e:	eea6 7aa6 	vfma.f32	s14, s13, s13
 8029562:	ee27 7a06 	vmul.f32	s14, s14, s12
 8029566:	eef4 7ac7 	vcmpe.f32	s15, s14
 802956a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802956e:	d847      	bhi.n	8029600 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 8029570:	ee7e 0a4d 	vsub.f32	s1, s28, s26
 8029574:	ee3e 0aed 	vsub.f32	s0, s29, s27
 8029578:	f000 fa39 	bl	80299ee <atan2f>
 802957c:	eeb0 8a40 	vmov.f32	s16, s0
 8029580:	ee7d 0a4c 	vsub.f32	s1, s26, s24
 8029584:	ee3d 0aec 	vsub.f32	s0, s27, s25
 8029588:	f000 fa31 	bl	80299ee <atan2f>
 802958c:	ee38 0a40 	vsub.f32	s0, s16, s0
 8029590:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8029638 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x178>
 8029594:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8029598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802959c:	bf48      	it	mi
 802959e:	eeb1 0a40 	vnegmi.f32	s0, s0
 80295a2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80295a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80295aa:	bfa4      	itt	ge
 80295ac:	eddf 7a23 	vldrge	s15, [pc, #140]	@ 802963c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x17c>
 80295b0:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 80295b4:	eddf 7a22 	vldr	s15, [pc, #136]	@ 8029640 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x180>
 80295b8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80295bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80295c0:	d51e      	bpl.n	8029600 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 80295c2:	eef0 0a49 	vmov.f32	s1, s18
 80295c6:	4628      	mov	r0, r5
 80295c8:	eeb0 0a68 	vmov.f32	s0, s17
 80295cc:	f7ef fe00 	bl	80191d0 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 80295d0:	ecbd 8b10 	vpop	{d8-d15}
 80295d4:	bd38      	pop	{r3, r4, r5, pc}
 80295d6:	ee7c 7a0e 	vadd.f32	s15, s24, s28
 80295da:	eeb0 7a68 	vmov.f32	s14, s17
 80295de:	eef0 6a49 	vmov.f32	s13, s18
 80295e2:	eea7 7aea 	vfms.f32	s14, s15, s21
 80295e6:	ee7c 7aae 	vadd.f32	s15, s25, s29
 80295ea:	eee7 6aea 	vfms.f32	s13, s15, s21
 80295ee:	ee66 7aa6 	vmul.f32	s15, s13, s13
 80295f2:	eee7 7a07 	vfma.f32	s15, s14, s14
 80295f6:	eef4 7ac6 	vcmpe.f32	s15, s12
 80295fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80295fe:	d9e0      	bls.n	80295c2 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x102>
 8029600:	3401      	adds	r4, #1
 8029602:	eef0 0a6c 	vmov.f32	s1, s25
 8029606:	eeb0 0a4c 	vmov.f32	s0, s24
 802960a:	4628      	mov	r0, r5
 802960c:	4621      	mov	r1, r4
 802960e:	eef0 2a49 	vmov.f32	s5, s18
 8029612:	eeb0 2a68 	vmov.f32	s4, s17
 8029616:	eef0 1a6f 	vmov.f32	s3, s31
 802961a:	eeb0 1a4f 	vmov.f32	s2, s30
 802961e:	f7ff ff4f 	bl	80294c0 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 8029622:	eef0 da4a 	vmov.f32	s27, s20
 8029626:	eeb0 da69 	vmov.f32	s26, s19
 802962a:	eef0 ca49 	vmov.f32	s25, s18
 802962e:	eeb0 ca68 	vmov.f32	s24, s17
 8029632:	e75c      	b.n	80294ee <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x2e>
 8029634:	2edbe6ff 	.word	0x2edbe6ff
 8029638:	40490fdb 	.word	0x40490fdb
 802963c:	40c90fdb 	.word	0x40c90fdb
 8029640:	3dcccccd 	.word	0x3dcccccd

08029644 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>:
 8029644:	b530      	push	{r4, r5, lr}
 8029646:	ed2d 8b10 	vpush	{d8-d15}
 802964a:	eef0 8a40 	vmov.f32	s17, s0
 802964e:	b085      	sub	sp, #20
 8029650:	eef0 9a60 	vmov.f32	s19, s1
 8029654:	4604      	mov	r4, r0
 8029656:	eef0 fa41 	vmov.f32	s31, s2
 802965a:	460d      	mov	r5, r1
 802965c:	eeb0 fa61 	vmov.f32	s30, s3
 8029660:	eef0 ba42 	vmov.f32	s23, s4
 8029664:	eeb0 ca62 	vmov.f32	s24, s5
 8029668:	eef0 aa43 	vmov.f32	s21, s6
 802966c:	eeb0 ba63 	vmov.f32	s22, s7
 8029670:	2d08      	cmp	r5, #8
 8029672:	f200 8113 	bhi.w	802989c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x258>
 8029676:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 802967a:	ee3b 6aaa 	vadd.f32	s12, s23, s21
 802967e:	ee7f 6aab 	vadd.f32	s13, s31, s23
 8029682:	ee38 daaf 	vadd.f32	s26, s17, s31
 8029686:	ee26 6a27 	vmul.f32	s12, s12, s15
 802968a:	ee7c ca0b 	vadd.f32	s25, s24, s22
 802968e:	ee2d da27 	vmul.f32	s26, s26, s15
 8029692:	ed8d 6a01 	vstr	s12, [sp, #4]
 8029696:	eea6 6aa7 	vfma.f32	s12, s13, s15
 802969a:	ee6c caa7 	vmul.f32	s25, s25, s15
 802969e:	eeb0 ea4d 	vmov.f32	s28, s26
 80296a2:	ee79 da8f 	vadd.f32	s27, s19, s30
 80296a6:	ee3f 7a0c 	vadd.f32	s14, s30, s24
 80296aa:	eea6 eaa7 	vfma.f32	s28, s13, s15
 80296ae:	ee66 6a27 	vmul.f32	s13, s12, s15
 80296b2:	ee6d daa7 	vmul.f32	s27, s27, s15
 80296b6:	edcd 6a03 	vstr	s13, [sp, #12]
 80296ba:	eef0 6a6c 	vmov.f32	s13, s25
 80296be:	eef0 ea6d 	vmov.f32	s29, s27
 80296c2:	ee2e ea27 	vmul.f32	s28, s28, s15
 80296c6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80296ca:	eee7 ea27 	vfma.f32	s29, s14, s15
 80296ce:	ee26 7aa7 	vmul.f32	s14, s13, s15
 80296d2:	ee6e eaa7 	vmul.f32	s29, s29, s15
 80296d6:	eef0 6a67 	vmov.f32	s13, s15
 80296da:	ed8d 7a02 	vstr	s14, [sp, #8]
 80296de:	ed9d 7a03 	vldr	s14, [sp, #12]
 80296e2:	ee3e 9a07 	vadd.f32	s18, s28, s14
 80296e6:	ed9d 7a02 	vldr	s14, [sp, #8]
 80296ea:	ee3e aa87 	vadd.f32	s20, s29, s14
 80296ee:	ee29 9a27 	vmul.f32	s18, s18, s15
 80296f2:	ee2a aa27 	vmul.f32	s20, s20, s15
 80296f6:	2d00      	cmp	r5, #0
 80296f8:	f000 810b 	beq.w	8029912 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 80296fc:	ee7a 5ae8 	vsub.f32	s11, s21, s17
 8029700:	eddf 4a95 	vldr	s9, [pc, #596]	@ 8029958 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 8029704:	ee3f 7a4b 	vsub.f32	s14, s30, s22
 8029708:	ee7b 7a69 	vsub.f32	s15, s22, s19
 802970c:	ee3f 6aea 	vsub.f32	s12, s31, s21
 8029710:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8029714:	ee3b 5aea 	vsub.f32	s10, s23, s21
 8029718:	eea6 7a27 	vfma.f32	s14, s12, s15
 802971c:	ee3c 6a4b 	vsub.f32	s12, s24, s22
 8029720:	ee25 6ac6 	vnmul.f32	s12, s11, s12
 8029724:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8029728:	eea5 6a27 	vfma.f32	s12, s10, s15
 802972c:	eeb5 5a00 	vmov.f32	s10, #80	@ 0x3e800000  0.250
 8029730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029734:	bf48      	it	mi
 8029736:	eeb1 7a47 	vnegmi.f32	s14, s14
 802973a:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 802973e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029742:	eeb4 7ae4 	vcmpe.f32	s14, s9
 8029746:	bf48      	it	mi
 8029748:	eeb1 6a46 	vnegmi.f32	s12, s12
 802974c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029750:	f340 80a8 	ble.w	80298a4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x260>
 8029754:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8029758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802975c:	dd5a      	ble.n	8029814 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1d0>
 802975e:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8029762:	ee37 7a06 	vadd.f32	s14, s14, s12
 8029766:	eee7 5aa7 	vfma.f32	s11, s15, s15
 802976a:	ee27 7a07 	vmul.f32	s14, s14, s14
 802976e:	ee65 7a85 	vmul.f32	s15, s11, s10
 8029772:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8029776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802977a:	f200 80ca 	bhi.w	8029912 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802977e:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8029782:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8029786:	f000 f932 	bl	80299ee <atan2f>
 802978a:	eeb0 8a40 	vmov.f32	s16, s0
 802978e:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 8029792:	ee3f 0a69 	vsub.f32	s0, s30, s19
 8029796:	f000 f92a 	bl	80299ee <atan2f>
 802979a:	ee38 fa40 	vsub.f32	s30, s16, s0
 802979e:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 80297a2:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 80297a6:	eeb5 fac0 	vcmpe.f32	s30, #0.0
 80297aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80297ae:	bf48      	it	mi
 80297b0:	eeb1 fa4f 	vnegmi.f32	s30, s30
 80297b4:	f000 f91b 	bl	80299ee <atan2f>
 80297b8:	ee30 0a48 	vsub.f32	s0, s0, s16
 80297bc:	eddf 7a67 	vldr	s15, [pc, #412]	@ 802995c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 80297c0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80297c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80297c8:	eeb4 fae7 	vcmpe.f32	s30, s15
 80297cc:	eddf 7a63 	vldr	s15, [pc, #396]	@ 802995c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 80297d0:	bf48      	it	mi
 80297d2:	eeb1 0a40 	vnegmi.f32	s0, s0
 80297d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80297da:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80297de:	eddf 7a60 	vldr	s15, [pc, #384]	@ 8029960 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 80297e2:	bfa4      	itt	ge
 80297e4:	ed9f 7a5f 	vldrge	s14, [pc, #380]	@ 8029964 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 80297e8:	ee37 fa4f 	vsubge.f32	s30, s14, s30
 80297ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80297f0:	bfa4      	itt	ge
 80297f2:	ed9f 7a5c 	vldrge	s14, [pc, #368]	@ 8029964 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 80297f6:	ee37 0a40 	vsubge.f32	s0, s14, s0
 80297fa:	ee3f 0a00 	vadd.f32	s0, s30, s0
 80297fe:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8029802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029806:	f140 8084 	bpl.w	8029912 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802980a:	eef0 0a4a 	vmov.f32	s1, s20
 802980e:	eeb0 0a49 	vmov.f32	s0, s18
 8029812:	e040      	b.n	8029896 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x252>
 8029814:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8029818:	ee27 7a07 	vmul.f32	s14, s14, s14
 802981c:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8029820:	ee67 7a85 	vmul.f32	s15, s15, s10
 8029824:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8029828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802982c:	d871      	bhi.n	8029912 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802982e:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8029832:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8029836:	f000 f8da 	bl	80299ee <atan2f>
 802983a:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 802983e:	eeb0 8a40 	vmov.f32	s16, s0
 8029842:	ee3f 0a69 	vsub.f32	s0, s30, s19
 8029846:	f000 f8d2 	bl	80299ee <atan2f>
 802984a:	ee38 0a40 	vsub.f32	s0, s16, s0
 802984e:	eddf 7a43 	vldr	s15, [pc, #268]	@ 802995c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8029852:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8029856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802985a:	bf48      	it	mi
 802985c:	eeb1 0a40 	vnegmi.f32	s0, s0
 8029860:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8029864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029868:	bfa4      	itt	ge
 802986a:	eddf 7a3e 	vldrge	s15, [pc, #248]	@ 8029964 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 802986e:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 8029872:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8029960 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 8029876:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802987a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802987e:	d548      	bpl.n	8029912 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8029880:	eef0 0a4f 	vmov.f32	s1, s30
 8029884:	4620      	mov	r0, r4
 8029886:	eeb0 0a6f 	vmov.f32	s0, s31
 802988a:	f7ef fca1 	bl	80191d0 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 802988e:	eef0 0a4c 	vmov.f32	s1, s24
 8029892:	eeb0 0a6b 	vmov.f32	s0, s23
 8029896:	4620      	mov	r0, r4
 8029898:	f7ef fc9a 	bl	80191d0 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 802989c:	b005      	add	sp, #20
 802989e:	ecbd 8b10 	vpop	{d8-d15}
 80298a2:	bd30      	pop	{r4, r5, pc}
 80298a4:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8029958 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 80298a8:	eeb4 6ac7 	vcmpe.f32	s12, s14
 80298ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80298b0:	dd19      	ble.n	80298e6 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2a2>
 80298b2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80298b6:	ee26 7a06 	vmul.f32	s14, s12, s12
 80298ba:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80298be:	ee67 7a85 	vmul.f32	s15, s15, s10
 80298c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80298c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80298ca:	d822      	bhi.n	8029912 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 80298cc:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 80298d0:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 80298d4:	f000 f88b 	bl	80299ee <atan2f>
 80298d8:	ee7b 0aef 	vsub.f32	s1, s23, s31
 80298dc:	eeb0 8a40 	vmov.f32	s16, s0
 80298e0:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 80298e4:	e7af      	b.n	8029846 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x202>
 80298e6:	ee78 7aaa 	vadd.f32	s15, s17, s21
 80298ea:	eeb0 7a49 	vmov.f32	s14, s18
 80298ee:	eeb0 6a4a 	vmov.f32	s12, s20
 80298f2:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80298f6:	ee79 7a8b 	vadd.f32	s15, s19, s22
 80298fa:	eea7 6ae6 	vfms.f32	s12, s15, s13
 80298fe:	ee66 7a06 	vmul.f32	s15, s12, s12
 8029902:	eee7 7a07 	vfma.f32	s15, s14, s14
 8029906:	eef4 7ac5 	vcmpe.f32	s15, s10
 802990a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802990e:	f67f af7c 	bls.w	802980a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1c6>
 8029912:	3501      	adds	r5, #1
 8029914:	eef0 0a69 	vmov.f32	s1, s19
 8029918:	eeb0 0a68 	vmov.f32	s0, s17
 802991c:	4620      	mov	r0, r4
 802991e:	4629      	mov	r1, r5
 8029920:	eef0 3a4a 	vmov.f32	s7, s20
 8029924:	eeb0 3a49 	vmov.f32	s6, s18
 8029928:	eef0 2a6e 	vmov.f32	s5, s29
 802992c:	eeb0 2a4e 	vmov.f32	s4, s28
 8029930:	eef0 1a6d 	vmov.f32	s3, s27
 8029934:	eeb0 1a4d 	vmov.f32	s2, s26
 8029938:	f7ff fe84 	bl	8029644 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 802993c:	eeb0 ca6c 	vmov.f32	s24, s25
 8029940:	eddd ba01 	vldr	s23, [sp, #4]
 8029944:	eef0 9a4a 	vmov.f32	s19, s20
 8029948:	ed9d fa02 	vldr	s30, [sp, #8]
 802994c:	eef0 8a49 	vmov.f32	s17, s18
 8029950:	eddd fa03 	vldr	s31, [sp, #12]
 8029954:	e68c      	b.n	8029670 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2c>
 8029956:	bf00      	nop
 8029958:	2edbe6ff 	.word	0x2edbe6ff
 802995c:	40490fdb 	.word	0x40490fdb
 8029960:	3dcccccd 	.word	0x3dcccccd
 8029964:	40c90fdb 	.word	0x40c90fdb

08029968 <_ZN8touchgfx6CanvasD1Ev>:
 8029968:	4b04      	ldr	r3, [pc, #16]	@ (802997c <_ZN8touchgfx6CanvasD1Ev+0x14>)
 802996a:	b510      	push	{r4, lr}
 802996c:	4604      	mov	r4, r0
 802996e:	f840 3b14 	str.w	r3, [r0], #20
 8029972:	f7f0 fb51 	bl	801a018 <_ZN8touchgfx7OutlineD1Ev>
 8029976:	4620      	mov	r0, r4
 8029978:	bd10      	pop	{r4, pc}
 802997a:	bf00      	nop
 802997c:	0802d218 	.word	0x0802d218

08029980 <_ZN8touchgfx6CanvasD0Ev>:
 8029980:	b510      	push	{r4, lr}
 8029982:	4604      	mov	r4, r0
 8029984:	f7ff fff0 	bl	8029968 <_ZN8touchgfx6CanvasD1Ev>
 8029988:	2174      	movs	r1, #116	@ 0x74
 802998a:	4620      	mov	r0, r4
 802998c:	f000 f807 	bl	802999e <_ZdlPvj>
 8029990:	4620      	mov	r0, r4
 8029992:	bd10      	pop	{r4, pc}

08029994 <__aeabi_atexit>:
 8029994:	460b      	mov	r3, r1
 8029996:	4601      	mov	r1, r0
 8029998:	4618      	mov	r0, r3
 802999a:	f000 bc5b 	b.w	802a254 <__cxa_atexit>

0802999e <_ZdlPvj>:
 802999e:	f000 b812 	b.w	80299c6 <_ZdlPv>

080299a2 <__cxa_guard_acquire>:
 80299a2:	6802      	ldr	r2, [r0, #0]
 80299a4:	07d2      	lsls	r2, r2, #31
 80299a6:	4603      	mov	r3, r0
 80299a8:	d405      	bmi.n	80299b6 <__cxa_guard_acquire+0x14>
 80299aa:	7842      	ldrb	r2, [r0, #1]
 80299ac:	b102      	cbz	r2, 80299b0 <__cxa_guard_acquire+0xe>
 80299ae:	deff      	udf	#255	@ 0xff
 80299b0:	2001      	movs	r0, #1
 80299b2:	7058      	strb	r0, [r3, #1]
 80299b4:	4770      	bx	lr
 80299b6:	2000      	movs	r0, #0
 80299b8:	4770      	bx	lr

080299ba <__cxa_guard_release>:
 80299ba:	2301      	movs	r3, #1
 80299bc:	6003      	str	r3, [r0, #0]
 80299be:	4770      	bx	lr

080299c0 <__cxa_pure_virtual>:
 80299c0:	b508      	push	{r3, lr}
 80299c2:	f000 f80f 	bl	80299e4 <_ZSt9terminatev>

080299c6 <_ZdlPv>:
 80299c6:	f000 bb8f 	b.w	802a0e8 <free>

080299ca <_ZN10__cxxabiv111__terminateEPFvvE>:
 80299ca:	b508      	push	{r3, lr}
 80299cc:	4780      	blx	r0
 80299ce:	f000 fb58 	bl	802a082 <abort>
	...

080299d4 <_ZSt13get_terminatev>:
 80299d4:	4b02      	ldr	r3, [pc, #8]	@ (80299e0 <_ZSt13get_terminatev+0xc>)
 80299d6:	6818      	ldr	r0, [r3, #0]
 80299d8:	f3bf 8f5b 	dmb	ish
 80299dc:	4770      	bx	lr
 80299de:	bf00      	nop
 80299e0:	2400007c 	.word	0x2400007c

080299e4 <_ZSt9terminatev>:
 80299e4:	b508      	push	{r3, lr}
 80299e6:	f7ff fff5 	bl	80299d4 <_ZSt13get_terminatev>
 80299ea:	f7ff ffee 	bl	80299ca <_ZN10__cxxabiv111__terminateEPFvvE>

080299ee <atan2f>:
 80299ee:	f000 b9cf 	b.w	8029d90 <__ieee754_atan2f>
	...

080299f4 <sqrtf>:
 80299f4:	b508      	push	{r3, lr}
 80299f6:	ed2d 8b02 	vpush	{d8}
 80299fa:	eeb0 8a40 	vmov.f32	s16, s0
 80299fe:	f000 f9c4 	bl	8029d8a <__ieee754_sqrtf>
 8029a02:	eeb4 8a48 	vcmp.f32	s16, s16
 8029a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029a0a:	d60c      	bvs.n	8029a26 <sqrtf+0x32>
 8029a0c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8029a2c <sqrtf+0x38>
 8029a10:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8029a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029a18:	d505      	bpl.n	8029a26 <sqrtf+0x32>
 8029a1a:	f000 fecd 	bl	802a7b8 <__errno>
 8029a1e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8029a22:	2321      	movs	r3, #33	@ 0x21
 8029a24:	6003      	str	r3, [r0, #0]
 8029a26:	ecbd 8b02 	vpop	{d8}
 8029a2a:	bd08      	pop	{r3, pc}
 8029a2c:	00000000 	.word	0x00000000

08029a30 <sinf_poly>:
 8029a30:	07cb      	lsls	r3, r1, #31
 8029a32:	d412      	bmi.n	8029a5a <sinf_poly+0x2a>
 8029a34:	ee21 5b00 	vmul.f64	d5, d1, d0
 8029a38:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8029a3c:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8029a40:	eea6 7b01 	vfma.f64	d7, d6, d1
 8029a44:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8029a48:	ee21 1b05 	vmul.f64	d1, d1, d5
 8029a4c:	eea6 0b05 	vfma.f64	d0, d6, d5
 8029a50:	eea7 0b01 	vfma.f64	d0, d7, d1
 8029a54:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8029a58:	4770      	bx	lr
 8029a5a:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8029a5e:	ee21 5b01 	vmul.f64	d5, d1, d1
 8029a62:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8029a66:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8029a6a:	eea1 7b06 	vfma.f64	d7, d1, d6
 8029a6e:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8029a72:	eea1 0b06 	vfma.f64	d0, d1, d6
 8029a76:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8029a7a:	ee21 1b05 	vmul.f64	d1, d1, d5
 8029a7e:	eea5 0b06 	vfma.f64	d0, d5, d6
 8029a82:	e7e5      	b.n	8029a50 <sinf_poly+0x20>
 8029a84:	0000      	movs	r0, r0
	...

08029a88 <sinf>:
 8029a88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8029a8a:	ee10 4a10 	vmov	r4, s0
 8029a8e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8029a92:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8029a96:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8029a9a:	eef0 7a40 	vmov.f32	s15, s0
 8029a9e:	ea4f 5214 	mov.w	r2, r4, lsr #20
 8029aa2:	d218      	bcs.n	8029ad6 <sinf+0x4e>
 8029aa4:	ee26 1b06 	vmul.f64	d1, d6, d6
 8029aa8:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8029aac:	d20a      	bcs.n	8029ac4 <sinf+0x3c>
 8029aae:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 8029ab2:	d103      	bne.n	8029abc <sinf+0x34>
 8029ab4:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8029ab8:	ed8d 1a01 	vstr	s2, [sp, #4]
 8029abc:	eeb0 0a67 	vmov.f32	s0, s15
 8029ac0:	b003      	add	sp, #12
 8029ac2:	bd30      	pop	{r4, r5, pc}
 8029ac4:	483a      	ldr	r0, [pc, #232]	@ (8029bb0 <sinf+0x128>)
 8029ac6:	eeb0 0b46 	vmov.f64	d0, d6
 8029aca:	2100      	movs	r1, #0
 8029acc:	b003      	add	sp, #12
 8029ace:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8029ad2:	f7ff bfad 	b.w	8029a30 <sinf_poly>
 8029ad6:	f240 422e 	movw	r2, #1070	@ 0x42e
 8029ada:	4293      	cmp	r3, r2
 8029adc:	d824      	bhi.n	8029b28 <sinf+0xa0>
 8029ade:	4b34      	ldr	r3, [pc, #208]	@ (8029bb0 <sinf+0x128>)
 8029ae0:	ed93 7b08 	vldr	d7, [r3, #32]
 8029ae4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8029ae8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8029aec:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8029af0:	ee17 1a90 	vmov	r1, s15
 8029af4:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8029af8:	1609      	asrs	r1, r1, #24
 8029afa:	ee07 1a90 	vmov	s15, r1
 8029afe:	f001 0203 	and.w	r2, r1, #3
 8029b02:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8029b06:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8029b0a:	ed92 0b00 	vldr	d0, [r2]
 8029b0e:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8029b12:	f011 0f02 	tst.w	r1, #2
 8029b16:	eea5 6b47 	vfms.f64	d6, d5, d7
 8029b1a:	bf08      	it	eq
 8029b1c:	4618      	moveq	r0, r3
 8029b1e:	ee26 1b06 	vmul.f64	d1, d6, d6
 8029b22:	ee20 0b06 	vmul.f64	d0, d0, d6
 8029b26:	e7d1      	b.n	8029acc <sinf+0x44>
 8029b28:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8029b2c:	d237      	bcs.n	8029b9e <sinf+0x116>
 8029b2e:	4921      	ldr	r1, [pc, #132]	@ (8029bb4 <sinf+0x12c>)
 8029b30:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8029b34:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8029b38:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8029b3c:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8029b40:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8029b44:	6a10      	ldr	r0, [r2, #32]
 8029b46:	6912      	ldr	r2, [r2, #16]
 8029b48:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8029b4c:	40ab      	lsls	r3, r5
 8029b4e:	fba0 5003 	umull	r5, r0, r0, r3
 8029b52:	4359      	muls	r1, r3
 8029b54:	fbe3 0102 	umlal	r0, r1, r3, r2
 8029b58:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8029b5c:	0f9d      	lsrs	r5, r3, #30
 8029b5e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8029b62:	1ac9      	subs	r1, r1, r3
 8029b64:	f7d6 fdb2 	bl	80006cc <__aeabi_l2d>
 8029b68:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8029b6c:	4b10      	ldr	r3, [pc, #64]	@ (8029bb0 <sinf+0x128>)
 8029b6e:	f004 0203 	and.w	r2, r4, #3
 8029b72:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8029b76:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8029ba8 <sinf+0x120>
 8029b7a:	ed92 0b00 	vldr	d0, [r2]
 8029b7e:	ec41 0b17 	vmov	d7, r0, r1
 8029b82:	f014 0f02 	tst.w	r4, #2
 8029b86:	ee27 7b06 	vmul.f64	d7, d7, d6
 8029b8a:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8029b8e:	4629      	mov	r1, r5
 8029b90:	bf08      	it	eq
 8029b92:	4618      	moveq	r0, r3
 8029b94:	ee27 1b07 	vmul.f64	d1, d7, d7
 8029b98:	ee20 0b07 	vmul.f64	d0, d0, d7
 8029b9c:	e796      	b.n	8029acc <sinf+0x44>
 8029b9e:	b003      	add	sp, #12
 8029ba0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8029ba4:	f000 b8e2 	b.w	8029d6c <__math_invalidf>
 8029ba8:	54442d18 	.word	0x54442d18
 8029bac:	3c1921fb 	.word	0x3c1921fb
 8029bb0:	0802d288 	.word	0x0802d288
 8029bb4:	0802d224 	.word	0x0802d224

08029bb8 <sinf_poly>:
 8029bb8:	07cb      	lsls	r3, r1, #31
 8029bba:	d412      	bmi.n	8029be2 <sinf_poly+0x2a>
 8029bbc:	ee21 5b00 	vmul.f64	d5, d1, d0
 8029bc0:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8029bc4:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8029bc8:	eea6 7b01 	vfma.f64	d7, d6, d1
 8029bcc:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8029bd0:	ee21 1b05 	vmul.f64	d1, d1, d5
 8029bd4:	eea6 0b05 	vfma.f64	d0, d6, d5
 8029bd8:	eea7 0b01 	vfma.f64	d0, d7, d1
 8029bdc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8029be0:	4770      	bx	lr
 8029be2:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8029be6:	ee21 5b01 	vmul.f64	d5, d1, d1
 8029bea:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8029bee:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8029bf2:	eea1 7b06 	vfma.f64	d7, d1, d6
 8029bf6:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8029bfa:	eea1 0b06 	vfma.f64	d0, d1, d6
 8029bfe:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8029c02:	ee21 1b05 	vmul.f64	d1, d1, d5
 8029c06:	eea5 0b06 	vfma.f64	d0, d5, d6
 8029c0a:	e7e5      	b.n	8029bd8 <sinf_poly+0x20>
 8029c0c:	0000      	movs	r0, r0
	...

08029c10 <cosf>:
 8029c10:	b538      	push	{r3, r4, r5, lr}
 8029c12:	ee10 4a10 	vmov	r4, s0
 8029c16:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8029c1a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8029c1e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8029c22:	d21f      	bcs.n	8029c64 <cosf+0x54>
 8029c24:	ee27 7b07 	vmul.f64	d7, d7, d7
 8029c28:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8029c2c:	f0c0 8082 	bcc.w	8029d34 <cosf+0x124>
 8029c30:	ee27 4b07 	vmul.f64	d4, d7, d7
 8029c34:	4b44      	ldr	r3, [pc, #272]	@ (8029d48 <cosf+0x138>)
 8029c36:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 8029c3a:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8029c3e:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 8029c42:	eea7 6b05 	vfma.f64	d6, d7, d5
 8029c46:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8029c4a:	eea7 0b05 	vfma.f64	d0, d7, d5
 8029c4e:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 8029c52:	ee27 7b04 	vmul.f64	d7, d7, d4
 8029c56:	eea4 0b05 	vfma.f64	d0, d4, d5
 8029c5a:	eea6 0b07 	vfma.f64	d0, d6, d7
 8029c5e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8029c62:	bd38      	pop	{r3, r4, r5, pc}
 8029c64:	f240 422e 	movw	r2, #1070	@ 0x42e
 8029c68:	4293      	cmp	r3, r2
 8029c6a:	d829      	bhi.n	8029cc0 <cosf+0xb0>
 8029c6c:	4b36      	ldr	r3, [pc, #216]	@ (8029d48 <cosf+0x138>)
 8029c6e:	ed93 6b08 	vldr	d6, [r3, #32]
 8029c72:	ee27 6b06 	vmul.f64	d6, d7, d6
 8029c76:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 8029c7a:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8029c7e:	ee16 1a90 	vmov	r1, s13
 8029c82:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8029c86:	1609      	asrs	r1, r1, #24
 8029c88:	ee06 1a90 	vmov	s13, r1
 8029c8c:	f001 0203 	and.w	r2, r1, #3
 8029c90:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8029c94:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8029c98:	ed92 0b00 	vldr	d0, [r2]
 8029c9c:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8029ca0:	f011 0f02 	tst.w	r1, #2
 8029ca4:	f081 0101 	eor.w	r1, r1, #1
 8029ca8:	eea5 7b46 	vfms.f64	d7, d5, d6
 8029cac:	bf08      	it	eq
 8029cae:	4618      	moveq	r0, r3
 8029cb0:	ee27 1b07 	vmul.f64	d1, d7, d7
 8029cb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029cb8:	ee20 0b07 	vmul.f64	d0, d0, d7
 8029cbc:	f7ff bf7c 	b.w	8029bb8 <sinf_poly>
 8029cc0:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8029cc4:	d232      	bcs.n	8029d2c <cosf+0x11c>
 8029cc6:	4921      	ldr	r1, [pc, #132]	@ (8029d4c <cosf+0x13c>)
 8029cc8:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8029ccc:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8029cd0:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8029cd4:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8029cd8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8029cdc:	6a10      	ldr	r0, [r2, #32]
 8029cde:	6912      	ldr	r2, [r2, #16]
 8029ce0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8029ce4:	40ab      	lsls	r3, r5
 8029ce6:	fba0 5003 	umull	r5, r0, r0, r3
 8029cea:	4359      	muls	r1, r3
 8029cec:	fbe3 0102 	umlal	r0, r1, r3, r2
 8029cf0:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8029cf4:	0f9d      	lsrs	r5, r3, #30
 8029cf6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8029cfa:	1ac9      	subs	r1, r1, r3
 8029cfc:	f7d6 fce6 	bl	80006cc <__aeabi_l2d>
 8029d00:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8029d04:	4b10      	ldr	r3, [pc, #64]	@ (8029d48 <cosf+0x138>)
 8029d06:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8029d40 <cosf+0x130>
 8029d0a:	ec41 0b17 	vmov	d7, r0, r1
 8029d0e:	f004 0203 	and.w	r2, r4, #3
 8029d12:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8029d16:	ed92 0b00 	vldr	d0, [r2]
 8029d1a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8029d1e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8029d22:	f014 0f02 	tst.w	r4, #2
 8029d26:	f085 0101 	eor.w	r1, r5, #1
 8029d2a:	e7bf      	b.n	8029cac <cosf+0x9c>
 8029d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029d30:	f000 b81c 	b.w	8029d6c <__math_invalidf>
 8029d34:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8029d38:	e793      	b.n	8029c62 <cosf+0x52>
 8029d3a:	bf00      	nop
 8029d3c:	f3af 8000 	nop.w
 8029d40:	54442d18 	.word	0x54442d18
 8029d44:	3c1921fb 	.word	0x3c1921fb
 8029d48:	0802d288 	.word	0x0802d288
 8029d4c:	0802d224 	.word	0x0802d224

08029d50 <with_errnof>:
 8029d50:	b510      	push	{r4, lr}
 8029d52:	ed2d 8b02 	vpush	{d8}
 8029d56:	eeb0 8a40 	vmov.f32	s16, s0
 8029d5a:	4604      	mov	r4, r0
 8029d5c:	f000 fd2c 	bl	802a7b8 <__errno>
 8029d60:	eeb0 0a48 	vmov.f32	s0, s16
 8029d64:	ecbd 8b02 	vpop	{d8}
 8029d68:	6004      	str	r4, [r0, #0]
 8029d6a:	bd10      	pop	{r4, pc}

08029d6c <__math_invalidf>:
 8029d6c:	eef0 7a40 	vmov.f32	s15, s0
 8029d70:	ee30 7a40 	vsub.f32	s14, s0, s0
 8029d74:	eef4 7a67 	vcmp.f32	s15, s15
 8029d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029d7c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8029d80:	d602      	bvs.n	8029d88 <__math_invalidf+0x1c>
 8029d82:	2021      	movs	r0, #33	@ 0x21
 8029d84:	f7ff bfe4 	b.w	8029d50 <with_errnof>
 8029d88:	4770      	bx	lr

08029d8a <__ieee754_sqrtf>:
 8029d8a:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8029d8e:	4770      	bx	lr

08029d90 <__ieee754_atan2f>:
 8029d90:	ee10 2a90 	vmov	r2, s1
 8029d94:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8029d98:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8029d9c:	b510      	push	{r4, lr}
 8029d9e:	eef0 7a40 	vmov.f32	s15, s0
 8029da2:	d806      	bhi.n	8029db2 <__ieee754_atan2f+0x22>
 8029da4:	ee10 0a10 	vmov	r0, s0
 8029da8:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8029dac:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8029db0:	d904      	bls.n	8029dbc <__ieee754_atan2f+0x2c>
 8029db2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8029db6:	eeb0 0a67 	vmov.f32	s0, s15
 8029dba:	bd10      	pop	{r4, pc}
 8029dbc:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8029dc0:	d103      	bne.n	8029dca <__ieee754_atan2f+0x3a>
 8029dc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029dc6:	f000 b881 	b.w	8029ecc <atanf>
 8029dca:	1794      	asrs	r4, r2, #30
 8029dcc:	f004 0402 	and.w	r4, r4, #2
 8029dd0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8029dd4:	b93b      	cbnz	r3, 8029de6 <__ieee754_atan2f+0x56>
 8029dd6:	2c02      	cmp	r4, #2
 8029dd8:	d05c      	beq.n	8029e94 <__ieee754_atan2f+0x104>
 8029dda:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8029ea8 <__ieee754_atan2f+0x118>
 8029dde:	2c03      	cmp	r4, #3
 8029de0:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8029de4:	e7e7      	b.n	8029db6 <__ieee754_atan2f+0x26>
 8029de6:	b939      	cbnz	r1, 8029df8 <__ieee754_atan2f+0x68>
 8029de8:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8029eac <__ieee754_atan2f+0x11c>
 8029dec:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8029eb0 <__ieee754_atan2f+0x120>
 8029df0:	2800      	cmp	r0, #0
 8029df2:	fe67 7a87 	vselge.f32	s15, s15, s14
 8029df6:	e7de      	b.n	8029db6 <__ieee754_atan2f+0x26>
 8029df8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8029dfc:	d110      	bne.n	8029e20 <__ieee754_atan2f+0x90>
 8029dfe:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8029e02:	f104 34ff 	add.w	r4, r4, #4294967295
 8029e06:	d107      	bne.n	8029e18 <__ieee754_atan2f+0x88>
 8029e08:	2c02      	cmp	r4, #2
 8029e0a:	d846      	bhi.n	8029e9a <__ieee754_atan2f+0x10a>
 8029e0c:	4b29      	ldr	r3, [pc, #164]	@ (8029eb4 <__ieee754_atan2f+0x124>)
 8029e0e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8029e12:	edd3 7a00 	vldr	s15, [r3]
 8029e16:	e7ce      	b.n	8029db6 <__ieee754_atan2f+0x26>
 8029e18:	2c02      	cmp	r4, #2
 8029e1a:	d841      	bhi.n	8029ea0 <__ieee754_atan2f+0x110>
 8029e1c:	4b26      	ldr	r3, [pc, #152]	@ (8029eb8 <__ieee754_atan2f+0x128>)
 8029e1e:	e7f6      	b.n	8029e0e <__ieee754_atan2f+0x7e>
 8029e20:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8029e24:	d0e0      	beq.n	8029de8 <__ieee754_atan2f+0x58>
 8029e26:	1a5b      	subs	r3, r3, r1
 8029e28:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8029e2c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8029e30:	da1a      	bge.n	8029e68 <__ieee754_atan2f+0xd8>
 8029e32:	2a00      	cmp	r2, #0
 8029e34:	da01      	bge.n	8029e3a <__ieee754_atan2f+0xaa>
 8029e36:	313c      	adds	r1, #60	@ 0x3c
 8029e38:	db19      	blt.n	8029e6e <__ieee754_atan2f+0xde>
 8029e3a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8029e3e:	f000 f919 	bl	802a074 <fabsf>
 8029e42:	f000 f843 	bl	8029ecc <atanf>
 8029e46:	eef0 7a40 	vmov.f32	s15, s0
 8029e4a:	2c01      	cmp	r4, #1
 8029e4c:	d012      	beq.n	8029e74 <__ieee754_atan2f+0xe4>
 8029e4e:	2c02      	cmp	r4, #2
 8029e50:	d017      	beq.n	8029e82 <__ieee754_atan2f+0xf2>
 8029e52:	2c00      	cmp	r4, #0
 8029e54:	d0af      	beq.n	8029db6 <__ieee754_atan2f+0x26>
 8029e56:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8029ebc <__ieee754_atan2f+0x12c>
 8029e5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8029e5e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8029ec0 <__ieee754_atan2f+0x130>
 8029e62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8029e66:	e7a6      	b.n	8029db6 <__ieee754_atan2f+0x26>
 8029e68:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8029eac <__ieee754_atan2f+0x11c>
 8029e6c:	e7ed      	b.n	8029e4a <__ieee754_atan2f+0xba>
 8029e6e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8029ec4 <__ieee754_atan2f+0x134>
 8029e72:	e7ea      	b.n	8029e4a <__ieee754_atan2f+0xba>
 8029e74:	ee17 3a90 	vmov	r3, s15
 8029e78:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8029e7c:	ee07 3a90 	vmov	s15, r3
 8029e80:	e799      	b.n	8029db6 <__ieee754_atan2f+0x26>
 8029e82:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8029ebc <__ieee754_atan2f+0x12c>
 8029e86:	ee77 7a87 	vadd.f32	s15, s15, s14
 8029e8a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8029ec0 <__ieee754_atan2f+0x130>
 8029e8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8029e92:	e790      	b.n	8029db6 <__ieee754_atan2f+0x26>
 8029e94:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8029ec0 <__ieee754_atan2f+0x130>
 8029e98:	e78d      	b.n	8029db6 <__ieee754_atan2f+0x26>
 8029e9a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8029ec8 <__ieee754_atan2f+0x138>
 8029e9e:	e78a      	b.n	8029db6 <__ieee754_atan2f+0x26>
 8029ea0:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8029ec4 <__ieee754_atan2f+0x134>
 8029ea4:	e787      	b.n	8029db6 <__ieee754_atan2f+0x26>
 8029ea6:	bf00      	nop
 8029ea8:	c0490fdb 	.word	0xc0490fdb
 8029eac:	3fc90fdb 	.word	0x3fc90fdb
 8029eb0:	bfc90fdb 	.word	0xbfc90fdb
 8029eb4:	0802d374 	.word	0x0802d374
 8029eb8:	0802d368 	.word	0x0802d368
 8029ebc:	33bbbd2e 	.word	0x33bbbd2e
 8029ec0:	40490fdb 	.word	0x40490fdb
 8029ec4:	00000000 	.word	0x00000000
 8029ec8:	3f490fdb 	.word	0x3f490fdb

08029ecc <atanf>:
 8029ecc:	b538      	push	{r3, r4, r5, lr}
 8029ece:	ee10 5a10 	vmov	r5, s0
 8029ed2:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8029ed6:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8029eda:	eef0 7a40 	vmov.f32	s15, s0
 8029ede:	d30f      	bcc.n	8029f00 <atanf+0x34>
 8029ee0:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8029ee4:	d904      	bls.n	8029ef0 <atanf+0x24>
 8029ee6:	ee70 7a00 	vadd.f32	s15, s0, s0
 8029eea:	eeb0 0a67 	vmov.f32	s0, s15
 8029eee:	bd38      	pop	{r3, r4, r5, pc}
 8029ef0:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 802a028 <atanf+0x15c>
 8029ef4:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 802a02c <atanf+0x160>
 8029ef8:	2d00      	cmp	r5, #0
 8029efa:	fe77 7a27 	vselgt.f32	s15, s14, s15
 8029efe:	e7f4      	b.n	8029eea <atanf+0x1e>
 8029f00:	4b4b      	ldr	r3, [pc, #300]	@ (802a030 <atanf+0x164>)
 8029f02:	429c      	cmp	r4, r3
 8029f04:	d810      	bhi.n	8029f28 <atanf+0x5c>
 8029f06:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8029f0a:	d20a      	bcs.n	8029f22 <atanf+0x56>
 8029f0c:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 802a034 <atanf+0x168>
 8029f10:	ee30 7a07 	vadd.f32	s14, s0, s14
 8029f14:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8029f18:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8029f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029f20:	dce3      	bgt.n	8029eea <atanf+0x1e>
 8029f22:	f04f 33ff 	mov.w	r3, #4294967295
 8029f26:	e013      	b.n	8029f50 <atanf+0x84>
 8029f28:	f000 f8a4 	bl	802a074 <fabsf>
 8029f2c:	4b42      	ldr	r3, [pc, #264]	@ (802a038 <atanf+0x16c>)
 8029f2e:	429c      	cmp	r4, r3
 8029f30:	d84f      	bhi.n	8029fd2 <atanf+0x106>
 8029f32:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8029f36:	429c      	cmp	r4, r3
 8029f38:	d841      	bhi.n	8029fbe <atanf+0xf2>
 8029f3a:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8029f3e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8029f42:	eea0 7a27 	vfma.f32	s14, s0, s15
 8029f46:	2300      	movs	r3, #0
 8029f48:	ee30 0a27 	vadd.f32	s0, s0, s15
 8029f4c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8029f50:	1c5a      	adds	r2, r3, #1
 8029f52:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8029f56:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 802a03c <atanf+0x170>
 8029f5a:	eddf 5a39 	vldr	s11, [pc, #228]	@ 802a040 <atanf+0x174>
 8029f5e:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 802a044 <atanf+0x178>
 8029f62:	ee66 6a06 	vmul.f32	s13, s12, s12
 8029f66:	eee6 5a87 	vfma.f32	s11, s13, s14
 8029f6a:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 802a048 <atanf+0x17c>
 8029f6e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8029f72:	eddf 5a36 	vldr	s11, [pc, #216]	@ 802a04c <atanf+0x180>
 8029f76:	eee7 5a26 	vfma.f32	s11, s14, s13
 8029f7a:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 802a050 <atanf+0x184>
 8029f7e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8029f82:	eddf 5a34 	vldr	s11, [pc, #208]	@ 802a054 <atanf+0x188>
 8029f86:	eee7 5a26 	vfma.f32	s11, s14, s13
 8029f8a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 802a058 <atanf+0x18c>
 8029f8e:	eea6 5a87 	vfma.f32	s10, s13, s14
 8029f92:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 802a05c <atanf+0x190>
 8029f96:	eea5 7a26 	vfma.f32	s14, s10, s13
 8029f9a:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 802a060 <atanf+0x194>
 8029f9e:	eea7 5a26 	vfma.f32	s10, s14, s13
 8029fa2:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 802a064 <atanf+0x198>
 8029fa6:	eea5 7a26 	vfma.f32	s14, s10, s13
 8029faa:	ee27 7a26 	vmul.f32	s14, s14, s13
 8029fae:	eea5 7a86 	vfma.f32	s14, s11, s12
 8029fb2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8029fb6:	d121      	bne.n	8029ffc <atanf+0x130>
 8029fb8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8029fbc:	e795      	b.n	8029eea <atanf+0x1e>
 8029fbe:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8029fc2:	ee30 7a67 	vsub.f32	s14, s0, s15
 8029fc6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8029fca:	2301      	movs	r3, #1
 8029fcc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8029fd0:	e7be      	b.n	8029f50 <atanf+0x84>
 8029fd2:	4b25      	ldr	r3, [pc, #148]	@ (802a068 <atanf+0x19c>)
 8029fd4:	429c      	cmp	r4, r3
 8029fd6:	d80b      	bhi.n	8029ff0 <atanf+0x124>
 8029fd8:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8029fdc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8029fe0:	eea0 7a27 	vfma.f32	s14, s0, s15
 8029fe4:	2302      	movs	r3, #2
 8029fe6:	ee70 6a67 	vsub.f32	s13, s0, s15
 8029fea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8029fee:	e7af      	b.n	8029f50 <atanf+0x84>
 8029ff0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8029ff4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8029ff8:	2303      	movs	r3, #3
 8029ffa:	e7a9      	b.n	8029f50 <atanf+0x84>
 8029ffc:	4a1b      	ldr	r2, [pc, #108]	@ (802a06c <atanf+0x1a0>)
 8029ffe:	491c      	ldr	r1, [pc, #112]	@ (802a070 <atanf+0x1a4>)
 802a000:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802a004:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 802a008:	edd3 6a00 	vldr	s13, [r3]
 802a00c:	ee37 7a66 	vsub.f32	s14, s14, s13
 802a010:	2d00      	cmp	r5, #0
 802a012:	ee37 7a67 	vsub.f32	s14, s14, s15
 802a016:	edd2 7a00 	vldr	s15, [r2]
 802a01a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802a01e:	bfb8      	it	lt
 802a020:	eef1 7a67 	vneglt.f32	s15, s15
 802a024:	e761      	b.n	8029eea <atanf+0x1e>
 802a026:	bf00      	nop
 802a028:	bfc90fdb 	.word	0xbfc90fdb
 802a02c:	3fc90fdb 	.word	0x3fc90fdb
 802a030:	3edfffff 	.word	0x3edfffff
 802a034:	7149f2ca 	.word	0x7149f2ca
 802a038:	3f97ffff 	.word	0x3f97ffff
 802a03c:	3c8569d7 	.word	0x3c8569d7
 802a040:	3d4bda59 	.word	0x3d4bda59
 802a044:	bd6ef16b 	.word	0xbd6ef16b
 802a048:	3d886b35 	.word	0x3d886b35
 802a04c:	3dba2e6e 	.word	0x3dba2e6e
 802a050:	3e124925 	.word	0x3e124925
 802a054:	3eaaaaab 	.word	0x3eaaaaab
 802a058:	bd15a221 	.word	0xbd15a221
 802a05c:	bd9d8795 	.word	0xbd9d8795
 802a060:	bde38e38 	.word	0xbde38e38
 802a064:	be4ccccd 	.word	0xbe4ccccd
 802a068:	401bffff 	.word	0x401bffff
 802a06c:	0802d390 	.word	0x0802d390
 802a070:	0802d380 	.word	0x0802d380

0802a074 <fabsf>:
 802a074:	ee10 3a10 	vmov	r3, s0
 802a078:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802a07c:	ee00 3a10 	vmov	s0, r3
 802a080:	4770      	bx	lr

0802a082 <abort>:
 802a082:	b508      	push	{r3, lr}
 802a084:	2006      	movs	r0, #6
 802a086:	f000 facf 	bl	802a628 <raise>
 802a08a:	2001      	movs	r0, #1
 802a08c:	f7d8 fd22 	bl	8002ad4 <_exit>

0802a090 <__assert_func>:
 802a090:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802a092:	4614      	mov	r4, r2
 802a094:	461a      	mov	r2, r3
 802a096:	4b09      	ldr	r3, [pc, #36]	@ (802a0bc <__assert_func+0x2c>)
 802a098:	681b      	ldr	r3, [r3, #0]
 802a09a:	4605      	mov	r5, r0
 802a09c:	68d8      	ldr	r0, [r3, #12]
 802a09e:	b954      	cbnz	r4, 802a0b6 <__assert_func+0x26>
 802a0a0:	4b07      	ldr	r3, [pc, #28]	@ (802a0c0 <__assert_func+0x30>)
 802a0a2:	461c      	mov	r4, r3
 802a0a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802a0a8:	9100      	str	r1, [sp, #0]
 802a0aa:	462b      	mov	r3, r5
 802a0ac:	4905      	ldr	r1, [pc, #20]	@ (802a0c4 <__assert_func+0x34>)
 802a0ae:	f000 f983 	bl	802a3b8 <fiprintf>
 802a0b2:	f7ff ffe6 	bl	802a082 <abort>
 802a0b6:	4b04      	ldr	r3, [pc, #16]	@ (802a0c8 <__assert_func+0x38>)
 802a0b8:	e7f4      	b.n	802a0a4 <__assert_func+0x14>
 802a0ba:	bf00      	nop
 802a0bc:	2400008c 	.word	0x2400008c
 802a0c0:	0802d3db 	.word	0x0802d3db
 802a0c4:	0802d3ad 	.word	0x0802d3ad
 802a0c8:	0802d3a0 	.word	0x0802d3a0

0802a0cc <atexit>:
 802a0cc:	2300      	movs	r3, #0
 802a0ce:	4601      	mov	r1, r0
 802a0d0:	461a      	mov	r2, r3
 802a0d2:	4618      	mov	r0, r3
 802a0d4:	f000 bbac 	b.w	802a830 <__register_exitproc>

0802a0d8 <malloc>:
 802a0d8:	4b02      	ldr	r3, [pc, #8]	@ (802a0e4 <malloc+0xc>)
 802a0da:	4601      	mov	r1, r0
 802a0dc:	6818      	ldr	r0, [r3, #0]
 802a0de:	f000 b82d 	b.w	802a13c <_malloc_r>
 802a0e2:	bf00      	nop
 802a0e4:	2400008c 	.word	0x2400008c

0802a0e8 <free>:
 802a0e8:	4b02      	ldr	r3, [pc, #8]	@ (802a0f4 <free+0xc>)
 802a0ea:	4601      	mov	r1, r0
 802a0ec:	6818      	ldr	r0, [r3, #0]
 802a0ee:	f000 bbfb 	b.w	802a8e8 <_free_r>
 802a0f2:	bf00      	nop
 802a0f4:	2400008c 	.word	0x2400008c

0802a0f8 <sbrk_aligned>:
 802a0f8:	b570      	push	{r4, r5, r6, lr}
 802a0fa:	4e0f      	ldr	r6, [pc, #60]	@ (802a138 <sbrk_aligned+0x40>)
 802a0fc:	460c      	mov	r4, r1
 802a0fe:	6831      	ldr	r1, [r6, #0]
 802a100:	4605      	mov	r5, r0
 802a102:	b911      	cbnz	r1, 802a10a <sbrk_aligned+0x12>
 802a104:	f000 fb36 	bl	802a774 <_sbrk_r>
 802a108:	6030      	str	r0, [r6, #0]
 802a10a:	4621      	mov	r1, r4
 802a10c:	4628      	mov	r0, r5
 802a10e:	f000 fb31 	bl	802a774 <_sbrk_r>
 802a112:	1c43      	adds	r3, r0, #1
 802a114:	d103      	bne.n	802a11e <sbrk_aligned+0x26>
 802a116:	f04f 34ff 	mov.w	r4, #4294967295
 802a11a:	4620      	mov	r0, r4
 802a11c:	bd70      	pop	{r4, r5, r6, pc}
 802a11e:	1cc4      	adds	r4, r0, #3
 802a120:	f024 0403 	bic.w	r4, r4, #3
 802a124:	42a0      	cmp	r0, r4
 802a126:	d0f8      	beq.n	802a11a <sbrk_aligned+0x22>
 802a128:	1a21      	subs	r1, r4, r0
 802a12a:	4628      	mov	r0, r5
 802a12c:	f000 fb22 	bl	802a774 <_sbrk_r>
 802a130:	3001      	adds	r0, #1
 802a132:	d1f2      	bne.n	802a11a <sbrk_aligned+0x22>
 802a134:	e7ef      	b.n	802a116 <sbrk_aligned+0x1e>
 802a136:	bf00      	nop
 802a138:	24014594 	.word	0x24014594

0802a13c <_malloc_r>:
 802a13c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a140:	1ccd      	adds	r5, r1, #3
 802a142:	f025 0503 	bic.w	r5, r5, #3
 802a146:	3508      	adds	r5, #8
 802a148:	2d0c      	cmp	r5, #12
 802a14a:	bf38      	it	cc
 802a14c:	250c      	movcc	r5, #12
 802a14e:	2d00      	cmp	r5, #0
 802a150:	4606      	mov	r6, r0
 802a152:	db01      	blt.n	802a158 <_malloc_r+0x1c>
 802a154:	42a9      	cmp	r1, r5
 802a156:	d904      	bls.n	802a162 <_malloc_r+0x26>
 802a158:	230c      	movs	r3, #12
 802a15a:	6033      	str	r3, [r6, #0]
 802a15c:	2000      	movs	r0, #0
 802a15e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a162:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802a238 <_malloc_r+0xfc>
 802a166:	f000 f869 	bl	802a23c <__malloc_lock>
 802a16a:	f8d8 3000 	ldr.w	r3, [r8]
 802a16e:	461c      	mov	r4, r3
 802a170:	bb44      	cbnz	r4, 802a1c4 <_malloc_r+0x88>
 802a172:	4629      	mov	r1, r5
 802a174:	4630      	mov	r0, r6
 802a176:	f7ff ffbf 	bl	802a0f8 <sbrk_aligned>
 802a17a:	1c43      	adds	r3, r0, #1
 802a17c:	4604      	mov	r4, r0
 802a17e:	d158      	bne.n	802a232 <_malloc_r+0xf6>
 802a180:	f8d8 4000 	ldr.w	r4, [r8]
 802a184:	4627      	mov	r7, r4
 802a186:	2f00      	cmp	r7, #0
 802a188:	d143      	bne.n	802a212 <_malloc_r+0xd6>
 802a18a:	2c00      	cmp	r4, #0
 802a18c:	d04b      	beq.n	802a226 <_malloc_r+0xea>
 802a18e:	6823      	ldr	r3, [r4, #0]
 802a190:	4639      	mov	r1, r7
 802a192:	4630      	mov	r0, r6
 802a194:	eb04 0903 	add.w	r9, r4, r3
 802a198:	f000 faec 	bl	802a774 <_sbrk_r>
 802a19c:	4581      	cmp	r9, r0
 802a19e:	d142      	bne.n	802a226 <_malloc_r+0xea>
 802a1a0:	6821      	ldr	r1, [r4, #0]
 802a1a2:	1a6d      	subs	r5, r5, r1
 802a1a4:	4629      	mov	r1, r5
 802a1a6:	4630      	mov	r0, r6
 802a1a8:	f7ff ffa6 	bl	802a0f8 <sbrk_aligned>
 802a1ac:	3001      	adds	r0, #1
 802a1ae:	d03a      	beq.n	802a226 <_malloc_r+0xea>
 802a1b0:	6823      	ldr	r3, [r4, #0]
 802a1b2:	442b      	add	r3, r5
 802a1b4:	6023      	str	r3, [r4, #0]
 802a1b6:	f8d8 3000 	ldr.w	r3, [r8]
 802a1ba:	685a      	ldr	r2, [r3, #4]
 802a1bc:	bb62      	cbnz	r2, 802a218 <_malloc_r+0xdc>
 802a1be:	f8c8 7000 	str.w	r7, [r8]
 802a1c2:	e00f      	b.n	802a1e4 <_malloc_r+0xa8>
 802a1c4:	6822      	ldr	r2, [r4, #0]
 802a1c6:	1b52      	subs	r2, r2, r5
 802a1c8:	d420      	bmi.n	802a20c <_malloc_r+0xd0>
 802a1ca:	2a0b      	cmp	r2, #11
 802a1cc:	d917      	bls.n	802a1fe <_malloc_r+0xc2>
 802a1ce:	1961      	adds	r1, r4, r5
 802a1d0:	42a3      	cmp	r3, r4
 802a1d2:	6025      	str	r5, [r4, #0]
 802a1d4:	bf18      	it	ne
 802a1d6:	6059      	strne	r1, [r3, #4]
 802a1d8:	6863      	ldr	r3, [r4, #4]
 802a1da:	bf08      	it	eq
 802a1dc:	f8c8 1000 	streq.w	r1, [r8]
 802a1e0:	5162      	str	r2, [r4, r5]
 802a1e2:	604b      	str	r3, [r1, #4]
 802a1e4:	4630      	mov	r0, r6
 802a1e6:	f000 f82f 	bl	802a248 <__malloc_unlock>
 802a1ea:	f104 000b 	add.w	r0, r4, #11
 802a1ee:	1d23      	adds	r3, r4, #4
 802a1f0:	f020 0007 	bic.w	r0, r0, #7
 802a1f4:	1ac2      	subs	r2, r0, r3
 802a1f6:	bf1c      	itt	ne
 802a1f8:	1a1b      	subne	r3, r3, r0
 802a1fa:	50a3      	strne	r3, [r4, r2]
 802a1fc:	e7af      	b.n	802a15e <_malloc_r+0x22>
 802a1fe:	6862      	ldr	r2, [r4, #4]
 802a200:	42a3      	cmp	r3, r4
 802a202:	bf0c      	ite	eq
 802a204:	f8c8 2000 	streq.w	r2, [r8]
 802a208:	605a      	strne	r2, [r3, #4]
 802a20a:	e7eb      	b.n	802a1e4 <_malloc_r+0xa8>
 802a20c:	4623      	mov	r3, r4
 802a20e:	6864      	ldr	r4, [r4, #4]
 802a210:	e7ae      	b.n	802a170 <_malloc_r+0x34>
 802a212:	463c      	mov	r4, r7
 802a214:	687f      	ldr	r7, [r7, #4]
 802a216:	e7b6      	b.n	802a186 <_malloc_r+0x4a>
 802a218:	461a      	mov	r2, r3
 802a21a:	685b      	ldr	r3, [r3, #4]
 802a21c:	42a3      	cmp	r3, r4
 802a21e:	d1fb      	bne.n	802a218 <_malloc_r+0xdc>
 802a220:	2300      	movs	r3, #0
 802a222:	6053      	str	r3, [r2, #4]
 802a224:	e7de      	b.n	802a1e4 <_malloc_r+0xa8>
 802a226:	230c      	movs	r3, #12
 802a228:	6033      	str	r3, [r6, #0]
 802a22a:	4630      	mov	r0, r6
 802a22c:	f000 f80c 	bl	802a248 <__malloc_unlock>
 802a230:	e794      	b.n	802a15c <_malloc_r+0x20>
 802a232:	6005      	str	r5, [r0, #0]
 802a234:	e7d6      	b.n	802a1e4 <_malloc_r+0xa8>
 802a236:	bf00      	nop
 802a238:	24014598 	.word	0x24014598

0802a23c <__malloc_lock>:
 802a23c:	4801      	ldr	r0, [pc, #4]	@ (802a244 <__malloc_lock+0x8>)
 802a23e:	f000 bae6 	b.w	802a80e <__retarget_lock_acquire_recursive>
 802a242:	bf00      	nop
 802a244:	240146dc 	.word	0x240146dc

0802a248 <__malloc_unlock>:
 802a248:	4801      	ldr	r0, [pc, #4]	@ (802a250 <__malloc_unlock+0x8>)
 802a24a:	f000 bae1 	b.w	802a810 <__retarget_lock_release_recursive>
 802a24e:	bf00      	nop
 802a250:	240146dc 	.word	0x240146dc

0802a254 <__cxa_atexit>:
 802a254:	b510      	push	{r4, lr}
 802a256:	4604      	mov	r4, r0
 802a258:	4804      	ldr	r0, [pc, #16]	@ (802a26c <__cxa_atexit+0x18>)
 802a25a:	4613      	mov	r3, r2
 802a25c:	b120      	cbz	r0, 802a268 <__cxa_atexit+0x14>
 802a25e:	460a      	mov	r2, r1
 802a260:	2002      	movs	r0, #2
 802a262:	4621      	mov	r1, r4
 802a264:	f000 fae4 	bl	802a830 <__register_exitproc>
 802a268:	bd10      	pop	{r4, pc}
 802a26a:	bf00      	nop
 802a26c:	0802a831 	.word	0x0802a831

0802a270 <std>:
 802a270:	2300      	movs	r3, #0
 802a272:	b510      	push	{r4, lr}
 802a274:	4604      	mov	r4, r0
 802a276:	e9c0 3300 	strd	r3, r3, [r0]
 802a27a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802a27e:	6083      	str	r3, [r0, #8]
 802a280:	8181      	strh	r1, [r0, #12]
 802a282:	6643      	str	r3, [r0, #100]	@ 0x64
 802a284:	81c2      	strh	r2, [r0, #14]
 802a286:	6183      	str	r3, [r0, #24]
 802a288:	4619      	mov	r1, r3
 802a28a:	2208      	movs	r2, #8
 802a28c:	305c      	adds	r0, #92	@ 0x5c
 802a28e:	f000 f99b 	bl	802a5c8 <memset>
 802a292:	4b0d      	ldr	r3, [pc, #52]	@ (802a2c8 <std+0x58>)
 802a294:	6263      	str	r3, [r4, #36]	@ 0x24
 802a296:	4b0d      	ldr	r3, [pc, #52]	@ (802a2cc <std+0x5c>)
 802a298:	62a3      	str	r3, [r4, #40]	@ 0x28
 802a29a:	4b0d      	ldr	r3, [pc, #52]	@ (802a2d0 <std+0x60>)
 802a29c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802a29e:	4b0d      	ldr	r3, [pc, #52]	@ (802a2d4 <std+0x64>)
 802a2a0:	6323      	str	r3, [r4, #48]	@ 0x30
 802a2a2:	4b0d      	ldr	r3, [pc, #52]	@ (802a2d8 <std+0x68>)
 802a2a4:	6224      	str	r4, [r4, #32]
 802a2a6:	429c      	cmp	r4, r3
 802a2a8:	d006      	beq.n	802a2b8 <std+0x48>
 802a2aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802a2ae:	4294      	cmp	r4, r2
 802a2b0:	d002      	beq.n	802a2b8 <std+0x48>
 802a2b2:	33d0      	adds	r3, #208	@ 0xd0
 802a2b4:	429c      	cmp	r4, r3
 802a2b6:	d105      	bne.n	802a2c4 <std+0x54>
 802a2b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802a2bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802a2c0:	f000 baa4 	b.w	802a80c <__retarget_lock_init_recursive>
 802a2c4:	bd10      	pop	{r4, pc}
 802a2c6:	bf00      	nop
 802a2c8:	0802a419 	.word	0x0802a419
 802a2cc:	0802a43b 	.word	0x0802a43b
 802a2d0:	0802a473 	.word	0x0802a473
 802a2d4:	0802a497 	.word	0x0802a497
 802a2d8:	2401459c 	.word	0x2401459c

0802a2dc <stdio_exit_handler>:
 802a2dc:	4a02      	ldr	r2, [pc, #8]	@ (802a2e8 <stdio_exit_handler+0xc>)
 802a2de:	4903      	ldr	r1, [pc, #12]	@ (802a2ec <stdio_exit_handler+0x10>)
 802a2e0:	4803      	ldr	r0, [pc, #12]	@ (802a2f0 <stdio_exit_handler+0x14>)
 802a2e2:	f000 b87b 	b.w	802a3dc <_fwalk_sglue>
 802a2e6:	bf00      	nop
 802a2e8:	24000080 	.word	0x24000080
 802a2ec:	0802b025 	.word	0x0802b025
 802a2f0:	24000090 	.word	0x24000090

0802a2f4 <cleanup_stdio>:
 802a2f4:	6841      	ldr	r1, [r0, #4]
 802a2f6:	4b0c      	ldr	r3, [pc, #48]	@ (802a328 <cleanup_stdio+0x34>)
 802a2f8:	4299      	cmp	r1, r3
 802a2fa:	b510      	push	{r4, lr}
 802a2fc:	4604      	mov	r4, r0
 802a2fe:	d001      	beq.n	802a304 <cleanup_stdio+0x10>
 802a300:	f000 fe90 	bl	802b024 <_fflush_r>
 802a304:	68a1      	ldr	r1, [r4, #8]
 802a306:	4b09      	ldr	r3, [pc, #36]	@ (802a32c <cleanup_stdio+0x38>)
 802a308:	4299      	cmp	r1, r3
 802a30a:	d002      	beq.n	802a312 <cleanup_stdio+0x1e>
 802a30c:	4620      	mov	r0, r4
 802a30e:	f000 fe89 	bl	802b024 <_fflush_r>
 802a312:	68e1      	ldr	r1, [r4, #12]
 802a314:	4b06      	ldr	r3, [pc, #24]	@ (802a330 <cleanup_stdio+0x3c>)
 802a316:	4299      	cmp	r1, r3
 802a318:	d004      	beq.n	802a324 <cleanup_stdio+0x30>
 802a31a:	4620      	mov	r0, r4
 802a31c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802a320:	f000 be80 	b.w	802b024 <_fflush_r>
 802a324:	bd10      	pop	{r4, pc}
 802a326:	bf00      	nop
 802a328:	2401459c 	.word	0x2401459c
 802a32c:	24014604 	.word	0x24014604
 802a330:	2401466c 	.word	0x2401466c

0802a334 <global_stdio_init.part.0>:
 802a334:	b510      	push	{r4, lr}
 802a336:	4b0b      	ldr	r3, [pc, #44]	@ (802a364 <global_stdio_init.part.0+0x30>)
 802a338:	4c0b      	ldr	r4, [pc, #44]	@ (802a368 <global_stdio_init.part.0+0x34>)
 802a33a:	4a0c      	ldr	r2, [pc, #48]	@ (802a36c <global_stdio_init.part.0+0x38>)
 802a33c:	601a      	str	r2, [r3, #0]
 802a33e:	4620      	mov	r0, r4
 802a340:	2200      	movs	r2, #0
 802a342:	2104      	movs	r1, #4
 802a344:	f7ff ff94 	bl	802a270 <std>
 802a348:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802a34c:	2201      	movs	r2, #1
 802a34e:	2109      	movs	r1, #9
 802a350:	f7ff ff8e 	bl	802a270 <std>
 802a354:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802a358:	2202      	movs	r2, #2
 802a35a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802a35e:	2112      	movs	r1, #18
 802a360:	f7ff bf86 	b.w	802a270 <std>
 802a364:	240146d4 	.word	0x240146d4
 802a368:	2401459c 	.word	0x2401459c
 802a36c:	0802a2dd 	.word	0x0802a2dd

0802a370 <__sfp_lock_acquire>:
 802a370:	4801      	ldr	r0, [pc, #4]	@ (802a378 <__sfp_lock_acquire+0x8>)
 802a372:	f000 ba4c 	b.w	802a80e <__retarget_lock_acquire_recursive>
 802a376:	bf00      	nop
 802a378:	240146de 	.word	0x240146de

0802a37c <__sfp_lock_release>:
 802a37c:	4801      	ldr	r0, [pc, #4]	@ (802a384 <__sfp_lock_release+0x8>)
 802a37e:	f000 ba47 	b.w	802a810 <__retarget_lock_release_recursive>
 802a382:	bf00      	nop
 802a384:	240146de 	.word	0x240146de

0802a388 <__sinit>:
 802a388:	b510      	push	{r4, lr}
 802a38a:	4604      	mov	r4, r0
 802a38c:	f7ff fff0 	bl	802a370 <__sfp_lock_acquire>
 802a390:	6a23      	ldr	r3, [r4, #32]
 802a392:	b11b      	cbz	r3, 802a39c <__sinit+0x14>
 802a394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802a398:	f7ff bff0 	b.w	802a37c <__sfp_lock_release>
 802a39c:	4b04      	ldr	r3, [pc, #16]	@ (802a3b0 <__sinit+0x28>)
 802a39e:	6223      	str	r3, [r4, #32]
 802a3a0:	4b04      	ldr	r3, [pc, #16]	@ (802a3b4 <__sinit+0x2c>)
 802a3a2:	681b      	ldr	r3, [r3, #0]
 802a3a4:	2b00      	cmp	r3, #0
 802a3a6:	d1f5      	bne.n	802a394 <__sinit+0xc>
 802a3a8:	f7ff ffc4 	bl	802a334 <global_stdio_init.part.0>
 802a3ac:	e7f2      	b.n	802a394 <__sinit+0xc>
 802a3ae:	bf00      	nop
 802a3b0:	0802a2f5 	.word	0x0802a2f5
 802a3b4:	240146d4 	.word	0x240146d4

0802a3b8 <fiprintf>:
 802a3b8:	b40e      	push	{r1, r2, r3}
 802a3ba:	b503      	push	{r0, r1, lr}
 802a3bc:	4601      	mov	r1, r0
 802a3be:	ab03      	add	r3, sp, #12
 802a3c0:	4805      	ldr	r0, [pc, #20]	@ (802a3d8 <fiprintf+0x20>)
 802a3c2:	f853 2b04 	ldr.w	r2, [r3], #4
 802a3c6:	6800      	ldr	r0, [r0, #0]
 802a3c8:	9301      	str	r3, [sp, #4]
 802a3ca:	f000 fb01 	bl	802a9d0 <_vfiprintf_r>
 802a3ce:	b002      	add	sp, #8
 802a3d0:	f85d eb04 	ldr.w	lr, [sp], #4
 802a3d4:	b003      	add	sp, #12
 802a3d6:	4770      	bx	lr
 802a3d8:	2400008c 	.word	0x2400008c

0802a3dc <_fwalk_sglue>:
 802a3dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a3e0:	4607      	mov	r7, r0
 802a3e2:	4688      	mov	r8, r1
 802a3e4:	4614      	mov	r4, r2
 802a3e6:	2600      	movs	r6, #0
 802a3e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802a3ec:	f1b9 0901 	subs.w	r9, r9, #1
 802a3f0:	d505      	bpl.n	802a3fe <_fwalk_sglue+0x22>
 802a3f2:	6824      	ldr	r4, [r4, #0]
 802a3f4:	2c00      	cmp	r4, #0
 802a3f6:	d1f7      	bne.n	802a3e8 <_fwalk_sglue+0xc>
 802a3f8:	4630      	mov	r0, r6
 802a3fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a3fe:	89ab      	ldrh	r3, [r5, #12]
 802a400:	2b01      	cmp	r3, #1
 802a402:	d907      	bls.n	802a414 <_fwalk_sglue+0x38>
 802a404:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802a408:	3301      	adds	r3, #1
 802a40a:	d003      	beq.n	802a414 <_fwalk_sglue+0x38>
 802a40c:	4629      	mov	r1, r5
 802a40e:	4638      	mov	r0, r7
 802a410:	47c0      	blx	r8
 802a412:	4306      	orrs	r6, r0
 802a414:	3568      	adds	r5, #104	@ 0x68
 802a416:	e7e9      	b.n	802a3ec <_fwalk_sglue+0x10>

0802a418 <__sread>:
 802a418:	b510      	push	{r4, lr}
 802a41a:	460c      	mov	r4, r1
 802a41c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a420:	f000 f982 	bl	802a728 <_read_r>
 802a424:	2800      	cmp	r0, #0
 802a426:	bfab      	itete	ge
 802a428:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802a42a:	89a3      	ldrhlt	r3, [r4, #12]
 802a42c:	181b      	addge	r3, r3, r0
 802a42e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802a432:	bfac      	ite	ge
 802a434:	6563      	strge	r3, [r4, #84]	@ 0x54
 802a436:	81a3      	strhlt	r3, [r4, #12]
 802a438:	bd10      	pop	{r4, pc}

0802a43a <__swrite>:
 802a43a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a43e:	461f      	mov	r7, r3
 802a440:	898b      	ldrh	r3, [r1, #12]
 802a442:	05db      	lsls	r3, r3, #23
 802a444:	4605      	mov	r5, r0
 802a446:	460c      	mov	r4, r1
 802a448:	4616      	mov	r6, r2
 802a44a:	d505      	bpl.n	802a458 <__swrite+0x1e>
 802a44c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a450:	2302      	movs	r3, #2
 802a452:	2200      	movs	r2, #0
 802a454:	f000 f956 	bl	802a704 <_lseek_r>
 802a458:	89a3      	ldrh	r3, [r4, #12]
 802a45a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802a45e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802a462:	81a3      	strh	r3, [r4, #12]
 802a464:	4632      	mov	r2, r6
 802a466:	463b      	mov	r3, r7
 802a468:	4628      	mov	r0, r5
 802a46a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802a46e:	f000 b991 	b.w	802a794 <_write_r>

0802a472 <__sseek>:
 802a472:	b510      	push	{r4, lr}
 802a474:	460c      	mov	r4, r1
 802a476:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a47a:	f000 f943 	bl	802a704 <_lseek_r>
 802a47e:	1c43      	adds	r3, r0, #1
 802a480:	89a3      	ldrh	r3, [r4, #12]
 802a482:	bf15      	itete	ne
 802a484:	6560      	strne	r0, [r4, #84]	@ 0x54
 802a486:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802a48a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802a48e:	81a3      	strheq	r3, [r4, #12]
 802a490:	bf18      	it	ne
 802a492:	81a3      	strhne	r3, [r4, #12]
 802a494:	bd10      	pop	{r4, pc}

0802a496 <__sclose>:
 802a496:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a49a:	f000 b8cd 	b.w	802a638 <_close_r>

0802a49e <__swbuf_r>:
 802a49e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a4a0:	460e      	mov	r6, r1
 802a4a2:	4614      	mov	r4, r2
 802a4a4:	4605      	mov	r5, r0
 802a4a6:	b118      	cbz	r0, 802a4b0 <__swbuf_r+0x12>
 802a4a8:	6a03      	ldr	r3, [r0, #32]
 802a4aa:	b90b      	cbnz	r3, 802a4b0 <__swbuf_r+0x12>
 802a4ac:	f7ff ff6c 	bl	802a388 <__sinit>
 802a4b0:	69a3      	ldr	r3, [r4, #24]
 802a4b2:	60a3      	str	r3, [r4, #8]
 802a4b4:	89a3      	ldrh	r3, [r4, #12]
 802a4b6:	071a      	lsls	r2, r3, #28
 802a4b8:	d501      	bpl.n	802a4be <__swbuf_r+0x20>
 802a4ba:	6923      	ldr	r3, [r4, #16]
 802a4bc:	b943      	cbnz	r3, 802a4d0 <__swbuf_r+0x32>
 802a4be:	4621      	mov	r1, r4
 802a4c0:	4628      	mov	r0, r5
 802a4c2:	f000 f82b 	bl	802a51c <__swsetup_r>
 802a4c6:	b118      	cbz	r0, 802a4d0 <__swbuf_r+0x32>
 802a4c8:	f04f 37ff 	mov.w	r7, #4294967295
 802a4cc:	4638      	mov	r0, r7
 802a4ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a4d0:	6823      	ldr	r3, [r4, #0]
 802a4d2:	6922      	ldr	r2, [r4, #16]
 802a4d4:	1a98      	subs	r0, r3, r2
 802a4d6:	6963      	ldr	r3, [r4, #20]
 802a4d8:	b2f6      	uxtb	r6, r6
 802a4da:	4283      	cmp	r3, r0
 802a4dc:	4637      	mov	r7, r6
 802a4de:	dc05      	bgt.n	802a4ec <__swbuf_r+0x4e>
 802a4e0:	4621      	mov	r1, r4
 802a4e2:	4628      	mov	r0, r5
 802a4e4:	f000 fd9e 	bl	802b024 <_fflush_r>
 802a4e8:	2800      	cmp	r0, #0
 802a4ea:	d1ed      	bne.n	802a4c8 <__swbuf_r+0x2a>
 802a4ec:	68a3      	ldr	r3, [r4, #8]
 802a4ee:	3b01      	subs	r3, #1
 802a4f0:	60a3      	str	r3, [r4, #8]
 802a4f2:	6823      	ldr	r3, [r4, #0]
 802a4f4:	1c5a      	adds	r2, r3, #1
 802a4f6:	6022      	str	r2, [r4, #0]
 802a4f8:	701e      	strb	r6, [r3, #0]
 802a4fa:	6962      	ldr	r2, [r4, #20]
 802a4fc:	1c43      	adds	r3, r0, #1
 802a4fe:	429a      	cmp	r2, r3
 802a500:	d004      	beq.n	802a50c <__swbuf_r+0x6e>
 802a502:	89a3      	ldrh	r3, [r4, #12]
 802a504:	07db      	lsls	r3, r3, #31
 802a506:	d5e1      	bpl.n	802a4cc <__swbuf_r+0x2e>
 802a508:	2e0a      	cmp	r6, #10
 802a50a:	d1df      	bne.n	802a4cc <__swbuf_r+0x2e>
 802a50c:	4621      	mov	r1, r4
 802a50e:	4628      	mov	r0, r5
 802a510:	f000 fd88 	bl	802b024 <_fflush_r>
 802a514:	2800      	cmp	r0, #0
 802a516:	d0d9      	beq.n	802a4cc <__swbuf_r+0x2e>
 802a518:	e7d6      	b.n	802a4c8 <__swbuf_r+0x2a>
	...

0802a51c <__swsetup_r>:
 802a51c:	b538      	push	{r3, r4, r5, lr}
 802a51e:	4b29      	ldr	r3, [pc, #164]	@ (802a5c4 <__swsetup_r+0xa8>)
 802a520:	4605      	mov	r5, r0
 802a522:	6818      	ldr	r0, [r3, #0]
 802a524:	460c      	mov	r4, r1
 802a526:	b118      	cbz	r0, 802a530 <__swsetup_r+0x14>
 802a528:	6a03      	ldr	r3, [r0, #32]
 802a52a:	b90b      	cbnz	r3, 802a530 <__swsetup_r+0x14>
 802a52c:	f7ff ff2c 	bl	802a388 <__sinit>
 802a530:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a534:	0719      	lsls	r1, r3, #28
 802a536:	d422      	bmi.n	802a57e <__swsetup_r+0x62>
 802a538:	06da      	lsls	r2, r3, #27
 802a53a:	d407      	bmi.n	802a54c <__swsetup_r+0x30>
 802a53c:	2209      	movs	r2, #9
 802a53e:	602a      	str	r2, [r5, #0]
 802a540:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802a544:	81a3      	strh	r3, [r4, #12]
 802a546:	f04f 30ff 	mov.w	r0, #4294967295
 802a54a:	e033      	b.n	802a5b4 <__swsetup_r+0x98>
 802a54c:	0758      	lsls	r0, r3, #29
 802a54e:	d512      	bpl.n	802a576 <__swsetup_r+0x5a>
 802a550:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802a552:	b141      	cbz	r1, 802a566 <__swsetup_r+0x4a>
 802a554:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802a558:	4299      	cmp	r1, r3
 802a55a:	d002      	beq.n	802a562 <__swsetup_r+0x46>
 802a55c:	4628      	mov	r0, r5
 802a55e:	f000 f9c3 	bl	802a8e8 <_free_r>
 802a562:	2300      	movs	r3, #0
 802a564:	6363      	str	r3, [r4, #52]	@ 0x34
 802a566:	89a3      	ldrh	r3, [r4, #12]
 802a568:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802a56c:	81a3      	strh	r3, [r4, #12]
 802a56e:	2300      	movs	r3, #0
 802a570:	6063      	str	r3, [r4, #4]
 802a572:	6923      	ldr	r3, [r4, #16]
 802a574:	6023      	str	r3, [r4, #0]
 802a576:	89a3      	ldrh	r3, [r4, #12]
 802a578:	f043 0308 	orr.w	r3, r3, #8
 802a57c:	81a3      	strh	r3, [r4, #12]
 802a57e:	6923      	ldr	r3, [r4, #16]
 802a580:	b94b      	cbnz	r3, 802a596 <__swsetup_r+0x7a>
 802a582:	89a3      	ldrh	r3, [r4, #12]
 802a584:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802a588:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802a58c:	d003      	beq.n	802a596 <__swsetup_r+0x7a>
 802a58e:	4621      	mov	r1, r4
 802a590:	4628      	mov	r0, r5
 802a592:	f000 fd95 	bl	802b0c0 <__smakebuf_r>
 802a596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a59a:	f013 0201 	ands.w	r2, r3, #1
 802a59e:	d00a      	beq.n	802a5b6 <__swsetup_r+0x9a>
 802a5a0:	2200      	movs	r2, #0
 802a5a2:	60a2      	str	r2, [r4, #8]
 802a5a4:	6962      	ldr	r2, [r4, #20]
 802a5a6:	4252      	negs	r2, r2
 802a5a8:	61a2      	str	r2, [r4, #24]
 802a5aa:	6922      	ldr	r2, [r4, #16]
 802a5ac:	b942      	cbnz	r2, 802a5c0 <__swsetup_r+0xa4>
 802a5ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802a5b2:	d1c5      	bne.n	802a540 <__swsetup_r+0x24>
 802a5b4:	bd38      	pop	{r3, r4, r5, pc}
 802a5b6:	0799      	lsls	r1, r3, #30
 802a5b8:	bf58      	it	pl
 802a5ba:	6962      	ldrpl	r2, [r4, #20]
 802a5bc:	60a2      	str	r2, [r4, #8]
 802a5be:	e7f4      	b.n	802a5aa <__swsetup_r+0x8e>
 802a5c0:	2000      	movs	r0, #0
 802a5c2:	e7f7      	b.n	802a5b4 <__swsetup_r+0x98>
 802a5c4:	2400008c 	.word	0x2400008c

0802a5c8 <memset>:
 802a5c8:	4402      	add	r2, r0
 802a5ca:	4603      	mov	r3, r0
 802a5cc:	4293      	cmp	r3, r2
 802a5ce:	d100      	bne.n	802a5d2 <memset+0xa>
 802a5d0:	4770      	bx	lr
 802a5d2:	f803 1b01 	strb.w	r1, [r3], #1
 802a5d6:	e7f9      	b.n	802a5cc <memset+0x4>

0802a5d8 <_raise_r>:
 802a5d8:	291f      	cmp	r1, #31
 802a5da:	b538      	push	{r3, r4, r5, lr}
 802a5dc:	4605      	mov	r5, r0
 802a5de:	460c      	mov	r4, r1
 802a5e0:	d904      	bls.n	802a5ec <_raise_r+0x14>
 802a5e2:	2316      	movs	r3, #22
 802a5e4:	6003      	str	r3, [r0, #0]
 802a5e6:	f04f 30ff 	mov.w	r0, #4294967295
 802a5ea:	bd38      	pop	{r3, r4, r5, pc}
 802a5ec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802a5ee:	b112      	cbz	r2, 802a5f6 <_raise_r+0x1e>
 802a5f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802a5f4:	b94b      	cbnz	r3, 802a60a <_raise_r+0x32>
 802a5f6:	4628      	mov	r0, r5
 802a5f8:	f000 f8ba 	bl	802a770 <_getpid_r>
 802a5fc:	4622      	mov	r2, r4
 802a5fe:	4601      	mov	r1, r0
 802a600:	4628      	mov	r0, r5
 802a602:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802a606:	f000 b8a1 	b.w	802a74c <_kill_r>
 802a60a:	2b01      	cmp	r3, #1
 802a60c:	d00a      	beq.n	802a624 <_raise_r+0x4c>
 802a60e:	1c59      	adds	r1, r3, #1
 802a610:	d103      	bne.n	802a61a <_raise_r+0x42>
 802a612:	2316      	movs	r3, #22
 802a614:	6003      	str	r3, [r0, #0]
 802a616:	2001      	movs	r0, #1
 802a618:	e7e7      	b.n	802a5ea <_raise_r+0x12>
 802a61a:	2100      	movs	r1, #0
 802a61c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802a620:	4620      	mov	r0, r4
 802a622:	4798      	blx	r3
 802a624:	2000      	movs	r0, #0
 802a626:	e7e0      	b.n	802a5ea <_raise_r+0x12>

0802a628 <raise>:
 802a628:	4b02      	ldr	r3, [pc, #8]	@ (802a634 <raise+0xc>)
 802a62a:	4601      	mov	r1, r0
 802a62c:	6818      	ldr	r0, [r3, #0]
 802a62e:	f7ff bfd3 	b.w	802a5d8 <_raise_r>
 802a632:	bf00      	nop
 802a634:	2400008c 	.word	0x2400008c

0802a638 <_close_r>:
 802a638:	b538      	push	{r3, r4, r5, lr}
 802a63a:	4d06      	ldr	r5, [pc, #24]	@ (802a654 <_close_r+0x1c>)
 802a63c:	2300      	movs	r3, #0
 802a63e:	4604      	mov	r4, r0
 802a640:	4608      	mov	r0, r1
 802a642:	602b      	str	r3, [r5, #0]
 802a644:	f7d8 fa8a 	bl	8002b5c <_close>
 802a648:	1c43      	adds	r3, r0, #1
 802a64a:	d102      	bne.n	802a652 <_close_r+0x1a>
 802a64c:	682b      	ldr	r3, [r5, #0]
 802a64e:	b103      	cbz	r3, 802a652 <_close_r+0x1a>
 802a650:	6023      	str	r3, [r4, #0]
 802a652:	bd38      	pop	{r3, r4, r5, pc}
 802a654:	240146d8 	.word	0x240146d8

0802a658 <_reclaim_reent>:
 802a658:	4b29      	ldr	r3, [pc, #164]	@ (802a700 <_reclaim_reent+0xa8>)
 802a65a:	681b      	ldr	r3, [r3, #0]
 802a65c:	4283      	cmp	r3, r0
 802a65e:	b570      	push	{r4, r5, r6, lr}
 802a660:	4604      	mov	r4, r0
 802a662:	d04b      	beq.n	802a6fc <_reclaim_reent+0xa4>
 802a664:	69c3      	ldr	r3, [r0, #28]
 802a666:	b1ab      	cbz	r3, 802a694 <_reclaim_reent+0x3c>
 802a668:	68db      	ldr	r3, [r3, #12]
 802a66a:	b16b      	cbz	r3, 802a688 <_reclaim_reent+0x30>
 802a66c:	2500      	movs	r5, #0
 802a66e:	69e3      	ldr	r3, [r4, #28]
 802a670:	68db      	ldr	r3, [r3, #12]
 802a672:	5959      	ldr	r1, [r3, r5]
 802a674:	2900      	cmp	r1, #0
 802a676:	d13b      	bne.n	802a6f0 <_reclaim_reent+0x98>
 802a678:	3504      	adds	r5, #4
 802a67a:	2d80      	cmp	r5, #128	@ 0x80
 802a67c:	d1f7      	bne.n	802a66e <_reclaim_reent+0x16>
 802a67e:	69e3      	ldr	r3, [r4, #28]
 802a680:	4620      	mov	r0, r4
 802a682:	68d9      	ldr	r1, [r3, #12]
 802a684:	f000 f930 	bl	802a8e8 <_free_r>
 802a688:	69e3      	ldr	r3, [r4, #28]
 802a68a:	6819      	ldr	r1, [r3, #0]
 802a68c:	b111      	cbz	r1, 802a694 <_reclaim_reent+0x3c>
 802a68e:	4620      	mov	r0, r4
 802a690:	f000 f92a 	bl	802a8e8 <_free_r>
 802a694:	6961      	ldr	r1, [r4, #20]
 802a696:	b111      	cbz	r1, 802a69e <_reclaim_reent+0x46>
 802a698:	4620      	mov	r0, r4
 802a69a:	f000 f925 	bl	802a8e8 <_free_r>
 802a69e:	69e1      	ldr	r1, [r4, #28]
 802a6a0:	b111      	cbz	r1, 802a6a8 <_reclaim_reent+0x50>
 802a6a2:	4620      	mov	r0, r4
 802a6a4:	f000 f920 	bl	802a8e8 <_free_r>
 802a6a8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802a6aa:	b111      	cbz	r1, 802a6b2 <_reclaim_reent+0x5a>
 802a6ac:	4620      	mov	r0, r4
 802a6ae:	f000 f91b 	bl	802a8e8 <_free_r>
 802a6b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802a6b4:	b111      	cbz	r1, 802a6bc <_reclaim_reent+0x64>
 802a6b6:	4620      	mov	r0, r4
 802a6b8:	f000 f916 	bl	802a8e8 <_free_r>
 802a6bc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 802a6be:	b111      	cbz	r1, 802a6c6 <_reclaim_reent+0x6e>
 802a6c0:	4620      	mov	r0, r4
 802a6c2:	f000 f911 	bl	802a8e8 <_free_r>
 802a6c6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 802a6c8:	b111      	cbz	r1, 802a6d0 <_reclaim_reent+0x78>
 802a6ca:	4620      	mov	r0, r4
 802a6cc:	f000 f90c 	bl	802a8e8 <_free_r>
 802a6d0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 802a6d2:	b111      	cbz	r1, 802a6da <_reclaim_reent+0x82>
 802a6d4:	4620      	mov	r0, r4
 802a6d6:	f000 f907 	bl	802a8e8 <_free_r>
 802a6da:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 802a6dc:	b111      	cbz	r1, 802a6e4 <_reclaim_reent+0x8c>
 802a6de:	4620      	mov	r0, r4
 802a6e0:	f000 f902 	bl	802a8e8 <_free_r>
 802a6e4:	6a23      	ldr	r3, [r4, #32]
 802a6e6:	b14b      	cbz	r3, 802a6fc <_reclaim_reent+0xa4>
 802a6e8:	4620      	mov	r0, r4
 802a6ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802a6ee:	4718      	bx	r3
 802a6f0:	680e      	ldr	r6, [r1, #0]
 802a6f2:	4620      	mov	r0, r4
 802a6f4:	f000 f8f8 	bl	802a8e8 <_free_r>
 802a6f8:	4631      	mov	r1, r6
 802a6fa:	e7bb      	b.n	802a674 <_reclaim_reent+0x1c>
 802a6fc:	bd70      	pop	{r4, r5, r6, pc}
 802a6fe:	bf00      	nop
 802a700:	2400008c 	.word	0x2400008c

0802a704 <_lseek_r>:
 802a704:	b538      	push	{r3, r4, r5, lr}
 802a706:	4d07      	ldr	r5, [pc, #28]	@ (802a724 <_lseek_r+0x20>)
 802a708:	4604      	mov	r4, r0
 802a70a:	4608      	mov	r0, r1
 802a70c:	4611      	mov	r1, r2
 802a70e:	2200      	movs	r2, #0
 802a710:	602a      	str	r2, [r5, #0]
 802a712:	461a      	mov	r2, r3
 802a714:	f7d8 fa49 	bl	8002baa <_lseek>
 802a718:	1c43      	adds	r3, r0, #1
 802a71a:	d102      	bne.n	802a722 <_lseek_r+0x1e>
 802a71c:	682b      	ldr	r3, [r5, #0]
 802a71e:	b103      	cbz	r3, 802a722 <_lseek_r+0x1e>
 802a720:	6023      	str	r3, [r4, #0]
 802a722:	bd38      	pop	{r3, r4, r5, pc}
 802a724:	240146d8 	.word	0x240146d8

0802a728 <_read_r>:
 802a728:	b538      	push	{r3, r4, r5, lr}
 802a72a:	4d07      	ldr	r5, [pc, #28]	@ (802a748 <_read_r+0x20>)
 802a72c:	4604      	mov	r4, r0
 802a72e:	4608      	mov	r0, r1
 802a730:	4611      	mov	r1, r2
 802a732:	2200      	movs	r2, #0
 802a734:	602a      	str	r2, [r5, #0]
 802a736:	461a      	mov	r2, r3
 802a738:	f7d8 f9d7 	bl	8002aea <_read>
 802a73c:	1c43      	adds	r3, r0, #1
 802a73e:	d102      	bne.n	802a746 <_read_r+0x1e>
 802a740:	682b      	ldr	r3, [r5, #0]
 802a742:	b103      	cbz	r3, 802a746 <_read_r+0x1e>
 802a744:	6023      	str	r3, [r4, #0]
 802a746:	bd38      	pop	{r3, r4, r5, pc}
 802a748:	240146d8 	.word	0x240146d8

0802a74c <_kill_r>:
 802a74c:	b538      	push	{r3, r4, r5, lr}
 802a74e:	4d07      	ldr	r5, [pc, #28]	@ (802a76c <_kill_r+0x20>)
 802a750:	2300      	movs	r3, #0
 802a752:	4604      	mov	r4, r0
 802a754:	4608      	mov	r0, r1
 802a756:	4611      	mov	r1, r2
 802a758:	602b      	str	r3, [r5, #0]
 802a75a:	f7d8 f9ab 	bl	8002ab4 <_kill>
 802a75e:	1c43      	adds	r3, r0, #1
 802a760:	d102      	bne.n	802a768 <_kill_r+0x1c>
 802a762:	682b      	ldr	r3, [r5, #0]
 802a764:	b103      	cbz	r3, 802a768 <_kill_r+0x1c>
 802a766:	6023      	str	r3, [r4, #0]
 802a768:	bd38      	pop	{r3, r4, r5, pc}
 802a76a:	bf00      	nop
 802a76c:	240146d8 	.word	0x240146d8

0802a770 <_getpid_r>:
 802a770:	f7d8 b998 	b.w	8002aa4 <_getpid>

0802a774 <_sbrk_r>:
 802a774:	b538      	push	{r3, r4, r5, lr}
 802a776:	4d06      	ldr	r5, [pc, #24]	@ (802a790 <_sbrk_r+0x1c>)
 802a778:	2300      	movs	r3, #0
 802a77a:	4604      	mov	r4, r0
 802a77c:	4608      	mov	r0, r1
 802a77e:	602b      	str	r3, [r5, #0]
 802a780:	f7d8 fa20 	bl	8002bc4 <_sbrk>
 802a784:	1c43      	adds	r3, r0, #1
 802a786:	d102      	bne.n	802a78e <_sbrk_r+0x1a>
 802a788:	682b      	ldr	r3, [r5, #0]
 802a78a:	b103      	cbz	r3, 802a78e <_sbrk_r+0x1a>
 802a78c:	6023      	str	r3, [r4, #0]
 802a78e:	bd38      	pop	{r3, r4, r5, pc}
 802a790:	240146d8 	.word	0x240146d8

0802a794 <_write_r>:
 802a794:	b538      	push	{r3, r4, r5, lr}
 802a796:	4d07      	ldr	r5, [pc, #28]	@ (802a7b4 <_write_r+0x20>)
 802a798:	4604      	mov	r4, r0
 802a79a:	4608      	mov	r0, r1
 802a79c:	4611      	mov	r1, r2
 802a79e:	2200      	movs	r2, #0
 802a7a0:	602a      	str	r2, [r5, #0]
 802a7a2:	461a      	mov	r2, r3
 802a7a4:	f7d8 f9be 	bl	8002b24 <_write>
 802a7a8:	1c43      	adds	r3, r0, #1
 802a7aa:	d102      	bne.n	802a7b2 <_write_r+0x1e>
 802a7ac:	682b      	ldr	r3, [r5, #0]
 802a7ae:	b103      	cbz	r3, 802a7b2 <_write_r+0x1e>
 802a7b0:	6023      	str	r3, [r4, #0]
 802a7b2:	bd38      	pop	{r3, r4, r5, pc}
 802a7b4:	240146d8 	.word	0x240146d8

0802a7b8 <__errno>:
 802a7b8:	4b01      	ldr	r3, [pc, #4]	@ (802a7c0 <__errno+0x8>)
 802a7ba:	6818      	ldr	r0, [r3, #0]
 802a7bc:	4770      	bx	lr
 802a7be:	bf00      	nop
 802a7c0:	2400008c 	.word	0x2400008c

0802a7c4 <__libc_init_array>:
 802a7c4:	b570      	push	{r4, r5, r6, lr}
 802a7c6:	4d0d      	ldr	r5, [pc, #52]	@ (802a7fc <__libc_init_array+0x38>)
 802a7c8:	4c0d      	ldr	r4, [pc, #52]	@ (802a800 <__libc_init_array+0x3c>)
 802a7ca:	1b64      	subs	r4, r4, r5
 802a7cc:	10a4      	asrs	r4, r4, #2
 802a7ce:	2600      	movs	r6, #0
 802a7d0:	42a6      	cmp	r6, r4
 802a7d2:	d109      	bne.n	802a7e8 <__libc_init_array+0x24>
 802a7d4:	4d0b      	ldr	r5, [pc, #44]	@ (802a804 <__libc_init_array+0x40>)
 802a7d6:	4c0c      	ldr	r4, [pc, #48]	@ (802a808 <__libc_init_array+0x44>)
 802a7d8:	f000 fcd0 	bl	802b17c <_init>
 802a7dc:	1b64      	subs	r4, r4, r5
 802a7de:	10a4      	asrs	r4, r4, #2
 802a7e0:	2600      	movs	r6, #0
 802a7e2:	42a6      	cmp	r6, r4
 802a7e4:	d105      	bne.n	802a7f2 <__libc_init_array+0x2e>
 802a7e6:	bd70      	pop	{r4, r5, r6, pc}
 802a7e8:	f855 3b04 	ldr.w	r3, [r5], #4
 802a7ec:	4798      	blx	r3
 802a7ee:	3601      	adds	r6, #1
 802a7f0:	e7ee      	b.n	802a7d0 <__libc_init_array+0xc>
 802a7f2:	f855 3b04 	ldr.w	r3, [r5], #4
 802a7f6:	4798      	blx	r3
 802a7f8:	3601      	adds	r6, #1
 802a7fa:	e7f2      	b.n	802a7e2 <__libc_init_array+0x1e>
 802a7fc:	0802d5ec 	.word	0x0802d5ec
 802a800:	0802d5ec 	.word	0x0802d5ec
 802a804:	0802d5ec 	.word	0x0802d5ec
 802a808:	0802d600 	.word	0x0802d600

0802a80c <__retarget_lock_init_recursive>:
 802a80c:	4770      	bx	lr

0802a80e <__retarget_lock_acquire_recursive>:
 802a80e:	4770      	bx	lr

0802a810 <__retarget_lock_release_recursive>:
 802a810:	4770      	bx	lr

0802a812 <memcpy>:
 802a812:	440a      	add	r2, r1
 802a814:	4291      	cmp	r1, r2
 802a816:	f100 33ff 	add.w	r3, r0, #4294967295
 802a81a:	d100      	bne.n	802a81e <memcpy+0xc>
 802a81c:	4770      	bx	lr
 802a81e:	b510      	push	{r4, lr}
 802a820:	f811 4b01 	ldrb.w	r4, [r1], #1
 802a824:	f803 4f01 	strb.w	r4, [r3, #1]!
 802a828:	4291      	cmp	r1, r2
 802a82a:	d1f9      	bne.n	802a820 <memcpy+0xe>
 802a82c:	bd10      	pop	{r4, pc}
	...

0802a830 <__register_exitproc>:
 802a830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a834:	4d27      	ldr	r5, [pc, #156]	@ (802a8d4 <__register_exitproc+0xa4>)
 802a836:	4607      	mov	r7, r0
 802a838:	6828      	ldr	r0, [r5, #0]
 802a83a:	4691      	mov	r9, r2
 802a83c:	460e      	mov	r6, r1
 802a83e:	4698      	mov	r8, r3
 802a840:	f7ff ffe5 	bl	802a80e <__retarget_lock_acquire_recursive>
 802a844:	4a24      	ldr	r2, [pc, #144]	@ (802a8d8 <__register_exitproc+0xa8>)
 802a846:	6814      	ldr	r4, [r2, #0]
 802a848:	b93c      	cbnz	r4, 802a85a <__register_exitproc+0x2a>
 802a84a:	4b24      	ldr	r3, [pc, #144]	@ (802a8dc <__register_exitproc+0xac>)
 802a84c:	6013      	str	r3, [r2, #0]
 802a84e:	4a24      	ldr	r2, [pc, #144]	@ (802a8e0 <__register_exitproc+0xb0>)
 802a850:	b112      	cbz	r2, 802a858 <__register_exitproc+0x28>
 802a852:	6812      	ldr	r2, [r2, #0]
 802a854:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 802a858:	4c20      	ldr	r4, [pc, #128]	@ (802a8dc <__register_exitproc+0xac>)
 802a85a:	6863      	ldr	r3, [r4, #4]
 802a85c:	2b1f      	cmp	r3, #31
 802a85e:	dd06      	ble.n	802a86e <__register_exitproc+0x3e>
 802a860:	6828      	ldr	r0, [r5, #0]
 802a862:	f7ff ffd5 	bl	802a810 <__retarget_lock_release_recursive>
 802a866:	f04f 30ff 	mov.w	r0, #4294967295
 802a86a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a86e:	b32f      	cbz	r7, 802a8bc <__register_exitproc+0x8c>
 802a870:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 802a874:	b968      	cbnz	r0, 802a892 <__register_exitproc+0x62>
 802a876:	4b1b      	ldr	r3, [pc, #108]	@ (802a8e4 <__register_exitproc+0xb4>)
 802a878:	2b00      	cmp	r3, #0
 802a87a:	d0f1      	beq.n	802a860 <__register_exitproc+0x30>
 802a87c:	f44f 7084 	mov.w	r0, #264	@ 0x108
 802a880:	f7ff fc2a 	bl	802a0d8 <malloc>
 802a884:	2800      	cmp	r0, #0
 802a886:	d0eb      	beq.n	802a860 <__register_exitproc+0x30>
 802a888:	2300      	movs	r3, #0
 802a88a:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 802a88e:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 802a892:	6863      	ldr	r3, [r4, #4]
 802a894:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802a898:	2201      	movs	r2, #1
 802a89a:	409a      	lsls	r2, r3
 802a89c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802a8a0:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 802a8a4:	4313      	orrs	r3, r2
 802a8a6:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 802a8aa:	2f02      	cmp	r7, #2
 802a8ac:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 802a8b0:	bf02      	ittt	eq
 802a8b2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 802a8b6:	4313      	orreq	r3, r2
 802a8b8:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 802a8bc:	6863      	ldr	r3, [r4, #4]
 802a8be:	6828      	ldr	r0, [r5, #0]
 802a8c0:	1c5a      	adds	r2, r3, #1
 802a8c2:	3302      	adds	r3, #2
 802a8c4:	6062      	str	r2, [r4, #4]
 802a8c6:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 802a8ca:	f7ff ffa1 	bl	802a810 <__retarget_lock_release_recursive>
 802a8ce:	2000      	movs	r0, #0
 802a8d0:	e7cb      	b.n	802a86a <__register_exitproc+0x3a>
 802a8d2:	bf00      	nop
 802a8d4:	240000dc 	.word	0x240000dc
 802a8d8:	2401476c 	.word	0x2401476c
 802a8dc:	240146e0 	.word	0x240146e0
 802a8e0:	0802d3dc 	.word	0x0802d3dc
 802a8e4:	0802a0d9 	.word	0x0802a0d9

0802a8e8 <_free_r>:
 802a8e8:	b538      	push	{r3, r4, r5, lr}
 802a8ea:	4605      	mov	r5, r0
 802a8ec:	2900      	cmp	r1, #0
 802a8ee:	d041      	beq.n	802a974 <_free_r+0x8c>
 802a8f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802a8f4:	1f0c      	subs	r4, r1, #4
 802a8f6:	2b00      	cmp	r3, #0
 802a8f8:	bfb8      	it	lt
 802a8fa:	18e4      	addlt	r4, r4, r3
 802a8fc:	f7ff fc9e 	bl	802a23c <__malloc_lock>
 802a900:	4a1d      	ldr	r2, [pc, #116]	@ (802a978 <_free_r+0x90>)
 802a902:	6813      	ldr	r3, [r2, #0]
 802a904:	b933      	cbnz	r3, 802a914 <_free_r+0x2c>
 802a906:	6063      	str	r3, [r4, #4]
 802a908:	6014      	str	r4, [r2, #0]
 802a90a:	4628      	mov	r0, r5
 802a90c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802a910:	f7ff bc9a 	b.w	802a248 <__malloc_unlock>
 802a914:	42a3      	cmp	r3, r4
 802a916:	d908      	bls.n	802a92a <_free_r+0x42>
 802a918:	6820      	ldr	r0, [r4, #0]
 802a91a:	1821      	adds	r1, r4, r0
 802a91c:	428b      	cmp	r3, r1
 802a91e:	bf01      	itttt	eq
 802a920:	6819      	ldreq	r1, [r3, #0]
 802a922:	685b      	ldreq	r3, [r3, #4]
 802a924:	1809      	addeq	r1, r1, r0
 802a926:	6021      	streq	r1, [r4, #0]
 802a928:	e7ed      	b.n	802a906 <_free_r+0x1e>
 802a92a:	461a      	mov	r2, r3
 802a92c:	685b      	ldr	r3, [r3, #4]
 802a92e:	b10b      	cbz	r3, 802a934 <_free_r+0x4c>
 802a930:	42a3      	cmp	r3, r4
 802a932:	d9fa      	bls.n	802a92a <_free_r+0x42>
 802a934:	6811      	ldr	r1, [r2, #0]
 802a936:	1850      	adds	r0, r2, r1
 802a938:	42a0      	cmp	r0, r4
 802a93a:	d10b      	bne.n	802a954 <_free_r+0x6c>
 802a93c:	6820      	ldr	r0, [r4, #0]
 802a93e:	4401      	add	r1, r0
 802a940:	1850      	adds	r0, r2, r1
 802a942:	4283      	cmp	r3, r0
 802a944:	6011      	str	r1, [r2, #0]
 802a946:	d1e0      	bne.n	802a90a <_free_r+0x22>
 802a948:	6818      	ldr	r0, [r3, #0]
 802a94a:	685b      	ldr	r3, [r3, #4]
 802a94c:	6053      	str	r3, [r2, #4]
 802a94e:	4408      	add	r0, r1
 802a950:	6010      	str	r0, [r2, #0]
 802a952:	e7da      	b.n	802a90a <_free_r+0x22>
 802a954:	d902      	bls.n	802a95c <_free_r+0x74>
 802a956:	230c      	movs	r3, #12
 802a958:	602b      	str	r3, [r5, #0]
 802a95a:	e7d6      	b.n	802a90a <_free_r+0x22>
 802a95c:	6820      	ldr	r0, [r4, #0]
 802a95e:	1821      	adds	r1, r4, r0
 802a960:	428b      	cmp	r3, r1
 802a962:	bf04      	itt	eq
 802a964:	6819      	ldreq	r1, [r3, #0]
 802a966:	685b      	ldreq	r3, [r3, #4]
 802a968:	6063      	str	r3, [r4, #4]
 802a96a:	bf04      	itt	eq
 802a96c:	1809      	addeq	r1, r1, r0
 802a96e:	6021      	streq	r1, [r4, #0]
 802a970:	6054      	str	r4, [r2, #4]
 802a972:	e7ca      	b.n	802a90a <_free_r+0x22>
 802a974:	bd38      	pop	{r3, r4, r5, pc}
 802a976:	bf00      	nop
 802a978:	24014598 	.word	0x24014598

0802a97c <__sfputc_r>:
 802a97c:	6893      	ldr	r3, [r2, #8]
 802a97e:	3b01      	subs	r3, #1
 802a980:	2b00      	cmp	r3, #0
 802a982:	b410      	push	{r4}
 802a984:	6093      	str	r3, [r2, #8]
 802a986:	da08      	bge.n	802a99a <__sfputc_r+0x1e>
 802a988:	6994      	ldr	r4, [r2, #24]
 802a98a:	42a3      	cmp	r3, r4
 802a98c:	db01      	blt.n	802a992 <__sfputc_r+0x16>
 802a98e:	290a      	cmp	r1, #10
 802a990:	d103      	bne.n	802a99a <__sfputc_r+0x1e>
 802a992:	f85d 4b04 	ldr.w	r4, [sp], #4
 802a996:	f7ff bd82 	b.w	802a49e <__swbuf_r>
 802a99a:	6813      	ldr	r3, [r2, #0]
 802a99c:	1c58      	adds	r0, r3, #1
 802a99e:	6010      	str	r0, [r2, #0]
 802a9a0:	7019      	strb	r1, [r3, #0]
 802a9a2:	4608      	mov	r0, r1
 802a9a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 802a9a8:	4770      	bx	lr

0802a9aa <__sfputs_r>:
 802a9aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a9ac:	4606      	mov	r6, r0
 802a9ae:	460f      	mov	r7, r1
 802a9b0:	4614      	mov	r4, r2
 802a9b2:	18d5      	adds	r5, r2, r3
 802a9b4:	42ac      	cmp	r4, r5
 802a9b6:	d101      	bne.n	802a9bc <__sfputs_r+0x12>
 802a9b8:	2000      	movs	r0, #0
 802a9ba:	e007      	b.n	802a9cc <__sfputs_r+0x22>
 802a9bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a9c0:	463a      	mov	r2, r7
 802a9c2:	4630      	mov	r0, r6
 802a9c4:	f7ff ffda 	bl	802a97c <__sfputc_r>
 802a9c8:	1c43      	adds	r3, r0, #1
 802a9ca:	d1f3      	bne.n	802a9b4 <__sfputs_r+0xa>
 802a9cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802a9d0 <_vfiprintf_r>:
 802a9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a9d4:	460d      	mov	r5, r1
 802a9d6:	b09d      	sub	sp, #116	@ 0x74
 802a9d8:	4614      	mov	r4, r2
 802a9da:	4698      	mov	r8, r3
 802a9dc:	4606      	mov	r6, r0
 802a9de:	b118      	cbz	r0, 802a9e8 <_vfiprintf_r+0x18>
 802a9e0:	6a03      	ldr	r3, [r0, #32]
 802a9e2:	b90b      	cbnz	r3, 802a9e8 <_vfiprintf_r+0x18>
 802a9e4:	f7ff fcd0 	bl	802a388 <__sinit>
 802a9e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802a9ea:	07d9      	lsls	r1, r3, #31
 802a9ec:	d405      	bmi.n	802a9fa <_vfiprintf_r+0x2a>
 802a9ee:	89ab      	ldrh	r3, [r5, #12]
 802a9f0:	059a      	lsls	r2, r3, #22
 802a9f2:	d402      	bmi.n	802a9fa <_vfiprintf_r+0x2a>
 802a9f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802a9f6:	f7ff ff0a 	bl	802a80e <__retarget_lock_acquire_recursive>
 802a9fa:	89ab      	ldrh	r3, [r5, #12]
 802a9fc:	071b      	lsls	r3, r3, #28
 802a9fe:	d501      	bpl.n	802aa04 <_vfiprintf_r+0x34>
 802aa00:	692b      	ldr	r3, [r5, #16]
 802aa02:	b99b      	cbnz	r3, 802aa2c <_vfiprintf_r+0x5c>
 802aa04:	4629      	mov	r1, r5
 802aa06:	4630      	mov	r0, r6
 802aa08:	f7ff fd88 	bl	802a51c <__swsetup_r>
 802aa0c:	b170      	cbz	r0, 802aa2c <_vfiprintf_r+0x5c>
 802aa0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802aa10:	07dc      	lsls	r4, r3, #31
 802aa12:	d504      	bpl.n	802aa1e <_vfiprintf_r+0x4e>
 802aa14:	f04f 30ff 	mov.w	r0, #4294967295
 802aa18:	b01d      	add	sp, #116	@ 0x74
 802aa1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802aa1e:	89ab      	ldrh	r3, [r5, #12]
 802aa20:	0598      	lsls	r0, r3, #22
 802aa22:	d4f7      	bmi.n	802aa14 <_vfiprintf_r+0x44>
 802aa24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802aa26:	f7ff fef3 	bl	802a810 <__retarget_lock_release_recursive>
 802aa2a:	e7f3      	b.n	802aa14 <_vfiprintf_r+0x44>
 802aa2c:	2300      	movs	r3, #0
 802aa2e:	9309      	str	r3, [sp, #36]	@ 0x24
 802aa30:	2320      	movs	r3, #32
 802aa32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802aa36:	f8cd 800c 	str.w	r8, [sp, #12]
 802aa3a:	2330      	movs	r3, #48	@ 0x30
 802aa3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 802abec <_vfiprintf_r+0x21c>
 802aa40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802aa44:	f04f 0901 	mov.w	r9, #1
 802aa48:	4623      	mov	r3, r4
 802aa4a:	469a      	mov	sl, r3
 802aa4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 802aa50:	b10a      	cbz	r2, 802aa56 <_vfiprintf_r+0x86>
 802aa52:	2a25      	cmp	r2, #37	@ 0x25
 802aa54:	d1f9      	bne.n	802aa4a <_vfiprintf_r+0x7a>
 802aa56:	ebba 0b04 	subs.w	fp, sl, r4
 802aa5a:	d00b      	beq.n	802aa74 <_vfiprintf_r+0xa4>
 802aa5c:	465b      	mov	r3, fp
 802aa5e:	4622      	mov	r2, r4
 802aa60:	4629      	mov	r1, r5
 802aa62:	4630      	mov	r0, r6
 802aa64:	f7ff ffa1 	bl	802a9aa <__sfputs_r>
 802aa68:	3001      	adds	r0, #1
 802aa6a:	f000 80a7 	beq.w	802abbc <_vfiprintf_r+0x1ec>
 802aa6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802aa70:	445a      	add	r2, fp
 802aa72:	9209      	str	r2, [sp, #36]	@ 0x24
 802aa74:	f89a 3000 	ldrb.w	r3, [sl]
 802aa78:	2b00      	cmp	r3, #0
 802aa7a:	f000 809f 	beq.w	802abbc <_vfiprintf_r+0x1ec>
 802aa7e:	2300      	movs	r3, #0
 802aa80:	f04f 32ff 	mov.w	r2, #4294967295
 802aa84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802aa88:	f10a 0a01 	add.w	sl, sl, #1
 802aa8c:	9304      	str	r3, [sp, #16]
 802aa8e:	9307      	str	r3, [sp, #28]
 802aa90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802aa94:	931a      	str	r3, [sp, #104]	@ 0x68
 802aa96:	4654      	mov	r4, sl
 802aa98:	2205      	movs	r2, #5
 802aa9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802aa9e:	4853      	ldr	r0, [pc, #332]	@ (802abec <_vfiprintf_r+0x21c>)
 802aaa0:	f7d5 fc36 	bl	8000310 <memchr>
 802aaa4:	9a04      	ldr	r2, [sp, #16]
 802aaa6:	b9d8      	cbnz	r0, 802aae0 <_vfiprintf_r+0x110>
 802aaa8:	06d1      	lsls	r1, r2, #27
 802aaaa:	bf44      	itt	mi
 802aaac:	2320      	movmi	r3, #32
 802aaae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802aab2:	0713      	lsls	r3, r2, #28
 802aab4:	bf44      	itt	mi
 802aab6:	232b      	movmi	r3, #43	@ 0x2b
 802aab8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802aabc:	f89a 3000 	ldrb.w	r3, [sl]
 802aac0:	2b2a      	cmp	r3, #42	@ 0x2a
 802aac2:	d015      	beq.n	802aaf0 <_vfiprintf_r+0x120>
 802aac4:	9a07      	ldr	r2, [sp, #28]
 802aac6:	4654      	mov	r4, sl
 802aac8:	2000      	movs	r0, #0
 802aaca:	f04f 0c0a 	mov.w	ip, #10
 802aace:	4621      	mov	r1, r4
 802aad0:	f811 3b01 	ldrb.w	r3, [r1], #1
 802aad4:	3b30      	subs	r3, #48	@ 0x30
 802aad6:	2b09      	cmp	r3, #9
 802aad8:	d94b      	bls.n	802ab72 <_vfiprintf_r+0x1a2>
 802aada:	b1b0      	cbz	r0, 802ab0a <_vfiprintf_r+0x13a>
 802aadc:	9207      	str	r2, [sp, #28]
 802aade:	e014      	b.n	802ab0a <_vfiprintf_r+0x13a>
 802aae0:	eba0 0308 	sub.w	r3, r0, r8
 802aae4:	fa09 f303 	lsl.w	r3, r9, r3
 802aae8:	4313      	orrs	r3, r2
 802aaea:	9304      	str	r3, [sp, #16]
 802aaec:	46a2      	mov	sl, r4
 802aaee:	e7d2      	b.n	802aa96 <_vfiprintf_r+0xc6>
 802aaf0:	9b03      	ldr	r3, [sp, #12]
 802aaf2:	1d19      	adds	r1, r3, #4
 802aaf4:	681b      	ldr	r3, [r3, #0]
 802aaf6:	9103      	str	r1, [sp, #12]
 802aaf8:	2b00      	cmp	r3, #0
 802aafa:	bfbb      	ittet	lt
 802aafc:	425b      	neglt	r3, r3
 802aafe:	f042 0202 	orrlt.w	r2, r2, #2
 802ab02:	9307      	strge	r3, [sp, #28]
 802ab04:	9307      	strlt	r3, [sp, #28]
 802ab06:	bfb8      	it	lt
 802ab08:	9204      	strlt	r2, [sp, #16]
 802ab0a:	7823      	ldrb	r3, [r4, #0]
 802ab0c:	2b2e      	cmp	r3, #46	@ 0x2e
 802ab0e:	d10a      	bne.n	802ab26 <_vfiprintf_r+0x156>
 802ab10:	7863      	ldrb	r3, [r4, #1]
 802ab12:	2b2a      	cmp	r3, #42	@ 0x2a
 802ab14:	d132      	bne.n	802ab7c <_vfiprintf_r+0x1ac>
 802ab16:	9b03      	ldr	r3, [sp, #12]
 802ab18:	1d1a      	adds	r2, r3, #4
 802ab1a:	681b      	ldr	r3, [r3, #0]
 802ab1c:	9203      	str	r2, [sp, #12]
 802ab1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802ab22:	3402      	adds	r4, #2
 802ab24:	9305      	str	r3, [sp, #20]
 802ab26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802abfc <_vfiprintf_r+0x22c>
 802ab2a:	7821      	ldrb	r1, [r4, #0]
 802ab2c:	2203      	movs	r2, #3
 802ab2e:	4650      	mov	r0, sl
 802ab30:	f7d5 fbee 	bl	8000310 <memchr>
 802ab34:	b138      	cbz	r0, 802ab46 <_vfiprintf_r+0x176>
 802ab36:	9b04      	ldr	r3, [sp, #16]
 802ab38:	eba0 000a 	sub.w	r0, r0, sl
 802ab3c:	2240      	movs	r2, #64	@ 0x40
 802ab3e:	4082      	lsls	r2, r0
 802ab40:	4313      	orrs	r3, r2
 802ab42:	3401      	adds	r4, #1
 802ab44:	9304      	str	r3, [sp, #16]
 802ab46:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ab4a:	4829      	ldr	r0, [pc, #164]	@ (802abf0 <_vfiprintf_r+0x220>)
 802ab4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802ab50:	2206      	movs	r2, #6
 802ab52:	f7d5 fbdd 	bl	8000310 <memchr>
 802ab56:	2800      	cmp	r0, #0
 802ab58:	d03f      	beq.n	802abda <_vfiprintf_r+0x20a>
 802ab5a:	4b26      	ldr	r3, [pc, #152]	@ (802abf4 <_vfiprintf_r+0x224>)
 802ab5c:	bb1b      	cbnz	r3, 802aba6 <_vfiprintf_r+0x1d6>
 802ab5e:	9b03      	ldr	r3, [sp, #12]
 802ab60:	3307      	adds	r3, #7
 802ab62:	f023 0307 	bic.w	r3, r3, #7
 802ab66:	3308      	adds	r3, #8
 802ab68:	9303      	str	r3, [sp, #12]
 802ab6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ab6c:	443b      	add	r3, r7
 802ab6e:	9309      	str	r3, [sp, #36]	@ 0x24
 802ab70:	e76a      	b.n	802aa48 <_vfiprintf_r+0x78>
 802ab72:	fb0c 3202 	mla	r2, ip, r2, r3
 802ab76:	460c      	mov	r4, r1
 802ab78:	2001      	movs	r0, #1
 802ab7a:	e7a8      	b.n	802aace <_vfiprintf_r+0xfe>
 802ab7c:	2300      	movs	r3, #0
 802ab7e:	3401      	adds	r4, #1
 802ab80:	9305      	str	r3, [sp, #20]
 802ab82:	4619      	mov	r1, r3
 802ab84:	f04f 0c0a 	mov.w	ip, #10
 802ab88:	4620      	mov	r0, r4
 802ab8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802ab8e:	3a30      	subs	r2, #48	@ 0x30
 802ab90:	2a09      	cmp	r2, #9
 802ab92:	d903      	bls.n	802ab9c <_vfiprintf_r+0x1cc>
 802ab94:	2b00      	cmp	r3, #0
 802ab96:	d0c6      	beq.n	802ab26 <_vfiprintf_r+0x156>
 802ab98:	9105      	str	r1, [sp, #20]
 802ab9a:	e7c4      	b.n	802ab26 <_vfiprintf_r+0x156>
 802ab9c:	fb0c 2101 	mla	r1, ip, r1, r2
 802aba0:	4604      	mov	r4, r0
 802aba2:	2301      	movs	r3, #1
 802aba4:	e7f0      	b.n	802ab88 <_vfiprintf_r+0x1b8>
 802aba6:	ab03      	add	r3, sp, #12
 802aba8:	9300      	str	r3, [sp, #0]
 802abaa:	462a      	mov	r2, r5
 802abac:	4b12      	ldr	r3, [pc, #72]	@ (802abf8 <_vfiprintf_r+0x228>)
 802abae:	a904      	add	r1, sp, #16
 802abb0:	4630      	mov	r0, r6
 802abb2:	f3af 8000 	nop.w
 802abb6:	4607      	mov	r7, r0
 802abb8:	1c78      	adds	r0, r7, #1
 802abba:	d1d6      	bne.n	802ab6a <_vfiprintf_r+0x19a>
 802abbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802abbe:	07d9      	lsls	r1, r3, #31
 802abc0:	d405      	bmi.n	802abce <_vfiprintf_r+0x1fe>
 802abc2:	89ab      	ldrh	r3, [r5, #12]
 802abc4:	059a      	lsls	r2, r3, #22
 802abc6:	d402      	bmi.n	802abce <_vfiprintf_r+0x1fe>
 802abc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802abca:	f7ff fe21 	bl	802a810 <__retarget_lock_release_recursive>
 802abce:	89ab      	ldrh	r3, [r5, #12]
 802abd0:	065b      	lsls	r3, r3, #25
 802abd2:	f53f af1f 	bmi.w	802aa14 <_vfiprintf_r+0x44>
 802abd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802abd8:	e71e      	b.n	802aa18 <_vfiprintf_r+0x48>
 802abda:	ab03      	add	r3, sp, #12
 802abdc:	9300      	str	r3, [sp, #0]
 802abde:	462a      	mov	r2, r5
 802abe0:	4b05      	ldr	r3, [pc, #20]	@ (802abf8 <_vfiprintf_r+0x228>)
 802abe2:	a904      	add	r1, sp, #16
 802abe4:	4630      	mov	r0, r6
 802abe6:	f000 f879 	bl	802acdc <_printf_i>
 802abea:	e7e4      	b.n	802abb6 <_vfiprintf_r+0x1e6>
 802abec:	0802d3e0 	.word	0x0802d3e0
 802abf0:	0802d3ea 	.word	0x0802d3ea
 802abf4:	00000000 	.word	0x00000000
 802abf8:	0802a9ab 	.word	0x0802a9ab
 802abfc:	0802d3e6 	.word	0x0802d3e6

0802ac00 <_printf_common>:
 802ac00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802ac04:	4616      	mov	r6, r2
 802ac06:	4698      	mov	r8, r3
 802ac08:	688a      	ldr	r2, [r1, #8]
 802ac0a:	690b      	ldr	r3, [r1, #16]
 802ac0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802ac10:	4293      	cmp	r3, r2
 802ac12:	bfb8      	it	lt
 802ac14:	4613      	movlt	r3, r2
 802ac16:	6033      	str	r3, [r6, #0]
 802ac18:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 802ac1c:	4607      	mov	r7, r0
 802ac1e:	460c      	mov	r4, r1
 802ac20:	b10a      	cbz	r2, 802ac26 <_printf_common+0x26>
 802ac22:	3301      	adds	r3, #1
 802ac24:	6033      	str	r3, [r6, #0]
 802ac26:	6823      	ldr	r3, [r4, #0]
 802ac28:	0699      	lsls	r1, r3, #26
 802ac2a:	bf42      	ittt	mi
 802ac2c:	6833      	ldrmi	r3, [r6, #0]
 802ac2e:	3302      	addmi	r3, #2
 802ac30:	6033      	strmi	r3, [r6, #0]
 802ac32:	6825      	ldr	r5, [r4, #0]
 802ac34:	f015 0506 	ands.w	r5, r5, #6
 802ac38:	d106      	bne.n	802ac48 <_printf_common+0x48>
 802ac3a:	f104 0a19 	add.w	sl, r4, #25
 802ac3e:	68e3      	ldr	r3, [r4, #12]
 802ac40:	6832      	ldr	r2, [r6, #0]
 802ac42:	1a9b      	subs	r3, r3, r2
 802ac44:	42ab      	cmp	r3, r5
 802ac46:	dc26      	bgt.n	802ac96 <_printf_common+0x96>
 802ac48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 802ac4c:	6822      	ldr	r2, [r4, #0]
 802ac4e:	3b00      	subs	r3, #0
 802ac50:	bf18      	it	ne
 802ac52:	2301      	movne	r3, #1
 802ac54:	0692      	lsls	r2, r2, #26
 802ac56:	d42b      	bmi.n	802acb0 <_printf_common+0xb0>
 802ac58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802ac5c:	4641      	mov	r1, r8
 802ac5e:	4638      	mov	r0, r7
 802ac60:	47c8      	blx	r9
 802ac62:	3001      	adds	r0, #1
 802ac64:	d01e      	beq.n	802aca4 <_printf_common+0xa4>
 802ac66:	6823      	ldr	r3, [r4, #0]
 802ac68:	6922      	ldr	r2, [r4, #16]
 802ac6a:	f003 0306 	and.w	r3, r3, #6
 802ac6e:	2b04      	cmp	r3, #4
 802ac70:	bf02      	ittt	eq
 802ac72:	68e5      	ldreq	r5, [r4, #12]
 802ac74:	6833      	ldreq	r3, [r6, #0]
 802ac76:	1aed      	subeq	r5, r5, r3
 802ac78:	68a3      	ldr	r3, [r4, #8]
 802ac7a:	bf0c      	ite	eq
 802ac7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802ac80:	2500      	movne	r5, #0
 802ac82:	4293      	cmp	r3, r2
 802ac84:	bfc4      	itt	gt
 802ac86:	1a9b      	subgt	r3, r3, r2
 802ac88:	18ed      	addgt	r5, r5, r3
 802ac8a:	2600      	movs	r6, #0
 802ac8c:	341a      	adds	r4, #26
 802ac8e:	42b5      	cmp	r5, r6
 802ac90:	d11a      	bne.n	802acc8 <_printf_common+0xc8>
 802ac92:	2000      	movs	r0, #0
 802ac94:	e008      	b.n	802aca8 <_printf_common+0xa8>
 802ac96:	2301      	movs	r3, #1
 802ac98:	4652      	mov	r2, sl
 802ac9a:	4641      	mov	r1, r8
 802ac9c:	4638      	mov	r0, r7
 802ac9e:	47c8      	blx	r9
 802aca0:	3001      	adds	r0, #1
 802aca2:	d103      	bne.n	802acac <_printf_common+0xac>
 802aca4:	f04f 30ff 	mov.w	r0, #4294967295
 802aca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802acac:	3501      	adds	r5, #1
 802acae:	e7c6      	b.n	802ac3e <_printf_common+0x3e>
 802acb0:	18e1      	adds	r1, r4, r3
 802acb2:	1c5a      	adds	r2, r3, #1
 802acb4:	2030      	movs	r0, #48	@ 0x30
 802acb6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802acba:	4422      	add	r2, r4
 802acbc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802acc0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802acc4:	3302      	adds	r3, #2
 802acc6:	e7c7      	b.n	802ac58 <_printf_common+0x58>
 802acc8:	2301      	movs	r3, #1
 802acca:	4622      	mov	r2, r4
 802accc:	4641      	mov	r1, r8
 802acce:	4638      	mov	r0, r7
 802acd0:	47c8      	blx	r9
 802acd2:	3001      	adds	r0, #1
 802acd4:	d0e6      	beq.n	802aca4 <_printf_common+0xa4>
 802acd6:	3601      	adds	r6, #1
 802acd8:	e7d9      	b.n	802ac8e <_printf_common+0x8e>
	...

0802acdc <_printf_i>:
 802acdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802ace0:	7e0f      	ldrb	r7, [r1, #24]
 802ace2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802ace4:	2f78      	cmp	r7, #120	@ 0x78
 802ace6:	4691      	mov	r9, r2
 802ace8:	4680      	mov	r8, r0
 802acea:	460c      	mov	r4, r1
 802acec:	469a      	mov	sl, r3
 802acee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802acf2:	d807      	bhi.n	802ad04 <_printf_i+0x28>
 802acf4:	2f62      	cmp	r7, #98	@ 0x62
 802acf6:	d80a      	bhi.n	802ad0e <_printf_i+0x32>
 802acf8:	2f00      	cmp	r7, #0
 802acfa:	f000 80d2 	beq.w	802aea2 <_printf_i+0x1c6>
 802acfe:	2f58      	cmp	r7, #88	@ 0x58
 802ad00:	f000 80b9 	beq.w	802ae76 <_printf_i+0x19a>
 802ad04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802ad08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 802ad0c:	e03a      	b.n	802ad84 <_printf_i+0xa8>
 802ad0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802ad12:	2b15      	cmp	r3, #21
 802ad14:	d8f6      	bhi.n	802ad04 <_printf_i+0x28>
 802ad16:	a101      	add	r1, pc, #4	@ (adr r1, 802ad1c <_printf_i+0x40>)
 802ad18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802ad1c:	0802ad75 	.word	0x0802ad75
 802ad20:	0802ad89 	.word	0x0802ad89
 802ad24:	0802ad05 	.word	0x0802ad05
 802ad28:	0802ad05 	.word	0x0802ad05
 802ad2c:	0802ad05 	.word	0x0802ad05
 802ad30:	0802ad05 	.word	0x0802ad05
 802ad34:	0802ad89 	.word	0x0802ad89
 802ad38:	0802ad05 	.word	0x0802ad05
 802ad3c:	0802ad05 	.word	0x0802ad05
 802ad40:	0802ad05 	.word	0x0802ad05
 802ad44:	0802ad05 	.word	0x0802ad05
 802ad48:	0802ae89 	.word	0x0802ae89
 802ad4c:	0802adb3 	.word	0x0802adb3
 802ad50:	0802ae43 	.word	0x0802ae43
 802ad54:	0802ad05 	.word	0x0802ad05
 802ad58:	0802ad05 	.word	0x0802ad05
 802ad5c:	0802aeab 	.word	0x0802aeab
 802ad60:	0802ad05 	.word	0x0802ad05
 802ad64:	0802adb3 	.word	0x0802adb3
 802ad68:	0802ad05 	.word	0x0802ad05
 802ad6c:	0802ad05 	.word	0x0802ad05
 802ad70:	0802ae4b 	.word	0x0802ae4b
 802ad74:	6833      	ldr	r3, [r6, #0]
 802ad76:	1d1a      	adds	r2, r3, #4
 802ad78:	681b      	ldr	r3, [r3, #0]
 802ad7a:	6032      	str	r2, [r6, #0]
 802ad7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802ad80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802ad84:	2301      	movs	r3, #1
 802ad86:	e09d      	b.n	802aec4 <_printf_i+0x1e8>
 802ad88:	6833      	ldr	r3, [r6, #0]
 802ad8a:	6820      	ldr	r0, [r4, #0]
 802ad8c:	1d19      	adds	r1, r3, #4
 802ad8e:	6031      	str	r1, [r6, #0]
 802ad90:	0606      	lsls	r6, r0, #24
 802ad92:	d501      	bpl.n	802ad98 <_printf_i+0xbc>
 802ad94:	681d      	ldr	r5, [r3, #0]
 802ad96:	e003      	b.n	802ada0 <_printf_i+0xc4>
 802ad98:	0645      	lsls	r5, r0, #25
 802ad9a:	d5fb      	bpl.n	802ad94 <_printf_i+0xb8>
 802ad9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 802ada0:	2d00      	cmp	r5, #0
 802ada2:	da03      	bge.n	802adac <_printf_i+0xd0>
 802ada4:	232d      	movs	r3, #45	@ 0x2d
 802ada6:	426d      	negs	r5, r5
 802ada8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802adac:	4859      	ldr	r0, [pc, #356]	@ (802af14 <_printf_i+0x238>)
 802adae:	230a      	movs	r3, #10
 802adb0:	e011      	b.n	802add6 <_printf_i+0xfa>
 802adb2:	6821      	ldr	r1, [r4, #0]
 802adb4:	6833      	ldr	r3, [r6, #0]
 802adb6:	0608      	lsls	r0, r1, #24
 802adb8:	f853 5b04 	ldr.w	r5, [r3], #4
 802adbc:	d402      	bmi.n	802adc4 <_printf_i+0xe8>
 802adbe:	0649      	lsls	r1, r1, #25
 802adc0:	bf48      	it	mi
 802adc2:	b2ad      	uxthmi	r5, r5
 802adc4:	2f6f      	cmp	r7, #111	@ 0x6f
 802adc6:	4853      	ldr	r0, [pc, #332]	@ (802af14 <_printf_i+0x238>)
 802adc8:	6033      	str	r3, [r6, #0]
 802adca:	bf14      	ite	ne
 802adcc:	230a      	movne	r3, #10
 802adce:	2308      	moveq	r3, #8
 802add0:	2100      	movs	r1, #0
 802add2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802add6:	6866      	ldr	r6, [r4, #4]
 802add8:	60a6      	str	r6, [r4, #8]
 802adda:	2e00      	cmp	r6, #0
 802addc:	bfa2      	ittt	ge
 802adde:	6821      	ldrge	r1, [r4, #0]
 802ade0:	f021 0104 	bicge.w	r1, r1, #4
 802ade4:	6021      	strge	r1, [r4, #0]
 802ade6:	b90d      	cbnz	r5, 802adec <_printf_i+0x110>
 802ade8:	2e00      	cmp	r6, #0
 802adea:	d04b      	beq.n	802ae84 <_printf_i+0x1a8>
 802adec:	4616      	mov	r6, r2
 802adee:	fbb5 f1f3 	udiv	r1, r5, r3
 802adf2:	fb03 5711 	mls	r7, r3, r1, r5
 802adf6:	5dc7      	ldrb	r7, [r0, r7]
 802adf8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802adfc:	462f      	mov	r7, r5
 802adfe:	42bb      	cmp	r3, r7
 802ae00:	460d      	mov	r5, r1
 802ae02:	d9f4      	bls.n	802adee <_printf_i+0x112>
 802ae04:	2b08      	cmp	r3, #8
 802ae06:	d10b      	bne.n	802ae20 <_printf_i+0x144>
 802ae08:	6823      	ldr	r3, [r4, #0]
 802ae0a:	07df      	lsls	r7, r3, #31
 802ae0c:	d508      	bpl.n	802ae20 <_printf_i+0x144>
 802ae0e:	6923      	ldr	r3, [r4, #16]
 802ae10:	6861      	ldr	r1, [r4, #4]
 802ae12:	4299      	cmp	r1, r3
 802ae14:	bfde      	ittt	le
 802ae16:	2330      	movle	r3, #48	@ 0x30
 802ae18:	f806 3c01 	strble.w	r3, [r6, #-1]
 802ae1c:	f106 36ff 	addle.w	r6, r6, #4294967295
 802ae20:	1b92      	subs	r2, r2, r6
 802ae22:	6122      	str	r2, [r4, #16]
 802ae24:	f8cd a000 	str.w	sl, [sp]
 802ae28:	464b      	mov	r3, r9
 802ae2a:	aa03      	add	r2, sp, #12
 802ae2c:	4621      	mov	r1, r4
 802ae2e:	4640      	mov	r0, r8
 802ae30:	f7ff fee6 	bl	802ac00 <_printf_common>
 802ae34:	3001      	adds	r0, #1
 802ae36:	d14a      	bne.n	802aece <_printf_i+0x1f2>
 802ae38:	f04f 30ff 	mov.w	r0, #4294967295
 802ae3c:	b004      	add	sp, #16
 802ae3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ae42:	6823      	ldr	r3, [r4, #0]
 802ae44:	f043 0320 	orr.w	r3, r3, #32
 802ae48:	6023      	str	r3, [r4, #0]
 802ae4a:	4833      	ldr	r0, [pc, #204]	@ (802af18 <_printf_i+0x23c>)
 802ae4c:	2778      	movs	r7, #120	@ 0x78
 802ae4e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802ae52:	6823      	ldr	r3, [r4, #0]
 802ae54:	6831      	ldr	r1, [r6, #0]
 802ae56:	061f      	lsls	r7, r3, #24
 802ae58:	f851 5b04 	ldr.w	r5, [r1], #4
 802ae5c:	d402      	bmi.n	802ae64 <_printf_i+0x188>
 802ae5e:	065f      	lsls	r7, r3, #25
 802ae60:	bf48      	it	mi
 802ae62:	b2ad      	uxthmi	r5, r5
 802ae64:	6031      	str	r1, [r6, #0]
 802ae66:	07d9      	lsls	r1, r3, #31
 802ae68:	bf44      	itt	mi
 802ae6a:	f043 0320 	orrmi.w	r3, r3, #32
 802ae6e:	6023      	strmi	r3, [r4, #0]
 802ae70:	b11d      	cbz	r5, 802ae7a <_printf_i+0x19e>
 802ae72:	2310      	movs	r3, #16
 802ae74:	e7ac      	b.n	802add0 <_printf_i+0xf4>
 802ae76:	4827      	ldr	r0, [pc, #156]	@ (802af14 <_printf_i+0x238>)
 802ae78:	e7e9      	b.n	802ae4e <_printf_i+0x172>
 802ae7a:	6823      	ldr	r3, [r4, #0]
 802ae7c:	f023 0320 	bic.w	r3, r3, #32
 802ae80:	6023      	str	r3, [r4, #0]
 802ae82:	e7f6      	b.n	802ae72 <_printf_i+0x196>
 802ae84:	4616      	mov	r6, r2
 802ae86:	e7bd      	b.n	802ae04 <_printf_i+0x128>
 802ae88:	6833      	ldr	r3, [r6, #0]
 802ae8a:	6825      	ldr	r5, [r4, #0]
 802ae8c:	6961      	ldr	r1, [r4, #20]
 802ae8e:	1d18      	adds	r0, r3, #4
 802ae90:	6030      	str	r0, [r6, #0]
 802ae92:	062e      	lsls	r6, r5, #24
 802ae94:	681b      	ldr	r3, [r3, #0]
 802ae96:	d501      	bpl.n	802ae9c <_printf_i+0x1c0>
 802ae98:	6019      	str	r1, [r3, #0]
 802ae9a:	e002      	b.n	802aea2 <_printf_i+0x1c6>
 802ae9c:	0668      	lsls	r0, r5, #25
 802ae9e:	d5fb      	bpl.n	802ae98 <_printf_i+0x1bc>
 802aea0:	8019      	strh	r1, [r3, #0]
 802aea2:	2300      	movs	r3, #0
 802aea4:	6123      	str	r3, [r4, #16]
 802aea6:	4616      	mov	r6, r2
 802aea8:	e7bc      	b.n	802ae24 <_printf_i+0x148>
 802aeaa:	6833      	ldr	r3, [r6, #0]
 802aeac:	1d1a      	adds	r2, r3, #4
 802aeae:	6032      	str	r2, [r6, #0]
 802aeb0:	681e      	ldr	r6, [r3, #0]
 802aeb2:	6862      	ldr	r2, [r4, #4]
 802aeb4:	2100      	movs	r1, #0
 802aeb6:	4630      	mov	r0, r6
 802aeb8:	f7d5 fa2a 	bl	8000310 <memchr>
 802aebc:	b108      	cbz	r0, 802aec2 <_printf_i+0x1e6>
 802aebe:	1b80      	subs	r0, r0, r6
 802aec0:	6060      	str	r0, [r4, #4]
 802aec2:	6863      	ldr	r3, [r4, #4]
 802aec4:	6123      	str	r3, [r4, #16]
 802aec6:	2300      	movs	r3, #0
 802aec8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802aecc:	e7aa      	b.n	802ae24 <_printf_i+0x148>
 802aece:	6923      	ldr	r3, [r4, #16]
 802aed0:	4632      	mov	r2, r6
 802aed2:	4649      	mov	r1, r9
 802aed4:	4640      	mov	r0, r8
 802aed6:	47d0      	blx	sl
 802aed8:	3001      	adds	r0, #1
 802aeda:	d0ad      	beq.n	802ae38 <_printf_i+0x15c>
 802aedc:	6823      	ldr	r3, [r4, #0]
 802aede:	079b      	lsls	r3, r3, #30
 802aee0:	d413      	bmi.n	802af0a <_printf_i+0x22e>
 802aee2:	68e0      	ldr	r0, [r4, #12]
 802aee4:	9b03      	ldr	r3, [sp, #12]
 802aee6:	4298      	cmp	r0, r3
 802aee8:	bfb8      	it	lt
 802aeea:	4618      	movlt	r0, r3
 802aeec:	e7a6      	b.n	802ae3c <_printf_i+0x160>
 802aeee:	2301      	movs	r3, #1
 802aef0:	4632      	mov	r2, r6
 802aef2:	4649      	mov	r1, r9
 802aef4:	4640      	mov	r0, r8
 802aef6:	47d0      	blx	sl
 802aef8:	3001      	adds	r0, #1
 802aefa:	d09d      	beq.n	802ae38 <_printf_i+0x15c>
 802aefc:	3501      	adds	r5, #1
 802aefe:	68e3      	ldr	r3, [r4, #12]
 802af00:	9903      	ldr	r1, [sp, #12]
 802af02:	1a5b      	subs	r3, r3, r1
 802af04:	42ab      	cmp	r3, r5
 802af06:	dcf2      	bgt.n	802aeee <_printf_i+0x212>
 802af08:	e7eb      	b.n	802aee2 <_printf_i+0x206>
 802af0a:	2500      	movs	r5, #0
 802af0c:	f104 0619 	add.w	r6, r4, #25
 802af10:	e7f5      	b.n	802aefe <_printf_i+0x222>
 802af12:	bf00      	nop
 802af14:	0802d3f1 	.word	0x0802d3f1
 802af18:	0802d402 	.word	0x0802d402

0802af1c <__sflush_r>:
 802af1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802af20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802af24:	0716      	lsls	r6, r2, #28
 802af26:	4605      	mov	r5, r0
 802af28:	460c      	mov	r4, r1
 802af2a:	d454      	bmi.n	802afd6 <__sflush_r+0xba>
 802af2c:	684b      	ldr	r3, [r1, #4]
 802af2e:	2b00      	cmp	r3, #0
 802af30:	dc02      	bgt.n	802af38 <__sflush_r+0x1c>
 802af32:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802af34:	2b00      	cmp	r3, #0
 802af36:	dd48      	ble.n	802afca <__sflush_r+0xae>
 802af38:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802af3a:	2e00      	cmp	r6, #0
 802af3c:	d045      	beq.n	802afca <__sflush_r+0xae>
 802af3e:	2300      	movs	r3, #0
 802af40:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802af44:	682f      	ldr	r7, [r5, #0]
 802af46:	6a21      	ldr	r1, [r4, #32]
 802af48:	602b      	str	r3, [r5, #0]
 802af4a:	d030      	beq.n	802afae <__sflush_r+0x92>
 802af4c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802af4e:	89a3      	ldrh	r3, [r4, #12]
 802af50:	0759      	lsls	r1, r3, #29
 802af52:	d505      	bpl.n	802af60 <__sflush_r+0x44>
 802af54:	6863      	ldr	r3, [r4, #4]
 802af56:	1ad2      	subs	r2, r2, r3
 802af58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802af5a:	b10b      	cbz	r3, 802af60 <__sflush_r+0x44>
 802af5c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802af5e:	1ad2      	subs	r2, r2, r3
 802af60:	2300      	movs	r3, #0
 802af62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802af64:	6a21      	ldr	r1, [r4, #32]
 802af66:	4628      	mov	r0, r5
 802af68:	47b0      	blx	r6
 802af6a:	1c43      	adds	r3, r0, #1
 802af6c:	89a3      	ldrh	r3, [r4, #12]
 802af6e:	d106      	bne.n	802af7e <__sflush_r+0x62>
 802af70:	6829      	ldr	r1, [r5, #0]
 802af72:	291d      	cmp	r1, #29
 802af74:	d82b      	bhi.n	802afce <__sflush_r+0xb2>
 802af76:	4a2a      	ldr	r2, [pc, #168]	@ (802b020 <__sflush_r+0x104>)
 802af78:	410a      	asrs	r2, r1
 802af7a:	07d6      	lsls	r6, r2, #31
 802af7c:	d427      	bmi.n	802afce <__sflush_r+0xb2>
 802af7e:	2200      	movs	r2, #0
 802af80:	6062      	str	r2, [r4, #4]
 802af82:	04d9      	lsls	r1, r3, #19
 802af84:	6922      	ldr	r2, [r4, #16]
 802af86:	6022      	str	r2, [r4, #0]
 802af88:	d504      	bpl.n	802af94 <__sflush_r+0x78>
 802af8a:	1c42      	adds	r2, r0, #1
 802af8c:	d101      	bne.n	802af92 <__sflush_r+0x76>
 802af8e:	682b      	ldr	r3, [r5, #0]
 802af90:	b903      	cbnz	r3, 802af94 <__sflush_r+0x78>
 802af92:	6560      	str	r0, [r4, #84]	@ 0x54
 802af94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802af96:	602f      	str	r7, [r5, #0]
 802af98:	b1b9      	cbz	r1, 802afca <__sflush_r+0xae>
 802af9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802af9e:	4299      	cmp	r1, r3
 802afa0:	d002      	beq.n	802afa8 <__sflush_r+0x8c>
 802afa2:	4628      	mov	r0, r5
 802afa4:	f7ff fca0 	bl	802a8e8 <_free_r>
 802afa8:	2300      	movs	r3, #0
 802afaa:	6363      	str	r3, [r4, #52]	@ 0x34
 802afac:	e00d      	b.n	802afca <__sflush_r+0xae>
 802afae:	2301      	movs	r3, #1
 802afb0:	4628      	mov	r0, r5
 802afb2:	47b0      	blx	r6
 802afb4:	4602      	mov	r2, r0
 802afb6:	1c50      	adds	r0, r2, #1
 802afb8:	d1c9      	bne.n	802af4e <__sflush_r+0x32>
 802afba:	682b      	ldr	r3, [r5, #0]
 802afbc:	2b00      	cmp	r3, #0
 802afbe:	d0c6      	beq.n	802af4e <__sflush_r+0x32>
 802afc0:	2b1d      	cmp	r3, #29
 802afc2:	d001      	beq.n	802afc8 <__sflush_r+0xac>
 802afc4:	2b16      	cmp	r3, #22
 802afc6:	d11e      	bne.n	802b006 <__sflush_r+0xea>
 802afc8:	602f      	str	r7, [r5, #0]
 802afca:	2000      	movs	r0, #0
 802afcc:	e022      	b.n	802b014 <__sflush_r+0xf8>
 802afce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802afd2:	b21b      	sxth	r3, r3
 802afd4:	e01b      	b.n	802b00e <__sflush_r+0xf2>
 802afd6:	690f      	ldr	r7, [r1, #16]
 802afd8:	2f00      	cmp	r7, #0
 802afda:	d0f6      	beq.n	802afca <__sflush_r+0xae>
 802afdc:	0793      	lsls	r3, r2, #30
 802afde:	680e      	ldr	r6, [r1, #0]
 802afe0:	bf08      	it	eq
 802afe2:	694b      	ldreq	r3, [r1, #20]
 802afe4:	600f      	str	r7, [r1, #0]
 802afe6:	bf18      	it	ne
 802afe8:	2300      	movne	r3, #0
 802afea:	eba6 0807 	sub.w	r8, r6, r7
 802afee:	608b      	str	r3, [r1, #8]
 802aff0:	f1b8 0f00 	cmp.w	r8, #0
 802aff4:	dde9      	ble.n	802afca <__sflush_r+0xae>
 802aff6:	6a21      	ldr	r1, [r4, #32]
 802aff8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802affa:	4643      	mov	r3, r8
 802affc:	463a      	mov	r2, r7
 802affe:	4628      	mov	r0, r5
 802b000:	47b0      	blx	r6
 802b002:	2800      	cmp	r0, #0
 802b004:	dc08      	bgt.n	802b018 <__sflush_r+0xfc>
 802b006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b00a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802b00e:	81a3      	strh	r3, [r4, #12]
 802b010:	f04f 30ff 	mov.w	r0, #4294967295
 802b014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b018:	4407      	add	r7, r0
 802b01a:	eba8 0800 	sub.w	r8, r8, r0
 802b01e:	e7e7      	b.n	802aff0 <__sflush_r+0xd4>
 802b020:	dfbffffe 	.word	0xdfbffffe

0802b024 <_fflush_r>:
 802b024:	b538      	push	{r3, r4, r5, lr}
 802b026:	690b      	ldr	r3, [r1, #16]
 802b028:	4605      	mov	r5, r0
 802b02a:	460c      	mov	r4, r1
 802b02c:	b913      	cbnz	r3, 802b034 <_fflush_r+0x10>
 802b02e:	2500      	movs	r5, #0
 802b030:	4628      	mov	r0, r5
 802b032:	bd38      	pop	{r3, r4, r5, pc}
 802b034:	b118      	cbz	r0, 802b03e <_fflush_r+0x1a>
 802b036:	6a03      	ldr	r3, [r0, #32]
 802b038:	b90b      	cbnz	r3, 802b03e <_fflush_r+0x1a>
 802b03a:	f7ff f9a5 	bl	802a388 <__sinit>
 802b03e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b042:	2b00      	cmp	r3, #0
 802b044:	d0f3      	beq.n	802b02e <_fflush_r+0xa>
 802b046:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802b048:	07d0      	lsls	r0, r2, #31
 802b04a:	d404      	bmi.n	802b056 <_fflush_r+0x32>
 802b04c:	0599      	lsls	r1, r3, #22
 802b04e:	d402      	bmi.n	802b056 <_fflush_r+0x32>
 802b050:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802b052:	f7ff fbdc 	bl	802a80e <__retarget_lock_acquire_recursive>
 802b056:	4628      	mov	r0, r5
 802b058:	4621      	mov	r1, r4
 802b05a:	f7ff ff5f 	bl	802af1c <__sflush_r>
 802b05e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802b060:	07da      	lsls	r2, r3, #31
 802b062:	4605      	mov	r5, r0
 802b064:	d4e4      	bmi.n	802b030 <_fflush_r+0xc>
 802b066:	89a3      	ldrh	r3, [r4, #12]
 802b068:	059b      	lsls	r3, r3, #22
 802b06a:	d4e1      	bmi.n	802b030 <_fflush_r+0xc>
 802b06c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802b06e:	f7ff fbcf 	bl	802a810 <__retarget_lock_release_recursive>
 802b072:	e7dd      	b.n	802b030 <_fflush_r+0xc>

0802b074 <__swhatbuf_r>:
 802b074:	b570      	push	{r4, r5, r6, lr}
 802b076:	460c      	mov	r4, r1
 802b078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b07c:	2900      	cmp	r1, #0
 802b07e:	b096      	sub	sp, #88	@ 0x58
 802b080:	4615      	mov	r5, r2
 802b082:	461e      	mov	r6, r3
 802b084:	da0d      	bge.n	802b0a2 <__swhatbuf_r+0x2e>
 802b086:	89a3      	ldrh	r3, [r4, #12]
 802b088:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802b08c:	f04f 0100 	mov.w	r1, #0
 802b090:	bf14      	ite	ne
 802b092:	2340      	movne	r3, #64	@ 0x40
 802b094:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802b098:	2000      	movs	r0, #0
 802b09a:	6031      	str	r1, [r6, #0]
 802b09c:	602b      	str	r3, [r5, #0]
 802b09e:	b016      	add	sp, #88	@ 0x58
 802b0a0:	bd70      	pop	{r4, r5, r6, pc}
 802b0a2:	466a      	mov	r2, sp
 802b0a4:	f000 f848 	bl	802b138 <_fstat_r>
 802b0a8:	2800      	cmp	r0, #0
 802b0aa:	dbec      	blt.n	802b086 <__swhatbuf_r+0x12>
 802b0ac:	9901      	ldr	r1, [sp, #4]
 802b0ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802b0b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802b0b6:	4259      	negs	r1, r3
 802b0b8:	4159      	adcs	r1, r3
 802b0ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802b0be:	e7eb      	b.n	802b098 <__swhatbuf_r+0x24>

0802b0c0 <__smakebuf_r>:
 802b0c0:	898b      	ldrh	r3, [r1, #12]
 802b0c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802b0c4:	079d      	lsls	r5, r3, #30
 802b0c6:	4606      	mov	r6, r0
 802b0c8:	460c      	mov	r4, r1
 802b0ca:	d507      	bpl.n	802b0dc <__smakebuf_r+0x1c>
 802b0cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802b0d0:	6023      	str	r3, [r4, #0]
 802b0d2:	6123      	str	r3, [r4, #16]
 802b0d4:	2301      	movs	r3, #1
 802b0d6:	6163      	str	r3, [r4, #20]
 802b0d8:	b003      	add	sp, #12
 802b0da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802b0dc:	ab01      	add	r3, sp, #4
 802b0de:	466a      	mov	r2, sp
 802b0e0:	f7ff ffc8 	bl	802b074 <__swhatbuf_r>
 802b0e4:	9f00      	ldr	r7, [sp, #0]
 802b0e6:	4605      	mov	r5, r0
 802b0e8:	4639      	mov	r1, r7
 802b0ea:	4630      	mov	r0, r6
 802b0ec:	f7ff f826 	bl	802a13c <_malloc_r>
 802b0f0:	b948      	cbnz	r0, 802b106 <__smakebuf_r+0x46>
 802b0f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b0f6:	059a      	lsls	r2, r3, #22
 802b0f8:	d4ee      	bmi.n	802b0d8 <__smakebuf_r+0x18>
 802b0fa:	f023 0303 	bic.w	r3, r3, #3
 802b0fe:	f043 0302 	orr.w	r3, r3, #2
 802b102:	81a3      	strh	r3, [r4, #12]
 802b104:	e7e2      	b.n	802b0cc <__smakebuf_r+0xc>
 802b106:	89a3      	ldrh	r3, [r4, #12]
 802b108:	6020      	str	r0, [r4, #0]
 802b10a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802b10e:	81a3      	strh	r3, [r4, #12]
 802b110:	9b01      	ldr	r3, [sp, #4]
 802b112:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802b116:	b15b      	cbz	r3, 802b130 <__smakebuf_r+0x70>
 802b118:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b11c:	4630      	mov	r0, r6
 802b11e:	f000 f81d 	bl	802b15c <_isatty_r>
 802b122:	b128      	cbz	r0, 802b130 <__smakebuf_r+0x70>
 802b124:	89a3      	ldrh	r3, [r4, #12]
 802b126:	f023 0303 	bic.w	r3, r3, #3
 802b12a:	f043 0301 	orr.w	r3, r3, #1
 802b12e:	81a3      	strh	r3, [r4, #12]
 802b130:	89a3      	ldrh	r3, [r4, #12]
 802b132:	431d      	orrs	r5, r3
 802b134:	81a5      	strh	r5, [r4, #12]
 802b136:	e7cf      	b.n	802b0d8 <__smakebuf_r+0x18>

0802b138 <_fstat_r>:
 802b138:	b538      	push	{r3, r4, r5, lr}
 802b13a:	4d07      	ldr	r5, [pc, #28]	@ (802b158 <_fstat_r+0x20>)
 802b13c:	2300      	movs	r3, #0
 802b13e:	4604      	mov	r4, r0
 802b140:	4608      	mov	r0, r1
 802b142:	4611      	mov	r1, r2
 802b144:	602b      	str	r3, [r5, #0]
 802b146:	f7d7 fd15 	bl	8002b74 <_fstat>
 802b14a:	1c43      	adds	r3, r0, #1
 802b14c:	d102      	bne.n	802b154 <_fstat_r+0x1c>
 802b14e:	682b      	ldr	r3, [r5, #0]
 802b150:	b103      	cbz	r3, 802b154 <_fstat_r+0x1c>
 802b152:	6023      	str	r3, [r4, #0]
 802b154:	bd38      	pop	{r3, r4, r5, pc}
 802b156:	bf00      	nop
 802b158:	240146d8 	.word	0x240146d8

0802b15c <_isatty_r>:
 802b15c:	b538      	push	{r3, r4, r5, lr}
 802b15e:	4d06      	ldr	r5, [pc, #24]	@ (802b178 <_isatty_r+0x1c>)
 802b160:	2300      	movs	r3, #0
 802b162:	4604      	mov	r4, r0
 802b164:	4608      	mov	r0, r1
 802b166:	602b      	str	r3, [r5, #0]
 802b168:	f7d7 fd14 	bl	8002b94 <_isatty>
 802b16c:	1c43      	adds	r3, r0, #1
 802b16e:	d102      	bne.n	802b176 <_isatty_r+0x1a>
 802b170:	682b      	ldr	r3, [r5, #0]
 802b172:	b103      	cbz	r3, 802b176 <_isatty_r+0x1a>
 802b174:	6023      	str	r3, [r4, #0]
 802b176:	bd38      	pop	{r3, r4, r5, pc}
 802b178:	240146d8 	.word	0x240146d8

0802b17c <_init>:
 802b17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b17e:	bf00      	nop
 802b180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802b182:	bc08      	pop	{r3}
 802b184:	469e      	mov	lr, r3
 802b186:	4770      	bx	lr

0802b188 <_fini>:
 802b188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b18a:	bf00      	nop
 802b18c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802b18e:	bc08      	pop	{r3}
 802b190:	469e      	mov	lr, r3
 802b192:	4770      	bx	lr
