
CustomSTM32H735.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d144  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800d410  0800d410  0000e410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d450  0800d450  0000e450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d458  0800d458  0000e458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800d45c  0800d45c  0000e45c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  0800d460  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000066c  24000010  0800d470  0000f010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400067c  0800d470  0000f67c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000f010  2**0
                  CONTENTS, READONLY
 10 .debug_info   000286e6  00000000  00000000  0000f03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000041a6  00000000  00000000  00037724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001eb8  00000000  00000000  0003b8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000181c  00000000  00000000  0003d788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038b30  00000000  00000000  0003efa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002a8ff  00000000  00000000  00077ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00171d21  00000000  00000000  000a23d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002140f4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008680  00000000  00000000  00214138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000082  00000000  00000000  0021c7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800d3f8 	.word	0x0800d3f8

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	0800d3f8 	.word	0x0800d3f8

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000602:	f000 fe91 	bl	8001328 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000606:	4b45      	ldr	r3, [pc, #276]	@ (800071c <main+0x120>)
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800060e:	2b00      	cmp	r3, #0
 8000610:	d11b      	bne.n	800064a <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000612:	f3bf 8f4f 	dsb	sy
}
 8000616:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000618:	f3bf 8f6f 	isb	sy
}
 800061c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800061e:	4b3f      	ldr	r3, [pc, #252]	@ (800071c <main+0x120>)
 8000620:	2200      	movs	r2, #0
 8000622:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000626:	f3bf 8f4f 	dsb	sy
}
 800062a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800062c:	f3bf 8f6f 	isb	sy
}
 8000630:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000632:	4b3a      	ldr	r3, [pc, #232]	@ (800071c <main+0x120>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	4a39      	ldr	r2, [pc, #228]	@ (800071c <main+0x120>)
 8000638:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800063c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800063e:	f3bf 8f4f 	dsb	sy
}
 8000642:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000644:	f3bf 8f6f 	isb	sy
}
 8000648:	e000      	b.n	800064c <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800064a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800064c:	4b33      	ldr	r3, [pc, #204]	@ (800071c <main+0x120>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000654:	2b00      	cmp	r3, #0
 8000656:	d138      	bne.n	80006ca <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000658:	4b30      	ldr	r3, [pc, #192]	@ (800071c <main+0x120>)
 800065a:	2200      	movs	r2, #0
 800065c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000660:	f3bf 8f4f 	dsb	sy
}
 8000664:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000666:	4b2d      	ldr	r3, [pc, #180]	@ (800071c <main+0x120>)
 8000668:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800066c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	0b5b      	lsrs	r3, r3, #13
 8000672:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000676:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	08db      	lsrs	r3, r3, #3
 800067c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000680:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	015a      	lsls	r2, r3, #5
 8000686:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800068a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000690:	4922      	ldr	r1, [pc, #136]	@ (800071c <main+0x120>)
 8000692:	4313      	orrs	r3, r2
 8000694:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	1e5a      	subs	r2, r3, #1
 800069c:	607a      	str	r2, [r7, #4]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d1ef      	bne.n	8000682 <main+0x86>
    } while(sets-- != 0U);
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	1e5a      	subs	r2, r3, #1
 80006a6:	60ba      	str	r2, [r7, #8]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d1e5      	bne.n	8000678 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 80006ac:	f3bf 8f4f 	dsb	sy
}
 80006b0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80006b2:	4b1a      	ldr	r3, [pc, #104]	@ (800071c <main+0x120>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	4a19      	ldr	r2, [pc, #100]	@ (800071c <main+0x120>)
 80006b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80006bc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006be:	f3bf 8f4f 	dsb	sy
}
 80006c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006c4:	f3bf 8f6f 	isb	sy
}
 80006c8:	e000      	b.n	80006cc <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006ca:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006cc:	f001 ffbc 	bl	8002648 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d0:	f000 f826 	bl	8000720 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006d4:	f000 f896 	bl	8000804 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d8:	f000 fd84 	bl	80011e4 <MX_GPIO_Init>
  MX_DMA_Init();
 80006dc:	f000 fd5a 	bl	8001194 <MX_DMA_Init>
  MX_ADC2_Init();
 80006e0:	f000 f93e 	bl	8000960 <MX_ADC2_Init>
  MX_DAC1_Init();
 80006e4:	f000 f9be 	bl	8000a64 <MX_DAC1_Init>
  MX_I2C1_Init();
 80006e8:	f000 fa32 	bl	8000b50 <MX_I2C1_Init>
  MX_I2C4_Init();
 80006ec:	f000 fab0 	bl	8000c50 <MX_I2C4_Init>
  MX_OCTOSPI1_Init();
 80006f0:	f000 fb70 	bl	8000dd4 <MX_OCTOSPI1_Init>
  MX_OCTOSPI2_Init();
 80006f4:	f000 fbd4 	bl	8000ea0 <MX_OCTOSPI2_Init>
  MX_TIM1_Init();
 80006f8:	f000 fc56 	bl	8000fa8 <MX_TIM1_Init>
  MX_TIM23_Init();
 80006fc:	f000 fca8 	bl	8001050 <MX_TIM23_Init>
  MX_UART4_Init();
 8000700:	f000 fcfc 	bl	80010fc <MX_UART4_Init>
  MX_ADC1_Init();
 8000704:	f000 f8ae 	bl	8000864 <MX_ADC1_Init>
  MX_CRC_Init();
 8000708:	f000 f98a 	bl	8000a20 <MX_CRC_Init>
  MX_DMA2D_Init();
 800070c:	f000 f9e6 	bl	8000adc <MX_DMA2D_Init>
  MX_I2C2_Init();
 8000710:	f000 fa5e 	bl	8000bd0 <MX_I2C2_Init>
  MX_LTDC_Init();
 8000714:	f000 fadc 	bl	8000cd0 <MX_LTDC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000718:	bf00      	nop
 800071a:	e7fd      	b.n	8000718 <main+0x11c>
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b09c      	sub	sp, #112	@ 0x70
 8000724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800072a:	224c      	movs	r2, #76	@ 0x4c
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f00c fe36 	bl	800d3a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	2220      	movs	r2, #32
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f00c fe30 	bl	800d3a0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000740:	2004      	movs	r0, #4
 8000742:	f007 faaf 	bl	8007ca4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000746:	2300      	movs	r3, #0
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	4b2d      	ldr	r3, [pc, #180]	@ (8000800 <SystemClock_Config+0xe0>)
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	4a2c      	ldr	r2, [pc, #176]	@ (8000800 <SystemClock_Config+0xe0>)
 8000750:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000754:	6193      	str	r3, [r2, #24]
 8000756:	4b2a      	ldr	r3, [pc, #168]	@ (8000800 <SystemClock_Config+0xe0>)
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000762:	bf00      	nop
 8000764:	4b26      	ldr	r3, [pc, #152]	@ (8000800 <SystemClock_Config+0xe0>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800076c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000770:	d1f8      	bne.n	8000764 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000772:	2303      	movs	r3, #3
 8000774:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000776:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800077a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800077c:	2301      	movs	r3, #1
 800077e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000780:	2340      	movs	r3, #64	@ 0x40
 8000782:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000784:	2302      	movs	r3, #2
 8000786:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000788:	2302      	movs	r3, #2
 800078a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800078c:	2302      	movs	r3, #2
 800078e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000790:	232c      	movs	r3, #44	@ 0x2c
 8000792:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000794:	2301      	movs	r3, #1
 8000796:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000798:	2302      	movs	r3, #2
 800079a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800079c:	2302      	movs	r3, #2
 800079e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007a0:	230c      	movs	r3, #12
 80007a2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007a4:	2300      	movs	r3, #0
 80007a6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b0:	4618      	mov	r0, r3
 80007b2:	f007 fad1 	bl	8007d58 <HAL_RCC_OscConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80007bc:	f000 fe30 	bl	8001420 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c0:	233f      	movs	r3, #63	@ 0x3f
 80007c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c4:	2303      	movs	r3, #3
 80007c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007cc:	2308      	movs	r3, #8
 80007ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007d0:	2340      	movs	r3, #64	@ 0x40
 80007d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007d4:	2340      	movs	r3, #64	@ 0x40
 80007d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007dc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007de:	2340      	movs	r3, #64	@ 0x40
 80007e0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	2103      	movs	r1, #3
 80007e6:	4618      	mov	r0, r3
 80007e8:	f007 fe90 	bl	800850c <HAL_RCC_ClockConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80007f2:	f000 fe15 	bl	8001420 <Error_Handler>
  }
}
 80007f6:	bf00      	nop
 80007f8:	3770      	adds	r7, #112	@ 0x70
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	58024800 	.word	0x58024800

08000804 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b0ae      	sub	sp, #184	@ 0xb8
 8000808:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800080a:	463b      	mov	r3, r7
 800080c:	22b8      	movs	r2, #184	@ 0xb8
 800080e:	2100      	movs	r1, #0
 8000810:	4618      	mov	r0, r3
 8000812:	f00c fdc5 	bl	800d3a0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI|RCC_PERIPHCLK_CKPER;
 8000816:	f04f 4202 	mov.w	r2, #2181038080	@ 0x82000000
 800081a:	f04f 0300 	mov.w	r3, #0
 800081e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 8000822:	2305      	movs	r3, #5
 8000824:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 8000826:	2350      	movs	r3, #80	@ 0x50
 8000828:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800082a:	2302      	movs	r3, #2
 800082c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800082e:	2302      	movs	r3, #2
 8000830:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000832:	2302      	movs	r3, #2
 8000834:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8000836:	2380      	movs	r3, #128	@ 0x80
 8000838:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800083a:	2300      	movs	r3, #0
 800083c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8000842:	2320      	movs	r3, #32
 8000844:	64fb      	str	r3, [r7, #76]	@ 0x4c
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8000846:	2300      	movs	r3, #0
 8000848:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800084a:	463b      	mov	r3, r7
 800084c:	4618      	mov	r0, r3
 800084e:	f008 fa2b 	bl	8008ca8 <HAL_RCCEx_PeriphCLKConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000858:	f000 fde2 	bl	8001420 <Error_Handler>
  }
}
 800085c:	bf00      	nop
 800085e:	37b8      	adds	r7, #184	@ 0xb8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08c      	sub	sp, #48	@ 0x30
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800086a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000876:	463b      	mov	r3, r7
 8000878:	2224      	movs	r2, #36	@ 0x24
 800087a:	2100      	movs	r1, #0
 800087c:	4618      	mov	r0, r3
 800087e:	f00c fd8f 	bl	800d3a0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000882:	4b34      	ldr	r3, [pc, #208]	@ (8000954 <MX_ADC1_Init+0xf0>)
 8000884:	4a34      	ldr	r2, [pc, #208]	@ (8000958 <MX_ADC1_Init+0xf4>)
 8000886:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000888:	4b32      	ldr	r3, [pc, #200]	@ (8000954 <MX_ADC1_Init+0xf0>)
 800088a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800088e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8000890:	4b30      	ldr	r3, [pc, #192]	@ (8000954 <MX_ADC1_Init+0xf0>)
 8000892:	2204      	movs	r2, #4
 8000894:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000896:	4b2f      	ldr	r3, [pc, #188]	@ (8000954 <MX_ADC1_Init+0xf0>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800089c:	4b2d      	ldr	r3, [pc, #180]	@ (8000954 <MX_ADC1_Init+0xf0>)
 800089e:	2204      	movs	r2, #4
 80008a0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000954 <MX_ADC1_Init+0xf0>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008a8:	4b2a      	ldr	r3, [pc, #168]	@ (8000954 <MX_ADC1_Init+0xf0>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80008ae:	4b29      	ldr	r3, [pc, #164]	@ (8000954 <MX_ADC1_Init+0xf0>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008b4:	4b27      	ldr	r3, [pc, #156]	@ (8000954 <MX_ADC1_Init+0xf0>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008bc:	4b25      	ldr	r3, [pc, #148]	@ (8000954 <MX_ADC1_Init+0xf0>)
 80008be:	2200      	movs	r2, #0
 80008c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008c2:	4b24      	ldr	r3, [pc, #144]	@ (8000954 <MX_ADC1_Init+0xf0>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008c8:	4b22      	ldr	r3, [pc, #136]	@ (8000954 <MX_ADC1_Init+0xf0>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008ce:	4b21      	ldr	r3, [pc, #132]	@ (8000954 <MX_ADC1_Init+0xf0>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000954 <MX_ADC1_Init+0xf0>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 80008da:	4b1e      	ldr	r3, [pc, #120]	@ (8000954 <MX_ADC1_Init+0xf0>)
 80008dc:	2200      	movs	r2, #0
 80008de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008e2:	481c      	ldr	r0, [pc, #112]	@ (8000954 <MX_ADC1_Init+0xf0>)
 80008e4:	f002 f99e 	bl	8002c24 <HAL_ADC_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80008ee:	f000 fd97 	bl	8001420 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 80008f2:	2306      	movs	r3, #6
 80008f4:	627b      	str	r3, [r7, #36]	@ 0x24
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 80008f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000900:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000904:	4619      	mov	r1, r3
 8000906:	4813      	ldr	r0, [pc, #76]	@ (8000954 <MX_ADC1_Init+0xf0>)
 8000908:	f003 f9d8 	bl	8003cbc <HAL_ADCEx_MultiModeConfigChannel>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000912:	f000 fd85 	bl	8001420 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000916:	4b11      	ldr	r3, [pc, #68]	@ (800095c <MX_ADC1_Init+0xf8>)
 8000918:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800091a:	2306      	movs	r3, #6
 800091c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800091e:	2300      	movs	r3, #0
 8000920:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000922:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000926:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000928:	2304      	movs	r3, #4
 800092a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000936:	463b      	mov	r3, r7
 8000938:	4619      	mov	r1, r3
 800093a:	4806      	ldr	r0, [pc, #24]	@ (8000954 <MX_ADC1_Init+0xf0>)
 800093c:	f002 fb7a 	bl	8003034 <HAL_ADC_ConfigChannel>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8000946:	f000 fd6b 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	3730      	adds	r7, #48	@ 0x30
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	2400002c 	.word	0x2400002c
 8000958:	40022000 	.word	0x40022000
 800095c:	08600004 	.word	0x08600004

08000960 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08a      	sub	sp, #40	@ 0x28
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	2224      	movs	r2, #36	@ 0x24
 800096a:	2100      	movs	r1, #0
 800096c:	4618      	mov	r0, r3
 800096e:	f00c fd17 	bl	800d3a0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000972:	4b28      	ldr	r3, [pc, #160]	@ (8000a14 <MX_ADC2_Init+0xb4>)
 8000974:	4a28      	ldr	r2, [pc, #160]	@ (8000a18 <MX_ADC2_Init+0xb8>)
 8000976:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000978:	4b26      	ldr	r3, [pc, #152]	@ (8000a14 <MX_ADC2_Init+0xb4>)
 800097a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800097e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_14B;
 8000980:	4b24      	ldr	r3, [pc, #144]	@ (8000a14 <MX_ADC2_Init+0xb4>)
 8000982:	2204      	movs	r2, #4
 8000984:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000986:	4b23      	ldr	r3, [pc, #140]	@ (8000a14 <MX_ADC2_Init+0xb4>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800098c:	4b21      	ldr	r3, [pc, #132]	@ (8000a14 <MX_ADC2_Init+0xb4>)
 800098e:	2204      	movs	r2, #4
 8000990:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000992:	4b20      	ldr	r3, [pc, #128]	@ (8000a14 <MX_ADC2_Init+0xb4>)
 8000994:	2200      	movs	r2, #0
 8000996:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000998:	4b1e      	ldr	r3, [pc, #120]	@ (8000a14 <MX_ADC2_Init+0xb4>)
 800099a:	2200      	movs	r2, #0
 800099c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800099e:	4b1d      	ldr	r3, [pc, #116]	@ (8000a14 <MX_ADC2_Init+0xb4>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80009a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a14 <MX_ADC2_Init+0xb4>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80009ac:	4b19      	ldr	r3, [pc, #100]	@ (8000a14 <MX_ADC2_Init+0xb4>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009b2:	4b18      	ldr	r3, [pc, #96]	@ (8000a14 <MX_ADC2_Init+0xb4>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009b8:	4b16      	ldr	r3, [pc, #88]	@ (8000a14 <MX_ADC2_Init+0xb4>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 80009be:	4b15      	ldr	r3, [pc, #84]	@ (8000a14 <MX_ADC2_Init+0xb4>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80009c6:	4813      	ldr	r0, [pc, #76]	@ (8000a14 <MX_ADC2_Init+0xb4>)
 80009c8:	f002 f92c 	bl	8002c24 <HAL_ADC_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_ADC2_Init+0x76>
  {
    Error_Handler();
 80009d2:	f000 fd25 	bl	8001420 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80009d6:	4b11      	ldr	r3, [pc, #68]	@ (8000a1c <MX_ADC2_Init+0xbc>)
 80009d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009da:	2306      	movs	r3, #6
 80009dc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009e2:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80009e6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009e8:	2304      	movs	r3, #4
 80009ea:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80009f0:	2300      	movs	r3, #0
 80009f2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	4619      	mov	r1, r3
 80009fa:	4806      	ldr	r0, [pc, #24]	@ (8000a14 <MX_ADC2_Init+0xb4>)
 80009fc:	f002 fb1a 	bl	8003034 <HAL_ADC_ConfigChannel>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000a06:	f000 fd0b 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	3728      	adds	r7, #40	@ 0x28
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	2400009c 	.word	0x2400009c
 8000a18:	40022100 	.word	0x40022100
 8000a1c:	08600004 	.word	0x08600004

08000a20 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000a24:	4b0d      	ldr	r3, [pc, #52]	@ (8000a5c <MX_CRC_Init+0x3c>)
 8000a26:	4a0e      	ldr	r2, [pc, #56]	@ (8000a60 <MX_CRC_Init+0x40>)
 8000a28:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a5c <MX_CRC_Init+0x3c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000a30:	4b0a      	ldr	r3, [pc, #40]	@ (8000a5c <MX_CRC_Init+0x3c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000a36:	4b09      	ldr	r3, [pc, #36]	@ (8000a5c <MX_CRC_Init+0x3c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000a3c:	4b07      	ldr	r3, [pc, #28]	@ (8000a5c <MX_CRC_Init+0x3c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000a42:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <MX_CRC_Init+0x3c>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a48:	4804      	ldr	r0, [pc, #16]	@ (8000a5c <MX_CRC_Init+0x3c>)
 8000a4a:	f003 fb71 	bl	8004130 <HAL_CRC_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000a54:	f000 fce4 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	240001fc 	.word	0x240001fc
 8000a60:	58024c00 	.word	0x58024c00

08000a64 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	@ 0x28
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2224      	movs	r2, #36	@ 0x24
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f00c fc95 	bl	800d3a0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000a76:	4b17      	ldr	r3, [pc, #92]	@ (8000ad4 <MX_DAC1_Init+0x70>)
 8000a78:	4a17      	ldr	r2, [pc, #92]	@ (8000ad8 <MX_DAC1_Init+0x74>)
 8000a7a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000a7c:	4815      	ldr	r0, [pc, #84]	@ (8000ad4 <MX_DAC1_Init+0x70>)
 8000a7e:	f003 fc49 	bl	8004314 <HAL_DAC_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000a88:	f000 fcca 	bl	8001420 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000a94:	2300      	movs	r3, #0
 8000a96:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	480b      	ldr	r0, [pc, #44]	@ (8000ad4 <MX_DAC1_Init+0x70>)
 8000aa8:	f003 fcb6 	bl	8004418 <HAL_DAC_ConfigChannel>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000ab2:	f000 fcb5 	bl	8001420 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	2210      	movs	r2, #16
 8000aba:	4619      	mov	r1, r3
 8000abc:	4805      	ldr	r0, [pc, #20]	@ (8000ad4 <MX_DAC1_Init+0x70>)
 8000abe:	f003 fcab 	bl	8004418 <HAL_DAC_ConfigChannel>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8000ac8:	f000 fcaa 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	3728      	adds	r7, #40	@ 0x28
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	24000220 	.word	0x24000220
 8000ad8:	40007400 	.word	0x40007400

08000adc <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000ae0:	4b19      	ldr	r3, [pc, #100]	@ (8000b48 <MX_DMA2D_Init+0x6c>)
 8000ae2:	4a1a      	ldr	r2, [pc, #104]	@ (8000b4c <MX_DMA2D_Init+0x70>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000ae6:	4b18      	ldr	r3, [pc, #96]	@ (8000b48 <MX_DMA2D_Init+0x6c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000aec:	4b16      	ldr	r3, [pc, #88]	@ (8000b48 <MX_DMA2D_Init+0x6c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000af2:	4b15      	ldr	r3, [pc, #84]	@ (8000b48 <MX_DMA2D_Init+0x6c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000af8:	4b13      	ldr	r3, [pc, #76]	@ (8000b48 <MX_DMA2D_Init+0x6c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000afe:	4b12      	ldr	r3, [pc, #72]	@ (8000b48 <MX_DMA2D_Init+0x6c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000b04:	4b10      	ldr	r3, [pc, #64]	@ (8000b48 <MX_DMA2D_Init+0x6c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b48 <MX_DMA2D_Init+0x6c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000b10:	4b0d      	ldr	r3, [pc, #52]	@ (8000b48 <MX_DMA2D_Init+0x6c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000b16:	4b0c      	ldr	r3, [pc, #48]	@ (8000b48 <MX_DMA2D_Init+0x6c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b48 <MX_DMA2D_Init+0x6c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	65da      	str	r2, [r3, #92]	@ 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000b22:	4809      	ldr	r0, [pc, #36]	@ (8000b48 <MX_DMA2D_Init+0x6c>)
 8000b24:	f005 fa82 	bl	800602c <HAL_DMA2D_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000b2e:	f000 fc77 	bl	8001420 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000b32:	2101      	movs	r1, #1
 8000b34:	4804      	ldr	r0, [pc, #16]	@ (8000b48 <MX_DMA2D_Init+0x6c>)
 8000b36:	f005 fadd 	bl	80060f4 <HAL_DMA2D_ConfigLayer>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8000b40:	f000 fc6e 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	24000234 	.word	0x24000234
 8000b4c:	52001000 	.word	0x52001000

08000b50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b54:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc4 <MX_I2C1_Init+0x74>)
 8000b56:	4a1c      	ldr	r2, [pc, #112]	@ (8000bc8 <MX_I2C1_Init+0x78>)
 8000b58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60404E72;
 8000b5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc4 <MX_I2C1_Init+0x74>)
 8000b5c:	4a1b      	ldr	r2, [pc, #108]	@ (8000bcc <MX_I2C1_Init+0x7c>)
 8000b5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b60:	4b18      	ldr	r3, [pc, #96]	@ (8000bc4 <MX_I2C1_Init+0x74>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b66:	4b17      	ldr	r3, [pc, #92]	@ (8000bc4 <MX_I2C1_Init+0x74>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b6c:	4b15      	ldr	r3, [pc, #84]	@ (8000bc4 <MX_I2C1_Init+0x74>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b72:	4b14      	ldr	r3, [pc, #80]	@ (8000bc4 <MX_I2C1_Init+0x74>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b78:	4b12      	ldr	r3, [pc, #72]	@ (8000bc4 <MX_I2C1_Init+0x74>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b7e:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <MX_I2C1_Init+0x74>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc4 <MX_I2C1_Init+0x74>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b8a:	480e      	ldr	r0, [pc, #56]	@ (8000bc4 <MX_I2C1_Init+0x74>)
 8000b8c:	f005 fd08 	bl	80065a0 <HAL_I2C_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b96:	f000 fc43 	bl	8001420 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4809      	ldr	r0, [pc, #36]	@ (8000bc4 <MX_I2C1_Init+0x74>)
 8000b9e:	f005 fd9b 	bl	80066d8 <HAL_I2CEx_ConfigAnalogFilter>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ba8:	f000 fc3a 	bl	8001420 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bac:	2100      	movs	r1, #0
 8000bae:	4805      	ldr	r0, [pc, #20]	@ (8000bc4 <MX_I2C1_Init+0x74>)
 8000bb0:	f005 fddd 	bl	800676e <HAL_I2CEx_ConfigDigitalFilter>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bba:	f000 fc31 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	2400029c 	.word	0x2400029c
 8000bc8:	40005400 	.word	0x40005400
 8000bcc:	60404e72 	.word	0x60404e72

08000bd0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c44 <MX_I2C2_Init+0x74>)
 8000bd6:	4a1c      	ldr	r2, [pc, #112]	@ (8000c48 <MX_I2C2_Init+0x78>)
 8000bd8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x60404E72;
 8000bda:	4b1a      	ldr	r3, [pc, #104]	@ (8000c44 <MX_I2C2_Init+0x74>)
 8000bdc:	4a1b      	ldr	r2, [pc, #108]	@ (8000c4c <MX_I2C2_Init+0x7c>)
 8000bde:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000be0:	4b18      	ldr	r3, [pc, #96]	@ (8000c44 <MX_I2C2_Init+0x74>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000be6:	4b17      	ldr	r3, [pc, #92]	@ (8000c44 <MX_I2C2_Init+0x74>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bec:	4b15      	ldr	r3, [pc, #84]	@ (8000c44 <MX_I2C2_Init+0x74>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000bf2:	4b14      	ldr	r3, [pc, #80]	@ (8000c44 <MX_I2C2_Init+0x74>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bf8:	4b12      	ldr	r3, [pc, #72]	@ (8000c44 <MX_I2C2_Init+0x74>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bfe:	4b11      	ldr	r3, [pc, #68]	@ (8000c44 <MX_I2C2_Init+0x74>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c04:	4b0f      	ldr	r3, [pc, #60]	@ (8000c44 <MX_I2C2_Init+0x74>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c0a:	480e      	ldr	r0, [pc, #56]	@ (8000c44 <MX_I2C2_Init+0x74>)
 8000c0c:	f005 fcc8 	bl	80065a0 <HAL_I2C_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000c16:	f000 fc03 	bl	8001420 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4809      	ldr	r0, [pc, #36]	@ (8000c44 <MX_I2C2_Init+0x74>)
 8000c1e:	f005 fd5b 	bl	80066d8 <HAL_I2CEx_ConfigAnalogFilter>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000c28:	f000 fbfa 	bl	8001420 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4805      	ldr	r0, [pc, #20]	@ (8000c44 <MX_I2C2_Init+0x74>)
 8000c30:	f005 fd9d 	bl	800676e <HAL_I2CEx_ConfigDigitalFilter>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c3a:	f000 fbf1 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	240002f0 	.word	0x240002f0
 8000c48:	40005800 	.word	0x40005800
 8000c4c:	60404e72 	.word	0x60404e72

08000c50 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000c54:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc4 <MX_I2C4_Init+0x74>)
 8000c56:	4a1c      	ldr	r2, [pc, #112]	@ (8000cc8 <MX_I2C4_Init+0x78>)
 8000c58:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x60404E72;
 8000c5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc4 <MX_I2C4_Init+0x74>)
 8000c5c:	4a1b      	ldr	r2, [pc, #108]	@ (8000ccc <MX_I2C4_Init+0x7c>)
 8000c5e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000c60:	4b18      	ldr	r3, [pc, #96]	@ (8000cc4 <MX_I2C4_Init+0x74>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c66:	4b17      	ldr	r3, [pc, #92]	@ (8000cc4 <MX_I2C4_Init+0x74>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c6c:	4b15      	ldr	r3, [pc, #84]	@ (8000cc4 <MX_I2C4_Init+0x74>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000c72:	4b14      	ldr	r3, [pc, #80]	@ (8000cc4 <MX_I2C4_Init+0x74>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c78:	4b12      	ldr	r3, [pc, #72]	@ (8000cc4 <MX_I2C4_Init+0x74>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c7e:	4b11      	ldr	r3, [pc, #68]	@ (8000cc4 <MX_I2C4_Init+0x74>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c84:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc4 <MX_I2C4_Init+0x74>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000c8a:	480e      	ldr	r0, [pc, #56]	@ (8000cc4 <MX_I2C4_Init+0x74>)
 8000c8c:	f005 fc88 	bl	80065a0 <HAL_I2C_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000c96:	f000 fbc3 	bl	8001420 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4809      	ldr	r0, [pc, #36]	@ (8000cc4 <MX_I2C4_Init+0x74>)
 8000c9e:	f005 fd1b 	bl	80066d8 <HAL_I2CEx_ConfigAnalogFilter>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000ca8:	f000 fbba 	bl	8001420 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000cac:	2100      	movs	r1, #0
 8000cae:	4805      	ldr	r0, [pc, #20]	@ (8000cc4 <MX_I2C4_Init+0x74>)
 8000cb0:	f005 fd5d 	bl	800676e <HAL_I2CEx_ConfigDigitalFilter>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000cba:	f000 fbb1 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	24000344 	.word	0x24000344
 8000cc8:	58001c00 	.word	0x58001c00
 8000ccc:	60404e72 	.word	0x60404e72

08000cd0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08e      	sub	sp, #56	@ 0x38
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	2234      	movs	r2, #52	@ 0x34
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f00c fb5f 	bl	800d3a0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000ce2:	4b3a      	ldr	r3, [pc, #232]	@ (8000dcc <MX_LTDC_Init+0xfc>)
 8000ce4:	4a3a      	ldr	r2, [pc, #232]	@ (8000dd0 <MX_LTDC_Init+0x100>)
 8000ce6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000ce8:	4b38      	ldr	r3, [pc, #224]	@ (8000dcc <MX_LTDC_Init+0xfc>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000cee:	4b37      	ldr	r3, [pc, #220]	@ (8000dcc <MX_LTDC_Init+0xfc>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000cf4:	4b35      	ldr	r3, [pc, #212]	@ (8000dcc <MX_LTDC_Init+0xfc>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000cfa:	4b34      	ldr	r3, [pc, #208]	@ (8000dcc <MX_LTDC_Init+0xfc>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000d00:	4b32      	ldr	r3, [pc, #200]	@ (8000dcc <MX_LTDC_Init+0xfc>)
 8000d02:	2207      	movs	r2, #7
 8000d04:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000d06:	4b31      	ldr	r3, [pc, #196]	@ (8000dcc <MX_LTDC_Init+0xfc>)
 8000d08:	2203      	movs	r2, #3
 8000d0a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000d0c:	4b2f      	ldr	r3, [pc, #188]	@ (8000dcc <MX_LTDC_Init+0xfc>)
 8000d0e:	220e      	movs	r2, #14
 8000d10:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000d12:	4b2e      	ldr	r3, [pc, #184]	@ (8000dcc <MX_LTDC_Init+0xfc>)
 8000d14:	2205      	movs	r2, #5
 8000d16:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000d18:	4b2c      	ldr	r3, [pc, #176]	@ (8000dcc <MX_LTDC_Init+0xfc>)
 8000d1a:	f240 228e 	movw	r2, #654	@ 0x28e
 8000d1e:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000d20:	4b2a      	ldr	r3, [pc, #168]	@ (8000dcc <MX_LTDC_Init+0xfc>)
 8000d22:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8000d26:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8000d28:	4b28      	ldr	r3, [pc, #160]	@ (8000dcc <MX_LTDC_Init+0xfc>)
 8000d2a:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8000d2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000d30:	4b26      	ldr	r3, [pc, #152]	@ (8000dcc <MX_LTDC_Init+0xfc>)
 8000d32:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8000d36:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000d38:	4b24      	ldr	r3, [pc, #144]	@ (8000dcc <MX_LTDC_Init+0xfc>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000d40:	4b22      	ldr	r3, [pc, #136]	@ (8000dcc <MX_LTDC_Init+0xfc>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000d48:	4b20      	ldr	r3, [pc, #128]	@ (8000dcc <MX_LTDC_Init+0xfc>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000d50:	481e      	ldr	r0, [pc, #120]	@ (8000dcc <MX_LTDC_Init+0xfc>)
 8000d52:	f005 fd59 	bl	8006808 <HAL_LTDC_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000d5c:	f000 fb60 	bl	8001420 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000d64:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000d68:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000d6e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000d72:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000d74:	2301      	movs	r3, #1
 8000d76:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000d78:	23ff      	movs	r3, #255	@ 0xff
 8000d7a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000d80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d84:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000d86:	2305      	movs	r3, #5
 8000d88:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0x70000000;
 8000d8a:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8000d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8000d90:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8000d96:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000d9a:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	2200      	movs	r2, #0
 8000db2:	4619      	mov	r1, r3
 8000db4:	4805      	ldr	r0, [pc, #20]	@ (8000dcc <MX_LTDC_Init+0xfc>)
 8000db6:	f005 feb9 	bl	8006b2c <HAL_LTDC_ConfigLayer>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000dc0:	f000 fb2e 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000dc4:	bf00      	nop
 8000dc6:	3738      	adds	r7, #56	@ 0x38
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	24000398 	.word	0x24000398
 8000dd0:	50001000 	.word	0x50001000

08000dd4 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000dda:	463b      	mov	r3, r7
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
 8000de8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000dea:	4b2a      	ldr	r3, [pc, #168]	@ (8000e94 <MX_OCTOSPI1_Init+0xc0>)
 8000dec:	4a2a      	ldr	r2, [pc, #168]	@ (8000e98 <MX_OCTOSPI1_Init+0xc4>)
 8000dee:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 4;
 8000df0:	4b28      	ldr	r3, [pc, #160]	@ (8000e94 <MX_OCTOSPI1_Init+0xc0>)
 8000df2:	2204      	movs	r2, #4
 8000df4:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000df6:	4b27      	ldr	r3, [pc, #156]	@ (8000e94 <MX_OCTOSPI1_Init+0xc0>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8000dfc:	4b25      	ldr	r3, [pc, #148]	@ (8000e94 <MX_OCTOSPI1_Init+0xc0>)
 8000dfe:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000e02:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8000e04:	4b23      	ldr	r3, [pc, #140]	@ (8000e94 <MX_OCTOSPI1_Init+0xc0>)
 8000e06:	2220      	movs	r2, #32
 8000e08:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 8000e0a:	4b22      	ldr	r3, [pc, #136]	@ (8000e94 <MX_OCTOSPI1_Init+0xc0>)
 8000e0c:	2202      	movs	r2, #2
 8000e0e:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000e10:	4b20      	ldr	r3, [pc, #128]	@ (8000e94 <MX_OCTOSPI1_Init+0xc0>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000e16:	4b1f      	ldr	r3, [pc, #124]	@ (8000e94 <MX_OCTOSPI1_Init+0xc0>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000e94 <MX_OCTOSPI1_Init+0xc0>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 2;
 8000e22:	4b1c      	ldr	r3, [pc, #112]	@ (8000e94 <MX_OCTOSPI1_Init+0xc0>)
 8000e24:	2202      	movs	r2, #2
 8000e26:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000e28:	4b1a      	ldr	r3, [pc, #104]	@ (8000e94 <MX_OCTOSPI1_Init+0xc0>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000e2e:	4b19      	ldr	r3, [pc, #100]	@ (8000e94 <MX_OCTOSPI1_Init+0xc0>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8000e34:	4b17      	ldr	r3, [pc, #92]	@ (8000e94 <MX_OCTOSPI1_Init+0xc0>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000e3a:	4b16      	ldr	r3, [pc, #88]	@ (8000e94 <MX_OCTOSPI1_Init+0xc0>)
 8000e3c:	2208      	movs	r2, #8
 8000e3e:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 8000e40:	4b14      	ldr	r3, [pc, #80]	@ (8000e94 <MX_OCTOSPI1_Init+0xc0>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 8000e46:	4b13      	ldr	r3, [pc, #76]	@ (8000e94 <MX_OCTOSPI1_Init+0xc0>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000e4c:	4811      	ldr	r0, [pc, #68]	@ (8000e94 <MX_OCTOSPI1_Init+0xc0>)
 8000e4e:	f006 f845 	bl	8006edc <HAL_OSPI_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_OCTOSPI1_Init+0x88>
  {
    Error_Handler();
 8000e58:	f000 fae2 	bl	8001420 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.DQSPort = 1;
 8000e60:	2301      	movs	r3, #1
 8000e62:	607b      	str	r3, [r7, #4]
  sOspiManagerCfg.NCSPort = 1;
 8000e64:	2301      	movs	r3, #1
 8000e66:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000e68:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8000e6c:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e9c <MX_OCTOSPI1_Init+0xc8>)
 8000e70:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000e72:	463b      	mov	r3, r7
 8000e74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4806      	ldr	r0, [pc, #24]	@ (8000e94 <MX_OCTOSPI1_Init+0xc0>)
 8000e7c:	f006 f938 	bl	80070f0 <HAL_OSPIM_Config>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_OCTOSPI1_Init+0xb6>
  {
    Error_Handler();
 8000e86:	f000 facb 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000e8a:	bf00      	nop
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	24000440 	.word	0x24000440
 8000e98:	52005000 	.word	0x52005000
 8000e9c:	01000001 	.word	0x01000001

08000ea0 <MX_OCTOSPI2_Init>:
  * @brief OCTOSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI2_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	@ 0x28
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000ea6:	f107 0310 	add.w	r3, r7, #16
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
 8000eb4:	611a      	str	r2, [r3, #16]
 8000eb6:	615a      	str	r2, [r3, #20]
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 8000eb8:	463b      	mov	r3, r7
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  /* OCTOSPI2 parameter configuration*/
  hospi2.Instance = OCTOSPI2;
 8000ec4:	4b34      	ldr	r3, [pc, #208]	@ (8000f98 <MX_OCTOSPI2_Init+0xf8>)
 8000ec6:	4a35      	ldr	r2, [pc, #212]	@ (8000f9c <MX_OCTOSPI2_Init+0xfc>)
 8000ec8:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 4;
 8000eca:	4b33      	ldr	r3, [pc, #204]	@ (8000f98 <MX_OCTOSPI2_Init+0xf8>)
 8000ecc:	2204      	movs	r2, #4
 8000ece:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000ed0:	4b31      	ldr	r3, [pc, #196]	@ (8000f98 <MX_OCTOSPI2_Init+0xf8>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 8000ed6:	4b30      	ldr	r3, [pc, #192]	@ (8000f98 <MX_OCTOSPI2_Init+0xf8>)
 8000ed8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000edc:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 24;
 8000ede:	4b2e      	ldr	r3, [pc, #184]	@ (8000f98 <MX_OCTOSPI2_Init+0xf8>)
 8000ee0:	2218      	movs	r2, #24
 8000ee2:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 4;
 8000ee4:	4b2c      	ldr	r3, [pc, #176]	@ (8000f98 <MX_OCTOSPI2_Init+0xf8>)
 8000ee6:	2204      	movs	r2, #4
 8000ee8:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000eea:	4b2b      	ldr	r3, [pc, #172]	@ (8000f98 <MX_OCTOSPI2_Init+0xf8>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000ef0:	4b29      	ldr	r3, [pc, #164]	@ (8000f98 <MX_OCTOSPI2_Init+0xf8>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	61da      	str	r2, [r3, #28]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000ef6:	4b28      	ldr	r3, [pc, #160]	@ (8000f98 <MX_OCTOSPI2_Init+0xf8>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	621a      	str	r2, [r3, #32]
  hospi2.Init.ClockPrescaler = 2;
 8000efc:	4b26      	ldr	r3, [pc, #152]	@ (8000f98 <MX_OCTOSPI2_Init+0xf8>)
 8000efe:	2202      	movs	r2, #2
 8000f00:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000f02:	4b25      	ldr	r3, [pc, #148]	@ (8000f98 <MX_OCTOSPI2_Init+0xf8>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8000f08:	4b23      	ldr	r3, [pc, #140]	@ (8000f98 <MX_OCTOSPI2_Init+0xf8>)
 8000f0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000f0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi2.Init.ChipSelectBoundary = 23;
 8000f10:	4b21      	ldr	r3, [pc, #132]	@ (8000f98 <MX_OCTOSPI2_Init+0xf8>)
 8000f12:	2217      	movs	r2, #23
 8000f14:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 8000f16:	4b20      	ldr	r3, [pc, #128]	@ (8000f98 <MX_OCTOSPI2_Init+0xf8>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi2.Init.MaxTran = 0;
 8000f1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000f98 <MX_OCTOSPI2_Init+0xf8>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi2.Init.Refresh = 400;
 8000f22:	4b1d      	ldr	r3, [pc, #116]	@ (8000f98 <MX_OCTOSPI2_Init+0xf8>)
 8000f24:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000f28:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8000f2a:	481b      	ldr	r0, [pc, #108]	@ (8000f98 <MX_OCTOSPI2_Init+0xf8>)
 8000f2c:	f005 ffd6 	bl	8006edc <HAL_OSPI_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_OCTOSPI2_Init+0x9a>
  {
    Error_Handler();
 8000f36:	f000 fa73 	bl	8001420 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 2;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.DQSPort = 2;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	617b      	str	r3, [r7, #20]
  sOspiManagerCfg.NCSPort = 2;
 8000f42:	2302      	movs	r3, #2
 8000f44:	61bb      	str	r3, [r7, #24]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8000f46:	4b16      	ldr	r3, [pc, #88]	@ (8000fa0 <MX_OCTOSPI2_Init+0x100>)
 8000f48:	61fb      	str	r3, [r7, #28]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8000f4a:	4b16      	ldr	r3, [pc, #88]	@ (8000fa4 <MX_OCTOSPI2_Init+0x104>)
 8000f4c:	623b      	str	r3, [r7, #32]
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000f4e:	f107 0310 	add.w	r3, r7, #16
 8000f52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f56:	4619      	mov	r1, r3
 8000f58:	480f      	ldr	r0, [pc, #60]	@ (8000f98 <MX_OCTOSPI2_Init+0xf8>)
 8000f5a:	f006 f8c9 	bl	80070f0 <HAL_OSPIM_Config>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_OCTOSPI2_Init+0xc8>
  {
    Error_Handler();
 8000f64:	f000 fa5c 	bl	8001420 <Error_Handler>
  }
  sHyperBusCfg.RWRecoveryTime = 3;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	603b      	str	r3, [r7, #0]
  sHyperBusCfg.AccessTime = 6;
 8000f6c:	2306      	movs	r3, #6
 8000f6e:	607b      	str	r3, [r7, #4]
  sHyperBusCfg.WriteZeroLatency = HAL_OSPI_LATENCY_ON_WRITE;
 8000f70:	2300      	movs	r3, #0
 8000f72:	60bb      	str	r3, [r7, #8]
  sHyperBusCfg.LatencyMode = HAL_OSPI_FIXED_LATENCY;
 8000f74:	2301      	movs	r3, #1
 8000f76:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000f78:	463b      	mov	r3, r7
 8000f7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4805      	ldr	r0, [pc, #20]	@ (8000f98 <MX_OCTOSPI2_Init+0xf8>)
 8000f82:	f006 f867 	bl	8007054 <HAL_OSPI_HyperbusCfg>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_OCTOSPI2_Init+0xf0>
  {
    Error_Handler();
 8000f8c:	f000 fa48 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	3728      	adds	r7, #40	@ 0x28
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	2400049c 	.word	0x2400049c
 8000f9c:	5200a000 	.word	0x5200a000
 8000fa0:	00010002 	.word	0x00010002
 8000fa4:	01000002 	.word	0x01000002

08000fa8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b088      	sub	sp, #32
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fae:	f107 0310 	add.w	r3, r7, #16
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fc6:	4b20      	ldr	r3, [pc, #128]	@ (8001048 <MX_TIM1_Init+0xa0>)
 8000fc8:	4a20      	ldr	r2, [pc, #128]	@ (800104c <MX_TIM1_Init+0xa4>)
 8000fca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 275-1;
 8000fcc:	4b1e      	ldr	r3, [pc, #120]	@ (8001048 <MX_TIM1_Init+0xa0>)
 8000fce:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8000fd2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd4:	4b1c      	ldr	r3, [pc, #112]	@ (8001048 <MX_TIM1_Init+0xa0>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10-1;
 8000fda:	4b1b      	ldr	r3, [pc, #108]	@ (8001048 <MX_TIM1_Init+0xa0>)
 8000fdc:	2209      	movs	r2, #9
 8000fde:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe0:	4b19      	ldr	r3, [pc, #100]	@ (8001048 <MX_TIM1_Init+0xa0>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fe6:	4b18      	ldr	r3, [pc, #96]	@ (8001048 <MX_TIM1_Init+0xa0>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fec:	4b16      	ldr	r3, [pc, #88]	@ (8001048 <MX_TIM1_Init+0xa0>)
 8000fee:	2280      	movs	r2, #128	@ 0x80
 8000ff0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ff2:	4815      	ldr	r0, [pc, #84]	@ (8001048 <MX_TIM1_Init+0xa0>)
 8000ff4:	f00a fa3e 	bl	800b474 <HAL_TIM_Base_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000ffe:	f000 fa0f 	bl	8001420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001002:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001006:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001008:	f107 0310 	add.w	r3, r7, #16
 800100c:	4619      	mov	r1, r3
 800100e:	480e      	ldr	r0, [pc, #56]	@ (8001048 <MX_TIM1_Init+0xa0>)
 8001010:	f00a fcbc 	bl	800b98c <HAL_TIM_ConfigClockSource>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800101a:	f000 fa01 	bl	8001420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800101e:	2320      	movs	r3, #32
 8001020:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001022:	2300      	movs	r3, #0
 8001024:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	4619      	mov	r1, r3
 800102e:	4806      	ldr	r0, [pc, #24]	@ (8001048 <MX_TIM1_Init+0xa0>)
 8001030:	f00a ff1c 	bl	800be6c <HAL_TIMEx_MasterConfigSynchronization>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800103a:	f000 f9f1 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800103e:	bf00      	nop
 8001040:	3720      	adds	r7, #32
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	240004f8 	.word	0x240004f8
 800104c:	40010000 	.word	0x40010000

08001050 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08c      	sub	sp, #48	@ 0x30
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001056:	f107 030c 	add.w	r3, r7, #12
 800105a:	2224      	movs	r2, #36	@ 0x24
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f00c f99e 	bl	800d3a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001064:	463b      	mov	r3, r7
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 800106e:	4b20      	ldr	r3, [pc, #128]	@ (80010f0 <MX_TIM23_Init+0xa0>)
 8001070:	4a20      	ldr	r2, [pc, #128]	@ (80010f4 <MX_TIM23_Init+0xa4>)
 8001072:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 8001074:	4b1e      	ldr	r3, [pc, #120]	@ (80010f0 <MX_TIM23_Init+0xa0>)
 8001076:	2200      	movs	r2, #0
 8001078:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107a:	4b1d      	ldr	r3, [pc, #116]	@ (80010f0 <MX_TIM23_Init+0xa0>)
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 400000;
 8001080:	4b1b      	ldr	r3, [pc, #108]	@ (80010f0 <MX_TIM23_Init+0xa0>)
 8001082:	4a1d      	ldr	r2, [pc, #116]	@ (80010f8 <MX_TIM23_Init+0xa8>)
 8001084:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001086:	4b1a      	ldr	r3, [pc, #104]	@ (80010f0 <MX_TIM23_Init+0xa0>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800108c:	4b18      	ldr	r3, [pc, #96]	@ (80010f0 <MX_TIM23_Init+0xa0>)
 800108e:	2200      	movs	r2, #0
 8001090:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001092:	2303      	movs	r3, #3
 8001094:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001096:	2300      	movs	r3, #0
 8001098:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800109a:	2301      	movs	r3, #1
 800109c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800109e:	2300      	movs	r3, #0
 80010a0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80010a2:	230a      	movs	r3, #10
 80010a4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010a6:	2300      	movs	r3, #0
 80010a8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010aa:	2301      	movs	r3, #1
 80010ac:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010ae:	2300      	movs	r3, #0
 80010b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 80010b2:	230a      	movs	r3, #10
 80010b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 80010b6:	f107 030c 	add.w	r3, r7, #12
 80010ba:	4619      	mov	r1, r3
 80010bc:	480c      	ldr	r0, [pc, #48]	@ (80010f0 <MX_TIM23_Init+0xa0>)
 80010be:	f00a fab7 	bl	800b630 <HAL_TIM_Encoder_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM23_Init+0x7c>
  {
    Error_Handler();
 80010c8:	f000 f9aa 	bl	8001420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010cc:	2300      	movs	r3, #0
 80010ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 80010d4:	463b      	mov	r3, r7
 80010d6:	4619      	mov	r1, r3
 80010d8:	4805      	ldr	r0, [pc, #20]	@ (80010f0 <MX_TIM23_Init+0xa0>)
 80010da:	f00a fec7 	bl	800be6c <HAL_TIMEx_MasterConfigSynchronization>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_TIM23_Init+0x98>
  {
    Error_Handler();
 80010e4:	f000 f99c 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 80010e8:	bf00      	nop
 80010ea:	3730      	adds	r7, #48	@ 0x30
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	24000544 	.word	0x24000544
 80010f4:	4000e000 	.word	0x4000e000
 80010f8:	00061a80 	.word	0x00061a80

080010fc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001100:	4b22      	ldr	r3, [pc, #136]	@ (800118c <MX_UART4_Init+0x90>)
 8001102:	4a23      	ldr	r2, [pc, #140]	@ (8001190 <MX_UART4_Init+0x94>)
 8001104:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001106:	4b21      	ldr	r3, [pc, #132]	@ (800118c <MX_UART4_Init+0x90>)
 8001108:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800110c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800110e:	4b1f      	ldr	r3, [pc, #124]	@ (800118c <MX_UART4_Init+0x90>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001114:	4b1d      	ldr	r3, [pc, #116]	@ (800118c <MX_UART4_Init+0x90>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800111a:	4b1c      	ldr	r3, [pc, #112]	@ (800118c <MX_UART4_Init+0x90>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001120:	4b1a      	ldr	r3, [pc, #104]	@ (800118c <MX_UART4_Init+0x90>)
 8001122:	220c      	movs	r2, #12
 8001124:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001126:	4b19      	ldr	r3, [pc, #100]	@ (800118c <MX_UART4_Init+0x90>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800112c:	4b17      	ldr	r3, [pc, #92]	@ (800118c <MX_UART4_Init+0x90>)
 800112e:	2200      	movs	r2, #0
 8001130:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001132:	4b16      	ldr	r3, [pc, #88]	@ (800118c <MX_UART4_Init+0x90>)
 8001134:	2200      	movs	r2, #0
 8001136:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001138:	4b14      	ldr	r3, [pc, #80]	@ (800118c <MX_UART4_Init+0x90>)
 800113a:	2200      	movs	r2, #0
 800113c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800113e:	4b13      	ldr	r3, [pc, #76]	@ (800118c <MX_UART4_Init+0x90>)
 8001140:	2200      	movs	r2, #0
 8001142:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001144:	4811      	ldr	r0, [pc, #68]	@ (800118c <MX_UART4_Init+0x90>)
 8001146:	f00a ff4b 	bl	800bfe0 <HAL_UART_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001150:	f000 f966 	bl	8001420 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001154:	2100      	movs	r1, #0
 8001156:	480d      	ldr	r0, [pc, #52]	@ (800118c <MX_UART4_Init+0x90>)
 8001158:	f00c f857 	bl	800d20a <HAL_UARTEx_SetTxFifoThreshold>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001162:	f000 f95d 	bl	8001420 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001166:	2100      	movs	r1, #0
 8001168:	4808      	ldr	r0, [pc, #32]	@ (800118c <MX_UART4_Init+0x90>)
 800116a:	f00c f88c 	bl	800d286 <HAL_UARTEx_SetRxFifoThreshold>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001174:	f000 f954 	bl	8001420 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001178:	4804      	ldr	r0, [pc, #16]	@ (800118c <MX_UART4_Init+0x90>)
 800117a:	f00c f80d 	bl	800d198 <HAL_UARTEx_DisableFifoMode>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001184:	f000 f94c 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}
 800118c:	24000590 	.word	0x24000590
 8001190:	40004c00 	.word	0x40004c00

08001194 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800119a:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <MX_DMA_Init+0x4c>)
 800119c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011a0:	4a0f      	ldr	r2, [pc, #60]	@ (80011e0 <MX_DMA_Init+0x4c>)
 80011a2:	f043 0301 	orr.w	r3, r3, #1
 80011a6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80011aa:	4b0d      	ldr	r3, [pc, #52]	@ (80011e0 <MX_DMA_Init+0x4c>)
 80011ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011b0:	f003 0301 	and.w	r3, r3, #1
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2100      	movs	r1, #0
 80011bc:	200b      	movs	r0, #11
 80011be:	f002 ff17 	bl	8003ff0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80011c2:	200b      	movs	r0, #11
 80011c4:	f002 ff2e 	bl	8004024 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80011c8:	2200      	movs	r2, #0
 80011ca:	2100      	movs	r1, #0
 80011cc:	200c      	movs	r0, #12
 80011ce:	f002 ff0f 	bl	8003ff0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80011d2:	200c      	movs	r0, #12
 80011d4:	f002 ff26 	bl	8004024 <HAL_NVIC_EnableIRQ>

}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	58024400 	.word	0x58024400

080011e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b08b      	sub	sp, #44	@ 0x2c
 80011e8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ea:	4b4e      	ldr	r3, [pc, #312]	@ (8001324 <MX_GPIO_Init+0x140>)
 80011ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011f0:	4a4c      	ldr	r2, [pc, #304]	@ (8001324 <MX_GPIO_Init+0x140>)
 80011f2:	f043 0310 	orr.w	r3, r3, #16
 80011f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011fa:	4b4a      	ldr	r3, [pc, #296]	@ (8001324 <MX_GPIO_Init+0x140>)
 80011fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001200:	f003 0310 	and.w	r3, r3, #16
 8001204:	627b      	str	r3, [r7, #36]	@ 0x24
 8001206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001208:	4b46      	ldr	r3, [pc, #280]	@ (8001324 <MX_GPIO_Init+0x140>)
 800120a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800120e:	4a45      	ldr	r2, [pc, #276]	@ (8001324 <MX_GPIO_Init+0x140>)
 8001210:	f043 0320 	orr.w	r3, r3, #32
 8001214:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001218:	4b42      	ldr	r3, [pc, #264]	@ (8001324 <MX_GPIO_Init+0x140>)
 800121a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800121e:	f003 0320 	and.w	r3, r3, #32
 8001222:	623b      	str	r3, [r7, #32]
 8001224:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001226:	4b3f      	ldr	r3, [pc, #252]	@ (8001324 <MX_GPIO_Init+0x140>)
 8001228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800122c:	4a3d      	ldr	r2, [pc, #244]	@ (8001324 <MX_GPIO_Init+0x140>)
 800122e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001232:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001236:	4b3b      	ldr	r3, [pc, #236]	@ (8001324 <MX_GPIO_Init+0x140>)
 8001238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800123c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001240:	61fb      	str	r3, [r7, #28]
 8001242:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001244:	4b37      	ldr	r3, [pc, #220]	@ (8001324 <MX_GPIO_Init+0x140>)
 8001246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800124a:	4a36      	ldr	r2, [pc, #216]	@ (8001324 <MX_GPIO_Init+0x140>)
 800124c:	f043 0304 	orr.w	r3, r3, #4
 8001250:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001254:	4b33      	ldr	r3, [pc, #204]	@ (8001324 <MX_GPIO_Init+0x140>)
 8001256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800125a:	f003 0304 	and.w	r3, r3, #4
 800125e:	61bb      	str	r3, [r7, #24]
 8001260:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	4b30      	ldr	r3, [pc, #192]	@ (8001324 <MX_GPIO_Init+0x140>)
 8001264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001268:	4a2e      	ldr	r2, [pc, #184]	@ (8001324 <MX_GPIO_Init+0x140>)
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001272:	4b2c      	ldr	r3, [pc, #176]	@ (8001324 <MX_GPIO_Init+0x140>)
 8001274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001280:	4b28      	ldr	r3, [pc, #160]	@ (8001324 <MX_GPIO_Init+0x140>)
 8001282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001286:	4a27      	ldr	r2, [pc, #156]	@ (8001324 <MX_GPIO_Init+0x140>)
 8001288:	f043 0302 	orr.w	r3, r3, #2
 800128c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001290:	4b24      	ldr	r3, [pc, #144]	@ (8001324 <MX_GPIO_Init+0x140>)
 8001292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800129e:	4b21      	ldr	r3, [pc, #132]	@ (8001324 <MX_GPIO_Init+0x140>)
 80012a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a4:	4a1f      	ldr	r2, [pc, #124]	@ (8001324 <MX_GPIO_Init+0x140>)
 80012a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001324 <MX_GPIO_Init+0x140>)
 80012b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012bc:	4b19      	ldr	r3, [pc, #100]	@ (8001324 <MX_GPIO_Init+0x140>)
 80012be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012c2:	4a18      	ldr	r2, [pc, #96]	@ (8001324 <MX_GPIO_Init+0x140>)
 80012c4:	f043 0308 	orr.w	r3, r3, #8
 80012c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012cc:	4b15      	ldr	r3, [pc, #84]	@ (8001324 <MX_GPIO_Init+0x140>)
 80012ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012d2:	f003 0308 	and.w	r3, r3, #8
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80012da:	4b12      	ldr	r3, [pc, #72]	@ (8001324 <MX_GPIO_Init+0x140>)
 80012dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e0:	4a10      	ldr	r2, [pc, #64]	@ (8001324 <MX_GPIO_Init+0x140>)
 80012e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001324 <MX_GPIO_Init+0x140>)
 80012ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80012f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001324 <MX_GPIO_Init+0x140>)
 80012fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012fe:	4a09      	ldr	r2, [pc, #36]	@ (8001324 <MX_GPIO_Init+0x140>)
 8001300:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001304:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001308:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <MX_GPIO_Init+0x140>)
 800130a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800130e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001316:	bf00      	nop
 8001318:	372c      	adds	r7, #44	@ 0x2c
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	58024400 	.word	0x58024400

08001328 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800132e:	463b      	mov	r3, r7
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800133a:	f002 fe81 	bl	8004040 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800133e:	2301      	movs	r3, #1
 8001340:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001342:	2300      	movs	r3, #0
 8001344:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8001346:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 800134a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 800134c:	2312      	movs	r3, #18
 800134e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001350:	2300      	movs	r3, #0
 8001352:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001354:	2300      	movs	r3, #0
 8001356:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001358:	2303      	movs	r3, #3
 800135a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800135c:	2301      	movs	r3, #1
 800135e:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001364:	2301      	movs	r3, #1
 8001366:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001368:	2301      	movs	r3, #1
 800136a:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800136c:	463b      	mov	r3, r7
 800136e:	4618      	mov	r0, r3
 8001370:	f002 fe9e 	bl	80040b0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001374:	2301      	movs	r3, #1
 8001376:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x70000000;
 8001378:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800137c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 800137e:	231c      	movs	r3, #28
 8001380:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001382:	2300      	movs	r3, #0
 8001384:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001386:	2300      	movs	r3, #0
 8001388:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800138a:	2300      	movs	r3, #0
 800138c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800138e:	463b      	mov	r3, r7
 8001390:	4618      	mov	r0, r3
 8001392:	f002 fe8d 	bl	80040b0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001396:	2302      	movs	r3, #2
 8001398:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 800139a:	2316      	movs	r3, #22
 800139c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800139e:	2303      	movs	r3, #3
 80013a0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80013a2:	2301      	movs	r3, #1
 80013a4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80013a6:	2301      	movs	r3, #1
 80013a8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80013aa:	463b      	mov	r3, r7
 80013ac:	4618      	mov	r0, r3
 80013ae:	f002 fe7f 	bl	80040b0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 80013b2:	2303      	movs	r3, #3
 80013b4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 80013b6:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 80013ba:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 80013bc:	231c      	movs	r3, #28
 80013be:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80013c0:	2300      	movs	r3, #0
 80013c2:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80013c4:	2300      	movs	r3, #0
 80013c6:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80013cc:	463b      	mov	r3, r7
 80013ce:	4618      	mov	r0, r3
 80013d0:	f002 fe6e 	bl	80040b0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 80013d4:	2304      	movs	r3, #4
 80013d6:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 80013d8:	2319      	movs	r3, #25
 80013da:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80013dc:	2303      	movs	r3, #3
 80013de:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80013e0:	2301      	movs	r3, #1
 80013e2:	73bb      	strb	r3, [r7, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80013e4:	463b      	mov	r3, r7
 80013e6:	4618      	mov	r0, r3
 80013e8:	f002 fe62 	bl	80040b0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80013ec:	2004      	movs	r0, #4
 80013ee:	f002 fe3f 	bl	8004070 <HAL_MPU_Enable>

}
 80013f2:	bf00      	nop
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a04      	ldr	r2, [pc, #16]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d101      	bne.n	8001412 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800140e:	f001 f957 	bl	80026c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40001000 	.word	0x40001000

08001420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001424:	b672      	cpsid	i
}
 8001426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <Error_Handler+0x8>

0800142c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001432:	4b15      	ldr	r3, [pc, #84]	@ (8001488 <HAL_MspInit+0x5c>)
 8001434:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001438:	4a13      	ldr	r2, [pc, #76]	@ (8001488 <HAL_MspInit+0x5c>)
 800143a:	f043 0302 	orr.w	r3, r3, #2
 800143e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001442:	4b11      	ldr	r3, [pc, #68]	@ (8001488 <HAL_MspInit+0x5c>)
 8001444:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	607b      	str	r3, [r7, #4]
 800144e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8001450:	4b0d      	ldr	r3, [pc, #52]	@ (8001488 <HAL_MspInit+0x5c>)
 8001452:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001456:	4a0c      	ldr	r2, [pc, #48]	@ (8001488 <HAL_MspInit+0x5c>)
 8001458:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800145c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001460:	4b09      	ldr	r3, [pc, #36]	@ (8001488 <HAL_MspInit+0x5c>)
 8001462:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001466:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800146a:	603b      	str	r3, [r7, #0]
 800146c:	683b      	ldr	r3, [r7, #0]

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 800146e:	2000      	movs	r0, #0
 8001470:	f001 f946 	bl	8002700 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8001474:	f001 f96c 	bl	8002750 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8001478:	2000      	movs	r0, #0
 800147a:	f001 f955 	bl	8002728 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	58024400 	.word	0x58024400

0800148c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b0ba      	sub	sp, #232	@ 0xe8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014a4:	f107 0318 	add.w	r3, r7, #24
 80014a8:	22b8      	movs	r2, #184	@ 0xb8
 80014aa:	2100      	movs	r1, #0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f00b ff77 	bl	800d3a0 <memset>
  if(hadc->Instance==ADC1)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a81      	ldr	r2, [pc, #516]	@ (80016bc <HAL_ADC_MspInit+0x230>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d17b      	bne.n	80015b4 <HAL_ADC_MspInit+0x128>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014bc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80014c0:	f04f 0300 	mov.w	r3, #0
 80014c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 80014c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014d0:	f107 0318 	add.w	r3, r7, #24
 80014d4:	4618      	mov	r0, r3
 80014d6:	f007 fbe7 	bl	8008ca8 <HAL_RCCEx_PeriphCLKConfig>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 80014e0:	f7ff ff9e 	bl	8001420 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80014e4:	4b76      	ldr	r3, [pc, #472]	@ (80016c0 <HAL_ADC_MspInit+0x234>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	3301      	adds	r3, #1
 80014ea:	4a75      	ldr	r2, [pc, #468]	@ (80016c0 <HAL_ADC_MspInit+0x234>)
 80014ec:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80014ee:	4b74      	ldr	r3, [pc, #464]	@ (80016c0 <HAL_ADC_MspInit+0x234>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d10e      	bne.n	8001514 <HAL_ADC_MspInit+0x88>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80014f6:	4b73      	ldr	r3, [pc, #460]	@ (80016c4 <HAL_ADC_MspInit+0x238>)
 80014f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80014fc:	4a71      	ldr	r2, [pc, #452]	@ (80016c4 <HAL_ADC_MspInit+0x238>)
 80014fe:	f043 0320 	orr.w	r3, r3, #32
 8001502:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001506:	4b6f      	ldr	r3, [pc, #444]	@ (80016c4 <HAL_ADC_MspInit+0x238>)
 8001508:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800150c:	f003 0320 	and.w	r3, r3, #32
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001514:	4b6b      	ldr	r3, [pc, #428]	@ (80016c4 <HAL_ADC_MspInit+0x238>)
 8001516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800151a:	4a6a      	ldr	r2, [pc, #424]	@ (80016c4 <HAL_ADC_MspInit+0x238>)
 800151c:	f043 0320 	orr.w	r3, r3, #32
 8001520:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001524:	4b67      	ldr	r3, [pc, #412]	@ (80016c4 <HAL_ADC_MspInit+0x238>)
 8001526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800152a:	f003 0320 	and.w	r3, r3, #32
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001532:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001536:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800153a:	2303      	movs	r3, #3
 800153c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001546:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800154a:	4619      	mov	r1, r3
 800154c:	485e      	ldr	r0, [pc, #376]	@ (80016c8 <HAL_ADC_MspInit+0x23c>)
 800154e:	f004 fe7f 	bl	8006250 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001552:	4b5e      	ldr	r3, [pc, #376]	@ (80016cc <HAL_ADC_MspInit+0x240>)
 8001554:	4a5e      	ldr	r2, [pc, #376]	@ (80016d0 <HAL_ADC_MspInit+0x244>)
 8001556:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001558:	4b5c      	ldr	r3, [pc, #368]	@ (80016cc <HAL_ADC_MspInit+0x240>)
 800155a:	2209      	movs	r2, #9
 800155c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800155e:	4b5b      	ldr	r3, [pc, #364]	@ (80016cc <HAL_ADC_MspInit+0x240>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001564:	4b59      	ldr	r3, [pc, #356]	@ (80016cc <HAL_ADC_MspInit+0x240>)
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800156a:	4b58      	ldr	r3, [pc, #352]	@ (80016cc <HAL_ADC_MspInit+0x240>)
 800156c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001570:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001572:	4b56      	ldr	r3, [pc, #344]	@ (80016cc <HAL_ADC_MspInit+0x240>)
 8001574:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001578:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800157a:	4b54      	ldr	r3, [pc, #336]	@ (80016cc <HAL_ADC_MspInit+0x240>)
 800157c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001580:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001582:	4b52      	ldr	r3, [pc, #328]	@ (80016cc <HAL_ADC_MspInit+0x240>)
 8001584:	2200      	movs	r2, #0
 8001586:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001588:	4b50      	ldr	r3, [pc, #320]	@ (80016cc <HAL_ADC_MspInit+0x240>)
 800158a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800158e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001590:	4b4e      	ldr	r3, [pc, #312]	@ (80016cc <HAL_ADC_MspInit+0x240>)
 8001592:	2200      	movs	r2, #0
 8001594:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001596:	484d      	ldr	r0, [pc, #308]	@ (80016cc <HAL_ADC_MspInit+0x240>)
 8001598:	f003 f88a 	bl	80046b0 <HAL_DMA_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_ADC_MspInit+0x11a>
    {
      Error_Handler();
 80015a2:	f7ff ff3d 	bl	8001420 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a48      	ldr	r2, [pc, #288]	@ (80016cc <HAL_ADC_MspInit+0x240>)
 80015aa:	659a      	str	r2, [r3, #88]	@ 0x58
 80015ac:	4a47      	ldr	r2, [pc, #284]	@ (80016cc <HAL_ADC_MspInit+0x240>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80015b2:	e07f      	b.n	80016b4 <HAL_ADC_MspInit+0x228>
  else if(hadc->Instance==ADC2)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a46      	ldr	r2, [pc, #280]	@ (80016d4 <HAL_ADC_MspInit+0x248>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d17a      	bne.n	80016b4 <HAL_ADC_MspInit+0x228>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80015be:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80015c2:	f04f 0300 	mov.w	r3, #0
 80015c6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 80015ca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80015ce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015d2:	f107 0318 	add.w	r3, r7, #24
 80015d6:	4618      	mov	r0, r3
 80015d8:	f007 fb66 	bl	8008ca8 <HAL_RCCEx_PeriphCLKConfig>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <HAL_ADC_MspInit+0x15a>
      Error_Handler();
 80015e2:	f7ff ff1d 	bl	8001420 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80015e6:	4b36      	ldr	r3, [pc, #216]	@ (80016c0 <HAL_ADC_MspInit+0x234>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	3301      	adds	r3, #1
 80015ec:	4a34      	ldr	r2, [pc, #208]	@ (80016c0 <HAL_ADC_MspInit+0x234>)
 80015ee:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80015f0:	4b33      	ldr	r3, [pc, #204]	@ (80016c0 <HAL_ADC_MspInit+0x234>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d10e      	bne.n	8001616 <HAL_ADC_MspInit+0x18a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80015f8:	4b32      	ldr	r3, [pc, #200]	@ (80016c4 <HAL_ADC_MspInit+0x238>)
 80015fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80015fe:	4a31      	ldr	r2, [pc, #196]	@ (80016c4 <HAL_ADC_MspInit+0x238>)
 8001600:	f043 0320 	orr.w	r3, r3, #32
 8001604:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001608:	4b2e      	ldr	r3, [pc, #184]	@ (80016c4 <HAL_ADC_MspInit+0x238>)
 800160a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800160e:	f003 0320 	and.w	r3, r3, #32
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001616:	4b2b      	ldr	r3, [pc, #172]	@ (80016c4 <HAL_ADC_MspInit+0x238>)
 8001618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800161c:	4a29      	ldr	r2, [pc, #164]	@ (80016c4 <HAL_ADC_MspInit+0x238>)
 800161e:	f043 0320 	orr.w	r3, r3, #32
 8001622:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001626:	4b27      	ldr	r3, [pc, #156]	@ (80016c4 <HAL_ADC_MspInit+0x238>)
 8001628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800162c:	f003 0320 	and.w	r3, r3, #32
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001634:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001638:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800163c:	2303      	movs	r3, #3
 800163e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001648:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800164c:	4619      	mov	r1, r3
 800164e:	481e      	ldr	r0, [pc, #120]	@ (80016c8 <HAL_ADC_MspInit+0x23c>)
 8001650:	f004 fdfe 	bl	8006250 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream1;
 8001654:	4b20      	ldr	r3, [pc, #128]	@ (80016d8 <HAL_ADC_MspInit+0x24c>)
 8001656:	4a21      	ldr	r2, [pc, #132]	@ (80016dc <HAL_ADC_MspInit+0x250>)
 8001658:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800165a:	4b1f      	ldr	r3, [pc, #124]	@ (80016d8 <HAL_ADC_MspInit+0x24c>)
 800165c:	220a      	movs	r2, #10
 800165e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001660:	4b1d      	ldr	r3, [pc, #116]	@ (80016d8 <HAL_ADC_MspInit+0x24c>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001666:	4b1c      	ldr	r3, [pc, #112]	@ (80016d8 <HAL_ADC_MspInit+0x24c>)
 8001668:	2200      	movs	r2, #0
 800166a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800166c:	4b1a      	ldr	r3, [pc, #104]	@ (80016d8 <HAL_ADC_MspInit+0x24c>)
 800166e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001672:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001674:	4b18      	ldr	r3, [pc, #96]	@ (80016d8 <HAL_ADC_MspInit+0x24c>)
 8001676:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800167a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800167c:	4b16      	ldr	r3, [pc, #88]	@ (80016d8 <HAL_ADC_MspInit+0x24c>)
 800167e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001682:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8001684:	4b14      	ldr	r3, [pc, #80]	@ (80016d8 <HAL_ADC_MspInit+0x24c>)
 8001686:	2200      	movs	r2, #0
 8001688:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 800168a:	4b13      	ldr	r3, [pc, #76]	@ (80016d8 <HAL_ADC_MspInit+0x24c>)
 800168c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001690:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001692:	4b11      	ldr	r3, [pc, #68]	@ (80016d8 <HAL_ADC_MspInit+0x24c>)
 8001694:	2200      	movs	r2, #0
 8001696:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001698:	480f      	ldr	r0, [pc, #60]	@ (80016d8 <HAL_ADC_MspInit+0x24c>)
 800169a:	f003 f809 	bl	80046b0 <HAL_DMA_Init>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <HAL_ADC_MspInit+0x21c>
      Error_Handler();
 80016a4:	f7ff febc 	bl	8001420 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a0b      	ldr	r2, [pc, #44]	@ (80016d8 <HAL_ADC_MspInit+0x24c>)
 80016ac:	659a      	str	r2, [r3, #88]	@ 0x58
 80016ae:	4a0a      	ldr	r2, [pc, #40]	@ (80016d8 <HAL_ADC_MspInit+0x24c>)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80016b4:	bf00      	nop
 80016b6:	37e8      	adds	r7, #232	@ 0xe8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40022000 	.word	0x40022000
 80016c0:	24000624 	.word	0x24000624
 80016c4:	58024400 	.word	0x58024400
 80016c8:	58021400 	.word	0x58021400
 80016cc:	2400010c 	.word	0x2400010c
 80016d0:	40020010 	.word	0x40020010
 80016d4:	40022100 	.word	0x40022100
 80016d8:	24000184 	.word	0x24000184
 80016dc:	40020028 	.word	0x40020028

080016e0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a0b      	ldr	r2, [pc, #44]	@ (800171c <HAL_CRC_MspInit+0x3c>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d10e      	bne.n	8001710 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80016f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001720 <HAL_CRC_MspInit+0x40>)
 80016f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016f8:	4a09      	ldr	r2, [pc, #36]	@ (8001720 <HAL_CRC_MspInit+0x40>)
 80016fa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80016fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001702:	4b07      	ldr	r3, [pc, #28]	@ (8001720 <HAL_CRC_MspInit+0x40>)
 8001704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001708:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001710:	bf00      	nop
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	58024c00 	.word	0x58024c00
 8001720:	58024400 	.word	0x58024400

08001724 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08a      	sub	sp, #40	@ 0x28
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a1c      	ldr	r2, [pc, #112]	@ (80017b4 <HAL_DAC_MspInit+0x90>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d131      	bne.n	80017aa <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001746:	4b1c      	ldr	r3, [pc, #112]	@ (80017b8 <HAL_DAC_MspInit+0x94>)
 8001748:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800174c:	4a1a      	ldr	r2, [pc, #104]	@ (80017b8 <HAL_DAC_MspInit+0x94>)
 800174e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001752:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001756:	4b18      	ldr	r3, [pc, #96]	@ (80017b8 <HAL_DAC_MspInit+0x94>)
 8001758:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800175c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001764:	4b14      	ldr	r3, [pc, #80]	@ (80017b8 <HAL_DAC_MspInit+0x94>)
 8001766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800176a:	4a13      	ldr	r2, [pc, #76]	@ (80017b8 <HAL_DAC_MspInit+0x94>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001774:	4b10      	ldr	r3, [pc, #64]	@ (80017b8 <HAL_DAC_MspInit+0x94>)
 8001776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001782:	2330      	movs	r3, #48	@ 0x30
 8001784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001786:	2303      	movs	r3, #3
 8001788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178e:	f107 0314 	add.w	r3, r7, #20
 8001792:	4619      	mov	r1, r3
 8001794:	4809      	ldr	r0, [pc, #36]	@ (80017bc <HAL_DAC_MspInit+0x98>)
 8001796:	f004 fd5b 	bl	8006250 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	210f      	movs	r1, #15
 800179e:	2036      	movs	r0, #54	@ 0x36
 80017a0:	f002 fc26 	bl	8003ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017a4:	2036      	movs	r0, #54	@ 0x36
 80017a6:	f002 fc3d 	bl	8004024 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80017aa:	bf00      	nop
 80017ac:	3728      	adds	r7, #40	@ 0x28
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40007400 	.word	0x40007400
 80017b8:	58024400 	.word	0x58024400
 80017bc:	58020000 	.word	0x58020000

080017c0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a0b      	ldr	r2, [pc, #44]	@ (80017fc <HAL_DMA2D_MspInit+0x3c>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d10e      	bne.n	80017f0 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80017d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001800 <HAL_DMA2D_MspInit+0x40>)
 80017d4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80017d8:	4a09      	ldr	r2, [pc, #36]	@ (8001800 <HAL_DMA2D_MspInit+0x40>)
 80017da:	f043 0310 	orr.w	r3, r3, #16
 80017de:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80017e2:	4b07      	ldr	r3, [pc, #28]	@ (8001800 <HAL_DMA2D_MspInit+0x40>)
 80017e4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80017e8:	f003 0310 	and.w	r3, r3, #16
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	52001000 	.word	0x52001000
 8001800:	58024400 	.word	0x58024400

08001804 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b0bc      	sub	sp, #240	@ 0xf0
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800181c:	f107 0320 	add.w	r3, r7, #32
 8001820:	22b8      	movs	r2, #184	@ 0xb8
 8001822:	2100      	movs	r1, #0
 8001824:	4618      	mov	r0, r3
 8001826:	f00b fdbb 	bl	800d3a0 <memset>
  if(hi2c->Instance==I2C1)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a73      	ldr	r2, [pc, #460]	@ (80019fc <HAL_I2C_MspInit+0x1f8>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d146      	bne.n	80018c2 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001834:	f04f 0208 	mov.w	r2, #8
 8001838:	f04f 0300 	mov.w	r3, #0
 800183c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001840:	2300      	movs	r3, #0
 8001842:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001846:	f107 0320 	add.w	r3, r7, #32
 800184a:	4618      	mov	r0, r3
 800184c:	f007 fa2c 	bl	8008ca8 <HAL_RCCEx_PeriphCLKConfig>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001856:	f7ff fde3 	bl	8001420 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800185a:	4b69      	ldr	r3, [pc, #420]	@ (8001a00 <HAL_I2C_MspInit+0x1fc>)
 800185c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001860:	4a67      	ldr	r2, [pc, #412]	@ (8001a00 <HAL_I2C_MspInit+0x1fc>)
 8001862:	f043 0302 	orr.w	r3, r3, #2
 8001866:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800186a:	4b65      	ldr	r3, [pc, #404]	@ (8001a00 <HAL_I2C_MspInit+0x1fc>)
 800186c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	61fb      	str	r3, [r7, #28]
 8001876:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001878:	23c0      	movs	r3, #192	@ 0xc0
 800187a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800187e:	2312      	movs	r3, #18
 8001880:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188a:	2300      	movs	r3, #0
 800188c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001890:	2304      	movs	r3, #4
 8001892:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001896:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800189a:	4619      	mov	r1, r3
 800189c:	4859      	ldr	r0, [pc, #356]	@ (8001a04 <HAL_I2C_MspInit+0x200>)
 800189e:	f004 fcd7 	bl	8006250 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018a2:	4b57      	ldr	r3, [pc, #348]	@ (8001a00 <HAL_I2C_MspInit+0x1fc>)
 80018a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018a8:	4a55      	ldr	r2, [pc, #340]	@ (8001a00 <HAL_I2C_MspInit+0x1fc>)
 80018aa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018ae:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80018b2:	4b53      	ldr	r3, [pc, #332]	@ (8001a00 <HAL_I2C_MspInit+0x1fc>)
 80018b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018bc:	61bb      	str	r3, [r7, #24]
 80018be:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80018c0:	e098      	b.n	80019f4 <HAL_I2C_MspInit+0x1f0>
  else if(hi2c->Instance==I2C2)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a50      	ldr	r2, [pc, #320]	@ (8001a08 <HAL_I2C_MspInit+0x204>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d147      	bne.n	800195c <HAL_I2C_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80018cc:	f04f 0208 	mov.w	r2, #8
 80018d0:	f04f 0300 	mov.w	r3, #0
 80018d4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80018d8:	2300      	movs	r3, #0
 80018da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018de:	f107 0320 	add.w	r3, r7, #32
 80018e2:	4618      	mov	r0, r3
 80018e4:	f007 f9e0 	bl	8008ca8 <HAL_RCCEx_PeriphCLKConfig>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 80018ee:	f7ff fd97 	bl	8001420 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f2:	4b43      	ldr	r3, [pc, #268]	@ (8001a00 <HAL_I2C_MspInit+0x1fc>)
 80018f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018f8:	4a41      	ldr	r2, [pc, #260]	@ (8001a00 <HAL_I2C_MspInit+0x1fc>)
 80018fa:	f043 0302 	orr.w	r3, r3, #2
 80018fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001902:	4b3f      	ldr	r3, [pc, #252]	@ (8001a00 <HAL_I2C_MspInit+0x1fc>)
 8001904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001910:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001914:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001918:	2312      	movs	r3, #18
 800191a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001924:	2300      	movs	r3, #0
 8001926:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800192a:	2304      	movs	r3, #4
 800192c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001930:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001934:	4619      	mov	r1, r3
 8001936:	4833      	ldr	r0, [pc, #204]	@ (8001a04 <HAL_I2C_MspInit+0x200>)
 8001938:	f004 fc8a 	bl	8006250 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800193c:	4b30      	ldr	r3, [pc, #192]	@ (8001a00 <HAL_I2C_MspInit+0x1fc>)
 800193e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001942:	4a2f      	ldr	r2, [pc, #188]	@ (8001a00 <HAL_I2C_MspInit+0x1fc>)
 8001944:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001948:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800194c:	4b2c      	ldr	r3, [pc, #176]	@ (8001a00 <HAL_I2C_MspInit+0x1fc>)
 800194e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001952:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]
}
 800195a:	e04b      	b.n	80019f4 <HAL_I2C_MspInit+0x1f0>
  else if(hi2c->Instance==I2C4)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a2a      	ldr	r2, [pc, #168]	@ (8001a0c <HAL_I2C_MspInit+0x208>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d146      	bne.n	80019f4 <HAL_I2C_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001966:	f04f 0210 	mov.w	r2, #16
 800196a:	f04f 0300 	mov.w	r3, #0
 800196e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001972:	2300      	movs	r3, #0
 8001974:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001978:	f107 0320 	add.w	r3, r7, #32
 800197c:	4618      	mov	r0, r3
 800197e:	f007 f993 	bl	8008ca8 <HAL_RCCEx_PeriphCLKConfig>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <HAL_I2C_MspInit+0x188>
      Error_Handler();
 8001988:	f7ff fd4a 	bl	8001420 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800198c:	4b1c      	ldr	r3, [pc, #112]	@ (8001a00 <HAL_I2C_MspInit+0x1fc>)
 800198e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001992:	4a1b      	ldr	r2, [pc, #108]	@ (8001a00 <HAL_I2C_MspInit+0x1fc>)
 8001994:	f043 0320 	orr.w	r3, r3, #32
 8001998:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800199c:	4b18      	ldr	r3, [pc, #96]	@ (8001a00 <HAL_I2C_MspInit+0x1fc>)
 800199e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019a2:	f003 0320 	and.w	r3, r3, #32
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80019aa:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80019ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019b2:	2312      	movs	r3, #18
 80019b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019be:	2300      	movs	r3, #0
 80019c0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80019c4:	2304      	movs	r3, #4
 80019c6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019ca:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80019ce:	4619      	mov	r1, r3
 80019d0:	480f      	ldr	r0, [pc, #60]	@ (8001a10 <HAL_I2C_MspInit+0x20c>)
 80019d2:	f004 fc3d 	bl	8006250 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80019d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001a00 <HAL_I2C_MspInit+0x1fc>)
 80019d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80019dc:	4a08      	ldr	r2, [pc, #32]	@ (8001a00 <HAL_I2C_MspInit+0x1fc>)
 80019de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019e2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80019e6:	4b06      	ldr	r3, [pc, #24]	@ (8001a00 <HAL_I2C_MspInit+0x1fc>)
 80019e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80019ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019f0:	60bb      	str	r3, [r7, #8]
 80019f2:	68bb      	ldr	r3, [r7, #8]
}
 80019f4:	bf00      	nop
 80019f6:	37f0      	adds	r7, #240	@ 0xf0
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40005400 	.word	0x40005400
 8001a00:	58024400 	.word	0x58024400
 8001a04:	58020400 	.word	0x58020400
 8001a08:	40005800 	.word	0x40005800
 8001a0c:	58001c00 	.word	0x58001c00
 8001a10:	58021400 	.word	0x58021400

08001a14 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b0c0      	sub	sp, #256	@ 0x100
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a2c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a30:	22b8      	movs	r2, #184	@ 0xb8
 8001a32:	2100      	movs	r1, #0
 8001a34:	4618      	mov	r0, r3
 8001a36:	f00b fcb3 	bl	800d3a0 <memset>
  if(hltdc->Instance==LTDC)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4ad9      	ldr	r2, [pc, #868]	@ (8001da4 <HAL_LTDC_MspInit+0x390>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	f040 81d9 	bne.w	8001df8 <HAL_LTDC_MspInit+0x3e4>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001a46:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001a4a:	f04f 0300 	mov.w	r3, #0
 8001a4e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 8001a52:	2319      	movs	r3, #25
 8001a54:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3N = 288;
 8001a56:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001a5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001a60:	2302      	movs	r3, #2
 8001a62:	667b      	str	r3, [r7, #100]	@ 0x64
    PeriphClkInitStruct.PLL3.PLL3R = 30;
 8001a64:	231e      	movs	r3, #30
 8001a66:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001a6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a70:	673b      	str	r3, [r7, #112]	@ 0x70
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0.0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a76:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f007 f914 	bl	8008ca8 <HAL_RCCEx_PeriphCLKConfig>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <HAL_LTDC_MspInit+0x76>
    {
      Error_Handler();
 8001a86:	f7ff fccb 	bl	8001420 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001a8a:	4bc7      	ldr	r3, [pc, #796]	@ (8001da8 <HAL_LTDC_MspInit+0x394>)
 8001a8c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001a90:	4ac5      	ldr	r2, [pc, #788]	@ (8001da8 <HAL_LTDC_MspInit+0x394>)
 8001a92:	f043 0308 	orr.w	r3, r3, #8
 8001a96:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8001a9a:	4bc3      	ldr	r3, [pc, #780]	@ (8001da8 <HAL_LTDC_MspInit+0x394>)
 8001a9c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001aa0:	f003 0308 	and.w	r3, r3, #8
 8001aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001aa8:	4bbf      	ldr	r3, [pc, #764]	@ (8001da8 <HAL_LTDC_MspInit+0x394>)
 8001aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aae:	4abe      	ldr	r2, [pc, #760]	@ (8001da8 <HAL_LTDC_MspInit+0x394>)
 8001ab0:	f043 0310 	orr.w	r3, r3, #16
 8001ab4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ab8:	4bbb      	ldr	r3, [pc, #748]	@ (8001da8 <HAL_LTDC_MspInit+0x394>)
 8001aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001abe:	f003 0310 	and.w	r3, r3, #16
 8001ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ac6:	4bb8      	ldr	r3, [pc, #736]	@ (8001da8 <HAL_LTDC_MspInit+0x394>)
 8001ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001acc:	4ab6      	ldr	r2, [pc, #728]	@ (8001da8 <HAL_LTDC_MspInit+0x394>)
 8001ace:	f043 0320 	orr.w	r3, r3, #32
 8001ad2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ad6:	4bb4      	ldr	r3, [pc, #720]	@ (8001da8 <HAL_LTDC_MspInit+0x394>)
 8001ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001adc:	f003 0320 	and.w	r3, r3, #32
 8001ae0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ae4:	4bb0      	ldr	r3, [pc, #704]	@ (8001da8 <HAL_LTDC_MspInit+0x394>)
 8001ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aea:	4aaf      	ldr	r2, [pc, #700]	@ (8001da8 <HAL_LTDC_MspInit+0x394>)
 8001aec:	f043 0304 	orr.w	r3, r3, #4
 8001af0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001af4:	4bac      	ldr	r3, [pc, #688]	@ (8001da8 <HAL_LTDC_MspInit+0x394>)
 8001af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001afa:	f003 0304 	and.w	r3, r3, #4
 8001afe:	623b      	str	r3, [r7, #32]
 8001b00:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b02:	4ba9      	ldr	r3, [pc, #676]	@ (8001da8 <HAL_LTDC_MspInit+0x394>)
 8001b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b08:	4aa7      	ldr	r2, [pc, #668]	@ (8001da8 <HAL_LTDC_MspInit+0x394>)
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b12:	4ba5      	ldr	r3, [pc, #660]	@ (8001da8 <HAL_LTDC_MspInit+0x394>)
 8001b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	61fb      	str	r3, [r7, #28]
 8001b1e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b20:	4ba1      	ldr	r3, [pc, #644]	@ (8001da8 <HAL_LTDC_MspInit+0x394>)
 8001b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b26:	4aa0      	ldr	r2, [pc, #640]	@ (8001da8 <HAL_LTDC_MspInit+0x394>)
 8001b28:	f043 0302 	orr.w	r3, r3, #2
 8001b2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b30:	4b9d      	ldr	r3, [pc, #628]	@ (8001da8 <HAL_LTDC_MspInit+0x394>)
 8001b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	61bb      	str	r3, [r7, #24]
 8001b3c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b3e:	4b9a      	ldr	r3, [pc, #616]	@ (8001da8 <HAL_LTDC_MspInit+0x394>)
 8001b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b44:	4a98      	ldr	r2, [pc, #608]	@ (8001da8 <HAL_LTDC_MspInit+0x394>)
 8001b46:	f043 0308 	orr.w	r3, r3, #8
 8001b4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b4e:	4b96      	ldr	r3, [pc, #600]	@ (8001da8 <HAL_LTDC_MspInit+0x394>)
 8001b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b54:	f003 0308 	and.w	r3, r3, #8
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001b5c:	4b92      	ldr	r3, [pc, #584]	@ (8001da8 <HAL_LTDC_MspInit+0x394>)
 8001b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b62:	4a91      	ldr	r2, [pc, #580]	@ (8001da8 <HAL_LTDC_MspInit+0x394>)
 8001b64:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b6c:	4b8e      	ldr	r3, [pc, #568]	@ (8001da8 <HAL_LTDC_MspInit+0x394>)
 8001b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001b7a:	4b8b      	ldr	r3, [pc, #556]	@ (8001da8 <HAL_LTDC_MspInit+0x394>)
 8001b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b80:	4a89      	ldr	r2, [pc, #548]	@ (8001da8 <HAL_LTDC_MspInit+0x394>)
 8001b82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b8a:	4b87      	ldr	r3, [pc, #540]	@ (8001da8 <HAL_LTDC_MspInit+0x394>)
 8001b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b98:	4b83      	ldr	r3, [pc, #524]	@ (8001da8 <HAL_LTDC_MspInit+0x394>)
 8001b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b9e:	4a82      	ldr	r2, [pc, #520]	@ (8001da8 <HAL_LTDC_MspInit+0x394>)
 8001ba0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ba4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ba8:	4b7f      	ldr	r3, [pc, #508]	@ (8001da8 <HAL_LTDC_MspInit+0x394>)
 8001baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bb2:	60bb      	str	r3, [r7, #8]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
    PA11     ------> LTDC_R4
    PA15(JTDI)     ------> LTDC_B6
    PD2     ------> LTDC_B7
    PG13     ------> LTDC_R0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_11
 8001bb6:	f645 0370 	movw	r3, #22640	@ 0x5870
 8001bba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
                          |GPIO_PIN_12|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001bd0:	230e      	movs	r3, #14
 8001bd2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bd6:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4873      	ldr	r0, [pc, #460]	@ (8001dac <HAL_LTDC_MspInit+0x398>)
 8001bde:	f004 fb37 	bl	8006250 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001be2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001be6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bea:	2302      	movs	r3, #2
 8001bec:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001bfc:	230e      	movs	r3, #14
 8001bfe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c02:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001c06:	4619      	mov	r1, r3
 8001c08:	4869      	ldr	r0, [pc, #420]	@ (8001db0 <HAL_LTDC_MspInit+0x39c>)
 8001c0a:	f004 fb21 	bl	8006250 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c14:	2302      	movs	r3, #2
 8001c16:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 8001c26:	230b      	movs	r3, #11
 8001c28:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c2c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001c30:	4619      	mov	r1, r3
 8001c32:	4860      	ldr	r0, [pc, #384]	@ (8001db4 <HAL_LTDC_MspInit+0x3a0>)
 8001c34:	f004 fb0c 	bl	8006250 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_9;
 8001c38:	f240 2352 	movw	r3, #594	@ 0x252
 8001c3c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c40:	2302      	movs	r3, #2
 8001c42:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c52:	230e      	movs	r3, #14
 8001c54:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c58:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4855      	ldr	r0, [pc, #340]	@ (8001db4 <HAL_LTDC_MspInit+0x3a0>)
 8001c60:	f004 faf6 	bl	8006250 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7
 8001c64:	f648 638e 	movw	r3, #36494	@ 0x8e8e
 8001c68:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c7e:	230e      	movs	r3, #14
 8001c80:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c84:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001c88:	4619      	mov	r1, r3
 8001c8a:	484b      	ldr	r0, [pc, #300]	@ (8001db8 <HAL_LTDC_MspInit+0x3a4>)
 8001c8c:	f004 fae0 	bl	8006250 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c90:	2303      	movs	r3, #3
 8001c92:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c96:	2302      	movs	r3, #2
 8001c98:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001ca8:	2309      	movs	r3, #9
 8001caa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cae:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4841      	ldr	r0, [pc, #260]	@ (8001dbc <HAL_LTDC_MspInit+0x3a8>)
 8001cb6:	f004 facb 	bl	8006250 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001cba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001cbe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001cd4:	230e      	movs	r3, #14
 8001cd6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cda:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4836      	ldr	r0, [pc, #216]	@ (8001dbc <HAL_LTDC_MspInit+0x3a8>)
 8001ce2:	f004 fab5 	bl	8006250 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ce6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001cea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d00:	230e      	movs	r3, #14
 8001d02:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d06:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	482c      	ldr	r0, [pc, #176]	@ (8001dc0 <HAL_LTDC_MspInit+0x3ac>)
 8001d0e:	f004 fa9f 	bl	8006250 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d12:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001d16:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d26:	2300      	movs	r3, #0
 8001d28:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d2c:	230e      	movs	r3, #14
 8001d2e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001d32:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001d36:	4619      	mov	r1, r3
 8001d38:	4822      	ldr	r0, [pc, #136]	@ (8001dc4 <HAL_LTDC_MspInit+0x3b0>)
 8001d3a:	f004 fa89 	bl	8006250 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d44:	2302      	movs	r3, #2
 8001d46:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d50:	2300      	movs	r3, #0
 8001d52:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d56:	230e      	movs	r3, #14
 8001d58:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001d5c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001d60:	4619      	mov	r1, r3
 8001d62:	4819      	ldr	r0, [pc, #100]	@ (8001dc8 <HAL_LTDC_MspInit+0x3b4>)
 8001d64:	f004 fa74 	bl	8006250 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d68:	2304      	movs	r3, #4
 8001d6a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001d80:	2309      	movs	r3, #9
 8001d82:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d86:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	480c      	ldr	r0, [pc, #48]	@ (8001dc0 <HAL_LTDC_MspInit+0x3ac>)
 8001d8e:	f004 fa5f 	bl	8006250 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d96:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	e013      	b.n	8001dcc <HAL_LTDC_MspInit+0x3b8>
 8001da4:	50001000 	.word	0x50001000
 8001da8:	58024400 	.word	0x58024400
 8001dac:	58021000 	.word	0x58021000
 8001db0:	58021400 	.word	0x58021400
 8001db4:	58020800 	.word	0x58020800
 8001db8:	58020000 	.word	0x58020000
 8001dbc:	58020400 	.word	0x58020400
 8001dc0:	58020c00 	.word	0x58020c00
 8001dc4:	58022400 	.word	0x58022400
 8001dc8:	58022800 	.word	0x58022800
 8001dcc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001dd6:	230e      	movs	r3, #14
 8001dd8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ddc:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001de0:	4619      	mov	r1, r3
 8001de2:	4808      	ldr	r0, [pc, #32]	@ (8001e04 <HAL_LTDC_MspInit+0x3f0>)
 8001de4:	f004 fa34 	bl	8006250 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001de8:	2200      	movs	r2, #0
 8001dea:	2100      	movs	r1, #0
 8001dec:	2058      	movs	r0, #88	@ 0x58
 8001dee:	f002 f8ff 	bl	8003ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001df2:	2058      	movs	r0, #88	@ 0x58
 8001df4:	f002 f916 	bl	8004024 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001df8:	bf00      	nop
 8001dfa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	58021800 	.word	0x58021800

08001e08 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b094      	sub	sp, #80	@ 0x50
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e10:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	611a      	str	r2, [r3, #16]
  if(hospi->Instance==OCTOSPI1)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a83      	ldr	r2, [pc, #524]	@ (8002034 <HAL_OSPI_MspInit+0x22c>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	f040 8116 	bne.w	8002058 <HAL_OSPI_MspInit+0x250>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8001e2c:	4b82      	ldr	r3, [pc, #520]	@ (8002038 <HAL_OSPI_MspInit+0x230>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	3301      	adds	r3, #1
 8001e32:	4a81      	ldr	r2, [pc, #516]	@ (8002038 <HAL_OSPI_MspInit+0x230>)
 8001e34:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 8001e36:	4b80      	ldr	r3, [pc, #512]	@ (8002038 <HAL_OSPI_MspInit+0x230>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d10e      	bne.n	8001e5c <HAL_OSPI_MspInit+0x54>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8001e3e:	4b7f      	ldr	r3, [pc, #508]	@ (800203c <HAL_OSPI_MspInit+0x234>)
 8001e40:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001e44:	4a7d      	ldr	r2, [pc, #500]	@ (800203c <HAL_OSPI_MspInit+0x234>)
 8001e46:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e4a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001e4e:	4b7b      	ldr	r3, [pc, #492]	@ (800203c <HAL_OSPI_MspInit+0x234>)
 8001e50:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001e54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e58:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001e5c:	4b77      	ldr	r3, [pc, #476]	@ (800203c <HAL_OSPI_MspInit+0x234>)
 8001e5e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001e62:	4a76      	ldr	r2, [pc, #472]	@ (800203c <HAL_OSPI_MspInit+0x234>)
 8001e64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e68:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001e6c:	4b73      	ldr	r3, [pc, #460]	@ (800203c <HAL_OSPI_MspInit+0x234>)
 8001e6e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001e72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e76:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e7a:	4b70      	ldr	r3, [pc, #448]	@ (800203c <HAL_OSPI_MspInit+0x234>)
 8001e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e80:	4a6e      	ldr	r2, [pc, #440]	@ (800203c <HAL_OSPI_MspInit+0x234>)
 8001e82:	f043 0310 	orr.w	r3, r3, #16
 8001e86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e8a:	4b6c      	ldr	r3, [pc, #432]	@ (800203c <HAL_OSPI_MspInit+0x234>)
 8001e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e90:	f003 0310 	and.w	r3, r3, #16
 8001e94:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e98:	4b68      	ldr	r3, [pc, #416]	@ (800203c <HAL_OSPI_MspInit+0x234>)
 8001e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e9e:	4a67      	ldr	r2, [pc, #412]	@ (800203c <HAL_OSPI_MspInit+0x234>)
 8001ea0:	f043 0320 	orr.w	r3, r3, #32
 8001ea4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ea8:	4b64      	ldr	r3, [pc, #400]	@ (800203c <HAL_OSPI_MspInit+0x234>)
 8001eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eae:	f003 0320 	and.w	r3, r3, #32
 8001eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb6:	4b61      	ldr	r3, [pc, #388]	@ (800203c <HAL_OSPI_MspInit+0x234>)
 8001eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ebc:	4a5f      	ldr	r2, [pc, #380]	@ (800203c <HAL_OSPI_MspInit+0x234>)
 8001ebe:	f043 0304 	orr.w	r3, r3, #4
 8001ec2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ec6:	4b5d      	ldr	r3, [pc, #372]	@ (800203c <HAL_OSPI_MspInit+0x234>)
 8001ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed4:	4b59      	ldr	r3, [pc, #356]	@ (800203c <HAL_OSPI_MspInit+0x234>)
 8001ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eda:	4a58      	ldr	r2, [pc, #352]	@ (800203c <HAL_OSPI_MspInit+0x234>)
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ee4:	4b55      	ldr	r3, [pc, #340]	@ (800203c <HAL_OSPI_MspInit+0x234>)
 8001ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef2:	4b52      	ldr	r3, [pc, #328]	@ (800203c <HAL_OSPI_MspInit+0x234>)
 8001ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ef8:	4a50      	ldr	r2, [pc, #320]	@ (800203c <HAL_OSPI_MspInit+0x234>)
 8001efa:	f043 0302 	orr.w	r3, r3, #2
 8001efe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f02:	4b4e      	ldr	r3, [pc, #312]	@ (800203c <HAL_OSPI_MspInit+0x234>)
 8001f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	623b      	str	r3, [r7, #32]
 8001f0e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f10:	4b4a      	ldr	r3, [pc, #296]	@ (800203c <HAL_OSPI_MspInit+0x234>)
 8001f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f16:	4a49      	ldr	r2, [pc, #292]	@ (800203c <HAL_OSPI_MspInit+0x234>)
 8001f18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f20:	4b46      	ldr	r3, [pc, #280]	@ (800203c <HAL_OSPI_MspInit+0x234>)
 8001f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f2a:	61fb      	str	r3, [r7, #28]
 8001f2c:	69fb      	ldr	r3, [r7, #28]
    PB2     ------> OCTOSPIM_P1_CLK
    PE7     ------> OCTOSPIM_P1_IO4
    PE10     ------> OCTOSPIM_P1_IO7
    PG6     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f2e:	2304      	movs	r3, #4
 8001f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f32:	2302      	movs	r3, #2
 8001f34:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001f3e:	2309      	movs	r3, #9
 8001f40:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f42:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001f46:	4619      	mov	r1, r3
 8001f48:	483d      	ldr	r0, [pc, #244]	@ (8002040 <HAL_OSPI_MspInit+0x238>)
 8001f4a:	f004 f981 	bl	8006250 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f4e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f54:	2302      	movs	r3, #2
 8001f56:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001f60:	230a      	movs	r3, #10
 8001f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f64:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4836      	ldr	r0, [pc, #216]	@ (8002044 <HAL_OSPI_MspInit+0x23c>)
 8001f6c:	f004 f970 	bl	8006250 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f70:	230c      	movs	r3, #12
 8001f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f74:	2302      	movs	r3, #2
 8001f76:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF4_OCTOSPIM_P1;
 8001f80:	2304      	movs	r3, #4
 8001f82:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f84:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001f88:	4619      	mov	r1, r3
 8001f8a:	482f      	ldr	r0, [pc, #188]	@ (8002048 <HAL_OSPI_MspInit+0x240>)
 8001f8c:	f004 f960 	bl	8006250 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f90:	2340      	movs	r3, #64	@ 0x40
 8001f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f94:	2302      	movs	r3, #2
 8001f96:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF6_OCTOSPIM_P1;
 8001fa0:	2306      	movs	r3, #6
 8001fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4828      	ldr	r0, [pc, #160]	@ (800204c <HAL_OSPI_MspInit+0x244>)
 8001fac:	f004 f950 	bl	8006250 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001fb0:	2320      	movs	r3, #32
 8001fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001fc0:	230a      	movs	r3, #10
 8001fc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fc4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001fc8:	4619      	mov	r1, r3
 8001fca:	481f      	ldr	r0, [pc, #124]	@ (8002048 <HAL_OSPI_MspInit+0x240>)
 8001fcc:	f004 f940 	bl	8006250 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fd0:	2304      	movs	r3, #4
 8001fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001fe0:	2309      	movs	r3, #9
 8001fe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4819      	ldr	r0, [pc, #100]	@ (8002050 <HAL_OSPI_MspInit+0x248>)
 8001fec:	f004 f930 	bl	8006250 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10;
 8001ff0:	f44f 6390 	mov.w	r3, #1152	@ 0x480
 8001ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffe:	2303      	movs	r3, #3
 8002000:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8002002:	230a      	movs	r3, #10
 8002004:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002006:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800200a:	4619      	mov	r1, r3
 800200c:	480c      	ldr	r0, [pc, #48]	@ (8002040 <HAL_OSPI_MspInit+0x238>)
 800200e:	f004 f91f 	bl	8006250 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002012:	2340      	movs	r3, #64	@ 0x40
 8002014:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002016:	2302      	movs	r3, #2
 8002018:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201e:	2303      	movs	r3, #3
 8002020:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8002022:	230a      	movs	r3, #10
 8002024:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002026:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800202a:	4619      	mov	r1, r3
 800202c:	4809      	ldr	r0, [pc, #36]	@ (8002054 <HAL_OSPI_MspInit+0x24c>)
 800202e:	f004 f90f 	bl	8006250 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 8002032:	e08e      	b.n	8002152 <HAL_OSPI_MspInit+0x34a>
 8002034:	52005000 	.word	0x52005000
 8002038:	24000628 	.word	0x24000628
 800203c:	58024400 	.word	0x58024400
 8002040:	58021000 	.word	0x58021000
 8002044:	58021400 	.word	0x58021400
 8002048:	58020800 	.word	0x58020800
 800204c:	58020000 	.word	0x58020000
 8002050:	58020400 	.word	0x58020400
 8002054:	58021800 	.word	0x58021800
  else if(hospi->Instance==OCTOSPI2)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a3f      	ldr	r2, [pc, #252]	@ (800215c <HAL_OSPI_MspInit+0x354>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d177      	bne.n	8002152 <HAL_OSPI_MspInit+0x34a>
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8002062:	4b3f      	ldr	r3, [pc, #252]	@ (8002160 <HAL_OSPI_MspInit+0x358>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	3301      	adds	r3, #1
 8002068:	4a3d      	ldr	r2, [pc, #244]	@ (8002160 <HAL_OSPI_MspInit+0x358>)
 800206a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 800206c:	4b3c      	ldr	r3, [pc, #240]	@ (8002160 <HAL_OSPI_MspInit+0x358>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d10e      	bne.n	8002092 <HAL_OSPI_MspInit+0x28a>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8002074:	4b3b      	ldr	r3, [pc, #236]	@ (8002164 <HAL_OSPI_MspInit+0x35c>)
 8002076:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800207a:	4a3a      	ldr	r2, [pc, #232]	@ (8002164 <HAL_OSPI_MspInit+0x35c>)
 800207c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002080:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002084:	4b37      	ldr	r3, [pc, #220]	@ (8002164 <HAL_OSPI_MspInit+0x35c>)
 8002086:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800208a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800208e:	61bb      	str	r3, [r7, #24]
 8002090:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8002092:	4b34      	ldr	r3, [pc, #208]	@ (8002164 <HAL_OSPI_MspInit+0x35c>)
 8002094:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002098:	4a32      	ldr	r2, [pc, #200]	@ (8002164 <HAL_OSPI_MspInit+0x35c>)
 800209a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800209e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80020a2:	4b30      	ldr	r3, [pc, #192]	@ (8002164 <HAL_OSPI_MspInit+0x35c>)
 80020a4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80020a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020ac:	617b      	str	r3, [r7, #20]
 80020ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80020b0:	4b2c      	ldr	r3, [pc, #176]	@ (8002164 <HAL_OSPI_MspInit+0x35c>)
 80020b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020b6:	4a2b      	ldr	r2, [pc, #172]	@ (8002164 <HAL_OSPI_MspInit+0x35c>)
 80020b8:	f043 0320 	orr.w	r3, r3, #32
 80020bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020c0:	4b28      	ldr	r3, [pc, #160]	@ (8002164 <HAL_OSPI_MspInit+0x35c>)
 80020c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020c6:	f003 0320 	and.w	r3, r3, #32
 80020ca:	613b      	str	r3, [r7, #16]
 80020cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80020ce:	4b25      	ldr	r3, [pc, #148]	@ (8002164 <HAL_OSPI_MspInit+0x35c>)
 80020d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020d4:	4a23      	ldr	r2, [pc, #140]	@ (8002164 <HAL_OSPI_MspInit+0x35c>)
 80020d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020de:	4b21      	ldr	r3, [pc, #132]	@ (8002164 <HAL_OSPI_MspInit+0x35c>)
 80020e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80020ec:	f241 031f 	movw	r3, #4127	@ 0x101f
 80020f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f2:	2302      	movs	r3, #2
 80020f4:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020fa:	2303      	movs	r3, #3
 80020fc:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 80020fe:	2309      	movs	r3, #9
 8002100:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002102:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002106:	4619      	mov	r1, r3
 8002108:	4817      	ldr	r0, [pc, #92]	@ (8002168 <HAL_OSPI_MspInit+0x360>)
 800210a:	f004 f8a1 	bl	8006250 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11;
 800210e:	f640 0303 	movw	r3, #2051	@ 0x803
 8002112:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002114:	2302      	movs	r3, #2
 8002116:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800211c:	2303      	movs	r3, #3
 800211e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8002120:	2309      	movs	r3, #9
 8002122:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002124:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002128:	4619      	mov	r1, r3
 800212a:	4810      	ldr	r0, [pc, #64]	@ (800216c <HAL_OSPI_MspInit+0x364>)
 800212c:	f004 f890 	bl	8006250 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002130:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002134:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002136:	2302      	movs	r3, #2
 8002138:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213e:	2303      	movs	r3, #3
 8002140:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P2;
 8002142:	2303      	movs	r3, #3
 8002144:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002146:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800214a:	4619      	mov	r1, r3
 800214c:	4807      	ldr	r0, [pc, #28]	@ (800216c <HAL_OSPI_MspInit+0x364>)
 800214e:	f004 f87f 	bl	8006250 <HAL_GPIO_Init>
}
 8002152:	bf00      	nop
 8002154:	3750      	adds	r7, #80	@ 0x50
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	5200a000 	.word	0x5200a000
 8002160:	24000628 	.word	0x24000628
 8002164:	58024400 	.word	0x58024400
 8002168:	58021400 	.word	0x58021400
 800216c:	58021800 	.word	0x58021800

08002170 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a0b      	ldr	r2, [pc, #44]	@ (80021ac <HAL_TIM_Base_MspInit+0x3c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d10e      	bne.n	80021a0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002182:	4b0b      	ldr	r3, [pc, #44]	@ (80021b0 <HAL_TIM_Base_MspInit+0x40>)
 8002184:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002188:	4a09      	ldr	r2, [pc, #36]	@ (80021b0 <HAL_TIM_Base_MspInit+0x40>)
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002192:	4b07      	ldr	r3, [pc, #28]	@ (80021b0 <HAL_TIM_Base_MspInit+0x40>)
 8002194:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80021a0:	bf00      	nop
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	40010000 	.word	0x40010000
 80021b0:	58024400 	.word	0x58024400

080021b4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08a      	sub	sp, #40	@ 0x28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021bc:	f107 0314 	add.w	r3, r7, #20
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	60da      	str	r2, [r3, #12]
 80021ca:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM23)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a1a      	ldr	r2, [pc, #104]	@ (800223c <HAL_TIM_Encoder_MspInit+0x88>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d12d      	bne.n	8002232 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM23_MspInit 0 */

  /* USER CODE END TIM23_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM23_CLK_ENABLE();
 80021d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002240 <HAL_TIM_Encoder_MspInit+0x8c>)
 80021d8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80021dc:	4a18      	ldr	r2, [pc, #96]	@ (8002240 <HAL_TIM_Encoder_MspInit+0x8c>)
 80021de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021e2:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80021e6:	4b16      	ldr	r3, [pc, #88]	@ (8002240 <HAL_TIM_Encoder_MspInit+0x8c>)
 80021e8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80021ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021f0:	613b      	str	r3, [r7, #16]
 80021f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80021f4:	4b12      	ldr	r3, [pc, #72]	@ (8002240 <HAL_TIM_Encoder_MspInit+0x8c>)
 80021f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021fa:	4a11      	ldr	r2, [pc, #68]	@ (8002240 <HAL_TIM_Encoder_MspInit+0x8c>)
 80021fc:	f043 0320 	orr.w	r3, r3, #32
 8002200:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002204:	4b0e      	ldr	r3, [pc, #56]	@ (8002240 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800220a:	f003 0320 	and.w	r3, r3, #32
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
    /**TIM23 GPIO Configuration
    PF6     ------> TIM23_CH1
    PF7     ------> TIM23_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002212:	23c0      	movs	r3, #192	@ 0xc0
 8002214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002216:	2302      	movs	r3, #2
 8002218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221a:	2300      	movs	r3, #0
 800221c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221e:	2300      	movs	r3, #0
 8002220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8002222:	230d      	movs	r3, #13
 8002224:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002226:	f107 0314 	add.w	r3, r7, #20
 800222a:	4619      	mov	r1, r3
 800222c:	4805      	ldr	r0, [pc, #20]	@ (8002244 <HAL_TIM_Encoder_MspInit+0x90>)
 800222e:	f004 f80f 	bl	8006250 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }

}
 8002232:	bf00      	nop
 8002234:	3728      	adds	r7, #40	@ 0x28
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	4000e000 	.word	0x4000e000
 8002240:	58024400 	.word	0x58024400
 8002244:	58021400 	.word	0x58021400

08002248 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b0ba      	sub	sp, #232	@ 0xe8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002250:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]
 800225e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002260:	f107 0318 	add.w	r3, r7, #24
 8002264:	22b8      	movs	r2, #184	@ 0xb8
 8002266:	2100      	movs	r1, #0
 8002268:	4618      	mov	r0, r3
 800226a:	f00b f899 	bl	800d3a0 <memset>
  if(huart->Instance==UART4)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a39      	ldr	r2, [pc, #228]	@ (8002358 <HAL_UART_MspInit+0x110>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d16a      	bne.n	800234e <HAL_UART_MspInit+0x106>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002278:	f04f 0202 	mov.w	r2, #2
 800227c:	f04f 0300 	mov.w	r3, #0
 8002280:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002284:	2300      	movs	r3, #0
 8002286:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800228a:	f107 0318 	add.w	r3, r7, #24
 800228e:	4618      	mov	r0, r3
 8002290:	f006 fd0a 	bl	8008ca8 <HAL_RCCEx_PeriphCLKConfig>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800229a:	f7ff f8c1 	bl	8001420 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800229e:	4b2f      	ldr	r3, [pc, #188]	@ (800235c <HAL_UART_MspInit+0x114>)
 80022a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022a4:	4a2d      	ldr	r2, [pc, #180]	@ (800235c <HAL_UART_MspInit+0x114>)
 80022a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80022aa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80022ae:	4b2b      	ldr	r3, [pc, #172]	@ (800235c <HAL_UART_MspInit+0x114>)
 80022b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022b8:	617b      	str	r3, [r7, #20]
 80022ba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022bc:	4b27      	ldr	r3, [pc, #156]	@ (800235c <HAL_UART_MspInit+0x114>)
 80022be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022c2:	4a26      	ldr	r2, [pc, #152]	@ (800235c <HAL_UART_MspInit+0x114>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022cc:	4b23      	ldr	r3, [pc, #140]	@ (800235c <HAL_UART_MspInit+0x114>)
 80022ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	613b      	str	r3, [r7, #16]
 80022d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022da:	4b20      	ldr	r3, [pc, #128]	@ (800235c <HAL_UART_MspInit+0x114>)
 80022dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022e0:	4a1e      	ldr	r2, [pc, #120]	@ (800235c <HAL_UART_MspInit+0x114>)
 80022e2:	f043 0304 	orr.w	r3, r3, #4
 80022e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022ea:	4b1c      	ldr	r3, [pc, #112]	@ (800235c <HAL_UART_MspInit+0x114>)
 80022ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022f8:	2301      	movs	r3, #1
 80022fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fe:	2302      	movs	r3, #2
 8002300:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002304:	2300      	movs	r3, #0
 8002306:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230a:	2300      	movs	r3, #0
 800230c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002310:	2308      	movs	r3, #8
 8002312:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002316:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800231a:	4619      	mov	r1, r3
 800231c:	4810      	ldr	r0, [pc, #64]	@ (8002360 <HAL_UART_MspInit+0x118>)
 800231e:	f003 ff97 	bl	8006250 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002322:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002326:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232a:	2302      	movs	r3, #2
 800232c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002330:	2300      	movs	r3, #0
 8002332:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002336:	2300      	movs	r3, #0
 8002338:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800233c:	2308      	movs	r3, #8
 800233e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002342:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002346:	4619      	mov	r1, r3
 8002348:	4806      	ldr	r0, [pc, #24]	@ (8002364 <HAL_UART_MspInit+0x11c>)
 800234a:	f003 ff81 	bl	8006250 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800234e:	bf00      	nop
 8002350:	37e8      	adds	r7, #232	@ 0xe8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40004c00 	.word	0x40004c00
 800235c:	58024400 	.word	0x58024400
 8002360:	58020000 	.word	0x58020000
 8002364:	58020800 	.word	0x58020800

08002368 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b090      	sub	sp, #64	@ 0x40
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b0f      	cmp	r3, #15
 8002374:	d827      	bhi.n	80023c6 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002376:	2200      	movs	r2, #0
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	2036      	movs	r0, #54	@ 0x36
 800237c:	f001 fe38 	bl	8003ff0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002380:	2036      	movs	r0, #54	@ 0x36
 8002382:	f001 fe4f 	bl	8004024 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002386:	4a29      	ldr	r2, [pc, #164]	@ (800242c <HAL_InitTick+0xc4>)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800238c:	4b28      	ldr	r3, [pc, #160]	@ (8002430 <HAL_InitTick+0xc8>)
 800238e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002392:	4a27      	ldr	r2, [pc, #156]	@ (8002430 <HAL_InitTick+0xc8>)
 8002394:	f043 0310 	orr.w	r3, r3, #16
 8002398:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800239c:	4b24      	ldr	r3, [pc, #144]	@ (8002430 <HAL_InitTick+0xc8>)
 800239e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023a2:	f003 0310 	and.w	r3, r3, #16
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80023aa:	f107 0210 	add.w	r2, r7, #16
 80023ae:	f107 0314 	add.w	r3, r7, #20
 80023b2:	4611      	mov	r1, r2
 80023b4:	4618      	mov	r0, r3
 80023b6:	f006 fc35 	bl	8008c24 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80023ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80023be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d106      	bne.n	80023d2 <HAL_InitTick+0x6a>
 80023c4:	e001      	b.n	80023ca <HAL_InitTick+0x62>
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e02b      	b.n	8002422 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80023ca:	f006 fbff 	bl	8008bcc <HAL_RCC_GetPCLK1Freq>
 80023ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80023d0:	e004      	b.n	80023dc <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80023d2:	f006 fbfb 	bl	8008bcc <HAL_RCC_GetPCLK1Freq>
 80023d6:	4603      	mov	r3, r0
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80023dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023de:	4a15      	ldr	r2, [pc, #84]	@ (8002434 <HAL_InitTick+0xcc>)
 80023e0:	fba2 2303 	umull	r2, r3, r2, r3
 80023e4:	0c9b      	lsrs	r3, r3, #18
 80023e6:	3b01      	subs	r3, #1
 80023e8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80023ea:	4b13      	ldr	r3, [pc, #76]	@ (8002438 <HAL_InitTick+0xd0>)
 80023ec:	4a13      	ldr	r2, [pc, #76]	@ (800243c <HAL_InitTick+0xd4>)
 80023ee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80023f0:	4b11      	ldr	r3, [pc, #68]	@ (8002438 <HAL_InitTick+0xd0>)
 80023f2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80023f6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80023f8:	4a0f      	ldr	r2, [pc, #60]	@ (8002438 <HAL_InitTick+0xd0>)
 80023fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023fc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80023fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002438 <HAL_InitTick+0xd0>)
 8002400:	2200      	movs	r2, #0
 8002402:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002404:	4b0c      	ldr	r3, [pc, #48]	@ (8002438 <HAL_InitTick+0xd0>)
 8002406:	2200      	movs	r2, #0
 8002408:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800240a:	480b      	ldr	r0, [pc, #44]	@ (8002438 <HAL_InitTick+0xd0>)
 800240c:	f009 f832 	bl	800b474 <HAL_TIM_Base_Init>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d104      	bne.n	8002420 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002416:	4808      	ldr	r0, [pc, #32]	@ (8002438 <HAL_InitTick+0xd0>)
 8002418:	f009 f884 	bl	800b524 <HAL_TIM_Base_Start_IT>
 800241c:	4603      	mov	r3, r0
 800241e:	e000      	b.n	8002422 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
}
 8002422:	4618      	mov	r0, r3
 8002424:	3740      	adds	r7, #64	@ 0x40
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	24000008 	.word	0x24000008
 8002430:	58024400 	.word	0x58024400
 8002434:	431bde83 	.word	0x431bde83
 8002438:	2400062c 	.word	0x2400062c
 800243c:	40001000 	.word	0x40001000

08002440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002444:	bf00      	nop
 8002446:	e7fd      	b.n	8002444 <NMI_Handler+0x4>

08002448 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800244c:	bf00      	nop
 800244e:	e7fd      	b.n	800244c <HardFault_Handler+0x4>

08002450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002454:	bf00      	nop
 8002456:	e7fd      	b.n	8002454 <MemManage_Handler+0x4>

08002458 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800245c:	bf00      	nop
 800245e:	e7fd      	b.n	800245c <BusFault_Handler+0x4>

08002460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002464:	bf00      	nop
 8002466:	e7fd      	b.n	8002464 <UsageFault_Handler+0x4>

08002468 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800247a:	bf00      	nop
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002492:	b480      	push	{r7}
 8002494:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024a4:	4802      	ldr	r0, [pc, #8]	@ (80024b0 <DMA1_Stream0_IRQHandler+0x10>)
 80024a6:	f002 fc5b 	bl	8004d60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	2400010c 	.word	0x2400010c

080024b4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80024b8:	4802      	ldr	r0, [pc, #8]	@ (80024c4 <DMA1_Stream1_IRQHandler+0x10>)
 80024ba:	f002 fc51 	bl	8004d60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	24000184 	.word	0x24000184

080024c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 80024cc:	4b06      	ldr	r3, [pc, #24]	@ (80024e8 <TIM6_DAC_IRQHandler+0x20>)
 80024ce:	791b      	ldrb	r3, [r3, #4]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d002      	beq.n	80024dc <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 80024d6:	4804      	ldr	r0, [pc, #16]	@ (80024e8 <TIM6_DAC_IRQHandler+0x20>)
 80024d8:	f001 ff3e 	bl	8004358 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80024dc:	4803      	ldr	r0, [pc, #12]	@ (80024ec <TIM6_DAC_IRQHandler+0x24>)
 80024de:	f009 f94d 	bl	800b77c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	24000220 	.word	0x24000220
 80024ec:	2400062c 	.word	0x2400062c

080024f0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80024f4:	4802      	ldr	r0, [pc, #8]	@ (8002500 <LTDC_IRQHandler+0x10>)
 80024f6:	f004 fa57 	bl	80069a8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	24000398 	.word	0x24000398

08002504 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002508:	4b32      	ldr	r3, [pc, #200]	@ (80025d4 <SystemInit+0xd0>)
 800250a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800250e:	4a31      	ldr	r2, [pc, #196]	@ (80025d4 <SystemInit+0xd0>)
 8002510:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002514:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002518:	4b2f      	ldr	r3, [pc, #188]	@ (80025d8 <SystemInit+0xd4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 030f 	and.w	r3, r3, #15
 8002520:	2b06      	cmp	r3, #6
 8002522:	d807      	bhi.n	8002534 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002524:	4b2c      	ldr	r3, [pc, #176]	@ (80025d8 <SystemInit+0xd4>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f023 030f 	bic.w	r3, r3, #15
 800252c:	4a2a      	ldr	r2, [pc, #168]	@ (80025d8 <SystemInit+0xd4>)
 800252e:	f043 0307 	orr.w	r3, r3, #7
 8002532:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002534:	4b29      	ldr	r3, [pc, #164]	@ (80025dc <SystemInit+0xd8>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a28      	ldr	r2, [pc, #160]	@ (80025dc <SystemInit+0xd8>)
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002540:	4b26      	ldr	r3, [pc, #152]	@ (80025dc <SystemInit+0xd8>)
 8002542:	2200      	movs	r2, #0
 8002544:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002546:	4b25      	ldr	r3, [pc, #148]	@ (80025dc <SystemInit+0xd8>)
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	4924      	ldr	r1, [pc, #144]	@ (80025dc <SystemInit+0xd8>)
 800254c:	4b24      	ldr	r3, [pc, #144]	@ (80025e0 <SystemInit+0xdc>)
 800254e:	4013      	ands	r3, r2
 8002550:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002552:	4b21      	ldr	r3, [pc, #132]	@ (80025d8 <SystemInit+0xd4>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	2b00      	cmp	r3, #0
 800255c:	d007      	beq.n	800256e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800255e:	4b1e      	ldr	r3, [pc, #120]	@ (80025d8 <SystemInit+0xd4>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f023 030f 	bic.w	r3, r3, #15
 8002566:	4a1c      	ldr	r2, [pc, #112]	@ (80025d8 <SystemInit+0xd4>)
 8002568:	f043 0307 	orr.w	r3, r3, #7
 800256c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800256e:	4b1b      	ldr	r3, [pc, #108]	@ (80025dc <SystemInit+0xd8>)
 8002570:	2200      	movs	r2, #0
 8002572:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002574:	4b19      	ldr	r3, [pc, #100]	@ (80025dc <SystemInit+0xd8>)
 8002576:	2200      	movs	r2, #0
 8002578:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800257a:	4b18      	ldr	r3, [pc, #96]	@ (80025dc <SystemInit+0xd8>)
 800257c:	2200      	movs	r2, #0
 800257e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002580:	4b16      	ldr	r3, [pc, #88]	@ (80025dc <SystemInit+0xd8>)
 8002582:	4a18      	ldr	r2, [pc, #96]	@ (80025e4 <SystemInit+0xe0>)
 8002584:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002586:	4b15      	ldr	r3, [pc, #84]	@ (80025dc <SystemInit+0xd8>)
 8002588:	4a17      	ldr	r2, [pc, #92]	@ (80025e8 <SystemInit+0xe4>)
 800258a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800258c:	4b13      	ldr	r3, [pc, #76]	@ (80025dc <SystemInit+0xd8>)
 800258e:	4a17      	ldr	r2, [pc, #92]	@ (80025ec <SystemInit+0xe8>)
 8002590:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002592:	4b12      	ldr	r3, [pc, #72]	@ (80025dc <SystemInit+0xd8>)
 8002594:	2200      	movs	r2, #0
 8002596:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002598:	4b10      	ldr	r3, [pc, #64]	@ (80025dc <SystemInit+0xd8>)
 800259a:	4a14      	ldr	r2, [pc, #80]	@ (80025ec <SystemInit+0xe8>)
 800259c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800259e:	4b0f      	ldr	r3, [pc, #60]	@ (80025dc <SystemInit+0xd8>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80025a4:	4b0d      	ldr	r3, [pc, #52]	@ (80025dc <SystemInit+0xd8>)
 80025a6:	4a11      	ldr	r2, [pc, #68]	@ (80025ec <SystemInit+0xe8>)
 80025a8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80025aa:	4b0c      	ldr	r3, [pc, #48]	@ (80025dc <SystemInit+0xd8>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80025b0:	4b0a      	ldr	r3, [pc, #40]	@ (80025dc <SystemInit+0xd8>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a09      	ldr	r2, [pc, #36]	@ (80025dc <SystemInit+0xd8>)
 80025b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80025bc:	4b07      	ldr	r3, [pc, #28]	@ (80025dc <SystemInit+0xd8>)
 80025be:	2200      	movs	r2, #0
 80025c0:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80025c2:	4b0b      	ldr	r3, [pc, #44]	@ (80025f0 <SystemInit+0xec>)
 80025c4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80025c8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80025ca:	bf00      	nop
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	e000ed00 	.word	0xe000ed00
 80025d8:	52002000 	.word	0x52002000
 80025dc:	58024400 	.word	0x58024400
 80025e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80025e4:	02020200 	.word	0x02020200
 80025e8:	01ff0000 	.word	0x01ff0000
 80025ec:	01010280 	.word	0x01010280
 80025f0:	52004000 	.word	0x52004000

080025f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80025f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800262c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80025f8:	f7ff ff84 	bl	8002504 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025fc:	480c      	ldr	r0, [pc, #48]	@ (8002630 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025fe:	490d      	ldr	r1, [pc, #52]	@ (8002634 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002600:	4a0d      	ldr	r2, [pc, #52]	@ (8002638 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002604:	e002      	b.n	800260c <LoopCopyDataInit>

08002606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800260a:	3304      	adds	r3, #4

0800260c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800260c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800260e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002610:	d3f9      	bcc.n	8002606 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002612:	4a0a      	ldr	r2, [pc, #40]	@ (800263c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002614:	4c0a      	ldr	r4, [pc, #40]	@ (8002640 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002618:	e001      	b.n	800261e <LoopFillZerobss>

0800261a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800261a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800261c:	3204      	adds	r2, #4

0800261e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800261e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002620:	d3fb      	bcc.n	800261a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002622:	f00a fec5 	bl	800d3b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002626:	f7fd ffe9 	bl	80005fc <main>
  bx  lr
 800262a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800262c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002630:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002634:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8002638:	0800d460 	.word	0x0800d460
  ldr r2, =_sbss
 800263c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8002640:	2400067c 	.word	0x2400067c

08002644 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002644:	e7fe      	b.n	8002644 <ADC3_IRQHandler>
	...

08002648 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800264e:	2003      	movs	r0, #3
 8002650:	f001 fcc3 	bl	8003fda <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002654:	f006 f910 	bl	8008878 <HAL_RCC_GetSysClockFreq>
 8002658:	4602      	mov	r2, r0
 800265a:	4b15      	ldr	r3, [pc, #84]	@ (80026b0 <HAL_Init+0x68>)
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	0a1b      	lsrs	r3, r3, #8
 8002660:	f003 030f 	and.w	r3, r3, #15
 8002664:	4913      	ldr	r1, [pc, #76]	@ (80026b4 <HAL_Init+0x6c>)
 8002666:	5ccb      	ldrb	r3, [r1, r3]
 8002668:	f003 031f 	and.w	r3, r3, #31
 800266c:	fa22 f303 	lsr.w	r3, r2, r3
 8002670:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002672:	4b0f      	ldr	r3, [pc, #60]	@ (80026b0 <HAL_Init+0x68>)
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	4a0e      	ldr	r2, [pc, #56]	@ (80026b4 <HAL_Init+0x6c>)
 800267c:	5cd3      	ldrb	r3, [r2, r3]
 800267e:	f003 031f 	and.w	r3, r3, #31
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
 8002688:	4a0b      	ldr	r2, [pc, #44]	@ (80026b8 <HAL_Init+0x70>)
 800268a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800268c:	4a0b      	ldr	r2, [pc, #44]	@ (80026bc <HAL_Init+0x74>)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002692:	200f      	movs	r0, #15
 8002694:	f7ff fe68 	bl	8002368 <HAL_InitTick>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e002      	b.n	80026a8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80026a2:	f7fe fec3 	bl	800142c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	58024400 	.word	0x58024400
 80026b4:	0800d410 	.word	0x0800d410
 80026b8:	24000004 	.word	0x24000004
 80026bc:	24000000 	.word	0x24000000

080026c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026c4:	4b06      	ldr	r3, [pc, #24]	@ (80026e0 <HAL_IncTick+0x20>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	461a      	mov	r2, r3
 80026ca:	4b06      	ldr	r3, [pc, #24]	@ (80026e4 <HAL_IncTick+0x24>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4413      	add	r3, r2
 80026d0:	4a04      	ldr	r2, [pc, #16]	@ (80026e4 <HAL_IncTick+0x24>)
 80026d2:	6013      	str	r3, [r2, #0]
}
 80026d4:	bf00      	nop
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	2400000c 	.word	0x2400000c
 80026e4:	24000678 	.word	0x24000678

080026e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  return uwTick;
 80026ec:	4b03      	ldr	r3, [pc, #12]	@ (80026fc <HAL_GetTick+0x14>)
 80026ee:	681b      	ldr	r3, [r3, #0]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	24000678 	.word	0x24000678

08002700 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT4 around 1.5 V.
  *                                                This requires VDDA equal to or higher than 1.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8002708:	4b06      	ldr	r3, [pc, #24]	@ (8002724 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002710:	4904      	ldr	r1, [pc, #16]	@ (8002724 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4313      	orrs	r3, r2
 8002716:	600b      	str	r3, [r1, #0]
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	58003c00 	.word	0x58003c00

08002728 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8002730:	4b06      	ldr	r3, [pc, #24]	@ (800274c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f023 0202 	bic.w	r2, r3, #2
 8002738:	4904      	ldr	r1, [pc, #16]	@ (800274c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4313      	orrs	r3, r2
 800273e:	600b      	str	r3, [r1, #0]
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	58003c00 	.word	0x58003c00

08002750 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8002756:	4b0f      	ldr	r3, [pc, #60]	@ (8002794 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a0e      	ldr	r2, [pc, #56]	@ (8002794 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 800275c:	f043 0301 	orr.w	r3, r3, #1
 8002760:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002762:	f7ff ffc1 	bl	80026e8 <HAL_GetTick>
 8002766:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8002768:	e008      	b.n	800277c <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 800276a:	f7ff ffbd 	bl	80026e8 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b0a      	cmp	r3, #10
 8002776:	d901      	bls.n	800277c <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e006      	b.n	800278a <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 800277c:	4b05      	ldr	r3, [pc, #20]	@ (8002794 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0f0      	beq.n	800276a <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	58003c00 	.word	0x58003c00

08002798 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	431a      	orrs	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	609a      	str	r2, [r3, #8]
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
 80027c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	609a      	str	r2, [r3, #8]
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002800:	b480      	push	{r7}
 8002802:	b087      	sub	sp, #28
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
 800280c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	3360      	adds	r3, #96	@ 0x60
 8002812:	461a      	mov	r2, r3
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4a10      	ldr	r2, [pc, #64]	@ (8002860 <LL_ADC_SetOffset+0x60>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d10b      	bne.n	800283c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	4313      	orrs	r3, r2
 8002832:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800283a:	e00b      	b.n	8002854 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	430b      	orrs	r3, r1
 800284e:	431a      	orrs	r2, r3
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	601a      	str	r2, [r3, #0]
}
 8002854:	bf00      	nop
 8002856:	371c      	adds	r7, #28
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	58026000 	.word	0x58026000

08002864 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3360      	adds	r3, #96	@ 0x60
 8002872:	461a      	mov	r2, r3
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002884:	4618      	mov	r0, r3
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	f003 031f 	and.w	r3, r3, #31
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	fa01 f303 	lsl.w	r3, r1, r3
 80028b0:	431a      	orrs	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	611a      	str	r2, [r3, #16]
}
 80028b6:	bf00      	nop
 80028b8:	3714      	adds	r7, #20
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
	...

080028c4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b087      	sub	sp, #28
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4a0c      	ldr	r2, [pc, #48]	@ (8002904 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d00e      	beq.n	80028f6 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	3360      	adds	r3, #96	@ 0x60
 80028dc:	461a      	mov	r2, r3
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	431a      	orrs	r2, r3
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	601a      	str	r2, [r3, #0]
  }
}
 80028f6:	bf00      	nop
 80028f8:	371c      	adds	r7, #28
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	58026000 	.word	0x58026000

08002908 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002908:	b480      	push	{r7}
 800290a:	b087      	sub	sp, #28
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4a0c      	ldr	r2, [pc, #48]	@ (8002948 <LL_ADC_SetOffsetSaturation+0x40>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d10e      	bne.n	800293a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	3360      	adds	r3, #96	@ 0x60
 8002920:	461a      	mov	r2, r3
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	431a      	orrs	r2, r3
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800293a:	bf00      	nop
 800293c:	371c      	adds	r7, #28
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	58026000 	.word	0x58026000

0800294c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800294c:	b480      	push	{r7}
 800294e:	b087      	sub	sp, #28
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4a0c      	ldr	r2, [pc, #48]	@ (800298c <LL_ADC_SetOffsetSign+0x40>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d10e      	bne.n	800297e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	3360      	adds	r3, #96	@ 0x60
 8002964:	461a      	mov	r2, r3
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	431a      	orrs	r2, r3
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800297e:	bf00      	nop
 8002980:	371c      	adds	r7, #28
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	58026000 	.word	0x58026000

08002990 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002990:	b480      	push	{r7}
 8002992:	b087      	sub	sp, #28
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	3360      	adds	r3, #96	@ 0x60
 80029a0:	461a      	mov	r2, r3
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	4a0c      	ldr	r2, [pc, #48]	@ (80029e0 <LL_ADC_SetOffsetState+0x50>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d108      	bne.n	80029c4 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	431a      	orrs	r2, r3
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80029c2:	e007      	b.n	80029d4 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	431a      	orrs	r2, r3
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	601a      	str	r2, [r3, #0]
}
 80029d4:	bf00      	nop
 80029d6:	371c      	adds	r7, #28
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	58026000 	.word	0x58026000

080029e4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b087      	sub	sp, #28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	3330      	adds	r3, #48	@ 0x30
 80029f4:	461a      	mov	r2, r3
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	0a1b      	lsrs	r3, r3, #8
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	f003 030c 	and.w	r3, r3, #12
 8002a00:	4413      	add	r3, r2
 8002a02:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	f003 031f 	and.w	r3, r3, #31
 8002a0e:	211f      	movs	r1, #31
 8002a10:	fa01 f303 	lsl.w	r3, r1, r3
 8002a14:	43db      	mvns	r3, r3
 8002a16:	401a      	ands	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	0e9b      	lsrs	r3, r3, #26
 8002a1c:	f003 011f 	and.w	r1, r3, #31
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f003 031f 	and.w	r3, r3, #31
 8002a26:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a30:	bf00      	nop
 8002a32:	371c      	adds	r7, #28
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	3314      	adds	r3, #20
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	0e5b      	lsrs	r3, r3, #25
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	4413      	add	r3, r2
 8002a5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	0d1b      	lsrs	r3, r3, #20
 8002a64:	f003 031f 	and.w	r3, r3, #31
 8002a68:	2107      	movs	r1, #7
 8002a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	401a      	ands	r2, r3
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	0d1b      	lsrs	r3, r3, #20
 8002a76:	f003 031f 	and.w	r3, r3, #31
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a80:	431a      	orrs	r2, r3
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a86:	bf00      	nop
 8002a88:	371c      	adds	r7, #28
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
	...

08002a94 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4a1a      	ldr	r2, [pc, #104]	@ (8002b0c <LL_ADC_SetChannelSingleDiff+0x78>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d115      	bne.n	8002ad4 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	401a      	ands	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f003 0318 	and.w	r3, r3, #24
 8002abe:	4914      	ldr	r1, [pc, #80]	@ (8002b10 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002ac0:	40d9      	lsrs	r1, r3
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	400b      	ands	r3, r1
 8002ac6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002aca:	431a      	orrs	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002ad2:	e014      	b.n	8002afe <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	401a      	ands	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f003 0318 	and.w	r3, r3, #24
 8002aea:	4909      	ldr	r1, [pc, #36]	@ (8002b10 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002aec:	40d9      	lsrs	r1, r3
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	400b      	ands	r3, r1
 8002af2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002af6:	431a      	orrs	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8002afe:	bf00      	nop
 8002b00:	3714      	adds	r7, #20
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	58026000 	.word	0x58026000
 8002b10:	000fffff 	.word	0x000fffff

08002b14 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	4b04      	ldr	r3, [pc, #16]	@ (8002b34 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002b22:	4013      	ands	r3, r2
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6093      	str	r3, [r2, #8]
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	5fffffc0 	.word	0x5fffffc0

08002b38 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b4c:	d101      	bne.n	8002b52 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e000      	b.n	8002b54 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	4b05      	ldr	r3, [pc, #20]	@ (8002b84 <LL_ADC_EnableInternalRegulator+0x24>)
 8002b6e:	4013      	ands	r3, r2
 8002b70:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	6fffffc0 	.word	0x6fffffc0

08002b88 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b9c:	d101      	bne.n	8002ba2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e000      	b.n	8002ba4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d101      	bne.n	8002bc8 <LL_ADC_IsEnabled+0x18>
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e000      	b.n	8002bca <LL_ADC_IsEnabled+0x1a>
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 0304 	and.w	r3, r3, #4
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d101      	bne.n	8002bee <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 0308 	and.w	r3, r3, #8
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d101      	bne.n	8002c14 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c10:	2301      	movs	r3, #1
 8002c12:	e000      	b.n	8002c16 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
	...

08002c24 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c24:	b590      	push	{r4, r7, lr}
 8002c26:	b089      	sub	sp, #36	@ 0x24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e1ee      	b.n	800301c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d109      	bne.n	8002c60 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7fe fc1d 	bl	800148c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff ff67 	bl	8002b38 <LL_ADC_IsDeepPowerDownEnabled>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d004      	beq.n	8002c7a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff ff4d 	bl	8002b14 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff ff82 	bl	8002b88 <LL_ADC_IsInternalRegulatorEnabled>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d114      	bne.n	8002cb4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff ff66 	bl	8002b60 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c94:	4b8e      	ldr	r3, [pc, #568]	@ (8002ed0 <HAL_ADC_Init+0x2ac>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	099b      	lsrs	r3, r3, #6
 8002c9a:	4a8e      	ldr	r2, [pc, #568]	@ (8002ed4 <HAL_ADC_Init+0x2b0>)
 8002c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca0:	099b      	lsrs	r3, r3, #6
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ca6:	e002      	b.n	8002cae <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	3b01      	subs	r3, #1
 8002cac:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1f9      	bne.n	8002ca8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff ff65 	bl	8002b88 <LL_ADC_IsInternalRegulatorEnabled>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10d      	bne.n	8002ce0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cc8:	f043 0210 	orr.w	r2, r3, #16
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cd4:	f043 0201 	orr.w	r2, r3, #1
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff ff76 	bl	8002bd6 <LL_ADC_REG_IsConversionOngoing>
 8002cea:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cf0:	f003 0310 	and.w	r3, r3, #16
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f040 8188 	bne.w	800300a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f040 8184 	bne.w	800300a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d06:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002d0a:	f043 0202 	orr.w	r2, r3, #2
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff ff4a 	bl	8002bb0 <LL_ADC_IsEnabled>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d136      	bne.n	8002d90 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a6c      	ldr	r2, [pc, #432]	@ (8002ed8 <HAL_ADC_Init+0x2b4>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d004      	beq.n	8002d36 <HAL_ADC_Init+0x112>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a6a      	ldr	r2, [pc, #424]	@ (8002edc <HAL_ADC_Init+0x2b8>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d10e      	bne.n	8002d54 <HAL_ADC_Init+0x130>
 8002d36:	4868      	ldr	r0, [pc, #416]	@ (8002ed8 <HAL_ADC_Init+0x2b4>)
 8002d38:	f7ff ff3a 	bl	8002bb0 <LL_ADC_IsEnabled>
 8002d3c:	4604      	mov	r4, r0
 8002d3e:	4867      	ldr	r0, [pc, #412]	@ (8002edc <HAL_ADC_Init+0x2b8>)
 8002d40:	f7ff ff36 	bl	8002bb0 <LL_ADC_IsEnabled>
 8002d44:	4603      	mov	r3, r0
 8002d46:	4323      	orrs	r3, r4
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	bf0c      	ite	eq
 8002d4c:	2301      	moveq	r3, #1
 8002d4e:	2300      	movne	r3, #0
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	e008      	b.n	8002d66 <HAL_ADC_Init+0x142>
 8002d54:	4862      	ldr	r0, [pc, #392]	@ (8002ee0 <HAL_ADC_Init+0x2bc>)
 8002d56:	f7ff ff2b 	bl	8002bb0 <LL_ADC_IsEnabled>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	bf0c      	ite	eq
 8002d60:	2301      	moveq	r3, #1
 8002d62:	2300      	movne	r3, #0
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d012      	beq.n	8002d90 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a5a      	ldr	r2, [pc, #360]	@ (8002ed8 <HAL_ADC_Init+0x2b4>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d004      	beq.n	8002d7e <HAL_ADC_Init+0x15a>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a58      	ldr	r2, [pc, #352]	@ (8002edc <HAL_ADC_Init+0x2b8>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d101      	bne.n	8002d82 <HAL_ADC_Init+0x15e>
 8002d7e:	4a59      	ldr	r2, [pc, #356]	@ (8002ee4 <HAL_ADC_Init+0x2c0>)
 8002d80:	e000      	b.n	8002d84 <HAL_ADC_Init+0x160>
 8002d82:	4a59      	ldr	r2, [pc, #356]	@ (8002ee8 <HAL_ADC_Init+0x2c4>)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4610      	mov	r0, r2
 8002d8c:	f7ff fd04 	bl	8002798 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a52      	ldr	r2, [pc, #328]	@ (8002ee0 <HAL_ADC_Init+0x2bc>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d129      	bne.n	8002dee <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	7e5b      	ldrb	r3, [r3, #25]
 8002d9e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002da4:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8002daa:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d013      	beq.n	8002ddc <HAL_ADC_Init+0x1b8>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	2b0c      	cmp	r3, #12
 8002dba:	d00d      	beq.n	8002dd8 <HAL_ADC_Init+0x1b4>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	2b1c      	cmp	r3, #28
 8002dc2:	d007      	beq.n	8002dd4 <HAL_ADC_Init+0x1b0>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	2b18      	cmp	r3, #24
 8002dca:	d101      	bne.n	8002dd0 <HAL_ADC_Init+0x1ac>
 8002dcc:	2318      	movs	r3, #24
 8002dce:	e006      	b.n	8002dde <HAL_ADC_Init+0x1ba>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	e004      	b.n	8002dde <HAL_ADC_Init+0x1ba>
 8002dd4:	2310      	movs	r3, #16
 8002dd6:	e002      	b.n	8002dde <HAL_ADC_Init+0x1ba>
 8002dd8:	2308      	movs	r3, #8
 8002dda:	e000      	b.n	8002dde <HAL_ADC_Init+0x1ba>
 8002ddc:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8002dde:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002de6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002de8:	4313      	orrs	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
 8002dec:	e00e      	b.n	8002e0c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	7e5b      	ldrb	r3, [r3, #25]
 8002df2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002df8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002dfe:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e06:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d106      	bne.n	8002e24 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	045b      	lsls	r3, r3, #17
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d009      	beq.n	8002e40 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e30:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e38:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a26      	ldr	r2, [pc, #152]	@ (8002ee0 <HAL_ADC_Init+0x2bc>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d115      	bne.n	8002e76 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68da      	ldr	r2, [r3, #12]
 8002e50:	4b26      	ldr	r3, [pc, #152]	@ (8002eec <HAL_ADC_Init+0x2c8>)
 8002e52:	4013      	ands	r3, r2
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6812      	ldr	r2, [r2, #0]
 8002e58:	69b9      	ldr	r1, [r7, #24]
 8002e5a:	430b      	orrs	r3, r1
 8002e5c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	611a      	str	r2, [r3, #16]
 8002e74:	e009      	b.n	8002e8a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68da      	ldr	r2, [r3, #12]
 8002e7c:	4b1c      	ldr	r3, [pc, #112]	@ (8002ef0 <HAL_ADC_Init+0x2cc>)
 8002e7e:	4013      	ands	r3, r2
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6812      	ldr	r2, [r2, #0]
 8002e84:	69b9      	ldr	r1, [r7, #24]
 8002e86:	430b      	orrs	r3, r1
 8002e88:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff fea1 	bl	8002bd6 <LL_ADC_REG_IsConversionOngoing>
 8002e94:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff feae 	bl	8002bfc <LL_ADC_INJ_IsConversionOngoing>
 8002ea0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f040 808e 	bne.w	8002fc6 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f040 808a 	bne.w	8002fc6 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ee0 <HAL_ADC_Init+0x2bc>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d11b      	bne.n	8002ef4 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	7e1b      	ldrb	r3, [r3, #24]
 8002ec0:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002ec8:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
 8002ece:	e018      	b.n	8002f02 <HAL_ADC_Init+0x2de>
 8002ed0:	24000000 	.word	0x24000000
 8002ed4:	053e2d63 	.word	0x053e2d63
 8002ed8:	40022000 	.word	0x40022000
 8002edc:	40022100 	.word	0x40022100
 8002ee0:	58026000 	.word	0x58026000
 8002ee4:	40022300 	.word	0x40022300
 8002ee8:	58026300 	.word	0x58026300
 8002eec:	fff04007 	.word	0xfff04007
 8002ef0:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	7e1b      	ldrb	r3, [r3, #24]
 8002ef8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8002efe:	4313      	orrs	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68da      	ldr	r2, [r3, #12]
 8002f08:	4b46      	ldr	r3, [pc, #280]	@ (8003024 <HAL_ADC_Init+0x400>)
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	6812      	ldr	r2, [r2, #0]
 8002f10:	69b9      	ldr	r1, [r7, #24]
 8002f12:	430b      	orrs	r3, r1
 8002f14:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d137      	bne.n	8002f90 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f24:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a3f      	ldr	r2, [pc, #252]	@ (8003028 <HAL_ADC_Init+0x404>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d116      	bne.n	8002f5e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	691a      	ldr	r2, [r3, #16]
 8002f36:	4b3d      	ldr	r3, [pc, #244]	@ (800302c <HAL_ADC_Init+0x408>)
 8002f38:	4013      	ands	r3, r2
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002f42:	4311      	orrs	r1, r2
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002f48:	4311      	orrs	r1, r2
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	431a      	orrs	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f042 0201 	orr.w	r2, r2, #1
 8002f5a:	611a      	str	r2, [r3, #16]
 8002f5c:	e020      	b.n	8002fa0 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	691a      	ldr	r2, [r3, #16]
 8002f64:	4b32      	ldr	r3, [pc, #200]	@ (8003030 <HAL_ADC_Init+0x40c>)
 8002f66:	4013      	ands	r3, r2
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002f6c:	3a01      	subs	r2, #1
 8002f6e:	0411      	lsls	r1, r2, #16
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002f74:	4311      	orrs	r1, r2
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002f7a:	4311      	orrs	r1, r2
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002f80:	430a      	orrs	r2, r1
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f042 0201 	orr.w	r2, r2, #1
 8002f8c:	611a      	str	r2, [r3, #16]
 8002f8e:	e007      	b.n	8002fa0 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	691a      	ldr	r2, [r3, #16]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 0201 	bic.w	r2, r2, #1
 8002f9e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a1b      	ldr	r2, [pc, #108]	@ (8003028 <HAL_ADC_Init+0x404>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d002      	beq.n	8002fc6 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 fd67 	bl	8003a94 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d10c      	bne.n	8002fe8 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd4:	f023 010f 	bic.w	r1, r3, #15
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	69db      	ldr	r3, [r3, #28]
 8002fdc:	1e5a      	subs	r2, r3, #1
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	631a      	str	r2, [r3, #48]	@ 0x30
 8002fe6:	e007      	b.n	8002ff8 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 020f 	bic.w	r2, r2, #15
 8002ff6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ffc:	f023 0303 	bic.w	r3, r3, #3
 8003000:	f043 0201 	orr.w	r2, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	661a      	str	r2, [r3, #96]	@ 0x60
 8003008:	e007      	b.n	800301a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800300e:	f043 0210 	orr.w	r2, r3, #16
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800301a:	7ffb      	ldrb	r3, [r7, #31]
}
 800301c:	4618      	mov	r0, r3
 800301e:	3724      	adds	r7, #36	@ 0x24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd90      	pop	{r4, r7, pc}
 8003024:	ffffbffc 	.word	0xffffbffc
 8003028:	58026000 	.word	0x58026000
 800302c:	fc00f81f 	.word	0xfc00f81f
 8003030:	fc00f81e 	.word	0xfc00f81e

08003034 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003034:	b590      	push	{r4, r7, lr}
 8003036:	b0b9      	sub	sp, #228	@ 0xe4
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800303e:	2300      	movs	r3, #0
 8003040:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003044:	2300      	movs	r3, #0
 8003046:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800304e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	4aab      	ldr	r2, [pc, #684]	@ (8003304 <HAL_ADC_ConfigChannel+0x2d0>)
 8003056:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800305e:	2b01      	cmp	r3, #1
 8003060:	d102      	bne.n	8003068 <HAL_ADC_ConfigChannel+0x34>
 8003062:	2302      	movs	r3, #2
 8003064:	f000 bcfe 	b.w	8003a64 <HAL_ADC_ConfigChannel+0xa30>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff fdae 	bl	8002bd6 <LL_ADC_REG_IsConversionOngoing>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	f040 84e2 	bne.w	8003a46 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	db38      	blt.n	80030fc <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a9e      	ldr	r2, [pc, #632]	@ (8003308 <HAL_ADC_ConfigChannel+0x2d4>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d033      	beq.n	80030fc <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800309c:	2b00      	cmp	r3, #0
 800309e:	d108      	bne.n	80030b2 <HAL_ADC_ConfigChannel+0x7e>
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	0e9b      	lsrs	r3, r3, #26
 80030a6:	f003 031f 	and.w	r3, r3, #31
 80030aa:	2201      	movs	r2, #1
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	e01d      	b.n	80030ee <HAL_ADC_ConfigChannel+0xba>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030be:	fa93 f3a3 	rbit	r3, r3
 80030c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80030c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80030ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 80030d6:	2320      	movs	r3, #32
 80030d8:	e004      	b.n	80030e4 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 80030da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80030de:	fab3 f383 	clz	r3, r3
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	f003 031f 	and.w	r3, r3, #31
 80030e8:	2201      	movs	r2, #1
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	6812      	ldr	r2, [r2, #0]
 80030f2:	69d1      	ldr	r1, [r2, #28]
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6812      	ldr	r2, [r2, #0]
 80030f8:	430b      	orrs	r3, r1
 80030fa:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6818      	ldr	r0, [r3, #0]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	6859      	ldr	r1, [r3, #4]
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	461a      	mov	r2, r3
 800310a:	f7ff fc6b 	bl	80029e4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff fd5f 	bl	8002bd6 <LL_ADC_REG_IsConversionOngoing>
 8003118:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff fd6b 	bl	8002bfc <LL_ADC_INJ_IsConversionOngoing>
 8003126:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800312a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800312e:	2b00      	cmp	r3, #0
 8003130:	f040 8270 	bne.w	8003614 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003134:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003138:	2b00      	cmp	r3, #0
 800313a:	f040 826b 	bne.w	8003614 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6818      	ldr	r0, [r3, #0]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	6819      	ldr	r1, [r3, #0]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	461a      	mov	r2, r3
 800314c:	f7ff fc76 	bl	8002a3c <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a6c      	ldr	r2, [pc, #432]	@ (8003308 <HAL_ADC_ConfigChannel+0x2d4>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d10d      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	695a      	ldr	r2, [r3, #20]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	08db      	lsrs	r3, r3, #3
 8003166:	f003 0303 	and.w	r3, r3, #3
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003174:	e032      	b.n	80031dc <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003176:	4b65      	ldr	r3, [pc, #404]	@ (800330c <HAL_ADC_ConfigChannel+0x2d8>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800317e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003182:	d10b      	bne.n	800319c <HAL_ADC_ConfigChannel+0x168>
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	695a      	ldr	r2, [r3, #20]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	089b      	lsrs	r3, r3, #2
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	e01d      	b.n	80031d8 <HAL_ADC_ConfigChannel+0x1a4>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	f003 0310 	and.w	r3, r3, #16
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10b      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x18e>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	695a      	ldr	r2, [r3, #20]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	089b      	lsrs	r3, r3, #2
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	e00a      	b.n	80031d8 <HAL_ADC_ConfigChannel+0x1a4>
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	695a      	ldr	r2, [r3, #20]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	089b      	lsrs	r3, r3, #2
 80031ce:	f003 0304 	and.w	r3, r3, #4
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	2b04      	cmp	r3, #4
 80031e2:	d048      	beq.n	8003276 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6818      	ldr	r0, [r3, #0]
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	6919      	ldr	r1, [r3, #16]
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80031f4:	f7ff fb04 	bl	8002800 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a42      	ldr	r2, [pc, #264]	@ (8003308 <HAL_ADC_ConfigChannel+0x2d4>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d119      	bne.n	8003236 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6818      	ldr	r0, [r3, #0]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	6919      	ldr	r1, [r3, #16]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	461a      	mov	r2, r3
 8003210:	f7ff fb9c 	bl	800294c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6818      	ldr	r0, [r3, #0]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	6919      	ldr	r1, [r3, #16]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d102      	bne.n	800322c <HAL_ADC_ConfigChannel+0x1f8>
 8003226:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800322a:	e000      	b.n	800322e <HAL_ADC_ConfigChannel+0x1fa>
 800322c:	2300      	movs	r3, #0
 800322e:	461a      	mov	r2, r3
 8003230:	f7ff fb6a 	bl	8002908 <LL_ADC_SetOffsetSaturation>
 8003234:	e1ee      	b.n	8003614 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6818      	ldr	r0, [r3, #0]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	6919      	ldr	r1, [r3, #16]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003244:	2b01      	cmp	r3, #1
 8003246:	d102      	bne.n	800324e <HAL_ADC_ConfigChannel+0x21a>
 8003248:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800324c:	e000      	b.n	8003250 <HAL_ADC_ConfigChannel+0x21c>
 800324e:	2300      	movs	r3, #0
 8003250:	461a      	mov	r2, r3
 8003252:	f7ff fb37 	bl	80028c4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6818      	ldr	r0, [r3, #0]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	6919      	ldr	r1, [r3, #16]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	7e1b      	ldrb	r3, [r3, #24]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d102      	bne.n	800326c <HAL_ADC_ConfigChannel+0x238>
 8003266:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800326a:	e000      	b.n	800326e <HAL_ADC_ConfigChannel+0x23a>
 800326c:	2300      	movs	r3, #0
 800326e:	461a      	mov	r2, r3
 8003270:	f7ff fb0e 	bl	8002890 <LL_ADC_SetDataRightShift>
 8003274:	e1ce      	b.n	8003614 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a23      	ldr	r2, [pc, #140]	@ (8003308 <HAL_ADC_ConfigChannel+0x2d4>)
 800327c:	4293      	cmp	r3, r2
 800327e:	f040 8181 	bne.w	8003584 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2100      	movs	r1, #0
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff faeb 	bl	8002864 <LL_ADC_GetOffsetChannel>
 800328e:	4603      	mov	r3, r0
 8003290:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10a      	bne.n	80032ae <HAL_ADC_ConfigChannel+0x27a>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2100      	movs	r1, #0
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff fae0 	bl	8002864 <LL_ADC_GetOffsetChannel>
 80032a4:	4603      	mov	r3, r0
 80032a6:	0e9b      	lsrs	r3, r3, #26
 80032a8:	f003 021f 	and.w	r2, r3, #31
 80032ac:	e01e      	b.n	80032ec <HAL_ADC_ConfigChannel+0x2b8>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2100      	movs	r1, #0
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff fad5 	bl	8002864 <LL_ADC_GetOffsetChannel>
 80032ba:	4603      	mov	r3, r0
 80032bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80032c4:	fa93 f3a3 	rbit	r3, r3
 80032c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80032cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80032d0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 80032d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d101      	bne.n	80032e0 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 80032dc:	2320      	movs	r3, #32
 80032de:	e004      	b.n	80032ea <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 80032e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80032e4:	fab3 f383 	clz	r3, r3
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	461a      	mov	r2, r3
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d10b      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x2dc>
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	0e9b      	lsrs	r3, r3, #26
 80032fe:	f003 031f 	and.w	r3, r3, #31
 8003302:	e01e      	b.n	8003342 <HAL_ADC_ConfigChannel+0x30e>
 8003304:	47ff0000 	.word	0x47ff0000
 8003308:	58026000 	.word	0x58026000
 800330c:	5c001000 	.word	0x5c001000
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003318:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800331c:	fa93 f3a3 	rbit	r3, r3
 8003320:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003324:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003328:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800332c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8003334:	2320      	movs	r3, #32
 8003336:	e004      	b.n	8003342 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8003338:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800333c:	fab3 f383 	clz	r3, r3
 8003340:	b2db      	uxtb	r3, r3
 8003342:	429a      	cmp	r2, r3
 8003344:	d106      	bne.n	8003354 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2200      	movs	r2, #0
 800334c:	2100      	movs	r1, #0
 800334e:	4618      	mov	r0, r3
 8003350:	f7ff fb1e 	bl	8002990 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2101      	movs	r1, #1
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff fa82 	bl	8002864 <LL_ADC_GetOffsetChannel>
 8003360:	4603      	mov	r3, r0
 8003362:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10a      	bne.n	8003380 <HAL_ADC_ConfigChannel+0x34c>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2101      	movs	r1, #1
 8003370:	4618      	mov	r0, r3
 8003372:	f7ff fa77 	bl	8002864 <LL_ADC_GetOffsetChannel>
 8003376:	4603      	mov	r3, r0
 8003378:	0e9b      	lsrs	r3, r3, #26
 800337a:	f003 021f 	and.w	r2, r3, #31
 800337e:	e01e      	b.n	80033be <HAL_ADC_ConfigChannel+0x38a>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2101      	movs	r1, #1
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff fa6c 	bl	8002864 <LL_ADC_GetOffsetChannel>
 800338c:	4603      	mov	r3, r0
 800338e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003392:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003396:	fa93 f3a3 	rbit	r3, r3
 800339a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800339e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80033a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80033a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 80033ae:	2320      	movs	r3, #32
 80033b0:	e004      	b.n	80033bc <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 80033b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80033b6:	fab3 f383 	clz	r3, r3
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	461a      	mov	r2, r3
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d105      	bne.n	80033d6 <HAL_ADC_ConfigChannel+0x3a2>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	0e9b      	lsrs	r3, r3, #26
 80033d0:	f003 031f 	and.w	r3, r3, #31
 80033d4:	e018      	b.n	8003408 <HAL_ADC_ConfigChannel+0x3d4>
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033de:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033e2:	fa93 f3a3 	rbit	r3, r3
 80033e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80033ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80033ee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80033f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 80033fa:	2320      	movs	r3, #32
 80033fc:	e004      	b.n	8003408 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 80033fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003402:	fab3 f383 	clz	r3, r3
 8003406:	b2db      	uxtb	r3, r3
 8003408:	429a      	cmp	r2, r3
 800340a:	d106      	bne.n	800341a <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2200      	movs	r2, #0
 8003412:	2101      	movs	r1, #1
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff fabb 	bl	8002990 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2102      	movs	r1, #2
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff fa1f 	bl	8002864 <LL_ADC_GetOffsetChannel>
 8003426:	4603      	mov	r3, r0
 8003428:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10a      	bne.n	8003446 <HAL_ADC_ConfigChannel+0x412>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2102      	movs	r1, #2
 8003436:	4618      	mov	r0, r3
 8003438:	f7ff fa14 	bl	8002864 <LL_ADC_GetOffsetChannel>
 800343c:	4603      	mov	r3, r0
 800343e:	0e9b      	lsrs	r3, r3, #26
 8003440:	f003 021f 	and.w	r2, r3, #31
 8003444:	e01e      	b.n	8003484 <HAL_ADC_ConfigChannel+0x450>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2102      	movs	r1, #2
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff fa09 	bl	8002864 <LL_ADC_GetOffsetChannel>
 8003452:	4603      	mov	r3, r0
 8003454:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003458:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800345c:	fa93 f3a3 	rbit	r3, r3
 8003460:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003464:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003468:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800346c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003470:	2b00      	cmp	r3, #0
 8003472:	d101      	bne.n	8003478 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8003474:	2320      	movs	r3, #32
 8003476:	e004      	b.n	8003482 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8003478:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800347c:	fab3 f383 	clz	r3, r3
 8003480:	b2db      	uxtb	r3, r3
 8003482:	461a      	mov	r2, r3
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800348c:	2b00      	cmp	r3, #0
 800348e:	d105      	bne.n	800349c <HAL_ADC_ConfigChannel+0x468>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	0e9b      	lsrs	r3, r3, #26
 8003496:	f003 031f 	and.w	r3, r3, #31
 800349a:	e014      	b.n	80034c6 <HAL_ADC_ConfigChannel+0x492>
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80034a4:	fa93 f3a3 	rbit	r3, r3
 80034a8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80034aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80034b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80034b8:	2320      	movs	r3, #32
 80034ba:	e004      	b.n	80034c6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80034bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80034c0:	fab3 f383 	clz	r3, r3
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d106      	bne.n	80034d8 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2200      	movs	r2, #0
 80034d0:	2102      	movs	r1, #2
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff fa5c 	bl	8002990 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2103      	movs	r1, #3
 80034de:	4618      	mov	r0, r3
 80034e0:	f7ff f9c0 	bl	8002864 <LL_ADC_GetOffsetChannel>
 80034e4:	4603      	mov	r3, r0
 80034e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10a      	bne.n	8003504 <HAL_ADC_ConfigChannel+0x4d0>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2103      	movs	r1, #3
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff f9b5 	bl	8002864 <LL_ADC_GetOffsetChannel>
 80034fa:	4603      	mov	r3, r0
 80034fc:	0e9b      	lsrs	r3, r3, #26
 80034fe:	f003 021f 	and.w	r2, r3, #31
 8003502:	e017      	b.n	8003534 <HAL_ADC_ConfigChannel+0x500>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2103      	movs	r1, #3
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff f9aa 	bl	8002864 <LL_ADC_GetOffsetChannel>
 8003510:	4603      	mov	r3, r0
 8003512:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003514:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003516:	fa93 f3a3 	rbit	r3, r3
 800351a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800351c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800351e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003520:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8003526:	2320      	movs	r3, #32
 8003528:	e003      	b.n	8003532 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 800352a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800352c:	fab3 f383 	clz	r3, r3
 8003530:	b2db      	uxtb	r3, r3
 8003532:	461a      	mov	r2, r3
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800353c:	2b00      	cmp	r3, #0
 800353e:	d105      	bne.n	800354c <HAL_ADC_ConfigChannel+0x518>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	0e9b      	lsrs	r3, r3, #26
 8003546:	f003 031f 	and.w	r3, r3, #31
 800354a:	e011      	b.n	8003570 <HAL_ADC_ConfigChannel+0x53c>
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003552:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003554:	fa93 f3a3 	rbit	r3, r3
 8003558:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800355a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800355c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800355e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8003564:	2320      	movs	r3, #32
 8003566:	e003      	b.n	8003570 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8003568:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800356a:	fab3 f383 	clz	r3, r3
 800356e:	b2db      	uxtb	r3, r3
 8003570:	429a      	cmp	r2, r3
 8003572:	d14f      	bne.n	8003614 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2200      	movs	r2, #0
 800357a:	2103      	movs	r1, #3
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff fa07 	bl	8002990 <LL_ADC_SetOffsetState>
 8003582:	e047      	b.n	8003614 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800358a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	069b      	lsls	r3, r3, #26
 8003594:	429a      	cmp	r2, r3
 8003596:	d107      	bne.n	80035a8 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80035a6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	069b      	lsls	r3, r3, #26
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d107      	bne.n	80035cc <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80035ca:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	069b      	lsls	r3, r3, #26
 80035dc:	429a      	cmp	r2, r3
 80035de:	d107      	bne.n	80035f0 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80035ee:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	069b      	lsls	r3, r3, #26
 8003600:	429a      	cmp	r2, r3
 8003602:	d107      	bne.n	8003614 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003612:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff fac9 	bl	8002bb0 <LL_ADC_IsEnabled>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	f040 8219 	bne.w	8003a58 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6818      	ldr	r0, [r3, #0]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	6819      	ldr	r1, [r3, #0]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	461a      	mov	r2, r3
 8003634:	f7ff fa2e 	bl	8002a94 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	4aa1      	ldr	r2, [pc, #644]	@ (80038c4 <HAL_ADC_ConfigChannel+0x890>)
 800363e:	4293      	cmp	r3, r2
 8003640:	f040 812e 	bne.w	80038a0 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10b      	bne.n	800366c <HAL_ADC_ConfigChannel+0x638>
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	0e9b      	lsrs	r3, r3, #26
 800365a:	3301      	adds	r3, #1
 800365c:	f003 031f 	and.w	r3, r3, #31
 8003660:	2b09      	cmp	r3, #9
 8003662:	bf94      	ite	ls
 8003664:	2301      	movls	r3, #1
 8003666:	2300      	movhi	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	e019      	b.n	80036a0 <HAL_ADC_ConfigChannel+0x66c>
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003672:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003674:	fa93 f3a3 	rbit	r3, r3
 8003678:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800367a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800367c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800367e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003684:	2320      	movs	r3, #32
 8003686:	e003      	b.n	8003690 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003688:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800368a:	fab3 f383 	clz	r3, r3
 800368e:	b2db      	uxtb	r3, r3
 8003690:	3301      	adds	r3, #1
 8003692:	f003 031f 	and.w	r3, r3, #31
 8003696:	2b09      	cmp	r3, #9
 8003698:	bf94      	ite	ls
 800369a:	2301      	movls	r3, #1
 800369c:	2300      	movhi	r3, #0
 800369e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d079      	beq.n	8003798 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d107      	bne.n	80036c0 <HAL_ADC_ConfigChannel+0x68c>
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	0e9b      	lsrs	r3, r3, #26
 80036b6:	3301      	adds	r3, #1
 80036b8:	069b      	lsls	r3, r3, #26
 80036ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036be:	e015      	b.n	80036ec <HAL_ADC_ConfigChannel+0x6b8>
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036c8:	fa93 f3a3 	rbit	r3, r3
 80036cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80036ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036d0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80036d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 80036d8:	2320      	movs	r3, #32
 80036da:	e003      	b.n	80036e4 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 80036dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036de:	fab3 f383 	clz	r3, r3
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	3301      	adds	r3, #1
 80036e6:	069b      	lsls	r3, r3, #26
 80036e8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d109      	bne.n	800370c <HAL_ADC_ConfigChannel+0x6d8>
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	0e9b      	lsrs	r3, r3, #26
 80036fe:	3301      	adds	r3, #1
 8003700:	f003 031f 	and.w	r3, r3, #31
 8003704:	2101      	movs	r1, #1
 8003706:	fa01 f303 	lsl.w	r3, r1, r3
 800370a:	e017      	b.n	800373c <HAL_ADC_ConfigChannel+0x708>
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003712:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003714:	fa93 f3a3 	rbit	r3, r3
 8003718:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800371a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800371c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800371e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8003724:	2320      	movs	r3, #32
 8003726:	e003      	b.n	8003730 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8003728:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800372a:	fab3 f383 	clz	r3, r3
 800372e:	b2db      	uxtb	r3, r3
 8003730:	3301      	adds	r3, #1
 8003732:	f003 031f 	and.w	r3, r3, #31
 8003736:	2101      	movs	r1, #1
 8003738:	fa01 f303 	lsl.w	r3, r1, r3
 800373c:	ea42 0103 	orr.w	r1, r2, r3
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10a      	bne.n	8003762 <HAL_ADC_ConfigChannel+0x72e>
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	0e9b      	lsrs	r3, r3, #26
 8003752:	3301      	adds	r3, #1
 8003754:	f003 021f 	and.w	r2, r3, #31
 8003758:	4613      	mov	r3, r2
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	4413      	add	r3, r2
 800375e:	051b      	lsls	r3, r3, #20
 8003760:	e018      	b.n	8003794 <HAL_ADC_ConfigChannel+0x760>
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800376a:	fa93 f3a3 	rbit	r3, r3
 800376e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003772:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 800377a:	2320      	movs	r3, #32
 800377c:	e003      	b.n	8003786 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 800377e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003780:	fab3 f383 	clz	r3, r3
 8003784:	b2db      	uxtb	r3, r3
 8003786:	3301      	adds	r3, #1
 8003788:	f003 021f 	and.w	r2, r3, #31
 800378c:	4613      	mov	r3, r2
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	4413      	add	r3, r2
 8003792:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003794:	430b      	orrs	r3, r1
 8003796:	e07e      	b.n	8003896 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d107      	bne.n	80037b4 <HAL_ADC_ConfigChannel+0x780>
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	0e9b      	lsrs	r3, r3, #26
 80037aa:	3301      	adds	r3, #1
 80037ac:	069b      	lsls	r3, r3, #26
 80037ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037b2:	e015      	b.n	80037e0 <HAL_ADC_ConfigChannel+0x7ac>
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037bc:	fa93 f3a3 	rbit	r3, r3
 80037c0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80037c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80037c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 80037cc:	2320      	movs	r3, #32
 80037ce:	e003      	b.n	80037d8 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 80037d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037d2:	fab3 f383 	clz	r3, r3
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	3301      	adds	r3, #1
 80037da:	069b      	lsls	r3, r3, #26
 80037dc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d109      	bne.n	8003800 <HAL_ADC_ConfigChannel+0x7cc>
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	0e9b      	lsrs	r3, r3, #26
 80037f2:	3301      	adds	r3, #1
 80037f4:	f003 031f 	and.w	r3, r3, #31
 80037f8:	2101      	movs	r1, #1
 80037fa:	fa01 f303 	lsl.w	r3, r1, r3
 80037fe:	e017      	b.n	8003830 <HAL_ADC_ConfigChannel+0x7fc>
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	fa93 f3a3 	rbit	r3, r3
 800380c:	61bb      	str	r3, [r7, #24]
  return result;
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003812:	6a3b      	ldr	r3, [r7, #32]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8003818:	2320      	movs	r3, #32
 800381a:	e003      	b.n	8003824 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 800381c:	6a3b      	ldr	r3, [r7, #32]
 800381e:	fab3 f383 	clz	r3, r3
 8003822:	b2db      	uxtb	r3, r3
 8003824:	3301      	adds	r3, #1
 8003826:	f003 031f 	and.w	r3, r3, #31
 800382a:	2101      	movs	r1, #1
 800382c:	fa01 f303 	lsl.w	r3, r1, r3
 8003830:	ea42 0103 	orr.w	r1, r2, r3
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800383c:	2b00      	cmp	r3, #0
 800383e:	d10d      	bne.n	800385c <HAL_ADC_ConfigChannel+0x828>
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	0e9b      	lsrs	r3, r3, #26
 8003846:	3301      	adds	r3, #1
 8003848:	f003 021f 	and.w	r2, r3, #31
 800384c:	4613      	mov	r3, r2
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	4413      	add	r3, r2
 8003852:	3b1e      	subs	r3, #30
 8003854:	051b      	lsls	r3, r3, #20
 8003856:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800385a:	e01b      	b.n	8003894 <HAL_ADC_ConfigChannel+0x860>
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	fa93 f3a3 	rbit	r3, r3
 8003868:	60fb      	str	r3, [r7, #12]
  return result;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d101      	bne.n	8003878 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8003874:	2320      	movs	r3, #32
 8003876:	e003      	b.n	8003880 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	fab3 f383 	clz	r3, r3
 800387e:	b2db      	uxtb	r3, r3
 8003880:	3301      	adds	r3, #1
 8003882:	f003 021f 	and.w	r2, r3, #31
 8003886:	4613      	mov	r3, r2
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	4413      	add	r3, r2
 800388c:	3b1e      	subs	r3, #30
 800388e:	051b      	lsls	r3, r3, #20
 8003890:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003894:	430b      	orrs	r3, r1
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	6892      	ldr	r2, [r2, #8]
 800389a:	4619      	mov	r1, r3
 800389c:	f7ff f8ce 	bl	8002a3c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f280 80d7 	bge.w	8003a58 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a06      	ldr	r2, [pc, #24]	@ (80038c8 <HAL_ADC_ConfigChannel+0x894>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d004      	beq.n	80038be <HAL_ADC_ConfigChannel+0x88a>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a04      	ldr	r2, [pc, #16]	@ (80038cc <HAL_ADC_ConfigChannel+0x898>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d10a      	bne.n	80038d4 <HAL_ADC_ConfigChannel+0x8a0>
 80038be:	4b04      	ldr	r3, [pc, #16]	@ (80038d0 <HAL_ADC_ConfigChannel+0x89c>)
 80038c0:	e009      	b.n	80038d6 <HAL_ADC_ConfigChannel+0x8a2>
 80038c2:	bf00      	nop
 80038c4:	47ff0000 	.word	0x47ff0000
 80038c8:	40022000 	.word	0x40022000
 80038cc:	40022100 	.word	0x40022100
 80038d0:	40022300 	.word	0x40022300
 80038d4:	4b65      	ldr	r3, [pc, #404]	@ (8003a6c <HAL_ADC_ConfigChannel+0xa38>)
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7fe ff84 	bl	80027e4 <LL_ADC_GetCommonPathInternalCh>
 80038dc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a62      	ldr	r2, [pc, #392]	@ (8003a70 <HAL_ADC_ConfigChannel+0xa3c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d004      	beq.n	80038f4 <HAL_ADC_ConfigChannel+0x8c0>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a61      	ldr	r2, [pc, #388]	@ (8003a74 <HAL_ADC_ConfigChannel+0xa40>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d10e      	bne.n	8003912 <HAL_ADC_ConfigChannel+0x8de>
 80038f4:	485e      	ldr	r0, [pc, #376]	@ (8003a70 <HAL_ADC_ConfigChannel+0xa3c>)
 80038f6:	f7ff f95b 	bl	8002bb0 <LL_ADC_IsEnabled>
 80038fa:	4604      	mov	r4, r0
 80038fc:	485d      	ldr	r0, [pc, #372]	@ (8003a74 <HAL_ADC_ConfigChannel+0xa40>)
 80038fe:	f7ff f957 	bl	8002bb0 <LL_ADC_IsEnabled>
 8003902:	4603      	mov	r3, r0
 8003904:	4323      	orrs	r3, r4
 8003906:	2b00      	cmp	r3, #0
 8003908:	bf0c      	ite	eq
 800390a:	2301      	moveq	r3, #1
 800390c:	2300      	movne	r3, #0
 800390e:	b2db      	uxtb	r3, r3
 8003910:	e008      	b.n	8003924 <HAL_ADC_ConfigChannel+0x8f0>
 8003912:	4859      	ldr	r0, [pc, #356]	@ (8003a78 <HAL_ADC_ConfigChannel+0xa44>)
 8003914:	f7ff f94c 	bl	8002bb0 <LL_ADC_IsEnabled>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	bf0c      	ite	eq
 800391e:	2301      	moveq	r3, #1
 8003920:	2300      	movne	r3, #0
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 8084 	beq.w	8003a32 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a53      	ldr	r2, [pc, #332]	@ (8003a7c <HAL_ADC_ConfigChannel+0xa48>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d132      	bne.n	800399a <HAL_ADC_ConfigChannel+0x966>
 8003934:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003938:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d12c      	bne.n	800399a <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a4c      	ldr	r2, [pc, #304]	@ (8003a78 <HAL_ADC_ConfigChannel+0xa44>)
 8003946:	4293      	cmp	r3, r2
 8003948:	f040 8086 	bne.w	8003a58 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a47      	ldr	r2, [pc, #284]	@ (8003a70 <HAL_ADC_ConfigChannel+0xa3c>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d004      	beq.n	8003960 <HAL_ADC_ConfigChannel+0x92c>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a46      	ldr	r2, [pc, #280]	@ (8003a74 <HAL_ADC_ConfigChannel+0xa40>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d101      	bne.n	8003964 <HAL_ADC_ConfigChannel+0x930>
 8003960:	4a47      	ldr	r2, [pc, #284]	@ (8003a80 <HAL_ADC_ConfigChannel+0xa4c>)
 8003962:	e000      	b.n	8003966 <HAL_ADC_ConfigChannel+0x932>
 8003964:	4a41      	ldr	r2, [pc, #260]	@ (8003a6c <HAL_ADC_ConfigChannel+0xa38>)
 8003966:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800396a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800396e:	4619      	mov	r1, r3
 8003970:	4610      	mov	r0, r2
 8003972:	f7fe ff24 	bl	80027be <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003976:	4b43      	ldr	r3, [pc, #268]	@ (8003a84 <HAL_ADC_ConfigChannel+0xa50>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	099b      	lsrs	r3, r3, #6
 800397c:	4a42      	ldr	r2, [pc, #264]	@ (8003a88 <HAL_ADC_ConfigChannel+0xa54>)
 800397e:	fba2 2303 	umull	r2, r3, r2, r3
 8003982:	099b      	lsrs	r3, r3, #6
 8003984:	3301      	adds	r3, #1
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800398a:	e002      	b.n	8003992 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	3b01      	subs	r3, #1
 8003990:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1f9      	bne.n	800398c <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003998:	e05e      	b.n	8003a58 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a3b      	ldr	r2, [pc, #236]	@ (8003a8c <HAL_ADC_ConfigChannel+0xa58>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d120      	bne.n	80039e6 <HAL_ADC_ConfigChannel+0x9b2>
 80039a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80039a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d11a      	bne.n	80039e6 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a30      	ldr	r2, [pc, #192]	@ (8003a78 <HAL_ADC_ConfigChannel+0xa44>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d14e      	bne.n	8003a58 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a2c      	ldr	r2, [pc, #176]	@ (8003a70 <HAL_ADC_ConfigChannel+0xa3c>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d004      	beq.n	80039ce <HAL_ADC_ConfigChannel+0x99a>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a2a      	ldr	r2, [pc, #168]	@ (8003a74 <HAL_ADC_ConfigChannel+0xa40>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d101      	bne.n	80039d2 <HAL_ADC_ConfigChannel+0x99e>
 80039ce:	4a2c      	ldr	r2, [pc, #176]	@ (8003a80 <HAL_ADC_ConfigChannel+0xa4c>)
 80039d0:	e000      	b.n	80039d4 <HAL_ADC_ConfigChannel+0x9a0>
 80039d2:	4a26      	ldr	r2, [pc, #152]	@ (8003a6c <HAL_ADC_ConfigChannel+0xa38>)
 80039d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80039d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039dc:	4619      	mov	r1, r3
 80039de:	4610      	mov	r0, r2
 80039e0:	f7fe feed 	bl	80027be <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039e4:	e038      	b.n	8003a58 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a29      	ldr	r2, [pc, #164]	@ (8003a90 <HAL_ADC_ConfigChannel+0xa5c>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d133      	bne.n	8003a58 <HAL_ADC_ConfigChannel+0xa24>
 80039f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80039f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d12d      	bne.n	8003a58 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a1d      	ldr	r2, [pc, #116]	@ (8003a78 <HAL_ADC_ConfigChannel+0xa44>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d128      	bne.n	8003a58 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a19      	ldr	r2, [pc, #100]	@ (8003a70 <HAL_ADC_ConfigChannel+0xa3c>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d004      	beq.n	8003a1a <HAL_ADC_ConfigChannel+0x9e6>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a17      	ldr	r2, [pc, #92]	@ (8003a74 <HAL_ADC_ConfigChannel+0xa40>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d101      	bne.n	8003a1e <HAL_ADC_ConfigChannel+0x9ea>
 8003a1a:	4a19      	ldr	r2, [pc, #100]	@ (8003a80 <HAL_ADC_ConfigChannel+0xa4c>)
 8003a1c:	e000      	b.n	8003a20 <HAL_ADC_ConfigChannel+0x9ec>
 8003a1e:	4a13      	ldr	r2, [pc, #76]	@ (8003a6c <HAL_ADC_ConfigChannel+0xa38>)
 8003a20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003a24:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	f7fe fec7 	bl	80027be <LL_ADC_SetCommonPathInternalCh>
 8003a30:	e012      	b.n	8003a58 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a36:	f043 0220 	orr.w	r2, r3, #32
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8003a44:	e008      	b.n	8003a58 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a4a:	f043 0220 	orr.w	r2, r3, #32
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003a60:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	37e4      	adds	r7, #228	@ 0xe4
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd90      	pop	{r4, r7, pc}
 8003a6c:	58026300 	.word	0x58026300
 8003a70:	40022000 	.word	0x40022000
 8003a74:	40022100 	.word	0x40022100
 8003a78:	58026000 	.word	0x58026000
 8003a7c:	c7520000 	.word	0xc7520000
 8003a80:	40022300 	.word	0x40022300
 8003a84:	24000000 	.word	0x24000000
 8003a88:	053e2d63 	.word	0x053e2d63
 8003a8c:	c3210000 	.word	0xc3210000
 8003a90:	cb840000 	.word	0xcb840000

08003a94 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a6c      	ldr	r2, [pc, #432]	@ (8003c54 <ADC_ConfigureBoostMode+0x1c0>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d004      	beq.n	8003ab0 <ADC_ConfigureBoostMode+0x1c>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a6b      	ldr	r2, [pc, #428]	@ (8003c58 <ADC_ConfigureBoostMode+0x1c4>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d109      	bne.n	8003ac4 <ADC_ConfigureBoostMode+0x30>
 8003ab0:	4b6a      	ldr	r3, [pc, #424]	@ (8003c5c <ADC_ConfigureBoostMode+0x1c8>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	bf14      	ite	ne
 8003abc:	2301      	movne	r3, #1
 8003abe:	2300      	moveq	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	e008      	b.n	8003ad6 <ADC_ConfigureBoostMode+0x42>
 8003ac4:	4b66      	ldr	r3, [pc, #408]	@ (8003c60 <ADC_ConfigureBoostMode+0x1cc>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	bf14      	ite	ne
 8003ad0:	2301      	movne	r3, #1
 8003ad2:	2300      	moveq	r3, #0
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d01c      	beq.n	8003b14 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003ada:	f005 f847 	bl	8008b6c <HAL_RCC_GetHCLKFreq>
 8003ade:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003ae8:	d010      	beq.n	8003b0c <ADC_ConfigureBoostMode+0x78>
 8003aea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003aee:	d873      	bhi.n	8003bd8 <ADC_ConfigureBoostMode+0x144>
 8003af0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003af4:	d002      	beq.n	8003afc <ADC_ConfigureBoostMode+0x68>
 8003af6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003afa:	d16d      	bne.n	8003bd8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	0c1b      	lsrs	r3, r3, #16
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b08:	60fb      	str	r3, [r7, #12]
        break;
 8003b0a:	e068      	b.n	8003bde <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	089b      	lsrs	r3, r3, #2
 8003b10:	60fb      	str	r3, [r7, #12]
        break;
 8003b12:	e064      	b.n	8003bde <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003b14:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003b18:	f04f 0100 	mov.w	r1, #0
 8003b1c:	f006 fa64 	bl	8009fe8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003b20:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003b2a:	d051      	beq.n	8003bd0 <ADC_ConfigureBoostMode+0x13c>
 8003b2c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003b30:	d854      	bhi.n	8003bdc <ADC_ConfigureBoostMode+0x148>
 8003b32:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003b36:	d047      	beq.n	8003bc8 <ADC_ConfigureBoostMode+0x134>
 8003b38:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003b3c:	d84e      	bhi.n	8003bdc <ADC_ConfigureBoostMode+0x148>
 8003b3e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003b42:	d03d      	beq.n	8003bc0 <ADC_ConfigureBoostMode+0x12c>
 8003b44:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003b48:	d848      	bhi.n	8003bdc <ADC_ConfigureBoostMode+0x148>
 8003b4a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b4e:	d033      	beq.n	8003bb8 <ADC_ConfigureBoostMode+0x124>
 8003b50:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b54:	d842      	bhi.n	8003bdc <ADC_ConfigureBoostMode+0x148>
 8003b56:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003b5a:	d029      	beq.n	8003bb0 <ADC_ConfigureBoostMode+0x11c>
 8003b5c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003b60:	d83c      	bhi.n	8003bdc <ADC_ConfigureBoostMode+0x148>
 8003b62:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003b66:	d01a      	beq.n	8003b9e <ADC_ConfigureBoostMode+0x10a>
 8003b68:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003b6c:	d836      	bhi.n	8003bdc <ADC_ConfigureBoostMode+0x148>
 8003b6e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003b72:	d014      	beq.n	8003b9e <ADC_ConfigureBoostMode+0x10a>
 8003b74:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003b78:	d830      	bhi.n	8003bdc <ADC_ConfigureBoostMode+0x148>
 8003b7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b7e:	d00e      	beq.n	8003b9e <ADC_ConfigureBoostMode+0x10a>
 8003b80:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b84:	d82a      	bhi.n	8003bdc <ADC_ConfigureBoostMode+0x148>
 8003b86:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003b8a:	d008      	beq.n	8003b9e <ADC_ConfigureBoostMode+0x10a>
 8003b8c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003b90:	d824      	bhi.n	8003bdc <ADC_ConfigureBoostMode+0x148>
 8003b92:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b96:	d002      	beq.n	8003b9e <ADC_ConfigureBoostMode+0x10a>
 8003b98:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003b9c:	d11e      	bne.n	8003bdc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	0c9b      	lsrs	r3, r3, #18
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bac:	60fb      	str	r3, [r7, #12]
        break;
 8003bae:	e016      	b.n	8003bde <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	091b      	lsrs	r3, r3, #4
 8003bb4:	60fb      	str	r3, [r7, #12]
        break;
 8003bb6:	e012      	b.n	8003bde <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	095b      	lsrs	r3, r3, #5
 8003bbc:	60fb      	str	r3, [r7, #12]
        break;
 8003bbe:	e00e      	b.n	8003bde <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	099b      	lsrs	r3, r3, #6
 8003bc4:	60fb      	str	r3, [r7, #12]
        break;
 8003bc6:	e00a      	b.n	8003bde <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	09db      	lsrs	r3, r3, #7
 8003bcc:	60fb      	str	r3, [r7, #12]
        break;
 8003bce:	e006      	b.n	8003bde <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	0a1b      	lsrs	r3, r3, #8
 8003bd4:	60fb      	str	r3, [r7, #12]
        break;
 8003bd6:	e002      	b.n	8003bde <ADC_ConfigureBoostMode+0x14a>
        break;
 8003bd8:	bf00      	nop
 8003bda:	e000      	b.n	8003bde <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003bdc:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	085b      	lsrs	r3, r3, #1
 8003be2:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4a1f      	ldr	r2, [pc, #124]	@ (8003c64 <ADC_ConfigureBoostMode+0x1d0>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d808      	bhi.n	8003bfe <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689a      	ldr	r2, [r3, #8]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003bfa:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003bfc:	e025      	b.n	8003c4a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	4a19      	ldr	r2, [pc, #100]	@ (8003c68 <ADC_ConfigureBoostMode+0x1d4>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d80a      	bhi.n	8003c1c <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c18:	609a      	str	r2, [r3, #8]
}
 8003c1a:	e016      	b.n	8003c4a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4a13      	ldr	r2, [pc, #76]	@ (8003c6c <ADC_ConfigureBoostMode+0x1d8>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d80a      	bhi.n	8003c3a <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c36:	609a      	str	r2, [r3, #8]
}
 8003c38:	e007      	b.n	8003c4a <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003c48:	609a      	str	r2, [r3, #8]
}
 8003c4a:	bf00      	nop
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	40022000 	.word	0x40022000
 8003c58:	40022100 	.word	0x40022100
 8003c5c:	40022300 	.word	0x40022300
 8003c60:	58026300 	.word	0x58026300
 8003c64:	005f5e10 	.word	0x005f5e10
 8003c68:	00bebc20 	.word	0x00bebc20
 8003c6c:	017d7840 	.word	0x017d7840

08003c70 <LL_ADC_IsEnabled>:
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <LL_ADC_IsEnabled+0x18>
 8003c84:	2301      	movs	r3, #1
 8003c86:	e000      	b.n	8003c8a <LL_ADC_IsEnabled+0x1a>
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <LL_ADC_REG_IsConversionOngoing>:
{
 8003c96:	b480      	push	{r7}
 8003c98:	b083      	sub	sp, #12
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 0304 	and.w	r3, r3, #4
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	d101      	bne.n	8003cae <LL_ADC_REG_IsConversionOngoing+0x18>
 8003caa:	2301      	movs	r3, #1
 8003cac:	e000      	b.n	8003cb0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003cbc:	b590      	push	{r4, r7, lr}
 8003cbe:	b0a3      	sub	sp, #140	@ 0x8c
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d101      	bne.n	8003cda <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	e0c1      	b.n	8003e5e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a5e      	ldr	r2, [pc, #376]	@ (8003e68 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d102      	bne.n	8003cfa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003cf4:	4b5d      	ldr	r3, [pc, #372]	@ (8003e6c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	e001      	b.n	8003cfe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d10b      	bne.n	8003d1c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d08:	f043 0220 	orr.w	r2, r3, #32
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e0a0      	b.n	8003e5e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7ff ffb9 	bl	8003c96 <LL_ADC_REG_IsConversionOngoing>
 8003d24:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7ff ffb2 	bl	8003c96 <LL_ADC_REG_IsConversionOngoing>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f040 8081 	bne.w	8003e3c <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003d3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d17c      	bne.n	8003e3c <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a48      	ldr	r2, [pc, #288]	@ (8003e68 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d004      	beq.n	8003d56 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a46      	ldr	r2, [pc, #280]	@ (8003e6c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d101      	bne.n	8003d5a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8003d56:	4b46      	ldr	r3, [pc, #280]	@ (8003e70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003d58:	e000      	b.n	8003d5c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003d5a:	4b46      	ldr	r3, [pc, #280]	@ (8003e74 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003d5c:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d039      	beq.n	8003dda <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003d66:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	431a      	orrs	r2, r3
 8003d74:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d76:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a3a      	ldr	r2, [pc, #232]	@ (8003e68 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d004      	beq.n	8003d8c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a39      	ldr	r2, [pc, #228]	@ (8003e6c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d10e      	bne.n	8003daa <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8003d8c:	4836      	ldr	r0, [pc, #216]	@ (8003e68 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003d8e:	f7ff ff6f 	bl	8003c70 <LL_ADC_IsEnabled>
 8003d92:	4604      	mov	r4, r0
 8003d94:	4835      	ldr	r0, [pc, #212]	@ (8003e6c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003d96:	f7ff ff6b 	bl	8003c70 <LL_ADC_IsEnabled>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	4323      	orrs	r3, r4
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	bf0c      	ite	eq
 8003da2:	2301      	moveq	r3, #1
 8003da4:	2300      	movne	r3, #0
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	e008      	b.n	8003dbc <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8003daa:	4833      	ldr	r0, [pc, #204]	@ (8003e78 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003dac:	f7ff ff60 	bl	8003c70 <LL_ADC_IsEnabled>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	bf0c      	ite	eq
 8003db6:	2301      	moveq	r3, #1
 8003db8:	2300      	movne	r3, #0
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d047      	beq.n	8003e50 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003dc0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	4b2d      	ldr	r3, [pc, #180]	@ (8003e7c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	6811      	ldr	r1, [r2, #0]
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	6892      	ldr	r2, [r2, #8]
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003dd6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003dd8:	e03a      	b.n	8003e50 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003dda:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003de2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003de4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a1f      	ldr	r2, [pc, #124]	@ (8003e68 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d004      	beq.n	8003dfa <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a1d      	ldr	r2, [pc, #116]	@ (8003e6c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d10e      	bne.n	8003e18 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8003dfa:	481b      	ldr	r0, [pc, #108]	@ (8003e68 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003dfc:	f7ff ff38 	bl	8003c70 <LL_ADC_IsEnabled>
 8003e00:	4604      	mov	r4, r0
 8003e02:	481a      	ldr	r0, [pc, #104]	@ (8003e6c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003e04:	f7ff ff34 	bl	8003c70 <LL_ADC_IsEnabled>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	4323      	orrs	r3, r4
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	bf0c      	ite	eq
 8003e10:	2301      	moveq	r3, #1
 8003e12:	2300      	movne	r3, #0
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	e008      	b.n	8003e2a <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8003e18:	4817      	ldr	r0, [pc, #92]	@ (8003e78 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003e1a:	f7ff ff29 	bl	8003c70 <LL_ADC_IsEnabled>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	bf0c      	ite	eq
 8003e24:	2301      	moveq	r3, #1
 8003e26:	2300      	movne	r3, #0
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d010      	beq.n	8003e50 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003e2e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e30:	689a      	ldr	r2, [r3, #8]
 8003e32:	4b12      	ldr	r3, [pc, #72]	@ (8003e7c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003e34:	4013      	ands	r3, r2
 8003e36:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003e38:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e3a:	e009      	b.n	8003e50 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e40:	f043 0220 	orr.w	r2, r3, #32
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003e4e:	e000      	b.n	8003e52 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e50:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003e5a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	378c      	adds	r7, #140	@ 0x8c
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd90      	pop	{r4, r7, pc}
 8003e66:	bf00      	nop
 8003e68:	40022000 	.word	0x40022000
 8003e6c:	40022100 	.word	0x40022100
 8003e70:	40022300 	.word	0x40022300
 8003e74:	58026300 	.word	0x58026300
 8003e78:	58026000 	.word	0x58026000
 8003e7c:	fffff0e0 	.word	0xfffff0e0

08003e80 <__NVIC_SetPriorityGrouping>:
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e90:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec0 <__NVIC_SetPriorityGrouping+0x40>)
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003ea8:	4b06      	ldr	r3, [pc, #24]	@ (8003ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eae:	4a04      	ldr	r2, [pc, #16]	@ (8003ec0 <__NVIC_SetPriorityGrouping+0x40>)
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	60d3      	str	r3, [r2, #12]
}
 8003eb4:	bf00      	nop
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	e000ed00 	.word	0xe000ed00
 8003ec4:	05fa0000 	.word	0x05fa0000

08003ec8 <__NVIC_GetPriorityGrouping>:
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ecc:	4b04      	ldr	r3, [pc, #16]	@ (8003ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	0a1b      	lsrs	r3, r3, #8
 8003ed2:	f003 0307 	and.w	r3, r3, #7
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	e000ed00 	.word	0xe000ed00

08003ee4 <__NVIC_EnableIRQ>:
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	4603      	mov	r3, r0
 8003eec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003eee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	db0b      	blt.n	8003f0e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ef6:	88fb      	ldrh	r3, [r7, #6]
 8003ef8:	f003 021f 	and.w	r2, r3, #31
 8003efc:	4907      	ldr	r1, [pc, #28]	@ (8003f1c <__NVIC_EnableIRQ+0x38>)
 8003efe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f02:	095b      	lsrs	r3, r3, #5
 8003f04:	2001      	movs	r0, #1
 8003f06:	fa00 f202 	lsl.w	r2, r0, r2
 8003f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	e000e100 	.word	0xe000e100

08003f20 <__NVIC_SetPriority>:
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	4603      	mov	r3, r0
 8003f28:	6039      	str	r1, [r7, #0]
 8003f2a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003f2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	db0a      	blt.n	8003f4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	490c      	ldr	r1, [pc, #48]	@ (8003f6c <__NVIC_SetPriority+0x4c>)
 8003f3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f3e:	0112      	lsls	r2, r2, #4
 8003f40:	b2d2      	uxtb	r2, r2
 8003f42:	440b      	add	r3, r1
 8003f44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003f48:	e00a      	b.n	8003f60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	4908      	ldr	r1, [pc, #32]	@ (8003f70 <__NVIC_SetPriority+0x50>)
 8003f50:	88fb      	ldrh	r3, [r7, #6]
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	3b04      	subs	r3, #4
 8003f58:	0112      	lsls	r2, r2, #4
 8003f5a:	b2d2      	uxtb	r2, r2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	761a      	strb	r2, [r3, #24]
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	e000e100 	.word	0xe000e100
 8003f70:	e000ed00 	.word	0xe000ed00

08003f74 <NVIC_EncodePriority>:
{
 8003f74:	b480      	push	{r7}
 8003f76:	b089      	sub	sp, #36	@ 0x24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f003 0307 	and.w	r3, r3, #7
 8003f86:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	f1c3 0307 	rsb	r3, r3, #7
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	bf28      	it	cs
 8003f92:	2304      	movcs	r3, #4
 8003f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	3304      	adds	r3, #4
 8003f9a:	2b06      	cmp	r3, #6
 8003f9c:	d902      	bls.n	8003fa4 <NVIC_EncodePriority+0x30>
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	3b03      	subs	r3, #3
 8003fa2:	e000      	b.n	8003fa6 <NVIC_EncodePriority+0x32>
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb2:	43da      	mvns	r2, r3
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	401a      	ands	r2, r3
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc6:	43d9      	mvns	r1, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fcc:	4313      	orrs	r3, r2
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3724      	adds	r7, #36	@ 0x24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b082      	sub	sp, #8
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7ff ff4c 	bl	8003e80 <__NVIC_SetPriorityGrouping>
}
 8003fe8:	bf00      	nop
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
 8003ffc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ffe:	f7ff ff63 	bl	8003ec8 <__NVIC_GetPriorityGrouping>
 8004002:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	68b9      	ldr	r1, [r7, #8]
 8004008:	6978      	ldr	r0, [r7, #20]
 800400a:	f7ff ffb3 	bl	8003f74 <NVIC_EncodePriority>
 800400e:	4602      	mov	r2, r0
 8004010:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004014:	4611      	mov	r1, r2
 8004016:	4618      	mov	r0, r3
 8004018:	f7ff ff82 	bl	8003f20 <__NVIC_SetPriority>
}
 800401c:	bf00      	nop
 800401e:	3718      	adds	r7, #24
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	4603      	mov	r3, r0
 800402c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800402e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004032:	4618      	mov	r0, r3
 8004034:	f7ff ff56 	bl	8003ee4 <__NVIC_EnableIRQ>
}
 8004038:	bf00      	nop
 800403a:	3708      	adds	r7, #8
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8004044:	f3bf 8f5f 	dmb	sy
}
 8004048:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800404a:	4b07      	ldr	r3, [pc, #28]	@ (8004068 <HAL_MPU_Disable+0x28>)
 800404c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404e:	4a06      	ldr	r2, [pc, #24]	@ (8004068 <HAL_MPU_Disable+0x28>)
 8004050:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004054:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004056:	4b05      	ldr	r3, [pc, #20]	@ (800406c <HAL_MPU_Disable+0x2c>)
 8004058:	2200      	movs	r2, #0
 800405a:	605a      	str	r2, [r3, #4]
}
 800405c:	bf00      	nop
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	e000ed00 	.word	0xe000ed00
 800406c:	e000ed90 	.word	0xe000ed90

08004070 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004078:	4a0b      	ldr	r2, [pc, #44]	@ (80040a8 <HAL_MPU_Enable+0x38>)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f043 0301 	orr.w	r3, r3, #1
 8004080:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004082:	4b0a      	ldr	r3, [pc, #40]	@ (80040ac <HAL_MPU_Enable+0x3c>)
 8004084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004086:	4a09      	ldr	r2, [pc, #36]	@ (80040ac <HAL_MPU_Enable+0x3c>)
 8004088:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800408c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800408e:	f3bf 8f4f 	dsb	sy
}
 8004092:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004094:	f3bf 8f6f 	isb	sy
}
 8004098:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	e000ed90 	.word	0xe000ed90
 80040ac:	e000ed00 	.word	0xe000ed00

080040b0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	785a      	ldrb	r2, [r3, #1]
 80040bc:	4b1b      	ldr	r3, [pc, #108]	@ (800412c <HAL_MPU_ConfigRegion+0x7c>)
 80040be:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80040c0:	4b1a      	ldr	r3, [pc, #104]	@ (800412c <HAL_MPU_ConfigRegion+0x7c>)
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	4a19      	ldr	r2, [pc, #100]	@ (800412c <HAL_MPU_ConfigRegion+0x7c>)
 80040c6:	f023 0301 	bic.w	r3, r3, #1
 80040ca:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80040cc:	4a17      	ldr	r2, [pc, #92]	@ (800412c <HAL_MPU_ConfigRegion+0x7c>)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	7b1b      	ldrb	r3, [r3, #12]
 80040d8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	7adb      	ldrb	r3, [r3, #11]
 80040de:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80040e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	7a9b      	ldrb	r3, [r3, #10]
 80040e6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80040e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	7b5b      	ldrb	r3, [r3, #13]
 80040ee:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80040f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	7b9b      	ldrb	r3, [r3, #14]
 80040f6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80040f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	7bdb      	ldrb	r3, [r3, #15]
 80040fe:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004100:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	7a5b      	ldrb	r3, [r3, #9]
 8004106:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004108:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	7a1b      	ldrb	r3, [r3, #8]
 800410e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004110:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	7812      	ldrb	r2, [r2, #0]
 8004116:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004118:	4a04      	ldr	r2, [pc, #16]	@ (800412c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800411a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800411c:	6113      	str	r3, [r2, #16]
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	e000ed90 	.word	0xe000ed90

08004130 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e054      	b.n	80041ec <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	7f5b      	ldrb	r3, [r3, #29]
 8004146:	b2db      	uxtb	r3, r3
 8004148:	2b00      	cmp	r3, #0
 800414a:	d105      	bne.n	8004158 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7fd fac4 	bl	80016e0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2202      	movs	r2, #2
 800415c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	791b      	ldrb	r3, [r3, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10c      	bne.n	8004180 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a22      	ldr	r2, [pc, #136]	@ (80041f4 <HAL_CRC_Init+0xc4>)
 800416c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0218 	bic.w	r2, r2, #24
 800417c:	609a      	str	r2, [r3, #8]
 800417e:	e00c      	b.n	800419a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6899      	ldr	r1, [r3, #8]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	461a      	mov	r2, r3
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f834 	bl	80041f8 <HAL_CRCEx_Polynomial_Set>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e028      	b.n	80041ec <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	795b      	ldrb	r3, [r3, #5]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d105      	bne.n	80041ae <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f04f 32ff 	mov.w	r2, #4294967295
 80041aa:	611a      	str	r2, [r3, #16]
 80041ac:	e004      	b.n	80041b8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	6912      	ldr	r2, [r2, #16]
 80041b6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	695a      	ldr	r2, [r3, #20]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	699a      	ldr	r2, [r3, #24]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	430a      	orrs	r2, r1
 80041e2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3708      	adds	r7, #8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	04c11db7 	.word	0x04c11db7

080041f8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b087      	sub	sp, #28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004204:	2300      	movs	r3, #0
 8004206:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004208:	231f      	movs	r3, #31
 800420a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d102      	bne.n	800421c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	75fb      	strb	r3, [r7, #23]
 800421a:	e063      	b.n	80042e4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800421c:	bf00      	nop
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	1e5a      	subs	r2, r3, #1
 8004222:	613a      	str	r2, [r7, #16]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d009      	beq.n	800423c <HAL_CRCEx_Polynomial_Set+0x44>
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	f003 031f 	and.w	r3, r3, #31
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	fa22 f303 	lsr.w	r3, r2, r3
 8004234:	f003 0301 	and.w	r3, r3, #1
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0f0      	beq.n	800421e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b18      	cmp	r3, #24
 8004240:	d846      	bhi.n	80042d0 <HAL_CRCEx_Polynomial_Set+0xd8>
 8004242:	a201      	add	r2, pc, #4	@ (adr r2, 8004248 <HAL_CRCEx_Polynomial_Set+0x50>)
 8004244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004248:	080042d7 	.word	0x080042d7
 800424c:	080042d1 	.word	0x080042d1
 8004250:	080042d1 	.word	0x080042d1
 8004254:	080042d1 	.word	0x080042d1
 8004258:	080042d1 	.word	0x080042d1
 800425c:	080042d1 	.word	0x080042d1
 8004260:	080042d1 	.word	0x080042d1
 8004264:	080042d1 	.word	0x080042d1
 8004268:	080042c5 	.word	0x080042c5
 800426c:	080042d1 	.word	0x080042d1
 8004270:	080042d1 	.word	0x080042d1
 8004274:	080042d1 	.word	0x080042d1
 8004278:	080042d1 	.word	0x080042d1
 800427c:	080042d1 	.word	0x080042d1
 8004280:	080042d1 	.word	0x080042d1
 8004284:	080042d1 	.word	0x080042d1
 8004288:	080042b9 	.word	0x080042b9
 800428c:	080042d1 	.word	0x080042d1
 8004290:	080042d1 	.word	0x080042d1
 8004294:	080042d1 	.word	0x080042d1
 8004298:	080042d1 	.word	0x080042d1
 800429c:	080042d1 	.word	0x080042d1
 80042a0:	080042d1 	.word	0x080042d1
 80042a4:	080042d1 	.word	0x080042d1
 80042a8:	080042ad 	.word	0x080042ad
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	2b06      	cmp	r3, #6
 80042b0:	d913      	bls.n	80042da <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80042b6:	e010      	b.n	80042da <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	2b07      	cmp	r3, #7
 80042bc:	d90f      	bls.n	80042de <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80042c2:	e00c      	b.n	80042de <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	2b0f      	cmp	r3, #15
 80042c8:	d90b      	bls.n	80042e2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80042ce:	e008      	b.n	80042e2 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	75fb      	strb	r3, [r7, #23]
        break;
 80042d4:	e006      	b.n	80042e4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80042d6:	bf00      	nop
 80042d8:	e004      	b.n	80042e4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80042da:	bf00      	nop
 80042dc:	e002      	b.n	80042e4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80042de:	bf00      	nop
 80042e0:	e000      	b.n	80042e4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80042e2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80042e4:	7dfb      	ldrb	r3, [r7, #23]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10d      	bne.n	8004306 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f023 0118 	bic.w	r1, r3, #24
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	430a      	orrs	r2, r1
 8004304:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004306:	7dfb      	ldrb	r3, [r7, #23]
}
 8004308:	4618      	mov	r0, r3
 800430a:	371c      	adds	r7, #28
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e014      	b.n	8004350 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	791b      	ldrb	r3, [r3, #4]
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b00      	cmp	r3, #0
 800432e:	d105      	bne.n	800433c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f7fd f9f4 	bl	8001724 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2202      	movs	r2, #2
 8004340:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3708      	adds	r7, #8
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800436e:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d01d      	beq.n	80043b6 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d018      	beq.n	80043b6 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2204      	movs	r2, #4
 8004388:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	f043 0201 	orr.w	r2, r3, #1
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800439e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80043ae:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 f827 	bl	8004404 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d01d      	beq.n	80043fc <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d018      	beq.n	80043fc <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2204      	movs	r2, #4
 80043ce:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	f043 0202 	orr.w	r2, r3, #2
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80043e4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80043f4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f950 	bl	800469c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80043fc:	bf00      	nop
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b08a      	sub	sp, #40	@ 0x28
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004424:	2300      	movs	r3, #0
 8004426:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d002      	beq.n	8004436 <HAL_DAC_ConfigChannel+0x1e>
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e12a      	b.n	8004690 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	795b      	ldrb	r3, [r3, #5]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d101      	bne.n	8004446 <HAL_DAC_ConfigChannel+0x2e>
 8004442:	2302      	movs	r3, #2
 8004444:	e124      	b.n	8004690 <HAL_DAC_ConfigChannel+0x278>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2201      	movs	r2, #1
 800444a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2202      	movs	r2, #2
 8004450:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2b04      	cmp	r3, #4
 8004458:	d17a      	bne.n	8004550 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800445a:	f7fe f945 	bl	80026e8 <HAL_GetTick>
 800445e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d13d      	bne.n	80044e2 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004466:	e018      	b.n	800449a <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004468:	f7fe f93e 	bl	80026e8 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b01      	cmp	r3, #1
 8004474:	d911      	bls.n	800449a <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800447c:	4b86      	ldr	r3, [pc, #536]	@ (8004698 <HAL_DAC_ConfigChannel+0x280>)
 800447e:	4013      	ands	r3, r2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00a      	beq.n	800449a <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	f043 0208 	orr.w	r2, r3, #8
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2203      	movs	r2, #3
 8004494:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e0fa      	b.n	8004690 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044a0:	4b7d      	ldr	r3, [pc, #500]	@ (8004698 <HAL_DAC_ConfigChannel+0x280>)
 80044a2:	4013      	ands	r3, r2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1df      	bne.n	8004468 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	6992      	ldr	r2, [r2, #24]
 80044b0:	641a      	str	r2, [r3, #64]	@ 0x40
 80044b2:	e020      	b.n	80044f6 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80044b4:	f7fe f918 	bl	80026e8 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d90f      	bls.n	80044e2 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	da0a      	bge.n	80044e2 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	f043 0208 	orr.w	r2, r3, #8
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2203      	movs	r2, #3
 80044dc:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e0d6      	b.n	8004690 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	dbe3      	blt.n	80044b4 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	6992      	ldr	r2, [r2, #24]
 80044f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f003 0310 	and.w	r3, r3, #16
 8004502:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004506:	fa01 f303 	lsl.w	r3, r1, r3
 800450a:	43db      	mvns	r3, r3
 800450c:	ea02 0103 	and.w	r1, r2, r3
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	69da      	ldr	r2, [r3, #28]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f003 0310 	and.w	r3, r3, #16
 800451a:	409a      	lsls	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f003 0310 	and.w	r3, r3, #16
 8004530:	21ff      	movs	r1, #255	@ 0xff
 8004532:	fa01 f303 	lsl.w	r3, r1, r3
 8004536:	43db      	mvns	r3, r3
 8004538:	ea02 0103 	and.w	r1, r2, r3
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	6a1a      	ldr	r2, [r3, #32]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f003 0310 	and.w	r3, r3, #16
 8004546:	409a      	lsls	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	430a      	orrs	r2, r1
 800454e:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d11d      	bne.n	8004594 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800455e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f003 0310 	and.w	r3, r3, #16
 8004566:	221f      	movs	r2, #31
 8004568:	fa02 f303 	lsl.w	r3, r2, r3
 800456c:	43db      	mvns	r3, r3
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	4013      	ands	r3, r2
 8004572:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f003 0310 	and.w	r3, r3, #16
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	fa02 f303 	lsl.w	r3, r2, r3
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	4313      	orrs	r3, r2
 800458a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800459a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f003 0310 	and.w	r3, r3, #16
 80045a2:	2207      	movs	r2, #7
 80045a4:	fa02 f303 	lsl.w	r3, r2, r3
 80045a8:	43db      	mvns	r3, r3
 80045aa:	69ba      	ldr	r2, [r7, #24]
 80045ac:	4013      	ands	r3, r2
 80045ae:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d102      	bne.n	80045be <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 80045b8:	2300      	movs	r3, #0
 80045ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80045bc:	e00f      	b.n	80045de <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d102      	bne.n	80045cc <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80045c6:	2301      	movs	r3, #1
 80045c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80045ca:	e008      	b.n	80045de <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d102      	bne.n	80045da <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80045d4:	2301      	movs	r3, #1
 80045d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80045d8:	e001      	b.n	80045de <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80045da:	2300      	movs	r3, #0
 80045dc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045ea:	4313      	orrs	r3, r2
 80045ec:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f003 0310 	and.w	r3, r3, #16
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	fa02 f303 	lsl.w	r3, r2, r3
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6819      	ldr	r1, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f003 0310 	and.w	r3, r3, #16
 8004614:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	43da      	mvns	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	400a      	ands	r2, r1
 8004624:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f003 0310 	and.w	r3, r3, #16
 8004634:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8004638:	fa02 f303 	lsl.w	r3, r2, r3
 800463c:	43db      	mvns	r3, r3
 800463e:	69ba      	ldr	r2, [r7, #24]
 8004640:	4013      	ands	r3, r2
 8004642:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f003 0310 	and.w	r3, r3, #16
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	fa02 f303 	lsl.w	r3, r2, r3
 8004656:	69ba      	ldr	r2, [r7, #24]
 8004658:	4313      	orrs	r3, r2
 800465a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	69ba      	ldr	r2, [r7, #24]
 8004662:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6819      	ldr	r1, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f003 0310 	and.w	r3, r3, #16
 8004670:	22c0      	movs	r2, #192	@ 0xc0
 8004672:	fa02 f303 	lsl.w	r3, r2, r3
 8004676:	43da      	mvns	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	400a      	ands	r2, r1
 800467e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2201      	movs	r2, #1
 8004684:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800468c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8004690:	4618      	mov	r0, r3
 8004692:	3728      	adds	r7, #40	@ 0x28
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	20008000 	.word	0x20008000

0800469c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80046b8:	f7fe f816 	bl	80026e8 <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e312      	b.n	8004cee <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a66      	ldr	r2, [pc, #408]	@ (8004868 <HAL_DMA_Init+0x1b8>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d04a      	beq.n	8004768 <HAL_DMA_Init+0xb8>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a65      	ldr	r2, [pc, #404]	@ (800486c <HAL_DMA_Init+0x1bc>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d045      	beq.n	8004768 <HAL_DMA_Init+0xb8>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a63      	ldr	r2, [pc, #396]	@ (8004870 <HAL_DMA_Init+0x1c0>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d040      	beq.n	8004768 <HAL_DMA_Init+0xb8>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a62      	ldr	r2, [pc, #392]	@ (8004874 <HAL_DMA_Init+0x1c4>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d03b      	beq.n	8004768 <HAL_DMA_Init+0xb8>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a60      	ldr	r2, [pc, #384]	@ (8004878 <HAL_DMA_Init+0x1c8>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d036      	beq.n	8004768 <HAL_DMA_Init+0xb8>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a5f      	ldr	r2, [pc, #380]	@ (800487c <HAL_DMA_Init+0x1cc>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d031      	beq.n	8004768 <HAL_DMA_Init+0xb8>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a5d      	ldr	r2, [pc, #372]	@ (8004880 <HAL_DMA_Init+0x1d0>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d02c      	beq.n	8004768 <HAL_DMA_Init+0xb8>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a5c      	ldr	r2, [pc, #368]	@ (8004884 <HAL_DMA_Init+0x1d4>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d027      	beq.n	8004768 <HAL_DMA_Init+0xb8>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a5a      	ldr	r2, [pc, #360]	@ (8004888 <HAL_DMA_Init+0x1d8>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d022      	beq.n	8004768 <HAL_DMA_Init+0xb8>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a59      	ldr	r2, [pc, #356]	@ (800488c <HAL_DMA_Init+0x1dc>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d01d      	beq.n	8004768 <HAL_DMA_Init+0xb8>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a57      	ldr	r2, [pc, #348]	@ (8004890 <HAL_DMA_Init+0x1e0>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d018      	beq.n	8004768 <HAL_DMA_Init+0xb8>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a56      	ldr	r2, [pc, #344]	@ (8004894 <HAL_DMA_Init+0x1e4>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d013      	beq.n	8004768 <HAL_DMA_Init+0xb8>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a54      	ldr	r2, [pc, #336]	@ (8004898 <HAL_DMA_Init+0x1e8>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d00e      	beq.n	8004768 <HAL_DMA_Init+0xb8>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a53      	ldr	r2, [pc, #332]	@ (800489c <HAL_DMA_Init+0x1ec>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d009      	beq.n	8004768 <HAL_DMA_Init+0xb8>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a51      	ldr	r2, [pc, #324]	@ (80048a0 <HAL_DMA_Init+0x1f0>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d004      	beq.n	8004768 <HAL_DMA_Init+0xb8>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a50      	ldr	r2, [pc, #320]	@ (80048a4 <HAL_DMA_Init+0x1f4>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d101      	bne.n	800476c <HAL_DMA_Init+0xbc>
 8004768:	2301      	movs	r3, #1
 800476a:	e000      	b.n	800476e <HAL_DMA_Init+0xbe>
 800476c:	2300      	movs	r3, #0
 800476e:	2b00      	cmp	r3, #0
 8004770:	f000 813c 	beq.w	80049ec <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2202      	movs	r2, #2
 8004778:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a37      	ldr	r2, [pc, #220]	@ (8004868 <HAL_DMA_Init+0x1b8>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d04a      	beq.n	8004824 <HAL_DMA_Init+0x174>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a36      	ldr	r2, [pc, #216]	@ (800486c <HAL_DMA_Init+0x1bc>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d045      	beq.n	8004824 <HAL_DMA_Init+0x174>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a34      	ldr	r2, [pc, #208]	@ (8004870 <HAL_DMA_Init+0x1c0>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d040      	beq.n	8004824 <HAL_DMA_Init+0x174>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a33      	ldr	r2, [pc, #204]	@ (8004874 <HAL_DMA_Init+0x1c4>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d03b      	beq.n	8004824 <HAL_DMA_Init+0x174>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a31      	ldr	r2, [pc, #196]	@ (8004878 <HAL_DMA_Init+0x1c8>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d036      	beq.n	8004824 <HAL_DMA_Init+0x174>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a30      	ldr	r2, [pc, #192]	@ (800487c <HAL_DMA_Init+0x1cc>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d031      	beq.n	8004824 <HAL_DMA_Init+0x174>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a2e      	ldr	r2, [pc, #184]	@ (8004880 <HAL_DMA_Init+0x1d0>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d02c      	beq.n	8004824 <HAL_DMA_Init+0x174>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a2d      	ldr	r2, [pc, #180]	@ (8004884 <HAL_DMA_Init+0x1d4>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d027      	beq.n	8004824 <HAL_DMA_Init+0x174>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a2b      	ldr	r2, [pc, #172]	@ (8004888 <HAL_DMA_Init+0x1d8>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d022      	beq.n	8004824 <HAL_DMA_Init+0x174>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a2a      	ldr	r2, [pc, #168]	@ (800488c <HAL_DMA_Init+0x1dc>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d01d      	beq.n	8004824 <HAL_DMA_Init+0x174>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a28      	ldr	r2, [pc, #160]	@ (8004890 <HAL_DMA_Init+0x1e0>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d018      	beq.n	8004824 <HAL_DMA_Init+0x174>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a27      	ldr	r2, [pc, #156]	@ (8004894 <HAL_DMA_Init+0x1e4>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d013      	beq.n	8004824 <HAL_DMA_Init+0x174>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a25      	ldr	r2, [pc, #148]	@ (8004898 <HAL_DMA_Init+0x1e8>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d00e      	beq.n	8004824 <HAL_DMA_Init+0x174>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a24      	ldr	r2, [pc, #144]	@ (800489c <HAL_DMA_Init+0x1ec>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d009      	beq.n	8004824 <HAL_DMA_Init+0x174>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a22      	ldr	r2, [pc, #136]	@ (80048a0 <HAL_DMA_Init+0x1f0>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d004      	beq.n	8004824 <HAL_DMA_Init+0x174>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a21      	ldr	r2, [pc, #132]	@ (80048a4 <HAL_DMA_Init+0x1f4>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d108      	bne.n	8004836 <HAL_DMA_Init+0x186>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f022 0201 	bic.w	r2, r2, #1
 8004832:	601a      	str	r2, [r3, #0]
 8004834:	e007      	b.n	8004846 <HAL_DMA_Init+0x196>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 0201 	bic.w	r2, r2, #1
 8004844:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004846:	e02f      	b.n	80048a8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004848:	f7fd ff4e 	bl	80026e8 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b05      	cmp	r3, #5
 8004854:	d928      	bls.n	80048a8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2220      	movs	r2, #32
 800485a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2203      	movs	r2, #3
 8004860:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e242      	b.n	8004cee <HAL_DMA_Init+0x63e>
 8004868:	40020010 	.word	0x40020010
 800486c:	40020028 	.word	0x40020028
 8004870:	40020040 	.word	0x40020040
 8004874:	40020058 	.word	0x40020058
 8004878:	40020070 	.word	0x40020070
 800487c:	40020088 	.word	0x40020088
 8004880:	400200a0 	.word	0x400200a0
 8004884:	400200b8 	.word	0x400200b8
 8004888:	40020410 	.word	0x40020410
 800488c:	40020428 	.word	0x40020428
 8004890:	40020440 	.word	0x40020440
 8004894:	40020458 	.word	0x40020458
 8004898:	40020470 	.word	0x40020470
 800489c:	40020488 	.word	0x40020488
 80048a0:	400204a0 	.word	0x400204a0
 80048a4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1c8      	bne.n	8004848 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	4b83      	ldr	r3, [pc, #524]	@ (8004ad0 <HAL_DMA_Init+0x420>)
 80048c2:	4013      	ands	r3, r2
 80048c4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80048ce:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048da:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048e6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f8:	2b04      	cmp	r3, #4
 80048fa:	d107      	bne.n	800490c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004904:	4313      	orrs	r3, r2
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	4313      	orrs	r3, r2
 800490a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	2b28      	cmp	r3, #40	@ 0x28
 8004912:	d903      	bls.n	800491c <HAL_DMA_Init+0x26c>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	2b2e      	cmp	r3, #46	@ 0x2e
 800491a:	d91f      	bls.n	800495c <HAL_DMA_Init+0x2ac>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	2b3e      	cmp	r3, #62	@ 0x3e
 8004922:	d903      	bls.n	800492c <HAL_DMA_Init+0x27c>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	2b42      	cmp	r3, #66	@ 0x42
 800492a:	d917      	bls.n	800495c <HAL_DMA_Init+0x2ac>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	2b46      	cmp	r3, #70	@ 0x46
 8004932:	d903      	bls.n	800493c <HAL_DMA_Init+0x28c>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	2b48      	cmp	r3, #72	@ 0x48
 800493a:	d90f      	bls.n	800495c <HAL_DMA_Init+0x2ac>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	2b4e      	cmp	r3, #78	@ 0x4e
 8004942:	d903      	bls.n	800494c <HAL_DMA_Init+0x29c>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	2b52      	cmp	r3, #82	@ 0x52
 800494a:	d907      	bls.n	800495c <HAL_DMA_Init+0x2ac>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	2b73      	cmp	r3, #115	@ 0x73
 8004952:	d905      	bls.n	8004960 <HAL_DMA_Init+0x2b0>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	2b77      	cmp	r3, #119	@ 0x77
 800495a:	d801      	bhi.n	8004960 <HAL_DMA_Init+0x2b0>
 800495c:	2301      	movs	r3, #1
 800495e:	e000      	b.n	8004962 <HAL_DMA_Init+0x2b2>
 8004960:	2300      	movs	r3, #0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800496c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f023 0307 	bic.w	r3, r3, #7
 8004984:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	4313      	orrs	r3, r2
 800498e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004994:	2b04      	cmp	r3, #4
 8004996:	d117      	bne.n	80049c8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	4313      	orrs	r3, r2
 80049a0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00e      	beq.n	80049c8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f001 f9b4 	bl	8005d18 <DMA_CheckFifoParam>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d008      	beq.n	80049c8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2240      	movs	r2, #64	@ 0x40
 80049ba:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e192      	b.n	8004cee <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f001 f8ef 	bl	8005bb4 <DMA_CalcBaseAndBitshift>
 80049d6:	4603      	mov	r3, r0
 80049d8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049de:	f003 031f 	and.w	r3, r3, #31
 80049e2:	223f      	movs	r2, #63	@ 0x3f
 80049e4:	409a      	lsls	r2, r3
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	609a      	str	r2, [r3, #8]
 80049ea:	e0c8      	b.n	8004b7e <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a38      	ldr	r2, [pc, #224]	@ (8004ad4 <HAL_DMA_Init+0x424>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d022      	beq.n	8004a3c <HAL_DMA_Init+0x38c>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a37      	ldr	r2, [pc, #220]	@ (8004ad8 <HAL_DMA_Init+0x428>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d01d      	beq.n	8004a3c <HAL_DMA_Init+0x38c>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a35      	ldr	r2, [pc, #212]	@ (8004adc <HAL_DMA_Init+0x42c>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d018      	beq.n	8004a3c <HAL_DMA_Init+0x38c>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a34      	ldr	r2, [pc, #208]	@ (8004ae0 <HAL_DMA_Init+0x430>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d013      	beq.n	8004a3c <HAL_DMA_Init+0x38c>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a32      	ldr	r2, [pc, #200]	@ (8004ae4 <HAL_DMA_Init+0x434>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d00e      	beq.n	8004a3c <HAL_DMA_Init+0x38c>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a31      	ldr	r2, [pc, #196]	@ (8004ae8 <HAL_DMA_Init+0x438>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d009      	beq.n	8004a3c <HAL_DMA_Init+0x38c>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a2f      	ldr	r2, [pc, #188]	@ (8004aec <HAL_DMA_Init+0x43c>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d004      	beq.n	8004a3c <HAL_DMA_Init+0x38c>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a2e      	ldr	r2, [pc, #184]	@ (8004af0 <HAL_DMA_Init+0x440>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d101      	bne.n	8004a40 <HAL_DMA_Init+0x390>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e000      	b.n	8004a42 <HAL_DMA_Init+0x392>
 8004a40:	2300      	movs	r3, #0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f000 8092 	beq.w	8004b6c <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a21      	ldr	r2, [pc, #132]	@ (8004ad4 <HAL_DMA_Init+0x424>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d021      	beq.n	8004a96 <HAL_DMA_Init+0x3e6>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a20      	ldr	r2, [pc, #128]	@ (8004ad8 <HAL_DMA_Init+0x428>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d01c      	beq.n	8004a96 <HAL_DMA_Init+0x3e6>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a1e      	ldr	r2, [pc, #120]	@ (8004adc <HAL_DMA_Init+0x42c>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d017      	beq.n	8004a96 <HAL_DMA_Init+0x3e6>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a1d      	ldr	r2, [pc, #116]	@ (8004ae0 <HAL_DMA_Init+0x430>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d012      	beq.n	8004a96 <HAL_DMA_Init+0x3e6>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a1b      	ldr	r2, [pc, #108]	@ (8004ae4 <HAL_DMA_Init+0x434>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d00d      	beq.n	8004a96 <HAL_DMA_Init+0x3e6>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a1a      	ldr	r2, [pc, #104]	@ (8004ae8 <HAL_DMA_Init+0x438>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d008      	beq.n	8004a96 <HAL_DMA_Init+0x3e6>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a18      	ldr	r2, [pc, #96]	@ (8004aec <HAL_DMA_Init+0x43c>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d003      	beq.n	8004a96 <HAL_DMA_Init+0x3e6>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a17      	ldr	r2, [pc, #92]	@ (8004af0 <HAL_DMA_Init+0x440>)
 8004a94:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2202      	movs	r2, #2
 8004a9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	4b10      	ldr	r3, [pc, #64]	@ (8004af4 <HAL_DMA_Init+0x444>)
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	2b40      	cmp	r3, #64	@ 0x40
 8004abc:	d01c      	beq.n	8004af8 <HAL_DMA_Init+0x448>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	2b80      	cmp	r3, #128	@ 0x80
 8004ac4:	d102      	bne.n	8004acc <HAL_DMA_Init+0x41c>
 8004ac6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004aca:	e016      	b.n	8004afa <HAL_DMA_Init+0x44a>
 8004acc:	2300      	movs	r3, #0
 8004ace:	e014      	b.n	8004afa <HAL_DMA_Init+0x44a>
 8004ad0:	fe10803f 	.word	0xfe10803f
 8004ad4:	58025408 	.word	0x58025408
 8004ad8:	5802541c 	.word	0x5802541c
 8004adc:	58025430 	.word	0x58025430
 8004ae0:	58025444 	.word	0x58025444
 8004ae4:	58025458 	.word	0x58025458
 8004ae8:	5802546c 	.word	0x5802546c
 8004aec:	58025480 	.word	0x58025480
 8004af0:	58025494 	.word	0x58025494
 8004af4:	fffe000f 	.word	0xfffe000f
 8004af8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	68d2      	ldr	r2, [r2, #12]
 8004afe:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004b00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004b08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004b10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004b18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004b20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004b28:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	4b6e      	ldr	r3, [pc, #440]	@ (8004cf8 <HAL_DMA_Init+0x648>)
 8004b40:	4413      	add	r3, r2
 8004b42:	4a6e      	ldr	r2, [pc, #440]	@ (8004cfc <HAL_DMA_Init+0x64c>)
 8004b44:	fba2 2303 	umull	r2, r3, r2, r3
 8004b48:	091b      	lsrs	r3, r3, #4
 8004b4a:	009a      	lsls	r2, r3, #2
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f001 f82f 	bl	8005bb4 <DMA_CalcBaseAndBitshift>
 8004b56:	4603      	mov	r3, r0
 8004b58:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b5e:	f003 031f 	and.w	r3, r3, #31
 8004b62:	2201      	movs	r2, #1
 8004b64:	409a      	lsls	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	605a      	str	r2, [r3, #4]
 8004b6a:	e008      	b.n	8004b7e <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2240      	movs	r2, #64	@ 0x40
 8004b70:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2203      	movs	r2, #3
 8004b76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e0b7      	b.n	8004cee <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a5f      	ldr	r2, [pc, #380]	@ (8004d00 <HAL_DMA_Init+0x650>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d072      	beq.n	8004c6e <HAL_DMA_Init+0x5be>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a5d      	ldr	r2, [pc, #372]	@ (8004d04 <HAL_DMA_Init+0x654>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d06d      	beq.n	8004c6e <HAL_DMA_Init+0x5be>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a5c      	ldr	r2, [pc, #368]	@ (8004d08 <HAL_DMA_Init+0x658>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d068      	beq.n	8004c6e <HAL_DMA_Init+0x5be>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a5a      	ldr	r2, [pc, #360]	@ (8004d0c <HAL_DMA_Init+0x65c>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d063      	beq.n	8004c6e <HAL_DMA_Init+0x5be>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a59      	ldr	r2, [pc, #356]	@ (8004d10 <HAL_DMA_Init+0x660>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d05e      	beq.n	8004c6e <HAL_DMA_Init+0x5be>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a57      	ldr	r2, [pc, #348]	@ (8004d14 <HAL_DMA_Init+0x664>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d059      	beq.n	8004c6e <HAL_DMA_Init+0x5be>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a56      	ldr	r2, [pc, #344]	@ (8004d18 <HAL_DMA_Init+0x668>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d054      	beq.n	8004c6e <HAL_DMA_Init+0x5be>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a54      	ldr	r2, [pc, #336]	@ (8004d1c <HAL_DMA_Init+0x66c>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d04f      	beq.n	8004c6e <HAL_DMA_Init+0x5be>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a53      	ldr	r2, [pc, #332]	@ (8004d20 <HAL_DMA_Init+0x670>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d04a      	beq.n	8004c6e <HAL_DMA_Init+0x5be>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a51      	ldr	r2, [pc, #324]	@ (8004d24 <HAL_DMA_Init+0x674>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d045      	beq.n	8004c6e <HAL_DMA_Init+0x5be>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a50      	ldr	r2, [pc, #320]	@ (8004d28 <HAL_DMA_Init+0x678>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d040      	beq.n	8004c6e <HAL_DMA_Init+0x5be>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a4e      	ldr	r2, [pc, #312]	@ (8004d2c <HAL_DMA_Init+0x67c>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d03b      	beq.n	8004c6e <HAL_DMA_Init+0x5be>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a4d      	ldr	r2, [pc, #308]	@ (8004d30 <HAL_DMA_Init+0x680>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d036      	beq.n	8004c6e <HAL_DMA_Init+0x5be>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a4b      	ldr	r2, [pc, #300]	@ (8004d34 <HAL_DMA_Init+0x684>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d031      	beq.n	8004c6e <HAL_DMA_Init+0x5be>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a4a      	ldr	r2, [pc, #296]	@ (8004d38 <HAL_DMA_Init+0x688>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d02c      	beq.n	8004c6e <HAL_DMA_Init+0x5be>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a48      	ldr	r2, [pc, #288]	@ (8004d3c <HAL_DMA_Init+0x68c>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d027      	beq.n	8004c6e <HAL_DMA_Init+0x5be>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a47      	ldr	r2, [pc, #284]	@ (8004d40 <HAL_DMA_Init+0x690>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d022      	beq.n	8004c6e <HAL_DMA_Init+0x5be>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a45      	ldr	r2, [pc, #276]	@ (8004d44 <HAL_DMA_Init+0x694>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d01d      	beq.n	8004c6e <HAL_DMA_Init+0x5be>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a44      	ldr	r2, [pc, #272]	@ (8004d48 <HAL_DMA_Init+0x698>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d018      	beq.n	8004c6e <HAL_DMA_Init+0x5be>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a42      	ldr	r2, [pc, #264]	@ (8004d4c <HAL_DMA_Init+0x69c>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d013      	beq.n	8004c6e <HAL_DMA_Init+0x5be>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a41      	ldr	r2, [pc, #260]	@ (8004d50 <HAL_DMA_Init+0x6a0>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d00e      	beq.n	8004c6e <HAL_DMA_Init+0x5be>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a3f      	ldr	r2, [pc, #252]	@ (8004d54 <HAL_DMA_Init+0x6a4>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d009      	beq.n	8004c6e <HAL_DMA_Init+0x5be>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a3e      	ldr	r2, [pc, #248]	@ (8004d58 <HAL_DMA_Init+0x6a8>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d004      	beq.n	8004c6e <HAL_DMA_Init+0x5be>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a3c      	ldr	r2, [pc, #240]	@ (8004d5c <HAL_DMA_Init+0x6ac>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d101      	bne.n	8004c72 <HAL_DMA_Init+0x5c2>
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e000      	b.n	8004c74 <HAL_DMA_Init+0x5c4>
 8004c72:	2300      	movs	r3, #0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d032      	beq.n	8004cde <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f001 f8c9 	bl	8005e10 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	2b80      	cmp	r3, #128	@ 0x80
 8004c84:	d102      	bne.n	8004c8c <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c94:	b2d2      	uxtb	r2, r2
 8004c96:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004ca0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d010      	beq.n	8004ccc <HAL_DMA_Init+0x61c>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	2b08      	cmp	r3, #8
 8004cb0:	d80c      	bhi.n	8004ccc <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f001 f946 	bl	8005f44 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004cc8:	605a      	str	r2, [r3, #4]
 8004cca:	e008      	b.n	8004cde <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3718      	adds	r7, #24
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	a7fdabf8 	.word	0xa7fdabf8
 8004cfc:	cccccccd 	.word	0xcccccccd
 8004d00:	40020010 	.word	0x40020010
 8004d04:	40020028 	.word	0x40020028
 8004d08:	40020040 	.word	0x40020040
 8004d0c:	40020058 	.word	0x40020058
 8004d10:	40020070 	.word	0x40020070
 8004d14:	40020088 	.word	0x40020088
 8004d18:	400200a0 	.word	0x400200a0
 8004d1c:	400200b8 	.word	0x400200b8
 8004d20:	40020410 	.word	0x40020410
 8004d24:	40020428 	.word	0x40020428
 8004d28:	40020440 	.word	0x40020440
 8004d2c:	40020458 	.word	0x40020458
 8004d30:	40020470 	.word	0x40020470
 8004d34:	40020488 	.word	0x40020488
 8004d38:	400204a0 	.word	0x400204a0
 8004d3c:	400204b8 	.word	0x400204b8
 8004d40:	58025408 	.word	0x58025408
 8004d44:	5802541c 	.word	0x5802541c
 8004d48:	58025430 	.word	0x58025430
 8004d4c:	58025444 	.word	0x58025444
 8004d50:	58025458 	.word	0x58025458
 8004d54:	5802546c 	.word	0x5802546c
 8004d58:	58025480 	.word	0x58025480
 8004d5c:	58025494 	.word	0x58025494

08004d60 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b08a      	sub	sp, #40	@ 0x28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004d6c:	4b67      	ldr	r3, [pc, #412]	@ (8004f0c <HAL_DMA_IRQHandler+0x1ac>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a67      	ldr	r2, [pc, #412]	@ (8004f10 <HAL_DMA_IRQHandler+0x1b0>)
 8004d72:	fba2 2303 	umull	r2, r3, r2, r3
 8004d76:	0a9b      	lsrs	r3, r3, #10
 8004d78:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d7e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d84:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004d86:	6a3b      	ldr	r3, [r7, #32]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a5f      	ldr	r2, [pc, #380]	@ (8004f14 <HAL_DMA_IRQHandler+0x1b4>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d04a      	beq.n	8004e32 <HAL_DMA_IRQHandler+0xd2>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a5d      	ldr	r2, [pc, #372]	@ (8004f18 <HAL_DMA_IRQHandler+0x1b8>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d045      	beq.n	8004e32 <HAL_DMA_IRQHandler+0xd2>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a5c      	ldr	r2, [pc, #368]	@ (8004f1c <HAL_DMA_IRQHandler+0x1bc>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d040      	beq.n	8004e32 <HAL_DMA_IRQHandler+0xd2>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a5a      	ldr	r2, [pc, #360]	@ (8004f20 <HAL_DMA_IRQHandler+0x1c0>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d03b      	beq.n	8004e32 <HAL_DMA_IRQHandler+0xd2>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a59      	ldr	r2, [pc, #356]	@ (8004f24 <HAL_DMA_IRQHandler+0x1c4>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d036      	beq.n	8004e32 <HAL_DMA_IRQHandler+0xd2>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a57      	ldr	r2, [pc, #348]	@ (8004f28 <HAL_DMA_IRQHandler+0x1c8>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d031      	beq.n	8004e32 <HAL_DMA_IRQHandler+0xd2>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a56      	ldr	r2, [pc, #344]	@ (8004f2c <HAL_DMA_IRQHandler+0x1cc>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d02c      	beq.n	8004e32 <HAL_DMA_IRQHandler+0xd2>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a54      	ldr	r2, [pc, #336]	@ (8004f30 <HAL_DMA_IRQHandler+0x1d0>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d027      	beq.n	8004e32 <HAL_DMA_IRQHandler+0xd2>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a53      	ldr	r2, [pc, #332]	@ (8004f34 <HAL_DMA_IRQHandler+0x1d4>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d022      	beq.n	8004e32 <HAL_DMA_IRQHandler+0xd2>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a51      	ldr	r2, [pc, #324]	@ (8004f38 <HAL_DMA_IRQHandler+0x1d8>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d01d      	beq.n	8004e32 <HAL_DMA_IRQHandler+0xd2>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a50      	ldr	r2, [pc, #320]	@ (8004f3c <HAL_DMA_IRQHandler+0x1dc>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d018      	beq.n	8004e32 <HAL_DMA_IRQHandler+0xd2>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a4e      	ldr	r2, [pc, #312]	@ (8004f40 <HAL_DMA_IRQHandler+0x1e0>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d013      	beq.n	8004e32 <HAL_DMA_IRQHandler+0xd2>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a4d      	ldr	r2, [pc, #308]	@ (8004f44 <HAL_DMA_IRQHandler+0x1e4>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d00e      	beq.n	8004e32 <HAL_DMA_IRQHandler+0xd2>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a4b      	ldr	r2, [pc, #300]	@ (8004f48 <HAL_DMA_IRQHandler+0x1e8>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d009      	beq.n	8004e32 <HAL_DMA_IRQHandler+0xd2>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a4a      	ldr	r2, [pc, #296]	@ (8004f4c <HAL_DMA_IRQHandler+0x1ec>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d004      	beq.n	8004e32 <HAL_DMA_IRQHandler+0xd2>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a48      	ldr	r2, [pc, #288]	@ (8004f50 <HAL_DMA_IRQHandler+0x1f0>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d101      	bne.n	8004e36 <HAL_DMA_IRQHandler+0xd6>
 8004e32:	2301      	movs	r3, #1
 8004e34:	e000      	b.n	8004e38 <HAL_DMA_IRQHandler+0xd8>
 8004e36:	2300      	movs	r3, #0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f000 842b 	beq.w	8005694 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e42:	f003 031f 	and.w	r3, r3, #31
 8004e46:	2208      	movs	r2, #8
 8004e48:	409a      	lsls	r2, r3
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f000 80a2 	beq.w	8004f98 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a2e      	ldr	r2, [pc, #184]	@ (8004f14 <HAL_DMA_IRQHandler+0x1b4>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d04a      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x194>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a2d      	ldr	r2, [pc, #180]	@ (8004f18 <HAL_DMA_IRQHandler+0x1b8>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d045      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x194>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a2b      	ldr	r2, [pc, #172]	@ (8004f1c <HAL_DMA_IRQHandler+0x1bc>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d040      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x194>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a2a      	ldr	r2, [pc, #168]	@ (8004f20 <HAL_DMA_IRQHandler+0x1c0>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d03b      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x194>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a28      	ldr	r2, [pc, #160]	@ (8004f24 <HAL_DMA_IRQHandler+0x1c4>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d036      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x194>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a27      	ldr	r2, [pc, #156]	@ (8004f28 <HAL_DMA_IRQHandler+0x1c8>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d031      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x194>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a25      	ldr	r2, [pc, #148]	@ (8004f2c <HAL_DMA_IRQHandler+0x1cc>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d02c      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x194>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a24      	ldr	r2, [pc, #144]	@ (8004f30 <HAL_DMA_IRQHandler+0x1d0>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d027      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x194>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a22      	ldr	r2, [pc, #136]	@ (8004f34 <HAL_DMA_IRQHandler+0x1d4>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d022      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x194>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a21      	ldr	r2, [pc, #132]	@ (8004f38 <HAL_DMA_IRQHandler+0x1d8>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d01d      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x194>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a1f      	ldr	r2, [pc, #124]	@ (8004f3c <HAL_DMA_IRQHandler+0x1dc>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d018      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x194>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a1e      	ldr	r2, [pc, #120]	@ (8004f40 <HAL_DMA_IRQHandler+0x1e0>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d013      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x194>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a1c      	ldr	r2, [pc, #112]	@ (8004f44 <HAL_DMA_IRQHandler+0x1e4>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d00e      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x194>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a1b      	ldr	r2, [pc, #108]	@ (8004f48 <HAL_DMA_IRQHandler+0x1e8>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d009      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x194>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a19      	ldr	r2, [pc, #100]	@ (8004f4c <HAL_DMA_IRQHandler+0x1ec>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d004      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x194>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a18      	ldr	r2, [pc, #96]	@ (8004f50 <HAL_DMA_IRQHandler+0x1f0>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d12f      	bne.n	8004f54 <HAL_DMA_IRQHandler+0x1f4>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0304 	and.w	r3, r3, #4
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	bf14      	ite	ne
 8004f02:	2301      	movne	r3, #1
 8004f04:	2300      	moveq	r3, #0
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	e02e      	b.n	8004f68 <HAL_DMA_IRQHandler+0x208>
 8004f0a:	bf00      	nop
 8004f0c:	24000000 	.word	0x24000000
 8004f10:	1b4e81b5 	.word	0x1b4e81b5
 8004f14:	40020010 	.word	0x40020010
 8004f18:	40020028 	.word	0x40020028
 8004f1c:	40020040 	.word	0x40020040
 8004f20:	40020058 	.word	0x40020058
 8004f24:	40020070 	.word	0x40020070
 8004f28:	40020088 	.word	0x40020088
 8004f2c:	400200a0 	.word	0x400200a0
 8004f30:	400200b8 	.word	0x400200b8
 8004f34:	40020410 	.word	0x40020410
 8004f38:	40020428 	.word	0x40020428
 8004f3c:	40020440 	.word	0x40020440
 8004f40:	40020458 	.word	0x40020458
 8004f44:	40020470 	.word	0x40020470
 8004f48:	40020488 	.word	0x40020488
 8004f4c:	400204a0 	.word	0x400204a0
 8004f50:	400204b8 	.word	0x400204b8
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0308 	and.w	r3, r3, #8
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	bf14      	ite	ne
 8004f62:	2301      	movne	r3, #1
 8004f64:	2300      	moveq	r3, #0
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d015      	beq.n	8004f98 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f022 0204 	bic.w	r2, r2, #4
 8004f7a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f80:	f003 031f 	and.w	r3, r3, #31
 8004f84:	2208      	movs	r2, #8
 8004f86:	409a      	lsls	r2, r3
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f90:	f043 0201 	orr.w	r2, r3, #1
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f9c:	f003 031f 	and.w	r3, r3, #31
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d06e      	beq.n	800508c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a69      	ldr	r2, [pc, #420]	@ (8005158 <HAL_DMA_IRQHandler+0x3f8>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d04a      	beq.n	800504e <HAL_DMA_IRQHandler+0x2ee>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a67      	ldr	r2, [pc, #412]	@ (800515c <HAL_DMA_IRQHandler+0x3fc>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d045      	beq.n	800504e <HAL_DMA_IRQHandler+0x2ee>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a66      	ldr	r2, [pc, #408]	@ (8005160 <HAL_DMA_IRQHandler+0x400>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d040      	beq.n	800504e <HAL_DMA_IRQHandler+0x2ee>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a64      	ldr	r2, [pc, #400]	@ (8005164 <HAL_DMA_IRQHandler+0x404>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d03b      	beq.n	800504e <HAL_DMA_IRQHandler+0x2ee>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a63      	ldr	r2, [pc, #396]	@ (8005168 <HAL_DMA_IRQHandler+0x408>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d036      	beq.n	800504e <HAL_DMA_IRQHandler+0x2ee>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a61      	ldr	r2, [pc, #388]	@ (800516c <HAL_DMA_IRQHandler+0x40c>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d031      	beq.n	800504e <HAL_DMA_IRQHandler+0x2ee>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a60      	ldr	r2, [pc, #384]	@ (8005170 <HAL_DMA_IRQHandler+0x410>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d02c      	beq.n	800504e <HAL_DMA_IRQHandler+0x2ee>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a5e      	ldr	r2, [pc, #376]	@ (8005174 <HAL_DMA_IRQHandler+0x414>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d027      	beq.n	800504e <HAL_DMA_IRQHandler+0x2ee>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a5d      	ldr	r2, [pc, #372]	@ (8005178 <HAL_DMA_IRQHandler+0x418>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d022      	beq.n	800504e <HAL_DMA_IRQHandler+0x2ee>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a5b      	ldr	r2, [pc, #364]	@ (800517c <HAL_DMA_IRQHandler+0x41c>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d01d      	beq.n	800504e <HAL_DMA_IRQHandler+0x2ee>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a5a      	ldr	r2, [pc, #360]	@ (8005180 <HAL_DMA_IRQHandler+0x420>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d018      	beq.n	800504e <HAL_DMA_IRQHandler+0x2ee>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a58      	ldr	r2, [pc, #352]	@ (8005184 <HAL_DMA_IRQHandler+0x424>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d013      	beq.n	800504e <HAL_DMA_IRQHandler+0x2ee>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a57      	ldr	r2, [pc, #348]	@ (8005188 <HAL_DMA_IRQHandler+0x428>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d00e      	beq.n	800504e <HAL_DMA_IRQHandler+0x2ee>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a55      	ldr	r2, [pc, #340]	@ (800518c <HAL_DMA_IRQHandler+0x42c>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d009      	beq.n	800504e <HAL_DMA_IRQHandler+0x2ee>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a54      	ldr	r2, [pc, #336]	@ (8005190 <HAL_DMA_IRQHandler+0x430>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d004      	beq.n	800504e <HAL_DMA_IRQHandler+0x2ee>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a52      	ldr	r2, [pc, #328]	@ (8005194 <HAL_DMA_IRQHandler+0x434>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d10a      	bne.n	8005064 <HAL_DMA_IRQHandler+0x304>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	695b      	ldr	r3, [r3, #20]
 8005054:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005058:	2b00      	cmp	r3, #0
 800505a:	bf14      	ite	ne
 800505c:	2301      	movne	r3, #1
 800505e:	2300      	moveq	r3, #0
 8005060:	b2db      	uxtb	r3, r3
 8005062:	e003      	b.n	800506c <HAL_DMA_IRQHandler+0x30c>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2300      	movs	r3, #0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00d      	beq.n	800508c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005074:	f003 031f 	and.w	r3, r3, #31
 8005078:	2201      	movs	r2, #1
 800507a:	409a      	lsls	r2, r3
 800507c:	6a3b      	ldr	r3, [r7, #32]
 800507e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005084:	f043 0202 	orr.w	r2, r3, #2
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005090:	f003 031f 	and.w	r3, r3, #31
 8005094:	2204      	movs	r2, #4
 8005096:	409a      	lsls	r2, r3
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	4013      	ands	r3, r2
 800509c:	2b00      	cmp	r3, #0
 800509e:	f000 808f 	beq.w	80051c0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a2c      	ldr	r2, [pc, #176]	@ (8005158 <HAL_DMA_IRQHandler+0x3f8>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d04a      	beq.n	8005142 <HAL_DMA_IRQHandler+0x3e2>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a2a      	ldr	r2, [pc, #168]	@ (800515c <HAL_DMA_IRQHandler+0x3fc>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d045      	beq.n	8005142 <HAL_DMA_IRQHandler+0x3e2>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a29      	ldr	r2, [pc, #164]	@ (8005160 <HAL_DMA_IRQHandler+0x400>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d040      	beq.n	8005142 <HAL_DMA_IRQHandler+0x3e2>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a27      	ldr	r2, [pc, #156]	@ (8005164 <HAL_DMA_IRQHandler+0x404>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d03b      	beq.n	8005142 <HAL_DMA_IRQHandler+0x3e2>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a26      	ldr	r2, [pc, #152]	@ (8005168 <HAL_DMA_IRQHandler+0x408>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d036      	beq.n	8005142 <HAL_DMA_IRQHandler+0x3e2>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a24      	ldr	r2, [pc, #144]	@ (800516c <HAL_DMA_IRQHandler+0x40c>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d031      	beq.n	8005142 <HAL_DMA_IRQHandler+0x3e2>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a23      	ldr	r2, [pc, #140]	@ (8005170 <HAL_DMA_IRQHandler+0x410>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d02c      	beq.n	8005142 <HAL_DMA_IRQHandler+0x3e2>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a21      	ldr	r2, [pc, #132]	@ (8005174 <HAL_DMA_IRQHandler+0x414>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d027      	beq.n	8005142 <HAL_DMA_IRQHandler+0x3e2>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a20      	ldr	r2, [pc, #128]	@ (8005178 <HAL_DMA_IRQHandler+0x418>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d022      	beq.n	8005142 <HAL_DMA_IRQHandler+0x3e2>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a1e      	ldr	r2, [pc, #120]	@ (800517c <HAL_DMA_IRQHandler+0x41c>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d01d      	beq.n	8005142 <HAL_DMA_IRQHandler+0x3e2>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a1d      	ldr	r2, [pc, #116]	@ (8005180 <HAL_DMA_IRQHandler+0x420>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d018      	beq.n	8005142 <HAL_DMA_IRQHandler+0x3e2>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a1b      	ldr	r2, [pc, #108]	@ (8005184 <HAL_DMA_IRQHandler+0x424>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d013      	beq.n	8005142 <HAL_DMA_IRQHandler+0x3e2>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a1a      	ldr	r2, [pc, #104]	@ (8005188 <HAL_DMA_IRQHandler+0x428>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d00e      	beq.n	8005142 <HAL_DMA_IRQHandler+0x3e2>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a18      	ldr	r2, [pc, #96]	@ (800518c <HAL_DMA_IRQHandler+0x42c>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d009      	beq.n	8005142 <HAL_DMA_IRQHandler+0x3e2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a17      	ldr	r2, [pc, #92]	@ (8005190 <HAL_DMA_IRQHandler+0x430>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d004      	beq.n	8005142 <HAL_DMA_IRQHandler+0x3e2>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a15      	ldr	r2, [pc, #84]	@ (8005194 <HAL_DMA_IRQHandler+0x434>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d12a      	bne.n	8005198 <HAL_DMA_IRQHandler+0x438>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0302 	and.w	r3, r3, #2
 800514c:	2b00      	cmp	r3, #0
 800514e:	bf14      	ite	ne
 8005150:	2301      	movne	r3, #1
 8005152:	2300      	moveq	r3, #0
 8005154:	b2db      	uxtb	r3, r3
 8005156:	e023      	b.n	80051a0 <HAL_DMA_IRQHandler+0x440>
 8005158:	40020010 	.word	0x40020010
 800515c:	40020028 	.word	0x40020028
 8005160:	40020040 	.word	0x40020040
 8005164:	40020058 	.word	0x40020058
 8005168:	40020070 	.word	0x40020070
 800516c:	40020088 	.word	0x40020088
 8005170:	400200a0 	.word	0x400200a0
 8005174:	400200b8 	.word	0x400200b8
 8005178:	40020410 	.word	0x40020410
 800517c:	40020428 	.word	0x40020428
 8005180:	40020440 	.word	0x40020440
 8005184:	40020458 	.word	0x40020458
 8005188:	40020470 	.word	0x40020470
 800518c:	40020488 	.word	0x40020488
 8005190:	400204a0 	.word	0x400204a0
 8005194:	400204b8 	.word	0x400204b8
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2300      	movs	r3, #0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00d      	beq.n	80051c0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051a8:	f003 031f 	and.w	r3, r3, #31
 80051ac:	2204      	movs	r2, #4
 80051ae:	409a      	lsls	r2, r3
 80051b0:	6a3b      	ldr	r3, [r7, #32]
 80051b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051b8:	f043 0204 	orr.w	r2, r3, #4
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051c4:	f003 031f 	and.w	r3, r3, #31
 80051c8:	2210      	movs	r2, #16
 80051ca:	409a      	lsls	r2, r3
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	4013      	ands	r3, r2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f000 80a6 	beq.w	8005322 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a85      	ldr	r2, [pc, #532]	@ (80053f0 <HAL_DMA_IRQHandler+0x690>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d04a      	beq.n	8005276 <HAL_DMA_IRQHandler+0x516>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a83      	ldr	r2, [pc, #524]	@ (80053f4 <HAL_DMA_IRQHandler+0x694>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d045      	beq.n	8005276 <HAL_DMA_IRQHandler+0x516>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a82      	ldr	r2, [pc, #520]	@ (80053f8 <HAL_DMA_IRQHandler+0x698>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d040      	beq.n	8005276 <HAL_DMA_IRQHandler+0x516>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a80      	ldr	r2, [pc, #512]	@ (80053fc <HAL_DMA_IRQHandler+0x69c>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d03b      	beq.n	8005276 <HAL_DMA_IRQHandler+0x516>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a7f      	ldr	r2, [pc, #508]	@ (8005400 <HAL_DMA_IRQHandler+0x6a0>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d036      	beq.n	8005276 <HAL_DMA_IRQHandler+0x516>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a7d      	ldr	r2, [pc, #500]	@ (8005404 <HAL_DMA_IRQHandler+0x6a4>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d031      	beq.n	8005276 <HAL_DMA_IRQHandler+0x516>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a7c      	ldr	r2, [pc, #496]	@ (8005408 <HAL_DMA_IRQHandler+0x6a8>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d02c      	beq.n	8005276 <HAL_DMA_IRQHandler+0x516>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a7a      	ldr	r2, [pc, #488]	@ (800540c <HAL_DMA_IRQHandler+0x6ac>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d027      	beq.n	8005276 <HAL_DMA_IRQHandler+0x516>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a79      	ldr	r2, [pc, #484]	@ (8005410 <HAL_DMA_IRQHandler+0x6b0>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d022      	beq.n	8005276 <HAL_DMA_IRQHandler+0x516>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a77      	ldr	r2, [pc, #476]	@ (8005414 <HAL_DMA_IRQHandler+0x6b4>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d01d      	beq.n	8005276 <HAL_DMA_IRQHandler+0x516>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a76      	ldr	r2, [pc, #472]	@ (8005418 <HAL_DMA_IRQHandler+0x6b8>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d018      	beq.n	8005276 <HAL_DMA_IRQHandler+0x516>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a74      	ldr	r2, [pc, #464]	@ (800541c <HAL_DMA_IRQHandler+0x6bc>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d013      	beq.n	8005276 <HAL_DMA_IRQHandler+0x516>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a73      	ldr	r2, [pc, #460]	@ (8005420 <HAL_DMA_IRQHandler+0x6c0>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d00e      	beq.n	8005276 <HAL_DMA_IRQHandler+0x516>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a71      	ldr	r2, [pc, #452]	@ (8005424 <HAL_DMA_IRQHandler+0x6c4>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d009      	beq.n	8005276 <HAL_DMA_IRQHandler+0x516>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a70      	ldr	r2, [pc, #448]	@ (8005428 <HAL_DMA_IRQHandler+0x6c8>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d004      	beq.n	8005276 <HAL_DMA_IRQHandler+0x516>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a6e      	ldr	r2, [pc, #440]	@ (800542c <HAL_DMA_IRQHandler+0x6cc>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d10a      	bne.n	800528c <HAL_DMA_IRQHandler+0x52c>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0308 	and.w	r3, r3, #8
 8005280:	2b00      	cmp	r3, #0
 8005282:	bf14      	ite	ne
 8005284:	2301      	movne	r3, #1
 8005286:	2300      	moveq	r3, #0
 8005288:	b2db      	uxtb	r3, r3
 800528a:	e009      	b.n	80052a0 <HAL_DMA_IRQHandler+0x540>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0304 	and.w	r3, r3, #4
 8005296:	2b00      	cmp	r3, #0
 8005298:	bf14      	ite	ne
 800529a:	2301      	movne	r3, #1
 800529c:	2300      	moveq	r3, #0
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d03e      	beq.n	8005322 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052a8:	f003 031f 	and.w	r3, r3, #31
 80052ac:	2210      	movs	r2, #16
 80052ae:	409a      	lsls	r2, r3
 80052b0:	6a3b      	ldr	r3, [r7, #32]
 80052b2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d018      	beq.n	80052f4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d108      	bne.n	80052e2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d024      	beq.n	8005322 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	4798      	blx	r3
 80052e0:	e01f      	b.n	8005322 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d01b      	beq.n	8005322 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	4798      	blx	r3
 80052f2:	e016      	b.n	8005322 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d107      	bne.n	8005312 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f022 0208 	bic.w	r2, r2, #8
 8005310:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005316:	2b00      	cmp	r3, #0
 8005318:	d003      	beq.n	8005322 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005326:	f003 031f 	and.w	r3, r3, #31
 800532a:	2220      	movs	r2, #32
 800532c:	409a      	lsls	r2, r3
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	4013      	ands	r3, r2
 8005332:	2b00      	cmp	r3, #0
 8005334:	f000 8110 	beq.w	8005558 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a2c      	ldr	r2, [pc, #176]	@ (80053f0 <HAL_DMA_IRQHandler+0x690>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d04a      	beq.n	80053d8 <HAL_DMA_IRQHandler+0x678>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a2b      	ldr	r2, [pc, #172]	@ (80053f4 <HAL_DMA_IRQHandler+0x694>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d045      	beq.n	80053d8 <HAL_DMA_IRQHandler+0x678>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a29      	ldr	r2, [pc, #164]	@ (80053f8 <HAL_DMA_IRQHandler+0x698>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d040      	beq.n	80053d8 <HAL_DMA_IRQHandler+0x678>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a28      	ldr	r2, [pc, #160]	@ (80053fc <HAL_DMA_IRQHandler+0x69c>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d03b      	beq.n	80053d8 <HAL_DMA_IRQHandler+0x678>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a26      	ldr	r2, [pc, #152]	@ (8005400 <HAL_DMA_IRQHandler+0x6a0>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d036      	beq.n	80053d8 <HAL_DMA_IRQHandler+0x678>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a25      	ldr	r2, [pc, #148]	@ (8005404 <HAL_DMA_IRQHandler+0x6a4>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d031      	beq.n	80053d8 <HAL_DMA_IRQHandler+0x678>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a23      	ldr	r2, [pc, #140]	@ (8005408 <HAL_DMA_IRQHandler+0x6a8>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d02c      	beq.n	80053d8 <HAL_DMA_IRQHandler+0x678>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a22      	ldr	r2, [pc, #136]	@ (800540c <HAL_DMA_IRQHandler+0x6ac>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d027      	beq.n	80053d8 <HAL_DMA_IRQHandler+0x678>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a20      	ldr	r2, [pc, #128]	@ (8005410 <HAL_DMA_IRQHandler+0x6b0>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d022      	beq.n	80053d8 <HAL_DMA_IRQHandler+0x678>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a1f      	ldr	r2, [pc, #124]	@ (8005414 <HAL_DMA_IRQHandler+0x6b4>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d01d      	beq.n	80053d8 <HAL_DMA_IRQHandler+0x678>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a1d      	ldr	r2, [pc, #116]	@ (8005418 <HAL_DMA_IRQHandler+0x6b8>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d018      	beq.n	80053d8 <HAL_DMA_IRQHandler+0x678>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a1c      	ldr	r2, [pc, #112]	@ (800541c <HAL_DMA_IRQHandler+0x6bc>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d013      	beq.n	80053d8 <HAL_DMA_IRQHandler+0x678>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a1a      	ldr	r2, [pc, #104]	@ (8005420 <HAL_DMA_IRQHandler+0x6c0>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d00e      	beq.n	80053d8 <HAL_DMA_IRQHandler+0x678>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a19      	ldr	r2, [pc, #100]	@ (8005424 <HAL_DMA_IRQHandler+0x6c4>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d009      	beq.n	80053d8 <HAL_DMA_IRQHandler+0x678>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a17      	ldr	r2, [pc, #92]	@ (8005428 <HAL_DMA_IRQHandler+0x6c8>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d004      	beq.n	80053d8 <HAL_DMA_IRQHandler+0x678>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a16      	ldr	r2, [pc, #88]	@ (800542c <HAL_DMA_IRQHandler+0x6cc>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d12b      	bne.n	8005430 <HAL_DMA_IRQHandler+0x6d0>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0310 	and.w	r3, r3, #16
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	bf14      	ite	ne
 80053e6:	2301      	movne	r3, #1
 80053e8:	2300      	moveq	r3, #0
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	e02a      	b.n	8005444 <HAL_DMA_IRQHandler+0x6e4>
 80053ee:	bf00      	nop
 80053f0:	40020010 	.word	0x40020010
 80053f4:	40020028 	.word	0x40020028
 80053f8:	40020040 	.word	0x40020040
 80053fc:	40020058 	.word	0x40020058
 8005400:	40020070 	.word	0x40020070
 8005404:	40020088 	.word	0x40020088
 8005408:	400200a0 	.word	0x400200a0
 800540c:	400200b8 	.word	0x400200b8
 8005410:	40020410 	.word	0x40020410
 8005414:	40020428 	.word	0x40020428
 8005418:	40020440 	.word	0x40020440
 800541c:	40020458 	.word	0x40020458
 8005420:	40020470 	.word	0x40020470
 8005424:	40020488 	.word	0x40020488
 8005428:	400204a0 	.word	0x400204a0
 800542c:	400204b8 	.word	0x400204b8
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0302 	and.w	r3, r3, #2
 800543a:	2b00      	cmp	r3, #0
 800543c:	bf14      	ite	ne
 800543e:	2301      	movne	r3, #1
 8005440:	2300      	moveq	r3, #0
 8005442:	b2db      	uxtb	r3, r3
 8005444:	2b00      	cmp	r3, #0
 8005446:	f000 8087 	beq.w	8005558 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800544e:	f003 031f 	and.w	r3, r3, #31
 8005452:	2220      	movs	r2, #32
 8005454:	409a      	lsls	r2, r3
 8005456:	6a3b      	ldr	r3, [r7, #32]
 8005458:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b04      	cmp	r3, #4
 8005464:	d139      	bne.n	80054da <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f022 0216 	bic.w	r2, r2, #22
 8005474:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	695a      	ldr	r2, [r3, #20]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005484:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800548a:	2b00      	cmp	r3, #0
 800548c:	d103      	bne.n	8005496 <HAL_DMA_IRQHandler+0x736>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005492:	2b00      	cmp	r3, #0
 8005494:	d007      	beq.n	80054a6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f022 0208 	bic.w	r2, r2, #8
 80054a4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054aa:	f003 031f 	and.w	r3, r3, #31
 80054ae:	223f      	movs	r2, #63	@ 0x3f
 80054b0:	409a      	lsls	r2, r3
 80054b2:	6a3b      	ldr	r3, [r7, #32]
 80054b4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f000 834a 	beq.w	8005b64 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	4798      	blx	r3
          }
          return;
 80054d8:	e344      	b.n	8005b64 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d018      	beq.n	800551a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d108      	bne.n	8005508 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d02c      	beq.n	8005558 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	4798      	blx	r3
 8005506:	e027      	b.n	8005558 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800550c:	2b00      	cmp	r3, #0
 800550e:	d023      	beq.n	8005558 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	4798      	blx	r3
 8005518:	e01e      	b.n	8005558 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005524:	2b00      	cmp	r3, #0
 8005526:	d10f      	bne.n	8005548 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f022 0210 	bic.w	r2, r2, #16
 8005536:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800554c:	2b00      	cmp	r3, #0
 800554e:	d003      	beq.n	8005558 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800555c:	2b00      	cmp	r3, #0
 800555e:	f000 8306 	beq.w	8005b6e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	2b00      	cmp	r3, #0
 800556c:	f000 8088 	beq.w	8005680 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2204      	movs	r2, #4
 8005574:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a7a      	ldr	r2, [pc, #488]	@ (8005768 <HAL_DMA_IRQHandler+0xa08>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d04a      	beq.n	8005618 <HAL_DMA_IRQHandler+0x8b8>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a79      	ldr	r2, [pc, #484]	@ (800576c <HAL_DMA_IRQHandler+0xa0c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d045      	beq.n	8005618 <HAL_DMA_IRQHandler+0x8b8>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a77      	ldr	r2, [pc, #476]	@ (8005770 <HAL_DMA_IRQHandler+0xa10>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d040      	beq.n	8005618 <HAL_DMA_IRQHandler+0x8b8>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a76      	ldr	r2, [pc, #472]	@ (8005774 <HAL_DMA_IRQHandler+0xa14>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d03b      	beq.n	8005618 <HAL_DMA_IRQHandler+0x8b8>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a74      	ldr	r2, [pc, #464]	@ (8005778 <HAL_DMA_IRQHandler+0xa18>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d036      	beq.n	8005618 <HAL_DMA_IRQHandler+0x8b8>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a73      	ldr	r2, [pc, #460]	@ (800577c <HAL_DMA_IRQHandler+0xa1c>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d031      	beq.n	8005618 <HAL_DMA_IRQHandler+0x8b8>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a71      	ldr	r2, [pc, #452]	@ (8005780 <HAL_DMA_IRQHandler+0xa20>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d02c      	beq.n	8005618 <HAL_DMA_IRQHandler+0x8b8>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a70      	ldr	r2, [pc, #448]	@ (8005784 <HAL_DMA_IRQHandler+0xa24>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d027      	beq.n	8005618 <HAL_DMA_IRQHandler+0x8b8>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a6e      	ldr	r2, [pc, #440]	@ (8005788 <HAL_DMA_IRQHandler+0xa28>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d022      	beq.n	8005618 <HAL_DMA_IRQHandler+0x8b8>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a6d      	ldr	r2, [pc, #436]	@ (800578c <HAL_DMA_IRQHandler+0xa2c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d01d      	beq.n	8005618 <HAL_DMA_IRQHandler+0x8b8>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a6b      	ldr	r2, [pc, #428]	@ (8005790 <HAL_DMA_IRQHandler+0xa30>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d018      	beq.n	8005618 <HAL_DMA_IRQHandler+0x8b8>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a6a      	ldr	r2, [pc, #424]	@ (8005794 <HAL_DMA_IRQHandler+0xa34>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d013      	beq.n	8005618 <HAL_DMA_IRQHandler+0x8b8>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a68      	ldr	r2, [pc, #416]	@ (8005798 <HAL_DMA_IRQHandler+0xa38>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d00e      	beq.n	8005618 <HAL_DMA_IRQHandler+0x8b8>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a67      	ldr	r2, [pc, #412]	@ (800579c <HAL_DMA_IRQHandler+0xa3c>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d009      	beq.n	8005618 <HAL_DMA_IRQHandler+0x8b8>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a65      	ldr	r2, [pc, #404]	@ (80057a0 <HAL_DMA_IRQHandler+0xa40>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d004      	beq.n	8005618 <HAL_DMA_IRQHandler+0x8b8>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a64      	ldr	r2, [pc, #400]	@ (80057a4 <HAL_DMA_IRQHandler+0xa44>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d108      	bne.n	800562a <HAL_DMA_IRQHandler+0x8ca>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f022 0201 	bic.w	r2, r2, #1
 8005626:	601a      	str	r2, [r3, #0]
 8005628:	e007      	b.n	800563a <HAL_DMA_IRQHandler+0x8da>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f022 0201 	bic.w	r2, r2, #1
 8005638:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	3301      	adds	r3, #1
 800563e:	60fb      	str	r3, [r7, #12]
 8005640:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005642:	429a      	cmp	r2, r3
 8005644:	d307      	bcc.n	8005656 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0301 	and.w	r3, r3, #1
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1f2      	bne.n	800563a <HAL_DMA_IRQHandler+0x8da>
 8005654:	e000      	b.n	8005658 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005656:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0301 	and.w	r3, r3, #1
 8005662:	2b00      	cmp	r3, #0
 8005664:	d004      	beq.n	8005670 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2203      	movs	r2, #3
 800566a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800566e:	e003      	b.n	8005678 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005684:	2b00      	cmp	r3, #0
 8005686:	f000 8272 	beq.w	8005b6e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	4798      	blx	r3
 8005692:	e26c      	b.n	8005b6e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a43      	ldr	r2, [pc, #268]	@ (80057a8 <HAL_DMA_IRQHandler+0xa48>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d022      	beq.n	80056e4 <HAL_DMA_IRQHandler+0x984>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a42      	ldr	r2, [pc, #264]	@ (80057ac <HAL_DMA_IRQHandler+0xa4c>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d01d      	beq.n	80056e4 <HAL_DMA_IRQHandler+0x984>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a40      	ldr	r2, [pc, #256]	@ (80057b0 <HAL_DMA_IRQHandler+0xa50>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d018      	beq.n	80056e4 <HAL_DMA_IRQHandler+0x984>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a3f      	ldr	r2, [pc, #252]	@ (80057b4 <HAL_DMA_IRQHandler+0xa54>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d013      	beq.n	80056e4 <HAL_DMA_IRQHandler+0x984>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a3d      	ldr	r2, [pc, #244]	@ (80057b8 <HAL_DMA_IRQHandler+0xa58>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d00e      	beq.n	80056e4 <HAL_DMA_IRQHandler+0x984>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a3c      	ldr	r2, [pc, #240]	@ (80057bc <HAL_DMA_IRQHandler+0xa5c>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d009      	beq.n	80056e4 <HAL_DMA_IRQHandler+0x984>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a3a      	ldr	r2, [pc, #232]	@ (80057c0 <HAL_DMA_IRQHandler+0xa60>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d004      	beq.n	80056e4 <HAL_DMA_IRQHandler+0x984>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a39      	ldr	r2, [pc, #228]	@ (80057c4 <HAL_DMA_IRQHandler+0xa64>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d101      	bne.n	80056e8 <HAL_DMA_IRQHandler+0x988>
 80056e4:	2301      	movs	r3, #1
 80056e6:	e000      	b.n	80056ea <HAL_DMA_IRQHandler+0x98a>
 80056e8:	2300      	movs	r3, #0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f000 823f 	beq.w	8005b6e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056fc:	f003 031f 	and.w	r3, r3, #31
 8005700:	2204      	movs	r2, #4
 8005702:	409a      	lsls	r2, r3
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	4013      	ands	r3, r2
 8005708:	2b00      	cmp	r3, #0
 800570a:	f000 80cd 	beq.w	80058a8 <HAL_DMA_IRQHandler+0xb48>
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	f003 0304 	and.w	r3, r3, #4
 8005714:	2b00      	cmp	r3, #0
 8005716:	f000 80c7 	beq.w	80058a8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800571e:	f003 031f 	and.w	r3, r3, #31
 8005722:	2204      	movs	r2, #4
 8005724:	409a      	lsls	r2, r3
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d049      	beq.n	80057c8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d109      	bne.n	8005752 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005742:	2b00      	cmp	r3, #0
 8005744:	f000 8210 	beq.w	8005b68 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005750:	e20a      	b.n	8005b68 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005756:	2b00      	cmp	r3, #0
 8005758:	f000 8206 	beq.w	8005b68 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005764:	e200      	b.n	8005b68 <HAL_DMA_IRQHandler+0xe08>
 8005766:	bf00      	nop
 8005768:	40020010 	.word	0x40020010
 800576c:	40020028 	.word	0x40020028
 8005770:	40020040 	.word	0x40020040
 8005774:	40020058 	.word	0x40020058
 8005778:	40020070 	.word	0x40020070
 800577c:	40020088 	.word	0x40020088
 8005780:	400200a0 	.word	0x400200a0
 8005784:	400200b8 	.word	0x400200b8
 8005788:	40020410 	.word	0x40020410
 800578c:	40020428 	.word	0x40020428
 8005790:	40020440 	.word	0x40020440
 8005794:	40020458 	.word	0x40020458
 8005798:	40020470 	.word	0x40020470
 800579c:	40020488 	.word	0x40020488
 80057a0:	400204a0 	.word	0x400204a0
 80057a4:	400204b8 	.word	0x400204b8
 80057a8:	58025408 	.word	0x58025408
 80057ac:	5802541c 	.word	0x5802541c
 80057b0:	58025430 	.word	0x58025430
 80057b4:	58025444 	.word	0x58025444
 80057b8:	58025458 	.word	0x58025458
 80057bc:	5802546c 	.word	0x5802546c
 80057c0:	58025480 	.word	0x58025480
 80057c4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	f003 0320 	and.w	r3, r3, #32
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d160      	bne.n	8005894 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a7f      	ldr	r2, [pc, #508]	@ (80059d4 <HAL_DMA_IRQHandler+0xc74>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d04a      	beq.n	8005872 <HAL_DMA_IRQHandler+0xb12>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a7d      	ldr	r2, [pc, #500]	@ (80059d8 <HAL_DMA_IRQHandler+0xc78>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d045      	beq.n	8005872 <HAL_DMA_IRQHandler+0xb12>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a7c      	ldr	r2, [pc, #496]	@ (80059dc <HAL_DMA_IRQHandler+0xc7c>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d040      	beq.n	8005872 <HAL_DMA_IRQHandler+0xb12>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a7a      	ldr	r2, [pc, #488]	@ (80059e0 <HAL_DMA_IRQHandler+0xc80>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d03b      	beq.n	8005872 <HAL_DMA_IRQHandler+0xb12>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a79      	ldr	r2, [pc, #484]	@ (80059e4 <HAL_DMA_IRQHandler+0xc84>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d036      	beq.n	8005872 <HAL_DMA_IRQHandler+0xb12>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a77      	ldr	r2, [pc, #476]	@ (80059e8 <HAL_DMA_IRQHandler+0xc88>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d031      	beq.n	8005872 <HAL_DMA_IRQHandler+0xb12>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a76      	ldr	r2, [pc, #472]	@ (80059ec <HAL_DMA_IRQHandler+0xc8c>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d02c      	beq.n	8005872 <HAL_DMA_IRQHandler+0xb12>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a74      	ldr	r2, [pc, #464]	@ (80059f0 <HAL_DMA_IRQHandler+0xc90>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d027      	beq.n	8005872 <HAL_DMA_IRQHandler+0xb12>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a73      	ldr	r2, [pc, #460]	@ (80059f4 <HAL_DMA_IRQHandler+0xc94>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d022      	beq.n	8005872 <HAL_DMA_IRQHandler+0xb12>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a71      	ldr	r2, [pc, #452]	@ (80059f8 <HAL_DMA_IRQHandler+0xc98>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d01d      	beq.n	8005872 <HAL_DMA_IRQHandler+0xb12>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a70      	ldr	r2, [pc, #448]	@ (80059fc <HAL_DMA_IRQHandler+0xc9c>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d018      	beq.n	8005872 <HAL_DMA_IRQHandler+0xb12>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a6e      	ldr	r2, [pc, #440]	@ (8005a00 <HAL_DMA_IRQHandler+0xca0>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d013      	beq.n	8005872 <HAL_DMA_IRQHandler+0xb12>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a6d      	ldr	r2, [pc, #436]	@ (8005a04 <HAL_DMA_IRQHandler+0xca4>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d00e      	beq.n	8005872 <HAL_DMA_IRQHandler+0xb12>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a6b      	ldr	r2, [pc, #428]	@ (8005a08 <HAL_DMA_IRQHandler+0xca8>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d009      	beq.n	8005872 <HAL_DMA_IRQHandler+0xb12>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a6a      	ldr	r2, [pc, #424]	@ (8005a0c <HAL_DMA_IRQHandler+0xcac>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d004      	beq.n	8005872 <HAL_DMA_IRQHandler+0xb12>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a68      	ldr	r2, [pc, #416]	@ (8005a10 <HAL_DMA_IRQHandler+0xcb0>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d108      	bne.n	8005884 <HAL_DMA_IRQHandler+0xb24>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f022 0208 	bic.w	r2, r2, #8
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	e007      	b.n	8005894 <HAL_DMA_IRQHandler+0xb34>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f022 0204 	bic.w	r2, r2, #4
 8005892:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005898:	2b00      	cmp	r3, #0
 800589a:	f000 8165 	beq.w	8005b68 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058a6:	e15f      	b.n	8005b68 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058ac:	f003 031f 	and.w	r3, r3, #31
 80058b0:	2202      	movs	r2, #2
 80058b2:	409a      	lsls	r2, r3
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	4013      	ands	r3, r2
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f000 80c5 	beq.w	8005a48 <HAL_DMA_IRQHandler+0xce8>
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	f003 0302 	and.w	r3, r3, #2
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f000 80bf 	beq.w	8005a48 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058ce:	f003 031f 	and.w	r3, r3, #31
 80058d2:	2202      	movs	r2, #2
 80058d4:	409a      	lsls	r2, r3
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d018      	beq.n	8005916 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d109      	bne.n	8005902 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f000 813a 	beq.w	8005b6c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005900:	e134      	b.n	8005b6c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005906:	2b00      	cmp	r3, #0
 8005908:	f000 8130 	beq.w	8005b6c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005914:	e12a      	b.n	8005b6c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	f003 0320 	and.w	r3, r3, #32
 800591c:	2b00      	cmp	r3, #0
 800591e:	f040 8089 	bne.w	8005a34 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a2b      	ldr	r2, [pc, #172]	@ (80059d4 <HAL_DMA_IRQHandler+0xc74>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d04a      	beq.n	80059c2 <HAL_DMA_IRQHandler+0xc62>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a29      	ldr	r2, [pc, #164]	@ (80059d8 <HAL_DMA_IRQHandler+0xc78>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d045      	beq.n	80059c2 <HAL_DMA_IRQHandler+0xc62>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a28      	ldr	r2, [pc, #160]	@ (80059dc <HAL_DMA_IRQHandler+0xc7c>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d040      	beq.n	80059c2 <HAL_DMA_IRQHandler+0xc62>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a26      	ldr	r2, [pc, #152]	@ (80059e0 <HAL_DMA_IRQHandler+0xc80>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d03b      	beq.n	80059c2 <HAL_DMA_IRQHandler+0xc62>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a25      	ldr	r2, [pc, #148]	@ (80059e4 <HAL_DMA_IRQHandler+0xc84>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d036      	beq.n	80059c2 <HAL_DMA_IRQHandler+0xc62>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a23      	ldr	r2, [pc, #140]	@ (80059e8 <HAL_DMA_IRQHandler+0xc88>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d031      	beq.n	80059c2 <HAL_DMA_IRQHandler+0xc62>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a22      	ldr	r2, [pc, #136]	@ (80059ec <HAL_DMA_IRQHandler+0xc8c>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d02c      	beq.n	80059c2 <HAL_DMA_IRQHandler+0xc62>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a20      	ldr	r2, [pc, #128]	@ (80059f0 <HAL_DMA_IRQHandler+0xc90>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d027      	beq.n	80059c2 <HAL_DMA_IRQHandler+0xc62>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a1f      	ldr	r2, [pc, #124]	@ (80059f4 <HAL_DMA_IRQHandler+0xc94>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d022      	beq.n	80059c2 <HAL_DMA_IRQHandler+0xc62>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a1d      	ldr	r2, [pc, #116]	@ (80059f8 <HAL_DMA_IRQHandler+0xc98>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d01d      	beq.n	80059c2 <HAL_DMA_IRQHandler+0xc62>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a1c      	ldr	r2, [pc, #112]	@ (80059fc <HAL_DMA_IRQHandler+0xc9c>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d018      	beq.n	80059c2 <HAL_DMA_IRQHandler+0xc62>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a1a      	ldr	r2, [pc, #104]	@ (8005a00 <HAL_DMA_IRQHandler+0xca0>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d013      	beq.n	80059c2 <HAL_DMA_IRQHandler+0xc62>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a19      	ldr	r2, [pc, #100]	@ (8005a04 <HAL_DMA_IRQHandler+0xca4>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d00e      	beq.n	80059c2 <HAL_DMA_IRQHandler+0xc62>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a17      	ldr	r2, [pc, #92]	@ (8005a08 <HAL_DMA_IRQHandler+0xca8>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d009      	beq.n	80059c2 <HAL_DMA_IRQHandler+0xc62>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a16      	ldr	r2, [pc, #88]	@ (8005a0c <HAL_DMA_IRQHandler+0xcac>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d004      	beq.n	80059c2 <HAL_DMA_IRQHandler+0xc62>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a14      	ldr	r2, [pc, #80]	@ (8005a10 <HAL_DMA_IRQHandler+0xcb0>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d128      	bne.n	8005a14 <HAL_DMA_IRQHandler+0xcb4>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f022 0214 	bic.w	r2, r2, #20
 80059d0:	601a      	str	r2, [r3, #0]
 80059d2:	e027      	b.n	8005a24 <HAL_DMA_IRQHandler+0xcc4>
 80059d4:	40020010 	.word	0x40020010
 80059d8:	40020028 	.word	0x40020028
 80059dc:	40020040 	.word	0x40020040
 80059e0:	40020058 	.word	0x40020058
 80059e4:	40020070 	.word	0x40020070
 80059e8:	40020088 	.word	0x40020088
 80059ec:	400200a0 	.word	0x400200a0
 80059f0:	400200b8 	.word	0x400200b8
 80059f4:	40020410 	.word	0x40020410
 80059f8:	40020428 	.word	0x40020428
 80059fc:	40020440 	.word	0x40020440
 8005a00:	40020458 	.word	0x40020458
 8005a04:	40020470 	.word	0x40020470
 8005a08:	40020488 	.word	0x40020488
 8005a0c:	400204a0 	.word	0x400204a0
 8005a10:	400204b8 	.word	0x400204b8
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f022 020a 	bic.w	r2, r2, #10
 8005a22:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f000 8097 	beq.w	8005b6c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a46:	e091      	b.n	8005b6c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a4c:	f003 031f 	and.w	r3, r3, #31
 8005a50:	2208      	movs	r2, #8
 8005a52:	409a      	lsls	r2, r3
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	4013      	ands	r3, r2
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f000 8088 	beq.w	8005b6e <HAL_DMA_IRQHandler+0xe0e>
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	f003 0308 	and.w	r3, r3, #8
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f000 8082 	beq.w	8005b6e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a41      	ldr	r2, [pc, #260]	@ (8005b74 <HAL_DMA_IRQHandler+0xe14>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d04a      	beq.n	8005b0a <HAL_DMA_IRQHandler+0xdaa>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a3f      	ldr	r2, [pc, #252]	@ (8005b78 <HAL_DMA_IRQHandler+0xe18>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d045      	beq.n	8005b0a <HAL_DMA_IRQHandler+0xdaa>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a3e      	ldr	r2, [pc, #248]	@ (8005b7c <HAL_DMA_IRQHandler+0xe1c>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d040      	beq.n	8005b0a <HAL_DMA_IRQHandler+0xdaa>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a3c      	ldr	r2, [pc, #240]	@ (8005b80 <HAL_DMA_IRQHandler+0xe20>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d03b      	beq.n	8005b0a <HAL_DMA_IRQHandler+0xdaa>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a3b      	ldr	r2, [pc, #236]	@ (8005b84 <HAL_DMA_IRQHandler+0xe24>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d036      	beq.n	8005b0a <HAL_DMA_IRQHandler+0xdaa>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a39      	ldr	r2, [pc, #228]	@ (8005b88 <HAL_DMA_IRQHandler+0xe28>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d031      	beq.n	8005b0a <HAL_DMA_IRQHandler+0xdaa>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a38      	ldr	r2, [pc, #224]	@ (8005b8c <HAL_DMA_IRQHandler+0xe2c>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d02c      	beq.n	8005b0a <HAL_DMA_IRQHandler+0xdaa>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a36      	ldr	r2, [pc, #216]	@ (8005b90 <HAL_DMA_IRQHandler+0xe30>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d027      	beq.n	8005b0a <HAL_DMA_IRQHandler+0xdaa>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a35      	ldr	r2, [pc, #212]	@ (8005b94 <HAL_DMA_IRQHandler+0xe34>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d022      	beq.n	8005b0a <HAL_DMA_IRQHandler+0xdaa>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a33      	ldr	r2, [pc, #204]	@ (8005b98 <HAL_DMA_IRQHandler+0xe38>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d01d      	beq.n	8005b0a <HAL_DMA_IRQHandler+0xdaa>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a32      	ldr	r2, [pc, #200]	@ (8005b9c <HAL_DMA_IRQHandler+0xe3c>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d018      	beq.n	8005b0a <HAL_DMA_IRQHandler+0xdaa>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a30      	ldr	r2, [pc, #192]	@ (8005ba0 <HAL_DMA_IRQHandler+0xe40>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d013      	beq.n	8005b0a <HAL_DMA_IRQHandler+0xdaa>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a2f      	ldr	r2, [pc, #188]	@ (8005ba4 <HAL_DMA_IRQHandler+0xe44>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d00e      	beq.n	8005b0a <HAL_DMA_IRQHandler+0xdaa>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a2d      	ldr	r2, [pc, #180]	@ (8005ba8 <HAL_DMA_IRQHandler+0xe48>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d009      	beq.n	8005b0a <HAL_DMA_IRQHandler+0xdaa>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a2c      	ldr	r2, [pc, #176]	@ (8005bac <HAL_DMA_IRQHandler+0xe4c>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d004      	beq.n	8005b0a <HAL_DMA_IRQHandler+0xdaa>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a2a      	ldr	r2, [pc, #168]	@ (8005bb0 <HAL_DMA_IRQHandler+0xe50>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d108      	bne.n	8005b1c <HAL_DMA_IRQHandler+0xdbc>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f022 021c 	bic.w	r2, r2, #28
 8005b18:	601a      	str	r2, [r3, #0]
 8005b1a:	e007      	b.n	8005b2c <HAL_DMA_IRQHandler+0xdcc>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f022 020e 	bic.w	r2, r2, #14
 8005b2a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b30:	f003 031f 	and.w	r3, r3, #31
 8005b34:	2201      	movs	r2, #1
 8005b36:	409a      	lsls	r2, r3
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d009      	beq.n	8005b6e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	4798      	blx	r3
 8005b62:	e004      	b.n	8005b6e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005b64:	bf00      	nop
 8005b66:	e002      	b.n	8005b6e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b68:	bf00      	nop
 8005b6a:	e000      	b.n	8005b6e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b6c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005b6e:	3728      	adds	r7, #40	@ 0x28
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	40020010 	.word	0x40020010
 8005b78:	40020028 	.word	0x40020028
 8005b7c:	40020040 	.word	0x40020040
 8005b80:	40020058 	.word	0x40020058
 8005b84:	40020070 	.word	0x40020070
 8005b88:	40020088 	.word	0x40020088
 8005b8c:	400200a0 	.word	0x400200a0
 8005b90:	400200b8 	.word	0x400200b8
 8005b94:	40020410 	.word	0x40020410
 8005b98:	40020428 	.word	0x40020428
 8005b9c:	40020440 	.word	0x40020440
 8005ba0:	40020458 	.word	0x40020458
 8005ba4:	40020470 	.word	0x40020470
 8005ba8:	40020488 	.word	0x40020488
 8005bac:	400204a0 	.word	0x400204a0
 8005bb0:	400204b8 	.word	0x400204b8

08005bb4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a42      	ldr	r2, [pc, #264]	@ (8005ccc <DMA_CalcBaseAndBitshift+0x118>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d04a      	beq.n	8005c5c <DMA_CalcBaseAndBitshift+0xa8>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a41      	ldr	r2, [pc, #260]	@ (8005cd0 <DMA_CalcBaseAndBitshift+0x11c>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d045      	beq.n	8005c5c <DMA_CalcBaseAndBitshift+0xa8>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a3f      	ldr	r2, [pc, #252]	@ (8005cd4 <DMA_CalcBaseAndBitshift+0x120>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d040      	beq.n	8005c5c <DMA_CalcBaseAndBitshift+0xa8>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a3e      	ldr	r2, [pc, #248]	@ (8005cd8 <DMA_CalcBaseAndBitshift+0x124>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d03b      	beq.n	8005c5c <DMA_CalcBaseAndBitshift+0xa8>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a3c      	ldr	r2, [pc, #240]	@ (8005cdc <DMA_CalcBaseAndBitshift+0x128>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d036      	beq.n	8005c5c <DMA_CalcBaseAndBitshift+0xa8>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a3b      	ldr	r2, [pc, #236]	@ (8005ce0 <DMA_CalcBaseAndBitshift+0x12c>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d031      	beq.n	8005c5c <DMA_CalcBaseAndBitshift+0xa8>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a39      	ldr	r2, [pc, #228]	@ (8005ce4 <DMA_CalcBaseAndBitshift+0x130>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d02c      	beq.n	8005c5c <DMA_CalcBaseAndBitshift+0xa8>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a38      	ldr	r2, [pc, #224]	@ (8005ce8 <DMA_CalcBaseAndBitshift+0x134>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d027      	beq.n	8005c5c <DMA_CalcBaseAndBitshift+0xa8>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a36      	ldr	r2, [pc, #216]	@ (8005cec <DMA_CalcBaseAndBitshift+0x138>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d022      	beq.n	8005c5c <DMA_CalcBaseAndBitshift+0xa8>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a35      	ldr	r2, [pc, #212]	@ (8005cf0 <DMA_CalcBaseAndBitshift+0x13c>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d01d      	beq.n	8005c5c <DMA_CalcBaseAndBitshift+0xa8>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a33      	ldr	r2, [pc, #204]	@ (8005cf4 <DMA_CalcBaseAndBitshift+0x140>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d018      	beq.n	8005c5c <DMA_CalcBaseAndBitshift+0xa8>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a32      	ldr	r2, [pc, #200]	@ (8005cf8 <DMA_CalcBaseAndBitshift+0x144>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d013      	beq.n	8005c5c <DMA_CalcBaseAndBitshift+0xa8>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a30      	ldr	r2, [pc, #192]	@ (8005cfc <DMA_CalcBaseAndBitshift+0x148>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d00e      	beq.n	8005c5c <DMA_CalcBaseAndBitshift+0xa8>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a2f      	ldr	r2, [pc, #188]	@ (8005d00 <DMA_CalcBaseAndBitshift+0x14c>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d009      	beq.n	8005c5c <DMA_CalcBaseAndBitshift+0xa8>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a2d      	ldr	r2, [pc, #180]	@ (8005d04 <DMA_CalcBaseAndBitshift+0x150>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d004      	beq.n	8005c5c <DMA_CalcBaseAndBitshift+0xa8>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a2c      	ldr	r2, [pc, #176]	@ (8005d08 <DMA_CalcBaseAndBitshift+0x154>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d101      	bne.n	8005c60 <DMA_CalcBaseAndBitshift+0xac>
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e000      	b.n	8005c62 <DMA_CalcBaseAndBitshift+0xae>
 8005c60:	2300      	movs	r3, #0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d024      	beq.n	8005cb0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	3b10      	subs	r3, #16
 8005c6e:	4a27      	ldr	r2, [pc, #156]	@ (8005d0c <DMA_CalcBaseAndBitshift+0x158>)
 8005c70:	fba2 2303 	umull	r2, r3, r2, r3
 8005c74:	091b      	lsrs	r3, r3, #4
 8005c76:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f003 0307 	and.w	r3, r3, #7
 8005c7e:	4a24      	ldr	r2, [pc, #144]	@ (8005d10 <DMA_CalcBaseAndBitshift+0x15c>)
 8005c80:	5cd3      	ldrb	r3, [r2, r3]
 8005c82:	461a      	mov	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2b03      	cmp	r3, #3
 8005c8c:	d908      	bls.n	8005ca0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	461a      	mov	r2, r3
 8005c94:	4b1f      	ldr	r3, [pc, #124]	@ (8005d14 <DMA_CalcBaseAndBitshift+0x160>)
 8005c96:	4013      	ands	r3, r2
 8005c98:	1d1a      	adds	r2, r3, #4
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	659a      	str	r2, [r3, #88]	@ 0x58
 8005c9e:	e00d      	b.n	8005cbc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8005d14 <DMA_CalcBaseAndBitshift+0x160>)
 8005ca8:	4013      	ands	r3, r2
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cae:	e005      	b.n	8005cbc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3714      	adds	r7, #20
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr
 8005ccc:	40020010 	.word	0x40020010
 8005cd0:	40020028 	.word	0x40020028
 8005cd4:	40020040 	.word	0x40020040
 8005cd8:	40020058 	.word	0x40020058
 8005cdc:	40020070 	.word	0x40020070
 8005ce0:	40020088 	.word	0x40020088
 8005ce4:	400200a0 	.word	0x400200a0
 8005ce8:	400200b8 	.word	0x400200b8
 8005cec:	40020410 	.word	0x40020410
 8005cf0:	40020428 	.word	0x40020428
 8005cf4:	40020440 	.word	0x40020440
 8005cf8:	40020458 	.word	0x40020458
 8005cfc:	40020470 	.word	0x40020470
 8005d00:	40020488 	.word	0x40020488
 8005d04:	400204a0 	.word	0x400204a0
 8005d08:	400204b8 	.word	0x400204b8
 8005d0c:	aaaaaaab 	.word	0xaaaaaaab
 8005d10:	0800d420 	.word	0x0800d420
 8005d14:	fffffc00 	.word	0xfffffc00

08005d18 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d20:	2300      	movs	r3, #0
 8005d22:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d120      	bne.n	8005d6e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d30:	2b03      	cmp	r3, #3
 8005d32:	d858      	bhi.n	8005de6 <DMA_CheckFifoParam+0xce>
 8005d34:	a201      	add	r2, pc, #4	@ (adr r2, 8005d3c <DMA_CheckFifoParam+0x24>)
 8005d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3a:	bf00      	nop
 8005d3c:	08005d4d 	.word	0x08005d4d
 8005d40:	08005d5f 	.word	0x08005d5f
 8005d44:	08005d4d 	.word	0x08005d4d
 8005d48:	08005de7 	.word	0x08005de7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d048      	beq.n	8005dea <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005d5c:	e045      	b.n	8005dea <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d62:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005d66:	d142      	bne.n	8005dee <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005d6c:	e03f      	b.n	8005dee <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d76:	d123      	bne.n	8005dc0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d7c:	2b03      	cmp	r3, #3
 8005d7e:	d838      	bhi.n	8005df2 <DMA_CheckFifoParam+0xda>
 8005d80:	a201      	add	r2, pc, #4	@ (adr r2, 8005d88 <DMA_CheckFifoParam+0x70>)
 8005d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d86:	bf00      	nop
 8005d88:	08005d99 	.word	0x08005d99
 8005d8c:	08005d9f 	.word	0x08005d9f
 8005d90:	08005d99 	.word	0x08005d99
 8005d94:	08005db1 	.word	0x08005db1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	73fb      	strb	r3, [r7, #15]
        break;
 8005d9c:	e030      	b.n	8005e00 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d025      	beq.n	8005df6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005dae:	e022      	b.n	8005df6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005db8:	d11f      	bne.n	8005dfa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005dbe:	e01c      	b.n	8005dfa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d902      	bls.n	8005dce <DMA_CheckFifoParam+0xb6>
 8005dc8:	2b03      	cmp	r3, #3
 8005dca:	d003      	beq.n	8005dd4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005dcc:	e018      	b.n	8005e00 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	73fb      	strb	r3, [r7, #15]
        break;
 8005dd2:	e015      	b.n	8005e00 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00e      	beq.n	8005dfe <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	73fb      	strb	r3, [r7, #15]
    break;
 8005de4:	e00b      	b.n	8005dfe <DMA_CheckFifoParam+0xe6>
        break;
 8005de6:	bf00      	nop
 8005de8:	e00a      	b.n	8005e00 <DMA_CheckFifoParam+0xe8>
        break;
 8005dea:	bf00      	nop
 8005dec:	e008      	b.n	8005e00 <DMA_CheckFifoParam+0xe8>
        break;
 8005dee:	bf00      	nop
 8005df0:	e006      	b.n	8005e00 <DMA_CheckFifoParam+0xe8>
        break;
 8005df2:	bf00      	nop
 8005df4:	e004      	b.n	8005e00 <DMA_CheckFifoParam+0xe8>
        break;
 8005df6:	bf00      	nop
 8005df8:	e002      	b.n	8005e00 <DMA_CheckFifoParam+0xe8>
        break;
 8005dfa:	bf00      	nop
 8005dfc:	e000      	b.n	8005e00 <DMA_CheckFifoParam+0xe8>
    break;
 8005dfe:	bf00      	nop
    }
  }

  return status;
 8005e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3714      	adds	r7, #20
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop

08005e10 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a38      	ldr	r2, [pc, #224]	@ (8005f04 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d022      	beq.n	8005e6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a36      	ldr	r2, [pc, #216]	@ (8005f08 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d01d      	beq.n	8005e6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a35      	ldr	r2, [pc, #212]	@ (8005f0c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d018      	beq.n	8005e6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a33      	ldr	r2, [pc, #204]	@ (8005f10 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d013      	beq.n	8005e6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a32      	ldr	r2, [pc, #200]	@ (8005f14 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d00e      	beq.n	8005e6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a30      	ldr	r2, [pc, #192]	@ (8005f18 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d009      	beq.n	8005e6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a2f      	ldr	r2, [pc, #188]	@ (8005f1c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d004      	beq.n	8005e6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a2d      	ldr	r2, [pc, #180]	@ (8005f20 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d101      	bne.n	8005e72 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e000      	b.n	8005e74 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005e72:	2300      	movs	r3, #0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d01a      	beq.n	8005eae <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	3b08      	subs	r3, #8
 8005e80:	4a28      	ldr	r2, [pc, #160]	@ (8005f24 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005e82:	fba2 2303 	umull	r2, r3, r2, r3
 8005e86:	091b      	lsrs	r3, r3, #4
 8005e88:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	4b26      	ldr	r3, [pc, #152]	@ (8005f28 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005e8e:	4413      	add	r3, r2
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	461a      	mov	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a24      	ldr	r2, [pc, #144]	@ (8005f2c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005e9c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f003 031f 	and.w	r3, r3, #31
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	409a      	lsls	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005eac:	e024      	b.n	8005ef8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	3b10      	subs	r3, #16
 8005eb6:	4a1e      	ldr	r2, [pc, #120]	@ (8005f30 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ebc:	091b      	lsrs	r3, r3, #4
 8005ebe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	4a1c      	ldr	r2, [pc, #112]	@ (8005f34 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d806      	bhi.n	8005ed6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	4a1b      	ldr	r2, [pc, #108]	@ (8005f38 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d902      	bls.n	8005ed6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	3308      	adds	r3, #8
 8005ed4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	4b18      	ldr	r3, [pc, #96]	@ (8005f3c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005eda:	4413      	add	r3, r2
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	461a      	mov	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a16      	ldr	r2, [pc, #88]	@ (8005f40 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005ee8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f003 031f 	and.w	r3, r3, #31
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	409a      	lsls	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005ef8:	bf00      	nop
 8005efa:	3714      	adds	r7, #20
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr
 8005f04:	58025408 	.word	0x58025408
 8005f08:	5802541c 	.word	0x5802541c
 8005f0c:	58025430 	.word	0x58025430
 8005f10:	58025444 	.word	0x58025444
 8005f14:	58025458 	.word	0x58025458
 8005f18:	5802546c 	.word	0x5802546c
 8005f1c:	58025480 	.word	0x58025480
 8005f20:	58025494 	.word	0x58025494
 8005f24:	cccccccd 	.word	0xcccccccd
 8005f28:	16009600 	.word	0x16009600
 8005f2c:	58025880 	.word	0x58025880
 8005f30:	aaaaaaab 	.word	0xaaaaaaab
 8005f34:	400204b8 	.word	0x400204b8
 8005f38:	4002040f 	.word	0x4002040f
 8005f3c:	10008200 	.word	0x10008200
 8005f40:	40020880 	.word	0x40020880

08005f44 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d04a      	beq.n	8005ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2b08      	cmp	r3, #8
 8005f5e:	d847      	bhi.n	8005ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a25      	ldr	r2, [pc, #148]	@ (8005ffc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d022      	beq.n	8005fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a24      	ldr	r2, [pc, #144]	@ (8006000 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d01d      	beq.n	8005fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a22      	ldr	r2, [pc, #136]	@ (8006004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d018      	beq.n	8005fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a21      	ldr	r2, [pc, #132]	@ (8006008 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d013      	beq.n	8005fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a1f      	ldr	r2, [pc, #124]	@ (800600c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d00e      	beq.n	8005fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a1e      	ldr	r2, [pc, #120]	@ (8006010 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d009      	beq.n	8005fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a1c      	ldr	r2, [pc, #112]	@ (8006014 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d004      	beq.n	8005fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a1b      	ldr	r2, [pc, #108]	@ (8006018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d101      	bne.n	8005fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e000      	b.n	8005fb6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00a      	beq.n	8005fd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	4b17      	ldr	r3, [pc, #92]	@ (800601c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005fbe:	4413      	add	r3, r2
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a15      	ldr	r2, [pc, #84]	@ (8006020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005fcc:	671a      	str	r2, [r3, #112]	@ 0x70
 8005fce:	e009      	b.n	8005fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	4b14      	ldr	r3, [pc, #80]	@ (8006024 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005fd4:	4413      	add	r3, r2
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	461a      	mov	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a11      	ldr	r2, [pc, #68]	@ (8006028 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005fe2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	2201      	movs	r2, #1
 8005fea:	409a      	lsls	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005ff0:	bf00      	nop
 8005ff2:	3714      	adds	r7, #20
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr
 8005ffc:	58025408 	.word	0x58025408
 8006000:	5802541c 	.word	0x5802541c
 8006004:	58025430 	.word	0x58025430
 8006008:	58025444 	.word	0x58025444
 800600c:	58025458 	.word	0x58025458
 8006010:	5802546c 	.word	0x5802546c
 8006014:	58025480 	.word	0x58025480
 8006018:	58025494 	.word	0x58025494
 800601c:	1600963f 	.word	0x1600963f
 8006020:	58025940 	.word	0x58025940
 8006024:	1000823f 	.word	0x1000823f
 8006028:	40020940 	.word	0x40020940

0800602c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d101      	bne.n	800603e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e04f      	b.n	80060de <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b00      	cmp	r3, #0
 8006048:	d106      	bne.n	8006058 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f7fb fbb4 	bl	80017c0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2202      	movs	r2, #2
 800605c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	4b20      	ldr	r3, [pc, #128]	@ (80060e8 <HAL_DMA2D_Init+0xbc>)
 8006068:	4013      	ands	r3, r2
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	6851      	ldr	r1, [r2, #4]
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	69d2      	ldr	r2, [r2, #28]
 8006072:	4311      	orrs	r1, r2
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	6812      	ldr	r2, [r2, #0]
 8006078:	430b      	orrs	r3, r1
 800607a:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006082:	4b1a      	ldr	r3, [pc, #104]	@ (80060ec <HAL_DMA2D_Init+0xc0>)
 8006084:	4013      	ands	r3, r2
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	6891      	ldr	r1, [r2, #8]
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	6992      	ldr	r2, [r2, #24]
 800608e:	4311      	orrs	r1, r2
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	6812      	ldr	r2, [r2, #0]
 8006094:	430b      	orrs	r3, r1
 8006096:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800609e:	4b14      	ldr	r3, [pc, #80]	@ (80060f0 <HAL_DMA2D_Init+0xc4>)
 80060a0:	4013      	ands	r3, r2
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	68d1      	ldr	r1, [r2, #12]
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	6812      	ldr	r2, [r2, #0]
 80060aa:	430b      	orrs	r3, r1
 80060ac:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060b4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	051a      	lsls	r2, r3, #20
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	055b      	lsls	r3, r3, #21
 80060c4:	431a      	orrs	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	430a      	orrs	r2, r1
 80060cc:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3708      	adds	r7, #8
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	fff8ffbf 	.word	0xfff8ffbf
 80060ec:	fffffef8 	.word	0xfffffef8
 80060f0:	ffff0000 	.word	0xffff0000

080060f4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b087      	sub	sp, #28
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8006110:	2b01      	cmp	r3, #1
 8006112:	d101      	bne.n	8006118 <HAL_DMA2D_ConfigLayer+0x24>
 8006114:	2302      	movs	r3, #2
 8006116:	e092      	b.n	800623e <HAL_DMA2D_ConfigLayer+0x14a>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2202      	movs	r2, #2
 8006124:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006128:	683a      	ldr	r2, [r7, #0]
 800612a:	4613      	mov	r3, r2
 800612c:	00db      	lsls	r3, r3, #3
 800612e:	1a9b      	subs	r3, r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	3328      	adds	r3, #40	@ 0x28
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	4413      	add	r3, r2
 8006138:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	685a      	ldr	r2, [r3, #4]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	041b      	lsls	r3, r3, #16
 8006144:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800614c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006154:	4313      	orrs	r3, r2
 8006156:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8006158:	4b3c      	ldr	r3, [pc, #240]	@ (800624c <HAL_DMA2D_ConfigLayer+0x158>)
 800615a:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	2b0a      	cmp	r3, #10
 8006162:	d003      	beq.n	800616c <HAL_DMA2D_ConfigLayer+0x78>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	2b09      	cmp	r3, #9
 800616a:	d107      	bne.n	800617c <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	4313      	orrs	r3, r2
 8006178:	613b      	str	r3, [r7, #16]
 800617a:	e005      	b.n	8006188 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	061b      	lsls	r3, r3, #24
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	4313      	orrs	r3, r2
 8006186:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d120      	bne.n	80061d0 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	43db      	mvns	r3, r3
 8006198:	ea02 0103 	and.w	r1, r2, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	430a      	orrs	r2, r1
 80061a4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	6812      	ldr	r2, [r2, #0]
 80061ae:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	2b0a      	cmp	r3, #10
 80061b6:	d003      	beq.n	80061c0 <HAL_DMA2D_ConfigLayer+0xcc>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	2b09      	cmp	r3, #9
 80061be:	d135      	bne.n	800622c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	68da      	ldr	r2, [r3, #12]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80061cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80061ce:	e02d      	b.n	800622c <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	2b0b      	cmp	r3, #11
 80061d6:	d109      	bne.n	80061ec <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	049b      	lsls	r3, r3, #18
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 80061ea:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	69da      	ldr	r2, [r3, #28]
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	43db      	mvns	r3, r3
 80061f6:	ea02 0103 	and.w	r1, r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	693a      	ldr	r2, [r7, #16]
 8006200:	430a      	orrs	r2, r1
 8006202:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	6812      	ldr	r2, [r2, #0]
 800620c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	2b0a      	cmp	r3, #10
 8006214:	d003      	beq.n	800621e <HAL_DMA2D_ConfigLayer+0x12a>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	2b09      	cmp	r3, #9
 800621c:	d106      	bne.n	800622c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	68da      	ldr	r2, [r3, #12]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800622a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	371c      	adds	r7, #28
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	ff33000f 	.word	0xff33000f

08006250 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006250:	b480      	push	{r7}
 8006252:	b089      	sub	sp, #36	@ 0x24
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800625a:	2300      	movs	r3, #0
 800625c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800625e:	4b86      	ldr	r3, [pc, #536]	@ (8006478 <HAL_GPIO_Init+0x228>)
 8006260:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006262:	e18c      	b.n	800657e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	2101      	movs	r1, #1
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	fa01 f303 	lsl.w	r3, r1, r3
 8006270:	4013      	ands	r3, r2
 8006272:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	2b00      	cmp	r3, #0
 8006278:	f000 817e 	beq.w	8006578 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	f003 0303 	and.w	r3, r3, #3
 8006284:	2b01      	cmp	r3, #1
 8006286:	d005      	beq.n	8006294 <HAL_GPIO_Init+0x44>
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f003 0303 	and.w	r3, r3, #3
 8006290:	2b02      	cmp	r3, #2
 8006292:	d130      	bne.n	80062f6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	005b      	lsls	r3, r3, #1
 800629e:	2203      	movs	r2, #3
 80062a0:	fa02 f303 	lsl.w	r3, r2, r3
 80062a4:	43db      	mvns	r3, r3
 80062a6:	69ba      	ldr	r2, [r7, #24]
 80062a8:	4013      	ands	r3, r2
 80062aa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	68da      	ldr	r2, [r3, #12]
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	005b      	lsls	r3, r3, #1
 80062b4:	fa02 f303 	lsl.w	r3, r2, r3
 80062b8:	69ba      	ldr	r2, [r7, #24]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	69ba      	ldr	r2, [r7, #24]
 80062c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80062ca:	2201      	movs	r2, #1
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	fa02 f303 	lsl.w	r3, r2, r3
 80062d2:	43db      	mvns	r3, r3
 80062d4:	69ba      	ldr	r2, [r7, #24]
 80062d6:	4013      	ands	r3, r2
 80062d8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	091b      	lsrs	r3, r3, #4
 80062e0:	f003 0201 	and.w	r2, r3, #1
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	fa02 f303 	lsl.w	r3, r2, r3
 80062ea:	69ba      	ldr	r2, [r7, #24]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	69ba      	ldr	r2, [r7, #24]
 80062f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	f003 0303 	and.w	r3, r3, #3
 80062fe:	2b03      	cmp	r3, #3
 8006300:	d017      	beq.n	8006332 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	005b      	lsls	r3, r3, #1
 800630c:	2203      	movs	r2, #3
 800630e:	fa02 f303 	lsl.w	r3, r2, r3
 8006312:	43db      	mvns	r3, r3
 8006314:	69ba      	ldr	r2, [r7, #24]
 8006316:	4013      	ands	r3, r2
 8006318:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	689a      	ldr	r2, [r3, #8]
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	005b      	lsls	r3, r3, #1
 8006322:	fa02 f303 	lsl.w	r3, r2, r3
 8006326:	69ba      	ldr	r2, [r7, #24]
 8006328:	4313      	orrs	r3, r2
 800632a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	69ba      	ldr	r2, [r7, #24]
 8006330:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	f003 0303 	and.w	r3, r3, #3
 800633a:	2b02      	cmp	r3, #2
 800633c:	d123      	bne.n	8006386 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	08da      	lsrs	r2, r3, #3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	3208      	adds	r2, #8
 8006346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800634a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	f003 0307 	and.w	r3, r3, #7
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	220f      	movs	r2, #15
 8006356:	fa02 f303 	lsl.w	r3, r2, r3
 800635a:	43db      	mvns	r3, r3
 800635c:	69ba      	ldr	r2, [r7, #24]
 800635e:	4013      	ands	r3, r2
 8006360:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	691a      	ldr	r2, [r3, #16]
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	f003 0307 	and.w	r3, r3, #7
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	fa02 f303 	lsl.w	r3, r2, r3
 8006372:	69ba      	ldr	r2, [r7, #24]
 8006374:	4313      	orrs	r3, r2
 8006376:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	08da      	lsrs	r2, r3, #3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	3208      	adds	r2, #8
 8006380:	69b9      	ldr	r1, [r7, #24]
 8006382:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	005b      	lsls	r3, r3, #1
 8006390:	2203      	movs	r2, #3
 8006392:	fa02 f303 	lsl.w	r3, r2, r3
 8006396:	43db      	mvns	r3, r3
 8006398:	69ba      	ldr	r2, [r7, #24]
 800639a:	4013      	ands	r3, r2
 800639c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	f003 0203 	and.w	r2, r3, #3
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	005b      	lsls	r3, r3, #1
 80063aa:	fa02 f303 	lsl.w	r3, r2, r3
 80063ae:	69ba      	ldr	r2, [r7, #24]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	69ba      	ldr	r2, [r7, #24]
 80063b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f000 80d8 	beq.w	8006578 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063c8:	4b2c      	ldr	r3, [pc, #176]	@ (800647c <HAL_GPIO_Init+0x22c>)
 80063ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80063ce:	4a2b      	ldr	r2, [pc, #172]	@ (800647c <HAL_GPIO_Init+0x22c>)
 80063d0:	f043 0302 	orr.w	r3, r3, #2
 80063d4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80063d8:	4b28      	ldr	r3, [pc, #160]	@ (800647c <HAL_GPIO_Init+0x22c>)
 80063da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80063de:	f003 0302 	and.w	r3, r3, #2
 80063e2:	60fb      	str	r3, [r7, #12]
 80063e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80063e6:	4a26      	ldr	r2, [pc, #152]	@ (8006480 <HAL_GPIO_Init+0x230>)
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	089b      	lsrs	r3, r3, #2
 80063ec:	3302      	adds	r3, #2
 80063ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	f003 0303 	and.w	r3, r3, #3
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	220f      	movs	r2, #15
 80063fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006402:	43db      	mvns	r3, r3
 8006404:	69ba      	ldr	r2, [r7, #24]
 8006406:	4013      	ands	r3, r2
 8006408:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a1d      	ldr	r2, [pc, #116]	@ (8006484 <HAL_GPIO_Init+0x234>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d04a      	beq.n	80064a8 <HAL_GPIO_Init+0x258>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a1c      	ldr	r2, [pc, #112]	@ (8006488 <HAL_GPIO_Init+0x238>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d02b      	beq.n	8006472 <HAL_GPIO_Init+0x222>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a1b      	ldr	r2, [pc, #108]	@ (800648c <HAL_GPIO_Init+0x23c>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d025      	beq.n	800646e <HAL_GPIO_Init+0x21e>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a1a      	ldr	r2, [pc, #104]	@ (8006490 <HAL_GPIO_Init+0x240>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d01f      	beq.n	800646a <HAL_GPIO_Init+0x21a>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a19      	ldr	r2, [pc, #100]	@ (8006494 <HAL_GPIO_Init+0x244>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d019      	beq.n	8006466 <HAL_GPIO_Init+0x216>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a18      	ldr	r2, [pc, #96]	@ (8006498 <HAL_GPIO_Init+0x248>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d013      	beq.n	8006462 <HAL_GPIO_Init+0x212>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a17      	ldr	r2, [pc, #92]	@ (800649c <HAL_GPIO_Init+0x24c>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d00d      	beq.n	800645e <HAL_GPIO_Init+0x20e>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a16      	ldr	r2, [pc, #88]	@ (80064a0 <HAL_GPIO_Init+0x250>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d007      	beq.n	800645a <HAL_GPIO_Init+0x20a>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a15      	ldr	r2, [pc, #84]	@ (80064a4 <HAL_GPIO_Init+0x254>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d101      	bne.n	8006456 <HAL_GPIO_Init+0x206>
 8006452:	2309      	movs	r3, #9
 8006454:	e029      	b.n	80064aa <HAL_GPIO_Init+0x25a>
 8006456:	230a      	movs	r3, #10
 8006458:	e027      	b.n	80064aa <HAL_GPIO_Init+0x25a>
 800645a:	2307      	movs	r3, #7
 800645c:	e025      	b.n	80064aa <HAL_GPIO_Init+0x25a>
 800645e:	2306      	movs	r3, #6
 8006460:	e023      	b.n	80064aa <HAL_GPIO_Init+0x25a>
 8006462:	2305      	movs	r3, #5
 8006464:	e021      	b.n	80064aa <HAL_GPIO_Init+0x25a>
 8006466:	2304      	movs	r3, #4
 8006468:	e01f      	b.n	80064aa <HAL_GPIO_Init+0x25a>
 800646a:	2303      	movs	r3, #3
 800646c:	e01d      	b.n	80064aa <HAL_GPIO_Init+0x25a>
 800646e:	2302      	movs	r3, #2
 8006470:	e01b      	b.n	80064aa <HAL_GPIO_Init+0x25a>
 8006472:	2301      	movs	r3, #1
 8006474:	e019      	b.n	80064aa <HAL_GPIO_Init+0x25a>
 8006476:	bf00      	nop
 8006478:	58000080 	.word	0x58000080
 800647c:	58024400 	.word	0x58024400
 8006480:	58000400 	.word	0x58000400
 8006484:	58020000 	.word	0x58020000
 8006488:	58020400 	.word	0x58020400
 800648c:	58020800 	.word	0x58020800
 8006490:	58020c00 	.word	0x58020c00
 8006494:	58021000 	.word	0x58021000
 8006498:	58021400 	.word	0x58021400
 800649c:	58021800 	.word	0x58021800
 80064a0:	58021c00 	.word	0x58021c00
 80064a4:	58022400 	.word	0x58022400
 80064a8:	2300      	movs	r3, #0
 80064aa:	69fa      	ldr	r2, [r7, #28]
 80064ac:	f002 0203 	and.w	r2, r2, #3
 80064b0:	0092      	lsls	r2, r2, #2
 80064b2:	4093      	lsls	r3, r2
 80064b4:	69ba      	ldr	r2, [r7, #24]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80064ba:	4938      	ldr	r1, [pc, #224]	@ (800659c <HAL_GPIO_Init+0x34c>)
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	089b      	lsrs	r3, r3, #2
 80064c0:	3302      	adds	r3, #2
 80064c2:	69ba      	ldr	r2, [r7, #24]
 80064c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80064c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	43db      	mvns	r3, r3
 80064d4:	69ba      	ldr	r2, [r7, #24]
 80064d6:	4013      	ands	r3, r2
 80064d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d003      	beq.n	80064ee <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80064e6:	69ba      	ldr	r2, [r7, #24]
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80064ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80064f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	43db      	mvns	r3, r3
 8006502:	69ba      	ldr	r2, [r7, #24]
 8006504:	4013      	ands	r3, r2
 8006506:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d003      	beq.n	800651c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8006514:	69ba      	ldr	r2, [r7, #24]
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	4313      	orrs	r3, r2
 800651a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800651c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	43db      	mvns	r3, r3
 800652e:	69ba      	ldr	r2, [r7, #24]
 8006530:	4013      	ands	r3, r2
 8006532:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800653c:	2b00      	cmp	r3, #0
 800653e:	d003      	beq.n	8006548 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006540:	69ba      	ldr	r2, [r7, #24]
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	4313      	orrs	r3, r2
 8006546:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	69ba      	ldr	r2, [r7, #24]
 800654c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	43db      	mvns	r3, r3
 8006558:	69ba      	ldr	r2, [r7, #24]
 800655a:	4013      	ands	r3, r2
 800655c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006566:	2b00      	cmp	r3, #0
 8006568:	d003      	beq.n	8006572 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	4313      	orrs	r3, r2
 8006570:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	69ba      	ldr	r2, [r7, #24]
 8006576:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	3301      	adds	r3, #1
 800657c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	fa22 f303 	lsr.w	r3, r2, r3
 8006588:	2b00      	cmp	r3, #0
 800658a:	f47f ae6b 	bne.w	8006264 <HAL_GPIO_Init+0x14>
  }
}
 800658e:	bf00      	nop
 8006590:	bf00      	nop
 8006592:	3724      	adds	r7, #36	@ 0x24
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr
 800659c:	58000400 	.word	0x58000400

080065a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d101      	bne.n	80065b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e08b      	b.n	80066ca <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d106      	bne.n	80065cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f7fb f91c 	bl	8001804 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2224      	movs	r2, #36	@ 0x24
 80065d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f022 0201 	bic.w	r2, r2, #1
 80065e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685a      	ldr	r2, [r3, #4]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80065f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	689a      	ldr	r2, [r3, #8]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006600:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	2b01      	cmp	r3, #1
 8006608:	d107      	bne.n	800661a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	689a      	ldr	r2, [r3, #8]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006616:	609a      	str	r2, [r3, #8]
 8006618:	e006      	b.n	8006628 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	689a      	ldr	r2, [r3, #8]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006626:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	2b02      	cmp	r3, #2
 800662e:	d108      	bne.n	8006642 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	685a      	ldr	r2, [r3, #4]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800663e:	605a      	str	r2, [r3, #4]
 8006640:	e007      	b.n	8006652 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	685a      	ldr	r2, [r3, #4]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006650:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	6859      	ldr	r1, [r3, #4]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	4b1d      	ldr	r3, [pc, #116]	@ (80066d4 <HAL_I2C_Init+0x134>)
 800665e:	430b      	orrs	r3, r1
 8006660:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68da      	ldr	r2, [r3, #12]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006670:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	691a      	ldr	r2, [r3, #16]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	430a      	orrs	r2, r1
 800668a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	69d9      	ldr	r1, [r3, #28]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a1a      	ldr	r2, [r3, #32]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	430a      	orrs	r2, r1
 800669a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f042 0201 	orr.w	r2, r2, #1
 80066aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2220      	movs	r2, #32
 80066b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3708      	adds	r7, #8
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	02008000 	.word	0x02008000

080066d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2b20      	cmp	r3, #32
 80066ec:	d138      	bne.n	8006760 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d101      	bne.n	80066fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80066f8:	2302      	movs	r3, #2
 80066fa:	e032      	b.n	8006762 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2224      	movs	r2, #36	@ 0x24
 8006708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f022 0201 	bic.w	r2, r2, #1
 800671a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800672a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	6819      	ldr	r1, [r3, #0]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	683a      	ldr	r2, [r7, #0]
 8006738:	430a      	orrs	r2, r1
 800673a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f042 0201 	orr.w	r2, r2, #1
 800674a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2220      	movs	r2, #32
 8006750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800675c:	2300      	movs	r3, #0
 800675e:	e000      	b.n	8006762 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006760:	2302      	movs	r3, #2
  }
}
 8006762:	4618      	mov	r0, r3
 8006764:	370c      	adds	r7, #12
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr

0800676e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800676e:	b480      	push	{r7}
 8006770:	b085      	sub	sp, #20
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
 8006776:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800677e:	b2db      	uxtb	r3, r3
 8006780:	2b20      	cmp	r3, #32
 8006782:	d139      	bne.n	80067f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800678a:	2b01      	cmp	r3, #1
 800678c:	d101      	bne.n	8006792 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800678e:	2302      	movs	r3, #2
 8006790:	e033      	b.n	80067fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2201      	movs	r2, #1
 8006796:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2224      	movs	r2, #36	@ 0x24
 800679e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f022 0201 	bic.w	r2, r2, #1
 80067b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80067c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	021b      	lsls	r3, r3, #8
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f042 0201 	orr.w	r2, r2, #1
 80067e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2220      	movs	r2, #32
 80067e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80067f4:	2300      	movs	r3, #0
 80067f6:	e000      	b.n	80067fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80067f8:	2302      	movs	r3, #2
  }
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
	...

08006808 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d101      	bne.n	800681a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e0bf      	b.n	800699a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b00      	cmp	r3, #0
 8006824:	d106      	bne.n	8006834 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f7fb f8f0 	bl	8001a14 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2202      	movs	r2, #2
 8006838:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	699a      	ldr	r2, [r3, #24]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800684a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	6999      	ldr	r1, [r3, #24]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	685a      	ldr	r2, [r3, #4]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006860:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	430a      	orrs	r2, r1
 800686e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	6899      	ldr	r1, [r3, #8]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	4b4a      	ldr	r3, [pc, #296]	@ (80069a4 <HAL_LTDC_Init+0x19c>)
 800687c:	400b      	ands	r3, r1
 800687e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	695b      	ldr	r3, [r3, #20]
 8006884:	041b      	lsls	r3, r3, #16
 8006886:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6899      	ldr	r1, [r3, #8]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	699a      	ldr	r2, [r3, #24]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	431a      	orrs	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	430a      	orrs	r2, r1
 800689c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68d9      	ldr	r1, [r3, #12]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	4b3e      	ldr	r3, [pc, #248]	@ (80069a4 <HAL_LTDC_Init+0x19c>)
 80068aa:	400b      	ands	r3, r1
 80068ac:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	69db      	ldr	r3, [r3, #28]
 80068b2:	041b      	lsls	r3, r3, #16
 80068b4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68d9      	ldr	r1, [r3, #12]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a1a      	ldr	r2, [r3, #32]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	431a      	orrs	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	430a      	orrs	r2, r1
 80068ca:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	6919      	ldr	r1, [r3, #16]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	4b33      	ldr	r3, [pc, #204]	@ (80069a4 <HAL_LTDC_Init+0x19c>)
 80068d8:	400b      	ands	r3, r1
 80068da:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e0:	041b      	lsls	r3, r3, #16
 80068e2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	6919      	ldr	r1, [r3, #16]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	431a      	orrs	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	430a      	orrs	r2, r1
 80068f8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	6959      	ldr	r1, [r3, #20]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	4b27      	ldr	r3, [pc, #156]	@ (80069a4 <HAL_LTDC_Init+0x19c>)
 8006906:	400b      	ands	r3, r1
 8006908:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800690e:	041b      	lsls	r3, r3, #16
 8006910:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	6959      	ldr	r1, [r3, #20]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	431a      	orrs	r2, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	430a      	orrs	r2, r1
 8006926:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800692e:	021b      	lsls	r3, r3, #8
 8006930:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006938:	041b      	lsls	r3, r3, #16
 800693a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800694a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006952:	68ba      	ldr	r2, [r7, #8]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	4313      	orrs	r3, r2
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800695e:	431a      	orrs	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	430a      	orrs	r2, r1
 8006966:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f042 0206 	orr.w	r2, r2, #6
 8006976:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	699a      	ldr	r2, [r3, #24]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f042 0201 	orr.w	r2, r2, #1
 8006986:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	f000f800 	.word	0xf000f800

080069a8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069b6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069be:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f003 0304 	and.w	r3, r3, #4
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d023      	beq.n	8006a12 <HAL_LTDC_IRQHandler+0x6a>
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	f003 0304 	and.w	r3, r3, #4
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d01e      	beq.n	8006a12 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f022 0204 	bic.w	r2, r2, #4
 80069e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2204      	movs	r2, #4
 80069ea:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80069f2:	f043 0201 	orr.w	r2, r3, #1
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2204      	movs	r2, #4
 8006a00:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 f86f 	bl	8006af0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f003 0302 	and.w	r3, r3, #2
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d023      	beq.n	8006a64 <HAL_LTDC_IRQHandler+0xbc>
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	f003 0302 	and.w	r3, r3, #2
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d01e      	beq.n	8006a64 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f022 0202 	bic.w	r2, r2, #2
 8006a34:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2202      	movs	r2, #2
 8006a3c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006a44:	f043 0202 	orr.w	r2, r3, #2
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2204      	movs	r2, #4
 8006a52:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 f846 	bl	8006af0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f003 0301 	and.w	r3, r3, #1
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d01b      	beq.n	8006aa6 <HAL_LTDC_IRQHandler+0xfe>
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	f003 0301 	and.w	r3, r3, #1
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d016      	beq.n	8006aa6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f022 0201 	bic.w	r2, r2, #1
 8006a86:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 f82f 	bl	8006b04 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f003 0308 	and.w	r3, r3, #8
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d01b      	beq.n	8006ae8 <HAL_LTDC_IRQHandler+0x140>
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	f003 0308 	and.w	r3, r3, #8
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d016      	beq.n	8006ae8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f022 0208 	bic.w	r2, r2, #8
 8006ac8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2208      	movs	r2, #8
 8006ad0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 f818 	bl	8006b18 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006ae8:	bf00      	nop
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006af8:	bf00      	nop
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006b0c:	bf00      	nop
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006b2c:	b5b0      	push	{r4, r5, r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d101      	bne.n	8006b46 <HAL_LTDC_ConfigLayer+0x1a>
 8006b42:	2302      	movs	r3, #2
 8006b44:	e02c      	b.n	8006ba0 <HAL_LTDC_ConfigLayer+0x74>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2202      	movs	r2, #2
 8006b52:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2134      	movs	r1, #52	@ 0x34
 8006b5c:	fb01 f303 	mul.w	r3, r1, r3
 8006b60:	4413      	add	r3, r2
 8006b62:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	4614      	mov	r4, r2
 8006b6a:	461d      	mov	r5, r3
 8006b6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b78:	682b      	ldr	r3, [r5, #0]
 8006b7a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	68b9      	ldr	r1, [r7, #8]
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f000 f811 	bl	8006ba8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006b9e:	2300      	movs	r3, #0
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bdb0      	pop	{r4, r5, r7, pc}

08006ba8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b089      	sub	sp, #36	@ 0x24
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	685a      	ldr	r2, [r3, #4]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	0c1b      	lsrs	r3, r3, #16
 8006bc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bc4:	4413      	add	r3, r2
 8006bc6:	041b      	lsls	r3, r3, #16
 8006bc8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	461a      	mov	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	01db      	lsls	r3, r3, #7
 8006bd4:	4413      	add	r3, r2
 8006bd6:	3384      	adds	r3, #132	@ 0x84
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	6812      	ldr	r2, [r2, #0]
 8006bde:	4611      	mov	r1, r2
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	01d2      	lsls	r2, r2, #7
 8006be4:	440a      	add	r2, r1
 8006be6:	3284      	adds	r2, #132	@ 0x84
 8006be8:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006bec:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	0c1b      	lsrs	r3, r3, #16
 8006bfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006bfe:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006c00:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4619      	mov	r1, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	01db      	lsls	r3, r3, #7
 8006c0c:	440b      	add	r3, r1
 8006c0e:	3384      	adds	r3, #132	@ 0x84
 8006c10:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006c16:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	68da      	ldr	r2, [r3, #12]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c26:	4413      	add	r3, r2
 8006c28:	041b      	lsls	r3, r3, #16
 8006c2a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	461a      	mov	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	01db      	lsls	r3, r3, #7
 8006c36:	4413      	add	r3, r2
 8006c38:	3384      	adds	r3, #132	@ 0x84
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	6812      	ldr	r2, [r2, #0]
 8006c40:	4611      	mov	r1, r2
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	01d2      	lsls	r2, r2, #7
 8006c46:	440a      	add	r2, r1
 8006c48:	3284      	adds	r2, #132	@ 0x84
 8006c4a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006c4e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	689a      	ldr	r2, [r3, #8]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c5e:	4413      	add	r3, r2
 8006c60:	1c5a      	adds	r2, r3, #1
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4619      	mov	r1, r3
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	01db      	lsls	r3, r3, #7
 8006c6c:	440b      	add	r3, r1
 8006c6e:	3384      	adds	r3, #132	@ 0x84
 8006c70:	4619      	mov	r1, r3
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	01db      	lsls	r3, r3, #7
 8006c82:	4413      	add	r3, r2
 8006c84:	3384      	adds	r3, #132	@ 0x84
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	6812      	ldr	r2, [r2, #0]
 8006c8c:	4611      	mov	r1, r2
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	01d2      	lsls	r2, r2, #7
 8006c92:	440a      	add	r2, r1
 8006c94:	3284      	adds	r2, #132	@ 0x84
 8006c96:	f023 0307 	bic.w	r3, r3, #7
 8006c9a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	01db      	lsls	r3, r3, #7
 8006ca6:	4413      	add	r3, r2
 8006ca8:	3384      	adds	r3, #132	@ 0x84
 8006caa:	461a      	mov	r2, r3
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006cb8:	021b      	lsls	r3, r3, #8
 8006cba:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006cc2:	041b      	lsls	r3, r3, #16
 8006cc4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	699b      	ldr	r3, [r3, #24]
 8006cca:	061b      	lsls	r3, r3, #24
 8006ccc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	01db      	lsls	r3, r3, #7
 8006cd8:	4413      	add	r3, r2
 8006cda:	3384      	adds	r3, #132	@ 0x84
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	01db      	lsls	r3, r3, #7
 8006ce8:	4413      	add	r3, r2
 8006cea:	3384      	adds	r3, #132	@ 0x84
 8006cec:	461a      	mov	r2, r3
 8006cee:	2300      	movs	r3, #0
 8006cf0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	431a      	orrs	r2, r3
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	431a      	orrs	r2, r3
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4619      	mov	r1, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	01db      	lsls	r3, r3, #7
 8006d0c:	440b      	add	r3, r1
 8006d0e:	3384      	adds	r3, #132	@ 0x84
 8006d10:	4619      	mov	r1, r3
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	01db      	lsls	r3, r3, #7
 8006d22:	4413      	add	r3, r2
 8006d24:	3384      	adds	r3, #132	@ 0x84
 8006d26:	695b      	ldr	r3, [r3, #20]
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	6812      	ldr	r2, [r2, #0]
 8006d2c:	4611      	mov	r1, r2
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	01d2      	lsls	r2, r2, #7
 8006d32:	440a      	add	r2, r1
 8006d34:	3284      	adds	r2, #132	@ 0x84
 8006d36:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006d3a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	461a      	mov	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	01db      	lsls	r3, r3, #7
 8006d46:	4413      	add	r3, r2
 8006d48:	3384      	adds	r3, #132	@ 0x84
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	695b      	ldr	r3, [r3, #20]
 8006d50:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	461a      	mov	r2, r3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	01db      	lsls	r3, r3, #7
 8006d5c:	4413      	add	r3, r2
 8006d5e:	3384      	adds	r3, #132	@ 0x84
 8006d60:	69da      	ldr	r2, [r3, #28]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4619      	mov	r1, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	01db      	lsls	r3, r3, #7
 8006d6c:	440b      	add	r3, r1
 8006d6e:	3384      	adds	r3, #132	@ 0x84
 8006d70:	4619      	mov	r1, r3
 8006d72:	4b58      	ldr	r3, [pc, #352]	@ (8006ed4 <LTDC_SetConfig+0x32c>)
 8006d74:	4013      	ands	r3, r2
 8006d76:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	69da      	ldr	r2, [r3, #28]
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	6a1b      	ldr	r3, [r3, #32]
 8006d80:	68f9      	ldr	r1, [r7, #12]
 8006d82:	6809      	ldr	r1, [r1, #0]
 8006d84:	4608      	mov	r0, r1
 8006d86:	6879      	ldr	r1, [r7, #4]
 8006d88:	01c9      	lsls	r1, r1, #7
 8006d8a:	4401      	add	r1, r0
 8006d8c:	3184      	adds	r1, #132	@ 0x84
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	461a      	mov	r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	01db      	lsls	r3, r3, #7
 8006d9c:	4413      	add	r3, r2
 8006d9e:	3384      	adds	r3, #132	@ 0x84
 8006da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	461a      	mov	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	01db      	lsls	r3, r3, #7
 8006dac:	4413      	add	r3, r2
 8006dae:	3384      	adds	r3, #132	@ 0x84
 8006db0:	461a      	mov	r2, r3
 8006db2:	2300      	movs	r3, #0
 8006db4:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	461a      	mov	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	01db      	lsls	r3, r3, #7
 8006dc0:	4413      	add	r3, r2
 8006dc2:	3384      	adds	r3, #132	@ 0x84
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dca:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	691b      	ldr	r3, [r3, #16]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d102      	bne.n	8006dda <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006dd4:	2304      	movs	r3, #4
 8006dd6:	61fb      	str	r3, [r7, #28]
 8006dd8:	e01b      	b.n	8006e12 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d102      	bne.n	8006de8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006de2:	2303      	movs	r3, #3
 8006de4:	61fb      	str	r3, [r7, #28]
 8006de6:	e014      	b.n	8006e12 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	2b04      	cmp	r3, #4
 8006dee:	d00b      	beq.n	8006e08 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006df4:	2b02      	cmp	r3, #2
 8006df6:	d007      	beq.n	8006e08 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006dfc:	2b03      	cmp	r3, #3
 8006dfe:	d003      	beq.n	8006e08 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006e04:	2b07      	cmp	r3, #7
 8006e06:	d102      	bne.n	8006e0e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006e08:	2302      	movs	r3, #2
 8006e0a:	61fb      	str	r3, [r7, #28]
 8006e0c:	e001      	b.n	8006e12 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	461a      	mov	r2, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	01db      	lsls	r3, r3, #7
 8006e1c:	4413      	add	r3, r2
 8006e1e:	3384      	adds	r3, #132	@ 0x84
 8006e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	6812      	ldr	r2, [r2, #0]
 8006e26:	4611      	mov	r1, r2
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	01d2      	lsls	r2, r2, #7
 8006e2c:	440a      	add	r2, r1
 8006e2e:	3284      	adds	r2, #132	@ 0x84
 8006e30:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8006e34:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e3a:	69fa      	ldr	r2, [r7, #28]
 8006e3c:	fb02 f303 	mul.w	r3, r2, r3
 8006e40:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	6859      	ldr	r1, [r3, #4]
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	1acb      	subs	r3, r1, r3
 8006e4c:	69f9      	ldr	r1, [r7, #28]
 8006e4e:	fb01 f303 	mul.w	r3, r1, r3
 8006e52:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8006e54:	68f9      	ldr	r1, [r7, #12]
 8006e56:	6809      	ldr	r1, [r1, #0]
 8006e58:	4608      	mov	r0, r1
 8006e5a:	6879      	ldr	r1, [r7, #4]
 8006e5c:	01c9      	lsls	r1, r1, #7
 8006e5e:	4401      	add	r1, r0
 8006e60:	3184      	adds	r1, #132	@ 0x84
 8006e62:	4313      	orrs	r3, r2
 8006e64:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	01db      	lsls	r3, r3, #7
 8006e70:	4413      	add	r3, r2
 8006e72:	3384      	adds	r3, #132	@ 0x84
 8006e74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	01db      	lsls	r3, r3, #7
 8006e80:	440b      	add	r3, r1
 8006e82:	3384      	adds	r3, #132	@ 0x84
 8006e84:	4619      	mov	r1, r3
 8006e86:	4b14      	ldr	r3, [pc, #80]	@ (8006ed8 <LTDC_SetConfig+0x330>)
 8006e88:	4013      	ands	r3, r2
 8006e8a:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	461a      	mov	r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	01db      	lsls	r3, r3, #7
 8006e96:	4413      	add	r3, r2
 8006e98:	3384      	adds	r3, #132	@ 0x84
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	01db      	lsls	r3, r3, #7
 8006eac:	4413      	add	r3, r2
 8006eae:	3384      	adds	r3, #132	@ 0x84
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	6812      	ldr	r2, [r2, #0]
 8006eb6:	4611      	mov	r1, r2
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	01d2      	lsls	r2, r2, #7
 8006ebc:	440a      	add	r2, r1
 8006ebe:	3284      	adds	r2, #132	@ 0x84
 8006ec0:	f043 0301 	orr.w	r3, r3, #1
 8006ec4:	6013      	str	r3, [r2, #0]
}
 8006ec6:	bf00      	nop
 8006ec8:	3724      	adds	r7, #36	@ 0x24
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	fffff8f8 	.word	0xfffff8f8
 8006ed8:	fffff800 	.word	0xfffff800

08006edc <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b086      	sub	sp, #24
 8006ee0:	af02      	add	r7, sp, #8
 8006ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8006ee8:	f7fb fbfe 	bl	80026e8 <HAL_GetTick>
 8006eec:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d102      	bne.n	8006efa <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	73fb      	strb	r3, [r7, #15]
 8006ef8:	e0a5      	b.n	8007046 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f040 809e 	bne.w	8007046 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f7fa ff7c 	bl	8001e08 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8006f10:	f241 3188 	movw	r1, #5000	@ 0x1388
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 f8dc 	bl	80070d2 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	689a      	ldr	r2, [r3, #8]
 8006f20:	4b4b      	ldr	r3, [pc, #300]	@ (8007050 <HAL_OSPI_Init+0x174>)
 8006f22:	4013      	ands	r3, r2
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	68d1      	ldr	r1, [r2, #12]
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	6912      	ldr	r2, [r2, #16]
 8006f2c:	3a01      	subs	r2, #1
 8006f2e:	0412      	lsls	r2, r2, #16
 8006f30:	4311      	orrs	r1, r2
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	6952      	ldr	r2, [r2, #20]
 8006f36:	3a01      	subs	r2, #1
 8006f38:	0212      	lsls	r2, r2, #8
 8006f3a:	4311      	orrs	r1, r2
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006f40:	4311      	orrs	r1, r2
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	69d2      	ldr	r2, [r2, #28]
 8006f46:	4311      	orrs	r1, r2
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	6812      	ldr	r2, [r2, #0]
 8006f4c:	430b      	orrs	r3, r1
 8006f4e:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a1a      	ldr	r2, [r3, #32]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	430a      	orrs	r2, r1
 8006f64:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f6a:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	430a      	orrs	r2, r1
 8006f76:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006f80:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	3b01      	subs	r3, #1
 8006f92:	021a      	lsls	r2, r3, #8
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	430a      	orrs	r2, r1
 8006f9a:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	2120      	movs	r1, #32
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 fd89 	bl	8007ac0 <OSPI_WaitFlagStateUntilTimeout>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006fb2:	7bfb      	ldrb	r3, [r7, #15]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d146      	bne.n	8007046 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fc6:	1e5a      	subs	r2, r3, #1
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	430a      	orrs	r2, r1
 8006fce:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	689a      	ldr	r2, [r3, #8]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	430a      	orrs	r2, r1
 8006fe4:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006fee:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ffa:	431a      	orrs	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	430a      	orrs	r2, r1
 8007002:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f042 0201 	orr.w	r2, r2, #1
 8007014:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	2b02      	cmp	r3, #2
 800701c:	d107      	bne.n	800702e <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	689a      	ldr	r2, [r3, #8]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f042 0202 	orr.w	r2, r2, #2
 800702c:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007036:	d103      	bne.n	8007040 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	651a      	str	r2, [r3, #80]	@ 0x50
 800703e:	e002      	b.n	8007046 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2202      	movs	r2, #2
 8007044:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8007046:	7bfb      	ldrb	r3, [r7, #15]
}
 8007048:	4618      	mov	r0, r3
 800704a:	3710      	adds	r7, #16
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}
 8007050:	f8e0f8f4 	.word	0xf8e0f8f4

08007054 <HAL_OSPI_HyperbusCfg>:
  * @param  cfg     : Structure containing the Hyperbus configuration
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_HyperbusCfg(OSPI_HandleTypeDef *hospi, OSPI_HyperbusCfgTypeDef *cfg, uint32_t Timeout)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b08a      	sub	sp, #40	@ 0x28
 8007058:	af02      	add	r7, sp, #8
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8007060:	f7fb fb42 	bl	80026e8 <HAL_GetTick>
 8007064:	61b8      	str	r0, [r7, #24]
  assert_param(IS_OSPI_ACCESS_TIME(cfg->AccessTime));
  assert_param(IS_OSPI_WRITE_ZERO_LATENCY(cfg->WriteZeroLatency));
  assert_param(IS_OSPI_LATENCY_MODE(cfg->LatencyMode));

  /* Check the state of the driver */
  state = hospi->State;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800706a:	617b      	str	r3, [r7, #20]
  if ((state == HAL_OSPI_STATE_HYPERBUS_INIT) || (state == HAL_OSPI_STATE_READY))
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	2b01      	cmp	r3, #1
 8007070:	d002      	beq.n	8007078 <HAL_OSPI_HyperbusCfg+0x24>
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	2b02      	cmp	r3, #2
 8007076:	d122      	bne.n	80070be <HAL_OSPI_HyperbusCfg+0x6a>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	9300      	str	r3, [sp, #0]
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	2200      	movs	r2, #0
 8007080:	2120      	movs	r1, #32
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	f000 fd1c 	bl	8007ac0 <OSPI_WaitFlagStateUntilTimeout>
 8007088:	4603      	mov	r3, r0
 800708a:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800708c:	7ffb      	ldrb	r3, [r7, #31]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d11a      	bne.n	80070c8 <HAL_OSPI_HyperbusCfg+0x74>
    {
      /* Configure Hyperbus configuration Latency register */
      WRITE_REG(hospi->Instance->HLCR, ((cfg->RWRecoveryTime << OCTOSPI_HLCR_TRWR_Pos) |
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	041a      	lsls	r2, r3, #16
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	021b      	lsls	r3, r3, #8
 800709e:	431a      	orrs	r2, r3
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	ea42 0103 	orr.w	r1, r2, r3
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	68da      	ldr	r2, [r3, #12]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	430a      	orrs	r2, r1
 80070b2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
                                        (cfg->AccessTime << OCTOSPI_HLCR_TACC_Pos)     |
                                        cfg->WriteZeroLatency | cfg->LatencyMode));

      /* Update the state */
      hospi->State = HAL_OSPI_STATE_READY;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2202      	movs	r2, #2
 80070ba:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80070bc:	e004      	b.n	80070c8 <HAL_OSPI_HyperbusCfg+0x74>
    }
  }
  else
  {
    status = HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2210      	movs	r2, #16
 80070c6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Return function status */
  return status;
 80070c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3720      	adds	r7, #32
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80070d2:	b480      	push	{r7}
 80070d4:	b083      	sub	sp, #12
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
 80070da:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	683a      	ldr	r2, [r7, #0]
 80070e0:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b094      	sub	sp, #80	@ 0x50
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070fc:	2300      	movs	r3, #0
 80070fe:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8007102:	2300      	movs	r3, #0
 8007104:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a9d      	ldr	r2, [pc, #628]	@ (8007384 <HAL_OSPIM_Config+0x294>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d105      	bne.n	800711e <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8007112:	2300      	movs	r3, #0
 8007114:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 8007116:	2301      	movs	r3, #1
 8007118:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 800711c:	e004      	b.n	8007128 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 800711e:	2301      	movs	r3, #1
 8007120:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 8007122:	2300      	movs	r3, #0
 8007124:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8007128:	2300      	movs	r3, #0
 800712a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800712e:	e01d      	b.n	800716c <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8007130:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007134:	3301      	adds	r3, #1
 8007136:	b2d8      	uxtb	r0, r3
 8007138:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800713c:	f107 0114 	add.w	r1, r7, #20
 8007140:	4613      	mov	r3, r2
 8007142:	005b      	lsls	r3, r3, #1
 8007144:	4413      	add	r3, r2
 8007146:	00db      	lsls	r3, r3, #3
 8007148:	440b      	add	r3, r1
 800714a:	4619      	mov	r1, r3
 800714c:	f000 fcf0 	bl	8007b30 <OSPIM_GetConfig>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d005      	beq.n	8007162 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2208      	movs	r2, #8
 8007160:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8007162:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007166:	3301      	adds	r3, #1
 8007168:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800716c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007170:	2b01      	cmp	r3, #1
 8007172:	d9dd      	bls.n	8007130 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8007174:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007178:	2b00      	cmp	r3, #0
 800717a:	f040 8495 	bne.w	8007aa8 <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800717e:	4b81      	ldr	r3, [pc, #516]	@ (8007384 <HAL_OSPIM_Config+0x294>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 0301 	and.w	r3, r3, #1
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00b      	beq.n	80071a2 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800718a:	4b7e      	ldr	r3, [pc, #504]	@ (8007384 <HAL_OSPIM_Config+0x294>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a7d      	ldr	r2, [pc, #500]	@ (8007384 <HAL_OSPIM_Config+0x294>)
 8007190:	f023 0301 	bic.w	r3, r3, #1
 8007194:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8007196:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800719a:	f043 0301 	orr.w	r3, r3, #1
 800719e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80071a2:	4b79      	ldr	r3, [pc, #484]	@ (8007388 <HAL_OSPIM_Config+0x298>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 0301 	and.w	r3, r3, #1
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00b      	beq.n	80071c6 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80071ae:	4b76      	ldr	r3, [pc, #472]	@ (8007388 <HAL_OSPIM_Config+0x298>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a75      	ldr	r2, [pc, #468]	@ (8007388 <HAL_OSPIM_Config+0x298>)
 80071b4:	f023 0301 	bic.w	r3, r3, #1
 80071b8:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80071ba:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80071be:	f043 0302 	orr.w	r3, r3, #2
 80071c2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80071c6:	4971      	ldr	r1, [pc, #452]	@ (800738c <HAL_OSPIM_Config+0x29c>)
 80071c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071ca:	4613      	mov	r3, r2
 80071cc:	005b      	lsls	r3, r3, #1
 80071ce:	4413      	add	r3, r2
 80071d0:	00db      	lsls	r3, r3, #3
 80071d2:	3350      	adds	r3, #80	@ 0x50
 80071d4:	443b      	add	r3, r7
 80071d6:	3b34      	subs	r3, #52	@ 0x34
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	3b01      	subs	r3, #1
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	440b      	add	r3, r1
 80071e0:	6859      	ldr	r1, [r3, #4]
 80071e2:	486a      	ldr	r0, [pc, #424]	@ (800738c <HAL_OSPIM_Config+0x29c>)
 80071e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071e6:	4613      	mov	r3, r2
 80071e8:	005b      	lsls	r3, r3, #1
 80071ea:	4413      	add	r3, r2
 80071ec:	00db      	lsls	r3, r3, #3
 80071ee:	3350      	adds	r3, #80	@ 0x50
 80071f0:	443b      	add	r3, r7
 80071f2:	3b34      	subs	r3, #52	@ 0x34
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	3b01      	subs	r3, #1
 80071f8:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	4403      	add	r3, r0
 8007200:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8007202:	4b62      	ldr	r3, [pc, #392]	@ (800738c <HAL_OSPIM_Config+0x29c>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f003 0301 	and.w	r3, r3, #1
 800720a:	2b00      	cmp	r3, #0
 800720c:	f000 80c0 	beq.w	8007390 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8007210:	4b5e      	ldr	r3, [pc, #376]	@ (800738c <HAL_OSPIM_Config+0x29c>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a5d      	ldr	r2, [pc, #372]	@ (800738c <HAL_OSPIM_Config+0x29c>)
 8007216:	f023 0301 	bic.w	r3, r3, #1
 800721a:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 800721c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8007220:	2b01      	cmp	r3, #1
 8007222:	f040 8162 	bne.w	80074ea <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8007226:	4959      	ldr	r1, [pc, #356]	@ (800738c <HAL_OSPIM_Config+0x29c>)
 8007228:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800722c:	4613      	mov	r3, r2
 800722e:	005b      	lsls	r3, r3, #1
 8007230:	4413      	add	r3, r2
 8007232:	00db      	lsls	r3, r3, #3
 8007234:	3350      	adds	r3, #80	@ 0x50
 8007236:	443b      	add	r3, r7
 8007238:	3b3c      	subs	r3, #60	@ 0x3c
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	3b01      	subs	r3, #1
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	440b      	add	r3, r1
 8007242:	6859      	ldr	r1, [r3, #4]
 8007244:	4851      	ldr	r0, [pc, #324]	@ (800738c <HAL_OSPIM_Config+0x29c>)
 8007246:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800724a:	4613      	mov	r3, r2
 800724c:	005b      	lsls	r3, r3, #1
 800724e:	4413      	add	r3, r2
 8007250:	00db      	lsls	r3, r3, #3
 8007252:	3350      	adds	r3, #80	@ 0x50
 8007254:	443b      	add	r3, r7
 8007256:	3b3c      	subs	r3, #60	@ 0x3c
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	3b01      	subs	r3, #1
 800725c:	f041 0202 	orr.w	r2, r1, #2
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	4403      	add	r3, r0
 8007264:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8007266:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800726a:	4613      	mov	r3, r2
 800726c:	005b      	lsls	r3, r3, #1
 800726e:	4413      	add	r3, r2
 8007270:	00db      	lsls	r3, r3, #3
 8007272:	3350      	adds	r3, #80	@ 0x50
 8007274:	443b      	add	r3, r7
 8007276:	3b38      	subs	r3, #56	@ 0x38
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d01f      	beq.n	80072be <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 800727e:	4943      	ldr	r1, [pc, #268]	@ (800738c <HAL_OSPIM_Config+0x29c>)
 8007280:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007284:	4613      	mov	r3, r2
 8007286:	005b      	lsls	r3, r3, #1
 8007288:	4413      	add	r3, r2
 800728a:	00db      	lsls	r3, r3, #3
 800728c:	3350      	adds	r3, #80	@ 0x50
 800728e:	443b      	add	r3, r7
 8007290:	3b38      	subs	r3, #56	@ 0x38
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	3b01      	subs	r3, #1
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	440b      	add	r3, r1
 800729a:	6859      	ldr	r1, [r3, #4]
 800729c:	483b      	ldr	r0, [pc, #236]	@ (800738c <HAL_OSPIM_Config+0x29c>)
 800729e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80072a2:	4613      	mov	r3, r2
 80072a4:	005b      	lsls	r3, r3, #1
 80072a6:	4413      	add	r3, r2
 80072a8:	00db      	lsls	r3, r3, #3
 80072aa:	3350      	adds	r3, #80	@ 0x50
 80072ac:	443b      	add	r3, r7
 80072ae:	3b38      	subs	r3, #56	@ 0x38
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	3b01      	subs	r3, #1
 80072b4:	f041 0220 	orr.w	r2, r1, #32
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	4403      	add	r3, r0
 80072bc:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80072be:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80072c2:	4613      	mov	r3, r2
 80072c4:	005b      	lsls	r3, r3, #1
 80072c6:	4413      	add	r3, r2
 80072c8:	00db      	lsls	r3, r3, #3
 80072ca:	3350      	adds	r3, #80	@ 0x50
 80072cc:	443b      	add	r3, r7
 80072ce:	3b30      	subs	r3, #48	@ 0x30
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d023      	beq.n	800731e <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 80072d6:	492d      	ldr	r1, [pc, #180]	@ (800738c <HAL_OSPIM_Config+0x29c>)
 80072d8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80072dc:	4613      	mov	r3, r2
 80072de:	005b      	lsls	r3, r3, #1
 80072e0:	4413      	add	r3, r2
 80072e2:	00db      	lsls	r3, r3, #3
 80072e4:	3350      	adds	r3, #80	@ 0x50
 80072e6:	443b      	add	r3, r7
 80072e8:	3b30      	subs	r3, #48	@ 0x30
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	3b01      	subs	r3, #1
 80072ee:	f003 0301 	and.w	r3, r3, #1
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	440b      	add	r3, r1
 80072f6:	6859      	ldr	r1, [r3, #4]
 80072f8:	4824      	ldr	r0, [pc, #144]	@ (800738c <HAL_OSPIM_Config+0x29c>)
 80072fa:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80072fe:	4613      	mov	r3, r2
 8007300:	005b      	lsls	r3, r3, #1
 8007302:	4413      	add	r3, r2
 8007304:	00db      	lsls	r3, r3, #3
 8007306:	3350      	adds	r3, #80	@ 0x50
 8007308:	443b      	add	r3, r7
 800730a:	3b30      	subs	r3, #48	@ 0x30
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	3b01      	subs	r3, #1
 8007310:	f003 0301 	and.w	r3, r3, #1
 8007314:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	4403      	add	r3, r0
 800731c:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800731e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007322:	4613      	mov	r3, r2
 8007324:	005b      	lsls	r3, r3, #1
 8007326:	4413      	add	r3, r2
 8007328:	00db      	lsls	r3, r3, #3
 800732a:	3350      	adds	r3, #80	@ 0x50
 800732c:	443b      	add	r3, r7
 800732e:	3b2c      	subs	r3, #44	@ 0x2c
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2b00      	cmp	r3, #0
 8007334:	f000 80d9 	beq.w	80074ea <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8007338:	4914      	ldr	r1, [pc, #80]	@ (800738c <HAL_OSPIM_Config+0x29c>)
 800733a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800733e:	4613      	mov	r3, r2
 8007340:	005b      	lsls	r3, r3, #1
 8007342:	4413      	add	r3, r2
 8007344:	00db      	lsls	r3, r3, #3
 8007346:	3350      	adds	r3, #80	@ 0x50
 8007348:	443b      	add	r3, r7
 800734a:	3b2c      	subs	r3, #44	@ 0x2c
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	3b01      	subs	r3, #1
 8007350:	f003 0301 	and.w	r3, r3, #1
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	440b      	add	r3, r1
 8007358:	6859      	ldr	r1, [r3, #4]
 800735a:	480c      	ldr	r0, [pc, #48]	@ (800738c <HAL_OSPIM_Config+0x29c>)
 800735c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007360:	4613      	mov	r3, r2
 8007362:	005b      	lsls	r3, r3, #1
 8007364:	4413      	add	r3, r2
 8007366:	00db      	lsls	r3, r3, #3
 8007368:	3350      	adds	r3, #80	@ 0x50
 800736a:	443b      	add	r3, r7
 800736c:	3b2c      	subs	r3, #44	@ 0x2c
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	3b01      	subs	r3, #1
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	4403      	add	r3, r0
 800737e:	605a      	str	r2, [r3, #4]
 8007380:	e0b3      	b.n	80074ea <HAL_OSPIM_Config+0x3fa>
 8007382:	bf00      	nop
 8007384:	52005000 	.word	0x52005000
 8007388:	5200a000 	.word	0x5200a000
 800738c:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8007390:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007392:	4613      	mov	r3, r2
 8007394:	005b      	lsls	r3, r3, #1
 8007396:	4413      	add	r3, r2
 8007398:	00db      	lsls	r3, r3, #3
 800739a:	3350      	adds	r3, #80	@ 0x50
 800739c:	443b      	add	r3, r7
 800739e:	3b3c      	subs	r3, #60	@ 0x3c
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	f000 80a1 	beq.w	80074ea <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80073a8:	4993      	ldr	r1, [pc, #588]	@ (80075f8 <HAL_OSPIM_Config+0x508>)
 80073aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073ac:	4613      	mov	r3, r2
 80073ae:	005b      	lsls	r3, r3, #1
 80073b0:	4413      	add	r3, r2
 80073b2:	00db      	lsls	r3, r3, #3
 80073b4:	3350      	adds	r3, #80	@ 0x50
 80073b6:	443b      	add	r3, r7
 80073b8:	3b3c      	subs	r3, #60	@ 0x3c
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	3b01      	subs	r3, #1
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	440b      	add	r3, r1
 80073c2:	6859      	ldr	r1, [r3, #4]
 80073c4:	488c      	ldr	r0, [pc, #560]	@ (80075f8 <HAL_OSPIM_Config+0x508>)
 80073c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073c8:	4613      	mov	r3, r2
 80073ca:	005b      	lsls	r3, r3, #1
 80073cc:	4413      	add	r3, r2
 80073ce:	00db      	lsls	r3, r3, #3
 80073d0:	3350      	adds	r3, #80	@ 0x50
 80073d2:	443b      	add	r3, r7
 80073d4:	3b3c      	subs	r3, #60	@ 0x3c
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	3b01      	subs	r3, #1
 80073da:	f021 0201 	bic.w	r2, r1, #1
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	4403      	add	r3, r0
 80073e2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80073e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073e6:	4613      	mov	r3, r2
 80073e8:	005b      	lsls	r3, r3, #1
 80073ea:	4413      	add	r3, r2
 80073ec:	00db      	lsls	r3, r3, #3
 80073ee:	3350      	adds	r3, #80	@ 0x50
 80073f0:	443b      	add	r3, r7
 80073f2:	3b38      	subs	r3, #56	@ 0x38
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d01d      	beq.n	8007436 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80073fa:	497f      	ldr	r1, [pc, #508]	@ (80075f8 <HAL_OSPIM_Config+0x508>)
 80073fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073fe:	4613      	mov	r3, r2
 8007400:	005b      	lsls	r3, r3, #1
 8007402:	4413      	add	r3, r2
 8007404:	00db      	lsls	r3, r3, #3
 8007406:	3350      	adds	r3, #80	@ 0x50
 8007408:	443b      	add	r3, r7
 800740a:	3b38      	subs	r3, #56	@ 0x38
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	3b01      	subs	r3, #1
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	440b      	add	r3, r1
 8007414:	6859      	ldr	r1, [r3, #4]
 8007416:	4878      	ldr	r0, [pc, #480]	@ (80075f8 <HAL_OSPIM_Config+0x508>)
 8007418:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800741a:	4613      	mov	r3, r2
 800741c:	005b      	lsls	r3, r3, #1
 800741e:	4413      	add	r3, r2
 8007420:	00db      	lsls	r3, r3, #3
 8007422:	3350      	adds	r3, #80	@ 0x50
 8007424:	443b      	add	r3, r7
 8007426:	3b38      	subs	r3, #56	@ 0x38
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	3b01      	subs	r3, #1
 800742c:	f021 0210 	bic.w	r2, r1, #16
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	4403      	add	r3, r0
 8007434:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007436:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007438:	4613      	mov	r3, r2
 800743a:	005b      	lsls	r3, r3, #1
 800743c:	4413      	add	r3, r2
 800743e:	00db      	lsls	r3, r3, #3
 8007440:	3350      	adds	r3, #80	@ 0x50
 8007442:	443b      	add	r3, r7
 8007444:	3b30      	subs	r3, #48	@ 0x30
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d021      	beq.n	8007490 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800744c:	496a      	ldr	r1, [pc, #424]	@ (80075f8 <HAL_OSPIM_Config+0x508>)
 800744e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007450:	4613      	mov	r3, r2
 8007452:	005b      	lsls	r3, r3, #1
 8007454:	4413      	add	r3, r2
 8007456:	00db      	lsls	r3, r3, #3
 8007458:	3350      	adds	r3, #80	@ 0x50
 800745a:	443b      	add	r3, r7
 800745c:	3b30      	subs	r3, #48	@ 0x30
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	3b01      	subs	r3, #1
 8007462:	f003 0301 	and.w	r3, r3, #1
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	440b      	add	r3, r1
 800746a:	6859      	ldr	r1, [r3, #4]
 800746c:	4862      	ldr	r0, [pc, #392]	@ (80075f8 <HAL_OSPIM_Config+0x508>)
 800746e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007470:	4613      	mov	r3, r2
 8007472:	005b      	lsls	r3, r3, #1
 8007474:	4413      	add	r3, r2
 8007476:	00db      	lsls	r3, r3, #3
 8007478:	3350      	adds	r3, #80	@ 0x50
 800747a:	443b      	add	r3, r7
 800747c:	3b30      	subs	r3, #48	@ 0x30
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	3b01      	subs	r3, #1
 8007482:	f003 0301 	and.w	r3, r3, #1
 8007486:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4403      	add	r3, r0
 800748e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007490:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007492:	4613      	mov	r3, r2
 8007494:	005b      	lsls	r3, r3, #1
 8007496:	4413      	add	r3, r2
 8007498:	00db      	lsls	r3, r3, #3
 800749a:	3350      	adds	r3, #80	@ 0x50
 800749c:	443b      	add	r3, r7
 800749e:	3b2c      	subs	r3, #44	@ 0x2c
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d021      	beq.n	80074ea <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80074a6:	4954      	ldr	r1, [pc, #336]	@ (80075f8 <HAL_OSPIM_Config+0x508>)
 80074a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80074aa:	4613      	mov	r3, r2
 80074ac:	005b      	lsls	r3, r3, #1
 80074ae:	4413      	add	r3, r2
 80074b0:	00db      	lsls	r3, r3, #3
 80074b2:	3350      	adds	r3, #80	@ 0x50
 80074b4:	443b      	add	r3, r7
 80074b6:	3b2c      	subs	r3, #44	@ 0x2c
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	3b01      	subs	r3, #1
 80074bc:	f003 0301 	and.w	r3, r3, #1
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	440b      	add	r3, r1
 80074c4:	6859      	ldr	r1, [r3, #4]
 80074c6:	484c      	ldr	r0, [pc, #304]	@ (80075f8 <HAL_OSPIM_Config+0x508>)
 80074c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80074ca:	4613      	mov	r3, r2
 80074cc:	005b      	lsls	r3, r3, #1
 80074ce:	4413      	add	r3, r2
 80074d0:	00db      	lsls	r3, r3, #3
 80074d2:	3350      	adds	r3, #80	@ 0x50
 80074d4:	443b      	add	r3, r7
 80074d6:	3b2c      	subs	r3, #44	@ 0x2c
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	3b01      	subs	r3, #1
 80074dc:	f003 0301 	and.w	r3, r3, #1
 80074e0:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	4403      	add	r3, r0
 80074e8:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	6819      	ldr	r1, [r3, #0]
 80074ee:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80074f2:	4613      	mov	r3, r2
 80074f4:	005b      	lsls	r3, r3, #1
 80074f6:	4413      	add	r3, r2
 80074f8:	00db      	lsls	r3, r3, #3
 80074fa:	3350      	adds	r3, #80	@ 0x50
 80074fc:	443b      	add	r3, r7
 80074fe:	3b3c      	subs	r3, #60	@ 0x3c
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4299      	cmp	r1, r3
 8007504:	d038      	beq.n	8007578 <HAL_OSPIM_Config+0x488>
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	6859      	ldr	r1, [r3, #4]
 800750a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800750e:	4613      	mov	r3, r2
 8007510:	005b      	lsls	r3, r3, #1
 8007512:	4413      	add	r3, r2
 8007514:	00db      	lsls	r3, r3, #3
 8007516:	3350      	adds	r3, #80	@ 0x50
 8007518:	443b      	add	r3, r7
 800751a:	3b38      	subs	r3, #56	@ 0x38
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4299      	cmp	r1, r3
 8007520:	d02a      	beq.n	8007578 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	6899      	ldr	r1, [r3, #8]
 8007526:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800752a:	4613      	mov	r3, r2
 800752c:	005b      	lsls	r3, r3, #1
 800752e:	4413      	add	r3, r2
 8007530:	00db      	lsls	r3, r3, #3
 8007532:	3350      	adds	r3, #80	@ 0x50
 8007534:	443b      	add	r3, r7
 8007536:	3b34      	subs	r3, #52	@ 0x34
 8007538:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800753a:	4299      	cmp	r1, r3
 800753c:	d01c      	beq.n	8007578 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	68d9      	ldr	r1, [r3, #12]
 8007542:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007546:	4613      	mov	r3, r2
 8007548:	005b      	lsls	r3, r3, #1
 800754a:	4413      	add	r3, r2
 800754c:	00db      	lsls	r3, r3, #3
 800754e:	3350      	adds	r3, #80	@ 0x50
 8007550:	443b      	add	r3, r7
 8007552:	3b30      	subs	r3, #48	@ 0x30
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4299      	cmp	r1, r3
 8007558:	d00e      	beq.n	8007578 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	6919      	ldr	r1, [r3, #16]
 800755e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007562:	4613      	mov	r3, r2
 8007564:	005b      	lsls	r3, r3, #1
 8007566:	4413      	add	r3, r2
 8007568:	00db      	lsls	r3, r3, #3
 800756a:	3350      	adds	r3, #80	@ 0x50
 800756c:	443b      	add	r3, r7
 800756e:	3b2c      	subs	r3, #44	@ 0x2c
 8007570:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8007572:	4299      	cmp	r1, r3
 8007574:	f040 810e 	bne.w	8007794 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	6819      	ldr	r1, [r3, #0]
 800757c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007580:	4613      	mov	r3, r2
 8007582:	005b      	lsls	r3, r3, #1
 8007584:	4413      	add	r3, r2
 8007586:	00db      	lsls	r3, r3, #3
 8007588:	3350      	adds	r3, #80	@ 0x50
 800758a:	443b      	add	r3, r7
 800758c:	3b3c      	subs	r3, #60	@ 0x3c
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4299      	cmp	r1, r3
 8007592:	d133      	bne.n	80075fc <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	6859      	ldr	r1, [r3, #4]
 8007598:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800759c:	4613      	mov	r3, r2
 800759e:	005b      	lsls	r3, r3, #1
 80075a0:	4413      	add	r3, r2
 80075a2:	00db      	lsls	r3, r3, #3
 80075a4:	3350      	adds	r3, #80	@ 0x50
 80075a6:	443b      	add	r3, r7
 80075a8:	3b38      	subs	r3, #56	@ 0x38
 80075aa:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 80075ac:	4299      	cmp	r1, r3
 80075ae:	d125      	bne.n	80075fc <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	68d9      	ldr	r1, [r3, #12]
 80075b4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80075b8:	4613      	mov	r3, r2
 80075ba:	005b      	lsls	r3, r3, #1
 80075bc:	4413      	add	r3, r2
 80075be:	00db      	lsls	r3, r3, #3
 80075c0:	3350      	adds	r3, #80	@ 0x50
 80075c2:	443b      	add	r3, r7
 80075c4:	3b30      	subs	r3, #48	@ 0x30
 80075c6:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 80075c8:	4299      	cmp	r1, r3
 80075ca:	d117      	bne.n	80075fc <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	6919      	ldr	r1, [r3, #16]
 80075d0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80075d4:	4613      	mov	r3, r2
 80075d6:	005b      	lsls	r3, r3, #1
 80075d8:	4413      	add	r3, r2
 80075da:	00db      	lsls	r3, r3, #3
 80075dc:	3350      	adds	r3, #80	@ 0x50
 80075de:	443b      	add	r3, r7
 80075e0:	3b2c      	subs	r3, #44	@ 0x2c
 80075e2:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 80075e4:	4299      	cmp	r1, r3
 80075e6:	d109      	bne.n	80075fc <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80075e8:	4b03      	ldr	r3, [pc, #12]	@ (80075f8 <HAL_OSPIM_Config+0x508>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a02      	ldr	r2, [pc, #8]	@ (80075f8 <HAL_OSPIM_Config+0x508>)
 80075ee:	f043 0301 	orr.w	r3, r3, #1
 80075f2:	6013      	str	r3, [r2, #0]
 80075f4:	e0ce      	b.n	8007794 <HAL_OSPIM_Config+0x6a4>
 80075f6:	bf00      	nop
 80075f8:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80075fc:	49bb      	ldr	r1, [pc, #748]	@ (80078ec <HAL_OSPIM_Config+0x7fc>)
 80075fe:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007602:	4613      	mov	r3, r2
 8007604:	005b      	lsls	r3, r3, #1
 8007606:	4413      	add	r3, r2
 8007608:	00db      	lsls	r3, r3, #3
 800760a:	3350      	adds	r3, #80	@ 0x50
 800760c:	443b      	add	r3, r7
 800760e:	3b3c      	subs	r3, #60	@ 0x3c
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	3b01      	subs	r3, #1
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	440b      	add	r3, r1
 8007618:	6859      	ldr	r1, [r3, #4]
 800761a:	48b4      	ldr	r0, [pc, #720]	@ (80078ec <HAL_OSPIM_Config+0x7fc>)
 800761c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007620:	4613      	mov	r3, r2
 8007622:	005b      	lsls	r3, r3, #1
 8007624:	4413      	add	r3, r2
 8007626:	00db      	lsls	r3, r3, #3
 8007628:	3350      	adds	r3, #80	@ 0x50
 800762a:	443b      	add	r3, r7
 800762c:	3b3c      	subs	r3, #60	@ 0x3c
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	3b01      	subs	r3, #1
 8007632:	f021 0201 	bic.w	r2, r1, #1
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	4403      	add	r3, r0
 800763a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800763c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007640:	4613      	mov	r3, r2
 8007642:	005b      	lsls	r3, r3, #1
 8007644:	4413      	add	r3, r2
 8007646:	00db      	lsls	r3, r3, #3
 8007648:	3350      	adds	r3, #80	@ 0x50
 800764a:	443b      	add	r3, r7
 800764c:	3b38      	subs	r3, #56	@ 0x38
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d01f      	beq.n	8007694 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8007654:	49a5      	ldr	r1, [pc, #660]	@ (80078ec <HAL_OSPIM_Config+0x7fc>)
 8007656:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800765a:	4613      	mov	r3, r2
 800765c:	005b      	lsls	r3, r3, #1
 800765e:	4413      	add	r3, r2
 8007660:	00db      	lsls	r3, r3, #3
 8007662:	3350      	adds	r3, #80	@ 0x50
 8007664:	443b      	add	r3, r7
 8007666:	3b38      	subs	r3, #56	@ 0x38
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	3b01      	subs	r3, #1
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	440b      	add	r3, r1
 8007670:	6859      	ldr	r1, [r3, #4]
 8007672:	489e      	ldr	r0, [pc, #632]	@ (80078ec <HAL_OSPIM_Config+0x7fc>)
 8007674:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007678:	4613      	mov	r3, r2
 800767a:	005b      	lsls	r3, r3, #1
 800767c:	4413      	add	r3, r2
 800767e:	00db      	lsls	r3, r3, #3
 8007680:	3350      	adds	r3, #80	@ 0x50
 8007682:	443b      	add	r3, r7
 8007684:	3b38      	subs	r3, #56	@ 0x38
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	3b01      	subs	r3, #1
 800768a:	f021 0210 	bic.w	r2, r1, #16
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	4403      	add	r3, r0
 8007692:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8007694:	4995      	ldr	r1, [pc, #596]	@ (80078ec <HAL_OSPIM_Config+0x7fc>)
 8007696:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800769a:	4613      	mov	r3, r2
 800769c:	005b      	lsls	r3, r3, #1
 800769e:	4413      	add	r3, r2
 80076a0:	00db      	lsls	r3, r3, #3
 80076a2:	3350      	adds	r3, #80	@ 0x50
 80076a4:	443b      	add	r3, r7
 80076a6:	3b34      	subs	r3, #52	@ 0x34
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	3b01      	subs	r3, #1
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	440b      	add	r3, r1
 80076b0:	6859      	ldr	r1, [r3, #4]
 80076b2:	488e      	ldr	r0, [pc, #568]	@ (80078ec <HAL_OSPIM_Config+0x7fc>)
 80076b4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80076b8:	4613      	mov	r3, r2
 80076ba:	005b      	lsls	r3, r3, #1
 80076bc:	4413      	add	r3, r2
 80076be:	00db      	lsls	r3, r3, #3
 80076c0:	3350      	adds	r3, #80	@ 0x50
 80076c2:	443b      	add	r3, r7
 80076c4:	3b34      	subs	r3, #52	@ 0x34
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	3b01      	subs	r3, #1
 80076ca:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	4403      	add	r3, r0
 80076d2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80076d4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80076d8:	4613      	mov	r3, r2
 80076da:	005b      	lsls	r3, r3, #1
 80076dc:	4413      	add	r3, r2
 80076de:	00db      	lsls	r3, r3, #3
 80076e0:	3350      	adds	r3, #80	@ 0x50
 80076e2:	443b      	add	r3, r7
 80076e4:	3b30      	subs	r3, #48	@ 0x30
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d023      	beq.n	8007734 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80076ec:	497f      	ldr	r1, [pc, #508]	@ (80078ec <HAL_OSPIM_Config+0x7fc>)
 80076ee:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80076f2:	4613      	mov	r3, r2
 80076f4:	005b      	lsls	r3, r3, #1
 80076f6:	4413      	add	r3, r2
 80076f8:	00db      	lsls	r3, r3, #3
 80076fa:	3350      	adds	r3, #80	@ 0x50
 80076fc:	443b      	add	r3, r7
 80076fe:	3b30      	subs	r3, #48	@ 0x30
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	3b01      	subs	r3, #1
 8007704:	f003 0301 	and.w	r3, r3, #1
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	440b      	add	r3, r1
 800770c:	6859      	ldr	r1, [r3, #4]
 800770e:	4877      	ldr	r0, [pc, #476]	@ (80078ec <HAL_OSPIM_Config+0x7fc>)
 8007710:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007714:	4613      	mov	r3, r2
 8007716:	005b      	lsls	r3, r3, #1
 8007718:	4413      	add	r3, r2
 800771a:	00db      	lsls	r3, r3, #3
 800771c:	3350      	adds	r3, #80	@ 0x50
 800771e:	443b      	add	r3, r7
 8007720:	3b30      	subs	r3, #48	@ 0x30
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	3b01      	subs	r3, #1
 8007726:	f003 0301 	and.w	r3, r3, #1
 800772a:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	4403      	add	r3, r0
 8007732:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007734:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007738:	4613      	mov	r3, r2
 800773a:	005b      	lsls	r3, r3, #1
 800773c:	4413      	add	r3, r2
 800773e:	00db      	lsls	r3, r3, #3
 8007740:	3350      	adds	r3, #80	@ 0x50
 8007742:	443b      	add	r3, r7
 8007744:	3b2c      	subs	r3, #44	@ 0x2c
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d023      	beq.n	8007794 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800774c:	4967      	ldr	r1, [pc, #412]	@ (80078ec <HAL_OSPIM_Config+0x7fc>)
 800774e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007752:	4613      	mov	r3, r2
 8007754:	005b      	lsls	r3, r3, #1
 8007756:	4413      	add	r3, r2
 8007758:	00db      	lsls	r3, r3, #3
 800775a:	3350      	adds	r3, #80	@ 0x50
 800775c:	443b      	add	r3, r7
 800775e:	3b2c      	subs	r3, #44	@ 0x2c
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	3b01      	subs	r3, #1
 8007764:	f003 0301 	and.w	r3, r3, #1
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	440b      	add	r3, r1
 800776c:	6859      	ldr	r1, [r3, #4]
 800776e:	485f      	ldr	r0, [pc, #380]	@ (80078ec <HAL_OSPIM_Config+0x7fc>)
 8007770:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007774:	4613      	mov	r3, r2
 8007776:	005b      	lsls	r3, r3, #1
 8007778:	4413      	add	r3, r2
 800777a:	00db      	lsls	r3, r3, #3
 800777c:	3350      	adds	r3, #80	@ 0x50
 800777e:	443b      	add	r3, r7
 8007780:	3b2c      	subs	r3, #44	@ 0x2c
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	3b01      	subs	r3, #1
 8007786:	f003 0301 	and.w	r3, r3, #1
 800778a:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	4403      	add	r3, r0
 8007792:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8007794:	4a55      	ldr	r2, [pc, #340]	@ (80078ec <HAL_OSPIM_Config+0x7fc>)
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	3b01      	subs	r3, #1
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	4413      	add	r3, r2
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80077a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077a8:	025b      	lsls	r3, r3, #9
 80077aa:	431a      	orrs	r2, r3
 80077ac:	494f      	ldr	r1, [pc, #316]	@ (80078ec <HAL_OSPIM_Config+0x7fc>)
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	3b01      	subs	r3, #1
 80077b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	440b      	add	r3, r1
 80077bc:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	695b      	ldr	r3, [r3, #20]
 80077c2:	1e5a      	subs	r2, r3, #1
 80077c4:	4b49      	ldr	r3, [pc, #292]	@ (80078ec <HAL_OSPIM_Config+0x7fc>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	0c1b      	lsrs	r3, r3, #16
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d90a      	bls.n	80077e6 <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 80077d0:	4b46      	ldr	r3, [pc, #280]	@ (80078ec <HAL_OSPIM_Config+0x7fc>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	695b      	ldr	r3, [r3, #20]
 80077dc:	3b01      	subs	r3, #1
 80077de:	041b      	lsls	r3, r3, #16
 80077e0:	4942      	ldr	r1, [pc, #264]	@ (80078ec <HAL_OSPIM_Config+0x7fc>)
 80077e2:	4313      	orrs	r3, r2
 80077e4:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80077e6:	4b41      	ldr	r3, [pc, #260]	@ (80078ec <HAL_OSPIM_Config+0x7fc>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 0301 	and.w	r3, r3, #1
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	f000 809a 	beq.w	8007928 <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 80077f4:	4a3d      	ldr	r2, [pc, #244]	@ (80078ec <HAL_OSPIM_Config+0x7fc>)
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	3b01      	subs	r3, #1
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	4413      	add	r3, r2
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	f023 0203 	bic.w	r2, r3, #3
 8007806:	4939      	ldr	r1, [pc, #228]	@ (80078ec <HAL_OSPIM_Config+0x7fc>)
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	3b01      	subs	r3, #1
 800780e:	f042 0201 	orr.w	r2, r2, #1
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	440b      	add	r3, r1
 8007816:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d011      	beq.n	8007844 <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8007820:	4a32      	ldr	r2, [pc, #200]	@ (80078ec <HAL_OSPIM_Config+0x7fc>)
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	3b01      	subs	r3, #1
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	4413      	add	r3, r2
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007832:	492e      	ldr	r1, [pc, #184]	@ (80078ec <HAL_OSPIM_Config+0x7fc>)
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	3b01      	subs	r3, #1
 800783a:	f042 0210 	orr.w	r2, r2, #16
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	440b      	add	r3, r1
 8007842:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800784c:	2b00      	cmp	r3, #0
 800784e:	d016      	beq.n	800787e <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007850:	4a26      	ldr	r2, [pc, #152]	@ (80078ec <HAL_OSPIM_Config+0x7fc>)
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	3b01      	subs	r3, #1
 8007858:	f003 0301 	and.w	r3, r3, #1
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	4413      	add	r3, r2
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8007866:	4921      	ldr	r1, [pc, #132]	@ (80078ec <HAL_OSPIM_Config+0x7fc>)
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	3b01      	subs	r3, #1
 800786e:	f003 0301 	and.w	r3, r3, #1
 8007872:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	440b      	add	r3, r1
 800787a:	605a      	str	r2, [r3, #4]
 800787c:	e019      	b.n	80078b2 <HAL_OSPIM_Config+0x7c2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d015      	beq.n	80078b2 <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007886:	4a19      	ldr	r2, [pc, #100]	@ (80078ec <HAL_OSPIM_Config+0x7fc>)
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	3b01      	subs	r3, #1
 800788e:	f003 0301 	and.w	r3, r3, #1
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	4413      	add	r3, r2
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800789c:	4913      	ldr	r1, [pc, #76]	@ (80078ec <HAL_OSPIM_Config+0x7fc>)
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	3b01      	subs	r3, #1
 80078a4:	f003 0301 	and.w	r3, r3, #1
 80078a8:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	440b      	add	r3, r1
 80078b0:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d018      	beq.n	80078f0 <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80078be:	4a0b      	ldr	r2, [pc, #44]	@ (80078ec <HAL_OSPIM_Config+0x7fc>)
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	3b01      	subs	r3, #1
 80078c6:	f003 0301 	and.w	r3, r3, #1
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	4413      	add	r3, r2
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80078d4:	4905      	ldr	r1, [pc, #20]	@ (80078ec <HAL_OSPIM_Config+0x7fc>)
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	691b      	ldr	r3, [r3, #16]
 80078da:	3b01      	subs	r3, #1
 80078dc:	f003 0301 	and.w	r3, r3, #1
 80078e0:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	440b      	add	r3, r1
 80078e8:	605a      	str	r2, [r3, #4]
 80078ea:	e0c5      	b.n	8007a78 <HAL_OSPIM_Config+0x988>
 80078ec:	5200b400 	.word	0x5200b400
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	691b      	ldr	r3, [r3, #16]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	f000 80bf 	beq.w	8007a78 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80078fa:	4a6e      	ldr	r2, [pc, #440]	@ (8007ab4 <HAL_OSPIM_Config+0x9c4>)
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	691b      	ldr	r3, [r3, #16]
 8007900:	3b01      	subs	r3, #1
 8007902:	f003 0301 	and.w	r3, r3, #1
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	4413      	add	r3, r2
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8007910:	4968      	ldr	r1, [pc, #416]	@ (8007ab4 <HAL_OSPIM_Config+0x9c4>)
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	3b01      	subs	r3, #1
 8007918:	f003 0301 	and.w	r3, r3, #1
 800791c:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	440b      	add	r3, r1
 8007924:	605a      	str	r2, [r3, #4]
 8007926:	e0a7      	b.n	8007a78 <HAL_OSPIM_Config+0x988>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8007928:	4a62      	ldr	r2, [pc, #392]	@ (8007ab4 <HAL_OSPIM_Config+0x9c4>)
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	3b01      	subs	r3, #1
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	4413      	add	r3, r2
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	f023 0203 	bic.w	r2, r3, #3
 800793a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800793c:	005b      	lsls	r3, r3, #1
 800793e:	431a      	orrs	r2, r3
 8007940:	495c      	ldr	r1, [pc, #368]	@ (8007ab4 <HAL_OSPIM_Config+0x9c4>)
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	3b01      	subs	r3, #1
 8007948:	f042 0201 	orr.w	r2, r2, #1
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	440b      	add	r3, r1
 8007950:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d014      	beq.n	8007984 <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 800795a:	4a56      	ldr	r2, [pc, #344]	@ (8007ab4 <HAL_OSPIM_Config+0x9c4>)
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	3b01      	subs	r3, #1
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	4413      	add	r3, r2
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800796c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800796e:	015b      	lsls	r3, r3, #5
 8007970:	431a      	orrs	r2, r3
 8007972:	4950      	ldr	r1, [pc, #320]	@ (8007ab4 <HAL_OSPIM_Config+0x9c4>)
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	3b01      	subs	r3, #1
 800797a:	f042 0210 	orr.w	r2, r2, #16
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	440b      	add	r3, r1
 8007982:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800798c:	2b00      	cmp	r3, #0
 800798e:	d019      	beq.n	80079c4 <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007990:	4a48      	ldr	r2, [pc, #288]	@ (8007ab4 <HAL_OSPIM_Config+0x9c4>)
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	3b01      	subs	r3, #1
 8007998:	f003 0301 	and.w	r3, r3, #1
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	4413      	add	r3, r2
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80079a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079a8:	049b      	lsls	r3, r3, #18
 80079aa:	431a      	orrs	r2, r3
 80079ac:	4941      	ldr	r1, [pc, #260]	@ (8007ab4 <HAL_OSPIM_Config+0x9c4>)
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	3b01      	subs	r3, #1
 80079b4:	f003 0301 	and.w	r3, r3, #1
 80079b8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	440b      	add	r3, r1
 80079c0:	605a      	str	r2, [r3, #4]
 80079c2:	e01c      	b.n	80079fe <HAL_OSPIM_Config+0x90e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d018      	beq.n	80079fe <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80079cc:	4a39      	ldr	r2, [pc, #228]	@ (8007ab4 <HAL_OSPIM_Config+0x9c4>)
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	3b01      	subs	r3, #1
 80079d4:	f003 0301 	and.w	r3, r3, #1
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	4413      	add	r3, r2
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80079e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079e4:	069b      	lsls	r3, r3, #26
 80079e6:	431a      	orrs	r2, r3
 80079e8:	4932      	ldr	r1, [pc, #200]	@ (8007ab4 <HAL_OSPIM_Config+0x9c4>)
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	3b01      	subs	r3, #1
 80079f0:	f003 0301 	and.w	r3, r3, #1
 80079f4:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	440b      	add	r3, r1
 80079fc:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d019      	beq.n	8007a3e <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007a0a:	4a2a      	ldr	r2, [pc, #168]	@ (8007ab4 <HAL_OSPIM_Config+0x9c4>)
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	691b      	ldr	r3, [r3, #16]
 8007a10:	3b01      	subs	r3, #1
 8007a12:	f003 0301 	and.w	r3, r3, #1
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	4413      	add	r3, r2
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8007a20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a22:	049b      	lsls	r3, r3, #18
 8007a24:	431a      	orrs	r2, r3
 8007a26:	4923      	ldr	r1, [pc, #140]	@ (8007ab4 <HAL_OSPIM_Config+0x9c4>)
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	f003 0301 	and.w	r3, r3, #1
 8007a32:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	440b      	add	r3, r1
 8007a3a:	605a      	str	r2, [r3, #4]
 8007a3c:	e01c      	b.n	8007a78 <HAL_OSPIM_Config+0x988>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	691b      	ldr	r3, [r3, #16]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d018      	beq.n	8007a78 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007a46:	4a1b      	ldr	r2, [pc, #108]	@ (8007ab4 <HAL_OSPIM_Config+0x9c4>)
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	691b      	ldr	r3, [r3, #16]
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	f003 0301 	and.w	r3, r3, #1
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	4413      	add	r3, r2
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8007a5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a5e:	069b      	lsls	r3, r3, #26
 8007a60:	431a      	orrs	r2, r3
 8007a62:	4914      	ldr	r1, [pc, #80]	@ (8007ab4 <HAL_OSPIM_Config+0x9c4>)
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	691b      	ldr	r3, [r3, #16]
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	f003 0301 	and.w	r3, r3, #1
 8007a6e:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	440b      	add	r3, r1
 8007a76:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8007a78:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8007a7c:	f003 0301 	and.w	r3, r3, #1
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d005      	beq.n	8007a90 <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8007a84:	4b0c      	ldr	r3, [pc, #48]	@ (8007ab8 <HAL_OSPIM_Config+0x9c8>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a0b      	ldr	r2, [pc, #44]	@ (8007ab8 <HAL_OSPIM_Config+0x9c8>)
 8007a8a:	f043 0301 	orr.w	r3, r3, #1
 8007a8e:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8007a90:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8007a94:	f003 0302 	and.w	r3, r3, #2
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d005      	beq.n	8007aa8 <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8007a9c:	4b07      	ldr	r3, [pc, #28]	@ (8007abc <HAL_OSPIM_Config+0x9cc>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a06      	ldr	r2, [pc, #24]	@ (8007abc <HAL_OSPIM_Config+0x9cc>)
 8007aa2:	f043 0301 	orr.w	r3, r3, #1
 8007aa6:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8007aa8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3750      	adds	r7, #80	@ 0x50
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	5200b400 	.word	0x5200b400
 8007ab8:	52005000 	.word	0x52005000
 8007abc:	5200a000 	.word	0x5200a000

08007ac0 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	603b      	str	r3, [r7, #0]
 8007acc:	4613      	mov	r3, r2
 8007ace:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007ad0:	e01a      	b.n	8007b08 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ad8:	d016      	beq.n	8007b08 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ada:	f7fa fe05 	bl	80026e8 <HAL_GetTick>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	1ad3      	subs	r3, r2, r3
 8007ae4:	69ba      	ldr	r2, [r7, #24]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d302      	bcc.n	8007af0 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8007aea:	69bb      	ldr	r3, [r7, #24]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d10b      	bne.n	8007b08 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007af6:	651a      	str	r2, [r3, #80]	@ 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007afc:	f043 0201 	orr.w	r2, r3, #1
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	e00e      	b.n	8007b26 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	6a1a      	ldr	r2, [r3, #32]
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	4013      	ands	r3, r2
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	bf14      	ite	ne
 8007b16:	2301      	movne	r3, #1
 8007b18:	2300      	moveq	r3, #0
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	79fb      	ldrb	r3, [r7, #7]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d1d6      	bne.n	8007ad2 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3710      	adds	r7, #16
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
	...

08007b30 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b087      	sub	sp, #28
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	4603      	mov	r3, r0
 8007b38:	6039      	str	r1, [r7, #0]
 8007b3a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8007b40:	2300      	movs	r3, #0
 8007b42:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8007b44:	79fb      	ldrb	r3, [r7, #7]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d005      	beq.n	8007b56 <OSPIM_GetConfig+0x26>
 8007b4a:	79fb      	ldrb	r3, [r7, #7]
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d802      	bhi.n	8007b56 <OSPIM_GetConfig+0x26>
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d102      	bne.n	8007b5c <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	75fb      	strb	r3, [r7, #23]
 8007b5a:	e098      	b.n	8007c8e <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	2200      	movs	r2, #0
 8007b66:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	2200      	movs	r2, #0
 8007b72:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	2200      	movs	r2, #0
 8007b78:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8007b7a:	79fb      	ldrb	r3, [r7, #7]
 8007b7c:	2b02      	cmp	r3, #2
 8007b7e:	d10b      	bne.n	8007b98 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8007b80:	4b46      	ldr	r3, [pc, #280]	@ (8007c9c <OSPIM_GetConfig+0x16c>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0301 	and.w	r3, r3, #1
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d102      	bne.n	8007b92 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8007b8c:	4b44      	ldr	r3, [pc, #272]	@ (8007ca0 <OSPIM_GetConfig+0x170>)
 8007b8e:	613b      	str	r3, [r7, #16]
 8007b90:	e002      	b.n	8007b98 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8007b92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b96:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8007b98:	2300      	movs	r3, #0
 8007b9a:	60fb      	str	r3, [r7, #12]
 8007b9c:	e074      	b.n	8007c88 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8007b9e:	4a3f      	ldr	r2, [pc, #252]	@ (8007c9c <OSPIM_GetConfig+0x16c>)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	4413      	add	r3, r2
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	f003 0301 	and.w	r3, r3, #1
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00a      	beq.n	8007bca <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8007bb4:	68ba      	ldr	r2, [r7, #8]
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	4053      	eors	r3, r2
 8007bba:	f003 0302 	and.w	r3, r3, #2
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d103      	bne.n	8007bca <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	1c5a      	adds	r2, r3, #1
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	f003 0310 	and.w	r3, r3, #16
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d00a      	beq.n	8007bea <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8007bd4:	68ba      	ldr	r2, [r7, #8]
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	4053      	eors	r3, r2
 8007bda:	f003 0320 	and.w	r3, r3, #32
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d103      	bne.n	8007bea <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	1c5a      	adds	r2, r3, #1
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00a      	beq.n	8007c0a <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8007bf4:	68ba      	ldr	r2, [r7, #8]
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	4053      	eors	r3, r2
 8007bfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d103      	bne.n	8007c0a <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	1c5a      	adds	r2, r3, #1
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d018      	beq.n	8007c46 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8007c14:	68ba      	ldr	r2, [r7, #8]
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	4053      	eors	r3, r2
 8007c1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d111      	bne.n	8007c46 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d106      	bne.n	8007c3a <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	3301      	adds	r3, #1
 8007c30:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	60da      	str	r2, [r3, #12]
 8007c38:	e005      	b.n	8007c46 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d018      	beq.n	8007c82 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8007c50:	68ba      	ldr	r2, [r7, #8]
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	4053      	eors	r3, r2
 8007c56:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d111      	bne.n	8007c82 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d106      	bne.n	8007c76 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	611a      	str	r2, [r3, #16]
 8007c74:	e005      	b.n	8007c82 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	3301      	adds	r3, #1
 8007c86:	60fb      	str	r3, [r7, #12]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d987      	bls.n	8007b9e <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8007c8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	371c      	adds	r7, #28
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr
 8007c9c:	5200b400 	.word	0x5200b400
 8007ca0:	04040222 	.word	0x04040222

08007ca4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007cac:	4b29      	ldr	r3, [pc, #164]	@ (8007d54 <HAL_PWREx_ConfigSupply+0xb0>)
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	f003 0307 	and.w	r3, r3, #7
 8007cb4:	2b06      	cmp	r3, #6
 8007cb6:	d00a      	beq.n	8007cce <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007cb8:	4b26      	ldr	r3, [pc, #152]	@ (8007d54 <HAL_PWREx_ConfigSupply+0xb0>)
 8007cba:	68db      	ldr	r3, [r3, #12]
 8007cbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d001      	beq.n	8007cca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e03f      	b.n	8007d4a <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	e03d      	b.n	8007d4a <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007cce:	4b21      	ldr	r3, [pc, #132]	@ (8007d54 <HAL_PWREx_ConfigSupply+0xb0>)
 8007cd0:	68db      	ldr	r3, [r3, #12]
 8007cd2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8007cd6:	491f      	ldr	r1, [pc, #124]	@ (8007d54 <HAL_PWREx_ConfigSupply+0xb0>)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007cde:	f7fa fd03 	bl	80026e8 <HAL_GetTick>
 8007ce2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007ce4:	e009      	b.n	8007cfa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007ce6:	f7fa fcff 	bl	80026e8 <HAL_GetTick>
 8007cea:	4602      	mov	r2, r0
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007cf4:	d901      	bls.n	8007cfa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e027      	b.n	8007d4a <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007cfa:	4b16      	ldr	r3, [pc, #88]	@ (8007d54 <HAL_PWREx_ConfigSupply+0xb0>)
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d06:	d1ee      	bne.n	8007ce6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2b1e      	cmp	r3, #30
 8007d0c:	d008      	beq.n	8007d20 <HAL_PWREx_ConfigSupply+0x7c>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d12:	d005      	beq.n	8007d20 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2b1d      	cmp	r3, #29
 8007d18:	d002      	beq.n	8007d20 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2b2d      	cmp	r3, #45	@ 0x2d
 8007d1e:	d113      	bne.n	8007d48 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8007d20:	f7fa fce2 	bl	80026e8 <HAL_GetTick>
 8007d24:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007d26:	e009      	b.n	8007d3c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007d28:	f7fa fcde 	bl	80026e8 <HAL_GetTick>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	1ad3      	subs	r3, r2, r3
 8007d32:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d36:	d901      	bls.n	8007d3c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	e006      	b.n	8007d4a <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007d3c:	4b05      	ldr	r3, [pc, #20]	@ (8007d54 <HAL_PWREx_ConfigSupply+0xb0>)
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	f003 0311 	and.w	r3, r3, #17
 8007d44:	2b11      	cmp	r3, #17
 8007d46:	d1ef      	bne.n	8007d28 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3710      	adds	r7, #16
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop
 8007d54:	58024800 	.word	0x58024800

08007d58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b08c      	sub	sp, #48	@ 0x30
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d101      	bne.n	8007d6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	e3c8      	b.n	80084fc <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f003 0301 	and.w	r3, r3, #1
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	f000 8087 	beq.w	8007e86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d78:	4b88      	ldr	r3, [pc, #544]	@ (8007f9c <HAL_RCC_OscConfig+0x244>)
 8007d7a:	691b      	ldr	r3, [r3, #16]
 8007d7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007d82:	4b86      	ldr	r3, [pc, #536]	@ (8007f9c <HAL_RCC_OscConfig+0x244>)
 8007d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d86:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d8a:	2b10      	cmp	r3, #16
 8007d8c:	d007      	beq.n	8007d9e <HAL_RCC_OscConfig+0x46>
 8007d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d90:	2b18      	cmp	r3, #24
 8007d92:	d110      	bne.n	8007db6 <HAL_RCC_OscConfig+0x5e>
 8007d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d96:	f003 0303 	and.w	r3, r3, #3
 8007d9a:	2b02      	cmp	r3, #2
 8007d9c:	d10b      	bne.n	8007db6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d9e:	4b7f      	ldr	r3, [pc, #508]	@ (8007f9c <HAL_RCC_OscConfig+0x244>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d06c      	beq.n	8007e84 <HAL_RCC_OscConfig+0x12c>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d168      	bne.n	8007e84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	e3a2      	b.n	80084fc <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007dbe:	d106      	bne.n	8007dce <HAL_RCC_OscConfig+0x76>
 8007dc0:	4b76      	ldr	r3, [pc, #472]	@ (8007f9c <HAL_RCC_OscConfig+0x244>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a75      	ldr	r2, [pc, #468]	@ (8007f9c <HAL_RCC_OscConfig+0x244>)
 8007dc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007dca:	6013      	str	r3, [r2, #0]
 8007dcc:	e02e      	b.n	8007e2c <HAL_RCC_OscConfig+0xd4>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d10c      	bne.n	8007df0 <HAL_RCC_OscConfig+0x98>
 8007dd6:	4b71      	ldr	r3, [pc, #452]	@ (8007f9c <HAL_RCC_OscConfig+0x244>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a70      	ldr	r2, [pc, #448]	@ (8007f9c <HAL_RCC_OscConfig+0x244>)
 8007ddc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007de0:	6013      	str	r3, [r2, #0]
 8007de2:	4b6e      	ldr	r3, [pc, #440]	@ (8007f9c <HAL_RCC_OscConfig+0x244>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a6d      	ldr	r2, [pc, #436]	@ (8007f9c <HAL_RCC_OscConfig+0x244>)
 8007de8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007dec:	6013      	str	r3, [r2, #0]
 8007dee:	e01d      	b.n	8007e2c <HAL_RCC_OscConfig+0xd4>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007df8:	d10c      	bne.n	8007e14 <HAL_RCC_OscConfig+0xbc>
 8007dfa:	4b68      	ldr	r3, [pc, #416]	@ (8007f9c <HAL_RCC_OscConfig+0x244>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a67      	ldr	r2, [pc, #412]	@ (8007f9c <HAL_RCC_OscConfig+0x244>)
 8007e00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007e04:	6013      	str	r3, [r2, #0]
 8007e06:	4b65      	ldr	r3, [pc, #404]	@ (8007f9c <HAL_RCC_OscConfig+0x244>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a64      	ldr	r2, [pc, #400]	@ (8007f9c <HAL_RCC_OscConfig+0x244>)
 8007e0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e10:	6013      	str	r3, [r2, #0]
 8007e12:	e00b      	b.n	8007e2c <HAL_RCC_OscConfig+0xd4>
 8007e14:	4b61      	ldr	r3, [pc, #388]	@ (8007f9c <HAL_RCC_OscConfig+0x244>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a60      	ldr	r2, [pc, #384]	@ (8007f9c <HAL_RCC_OscConfig+0x244>)
 8007e1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e1e:	6013      	str	r3, [r2, #0]
 8007e20:	4b5e      	ldr	r3, [pc, #376]	@ (8007f9c <HAL_RCC_OscConfig+0x244>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a5d      	ldr	r2, [pc, #372]	@ (8007f9c <HAL_RCC_OscConfig+0x244>)
 8007e26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007e2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d013      	beq.n	8007e5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e34:	f7fa fc58 	bl	80026e8 <HAL_GetTick>
 8007e38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007e3a:	e008      	b.n	8007e4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e3c:	f7fa fc54 	bl	80026e8 <HAL_GetTick>
 8007e40:	4602      	mov	r2, r0
 8007e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e44:	1ad3      	subs	r3, r2, r3
 8007e46:	2b64      	cmp	r3, #100	@ 0x64
 8007e48:	d901      	bls.n	8007e4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	e356      	b.n	80084fc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007e4e:	4b53      	ldr	r3, [pc, #332]	@ (8007f9c <HAL_RCC_OscConfig+0x244>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d0f0      	beq.n	8007e3c <HAL_RCC_OscConfig+0xe4>
 8007e5a:	e014      	b.n	8007e86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e5c:	f7fa fc44 	bl	80026e8 <HAL_GetTick>
 8007e60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007e62:	e008      	b.n	8007e76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e64:	f7fa fc40 	bl	80026e8 <HAL_GetTick>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e6c:	1ad3      	subs	r3, r2, r3
 8007e6e:	2b64      	cmp	r3, #100	@ 0x64
 8007e70:	d901      	bls.n	8007e76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007e72:	2303      	movs	r3, #3
 8007e74:	e342      	b.n	80084fc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007e76:	4b49      	ldr	r3, [pc, #292]	@ (8007f9c <HAL_RCC_OscConfig+0x244>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1f0      	bne.n	8007e64 <HAL_RCC_OscConfig+0x10c>
 8007e82:	e000      	b.n	8007e86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f003 0302 	and.w	r3, r3, #2
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	f000 808c 	beq.w	8007fac <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e94:	4b41      	ldr	r3, [pc, #260]	@ (8007f9c <HAL_RCC_OscConfig+0x244>)
 8007e96:	691b      	ldr	r3, [r3, #16]
 8007e98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e9c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007e9e:	4b3f      	ldr	r3, [pc, #252]	@ (8007f9c <HAL_RCC_OscConfig+0x244>)
 8007ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ea2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007ea4:	6a3b      	ldr	r3, [r7, #32]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d007      	beq.n	8007eba <HAL_RCC_OscConfig+0x162>
 8007eaa:	6a3b      	ldr	r3, [r7, #32]
 8007eac:	2b18      	cmp	r3, #24
 8007eae:	d137      	bne.n	8007f20 <HAL_RCC_OscConfig+0x1c8>
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	f003 0303 	and.w	r3, r3, #3
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d132      	bne.n	8007f20 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007eba:	4b38      	ldr	r3, [pc, #224]	@ (8007f9c <HAL_RCC_OscConfig+0x244>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f003 0304 	and.w	r3, r3, #4
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d005      	beq.n	8007ed2 <HAL_RCC_OscConfig+0x17a>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d101      	bne.n	8007ed2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e314      	b.n	80084fc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007ed2:	4b32      	ldr	r3, [pc, #200]	@ (8007f9c <HAL_RCC_OscConfig+0x244>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f023 0219 	bic.w	r2, r3, #25
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	492f      	ldr	r1, [pc, #188]	@ (8007f9c <HAL_RCC_OscConfig+0x244>)
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ee4:	f7fa fc00 	bl	80026e8 <HAL_GetTick>
 8007ee8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007eea:	e008      	b.n	8007efe <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007eec:	f7fa fbfc 	bl	80026e8 <HAL_GetTick>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef4:	1ad3      	subs	r3, r2, r3
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d901      	bls.n	8007efe <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007efa:	2303      	movs	r3, #3
 8007efc:	e2fe      	b.n	80084fc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007efe:	4b27      	ldr	r3, [pc, #156]	@ (8007f9c <HAL_RCC_OscConfig+0x244>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 0304 	and.w	r3, r3, #4
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d0f0      	beq.n	8007eec <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f0a:	4b24      	ldr	r3, [pc, #144]	@ (8007f9c <HAL_RCC_OscConfig+0x244>)
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	691b      	ldr	r3, [r3, #16]
 8007f16:	061b      	lsls	r3, r3, #24
 8007f18:	4920      	ldr	r1, [pc, #128]	@ (8007f9c <HAL_RCC_OscConfig+0x244>)
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f1e:	e045      	b.n	8007fac <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d026      	beq.n	8007f76 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007f28:	4b1c      	ldr	r3, [pc, #112]	@ (8007f9c <HAL_RCC_OscConfig+0x244>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f023 0219 	bic.w	r2, r3, #25
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	4919      	ldr	r1, [pc, #100]	@ (8007f9c <HAL_RCC_OscConfig+0x244>)
 8007f36:	4313      	orrs	r3, r2
 8007f38:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f3a:	f7fa fbd5 	bl	80026e8 <HAL_GetTick>
 8007f3e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f40:	e008      	b.n	8007f54 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f42:	f7fa fbd1 	bl	80026e8 <HAL_GetTick>
 8007f46:	4602      	mov	r2, r0
 8007f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f4a:	1ad3      	subs	r3, r2, r3
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	d901      	bls.n	8007f54 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007f50:	2303      	movs	r3, #3
 8007f52:	e2d3      	b.n	80084fc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f54:	4b11      	ldr	r3, [pc, #68]	@ (8007f9c <HAL_RCC_OscConfig+0x244>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 0304 	and.w	r3, r3, #4
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d0f0      	beq.n	8007f42 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f60:	4b0e      	ldr	r3, [pc, #56]	@ (8007f9c <HAL_RCC_OscConfig+0x244>)
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	061b      	lsls	r3, r3, #24
 8007f6e:	490b      	ldr	r1, [pc, #44]	@ (8007f9c <HAL_RCC_OscConfig+0x244>)
 8007f70:	4313      	orrs	r3, r2
 8007f72:	604b      	str	r3, [r1, #4]
 8007f74:	e01a      	b.n	8007fac <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f76:	4b09      	ldr	r3, [pc, #36]	@ (8007f9c <HAL_RCC_OscConfig+0x244>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a08      	ldr	r2, [pc, #32]	@ (8007f9c <HAL_RCC_OscConfig+0x244>)
 8007f7c:	f023 0301 	bic.w	r3, r3, #1
 8007f80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f82:	f7fa fbb1 	bl	80026e8 <HAL_GetTick>
 8007f86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007f88:	e00a      	b.n	8007fa0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f8a:	f7fa fbad 	bl	80026e8 <HAL_GetTick>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f92:	1ad3      	subs	r3, r2, r3
 8007f94:	2b02      	cmp	r3, #2
 8007f96:	d903      	bls.n	8007fa0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007f98:	2303      	movs	r3, #3
 8007f9a:	e2af      	b.n	80084fc <HAL_RCC_OscConfig+0x7a4>
 8007f9c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007fa0:	4b96      	ldr	r3, [pc, #600]	@ (80081fc <HAL_RCC_OscConfig+0x4a4>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f003 0304 	and.w	r3, r3, #4
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d1ee      	bne.n	8007f8a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f003 0310 	and.w	r3, r3, #16
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d06a      	beq.n	800808e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007fb8:	4b90      	ldr	r3, [pc, #576]	@ (80081fc <HAL_RCC_OscConfig+0x4a4>)
 8007fba:	691b      	ldr	r3, [r3, #16]
 8007fbc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007fc0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007fc2:	4b8e      	ldr	r3, [pc, #568]	@ (80081fc <HAL_RCC_OscConfig+0x4a4>)
 8007fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fc6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007fc8:	69bb      	ldr	r3, [r7, #24]
 8007fca:	2b08      	cmp	r3, #8
 8007fcc:	d007      	beq.n	8007fde <HAL_RCC_OscConfig+0x286>
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	2b18      	cmp	r3, #24
 8007fd2:	d11b      	bne.n	800800c <HAL_RCC_OscConfig+0x2b4>
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	f003 0303 	and.w	r3, r3, #3
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d116      	bne.n	800800c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007fde:	4b87      	ldr	r3, [pc, #540]	@ (80081fc <HAL_RCC_OscConfig+0x4a4>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d005      	beq.n	8007ff6 <HAL_RCC_OscConfig+0x29e>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	69db      	ldr	r3, [r3, #28]
 8007fee:	2b80      	cmp	r3, #128	@ 0x80
 8007ff0:	d001      	beq.n	8007ff6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e282      	b.n	80084fc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007ff6:	4b81      	ldr	r3, [pc, #516]	@ (80081fc <HAL_RCC_OscConfig+0x4a4>)
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6a1b      	ldr	r3, [r3, #32]
 8008002:	061b      	lsls	r3, r3, #24
 8008004:	497d      	ldr	r1, [pc, #500]	@ (80081fc <HAL_RCC_OscConfig+0x4a4>)
 8008006:	4313      	orrs	r3, r2
 8008008:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800800a:	e040      	b.n	800808e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	69db      	ldr	r3, [r3, #28]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d023      	beq.n	800805c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008014:	4b79      	ldr	r3, [pc, #484]	@ (80081fc <HAL_RCC_OscConfig+0x4a4>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a78      	ldr	r2, [pc, #480]	@ (80081fc <HAL_RCC_OscConfig+0x4a4>)
 800801a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800801e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008020:	f7fa fb62 	bl	80026e8 <HAL_GetTick>
 8008024:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008026:	e008      	b.n	800803a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008028:	f7fa fb5e 	bl	80026e8 <HAL_GetTick>
 800802c:	4602      	mov	r2, r0
 800802e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008030:	1ad3      	subs	r3, r2, r3
 8008032:	2b02      	cmp	r3, #2
 8008034:	d901      	bls.n	800803a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008036:	2303      	movs	r3, #3
 8008038:	e260      	b.n	80084fc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800803a:	4b70      	ldr	r3, [pc, #448]	@ (80081fc <HAL_RCC_OscConfig+0x4a4>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008042:	2b00      	cmp	r3, #0
 8008044:	d0f0      	beq.n	8008028 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008046:	4b6d      	ldr	r3, [pc, #436]	@ (80081fc <HAL_RCC_OscConfig+0x4a4>)
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a1b      	ldr	r3, [r3, #32]
 8008052:	061b      	lsls	r3, r3, #24
 8008054:	4969      	ldr	r1, [pc, #420]	@ (80081fc <HAL_RCC_OscConfig+0x4a4>)
 8008056:	4313      	orrs	r3, r2
 8008058:	60cb      	str	r3, [r1, #12]
 800805a:	e018      	b.n	800808e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800805c:	4b67      	ldr	r3, [pc, #412]	@ (80081fc <HAL_RCC_OscConfig+0x4a4>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a66      	ldr	r2, [pc, #408]	@ (80081fc <HAL_RCC_OscConfig+0x4a4>)
 8008062:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008066:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008068:	f7fa fb3e 	bl	80026e8 <HAL_GetTick>
 800806c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800806e:	e008      	b.n	8008082 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008070:	f7fa fb3a 	bl	80026e8 <HAL_GetTick>
 8008074:	4602      	mov	r2, r0
 8008076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008078:	1ad3      	subs	r3, r2, r3
 800807a:	2b02      	cmp	r3, #2
 800807c:	d901      	bls.n	8008082 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800807e:	2303      	movs	r3, #3
 8008080:	e23c      	b.n	80084fc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008082:	4b5e      	ldr	r3, [pc, #376]	@ (80081fc <HAL_RCC_OscConfig+0x4a4>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800808a:	2b00      	cmp	r3, #0
 800808c:	d1f0      	bne.n	8008070 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 0308 	and.w	r3, r3, #8
 8008096:	2b00      	cmp	r3, #0
 8008098:	d036      	beq.n	8008108 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	695b      	ldr	r3, [r3, #20]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d019      	beq.n	80080d6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80080a2:	4b56      	ldr	r3, [pc, #344]	@ (80081fc <HAL_RCC_OscConfig+0x4a4>)
 80080a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080a6:	4a55      	ldr	r2, [pc, #340]	@ (80081fc <HAL_RCC_OscConfig+0x4a4>)
 80080a8:	f043 0301 	orr.w	r3, r3, #1
 80080ac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080ae:	f7fa fb1b 	bl	80026e8 <HAL_GetTick>
 80080b2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80080b4:	e008      	b.n	80080c8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080b6:	f7fa fb17 	bl	80026e8 <HAL_GetTick>
 80080ba:	4602      	mov	r2, r0
 80080bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080be:	1ad3      	subs	r3, r2, r3
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	d901      	bls.n	80080c8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80080c4:	2303      	movs	r3, #3
 80080c6:	e219      	b.n	80084fc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80080c8:	4b4c      	ldr	r3, [pc, #304]	@ (80081fc <HAL_RCC_OscConfig+0x4a4>)
 80080ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080cc:	f003 0302 	and.w	r3, r3, #2
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d0f0      	beq.n	80080b6 <HAL_RCC_OscConfig+0x35e>
 80080d4:	e018      	b.n	8008108 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80080d6:	4b49      	ldr	r3, [pc, #292]	@ (80081fc <HAL_RCC_OscConfig+0x4a4>)
 80080d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080da:	4a48      	ldr	r2, [pc, #288]	@ (80081fc <HAL_RCC_OscConfig+0x4a4>)
 80080dc:	f023 0301 	bic.w	r3, r3, #1
 80080e0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080e2:	f7fa fb01 	bl	80026e8 <HAL_GetTick>
 80080e6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80080e8:	e008      	b.n	80080fc <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080ea:	f7fa fafd 	bl	80026e8 <HAL_GetTick>
 80080ee:	4602      	mov	r2, r0
 80080f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f2:	1ad3      	subs	r3, r2, r3
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	d901      	bls.n	80080fc <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80080f8:	2303      	movs	r3, #3
 80080fa:	e1ff      	b.n	80084fc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80080fc:	4b3f      	ldr	r3, [pc, #252]	@ (80081fc <HAL_RCC_OscConfig+0x4a4>)
 80080fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008100:	f003 0302 	and.w	r3, r3, #2
 8008104:	2b00      	cmp	r3, #0
 8008106:	d1f0      	bne.n	80080ea <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f003 0320 	and.w	r3, r3, #32
 8008110:	2b00      	cmp	r3, #0
 8008112:	d036      	beq.n	8008182 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	699b      	ldr	r3, [r3, #24]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d019      	beq.n	8008150 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800811c:	4b37      	ldr	r3, [pc, #220]	@ (80081fc <HAL_RCC_OscConfig+0x4a4>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a36      	ldr	r2, [pc, #216]	@ (80081fc <HAL_RCC_OscConfig+0x4a4>)
 8008122:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008126:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008128:	f7fa fade 	bl	80026e8 <HAL_GetTick>
 800812c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800812e:	e008      	b.n	8008142 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008130:	f7fa fada 	bl	80026e8 <HAL_GetTick>
 8008134:	4602      	mov	r2, r0
 8008136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008138:	1ad3      	subs	r3, r2, r3
 800813a:	2b02      	cmp	r3, #2
 800813c:	d901      	bls.n	8008142 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800813e:	2303      	movs	r3, #3
 8008140:	e1dc      	b.n	80084fc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008142:	4b2e      	ldr	r3, [pc, #184]	@ (80081fc <HAL_RCC_OscConfig+0x4a4>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800814a:	2b00      	cmp	r3, #0
 800814c:	d0f0      	beq.n	8008130 <HAL_RCC_OscConfig+0x3d8>
 800814e:	e018      	b.n	8008182 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008150:	4b2a      	ldr	r3, [pc, #168]	@ (80081fc <HAL_RCC_OscConfig+0x4a4>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a29      	ldr	r2, [pc, #164]	@ (80081fc <HAL_RCC_OscConfig+0x4a4>)
 8008156:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800815a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800815c:	f7fa fac4 	bl	80026e8 <HAL_GetTick>
 8008160:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008162:	e008      	b.n	8008176 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008164:	f7fa fac0 	bl	80026e8 <HAL_GetTick>
 8008168:	4602      	mov	r2, r0
 800816a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800816c:	1ad3      	subs	r3, r2, r3
 800816e:	2b02      	cmp	r3, #2
 8008170:	d901      	bls.n	8008176 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8008172:	2303      	movs	r3, #3
 8008174:	e1c2      	b.n	80084fc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008176:	4b21      	ldr	r3, [pc, #132]	@ (80081fc <HAL_RCC_OscConfig+0x4a4>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800817e:	2b00      	cmp	r3, #0
 8008180:	d1f0      	bne.n	8008164 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f003 0304 	and.w	r3, r3, #4
 800818a:	2b00      	cmp	r3, #0
 800818c:	f000 8086 	beq.w	800829c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008190:	4b1b      	ldr	r3, [pc, #108]	@ (8008200 <HAL_RCC_OscConfig+0x4a8>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a1a      	ldr	r2, [pc, #104]	@ (8008200 <HAL_RCC_OscConfig+0x4a8>)
 8008196:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800819a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800819c:	f7fa faa4 	bl	80026e8 <HAL_GetTick>
 80081a0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081a2:	e008      	b.n	80081b6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081a4:	f7fa faa0 	bl	80026e8 <HAL_GetTick>
 80081a8:	4602      	mov	r2, r0
 80081aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ac:	1ad3      	subs	r3, r2, r3
 80081ae:	2b64      	cmp	r3, #100	@ 0x64
 80081b0:	d901      	bls.n	80081b6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80081b2:	2303      	movs	r3, #3
 80081b4:	e1a2      	b.n	80084fc <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081b6:	4b12      	ldr	r3, [pc, #72]	@ (8008200 <HAL_RCC_OscConfig+0x4a8>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d0f0      	beq.n	80081a4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d106      	bne.n	80081d8 <HAL_RCC_OscConfig+0x480>
 80081ca:	4b0c      	ldr	r3, [pc, #48]	@ (80081fc <HAL_RCC_OscConfig+0x4a4>)
 80081cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081ce:	4a0b      	ldr	r2, [pc, #44]	@ (80081fc <HAL_RCC_OscConfig+0x4a4>)
 80081d0:	f043 0301 	orr.w	r3, r3, #1
 80081d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80081d6:	e032      	b.n	800823e <HAL_RCC_OscConfig+0x4e6>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d111      	bne.n	8008204 <HAL_RCC_OscConfig+0x4ac>
 80081e0:	4b06      	ldr	r3, [pc, #24]	@ (80081fc <HAL_RCC_OscConfig+0x4a4>)
 80081e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081e4:	4a05      	ldr	r2, [pc, #20]	@ (80081fc <HAL_RCC_OscConfig+0x4a4>)
 80081e6:	f023 0301 	bic.w	r3, r3, #1
 80081ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80081ec:	4b03      	ldr	r3, [pc, #12]	@ (80081fc <HAL_RCC_OscConfig+0x4a4>)
 80081ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081f0:	4a02      	ldr	r2, [pc, #8]	@ (80081fc <HAL_RCC_OscConfig+0x4a4>)
 80081f2:	f023 0304 	bic.w	r3, r3, #4
 80081f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80081f8:	e021      	b.n	800823e <HAL_RCC_OscConfig+0x4e6>
 80081fa:	bf00      	nop
 80081fc:	58024400 	.word	0x58024400
 8008200:	58024800 	.word	0x58024800
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	2b05      	cmp	r3, #5
 800820a:	d10c      	bne.n	8008226 <HAL_RCC_OscConfig+0x4ce>
 800820c:	4b83      	ldr	r3, [pc, #524]	@ (800841c <HAL_RCC_OscConfig+0x6c4>)
 800820e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008210:	4a82      	ldr	r2, [pc, #520]	@ (800841c <HAL_RCC_OscConfig+0x6c4>)
 8008212:	f043 0304 	orr.w	r3, r3, #4
 8008216:	6713      	str	r3, [r2, #112]	@ 0x70
 8008218:	4b80      	ldr	r3, [pc, #512]	@ (800841c <HAL_RCC_OscConfig+0x6c4>)
 800821a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800821c:	4a7f      	ldr	r2, [pc, #508]	@ (800841c <HAL_RCC_OscConfig+0x6c4>)
 800821e:	f043 0301 	orr.w	r3, r3, #1
 8008222:	6713      	str	r3, [r2, #112]	@ 0x70
 8008224:	e00b      	b.n	800823e <HAL_RCC_OscConfig+0x4e6>
 8008226:	4b7d      	ldr	r3, [pc, #500]	@ (800841c <HAL_RCC_OscConfig+0x6c4>)
 8008228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800822a:	4a7c      	ldr	r2, [pc, #496]	@ (800841c <HAL_RCC_OscConfig+0x6c4>)
 800822c:	f023 0301 	bic.w	r3, r3, #1
 8008230:	6713      	str	r3, [r2, #112]	@ 0x70
 8008232:	4b7a      	ldr	r3, [pc, #488]	@ (800841c <HAL_RCC_OscConfig+0x6c4>)
 8008234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008236:	4a79      	ldr	r2, [pc, #484]	@ (800841c <HAL_RCC_OscConfig+0x6c4>)
 8008238:	f023 0304 	bic.w	r3, r3, #4
 800823c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d015      	beq.n	8008272 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008246:	f7fa fa4f 	bl	80026e8 <HAL_GetTick>
 800824a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800824c:	e00a      	b.n	8008264 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800824e:	f7fa fa4b 	bl	80026e8 <HAL_GetTick>
 8008252:	4602      	mov	r2, r0
 8008254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008256:	1ad3      	subs	r3, r2, r3
 8008258:	f241 3288 	movw	r2, #5000	@ 0x1388
 800825c:	4293      	cmp	r3, r2
 800825e:	d901      	bls.n	8008264 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008260:	2303      	movs	r3, #3
 8008262:	e14b      	b.n	80084fc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008264:	4b6d      	ldr	r3, [pc, #436]	@ (800841c <HAL_RCC_OscConfig+0x6c4>)
 8008266:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008268:	f003 0302 	and.w	r3, r3, #2
 800826c:	2b00      	cmp	r3, #0
 800826e:	d0ee      	beq.n	800824e <HAL_RCC_OscConfig+0x4f6>
 8008270:	e014      	b.n	800829c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008272:	f7fa fa39 	bl	80026e8 <HAL_GetTick>
 8008276:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008278:	e00a      	b.n	8008290 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800827a:	f7fa fa35 	bl	80026e8 <HAL_GetTick>
 800827e:	4602      	mov	r2, r0
 8008280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008282:	1ad3      	subs	r3, r2, r3
 8008284:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008288:	4293      	cmp	r3, r2
 800828a:	d901      	bls.n	8008290 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800828c:	2303      	movs	r3, #3
 800828e:	e135      	b.n	80084fc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008290:	4b62      	ldr	r3, [pc, #392]	@ (800841c <HAL_RCC_OscConfig+0x6c4>)
 8008292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008294:	f003 0302 	and.w	r3, r3, #2
 8008298:	2b00      	cmp	r3, #0
 800829a:	d1ee      	bne.n	800827a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	f000 812a 	beq.w	80084fa <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80082a6:	4b5d      	ldr	r3, [pc, #372]	@ (800841c <HAL_RCC_OscConfig+0x6c4>)
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80082ae:	2b18      	cmp	r3, #24
 80082b0:	f000 80ba 	beq.w	8008428 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	f040 8095 	bne.w	80083e8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082be:	4b57      	ldr	r3, [pc, #348]	@ (800841c <HAL_RCC_OscConfig+0x6c4>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a56      	ldr	r2, [pc, #344]	@ (800841c <HAL_RCC_OscConfig+0x6c4>)
 80082c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80082c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082ca:	f7fa fa0d 	bl	80026e8 <HAL_GetTick>
 80082ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082d0:	e008      	b.n	80082e4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082d2:	f7fa fa09 	bl	80026e8 <HAL_GetTick>
 80082d6:	4602      	mov	r2, r0
 80082d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082da:	1ad3      	subs	r3, r2, r3
 80082dc:	2b02      	cmp	r3, #2
 80082de:	d901      	bls.n	80082e4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80082e0:	2303      	movs	r3, #3
 80082e2:	e10b      	b.n	80084fc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082e4:	4b4d      	ldr	r3, [pc, #308]	@ (800841c <HAL_RCC_OscConfig+0x6c4>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d1f0      	bne.n	80082d2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80082f0:	4b4a      	ldr	r3, [pc, #296]	@ (800841c <HAL_RCC_OscConfig+0x6c4>)
 80082f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80082f4:	4b4a      	ldr	r3, [pc, #296]	@ (8008420 <HAL_RCC_OscConfig+0x6c8>)
 80082f6:	4013      	ands	r3, r2
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008300:	0112      	lsls	r2, r2, #4
 8008302:	430a      	orrs	r2, r1
 8008304:	4945      	ldr	r1, [pc, #276]	@ (800841c <HAL_RCC_OscConfig+0x6c4>)
 8008306:	4313      	orrs	r3, r2
 8008308:	628b      	str	r3, [r1, #40]	@ 0x28
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800830e:	3b01      	subs	r3, #1
 8008310:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008318:	3b01      	subs	r3, #1
 800831a:	025b      	lsls	r3, r3, #9
 800831c:	b29b      	uxth	r3, r3
 800831e:	431a      	orrs	r2, r3
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008324:	3b01      	subs	r3, #1
 8008326:	041b      	lsls	r3, r3, #16
 8008328:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800832c:	431a      	orrs	r2, r3
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008332:	3b01      	subs	r3, #1
 8008334:	061b      	lsls	r3, r3, #24
 8008336:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800833a:	4938      	ldr	r1, [pc, #224]	@ (800841c <HAL_RCC_OscConfig+0x6c4>)
 800833c:	4313      	orrs	r3, r2
 800833e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008340:	4b36      	ldr	r3, [pc, #216]	@ (800841c <HAL_RCC_OscConfig+0x6c4>)
 8008342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008344:	4a35      	ldr	r2, [pc, #212]	@ (800841c <HAL_RCC_OscConfig+0x6c4>)
 8008346:	f023 0301 	bic.w	r3, r3, #1
 800834a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800834c:	4b33      	ldr	r3, [pc, #204]	@ (800841c <HAL_RCC_OscConfig+0x6c4>)
 800834e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008350:	4b34      	ldr	r3, [pc, #208]	@ (8008424 <HAL_RCC_OscConfig+0x6cc>)
 8008352:	4013      	ands	r3, r2
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008358:	00d2      	lsls	r2, r2, #3
 800835a:	4930      	ldr	r1, [pc, #192]	@ (800841c <HAL_RCC_OscConfig+0x6c4>)
 800835c:	4313      	orrs	r3, r2
 800835e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008360:	4b2e      	ldr	r3, [pc, #184]	@ (800841c <HAL_RCC_OscConfig+0x6c4>)
 8008362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008364:	f023 020c 	bic.w	r2, r3, #12
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800836c:	492b      	ldr	r1, [pc, #172]	@ (800841c <HAL_RCC_OscConfig+0x6c4>)
 800836e:	4313      	orrs	r3, r2
 8008370:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008372:	4b2a      	ldr	r3, [pc, #168]	@ (800841c <HAL_RCC_OscConfig+0x6c4>)
 8008374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008376:	f023 0202 	bic.w	r2, r3, #2
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800837e:	4927      	ldr	r1, [pc, #156]	@ (800841c <HAL_RCC_OscConfig+0x6c4>)
 8008380:	4313      	orrs	r3, r2
 8008382:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008384:	4b25      	ldr	r3, [pc, #148]	@ (800841c <HAL_RCC_OscConfig+0x6c4>)
 8008386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008388:	4a24      	ldr	r2, [pc, #144]	@ (800841c <HAL_RCC_OscConfig+0x6c4>)
 800838a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800838e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008390:	4b22      	ldr	r3, [pc, #136]	@ (800841c <HAL_RCC_OscConfig+0x6c4>)
 8008392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008394:	4a21      	ldr	r2, [pc, #132]	@ (800841c <HAL_RCC_OscConfig+0x6c4>)
 8008396:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800839a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800839c:	4b1f      	ldr	r3, [pc, #124]	@ (800841c <HAL_RCC_OscConfig+0x6c4>)
 800839e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083a0:	4a1e      	ldr	r2, [pc, #120]	@ (800841c <HAL_RCC_OscConfig+0x6c4>)
 80083a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80083a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80083a8:	4b1c      	ldr	r3, [pc, #112]	@ (800841c <HAL_RCC_OscConfig+0x6c4>)
 80083aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ac:	4a1b      	ldr	r2, [pc, #108]	@ (800841c <HAL_RCC_OscConfig+0x6c4>)
 80083ae:	f043 0301 	orr.w	r3, r3, #1
 80083b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80083b4:	4b19      	ldr	r3, [pc, #100]	@ (800841c <HAL_RCC_OscConfig+0x6c4>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a18      	ldr	r2, [pc, #96]	@ (800841c <HAL_RCC_OscConfig+0x6c4>)
 80083ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80083be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083c0:	f7fa f992 	bl	80026e8 <HAL_GetTick>
 80083c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80083c6:	e008      	b.n	80083da <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083c8:	f7fa f98e 	bl	80026e8 <HAL_GetTick>
 80083cc:	4602      	mov	r2, r0
 80083ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d0:	1ad3      	subs	r3, r2, r3
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d901      	bls.n	80083da <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80083d6:	2303      	movs	r3, #3
 80083d8:	e090      	b.n	80084fc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80083da:	4b10      	ldr	r3, [pc, #64]	@ (800841c <HAL_RCC_OscConfig+0x6c4>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d0f0      	beq.n	80083c8 <HAL_RCC_OscConfig+0x670>
 80083e6:	e088      	b.n	80084fa <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083e8:	4b0c      	ldr	r3, [pc, #48]	@ (800841c <HAL_RCC_OscConfig+0x6c4>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a0b      	ldr	r2, [pc, #44]	@ (800841c <HAL_RCC_OscConfig+0x6c4>)
 80083ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80083f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083f4:	f7fa f978 	bl	80026e8 <HAL_GetTick>
 80083f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80083fa:	e008      	b.n	800840e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083fc:	f7fa f974 	bl	80026e8 <HAL_GetTick>
 8008400:	4602      	mov	r2, r0
 8008402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008404:	1ad3      	subs	r3, r2, r3
 8008406:	2b02      	cmp	r3, #2
 8008408:	d901      	bls.n	800840e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800840a:	2303      	movs	r3, #3
 800840c:	e076      	b.n	80084fc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800840e:	4b03      	ldr	r3, [pc, #12]	@ (800841c <HAL_RCC_OscConfig+0x6c4>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008416:	2b00      	cmp	r3, #0
 8008418:	d1f0      	bne.n	80083fc <HAL_RCC_OscConfig+0x6a4>
 800841a:	e06e      	b.n	80084fa <HAL_RCC_OscConfig+0x7a2>
 800841c:	58024400 	.word	0x58024400
 8008420:	fffffc0c 	.word	0xfffffc0c
 8008424:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008428:	4b36      	ldr	r3, [pc, #216]	@ (8008504 <HAL_RCC_OscConfig+0x7ac>)
 800842a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800842c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800842e:	4b35      	ldr	r3, [pc, #212]	@ (8008504 <HAL_RCC_OscConfig+0x7ac>)
 8008430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008432:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008438:	2b01      	cmp	r3, #1
 800843a:	d031      	beq.n	80084a0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	f003 0203 	and.w	r2, r3, #3
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008446:	429a      	cmp	r2, r3
 8008448:	d12a      	bne.n	80084a0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	091b      	lsrs	r3, r3, #4
 800844e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008456:	429a      	cmp	r2, r3
 8008458:	d122      	bne.n	80084a0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008464:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008466:	429a      	cmp	r2, r3
 8008468:	d11a      	bne.n	80084a0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	0a5b      	lsrs	r3, r3, #9
 800846e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008476:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008478:	429a      	cmp	r2, r3
 800847a:	d111      	bne.n	80084a0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	0c1b      	lsrs	r3, r3, #16
 8008480:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008488:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800848a:	429a      	cmp	r2, r3
 800848c:	d108      	bne.n	80084a0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	0e1b      	lsrs	r3, r3, #24
 8008492:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800849a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800849c:	429a      	cmp	r2, r3
 800849e:	d001      	beq.n	80084a4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	e02b      	b.n	80084fc <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80084a4:	4b17      	ldr	r3, [pc, #92]	@ (8008504 <HAL_RCC_OscConfig+0x7ac>)
 80084a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084a8:	08db      	lsrs	r3, r3, #3
 80084aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80084ae:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084b4:	693a      	ldr	r2, [r7, #16]
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d01f      	beq.n	80084fa <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80084ba:	4b12      	ldr	r3, [pc, #72]	@ (8008504 <HAL_RCC_OscConfig+0x7ac>)
 80084bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084be:	4a11      	ldr	r2, [pc, #68]	@ (8008504 <HAL_RCC_OscConfig+0x7ac>)
 80084c0:	f023 0301 	bic.w	r3, r3, #1
 80084c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80084c6:	f7fa f90f 	bl	80026e8 <HAL_GetTick>
 80084ca:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80084cc:	bf00      	nop
 80084ce:	f7fa f90b 	bl	80026e8 <HAL_GetTick>
 80084d2:	4602      	mov	r2, r0
 80084d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d0f9      	beq.n	80084ce <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80084da:	4b0a      	ldr	r3, [pc, #40]	@ (8008504 <HAL_RCC_OscConfig+0x7ac>)
 80084dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084de:	4b0a      	ldr	r3, [pc, #40]	@ (8008508 <HAL_RCC_OscConfig+0x7b0>)
 80084e0:	4013      	ands	r3, r2
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80084e6:	00d2      	lsls	r2, r2, #3
 80084e8:	4906      	ldr	r1, [pc, #24]	@ (8008504 <HAL_RCC_OscConfig+0x7ac>)
 80084ea:	4313      	orrs	r3, r2
 80084ec:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80084ee:	4b05      	ldr	r3, [pc, #20]	@ (8008504 <HAL_RCC_OscConfig+0x7ac>)
 80084f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084f2:	4a04      	ldr	r2, [pc, #16]	@ (8008504 <HAL_RCC_OscConfig+0x7ac>)
 80084f4:	f043 0301 	orr.w	r3, r3, #1
 80084f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80084fa:	2300      	movs	r3, #0
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3730      	adds	r7, #48	@ 0x30
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}
 8008504:	58024400 	.word	0x58024400
 8008508:	ffff0007 	.word	0xffff0007

0800850c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b086      	sub	sp, #24
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d101      	bne.n	8008520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800851c:	2301      	movs	r3, #1
 800851e:	e19c      	b.n	800885a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008520:	4b8a      	ldr	r3, [pc, #552]	@ (800874c <HAL_RCC_ClockConfig+0x240>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f003 030f 	and.w	r3, r3, #15
 8008528:	683a      	ldr	r2, [r7, #0]
 800852a:	429a      	cmp	r2, r3
 800852c:	d910      	bls.n	8008550 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800852e:	4b87      	ldr	r3, [pc, #540]	@ (800874c <HAL_RCC_ClockConfig+0x240>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f023 020f 	bic.w	r2, r3, #15
 8008536:	4985      	ldr	r1, [pc, #532]	@ (800874c <HAL_RCC_ClockConfig+0x240>)
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	4313      	orrs	r3, r2
 800853c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800853e:	4b83      	ldr	r3, [pc, #524]	@ (800874c <HAL_RCC_ClockConfig+0x240>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f003 030f 	and.w	r3, r3, #15
 8008546:	683a      	ldr	r2, [r7, #0]
 8008548:	429a      	cmp	r2, r3
 800854a:	d001      	beq.n	8008550 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800854c:	2301      	movs	r3, #1
 800854e:	e184      	b.n	800885a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f003 0304 	and.w	r3, r3, #4
 8008558:	2b00      	cmp	r3, #0
 800855a:	d010      	beq.n	800857e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	691a      	ldr	r2, [r3, #16]
 8008560:	4b7b      	ldr	r3, [pc, #492]	@ (8008750 <HAL_RCC_ClockConfig+0x244>)
 8008562:	699b      	ldr	r3, [r3, #24]
 8008564:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008568:	429a      	cmp	r2, r3
 800856a:	d908      	bls.n	800857e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800856c:	4b78      	ldr	r3, [pc, #480]	@ (8008750 <HAL_RCC_ClockConfig+0x244>)
 800856e:	699b      	ldr	r3, [r3, #24]
 8008570:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	691b      	ldr	r3, [r3, #16]
 8008578:	4975      	ldr	r1, [pc, #468]	@ (8008750 <HAL_RCC_ClockConfig+0x244>)
 800857a:	4313      	orrs	r3, r2
 800857c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f003 0308 	and.w	r3, r3, #8
 8008586:	2b00      	cmp	r3, #0
 8008588:	d010      	beq.n	80085ac <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	695a      	ldr	r2, [r3, #20]
 800858e:	4b70      	ldr	r3, [pc, #448]	@ (8008750 <HAL_RCC_ClockConfig+0x244>)
 8008590:	69db      	ldr	r3, [r3, #28]
 8008592:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008596:	429a      	cmp	r2, r3
 8008598:	d908      	bls.n	80085ac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800859a:	4b6d      	ldr	r3, [pc, #436]	@ (8008750 <HAL_RCC_ClockConfig+0x244>)
 800859c:	69db      	ldr	r3, [r3, #28]
 800859e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	695b      	ldr	r3, [r3, #20]
 80085a6:	496a      	ldr	r1, [pc, #424]	@ (8008750 <HAL_RCC_ClockConfig+0x244>)
 80085a8:	4313      	orrs	r3, r2
 80085aa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f003 0310 	and.w	r3, r3, #16
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d010      	beq.n	80085da <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	699a      	ldr	r2, [r3, #24]
 80085bc:	4b64      	ldr	r3, [pc, #400]	@ (8008750 <HAL_RCC_ClockConfig+0x244>)
 80085be:	69db      	ldr	r3, [r3, #28]
 80085c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d908      	bls.n	80085da <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80085c8:	4b61      	ldr	r3, [pc, #388]	@ (8008750 <HAL_RCC_ClockConfig+0x244>)
 80085ca:	69db      	ldr	r3, [r3, #28]
 80085cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	699b      	ldr	r3, [r3, #24]
 80085d4:	495e      	ldr	r1, [pc, #376]	@ (8008750 <HAL_RCC_ClockConfig+0x244>)
 80085d6:	4313      	orrs	r3, r2
 80085d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f003 0320 	and.w	r3, r3, #32
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d010      	beq.n	8008608 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	69da      	ldr	r2, [r3, #28]
 80085ea:	4b59      	ldr	r3, [pc, #356]	@ (8008750 <HAL_RCC_ClockConfig+0x244>)
 80085ec:	6a1b      	ldr	r3, [r3, #32]
 80085ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d908      	bls.n	8008608 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80085f6:	4b56      	ldr	r3, [pc, #344]	@ (8008750 <HAL_RCC_ClockConfig+0x244>)
 80085f8:	6a1b      	ldr	r3, [r3, #32]
 80085fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	69db      	ldr	r3, [r3, #28]
 8008602:	4953      	ldr	r1, [pc, #332]	@ (8008750 <HAL_RCC_ClockConfig+0x244>)
 8008604:	4313      	orrs	r3, r2
 8008606:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f003 0302 	and.w	r3, r3, #2
 8008610:	2b00      	cmp	r3, #0
 8008612:	d010      	beq.n	8008636 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	68da      	ldr	r2, [r3, #12]
 8008618:	4b4d      	ldr	r3, [pc, #308]	@ (8008750 <HAL_RCC_ClockConfig+0x244>)
 800861a:	699b      	ldr	r3, [r3, #24]
 800861c:	f003 030f 	and.w	r3, r3, #15
 8008620:	429a      	cmp	r2, r3
 8008622:	d908      	bls.n	8008636 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008624:	4b4a      	ldr	r3, [pc, #296]	@ (8008750 <HAL_RCC_ClockConfig+0x244>)
 8008626:	699b      	ldr	r3, [r3, #24]
 8008628:	f023 020f 	bic.w	r2, r3, #15
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	4947      	ldr	r1, [pc, #284]	@ (8008750 <HAL_RCC_ClockConfig+0x244>)
 8008632:	4313      	orrs	r3, r2
 8008634:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f003 0301 	and.w	r3, r3, #1
 800863e:	2b00      	cmp	r3, #0
 8008640:	d055      	beq.n	80086ee <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008642:	4b43      	ldr	r3, [pc, #268]	@ (8008750 <HAL_RCC_ClockConfig+0x244>)
 8008644:	699b      	ldr	r3, [r3, #24]
 8008646:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	4940      	ldr	r1, [pc, #256]	@ (8008750 <HAL_RCC_ClockConfig+0x244>)
 8008650:	4313      	orrs	r3, r2
 8008652:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	2b02      	cmp	r3, #2
 800865a:	d107      	bne.n	800866c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800865c:	4b3c      	ldr	r3, [pc, #240]	@ (8008750 <HAL_RCC_ClockConfig+0x244>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008664:	2b00      	cmp	r3, #0
 8008666:	d121      	bne.n	80086ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	e0f6      	b.n	800885a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	2b03      	cmp	r3, #3
 8008672:	d107      	bne.n	8008684 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008674:	4b36      	ldr	r3, [pc, #216]	@ (8008750 <HAL_RCC_ClockConfig+0x244>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800867c:	2b00      	cmp	r3, #0
 800867e:	d115      	bne.n	80086ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	e0ea      	b.n	800885a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	2b01      	cmp	r3, #1
 800868a:	d107      	bne.n	800869c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800868c:	4b30      	ldr	r3, [pc, #192]	@ (8008750 <HAL_RCC_ClockConfig+0x244>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008694:	2b00      	cmp	r3, #0
 8008696:	d109      	bne.n	80086ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008698:	2301      	movs	r3, #1
 800869a:	e0de      	b.n	800885a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800869c:	4b2c      	ldr	r3, [pc, #176]	@ (8008750 <HAL_RCC_ClockConfig+0x244>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f003 0304 	and.w	r3, r3, #4
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d101      	bne.n	80086ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80086a8:	2301      	movs	r3, #1
 80086aa:	e0d6      	b.n	800885a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80086ac:	4b28      	ldr	r3, [pc, #160]	@ (8008750 <HAL_RCC_ClockConfig+0x244>)
 80086ae:	691b      	ldr	r3, [r3, #16]
 80086b0:	f023 0207 	bic.w	r2, r3, #7
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	4925      	ldr	r1, [pc, #148]	@ (8008750 <HAL_RCC_ClockConfig+0x244>)
 80086ba:	4313      	orrs	r3, r2
 80086bc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086be:	f7fa f813 	bl	80026e8 <HAL_GetTick>
 80086c2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086c4:	e00a      	b.n	80086dc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086c6:	f7fa f80f 	bl	80026e8 <HAL_GetTick>
 80086ca:	4602      	mov	r2, r0
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	1ad3      	subs	r3, r2, r3
 80086d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d901      	bls.n	80086dc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80086d8:	2303      	movs	r3, #3
 80086da:	e0be      	b.n	800885a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086dc:	4b1c      	ldr	r3, [pc, #112]	@ (8008750 <HAL_RCC_ClockConfig+0x244>)
 80086de:	691b      	ldr	r3, [r3, #16]
 80086e0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	00db      	lsls	r3, r3, #3
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d1eb      	bne.n	80086c6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f003 0302 	and.w	r3, r3, #2
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d010      	beq.n	800871c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	68da      	ldr	r2, [r3, #12]
 80086fe:	4b14      	ldr	r3, [pc, #80]	@ (8008750 <HAL_RCC_ClockConfig+0x244>)
 8008700:	699b      	ldr	r3, [r3, #24]
 8008702:	f003 030f 	and.w	r3, r3, #15
 8008706:	429a      	cmp	r2, r3
 8008708:	d208      	bcs.n	800871c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800870a:	4b11      	ldr	r3, [pc, #68]	@ (8008750 <HAL_RCC_ClockConfig+0x244>)
 800870c:	699b      	ldr	r3, [r3, #24]
 800870e:	f023 020f 	bic.w	r2, r3, #15
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	68db      	ldr	r3, [r3, #12]
 8008716:	490e      	ldr	r1, [pc, #56]	@ (8008750 <HAL_RCC_ClockConfig+0x244>)
 8008718:	4313      	orrs	r3, r2
 800871a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800871c:	4b0b      	ldr	r3, [pc, #44]	@ (800874c <HAL_RCC_ClockConfig+0x240>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f003 030f 	and.w	r3, r3, #15
 8008724:	683a      	ldr	r2, [r7, #0]
 8008726:	429a      	cmp	r2, r3
 8008728:	d214      	bcs.n	8008754 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800872a:	4b08      	ldr	r3, [pc, #32]	@ (800874c <HAL_RCC_ClockConfig+0x240>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f023 020f 	bic.w	r2, r3, #15
 8008732:	4906      	ldr	r1, [pc, #24]	@ (800874c <HAL_RCC_ClockConfig+0x240>)
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	4313      	orrs	r3, r2
 8008738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800873a:	4b04      	ldr	r3, [pc, #16]	@ (800874c <HAL_RCC_ClockConfig+0x240>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f003 030f 	and.w	r3, r3, #15
 8008742:	683a      	ldr	r2, [r7, #0]
 8008744:	429a      	cmp	r2, r3
 8008746:	d005      	beq.n	8008754 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008748:	2301      	movs	r3, #1
 800874a:	e086      	b.n	800885a <HAL_RCC_ClockConfig+0x34e>
 800874c:	52002000 	.word	0x52002000
 8008750:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f003 0304 	and.w	r3, r3, #4
 800875c:	2b00      	cmp	r3, #0
 800875e:	d010      	beq.n	8008782 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	691a      	ldr	r2, [r3, #16]
 8008764:	4b3f      	ldr	r3, [pc, #252]	@ (8008864 <HAL_RCC_ClockConfig+0x358>)
 8008766:	699b      	ldr	r3, [r3, #24]
 8008768:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800876c:	429a      	cmp	r2, r3
 800876e:	d208      	bcs.n	8008782 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008770:	4b3c      	ldr	r3, [pc, #240]	@ (8008864 <HAL_RCC_ClockConfig+0x358>)
 8008772:	699b      	ldr	r3, [r3, #24]
 8008774:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	691b      	ldr	r3, [r3, #16]
 800877c:	4939      	ldr	r1, [pc, #228]	@ (8008864 <HAL_RCC_ClockConfig+0x358>)
 800877e:	4313      	orrs	r3, r2
 8008780:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 0308 	and.w	r3, r3, #8
 800878a:	2b00      	cmp	r3, #0
 800878c:	d010      	beq.n	80087b0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	695a      	ldr	r2, [r3, #20]
 8008792:	4b34      	ldr	r3, [pc, #208]	@ (8008864 <HAL_RCC_ClockConfig+0x358>)
 8008794:	69db      	ldr	r3, [r3, #28]
 8008796:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800879a:	429a      	cmp	r2, r3
 800879c:	d208      	bcs.n	80087b0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800879e:	4b31      	ldr	r3, [pc, #196]	@ (8008864 <HAL_RCC_ClockConfig+0x358>)
 80087a0:	69db      	ldr	r3, [r3, #28]
 80087a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	695b      	ldr	r3, [r3, #20]
 80087aa:	492e      	ldr	r1, [pc, #184]	@ (8008864 <HAL_RCC_ClockConfig+0x358>)
 80087ac:	4313      	orrs	r3, r2
 80087ae:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f003 0310 	and.w	r3, r3, #16
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d010      	beq.n	80087de <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	699a      	ldr	r2, [r3, #24]
 80087c0:	4b28      	ldr	r3, [pc, #160]	@ (8008864 <HAL_RCC_ClockConfig+0x358>)
 80087c2:	69db      	ldr	r3, [r3, #28]
 80087c4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d208      	bcs.n	80087de <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80087cc:	4b25      	ldr	r3, [pc, #148]	@ (8008864 <HAL_RCC_ClockConfig+0x358>)
 80087ce:	69db      	ldr	r3, [r3, #28]
 80087d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	699b      	ldr	r3, [r3, #24]
 80087d8:	4922      	ldr	r1, [pc, #136]	@ (8008864 <HAL_RCC_ClockConfig+0x358>)
 80087da:	4313      	orrs	r3, r2
 80087dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f003 0320 	and.w	r3, r3, #32
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d010      	beq.n	800880c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	69da      	ldr	r2, [r3, #28]
 80087ee:	4b1d      	ldr	r3, [pc, #116]	@ (8008864 <HAL_RCC_ClockConfig+0x358>)
 80087f0:	6a1b      	ldr	r3, [r3, #32]
 80087f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d208      	bcs.n	800880c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80087fa:	4b1a      	ldr	r3, [pc, #104]	@ (8008864 <HAL_RCC_ClockConfig+0x358>)
 80087fc:	6a1b      	ldr	r3, [r3, #32]
 80087fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	69db      	ldr	r3, [r3, #28]
 8008806:	4917      	ldr	r1, [pc, #92]	@ (8008864 <HAL_RCC_ClockConfig+0x358>)
 8008808:	4313      	orrs	r3, r2
 800880a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800880c:	f000 f834 	bl	8008878 <HAL_RCC_GetSysClockFreq>
 8008810:	4602      	mov	r2, r0
 8008812:	4b14      	ldr	r3, [pc, #80]	@ (8008864 <HAL_RCC_ClockConfig+0x358>)
 8008814:	699b      	ldr	r3, [r3, #24]
 8008816:	0a1b      	lsrs	r3, r3, #8
 8008818:	f003 030f 	and.w	r3, r3, #15
 800881c:	4912      	ldr	r1, [pc, #72]	@ (8008868 <HAL_RCC_ClockConfig+0x35c>)
 800881e:	5ccb      	ldrb	r3, [r1, r3]
 8008820:	f003 031f 	and.w	r3, r3, #31
 8008824:	fa22 f303 	lsr.w	r3, r2, r3
 8008828:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800882a:	4b0e      	ldr	r3, [pc, #56]	@ (8008864 <HAL_RCC_ClockConfig+0x358>)
 800882c:	699b      	ldr	r3, [r3, #24]
 800882e:	f003 030f 	and.w	r3, r3, #15
 8008832:	4a0d      	ldr	r2, [pc, #52]	@ (8008868 <HAL_RCC_ClockConfig+0x35c>)
 8008834:	5cd3      	ldrb	r3, [r2, r3]
 8008836:	f003 031f 	and.w	r3, r3, #31
 800883a:	693a      	ldr	r2, [r7, #16]
 800883c:	fa22 f303 	lsr.w	r3, r2, r3
 8008840:	4a0a      	ldr	r2, [pc, #40]	@ (800886c <HAL_RCC_ClockConfig+0x360>)
 8008842:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008844:	4a0a      	ldr	r2, [pc, #40]	@ (8008870 <HAL_RCC_ClockConfig+0x364>)
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800884a:	4b0a      	ldr	r3, [pc, #40]	@ (8008874 <HAL_RCC_ClockConfig+0x368>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4618      	mov	r0, r3
 8008850:	f7f9 fd8a 	bl	8002368 <HAL_InitTick>
 8008854:	4603      	mov	r3, r0
 8008856:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008858:	7bfb      	ldrb	r3, [r7, #15]
}
 800885a:	4618      	mov	r0, r3
 800885c:	3718      	adds	r7, #24
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	58024400 	.word	0x58024400
 8008868:	0800d410 	.word	0x0800d410
 800886c:	24000004 	.word	0x24000004
 8008870:	24000000 	.word	0x24000000
 8008874:	24000008 	.word	0x24000008

08008878 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008878:	b480      	push	{r7}
 800887a:	b089      	sub	sp, #36	@ 0x24
 800887c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800887e:	4bb3      	ldr	r3, [pc, #716]	@ (8008b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008886:	2b18      	cmp	r3, #24
 8008888:	f200 8155 	bhi.w	8008b36 <HAL_RCC_GetSysClockFreq+0x2be>
 800888c:	a201      	add	r2, pc, #4	@ (adr r2, 8008894 <HAL_RCC_GetSysClockFreq+0x1c>)
 800888e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008892:	bf00      	nop
 8008894:	080088f9 	.word	0x080088f9
 8008898:	08008b37 	.word	0x08008b37
 800889c:	08008b37 	.word	0x08008b37
 80088a0:	08008b37 	.word	0x08008b37
 80088a4:	08008b37 	.word	0x08008b37
 80088a8:	08008b37 	.word	0x08008b37
 80088ac:	08008b37 	.word	0x08008b37
 80088b0:	08008b37 	.word	0x08008b37
 80088b4:	0800891f 	.word	0x0800891f
 80088b8:	08008b37 	.word	0x08008b37
 80088bc:	08008b37 	.word	0x08008b37
 80088c0:	08008b37 	.word	0x08008b37
 80088c4:	08008b37 	.word	0x08008b37
 80088c8:	08008b37 	.word	0x08008b37
 80088cc:	08008b37 	.word	0x08008b37
 80088d0:	08008b37 	.word	0x08008b37
 80088d4:	08008925 	.word	0x08008925
 80088d8:	08008b37 	.word	0x08008b37
 80088dc:	08008b37 	.word	0x08008b37
 80088e0:	08008b37 	.word	0x08008b37
 80088e4:	08008b37 	.word	0x08008b37
 80088e8:	08008b37 	.word	0x08008b37
 80088ec:	08008b37 	.word	0x08008b37
 80088f0:	08008b37 	.word	0x08008b37
 80088f4:	0800892b 	.word	0x0800892b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088f8:	4b94      	ldr	r3, [pc, #592]	@ (8008b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f003 0320 	and.w	r3, r3, #32
 8008900:	2b00      	cmp	r3, #0
 8008902:	d009      	beq.n	8008918 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008904:	4b91      	ldr	r3, [pc, #580]	@ (8008b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	08db      	lsrs	r3, r3, #3
 800890a:	f003 0303 	and.w	r3, r3, #3
 800890e:	4a90      	ldr	r2, [pc, #576]	@ (8008b50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008910:	fa22 f303 	lsr.w	r3, r2, r3
 8008914:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008916:	e111      	b.n	8008b3c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008918:	4b8d      	ldr	r3, [pc, #564]	@ (8008b50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800891a:	61bb      	str	r3, [r7, #24]
      break;
 800891c:	e10e      	b.n	8008b3c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800891e:	4b8d      	ldr	r3, [pc, #564]	@ (8008b54 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008920:	61bb      	str	r3, [r7, #24]
      break;
 8008922:	e10b      	b.n	8008b3c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008924:	4b8c      	ldr	r3, [pc, #560]	@ (8008b58 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008926:	61bb      	str	r3, [r7, #24]
      break;
 8008928:	e108      	b.n	8008b3c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800892a:	4b88      	ldr	r3, [pc, #544]	@ (8008b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800892c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800892e:	f003 0303 	and.w	r3, r3, #3
 8008932:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008934:	4b85      	ldr	r3, [pc, #532]	@ (8008b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008938:	091b      	lsrs	r3, r3, #4
 800893a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800893e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008940:	4b82      	ldr	r3, [pc, #520]	@ (8008b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008944:	f003 0301 	and.w	r3, r3, #1
 8008948:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800894a:	4b80      	ldr	r3, [pc, #512]	@ (8008b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800894c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800894e:	08db      	lsrs	r3, r3, #3
 8008950:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008954:	68fa      	ldr	r2, [r7, #12]
 8008956:	fb02 f303 	mul.w	r3, r2, r3
 800895a:	ee07 3a90 	vmov	s15, r3
 800895e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008962:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	2b00      	cmp	r3, #0
 800896a:	f000 80e1 	beq.w	8008b30 <HAL_RCC_GetSysClockFreq+0x2b8>
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	2b02      	cmp	r3, #2
 8008972:	f000 8083 	beq.w	8008a7c <HAL_RCC_GetSysClockFreq+0x204>
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	2b02      	cmp	r3, #2
 800897a:	f200 80a1 	bhi.w	8008ac0 <HAL_RCC_GetSysClockFreq+0x248>
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d003      	beq.n	800898c <HAL_RCC_GetSysClockFreq+0x114>
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	2b01      	cmp	r3, #1
 8008988:	d056      	beq.n	8008a38 <HAL_RCC_GetSysClockFreq+0x1c0>
 800898a:	e099      	b.n	8008ac0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800898c:	4b6f      	ldr	r3, [pc, #444]	@ (8008b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f003 0320 	and.w	r3, r3, #32
 8008994:	2b00      	cmp	r3, #0
 8008996:	d02d      	beq.n	80089f4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008998:	4b6c      	ldr	r3, [pc, #432]	@ (8008b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	08db      	lsrs	r3, r3, #3
 800899e:	f003 0303 	and.w	r3, r3, #3
 80089a2:	4a6b      	ldr	r2, [pc, #428]	@ (8008b50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80089a4:	fa22 f303 	lsr.w	r3, r2, r3
 80089a8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	ee07 3a90 	vmov	s15, r3
 80089b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	ee07 3a90 	vmov	s15, r3
 80089ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089c2:	4b62      	ldr	r3, [pc, #392]	@ (8008b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089ca:	ee07 3a90 	vmov	s15, r3
 80089ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80089d6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008b5c <HAL_RCC_GetSysClockFreq+0x2e4>
 80089da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089ee:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80089f2:	e087      	b.n	8008b04 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	ee07 3a90 	vmov	s15, r3
 80089fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089fe:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008b60 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008a02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a06:	4b51      	ldr	r3, [pc, #324]	@ (8008b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a0e:	ee07 3a90 	vmov	s15, r3
 8008a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a16:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a1a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008b5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008a36:	e065      	b.n	8008b04 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	ee07 3a90 	vmov	s15, r3
 8008a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a42:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008b64 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a4a:	4b40      	ldr	r3, [pc, #256]	@ (8008b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a52:	ee07 3a90 	vmov	s15, r3
 8008a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a5e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008b5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008a7a:	e043      	b.n	8008b04 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	ee07 3a90 	vmov	s15, r3
 8008a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a86:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008b68 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a8e:	4b2f      	ldr	r3, [pc, #188]	@ (8008b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a96:	ee07 3a90 	vmov	s15, r3
 8008a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008aa2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008b5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008abe:	e021      	b.n	8008b04 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	ee07 3a90 	vmov	s15, r3
 8008ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aca:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008b64 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8008b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ada:	ee07 3a90 	vmov	s15, r3
 8008ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ae2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ae6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008b5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008af2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008afe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008b02:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008b04:	4b11      	ldr	r3, [pc, #68]	@ (8008b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b08:	0a5b      	lsrs	r3, r3, #9
 8008b0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b0e:	3301      	adds	r3, #1
 8008b10:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	ee07 3a90 	vmov	s15, r3
 8008b18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008b1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b28:	ee17 3a90 	vmov	r3, s15
 8008b2c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008b2e:	e005      	b.n	8008b3c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008b30:	2300      	movs	r3, #0
 8008b32:	61bb      	str	r3, [r7, #24]
      break;
 8008b34:	e002      	b.n	8008b3c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008b36:	4b07      	ldr	r3, [pc, #28]	@ (8008b54 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008b38:	61bb      	str	r3, [r7, #24]
      break;
 8008b3a:	bf00      	nop
  }

  return sysclockfreq;
 8008b3c:	69bb      	ldr	r3, [r7, #24]
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3724      	adds	r7, #36	@ 0x24
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr
 8008b4a:	bf00      	nop
 8008b4c:	58024400 	.word	0x58024400
 8008b50:	03d09000 	.word	0x03d09000
 8008b54:	003d0900 	.word	0x003d0900
 8008b58:	017d7840 	.word	0x017d7840
 8008b5c:	46000000 	.word	0x46000000
 8008b60:	4c742400 	.word	0x4c742400
 8008b64:	4a742400 	.word	0x4a742400
 8008b68:	4bbebc20 	.word	0x4bbebc20

08008b6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008b72:	f7ff fe81 	bl	8008878 <HAL_RCC_GetSysClockFreq>
 8008b76:	4602      	mov	r2, r0
 8008b78:	4b10      	ldr	r3, [pc, #64]	@ (8008bbc <HAL_RCC_GetHCLKFreq+0x50>)
 8008b7a:	699b      	ldr	r3, [r3, #24]
 8008b7c:	0a1b      	lsrs	r3, r3, #8
 8008b7e:	f003 030f 	and.w	r3, r3, #15
 8008b82:	490f      	ldr	r1, [pc, #60]	@ (8008bc0 <HAL_RCC_GetHCLKFreq+0x54>)
 8008b84:	5ccb      	ldrb	r3, [r1, r3]
 8008b86:	f003 031f 	and.w	r3, r3, #31
 8008b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8008b8e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b90:	4b0a      	ldr	r3, [pc, #40]	@ (8008bbc <HAL_RCC_GetHCLKFreq+0x50>)
 8008b92:	699b      	ldr	r3, [r3, #24]
 8008b94:	f003 030f 	and.w	r3, r3, #15
 8008b98:	4a09      	ldr	r2, [pc, #36]	@ (8008bc0 <HAL_RCC_GetHCLKFreq+0x54>)
 8008b9a:	5cd3      	ldrb	r3, [r2, r3]
 8008b9c:	f003 031f 	and.w	r3, r3, #31
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ba6:	4a07      	ldr	r2, [pc, #28]	@ (8008bc4 <HAL_RCC_GetHCLKFreq+0x58>)
 8008ba8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008baa:	4a07      	ldr	r2, [pc, #28]	@ (8008bc8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008bb0:	4b04      	ldr	r3, [pc, #16]	@ (8008bc4 <HAL_RCC_GetHCLKFreq+0x58>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3708      	adds	r7, #8
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}
 8008bbc:	58024400 	.word	0x58024400
 8008bc0:	0800d410 	.word	0x0800d410
 8008bc4:	24000004 	.word	0x24000004
 8008bc8:	24000000 	.word	0x24000000

08008bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008bd0:	f7ff ffcc 	bl	8008b6c <HAL_RCC_GetHCLKFreq>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	4b06      	ldr	r3, [pc, #24]	@ (8008bf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008bd8:	69db      	ldr	r3, [r3, #28]
 8008bda:	091b      	lsrs	r3, r3, #4
 8008bdc:	f003 0307 	and.w	r3, r3, #7
 8008be0:	4904      	ldr	r1, [pc, #16]	@ (8008bf4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008be2:	5ccb      	ldrb	r3, [r1, r3]
 8008be4:	f003 031f 	and.w	r3, r3, #31
 8008be8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	bd80      	pop	{r7, pc}
 8008bf0:	58024400 	.word	0x58024400
 8008bf4:	0800d410 	.word	0x0800d410

08008bf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008bfc:	f7ff ffb6 	bl	8008b6c <HAL_RCC_GetHCLKFreq>
 8008c00:	4602      	mov	r2, r0
 8008c02:	4b06      	ldr	r3, [pc, #24]	@ (8008c1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c04:	69db      	ldr	r3, [r3, #28]
 8008c06:	0a1b      	lsrs	r3, r3, #8
 8008c08:	f003 0307 	and.w	r3, r3, #7
 8008c0c:	4904      	ldr	r1, [pc, #16]	@ (8008c20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008c0e:	5ccb      	ldrb	r3, [r1, r3]
 8008c10:	f003 031f 	and.w	r3, r3, #31
 8008c14:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	58024400 	.word	0x58024400
 8008c20:	0800d410 	.word	0x0800d410

08008c24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	223f      	movs	r2, #63	@ 0x3f
 8008c32:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008c34:	4b1a      	ldr	r3, [pc, #104]	@ (8008ca0 <HAL_RCC_GetClockConfig+0x7c>)
 8008c36:	691b      	ldr	r3, [r3, #16]
 8008c38:	f003 0207 	and.w	r2, r3, #7
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008c40:	4b17      	ldr	r3, [pc, #92]	@ (8008ca0 <HAL_RCC_GetClockConfig+0x7c>)
 8008c42:	699b      	ldr	r3, [r3, #24]
 8008c44:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8008c4c:	4b14      	ldr	r3, [pc, #80]	@ (8008ca0 <HAL_RCC_GetClockConfig+0x7c>)
 8008c4e:	699b      	ldr	r3, [r3, #24]
 8008c50:	f003 020f 	and.w	r2, r3, #15
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008c58:	4b11      	ldr	r3, [pc, #68]	@ (8008ca0 <HAL_RCC_GetClockConfig+0x7c>)
 8008c5a:	699b      	ldr	r3, [r3, #24]
 8008c5c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008c64:	4b0e      	ldr	r3, [pc, #56]	@ (8008ca0 <HAL_RCC_GetClockConfig+0x7c>)
 8008c66:	69db      	ldr	r3, [r3, #28]
 8008c68:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008c70:	4b0b      	ldr	r3, [pc, #44]	@ (8008ca0 <HAL_RCC_GetClockConfig+0x7c>)
 8008c72:	69db      	ldr	r3, [r3, #28]
 8008c74:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008c7c:	4b08      	ldr	r3, [pc, #32]	@ (8008ca0 <HAL_RCC_GetClockConfig+0x7c>)
 8008c7e:	6a1b      	ldr	r3, [r3, #32]
 8008c80:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008c88:	4b06      	ldr	r3, [pc, #24]	@ (8008ca4 <HAL_RCC_GetClockConfig+0x80>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f003 020f 	and.w	r2, r3, #15
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	601a      	str	r2, [r3, #0]
}
 8008c94:	bf00      	nop
 8008c96:	370c      	adds	r7, #12
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr
 8008ca0:	58024400 	.word	0x58024400
 8008ca4:	52002000 	.word	0x52002000

08008ca8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008cac:	b0c6      	sub	sp, #280	@ 0x118
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008cba:	2300      	movs	r3, #0
 8008cbc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008ccc:	2500      	movs	r5, #0
 8008cce:	ea54 0305 	orrs.w	r3, r4, r5
 8008cd2:	d049      	beq.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cda:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008cde:	d02f      	beq.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008ce0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008ce4:	d828      	bhi.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008ce6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008cea:	d01a      	beq.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008cec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008cf0:	d822      	bhi.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d003      	beq.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008cf6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008cfa:	d007      	beq.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008cfc:	e01c      	b.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cfe:	4bab      	ldr	r3, [pc, #684]	@ (8008fac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d02:	4aaa      	ldr	r2, [pc, #680]	@ (8008fac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008d0a:	e01a      	b.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d10:	3308      	adds	r3, #8
 8008d12:	2102      	movs	r1, #2
 8008d14:	4618      	mov	r0, r3
 8008d16:	f002 fa49 	bl	800b1ac <RCCEx_PLL2_Config>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008d20:	e00f      	b.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d26:	3328      	adds	r3, #40	@ 0x28
 8008d28:	2102      	movs	r1, #2
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f002 faf0 	bl	800b310 <RCCEx_PLL3_Config>
 8008d30:	4603      	mov	r3, r0
 8008d32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008d36:	e004      	b.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008d3e:	e000      	b.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008d40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d10a      	bne.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008d4a:	4b98      	ldr	r3, [pc, #608]	@ (8008fac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d4e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d58:	4a94      	ldr	r2, [pc, #592]	@ (8008fac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d5a:	430b      	orrs	r3, r1
 8008d5c:	6513      	str	r3, [r2, #80]	@ 0x50
 8008d5e:	e003      	b.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d70:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008d74:	f04f 0900 	mov.w	r9, #0
 8008d78:	ea58 0309 	orrs.w	r3, r8, r9
 8008d7c:	d047      	beq.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d84:	2b04      	cmp	r3, #4
 8008d86:	d82a      	bhi.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008d88:	a201      	add	r2, pc, #4	@ (adr r2, 8008d90 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d8e:	bf00      	nop
 8008d90:	08008da5 	.word	0x08008da5
 8008d94:	08008db3 	.word	0x08008db3
 8008d98:	08008dc9 	.word	0x08008dc9
 8008d9c:	08008de7 	.word	0x08008de7
 8008da0:	08008de7 	.word	0x08008de7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008da4:	4b81      	ldr	r3, [pc, #516]	@ (8008fac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008da8:	4a80      	ldr	r2, [pc, #512]	@ (8008fac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008daa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008dae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008db0:	e01a      	b.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008db6:	3308      	adds	r3, #8
 8008db8:	2100      	movs	r1, #0
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f002 f9f6 	bl	800b1ac <RCCEx_PLL2_Config>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008dc6:	e00f      	b.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dcc:	3328      	adds	r3, #40	@ 0x28
 8008dce:	2100      	movs	r1, #0
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f002 fa9d 	bl	800b310 <RCCEx_PLL3_Config>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008ddc:	e004      	b.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
 8008de0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008de4:	e000      	b.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008de6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008de8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d10a      	bne.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008df0:	4b6e      	ldr	r3, [pc, #440]	@ (8008fac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008df2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008df4:	f023 0107 	bic.w	r1, r3, #7
 8008df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dfe:	4a6b      	ldr	r2, [pc, #428]	@ (8008fac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e00:	430b      	orrs	r3, r1
 8008e02:	6513      	str	r3, [r2, #80]	@ 0x50
 8008e04:	e003      	b.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e0a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e16:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8008e1a:	f04f 0b00 	mov.w	fp, #0
 8008e1e:	ea5a 030b 	orrs.w	r3, sl, fp
 8008e22:	d05b      	beq.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008e2c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008e30:	d03b      	beq.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x202>
 8008e32:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008e36:	d834      	bhi.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008e38:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008e3c:	d037      	beq.n	8008eae <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008e3e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008e42:	d82e      	bhi.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008e44:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008e48:	d033      	beq.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8008e4a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008e4e:	d828      	bhi.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008e50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008e54:	d01a      	beq.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8008e56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008e5a:	d822      	bhi.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d003      	beq.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8008e60:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e64:	d007      	beq.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8008e66:	e01c      	b.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e68:	4b50      	ldr	r3, [pc, #320]	@ (8008fac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e6c:	4a4f      	ldr	r2, [pc, #316]	@ (8008fac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e74:	e01e      	b.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e7a:	3308      	adds	r3, #8
 8008e7c:	2100      	movs	r1, #0
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f002 f994 	bl	800b1ac <RCCEx_PLL2_Config>
 8008e84:	4603      	mov	r3, r0
 8008e86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008e8a:	e013      	b.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e90:	3328      	adds	r3, #40	@ 0x28
 8008e92:	2100      	movs	r1, #0
 8008e94:	4618      	mov	r0, r3
 8008e96:	f002 fa3b 	bl	800b310 <RCCEx_PLL3_Config>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008ea0:	e008      	b.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008ea8:	e004      	b.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008eaa:	bf00      	nop
 8008eac:	e002      	b.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008eae:	bf00      	nop
 8008eb0:	e000      	b.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008eb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008eb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d10b      	bne.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008ebc:	4b3b      	ldr	r3, [pc, #236]	@ (8008fac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ec0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ec8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008ecc:	4a37      	ldr	r2, [pc, #220]	@ (8008fac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ece:	430b      	orrs	r3, r1
 8008ed0:	6593      	str	r3, [r2, #88]	@ 0x58
 8008ed2:	e003      	b.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ed4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ed8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008ee8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008eec:	2300      	movs	r3, #0
 8008eee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008ef2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	d05d      	beq.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f00:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008f04:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008f08:	d03b      	beq.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008f0a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008f0e:	d834      	bhi.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008f10:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008f14:	d037      	beq.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8008f16:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008f1a:	d82e      	bhi.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008f1c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008f20:	d033      	beq.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8008f22:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008f26:	d828      	bhi.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008f28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f2c:	d01a      	beq.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8008f2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f32:	d822      	bhi.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d003      	beq.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008f38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008f3c:	d007      	beq.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008f3e:	e01c      	b.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f40:	4b1a      	ldr	r3, [pc, #104]	@ (8008fac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f44:	4a19      	ldr	r2, [pc, #100]	@ (8008fac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f4c:	e01e      	b.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f52:	3308      	adds	r3, #8
 8008f54:	2100      	movs	r1, #0
 8008f56:	4618      	mov	r0, r3
 8008f58:	f002 f928 	bl	800b1ac <RCCEx_PLL2_Config>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008f62:	e013      	b.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f68:	3328      	adds	r3, #40	@ 0x28
 8008f6a:	2100      	movs	r1, #0
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f002 f9cf 	bl	800b310 <RCCEx_PLL3_Config>
 8008f72:	4603      	mov	r3, r0
 8008f74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f78:	e008      	b.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008f80:	e004      	b.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008f82:	bf00      	nop
 8008f84:	e002      	b.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008f86:	bf00      	nop
 8008f88:	e000      	b.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008f8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d10d      	bne.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008f94:	4b05      	ldr	r3, [pc, #20]	@ (8008fac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f98:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fa0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008fa4:	4a01      	ldr	r2, [pc, #4]	@ (8008fac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008fa6:	430b      	orrs	r3, r1
 8008fa8:	6593      	str	r3, [r2, #88]	@ 0x58
 8008faa:	e005      	b.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008fac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fb0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008fb4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008fc4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008fc8:	2300      	movs	r3, #0
 8008fca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008fce:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008fd2:	460b      	mov	r3, r1
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	d03a      	beq.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8008fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fde:	2b30      	cmp	r3, #48	@ 0x30
 8008fe0:	d01f      	beq.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8008fe2:	2b30      	cmp	r3, #48	@ 0x30
 8008fe4:	d819      	bhi.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008fe6:	2b20      	cmp	r3, #32
 8008fe8:	d00c      	beq.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008fea:	2b20      	cmp	r3, #32
 8008fec:	d815      	bhi.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d019      	beq.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008ff2:	2b10      	cmp	r3, #16
 8008ff4:	d111      	bne.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ff6:	4baa      	ldr	r3, [pc, #680]	@ (80092a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ffa:	4aa9      	ldr	r2, [pc, #676]	@ (80092a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008ffc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009000:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009002:	e011      	b.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009004:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009008:	3308      	adds	r3, #8
 800900a:	2102      	movs	r1, #2
 800900c:	4618      	mov	r0, r3
 800900e:	f002 f8cd 	bl	800b1ac <RCCEx_PLL2_Config>
 8009012:	4603      	mov	r3, r0
 8009014:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009018:	e006      	b.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009020:	e002      	b.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009022:	bf00      	nop
 8009024:	e000      	b.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009026:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009028:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800902c:	2b00      	cmp	r3, #0
 800902e:	d10a      	bne.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009030:	4b9b      	ldr	r3, [pc, #620]	@ (80092a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009032:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009034:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800903c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800903e:	4a98      	ldr	r2, [pc, #608]	@ (80092a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009040:	430b      	orrs	r3, r1
 8009042:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009044:	e003      	b.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009046:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800904a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800904e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009056:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800905a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800905e:	2300      	movs	r3, #0
 8009060:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009064:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009068:	460b      	mov	r3, r1
 800906a:	4313      	orrs	r3, r2
 800906c:	d051      	beq.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800906e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009072:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009074:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009078:	d035      	beq.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800907a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800907e:	d82e      	bhi.n	80090de <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009080:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009084:	d031      	beq.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x442>
 8009086:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800908a:	d828      	bhi.n	80090de <HAL_RCCEx_PeriphCLKConfig+0x436>
 800908c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009090:	d01a      	beq.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8009092:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009096:	d822      	bhi.n	80090de <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009098:	2b00      	cmp	r3, #0
 800909a:	d003      	beq.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800909c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090a0:	d007      	beq.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80090a2:	e01c      	b.n	80090de <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090a4:	4b7e      	ldr	r3, [pc, #504]	@ (80092a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80090a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090a8:	4a7d      	ldr	r2, [pc, #500]	@ (80092a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80090aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80090ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80090b0:	e01c      	b.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80090b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090b6:	3308      	adds	r3, #8
 80090b8:	2100      	movs	r1, #0
 80090ba:	4618      	mov	r0, r3
 80090bc:	f002 f876 	bl	800b1ac <RCCEx_PLL2_Config>
 80090c0:	4603      	mov	r3, r0
 80090c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80090c6:	e011      	b.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80090c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090cc:	3328      	adds	r3, #40	@ 0x28
 80090ce:	2100      	movs	r1, #0
 80090d0:	4618      	mov	r0, r3
 80090d2:	f002 f91d 	bl	800b310 <RCCEx_PLL3_Config>
 80090d6:	4603      	mov	r3, r0
 80090d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80090dc:	e006      	b.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80090e4:	e002      	b.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80090e6:	bf00      	nop
 80090e8:	e000      	b.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80090ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d10a      	bne.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80090f4:	4b6a      	ldr	r3, [pc, #424]	@ (80092a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80090f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090f8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80090fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009102:	4a67      	ldr	r2, [pc, #412]	@ (80092a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009104:	430b      	orrs	r3, r1
 8009106:	6513      	str	r3, [r2, #80]	@ 0x50
 8009108:	e003      	b.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800910a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800910e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009112:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800911e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009122:	2300      	movs	r3, #0
 8009124:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009128:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800912c:	460b      	mov	r3, r1
 800912e:	4313      	orrs	r3, r2
 8009130:	d053      	beq.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009132:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009136:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009138:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800913c:	d033      	beq.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800913e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009142:	d82c      	bhi.n	800919e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009144:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009148:	d02f      	beq.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0x502>
 800914a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800914e:	d826      	bhi.n	800919e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009150:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009154:	d02b      	beq.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009156:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800915a:	d820      	bhi.n	800919e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800915c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009160:	d012      	beq.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8009162:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009166:	d81a      	bhi.n	800919e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009168:	2b00      	cmp	r3, #0
 800916a:	d022      	beq.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800916c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009170:	d115      	bne.n	800919e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009176:	3308      	adds	r3, #8
 8009178:	2101      	movs	r1, #1
 800917a:	4618      	mov	r0, r3
 800917c:	f002 f816 	bl	800b1ac <RCCEx_PLL2_Config>
 8009180:	4603      	mov	r3, r0
 8009182:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009186:	e015      	b.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800918c:	3328      	adds	r3, #40	@ 0x28
 800918e:	2101      	movs	r1, #1
 8009190:	4618      	mov	r0, r3
 8009192:	f002 f8bd 	bl	800b310 <RCCEx_PLL3_Config>
 8009196:	4603      	mov	r3, r0
 8009198:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800919c:	e00a      	b.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800919e:	2301      	movs	r3, #1
 80091a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80091a4:	e006      	b.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80091a6:	bf00      	nop
 80091a8:	e004      	b.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80091aa:	bf00      	nop
 80091ac:	e002      	b.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80091ae:	bf00      	nop
 80091b0:	e000      	b.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80091b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d10a      	bne.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80091bc:	4b38      	ldr	r3, [pc, #224]	@ (80092a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80091be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091c0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80091c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091ca:	4a35      	ldr	r2, [pc, #212]	@ (80092a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80091cc:	430b      	orrs	r3, r1
 80091ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80091d0:	e003      	b.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80091d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80091da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80091e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80091ea:	2300      	movs	r3, #0
 80091ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80091f0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80091f4:	460b      	mov	r3, r1
 80091f6:	4313      	orrs	r3, r2
 80091f8:	d058      	beq.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80091fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009202:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009206:	d033      	beq.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8009208:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800920c:	d82c      	bhi.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800920e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009212:	d02f      	beq.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8009214:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009218:	d826      	bhi.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800921a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800921e:	d02b      	beq.n	8009278 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009220:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009224:	d820      	bhi.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009226:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800922a:	d012      	beq.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800922c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009230:	d81a      	bhi.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009232:	2b00      	cmp	r3, #0
 8009234:	d022      	beq.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009236:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800923a:	d115      	bne.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800923c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009240:	3308      	adds	r3, #8
 8009242:	2101      	movs	r1, #1
 8009244:	4618      	mov	r0, r3
 8009246:	f001 ffb1 	bl	800b1ac <RCCEx_PLL2_Config>
 800924a:	4603      	mov	r3, r0
 800924c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009250:	e015      	b.n	800927e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009252:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009256:	3328      	adds	r3, #40	@ 0x28
 8009258:	2101      	movs	r1, #1
 800925a:	4618      	mov	r0, r3
 800925c:	f002 f858 	bl	800b310 <RCCEx_PLL3_Config>
 8009260:	4603      	mov	r3, r0
 8009262:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009266:	e00a      	b.n	800927e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009268:	2301      	movs	r3, #1
 800926a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800926e:	e006      	b.n	800927e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009270:	bf00      	nop
 8009272:	e004      	b.n	800927e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009274:	bf00      	nop
 8009276:	e002      	b.n	800927e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009278:	bf00      	nop
 800927a:	e000      	b.n	800927e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800927c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800927e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009282:	2b00      	cmp	r3, #0
 8009284:	d10e      	bne.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009286:	4b06      	ldr	r3, [pc, #24]	@ (80092a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800928a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800928e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009292:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009296:	4a02      	ldr	r2, [pc, #8]	@ (80092a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009298:	430b      	orrs	r3, r1
 800929a:	6593      	str	r3, [r2, #88]	@ 0x58
 800929c:	e006      	b.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x604>
 800929e:	bf00      	nop
 80092a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80092a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80092ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80092b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80092bc:	2300      	movs	r3, #0
 80092be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80092c2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80092c6:	460b      	mov	r3, r1
 80092c8:	4313      	orrs	r3, r2
 80092ca:	d037      	beq.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80092cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092d6:	d00e      	beq.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80092d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092dc:	d816      	bhi.n	800930c <HAL_RCCEx_PeriphCLKConfig+0x664>
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d018      	beq.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80092e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80092e6:	d111      	bne.n	800930c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092e8:	4bc4      	ldr	r3, [pc, #784]	@ (80095fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80092ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092ec:	4ac3      	ldr	r2, [pc, #780]	@ (80095fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80092ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80092f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80092f4:	e00f      	b.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80092f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092fa:	3308      	adds	r3, #8
 80092fc:	2101      	movs	r1, #1
 80092fe:	4618      	mov	r0, r3
 8009300:	f001 ff54 	bl	800b1ac <RCCEx_PLL2_Config>
 8009304:	4603      	mov	r3, r0
 8009306:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800930a:	e004      	b.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800930c:	2301      	movs	r3, #1
 800930e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009312:	e000      	b.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009314:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009316:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800931a:	2b00      	cmp	r3, #0
 800931c:	d10a      	bne.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800931e:	4bb7      	ldr	r3, [pc, #732]	@ (80095fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009320:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009322:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009326:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800932a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800932c:	4ab3      	ldr	r2, [pc, #716]	@ (80095fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800932e:	430b      	orrs	r3, r1
 8009330:	6513      	str	r3, [r2, #80]	@ 0x50
 8009332:	e003      	b.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009334:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009338:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800933c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009344:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009348:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800934c:	2300      	movs	r3, #0
 800934e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009352:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009356:	460b      	mov	r3, r1
 8009358:	4313      	orrs	r3, r2
 800935a:	d039      	beq.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800935c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009360:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009362:	2b03      	cmp	r3, #3
 8009364:	d81c      	bhi.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8009366:	a201      	add	r2, pc, #4	@ (adr r2, 800936c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800936c:	080093a9 	.word	0x080093a9
 8009370:	0800937d 	.word	0x0800937d
 8009374:	0800938b 	.word	0x0800938b
 8009378:	080093a9 	.word	0x080093a9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800937c:	4b9f      	ldr	r3, [pc, #636]	@ (80095fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800937e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009380:	4a9e      	ldr	r2, [pc, #632]	@ (80095fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009382:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009386:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009388:	e00f      	b.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800938a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800938e:	3308      	adds	r3, #8
 8009390:	2102      	movs	r1, #2
 8009392:	4618      	mov	r0, r3
 8009394:	f001 ff0a 	bl	800b1ac <RCCEx_PLL2_Config>
 8009398:	4603      	mov	r3, r0
 800939a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800939e:	e004      	b.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80093a0:	2301      	movs	r3, #1
 80093a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80093a6:	e000      	b.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80093a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d10a      	bne.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80093b2:	4b92      	ldr	r3, [pc, #584]	@ (80095fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093b6:	f023 0103 	bic.w	r1, r3, #3
 80093ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093c0:	4a8e      	ldr	r2, [pc, #568]	@ (80095fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093c2:	430b      	orrs	r3, r1
 80093c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80093c6:	e003      	b.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80093cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80093d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80093dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80093e0:	2300      	movs	r3, #0
 80093e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80093e6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80093ea:	460b      	mov	r3, r1
 80093ec:	4313      	orrs	r3, r2
 80093ee:	f000 8099 	beq.w	8009524 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80093f2:	4b83      	ldr	r3, [pc, #524]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a82      	ldr	r2, [pc, #520]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80093f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80093fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80093fe:	f7f9 f973 	bl	80026e8 <HAL_GetTick>
 8009402:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009406:	e00b      	b.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009408:	f7f9 f96e 	bl	80026e8 <HAL_GetTick>
 800940c:	4602      	mov	r2, r0
 800940e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009412:	1ad3      	subs	r3, r2, r3
 8009414:	2b64      	cmp	r3, #100	@ 0x64
 8009416:	d903      	bls.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8009418:	2303      	movs	r3, #3
 800941a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800941e:	e005      	b.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009420:	4b77      	ldr	r3, [pc, #476]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009428:	2b00      	cmp	r3, #0
 800942a:	d0ed      	beq.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800942c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009430:	2b00      	cmp	r3, #0
 8009432:	d173      	bne.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009434:	4b71      	ldr	r3, [pc, #452]	@ (80095fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009436:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009438:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800943c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009440:	4053      	eors	r3, r2
 8009442:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009446:	2b00      	cmp	r3, #0
 8009448:	d015      	beq.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800944a:	4b6c      	ldr	r3, [pc, #432]	@ (80095fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800944c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800944e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009452:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009456:	4b69      	ldr	r3, [pc, #420]	@ (80095fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800945a:	4a68      	ldr	r2, [pc, #416]	@ (80095fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800945c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009460:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009462:	4b66      	ldr	r3, [pc, #408]	@ (80095fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009464:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009466:	4a65      	ldr	r2, [pc, #404]	@ (80095fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009468:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800946c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800946e:	4a63      	ldr	r2, [pc, #396]	@ (80095fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009470:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009474:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009476:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800947a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800947e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009482:	d118      	bne.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009484:	f7f9 f930 	bl	80026e8 <HAL_GetTick>
 8009488:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800948c:	e00d      	b.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800948e:	f7f9 f92b 	bl	80026e8 <HAL_GetTick>
 8009492:	4602      	mov	r2, r0
 8009494:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009498:	1ad2      	subs	r2, r2, r3
 800949a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800949e:	429a      	cmp	r2, r3
 80094a0:	d903      	bls.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80094a2:	2303      	movs	r3, #3
 80094a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80094a8:	e005      	b.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80094aa:	4b54      	ldr	r3, [pc, #336]	@ (80095fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094ae:	f003 0302 	and.w	r3, r3, #2
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d0eb      	beq.n	800948e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80094b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d129      	bne.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80094be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80094c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80094ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80094ce:	d10e      	bne.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0x846>
 80094d0:	4b4a      	ldr	r3, [pc, #296]	@ (80095fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094d2:	691b      	ldr	r3, [r3, #16]
 80094d4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80094d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80094e0:	091a      	lsrs	r2, r3, #4
 80094e2:	4b48      	ldr	r3, [pc, #288]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80094e4:	4013      	ands	r3, r2
 80094e6:	4a45      	ldr	r2, [pc, #276]	@ (80095fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094e8:	430b      	orrs	r3, r1
 80094ea:	6113      	str	r3, [r2, #16]
 80094ec:	e005      	b.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0x852>
 80094ee:	4b43      	ldr	r3, [pc, #268]	@ (80095fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094f0:	691b      	ldr	r3, [r3, #16]
 80094f2:	4a42      	ldr	r2, [pc, #264]	@ (80095fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094f4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80094f8:	6113      	str	r3, [r2, #16]
 80094fa:	4b40      	ldr	r3, [pc, #256]	@ (80095fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094fc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80094fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009502:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009506:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800950a:	4a3c      	ldr	r2, [pc, #240]	@ (80095fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800950c:	430b      	orrs	r3, r1
 800950e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009510:	e008      	b.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009512:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009516:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800951a:	e003      	b.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800951c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009520:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009524:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800952c:	f002 0301 	and.w	r3, r2, #1
 8009530:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009534:	2300      	movs	r3, #0
 8009536:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800953a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800953e:	460b      	mov	r3, r1
 8009540:	4313      	orrs	r3, r2
 8009542:	f000 808f 	beq.w	8009664 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009546:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800954a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800954c:	2b28      	cmp	r3, #40	@ 0x28
 800954e:	d871      	bhi.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009550:	a201      	add	r2, pc, #4	@ (adr r2, 8009558 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8009552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009556:	bf00      	nop
 8009558:	0800963d 	.word	0x0800963d
 800955c:	08009635 	.word	0x08009635
 8009560:	08009635 	.word	0x08009635
 8009564:	08009635 	.word	0x08009635
 8009568:	08009635 	.word	0x08009635
 800956c:	08009635 	.word	0x08009635
 8009570:	08009635 	.word	0x08009635
 8009574:	08009635 	.word	0x08009635
 8009578:	08009609 	.word	0x08009609
 800957c:	08009635 	.word	0x08009635
 8009580:	08009635 	.word	0x08009635
 8009584:	08009635 	.word	0x08009635
 8009588:	08009635 	.word	0x08009635
 800958c:	08009635 	.word	0x08009635
 8009590:	08009635 	.word	0x08009635
 8009594:	08009635 	.word	0x08009635
 8009598:	0800961f 	.word	0x0800961f
 800959c:	08009635 	.word	0x08009635
 80095a0:	08009635 	.word	0x08009635
 80095a4:	08009635 	.word	0x08009635
 80095a8:	08009635 	.word	0x08009635
 80095ac:	08009635 	.word	0x08009635
 80095b0:	08009635 	.word	0x08009635
 80095b4:	08009635 	.word	0x08009635
 80095b8:	0800963d 	.word	0x0800963d
 80095bc:	08009635 	.word	0x08009635
 80095c0:	08009635 	.word	0x08009635
 80095c4:	08009635 	.word	0x08009635
 80095c8:	08009635 	.word	0x08009635
 80095cc:	08009635 	.word	0x08009635
 80095d0:	08009635 	.word	0x08009635
 80095d4:	08009635 	.word	0x08009635
 80095d8:	0800963d 	.word	0x0800963d
 80095dc:	08009635 	.word	0x08009635
 80095e0:	08009635 	.word	0x08009635
 80095e4:	08009635 	.word	0x08009635
 80095e8:	08009635 	.word	0x08009635
 80095ec:	08009635 	.word	0x08009635
 80095f0:	08009635 	.word	0x08009635
 80095f4:	08009635 	.word	0x08009635
 80095f8:	0800963d 	.word	0x0800963d
 80095fc:	58024400 	.word	0x58024400
 8009600:	58024800 	.word	0x58024800
 8009604:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009608:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800960c:	3308      	adds	r3, #8
 800960e:	2101      	movs	r1, #1
 8009610:	4618      	mov	r0, r3
 8009612:	f001 fdcb 	bl	800b1ac <RCCEx_PLL2_Config>
 8009616:	4603      	mov	r3, r0
 8009618:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800961c:	e00f      	b.n	800963e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800961e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009622:	3328      	adds	r3, #40	@ 0x28
 8009624:	2101      	movs	r1, #1
 8009626:	4618      	mov	r0, r3
 8009628:	f001 fe72 	bl	800b310 <RCCEx_PLL3_Config>
 800962c:	4603      	mov	r3, r0
 800962e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009632:	e004      	b.n	800963e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009634:	2301      	movs	r3, #1
 8009636:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800963a:	e000      	b.n	800963e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800963c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800963e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009642:	2b00      	cmp	r3, #0
 8009644:	d10a      	bne.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009646:	4bbf      	ldr	r3, [pc, #764]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800964a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800964e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009652:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009654:	4abb      	ldr	r2, [pc, #748]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009656:	430b      	orrs	r3, r1
 8009658:	6553      	str	r3, [r2, #84]	@ 0x54
 800965a:	e003      	b.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800965c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009660:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009664:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966c:	f002 0302 	and.w	r3, r2, #2
 8009670:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009674:	2300      	movs	r3, #0
 8009676:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800967a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800967e:	460b      	mov	r3, r1
 8009680:	4313      	orrs	r3, r2
 8009682:	d041      	beq.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009688:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800968a:	2b05      	cmp	r3, #5
 800968c:	d824      	bhi.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800968e:	a201      	add	r2, pc, #4	@ (adr r2, 8009694 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8009690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009694:	080096e1 	.word	0x080096e1
 8009698:	080096ad 	.word	0x080096ad
 800969c:	080096c3 	.word	0x080096c3
 80096a0:	080096e1 	.word	0x080096e1
 80096a4:	080096e1 	.word	0x080096e1
 80096a8:	080096e1 	.word	0x080096e1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80096ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096b0:	3308      	adds	r3, #8
 80096b2:	2101      	movs	r1, #1
 80096b4:	4618      	mov	r0, r3
 80096b6:	f001 fd79 	bl	800b1ac <RCCEx_PLL2_Config>
 80096ba:	4603      	mov	r3, r0
 80096bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80096c0:	e00f      	b.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80096c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096c6:	3328      	adds	r3, #40	@ 0x28
 80096c8:	2101      	movs	r1, #1
 80096ca:	4618      	mov	r0, r3
 80096cc:	f001 fe20 	bl	800b310 <RCCEx_PLL3_Config>
 80096d0:	4603      	mov	r3, r0
 80096d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80096d6:	e004      	b.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096d8:	2301      	movs	r3, #1
 80096da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80096de:	e000      	b.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80096e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d10a      	bne.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80096ea:	4b96      	ldr	r3, [pc, #600]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80096ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096ee:	f023 0107 	bic.w	r1, r3, #7
 80096f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096f8:	4a92      	ldr	r2, [pc, #584]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80096fa:	430b      	orrs	r3, r1
 80096fc:	6553      	str	r3, [r2, #84]	@ 0x54
 80096fe:	e003      	b.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009700:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009704:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009708:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800970c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009710:	f002 0304 	and.w	r3, r2, #4
 8009714:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009718:	2300      	movs	r3, #0
 800971a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800971e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009722:	460b      	mov	r3, r1
 8009724:	4313      	orrs	r3, r2
 8009726:	d044      	beq.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800972c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009730:	2b05      	cmp	r3, #5
 8009732:	d825      	bhi.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8009734:	a201      	add	r2, pc, #4	@ (adr r2, 800973c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8009736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800973a:	bf00      	nop
 800973c:	08009789 	.word	0x08009789
 8009740:	08009755 	.word	0x08009755
 8009744:	0800976b 	.word	0x0800976b
 8009748:	08009789 	.word	0x08009789
 800974c:	08009789 	.word	0x08009789
 8009750:	08009789 	.word	0x08009789
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009754:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009758:	3308      	adds	r3, #8
 800975a:	2101      	movs	r1, #1
 800975c:	4618      	mov	r0, r3
 800975e:	f001 fd25 	bl	800b1ac <RCCEx_PLL2_Config>
 8009762:	4603      	mov	r3, r0
 8009764:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009768:	e00f      	b.n	800978a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800976a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800976e:	3328      	adds	r3, #40	@ 0x28
 8009770:	2101      	movs	r1, #1
 8009772:	4618      	mov	r0, r3
 8009774:	f001 fdcc 	bl	800b310 <RCCEx_PLL3_Config>
 8009778:	4603      	mov	r3, r0
 800977a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800977e:	e004      	b.n	800978a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009780:	2301      	movs	r3, #1
 8009782:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009786:	e000      	b.n	800978a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8009788:	bf00      	nop
    }

    if (ret == HAL_OK)
 800978a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800978e:	2b00      	cmp	r3, #0
 8009790:	d10b      	bne.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009792:	4b6c      	ldr	r3, [pc, #432]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009796:	f023 0107 	bic.w	r1, r3, #7
 800979a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800979e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097a2:	4a68      	ldr	r2, [pc, #416]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80097a4:	430b      	orrs	r3, r1
 80097a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80097a8:	e003      	b.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80097ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80097b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ba:	f002 0320 	and.w	r3, r2, #32
 80097be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80097c2:	2300      	movs	r3, #0
 80097c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80097c8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80097cc:	460b      	mov	r3, r1
 80097ce:	4313      	orrs	r3, r2
 80097d0:	d055      	beq.n	800987e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80097d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80097da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80097de:	d033      	beq.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80097e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80097e4:	d82c      	bhi.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80097e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097ea:	d02f      	beq.n	800984c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80097ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097f0:	d826      	bhi.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80097f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80097f6:	d02b      	beq.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80097f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80097fc:	d820      	bhi.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80097fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009802:	d012      	beq.n	800982a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8009804:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009808:	d81a      	bhi.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800980a:	2b00      	cmp	r3, #0
 800980c:	d022      	beq.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800980e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009812:	d115      	bne.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009818:	3308      	adds	r3, #8
 800981a:	2100      	movs	r1, #0
 800981c:	4618      	mov	r0, r3
 800981e:	f001 fcc5 	bl	800b1ac <RCCEx_PLL2_Config>
 8009822:	4603      	mov	r3, r0
 8009824:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009828:	e015      	b.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800982a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800982e:	3328      	adds	r3, #40	@ 0x28
 8009830:	2102      	movs	r1, #2
 8009832:	4618      	mov	r0, r3
 8009834:	f001 fd6c 	bl	800b310 <RCCEx_PLL3_Config>
 8009838:	4603      	mov	r3, r0
 800983a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800983e:	e00a      	b.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009840:	2301      	movs	r3, #1
 8009842:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009846:	e006      	b.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009848:	bf00      	nop
 800984a:	e004      	b.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800984c:	bf00      	nop
 800984e:	e002      	b.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009850:	bf00      	nop
 8009852:	e000      	b.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009854:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009856:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800985a:	2b00      	cmp	r3, #0
 800985c:	d10b      	bne.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800985e:	4b39      	ldr	r3, [pc, #228]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009862:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009866:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800986a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800986e:	4a35      	ldr	r2, [pc, #212]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009870:	430b      	orrs	r3, r1
 8009872:	6553      	str	r3, [r2, #84]	@ 0x54
 8009874:	e003      	b.n	800987e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009876:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800987a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800987e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009886:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800988a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800988e:	2300      	movs	r3, #0
 8009890:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009894:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009898:	460b      	mov	r3, r1
 800989a:	4313      	orrs	r3, r2
 800989c:	d058      	beq.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800989e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80098a6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80098aa:	d033      	beq.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80098ac:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80098b0:	d82c      	bhi.n	800990c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80098b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098b6:	d02f      	beq.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80098b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098bc:	d826      	bhi.n	800990c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80098be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80098c2:	d02b      	beq.n	800991c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80098c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80098c8:	d820      	bhi.n	800990c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80098ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80098ce:	d012      	beq.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80098d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80098d4:	d81a      	bhi.n	800990c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d022      	beq.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80098da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098de:	d115      	bne.n	800990c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098e4:	3308      	adds	r3, #8
 80098e6:	2100      	movs	r1, #0
 80098e8:	4618      	mov	r0, r3
 80098ea:	f001 fc5f 	bl	800b1ac <RCCEx_PLL2_Config>
 80098ee:	4603      	mov	r3, r0
 80098f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80098f4:	e015      	b.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80098f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098fa:	3328      	adds	r3, #40	@ 0x28
 80098fc:	2102      	movs	r1, #2
 80098fe:	4618      	mov	r0, r3
 8009900:	f001 fd06 	bl	800b310 <RCCEx_PLL3_Config>
 8009904:	4603      	mov	r3, r0
 8009906:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800990a:	e00a      	b.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800990c:	2301      	movs	r3, #1
 800990e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009912:	e006      	b.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009914:	bf00      	nop
 8009916:	e004      	b.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009918:	bf00      	nop
 800991a:	e002      	b.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800991c:	bf00      	nop
 800991e:	e000      	b.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009920:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009922:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009926:	2b00      	cmp	r3, #0
 8009928:	d10e      	bne.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800992a:	4b06      	ldr	r3, [pc, #24]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800992c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800992e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009932:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009936:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800993a:	4a02      	ldr	r2, [pc, #8]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800993c:	430b      	orrs	r3, r1
 800993e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009940:	e006      	b.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8009942:	bf00      	nop
 8009944:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009948:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800994c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009950:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009958:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800995c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009960:	2300      	movs	r3, #0
 8009962:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009966:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800996a:	460b      	mov	r3, r1
 800996c:	4313      	orrs	r3, r2
 800996e:	d055      	beq.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009970:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009974:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009978:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800997c:	d033      	beq.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800997e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009982:	d82c      	bhi.n	80099de <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009984:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009988:	d02f      	beq.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800998a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800998e:	d826      	bhi.n	80099de <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009990:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009994:	d02b      	beq.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8009996:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800999a:	d820      	bhi.n	80099de <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800999c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80099a0:	d012      	beq.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80099a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80099a6:	d81a      	bhi.n	80099de <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d022      	beq.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80099ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099b0:	d115      	bne.n	80099de <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099b6:	3308      	adds	r3, #8
 80099b8:	2100      	movs	r1, #0
 80099ba:	4618      	mov	r0, r3
 80099bc:	f001 fbf6 	bl	800b1ac <RCCEx_PLL2_Config>
 80099c0:	4603      	mov	r3, r0
 80099c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80099c6:	e015      	b.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80099c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099cc:	3328      	adds	r3, #40	@ 0x28
 80099ce:	2102      	movs	r1, #2
 80099d0:	4618      	mov	r0, r3
 80099d2:	f001 fc9d 	bl	800b310 <RCCEx_PLL3_Config>
 80099d6:	4603      	mov	r3, r0
 80099d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80099dc:	e00a      	b.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099de:	2301      	movs	r3, #1
 80099e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80099e4:	e006      	b.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80099e6:	bf00      	nop
 80099e8:	e004      	b.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80099ea:	bf00      	nop
 80099ec:	e002      	b.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80099ee:	bf00      	nop
 80099f0:	e000      	b.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80099f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d10b      	bne.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80099fc:	4ba0      	ldr	r3, [pc, #640]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80099fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a00:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a08:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009a0c:	4a9c      	ldr	r2, [pc, #624]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009a0e:	430b      	orrs	r3, r1
 8009a10:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a12:	e003      	b.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a24:	f002 0308 	and.w	r3, r2, #8
 8009a28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009a32:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009a36:	460b      	mov	r3, r1
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	d01e      	beq.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8009a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a48:	d10c      	bne.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a4e:	3328      	adds	r3, #40	@ 0x28
 8009a50:	2102      	movs	r1, #2
 8009a52:	4618      	mov	r0, r3
 8009a54:	f001 fc5c 	bl	800b310 <RCCEx_PLL3_Config>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d002      	beq.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009a64:	4b86      	ldr	r3, [pc, #536]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a68:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a74:	4a82      	ldr	r2, [pc, #520]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009a76:	430b      	orrs	r3, r1
 8009a78:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a82:	f002 0310 	and.w	r3, r2, #16
 8009a86:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009a90:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009a94:	460b      	mov	r3, r1
 8009a96:	4313      	orrs	r3, r2
 8009a98:	d01e      	beq.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009aa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009aa6:	d10c      	bne.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009aac:	3328      	adds	r3, #40	@ 0x28
 8009aae:	2102      	movs	r1, #2
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f001 fc2d 	bl	800b310 <RCCEx_PLL3_Config>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d002      	beq.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8009abc:	2301      	movs	r3, #1
 8009abe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009ac2:	4b6f      	ldr	r3, [pc, #444]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ac6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009ad2:	4a6b      	ldr	r2, [pc, #428]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009ad4:	430b      	orrs	r3, r1
 8009ad6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009ae4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009aea:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009aee:	460b      	mov	r3, r1
 8009af0:	4313      	orrs	r3, r2
 8009af2:	d03e      	beq.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009af8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009afc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b00:	d022      	beq.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8009b02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b06:	d81b      	bhi.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d003      	beq.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8009b0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b10:	d00b      	beq.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8009b12:	e015      	b.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b18:	3308      	adds	r3, #8
 8009b1a:	2100      	movs	r1, #0
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f001 fb45 	bl	800b1ac <RCCEx_PLL2_Config>
 8009b22:	4603      	mov	r3, r0
 8009b24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009b28:	e00f      	b.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b2e:	3328      	adds	r3, #40	@ 0x28
 8009b30:	2102      	movs	r1, #2
 8009b32:	4618      	mov	r0, r3
 8009b34:	f001 fbec 	bl	800b310 <RCCEx_PLL3_Config>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009b3e:	e004      	b.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b40:	2301      	movs	r3, #1
 8009b42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009b46:	e000      	b.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8009b48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d10b      	bne.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009b52:	4b4b      	ldr	r3, [pc, #300]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b56:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009b5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009b62:	4a47      	ldr	r2, [pc, #284]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b64:	430b      	orrs	r3, r1
 8009b66:	6593      	str	r3, [r2, #88]	@ 0x58
 8009b68:	e003      	b.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b6e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009b7e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009b80:	2300      	movs	r3, #0
 8009b82:	677b      	str	r3, [r7, #116]	@ 0x74
 8009b84:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009b88:	460b      	mov	r3, r1
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	d03b      	beq.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b96:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009b9a:	d01f      	beq.n	8009bdc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8009b9c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009ba0:	d818      	bhi.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8009ba2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009ba6:	d003      	beq.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8009ba8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009bac:	d007      	beq.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8009bae:	e011      	b.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bb0:	4b33      	ldr	r3, [pc, #204]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bb4:	4a32      	ldr	r2, [pc, #200]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009bb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009bba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009bbc:	e00f      	b.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bc2:	3328      	adds	r3, #40	@ 0x28
 8009bc4:	2101      	movs	r1, #1
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f001 fba2 	bl	800b310 <RCCEx_PLL3_Config>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8009bd2:	e004      	b.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009bda:	e000      	b.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8009bdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d10b      	bne.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009be6:	4b26      	ldr	r3, [pc, #152]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009bf6:	4a22      	ldr	r2, [pc, #136]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009bf8:	430b      	orrs	r3, r1
 8009bfa:	6553      	str	r3, [r2, #84]	@ 0x54
 8009bfc:	e003      	b.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bfe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c02:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009c12:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009c14:	2300      	movs	r3, #0
 8009c16:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009c18:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	d034      	beq.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d003      	beq.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8009c2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c30:	d007      	beq.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8009c32:	e011      	b.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c34:	4b12      	ldr	r3, [pc, #72]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c38:	4a11      	ldr	r2, [pc, #68]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009c40:	e00e      	b.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c46:	3308      	adds	r3, #8
 8009c48:	2102      	movs	r1, #2
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f001 faae 	bl	800b1ac <RCCEx_PLL2_Config>
 8009c50:	4603      	mov	r3, r0
 8009c52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009c56:	e003      	b.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009c5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d10d      	bne.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009c68:	4b05      	ldr	r3, [pc, #20]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c6c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c76:	4a02      	ldr	r2, [pc, #8]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c78:	430b      	orrs	r3, r1
 8009c7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009c7c:	e006      	b.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8009c7e:	bf00      	nop
 8009c80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c94:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009c98:	663b      	str	r3, [r7, #96]	@ 0x60
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	667b      	str	r3, [r7, #100]	@ 0x64
 8009c9e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009ca2:	460b      	mov	r3, r1
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	d00c      	beq.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cac:	3328      	adds	r3, #40	@ 0x28
 8009cae:	2102      	movs	r1, #2
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f001 fb2d 	bl	800b310 <RCCEx_PLL3_Config>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d002      	beq.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cca:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009cce:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009cd4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009cd8:	460b      	mov	r3, r1
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	d036      	beq.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ce2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009ce4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ce8:	d018      	beq.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8009cea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009cee:	d811      	bhi.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009cf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cf4:	d014      	beq.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8009cf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cfa:	d80b      	bhi.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d011      	beq.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8009d00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d04:	d106      	bne.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d06:	4bb7      	ldr	r3, [pc, #732]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d0a:	4ab6      	ldr	r2, [pc, #728]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009d12:	e008      	b.n	8009d26 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d14:	2301      	movs	r3, #1
 8009d16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009d1a:	e004      	b.n	8009d26 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009d1c:	bf00      	nop
 8009d1e:	e002      	b.n	8009d26 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009d20:	bf00      	nop
 8009d22:	e000      	b.n	8009d26 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009d24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d10a      	bne.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009d2e:	4bad      	ldr	r3, [pc, #692]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d32:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009d3c:	4aa9      	ldr	r2, [pc, #676]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d3e:	430b      	orrs	r3, r1
 8009d40:	6553      	str	r3, [r2, #84]	@ 0x54
 8009d42:	e003      	b.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d54:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009d58:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	657b      	str	r3, [r7, #84]	@ 0x54
 8009d5e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009d62:	460b      	mov	r3, r1
 8009d64:	4313      	orrs	r3, r2
 8009d66:	d009      	beq.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009d68:	4b9e      	ldr	r3, [pc, #632]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d6c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d76:	4a9b      	ldr	r2, [pc, #620]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d78:	430b      	orrs	r3, r1
 8009d7a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d84:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009d88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d8e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009d92:	460b      	mov	r3, r1
 8009d94:	4313      	orrs	r3, r2
 8009d96:	d009      	beq.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009d98:	4b92      	ldr	r3, [pc, #584]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d9c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009da4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009da6:	4a8f      	ldr	r2, [pc, #572]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009da8:	430b      	orrs	r3, r1
 8009daa:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009db8:	643b      	str	r3, [r7, #64]	@ 0x40
 8009dba:	2300      	movs	r3, #0
 8009dbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8009dbe:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009dc2:	460b      	mov	r3, r1
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	d00e      	beq.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009dc8:	4b86      	ldr	r3, [pc, #536]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009dca:	691b      	ldr	r3, [r3, #16]
 8009dcc:	4a85      	ldr	r2, [pc, #532]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009dce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009dd2:	6113      	str	r3, [r2, #16]
 8009dd4:	4b83      	ldr	r3, [pc, #524]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009dd6:	6919      	ldr	r1, [r3, #16]
 8009dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ddc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009de0:	4a80      	ldr	r2, [pc, #512]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009de2:	430b      	orrs	r3, r1
 8009de4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dee:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009df2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009df4:	2300      	movs	r3, #0
 8009df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009df8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	d009      	beq.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009e02:	4b78      	ldr	r3, [pc, #480]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e06:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e10:	4a74      	ldr	r2, [pc, #464]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e12:	430b      	orrs	r3, r1
 8009e14:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009e22:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e24:	2300      	movs	r3, #0
 8009e26:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e28:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	d00a      	beq.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009e32:	4b6c      	ldr	r3, [pc, #432]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e36:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e42:	4a68      	ldr	r2, [pc, #416]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e44:	430b      	orrs	r3, r1
 8009e46:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e50:	2100      	movs	r1, #0
 8009e52:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009e54:	f003 0301 	and.w	r3, r3, #1
 8009e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e5a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009e5e:	460b      	mov	r3, r1
 8009e60:	4313      	orrs	r3, r2
 8009e62:	d011      	beq.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e68:	3308      	adds	r3, #8
 8009e6a:	2100      	movs	r1, #0
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f001 f99d 	bl	800b1ac <RCCEx_PLL2_Config>
 8009e72:	4603      	mov	r3, r0
 8009e74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009e78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d003      	beq.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e90:	2100      	movs	r1, #0
 8009e92:	6239      	str	r1, [r7, #32]
 8009e94:	f003 0302 	and.w	r3, r3, #2
 8009e98:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e9a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	d011      	beq.n	8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ea8:	3308      	adds	r3, #8
 8009eaa:	2101      	movs	r1, #1
 8009eac:	4618      	mov	r0, r3
 8009eae:	f001 f97d 	bl	800b1ac <RCCEx_PLL2_Config>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009eb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d003      	beq.n	8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ec0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ec4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed0:	2100      	movs	r1, #0
 8009ed2:	61b9      	str	r1, [r7, #24]
 8009ed4:	f003 0304 	and.w	r3, r3, #4
 8009ed8:	61fb      	str	r3, [r7, #28]
 8009eda:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009ede:	460b      	mov	r3, r1
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	d011      	beq.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ee8:	3308      	adds	r3, #8
 8009eea:	2102      	movs	r1, #2
 8009eec:	4618      	mov	r0, r3
 8009eee:	f001 f95d 	bl	800b1ac <RCCEx_PLL2_Config>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009ef8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d003      	beq.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f10:	2100      	movs	r1, #0
 8009f12:	6139      	str	r1, [r7, #16]
 8009f14:	f003 0308 	and.w	r3, r3, #8
 8009f18:	617b      	str	r3, [r7, #20]
 8009f1a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009f1e:	460b      	mov	r3, r1
 8009f20:	4313      	orrs	r3, r2
 8009f22:	d011      	beq.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f28:	3328      	adds	r3, #40	@ 0x28
 8009f2a:	2100      	movs	r1, #0
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f001 f9ef 	bl	800b310 <RCCEx_PLL3_Config>
 8009f32:	4603      	mov	r3, r0
 8009f34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8009f38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d003      	beq.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f50:	2100      	movs	r1, #0
 8009f52:	60b9      	str	r1, [r7, #8]
 8009f54:	f003 0310 	and.w	r3, r3, #16
 8009f58:	60fb      	str	r3, [r7, #12]
 8009f5a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009f5e:	460b      	mov	r3, r1
 8009f60:	4313      	orrs	r3, r2
 8009f62:	d011      	beq.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f68:	3328      	adds	r3, #40	@ 0x28
 8009f6a:	2101      	movs	r1, #1
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f001 f9cf 	bl	800b310 <RCCEx_PLL3_Config>
 8009f72:	4603      	mov	r3, r0
 8009f74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009f78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d003      	beq.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f90:	2100      	movs	r1, #0
 8009f92:	6039      	str	r1, [r7, #0]
 8009f94:	f003 0320 	and.w	r3, r3, #32
 8009f98:	607b      	str	r3, [r7, #4]
 8009f9a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009f9e:	460b      	mov	r3, r1
 8009fa0:	4313      	orrs	r3, r2
 8009fa2:	d011      	beq.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fa8:	3328      	adds	r3, #40	@ 0x28
 8009faa:	2102      	movs	r1, #2
 8009fac:	4618      	mov	r0, r3
 8009fae:	f001 f9af 	bl	800b310 <RCCEx_PLL3_Config>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009fb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d003      	beq.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009fc4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8009fc8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d101      	bne.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	e000      	b.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8009fd4:	2301      	movs	r3, #1
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009fe2:	bf00      	nop
 8009fe4:	58024400 	.word	0x58024400

08009fe8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b090      	sub	sp, #64	@ 0x40
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009ff2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ff6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009ffa:	430b      	orrs	r3, r1
 8009ffc:	f040 8094 	bne.w	800a128 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a000:	4b9b      	ldr	r3, [pc, #620]	@ (800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a002:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a004:	f003 0307 	and.w	r3, r3, #7
 800a008:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a00c:	2b04      	cmp	r3, #4
 800a00e:	f200 8087 	bhi.w	800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a012:	a201      	add	r2, pc, #4	@ (adr r2, 800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a018:	0800a02d 	.word	0x0800a02d
 800a01c:	0800a055 	.word	0x0800a055
 800a020:	0800a07d 	.word	0x0800a07d
 800a024:	0800a119 	.word	0x0800a119
 800a028:	0800a0a5 	.word	0x0800a0a5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a02c:	4b90      	ldr	r3, [pc, #576]	@ (800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a034:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a038:	d108      	bne.n	800a04c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a03a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a03e:	4618      	mov	r0, r3
 800a040:	f000 ff62 	bl	800af08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a046:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a048:	f000 bc93 	b.w	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a04c:	2300      	movs	r3, #0
 800a04e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a050:	f000 bc8f 	b.w	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a054:	4b86      	ldr	r3, [pc, #536]	@ (800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a05c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a060:	d108      	bne.n	800a074 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a062:	f107 0318 	add.w	r3, r7, #24
 800a066:	4618      	mov	r0, r3
 800a068:	f000 fca6 	bl	800a9b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a06c:	69bb      	ldr	r3, [r7, #24]
 800a06e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a070:	f000 bc7f 	b.w	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a074:	2300      	movs	r3, #0
 800a076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a078:	f000 bc7b 	b.w	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a07c:	4b7c      	ldr	r3, [pc, #496]	@ (800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a084:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a088:	d108      	bne.n	800a09c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a08a:	f107 030c 	add.w	r3, r7, #12
 800a08e:	4618      	mov	r0, r3
 800a090:	f000 fde6 	bl	800ac60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a098:	f000 bc6b 	b.w	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a09c:	2300      	movs	r3, #0
 800a09e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0a0:	f000 bc67 	b.w	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a0a4:	4b72      	ldr	r3, [pc, #456]	@ (800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a0a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a0ac:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a0ae:	4b70      	ldr	r3, [pc, #448]	@ (800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f003 0304 	and.w	r3, r3, #4
 800a0b6:	2b04      	cmp	r3, #4
 800a0b8:	d10c      	bne.n	800a0d4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a0ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d109      	bne.n	800a0d4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a0c0:	4b6b      	ldr	r3, [pc, #428]	@ (800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	08db      	lsrs	r3, r3, #3
 800a0c6:	f003 0303 	and.w	r3, r3, #3
 800a0ca:	4a6a      	ldr	r2, [pc, #424]	@ (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a0cc:	fa22 f303 	lsr.w	r3, r2, r3
 800a0d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a0d2:	e01f      	b.n	800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a0d4:	4b66      	ldr	r3, [pc, #408]	@ (800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a0e0:	d106      	bne.n	800a0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a0e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a0e8:	d102      	bne.n	800a0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a0ea:	4b63      	ldr	r3, [pc, #396]	@ (800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a0ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a0ee:	e011      	b.n	800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a0f0:	4b5f      	ldr	r3, [pc, #380]	@ (800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a0fc:	d106      	bne.n	800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a0fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a100:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a104:	d102      	bne.n	800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a106:	4b5d      	ldr	r3, [pc, #372]	@ (800a27c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a108:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a10a:	e003      	b.n	800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a10c:	2300      	movs	r3, #0
 800a10e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a110:	f000 bc2f 	b.w	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a114:	f000 bc2d 	b.w	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a118:	4b59      	ldr	r3, [pc, #356]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a11a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a11c:	f000 bc29 	b.w	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a120:	2300      	movs	r3, #0
 800a122:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a124:	f000 bc25 	b.w	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a128:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a12c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a130:	430b      	orrs	r3, r1
 800a132:	f040 80a7 	bne.w	800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a136:	4b4e      	ldr	r3, [pc, #312]	@ (800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a13a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a13e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a142:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a146:	d054      	beq.n	800a1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800a148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a14a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a14e:	f200 808b 	bhi.w	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a154:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a158:	f000 8083 	beq.w	800a262 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800a15c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a15e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a162:	f200 8081 	bhi.w	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a168:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a16c:	d02f      	beq.n	800a1ce <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a16e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a170:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a174:	d878      	bhi.n	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d004      	beq.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800a17c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a17e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a182:	d012      	beq.n	800a1aa <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800a184:	e070      	b.n	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a186:	4b3a      	ldr	r3, [pc, #232]	@ (800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a18e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a192:	d107      	bne.n	800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a194:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a198:	4618      	mov	r0, r3
 800a19a:	f000 feb5 	bl	800af08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a19e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1a2:	e3e6      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1a8:	e3e3      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a1aa:	4b31      	ldr	r3, [pc, #196]	@ (800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a1b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a1b6:	d107      	bne.n	800a1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1b8:	f107 0318 	add.w	r3, r7, #24
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f000 fbfb 	bl	800a9b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a1c2:	69bb      	ldr	r3, [r7, #24]
 800a1c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1c6:	e3d4      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1cc:	e3d1      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a1ce:	4b28      	ldr	r3, [pc, #160]	@ (800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a1d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a1da:	d107      	bne.n	800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1dc:	f107 030c 	add.w	r3, r7, #12
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f000 fd3d 	bl	800ac60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1ea:	e3c2      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1f0:	e3bf      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a1f2:	4b1f      	ldr	r3, [pc, #124]	@ (800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a1f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a1fa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a1fc:	4b1c      	ldr	r3, [pc, #112]	@ (800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f003 0304 	and.w	r3, r3, #4
 800a204:	2b04      	cmp	r3, #4
 800a206:	d10c      	bne.n	800a222 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800a208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d109      	bne.n	800a222 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a20e:	4b18      	ldr	r3, [pc, #96]	@ (800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	08db      	lsrs	r3, r3, #3
 800a214:	f003 0303 	and.w	r3, r3, #3
 800a218:	4a16      	ldr	r2, [pc, #88]	@ (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a21a:	fa22 f303 	lsr.w	r3, r2, r3
 800a21e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a220:	e01e      	b.n	800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a222:	4b13      	ldr	r3, [pc, #76]	@ (800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a22a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a22e:	d106      	bne.n	800a23e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800a230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a232:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a236:	d102      	bne.n	800a23e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a238:	4b0f      	ldr	r3, [pc, #60]	@ (800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a23a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a23c:	e010      	b.n	800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a23e:	4b0c      	ldr	r3, [pc, #48]	@ (800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a246:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a24a:	d106      	bne.n	800a25a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800a24c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a24e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a252:	d102      	bne.n	800a25a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a254:	4b09      	ldr	r3, [pc, #36]	@ (800a27c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a256:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a258:	e002      	b.n	800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a25a:	2300      	movs	r3, #0
 800a25c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a25e:	e388      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a260:	e387      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a262:	4b07      	ldr	r3, [pc, #28]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a264:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a266:	e384      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a268:	2300      	movs	r3, #0
 800a26a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a26c:	e381      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a26e:	bf00      	nop
 800a270:	58024400 	.word	0x58024400
 800a274:	03d09000 	.word	0x03d09000
 800a278:	003d0900 	.word	0x003d0900
 800a27c:	017d7840 	.word	0x017d7840
 800a280:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a284:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a288:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a28c:	430b      	orrs	r3, r1
 800a28e:	f040 809c 	bne.w	800a3ca <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a292:	4b9e      	ldr	r3, [pc, #632]	@ (800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a296:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a29a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a29c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a29e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a2a2:	d054      	beq.n	800a34e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800a2a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a2aa:	f200 808b 	bhi.w	800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a2ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a2b4:	f000 8083 	beq.w	800a3be <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800a2b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a2be:	f200 8081 	bhi.w	800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a2c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a2c8:	d02f      	beq.n	800a32a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800a2ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a2d0:	d878      	bhi.n	800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a2d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d004      	beq.n	800a2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800a2d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a2de:	d012      	beq.n	800a306 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800a2e0:	e070      	b.n	800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a2e2:	4b8a      	ldr	r3, [pc, #552]	@ (800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a2ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a2ee:	d107      	bne.n	800a300 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a2f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f000 fe07 	bl	800af08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a2fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2fe:	e338      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a300:	2300      	movs	r3, #0
 800a302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a304:	e335      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a306:	4b81      	ldr	r3, [pc, #516]	@ (800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a30e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a312:	d107      	bne.n	800a324 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a314:	f107 0318 	add.w	r3, r7, #24
 800a318:	4618      	mov	r0, r3
 800a31a:	f000 fb4d 	bl	800a9b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a31e:	69bb      	ldr	r3, [r7, #24]
 800a320:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a322:	e326      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a324:	2300      	movs	r3, #0
 800a326:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a328:	e323      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a32a:	4b78      	ldr	r3, [pc, #480]	@ (800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a332:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a336:	d107      	bne.n	800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a338:	f107 030c 	add.w	r3, r7, #12
 800a33c:	4618      	mov	r0, r3
 800a33e:	f000 fc8f 	bl	800ac60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a346:	e314      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a348:	2300      	movs	r3, #0
 800a34a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a34c:	e311      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a34e:	4b6f      	ldr	r3, [pc, #444]	@ (800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a352:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a356:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a358:	4b6c      	ldr	r3, [pc, #432]	@ (800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f003 0304 	and.w	r3, r3, #4
 800a360:	2b04      	cmp	r3, #4
 800a362:	d10c      	bne.n	800a37e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a366:	2b00      	cmp	r3, #0
 800a368:	d109      	bne.n	800a37e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a36a:	4b68      	ldr	r3, [pc, #416]	@ (800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	08db      	lsrs	r3, r3, #3
 800a370:	f003 0303 	and.w	r3, r3, #3
 800a374:	4a66      	ldr	r2, [pc, #408]	@ (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a376:	fa22 f303 	lsr.w	r3, r2, r3
 800a37a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a37c:	e01e      	b.n	800a3bc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a37e:	4b63      	ldr	r3, [pc, #396]	@ (800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a386:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a38a:	d106      	bne.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a38c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a38e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a392:	d102      	bne.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a394:	4b5f      	ldr	r3, [pc, #380]	@ (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a396:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a398:	e010      	b.n	800a3bc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a39a:	4b5c      	ldr	r3, [pc, #368]	@ (800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a3a6:	d106      	bne.n	800a3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800a3a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3ae:	d102      	bne.n	800a3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a3b0:	4b59      	ldr	r3, [pc, #356]	@ (800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3b4:	e002      	b.n	800a3bc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a3ba:	e2da      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a3bc:	e2d9      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a3be:	4b57      	ldr	r3, [pc, #348]	@ (800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a3c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3c2:	e2d6      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3c8:	e2d3      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a3ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3ce:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a3d2:	430b      	orrs	r3, r1
 800a3d4:	f040 80a7 	bne.w	800a526 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a3d8:	4b4c      	ldr	r3, [pc, #304]	@ (800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a3da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3dc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a3e0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a3e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a3e8:	d055      	beq.n	800a496 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800a3ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a3f0:	f200 8096 	bhi.w	800a520 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a3f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a3fa:	f000 8084 	beq.w	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800a3fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a400:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a404:	f200 808c 	bhi.w	800a520 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a40a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a40e:	d030      	beq.n	800a472 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800a410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a412:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a416:	f200 8083 	bhi.w	800a520 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a41a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d004      	beq.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800a420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a422:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a426:	d012      	beq.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800a428:	e07a      	b.n	800a520 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a42a:	4b38      	ldr	r3, [pc, #224]	@ (800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a432:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a436:	d107      	bne.n	800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a438:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a43c:	4618      	mov	r0, r3
 800a43e:	f000 fd63 	bl	800af08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a444:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a446:	e294      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a448:	2300      	movs	r3, #0
 800a44a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a44c:	e291      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a44e:	4b2f      	ldr	r3, [pc, #188]	@ (800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a456:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a45a:	d107      	bne.n	800a46c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a45c:	f107 0318 	add.w	r3, r7, #24
 800a460:	4618      	mov	r0, r3
 800a462:	f000 faa9 	bl	800a9b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a466:	69bb      	ldr	r3, [r7, #24]
 800a468:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a46a:	e282      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a46c:	2300      	movs	r3, #0
 800a46e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a470:	e27f      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a472:	4b26      	ldr	r3, [pc, #152]	@ (800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a47a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a47e:	d107      	bne.n	800a490 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a480:	f107 030c 	add.w	r3, r7, #12
 800a484:	4618      	mov	r0, r3
 800a486:	f000 fbeb 	bl	800ac60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a48e:	e270      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a490:	2300      	movs	r3, #0
 800a492:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a494:	e26d      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a496:	4b1d      	ldr	r3, [pc, #116]	@ (800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a49a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a49e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a4a0:	4b1a      	ldr	r3, [pc, #104]	@ (800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f003 0304 	and.w	r3, r3, #4
 800a4a8:	2b04      	cmp	r3, #4
 800a4aa:	d10c      	bne.n	800a4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800a4ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d109      	bne.n	800a4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4b2:	4b16      	ldr	r3, [pc, #88]	@ (800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	08db      	lsrs	r3, r3, #3
 800a4b8:	f003 0303 	and.w	r3, r3, #3
 800a4bc:	4a14      	ldr	r2, [pc, #80]	@ (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a4be:	fa22 f303 	lsr.w	r3, r2, r3
 800a4c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4c4:	e01e      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a4c6:	4b11      	ldr	r3, [pc, #68]	@ (800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4d2:	d106      	bne.n	800a4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800a4d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a4da:	d102      	bne.n	800a4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a4dc:	4b0d      	ldr	r3, [pc, #52]	@ (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a4de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4e0:	e010      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a4e2:	4b0a      	ldr	r3, [pc, #40]	@ (800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4ee:	d106      	bne.n	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800a4f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4f6:	d102      	bne.n	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a4f8:	4b07      	ldr	r3, [pc, #28]	@ (800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a4fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4fc:	e002      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a4fe:	2300      	movs	r3, #0
 800a500:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a502:	e236      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a504:	e235      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a506:	4b05      	ldr	r3, [pc, #20]	@ (800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a508:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a50a:	e232      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a50c:	58024400 	.word	0x58024400
 800a510:	03d09000 	.word	0x03d09000
 800a514:	003d0900 	.word	0x003d0900
 800a518:	017d7840 	.word	0x017d7840
 800a51c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800a520:	2300      	movs	r3, #0
 800a522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a524:	e225      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a526:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a52a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a52e:	430b      	orrs	r3, r1
 800a530:	f040 8085 	bne.w	800a63e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a534:	4b9c      	ldr	r3, [pc, #624]	@ (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a536:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a538:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a53c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a53e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a540:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a544:	d06b      	beq.n	800a61e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800a546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a548:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a54c:	d874      	bhi.n	800a638 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a54e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a550:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a554:	d056      	beq.n	800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800a556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a558:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a55c:	d86c      	bhi.n	800a638 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a55e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a560:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a564:	d03b      	beq.n	800a5de <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800a566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a568:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a56c:	d864      	bhi.n	800a638 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a56e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a570:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a574:	d021      	beq.n	800a5ba <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800a576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a578:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a57c:	d85c      	bhi.n	800a638 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a57e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a580:	2b00      	cmp	r3, #0
 800a582:	d004      	beq.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800a584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a586:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a58a:	d004      	beq.n	800a596 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800a58c:	e054      	b.n	800a638 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a58e:	f7fe fb1d 	bl	8008bcc <HAL_RCC_GetPCLK1Freq>
 800a592:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a594:	e1ed      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a596:	4b84      	ldr	r3, [pc, #528]	@ (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a59e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a5a2:	d107      	bne.n	800a5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5a4:	f107 0318 	add.w	r3, r7, #24
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f000 fa05 	bl	800a9b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a5ae:	69fb      	ldr	r3, [r7, #28]
 800a5b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5b2:	e1de      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5b8:	e1db      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a5ba:	4b7b      	ldr	r3, [pc, #492]	@ (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a5c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5c6:	d107      	bne.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5c8:	f107 030c 	add.w	r3, r7, #12
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f000 fb47 	bl	800ac60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5d6:	e1cc      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5dc:	e1c9      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a5de:	4b72      	ldr	r3, [pc, #456]	@ (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f003 0304 	and.w	r3, r3, #4
 800a5e6:	2b04      	cmp	r3, #4
 800a5e8:	d109      	bne.n	800a5fe <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5ea:	4b6f      	ldr	r3, [pc, #444]	@ (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	08db      	lsrs	r3, r3, #3
 800a5f0:	f003 0303 	and.w	r3, r3, #3
 800a5f4:	4a6d      	ldr	r2, [pc, #436]	@ (800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a5f6:	fa22 f303 	lsr.w	r3, r2, r3
 800a5fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5fc:	e1b9      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a5fe:	2300      	movs	r3, #0
 800a600:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a602:	e1b6      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a604:	4b68      	ldr	r3, [pc, #416]	@ (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a60c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a610:	d102      	bne.n	800a618 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800a612:	4b67      	ldr	r3, [pc, #412]	@ (800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a616:	e1ac      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a618:	2300      	movs	r3, #0
 800a61a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a61c:	e1a9      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a61e:	4b62      	ldr	r3, [pc, #392]	@ (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a626:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a62a:	d102      	bne.n	800a632 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800a62c:	4b61      	ldr	r3, [pc, #388]	@ (800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a62e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a630:	e19f      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a632:	2300      	movs	r3, #0
 800a634:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a636:	e19c      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a638:	2300      	movs	r3, #0
 800a63a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a63c:	e199      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a63e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a642:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a646:	430b      	orrs	r3, r1
 800a648:	d173      	bne.n	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a64a:	4b57      	ldr	r3, [pc, #348]	@ (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a64c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a64e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a652:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a656:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a65a:	d02f      	beq.n	800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800a65c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a65e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a662:	d863      	bhi.n	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800a664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a666:	2b00      	cmp	r3, #0
 800a668:	d004      	beq.n	800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800a66a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a66c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a670:	d012      	beq.n	800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800a672:	e05b      	b.n	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a674:	4b4c      	ldr	r3, [pc, #304]	@ (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a67c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a680:	d107      	bne.n	800a692 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a682:	f107 0318 	add.w	r3, r7, #24
 800a686:	4618      	mov	r0, r3
 800a688:	f000 f996 	bl	800a9b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a68c:	69bb      	ldr	r3, [r7, #24]
 800a68e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a690:	e16f      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a692:	2300      	movs	r3, #0
 800a694:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a696:	e16c      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a698:	4b43      	ldr	r3, [pc, #268]	@ (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a6a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6a4:	d107      	bne.n	800a6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6a6:	f107 030c 	add.w	r3, r7, #12
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f000 fad8 	bl	800ac60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6b4:	e15d      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6ba:	e15a      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a6bc:	4b3a      	ldr	r3, [pc, #232]	@ (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a6be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a6c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a6c4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a6c6:	4b38      	ldr	r3, [pc, #224]	@ (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f003 0304 	and.w	r3, r3, #4
 800a6ce:	2b04      	cmp	r3, #4
 800a6d0:	d10c      	bne.n	800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800a6d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d109      	bne.n	800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a6d8:	4b33      	ldr	r3, [pc, #204]	@ (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	08db      	lsrs	r3, r3, #3
 800a6de:	f003 0303 	and.w	r3, r3, #3
 800a6e2:	4a32      	ldr	r2, [pc, #200]	@ (800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a6e4:	fa22 f303 	lsr.w	r3, r2, r3
 800a6e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6ea:	e01e      	b.n	800a72a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a6ec:	4b2e      	ldr	r3, [pc, #184]	@ (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6f8:	d106      	bne.n	800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800a6fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a700:	d102      	bne.n	800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a702:	4b2b      	ldr	r3, [pc, #172]	@ (800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a704:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a706:	e010      	b.n	800a72a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a708:	4b27      	ldr	r3, [pc, #156]	@ (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a710:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a714:	d106      	bne.n	800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800a716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a718:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a71c:	d102      	bne.n	800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a71e:	4b25      	ldr	r3, [pc, #148]	@ (800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a720:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a722:	e002      	b.n	800a72a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a724:	2300      	movs	r3, #0
 800a726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a728:	e123      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a72a:	e122      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a72c:	2300      	movs	r3, #0
 800a72e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a730:	e11f      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a732:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a736:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a73a:	430b      	orrs	r3, r1
 800a73c:	d13c      	bne.n	800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a73e:	4b1a      	ldr	r3, [pc, #104]	@ (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a742:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a746:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d004      	beq.n	800a758 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800a74e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a750:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a754:	d012      	beq.n	800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800a756:	e023      	b.n	800a7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a758:	4b13      	ldr	r3, [pc, #76]	@ (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a760:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a764:	d107      	bne.n	800a776 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a766:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a76a:	4618      	mov	r0, r3
 800a76c:	f000 fbcc 	bl	800af08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a774:	e0fd      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a776:	2300      	movs	r3, #0
 800a778:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a77a:	e0fa      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a77c:	4b0a      	ldr	r3, [pc, #40]	@ (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a784:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a788:	d107      	bne.n	800a79a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a78a:	f107 0318 	add.w	r3, r7, #24
 800a78e:	4618      	mov	r0, r3
 800a790:	f000 f912 	bl	800a9b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a794:	6a3b      	ldr	r3, [r7, #32]
 800a796:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a798:	e0eb      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a79a:	2300      	movs	r3, #0
 800a79c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a79e:	e0e8      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7a4:	e0e5      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a7a6:	bf00      	nop
 800a7a8:	58024400 	.word	0x58024400
 800a7ac:	03d09000 	.word	0x03d09000
 800a7b0:	003d0900 	.word	0x003d0900
 800a7b4:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a7b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7bc:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a7c0:	430b      	orrs	r3, r1
 800a7c2:	f040 8085 	bne.w	800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a7c6:	4b6d      	ldr	r3, [pc, #436]	@ (800a97c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a7c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7ca:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a7ce:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a7d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a7d6:	d06b      	beq.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800a7d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a7de:	d874      	bhi.n	800a8ca <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a7e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7e6:	d056      	beq.n	800a896 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800a7e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7ee:	d86c      	bhi.n	800a8ca <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a7f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a7f6:	d03b      	beq.n	800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800a7f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a7fe:	d864      	bhi.n	800a8ca <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a802:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a806:	d021      	beq.n	800a84c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800a808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a80a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a80e:	d85c      	bhi.n	800a8ca <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a812:	2b00      	cmp	r3, #0
 800a814:	d004      	beq.n	800a820 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800a816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a818:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a81c:	d004      	beq.n	800a828 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800a81e:	e054      	b.n	800a8ca <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a820:	f000 f8b4 	bl	800a98c <HAL_RCCEx_GetD3PCLK1Freq>
 800a824:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a826:	e0a4      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a828:	4b54      	ldr	r3, [pc, #336]	@ (800a97c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a830:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a834:	d107      	bne.n	800a846 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a836:	f107 0318 	add.w	r3, r7, #24
 800a83a:	4618      	mov	r0, r3
 800a83c:	f000 f8bc 	bl	800a9b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a840:	69fb      	ldr	r3, [r7, #28]
 800a842:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a844:	e095      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a846:	2300      	movs	r3, #0
 800a848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a84a:	e092      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a84c:	4b4b      	ldr	r3, [pc, #300]	@ (800a97c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a854:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a858:	d107      	bne.n	800a86a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a85a:	f107 030c 	add.w	r3, r7, #12
 800a85e:	4618      	mov	r0, r3
 800a860:	f000 f9fe 	bl	800ac60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a868:	e083      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a86a:	2300      	movs	r3, #0
 800a86c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a86e:	e080      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a870:	4b42      	ldr	r3, [pc, #264]	@ (800a97c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f003 0304 	and.w	r3, r3, #4
 800a878:	2b04      	cmp	r3, #4
 800a87a:	d109      	bne.n	800a890 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a87c:	4b3f      	ldr	r3, [pc, #252]	@ (800a97c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	08db      	lsrs	r3, r3, #3
 800a882:	f003 0303 	and.w	r3, r3, #3
 800a886:	4a3e      	ldr	r2, [pc, #248]	@ (800a980 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800a888:	fa22 f303 	lsr.w	r3, r2, r3
 800a88c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a88e:	e070      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a890:	2300      	movs	r3, #0
 800a892:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a894:	e06d      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a896:	4b39      	ldr	r3, [pc, #228]	@ (800a97c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a89e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8a2:	d102      	bne.n	800a8aa <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800a8a4:	4b37      	ldr	r3, [pc, #220]	@ (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a8a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8a8:	e063      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8ae:	e060      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a8b0:	4b32      	ldr	r3, [pc, #200]	@ (800a97c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a8bc:	d102      	bne.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800a8be:	4b32      	ldr	r3, [pc, #200]	@ (800a988 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a8c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8c2:	e056      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8c8:	e053      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8ce:	e050      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a8d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8d4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a8d8:	430b      	orrs	r3, r1
 800a8da:	d148      	bne.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a8dc:	4b27      	ldr	r3, [pc, #156]	@ (800a97c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a8de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8e0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a8e4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a8e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8ec:	d02a      	beq.n	800a944 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800a8ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8f4:	d838      	bhi.n	800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800a8f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d004      	beq.n	800a906 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800a8fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a902:	d00d      	beq.n	800a920 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800a904:	e030      	b.n	800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a906:	4b1d      	ldr	r3, [pc, #116]	@ (800a97c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a90e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a912:	d102      	bne.n	800a91a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800a914:	4b1c      	ldr	r3, [pc, #112]	@ (800a988 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a918:	e02b      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a91a:	2300      	movs	r3, #0
 800a91c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a91e:	e028      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a920:	4b16      	ldr	r3, [pc, #88]	@ (800a97c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a928:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a92c:	d107      	bne.n	800a93e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a92e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a932:	4618      	mov	r0, r3
 800a934:	f000 fae8 	bl	800af08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a93a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a93c:	e019      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a93e:	2300      	movs	r3, #0
 800a940:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a942:	e016      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a944:	4b0d      	ldr	r3, [pc, #52]	@ (800a97c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a94c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a950:	d107      	bne.n	800a962 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a952:	f107 0318 	add.w	r3, r7, #24
 800a956:	4618      	mov	r0, r3
 800a958:	f000 f82e 	bl	800a9b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a95c:	69fb      	ldr	r3, [r7, #28]
 800a95e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a960:	e007      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a962:	2300      	movs	r3, #0
 800a964:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a966:	e004      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a968:	2300      	movs	r3, #0
 800a96a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a96c:	e001      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800a96e:	2300      	movs	r3, #0
 800a970:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a972:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a974:	4618      	mov	r0, r3
 800a976:	3740      	adds	r7, #64	@ 0x40
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}
 800a97c:	58024400 	.word	0x58024400
 800a980:	03d09000 	.word	0x03d09000
 800a984:	003d0900 	.word	0x003d0900
 800a988:	017d7840 	.word	0x017d7840

0800a98c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a990:	f7fe f8ec 	bl	8008b6c <HAL_RCC_GetHCLKFreq>
 800a994:	4602      	mov	r2, r0
 800a996:	4b06      	ldr	r3, [pc, #24]	@ (800a9b0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a998:	6a1b      	ldr	r3, [r3, #32]
 800a99a:	091b      	lsrs	r3, r3, #4
 800a99c:	f003 0307 	and.w	r3, r3, #7
 800a9a0:	4904      	ldr	r1, [pc, #16]	@ (800a9b4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a9a2:	5ccb      	ldrb	r3, [r1, r3]
 800a9a4:	f003 031f 	and.w	r3, r3, #31
 800a9a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	bd80      	pop	{r7, pc}
 800a9b0:	58024400 	.word	0x58024400
 800a9b4:	0800d410 	.word	0x0800d410

0800a9b8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b089      	sub	sp, #36	@ 0x24
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a9c0:	4ba1      	ldr	r3, [pc, #644]	@ (800ac48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9c4:	f003 0303 	and.w	r3, r3, #3
 800a9c8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a9ca:	4b9f      	ldr	r3, [pc, #636]	@ (800ac48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9ce:	0b1b      	lsrs	r3, r3, #12
 800a9d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a9d4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a9d6:	4b9c      	ldr	r3, [pc, #624]	@ (800ac48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9da:	091b      	lsrs	r3, r3, #4
 800a9dc:	f003 0301 	and.w	r3, r3, #1
 800a9e0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a9e2:	4b99      	ldr	r3, [pc, #612]	@ (800ac48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9e6:	08db      	lsrs	r3, r3, #3
 800a9e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a9ec:	693a      	ldr	r2, [r7, #16]
 800a9ee:	fb02 f303 	mul.w	r3, r2, r3
 800a9f2:	ee07 3a90 	vmov	s15, r3
 800a9f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	f000 8111 	beq.w	800ac28 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800aa06:	69bb      	ldr	r3, [r7, #24]
 800aa08:	2b02      	cmp	r3, #2
 800aa0a:	f000 8083 	beq.w	800ab14 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800aa0e:	69bb      	ldr	r3, [r7, #24]
 800aa10:	2b02      	cmp	r3, #2
 800aa12:	f200 80a1 	bhi.w	800ab58 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800aa16:	69bb      	ldr	r3, [r7, #24]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d003      	beq.n	800aa24 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800aa1c:	69bb      	ldr	r3, [r7, #24]
 800aa1e:	2b01      	cmp	r3, #1
 800aa20:	d056      	beq.n	800aad0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800aa22:	e099      	b.n	800ab58 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa24:	4b88      	ldr	r3, [pc, #544]	@ (800ac48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f003 0320 	and.w	r3, r3, #32
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d02d      	beq.n	800aa8c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa30:	4b85      	ldr	r3, [pc, #532]	@ (800ac48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	08db      	lsrs	r3, r3, #3
 800aa36:	f003 0303 	and.w	r3, r3, #3
 800aa3a:	4a84      	ldr	r2, [pc, #528]	@ (800ac4c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800aa3c:	fa22 f303 	lsr.w	r3, r2, r3
 800aa40:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	ee07 3a90 	vmov	s15, r3
 800aa48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	ee07 3a90 	vmov	s15, r3
 800aa52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa5a:	4b7b      	ldr	r3, [pc, #492]	@ (800ac48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa62:	ee07 3a90 	vmov	s15, r3
 800aa66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa6e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ac50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa86:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aa8a:	e087      	b.n	800ab9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	ee07 3a90 	vmov	s15, r3
 800aa92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa96:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ac54 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800aa9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa9e:	4b6a      	ldr	r3, [pc, #424]	@ (800ac48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aaa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaa6:	ee07 3a90 	vmov	s15, r3
 800aaaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaae:	ed97 6a03 	vldr	s12, [r7, #12]
 800aab2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ac50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aaba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aabe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aace:	e065      	b.n	800ab9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	ee07 3a90 	vmov	s15, r3
 800aad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aada:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ac58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aae2:	4b59      	ldr	r3, [pc, #356]	@ (800ac48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaea:	ee07 3a90 	vmov	s15, r3
 800aaee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaf2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aaf6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ac50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aafa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aafe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab12:	e043      	b.n	800ab9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	ee07 3a90 	vmov	s15, r3
 800ab1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab1e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ac5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ab22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab26:	4b48      	ldr	r3, [pc, #288]	@ (800ac48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab2e:	ee07 3a90 	vmov	s15, r3
 800ab32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab36:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab3a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ac50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab56:	e021      	b.n	800ab9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	ee07 3a90 	vmov	s15, r3
 800ab5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab62:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ac58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ab66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab6a:	4b37      	ldr	r3, [pc, #220]	@ (800ac48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab72:	ee07 3a90 	vmov	s15, r3
 800ab76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab7a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab7e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ac50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab9a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ab9c:	4b2a      	ldr	r3, [pc, #168]	@ (800ac48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aba0:	0a5b      	lsrs	r3, r3, #9
 800aba2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aba6:	ee07 3a90 	vmov	s15, r3
 800abaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800abb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abb6:	edd7 6a07 	vldr	s13, [r7, #28]
 800abba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abc2:	ee17 2a90 	vmov	r2, s15
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800abca:	4b1f      	ldr	r3, [pc, #124]	@ (800ac48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abce:	0c1b      	lsrs	r3, r3, #16
 800abd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800abd4:	ee07 3a90 	vmov	s15, r3
 800abd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abdc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800abe0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abe4:	edd7 6a07 	vldr	s13, [r7, #28]
 800abe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abf0:	ee17 2a90 	vmov	r2, s15
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800abf8:	4b13      	ldr	r3, [pc, #76]	@ (800ac48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abfc:	0e1b      	lsrs	r3, r3, #24
 800abfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac02:	ee07 3a90 	vmov	s15, r3
 800ac06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ac0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac12:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac1e:	ee17 2a90 	vmov	r2, s15
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ac26:	e008      	b.n	800ac3a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2200      	movs	r2, #0
 800ac32:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2200      	movs	r2, #0
 800ac38:	609a      	str	r2, [r3, #8]
}
 800ac3a:	bf00      	nop
 800ac3c:	3724      	adds	r7, #36	@ 0x24
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac44:	4770      	bx	lr
 800ac46:	bf00      	nop
 800ac48:	58024400 	.word	0x58024400
 800ac4c:	03d09000 	.word	0x03d09000
 800ac50:	46000000 	.word	0x46000000
 800ac54:	4c742400 	.word	0x4c742400
 800ac58:	4a742400 	.word	0x4a742400
 800ac5c:	4bbebc20 	.word	0x4bbebc20

0800ac60 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ac60:	b480      	push	{r7}
 800ac62:	b089      	sub	sp, #36	@ 0x24
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ac68:	4ba1      	ldr	r3, [pc, #644]	@ (800aef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac6c:	f003 0303 	and.w	r3, r3, #3
 800ac70:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ac72:	4b9f      	ldr	r3, [pc, #636]	@ (800aef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac76:	0d1b      	lsrs	r3, r3, #20
 800ac78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ac7c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ac7e:	4b9c      	ldr	r3, [pc, #624]	@ (800aef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac82:	0a1b      	lsrs	r3, r3, #8
 800ac84:	f003 0301 	and.w	r3, r3, #1
 800ac88:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ac8a:	4b99      	ldr	r3, [pc, #612]	@ (800aef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac8e:	08db      	lsrs	r3, r3, #3
 800ac90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac94:	693a      	ldr	r2, [r7, #16]
 800ac96:	fb02 f303 	mul.w	r3, r2, r3
 800ac9a:	ee07 3a90 	vmov	s15, r3
 800ac9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aca2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	f000 8111 	beq.w	800aed0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800acae:	69bb      	ldr	r3, [r7, #24]
 800acb0:	2b02      	cmp	r3, #2
 800acb2:	f000 8083 	beq.w	800adbc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800acb6:	69bb      	ldr	r3, [r7, #24]
 800acb8:	2b02      	cmp	r3, #2
 800acba:	f200 80a1 	bhi.w	800ae00 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800acbe:	69bb      	ldr	r3, [r7, #24]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d003      	beq.n	800accc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800acc4:	69bb      	ldr	r3, [r7, #24]
 800acc6:	2b01      	cmp	r3, #1
 800acc8:	d056      	beq.n	800ad78 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800acca:	e099      	b.n	800ae00 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800accc:	4b88      	ldr	r3, [pc, #544]	@ (800aef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f003 0320 	and.w	r3, r3, #32
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d02d      	beq.n	800ad34 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800acd8:	4b85      	ldr	r3, [pc, #532]	@ (800aef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	08db      	lsrs	r3, r3, #3
 800acde:	f003 0303 	and.w	r3, r3, #3
 800ace2:	4a84      	ldr	r2, [pc, #528]	@ (800aef4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ace4:	fa22 f303 	lsr.w	r3, r2, r3
 800ace8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	ee07 3a90 	vmov	s15, r3
 800acf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	ee07 3a90 	vmov	s15, r3
 800acfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad02:	4b7b      	ldr	r3, [pc, #492]	@ (800aef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad0a:	ee07 3a90 	vmov	s15, r3
 800ad0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad12:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad16:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800aef8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad2e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ad32:	e087      	b.n	800ae44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	ee07 3a90 	vmov	s15, r3
 800ad3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad3e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800aefc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ad42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad46:	4b6a      	ldr	r3, [pc, #424]	@ (800aef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad4e:	ee07 3a90 	vmov	s15, r3
 800ad52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad56:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad5a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800aef8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad76:	e065      	b.n	800ae44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	ee07 3a90 	vmov	s15, r3
 800ad7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad82:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800af00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ad86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad8a:	4b59      	ldr	r3, [pc, #356]	@ (800aef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad92:	ee07 3a90 	vmov	s15, r3
 800ad96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad9a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad9e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800aef8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ada2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ada6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800adae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adba:	e043      	b.n	800ae44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	ee07 3a90 	vmov	s15, r3
 800adc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adc6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800af04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800adca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adce:	4b48      	ldr	r3, [pc, #288]	@ (800aef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800add0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800add2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800add6:	ee07 3a90 	vmov	s15, r3
 800adda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adde:	ed97 6a03 	vldr	s12, [r7, #12]
 800ade2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800aef8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ade6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800adf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adfe:	e021      	b.n	800ae44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	ee07 3a90 	vmov	s15, r3
 800ae06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae0a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800af00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ae0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae12:	4b37      	ldr	r3, [pc, #220]	@ (800aef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae1a:	ee07 3a90 	vmov	s15, r3
 800ae1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae22:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae26:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800aef8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae42:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ae44:	4b2a      	ldr	r3, [pc, #168]	@ (800aef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae48:	0a5b      	lsrs	r3, r3, #9
 800ae4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae4e:	ee07 3a90 	vmov	s15, r3
 800ae52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae5e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae6a:	ee17 2a90 	vmov	r2, s15
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ae72:	4b1f      	ldr	r3, [pc, #124]	@ (800aef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae76:	0c1b      	lsrs	r3, r3, #16
 800ae78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae7c:	ee07 3a90 	vmov	s15, r3
 800ae80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae84:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae88:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae8c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae98:	ee17 2a90 	vmov	r2, s15
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800aea0:	4b13      	ldr	r3, [pc, #76]	@ (800aef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aea4:	0e1b      	lsrs	r3, r3, #24
 800aea6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aeaa:	ee07 3a90 	vmov	s15, r3
 800aeae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeb2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aeb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aeba:	edd7 6a07 	vldr	s13, [r7, #28]
 800aebe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aec2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aec6:	ee17 2a90 	vmov	r2, s15
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800aece:	e008      	b.n	800aee2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2200      	movs	r2, #0
 800aed4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2200      	movs	r2, #0
 800aeda:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2200      	movs	r2, #0
 800aee0:	609a      	str	r2, [r3, #8]
}
 800aee2:	bf00      	nop
 800aee4:	3724      	adds	r7, #36	@ 0x24
 800aee6:	46bd      	mov	sp, r7
 800aee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeec:	4770      	bx	lr
 800aeee:	bf00      	nop
 800aef0:	58024400 	.word	0x58024400
 800aef4:	03d09000 	.word	0x03d09000
 800aef8:	46000000 	.word	0x46000000
 800aefc:	4c742400 	.word	0x4c742400
 800af00:	4a742400 	.word	0x4a742400
 800af04:	4bbebc20 	.word	0x4bbebc20

0800af08 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800af08:	b480      	push	{r7}
 800af0a:	b089      	sub	sp, #36	@ 0x24
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af10:	4ba0      	ldr	r3, [pc, #640]	@ (800b194 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af14:	f003 0303 	and.w	r3, r3, #3
 800af18:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800af1a:	4b9e      	ldr	r3, [pc, #632]	@ (800b194 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af1e:	091b      	lsrs	r3, r3, #4
 800af20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800af24:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800af26:	4b9b      	ldr	r3, [pc, #620]	@ (800b194 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af2a:	f003 0301 	and.w	r3, r3, #1
 800af2e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800af30:	4b98      	ldr	r3, [pc, #608]	@ (800b194 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af34:	08db      	lsrs	r3, r3, #3
 800af36:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af3a:	693a      	ldr	r2, [r7, #16]
 800af3c:	fb02 f303 	mul.w	r3, r2, r3
 800af40:	ee07 3a90 	vmov	s15, r3
 800af44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af48:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	f000 8111 	beq.w	800b176 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800af54:	69bb      	ldr	r3, [r7, #24]
 800af56:	2b02      	cmp	r3, #2
 800af58:	f000 8083 	beq.w	800b062 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800af5c:	69bb      	ldr	r3, [r7, #24]
 800af5e:	2b02      	cmp	r3, #2
 800af60:	f200 80a1 	bhi.w	800b0a6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800af64:	69bb      	ldr	r3, [r7, #24]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d003      	beq.n	800af72 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800af6a:	69bb      	ldr	r3, [r7, #24]
 800af6c:	2b01      	cmp	r3, #1
 800af6e:	d056      	beq.n	800b01e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800af70:	e099      	b.n	800b0a6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af72:	4b88      	ldr	r3, [pc, #544]	@ (800b194 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f003 0320 	and.w	r3, r3, #32
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d02d      	beq.n	800afda <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af7e:	4b85      	ldr	r3, [pc, #532]	@ (800b194 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	08db      	lsrs	r3, r3, #3
 800af84:	f003 0303 	and.w	r3, r3, #3
 800af88:	4a83      	ldr	r2, [pc, #524]	@ (800b198 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800af8a:	fa22 f303 	lsr.w	r3, r2, r3
 800af8e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	ee07 3a90 	vmov	s15, r3
 800af96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	ee07 3a90 	vmov	s15, r3
 800afa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afa4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afa8:	4b7a      	ldr	r3, [pc, #488]	@ (800b194 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afb0:	ee07 3a90 	vmov	s15, r3
 800afb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afb8:	ed97 6a03 	vldr	s12, [r7, #12]
 800afbc:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b19c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800afc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afc8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800afcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afd4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800afd8:	e087      	b.n	800b0ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	ee07 3a90 	vmov	s15, r3
 800afe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afe4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b1a0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800afe8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afec:	4b69      	ldr	r3, [pc, #420]	@ (800b194 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aff4:	ee07 3a90 	vmov	s15, r3
 800aff8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800affc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b000:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b19c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b004:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b008:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b00c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b010:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b014:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b018:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b01c:	e065      	b.n	800b0ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	ee07 3a90 	vmov	s15, r3
 800b024:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b028:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b02c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b030:	4b58      	ldr	r3, [pc, #352]	@ (800b194 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b038:	ee07 3a90 	vmov	s15, r3
 800b03c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b040:	ed97 6a03 	vldr	s12, [r7, #12]
 800b044:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b19c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b048:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b04c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b050:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b054:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b058:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b05c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b060:	e043      	b.n	800b0ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	ee07 3a90 	vmov	s15, r3
 800b068:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b06c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b1a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b070:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b074:	4b47      	ldr	r3, [pc, #284]	@ (800b194 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b078:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b07c:	ee07 3a90 	vmov	s15, r3
 800b080:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b084:	ed97 6a03 	vldr	s12, [r7, #12]
 800b088:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b19c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b08c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b090:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b094:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b098:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b09c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0a4:	e021      	b.n	800b0ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	ee07 3a90 	vmov	s15, r3
 800b0ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0b0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b1a0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b0b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0b8:	4b36      	ldr	r3, [pc, #216]	@ (800b194 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0c0:	ee07 3a90 	vmov	s15, r3
 800b0c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0c8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0cc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b19c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b0d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b0dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0e8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b0ea:	4b2a      	ldr	r3, [pc, #168]	@ (800b194 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0ee:	0a5b      	lsrs	r3, r3, #9
 800b0f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0f4:	ee07 3a90 	vmov	s15, r3
 800b0f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b100:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b104:	edd7 6a07 	vldr	s13, [r7, #28]
 800b108:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b10c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b110:	ee17 2a90 	vmov	r2, s15
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b118:	4b1e      	ldr	r3, [pc, #120]	@ (800b194 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b11a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b11c:	0c1b      	lsrs	r3, r3, #16
 800b11e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b122:	ee07 3a90 	vmov	s15, r3
 800b126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b12a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b12e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b132:	edd7 6a07 	vldr	s13, [r7, #28]
 800b136:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b13a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b13e:	ee17 2a90 	vmov	r2, s15
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b146:	4b13      	ldr	r3, [pc, #76]	@ (800b194 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b14a:	0e1b      	lsrs	r3, r3, #24
 800b14c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b150:	ee07 3a90 	vmov	s15, r3
 800b154:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b158:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b15c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b160:	edd7 6a07 	vldr	s13, [r7, #28]
 800b164:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b168:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b16c:	ee17 2a90 	vmov	r2, s15
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b174:	e008      	b.n	800b188 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2200      	movs	r2, #0
 800b17a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2200      	movs	r2, #0
 800b180:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2200      	movs	r2, #0
 800b186:	609a      	str	r2, [r3, #8]
}
 800b188:	bf00      	nop
 800b18a:	3724      	adds	r7, #36	@ 0x24
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr
 800b194:	58024400 	.word	0x58024400
 800b198:	03d09000 	.word	0x03d09000
 800b19c:	46000000 	.word	0x46000000
 800b1a0:	4c742400 	.word	0x4c742400
 800b1a4:	4a742400 	.word	0x4a742400
 800b1a8:	4bbebc20 	.word	0x4bbebc20

0800b1ac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b084      	sub	sp, #16
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
 800b1b4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b1ba:	4b53      	ldr	r3, [pc, #332]	@ (800b308 <RCCEx_PLL2_Config+0x15c>)
 800b1bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1be:	f003 0303 	and.w	r3, r3, #3
 800b1c2:	2b03      	cmp	r3, #3
 800b1c4:	d101      	bne.n	800b1ca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	e099      	b.n	800b2fe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b1ca:	4b4f      	ldr	r3, [pc, #316]	@ (800b308 <RCCEx_PLL2_Config+0x15c>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	4a4e      	ldr	r2, [pc, #312]	@ (800b308 <RCCEx_PLL2_Config+0x15c>)
 800b1d0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b1d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b1d6:	f7f7 fa87 	bl	80026e8 <HAL_GetTick>
 800b1da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b1dc:	e008      	b.n	800b1f0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b1de:	f7f7 fa83 	bl	80026e8 <HAL_GetTick>
 800b1e2:	4602      	mov	r2, r0
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	1ad3      	subs	r3, r2, r3
 800b1e8:	2b02      	cmp	r3, #2
 800b1ea:	d901      	bls.n	800b1f0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b1ec:	2303      	movs	r3, #3
 800b1ee:	e086      	b.n	800b2fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b1f0:	4b45      	ldr	r3, [pc, #276]	@ (800b308 <RCCEx_PLL2_Config+0x15c>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d1f0      	bne.n	800b1de <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b1fc:	4b42      	ldr	r3, [pc, #264]	@ (800b308 <RCCEx_PLL2_Config+0x15c>)
 800b1fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b200:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	031b      	lsls	r3, r3, #12
 800b20a:	493f      	ldr	r1, [pc, #252]	@ (800b308 <RCCEx_PLL2_Config+0x15c>)
 800b20c:	4313      	orrs	r3, r2
 800b20e:	628b      	str	r3, [r1, #40]	@ 0x28
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	3b01      	subs	r3, #1
 800b216:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	689b      	ldr	r3, [r3, #8]
 800b21e:	3b01      	subs	r3, #1
 800b220:	025b      	lsls	r3, r3, #9
 800b222:	b29b      	uxth	r3, r3
 800b224:	431a      	orrs	r2, r3
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	68db      	ldr	r3, [r3, #12]
 800b22a:	3b01      	subs	r3, #1
 800b22c:	041b      	lsls	r3, r3, #16
 800b22e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b232:	431a      	orrs	r2, r3
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	691b      	ldr	r3, [r3, #16]
 800b238:	3b01      	subs	r3, #1
 800b23a:	061b      	lsls	r3, r3, #24
 800b23c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b240:	4931      	ldr	r1, [pc, #196]	@ (800b308 <RCCEx_PLL2_Config+0x15c>)
 800b242:	4313      	orrs	r3, r2
 800b244:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b246:	4b30      	ldr	r3, [pc, #192]	@ (800b308 <RCCEx_PLL2_Config+0x15c>)
 800b248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b24a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	695b      	ldr	r3, [r3, #20]
 800b252:	492d      	ldr	r1, [pc, #180]	@ (800b308 <RCCEx_PLL2_Config+0x15c>)
 800b254:	4313      	orrs	r3, r2
 800b256:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b258:	4b2b      	ldr	r3, [pc, #172]	@ (800b308 <RCCEx_PLL2_Config+0x15c>)
 800b25a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b25c:	f023 0220 	bic.w	r2, r3, #32
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	699b      	ldr	r3, [r3, #24]
 800b264:	4928      	ldr	r1, [pc, #160]	@ (800b308 <RCCEx_PLL2_Config+0x15c>)
 800b266:	4313      	orrs	r3, r2
 800b268:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b26a:	4b27      	ldr	r3, [pc, #156]	@ (800b308 <RCCEx_PLL2_Config+0x15c>)
 800b26c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b26e:	4a26      	ldr	r2, [pc, #152]	@ (800b308 <RCCEx_PLL2_Config+0x15c>)
 800b270:	f023 0310 	bic.w	r3, r3, #16
 800b274:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b276:	4b24      	ldr	r3, [pc, #144]	@ (800b308 <RCCEx_PLL2_Config+0x15c>)
 800b278:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b27a:	4b24      	ldr	r3, [pc, #144]	@ (800b30c <RCCEx_PLL2_Config+0x160>)
 800b27c:	4013      	ands	r3, r2
 800b27e:	687a      	ldr	r2, [r7, #4]
 800b280:	69d2      	ldr	r2, [r2, #28]
 800b282:	00d2      	lsls	r2, r2, #3
 800b284:	4920      	ldr	r1, [pc, #128]	@ (800b308 <RCCEx_PLL2_Config+0x15c>)
 800b286:	4313      	orrs	r3, r2
 800b288:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b28a:	4b1f      	ldr	r3, [pc, #124]	@ (800b308 <RCCEx_PLL2_Config+0x15c>)
 800b28c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b28e:	4a1e      	ldr	r2, [pc, #120]	@ (800b308 <RCCEx_PLL2_Config+0x15c>)
 800b290:	f043 0310 	orr.w	r3, r3, #16
 800b294:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d106      	bne.n	800b2aa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b29c:	4b1a      	ldr	r3, [pc, #104]	@ (800b308 <RCCEx_PLL2_Config+0x15c>)
 800b29e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2a0:	4a19      	ldr	r2, [pc, #100]	@ (800b308 <RCCEx_PLL2_Config+0x15c>)
 800b2a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b2a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b2a8:	e00f      	b.n	800b2ca <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	2b01      	cmp	r3, #1
 800b2ae:	d106      	bne.n	800b2be <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b2b0:	4b15      	ldr	r3, [pc, #84]	@ (800b308 <RCCEx_PLL2_Config+0x15c>)
 800b2b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2b4:	4a14      	ldr	r2, [pc, #80]	@ (800b308 <RCCEx_PLL2_Config+0x15c>)
 800b2b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b2ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b2bc:	e005      	b.n	800b2ca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b2be:	4b12      	ldr	r3, [pc, #72]	@ (800b308 <RCCEx_PLL2_Config+0x15c>)
 800b2c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2c2:	4a11      	ldr	r2, [pc, #68]	@ (800b308 <RCCEx_PLL2_Config+0x15c>)
 800b2c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b2c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b2ca:	4b0f      	ldr	r3, [pc, #60]	@ (800b308 <RCCEx_PLL2_Config+0x15c>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	4a0e      	ldr	r2, [pc, #56]	@ (800b308 <RCCEx_PLL2_Config+0x15c>)
 800b2d0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b2d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2d6:	f7f7 fa07 	bl	80026e8 <HAL_GetTick>
 800b2da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b2dc:	e008      	b.n	800b2f0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b2de:	f7f7 fa03 	bl	80026e8 <HAL_GetTick>
 800b2e2:	4602      	mov	r2, r0
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	1ad3      	subs	r3, r2, r3
 800b2e8:	2b02      	cmp	r3, #2
 800b2ea:	d901      	bls.n	800b2f0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b2ec:	2303      	movs	r3, #3
 800b2ee:	e006      	b.n	800b2fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b2f0:	4b05      	ldr	r3, [pc, #20]	@ (800b308 <RCCEx_PLL2_Config+0x15c>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d0f0      	beq.n	800b2de <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b2fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3710      	adds	r7, #16
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}
 800b306:	bf00      	nop
 800b308:	58024400 	.word	0x58024400
 800b30c:	ffff0007 	.word	0xffff0007

0800b310 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b084      	sub	sp, #16
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b31a:	2300      	movs	r3, #0
 800b31c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b31e:	4b53      	ldr	r3, [pc, #332]	@ (800b46c <RCCEx_PLL3_Config+0x15c>)
 800b320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b322:	f003 0303 	and.w	r3, r3, #3
 800b326:	2b03      	cmp	r3, #3
 800b328:	d101      	bne.n	800b32e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b32a:	2301      	movs	r3, #1
 800b32c:	e099      	b.n	800b462 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b32e:	4b4f      	ldr	r3, [pc, #316]	@ (800b46c <RCCEx_PLL3_Config+0x15c>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	4a4e      	ldr	r2, [pc, #312]	@ (800b46c <RCCEx_PLL3_Config+0x15c>)
 800b334:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b338:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b33a:	f7f7 f9d5 	bl	80026e8 <HAL_GetTick>
 800b33e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b340:	e008      	b.n	800b354 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b342:	f7f7 f9d1 	bl	80026e8 <HAL_GetTick>
 800b346:	4602      	mov	r2, r0
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	1ad3      	subs	r3, r2, r3
 800b34c:	2b02      	cmp	r3, #2
 800b34e:	d901      	bls.n	800b354 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b350:	2303      	movs	r3, #3
 800b352:	e086      	b.n	800b462 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b354:	4b45      	ldr	r3, [pc, #276]	@ (800b46c <RCCEx_PLL3_Config+0x15c>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d1f0      	bne.n	800b342 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b360:	4b42      	ldr	r3, [pc, #264]	@ (800b46c <RCCEx_PLL3_Config+0x15c>)
 800b362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b364:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	051b      	lsls	r3, r3, #20
 800b36e:	493f      	ldr	r1, [pc, #252]	@ (800b46c <RCCEx_PLL3_Config+0x15c>)
 800b370:	4313      	orrs	r3, r2
 800b372:	628b      	str	r3, [r1, #40]	@ 0x28
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	685b      	ldr	r3, [r3, #4]
 800b378:	3b01      	subs	r3, #1
 800b37a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	689b      	ldr	r3, [r3, #8]
 800b382:	3b01      	subs	r3, #1
 800b384:	025b      	lsls	r3, r3, #9
 800b386:	b29b      	uxth	r3, r3
 800b388:	431a      	orrs	r2, r3
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	68db      	ldr	r3, [r3, #12]
 800b38e:	3b01      	subs	r3, #1
 800b390:	041b      	lsls	r3, r3, #16
 800b392:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b396:	431a      	orrs	r2, r3
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	691b      	ldr	r3, [r3, #16]
 800b39c:	3b01      	subs	r3, #1
 800b39e:	061b      	lsls	r3, r3, #24
 800b3a0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b3a4:	4931      	ldr	r1, [pc, #196]	@ (800b46c <RCCEx_PLL3_Config+0x15c>)
 800b3a6:	4313      	orrs	r3, r2
 800b3a8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b3aa:	4b30      	ldr	r3, [pc, #192]	@ (800b46c <RCCEx_PLL3_Config+0x15c>)
 800b3ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3ae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	695b      	ldr	r3, [r3, #20]
 800b3b6:	492d      	ldr	r1, [pc, #180]	@ (800b46c <RCCEx_PLL3_Config+0x15c>)
 800b3b8:	4313      	orrs	r3, r2
 800b3ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b3bc:	4b2b      	ldr	r3, [pc, #172]	@ (800b46c <RCCEx_PLL3_Config+0x15c>)
 800b3be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3c0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	699b      	ldr	r3, [r3, #24]
 800b3c8:	4928      	ldr	r1, [pc, #160]	@ (800b46c <RCCEx_PLL3_Config+0x15c>)
 800b3ca:	4313      	orrs	r3, r2
 800b3cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b3ce:	4b27      	ldr	r3, [pc, #156]	@ (800b46c <RCCEx_PLL3_Config+0x15c>)
 800b3d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3d2:	4a26      	ldr	r2, [pc, #152]	@ (800b46c <RCCEx_PLL3_Config+0x15c>)
 800b3d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b3d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b3da:	4b24      	ldr	r3, [pc, #144]	@ (800b46c <RCCEx_PLL3_Config+0x15c>)
 800b3dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b3de:	4b24      	ldr	r3, [pc, #144]	@ (800b470 <RCCEx_PLL3_Config+0x160>)
 800b3e0:	4013      	ands	r3, r2
 800b3e2:	687a      	ldr	r2, [r7, #4]
 800b3e4:	69d2      	ldr	r2, [r2, #28]
 800b3e6:	00d2      	lsls	r2, r2, #3
 800b3e8:	4920      	ldr	r1, [pc, #128]	@ (800b46c <RCCEx_PLL3_Config+0x15c>)
 800b3ea:	4313      	orrs	r3, r2
 800b3ec:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b3ee:	4b1f      	ldr	r3, [pc, #124]	@ (800b46c <RCCEx_PLL3_Config+0x15c>)
 800b3f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3f2:	4a1e      	ldr	r2, [pc, #120]	@ (800b46c <RCCEx_PLL3_Config+0x15c>)
 800b3f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b3f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d106      	bne.n	800b40e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b400:	4b1a      	ldr	r3, [pc, #104]	@ (800b46c <RCCEx_PLL3_Config+0x15c>)
 800b402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b404:	4a19      	ldr	r2, [pc, #100]	@ (800b46c <RCCEx_PLL3_Config+0x15c>)
 800b406:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b40a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b40c:	e00f      	b.n	800b42e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	2b01      	cmp	r3, #1
 800b412:	d106      	bne.n	800b422 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b414:	4b15      	ldr	r3, [pc, #84]	@ (800b46c <RCCEx_PLL3_Config+0x15c>)
 800b416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b418:	4a14      	ldr	r2, [pc, #80]	@ (800b46c <RCCEx_PLL3_Config+0x15c>)
 800b41a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b41e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b420:	e005      	b.n	800b42e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b422:	4b12      	ldr	r3, [pc, #72]	@ (800b46c <RCCEx_PLL3_Config+0x15c>)
 800b424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b426:	4a11      	ldr	r2, [pc, #68]	@ (800b46c <RCCEx_PLL3_Config+0x15c>)
 800b428:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b42c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b42e:	4b0f      	ldr	r3, [pc, #60]	@ (800b46c <RCCEx_PLL3_Config+0x15c>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	4a0e      	ldr	r2, [pc, #56]	@ (800b46c <RCCEx_PLL3_Config+0x15c>)
 800b434:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b438:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b43a:	f7f7 f955 	bl	80026e8 <HAL_GetTick>
 800b43e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b440:	e008      	b.n	800b454 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b442:	f7f7 f951 	bl	80026e8 <HAL_GetTick>
 800b446:	4602      	mov	r2, r0
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	1ad3      	subs	r3, r2, r3
 800b44c:	2b02      	cmp	r3, #2
 800b44e:	d901      	bls.n	800b454 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b450:	2303      	movs	r3, #3
 800b452:	e006      	b.n	800b462 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b454:	4b05      	ldr	r3, [pc, #20]	@ (800b46c <RCCEx_PLL3_Config+0x15c>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d0f0      	beq.n	800b442 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b460:	7bfb      	ldrb	r3, [r7, #15]
}
 800b462:	4618      	mov	r0, r3
 800b464:	3710      	adds	r7, #16
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}
 800b46a:	bf00      	nop
 800b46c:	58024400 	.word	0x58024400
 800b470:	ffff0007 	.word	0xffff0007

0800b474 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b082      	sub	sp, #8
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d101      	bne.n	800b486 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b482:	2301      	movs	r3, #1
 800b484:	e049      	b.n	800b51a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b48c:	b2db      	uxtb	r3, r3
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d106      	bne.n	800b4a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2200      	movs	r2, #0
 800b496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f7f6 fe68 	bl	8002170 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2202      	movs	r2, #2
 800b4a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681a      	ldr	r2, [r3, #0]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	3304      	adds	r3, #4
 800b4b0:	4619      	mov	r1, r3
 800b4b2:	4610      	mov	r0, r2
 800b4b4:	f000 fb8a 	bl	800bbcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2201      	movs	r2, #1
 800b4d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2201      	movs	r2, #1
 800b4dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2201      	movs	r2, #1
 800b504:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2201      	movs	r2, #1
 800b50c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2201      	movs	r2, #1
 800b514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b518:	2300      	movs	r3, #0
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3708      	adds	r7, #8
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}
	...

0800b524 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b524:	b480      	push	{r7}
 800b526:	b085      	sub	sp, #20
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b532:	b2db      	uxtb	r3, r3
 800b534:	2b01      	cmp	r3, #1
 800b536:	d001      	beq.n	800b53c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b538:	2301      	movs	r3, #1
 800b53a:	e05e      	b.n	800b5fa <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2202      	movs	r2, #2
 800b540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	68da      	ldr	r2, [r3, #12]
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f042 0201 	orr.w	r2, r2, #1
 800b552:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4a2b      	ldr	r2, [pc, #172]	@ (800b608 <HAL_TIM_Base_Start_IT+0xe4>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d02c      	beq.n	800b5b8 <HAL_TIM_Base_Start_IT+0x94>
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b566:	d027      	beq.n	800b5b8 <HAL_TIM_Base_Start_IT+0x94>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	4a27      	ldr	r2, [pc, #156]	@ (800b60c <HAL_TIM_Base_Start_IT+0xe8>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	d022      	beq.n	800b5b8 <HAL_TIM_Base_Start_IT+0x94>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	4a26      	ldr	r2, [pc, #152]	@ (800b610 <HAL_TIM_Base_Start_IT+0xec>)
 800b578:	4293      	cmp	r3, r2
 800b57a:	d01d      	beq.n	800b5b8 <HAL_TIM_Base_Start_IT+0x94>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	4a24      	ldr	r2, [pc, #144]	@ (800b614 <HAL_TIM_Base_Start_IT+0xf0>)
 800b582:	4293      	cmp	r3, r2
 800b584:	d018      	beq.n	800b5b8 <HAL_TIM_Base_Start_IT+0x94>
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	4a23      	ldr	r2, [pc, #140]	@ (800b618 <HAL_TIM_Base_Start_IT+0xf4>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d013      	beq.n	800b5b8 <HAL_TIM_Base_Start_IT+0x94>
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	4a21      	ldr	r2, [pc, #132]	@ (800b61c <HAL_TIM_Base_Start_IT+0xf8>)
 800b596:	4293      	cmp	r3, r2
 800b598:	d00e      	beq.n	800b5b8 <HAL_TIM_Base_Start_IT+0x94>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	4a20      	ldr	r2, [pc, #128]	@ (800b620 <HAL_TIM_Base_Start_IT+0xfc>)
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d009      	beq.n	800b5b8 <HAL_TIM_Base_Start_IT+0x94>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	4a1e      	ldr	r2, [pc, #120]	@ (800b624 <HAL_TIM_Base_Start_IT+0x100>)
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d004      	beq.n	800b5b8 <HAL_TIM_Base_Start_IT+0x94>
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4a1d      	ldr	r2, [pc, #116]	@ (800b628 <HAL_TIM_Base_Start_IT+0x104>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d115      	bne.n	800b5e4 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	689a      	ldr	r2, [r3, #8]
 800b5be:	4b1b      	ldr	r3, [pc, #108]	@ (800b62c <HAL_TIM_Base_Start_IT+0x108>)
 800b5c0:	4013      	ands	r3, r2
 800b5c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	2b06      	cmp	r3, #6
 800b5c8:	d015      	beq.n	800b5f6 <HAL_TIM_Base_Start_IT+0xd2>
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b5d0:	d011      	beq.n	800b5f6 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	681a      	ldr	r2, [r3, #0]
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	f042 0201 	orr.w	r2, r2, #1
 800b5e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5e2:	e008      	b.n	800b5f6 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	681a      	ldr	r2, [r3, #0]
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f042 0201 	orr.w	r2, r2, #1
 800b5f2:	601a      	str	r2, [r3, #0]
 800b5f4:	e000      	b.n	800b5f8 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b5f8:	2300      	movs	r3, #0
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3714      	adds	r7, #20
 800b5fe:	46bd      	mov	sp, r7
 800b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b604:	4770      	bx	lr
 800b606:	bf00      	nop
 800b608:	40010000 	.word	0x40010000
 800b60c:	40000400 	.word	0x40000400
 800b610:	40000800 	.word	0x40000800
 800b614:	40000c00 	.word	0x40000c00
 800b618:	40010400 	.word	0x40010400
 800b61c:	40001800 	.word	0x40001800
 800b620:	40014000 	.word	0x40014000
 800b624:	4000e000 	.word	0x4000e000
 800b628:	4000e400 	.word	0x4000e400
 800b62c:	00010007 	.word	0x00010007

0800b630 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b086      	sub	sp, #24
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d101      	bne.n	800b644 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b640:	2301      	movs	r3, #1
 800b642:	e08f      	b.n	800b764 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b64a:	b2db      	uxtb	r3, r3
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d106      	bne.n	800b65e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2200      	movs	r2, #0
 800b654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f7f6 fdab 	bl	80021b4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2202      	movs	r2, #2
 800b662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	6899      	ldr	r1, [r3, #8]
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681a      	ldr	r2, [r3, #0]
 800b670:	4b3e      	ldr	r3, [pc, #248]	@ (800b76c <HAL_TIM_Encoder_Init+0x13c>)
 800b672:	400b      	ands	r3, r1
 800b674:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681a      	ldr	r2, [r3, #0]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	3304      	adds	r3, #4
 800b67e:	4619      	mov	r1, r3
 800b680:	4610      	mov	r0, r2
 800b682:	f000 faa3 	bl	800bbcc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	689b      	ldr	r3, [r3, #8]
 800b68c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	699b      	ldr	r3, [r3, #24]
 800b694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	6a1b      	ldr	r3, [r3, #32]
 800b69c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	697a      	ldr	r2, [r7, #20]
 800b6a4:	4313      	orrs	r3, r2
 800b6a6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b6a8:	693a      	ldr	r2, [r7, #16]
 800b6aa:	4b31      	ldr	r3, [pc, #196]	@ (800b770 <HAL_TIM_Encoder_Init+0x140>)
 800b6ac:	4013      	ands	r3, r2
 800b6ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	689a      	ldr	r2, [r3, #8]
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	699b      	ldr	r3, [r3, #24]
 800b6b8:	021b      	lsls	r3, r3, #8
 800b6ba:	4313      	orrs	r3, r2
 800b6bc:	693a      	ldr	r2, [r7, #16]
 800b6be:	4313      	orrs	r3, r2
 800b6c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b6c2:	693a      	ldr	r2, [r7, #16]
 800b6c4:	4b2b      	ldr	r3, [pc, #172]	@ (800b774 <HAL_TIM_Encoder_Init+0x144>)
 800b6c6:	4013      	ands	r3, r2
 800b6c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b6ca:	693a      	ldr	r2, [r7, #16]
 800b6cc:	4b2a      	ldr	r3, [pc, #168]	@ (800b778 <HAL_TIM_Encoder_Init+0x148>)
 800b6ce:	4013      	ands	r3, r2
 800b6d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	68da      	ldr	r2, [r3, #12]
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	69db      	ldr	r3, [r3, #28]
 800b6da:	021b      	lsls	r3, r3, #8
 800b6dc:	4313      	orrs	r3, r2
 800b6de:	693a      	ldr	r2, [r7, #16]
 800b6e0:	4313      	orrs	r3, r2
 800b6e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	691b      	ldr	r3, [r3, #16]
 800b6e8:	011a      	lsls	r2, r3, #4
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	6a1b      	ldr	r3, [r3, #32]
 800b6ee:	031b      	lsls	r3, r3, #12
 800b6f0:	4313      	orrs	r3, r2
 800b6f2:	693a      	ldr	r2, [r7, #16]
 800b6f4:	4313      	orrs	r3, r2
 800b6f6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800b6fe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800b706:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	685a      	ldr	r2, [r3, #4]
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	695b      	ldr	r3, [r3, #20]
 800b710:	011b      	lsls	r3, r3, #4
 800b712:	4313      	orrs	r3, r2
 800b714:	68fa      	ldr	r2, [r7, #12]
 800b716:	4313      	orrs	r3, r2
 800b718:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	697a      	ldr	r2, [r7, #20]
 800b720:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	693a      	ldr	r2, [r7, #16]
 800b728:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	68fa      	ldr	r2, [r7, #12]
 800b730:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2201      	movs	r2, #1
 800b736:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2201      	movs	r2, #1
 800b73e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2201      	movs	r2, #1
 800b746:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2201      	movs	r2, #1
 800b74e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2201      	movs	r2, #1
 800b756:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2201      	movs	r2, #1
 800b75e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b762:	2300      	movs	r3, #0
}
 800b764:	4618      	mov	r0, r3
 800b766:	3718      	adds	r7, #24
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}
 800b76c:	fffebff8 	.word	0xfffebff8
 800b770:	fffffcfc 	.word	0xfffffcfc
 800b774:	fffff3f3 	.word	0xfffff3f3
 800b778:	ffff0f0f 	.word	0xffff0f0f

0800b77c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b084      	sub	sp, #16
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	68db      	ldr	r3, [r3, #12]
 800b78a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	691b      	ldr	r3, [r3, #16]
 800b792:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	f003 0302 	and.w	r3, r3, #2
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d020      	beq.n	800b7e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	f003 0302 	and.w	r3, r3, #2
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d01b      	beq.n	800b7e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	f06f 0202 	mvn.w	r2, #2
 800b7b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2201      	movs	r2, #1
 800b7b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	699b      	ldr	r3, [r3, #24]
 800b7be:	f003 0303 	and.w	r3, r3, #3
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d003      	beq.n	800b7ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f000 f9e2 	bl	800bb90 <HAL_TIM_IC_CaptureCallback>
 800b7cc:	e005      	b.n	800b7da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f000 f9d4 	bl	800bb7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f000 f9e5 	bl	800bba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	f003 0304 	and.w	r3, r3, #4
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d020      	beq.n	800b82c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	f003 0304 	and.w	r3, r3, #4
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d01b      	beq.n	800b82c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f06f 0204 	mvn.w	r2, #4
 800b7fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2202      	movs	r2, #2
 800b802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	699b      	ldr	r3, [r3, #24]
 800b80a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d003      	beq.n	800b81a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f000 f9bc 	bl	800bb90 <HAL_TIM_IC_CaptureCallback>
 800b818:	e005      	b.n	800b826 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f000 f9ae 	bl	800bb7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f000 f9bf 	bl	800bba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2200      	movs	r2, #0
 800b82a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	f003 0308 	and.w	r3, r3, #8
 800b832:	2b00      	cmp	r3, #0
 800b834:	d020      	beq.n	800b878 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	f003 0308 	and.w	r3, r3, #8
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d01b      	beq.n	800b878 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	f06f 0208 	mvn.w	r2, #8
 800b848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2204      	movs	r2, #4
 800b84e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	69db      	ldr	r3, [r3, #28]
 800b856:	f003 0303 	and.w	r3, r3, #3
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d003      	beq.n	800b866 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f000 f996 	bl	800bb90 <HAL_TIM_IC_CaptureCallback>
 800b864:	e005      	b.n	800b872 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f000 f988 	bl	800bb7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f000 f999 	bl	800bba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2200      	movs	r2, #0
 800b876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	f003 0310 	and.w	r3, r3, #16
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d020      	beq.n	800b8c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	f003 0310 	and.w	r3, r3, #16
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d01b      	beq.n	800b8c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f06f 0210 	mvn.w	r2, #16
 800b894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2208      	movs	r2, #8
 800b89a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	69db      	ldr	r3, [r3, #28]
 800b8a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d003      	beq.n	800b8b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 f970 	bl	800bb90 <HAL_TIM_IC_CaptureCallback>
 800b8b0:	e005      	b.n	800b8be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f000 f962 	bl	800bb7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f000 f973 	bl	800bba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	f003 0301 	and.w	r3, r3, #1
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d00c      	beq.n	800b8e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	f003 0301 	and.w	r3, r3, #1
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d007      	beq.n	800b8e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	f06f 0201 	mvn.w	r2, #1
 800b8e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f7f5 fd8a 	bl	80013fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d104      	bne.n	800b8fc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d00c      	beq.n	800b916 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b902:	2b00      	cmp	r3, #0
 800b904:	d007      	beq.n	800b916 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b90e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f000 fb51 	bl	800bfb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d00c      	beq.n	800b93a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b926:	2b00      	cmp	r3, #0
 800b928:	d007      	beq.n	800b93a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f000 fb49 	bl	800bfcc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b940:	2b00      	cmp	r3, #0
 800b942:	d00c      	beq.n	800b95e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d007      	beq.n	800b95e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b958:	6878      	ldr	r0, [r7, #4]
 800b95a:	f000 f92d 	bl	800bbb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	f003 0320 	and.w	r3, r3, #32
 800b964:	2b00      	cmp	r3, #0
 800b966:	d00c      	beq.n	800b982 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	f003 0320 	and.w	r3, r3, #32
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d007      	beq.n	800b982 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	f06f 0220 	mvn.w	r2, #32
 800b97a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f000 fb11 	bl	800bfa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b982:	bf00      	nop
 800b984:	3710      	adds	r7, #16
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}
	...

0800b98c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b084      	sub	sp, #16
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b996:	2300      	movs	r3, #0
 800b998:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b9a0:	2b01      	cmp	r3, #1
 800b9a2:	d101      	bne.n	800b9a8 <HAL_TIM_ConfigClockSource+0x1c>
 800b9a4:	2302      	movs	r3, #2
 800b9a6:	e0dc      	b.n	800bb62 <HAL_TIM_ConfigClockSource+0x1d6>
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2201      	movs	r2, #1
 800b9ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2202      	movs	r2, #2
 800b9b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	689b      	ldr	r3, [r3, #8]
 800b9be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b9c0:	68ba      	ldr	r2, [r7, #8]
 800b9c2:	4b6a      	ldr	r3, [pc, #424]	@ (800bb6c <HAL_TIM_ConfigClockSource+0x1e0>)
 800b9c4:	4013      	ands	r3, r2
 800b9c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b9ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	68ba      	ldr	r2, [r7, #8]
 800b9d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4a64      	ldr	r2, [pc, #400]	@ (800bb70 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	f000 80a9 	beq.w	800bb36 <HAL_TIM_ConfigClockSource+0x1aa>
 800b9e4:	4a62      	ldr	r2, [pc, #392]	@ (800bb70 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	f200 80ae 	bhi.w	800bb48 <HAL_TIM_ConfigClockSource+0x1bc>
 800b9ec:	4a61      	ldr	r2, [pc, #388]	@ (800bb74 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	f000 80a1 	beq.w	800bb36 <HAL_TIM_ConfigClockSource+0x1aa>
 800b9f4:	4a5f      	ldr	r2, [pc, #380]	@ (800bb74 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	f200 80a6 	bhi.w	800bb48 <HAL_TIM_ConfigClockSource+0x1bc>
 800b9fc:	4a5e      	ldr	r2, [pc, #376]	@ (800bb78 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	f000 8099 	beq.w	800bb36 <HAL_TIM_ConfigClockSource+0x1aa>
 800ba04:	4a5c      	ldr	r2, [pc, #368]	@ (800bb78 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ba06:	4293      	cmp	r3, r2
 800ba08:	f200 809e 	bhi.w	800bb48 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba0c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ba10:	f000 8091 	beq.w	800bb36 <HAL_TIM_ConfigClockSource+0x1aa>
 800ba14:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ba18:	f200 8096 	bhi.w	800bb48 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ba20:	f000 8089 	beq.w	800bb36 <HAL_TIM_ConfigClockSource+0x1aa>
 800ba24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ba28:	f200 808e 	bhi.w	800bb48 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ba30:	d03e      	beq.n	800bab0 <HAL_TIM_ConfigClockSource+0x124>
 800ba32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ba36:	f200 8087 	bhi.w	800bb48 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba3e:	f000 8086 	beq.w	800bb4e <HAL_TIM_ConfigClockSource+0x1c2>
 800ba42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba46:	d87f      	bhi.n	800bb48 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba48:	2b70      	cmp	r3, #112	@ 0x70
 800ba4a:	d01a      	beq.n	800ba82 <HAL_TIM_ConfigClockSource+0xf6>
 800ba4c:	2b70      	cmp	r3, #112	@ 0x70
 800ba4e:	d87b      	bhi.n	800bb48 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba50:	2b60      	cmp	r3, #96	@ 0x60
 800ba52:	d050      	beq.n	800baf6 <HAL_TIM_ConfigClockSource+0x16a>
 800ba54:	2b60      	cmp	r3, #96	@ 0x60
 800ba56:	d877      	bhi.n	800bb48 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba58:	2b50      	cmp	r3, #80	@ 0x50
 800ba5a:	d03c      	beq.n	800bad6 <HAL_TIM_ConfigClockSource+0x14a>
 800ba5c:	2b50      	cmp	r3, #80	@ 0x50
 800ba5e:	d873      	bhi.n	800bb48 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba60:	2b40      	cmp	r3, #64	@ 0x40
 800ba62:	d058      	beq.n	800bb16 <HAL_TIM_ConfigClockSource+0x18a>
 800ba64:	2b40      	cmp	r3, #64	@ 0x40
 800ba66:	d86f      	bhi.n	800bb48 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba68:	2b30      	cmp	r3, #48	@ 0x30
 800ba6a:	d064      	beq.n	800bb36 <HAL_TIM_ConfigClockSource+0x1aa>
 800ba6c:	2b30      	cmp	r3, #48	@ 0x30
 800ba6e:	d86b      	bhi.n	800bb48 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba70:	2b20      	cmp	r3, #32
 800ba72:	d060      	beq.n	800bb36 <HAL_TIM_ConfigClockSource+0x1aa>
 800ba74:	2b20      	cmp	r3, #32
 800ba76:	d867      	bhi.n	800bb48 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d05c      	beq.n	800bb36 <HAL_TIM_ConfigClockSource+0x1aa>
 800ba7c:	2b10      	cmp	r3, #16
 800ba7e:	d05a      	beq.n	800bb36 <HAL_TIM_ConfigClockSource+0x1aa>
 800ba80:	e062      	b.n	800bb48 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ba92:	f000 f9cb 	bl	800be2c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	689b      	ldr	r3, [r3, #8]
 800ba9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800baa4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	68ba      	ldr	r2, [r7, #8]
 800baac:	609a      	str	r2, [r3, #8]
      break;
 800baae:	e04f      	b.n	800bb50 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bac0:	f000 f9b4 	bl	800be2c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	689a      	ldr	r2, [r3, #8]
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bad2:	609a      	str	r2, [r3, #8]
      break;
 800bad4:	e03c      	b.n	800bb50 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bae2:	461a      	mov	r2, r3
 800bae4:	f000 f924 	bl	800bd30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	2150      	movs	r1, #80	@ 0x50
 800baee:	4618      	mov	r0, r3
 800baf0:	f000 f97e 	bl	800bdf0 <TIM_ITRx_SetConfig>
      break;
 800baf4:	e02c      	b.n	800bb50 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bb02:	461a      	mov	r2, r3
 800bb04:	f000 f943 	bl	800bd8e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	2160      	movs	r1, #96	@ 0x60
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f000 f96e 	bl	800bdf0 <TIM_ITRx_SetConfig>
      break;
 800bb14:	e01c      	b.n	800bb50 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb22:	461a      	mov	r2, r3
 800bb24:	f000 f904 	bl	800bd30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	2140      	movs	r1, #64	@ 0x40
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f000 f95e 	bl	800bdf0 <TIM_ITRx_SetConfig>
      break;
 800bb34:	e00c      	b.n	800bb50 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681a      	ldr	r2, [r3, #0]
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	4619      	mov	r1, r3
 800bb40:	4610      	mov	r0, r2
 800bb42:	f000 f955 	bl	800bdf0 <TIM_ITRx_SetConfig>
      break;
 800bb46:	e003      	b.n	800bb50 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800bb48:	2301      	movs	r3, #1
 800bb4a:	73fb      	strb	r3, [r7, #15]
      break;
 800bb4c:	e000      	b.n	800bb50 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800bb4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2201      	movs	r2, #1
 800bb54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bb60:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	3710      	adds	r7, #16
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}
 800bb6a:	bf00      	nop
 800bb6c:	ffceff88 	.word	0xffceff88
 800bb70:	00100040 	.word	0x00100040
 800bb74:	00100030 	.word	0x00100030
 800bb78:	00100020 	.word	0x00100020

0800bb7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b083      	sub	sp, #12
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bb84:	bf00      	nop
 800bb86:	370c      	adds	r7, #12
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr

0800bb90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bb90:	b480      	push	{r7}
 800bb92:	b083      	sub	sp, #12
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bb98:	bf00      	nop
 800bb9a:	370c      	adds	r7, #12
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba2:	4770      	bx	lr

0800bba4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bba4:	b480      	push	{r7}
 800bba6:	b083      	sub	sp, #12
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bbac:	bf00      	nop
 800bbae:	370c      	adds	r7, #12
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr

0800bbb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b083      	sub	sp, #12
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bbc0:	bf00      	nop
 800bbc2:	370c      	adds	r7, #12
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr

0800bbcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b085      	sub	sp, #20
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
 800bbd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	4a4a      	ldr	r2, [pc, #296]	@ (800bd08 <TIM_Base_SetConfig+0x13c>)
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d013      	beq.n	800bc0c <TIM_Base_SetConfig+0x40>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bbea:	d00f      	beq.n	800bc0c <TIM_Base_SetConfig+0x40>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	4a47      	ldr	r2, [pc, #284]	@ (800bd0c <TIM_Base_SetConfig+0x140>)
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d00b      	beq.n	800bc0c <TIM_Base_SetConfig+0x40>
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	4a46      	ldr	r2, [pc, #280]	@ (800bd10 <TIM_Base_SetConfig+0x144>)
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	d007      	beq.n	800bc0c <TIM_Base_SetConfig+0x40>
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	4a45      	ldr	r2, [pc, #276]	@ (800bd14 <TIM_Base_SetConfig+0x148>)
 800bc00:	4293      	cmp	r3, r2
 800bc02:	d003      	beq.n	800bc0c <TIM_Base_SetConfig+0x40>
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	4a44      	ldr	r2, [pc, #272]	@ (800bd18 <TIM_Base_SetConfig+0x14c>)
 800bc08:	4293      	cmp	r3, r2
 800bc0a:	d108      	bne.n	800bc1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	685b      	ldr	r3, [r3, #4]
 800bc18:	68fa      	ldr	r2, [r7, #12]
 800bc1a:	4313      	orrs	r3, r2
 800bc1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	4a39      	ldr	r2, [pc, #228]	@ (800bd08 <TIM_Base_SetConfig+0x13c>)
 800bc22:	4293      	cmp	r3, r2
 800bc24:	d027      	beq.n	800bc76 <TIM_Base_SetConfig+0xaa>
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc2c:	d023      	beq.n	800bc76 <TIM_Base_SetConfig+0xaa>
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	4a36      	ldr	r2, [pc, #216]	@ (800bd0c <TIM_Base_SetConfig+0x140>)
 800bc32:	4293      	cmp	r3, r2
 800bc34:	d01f      	beq.n	800bc76 <TIM_Base_SetConfig+0xaa>
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	4a35      	ldr	r2, [pc, #212]	@ (800bd10 <TIM_Base_SetConfig+0x144>)
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	d01b      	beq.n	800bc76 <TIM_Base_SetConfig+0xaa>
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	4a34      	ldr	r2, [pc, #208]	@ (800bd14 <TIM_Base_SetConfig+0x148>)
 800bc42:	4293      	cmp	r3, r2
 800bc44:	d017      	beq.n	800bc76 <TIM_Base_SetConfig+0xaa>
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	4a33      	ldr	r2, [pc, #204]	@ (800bd18 <TIM_Base_SetConfig+0x14c>)
 800bc4a:	4293      	cmp	r3, r2
 800bc4c:	d013      	beq.n	800bc76 <TIM_Base_SetConfig+0xaa>
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	4a32      	ldr	r2, [pc, #200]	@ (800bd1c <TIM_Base_SetConfig+0x150>)
 800bc52:	4293      	cmp	r3, r2
 800bc54:	d00f      	beq.n	800bc76 <TIM_Base_SetConfig+0xaa>
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	4a31      	ldr	r2, [pc, #196]	@ (800bd20 <TIM_Base_SetConfig+0x154>)
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	d00b      	beq.n	800bc76 <TIM_Base_SetConfig+0xaa>
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	4a30      	ldr	r2, [pc, #192]	@ (800bd24 <TIM_Base_SetConfig+0x158>)
 800bc62:	4293      	cmp	r3, r2
 800bc64:	d007      	beq.n	800bc76 <TIM_Base_SetConfig+0xaa>
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	4a2f      	ldr	r2, [pc, #188]	@ (800bd28 <TIM_Base_SetConfig+0x15c>)
 800bc6a:	4293      	cmp	r3, r2
 800bc6c:	d003      	beq.n	800bc76 <TIM_Base_SetConfig+0xaa>
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	4a2e      	ldr	r2, [pc, #184]	@ (800bd2c <TIM_Base_SetConfig+0x160>)
 800bc72:	4293      	cmp	r3, r2
 800bc74:	d108      	bne.n	800bc88 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bc7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	68db      	ldr	r3, [r3, #12]
 800bc82:	68fa      	ldr	r2, [r7, #12]
 800bc84:	4313      	orrs	r3, r2
 800bc86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	695b      	ldr	r3, [r3, #20]
 800bc92:	4313      	orrs	r3, r2
 800bc94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	68fa      	ldr	r2, [r7, #12]
 800bc9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	689a      	ldr	r2, [r3, #8]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	681a      	ldr	r2, [r3, #0]
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	4a16      	ldr	r2, [pc, #88]	@ (800bd08 <TIM_Base_SetConfig+0x13c>)
 800bcb0:	4293      	cmp	r3, r2
 800bcb2:	d00f      	beq.n	800bcd4 <TIM_Base_SetConfig+0x108>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	4a18      	ldr	r2, [pc, #96]	@ (800bd18 <TIM_Base_SetConfig+0x14c>)
 800bcb8:	4293      	cmp	r3, r2
 800bcba:	d00b      	beq.n	800bcd4 <TIM_Base_SetConfig+0x108>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	4a17      	ldr	r2, [pc, #92]	@ (800bd1c <TIM_Base_SetConfig+0x150>)
 800bcc0:	4293      	cmp	r3, r2
 800bcc2:	d007      	beq.n	800bcd4 <TIM_Base_SetConfig+0x108>
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	4a16      	ldr	r2, [pc, #88]	@ (800bd20 <TIM_Base_SetConfig+0x154>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d003      	beq.n	800bcd4 <TIM_Base_SetConfig+0x108>
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	4a15      	ldr	r2, [pc, #84]	@ (800bd24 <TIM_Base_SetConfig+0x158>)
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d103      	bne.n	800bcdc <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	691a      	ldr	r2, [r3, #16]
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2201      	movs	r2, #1
 800bce0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	691b      	ldr	r3, [r3, #16]
 800bce6:	f003 0301 	and.w	r3, r3, #1
 800bcea:	2b01      	cmp	r3, #1
 800bcec:	d105      	bne.n	800bcfa <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	691b      	ldr	r3, [r3, #16]
 800bcf2:	f023 0201 	bic.w	r2, r3, #1
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	611a      	str	r2, [r3, #16]
  }
}
 800bcfa:	bf00      	nop
 800bcfc:	3714      	adds	r7, #20
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd04:	4770      	bx	lr
 800bd06:	bf00      	nop
 800bd08:	40010000 	.word	0x40010000
 800bd0c:	40000400 	.word	0x40000400
 800bd10:	40000800 	.word	0x40000800
 800bd14:	40000c00 	.word	0x40000c00
 800bd18:	40010400 	.word	0x40010400
 800bd1c:	40014000 	.word	0x40014000
 800bd20:	40014400 	.word	0x40014400
 800bd24:	40014800 	.word	0x40014800
 800bd28:	4000e000 	.word	0x4000e000
 800bd2c:	4000e400 	.word	0x4000e400

0800bd30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd30:	b480      	push	{r7}
 800bd32:	b087      	sub	sp, #28
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	60f8      	str	r0, [r7, #12]
 800bd38:	60b9      	str	r1, [r7, #8]
 800bd3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	6a1b      	ldr	r3, [r3, #32]
 800bd40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	6a1b      	ldr	r3, [r3, #32]
 800bd46:	f023 0201 	bic.w	r2, r3, #1
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	699b      	ldr	r3, [r3, #24]
 800bd52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bd5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	011b      	lsls	r3, r3, #4
 800bd60:	693a      	ldr	r2, [r7, #16]
 800bd62:	4313      	orrs	r3, r2
 800bd64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bd66:	697b      	ldr	r3, [r7, #20]
 800bd68:	f023 030a 	bic.w	r3, r3, #10
 800bd6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bd6e:	697a      	ldr	r2, [r7, #20]
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	4313      	orrs	r3, r2
 800bd74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	693a      	ldr	r2, [r7, #16]
 800bd7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	697a      	ldr	r2, [r7, #20]
 800bd80:	621a      	str	r2, [r3, #32]
}
 800bd82:	bf00      	nop
 800bd84:	371c      	adds	r7, #28
 800bd86:	46bd      	mov	sp, r7
 800bd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8c:	4770      	bx	lr

0800bd8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd8e:	b480      	push	{r7}
 800bd90:	b087      	sub	sp, #28
 800bd92:	af00      	add	r7, sp, #0
 800bd94:	60f8      	str	r0, [r7, #12]
 800bd96:	60b9      	str	r1, [r7, #8]
 800bd98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	6a1b      	ldr	r3, [r3, #32]
 800bd9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	6a1b      	ldr	r3, [r3, #32]
 800bda4:	f023 0210 	bic.w	r2, r3, #16
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	699b      	ldr	r3, [r3, #24]
 800bdb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bdb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	031b      	lsls	r3, r3, #12
 800bdbe:	693a      	ldr	r2, [r7, #16]
 800bdc0:	4313      	orrs	r3, r2
 800bdc2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bdca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	011b      	lsls	r3, r3, #4
 800bdd0:	697a      	ldr	r2, [r7, #20]
 800bdd2:	4313      	orrs	r3, r2
 800bdd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	693a      	ldr	r2, [r7, #16]
 800bdda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	697a      	ldr	r2, [r7, #20]
 800bde0:	621a      	str	r2, [r3, #32]
}
 800bde2:	bf00      	nop
 800bde4:	371c      	adds	r7, #28
 800bde6:	46bd      	mov	sp, r7
 800bde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdec:	4770      	bx	lr
	...

0800bdf0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bdf0:	b480      	push	{r7}
 800bdf2:	b085      	sub	sp, #20
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
 800bdf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	689b      	ldr	r3, [r3, #8]
 800bdfe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800be00:	68fa      	ldr	r2, [r7, #12]
 800be02:	4b09      	ldr	r3, [pc, #36]	@ (800be28 <TIM_ITRx_SetConfig+0x38>)
 800be04:	4013      	ands	r3, r2
 800be06:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800be08:	683a      	ldr	r2, [r7, #0]
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	4313      	orrs	r3, r2
 800be0e:	f043 0307 	orr.w	r3, r3, #7
 800be12:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	68fa      	ldr	r2, [r7, #12]
 800be18:	609a      	str	r2, [r3, #8]
}
 800be1a:	bf00      	nop
 800be1c:	3714      	adds	r7, #20
 800be1e:	46bd      	mov	sp, r7
 800be20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be24:	4770      	bx	lr
 800be26:	bf00      	nop
 800be28:	ffcfff8f 	.word	0xffcfff8f

0800be2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b087      	sub	sp, #28
 800be30:	af00      	add	r7, sp, #0
 800be32:	60f8      	str	r0, [r7, #12]
 800be34:	60b9      	str	r1, [r7, #8]
 800be36:	607a      	str	r2, [r7, #4]
 800be38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	689b      	ldr	r3, [r3, #8]
 800be3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800be46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	021a      	lsls	r2, r3, #8
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	431a      	orrs	r2, r3
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	4313      	orrs	r3, r2
 800be54:	697a      	ldr	r2, [r7, #20]
 800be56:	4313      	orrs	r3, r2
 800be58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	697a      	ldr	r2, [r7, #20]
 800be5e:	609a      	str	r2, [r3, #8]
}
 800be60:	bf00      	nop
 800be62:	371c      	adds	r7, #28
 800be64:	46bd      	mov	sp, r7
 800be66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6a:	4770      	bx	lr

0800be6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800be6c:	b480      	push	{r7}
 800be6e:	b085      	sub	sp, #20
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
 800be74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800be7c:	2b01      	cmp	r3, #1
 800be7e:	d101      	bne.n	800be84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800be80:	2302      	movs	r3, #2
 800be82:	e077      	b.n	800bf74 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2201      	movs	r2, #1
 800be88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2202      	movs	r2, #2
 800be90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	685b      	ldr	r3, [r3, #4]
 800be9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	689b      	ldr	r3, [r3, #8]
 800bea2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	4a35      	ldr	r2, [pc, #212]	@ (800bf80 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800beaa:	4293      	cmp	r3, r2
 800beac:	d004      	beq.n	800beb8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	4a34      	ldr	r2, [pc, #208]	@ (800bf84 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800beb4:	4293      	cmp	r3, r2
 800beb6:	d108      	bne.n	800beca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bebe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	685b      	ldr	r3, [r3, #4]
 800bec4:	68fa      	ldr	r2, [r7, #12]
 800bec6:	4313      	orrs	r3, r2
 800bec8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bed0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	68fa      	ldr	r2, [r7, #12]
 800bed8:	4313      	orrs	r3, r2
 800beda:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	68fa      	ldr	r2, [r7, #12]
 800bee2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	4a25      	ldr	r2, [pc, #148]	@ (800bf80 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800beea:	4293      	cmp	r3, r2
 800beec:	d02c      	beq.n	800bf48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bef6:	d027      	beq.n	800bf48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	4a22      	ldr	r2, [pc, #136]	@ (800bf88 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800befe:	4293      	cmp	r3, r2
 800bf00:	d022      	beq.n	800bf48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	4a21      	ldr	r2, [pc, #132]	@ (800bf8c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800bf08:	4293      	cmp	r3, r2
 800bf0a:	d01d      	beq.n	800bf48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	4a1f      	ldr	r2, [pc, #124]	@ (800bf90 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800bf12:	4293      	cmp	r3, r2
 800bf14:	d018      	beq.n	800bf48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	4a1a      	ldr	r2, [pc, #104]	@ (800bf84 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	d013      	beq.n	800bf48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	4a1b      	ldr	r2, [pc, #108]	@ (800bf94 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800bf26:	4293      	cmp	r3, r2
 800bf28:	d00e      	beq.n	800bf48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	4a1a      	ldr	r2, [pc, #104]	@ (800bf98 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800bf30:	4293      	cmp	r3, r2
 800bf32:	d009      	beq.n	800bf48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	4a18      	ldr	r2, [pc, #96]	@ (800bf9c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	d004      	beq.n	800bf48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	4a17      	ldr	r2, [pc, #92]	@ (800bfa0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800bf44:	4293      	cmp	r3, r2
 800bf46:	d10c      	bne.n	800bf62 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bf4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	689b      	ldr	r3, [r3, #8]
 800bf54:	68ba      	ldr	r2, [r7, #8]
 800bf56:	4313      	orrs	r3, r2
 800bf58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	68ba      	ldr	r2, [r7, #8]
 800bf60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2201      	movs	r2, #1
 800bf66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bf72:	2300      	movs	r3, #0
}
 800bf74:	4618      	mov	r0, r3
 800bf76:	3714      	adds	r7, #20
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7e:	4770      	bx	lr
 800bf80:	40010000 	.word	0x40010000
 800bf84:	40010400 	.word	0x40010400
 800bf88:	40000400 	.word	0x40000400
 800bf8c:	40000800 	.word	0x40000800
 800bf90:	40000c00 	.word	0x40000c00
 800bf94:	40001800 	.word	0x40001800
 800bf98:	40014000 	.word	0x40014000
 800bf9c:	4000e000 	.word	0x4000e000
 800bfa0:	4000e400 	.word	0x4000e400

0800bfa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	b083      	sub	sp, #12
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bfac:	bf00      	nop
 800bfae:	370c      	adds	r7, #12
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb6:	4770      	bx	lr

0800bfb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bfb8:	b480      	push	{r7}
 800bfba:	b083      	sub	sp, #12
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bfc0:	bf00      	nop
 800bfc2:	370c      	adds	r7, #12
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfca:	4770      	bx	lr

0800bfcc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bfcc:	b480      	push	{r7}
 800bfce:	b083      	sub	sp, #12
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bfd4:	bf00      	nop
 800bfd6:	370c      	adds	r7, #12
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfde:	4770      	bx	lr

0800bfe0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b082      	sub	sp, #8
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d101      	bne.n	800bff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bfee:	2301      	movs	r3, #1
 800bff0:	e042      	b.n	800c078 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d106      	bne.n	800c00a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2200      	movs	r2, #0
 800c000:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f7f6 f91f 	bl	8002248 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2224      	movs	r2, #36	@ 0x24
 800c00e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	681a      	ldr	r2, [r3, #0]
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	f022 0201 	bic.w	r2, r2, #1
 800c020:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c026:	2b00      	cmp	r3, #0
 800c028:	d002      	beq.n	800c030 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f000 fe94 	bl	800cd58 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f000 f825 	bl	800c080 <UART_SetConfig>
 800c036:	4603      	mov	r3, r0
 800c038:	2b01      	cmp	r3, #1
 800c03a:	d101      	bne.n	800c040 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c03c:	2301      	movs	r3, #1
 800c03e:	e01b      	b.n	800c078 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	685a      	ldr	r2, [r3, #4]
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c04e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	689a      	ldr	r2, [r3, #8]
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c05e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	681a      	ldr	r2, [r3, #0]
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f042 0201 	orr.w	r2, r2, #1
 800c06e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f000 ff13 	bl	800ce9c <UART_CheckIdleState>
 800c076:	4603      	mov	r3, r0
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3708      	adds	r7, #8
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}

0800c080 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c080:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c084:	b092      	sub	sp, #72	@ 0x48
 800c086:	af00      	add	r7, sp, #0
 800c088:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c08a:	2300      	movs	r3, #0
 800c08c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	689a      	ldr	r2, [r3, #8]
 800c094:	697b      	ldr	r3, [r7, #20]
 800c096:	691b      	ldr	r3, [r3, #16]
 800c098:	431a      	orrs	r2, r3
 800c09a:	697b      	ldr	r3, [r7, #20]
 800c09c:	695b      	ldr	r3, [r3, #20]
 800c09e:	431a      	orrs	r2, r3
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	69db      	ldr	r3, [r3, #28]
 800c0a4:	4313      	orrs	r3, r2
 800c0a6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	681a      	ldr	r2, [r3, #0]
 800c0ae:	4bbe      	ldr	r3, [pc, #760]	@ (800c3a8 <UART_SetConfig+0x328>)
 800c0b0:	4013      	ands	r3, r2
 800c0b2:	697a      	ldr	r2, [r7, #20]
 800c0b4:	6812      	ldr	r2, [r2, #0]
 800c0b6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c0b8:	430b      	orrs	r3, r1
 800c0ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	685b      	ldr	r3, [r3, #4]
 800c0c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	68da      	ldr	r2, [r3, #12]
 800c0ca:	697b      	ldr	r3, [r7, #20]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	430a      	orrs	r2, r1
 800c0d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c0d2:	697b      	ldr	r3, [r7, #20]
 800c0d4:	699b      	ldr	r3, [r3, #24]
 800c0d6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c0d8:	697b      	ldr	r3, [r7, #20]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	4ab3      	ldr	r2, [pc, #716]	@ (800c3ac <UART_SetConfig+0x32c>)
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d004      	beq.n	800c0ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	6a1b      	ldr	r3, [r3, #32]
 800c0e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c0e8:	4313      	orrs	r3, r2
 800c0ea:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c0ec:	697b      	ldr	r3, [r7, #20]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	689a      	ldr	r2, [r3, #8]
 800c0f2:	4baf      	ldr	r3, [pc, #700]	@ (800c3b0 <UART_SetConfig+0x330>)
 800c0f4:	4013      	ands	r3, r2
 800c0f6:	697a      	ldr	r2, [r7, #20]
 800c0f8:	6812      	ldr	r2, [r2, #0]
 800c0fa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c0fc:	430b      	orrs	r3, r1
 800c0fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c106:	f023 010f 	bic.w	r1, r3, #15
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	430a      	orrs	r2, r1
 800c114:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	4aa6      	ldr	r2, [pc, #664]	@ (800c3b4 <UART_SetConfig+0x334>)
 800c11c:	4293      	cmp	r3, r2
 800c11e:	d177      	bne.n	800c210 <UART_SetConfig+0x190>
 800c120:	4ba5      	ldr	r3, [pc, #660]	@ (800c3b8 <UART_SetConfig+0x338>)
 800c122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c124:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c128:	2b28      	cmp	r3, #40	@ 0x28
 800c12a:	d86d      	bhi.n	800c208 <UART_SetConfig+0x188>
 800c12c:	a201      	add	r2, pc, #4	@ (adr r2, 800c134 <UART_SetConfig+0xb4>)
 800c12e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c132:	bf00      	nop
 800c134:	0800c1d9 	.word	0x0800c1d9
 800c138:	0800c209 	.word	0x0800c209
 800c13c:	0800c209 	.word	0x0800c209
 800c140:	0800c209 	.word	0x0800c209
 800c144:	0800c209 	.word	0x0800c209
 800c148:	0800c209 	.word	0x0800c209
 800c14c:	0800c209 	.word	0x0800c209
 800c150:	0800c209 	.word	0x0800c209
 800c154:	0800c1e1 	.word	0x0800c1e1
 800c158:	0800c209 	.word	0x0800c209
 800c15c:	0800c209 	.word	0x0800c209
 800c160:	0800c209 	.word	0x0800c209
 800c164:	0800c209 	.word	0x0800c209
 800c168:	0800c209 	.word	0x0800c209
 800c16c:	0800c209 	.word	0x0800c209
 800c170:	0800c209 	.word	0x0800c209
 800c174:	0800c1e9 	.word	0x0800c1e9
 800c178:	0800c209 	.word	0x0800c209
 800c17c:	0800c209 	.word	0x0800c209
 800c180:	0800c209 	.word	0x0800c209
 800c184:	0800c209 	.word	0x0800c209
 800c188:	0800c209 	.word	0x0800c209
 800c18c:	0800c209 	.word	0x0800c209
 800c190:	0800c209 	.word	0x0800c209
 800c194:	0800c1f1 	.word	0x0800c1f1
 800c198:	0800c209 	.word	0x0800c209
 800c19c:	0800c209 	.word	0x0800c209
 800c1a0:	0800c209 	.word	0x0800c209
 800c1a4:	0800c209 	.word	0x0800c209
 800c1a8:	0800c209 	.word	0x0800c209
 800c1ac:	0800c209 	.word	0x0800c209
 800c1b0:	0800c209 	.word	0x0800c209
 800c1b4:	0800c1f9 	.word	0x0800c1f9
 800c1b8:	0800c209 	.word	0x0800c209
 800c1bc:	0800c209 	.word	0x0800c209
 800c1c0:	0800c209 	.word	0x0800c209
 800c1c4:	0800c209 	.word	0x0800c209
 800c1c8:	0800c209 	.word	0x0800c209
 800c1cc:	0800c209 	.word	0x0800c209
 800c1d0:	0800c209 	.word	0x0800c209
 800c1d4:	0800c201 	.word	0x0800c201
 800c1d8:	2301      	movs	r3, #1
 800c1da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1de:	e326      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c1e0:	2304      	movs	r3, #4
 800c1e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1e6:	e322      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c1e8:	2308      	movs	r3, #8
 800c1ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1ee:	e31e      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c1f0:	2310      	movs	r3, #16
 800c1f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1f6:	e31a      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c1f8:	2320      	movs	r3, #32
 800c1fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1fe:	e316      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c200:	2340      	movs	r3, #64	@ 0x40
 800c202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c206:	e312      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c208:	2380      	movs	r3, #128	@ 0x80
 800c20a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c20e:	e30e      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	4a69      	ldr	r2, [pc, #420]	@ (800c3bc <UART_SetConfig+0x33c>)
 800c216:	4293      	cmp	r3, r2
 800c218:	d130      	bne.n	800c27c <UART_SetConfig+0x1fc>
 800c21a:	4b67      	ldr	r3, [pc, #412]	@ (800c3b8 <UART_SetConfig+0x338>)
 800c21c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c21e:	f003 0307 	and.w	r3, r3, #7
 800c222:	2b05      	cmp	r3, #5
 800c224:	d826      	bhi.n	800c274 <UART_SetConfig+0x1f4>
 800c226:	a201      	add	r2, pc, #4	@ (adr r2, 800c22c <UART_SetConfig+0x1ac>)
 800c228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c22c:	0800c245 	.word	0x0800c245
 800c230:	0800c24d 	.word	0x0800c24d
 800c234:	0800c255 	.word	0x0800c255
 800c238:	0800c25d 	.word	0x0800c25d
 800c23c:	0800c265 	.word	0x0800c265
 800c240:	0800c26d 	.word	0x0800c26d
 800c244:	2300      	movs	r3, #0
 800c246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c24a:	e2f0      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c24c:	2304      	movs	r3, #4
 800c24e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c252:	e2ec      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c254:	2308      	movs	r3, #8
 800c256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c25a:	e2e8      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c25c:	2310      	movs	r3, #16
 800c25e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c262:	e2e4      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c264:	2320      	movs	r3, #32
 800c266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c26a:	e2e0      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c26c:	2340      	movs	r3, #64	@ 0x40
 800c26e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c272:	e2dc      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c274:	2380      	movs	r3, #128	@ 0x80
 800c276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c27a:	e2d8      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	4a4f      	ldr	r2, [pc, #316]	@ (800c3c0 <UART_SetConfig+0x340>)
 800c282:	4293      	cmp	r3, r2
 800c284:	d130      	bne.n	800c2e8 <UART_SetConfig+0x268>
 800c286:	4b4c      	ldr	r3, [pc, #304]	@ (800c3b8 <UART_SetConfig+0x338>)
 800c288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c28a:	f003 0307 	and.w	r3, r3, #7
 800c28e:	2b05      	cmp	r3, #5
 800c290:	d826      	bhi.n	800c2e0 <UART_SetConfig+0x260>
 800c292:	a201      	add	r2, pc, #4	@ (adr r2, 800c298 <UART_SetConfig+0x218>)
 800c294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c298:	0800c2b1 	.word	0x0800c2b1
 800c29c:	0800c2b9 	.word	0x0800c2b9
 800c2a0:	0800c2c1 	.word	0x0800c2c1
 800c2a4:	0800c2c9 	.word	0x0800c2c9
 800c2a8:	0800c2d1 	.word	0x0800c2d1
 800c2ac:	0800c2d9 	.word	0x0800c2d9
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2b6:	e2ba      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c2b8:	2304      	movs	r3, #4
 800c2ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2be:	e2b6      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c2c0:	2308      	movs	r3, #8
 800c2c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2c6:	e2b2      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c2c8:	2310      	movs	r3, #16
 800c2ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2ce:	e2ae      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c2d0:	2320      	movs	r3, #32
 800c2d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2d6:	e2aa      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c2d8:	2340      	movs	r3, #64	@ 0x40
 800c2da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2de:	e2a6      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c2e0:	2380      	movs	r3, #128	@ 0x80
 800c2e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2e6:	e2a2      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	4a35      	ldr	r2, [pc, #212]	@ (800c3c4 <UART_SetConfig+0x344>)
 800c2ee:	4293      	cmp	r3, r2
 800c2f0:	d130      	bne.n	800c354 <UART_SetConfig+0x2d4>
 800c2f2:	4b31      	ldr	r3, [pc, #196]	@ (800c3b8 <UART_SetConfig+0x338>)
 800c2f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2f6:	f003 0307 	and.w	r3, r3, #7
 800c2fa:	2b05      	cmp	r3, #5
 800c2fc:	d826      	bhi.n	800c34c <UART_SetConfig+0x2cc>
 800c2fe:	a201      	add	r2, pc, #4	@ (adr r2, 800c304 <UART_SetConfig+0x284>)
 800c300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c304:	0800c31d 	.word	0x0800c31d
 800c308:	0800c325 	.word	0x0800c325
 800c30c:	0800c32d 	.word	0x0800c32d
 800c310:	0800c335 	.word	0x0800c335
 800c314:	0800c33d 	.word	0x0800c33d
 800c318:	0800c345 	.word	0x0800c345
 800c31c:	2300      	movs	r3, #0
 800c31e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c322:	e284      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c324:	2304      	movs	r3, #4
 800c326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c32a:	e280      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c32c:	2308      	movs	r3, #8
 800c32e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c332:	e27c      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c334:	2310      	movs	r3, #16
 800c336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c33a:	e278      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c33c:	2320      	movs	r3, #32
 800c33e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c342:	e274      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c344:	2340      	movs	r3, #64	@ 0x40
 800c346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c34a:	e270      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c34c:	2380      	movs	r3, #128	@ 0x80
 800c34e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c352:	e26c      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	4a1b      	ldr	r2, [pc, #108]	@ (800c3c8 <UART_SetConfig+0x348>)
 800c35a:	4293      	cmp	r3, r2
 800c35c:	d142      	bne.n	800c3e4 <UART_SetConfig+0x364>
 800c35e:	4b16      	ldr	r3, [pc, #88]	@ (800c3b8 <UART_SetConfig+0x338>)
 800c360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c362:	f003 0307 	and.w	r3, r3, #7
 800c366:	2b05      	cmp	r3, #5
 800c368:	d838      	bhi.n	800c3dc <UART_SetConfig+0x35c>
 800c36a:	a201      	add	r2, pc, #4	@ (adr r2, 800c370 <UART_SetConfig+0x2f0>)
 800c36c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c370:	0800c389 	.word	0x0800c389
 800c374:	0800c391 	.word	0x0800c391
 800c378:	0800c399 	.word	0x0800c399
 800c37c:	0800c3a1 	.word	0x0800c3a1
 800c380:	0800c3cd 	.word	0x0800c3cd
 800c384:	0800c3d5 	.word	0x0800c3d5
 800c388:	2300      	movs	r3, #0
 800c38a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c38e:	e24e      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c390:	2304      	movs	r3, #4
 800c392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c396:	e24a      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c398:	2308      	movs	r3, #8
 800c39a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c39e:	e246      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c3a0:	2310      	movs	r3, #16
 800c3a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3a6:	e242      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c3a8:	cfff69f3 	.word	0xcfff69f3
 800c3ac:	58000c00 	.word	0x58000c00
 800c3b0:	11fff4ff 	.word	0x11fff4ff
 800c3b4:	40011000 	.word	0x40011000
 800c3b8:	58024400 	.word	0x58024400
 800c3bc:	40004400 	.word	0x40004400
 800c3c0:	40004800 	.word	0x40004800
 800c3c4:	40004c00 	.word	0x40004c00
 800c3c8:	40005000 	.word	0x40005000
 800c3cc:	2320      	movs	r3, #32
 800c3ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3d2:	e22c      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c3d4:	2340      	movs	r3, #64	@ 0x40
 800c3d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3da:	e228      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c3dc:	2380      	movs	r3, #128	@ 0x80
 800c3de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3e2:	e224      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	4ab1      	ldr	r2, [pc, #708]	@ (800c6b0 <UART_SetConfig+0x630>)
 800c3ea:	4293      	cmp	r3, r2
 800c3ec:	d176      	bne.n	800c4dc <UART_SetConfig+0x45c>
 800c3ee:	4bb1      	ldr	r3, [pc, #708]	@ (800c6b4 <UART_SetConfig+0x634>)
 800c3f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c3f6:	2b28      	cmp	r3, #40	@ 0x28
 800c3f8:	d86c      	bhi.n	800c4d4 <UART_SetConfig+0x454>
 800c3fa:	a201      	add	r2, pc, #4	@ (adr r2, 800c400 <UART_SetConfig+0x380>)
 800c3fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c400:	0800c4a5 	.word	0x0800c4a5
 800c404:	0800c4d5 	.word	0x0800c4d5
 800c408:	0800c4d5 	.word	0x0800c4d5
 800c40c:	0800c4d5 	.word	0x0800c4d5
 800c410:	0800c4d5 	.word	0x0800c4d5
 800c414:	0800c4d5 	.word	0x0800c4d5
 800c418:	0800c4d5 	.word	0x0800c4d5
 800c41c:	0800c4d5 	.word	0x0800c4d5
 800c420:	0800c4ad 	.word	0x0800c4ad
 800c424:	0800c4d5 	.word	0x0800c4d5
 800c428:	0800c4d5 	.word	0x0800c4d5
 800c42c:	0800c4d5 	.word	0x0800c4d5
 800c430:	0800c4d5 	.word	0x0800c4d5
 800c434:	0800c4d5 	.word	0x0800c4d5
 800c438:	0800c4d5 	.word	0x0800c4d5
 800c43c:	0800c4d5 	.word	0x0800c4d5
 800c440:	0800c4b5 	.word	0x0800c4b5
 800c444:	0800c4d5 	.word	0x0800c4d5
 800c448:	0800c4d5 	.word	0x0800c4d5
 800c44c:	0800c4d5 	.word	0x0800c4d5
 800c450:	0800c4d5 	.word	0x0800c4d5
 800c454:	0800c4d5 	.word	0x0800c4d5
 800c458:	0800c4d5 	.word	0x0800c4d5
 800c45c:	0800c4d5 	.word	0x0800c4d5
 800c460:	0800c4bd 	.word	0x0800c4bd
 800c464:	0800c4d5 	.word	0x0800c4d5
 800c468:	0800c4d5 	.word	0x0800c4d5
 800c46c:	0800c4d5 	.word	0x0800c4d5
 800c470:	0800c4d5 	.word	0x0800c4d5
 800c474:	0800c4d5 	.word	0x0800c4d5
 800c478:	0800c4d5 	.word	0x0800c4d5
 800c47c:	0800c4d5 	.word	0x0800c4d5
 800c480:	0800c4c5 	.word	0x0800c4c5
 800c484:	0800c4d5 	.word	0x0800c4d5
 800c488:	0800c4d5 	.word	0x0800c4d5
 800c48c:	0800c4d5 	.word	0x0800c4d5
 800c490:	0800c4d5 	.word	0x0800c4d5
 800c494:	0800c4d5 	.word	0x0800c4d5
 800c498:	0800c4d5 	.word	0x0800c4d5
 800c49c:	0800c4d5 	.word	0x0800c4d5
 800c4a0:	0800c4cd 	.word	0x0800c4cd
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4aa:	e1c0      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c4ac:	2304      	movs	r3, #4
 800c4ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4b2:	e1bc      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c4b4:	2308      	movs	r3, #8
 800c4b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4ba:	e1b8      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c4bc:	2310      	movs	r3, #16
 800c4be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4c2:	e1b4      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c4c4:	2320      	movs	r3, #32
 800c4c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4ca:	e1b0      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c4cc:	2340      	movs	r3, #64	@ 0x40
 800c4ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4d2:	e1ac      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c4d4:	2380      	movs	r3, #128	@ 0x80
 800c4d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4da:	e1a8      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c4dc:	697b      	ldr	r3, [r7, #20]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	4a75      	ldr	r2, [pc, #468]	@ (800c6b8 <UART_SetConfig+0x638>)
 800c4e2:	4293      	cmp	r3, r2
 800c4e4:	d130      	bne.n	800c548 <UART_SetConfig+0x4c8>
 800c4e6:	4b73      	ldr	r3, [pc, #460]	@ (800c6b4 <UART_SetConfig+0x634>)
 800c4e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4ea:	f003 0307 	and.w	r3, r3, #7
 800c4ee:	2b05      	cmp	r3, #5
 800c4f0:	d826      	bhi.n	800c540 <UART_SetConfig+0x4c0>
 800c4f2:	a201      	add	r2, pc, #4	@ (adr r2, 800c4f8 <UART_SetConfig+0x478>)
 800c4f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4f8:	0800c511 	.word	0x0800c511
 800c4fc:	0800c519 	.word	0x0800c519
 800c500:	0800c521 	.word	0x0800c521
 800c504:	0800c529 	.word	0x0800c529
 800c508:	0800c531 	.word	0x0800c531
 800c50c:	0800c539 	.word	0x0800c539
 800c510:	2300      	movs	r3, #0
 800c512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c516:	e18a      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c518:	2304      	movs	r3, #4
 800c51a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c51e:	e186      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c520:	2308      	movs	r3, #8
 800c522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c526:	e182      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c528:	2310      	movs	r3, #16
 800c52a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c52e:	e17e      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c530:	2320      	movs	r3, #32
 800c532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c536:	e17a      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c538:	2340      	movs	r3, #64	@ 0x40
 800c53a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c53e:	e176      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c540:	2380      	movs	r3, #128	@ 0x80
 800c542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c546:	e172      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	4a5b      	ldr	r2, [pc, #364]	@ (800c6bc <UART_SetConfig+0x63c>)
 800c54e:	4293      	cmp	r3, r2
 800c550:	d130      	bne.n	800c5b4 <UART_SetConfig+0x534>
 800c552:	4b58      	ldr	r3, [pc, #352]	@ (800c6b4 <UART_SetConfig+0x634>)
 800c554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c556:	f003 0307 	and.w	r3, r3, #7
 800c55a:	2b05      	cmp	r3, #5
 800c55c:	d826      	bhi.n	800c5ac <UART_SetConfig+0x52c>
 800c55e:	a201      	add	r2, pc, #4	@ (adr r2, 800c564 <UART_SetConfig+0x4e4>)
 800c560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c564:	0800c57d 	.word	0x0800c57d
 800c568:	0800c585 	.word	0x0800c585
 800c56c:	0800c58d 	.word	0x0800c58d
 800c570:	0800c595 	.word	0x0800c595
 800c574:	0800c59d 	.word	0x0800c59d
 800c578:	0800c5a5 	.word	0x0800c5a5
 800c57c:	2300      	movs	r3, #0
 800c57e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c582:	e154      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c584:	2304      	movs	r3, #4
 800c586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c58a:	e150      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c58c:	2308      	movs	r3, #8
 800c58e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c592:	e14c      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c594:	2310      	movs	r3, #16
 800c596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c59a:	e148      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c59c:	2320      	movs	r3, #32
 800c59e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5a2:	e144      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c5a4:	2340      	movs	r3, #64	@ 0x40
 800c5a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5aa:	e140      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c5ac:	2380      	movs	r3, #128	@ 0x80
 800c5ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5b2:	e13c      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c5b4:	697b      	ldr	r3, [r7, #20]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	4a41      	ldr	r2, [pc, #260]	@ (800c6c0 <UART_SetConfig+0x640>)
 800c5ba:	4293      	cmp	r3, r2
 800c5bc:	f040 8082 	bne.w	800c6c4 <UART_SetConfig+0x644>
 800c5c0:	4b3c      	ldr	r3, [pc, #240]	@ (800c6b4 <UART_SetConfig+0x634>)
 800c5c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c5c8:	2b28      	cmp	r3, #40	@ 0x28
 800c5ca:	d86d      	bhi.n	800c6a8 <UART_SetConfig+0x628>
 800c5cc:	a201      	add	r2, pc, #4	@ (adr r2, 800c5d4 <UART_SetConfig+0x554>)
 800c5ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5d2:	bf00      	nop
 800c5d4:	0800c679 	.word	0x0800c679
 800c5d8:	0800c6a9 	.word	0x0800c6a9
 800c5dc:	0800c6a9 	.word	0x0800c6a9
 800c5e0:	0800c6a9 	.word	0x0800c6a9
 800c5e4:	0800c6a9 	.word	0x0800c6a9
 800c5e8:	0800c6a9 	.word	0x0800c6a9
 800c5ec:	0800c6a9 	.word	0x0800c6a9
 800c5f0:	0800c6a9 	.word	0x0800c6a9
 800c5f4:	0800c681 	.word	0x0800c681
 800c5f8:	0800c6a9 	.word	0x0800c6a9
 800c5fc:	0800c6a9 	.word	0x0800c6a9
 800c600:	0800c6a9 	.word	0x0800c6a9
 800c604:	0800c6a9 	.word	0x0800c6a9
 800c608:	0800c6a9 	.word	0x0800c6a9
 800c60c:	0800c6a9 	.word	0x0800c6a9
 800c610:	0800c6a9 	.word	0x0800c6a9
 800c614:	0800c689 	.word	0x0800c689
 800c618:	0800c6a9 	.word	0x0800c6a9
 800c61c:	0800c6a9 	.word	0x0800c6a9
 800c620:	0800c6a9 	.word	0x0800c6a9
 800c624:	0800c6a9 	.word	0x0800c6a9
 800c628:	0800c6a9 	.word	0x0800c6a9
 800c62c:	0800c6a9 	.word	0x0800c6a9
 800c630:	0800c6a9 	.word	0x0800c6a9
 800c634:	0800c691 	.word	0x0800c691
 800c638:	0800c6a9 	.word	0x0800c6a9
 800c63c:	0800c6a9 	.word	0x0800c6a9
 800c640:	0800c6a9 	.word	0x0800c6a9
 800c644:	0800c6a9 	.word	0x0800c6a9
 800c648:	0800c6a9 	.word	0x0800c6a9
 800c64c:	0800c6a9 	.word	0x0800c6a9
 800c650:	0800c6a9 	.word	0x0800c6a9
 800c654:	0800c699 	.word	0x0800c699
 800c658:	0800c6a9 	.word	0x0800c6a9
 800c65c:	0800c6a9 	.word	0x0800c6a9
 800c660:	0800c6a9 	.word	0x0800c6a9
 800c664:	0800c6a9 	.word	0x0800c6a9
 800c668:	0800c6a9 	.word	0x0800c6a9
 800c66c:	0800c6a9 	.word	0x0800c6a9
 800c670:	0800c6a9 	.word	0x0800c6a9
 800c674:	0800c6a1 	.word	0x0800c6a1
 800c678:	2301      	movs	r3, #1
 800c67a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c67e:	e0d6      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c680:	2304      	movs	r3, #4
 800c682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c686:	e0d2      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c688:	2308      	movs	r3, #8
 800c68a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c68e:	e0ce      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c690:	2310      	movs	r3, #16
 800c692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c696:	e0ca      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c698:	2320      	movs	r3, #32
 800c69a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c69e:	e0c6      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c6a0:	2340      	movs	r3, #64	@ 0x40
 800c6a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6a6:	e0c2      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c6a8:	2380      	movs	r3, #128	@ 0x80
 800c6aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6ae:	e0be      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c6b0:	40011400 	.word	0x40011400
 800c6b4:	58024400 	.word	0x58024400
 800c6b8:	40007800 	.word	0x40007800
 800c6bc:	40007c00 	.word	0x40007c00
 800c6c0:	40011800 	.word	0x40011800
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	4aad      	ldr	r2, [pc, #692]	@ (800c980 <UART_SetConfig+0x900>)
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	d176      	bne.n	800c7bc <UART_SetConfig+0x73c>
 800c6ce:	4bad      	ldr	r3, [pc, #692]	@ (800c984 <UART_SetConfig+0x904>)
 800c6d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c6d6:	2b28      	cmp	r3, #40	@ 0x28
 800c6d8:	d86c      	bhi.n	800c7b4 <UART_SetConfig+0x734>
 800c6da:	a201      	add	r2, pc, #4	@ (adr r2, 800c6e0 <UART_SetConfig+0x660>)
 800c6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6e0:	0800c785 	.word	0x0800c785
 800c6e4:	0800c7b5 	.word	0x0800c7b5
 800c6e8:	0800c7b5 	.word	0x0800c7b5
 800c6ec:	0800c7b5 	.word	0x0800c7b5
 800c6f0:	0800c7b5 	.word	0x0800c7b5
 800c6f4:	0800c7b5 	.word	0x0800c7b5
 800c6f8:	0800c7b5 	.word	0x0800c7b5
 800c6fc:	0800c7b5 	.word	0x0800c7b5
 800c700:	0800c78d 	.word	0x0800c78d
 800c704:	0800c7b5 	.word	0x0800c7b5
 800c708:	0800c7b5 	.word	0x0800c7b5
 800c70c:	0800c7b5 	.word	0x0800c7b5
 800c710:	0800c7b5 	.word	0x0800c7b5
 800c714:	0800c7b5 	.word	0x0800c7b5
 800c718:	0800c7b5 	.word	0x0800c7b5
 800c71c:	0800c7b5 	.word	0x0800c7b5
 800c720:	0800c795 	.word	0x0800c795
 800c724:	0800c7b5 	.word	0x0800c7b5
 800c728:	0800c7b5 	.word	0x0800c7b5
 800c72c:	0800c7b5 	.word	0x0800c7b5
 800c730:	0800c7b5 	.word	0x0800c7b5
 800c734:	0800c7b5 	.word	0x0800c7b5
 800c738:	0800c7b5 	.word	0x0800c7b5
 800c73c:	0800c7b5 	.word	0x0800c7b5
 800c740:	0800c79d 	.word	0x0800c79d
 800c744:	0800c7b5 	.word	0x0800c7b5
 800c748:	0800c7b5 	.word	0x0800c7b5
 800c74c:	0800c7b5 	.word	0x0800c7b5
 800c750:	0800c7b5 	.word	0x0800c7b5
 800c754:	0800c7b5 	.word	0x0800c7b5
 800c758:	0800c7b5 	.word	0x0800c7b5
 800c75c:	0800c7b5 	.word	0x0800c7b5
 800c760:	0800c7a5 	.word	0x0800c7a5
 800c764:	0800c7b5 	.word	0x0800c7b5
 800c768:	0800c7b5 	.word	0x0800c7b5
 800c76c:	0800c7b5 	.word	0x0800c7b5
 800c770:	0800c7b5 	.word	0x0800c7b5
 800c774:	0800c7b5 	.word	0x0800c7b5
 800c778:	0800c7b5 	.word	0x0800c7b5
 800c77c:	0800c7b5 	.word	0x0800c7b5
 800c780:	0800c7ad 	.word	0x0800c7ad
 800c784:	2301      	movs	r3, #1
 800c786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c78a:	e050      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c78c:	2304      	movs	r3, #4
 800c78e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c792:	e04c      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c794:	2308      	movs	r3, #8
 800c796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c79a:	e048      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c79c:	2310      	movs	r3, #16
 800c79e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7a2:	e044      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c7a4:	2320      	movs	r3, #32
 800c7a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7aa:	e040      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c7ac:	2340      	movs	r3, #64	@ 0x40
 800c7ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7b2:	e03c      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c7b4:	2380      	movs	r3, #128	@ 0x80
 800c7b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7ba:	e038      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c7bc:	697b      	ldr	r3, [r7, #20]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	4a71      	ldr	r2, [pc, #452]	@ (800c988 <UART_SetConfig+0x908>)
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	d130      	bne.n	800c828 <UART_SetConfig+0x7a8>
 800c7c6:	4b6f      	ldr	r3, [pc, #444]	@ (800c984 <UART_SetConfig+0x904>)
 800c7c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c7ca:	f003 0307 	and.w	r3, r3, #7
 800c7ce:	2b05      	cmp	r3, #5
 800c7d0:	d826      	bhi.n	800c820 <UART_SetConfig+0x7a0>
 800c7d2:	a201      	add	r2, pc, #4	@ (adr r2, 800c7d8 <UART_SetConfig+0x758>)
 800c7d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7d8:	0800c7f1 	.word	0x0800c7f1
 800c7dc:	0800c7f9 	.word	0x0800c7f9
 800c7e0:	0800c801 	.word	0x0800c801
 800c7e4:	0800c809 	.word	0x0800c809
 800c7e8:	0800c811 	.word	0x0800c811
 800c7ec:	0800c819 	.word	0x0800c819
 800c7f0:	2302      	movs	r3, #2
 800c7f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7f6:	e01a      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c7f8:	2304      	movs	r3, #4
 800c7fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7fe:	e016      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c800:	2308      	movs	r3, #8
 800c802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c806:	e012      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c808:	2310      	movs	r3, #16
 800c80a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c80e:	e00e      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c810:	2320      	movs	r3, #32
 800c812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c816:	e00a      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c818:	2340      	movs	r3, #64	@ 0x40
 800c81a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c81e:	e006      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c820:	2380      	movs	r3, #128	@ 0x80
 800c822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c826:	e002      	b.n	800c82e <UART_SetConfig+0x7ae>
 800c828:	2380      	movs	r3, #128	@ 0x80
 800c82a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	4a55      	ldr	r2, [pc, #340]	@ (800c988 <UART_SetConfig+0x908>)
 800c834:	4293      	cmp	r3, r2
 800c836:	f040 80f8 	bne.w	800ca2a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c83a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c83e:	2b20      	cmp	r3, #32
 800c840:	dc46      	bgt.n	800c8d0 <UART_SetConfig+0x850>
 800c842:	2b02      	cmp	r3, #2
 800c844:	db75      	blt.n	800c932 <UART_SetConfig+0x8b2>
 800c846:	3b02      	subs	r3, #2
 800c848:	2b1e      	cmp	r3, #30
 800c84a:	d872      	bhi.n	800c932 <UART_SetConfig+0x8b2>
 800c84c:	a201      	add	r2, pc, #4	@ (adr r2, 800c854 <UART_SetConfig+0x7d4>)
 800c84e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c852:	bf00      	nop
 800c854:	0800c8d7 	.word	0x0800c8d7
 800c858:	0800c933 	.word	0x0800c933
 800c85c:	0800c8df 	.word	0x0800c8df
 800c860:	0800c933 	.word	0x0800c933
 800c864:	0800c933 	.word	0x0800c933
 800c868:	0800c933 	.word	0x0800c933
 800c86c:	0800c8ef 	.word	0x0800c8ef
 800c870:	0800c933 	.word	0x0800c933
 800c874:	0800c933 	.word	0x0800c933
 800c878:	0800c933 	.word	0x0800c933
 800c87c:	0800c933 	.word	0x0800c933
 800c880:	0800c933 	.word	0x0800c933
 800c884:	0800c933 	.word	0x0800c933
 800c888:	0800c933 	.word	0x0800c933
 800c88c:	0800c8ff 	.word	0x0800c8ff
 800c890:	0800c933 	.word	0x0800c933
 800c894:	0800c933 	.word	0x0800c933
 800c898:	0800c933 	.word	0x0800c933
 800c89c:	0800c933 	.word	0x0800c933
 800c8a0:	0800c933 	.word	0x0800c933
 800c8a4:	0800c933 	.word	0x0800c933
 800c8a8:	0800c933 	.word	0x0800c933
 800c8ac:	0800c933 	.word	0x0800c933
 800c8b0:	0800c933 	.word	0x0800c933
 800c8b4:	0800c933 	.word	0x0800c933
 800c8b8:	0800c933 	.word	0x0800c933
 800c8bc:	0800c933 	.word	0x0800c933
 800c8c0:	0800c933 	.word	0x0800c933
 800c8c4:	0800c933 	.word	0x0800c933
 800c8c8:	0800c933 	.word	0x0800c933
 800c8cc:	0800c925 	.word	0x0800c925
 800c8d0:	2b40      	cmp	r3, #64	@ 0x40
 800c8d2:	d02a      	beq.n	800c92a <UART_SetConfig+0x8aa>
 800c8d4:	e02d      	b.n	800c932 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c8d6:	f7fe f859 	bl	800a98c <HAL_RCCEx_GetD3PCLK1Freq>
 800c8da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c8dc:	e02f      	b.n	800c93e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c8de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f7fe f868 	bl	800a9b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c8e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8ec:	e027      	b.n	800c93e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c8ee:	f107 0318 	add.w	r3, r7, #24
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f7fe f9b4 	bl	800ac60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c8f8:	69fb      	ldr	r3, [r7, #28]
 800c8fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8fc:	e01f      	b.n	800c93e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c8fe:	4b21      	ldr	r3, [pc, #132]	@ (800c984 <UART_SetConfig+0x904>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	f003 0320 	and.w	r3, r3, #32
 800c906:	2b00      	cmp	r3, #0
 800c908:	d009      	beq.n	800c91e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c90a:	4b1e      	ldr	r3, [pc, #120]	@ (800c984 <UART_SetConfig+0x904>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	08db      	lsrs	r3, r3, #3
 800c910:	f003 0303 	and.w	r3, r3, #3
 800c914:	4a1d      	ldr	r2, [pc, #116]	@ (800c98c <UART_SetConfig+0x90c>)
 800c916:	fa22 f303 	lsr.w	r3, r2, r3
 800c91a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c91c:	e00f      	b.n	800c93e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c91e:	4b1b      	ldr	r3, [pc, #108]	@ (800c98c <UART_SetConfig+0x90c>)
 800c920:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c922:	e00c      	b.n	800c93e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c924:	4b1a      	ldr	r3, [pc, #104]	@ (800c990 <UART_SetConfig+0x910>)
 800c926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c928:	e009      	b.n	800c93e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c92a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c92e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c930:	e005      	b.n	800c93e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c932:	2300      	movs	r3, #0
 800c934:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c936:	2301      	movs	r3, #1
 800c938:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c93c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c93e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c940:	2b00      	cmp	r3, #0
 800c942:	f000 81ee 	beq.w	800cd22 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c94a:	4a12      	ldr	r2, [pc, #72]	@ (800c994 <UART_SetConfig+0x914>)
 800c94c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c950:	461a      	mov	r2, r3
 800c952:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c954:	fbb3 f3f2 	udiv	r3, r3, r2
 800c958:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	685a      	ldr	r2, [r3, #4]
 800c95e:	4613      	mov	r3, r2
 800c960:	005b      	lsls	r3, r3, #1
 800c962:	4413      	add	r3, r2
 800c964:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c966:	429a      	cmp	r2, r3
 800c968:	d305      	bcc.n	800c976 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c96a:	697b      	ldr	r3, [r7, #20]
 800c96c:	685b      	ldr	r3, [r3, #4]
 800c96e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c970:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c972:	429a      	cmp	r2, r3
 800c974:	d910      	bls.n	800c998 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800c976:	2301      	movs	r3, #1
 800c978:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c97c:	e1d1      	b.n	800cd22 <UART_SetConfig+0xca2>
 800c97e:	bf00      	nop
 800c980:	40011c00 	.word	0x40011c00
 800c984:	58024400 	.word	0x58024400
 800c988:	58000c00 	.word	0x58000c00
 800c98c:	03d09000 	.word	0x03d09000
 800c990:	003d0900 	.word	0x003d0900
 800c994:	0800d428 	.word	0x0800d428
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c998:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c99a:	2200      	movs	r2, #0
 800c99c:	60bb      	str	r3, [r7, #8]
 800c99e:	60fa      	str	r2, [r7, #12]
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9a4:	4ac0      	ldr	r2, [pc, #768]	@ (800cca8 <UART_SetConfig+0xc28>)
 800c9a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c9aa:	b29b      	uxth	r3, r3
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	603b      	str	r3, [r7, #0]
 800c9b0:	607a      	str	r2, [r7, #4]
 800c9b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c9ba:	f7f3 fca7 	bl	800030c <__aeabi_uldivmod>
 800c9be:	4602      	mov	r2, r0
 800c9c0:	460b      	mov	r3, r1
 800c9c2:	4610      	mov	r0, r2
 800c9c4:	4619      	mov	r1, r3
 800c9c6:	f04f 0200 	mov.w	r2, #0
 800c9ca:	f04f 0300 	mov.w	r3, #0
 800c9ce:	020b      	lsls	r3, r1, #8
 800c9d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c9d4:	0202      	lsls	r2, r0, #8
 800c9d6:	6979      	ldr	r1, [r7, #20]
 800c9d8:	6849      	ldr	r1, [r1, #4]
 800c9da:	0849      	lsrs	r1, r1, #1
 800c9dc:	2000      	movs	r0, #0
 800c9de:	460c      	mov	r4, r1
 800c9e0:	4605      	mov	r5, r0
 800c9e2:	eb12 0804 	adds.w	r8, r2, r4
 800c9e6:	eb43 0905 	adc.w	r9, r3, r5
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	685b      	ldr	r3, [r3, #4]
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	469a      	mov	sl, r3
 800c9f2:	4693      	mov	fp, r2
 800c9f4:	4652      	mov	r2, sl
 800c9f6:	465b      	mov	r3, fp
 800c9f8:	4640      	mov	r0, r8
 800c9fa:	4649      	mov	r1, r9
 800c9fc:	f7f3 fc86 	bl	800030c <__aeabi_uldivmod>
 800ca00:	4602      	mov	r2, r0
 800ca02:	460b      	mov	r3, r1
 800ca04:	4613      	mov	r3, r2
 800ca06:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ca08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ca0e:	d308      	bcc.n	800ca22 <UART_SetConfig+0x9a2>
 800ca10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ca16:	d204      	bcs.n	800ca22 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca1e:	60da      	str	r2, [r3, #12]
 800ca20:	e17f      	b.n	800cd22 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800ca22:	2301      	movs	r3, #1
 800ca24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ca28:	e17b      	b.n	800cd22 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ca2a:	697b      	ldr	r3, [r7, #20]
 800ca2c:	69db      	ldr	r3, [r3, #28]
 800ca2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ca32:	f040 80bd 	bne.w	800cbb0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800ca36:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ca3a:	2b20      	cmp	r3, #32
 800ca3c:	dc48      	bgt.n	800cad0 <UART_SetConfig+0xa50>
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	db7b      	blt.n	800cb3a <UART_SetConfig+0xaba>
 800ca42:	2b20      	cmp	r3, #32
 800ca44:	d879      	bhi.n	800cb3a <UART_SetConfig+0xaba>
 800ca46:	a201      	add	r2, pc, #4	@ (adr r2, 800ca4c <UART_SetConfig+0x9cc>)
 800ca48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca4c:	0800cad7 	.word	0x0800cad7
 800ca50:	0800cadf 	.word	0x0800cadf
 800ca54:	0800cb3b 	.word	0x0800cb3b
 800ca58:	0800cb3b 	.word	0x0800cb3b
 800ca5c:	0800cae7 	.word	0x0800cae7
 800ca60:	0800cb3b 	.word	0x0800cb3b
 800ca64:	0800cb3b 	.word	0x0800cb3b
 800ca68:	0800cb3b 	.word	0x0800cb3b
 800ca6c:	0800caf7 	.word	0x0800caf7
 800ca70:	0800cb3b 	.word	0x0800cb3b
 800ca74:	0800cb3b 	.word	0x0800cb3b
 800ca78:	0800cb3b 	.word	0x0800cb3b
 800ca7c:	0800cb3b 	.word	0x0800cb3b
 800ca80:	0800cb3b 	.word	0x0800cb3b
 800ca84:	0800cb3b 	.word	0x0800cb3b
 800ca88:	0800cb3b 	.word	0x0800cb3b
 800ca8c:	0800cb07 	.word	0x0800cb07
 800ca90:	0800cb3b 	.word	0x0800cb3b
 800ca94:	0800cb3b 	.word	0x0800cb3b
 800ca98:	0800cb3b 	.word	0x0800cb3b
 800ca9c:	0800cb3b 	.word	0x0800cb3b
 800caa0:	0800cb3b 	.word	0x0800cb3b
 800caa4:	0800cb3b 	.word	0x0800cb3b
 800caa8:	0800cb3b 	.word	0x0800cb3b
 800caac:	0800cb3b 	.word	0x0800cb3b
 800cab0:	0800cb3b 	.word	0x0800cb3b
 800cab4:	0800cb3b 	.word	0x0800cb3b
 800cab8:	0800cb3b 	.word	0x0800cb3b
 800cabc:	0800cb3b 	.word	0x0800cb3b
 800cac0:	0800cb3b 	.word	0x0800cb3b
 800cac4:	0800cb3b 	.word	0x0800cb3b
 800cac8:	0800cb3b 	.word	0x0800cb3b
 800cacc:	0800cb2d 	.word	0x0800cb2d
 800cad0:	2b40      	cmp	r3, #64	@ 0x40
 800cad2:	d02e      	beq.n	800cb32 <UART_SetConfig+0xab2>
 800cad4:	e031      	b.n	800cb3a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cad6:	f7fc f879 	bl	8008bcc <HAL_RCC_GetPCLK1Freq>
 800cada:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cadc:	e033      	b.n	800cb46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cade:	f7fc f88b 	bl	8008bf8 <HAL_RCC_GetPCLK2Freq>
 800cae2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cae4:	e02f      	b.n	800cb46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cae6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800caea:	4618      	mov	r0, r3
 800caec:	f7fd ff64 	bl	800a9b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800caf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800caf4:	e027      	b.n	800cb46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800caf6:	f107 0318 	add.w	r3, r7, #24
 800cafa:	4618      	mov	r0, r3
 800cafc:	f7fe f8b0 	bl	800ac60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cb00:	69fb      	ldr	r3, [r7, #28]
 800cb02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb04:	e01f      	b.n	800cb46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb06:	4b69      	ldr	r3, [pc, #420]	@ (800ccac <UART_SetConfig+0xc2c>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	f003 0320 	and.w	r3, r3, #32
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d009      	beq.n	800cb26 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cb12:	4b66      	ldr	r3, [pc, #408]	@ (800ccac <UART_SetConfig+0xc2c>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	08db      	lsrs	r3, r3, #3
 800cb18:	f003 0303 	and.w	r3, r3, #3
 800cb1c:	4a64      	ldr	r2, [pc, #400]	@ (800ccb0 <UART_SetConfig+0xc30>)
 800cb1e:	fa22 f303 	lsr.w	r3, r2, r3
 800cb22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cb24:	e00f      	b.n	800cb46 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800cb26:	4b62      	ldr	r3, [pc, #392]	@ (800ccb0 <UART_SetConfig+0xc30>)
 800cb28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb2a:	e00c      	b.n	800cb46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cb2c:	4b61      	ldr	r3, [pc, #388]	@ (800ccb4 <UART_SetConfig+0xc34>)
 800cb2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb30:	e009      	b.n	800cb46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cb32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cb36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb38:	e005      	b.n	800cb46 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800cb3e:	2301      	movs	r3, #1
 800cb40:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800cb44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cb46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	f000 80ea 	beq.w	800cd22 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cb4e:	697b      	ldr	r3, [r7, #20]
 800cb50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb52:	4a55      	ldr	r2, [pc, #340]	@ (800cca8 <UART_SetConfig+0xc28>)
 800cb54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb58:	461a      	mov	r2, r3
 800cb5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb5c:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb60:	005a      	lsls	r2, r3, #1
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	685b      	ldr	r3, [r3, #4]
 800cb66:	085b      	lsrs	r3, r3, #1
 800cb68:	441a      	add	r2, r3
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb72:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cb74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb76:	2b0f      	cmp	r3, #15
 800cb78:	d916      	bls.n	800cba8 <UART_SetConfig+0xb28>
 800cb7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cb80:	d212      	bcs.n	800cba8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cb82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb84:	b29b      	uxth	r3, r3
 800cb86:	f023 030f 	bic.w	r3, r3, #15
 800cb8a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cb8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb8e:	085b      	lsrs	r3, r3, #1
 800cb90:	b29b      	uxth	r3, r3
 800cb92:	f003 0307 	and.w	r3, r3, #7
 800cb96:	b29a      	uxth	r2, r3
 800cb98:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cb9a:	4313      	orrs	r3, r2
 800cb9c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800cb9e:	697b      	ldr	r3, [r7, #20]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800cba4:	60da      	str	r2, [r3, #12]
 800cba6:	e0bc      	b.n	800cd22 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800cba8:	2301      	movs	r3, #1
 800cbaa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800cbae:	e0b8      	b.n	800cd22 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cbb0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cbb4:	2b20      	cmp	r3, #32
 800cbb6:	dc4b      	bgt.n	800cc50 <UART_SetConfig+0xbd0>
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	f2c0 8087 	blt.w	800cccc <UART_SetConfig+0xc4c>
 800cbbe:	2b20      	cmp	r3, #32
 800cbc0:	f200 8084 	bhi.w	800cccc <UART_SetConfig+0xc4c>
 800cbc4:	a201      	add	r2, pc, #4	@ (adr r2, 800cbcc <UART_SetConfig+0xb4c>)
 800cbc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbca:	bf00      	nop
 800cbcc:	0800cc57 	.word	0x0800cc57
 800cbd0:	0800cc5f 	.word	0x0800cc5f
 800cbd4:	0800cccd 	.word	0x0800cccd
 800cbd8:	0800cccd 	.word	0x0800cccd
 800cbdc:	0800cc67 	.word	0x0800cc67
 800cbe0:	0800cccd 	.word	0x0800cccd
 800cbe4:	0800cccd 	.word	0x0800cccd
 800cbe8:	0800cccd 	.word	0x0800cccd
 800cbec:	0800cc77 	.word	0x0800cc77
 800cbf0:	0800cccd 	.word	0x0800cccd
 800cbf4:	0800cccd 	.word	0x0800cccd
 800cbf8:	0800cccd 	.word	0x0800cccd
 800cbfc:	0800cccd 	.word	0x0800cccd
 800cc00:	0800cccd 	.word	0x0800cccd
 800cc04:	0800cccd 	.word	0x0800cccd
 800cc08:	0800cccd 	.word	0x0800cccd
 800cc0c:	0800cc87 	.word	0x0800cc87
 800cc10:	0800cccd 	.word	0x0800cccd
 800cc14:	0800cccd 	.word	0x0800cccd
 800cc18:	0800cccd 	.word	0x0800cccd
 800cc1c:	0800cccd 	.word	0x0800cccd
 800cc20:	0800cccd 	.word	0x0800cccd
 800cc24:	0800cccd 	.word	0x0800cccd
 800cc28:	0800cccd 	.word	0x0800cccd
 800cc2c:	0800cccd 	.word	0x0800cccd
 800cc30:	0800cccd 	.word	0x0800cccd
 800cc34:	0800cccd 	.word	0x0800cccd
 800cc38:	0800cccd 	.word	0x0800cccd
 800cc3c:	0800cccd 	.word	0x0800cccd
 800cc40:	0800cccd 	.word	0x0800cccd
 800cc44:	0800cccd 	.word	0x0800cccd
 800cc48:	0800cccd 	.word	0x0800cccd
 800cc4c:	0800ccbf 	.word	0x0800ccbf
 800cc50:	2b40      	cmp	r3, #64	@ 0x40
 800cc52:	d037      	beq.n	800ccc4 <UART_SetConfig+0xc44>
 800cc54:	e03a      	b.n	800cccc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cc56:	f7fb ffb9 	bl	8008bcc <HAL_RCC_GetPCLK1Freq>
 800cc5a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cc5c:	e03c      	b.n	800ccd8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cc5e:	f7fb ffcb 	bl	8008bf8 <HAL_RCC_GetPCLK2Freq>
 800cc62:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cc64:	e038      	b.n	800ccd8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f7fd fea4 	bl	800a9b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cc70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc74:	e030      	b.n	800ccd8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc76:	f107 0318 	add.w	r3, r7, #24
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f7fd fff0 	bl	800ac60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cc80:	69fb      	ldr	r3, [r7, #28]
 800cc82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc84:	e028      	b.n	800ccd8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cc86:	4b09      	ldr	r3, [pc, #36]	@ (800ccac <UART_SetConfig+0xc2c>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	f003 0320 	and.w	r3, r3, #32
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d012      	beq.n	800ccb8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cc92:	4b06      	ldr	r3, [pc, #24]	@ (800ccac <UART_SetConfig+0xc2c>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	08db      	lsrs	r3, r3, #3
 800cc98:	f003 0303 	and.w	r3, r3, #3
 800cc9c:	4a04      	ldr	r2, [pc, #16]	@ (800ccb0 <UART_SetConfig+0xc30>)
 800cc9e:	fa22 f303 	lsr.w	r3, r2, r3
 800cca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cca4:	e018      	b.n	800ccd8 <UART_SetConfig+0xc58>
 800cca6:	bf00      	nop
 800cca8:	0800d428 	.word	0x0800d428
 800ccac:	58024400 	.word	0x58024400
 800ccb0:	03d09000 	.word	0x03d09000
 800ccb4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800ccb8:	4b24      	ldr	r3, [pc, #144]	@ (800cd4c <UART_SetConfig+0xccc>)
 800ccba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ccbc:	e00c      	b.n	800ccd8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ccbe:	4b24      	ldr	r3, [pc, #144]	@ (800cd50 <UART_SetConfig+0xcd0>)
 800ccc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ccc2:	e009      	b.n	800ccd8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ccc4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ccc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ccca:	e005      	b.n	800ccd8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800cccc:	2300      	movs	r3, #0
 800ccce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ccd6:	bf00      	nop
    }

    if (pclk != 0U)
 800ccd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d021      	beq.n	800cd22 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ccde:	697b      	ldr	r3, [r7, #20]
 800cce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cce2:	4a1c      	ldr	r2, [pc, #112]	@ (800cd54 <UART_SetConfig+0xcd4>)
 800cce4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cce8:	461a      	mov	r2, r3
 800ccea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccec:	fbb3 f2f2 	udiv	r2, r3, r2
 800ccf0:	697b      	ldr	r3, [r7, #20]
 800ccf2:	685b      	ldr	r3, [r3, #4]
 800ccf4:	085b      	lsrs	r3, r3, #1
 800ccf6:	441a      	add	r2, r3
 800ccf8:	697b      	ldr	r3, [r7, #20]
 800ccfa:	685b      	ldr	r3, [r3, #4]
 800ccfc:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd00:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cd02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd04:	2b0f      	cmp	r3, #15
 800cd06:	d909      	bls.n	800cd1c <UART_SetConfig+0xc9c>
 800cd08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cd0e:	d205      	bcs.n	800cd1c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cd10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd12:	b29a      	uxth	r2, r3
 800cd14:	697b      	ldr	r3, [r7, #20]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	60da      	str	r2, [r3, #12]
 800cd1a:	e002      	b.n	800cd22 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800cd1c:	2301      	movs	r3, #1
 800cd1e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	2201      	movs	r2, #1
 800cd26:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800cd2a:	697b      	ldr	r3, [r7, #20]
 800cd2c:	2201      	movs	r2, #1
 800cd2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	2200      	movs	r2, #0
 800cd36:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800cd38:	697b      	ldr	r3, [r7, #20]
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800cd3e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800cd42:	4618      	mov	r0, r3
 800cd44:	3748      	adds	r7, #72	@ 0x48
 800cd46:	46bd      	mov	sp, r7
 800cd48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cd4c:	03d09000 	.word	0x03d09000
 800cd50:	003d0900 	.word	0x003d0900
 800cd54:	0800d428 	.word	0x0800d428

0800cd58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cd58:	b480      	push	{r7}
 800cd5a:	b083      	sub	sp, #12
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd64:	f003 0308 	and.w	r3, r3, #8
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d00a      	beq.n	800cd82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	685b      	ldr	r3, [r3, #4]
 800cd72:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	430a      	orrs	r2, r1
 800cd80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd86:	f003 0301 	and.w	r3, r3, #1
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d00a      	beq.n	800cda4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	685b      	ldr	r3, [r3, #4]
 800cd94:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	430a      	orrs	r2, r1
 800cda2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cda8:	f003 0302 	and.w	r3, r3, #2
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d00a      	beq.n	800cdc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	685b      	ldr	r3, [r3, #4]
 800cdb6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	430a      	orrs	r2, r1
 800cdc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdca:	f003 0304 	and.w	r3, r3, #4
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d00a      	beq.n	800cde8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	685b      	ldr	r3, [r3, #4]
 800cdd8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	430a      	orrs	r2, r1
 800cde6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdec:	f003 0310 	and.w	r3, r3, #16
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d00a      	beq.n	800ce0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	689b      	ldr	r3, [r3, #8]
 800cdfa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	430a      	orrs	r2, r1
 800ce08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce0e:	f003 0320 	and.w	r3, r3, #32
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d00a      	beq.n	800ce2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	689b      	ldr	r3, [r3, #8]
 800ce1c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	430a      	orrs	r2, r1
 800ce2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d01a      	beq.n	800ce6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	685b      	ldr	r3, [r3, #4]
 800ce3e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	430a      	orrs	r2, r1
 800ce4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ce56:	d10a      	bne.n	800ce6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	685b      	ldr	r3, [r3, #4]
 800ce5e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	430a      	orrs	r2, r1
 800ce6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d00a      	beq.n	800ce90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	685b      	ldr	r3, [r3, #4]
 800ce80:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	430a      	orrs	r2, r1
 800ce8e:	605a      	str	r2, [r3, #4]
  }
}
 800ce90:	bf00      	nop
 800ce92:	370c      	adds	r7, #12
 800ce94:	46bd      	mov	sp, r7
 800ce96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9a:	4770      	bx	lr

0800ce9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b098      	sub	sp, #96	@ 0x60
 800cea0:	af02      	add	r7, sp, #8
 800cea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2200      	movs	r2, #0
 800cea8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ceac:	f7f5 fc1c 	bl	80026e8 <HAL_GetTick>
 800ceb0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	f003 0308 	and.w	r3, r3, #8
 800cebc:	2b08      	cmp	r3, #8
 800cebe:	d12f      	bne.n	800cf20 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cec0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cec4:	9300      	str	r3, [sp, #0]
 800cec6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cec8:	2200      	movs	r2, #0
 800ceca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f000 f88e 	bl	800cff0 <UART_WaitOnFlagUntilTimeout>
 800ced4:	4603      	mov	r3, r0
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d022      	beq.n	800cf20 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cee2:	e853 3f00 	ldrex	r3, [r3]
 800cee6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ceea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ceee:	653b      	str	r3, [r7, #80]	@ 0x50
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	461a      	mov	r2, r3
 800cef6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cef8:	647b      	str	r3, [r7, #68]	@ 0x44
 800cefa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cefc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cefe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cf00:	e841 2300 	strex	r3, r2, [r1]
 800cf04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cf06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d1e6      	bne.n	800ceda <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2220      	movs	r2, #32
 800cf10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2200      	movs	r2, #0
 800cf18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cf1c:	2303      	movs	r3, #3
 800cf1e:	e063      	b.n	800cfe8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	f003 0304 	and.w	r3, r3, #4
 800cf2a:	2b04      	cmp	r3, #4
 800cf2c:	d149      	bne.n	800cfc2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cf2e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cf32:	9300      	str	r3, [sp, #0]
 800cf34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf36:	2200      	movs	r2, #0
 800cf38:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	f000 f857 	bl	800cff0 <UART_WaitOnFlagUntilTimeout>
 800cf42:	4603      	mov	r3, r0
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d03c      	beq.n	800cfc2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf50:	e853 3f00 	ldrex	r3, [r3]
 800cf54:	623b      	str	r3, [r7, #32]
   return(result);
 800cf56:	6a3b      	ldr	r3, [r7, #32]
 800cf58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cf5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	461a      	mov	r2, r3
 800cf64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf66:	633b      	str	r3, [r7, #48]	@ 0x30
 800cf68:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cf6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf6e:	e841 2300 	strex	r3, r2, [r1]
 800cf72:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cf74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d1e6      	bne.n	800cf48 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	3308      	adds	r3, #8
 800cf80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf82:	693b      	ldr	r3, [r7, #16]
 800cf84:	e853 3f00 	ldrex	r3, [r3]
 800cf88:	60fb      	str	r3, [r7, #12]
   return(result);
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	f023 0301 	bic.w	r3, r3, #1
 800cf90:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	3308      	adds	r3, #8
 800cf98:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cf9a:	61fa      	str	r2, [r7, #28]
 800cf9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf9e:	69b9      	ldr	r1, [r7, #24]
 800cfa0:	69fa      	ldr	r2, [r7, #28]
 800cfa2:	e841 2300 	strex	r3, r2, [r1]
 800cfa6:	617b      	str	r3, [r7, #20]
   return(result);
 800cfa8:	697b      	ldr	r3, [r7, #20]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d1e5      	bne.n	800cf7a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2220      	movs	r2, #32
 800cfb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2200      	movs	r2, #0
 800cfba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cfbe:	2303      	movs	r3, #3
 800cfc0:	e012      	b.n	800cfe8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2220      	movs	r2, #32
 800cfc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2220      	movs	r2, #32
 800cfce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cfe6:	2300      	movs	r3, #0
}
 800cfe8:	4618      	mov	r0, r3
 800cfea:	3758      	adds	r7, #88	@ 0x58
 800cfec:	46bd      	mov	sp, r7
 800cfee:	bd80      	pop	{r7, pc}

0800cff0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b084      	sub	sp, #16
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	60f8      	str	r0, [r7, #12]
 800cff8:	60b9      	str	r1, [r7, #8]
 800cffa:	603b      	str	r3, [r7, #0]
 800cffc:	4613      	mov	r3, r2
 800cffe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d000:	e04f      	b.n	800d0a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d002:	69bb      	ldr	r3, [r7, #24]
 800d004:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d008:	d04b      	beq.n	800d0a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d00a:	f7f5 fb6d 	bl	80026e8 <HAL_GetTick>
 800d00e:	4602      	mov	r2, r0
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	1ad3      	subs	r3, r2, r3
 800d014:	69ba      	ldr	r2, [r7, #24]
 800d016:	429a      	cmp	r2, r3
 800d018:	d302      	bcc.n	800d020 <UART_WaitOnFlagUntilTimeout+0x30>
 800d01a:	69bb      	ldr	r3, [r7, #24]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d101      	bne.n	800d024 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d020:	2303      	movs	r3, #3
 800d022:	e04e      	b.n	800d0c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	f003 0304 	and.w	r3, r3, #4
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d037      	beq.n	800d0a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d032:	68bb      	ldr	r3, [r7, #8]
 800d034:	2b80      	cmp	r3, #128	@ 0x80
 800d036:	d034      	beq.n	800d0a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	2b40      	cmp	r3, #64	@ 0x40
 800d03c:	d031      	beq.n	800d0a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	69db      	ldr	r3, [r3, #28]
 800d044:	f003 0308 	and.w	r3, r3, #8
 800d048:	2b08      	cmp	r3, #8
 800d04a:	d110      	bne.n	800d06e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	2208      	movs	r2, #8
 800d052:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d054:	68f8      	ldr	r0, [r7, #12]
 800d056:	f000 f839 	bl	800d0cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	2208      	movs	r2, #8
 800d05e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	2200      	movs	r2, #0
 800d066:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d06a:	2301      	movs	r3, #1
 800d06c:	e029      	b.n	800d0c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	69db      	ldr	r3, [r3, #28]
 800d074:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d078:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d07c:	d111      	bne.n	800d0a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d086:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d088:	68f8      	ldr	r0, [r7, #12]
 800d08a:	f000 f81f 	bl	800d0cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	2220      	movs	r2, #32
 800d092:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	2200      	movs	r2, #0
 800d09a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d09e:	2303      	movs	r3, #3
 800d0a0:	e00f      	b.n	800d0c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	69da      	ldr	r2, [r3, #28]
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	4013      	ands	r3, r2
 800d0ac:	68ba      	ldr	r2, [r7, #8]
 800d0ae:	429a      	cmp	r2, r3
 800d0b0:	bf0c      	ite	eq
 800d0b2:	2301      	moveq	r3, #1
 800d0b4:	2300      	movne	r3, #0
 800d0b6:	b2db      	uxtb	r3, r3
 800d0b8:	461a      	mov	r2, r3
 800d0ba:	79fb      	ldrb	r3, [r7, #7]
 800d0bc:	429a      	cmp	r2, r3
 800d0be:	d0a0      	beq.n	800d002 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d0c0:	2300      	movs	r3, #0
}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	3710      	adds	r7, #16
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}
	...

0800d0cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d0cc:	b480      	push	{r7}
 800d0ce:	b095      	sub	sp, #84	@ 0x54
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0dc:	e853 3f00 	ldrex	r3, [r3]
 800d0e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d0e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d0e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	461a      	mov	r2, r3
 800d0f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d0f2:	643b      	str	r3, [r7, #64]	@ 0x40
 800d0f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d0f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d0fa:	e841 2300 	strex	r3, r2, [r1]
 800d0fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d102:	2b00      	cmp	r3, #0
 800d104:	d1e6      	bne.n	800d0d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	3308      	adds	r3, #8
 800d10c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d10e:	6a3b      	ldr	r3, [r7, #32]
 800d110:	e853 3f00 	ldrex	r3, [r3]
 800d114:	61fb      	str	r3, [r7, #28]
   return(result);
 800d116:	69fa      	ldr	r2, [r7, #28]
 800d118:	4b1e      	ldr	r3, [pc, #120]	@ (800d194 <UART_EndRxTransfer+0xc8>)
 800d11a:	4013      	ands	r3, r2
 800d11c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	3308      	adds	r3, #8
 800d124:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d126:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d128:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d12a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d12c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d12e:	e841 2300 	strex	r3, r2, [r1]
 800d132:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d136:	2b00      	cmp	r3, #0
 800d138:	d1e5      	bne.n	800d106 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d13e:	2b01      	cmp	r3, #1
 800d140:	d118      	bne.n	800d174 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	e853 3f00 	ldrex	r3, [r3]
 800d14e:	60bb      	str	r3, [r7, #8]
   return(result);
 800d150:	68bb      	ldr	r3, [r7, #8]
 800d152:	f023 0310 	bic.w	r3, r3, #16
 800d156:	647b      	str	r3, [r7, #68]	@ 0x44
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	461a      	mov	r2, r3
 800d15e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d160:	61bb      	str	r3, [r7, #24]
 800d162:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d164:	6979      	ldr	r1, [r7, #20]
 800d166:	69ba      	ldr	r2, [r7, #24]
 800d168:	e841 2300 	strex	r3, r2, [r1]
 800d16c:	613b      	str	r3, [r7, #16]
   return(result);
 800d16e:	693b      	ldr	r3, [r7, #16]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d1e6      	bne.n	800d142 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2220      	movs	r2, #32
 800d178:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2200      	movs	r2, #0
 800d180:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2200      	movs	r2, #0
 800d186:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d188:	bf00      	nop
 800d18a:	3754      	adds	r7, #84	@ 0x54
 800d18c:	46bd      	mov	sp, r7
 800d18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d192:	4770      	bx	lr
 800d194:	effffffe 	.word	0xeffffffe

0800d198 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d198:	b480      	push	{r7}
 800d19a:	b085      	sub	sp, #20
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d1a6:	2b01      	cmp	r3, #1
 800d1a8:	d101      	bne.n	800d1ae <HAL_UARTEx_DisableFifoMode+0x16>
 800d1aa:	2302      	movs	r3, #2
 800d1ac:	e027      	b.n	800d1fe <HAL_UARTEx_DisableFifoMode+0x66>
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	2201      	movs	r2, #1
 800d1b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2224      	movs	r2, #36	@ 0x24
 800d1ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	681a      	ldr	r2, [r3, #0]
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	f022 0201 	bic.w	r2, r2, #1
 800d1d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d1dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	68fa      	ldr	r2, [r7, #12]
 800d1ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2220      	movs	r2, #32
 800d1f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d1fc:	2300      	movs	r3, #0
}
 800d1fe:	4618      	mov	r0, r3
 800d200:	3714      	adds	r7, #20
 800d202:	46bd      	mov	sp, r7
 800d204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d208:	4770      	bx	lr

0800d20a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d20a:	b580      	push	{r7, lr}
 800d20c:	b084      	sub	sp, #16
 800d20e:	af00      	add	r7, sp, #0
 800d210:	6078      	str	r0, [r7, #4]
 800d212:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d21a:	2b01      	cmp	r3, #1
 800d21c:	d101      	bne.n	800d222 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d21e:	2302      	movs	r3, #2
 800d220:	e02d      	b.n	800d27e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2201      	movs	r2, #1
 800d226:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	2224      	movs	r2, #36	@ 0x24
 800d22e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	681a      	ldr	r2, [r3, #0]
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	f022 0201 	bic.w	r2, r2, #1
 800d248:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	689b      	ldr	r3, [r3, #8]
 800d250:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	683a      	ldr	r2, [r7, #0]
 800d25a:	430a      	orrs	r2, r1
 800d25c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	f000 f850 	bl	800d304 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	68fa      	ldr	r2, [r7, #12]
 800d26a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2220      	movs	r2, #32
 800d270:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2200      	movs	r2, #0
 800d278:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d27c:	2300      	movs	r3, #0
}
 800d27e:	4618      	mov	r0, r3
 800d280:	3710      	adds	r7, #16
 800d282:	46bd      	mov	sp, r7
 800d284:	bd80      	pop	{r7, pc}

0800d286 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d286:	b580      	push	{r7, lr}
 800d288:	b084      	sub	sp, #16
 800d28a:	af00      	add	r7, sp, #0
 800d28c:	6078      	str	r0, [r7, #4]
 800d28e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d296:	2b01      	cmp	r3, #1
 800d298:	d101      	bne.n	800d29e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d29a:	2302      	movs	r3, #2
 800d29c:	e02d      	b.n	800d2fa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2201      	movs	r2, #1
 800d2a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	2224      	movs	r2, #36	@ 0x24
 800d2aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	681a      	ldr	r2, [r3, #0]
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	f022 0201 	bic.w	r2, r2, #1
 800d2c4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	689b      	ldr	r3, [r3, #8]
 800d2cc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	683a      	ldr	r2, [r7, #0]
 800d2d6:	430a      	orrs	r2, r1
 800d2d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	f000 f812 	bl	800d304 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	68fa      	ldr	r2, [r7, #12]
 800d2e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2220      	movs	r2, #32
 800d2ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d2f8:	2300      	movs	r3, #0
}
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	3710      	adds	r7, #16
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}
	...

0800d304 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d304:	b480      	push	{r7}
 800d306:	b085      	sub	sp, #20
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d310:	2b00      	cmp	r3, #0
 800d312:	d108      	bne.n	800d326 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2201      	movs	r2, #1
 800d318:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2201      	movs	r2, #1
 800d320:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d324:	e031      	b.n	800d38a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d326:	2310      	movs	r3, #16
 800d328:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d32a:	2310      	movs	r3, #16
 800d32c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	689b      	ldr	r3, [r3, #8]
 800d334:	0e5b      	lsrs	r3, r3, #25
 800d336:	b2db      	uxtb	r3, r3
 800d338:	f003 0307 	and.w	r3, r3, #7
 800d33c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	689b      	ldr	r3, [r3, #8]
 800d344:	0f5b      	lsrs	r3, r3, #29
 800d346:	b2db      	uxtb	r3, r3
 800d348:	f003 0307 	and.w	r3, r3, #7
 800d34c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d34e:	7bbb      	ldrb	r3, [r7, #14]
 800d350:	7b3a      	ldrb	r2, [r7, #12]
 800d352:	4911      	ldr	r1, [pc, #68]	@ (800d398 <UARTEx_SetNbDataToProcess+0x94>)
 800d354:	5c8a      	ldrb	r2, [r1, r2]
 800d356:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d35a:	7b3a      	ldrb	r2, [r7, #12]
 800d35c:	490f      	ldr	r1, [pc, #60]	@ (800d39c <UARTEx_SetNbDataToProcess+0x98>)
 800d35e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d360:	fb93 f3f2 	sdiv	r3, r3, r2
 800d364:	b29a      	uxth	r2, r3
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d36c:	7bfb      	ldrb	r3, [r7, #15]
 800d36e:	7b7a      	ldrb	r2, [r7, #13]
 800d370:	4909      	ldr	r1, [pc, #36]	@ (800d398 <UARTEx_SetNbDataToProcess+0x94>)
 800d372:	5c8a      	ldrb	r2, [r1, r2]
 800d374:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d378:	7b7a      	ldrb	r2, [r7, #13]
 800d37a:	4908      	ldr	r1, [pc, #32]	@ (800d39c <UARTEx_SetNbDataToProcess+0x98>)
 800d37c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d37e:	fb93 f3f2 	sdiv	r3, r3, r2
 800d382:	b29a      	uxth	r2, r3
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d38a:	bf00      	nop
 800d38c:	3714      	adds	r7, #20
 800d38e:	46bd      	mov	sp, r7
 800d390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d394:	4770      	bx	lr
 800d396:	bf00      	nop
 800d398:	0800d440 	.word	0x0800d440
 800d39c:	0800d448 	.word	0x0800d448

0800d3a0 <memset>:
 800d3a0:	4402      	add	r2, r0
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	4293      	cmp	r3, r2
 800d3a6:	d100      	bne.n	800d3aa <memset+0xa>
 800d3a8:	4770      	bx	lr
 800d3aa:	f803 1b01 	strb.w	r1, [r3], #1
 800d3ae:	e7f9      	b.n	800d3a4 <memset+0x4>

0800d3b0 <__libc_init_array>:
 800d3b0:	b570      	push	{r4, r5, r6, lr}
 800d3b2:	4d0d      	ldr	r5, [pc, #52]	@ (800d3e8 <__libc_init_array+0x38>)
 800d3b4:	4c0d      	ldr	r4, [pc, #52]	@ (800d3ec <__libc_init_array+0x3c>)
 800d3b6:	1b64      	subs	r4, r4, r5
 800d3b8:	10a4      	asrs	r4, r4, #2
 800d3ba:	2600      	movs	r6, #0
 800d3bc:	42a6      	cmp	r6, r4
 800d3be:	d109      	bne.n	800d3d4 <__libc_init_array+0x24>
 800d3c0:	4d0b      	ldr	r5, [pc, #44]	@ (800d3f0 <__libc_init_array+0x40>)
 800d3c2:	4c0c      	ldr	r4, [pc, #48]	@ (800d3f4 <__libc_init_array+0x44>)
 800d3c4:	f000 f818 	bl	800d3f8 <_init>
 800d3c8:	1b64      	subs	r4, r4, r5
 800d3ca:	10a4      	asrs	r4, r4, #2
 800d3cc:	2600      	movs	r6, #0
 800d3ce:	42a6      	cmp	r6, r4
 800d3d0:	d105      	bne.n	800d3de <__libc_init_array+0x2e>
 800d3d2:	bd70      	pop	{r4, r5, r6, pc}
 800d3d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3d8:	4798      	blx	r3
 800d3da:	3601      	adds	r6, #1
 800d3dc:	e7ee      	b.n	800d3bc <__libc_init_array+0xc>
 800d3de:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3e2:	4798      	blx	r3
 800d3e4:	3601      	adds	r6, #1
 800d3e6:	e7f2      	b.n	800d3ce <__libc_init_array+0x1e>
 800d3e8:	0800d458 	.word	0x0800d458
 800d3ec:	0800d458 	.word	0x0800d458
 800d3f0:	0800d458 	.word	0x0800d458
 800d3f4:	0800d45c 	.word	0x0800d45c

0800d3f8 <_init>:
 800d3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3fa:	bf00      	nop
 800d3fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3fe:	bc08      	pop	{r3}
 800d400:	469e      	mov	lr, r3
 800d402:	4770      	bx	lr

0800d404 <_fini>:
 800d404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d406:	bf00      	nop
 800d408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d40a:	bc08      	pop	{r3}
 800d40c:	469e      	mov	lr, r3
 800d40e:	4770      	bx	lr
